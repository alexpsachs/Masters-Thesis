{
    "everzet": "I will work on this one, Lukas :v:\n. :airplane: landed\n. I approve this message :+1:\n. Oh. Thanks man. Just wanted to fix this nasty bug and bam - you send me this PR ;-)\n. Merged ;-)\n. I've seen it already. But i don't like many things in their realization. First of all, their REST is not RESTful :-D\n. We can use just substr/strtolower/strtoupper. There will be no non-latin chars in routes or actions names.\n. Almost sure that we don't need different configuration formats for routing. As the whole idea behind it to make things easier - annotations are always here just to tuneup broken things. But implementing yml and xml configurations in addition to autodiscover is overkill.\nAs for other parts (view layer) - i'm not sure.\n. PATCH method is fully supported now ;-)\n. While i completely agree with you about POST method by default for custom actions, i completely against being REST-nazi for custom actions. At least until you give me the way to create a correct RESTful \"new form\" route. Until then, we're talking about limitations of standard and in that case we can't talk about tools purity! This bundle is as RESTful as it can without crossing big red line with \"unusable\" word on it ;-)\n. It seems, that you're trying to load restful route inside default routing configuration. In order to be able to use parent and other rest-specific parameters - you need to move such configs into restful collection.\nThis is wrong:\n``` yaml\napp/config/routing.yml\nusers:\n  type:     rest\n  resource: FOS\\RestBundle\\Tests\\Fixtures\\Controller\\UsersController\nuser_topics:\n  type:     rest\n  resource: FOS\\RestBundle\\Tests\\Fixtures\\Controller\\UserTopicsController\n  parent:   users\n```\nBut this is correct:\n``` yaml\napp/config/routing.yml\nusers:\n  type: rest\n  resource: path/to/your/bundle/routing.yml\n```\n``` yaml\npath/to/your/bundle/routing.yml\nusers:\n  type:     rest\n  resource: FOS\\RestBundle\\Tests\\Fixtures\\Controller\\UsersController\nuser_topics:\n  type:     rest\n  resource: FOS\\RestBundle\\Tests\\Fixtures\\Controller\\UserTopicsController\n  parent:   users\n``\n. Yep, i think metadata lib is the way to go. So this task is just a use-metadatarefactoring ;-)\n. Yeah, we need to overhaul our docs.\n. 1. i don't think that we should support spanish resources autogeneration.\n2. there's still route annotations for places, where autogen doesn't work properly\n. Needs to be updated to support new Routing architecture. But it should be fairly easy as new arch is freaking clean :-D\n. @asm89 rewrite is done and merged. And my point about this PR is simple - you will not have optional controller parameters in case you're defining RESTfull resources :-)\n. And i'm closing this PR as it can't be easily merged now (after refactoring). But feel free to continue discussion if you have concerns.\n. @lsmith77 yup, i see. WIP ;-)\n. @lsmith77 fixed ;-)\n. @stof it could, but there should be a better way - like environments or version passing support :-/\n. +1 for inheritance or some sort of inclusion. @Seldaek ?\n. @lsmith77 yup. Sent PR against wrong branch (points 1 and 3 about that).\nAlso,composer.jsonis broken - it requiresjms/serializer-bundlepackage, which is incompatible withsymfony/symfony <2.1.0-dev. I've movedjms/serializer-bundleback tosuggest` block.\n. DAMN. Again :-D\n. @lsmith77 tests now pass, PR is mergeable ;-)\n. @lsmith77 wait, do not merge it yet. I'll remove extra commits ;-)\n. @lsmith77 rebased. Should be clean and mergable now ;-)\n. @lsmith77 ;-)\n. @lsmith77 i'll check them out tomorrow ;-)\n. @stof i think in case of bundles, we should depend on framework altogether. Bundle can't work without framework and if exact version of framework depends on Twig installation, then Bundle could use it without problems and this dependency should be resolved even if it's not stated explicitly.\nNobody will install bundle dependencies on it's own except CI servers or developers. Bundle will always be installed as a dependency to the framework, inside framework. FrameworkBundle is just one of the bundles (dependencies) of the framework, not the core requirement of any bundle. The real requirement of every bundle is the framework itself, IMO.\n. Yup. Prefixes are added after import. That's why prefixes are always static.\n. @stof @jrgns added \"look at placeholders in prefix possiblity\" to my todo ;-)\n. ok\n. @asm89 agree with both points from @stof \n. @lsmith77 could you give me some reasoning behind this, cuz i'm totally lost (but still interested in understanding) :)\n. @lsmith77 could you give me some reasoning behind this, cuz i'm totally lost (but still interested in understanding) :)\n. @lsmith77 yup, it should've been abstract.\n. @lsmith77 yup, it should've been abstract.\n. @lsmith77 i think we can merge this and hope this will not break things for people. Cuz though change is good, accounting amount of library usages, it could be a big BC break for some folks.\nOr maybe we could bump the bundle version specifically for this one. Just to mark possible BC break?\n. :+1: to @Tobion proposal. I don't have hard opinion here as i'm using yml for routes. That's probably the reason why it wasn't been done correct in the first place :)\n. @lsmith77 @tystr indeed. Agree.\n. I don't think that doing preg_match on every all() call is a good way to go.\n. Ah, missed red lines. Yeah, one call surely would be faster. So in some sort you even optimized it :D I'll give it a go if tests still pass, @lsmith77 !\n. I don't have even faint ones :(\n. I don't have even faint ones :(\n. Oh :-) We need class specifications or unit-tests!\n. It's not something huge to move it into separate repo. I think we just need to create clean extension points, which Silex can tuneup by simpe override. Like:\nprotected function getEncoder($formatName)\n{\n    return $this->container->get($formatName);\n}\n. @stof yup\n. ",
    "lsmith77": "done\n. see also https://github.com/symfony/symfony/pull/192\n. Or would this be better handled by a custom Request class that would be used in the front controller instead of Request::createFromGlobals() ?\n. the bulk of the work should be done with https://github.com/FriendsOfSymfony/RestBundle/blob/master/View/RequestListener.php\n. no .. we for the most part only care about the validator that is embedded or not embedded in a form object. i will update the ticket title accordingly.\n. for validator instances we already have a solution:\nhttps://github.com/FriendsOfSymfony/RestBundle/blob/master/Serializer/Normalizer/ValidatorConstraintViolationListNormalizer.php\nfor form instances there is some initial work here:\nhttps://github.com/FriendsOfSymfony/RestBundle/pull/14\n. closing this one .. there is now FOS\\RestBundle\\Response\\Codes to facilitate using of the proper status codes. Setting the status code is now supported on FOS\\RestBundle\\View\\View and finally FOS\\RestBundle\\Controller\\ExceptionController has been fixed and support for mapping Exception classes to status codes has been added.\n. Eventually we will want to let people handle this via accept headers, but for now it seems like this is the only way to support it. Once we have the accept headers we will probably want to add some way to instead use and check the accept headers.\n. people can either extend the exiting request listener or register their own\n. yeah i agree .. versioning via the URL is ugly ..\ni guess for this we should expand the routing layer to add a way to add versioning information?\n. since working on accept header support, i am starting to believe this is again more a job for a listener. then again it will be much more common to dispatch to a different controller here compared to when dealing with accept headers. so I guess the approach to take is to dynamically determine the right controller via some naming convention inside the onControllerListener\nAka try to find the Controller for versions 1.1 first in Controller/FooControllerV1.php (I would prefer a v1 subdir, but I am not sure how well this is supported in ControllerResolver::createController()) and then fallback to Controller/FooController.php when not defining Controllers as services. Obviously something similar for controllers defined as services via a naming convention for services.\nIn both cases the version would of course need to be made available via the Request object.\n. Looking at ControllerNameParserTests it seems subdirs would be possible:\n$this->assertEquals('TestBundle\\FooBundle\\Controller\\Sub\\DefaultController::indexAction', $parser->parse('FooBundle:Sub\\Default:index'), '->parse() converts a short a:b:c notation string to a class::method string');\n. @merk: are you still looking into this?\n. I think it would be good to support both, but this should not lead to bad compromises for the media versioning which is the right way (tm) to do this.\nI think a current alias would be a nice touch.\nI think the versioning should be optional.\n. Yes with such a syntax we could find all the different controllers. The version the controller supports would need to be mapped somewhere. Now the user could choose to do the matching in the URL, for which we could generate the full paths, but like I said, I think this is not the priority.\nFor media versioning, we would then need a Controller Listener that matches the supplied header to the right controller.\n. Yes I think we should allow mapping this out via annotations/xml/yaml.\nThe * glob for services is of course tricky, but should still be possible somehow.\nAnd yes obviously adding support for URL versioning is the easier bit. Not 100% sure on the terminology, but that is bike shedding, but I think its good to support this per route, so people can easily migrate parts of their site\n. Sure, but I think this should only be an intermediate step. I mean implementing glob support for looking up keys in an assoc array should be totally doable and its all cached, so its not a performance issue.\n. So I guess what we should support is:\n- resource can be an array of resources\n- resource definitions can include glob\n- the resources themselves will need to explicitly map the versioning (aka its not derived out of the namespace)\n. I think we should encourage being explicit. So versioning should be explicitly enabled. I guess the \"versiontype\" (still not sure about the name) can default to \"media\".\nBut I guess we could support multiple resources even without versioning.\n. OK, I do not know the loader system very well, since @everzet wrote this code originally. Maybe we can get @vicb to give us some hints? :)\nSo but yes maybe the controllers will still need to be configured separately. BTW just so we do not forget, aside from a \"current\" alias, we might also want to optionally support a \"fallback\" which is called when the version didnt match any configured controller. This fallback could then be used for more complex dispatching and error handling. Not thought this through entirely so just writing it as a brain dump so its not forgotten.\n. Yes, I did intend to ping you. If you have a look at the above discussion. Essentially we are looking to generate routes from multiple \"resources\" aka Controllers at once. So just wondering if you have some ideas how we could best do this without \"raping\" the loader interfaces too much.\n. ok, took a first stab at this .. but it seems to me like what needs to happen is that we need a custom implementation of the RouterListener to handle both the Accept header handling for both figuring out the proper format and version, since all of this needs to be done at the same time.\n. here is another good resource on the topic http://barelyenough.org/blog/2008/05/versioning-rest-web-services/\n. moving the discussion to https://github.com/FriendsOfSymfony/FOSRestBundle/pull/136\n. Great! I will try to play with it tomorrow. Sorry for being so picky about formatting stuff, but its just very important for me :)\n. that sounds odd. isnt this exactly what is needed ehen rendering so FormView must be able todo this properly.\nLukas\nOn 03.05.2011, at 12:21, johnwards reply@reply.github.com wrote:\n\nOkay I've had a chat with @bschussek about validation and he is of the opinion that it is too hard do do correctly and error free with the way the Form and Validation component is setup at the moment. Trying to map the errors and constrains to the correct fields is difficult.\nI am going to skip form constrains stuff for now. I'm going to start using the output of this normalizers this week so we'll see if they are of any use in real world usage\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/RestBundle/pull/14#issuecomment-1092955\n. Yeah. I havent tested this at all and I do not have an intimate knowledge of the Form layer either, but since you discussed it all with Bernhard I assume that things are as good as they are currently possible.\n. @Seldaek: Actually I think all of this should be done inside the FrameworkBundle. It should have a DIC aware Serializer that is configured to lazy load normalizers/encoders.\n. The RestBundle Serializer now supports normalizer/encoder lazy loading:\nhttps://github.com/FriendsOfSymfony/RestBundle/blob/master/Serializer/Serializer.php\n\nhttps://github.com/lsmith77/symfony-standard/commit/b432db5a9296172d5064a95d606d9e1173732974\n@johnwards: Can you a submit a PR for the noopNomalizer as well as the changes that Jordi mentioned in the xml encoder\n. @Seldaek: let me know if you want to move the DIC aware Serializer to core. or rather .. if you want it in core just move it yourself :)\n. fixed\n. done\n. lets close this one in favor of #101 and #103\n. lets close this one in favor of #101 and #103\n. I have seen others suggest to use 422 for this.\n. @Seldaek: in regards to the serializer the idea was more that the normalizer would have a reference to the view layer injected so that when normalizing a form/validator instance the normalizer could then set the status code in the response stored in the view layer (sigh how nice it would be to have eager response).\n. The bulk of the feedback I have gotten via twitter said 400 would be best.\n. BTW: I have started a discussion on the FOS mailinglist about the issue of how to identify the form/validator instance inside the parameters:\nhttp://groups.google.com/group/friendsofsymfony-dev/browse_thread/thread/b000005a7c48d192\n. Check the http://getfrapi.com/ screencast for some inspiration.\n. \"inspiration\" and I wasn't talking about their rest but their doc (and test) generation :)\n. odino: sure. but there are things like the fact that even if you follow HATEAOS you need to inspect headers. also while you should know to expect different status codes, its still good to know what status codes are \"more likely\". its just nice for casual review of the API.\nalso another topic that should be ignored: some clients just like killing trees and its nice to not have to waste a lot of time filling this pages of paper :)\n. a separate Bundle sounds like a good idea. if we only support swagger we might want to say so in the Bundle name. i dont know if we also want to support something else. depends on your motivation and the quality of swagger. one question about swagger: how does that work with internal API's that one doesnt want to expose to an external service?\n. ok good. once things have shaped up .. we can move it to FOS\n. closing in favor of https://github.com/nelmio/NelmioApiDocBundle\n. could you give an example of what you mean?\n. heh, try I guess .. so let me fix it then\n. as we are moving all the serializer stuff over to JMSSerializerBundle this is no longer relevant\n. Well thats sort of the goal, move them from the server session into the browser.\n. Fixing other Bundle is beyond the scope of this Bundle. If you want to JSON-fy 3rd party Bundles I recommend looking at https://github.com/liip/MultiplexBundle\n. Maybe I didnt understand your request, but if you want to JSON-ify UserBundle actions, the MultiplexBundle does what you need, since it allows you to define what format you want returned. If you need something else could you maybe come up with a php example?\n. I still dont get what the RestBundle is supposed to do here.\n. I still dont think this should be part of RestBundle, but I guess you can create a Response listener that does something. Still I dont know what the Response listener is supposed to do with the content of the 3rd party bundle. But if you got something you can send a PR and we can discuss further.\n. I am not sure I understand 100%. You have Accept header enabled, but you are using a 3rd party Bundle that doesnt have the view layer enabled, right?\nAnd what happens now? The format is changed in a way you dont like, or the format is not changed as per the Accept header?\nAgain giving a concrete example might help me understand what the issue is.\n. This might help you. At any rate I changed how the Accept header is parsed. The config option was renamed to \"format_priorities\" and allows setting how to resolve ties:\nhttps://github.com/FriendsOfSymfony/RestBundle/commit/02916d4afbebc1d1e72dbafd5ab938960745c18f\n. OK, discussed the general topic a bit with Jordi and we decided the best thing would be to move the entire format matching into a custom route matcher. If all goes according to plan the Accept header handling would then be triggered on a per route basis.\nSee https://github.com/FriendsOfSymfony/RestBundle/issues/28\n. See https://github.com/FriendsOfSymfony/RestBundle/compare/controller_listener\nOnly thing missing is a set of loaders (annotation, yaml, xml) to be able to define the per action priorities\n. ok the branch is merged. open task is here now https://github.com/FriendsOfSymfony/RestBundle/issues/30\n. done\n. done\n. can you use double quotes instead. not sure why, but i prefer double quotes in yaml :)\n. yes please\nLukas\nOn 03.05.2011, at 23:09, lenar reply@reply.github.com wrote:\n\nI could. I actually looked at other examples, and 'View support' and 'ExceptionController support' also had single quotes.\nShould I convert those too and add to this pull request?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/RestBundle/pull/31#issuecomment-1096447\n. i will merge tommorrow. \n\nLukas\nOn 06.05.2011, at 20:01, Seldaek reply@reply.github.com wrote:\n\n@lsmith77: This should be merged, I got some patch I'd like to push but it conflicts with this and I'd like to clean up once this is merged. Also I experienced the same 400 issue.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/RestBundle/pull/32#issuecomment-1112688\n. no longer relevant with the move to JMSSerializerBundle\n. i can reproduce the issue .. looking into it.\n. as #185 is now merged it could help a lot in providing necessary information.\n. this is now more or less covered\n. BTW there is also https://github.com/FriendsOfSymfony/RestBundle/blob/master/Serializer/Normalizer/ValidatorConstraintViolationListNormalizer.php .. I created the normalizer you patched sort of in a hurry. not sure if the list normalizer should be dropped or reuse the non list one.\n\nanyway i think i took inspiration from @johnwards form normalizers here ..\n. yeah that is what i figured, though it was used at some point .. but maybe something was changed in the Serializer.\n. what do you guys think, should we move all listeners to one directory?\n. ok .. go ahead and do your thang\n. could you elaborate on the case? should we then cast to an array?\n. maybe a !empty() check would then be better?\n. Hmm, I cannot reproduce the issue:\nhttps://github.com/liip/HelloBundle/blob/master/Controller/ExtraController.php#L22\n. fixed in another commit\n. will be fixed soon:\nhttps://github.com/FriendsOfSymfony/RestBundle/pull/55\n. yes .. SerializerBundle changed quite a bit .. I have a new branch in this repo called \"serializer_bundle\" which fixes that. but i am working on some general cleanups between core and that bundle that this branch depends on. hope to get this resolved over the course of the week.\n. this issue will hopefully soon be fixed https://github.com/symfony/symfony/pull/1128\n. should be fixed now\n. could you also add something to the README (and ideally also a test)?\n. Have a look here:\nhttps://github.com/symfony/symfony/tree/master/src/Symfony/Bundle/SecurityBundle/Tests/Functional\n. ok, i have learned a lot about REST in the past months and I have come to the conclusion that i don't like this feature anymore. it always irked me a bit but now i have an example where its clearly causing issues.\nlet take for example the resource /foo now to edit it would be /foo/edit but if there is also a resource foo/edit?\nso imho it would make more sense to use /foo?edit and i also think it would also be more in the spirit of REST and keeping this feature encourages abusing the path metaphor of URLs.\nof course i realize that this means that you will have to handle the displaying and editing via the same controller action (of course that method could then split things off in two methods).\n@everzet, @merrix: what do you think about removing this feature?\n. hmm as we are considering overriding the default router to handle proper content type negotiations, we might be able to also include some handling for this so that we could also provide support for defining the actions methods as is currently possible. aka we would only change the URL pattern and then have some logic inside the router.\n. for new you can make the case, for remove as well depending on what you return. but edit is really just a representation of the same resource.\nalso assuming that you have a pluralized collection is also imho too much. take for example just a normal file system. or better yet someone exposing their PHPCR tree structure where admins are allowed to edit the content: /some/path/edit is just wrong\n. yes that is what i am proposing. as mentioned above, we might be able to add something into the custom RouterListener we are working on for content type negotiation, that can also (optionally?) handle pointing things at different action methods based on these conventions.\n. Well I don't like \"form\" because with stuff like createjs.org form's are on their way out.\nFurthermore we are following semi established standards here .. that do indeed go beyond what REST even attempts to cover.\n. Well I don't like \"form\" because with stuff like createjs.org form's are on their way out.\nFurthermore we are following semi established standards here .. that do indeed go beyond what REST even attempts to cover.\n. afaik this is already support. have a look in the getMethod method in the Request class. \nLukas\nOn 13.06.2011, at 20:00, merrix reply@reply.github.com wrote:\n\nWhen keeping in mind that many users will be using the RestBundle's routing to create Restful web applications (not just API's), you need to consider forms in HTML which are the primary drivers of application state for this medium.\nForms don't have the capability to PUT or DELETE (yet) so we should allow some sort of hinting towards these actions. In Zend Framework's implementation of Zend_Rest_Route they simply allow POST requests with ?_method=PUT or ?_method=DELETE appended to the URL. Not necessarily sold on this implementation but think we need to have support for this.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/RestBundle/issues/70\n. hmm .. i think there is a misunderstanding what this feature does. the purpose is to configure for which exceptions the message should be shown in the final output.\n. no problem. please let me know if you have ideas for improving the documentation.\n. hmm i kind of agree .. @merrix you add this .. whats your take?\n. @vladar: i have merged @merrix pull. does that solve this ticket for you? if not please reopen.\n. i think @everzet added those .. what do you think?\n. @vladar: could you cook up a pull to make the necessary corrections?\n. you need to use the https://github.com/lsmith77/SerializerBundle/tree/use_core branch.\n. Well in the Symfony Standard syntax you just need to specify a version:\nhttps://github.com/symfony/symfony-standard/blob/master/deps#L12\n\nFor submodules all you have to do is check out the given branch and then commit the sha that is set.\n. fyi @merrix\n. see also https://github.com/ruudk/OAuthBundle\n. yeah .. i agree .. a separate bundle would be better if it doesnt get into core.\n. we currently have our own token solution that integrates with cas which is not open source though because its tightly integrated with some client specific features that we do not have time to separate.\n. lets see what happens here .. https://github.com/jfsimon/SsoAuthBundle\n. looks like there was some progress recently .. but only CAS support for now.\n. i think its worth exploring adding some (more) token support into core /cc @schmittjoh\n. so can we close this ticket now?\n. sigh .. this is caused by the recent changes in parameter injection ..\nanyway .. the situation is screwed up anyway .. \nSerializerBundle is now conceptually incompatible with core as it doesnt support encoding/decoding anymore.\nso what needs to be done is to maintain a proper fork of the SerializerBundle either inside RestBundle .. or as a FOSSerializerBundle. the thing is i am not so keen on maintainer either one.\n. well the \"why\" is sort of explained by the docs in each of the bundles. the main feature of serializerbundle is lazy loading of normalizers. moreover you can skip configuring normalizers all together and use annotations on your objects.\n. should be fixed now https://github.com/lsmith77/SerializerBundle/commit/1e1e2bd695b814008d3a7ff949d3afb0dbca6eb7\n. @stof: how would that be possible?\n@boekkooi: can you send a PR with the fix?\n. @boekkooi: ok can you check what @stof said and send a PR? thx\n. if you dont set a fallback_format it should already work like that.\n. ah sorry .. was answering emails in between talking with a client today .. \nso yes .. would make sense i guess. not sure if it even should be configurable then. we could just check of the Content-Type is empty and if so use Request::getRequestFormat() which itself defaults to 'html' which would mean that no decoding would be triggered since html doesnt support decoding.\n. if you are feeling up for it would be great if you could also add a unit test. thx.\n. yup thx.\n. fixed in https://github.com/FriendsOfSymfony/RestBundle/commit/b8962c0199a6acd027cb30ca70ff4d78f8532d10\n. kinda in a hurry with work stuff .. if you could send a PR for that would be nice ..\n. hmm, adding the following to Tests/bootstrap.php doesnt seem to do the trick:\nuse Doctrine\\Common\\Annotations\\AnnotationRegistry;\nAnnotationRegistry::registerLoader(function($class) use ($loader) {\n    $loader->loadClass($class);\n    return class_exists($class, false);\n});\nAnnotationRegistry::registerAutoloadNamespace('FOS\\RestBundle\\Controller\\Annotations', __DIR__.'/../Controller/Annotations');\n. You mean the generated routes? I guess we need to add some sorting before we dump the routes then .. @everzet?\n. Can you give me an example here?\n. I dont think the annotation parsing needs to be linked to FrameworkExtraBundle, but overall I am not so happy with all the annotation vs. xml/yaml handling. I think it all needs a rewrite on top of the metadata lib. I think @merk was looking into this as part of #12. What do you think @everzet?\n. what option?\nyou definitely need to disable the view listener in the framework bundle:\n```\napp/config.yml\nsensio_framework_extra:\n    view:    { annotations: false }\n```\nsee also https://github.com/liip/LiipHelloBundle/blob/master/Controller/ExtraController.php\nand https://github.com/lsmith77/symfony-standard/blob/techtalk/app/config/config.yml\n. hmm the translations can be disabled, so imho we should make this support dynamic. aka we could inject it with on-error-ignore and then check if we have a translator or not in the normalizer. what do you think @johnwards?\n. this PR might help https://github.com/lsmith77/SerializerBundle/pull/1\n. fixed\n. how do you even get the performance tests to run?\n. will leave it closed as i am working on going back to master of the JMSSerializerBundle:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/99\n. will leave it closed as i am working on going back to master of the JMSSerializerBundle:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/99\n. Aside from updating the README .. the big task left is to port all the custom normalizers from https://github.com/FriendsOfSymfony/FOSRestBundle/tree/master/Serializer/Normalizer to whatever JMSSerializerBundle expects these days. @schmittjoh could you help me there?\n. Aside from updating the README .. the big task left is to port all the custom normalizers from https://github.com/FriendsOfSymfony/FOSRestBundle/tree/master/Serializer/Normalizer to whatever JMSSerializerBundle expects these days. @schmittjoh could you help me there?\n. it will require JMSSerializerBundle after these changes .. however we should now align the core interfaces with JMSSerializerBundle\n. it will require JMSSerializerBundle after these changes .. however we should now align the core interfaces with JMSSerializerBundle\n. see also https://github.com/schmittjoh/JMSSerializerBundle/blob/master/Serializer/Handler/DateTimeHandler.php\n. see also https://github.com/schmittjoh/JMSSerializerBundle/blob/master/Serializer/Handler/DateTimeHandler.php\n. ok thx .. maybe @mazen, @merrix or @johnwards is willing the help .. ?\n. @yethee maybe you can lend a helping hand here?\n. great .. i would that that is @schmittjoh's call.\n. looks like its merged .. so guess they should go into JMSSerializerBundle\n. they are all for form/validator classes, so lets add them all to JMSSerializerBundle. basically we are not missing the ConstraintViolation and ConstraintViolationList as well as Form, FormTypeInterface and FormView normalizers to be ported.\n. see also https://github.com/FriendsOfSymfony/FOSRestBundle/pull/106\nthe main things still left\n1) update docs (mostly done, still stuff left but thats more part of #103)\n2) update tests (Tests: 70, Assertions: 634, Failures: 12, Errors: 4.)\n3) move all missing Normalizers over to JMSSerializerBundle (@yethee has made some progress there already)\n. we are getting closer .\nsee https://github.com/FriendsOfSymfony/FOSRestBundle/pull/99#issuecomment-1819922\n. puh .. getting there .. slowly .. Tests: 68, Assertions: 656, Failures: 7.\n. so .. havent checked the code coverage .. but all old tests are passing now ..\nso anything left? still wondering about the errors that @yethee got while using the ExceptionController\nthere might be some small issues left in the docs ..\n. no. anyone want to write some? :)\n. Sure! But I have my hands full with other things, but its one of the ways other people can help out :)\n. I am always around to help, just dont have the energy to drive this forward.\nI would suggest you first start this as a fork of Symfony SE on your own account. Once its in a state that allows evaluation you can submit it for inclusion into FOS. Ok?\n. just did a commit to improve things a bit .. let me know how things could be improved further\n. ok, will look into adding some cross linking.\n. small correction .. $this->container->get('request') was not necessary before either.\n. Ok, what is still left to do?\n1) update tests\n2) add phpdoc comments\n3) update Configuration class to match FOSUserBundle's\n. @yethee: that would be great!\n. the @View annotation requires https://github.com/sensio/SensioFrameworkExtraBundle/pull/57\n. ok .. now all that is left is to update the tests and the documentation as well as @yethee tweak to the Configuration class\n. merged this into the jms_serializer_bundle branch\n. this is intentional. View defaults to twig as the engine and so this should be automatically added later. this way its theoretically possible for someone to add .php or whatever other engine templates and have things work.\n. temporary fix for what? it should work as is ..\n. hmm something else must be wrong then .. the engine should be set inside the ViewHandler::createResponse() which should be used by the ExceptionController\n. hmm something else must be wrong then .. the engine should be set inside the ViewHandler::createResponse() which should be used by the ExceptionController\n. i reopend the PR until we find the cause of the problem and fix it even if its done in a separate PR\n. i reopend the PR until we find the cause of the problem and fix it even if its done in a separate PR\n. did you have a chance to analyze why the engine isnt being set automatically by the ViewHandler based on the default in the View?\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/jms_serializer_bundle/View/View.php#L48\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/jms_serializer_bundle/View/ViewHandler.php#L228\n. ok .. merging this. since the templates do not exist out of the box its fine that users need to override the controller to add them. aside from this i will add a defaultEngine config parameter used in the ViewHandler which isnt directly relevant, but could be used inside a custom ExceptionController.\n. oh .. didnt check .. but thats fine too.\n. Where else would one want to reuse this logic? Anyway, I am open to the idea, but its not very high priority to me.\n. unfortunately no.\n. closing this one .. dont really see a need for the other listeners and we can open a new ticket on a case by case basis.\n. could you add the missing license headers?\ncould i also entice you to look into implementing #30 along with some tests for this listener?\n. no the plan was to implement this on the controller level. the idea being that if a controller really doesnt like the format, its easier to handle it there with a forward than to try and squeeze this into the routing.\nas for being \"intrusive\" imho if one is concerned about this, its always easier to just setup another kernel, rather than to try and make things configurable on a per route/path basis.\n. just stumbled over https://github.com/jdewit/GeneratorBundle .. didn't review the code at all yet, but it sounds like it could be what I wanted to cover with this ticket\n@jdewit ?\n. i suspect he plans to suggest this Bundle to FOS eventually ..\n. @jdewit: well in its current state it doesn't use the FOSRestBundle View layer, which would make stuff like switching the template engine a lot cleaner.\n. well it needs to be enabled, so just do not enable it. however i will move this listener over to LiipCacheControlBundle as its main purpose is to help with ESI caching.\n. ah, i see now that the listener might now be enabled by default.\n. duplicate of #20\nsee also https://github.com/pminnieur/FOSRestApiExplorerBundle\n. i assigned the ticket to @everzet .. in the mean time have a look at the unit tests .. you might find your answer there.\n. @tarjei: thx .. merged. i made some more minor tweak to the code. also a hint .. never create a PR in master .. always create a branch when you prepare a PR. otherwise you are in trouble if we ever choose to not merged one of your PR's.\n. what is the accept header that is send with the given requests? you may need to either: add css/js to the default priorities or you need to set enable prefer_extension (the later was a recent behavior change, that we might need to revert).\n. ok prefer_extension is now on by default.\n. please follow the installation instructions .. this bundle requires that you install JMSSerializerBundle ..\n. this is unrelated to this bundle ..\n. well i also agree that we cannot support all languages, but we might be able to make it extensible.\n. ok looks good now. will need to run the tests. one minor detail i am wondering .. should we move this into the Decoder namespace instead of adding a DecoderProvider namespace? just to prevent too many root folders.\n. Sure please send a PR for this.\n. ok .. decided to reopen the ticket until you can send a tweak for the doc\n. i didnt make in depth tests. but as VIew extends from Template i expected it to support everything. \nwhat exactly is happening that makes you think ot doesnt work?\nLukas\nOn 25.09.2011, at 15:29, Leevi Graham reply@reply.github.com wrote:\n\nHi Guys,\nI've been playing with the RestBundle and JMSSerializerBundle and I think I've found an issue with the @View() annotation. I expected the @View() annotation to take the same style parameter as the @Template() annotiation in the FrameWorkExtraBundle. This doesn't seem to be the case (although I'm not sure it should be).\nExample:\n@Template(\"BlackRookTaskBundle:Activity:show\")\nvs\n@View(\"BlackRookTaskBundle:Activity:show.html.twig\")\nThoughts?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/130\n. * @View(\"LiipHelloBundle:Hello:hyphenator.html.twig\") works just fine for me, but the issue might be that you are loading SensioFrameworkBundle after FOSRestBundle in your Kernel?\n. Like I said, by \"design\" it should behave exactly the same and I have no clue why it doesn't.\n. ok .. i managed to reproduce the issue .. debugging ..\n. @leevigraham: can you paste bin exactly the code you are using that works and that doesn't?\n. please note i also just submitted a fix that should change the behavior of @Template\n. Ok, but with @Template you can really have it work with http://pastebin.com/UQRunGdb ? because i cannot get it to work like that and from looking at the code i don't see how it would work.\n. no worries .. did find another potential bug while i was searching :)\n. i was waiting on @everzet as he worked on the changes and didn't merge them .. if you have comments on the changes can you add them to #123 ?\n. I havent tested this code well, but I think its because you are not sending XML as the content body, which is causing the body listener to explode. You can either disable the format listener. But the right thing to do would be to make the body listener able to better deal with \"malformed\" content .. aka currently it expects a JSON/XML request to contain a body with the same content type.\n. no .. basically the notes in the PR description are still valid, but its a fair bit of work and i haven't been able to work on it further ..\n. this PR is currently idling unfortunately.  but yes thats the idea and we should support this right now already. aka allow setting the serializer version via the View class. \n\nregards,\nLukas\nOn 22.03.2012, at 10:43, Oleg Zinchenko reply@reply.github.com wrote:\n\n@lsmith77 will you add object versioning from JMSSerializerBundle doc link ?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/136#issuecomment-4642533\n. this PR is currently idling unfortunately.  but yes thats the idea and we should support this right now already. aka allow setting the serializer version via the View class. \n\nregards,\nLukas\nOn 22.03.2012, at 10:43, Oleg Zinchenko reply@reply.github.com wrote:\n\n@lsmith77 will you add object versioning from JMSSerializerBundle doc link ?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/136#issuecomment-4642533\n. see also https://github.com/winmillwill/BadFaith\n. no .. there is no progress here aside from some general improvements to better integrate JMSSerializerBundle inside the View class. that BadFaith lib is however slowly, but surely, maturing.\n. no .. there is no progress here aside from some general improvements to better integrate JMSSerializerBundle inside the View class. that BadFaith lib is however slowly, but surely, maturing.\n. the key thing is improving the support fir mime types inside the routing. this is the basis for mime type based versioning. see the link to the BadFaith lib. it seems like Flow3 1.1 will also feature a solution for Accept header negotiation which could serve as an inspiration. \n. the key thing is improving the support fir mime types inside the routing. this is the basis for mime type based versioning. see the link to the BadFaith lib. it seems like Flow3 1.1 will also feature a solution for Accept header negotiation which could serve as an inspiration. \n. personally i am not too interested to work on that. also i dont think doing url based versioning is so hard to do right now already since for that mainly all you need is url pattern based routing which already exists and then you just point to different controllers leveraging inheritance where needed. \n. personally i am not too interested to work on that. also i dont think doing url based versioning is so hard to do right now already since for that mainly all you need is url pattern based routing which already exists and then you just point to different controllers leveraging inheritance where needed. \n. here is what the flow3 guys did for routing with content type negotiation:\nhttps://review.typo3.org/#/c/11683/1\n. see also https://github.com/symfony/symfony/pull/5711\n. nope. https://github.com/symfony/symfony/pull/5711 is stalled which seemed like the most promising initiative for a while.\n. yes .. there is some progress in terms of a better content negotiation lib with https://github.com/willdurand/Negotiation but now the big task is left of integrating it within the Routing system\n\n/cc @willdurand \n. we could maybe do a simple solution that will likely work in more than 80% of the cases. we could have a very early listener that looks at the media type and if it finds there is only one then we attempt to extract a version via a convention (optionally via some callback). this version is set as a request attribute and can therefore be checked via a route requirement. \n. anyone want to try and implement it? :)\n. anyone want to try and implement it? :)\n. what about using the default then?\n. what about using the default then?\n. i was thinking the route defaults .. but they obviously don't exist yet .. so nevermind.\nbtw .. do you really think it makes sense to add this feature to that Bundle rather than adding it here?\n@tobion .. maybe you can help here?\n. i was thinking the route defaults .. but they obviously don't exist yet .. so nevermind.\nbtw .. do you really think it makes sense to add this feature to that Bundle rather than adding it here?\n@tobion .. maybe you can help here?\n. glad to hear that.\n. so maybe we should provide an optional controller to fetch csrf tokens?\n. you mean adding a controller that allows retrieving a card token via a REST api? \n. fixed documentation:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/commit/48e26abe4ab1f6e2353771706c32ea4bdb6516cb\n. could you elaborate a bit more on how you are using FOSRestBundle?\nare you using the route generation and you are looking to be able to do OPTIONS requests?\ni guess in theory we could generate a route for OPTIONS as well and then respond to these requests via a Request listener ..\n@everzet?\n. i am not so familiar with WSSE .. but the approach i describe above should do the trick. aka we would need to also generate a route that matches on the OPTIONS Http method but that is handled via a response listener so that it never gets to any action.\n. are you interested in working on this?\n. btw .. during the route generation we can add some defaults to the route which the request listener could look for to determine a) if to respond b) which method are ok .. this way the listener would not need to do a lot of work\n. great!\nthis class handles the route generation:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Routing/Loader/RestRouteLoader.php\n(it also handles annotations .. there are two other classes to handle yml/xml configuration).\nas for the event listener there are a couple examples in the bundle\n. i merged this .. but will need to modify things a bit more .. since even without templates i would want the parameters to be read and added to the view\n. an no .. never mind .. all has well\n. hmm i guess i used in_array for performance reasons, then again i guess exceptions shouldn't happen all that often so we could iterate and do an instance of check. can you work on a PR for this?\n. fixed by #147\n. shouldn't is_a do the trick?\nhttp://ch.php.net/manual/en/function.is-a.php\n. i think you can get the previous Exception instance via the getPrevious method\n. ok thx for this analysis. i will try to review your PR tonight.\n. thx .. i merged the code with some minor refactorings and a small bug fix\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/commit/4efd660c78cdb5262a9e1ebdedd9250bf7e0e390\n. hmm .. well .. this means people are blindly pasting config around? seems like a very bad idea to not even attempt to read the lines. and if they don't .. why would they read any documentation?\n. i don't really see the point in cluttering the docs with warnings about things that to me would seem obvious .. aka read and try to understand what is said ..\n. anyway ... can you remove that comment. if at all we can add a general comment at the very top that all configuration examples are indeed examples and therefore should be read instead of blindly pasted.\n. I never used ParamConverter .. so it would be great if you could look into this. I am of course available in case you have questions. Either via github or on in #symfony-dev on free node IRC\n. thx for this!\njust to let you know. i saw your comment. having a bit of a hard time finding time to work through this.\nOn 17.11.2011, at 01:24, Jonathan Ingram reply@reply.github.com wrote:\n\nOK some more checking and it appears that it does not work as expected, primarily, it seems because we have a @Route(\"/sites\") prefix.\nIf I can paste some code from https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Routing/Loader/RestRouteLoader.php#L299, perhaps you might understand what is happening:\nforeach ($resources as $i => $resource) {\n       if (null !== $resource) {\n           $routeName .= '_' . basename($resource);\n       }\n```\n   if (!empty($this->prefix) && $i === count($this->parents)) {\n       $urlParts[] = $this->prefix;\n   }\nif (isset($arguments[$i])) {\n       if ($patternStart) {\n           // We go into this if\n           $urlParts[] = strtolower($patternStart) . '/{' . $arguments[$i]->getName() . '}';\n       } elseif (null !== $resource) {\n           $urlParts[] =\n               strtolower(Pluralization::pluralize($resource)) . '/{' . $arguments[$i]->getName() . '}';\n       } else {\n           $urlParts[] ='{' . $arguments[$i]->getName() . '}';\n       }\n   } else {\n       if ($patternStart) {\n           $urlParts[] = $patternStart;\n       } elseif (null !== $resource) {\n           $urlParts[] = strtolower($resource);\n       }\n   }\n```\n}\nLook for my comment within that block to see what the code does. Here, we do have a $patternStart equal to sites. So, we are going to end up with $urlParts equal to sites/{site} (after it is imploded with / - also remember that our argument name is site, hence the {site}\nThe problem we are about to see is that if we have a method annotation @Get(\"/{id}\"), it is not used, but rather the argument name site is.\nThen in the next block of code,\n// Implode it as I said above\n   $pattern        = implode('/', $urlParts);\n   // ...\nforeach ($this->annotationClasses as $annotationClass) {\n       $routeAnnnotation = $this->reader->getMethodAnnotation($method, $annotationClass);\n```\n   if (null !== $routeAnnnotation) {\n       $annoRequirements   = $routeAnnnotation->getRequirements();\n   if (!isset($annoRequirements['_method']) || null === $annoRequirements['_method']) {\n       $annoRequirements['_method'] = $requirements['_method'];\n   }\n\n   // *\n   $pattern        = $routeAnnnotation->getPattern() ?: $pattern;\n   $requirements   = array_merge($requirements, $annoRequirements);\n   $options        = array_merge($options, $routeAnnnotation->getOptions());\n   $defaults       = array_merge($defaults, $routeAnnnotation->getDefaults());\n\n   break;\n\n}\n```\n}\nThe important line is *. It looks on our method annotation @Get(\"/{id}\"), sees that it has a pattern /{id} and chooses it over $pattern, which was equal to sites/{site}. And so we end up with a final $pattern equal to /{id} without our @Route or @Prefix prepended to it (i.e. the @Route and @Prefix are completely ignored) (aside - I don't actually understand the difference between these two annotations and @Prefix is not documented).\nIt seems to me that at the * line, it needs to check that if the method has an annotation, do the check again for a prefix/patternStart and prepend it also, no?\nSomething like this:\nif ($routeAnnotation->getPattern() !== null && $routeAnnotation->getPattern() !== '') {\n       $pattern = $patternStart . '/' . $routeAnnotation->getPattern();\n       // Or something similar to $urlParts array as done above and then implode on a \"/\"\n   }\nWhat do you think?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/153#issuecomment-2770401\n. too few time on my part ..\n. so what is the state here?\n. ok .. closing this ticket then ..\n. hmm we could simply ignore all variables in the route generation with a type hint .. though this would be a BC break\n. what i meant was to enable:\n\npublic function getTplAction(Project $project, $id)\n{\n    //...\n} // route: /tpl/{id}\n. @Dattaya the idea is that all type hinted vars would be ignored. right now we only ignore Request. i assume in your above example you accidentally have $id twice .. but again only $id would then be considered to be a route parameter.\n. @Dattaya i have never used parameter converters, so i am approaching this from the POV of this Bundle and suggested that it would be possible to change the route generation to handle getUserCommentAction(User $user, Comment $comment, $uid, $cid) as defining a route /users/{uid}/comments/{cid} ... i have no clue how the ParameterConverter would then deal with the various parameters.\n. @Dattaya can you look into creating the PR for the SensioFrameworkExtraBundle? or @henrikbjorn are you back in action?\n. @Dattaya can you look into creating the PR for the SensioFrameworkExtraBundle? or @henrikbjorn are you back in action?\n. ping\n. right now we have a hardcoded list of typehint classes we ignore for the route generation:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Routing/Loader/Reader/RestActionReader.php#L333\nwe could make this configurable .. alternatively maybe we should just ignore any parameter that has a type hint .. ?\n. since I do not use param converters .. could someone check if adding an entry to that array for a param converter fixes the issue with the route generation? if so we can decide how to go from there ..\n. can you send a PR with the change?\n. honestly I am unsure if it does .. after all the change we applied just ensures that ParamConverter type hints are ignored, while it seems to me that one usually does not type hint the ParamConverter but instead a specific entity/document etc. which is why I was wondering initially to either make this list configurable or to simply ignore anything that is type hinted.\nat any rate .. please try it and let me know :)\nor better yet .. supply a functional test for this.\n. this is also what I thought from looking at the code, which is why I was surprised that the change had any effect. can you look at changing the code to just ignore any parameter with a typehint? or alternatively to allow adding to the whitelist via a config option?\n. yes please!\n. not sure either .. but honestly .. ideally we have a patch for both and try it out ..\n. @everzet?\n. sorry about the delay .. was waiting for feedback from @everzet .. but since your explanation sounded sane i merged it.\n. is this backwards compatible?\n. ok .. guess i need to create a 2.0 branch then ..\n. @jmikola if i see this properly its will be in 2.1 and not in 2.0, so its branch time in FOSRestBundle it seems:\nhttps://github.com/symfony/symfony/blob/2.0/src/Symfony/Component/Config/Loader/LoaderInterface.php#L51\nhttps://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php#L51\n. so what needs to be done here?\n. @schmittjoh ping\n. @schmittjoh ping\n. i think this may indeed be a left over that should be removed. can you send a PR?\n. are the tests still passing? if they are i guess we are missing a test :)\n. ok .. i will test this against some apps i have tonight .. but looks good to me.\n. @everzet AFAIK you were once working on a rewrite of the routing stuff .. how is that looking and how does this relate to this feature?\n. can you send this PR to the 2.0 branch?\n. what do you see when you run app/console router:debug [name of your route] ?\n. you need to call the command with the name of your route(s) as parameters so that i can see what is configured.\n. hmm so it seems the default_format: json for the routing loader isn't applied ..\n. hmm are you using the latest version of either the 2.0 or master branch? just looking at the code everything looks fine to me. you should be able to debug this issue by looking in RestRouteLoader\none thing i should note:\nyou need to clear the cache, as changes to the app config do not cause the route to be regenerated.\n. no .. you are using the wrong branch .. you seem to be on symfony 2.0 and not master, so you should use the 2.0 branch of this bundle.\n. i don't know how i can say it any clearer but lets try again .. you are using the wrong branch of this bundle! you need to use the 2.0 branch if you are using 2.0.x\n. can you debug how the defaultFormat is handled inside the RestRouteLoader on the first request after clearing the cache? it should set the default format into the route (just like its setting the controller). use app/console route:debug [route name] to check if it worked.\n. uhm .. i may be misunderstanding something here .. are you defining your route via the \"rest\" type (aka via the method names)? if yes, then this method will be called, otherwise you wouldn't get the routes defined at all.\n. there is little FOSRestBundle can do if you generate routes without applying the default manually.\n. I think the behavior is quite clearly documented in the FOSRestBundle README.\n. travis seems to be broken http://travis-ci.org/#!/FriendsOfSymfony/FOSRestBundle\n. @Seldaek one thing i wonder is how to test against multiple versions of Symfony2 for example using this .. is there a way to force a specific version during the install rather than just the latest of everything?\n. neither am i .. seems like a lot of complexity.\n. nice!\nbut this branch has a few issues:\n1) github says it cannot be merged.\n2) travis ci is failing too .. but maybe this is caused by some changes in the serializer:\nhttp://travis-ci.org/#!/FriendsOfSymfony/FOSRestBundle\n3) finally its pointed at master ..\n. yeah .. was just looking over it .. README and the LoaderResolverInterface stuff shouldn't go into the 2.0 branch.\n. ok merged ..\n. and merged to master as well ..\n. would be great if you could check the open router related tickets if they are now fixed:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues\ni think i assigned them all to you :)\n. ok .. then please also check the unit tests, fix and/or update accordingly. thx\n. @everzet recently changed things to only depend on a few components. pretty sure form isnt listed there. but the tests supposedly do pass. \nOn 06.01.2012, at 17:39, Andreas Hucks reply@reply.github.com wrote:\n\n@lsmith77 I can't yet make much of this... on Travis, Composer seems to break down and the tests aren't even run (see http://travis-ci.org/#!/meandmymonkey/FOSRestBundle/jobs/485977). Locally with a clean setup as per the .travis.yml, Composer runs but misses installing some required dependencies for the tests (DI, Form component...).\nIf I run the tests with autoloading set against a regular SF2 install, they pass.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/171#issuecomment-3386954\n. i know .. working on resolving this .. imho the composer dependencies should point to symfony/symfony after all ..\n. well adding dependencies for each bundle and component also seems bogus to me ..\n. have a look at this example:\nhttps://github.com/liip/LiipHelloBundle/blob/master/Controller/RestController.php\n. as for your question about decoding JSON inside the request body. this is handled by the body_listener .. see the README for further details.\n. closing the ticket .. please reopen if there are still open questions.\n. you are using the wrong branch .. if you are using Symfony2.0.x you need to use the 2.0 branch\n. yeah .. we just need to resolve the relevant tickets for FOS and then update all of our bundles accordingly\n. yup!\n. would be good to add a test case to illustrate how the PoC works ..\n. cc @pminnieur \n. adding an api like this could make the auto doc generation a lot easier and complete\n. I have created a new branch with your code and some additional work in #185 (you can give yourself access to FOSRestBundle now that you are on the FOS team).\n. @vicb already done in #185\n. @vicb already done in #185\n. looks to me like something went wrong with your cherry pick\n. shouldn't this PR we send to the 2.0 branch?\n. do you have the format listener activated?\nit should check your accept header and set the request format accordingly.\nhave a look at the relevant section in the README\n. \"But now, when I call: /api/users\" -> with or without an accept header preferring xml?\n. Hmm I assume if you set default_priorities: [xml, json] it works?\nThere might be an issue in the handling of */* in the format listener ..\n\nI have been meaning to finish a rewrite of that code but never got around to finish it :(\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/136\n. If you have time it would be great if you could look at the current algorithm to see if the handling of */* could be improved\n. maybe instead of a listener we can use a param converter:\nhttp://symfony.com/doc/2.0/bundles/SensioFrameworkExtraBundle/annotations/converters.html\n. no .. currently it does not. but i don't really like having to use a listener to set the request attribute.\n. no .. currently it does not. but i don't really like having to use a listener to set the request attribute.\n. Overriding the Request parameter bag would remove the need to set the request attribute. How would it behave in that case though? I guess it would then only overload get() to set the default from the annotation (what would happen if a default is passed?) and execute the given requirements checks from the annotation?\n. Overriding the Request parameter bag would remove the need to set the request attribute. How would it behave in that case though? I guess it would then only overload get() to set the default from the annotation (what would happen if a default is passed?) and execute the given requirements checks from the annotation?\n. the other question would be where and when do we override the default parameter bag? would this require a custom Request class or a listener again?\n. the other question would be where and when do we override the default parameter bag? would this require a custom Request class or a listener again?\n. Well I see some major issues here:\n1) it would mean we do a lot of work that may not become necessary\n2) if we do it in the router, then we will have the issue with determining the class/method again\n. Well I see some major issues here:\n1) it would mean we do a lot of work that may not become necessary\n2) if we do it in the router, then we will have the issue with determining the class/method again\n. If we do this, then we would best wrap the standard ParameterBag inside one that automatically sets the defaults and checks the requirements when any of the get() methods are called. However this may also lead to a bit of unclearity as to when these requirements are applied. Aka sometimes when you use the request it would apply the requirements .. but for example inside a request listener they would not. I think this makes things more obscure, so I prefer the current approach.\n. If we do this, then we would best wrap the standard ParameterBag inside one that automatically sets the defaults and checks the requirements when any of the get() methods are called. However this may also lead to a bit of unclearity as to when these requirements are applied. Aka sometimes when you use the request it would apply the requirements .. but for example inside a request listener they would not. I think this makes things more obscure, so I prefer the current approach.\n. I don't see the current implementation as worse at all. It just means that adopting this approach requires to change some API calls.\nNow changing the router is of course another option. But I am not sure if this is possible without either not supporting all the dumpers or increasing the scope of this PR to require a gigantic amount of work. Then again I guess we will get this once we have uri-template support:\nhttp://tools.ietf.org/html/draft-gregorio-uritemplate-08\nhttps://github.com/symfony/symfony/issues/3227\n. I don't see the current implementation as worse at all. It just means that adopting this approach requires to change some API calls.\nNow changing the router is of course another option. But I am not sure if this is possible without either not supporting all the dumpers or increasing the scope of this PR to require a gigantic amount of work. Then again I guess we will get this once we have uri-template support:\nhttp://tools.ietf.org/html/draft-gregorio-uritemplate-08\nhttps://github.com/symfony/symfony/issues/3227\n. Btw .. in this case we would of course get around the entire controller setting business, since we would add this information into the routes. Thinking about it .. maybe we could do this today as well? Aka instead of reading the annotations at runtime, we could integrate the query param annotations into the rest route loader and write this information in there somewhere (not sure if its possible) and then read it out in the query fetcher ..\n. Btw .. in this case we would of course get around the entire controller setting business, since we would add this information into the routes. Thinking about it .. maybe we could do this today as well? Aka instead of reading the annotations at runtime, we could integrate the query param annotations into the rest route loader and write this information in there somewhere (not sure if its possible) and then read it out in the query fetcher ..\n. Prevents what? Which refactoring do you mean specifically?\n. Prevents what? Which refactoring do you mean specifically?\n. Ah yes. Any service after the controller listener can inject the query fetcher as it is now and things will work cleanly. Any server before the controller listener will get an exception. So no surprises.\n. Ah yes. Any service after the controller listener can inject the query fetcher as it is now and things will work cleanly. Any server before the controller listener will get an exception. So no surprises.\n. basically we have decided we want to move the matching of the query parameters to the routing layer, which would be the case once we have full support for uri-templates. now the question is if we still merge the current state and then simply break BC once uri-template support is available. or one of us works on uri-template support. should not be toooo hard and would be a huge boost for Symfony2 in general.\n. i have been thinking some more about this over the weekend also in regards to uri-templates. one thing that i finally realized is that path parameters requirements will need to be handled differently than query parameters requirements. especially for the later it should not prevent a route match and it will usually require custom code to handle errors.\nCC @Tobion \n. i have been thinking some more about this over the weekend also in regards to uri-templates. one thing that i finally realized is that path parameters requirements will need to be handled differently than query parameters requirements. especially for the later it should not prevent a route match and it will usually require custom code to handle errors.\nCC @Tobion \n. ok .. unless someone brings up a new concern .. i will soon merge this PR\n. ok .. unless someone brings up a new concern .. i will soon merge this PR\n. See my comment above. Imho the handling of what is supposed to happen in case of a mismatch of a query parameter will usually require specific logic that cannot be sensible defined via configuration in the routing. As such imho it should be handled in the controller. All this PR does is make it easier to do so.\nAs for uri-templates, the point again wasn't full uri-template support, but simply query parameter support. However as I just noted I don't think that the routing configuration is the right place to handle query parameters entirely. F.e. adding a requirement in the routing would cause the route to not match. Setting defaults makes a bit more sense via the routing layer, but without being able to handle setting a default on a mismatch etc its again not flexible enough.\n. See my comment above. Imho the handling of what is supposed to happen in case of a mismatch of a query parameter will usually require specific logic that cannot be sensible defined via configuration in the routing. As such imho it should be handled in the controller. All this PR does is make it easier to do so.\nAs for uri-templates, the point again wasn't full uri-template support, but simply query parameter support. However as I just noted I don't think that the routing configuration is the right place to handle query parameters entirely. F.e. adding a requirement in the routing would cause the route to not match. Setting defaults makes a bit more sense via the routing layer, but without being able to handle setting a default on a mismatch etc its again not flexible enough.\n. yeah .. but isn't that super confusing that the behavior of requirements changes based on where it matched? seems like a huge security risk.\n. yeah .. but isn't that super confusing that the behavior of requirements changes based on where it matched? seems like a huge security risk.\n. its still a change in behavior that isn't very transparent to the user\n. its still a change in behavior that isn't very transparent to the user\n. well imho setting a requirement on a query param should cause an exception. which is why i was considering merging this PR. however maybe we could have a \"validation\" section that behaves like what we described above for query parameters.\n. well imho setting a requirement on a query param should cause an exception. which is why i was considering merging this PR. however maybe we could have a \"validation\" section that behaves like what we described above for query parameters.\n. but its not the same configuration. the difference is that people now know how requirements in the route work. we can't just have a different behavior depending on if its a path or query parameter. the only thing we could do is disallow using requirements for query parameters. but then we would still need a way to define such validation rules. now handling of default values could indeed be done via the routing.\nhowever right now the routing is focused on the matching process only. while i was the one suggesting to add query support to the routing layer initially .. i am not so sure it makes sense now after all.\n. but its not the same configuration. the difference is that people now know how requirements in the route work. we can't just have a different behavior depending on if its a path or query parameter. the only thing we could do is disallow using requirements for query parameters. but then we would still need a way to define such validation rules. now handling of default values could indeed be done via the routing.\nhowever right now the routing is focused on the matching process only. while i was the one suggesting to add query support to the routing layer initially .. i am not so sure it makes sense now after all.\n. well sure that could be nice in order to deal with legacy or 3rd party controllers. but i don't really think that the ability to alias query param names is something we really need in core.\nwhat i do think we need to provide for either in core or in this bundle is the ability to:\n- define the query parameters supported by a controller action\n- define the default values for this parameters if they are not supplied\n- define validation rules for these parameters (note that here in most causes falling back to a default is the right thing, but in other cases i might also want some assistance in determine what doesn't match so that i can return a custom error message).\n. well sure that could be nice in order to deal with legacy or 3rd party controllers. but i don't really think that the ability to alias query param names is something we really need in core.\nwhat i do think we need to provide for either in core or in this bundle is the ability to:\n- define the query parameters supported by a controller action\n- define the default values for this parameters if they are not supplied\n- define validation rules for these parameters (note that here in most causes falling back to a default is the right thing, but in other cases i might also want some assistance in determine what doesn't match so that i can return a custom error message).\n. as the example shows .. it basically works ..\nnow .. the main question is if we agree its the right approach ..\nor should this rather be done inside the routing config?\n. sure it could be added later .. or replaced with .. would just like to avoid needless confusion\n. you need to activate the listener:\nhttps://github.com/lsmith77/symfony-standard/blob/techtalk/app/config/config.yml#L98\n. We can easily create a request listener that does that or rather extend the current one to optionally do that. The reason I say optionally is that with what you describe all parameters would always have to be parsed and validated even if they are not used, but in most cases most of the configured query params will likely be used anyway.\n. @stof but we could ..\n. ok .. i have implemented the option of forcing the query params to be set as attributes. on conflict it throws an exception. however we also need to improve the route generation to skip any configured query parameter.\n. btw .. just FYI .. you can always fork this branch and submit PRs back to this branch if you have ideas for improvements. for example it would be cool of someone could fix the above noted issue with using query params in the method signature causing them to be put into the route.\n. nevermind .. already took care of it ..\nanything else people think should be done?\n. main thing missing now are docs ..\n. QueryParamReader or QueryFetcher? Anyway, I will leave that to who ever wants to make the first alternative implementation :)\n. QueryParamReader or QueryFetcher? Anyway, I will leave that to who ever wants to make the first alternative implementation :)\n. i thought about that too .. we could provide such an option as part of the listener eventually. it should of course only be down for proper GET requests. however i don't think that query parameters are that important for SEO, but it is relevant for caches i guess.\n. i thought about that too .. we could provide such an option as part of the listener eventually. it should of course only be down for proper GET requests. however i don't think that query parameters are that important for SEO, but it is relevant for caches i guess.\n. I like it a lot. The only draw back is that people that inject the DIC now also need a listener, but overall its tons cleaner.\n. I like it a lot. The only draw back is that people that inject the DIC now also need a listener, but overall its tons cleaner.\n. On 08.02.2012, at 00:50, Christophe Coevoet reply@reply.github.com wrote:\n\nThere is one issue here (and probably also in the other implementation in fact): the query fetcher depends on the request and the controller so it will currently be broken if a controller does a subrequest. You need to put it in the request scope\n\ni took it out of the request scope. shouldnt the controller listener be called for every subrequest too? in that way the query fetcher would still be broken until the controller listener is called, but so it goes. \n. On 08.02.2012, at 00:50, Christophe Coevoet reply@reply.github.com wrote:\n\nThere is one issue here (and probably also in the other implementation in fact): the query fetcher depends on the request and the controller so it will currently be broken if a controller does a subrequest. You need to put it in the request scope\n\ni took it out of the request scope. shouldnt the controller listener be called for every subrequest too? in that way the query fetcher would still be broken until the controller listener is called, but so it goes. \n. ah yes .. it would screw up the instance when the user comes back to the original request.\n. ah yes .. it would screw up the instance when the user comes back to the original request.\n. i have reverted the relevant changes and did a force push to this PR\n. i have reverted the relevant changes and did a force push to this PR\n. ok i did another force push, making the listener optional again, imho this is now ready to go.\nanyone who doesn't want to use the listener will need to manually call setController() and of course then they can also not inject the query fetcher via the action signature.\n. ok i did another force push, making the listener optional again, imho this is now ready to go.\nanyone who doesn't want to use the listener will need to manually call setController() and of course then they can also not inject the query fetcher via the action signature.\n. merged\n. merged\n. I guess we could add support for directories?\nThe following should work however:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/5-automatic-route-generation_single-restful-controller.md\nHowever I would assume the \"@Bundle\" syntax should also work.\n. Just FYI currently we assume that the Serializer is only used to return errors in forms and that those using your REST API are provided documentation about parameters to send in a POST/PUT some other way. If you want to render a form into the response you can either simply use XHtml as the output format and render that using the standard Symfony2 templates. The other option is to customize the ViewHandler by either extending the class or registering a custom handler, that will call the necessary methods on the form to render the form and add this to the response data.\n. sure .. i can do it .. the steps are however quite simple:\ngit fetch\ngit checkout 0.6\ngit cherry-pick f9a84cb\n. done\n. hmm not sure why this isn't working for you. it should iterate over the directories. then again locally i have array(__DIR__.'/../vendor/fos', __DIR__.'/../vendor/bundles') (aka the opposite order).\n. for people using the UniversalClassLoader this should be faster .. and maybe its more readable. however in this case apply the change to the master branch so that i can merge it to the 0.6 branch.\n. can you paste the method names of your controller?\n. you should prefix your action methods with the http method you want to use.\naka getShowAction()\n. yes .. its not common practice to include the names of \"actions\" for anything but new/edit/remove forms/confirmation pages (these 3 are actually not necessary in a \"proper\" REST API and are just added to this Bundle to make it easy to use the generation logic for developers creating HTML representation for end users).\ncheck for an example: https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/5-automatic-route-generation_single-restful-controller.md\n. you seem to currently be using a hardcoded prefix writer ..\nit would be better if you would remove that prefix and instead replace your show method with getWriterAction() etc\n. yes .. it assumes that separate words refer to sub resources.\n. This is indeed more a JMSSerializerBundle question.\nRight now I fear the only way to do this is with a @preSerialize method to manipulate the object graph before serialization to remove the things you don't want to serialize based on some property you set. Of course you could also do this before even calling the serializer. Another approach would be to simply \"cast\" the structure to a new object graph.\nEventually JMSSerializerBundle will get support for @group which will make this all a lot cleaner:\nhttps://github.com/schmittjoh/JMSSerializerBundle/issues/60\nI am closing this ticket here. If you have further questions please open a ticket on JMSSerializerBundle.\n. can you work on a PR for this?\n. can you work on a PR for this?\n. right .. GET should at most add to a log or a read counter. so indeed i don't think there is anything to add here. as for put vs. post we have another ticket on that which i have assigned to @everzet\n. i have so far left @everzet in control of this part of the bundle\n. Hmm .. sounds like a good idea. I can't think of a reason why not at the top of my head.\nEventually we are hoping to move the entire format detection to a request listener, so makes sense to for now at least move it to as early as possible in the controller stage.\nCan you work on a PR for this?\n. Hmm .. sounds like a good idea. I can't think of a reason why not at the top of my head.\nEventually we are hoping to move the entire format detection to a request listener, so makes sense to for now at least move it to as early as possible in the controller stage.\nCan you work on a PR for this?\n. lets keep the ticket open until we have a final solution committed, ok?\n. lets keep the ticket open until we have a final solution committed, ok?\n. but if the user created a View instance with a hardcoded format, then this information would be available in the view listener. also did you ever submit the actual changes, might make it easier for me to understand the issue.\n. but if the user created a View instance with a hardcoded format, then this information would be available in the view listener. also did you ever submit the actual changes, might make it easier for me to understand the issue.\n. ok i get it now .. indeed it seems like there isn't much to do here :-/\n. can you also show me the request url and accept content type headers?\n. can you also show me the request url and accept content type headers?\n. Ok, this all looks correct, so my guess is that you simply not configured the ExceptionController?\nhttps://github.com/lsmith77/symfony-standard/blob/techtalk/app/config/config.yml#L23\n. Ok, this all looks correct, so my guess is that you simply not configured the ExceptionController?\nhttps://github.com/lsmith77/symfony-standard/blob/techtalk/app/config/config.yml#L23\n. hmm that looks correct .. \nthis is the code that determines the format on an exception:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Controller/ExceptionController.php#L165\ni fear i am out of ideas, so you will have to debug it yourself :-/\n. any luck debugging this? if you could setup a reproduce able test case somewhere I can have a look ...\n. whats the issue? getBestFormat() should return json in your case.\n. hmm .. not sure what is going on inside the security layer there ..\nthe code that does the negotiation is here https://github.com/FriendsOfSymfony/FOSRest/blob/master/Util/FormatNegotiator.php\ni am pretty sure at the point where it hits this code the content type accept header must be stripped from the request somehow. can you debug this?\n. any luck?\n. any luck?\n. i don't really know yet what the issue is .. if you can provide a reproduce able test case i am happy to fix things ..\n. closing due to lack of feedback.\n. can you try dev-master?\n. well it might not be this Bundle then .. but at any rate .. what is needed are some tests so that we can ensure that the issues are really fixed.\n. right now these are global settings (though we are discussing how to make them more configurable #552)\n. ah .. i actually was thinking something different, but this is also ok.\ni would want that you could also set the version on the View class:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/View/View.php\nso i guess if someone set the version on their View instance it should override the global setting that you enabled in this PR\n. ah .. i actually was thinking something different, but this is also ok.\ni would want that you could also set the version on the View class:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/View/View.php\nso i guess if someone set the version on their View instance it should override the global setting that you enabled in this PR\n. FOSRestBunde does not support the core serializer of 2.0 atm and afaik JMSSerializerBundle currently does not use the core interfaces. though i just noticed we type hint incorrectly in the FormatListener .. and the docblock in the ViewHandler is wrong\n. FOSRestBunde does not support the core serializer of 2.0 atm and afaik JMSSerializerBundle currently does not use the core interfaces. though i just noticed we type hint incorrectly in the FormatListener .. and the docblock in the ViewHandler is wrong\n. i just fixed the above mentioned places, please check master\n. i just fixed the above mentioned places, please check master\n. please also update the relevant tests.\n. please also update the relevant tests.\n. @schmittjoh i am planning on adding a few more methods to the View class (see #209) to be able to set groups and depth. anything else users will then need to set on the serializer somehow. it will be up to them to figure this out .. \n- custom serializer service\n- injecting the view handler and fetching the serializer from there\n. @schmittjoh i am planning on adding a few more methods to the View class (see #209) to be able to set groups and depth. anything else users will then need to set on the serializer somehow. it will be up to them to figure this out .. \n- custom serializer service\n- injecting the view handler and fetching the serializer from there\n. hmm sounds like a good idea.\n. hmm sounds like a good idea.\n. it should probably also accept the ViewHandler as a parameter\n. it should probably also accept the ViewHandler as a parameter\n. i am not sure this can sensibly be supported .. might complicate things quite a bit.\n. i am not sure this can sensibly be supported .. might complicate things quite a bit.\n. hmm i have to investigate this .. but I don't think that your fix is correct.\nIIRC the idea here is to handle @View inside the FOSRestBundle and @Template inside SensioFrameworkBundle and your fix would break the later.\n. ah no .. thought about it again .. your fix is most likely correct after all.\nthis code is supposed to \"fake\" as if @Template was used instead of @View\n. hmm did you disable the SensioFrameworkExtraBundle listener?\nsensio_framework_extra:\n    view:    { annotations: false }\n    router:  { annotations: true }\nsee https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/3-listener-support.md\n. Unfortunately I am not sure how to handle this. We could prevent this issue if this PR would be merged, while @fabpot reopened the issue after I had given up, he also never merged it:\nhttps://github.com/sensio/SensioFrameworkExtraBundle/pull/57\nHowever maybe we could at least detect this configuration issue via a Compiler pass? Would you be willing to look into that?\n. ok .. managed to reproduce the issue .. lets see if i can fix it.\n. hmm this was cased by @eriksencosta PR from #213\nguess i need to revert that change and look into what changed in the SensioFrameworkExtraBundle that caused the issue that @eriksencosta reported.\n. this is what i suspect being the issue in #213 .. but this issue here i managed to reproduce and fix by reverting.\n. no .. I do not think anyone ever tried to implement it\n. this means it could not load the class. are you sure there is really a class with that name?\n. @JohnLoo the ticket was opened before we did this change.\nbut i just pushed a fix for the issue you noted\n. @intel352 can you look into writing a test (and a fix)?\n. i don't think the docs should really explain what to do for setup with 0.6 .. instead they should just point to the 0.6 branch, where we explain how to setup\n. ah .. i am too late to the part :)\n. @asm89 can you add a note to the UPGRADING guide?\n. please see the event listener documentation for more details. essentially your configuration is incorrect as you enabled two incompatible event listener\n. this is the event listener configuration for this bundle:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/3-listener-support.md\nthe above configuration looks correct now and i assume the exception no longer happens?\ni think the issue you are seeing now is not related to changes in this Bundle. i assume when you updated this Bundle you also updated others.\n. i don't see how the two are related.\n. bin vendors/install should not have changed anything in your setup .. unless your deps.lock file was incomplete, in which case its not clear that all was updated\n. well FOSRestBundle isn't even listed there. I assume there are other Bundles that you are using that are also not listed there.\nyou can try adding the following line to your deps.lock:\nFOSRestBundle d2e9aac\nAlternatively as your app worked without adjusting your configuration before the update, you can also keep the view annotation enabled, but then disable the view listener for FOSRestBundle. Because if you were using the FOSRestBundle view listener before, it would not have worked anyway.\n. this does not really help me with helping you ..\ni am not sure if you understand what the view annotations support in sensio extra and fos rest bundle do. but fos rest bundle extends the view stuff in the sensio extra bundle. so you can only ever have one or the other enabled, not both as they would break each other. all we did was add an exception of someone has both enabled. but as your app worked before .. it seems like you are not even using the view annotations.\n. ok .. let me know if i can help with anything else. closing this ticket for now.\n. i don't think its critical .. but its supported by SensioFrameworkExtraBundle\n. duplicate of #229\n. there is no example i am aware of .. but there is also nothing special to do here ..\n. thx .. was discussing adding this on IRC today already .. if you can fix the minor issue i noted then i will merge ASAP\n. hmm i guess it doesn't really make sense to support a global group config, but i do think it could be useful to have a method that can be easily overridden to determine the groups to set\n. $view = new View(..);\n..\n$view->setObjectsGroups(array('foo', 'bar'));\n. here is an example that works for me https://github.com/liip/LiipHelloBundle/commit/c12e80402fbb36cf0b6d1cf2f2f4be47ad3a3be6\n. you are using the wrong branch for your Symfony2 version:\nmaster -> symfony master\n0.6 -> symfony 2.x\n. if i got things right the issue was caused by the removal of the 0.6 branch.\n. the difference can be seen here:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/View/ViewHandler.php#L231\nthe normal scenario where apps use a redirect is usually after a POST done via form. this is done to send the user to the show page of whatever they just created/updated. this makes sense for a user accessing your site via a browser.\nhowever in a REST app this is usually not what you want. instead you want to give the client the url to the resource that was created.\nthis setting allows you to handle exactly that. by default the bundle will only actually execute redirects for html responses and for all others it will simply return the url.\nhope things are clearer now. if you feel that with the information i have just given you, you can improve the documentation i would very much appreciate a PR :)\n. please reopen if things are still unclear.\n. please reopen if things are still unclear.\n. here is an example https://github.com/liip/LiipHelloBundle/blob/query_param-proof-of-concept/Controller/RestController.php#L123\n. here is an example https://github.com/liip/LiipHelloBundle/blob/query_param-proof-of-concept/Controller/RestController.php#L123\n. yeah .. there is no way to redirect via an annotation .. i didn't think it would make sense .. since its usually something that requires dynamic decisions .. aka did the write work so that i can \"redirect\" or do i have to return an error?\n. yeah .. there is no way to redirect via an annotation .. i didn't think it would make sense .. since its usually something that requires dynamic decisions .. aka did the write work so that i can \"redirect\" or do i have to return an error?\n. i went back and forth with merging strategies and that must have happened then.\n. i went back and forth with merging strategies and that must have happened then.\n. yeah make sense to me .. lets make it configurable .. but only allow PUT/PATCH/POST\n. yeah make sense to me .. lets make it configurable .. but only allow PUT/PATCH/POST\n. we will need to make the setting available as a parameter that can easily be set as a global param in twig and maybe some helper method in the view handler to check the method used. \n. ping?\n. ok .. i guess the issue should slowly disappear anyway .. so @stof please close the ticket if you agree.\n. it was decided that indeed PATCH is ok.\nif we do add a way to switch to POST, then it needs to be configurable on a per class basis.\n. Ah ok, so the \"type\" of resource would be derived from the Controller name, rather than the methods? Seems like an interesting solution. I would be open to a PR for this .. @everzet ?\n. Ah ok, so the \"type\" of resource would be derived from the Controller name, rather than the methods? Seems like an interesting solution. I would be open to a PR for this .. @everzet ?\n. @javiern check out #269 where we have implemented this.\n. see PR #269 .. i have added a @RouteResource annotation:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/269/files#L0R18\n. guess this is now fixed?\n. i don't quite understand how this is used .. before this can be merged we will defiantly need some docs and a unit test or two ..\n. i don't quite understand how this is used .. before this can be merged we will defiantly need some docs and a unit test or two ..\n. @mvrhov so you think it would be better to wait for the PR and then simply integrate that with FOSRestBundle?\n. I am not sure if this makes sense. This is a convention and if you don't like it, don't use it. If we make too many things optional, we run the risks of Bundles being incompatible. So if at all we would need to offer a way to configure this on a per class level.\n. I am not sure if this makes sense. This is a convention and if you don't like it, don't use it. If we make too many things optional, we run the risks of Bundles being incompatible. So if at all we would need to offer a way to configure this on a per class level.\n. its mentioned in the docs. but i guess not where you expected it. therefore it would be best if you could send us a PR with a note where you would expect it. \n. don't be shy .. just click on \"edit\" on one of them .. and add the text. that way you will fork and create a PR in one swoop :)\n. Without the pluralization we wouldn't know the relationship between the methods which is going to be important for example when implementing #52. furthermore its a key idea of REST that we have the GET for a single element in a collection be in a \"subdir\" of the collection itself.\nSo if you do \"proper\" REST then /member/{id}.{_format} would be oddly named but it would be actually wrong if your collection itself wouldn't then also reside under /member{.format}.\nThe gist of all of this is .. the solution as is isn't so much about convenience than it is about enforcing people actually following REST principles. \nif all you want is to convert method names to routes, then I would suggested you create an alternative solution.\ni am closing this ticket .. if anyone feels like there is something to add to the docs to make the current behavior more clear please do so in a PR\n. http://microformats.org/wiki/rest/urls#Operate_on_the_Collection\nhttp://www.slideshare.net/Wombert/phpjp-urls-rest\netc ..\n. oh and as you pointed out .. if you don't want to follow this standard .. just hand code your route\n. so yeah .. in that case i recommend you either use SensioFrameworkExtraBundle to define additional routes via annotations, hardcode the routes manually or use FOSRestBundle as an example to create your own route loader.\n. this partially related to #479 \nthe thing is that what we are doing here is trying to ease one common use case. if we add a bazillion options and config steps .. then the question is how much easier we are making any use case. after all its still possible to define individual routes.\ni am however open to exploring making more things in this area configurable .. but ideally any other approach should be based on a common use case. the common approach is what i see as the most common way to handle (english) REST APIs. i do not want to support all possible permutations of what someone might be doing for one project.\n. this partially related to #479 \nthe thing is that what we are doing here is trying to ease one common use case. if we add a bazillion options and config steps .. then the question is how much easier we are making any use case. after all its still possible to define individual routes.\ni am however open to exploring making more things in this area configurable .. but ideally any other approach should be based on a common use case. the common approach is what i see as the most common way to handle (english) REST APIs. i do not want to support all possible permutations of what someone might be doing for one project.\n. again .. the point is to support a specific convention. its impossible to provide a convention based solution based on individual preferences. but like i said .. i am open to consider adding options to deal with another commonly used convention for building REST URLs.\nSo the point is .. do not argue about a specific case. find me a well respected and documented \"standard\" (github seems to uses plurals for collection lists and singular for individual items in collections) and we can talk about supporting that.\nThat being said .. with #392 there are now ways to configure the pluralization. unfortunately that PR didn't document how to do this ..\n. again .. the point is to support a specific convention. its impossible to provide a convention based solution based on individual preferences. but like i said .. i am open to consider adding options to deal with another commonly used convention for building REST URLs.\nSo the point is .. do not argue about a specific case. find me a well respected and documented \"standard\" (github seems to uses plurals for collection lists and singular for individual items in collections) and we can talk about supporting that.\nThat being said .. with #392 there are now ways to configure the pluralization. unfortunately that PR didn't document how to do this ..\n. can you send a PR with some additions to the docs? i guess in the view chapter ..\n. can you send a PR with some additions to the docs? i guess in the view chapter ..\n. the above comment is a nice starting point. so just take that and add it to chapter 5\n. the mime type lister is just about registering formats, not about actually setting the format of the request ... Request::setFormat() is another confusingly named method ..\n. can you add some more documentation?\n. @beberlei you might have a POV here ..\nquite a bit has been done as part of SensioFrameworkExtraBundle and SimpleThingsFormSerializerBundle related to this\n. ping ..\n. @orfin seems to be busy .. i am open to this .. but someone needs to wrap this up. also as @beberlei pointed out .. maybe best added to the JMS Serializer.\n. This is very cool. However I don't think we should use allowed_http_methods as the name, since once we do implement #52 imho it should be down via the same listener.\n. hmm definitely better .. but i need to ponder that a bit if we wouldn't be selling the concepts of \"Hateoas\" short with the scope of this listener.\n. it definitely needs a rebase to be merge able according to github\n. sorry .. traveling atm and so i am less organized. i will comment tomorrow ..\n. i guess the direction for HATEOS link content is likely going to be done via the serializer as per #246 and not via a listener .. meaning that the naming of this listener doesn't need to be reconsidered. so i think i am ok with this change, but i do think the listener should be off by default like the others.\n. ah sorry .. could you move the loader to a Response subnamespace so that we do not clutter the root. but yeah .. haven't tried it .. but i trust @stof's review ..\n. ping .. still needs a rebase\n. ok .. i did the rebase and also fixed some minor issues in the docs\n. yes .. it should be automatic\nand yes its based on the requirements:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/250/files#L6R71\n. yes .. it should be automatic\nand yes its based on the requirements:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/250/files#L6R71\n. this PR needs to be rebased, aside from this .. is there any reason not to merge this @stof ?\n. well there is also the option of not having to inject the query fetcher at all and instead set the GET params as request attributes.\n. well there is also the option of not having to inject the query fetcher at all and instead set the GET params as request attributes.\n. I just implemented such a param converter .. but it makes no sense as you still need the controller listener in order to set the controller on the query fetcher instance. as such it would just add overhead.\n. I just implemented such a param converter .. but it makes no sense as you still need the controller listener in order to set the controller on the query fetcher instance. as such it would just add overhead.\n. well if you have an idea .. please let me know. we could add this ParamConverter .. but it would just be additional overhead so i am not sure if adding it would be doing people a service.\n. well if you have an idea .. please let me know. we could add this ParamConverter .. but it would just be additional overhead so i am not sure if adding it would be doing people a service.\n. Yes we could do that, but we would have to do that every time .. and that again seems like a lot of overhead. caching this would be possible, but would be a lot of code and complexity.\n. Yes we could do that, but we would have to do that every time .. and that again seems like a lot of overhead. caching this would be possible, but would be a lot of code and complexity.\n. A 400 sounds good to me. As for strict yes/no .. indeed it might make sense to make this part of the annotation.\n. A 400 sounds good to me. As for strict yes/no .. indeed it might make sense to make this part of the annotation.\n. the same goes for \"new\" and \"edit\" .. see also\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Routing/Loader/Reader/RestActionReader.php#L37\n. the same goes for \"new\" and \"edit\" .. see also\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Routing/Loader/Reader/RestActionReader.php#L37\n. i am not entirely happy with the implementation either .. but its not as simple .. see #144 and linked issues.\n. i am not entirely happy with the implementation either .. but its not as simple .. see #144 and linked issues.\n. I think for GET parameter we can probably just optionally allow the requirements to be checked on the values of the array which would mean we only support a depth of 1 for requirements.\nonce @seldaek works on POST support we may need something more complex. then again maybe for complex structures we need to look into integrating with the form component?\n. I think for GET parameter we can probably just optionally allow the requirements to be checked on the values of the array which would mean we only support a depth of 1 for requirements.\nonce @seldaek works on POST support we may need something more complex. then again maybe for complex structures we need to look into integrating with the form component?\n. Well its interesting for API docs and automatic HAL style linking. But we might then just add some annotation to automatically create the form instance for the more complex case.\n. Well its interesting for API docs and automatic HAL style linking. But we might then just add some annotation to automatically create the form instance for the more complex case.\n. I agree as well .. for performance use array_walk() or something like that. But lets keep it simple ..\n. that is a good question ..\nbtw .. this PR needs a rebase since @Seldaek's refactoring was merged\n. sounds sensible to me. imho lets implement it like that and see how out plays out in the real world. \n. hmm according to github, its not rebased yet ..\n. also .. could you add something to the docs?\n. the docs should also contain a brief explanation why only one level deep arrays are supported .. aka that its an intentional limitation and in case more complex arrays are needed, they can simply not be validated with this approach and the user should consider to instead use the form/validation system.\n. you need a newer version of Doctrine common ..\n. @stof we should add a suggestion for the latest common version in composer.json?\n. On Jul 6, 2012, at 6:45 PM, Johannes wrote:\n\nOr, add a conflict for a lower version?\n\nthat sounds interesting .. didnt know that was possible\n. relying on a request parameter to define the callback seems like a security risk ..\na quick google search produced this http://tav.espians.com/sanitising-jsonp-callback-identifiers-for-security.html\nnow as for adding jsonp support the more appropriate place for this imho would be ViewHandler::createResponse(). you could extend this class, check if the format is 'jsonp', inject a parameter into the class instance with a hardcoded callback function (or read and sanitize the callback form the request), call the parent with just 'json' and then adjust the Response accordingly.\nas for adding generic support for this, it might be possible to cleanly do this by adding support for this in JMSSerializerBundle.\n. would probably be useful to add this to either the FOSRestBundle or JMSSerializerBundle docs\n. i was just chatting with @schmittjoh on IRC\nwhat we could do is provide an implementation of a custom handler for jsonp and then potentially a configuration flag to enable \"jsonp\" support. enabling \"jsonp\" support would also register the mime type via the mime type listener:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/2-the-view-layer.md#custom-handler\nin this custom handler you would basically just call the ViewHandler::createResponse method with the format \"json\" and then adjust the returned Response accordingly. you should also support some regexp to validate the callback string which should probably also be configurable.\nmaybe that is the easiest solution after all.\n. i was just chatting with @schmittjoh on IRC\nwhat we could do is provide an implementation of a custom handler for jsonp and then potentially a configuration flag to enable \"jsonp\" support. enabling \"jsonp\" support would also register the mime type via the mime type listener:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/2-the-view-layer.md#custom-handler\nin this custom handler you would basically just call the ViewHandler::createResponse method with the format \"json\" and then adjust the returned Response accordingly. you should also support some regexp to validate the callback string which should probably also be configurable.\nmaybe that is the easiest solution after all.\n. see my answer in https://github.com/FriendsOfSymfony/FOSRestBundle/issues/263#issuecomment-7186626\nyou need to register a custom handler .. that \"converts\" the formst to \"json\" and then wraps the callback around the returned content:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/View/ViewHandler.php#L214\n. see my answer in https://github.com/FriendsOfSymfony/FOSRestBundle/issues/263#issuecomment-7186626\nyou need to register a custom handler .. that \"converts\" the formst to \"json\" and then wraps the callback around the returned content:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/View/ViewHandler.php#L214\n. could you guys check #266 ?\n. could you guys check #266 ?\n. @ilanco i assume you are talking about #266? i cannot reproduce your issue :-/\ndid you try to manually clear your cache?\n. lets move the discussion to #266 please .. but unfortunately i have no idea what could cause this. please check if the service is defined via app/console container:debug | grep fos_rest.view_handler\n. Interesting .. it seems we have no documentation on the annotations for explicitly stating the HTTP methods. Could you add something to the docs in Resources/docs?\nAnyway, I am sure this PR is just a trojan horse that will somehow unravel the Symfony2 community .. but I will play along :)\n. oh and a rest would also be good to add. thx\n. there are already some related tests for the other annotations .. so it should be a quick thing to add OPTIONS there too\n. i didn't originally develop this part of the Bundle .. but i suspect you would need to add it to https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Routing/RestRouteCollection.php#L80\n. i have merged this PR and fixed the HEAD vs OPTIONS copy paste error and a few others to get the tests working\n. are you using a view listener? f.e. SensioFrameworkExtraBundle?\n. are you using a view listener? f.e. SensioFrameworkExtraBundle?\n. see the documentation:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/3-listener-support.md#view-response-listener\nyou need to enable the sension framework view listener in favor of of the rest bundle view listener.\n. see the documentation:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/3-listener-support.md#view-response-listener\nyou need to enable the sension framework view listener in favor of of the rest bundle view listener.\n. another topic to discuss is the mime type to register for jsonp\n. another topic to discuss is the mime type to register for jsonp\n. @ilanco what version of Symfony are you using?\n. ok .. that must be the cause then .. i am on master.\n. yeah .. looking into it ..\n. i am sorry .. but i cannot reproduce this with a unit test and i dont have a symfony 2.0 project setup. i will not get to setting something up until next week. in the mean time if you want to dig in .. look at:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/266/files#L1R124\nyou will likely also need to look into the Container documentation. but essentially what i am doing there is making changes to the definition of the service (by default this is fos_rest.view_handler.default) and then overriding the previously created alias fos_rest.view_handler.\n. that unfortunately causes problems IIRC .. since the Request then decides that its a \"js\" format request.\n. the issue is that i think the ViewHandler gets confused before .. i have to test it again, but it crapped out last time i used application/javascript\n. dont really have time to wrap this up .. i have noted the open issues i am aware of in the description\n. a potential solution to the mime type question came up in #320. jsonp could be automatically be applied if a callback function is defined in the request. not sure i like this though ..\n. it will be optional of course. i dont really want to add this to the View class, since i want to keep it format agnostic. That being said, maybe a a separate response listener that is configured on a per controller action basis is the way to go after all.\n. @jonathaningram rebased, as you can see above i am still not really happy with the implementation.\n. @jonathaningram i am sorry but i really dont have time to dig into this issue more. maybe you can get some assistance in debugging this from people on #symfony-dev IRC\n. I have no need for this personally, so as I am short on time I just haven't found the motivation to figure out answers fire the last questions I have noted in the PR. but I am very open to someone else figuring out these last details. \n. See the ticket description. Also see https://github.com/liip/LiipHelloBundle/commit/edb81a207ef7ee901e2b90306389c9dbcf1a6b19#L0R155\n. See the ticket description. Also see https://github.com/liip/LiipHelloBundle/commit/edb81a207ef7ee901e2b90306389c9dbcf1a6b19#L0R155\n. can you try https://github.com/FriendsOfSymfony/FOSRestBundle/pull/526\nneed to clear the cache.\n. @everzet what @stof said .. this way you can also have a generic base class if you are not yet on 5.4.\nfor subresources our concept was to require separate controllers.\nie. UserController for /users, UserTopicController for /users/topics etc.\n@asm89 I discussed this option with @beberlei but we didnt want to force the use of annotations. that being said, i think i now know a bit more about routing and will make another attempt at trying to add a new parameter to the routes to be able configure this new behavior.\n. @everzet what @stof said .. this way you can also have a generic base class if you are not yet on 5.4.\nfor subresources our concept was to require separate controllers.\nie. UserController for /users, UserTopicController for /users/topics etc.\n@asm89 I discussed this option with @beberlei but we didnt want to force the use of annotations. that being said, i think i now know a bit more about routing and will make another attempt at trying to add a new parameter to the routes to be able configure this new behavior.\n. @asm89 i have done some refactoring to radically simplify the code base. i am fairly happy with things now .. except for the logic for how to determine if to pluralize or not inside getHttpMethodAndResourcesFromMethod().\nRight now I am using \"List\" as well as the conventional http methods to trigger the pluralization. Switching to instead prefixing the http method with \"c\" seems less intuitive.\nAlso I am not sure about the special rule for conventional http methods. Right now one needs to write newArticlesAction() and imho it would be nicer to be able to write newArticleAction(). I haven't changed this, but it would be easy to do. But what I did make possible is to write newAction() instead of newListAction().\n. @asm89 i have done some refactoring to radically simplify the code base. i am fairly happy with things now .. except for the logic for how to determine if to pluralize or not inside getHttpMethodAndResourcesFromMethod().\nRight now I am using \"List\" as well as the conventional http methods to trigger the pluralization. Switching to instead prefixing the http method with \"c\" seems less intuitive.\nAlso I am not sure about the special rule for conventional http methods. Right now one needs to write newArticlesAction() and imho it would be nicer to be able to write newArticleAction(). I haven't changed this, but it would be easy to do. But what I did make possible is to write newAction() instead of newListAction().\n. ok .. i decided i didnt like \"List\" as a special resource, since its not a standard term in the REST world. switching to \"Collection\" seemed better .. but that seemed a bit long and stuff like \"postCollectionAction\" still sounded stupid.\nas @asm89 pointed out we already have special handling for the http methods, so it makes more sense to do such stuff there as well. for now i went with the \"c\" prefix.\n. ok .. i decided i didnt like \"List\" as a special resource, since its not a standard term in the REST world. switching to \"Collection\" seemed better .. but that seemed a bit long and stuff like \"postCollectionAction\" still sounded stupid.\nas @asm89 pointed out we already have special handling for the http methods, so it makes more sense to do such stuff there as well. for now i went with the \"c\" prefix.\n. @asm89 can you summarize the behavior or implementation advantages of your approach?\n. @asm89 can you summarize the behavior or implementation advantages of your approach?\n. ok .. i cherry picked your tests and made them work with my implementation. so from my POV the main thing missing now is docs .. for now see the tests and the LiipHelloBundle example\none area where i am still a bit unsure if it should be possible to configure sub resources via the controller name because we already support this via the \"parent\" .. then again if i want to split up my controller into a UserController and a UserCommentController .. i might also want to have a CommentController .. so leaving out the parent resource from the controller name could lead to collisions. so i think its fine the way it is.\n@everzet can you have a look?\n. oops .. didnt realize the PR didnt include docs .. any volunteers?\n. oops .. didnt realize the PR didnt include docs .. any volunteers?\n. Can you test if this is caused by the JMSSerializerBundle?\n. ok .. just tested this myself .. it seems to be an issue inside JMSSerializerBundle. then again you dont have any metadata assigned on the stdClass, but i guess there should be some special handling that just casts a stdClass to an array. please open a ticket on JMSSerializerBundle and discuss the topic with @schmittjoh.\n. i cannot reproduce the issue .. to check if its just a newer version i also just updated everything and i still cannot reproduce the issue\n. i should note that i am not using ParamConverter much at all .. i certainly didnt configure a namespace chain.\n. ok .. can you send a PR?\n. 5 sounds fine to me :)\n. it seems you ar using '@View' without a 'use' statement importing the class\n. for Symfony 2.1 with composer do:\nhttps://github.com/symfony/symfony-standard/blob/master/app/autoload.php#L14\nFor 2.0 do:\nhttps://github.com/symfony/symfony-standard/blob/2.0/app/autoload.php#L35\n. The reason why they dont show up is because of this:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Controller/ExceptionController.php#L57\nI dont really think we should add this feature, but we should look into making it easier for you to be able to add this for your application.\n. one solution i guess would be to make the wrapper class configurable. alternatively we could move the creation of the wrapper instance into a method to make overriding easier. i am leaning towards the second .. can you play around with this?\n. Yes, but I am worried that we are putting too many features into this Bundle and so I really want to keep things focused on just what is more or less directly related to speeding up development of APIs that follow the relevant HTTP specs and REST \"standards\". can you send a PR for that new method in the ExceptionController? please also feel free to add some documentation.\n. all good .. thx\n. i havent tested this feature myself yet. it was contributed by @naahuc but it appears we have no tests for it ..\n. ah right .. afaik there is work being done on the JMSSerializerBundle to make it possible to combine strategies .. @schmittjoh ?\n. @schmittjoh why not offer a sane standard implementation as part of the Bundle?\n. @schmittjoh why not offer a sane standard implementation as part of the Bundle?\n. hmm .. ok .. in this case we will need to figure out how to deal with this inside FOSRestBundle ... as we are offering annotations for version and group, i guess we will need to provide an implementation as part of this Bundle with the option of replacing it with something custom. anyone willing to work on this?\n. hmm .. ok .. in this case we will need to figure out how to deal with this inside FOSRestBundle ... as we are offering annotations for version and group, i guess we will need to provide an implementation as part of this Bundle with the option of replacing it with something custom. anyone willing to work on this?\n. obviously once we have that .. we can remove the limitation of only allowing one of the strategies to be set\n. obviously once we have that .. we can remove the limitation of only allowing one of the strategies to be set\n. no. but I will work on this bundle tomorrow. so maybe I can find time to revisit the topic\n. relates to https://github.com/schmittjoh/JMSSerializerBundle/pull/140\n. @gimler @phidah could you guys look at the above noted PR. there are no tests for this yet, so it would be great if you guys could look into the underlying branch, add a test case and fix things if needed ..\n. hmm .. i am not sure about the intention of that class .. @everzet was it intended to be abstract?\n. hmm .. i am not sure about the intention of that class .. @everzet was it intended to be abstract?\n. see #288\n. you raise a very valid point here .. that being said .. ViewHandler returns a response, so why not set what you need on there?\n. you raise a very valid point here .. that being said .. ViewHandler returns a response, so why not set what you need on there?\n. Currently I dont see the big advantage of doing it on the View instance before handing it to the ViewHandler compared to doing it on the Response instance that is returned by the ViewHandler.\n. Currently I dont see the big advantage of doing it on the View instance before handing it to the ViewHandler compared to doing it on the Response instance that is returned by the ViewHandler.\n. and using SensioFrameworkExtraBundle annotations or LiipCacheControlBundle url based cache headers do not work for you in this case?\ni realize that in some situations hardcoded values will not work, but i dont really want to replicate the entire cache related API .. one option that i could live with more easily would be to support setting a closure on the View instance that operates on the response similar to what we did for the Serializer.\n. and using SensioFrameworkExtraBundle annotations or LiipCacheControlBundle url based cache headers do not work for you in this case?\ni realize that in some situations hardcoded values will not work, but i dont really want to replicate the entire cache related API .. one option that i could live with more easily would be to support setting a closure on the View instance that operates on the response similar to what we did for the Serializer.\n. @borisguery yeah .. i see that for conditional cache headers right now we require using the ViewHandler to get the response to be able to set the header. if anyone has an elegant idea of how to avoid this let me know.\none option i can think of is allowing to create the response instance and set it on the View instance, rather than creating it inside the ViewHandler:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/View/ViewHandler.php#L335\n. @borisguery have a look at ab65d1575ca7554dc90e8743dfd1b3137c8b5482 .. didnt test this at all yet .. but this is what i was thinking .. you would then create the Response instance in your Controller, set the cache headers and set that in the View.\n. i assume the issue is fixed now .. please reopen if not.\n. can you add some docs/tests to illustrate how to use this?\n. oh and while you are at it .. can you also make the Route class abstract as per @everzet's comment.\n. ping\n. i will be working on the topic of HATEOAS in the coming days with @beberlei. i will then decide if we want to support this or not ..\n. if you can add tests/docs as noted above i will merge it.\n. ok making the Route class abstract doesnt make sense.\n. @everzet can you comment on this?\n. ok .. will make a tag with the current state and bump the dev version before merging this.\n. 0.9.0 is tagged and this PR merged afterwards.\n. struggeling to find time to address the open PRs that affect some of the recently added features before i can make another release.\nmost noteably:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/307\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/309\nif you can help review/finish these it can go faster :)\n. the big question is if we should replace headers with the View headers when the user has set a Reponse manually.\n. @stephpy well i dont want to add a bazillion options .. so i am tending to not replace them .. so this would mean by default setting headers on the View instance will be ignore if a Response instance is set. If you do want them to matter .. you would need to implement a custom ViewHandler\n. one thing we could do is create a Response instance as soon as a View header is set. We would then (optionally?) replace the headers if a new Response instance is set.\nsomething along the lines of:\n```\ndiff --git a/View/View.php b/View/View.php\nindex 10029de..191b002 100644\n--- a/View/View.php\n+++ b/View/View.php\n@@ -139,7 +139,11 @@ class View\n      */\n     public function setHeader($name, $value)\n     {\n-        $this->headers[$name] = $value;\n+        if (null === $this->response) {\n+            $this->response = new Response();\n+        }\n+\n+        $this->response->headers->set($name, $value);\n     return $this;\n }\n\n```\n. So I did some more refactoring of the header handling and I think its starting to look pretty code from my point of view.\n. ok travis is now \"happy\" in so far that dev-master testing is currently broken because of SensioFrameworkExtraBundle https://github.com/sensio/SensioFrameworkExtraBundle/issues/158\nthe last question I have is if we should remove View::getHeaders()\n. @borisguery can you also comment on this PR?\n. ok merging in the current state for now .. we can still ponder if we kick our reduce the API methods for headers in the View ..\n. @borisguery could you look into creating a PR removing those header methods?\n. i think if at all pluralization needs to be disabled only on the resource level, since otherwise it can cause incompatibilities between Bundles expecting the option to be on or off.\n. look at the annotation class and add another property. this will result in having another attribute to set in the annotation\n. can you just open a PR with your work? makes reviewing easier.\n. closed via https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1096\n. Just so that I understand this properly, you are having issues with the JsonDecoder? its pretty much just using json_decode so it seems strange to me that this core feature of PHP is incorrectly handling boolean values.\n. all this Bundle is to assign the decoded json string to the request property of the request.\n. quite likely the issue is somewhere else indeed.\n. closing this ticket as its not related to this Bundle.\nthat being said i do agree that something should be done to make this use case possible.\n. if there is anything we can add to the bundle to help here feel free to submit a PR\n. if there is anything we can add to the bundle to help here feel free to submit a PR\n. can you create a PR? that being said IMHO this should be optional. not sure if it should be on by default\n. i dont quite understand what you mean .. you can always create a new branch from master and apply only the changes you want.\n. which merge? I do not see any referenced merge in #740\n. you will need to pass all data in as the first parameter where you are currently just passing in $entity. now i am not sure if there would be a way to get the same json data structure in this case. so you might need to add some conditional there like if ($view-> isFormatTemplating()) { $view->setData(array('name' => $name, 'data' => $view->getData())) }\n. ah right .. the method is on the ViewHandler. also you need to pass in the format.\nif ($this->get('fos_rest.view_handler')->isFormatTemplating($_format))\nthe $_format variable can just be placed into your action signature.\n. hmm not sure. we could offer an interface and a default implementation which allows setting different data for templating and non templating formats which is then checked for inside the ViewHandler. will need to think about this. \n. @schmittjoh wondering if we could annotate a class in such a way that only a single property would be serialized and that the output would be exactly like as if the contents of that property would have been passed to the serializer?\n. maybe you can get some feedback from @schmittjoh by opening a ticket on JMSSerializerBundle\n. fixed with #307\n. did you enable the param_fetcher_listener?\n. did you manage to get the issue fixed or are you still having this issue?\n. fixed with #307\n. will need to dig into this .. not sure how soon i can .. gut the use of __get is in general something i would try to avoid .. but sometimes its the best solution .. so i am not saying its out of the question to be used .. especially for this use case it seems less risky as its just a \"data\" object.\n. @damienalexandre this sounds sensible .. can you try to come up with an implementation for that?\n. @borisguery what do you think about that approach and do you have time to work on it?\n. ok great .. @borisguery can you remove that one unnecessary else and add a note to the docs?\nthen i will merge.\n. good point .. we should probably leverage the ExceptionController. can you look into that?\n. i just pushed a totally untested branch where i started on my proposal. would be awesome if you can finish it .. either using my commit as a basis or just inspiration.\n. Not sure I agree with this approach. Like I said I would prefer to reuse the ExceptionController. F.e. this code here would break if I would enable the 403 response for the html format since I would then have to set a template for the ViewHandler.\n. are you still working on this?\n. the issue with a listener is that you need one for every entry point. this is cleaner but not really feasible.\n. see #319 .. could you rebase this PR to just contain the tests?\n. yes .. that would be great!\n. you need to ensure that the subrequest will use the format you want as by default it will end up using html which by default requires a template.\n. well its not mentioned because you can choose one without the other, but you can use the two together.\n. the result of that would be that for the html format it would use the JMSSerializerBundle.\nwhat are you trying to output? if its html, you just have to make sure that either you are setting a template manually, or you are using the @View annotation .. and obviously that a template exists.\n. so if you want to output json, you have to ensure that the subrequest uses the json format. what format is your main request? what does the code for your forward call look like?\n. If you could setup a fork of the Symfony2 SE illustrating the issue, it would help in getting this issue fixed. Most users I guess are not using this Bundle in subrequests.\n. i setup a test case .. for a subrequest the original request is \"duplicated\" meaning that the HTTP methods remains the same regardless of which method you call. if you POST .. you can do a subreqest to a POST method and it loads the template just fine.\nnow if you want to change the method type you need to create the request manually and pass it into the method. however then you will also by-pass quite a bit if listener infrastructure and therefore you would manually need to set the request attributes that SensioFrameworkExtraBundle bundle uses sets ..\nso the lesson learned .. RAD tools like SensioFrameworkExtraBundle work until you leave the \"standard path\" .. if you stick to making everything explicit .. then things would still work ..\n. @MaksSlesarenko this is what you have to do .. every subrequest is a new request, so anything you want to carry over to the new request you have to explicitly pass to the subrequest.\n. you cannot use the forward() method in this case. you need to set the id as a request attribute on the new request object, which is impossible with this method as you can see:\n```\n    // Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller\n    public function forward($controller, array $path = array(), array $query = array())\n    {\n        $path['_controller'] = $controller;\n        $subRequest = $this->container->get('request')->duplicate($query, null, $path);\n    return $this->container->get('http_kernel')->handle($subRequest, HttpKernelInterface::SUB_REQUEST);\n}\n\n``\n. i hope you can figure it out with this information. if you do .. please open a PR to improve the documentation\n. aside from this .. please look at the code I pasted for whatforward()` does .. it clones the request and then uses the kernel to do a sub-request. what i told you was that you need to manually configure the request which this method does not support. but of course you could duplicate the logic from the forward method to be able to add what you need. its just 3 lines of codes so no big deal.\nfor Example:\n```\n    public function myForward($controller, $foo, array $path = array(), array $query = array())\n    {\n        $path['_controller'] = $controller;\n        $subRequest = $this->container->get('request')->duplicate($query, null, $path);\n        $subRequest->attributes->set('id', $foo);\n    return $this->container->get('http_kernel')->handle($subRequest, HttpKernelInterface::SUB_REQUEST);\n}\n\n``\n. well I am sure you can come up with a creative way to make$subRequest->attributes->set('id', $foo);` more flexible. again the key point is that you need to set any pattern placeholders as request attributes when you want to do a sub-request.\n. Generally a shared service is the better approach.\nI would not use a sub-request.\nThere might be cases where it could make sense to call the external API from your server though when you are using a reverse proxy and there is a high probability that revers proxy can serve the request from its cache.\n. that is why i said could make sense to call the external API from your server\n. good question .. @seldaek do you have an opinion on this? i would lean towards option 2 .. or maybe a flags attribute.\n. ok .. so i guess this ticket can be closed?\n. Well in general the purpose of this bundle is to help build restful applications. it isnt so much about fixing broken clients, though I am not going to say flat out no since we all have to live in the real world and being restful isnt a dogma but just a way to solve real world problems. The issue with doing our own \"fixes\" is that they tend to break key assumptions which kind of brings down the entire house. So whenever doing anything like this it has to be well thought out and ideally be based on a popular solution to the same problem.\nHave you looked at how the BodyListener works? maybe you can solve your issue by just registering a decoder?\n. ok finally got some time to look at this in details.\nfirst up postUserAction should be written as postUsersAction since you are posting to the users collection. for putUserAction i guess the idea is that you are putting a single user. not sure if this is logical but this is how it is atm ..\nnow with the following code:\n/**\n * @Prefix(\"api\")\n * @NamePrefix(\"EDDM_CampaignApi_\")\n */\nclass UserController extends Controller\n{\n    public function getUserAction($id) {}\n    public function postUsersAction() {}\n    public function putUserAction($id) {}\n    public function deleteUserAction($id) {}\n    public function getUsersAction() {}\n    public function patchUserAction($id) {}\n    public function optionsUserAction($id) {}\n    public function optionsUsersAction() {}\n}\ni get these routes:\nEDDM_CampaignApi_delete_user      DELETE  /api/users/{id}.{_format}\nEDDM_CampaignApi_get_user         GET     /api/users/{id}.{_format}\nEDDM_CampaignApi_get_users        GET     /api/users.{_format}\nEDDM_CampaignApi_options_user     OPTIONS /api/users/{id}.{_format}\nEDDM_CampaignApi_options_users    OPTIONS /api/users.{_format}\nEDDM_CampaignApi_patch_user       PATCH   /api/users/{id}.{_format}\nEDDM_CampaignApi_post_users       POST    /api/users.{_format}\nEDDM_CampaignApi_put_user         PUT     /api/users/{id}.{_format}\nisnt this what you want?\n. oh and using http://symfony-standard.lo/app_dev.php/api/users.json with a POST/OPTIONS request gives me GET, OPTIONS, POST for the Allow response header \n. closing .. please reopen if i did not properly analyze the issue.\n. hmm i guess it makes sense ... @beberlei?\n. @mdarse please fix the tests and then i will merge\n. you need to manually set a @NamePrefix(\"my_prefix\") .. guess we could consider automatically adding such a namespace prefix.\n. to the controller https://github.com/liip/LiipHelloBundle/blob/master/Controller/ArticleController.php#L22\n. closing .. please reopen if there are still questions. \n. have you seen this? https://github.com/FriendsOfSymfony/FOSRestBundle/pull/266\n. Your approach is not bound to using the ViewHandler. the draw back is that it adds overhead to all requests, even those that do not use jsonp.\nThere is also a fundamental difference, since you detect the fact that its a jsonp request by looking of there is a callback in the request, while in my PR the idea would be to detect it based on the mimetype. however there is an issue with my approach (see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/266#issuecomment-7620512), which I never had the time to investigate ..\n. @gimler ping .. this one was for you :)\n. isn't there another PR related to link?\n. i will be working on the topic of HATEOAS in the coming days with @beberlei. i will then decide if we want to support this or not ..\n. if you can add some docs i will merge it .. even though LINK is not anymore part of the spec.\n. same place as the docs you linked in the description.\n. i cannot reproduce the issue:\nhttps://github.com/liip/LiipHelloBundle/blob/master/Controller/ExtraController.php#L13\ngives me:\n$ app/console router:debug | grep extra\n_extra_noname                     ANY    ANY      /liip/extra.{_format}\n_extra_name                       ANY    ANY      /liip/extra/{name}.{_format}\n. can you create a failing test case?\n. @hradtke i do agree that its impossible to write a tool that will turn your code into a RESTful application. This is why I have always taken the approach in this Bundle of \"use at will tools\". Notice that its possible to disable the automatic link relations and add new link relations in this PoC. Also like I was discussing with @ludofleury by linking the configuration to the controller methods, rather than the entity, we can also look into more context aware link relations.\n. looks like we should instead focus on https://github.com/willdurand/BazingaHateoasBundle now.\n. that was the case with FSCHateoasBundle more or less as well. the goal of this PR is to integrate the information we have about the routes via the route generation.\n. yeah, i guess its not very useful anymore.\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/392\n. maybe we should have a ViewHandler::getContent() method? alternatively/additionally maybe we should have a way to map \"abstract formats\" to \"primitive formats\".\n. @Elexy could you look into this topic?\n. this example here should do the trick:\nhttps://github.com/liip-forks/symfony-standard/blob/techtalk/app/config/config.yml#L95\n. ah then I misunderstood your question. I guess we could make it an option if it should return with the mapped or the matched content type. \n. hmm you have a point there. not really sure what the philosophy is there. the Bundle will then no longer work with any version before 1.0 which in turn means that users using Annotation mapping will need to update their mappings. then again i guess those using other mapping formats should not need to change anything unless they also have custom handlers etc.\n. no .. the latest supported version is 0.10, which includes the event related changes, but not the separation of the JMS Serializer. now supporting 1.0 is actually quite easy and i guess i will make a new branch asap that does. the question is however how to proceed from here.\ni can of course just do the changes and increase the minor version of this Bundle .. or should we just tag the current state as stable .. and then follow up with 1.1-dev or 2.0-dev ..\n. here you go #332\n. just realized that JMSSerializerBundle 1.0 is no longer compatible with 2.0\n. @pulse00 2.0 of what? I seem to have confused you. hopefully @schmittjoh's answer has cleared things up.\n. so the topic is essentially:\n1) tag the current state as a 0.10.0 dev release, continue in dev mode (ie. 0.11-dev) requiring JMSSerializerBundle 1.0 (meaning when using JMSSerializerBundle, then Symfony2.0 is no longer supported in 0.11-dev/dev-master)\n2) tag the current state as a stable release with minimal support (no new features, bug fixes only)\na) switch to JMSSerializerBundle 1.0 for FOSRestBundle 1.1-dev  (meaning when using JMSSerializerBundle, then Symfony2.0 is no longer supported in 1.1-dev/dev-master)\nb) switch to JMSSerializerBundle 1.0 for FOSRestBundle 2.0-dev  (meaning when using JMSSerializerBundle, then Symfony2.0 is no longer supported in 2.0-dev/dev-master)\n. for most people they will not even have to change any of their code to work with JMSSerializerBundle 1.0. the only need to change anything is if someone has implemented some customization into the serializer, as long as the project is already running Symfony2.1 ..\nfor the dependencies it seems like the job is more on the end of the JMS bundles\n. ok went with 1)\n. it is compatible with 2.1 .. we have functional tests in there to proof it :)\nyou just need to increase your dependencies to the other JMS Bundles.\n. not aware on anyone working on this atm\n. thanks to  #422 there is now a global flag for this .. not sure if we will bother with anything beyond that\n. actually maybe the defaults could be set in the route definition?\nnot sure if something like the following could be supported:\nrest:\n    resource: liip_hello.rest.controller\n    type:     rest\n    prefix:   liip/hello/rest\n    defaults: [_format: json]\n. the FormatListener is unfortunately very naive in its current form and i am hoping that with 2.2 we will have routing level support for content negotiation.\nthat being said .. i dont quite understand your separation of application and api. it seems odd to want to use media types, yet insist on a separate URL scheme for the same resources by media type.\nso unless you can convince me that such a separation makes sense, i dont really see a point in trying to change things.\nbut if you really want this, then you could extend the standard FormatListener or separate application and api via separate kernels.\n. in that case i would recommend using two separate kernels. you can easily set this up within the same git repo.\n. and why shouldn't using two kernels be just as usual?\nbut see my suggestion here:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/334#issuecomment-11060177\nwe could support setting different defaults while importing the same resource twice\n. not really sure if its the job of FOSRestBundle to teach this .. maybe we should have a cook book entry.\nhere are some docs (and even a script) about how to setup multiple kernels in one project:\nhttps://github.com/liip/sf2debpkg#application-structure\n. but i want to stress once more .. having a separate \"api\" and html resource urls is not REST. imho the only legitimate use is if you have radically different security setups for the API .. but even then i am not sure if its really necessary. a legitimate use case here would be for example a project where the API was only supposed to be accessed by other machines within the organizations intranet.\nbtw having separate kernels also has the added benefit if being able to trim down the loaded bundles and configured services.\n. @dvrenterghem-ibuildings what you propose sounds quite complex to me, also the intention of this bundle is to provide independent tools for REST APIs, so i am hesitant to forcing the use of the generated routes for negotiation.\nwouldnt my proposal in #334 solve your issue? if so could you work on implementing this?\n. @marcospassos I do not disagree with the use case. Like I said I want to support it .. but imho it requires proper support for this on the routing level .. anything else is just another hack that we will eventually need to break. So I encourage anyone interested in this to help on https://github.com/symfony/symfony/pull/5711 so that we can get core support for content negotiation and then we can revisit this topic to give control over the content negotiation on a controller level.\nnow if this seems too elaborate and you can make the case that adding such configuration to the current annotations we already support will be sufficiently forwards compatible with the work done in that PR, then I would be willing to consider it ..\n. so you are proposing a setting on the route pattern to decide if the format listener should be active or not? imho this is exactly a setting we would not need if we could configure the content negotiation as part of the actual route definition.\n. i think we still might keep this option to make it possible to set global defaults.\n. once we can define it on routes, we will support the mappings to set this via the fos rest routing. at this point i dont see a reason to add this feature as one will then either set this on a per controller/action or globally.\nit just seems like a lot of code and runtime overhead to do this with the approach you mention. but if you can get some support from other fos rest bundle users for this and a PR then i might be able to be convinced ..\n. btw i just tweeted a link to this discussion https://twitter.com/lsmith/status/289714694569218050\n. there is some documentation inside the docs for the tool we build to generate Debian packages:\nhttps://github.com/liip/sf2debpkg#application-structure\n. ages ago I also started on a listener based solution but never finished it because it felt like the wrong place to do this:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/136\nHowever as 2.3 is now released without support for content negotiation in the routing component, it might be worth it to finish this approach to at least have something that works for some use cases. however i personally do not have time to push this.\n. see #552\n. this needs a rebase\n. see https://github.com/symfony/symfony/pull/5875\n. so the issue is fixed .. leaving the ticket open for anyone who wants to do the xsd clean up.\n. well it was a BC break that wasnt supposed to happen.\n. @Elexy another ticket you could have a look at.\n. happy to merge a PR for this :)\n. hmm no i dont think its possible. i guess adding such a feature would be ok as i suspect there are others wanting this too. that being said its not really restful. the proper way would be to simply add another route with a redirect to this route to enable this short cut.\n. @pulse00 my point was that /api/users/{id} is just fine for exactly that .. but you can make a redirect alias from /me to there.\n. i am sure there must be some error reported somewhere. there isnt anything that could cause the server to freeze like you describe inside the this bundle that i can think of.\n. yes .. the view annotation is a method level and not a class level annotation.\n. good point .. @Dewos can you go through all of the FOSRestBundle annotations and add those @Target annotations with METHOD/CLASS/PROPERTY as needed?\n. yes\n. i think this is simply an edge case that was never considered. i think the routing layer gets confused by the use of \"post\" .. but this needs some investigation.\n. @Elexy another ticket you could have a look at.\n. see #549\n. see #549\n. your analysis sounds correct. imho the routing part of this bundle should probably be rewritten from the ground up eventually to better deal with all of these edge cases.\n. hmm can't say from the top of my head .. but its definitely in that class\n. imho we should then always use such a prefix for collections, not just when the c prefix is used. this would of course be a big BC break but it might indeed be the best solution.\n. i would need to dig in too .. we do have fairly good tests for the core feature set .. so refactorings are possible without risking gigantic accidental breakage .. but there is the big risk of edge case behavior changes :-/\n. yes generateUrlParts() has become increasingly complex and could definitely use some refactoring .. though i dont have an idea how to improve it really. the only \"idea\" i currently have is just making generateUrlParts() even messier by returning both the $urlParts as well as a flag if its a collection or not.\n. @Elexy another ticket you could have a look at.\n. fixed by https://github.com/FriendsOfSymfony/FOSRestBundle/pull/761\n. basically you need to decode the request data. for this there is the body listener if the data is not submitted as www url encoded. from there you should be able to easily create a new model instance or fetch and update an existing one.\niterating over the array and calling relevant setters should also allow for a generic solution, though you would then also need to deal with security implications somehow.\nas for why there isnt an example for this in the HelloBundle, then the answer is simple: i didnt have the time/need to do this myself yet and nobody has provided a PR either .. so feel invited :)\nbtw https://github.com/symfony-cmf/CreateBundle together with https://github.com/flack/createphp does over a generic solution without SF2 forms .. but it requires sending JSON-LD and maintaining a mapping file per model. so i assume this isnt exactly what you are looking for either.\n. @schmittjoh do you have an opinion here?\n. OK. let's look into adding support for this in the ViewHandler.\none thing we should also look at is the HTTP status code, ie. 200 vs. 204\n. @j can you work on a PR?\n. not sure I understand what you mean\n$ php -r \"var_dump(json_encode(null));\"\nstring(4) \"null\"\n. well as you found out, we are strict here in regards to if the response is actually empty or not. the question I have is why do you want to return a status header that says that the response is empty when in fact it is not?\n. well an empty array is something very different than null or an empty response. so i think the current behavior is correct.\n. did you enable the ExceptionController?\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/4-exception-controller-support.md\n. yes .. it should be enabled this way. in this case i can only imagine that the failure happens so early in the request that the exception controller isnt called for some reason ..\n. yeah .. i would hope that we can ensure that everything goes through the exception controller. if you could figure out why this isnt happening that would be awesome.\n. thx for debugging this .. indeed tricky. it makes sense to have a default format i guess but we would need to have a quick way to find out if its explicitly html or if its just the default so that we can then decide if we should trigger some logic to try and determine a more appropriate format.\n. well what i was talking about would require a change in the core Request class\n. i think for your case it would be better to simply extend the ExceptionController and add such a check. if it becomes clear that this is an unresolveable issues on the core then we might indeed have to add something like this. but i dont want to start adding band aids over core issues by replicating the routing partially.\n. well we do need to keep an eye on this topic and if necessary we would indeed need to add some logic to handle this .. but i would like to refrain from doing it just now. that being said .. if you want to do this inside a PR to collaborate with others that is all good too .. \n. I have added a feature that enables you to set a different fallback format for exceptions. this is useful especially when one does not want to set a fallback format to ensure that unsupported formats get a 406 returned. previously though this often meant that the response would then be html. with this new setting its possible to set a specific format for exceptions in this case.\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/940 .. its part of 1.5.0-RC4\n. yes that is fine for me. can you send a PR?\n. can you elaborate what the purpose is of this PR?\n. @drgomesp you then need to explicitly add a dependency on jms/serializer-bundle and jms/serializer etc with @dev appended to allow dev stability for exactly those packages\n. these are not \"dev\" requirements .. ie they are not requirements for development only. these are requirements that are in development state. so move them to the require section.\n. \"jms/serializer-bundle\": \"0.10@dev\" is wrong .. you need to use the latest version of the bundle\n. does it work when you use the serialized service directly?\n. you can check the docs here http://jmsyst.com/bundles/JMSSerializerBundle\n. i have always been using annotations .. but there it worked fine for me.\n. 1.0.*\n. https://github.com/liip-forks/symfony-standard\n. you can debug this in the FormatNegotiator in the fos-rest package. BTW in the above conduit example you are missing the quotes around json.\n. can you please open a ticket on the JMS serializer repo?\n. this is used to by pass the serializer entirely if null is passed to the ViewHandler as the$view`` data\n. you need took check in JMS serializer itself if there is a way to force it to use array notation for json\n. there might be a solution possible. recently someone created an array serialization handler for JMS serializer. maybe you can construct something with that.\n. I suggest you open a feature request on the serializer.\n. so this can be closed?\n. did you check https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/6-automatic-route-generation_multiple-restful-controllers.md ?\n. ping.\n. can you elaborate a bit more on how youGET data through FOSRestBundle`?\n. this sounds a bit like you are having more general problems with unicode than with this particular bundle.\n. can you create a test case for the test suite in a pull request?\n. here are some tests that might work as inspiration:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/tree/master/Tests/View\nthat being said .. it sounds a bit strange. so i suspect that it might be some interaction between different pieces in your project.\n. you can follow the steps that travis ci runs:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/.travis.yml\nyou need to install phpunit:\nhttp://www.phpunit.de/manual/current/en/installation.html\ncomposer install --dev\nphpunit\nanyway .. you can also just fork this repository. do your changes and create a PR. then travis ci will automatically run your new tests.\n. now you need to create a PR:\nhttps://help.github.com/articles/creating-a-pull-request\n. everything works fine for me .. it seems more like a misconfigured browser and/or incorrect  tag that is causing your issues:\n\n. well this is the source:\n{\"articles\":[\"b\\u00eem\",\"b\\u00e0m\",\"b\\u00efng\\u00f4\"],\"page\":\"1\"}\n. i do get the same output as you do in safari.\n@schmittjoh does the serializer do anything in regards to unicode?\n. indeed\n$ php -r \"var_dump(json_encode(array('b\u00eem', 'b\u00e0m', 'b\u00efng\u00f4')));\"\nstring(41) \"[\"b\\u00eem\",\"b\\u00e0m\",\"b\\u00efng\\u00f4\"]\"\ni guess javascript should properly decode this ..\n. can you paste the coffee that is having problems with the decoding? the point is that it should not have any trouble deciding this if it's a json compliant decoder\n. i did some tweaks to your test case locally and it runs though without issues.\nagain i suspect that there is something else going on that is likely caused by the interaction of different pieces, not just this Bundle.\nmaybe it would be best if you could try to setup a reproduceable test case inside the Symfony SE.\nif you want you can use this project as a starting point as it already integrates all the relevant Bundles:\nhttps://github.com/liip-forks/symfony-standard\n. @Elexy another ticket you could have a look at.\n. someone needs to dig in and come up with a solution.\n. handled by #402\n. did you enable https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/3-listener-support.md#security-exception-listener ?\n. hmm in case access is denied it will throw an AccessDeniedException exception, which is what the FOSRestBundle listener handles. this isnt the \"proper\" way to do it .. but the only way to do it without having to write an access denied listener per auth provider. maybe there is some inconsistency with basic auth though.\n/cc @schmittjoh \n. thanks. IMHO however we should break BC and allow the user to set the context on the View and remove all the ecology methods. I think this way we can simplify this bundle. right now the View is duplicating a lot of the context class of the serializer\n. yeah i think it can then be dropped, just like many other methods to set the groups, versions etc.\n. @gordalina do you have some more time to work on this?\n. i have done some work to move things over to leverage the SerializationContext in #402 \n. not sure why that is a problem. at any rate feel free to fix. I am away from my laptop until Sunday evening\n. I will not have time to look at this until tomorrow. sorry\n. i just made a 0.8.0 release for FOSRest\ni also opened a discussion about the topic of how to manage Symfony2 dependencies on the mailinglist:\nhttps://groups.google.com/forum/?fromgroups=#!topic/symfony-devs/DI3l1Htg69k\n. its quite possible that there are some issues caused by 2.2 in regards to routing. could you examine the changelog/upgrading to see if you can locate the cause?\n. ping?\n. there has been a lot of messing around by @schmittjoh with the JMSSerializerBundle versions, which could be the cause of your issue. but we require 0.11.* which is specified as such in the composer.json:\nhttps://packagist.org/packages/jms/serializer-bundle\n. you need to require \"jms/serializer-bundle\": \"0.12.*\" \n. @Elexy can you have a look here?\n. ping\n. ping\n. have a look here https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Util/Pluralization.php\n. yeah ..\n. this now even configurable\n. this now even configurable\n. i cannot reproduce the issue in https://github.com/liip-forks/symfony-standard\n. this could be solved by delaying the aliasing of the service configuration into a compiler pass. ie. the following logic would need to be done in a compiler pass, which checks the existence of the given service before attempting to alias:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/DependencyInjection/FOSRestExtension.php#L57\n. 0.9.0 is the wrong version .. \nsee https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/composer.json#L43\n. you have a point there ..\nbut maybe what we should do is allow setting the service to false, to disable setting the alias or some other way. however setting the dependency on packagist would make it impossible to not pull in that dependency, which is definitely not correct either.\n. not really .. because that would then mean adding a required dependency on the SF2 serializer and very few people use that combo. and i do want JMS to be the default for that reason. but its doesn't mean that the bundle should have a hard dependency on JMS because as you noticed it can be disabled.\n. there really isn't any big problem at all from my POV .. \nthe only thing that one could consider doing is making it possible to not need any serialiser (in which case of course the view handler will no longer work)\n. well in this case we should improve the docs ..\n. i disagree. this bundle requires a serializer service. jms serializer bundle provides such a service and its what most users of this bundle are using. so i will configure to that by default. but as the bundle also works with that bundle, i am not making it a hard dependency.\nso again the only thing we can do is 1) update the docs 2) make it possible to disable the view handler (and therefore get rid of the need for a serializer)\n. there is a lot in the bundle unrelated to the view handler. a mock will then just lead to confusion about how to get something actually serialised and yes it does the conversion from object graphs to xml/json/etc\n. uhm .. jms serializer offers a lot of very advanced capabilities. so using it makes a ton of sense in many cases. at any rate .. i assure you that thought has gone into all of this and its been essentially like this for 2 years now. i suggest you first get a bit more familiar for how it plays out on practice and then we can see if we can figure out a better approach.\nfor now if you are motivated i would appreciate a PR to improve the install docs a note explaining the need for a serializer and the fact that JMS serializer is configured by default.\n. the dependency is declared .. just as a suggest not as a require. further more there is plenty of functionality that works without that dependency.\n. I disagree. I have no interest in maintaining this much code for very\nlittle benefit and increased runtime overhead. creating a super serializer\nis the wrong approach to handle giving users a choice in what serializer to\nuse\nOn Feb 28, 2014 9:36 AM, \"Iltar van der Berg\" notifications@github.com\nwrote:\n\n@matthiasnoback https://github.com/matthiasnoback That sounds like a\nreasonable solution.\n\nReply to this email directly or view it on GitHubhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/390#issuecomment-36330922\n.\n. i just do not think that its feasible. a compiler pass as suggested by @csarrazi seems much more realistic. we should then add an isEnabled() to the view config defaulting to true and then if enabled check if the requested serializer service actually exists and if not give a more meaningful error message.\n. I wasn't aware that there is a serializer service available in 2.3, is this provided by the FrameworkBundle? I do not want to bump the dependency to 2.3 if I do not have to. Then again 2.2 is soon EOL and at that point I am willing to consider it.\n. a doc PR is greatly appreciated.\n\nplease add isEnabled() to the view configuration, defaulting to true.\nas for the compiler pass. i think it would be good to go ahead and check in the compiler pass if the view config is enabled and if it is and the serializer service is missing to give a clear error message, indicating to look at the docs for details.\n. One isEnabled flag for the entire view section is enough, but yes we also need it for the param converter.\n. yes .. that is a possibility. however in that case I think what would make even more sense is to restart from scratch. a lot of the different listeners were created by different people. i am open to the idea but don't really have the time to work on this myself.\n. yeah well whatever .. I honestly do not care about this issue and I am tired about the whining on this topic. improve the handling when no serializer is available or read the docs.\n. yeah .. i think this is a good idea. essentially we need to move away from the static methods and instead inject a service. furthermore the Pluralization interface should be cleaned up to make it configurable via methods, rather than public properties.\nthat being said .. it might make sense to drop our solution and move to https://github.com/doctrine/inflector/blob/master/lib/Doctrine/Common/Inflector/Inflector.php\nwould you be willing to work on that?\n. have a look at the diff. there are quite a few issues with intending. the name of the inflector service should maybe be configurable under the routing config.\n. I wasnt talking about the namespace. i was talking about adding the name of the service into the Configuration.php to allow users to easily replace the default one with a customized one.\nAs for indenting, just look at the diff, you will see that in several places your additional code isnt aligned the same way as the existing code.\n. for the inflector i would make the service configurable .. not sure how useful it is to configure just the class.\n. looks good .. can you adjust the travis.yml file as follows:\nbefore_script:\n  - composer require symfony/framework-bundle:${SYMFONY_VERSION} --dev\nthat should fix the tests.\n. ok thx. i just send out a request for people to test this on twitter:\nhttps://twitter.com/lsmith/status/311770393113415682\n. @Elexy could you test this PR with your apps?\n. this PR now need a rebase.\n. just to clarify. what so you mean with 0.11 branch? the code in this branch (which is based on the 0.11 branch) ?\n. OK, thanks. @asm89 did you have a chance to test?\n. see #403 \n. i have merged #403 \n. @seldaek is there a more elegant way to adjust the composer.json when trying to test dev-master which currently is not allowed in the require-dev dependencies?\n. @Seldaek right ok that is one issue .. but the bigger issue i was asking about is the fact that with FOSRestBundle i want to explicitly not include the \"2.3\" releases (see the mailinglist discussion) as is the case. However I do want to run the tests against 2.3. Now as you can see there are several dependencies that would need to be adjusted both in the require and require-dev section. Maybe it would make sense to relax the dev requirements to already include the 2.3 requirements, so that i do not have to update all of them in .travis.yml which would be a major nuisance and could also lead to problems when the two get out of sync.\n. i guess we need to consider adding some BC hacks to make the bundle compatible with 2.3 (which would also get rid of the errors in the test suite in 2.2). aside from this to get the tests running with 2.3 we either need a SensioFramewokExtraBundle branch or some composer magic.\n. see #394\n. i guess this breaks compatibility with 2.0/2.1? if so we should add a BC hack\n. seems like these methods already existed in 2.1 so all is well.\n. you mean that the bundle should check if there is an Etag set on both the request and response, compare them and if they are the same return a 304? sounds useful. can you work on a PR?\nI guess the next step would be to allow a callback function to generate an Etag dynamically\n. @KingCrunch so if no etag was set, then we would need to allow for a callback to compute the Etag \"after\" the serialization/templating. we can then check again if we should instead return a 304. note that this feature would not really reduce cpu much, but would reduce network traffic. which is important enough f.e. for mobile devices.\nimplementing this should not be too hard. can you give it a try?\n. so we should do a check if there is an etag before doing serialize/templating and then if there is a callback compute the etag afterwards and then again compare.\nnow the callback should get the full request and response instances.\n. can you investigate why the etag is lost? the etag is stored in the headers, so something is probably replacing the headers.\n. we are indeed a bit inconsistent there. I will change all the places where we are currently throwing runtime exceptions to bad request. \nBTW the exception controller does support defining what HTTP status to use ona per exception class basis. \n. huh? this making is only triggered inside the exception controller which should never return a 200. this sounds strange and would indicate a bug somewhere\n. see #397 \n. would be good to have a test case to verify that this change corrects broken behavior.\n. ah ok i see .. why dont you think we should pass the handler to the callback anymore? i dont understand the issue you are fixing here .. #398 doesnt explain it either.\n. yeah .. lets fix the docs then.\n. sure .. not sure that i want to maintain BC though .. i do plan to have a 1.0 stable release for 2.3 but until then i am hesitant to maintain BC.\n. there is no tagged version yet, so did you set the minimum stability to dev?\nGrayson Koonce notifications@github.com wrote:\n\nWhat command installs jms/serializer-bundle 0.12? I do this and get a sad error:\ncomposer require jms/serializer-bundle Please provide a version constraint for the jms/serializer-bundle requirement: 0.12.* composer.json has been updated Loading composer repositories with package information Updating dependencies (including require-dev) Your requirements could not be resolved to an installable set of packages. Problem 1 - The requested package jms/serializer-bundle 0.12.* could not be found. Potential causes: - A typo in the package name - The package is not available in a stable-enough version according to your minimum-stability setting see https://groups.google.com/d/topic/composer-dev/_g3ASeIFlrc/discussion for more details. Read http://getcomposer.org/doc/articles/troubleshooting.md for further common problems. Installation failed, reverting composer.json to its original content. \n\u2014\nReply to this email directly or view it on GitHub.\ufffc\n. just to explain why: this is a security precaution to prevent accidental leaking of sensitive information\n. these methods no longer exist in the master version, they were dropped 0.12\n. you need to pick the version you want .. f.e. dev-master, or * or 0.12.* etc.\nthe versions are listed here https://packagist.org/packages/friendsofsymfony/rest-bundle\n\nto me this is sort of a composer question .. there are limits to what we can sensibly include in the docs here.\n. you need to write the exact exception into the config. as you can see you are not listing HttpException (actually you need to use the fully qualified name, ie. I assume its Symfony\\Component\\HttpKernel\\Exception\\HttpException) under the messages section in the config.\n. the codes section is about mapping an exception to an http status code to be used in the response. the mappings section defines for which exception the exception message should be included in the response. \n. sounds sensible.\n. i guess there is no better exception here .. we could introduce a specialized exception i guess.\n@stof do you have a suggestion?\n. hmm yeah .. that is a bit tricky though since its not so obvious what the value of the header should be. can you open a ticket for this and think of a possible solution?\n. the branch wasnt around when i last updated the composer.json. this is quite a messy situation. i hope we will not need a branch just to deal with this. \n. maybe the best solution is to just duplicate the code and get rid of the sensio dependency entirely.\n. btw .. i havent analyzed the issue at all yet and since i dont really use the view response listener the motivation to invest the time is a bit low given the OSS things i can work on.\n. thanks .. then we can also enable 2.3-dev aka master testing again.\n. still seeing this issue?\n. while you are at it .. can you also mark the CLASS level annotations? thx!\n. yeah .. i think so ..\n. i actually think that this is an omission in SensioFrameworkExtraBundle that should probably also be fixed. @NoRoute is method level and yeah it seems undocumented.\n. can you try and implement this?\n. i dont really use either of the features in any project, so its hard for me to tell what the best direction is ..\n. i dont really use either of the features in any project, so its hard for me to tell what the best direction is ..\n. that version requires 0.11.* of JMSSerializerBundle\n. maybe there is a bug in your routeRedirectView method? \n. ping\n. you need to allow dev versions for now\n. no its not .. but if you have suggestions to improve feel free to send them .. I will not invest any time in this myself. so it goes\n. can you add some docs and a test?\n. i wonder if we could even make this configureable on a per controller (or even method) basis .. but yeah makes sense to introduce this option.\n. Yeah well .. that would be not using FOSRestBundle but instead using SensioFrameworkExtraBundle .. which is of course ok .. but means that one would no longer use the method/controller name to determine the route structure .. nor the parent child relations.\n. wondering if it makes sense .. i mean i am sure there will be someone that will find it useful .. but not sure if its worth it to add even more options and code.\n. uhm .. the default is true .. so nothing should have changed unless you specifically disable the new option. if something changed then its a bug.\n. the issue hasnt been solved in core yet? /cc @fabpot\n. the issue hasnt been solved in core yet? /cc @fabpot\n. i have deleted all but 2 pages. one with a list of links that imho is useful still and the other with a meeting log, which i am keeping as a historical record.\n. can you spend some time debugging this? for example it should be fairly easy to change the priorities of the events.\n. Yes your understanding is correct. To fill in the blanks. Uncaught exceptions are handled by the kernel.exception event which in the end calls an ExceptionController. there is one shipped with TwigBundle which can optionally be replaced with one by FOSRestBundle (needs to be configured). both however do support returning json if that is set as the request format in the request instance.\nNow in both cases you have an uncaught exception, which will eventually end up in the ExceptionController. the problem is likely that in the force case the exception happens before the format is set in the request via the format listener.\n. at this point i do not have a solution. what we might need to do is trigger the format listener explicitly in the ExceptionController. could you have a look at that?\n. Ah I see .. I had already integrated the format negotiation into the ExceptionController. the impact of removing that line is very hard to predict. what might make more sense is to change the default 'html' to null for $format and only set the attribute if its non null. can you try that?\n. hmm looking into ExceptionListener .. the format is always set to $request->getRequestFormat() in the request created for the ExceptionController .. so I wonder why removing that line has any effect at all to begin with.\n. yeah that makes sense .. does that solve the issue for you?\n. yes .. please do\n. I guess if data is set we should render it. those who do not want to render any data should just leave it null and then we would leave the response body empty like we do now. can you work on a PR for this?\n. you should redactor the existing code for generating response content into a method so that you can reuse it. furthermore you should move the check until after the force redirect check that determines the actual final status code that is used. \n. ping\n. this is the results of the test suite on travis ci https://travis-ci.org/FriendsOfSymfony/FOSRestBundle\nfrom the looks of your errors you are not properly bootstrapping the tests, specifically the annotations:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Tests/bootstrap.php\n. it looks to me like you are running several test suites at once, which means you are not using the phpuniy XML we supply, which in turn loads or boot strap file.\n. @dupuchba as i explained to run the tests you need to setup not only the autoloader but also annotation parsing:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Tests/bootstrap.php\nthis is done in the phpunit xml we ship:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/phpunit.xml.dist#L3\nif there are still questions then you need to follow what travis does:\nhttps://travis-ci.org/FriendsOfSymfony/FOSRestBundle/jobs/6390304\n. it might work like this:\nfos_rest:\n    view:\n        mime_types:\n            json: ['application/json; charset=UTF-8', 'application/json']\n. yes .. this is a serializer topic.\n. can someone who is facing these issues check https://github.com/FriendsOfSymfony/FOSRestBundle/pull/809 and give feedback?\n. NoRoute is supposed to prevent the generation of a route for the given action method.\n. NoRoute is supposed to prevent the generation of a route for the given action method.\n. for 3. see #288 \n. for 3. see #288 \n. very cool .. can you add some docs?\n. btw .. i have been hoping for someone to help me out with the routing part of this bundle. there are lots of open tickets in this area and i just do not have the time to work through them.\n. btw .. i have been hoping for someone to help me out with the routing part of this bundle. there are lots of open tickets in this area and i just do not have the time to work through them.\n. just thought about one edge case that i am not sure if you considered it, what about abstract/interfaces classes? can you check if your code handles that properly?\n. just thought about one edge case that i am not sure if you considered it, what about abstract/interfaces classes? can you check if your code handles that properly?\n. great .. let us know when you are ready so we can review the changes.\n. ping\n. @stof can you have a look here?\n. @ChadSikorra can you have a look at the test failure?\n. ping\n. ping\n. ping\n. @Soullivaneuh see also https://github.com/FriendsOfSymfony/FOSRestBundle/pull/798 .. someone needs to go through the comments in each of these PRs and clean things up .. feel free to do this in a new PR .. @xabbuh also seems interested\n. can you add some docs?\n. can you add some docs?\n. hmm it seems like you are correct .. i just searched and didnt find anything on @Get, @Options etc .. would be great if you could fill this whole in the docs.\n. hmm it seems like you are correct .. i just searched and didnt find anything on @Get, @Options etc .. would be great if you could fill this whole in the docs.\n. ok.\n. ok.\n. ping :)\n. can you try to come up with a fix?\n. can you try to come up with a fix?\n. we have recently done changes to the default value of the status code in the View class\n. we have recently done changes to the default value of the status code in the View class\n. I guess this is more of a question for the serializer, but there you can create a handler to deal with these kind of resources gracefully.\n. indeed .. currently we have not allowed 2.3 yet .. but i guess its time to mark it as supported given that we have a beta release ..\n. should be fixed with 11726bd8753de1a402f80bfb671cd4437e2fcbbb\n. i assume you simply do not have the latest version (master):\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/DependencyInjection/Configuration.php#L60\n. i think i will just tag the next release without this feature.\n. well there seem to be issues with the ViewResponseListener. @blaugueux can you create a failing test case to show the issue created by this PR?\n. well there seem to be issues with the ViewResponseListener. @blaugueux can you create a failing test case to show the issue created by this PR?\n. @blaugueux ok merged .. can you also look at #446 while you are at it?\n. @blaugueux ok merged .. can you also look at #446 while you are at it?\n. @staabm here Symfony2 will remove the content anyway https://github.com/symfony/HttpFoundation/blob/master/Response.php#L210\n. @staabm here Symfony2 will remove the content anyway https://github.com/symfony/HttpFoundation/blob/master/Response.php#L210\n. i have no immediate plans to work on it .. just put it here so that its not forgotten and in the hopes that someone else picks it up.\n. i have no immediate plans to work on it .. just put it here so that its not forgotten and in the hopes that someone else picks it up.\n. I guess a start could be building a Symfony Standard edition fork that (re-)builds one of the examples from the ember.js community and seeing what is currently missing.\n. I guess a start could be building a Symfony Standard edition fork that (re-)builds one of the examples from the ember.js community and seeing what is currently missing.\n. This needs to be driven from the ORM/ODM metadata which then needs to be combined with the metadata in FSCHateoasBundle. Is there information missing on the ORM/ODM side?\n. The key thing to look at is the view layer. However I think a lot of this will actually end up being done inside the Serializer. This is exactly what FSCHateosBundle takes as the integration point. As a result you might actually want to focus on that Bundle for now. Here is a PR to integrate it with FOSRestBundle https://github.com/FriendsOfSymfony/FOSRestBundle/pull/327 .. as you can see it works in principle but the integration is not done in a very efficient manner. If you could wrap that up it would be a huge step forward for this topic.\n/cc @willdurand @adrienbrault\n. not that I know of .. would be awesome!\n. not that I know of .. would be awesome!\n. ok .. closing the ticket as there is now a Bundle for this\n. you need to use jms-serializer 0.12\n. you need to use jms-serializer 0.12\n. damn .. i guess i cannot remove the conflicts\n. damn .. i guess i cannot remove the conflicts\n. can you add a comment as soon as you have fixed the space issue?\n. can you add a comment as soon as you have fixed the space issue?\n. have a look at the view section of the docs. you can add a custom view handler ore just a callback for a specific format. alternatively you can have a look at the jms serializer docs\n. @stof ping\n. The setting does something different than you think.\nThe setting is not about serializing null values inside data, but rather serializing empty data at all.\nSee https://github.com/FriendsOfSymfony/FOSRestBundle/pull/356/files\nI can see how this can be confusing. Not sure if we need to have 2 settings for this ..\n/cc @j\n. indeed.\nfos_rest:\n    serializer:\n        serialize_null:          false\n. fixed via #480 \n. i am super busy with the CMF but one approach might be a new doc chapter that references your repository.\n. i think the best would be to send doc PRs to add these examples in the place where we already list some other examples\n. Can you elaborate a bit more what the issue is?\n. would be great if someone could donate a doc chapter on this.\n. injecting a service into an action is nothing doorsill with this bundle. either you use the base controller or some how else inject the container. alternatively you define your controller as a service and explicitly do the injection\n. this is basic Symfony2 stuff and covered well in the official docs.\n. you also need to ensure that your route is in fact using this service. i feel like you are jumping a head here. you really should try and learn the basics before getting to more advanced stuff.\na framework like Symfony2 requires a bit of studying before it can be used effectively.\n. @tystr that argument could be made indeed. @everzet ?\n. as for the instanceof check. in the ViewHandler I am less strict. obviously it's good to avoid fatal errors, but this reduces flexibility a bit, then again it seems reasonable that developers extend from either of the interfaces. BTW in the long run we might even want to allow configuration of the context.\n. @tystr can you make the necessary changes?\n. BTW tests seem to fail on 2.1\n. ping\n. closing in favor of #486\n. ping @tystr\n. ping @tystr\n. see also #484\n. imho its cleaner to just set a default in the xml file\n. hmm that should work .. can you debug this in the FormatListener (in this bundle) and FormatNegotiator (in the fos-rest library)?\n. hmm that should work .. can you debug this in the FormatListener (in this bundle) and FormatNegotiator (in the fos-rest library)?\n. this seems to add a bade for FOSRest instead of FOSRestBundle\n. there are a bunch of examples of various aspects of this bundle. like there is the LiipHelloBundle. there is also @gimler's rest edition. would be good to pull this all together and make it the official example repository. but I do not have time to make it happen. \n. there are a bunch of examples of various aspects of this bundle. like there is the LiipHelloBundle. there is also @gimler's rest edition. would be good to pull this all together and make it the official example repository. but I do not have time to make it happen. \n. what is the purpose of this ticket?\n. I am still not sure .. are you suggesting to expand the documentation?\n. if so .. it would be better to open a PR with your suggested change.\n. Indeed a ticket isnt the right place .. if its useful then it should be added to the documentation itself.\n. like I said at the time .. feel free to send a doc PR :)\n. like I said at the time .. feel free to send a doc PR :)\n. its easier to discuss your proposed change in a pull request.\n. i think this should be a separate setting. we could allow a string value for the body listener and if its a string assume that this is to be the default format.\n. i think this should be a separate setting. we could allow a string value for the body listener and if its a string assume that this is to be the default format.\n. note there are also some CS issues in your code:\nhttp://symfony.com/doc/current/contributing/code/standards.html\n. note there are also some CS issues in your code:\nhttp://symfony.com/doc/current/contributing/code/standards.html\n. ping\n. ping\n. no .. its not solved yet .. please see the comments I made in this ticket. feel free to solve them and submit the solution as a new PR\n. i assume you are in the dev environment and have intercept_redirects set to true?\n. i assume you are in the dev environment and have intercept_redirects set to true?\n. look in app/config/config_dev.yml ie. https://github.com/symfony/symfony-standard/blob/master/app/config/config_dev.yml#L12\n. look in app/config/config_dev.yml ie. https://github.com/symfony/symfony-standard/blob/master/app/config/config_dev.yml#L12\n. maybe related to https://github.com/symfony/symfony/issues/6735\n. maybe related to https://github.com/symfony/symfony/issues/6735\n. thanks .. could you also add some test coverage?\n. thanks .. could you also add some test coverage?\n. well i tag releases at regular intervals .. so there is a semi recent version without the change in #451\n. well i tag releases at regular intervals .. so there is a semi recent version without the change in #451\n. i think this change was applied right after the 0.12.0 tag. so just require that version for now.\n. i think this change was applied right after the 0.12.0 tag. so just require that version for now.\n. thx!\n. thx!\n. yes .. if you want to use the ViewHandler you need a serializer .. and we default to jms serializer.\n. yes .. if you want to use the ViewHandler you need a serializer .. and we default to jms serializer.\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/750\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/750\n. the PR I linked just means that one will get a more useful error message with 1.4.0-RC1 and above.\n. likely. i think to make it work you will have to map it as a string. anyway please check with https://github.com/schmittjoh/serializer\n. likely. i think to make it work you will have to map it as a string. anyway please check with https://github.com/schmittjoh/serializer\n. could you try and come up with a test case that illustrate the problem you fixed?\n. could you try and come up with a test case that illustrate the problem you fixed?\n. ping\n. ping\n. I guess I can tag 0.13 now as there isn't really any progress in wrapping up open topics.\n. done\n. ping\n. The issue is the accept header. you must either send application/json; charset=UTF-8 or application/json as the Accept header in your request\n. Alternatively prefer_extension needs to be enabled and then you can simply add a .json to your route pattern.\n. \"If you have a view with statuscode 201, the content is ignored. This is wrong - it should work in the same manner as responses for 201 - Created.\"\nI assume this is a typo and the first \"201\" was supposed to be a \"202\"?\n. I have stumbled over this myself more than once. But I do not think it would be wise to do this as it makes no semantic sense. Symfony core has this feature where if a trailing slash is added to the route pattern it will automatically also allow the non trailing slash variant. I find this quite iffy already. If you can leverage this feature without complicating the code too much and implement it as an optional feature I might be willing to consider it .. would like to hear other opinions on this ..\n. ping\n. can you create a test case for this and submit a PR for this? bonus points for also supplying a fix :)\n. this will hopefully be addressed with https://github.com/FriendsOfSymfony/FOSRestBundle/pull/955\n. I guess it means that 2.1 users will have to live with this issue as the patch is only applied to 2.2+\n. its always easier to discuss a feature suggestion in a PR\n. yeah .. since you seem to have an idea of what you want :)\n. fair point ..\n. yes .. if its ok for you just close it. thanks!\n. closed via https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1096\n. @eXtreme could you look into if the source that was synced has the same issue?\n. ok thank you .. can you investigate some more and try to come up with a fix?\n. can you try again?\n. hopefully fixed with 541645b\nspeaking of which .. our longest open ticket is https://github.com/FriendsOfSymfony/FOSRestBundle/issues/22\n. Given the old versions, there isnt really much I can do here. If you can reproduce the issue on the current versions with a test, then I can have a look at finding a fix. However you would then likely have to either update anyway or create your own fork of FOSRestBundle (though the issue could also be in Symfony2 itself .. 2.1 isnt supported anymore, so I am not sure if anyone has ever run the tests against 5.5).\n. we do not support 2.1 anymore .. but if someone can figure out the issue I am happy to merge a fix\n. we do not support 2.1 anymore .. but if someone can figure out the issue I am happy to merge a fix\n. you can set a response objct on the view and you can set the response status code directly on the view instance.\n. yeah that should do the trick. btw the else isnt needed since you return inside the if\n. These are all optional requirements. They are only needed for some features but there are features you can use without these requirements. So this is quite intentional. I see the issue but I fear there is nothing we can sensibly do here.\n/cc @seldaek\n. well any optional dependency should be tested and so its normal for optional dependencies to break the tests unless they are included and the way to do that is require-dev. now one could argue that even some more of the require dependency could be moved to require-dev.\ntake the serializer for example. the view layer can also work with the symfony core serializer or some serializer the user wrote.\n. to turn this around .. what would be an optional dependency from your point of view?\n. the relevant work is done in the BodyListener so if necessary debug there.\n. is this related to https://github.com/FriendsOfSymfony/FOSRestBundle/issues/585 ?\n. I must say the work done to integrate forms into this bundle is by for not complete. CRSF token generation is one topic there for example. As for the structure of the errors in a form, this isn't an exception. The rendering is done using the FormErrorHandler https://github.com/schmittjoh/serializer/blob/master/src/JMS/Serializer/Handler/FormErrorHandler.php\n. you could extend the view handler to customize the behavior for form errors. we might even discuss making this an (optional) out of the box feature.\nbtw the form status code is determined here https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/View/ViewHandler.php#L153\n. Certainly something to explore. I would suggest to open a PR adjusting the view handler. even if we in the end do not merge it .. it should then be easy for you to just move the code to an new class that extends from the view handler.\n. there is nothing in this Bundle specifically for pagination yet.\n@willdurand covered this briefly in http://williamdurand.fr/2012/08/02/rest-apis-with-symfony2-the-right-way/\nthe various Hateoas libs tend to provide some integration with some pagers.\nbtw some people also choose to do paging via HTTP headers in different variations\nhttp://codeartisan.blogspot.ch/2012/08/hypermedia-programming-lists.html\nhttp://otac0n.com/blog/2012/11/21/range-header-i-choose-you.html\nif you can come up with some sensible approach to integrate the various approaches in the the view handler we can discuss adding it. alternatively you can extend the view handler.\n. i am closing the issue for now .. until you have a concrete proposal .. ok?\n. nope ..\n. Because the purpose of edit (and new) is to present the API (ie. the edit/new form) .. the actual submit should be ob PUT/POST routes.\n. BTW if you feel like there should be a clarification on this in the docs .. please submit a doc PR\n. From a quick skim, this looks pretty good.\n. well that is a more general question in regards to the exception response content. that being said .. it certainly makes the life of a js dev easier to get it all as one chunk of data but yeah its redundant. but even then i guess in theory only the status_code should be necessary since it would clarify already if its an error or not and the status text is just a more human compatible version of the status code.\nIIRC i build this format from what Symfony2 core does by default. but looking at the current version in the TwigBundle for json it looks more like:\n{{ { 'error': { 'code': status_code, 'message': status_text } }|json_encode|raw }}\n. correct 1.0.0 stable is not yet released.\n. 1. yes, generally this is a good change\n2. i am ok with the BC break\n3. yes please\n4. only other topic was if we want to clean up the error response structure while we are at it.\n. I am overall quite happy with this. I just do not want to rush the merge as the next version is supposed to be 1.0.0 :)\nSo I want to give time for feedback .. so just a few more days without any more changes.\n. I am overall quite happy with this. I just do not want to rush the merge as the next version is supposed to be 1.0.0 :)\nSo I want to give time for feedback .. so just a few more days without any more changes.\n. there appear to be some test failures too.\n. there appear to be some test failures too.\n. The issue is probably here:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/EventListener/ViewResponseListener.php#L119\nNot sure how we can best handle this in a consistent way.\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/519\nmaybe the ViewResponseListener can simply not work in all cases? the other way to resolve this would be some way to dynamically tell the event listener to not set any data on the response .. but this also seems kinda ugly to add a feature to disable another feature.\n. i think its because i intended it to mainly be used for redirections after form submitting. but maybe we need to simply  offer a few dedicated classes for this?\n. i think its because i intended it to mainly be used for redirections after form submitting. but maybe we need to simply  offer a few dedicated classes for this?\n. the handling for different formats is done in the ViewHandler via the force_redirects config option.\nif we are to consolidate this, then i would probably we drop both classes and instead provide a selection of static methods in the View class itself for different use cases.\n. the handling for different formats is done in the ViewHandler via the force_redirects config option.\nif we are to consolidate this, then i would probably we drop both classes and instead provide a selection of static methods in the View class itself for different use cases.\n. any progress?\n. any progress?\n. the order of listeners is controlled by the listener priority. not sure if it would be unproblematic to increase the priority of the FormatListener\n. the order of listeners is controlled by the listener priority. not sure if it would be unproblematic to increase the priority of the FormatListener\n. @jaugustin is there a ticket/PR to fix the regression?\n. @jaugustin is there a ticket/PR to fix the regression?\n. can you check if the issue is solved in the 2.3 branch with this fix applied?\nhttps://github.com/symfony/symfony/pull/8985\n. the format listener is a controller listener so it will never run before a request listener. i have actually changed this listener to a request listener in the media type based routing WIP https://github.com/FriendsOfSymfony/FOSRestBundle/pull/561/files#L4R10\n. I am open to that. What priority would the listener then need to have?\n. i am not sure if there is something like this .. but https://github.com/egulias/ListenersDebugCommandBundle can help\n. @seldaek hmm trying to remember if we intentionally did not support this.\n. @seldaek hmm trying to remember if we intentionally did not support this.\n. no .. these doc comments configure the doctrine annotation system to automatically throw errors if there is a data mismatch.\n. no .. these doc comments configure the doctrine annotation system to automatically throw errors if there is a data mismatch.\n. i guess nobody is complaining .. so its fine :)\n. duplicate of #548 \ntl;dr its a regression in Symfony2\n. duplicate of #548 \ntl;dr its a regression in Symfony2\n. i think i was too fast with my assessment. this does indeed seem to be something else. can you paste your configuration?\n. i think i was too fast with my assessment. this does indeed seem to be something else. can you paste your configuration?\n. you have no configuration for the FOSRestBundle?\n. hmm i cannot explain this .. \nfos_rest.templating should always be defined and defaults to be an alias to the templating service.\nthe alias is set here:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/DependencyInjection/FOSRestExtension.php#L64\nand the default is enforced here:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/DependencyInjection/Configuration.php#L71\ncan you try to debug this?\n. heh ok\n. Well ideally we would make it possible to configure different priorities per route but this seems to be impossible currently. so the best we could do is provide a controller listener which I started implementing ages ago (omg I even know the ticket ID in my head #136). I dropped that approach back then because I decided it needs to happen in the routing but then never went back to this approach when I realized that its not possible to do this in the routing.\ntl;dr someone please write a controller listener to be able to customize the format priorities on a per controller (action) basis.\n. Well ideally we would make it possible to configure different priorities per route but this seems to be impossible currently. so the best we could do is provide a controller listener which I started implementing ages ago (omg I even know the ticket ID in my head #136). I dropped that approach back then because I decided it needs to happen in the routing but then never went back to this approach when I realized that its not possible to do this in the routing.\ntl;dr someone please write a controller listener to be able to customize the format priorities on a per controller (action) basis.\n. @Seldaek yeah .. sounds like a good idea to be able to define the priorities by path. that would be more efficient than a controller listener and would keep the configuration in one place.\n. @Seldaek yeah .. sounds like a good idea to be able to define the priorities by path. that would be more efficient than a controller listener and would keep the configuration in one place.\n. we should make use of the request matcher, see this listener for inspiration:\nhttps://github.com/liip/LiipCacheControlBundle/blob/master/EventListener/CacheControlListener.php\n. ok .. i have implemented the path approach. not sure if we should bother with BC handling for the old configuration style.\n. @matteosister I did some more tweaks. can you try again? if its not working can you check if prefer_extension is enabled?\n. can you paste your fos_rest configuration?\n. just fixed a bug that could have caused your issue\n. ok i fixed the issue .. i guess its too tricky to support default configuration for this setting.\n. your config looks correct on a quick inspection but i am absolutely certain that the format listener works in principle and i just verified once more with my test setup https://github.com/liip-forks/symfony-standard\nif you are sure that there is an issue then yes please open a ticket.\n. i dont use param converters .. so i am a bit hesitant to mess with that code since its hard for me to predict what side effects this might have.\n. @henrikbjorn or @stof do you have a comment here?\n. You are starting to convince me. Can you add some tests for this?\n. This Bundles requires at least Symfony2.1 .. so it does not work with 2.0:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/composer.json#L27\n. \"AJAX request sends \"Accept: /\" header\"\nwhat code exactly sends such a request header? either way .. that header violates the spec and should be fixed.\n. I just tried locally .. the toolbar renders fine and I could also run \"explain\" requests which are loaded via ajax using the following config:\nhttps://github.com/liip-forks/symfony-standard/blob/techtalk/app/config/config.yml#L107\n. Well right now we do not continue if there is no match. Maybe we should continue to iterate over the rules if no matching format was found (or maybe only if no matching format was found and no fallback route was set)?\n. sorry .. \"no fallback format was set\" is what I meant to type.\n. anyway my comment was about a possible change .. not about current behavior.\nright now if it finds a matching rule it will apply that, which may still result in a 406 as you are experiencing. the change that we could consider would be to continue to go through the rules until we find a rule that 1) matches 2) produces either a matching format or has a fallback_format configured\n. @willdurand or @seldaek do you have comments?\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/557\n. well both are sort of correct .. but I guess your version is more newbie friendly.\n. why wait? i mean its here already. are you talking about being able to embed the relevant logic into the routing via the EL?\n. @adrienbrault see also the discussion after this post https://github.com/FriendsOfSymfony/FOSRestBundle/pull/136#issuecomment-22306848\nfurthermore .. the regexp based version thingi is just an example. i think it would make sense to provide several and of course the matching could be done by full media type without any regexp at all.\n. for more information about conditions in the routing layer see http://symfony.com/doc/current/book/routing.html#book-routing-conditions\n. for more information about conditions in the routing layer see http://symfony.com/doc/current/book/routing.html#book-routing-conditions\n. closing .. i think the core of the question is answered and it also belongs more to JMSSerializer\n. The configuration of the format listener has changed:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/3-listener-support.md#format-listener\n. I would prefer dropping the type hint and then checking manually if its one of the possible FlattenException instances so that we do not need to maintain different branches just for this.\n. btw .. while you are at it .. could you also look into this change here https://github.com/symfony/symfony/pull/9155/files and if its relevant to this controller too?\n. I would like to maintain BC unless there is a really good reason to move on. This doesn't seem like a good reason to move on.\n. I can live with this BC break as we are not yet at 1.0.0 stable. its an easy enough fix :)\n. i guess use the fcqn and separate with |\n. generally the effort isn't too big and the compromises not that significant so yes its usually possible to support all currently maintained symfony versions with one branch. aside from this, i would also only break BC with a non maintained version for a good reason.\n. looks good to me.\n. ah one last thing .. can you add a note about the BC break into the UPGRADING.md?\n. yes\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/issues/566\n. the next release will be 1.0.0-RC1\nhoping to get #575 and #576 wrapped up ASAP and then tag\n. alright .. i think the last bit is now solving this bug https://github.com/FriendsOfSymfony/FOSRestBundle/pull/578\n. yes .. i know that this fixes the issue .. the question is why does the issue not occur with earlier symfony2 versions?\n. i created a fix .. is that what you had in mind?\n. can you review what makes sense based on the spec? https://github.com/FriendsOfSymfony/FOSRestBundle/pull/519\n. can you review what makes sense based on the spec? https://github.com/FriendsOfSymfony/FOSRestBundle/pull/519\n. yes .. i guess we can make it a property to enable overriding.\n. yes .. i guess we can make it a property to enable overriding.\n. also do not forget about updating the docs\n. please also add something to the docs .. finally i am not sure i am happy with the method name setFillTemplateVars() .. do not have a good alternative proposal though\n. please also add something to the docs .. finally i am not sure i am happy with the method name setFillTemplateVars() .. do not have a good alternative proposal though\n. there is an issue with 5.3 in the tests\n. indeed, aside from this minor variable naming things it looks good to me now!\n. can you have a look at the unit tests and see where things are going wrong and create a failing test as a PR? and ideally include the fix as well :)\n. can you have a look at the unit tests and see where things are going wrong and create a failing test as a PR? and ideally include the fix as well :)\n. @tonivdv do you have time to look into this issue? seems to have been introduced with #544 \n. this never came up again .. so closing\n. i have merged the test from #578 .. can you remove the test code from this PR? (for future reference .. it would have been good if you would have cherry-picked @ASKozienko commit into your branch.\n. well ideal would be to also test the entire ExceptionController\n. I have fixed the two noted issues\n. sooo .. lets merge it I guess?\n. Well we have a bazillion rather small features .. if we realize that we have an issue in one of them .. i am not sure if for fixing it I really want to jump to another major version and turn the bundle into google chrome :)\n. i agree. if we would not provide a version, many users would then not know what to enter as the version. so imho its better to go with 1.0.* for now\n. closing in favor of https://github.com/FriendsOfSymfony/FOSRestBundle/commit/d808b2269d0049e39f318b5eb8c1ab63ad9e7814\n. can you investigate the issue?\n@webmozart might have some hints for you.\n. is this related to https://github.com/FriendsOfSymfony/FOSRestBundle/issues/540 ?\n. we obviously have insufficient tests here. i guess what we need are some functional tests to get started\n. expanding the docs on this topic is also something we urgently need ..\n. can you submit a PR with a fix for the docs?\n. can you submit a PR with a fix for the docs?\n. I was being defense when I added this feature, but I can see why it would make sense to throw this exception. this would be a behavior change, so it would go into 1.1 development branch. Even then we might need to make this an option. Maybe only throw the exception if the listener is enabled with strict rather than just true?\n. can you have a look at the test failure and ideally also add a new test and update the documentation?\n. ping\n. ping\n. add a note here https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/3-listener-support.md#body-listener about when an exception is thrown.\n. add a note here https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/3-listener-support.md#body-listener about when an exception is thrown.\n. hmm .. strange seems like composer is causing travis to timeout .. but only with Symfony2.1\n. hmm .. strange seems like composer is causing travis to timeout .. but only with Symfony2.1\n. /cc @seldaek @loicfrering\n. /cc @seldaek @loicfrering\n. i was thinking the same thing when I saw the change in FOSJsRoutingBundle :)\n. see https://github.com/lsmith77/symfony-rest-edition/pull/1/files for a solution\n. sounds like a good idea .. wondering if this should go into 1.0.x or 1.1.x\n. yes .. but it can be a big behavioral change. if we declare it a fix .. it should go into 1.0.x. so i guess you vote for declaring it a fix. if none objects i am fine with it too.\n. accept header is only used if you enable the format listener. if you do not enable it, Symfony2 will default to using the file extension as the format. if you do enable the format listener then you can choose to enable the \"prefer_extension\" option to prefer the file extension over accept headers.\n. Well generally REST APIs are supposed to be stateless. In this sense the proper way is to expect the login credentials in every request, which is why the provided listener only cares about login failures. Now for APIs there can be lots of different approaches for authentication itself and as I am having a hard time maintaining the current feature set I would prefer to keep such features out of this Bundle.\n. we do not mess with validation .. what we do have is some logic to generate routes where we do some transformation between singular and plural but this can be disabled.\n. I recently tagged 1.1 .. we would drop in 1.2\n. here is a PR to drop 2.1 https://github.com/FriendsOfSymfony/FOSRestBundle/pull/627\n. can you rebase?\n. I guess a few use Symfony\\Component\\HttpKernel\\Exception\\HttpException can be removed now?\n. I agree that if we have a few good features we can drop 2.1 support but I would not want to rush that. For now I would suggest to reopen your PR so that we do not forget.\n. I think this is the correct behavior. Furthermore I do not see a clean way to change the behavior. So I guess the only thing to do is to more clearly document this fact. Would be great if you could send a doc PR\n. PRs very welcome :)\n. is there any reason not do leverage the SensioFrameworkExtraBundle config there?\n. haven't dug into it myself yet and I have faith you will come up with a good answer .. but when in doubt i think reusing the annotation likely makes sense.\n. certainly possible with YAML\n. more docs is usually good. :)\nas for the route names. i don't think that we can change anything there now. could cause a lot of breakage.\n. would be nice if someone could make a fork of the symfony standard edition .. or the rest edition to illustrate their problem with this feature.\n. @mnapoli this is quite simple. you need to define the controller as a service and then specify the service name as the resource. in that service definition you of course also need to add that logger argument.\n. I guess the fix for that would be to move up the $this->container->has($controller) check:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Routing/Loader/RestRouteLoader.php#L134\nI guess it should not really cause any issues, since I doubt anyone would name a service like a class name if they would prefer the class to be loaded directly but not through the container.\n. no .. this is not supported by JMS serializer\n. its a bit unclear what exactly you created .. can you make the code available somehow? ideally in a PR?\n. is this not a duplicate of https://github.com/FriendsOfSymfony/FOSRestBundle/issues/594 ?\n. What is it that you want to do? do you want to generate HTML or json or xml? if you want to generate HTML you need to use a template. if you want to generate json ..then you need to ensure that the request format is json. if you do not use the format listener, then your request needs to end with .json .. otherwise if you use an Accept header you need to configure the format listener.\n. then you need to configure the format listener:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/3-listener-support.md#format-listener\n. yes .. this is the expected behavior. this is done by the ExceptionListener that is provided by core and no overwritten by this bundle. this is related to https://github.com/symfony/symfony/issues/9712\n. yes .. this is the expected behavior. this is done by the ExceptionListener that is provided by core and no overwritten by this bundle. this is related to https://github.com/symfony/symfony/issues/9712\n. we have a listener now that can parse out the version information from the Accept header:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/3-listener-support.md#media-type-version-extraction\nwhat we could add there is the ability to also define a regexp that rewrites the Accept header, essentially making it possible to strip out the version information. wdyt?\n.  BTW handling of parameters in negotiation is also a topic here https://github.com/willdurand/Negotiation/issues/30\n. you need to register application/vnd.my.app+json;version=1.0 under the mime_types for json as well .. in fact each version you want to support needs to be listed there atm\n. this is what I did in the rest edition to get versioning support:\nhttps://github.com/gimler/symfony-rest-edition/pull/35\nif this doesn't work for you, then please open a new ticket and try to provide as many details as possible. thanks\n. for the expression i will leave that so someone else, i guess it would still just be a single string that will need to be configured? the only tricky bit there would be how to figure out if the string is just a role or if its an expression. i guess we could have a compiler pass that looks if the string matches a configured role?\nfor the test, do you have an example for how to test an extension?\n. Thank you for the PR. I am at a conference this weekend but should definitely have time on the train home tomorrow.\n. related to #607\n. right .. this is why ideally the entire version handling would be handled inside the routing or at least be associated with the routing configuration. see also https://github.com/FriendsOfSymfony/FOSRestBundle/pull/561\n. right .. this is why ideally the entire version handling would be handled inside the routing or at least be associated with the routing configuration. see also https://github.com/FriendsOfSymfony/FOSRestBundle/pull/561\n. @amenophis sure catch me tomorrow in #symfony-dev on freenode. today i am too tired from practice.\n. @amenophis sure catch me tomorrow in #symfony-dev on freenode. today i am too tired from practice.\n. ping .. how are things going?\n. ping .. how are things going?\n. so FOSRestBundle master now can set the matched media type as a request attribute #621\n. like discussed via IRC:\n1) move the regexp setting to a setter method and out of the constructor\n2) drop the context from the listener, instead set the version on the view handler (requires https://github.com/FriendsOfSymfony/FOSRestBundle/pull/628)\n3) the version listener should be enabled explicitly (off by default) like all the other listeners\n4) add some documentation (especially that the version listener needs the format listener so that the `media_type is set as a request attribute\n. can you squash your commits? http://symfony.com/doc/current/contributing/code/patches.html#rework-your-patch\n. @amenophis I have extracted the version detection part of your PR into a new PR -> https://github.com/FriendsOfSymfony/FOSRestBundle/pull/636\nThis way we can add the feature quickly. For the annotations I then want to come up with a fancier solution which would work as explained in #637\n. in general yes, I would recommend validation groups. but if you are using forms, you might need to do something there as well (especially if validation rules should also be different).\n/cc @webmozart\n. not sure .. dont think there is yet ..\n. the issue is that the order matters and its not possible to ensure that configuration is merged between environments in a way that matches the users expectations. which in turn means you need to duplicate the entire config for ash env.\n. try to add a catch block around your code .. \n. i have faint recollections of having seen some discussion related to this topic before\n/cc @everzet \n. i have faint recollections of having seen some discussion related to this topic before\n/cc @everzet \n. Thanks for the PR. As for the default_format thing .. not sure I understand. Can you open another ticket for this?\n. Thanks for the PR. As for the default_format thing .. not sure I understand. Can you open another ticket for this?\n. can you paste your controller code? and yes a failing test would be ideal. btw if you want to work on a fix the code in question is here. its a little \"hacky\" imho:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/tree/master/Routing/Loader/Reader\n. can you paste your controller code? and yes a failing test would be ideal. btw if you want to work on a fix the code in question is here. its a little \"hacky\" imho:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/tree/master/Routing/Loader/Reader\n. ping\n. I in the end decided to add a new interface and make the FormatListener fully BC.\n. I in the end decided to add a new interface and make the FormatListener fully BC.\n. I suspect that you are using an older version of SensioFrameworkExtraBundle\n. I suspect that you are using an older version of SensioFrameworkExtraBundle\n. Ah .. didn't realize that there is a 3.0 version out which breaks BC. I do not use this feature myself, so I didn't notice.\nSo either we require 3.0 or we need to support both (f.e. via some logic to detect the version in the DI extension).\n. Ah .. didn't realize that there is a 3.0 version out which breaks BC. I do not use this feature myself, so I didn't notice.\nSo either we require 3.0 or we need to support both (f.e. via some logic to detect the version in the DI extension).\n. So we need to support both ..\n. well also would new features then go into both branches? no i would prefer to get it done with a single branch\n. well also would new features then go into both branches? no i would prefer to get it done with a single branch\n. I think we discussed this option a while back too. I guess there is no way around this.\n. I think we discussed this option a while back too. I guess there is no way around this.\n. You did not specify any priorities in your format listener rule.\n. You did not specify any priorities in your format listener rule.\n. agreed .. \n. yeah .. i guess it would be good to make this work. i guess if the defaults match there is no reason to complain about the conflict\n. the bundle can also be used with other serializers, like the core serializer. when using the view layer one has to configure the bundle accordingly.\n. the bundle can also be used with other serializers, like the core serializer. when using the view layer one has to configure the bundle accordingly.\n. can you also paste some information on the request?\n. can you also paste some information on the request?\n. Ah I see .. I need to check this out as it might be an unwanted regression.\n. Ah I see .. I need to check this out as it might be an unwanted regression.\n. there was also recently a PR on the Negotiation lib related to api versioning https://github.com/willdurand/Negotiation/pull/16\n. can you raise the topic on https://groups.google.com/forum/m/#!forum/resting-with-symfony ?\n. just FYI we now have a solution to parse version information from an Accept header and set it as the version in the JMS serializer:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/3-listener-support.md#media-type-version-extraction\nit might make sense to expand this to also allow removing the version parameter from the Accept header.\nwith this it could also simplify the logic needed inside routes to do requirements on the version. that being said, right now I also like the expression component based approaches most.\none thing to keep in mind is that we would then also need to figure out some annotation solution so that this all will become compatible with the automatic route generation.\n. docs moved to symfony.com and were restructured, see http://symfony.com/doc/master/bundles/FOSRestBundle/format_listener.html#media-type-version-extraction\n. @stof all good now?\n. was hoping to get some feedback from people using param converters before merging .. but code looks fine, so lets merge it.\n. we added a link here http://friendsofsymfony.github.io\nbut feel free to send a PR to also add it here:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/index.md#example-applications\ni think a video was recorded.\n. we added a link here http://friendsofsymfony.github.io\nbut feel free to send a PR to also add it here:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/index.md#example-applications\ni think a video was recorded.\n. closing as discussed\n. this is already fixed in 1.7 https://github.com/FriendsOfSymfony/FOSRestBundle/blob/1.7/composer.json\n. thx!\n. since I am not the original author of the rest loader I am no so intimate with the code. what does the default format logic in RestRouteLoader do? shouldn't that have taken care of it or is it redundant with your changes?\n. ah ok .. so when I added this feature, i simply overlooked yaml, xml?\nin that case, could you complete the PR to also cover xml and maybe add some tests?\n. when do you think you can get it done? just merged https://github.com/FriendsOfSymfony/FOSRestBundle/pull/633 .. so I want to let that sit for a few days but ideally release 1.2.0 early next week.\n. ok thank you very much!\nmaybe one day we can refactor those collections .. feels a bit like there is way too much code in each of them.\n. your method is missing an @View annotation\n. ping\n. easier than expected :)\n. I think this feature makes a lot of sense. Not sure I like requestName .. but cannot think of a better alternative right away either ..\n. we have some limited docs in https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/3-listener-support.md#param-fetcher-listener\nbut yeah maybe an annotation summary would be great to have!\n. You need to add a rule to handle the toolbar otherwise you end up with no request format being matched.\nFor example something like the following:\n- { path: ^/api/, priorities: [ html, json, xml ], fallback_format: ~, prefer_extension: true }\n            - { path: '^/', priorities: [ 'html', '*/*'], fallback_format: html, prefer_extension: true }\n. I opened a ticket to automate adding a rule specifically for the profiler:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/652\n. sure .. there is no problem moving that code into a compiler pass\n. sure .. there is no problem moving that code into a compiler pass\n. nice. please also add a link to this new file in https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/index.md\n. hmm not sure why this is failing on travis .. this works locally ..\n. we do not have hhvm enabled .. i am talking about the tests against Symfony2 dev-master\n. @stof: i assumed i need to alias to ensure that it works, as framework-bundle requires ~2.5\n. any ideas for how to fix this?\n/cc @seldaek @fabpot\n. any ideas for how to fix this?\n/cc @seldaek @fabpot\n. this is a bit tricky and can lead to breaking a lot of running code by enabling this listener. so either we make this listener configurable by path similar to the format or we just add a global config option to decide if to throw an exception or not.\n. aside from this minor comment it looks good. but can you also have a look at adding another test case for this?\n. not that I am aware. :-/\nclosing the ticket here \n. ping\n. Are we talking about simply adding support for the translator in https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Controller/ExceptionController.php#L171 ?\nI guess it should not be too hard to make it an option and then inject the translator.\n. i could live with doing this change in 1.3, ie. a new minor version.\n. can you also bump the dev version in the composer.json to 1.3?\n. can you also bump the dev version in the composer.json to 1.3?\n. well its not a binary thing .. it will only affect people that have extended the class which is very unlikely and isn't even explicitly supported via the Bundle configuration.\n. well its not a binary thing .. it will only affect people that have extended the class which is very unlikely and isn't even explicitly supported via the Bundle configuration.\n. this is because media doesn't have a sensible plural:\nhttps://github.com/doctrine/inflector/blob/master/lib/Doctrine/Common/Inflector/Inflector.php#L164\n. this is because media doesn't have a sensible plural:\nhttps://github.com/doctrine/inflector/blob/master/lib/Doctrine/Common/Inflector/Inflector.php#L164\n. we cannot do much with FlattenException itself, but we could of course extend it etc. we do have the original exception available after all.\n. we cannot do much with FlattenException itself, but we could of course extend it etc. we do have the original exception available after all.\n. i just merged #816 which might make it easier to implement this\n. i just merged #816 which might make it easier to implement this\n. @ajaypatelbardoli you mean enforce a specific response structure? simply define a \"wrapper\" class that you map out with jms serializer and into which you embed any specific data for the given action\n. @ajaypatelbardoli you mean enforce a specific response structure? simply define a \"wrapper\" class that you map out with jms serializer and into which you embed any specific data for the given action\n. can you have a look at our test suite and add a test case to illustrate this issue?\n. the reason why they are shown in debug mode is that otherwise it can make debugging the application quite hard. and yes this should probably be mentioned in the docs, can you prepare a PR?\nif you only want to return the response body, i suggest you extend the ExceptionController and configure your extended controller in the twig bundle.\n. hmm since there is */* at the end it should match html\ncan you have a look at the @willdurand's negotiation lib tests and add a failing test case for this?\n. as for the behavior, as soon as you enable the format listener, you must ensure that there is a match. now it might make sense to not require a match in case none of the rules match the request, but I am not sure if this will not cause other surprising side effects.\n. optional is tricky too. configuring the bundle is already quite tricky simply due to the available features.\n. ok the issue is fixed in the negotiation lib .. however we need to bump the dependency for this. there is an open PR for this, however it would be good to also do some related refactorings in this Bundle now. could you have a look?\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/669\n. are you using JMS serializer or the core serializer? JMS should be able to handle recursions while the core serializer does not\n. closing due to lack of feedback\n. closing due to lack of feedback\n. remove type: rest\nthat is only necessary if you want FOSRestBundle to auto discover the action methods, which you do not seem to want, since you are including an xml file with explicitly defined routes.\n/cc @rande \n. are you using the latest version of the Bundle?\n. ~1.1 should be fine .. should use any 1.X release above 1.1\n. @tobion do you have a hint here?\n. can you try current master?\n. can you try current master?\n. you must use the subresources ... ie. make element a subresource .. however in that case it would need to be elements unless you configure element to not be pluralized. the other alternative is to add @NoRoute annotation and configure the route manually for that action\n. the configuration there should be enough. note however that it uses the view layer and so requires a serializer (usually people use the JMS Serializer)\n. time is unfortunately a limiting factor. however experienced people also tend to assume too much prior knowledge. so history has shown that this sort of thing is usually best solved by a novice working through the issue asking experts specific questions.\n. can you have a look at the ViewResponseListener?\n. no, i meant have a look what is going on there and potentially come up with a proposal for a change ..\n. BTW this change can be seen as a BC break or a bug fix. Next version will be 1.3.x .. which doesn't really allow for BC breaks but I can see that this behaviour makes more sense, as otherwise its impossible to override annotations for specific code paths inside an action.\n. @Bup3 could you squash your commits?\nhttp://symfony.com/doc/current/contributing/code/patches.html#rework-your-patch\n. ping\n. fixed via https://github.com/FriendsOfSymfony/FOSRestBundle/commit/924c43d096ddad2e97dad2c6d98631000deea28b\n. hmm ..\nnot sure .. we have a test fixture for this https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Tests/Fixtures/Routes/prefixed_users_collection.yml#L16\n. can you work on an improvement for the docs?\n. @stormsson best would be to open a doc PR to help others work through this as well.\n. @stormsson best would be to open a doc PR to help others work through this as well.\n. i think it would be better if you would post this question on a support forum.\n. this is due to your browser Accept header .. most browsers include xml in their preferences but not json and so since your API priorities also accepts xml that is chosen.\n. this might require adding some utf-8 flags .. see http://www.php.net/manual/es/function.preg-match.php#95828\ncan you see if you can get it to work and send a PR?\n. Adding the utf-8 modifier I guess should just add some overhead, but I do not think we should bother with a config option for this, so imho if there are new non performance side effects, just create a PR adding the u switch\n. ok .. let me know when you have some docs to review\n. Right, I guess this is mostly for cases where it is not really necessary to map things to a model/form type and where an array structure is really sufficient.\n. needs a rebase according to github\n. thx!\n. ok, i guess we need to document that quoting is the responsibility of the user in that case and remove it. can you work on a PR, ideally with a test case?\n. please test https://github.com/FriendsOfSymfony/FOSRestBundle/commit/ed28a056225d911de4be4686326339a1a51b7fa9\n. ok .. i have released 1.3.1\n. looks to me like you have some strange character there, that isn't a proper backslash:\n\n. i think the issue is rather that you are using some utf16 backslash equivalent. if you look at the code you pasted you can see that the syntax highlighting looks different for the first 3 backslash character compared the to the 4th one. this is what i tried to highlight with my screenshot.\n. what is your Accept header look like?\nsince your priorities allow for xml if the client prefers xml via the Accept header it would still pick xml over json\n. can you add a test case? note the test case should also have a version check. adding a note the docs would also be good.\n. we already test against sf2.4, so i would in the test just check if routing 2.4+ is loaded and if it isnt then skip the test.\n. can you add a test case and a note in the docs?\n. any push (even without a change) will retrigger travis\n. still missing a test case, @eXtreme can you provide a test case and a doc example?\n. @eXtreme but its always possible to contribute to PRs by sending a PR to the contributor .. or by creating a new PR including the original contributors commits.\n. ok .. needs a rebase now as well\n. can you look into creating a failing test case?\n. @mgiustiniani can you confirm if https://github.com/FriendsOfSymfony/FOSRestBundle/pull/732 is fixed with your change? ideally can you then create a PR with your fix that includes the commits from @hd-deman ?\n. could you have a look at the test suite and see if you can replicate your issue by adding a test?\n. ping .. also please check if the issue still exists .. there were some recent changes in this part of the Bundle. \nsee https://github.com/FriendsOfSymfony/FOSRestBundle/pull/715, https://github.com/FriendsOfSymfony/FOSRestBundle/pull/732\n. this is not a BC break but simply a new dependency added in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/700. however this should be noted in the docs and the \"suggest\" section of our composer.json\n@ClementGautier could you fix that?\n. i think it should throw an error in a compiler pass if the listener is active but the validation service is missing. but if the listener is disable we should not cause errors if the validation service is missing.\n. @ClementGautier can you test @Tobion's fix?\n. @ClementGautier it seems there are some issues with @Tobion's fix ..\n. ping\n. ping\n. cool .. looks solid from a first quick inspection.\n. needs a rebase\n. needs a rebase\n. the issue likely also affects master due to this commit:\nhttps://github.com/symfony/FrameworkBundle/commit/838cc7d1ab2c03550ce8744cf7883f088e8160f4\nI will fix it in master and then retrigger your PR.\n. the issue likely also affects master due to this commit:\nhttps://github.com/symfony/FrameworkBundle/commit/838cc7d1ab2c03550ce8744cf7883f088e8160f4\nI will fix it in master and then retrigger your PR.\n. sure .. can you send a PR for that?\n. @webmozart do you have a hint here?\n. referencing https://github.com/FriendsOfSymfony/FOSRestBundle/pull/744\n. @webmozart do you have a hint here?\n. so this is a NelmioApiDocBundle bug? did you open a ticket there? if so it would be good to reference it here, so that others can find the discussion.\n. hmm .. don't remember from the top of my head why this may be the case, can you dig in to see if there is a valid reason and if not submit a PR to fix it?\n. Have a look at the Security Listener, it should help you prevent this unwanted redirection triggered by the SecurityBundle whenever it encounters an insufficiently privileged user:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/3-listener-support.md\n. can you check the log?\n. So the difference seems to be that in debug mode you are getting a different exception than in prod:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/EventListener/AccessDeniedListener.php#L71\n. this should be the default in the Symfony2 SE .. check your prod.yml monolog config\n. with that config it should write a something to the log on a 500 .. however I propose to ways to continue:\noption 1) simply take the config from dev.yml and see if it logs then\noption 2) start debugging the listener that I linked above\n. if you can fix the space intention issues I am fine with merging.\n. php -r 'echo base64_encode(\"foo\");'\nbtw probably not something for this Bundle but maybe create a command to generate the curl command:\nhttps://github.com/orocrm/platform/pull/15\n. php -r 'echo base64_encode(\"foo\");'\nbtw probably not something for this Bundle but maybe create a command to generate the curl command:\nhttps://github.com/orocrm/platform/pull/15\n. i am not entirely sure I understand .. but why not further split up the controllers via inheritance to have the GETs all in a base class and extend from it adding the put/delete etc. ?\n. i am not entirely sure I understand .. but why not further split up the controllers via inheritance to have the GETs all in a base class and extend from it adding the put/delete etc. ?\n. ping\n. looks good! just need to fix the test setup\n. looks good! just need to fix the test setup\n. are you talking about encoding or decoding?\nfor decoding its configurable in the body listener what service to use, the default is fos_rest.decoder.xml.\nfor encoding, this Bundle relies on external serializers (jms serializer or symfony serializer). so you have to check there how to customize things.\n. are you talking about encoding or decoding?\nfor decoding its configurable in the body listener what service to use, the default is fos_rest.decoder.xml.\nfor encoding, this Bundle relies on external serializers (jms serializer or symfony serializer). so you have to check there how to customize things.\n. > Looks like I will need the jms serializer and create a handler for it.\n\nyes the bundle defaults to using the jms serializer. and yes there you can create handlers to customize the encoding\n. > Looks like I will need the jms serializer and create a handler for it.\nyes the bundle defaults to using the jms serializer. and yes there you can create handlers to customize the encoding\n. havent seen support for this .. but also never needed this myself\n. havent seen support for this .. but also never needed this myself\n. i think you have a better chance of getting assistance via the jms serializer github repository\n. i think the relevant code is somewhere around here:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Routing/Loader/Reader/RestActionReader.php#L410\n\nthough i guess such changes may then require a BC flag to prevent code from breaking\n. i suggest you open a PR with any changes ..\n. ping\n. I refactored the way you fetch the configs of the rest and profiler bundle to use parameters:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/775\nI also adjust the rules that are added to just cover the profiler and toolbar.\n. @egulias thank you for your initial work .. you got the ball pretty far and I only needed to tweak some details. hope you will pick up another ticket to work on soon!\n. thx\n. how so? ie. why does is need to change? do you have a failing test case?\n. hmm .. not sure what you mean with \"shared\" .. \n. no worries .. thanks for investigating time into this Bundle ..\n. this is actually no typo.\n. its quite tricky .. using request matchers all of the place for every listener will add a lot of overhead I fear. we did introduce them for the format listener. maybe the better approach would be to actually use a single such request matcher to determine the entire config for this bundle.\n. the body listener priority is also a topic here https://github.com/FriendsOfSymfony/FOSRestBundle/issues/763\n. maybe we can do the fallback to cget_media only in case of a conflict? those we can likely only catch the conflict within the same controller but I think that is the most likely problem case.\n. i suspect it would be in one of those:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/tree/master/Routing/Loader/Reader\nin general conflicts between controllers should be avoided and will likely be very rare. the main iffy thing with the solution i mentioned is that it could cause a situation where the name of an existing route changes by adding another method. worse yet it would not only change but be replaced by a new one.\nin this sense we could also say we do not fix the issue but instead tell people to define the route name manually in this case.\nas for a new version .. i have not thought about when i would release 1.4.x but it could be soonish.\n. honestly i am not sure .. i am on my ipad on the train atm .. but I have faint recollections about a RouteName annotation. if there is nothing like this yet, then maybe we should add it.\n. not sure I understand .. if I start off with just public function cgetAction() it would be get_media and then adding public function getAction($slug) would change the existing action to become cget_media.\n. ok yes .. but then it would be a BC break though we could just generate the route with the old and new name, unless there is a conflict to minimize the BC break.\n. great!\n. hmm i think only when its non inflectable\n. I am hesitant because of a possible performance impact from having too many routes, then again this would need to be studied. maybe its just more memory but not a lot of CPU cycles.\n. looks good from a quick inspection\n. are there any related tickets we can now close?\n. can you first create a failing test case to illustrate the problem and then submit a fix?\n. hmm .. the entire when its best to run the lister is not so obvious .. can you check how your needs and what was done in https://github.com/FriendsOfSymfony/FOSRestBundle/commit/0bb8cb4fb0e410421f69d8df1103adccd77a406b can be reconciled?\n. ok .. but then this listener would need to be triggered twice?\n/cc @SimonSimCity\n. revert #725, adjusting the priority as suggested for the body listener\n. so from my understanding https://github.com/FriendsOfSymfony/FOSRestBundle/commit/0bb8cb4fb0e410421f69d8df1103adccd77a406b can be reverted according to @SimonSimCity who originally contributed the change. in there we adjusted the priority away from 10. someone just needs to do a PR (please also update the docs and upgrading guide).\n. so from my understanding https://github.com/FriendsOfSymfony/FOSRestBundle/commit/0bb8cb4fb0e410421f69d8df1103adccd77a406b can be reverted according to @SimonSimCity who originally contributed the change. in there we adjusted the priority away from 10. someone just needs to do a PR (please also update the docs and upgrading guide).\n. yeah but I am honestly not so sure about this \"disable_routes\" feature. can you split out the PR to do the revert? would like to release 1.4.0 soon.\n. yeah but I am honestly not so sure about this \"disable_routes\" feature. can you split out the PR to do the revert? would like to release 1.4.0 soon.\n. thank you .. merged. can this ticket then be closed?\n. thank you .. merged. can this ticket then be closed?\n. yup .. I think so :)\n. FOSRestBundle only exposes the exception message in production based on a whitelist. as such I would recommend to use a specialized exception and whitelist it in the configuration to ensure that you do not end up leaking information unintentionally in other exception cases.\n. see here https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/4-exception-controller-support.md\nmain advantage is the ability to use a serializer rather than templates. also it wil use the content type negotiation to determine the output format and finally you can control the http status code and if to expose the error message.\n. sure .. it may be possible that we didn't incorporate some features added to the TwigBundle. feel free to open a PR to fix this.\n. this is handled by the inflector. words that have no plural form are simply not pluralized. its covered in the docs what this means. not sure if we have any provisions for multi word cases. check the docs on the routing layer.\n. what happens now by default?\n. ok cool. can you check the current docs to add whatever relevant infos and then I will merge.\n. ping\n. honestly I have never used FOSRestBundle with forms but feel free to open a PR\n. can you try master? we have done some fixes for that issue\n. can you try master? we have done some fixes for that issue\n. I guess we could do this via the expression language?\n. the last commit should not have broken anything, so likely the issue is in the change.\nactually I found the issue .. fix coming up.\n. can you check if it works with current master\n. sorry for your suffering ..and thanks for living on the edge to catch this error quickly! you saved someone else the pain ..\n. what makes you believe this issue is related to the FOSRestBundle?\n. hmm indeed, this method could be protected .. there is no need for users to call this method from the outside. can you submit a PR?\n. well honestly I barely have enough time to maintain the Bundle as is .. so I have no plans to start a version 2 myself. however I would support anyone n working on a version 2 as much as I can. and yes version 1 has been mostly evolution and too little design so a restart is dearly needed.\n. well just use reflection to make the method public in the test I guess :-/\n. i know its piling mess on top of another mess but so it goes .. the other option would be a much more elaborate test to check the context indirectly via the handle() method.\n. can you make a note of the BC break in https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/UPGRADING.md ?\n. ping :)\n. ping :)\n. thx\n. thx\n. no .. I was never quite convinced of this PR\n. thx\n. I suspect that is rather an issue with your configuration of the FOSRestBundle.\nThe Negotiation lib has some minor edge case changes over time ..\ncan you paste your format listener config?\n. With this configuration you have in fact not configured any rules. How is the format expected to be set? are you doing requests to \".json\" patterns that match routes that have {_format} included?\n. ok we used to define some default rules but since before 1.0 IIRC it was necessary to explicitly define rules. Without a rule as you noticed the format listener is not triggered and therefore no accept header is read.\n. ok we used to define some default rules but since before 1.0 IIRC it was necessary to explicitly define rules. Without a rule as you noticed the format listener is not triggered and therefore no accept header is read.\n. probably something like:\nformat_listener:\n        rules:\n            - { path: ^/, priorities: [ html, json, xml ], fallback_format: html, prefer_extension: false }\n. probably something like:\nformat_listener:\n        rules:\n            - { path: ^/, priorities: [ html, json, xml ], fallback_format: html, prefer_extension: false }\n. @stof can you have a look here?\n. @stof can you have a look here?\n. @stof can you handle merging this PR?\n. @stof can you handle merging this PR?\n. thx .. guess its time to tag 1.4.0 stable!\n. indeed there are many ways to do it and as this is handled via the SecurityBundle its beyond the scope of this Bundle.\n. btw I am open to adding a small section to the docs to point people at resources explaining different REST related auth strategies\n. should not be necessary as that mime type is supported by default:\nprotected static function initializeFormats()\n    {\n        static::$formats = array(\n            'html' => array('text/html', 'application/xhtml+xml'),\n            'txt'  => array('text/plain'),\n            'js'   => array('application/javascript', 'application/x-javascript', 'text/javascript'),\n            'css'  => array('text/css'),\n            'json' => array('application/json', 'application/x-json'),\n            'xml'  => array('text/xml', 'application/xml', 'application/x-xml'),\n            'rdf'  => array('application/rdf+xml'),\n            'atom' => array('application/atom+xml'),\n            'rss'  => array('application/rss+xml'),\n        );\n    }\nat any rate would not explain the difference between local and remote either.\ncan you dump $request->headers->get('Accept') .. I think something is messing with the Accept header before it gets send to your app.\n. i think the issue is that you have format_listener twice in your config\n. no clue .. would assume the Yaml component to behave consistently there\n. maybe it is related to https://github.com/FriendsOfSymfony/FOSRestBundle/pull/787 ?\n. ok thx\n/cc @florianv\n. could you also look into adding a test case?\n. ping\n. ping ..\n. the build failure seems to be unrelated to your change. thx for the test case!\n. yeah .. we need to do some hackery there similar to what we did for 2.5 .. will have a go at it.\n. testing https://github.com/FriendsOfSymfony/FOSRestBundle/pull/803 ..\n. I have never worked on this .. so the answer is \"i do not know\" .. but would be great if you could investigate.\n. ping\n. hmm tricky. I think we need to fix the regression introduced in @tonivdv's PR. ideally we can do this while retaining the new functionality somehow. if not we may need to introduce a new handler like you suggest and a config option to choose if to return the wrapped or unwrapped exception\n. ping\n. no .. not at this point. should not be too difficult to add I would guess.\nyou would need to check if the resource is a directory here \nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Routing/Loader/RestRouteLoader.php#L70 and then iterate over the directory to generate the file names to actually parse\n. https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/2-the-view-layer.md#introduction\nThere are also two specialized View classes for handling redirects, one for redirecting to an URL called RedirectView and one to redirect to a route called RouteRedirectView. Note that whether these classes actually cause a redirect or not is determined by the force_redirects configuration option, which is only enabled for html by default (see below).\n. thx .. would be good to also add a test case and some notes to the docs\n. sure .. though i guess it should use composition in this case, ie. the new loader should use the old loader where the new loader will just find the files to pass to the new loader based on the directories.\none more thing, i guess the loader should recurse into subdirs?\n. btw there is also https://github.com/FriendsOfSymfony/FOSRestBundle/pull/443\n@xabbuh I would say just take it over :)\n. ok .. I guess we can close the issue then?\n. yes, I fear you will need to add some BC code to ensure that the old and the new settings still work, throwing an exception in the extension if both are used at the same time. also the tests need to be fixed/expanded accordingly\n. please also rebase on master so that the travis setup works again.\n. someone just needs to wrap up the last details\n. @jrobeson you could also fork his branch and submit a new PR with @tyx's and you additional commits if you have time to wrap this up\n. @jrobeson you could also fork his branch and submit a new PR with @tyx's and you additional commits if you have time to wrap this up\n. ping\n. closing in favor of https://github.com/FriendsOfSymfony/FOSRestBundle/pull/942\n. ping @everzet \n. i assume you have also tested this with FOSJsRoutingBundle?\n. but it looks ok to me\n. for the record, you discovered that this PR does not fix the issues with FOSJsRoutingBundle?\n. I added comments to the tickets you mentioned in the description. As I do not face this issue myself, I will see if people will provide feedback or not.\n. so it seems someone was able to see improvements from this PR in #718\n. there are things open here .. but maybe you can help @egulias to wrap those up?\n. have a look at the .travis.yml for how we pull in the expression lang\n. have a look at the .travis.yml for how we pull in the expression lang\n. can you check your routing config. it seems to me like you are using multiple routing loaders on the same controller. ie. you are using the FOSRestBundle loader that generates routes for all action methods and then another one to generate routes via annotations from SensioFrameworkExtraBundle\n. for a solution see #817\n. hmm not sure .. try it :)\n. can you paste your controller code?\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/692\nthe issue is that you are creating the View instance manually instead of letting the Listener create the instance.\n. hmm .. no clue :-/\nnot sure if this is related to the RestBundle though\n. I am aware of this problem. For now the only solution is to split your app into multiple kernels.\nClosing this as its a duplicate of https://github.com/FriendsOfSymfony/FOSRestBundle/issues/760\n. hmm .. I guess this was caused by some shuffeling around in the docs. can you investigate this by looking at git blame and the history?\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blame/master/Resources/doc/5-automatic-route-generation_single-restful-controller.md\n. hmm .. I guess this was caused by some shuffeling around in the docs. can you investigate this by looking at git blame and the history?\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blame/master/Resources/doc/5-automatic-route-generation_single-restful-controller.md\n. ping\n. ping\n. hmm this is a bit iffy. seems like it opens all sort of security issues. do you have an idea here @stof?\n. hmm this is a bit iffy. seems like it opens all sort of security issues. do you have an idea here @stof?\n. ah .. totall forgot that forward() supports query parameters too .. so closing\n@whitewhidow if you want you can however send a PR to improve the docs to explain this detail\n. ah .. totall forgot that forward() supports query parameters too .. so closing\n@whitewhidow if you want you can however send a PR to improve the docs to explain this detail\n. this would be an issue in composer itself .. can you open a ticket there and provide some more details? but before you do .. make sure you are using the lastest version of composer.\n/cc @Seldaek \n. this would be an issue in composer itself .. can you open a ticket there and provide some more details? but before you do .. make sure you are using the lastest version of composer.\n/cc @Seldaek \n. another approach I thought about was using a PrependExtension to force this value to false ..\n. another approach I thought about was using a PrependExtension to force this value to false ..\n. merging as is .. and I will create a new PR to do the prepend stuff we well.\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/837\n. thx\n. thx\n. what typo is this fixing exactly?\n. http://symfony.com/doc/current/cookbook/logging/monolog_regex_based_excludes.html\n. well then disable logging ..? don't understand what you mean with your last comment.\n. I would recommend to then setup a separate kernel for REST\n. right now your app uses one kernel for everything .. I am recommending to create a 2nd kernel class with separate configuration for your REST needs.\n. @AlmogBaku is this something we should put into the Bundle?\n. you may also want to have a look at LuneticsLocaleBundle\n. please reopen if you feel the question has not been answered\n. well it appears that you are serving other things than json from a non /api route .. so add json to the list of supported method for your /* rule and it should work\n. > You mean: - { path: '^/', priorities: [ json ], fallback_format: html, prefer_extension: true } ?\nyou want to use \"priorities: [html, json]\"\nthis means your first priority is html for any request but if the request does not accept html, you are also willing to serve json.\n. try https://github.com/FriendsOfSymfony/FOSRestBundle/pull/841\n. this is normal JSON encoding .. try echo json_encode('http://foo.com');\n. please reopen if there are further questions\n. the responsible code is https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Util/ExceptionWrapper.php along with the various Form error related handlers in the SerializerBundle (and the underlying lib). you will have to dig into there to see how you could provide an alternative structure\n. maybe someone on the rest ml can help https://groups.google.com/forum/#!forum/resting-with-symfony\n. sure .. if you can make that work that would be great\n. any progress?\n. but I guess we can close this issue and instead use scrutinizer to open up follow up issues?\n. but I guess we can close this issue and instead use scrutinizer to open up follow up issues?\n. yeah .. was just doing that :)\n. @pohlaniacz there really isn't a generic answer there.\n. well whenever we increase the minimal version we will need to go through this stuff. I would suggest to instead of keeping this ticket open, we add a note inside phpdoc about what needs to be chnaged.\n@EduardTrayan can you submit a PR for this?\n. well whenever we increase the minimal version we will need to go through this stuff. I would suggest to instead of keeping this ticket open, we add a note inside phpdoc about what needs to be chnaged.\n@EduardTrayan can you submit a PR for this?\n. @stof ok .. but not sure how we can achieve this reasonably. that being said, if I would have some magic time source, I would likely start working on a 2.6+ 2.0 version of this Bundle.\n. @stof ok .. but not sure how we can achieve this reasonably. that being said, if I would have some magic time source, I would likely start working on a 2.6+ 2.0 version of this Bundle.\n. ok .. I have updated the description accordingly. guess we will need to figure something out :-/\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/945\n. no, that is not supported, but you can of course have multiple actions that just point to the same class internal method allowing you to add whatever parameters you need.\n. by adding a setter for the params property, you might be able to configure the fetcher at runtime:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Request/ParamFetcher.php\n. a more elaborate approach would be to adopt https://github.com/schmittjoh/metadata .. this would allow configuration via xml/yaml as well (which goes beyond of what you were asking here).\n. I am generally open to a PR for this\n. Indeed new, edit and remove are supposed to be used to display pages to create, edit or remove. In the later case it is for showing a confirmation page. These will normally not be used for a REST API but are simply provided for people that want to drive an HTML UI from the same controller as their REST API.\n. You don't define any rules for the format listener so content negotiation is not done by FOSRestBundle. This might be an edge case where we end up overwriting the request format. Can you debug this in the ExceptionController? I suspect that the format ends up being html in the showAction(). What would be interesting to know is if the format in the $request is actually json or not.\n. hmm if the format in the request is html and the format passed explicitly is html as well, how could we determine that its a json request?\n. more importantly .. how does the core exception controller know it needs to use json?\n. we do not have the concept of rest or not rest routes in the bundle as of yet. one way to achieve it in your application is to simply have 2 kernels .. one for your rest routes and one for the others.\nnow i am still a bit confused what you expect. you are getting a request that asks for an html response and you disabled html in the view layer. so the 500 error is expected.\nnow either you ensure that your requests ensure that the format is json, which requires using the format listener or you enable html or you overwrite the exception controller with whatever logic you want instead. or you split your app in two kernels. but right now I see no reason to adjust the exception controller.\n. we do not have the concept of rest or not rest routes in the bundle as of yet. one way to achieve it in your application is to simply have 2 kernels .. one for your rest routes and one for the others.\nnow i am still a bit confused what you expect. you are getting a request that asks for an html response and you disabled html in the view layer. so the 500 error is expected.\nnow either you ensure that your requests ensure that the format is json, which requires using the format listener or you enable html or you overwrite the exception controller with whatever logic you want instead. or you split your app in two kernels. but right now I see no reason to adjust the exception controller.\n. I guess what we want in this case is a 406 .. ie. the requested format is not supported.\n. I guess what we want in this case is a 406 .. ie. the requested format is not supported.\n. well essentially our issue is that we are trying to return an error message to the client and we cannot, since we have no way to render the response. the client asked for an html response and your app is configured to not handle html via the view layer. however you did configure the view layer to be used for exceptions. now on top of that the user also requested a resource that is not available.\nso we could of course in this case say, lets just return a 404 with an empty response. however it seems that either your app or your clients or both are not following proper HTTP practices to request a correct response format and this is the root cause of your issue. if that is solved you would get a 404 along with a properly formatted response message.\n. well essentially our issue is that we are trying to return an error message to the client and we cannot, since we have no way to render the response. the client asked for an html response and your app is configured to not handle html via the view layer. however you did configure the view layer to be used for exceptions. now on top of that the user also requested a resource that is not available.\nso we could of course in this case say, lets just return a 404 with an empty response. however it seems that either your app or your clients or both are not following proper HTTP practices to request a correct response format and this is the root cause of your issue. if that is solved you would get a 404 along with a properly formatted response message.\n. btw .. this is my ideal flow chart of how a rest app should work https://raw.githubusercontent.com/wiki/basho/webmachine/images/http-headers-status-v3.png\n. btw .. this is my ideal flow chart of how a rest app should work https://raw.githubusercontent.com/wiki/basho/webmachine/images/http-headers-status-v3.png\n. so the actual max depth will then still need to be set on the context by the user?\n. ok .. but this config should then be added to the DI extension. furthermore please also add some infos to the docs on this. finally please also add a test case.\n. ok .. but this config should then be added to the DI extension. furthermore please also add some infos to the docs on this. finally please also add a test case.\n. looks good .. will wait for the tests to pass. one last thing, can you add something to the docs and squash your commits?\n. looks good .. will wait for the tests to pass. one last thing, can you add something to the docs and squash your commits?\n. thx!\n. thx!\n. no the BodyListener just overwrites $request->request (ie. where POST data would normally be found). please feel free to add a sentence to the docs to clarify this.\nas for the listener docs page. yes. it is indeed a bit confusing and long. maybe its time to split it up and do some interlinking. would you be willing to invest a bit of time into this?\n. no the BodyListener just overwrites $request->request (ie. where POST data would normally be found). please feel free to add a sentence to the docs to clarify this.\nas for the listener docs page. yes. it is indeed a bit confusing and long. maybe its time to split it up and do some interlinking. would you be willing to invest a bit of time into this?\n. yeah .. its all very evolutionary how the different listeners came about and how they were documented.\n. yeah .. its all very evolutionary how the different listeners came about and how they were documented.\n. ping\n. yeah .. just wondering if you are motivated to revisit the topic. that being said, the docs will soon be on symfony.com .. hoping that this will also entice more people to help on the docs.\n. thx. I agree with your general concept. one thing to note that is partially at fault for your confusion, Symfony2 by default does not really separate the Content-Type \"format\" and the Accept \"format\". That is Symfony2 core just looks at the Content-Type and assume that the response should be in the same format. As a result FOSRestBundle ended up not trying to introduce a different request attribute for the Accept \"format\" as otherwise any controller would need to be adapted to work with this new attribute. I hope for Symfony3 we will do this right from the get go.\n. thx. I agree with your general concept. one thing to note that is partially at fault for your confusion, Symfony2 by default does not really separate the Content-Type \"format\" and the Accept \"format\". That is Symfony2 core just looks at the Content-Type and assume that the response should be in the same format. As a result FOSRestBundle ended up not trying to introduce a different request attribute for the Accept \"format\" as otherwise any controller would need to be adapted to work with this new attribute. I hope for Symfony3 we will do this right from the get go.\n. ah right @stof totally forgot about getContentType() .. so things are not as bad as I had stuck in my head.\n. ah right @stof totally forgot about getContentType() .. so things are not as bad as I had stuck in my head.\n. splitting up the listeners into separate documents makes sense to me\n. it will unfortunately now be a bit hard to rework this PR as the docs have been moved from markdown to rst format\n. I assume you also enabled the FOSRestBundle Exeption controller? at any rate, what would also be interesting to see is the request headers and route config where you are getting the 406 response.\n. I assume you also enabled the FOSRestBundle Exeption controller? at any rate, what would also be interesting to see is the request headers and route config where you are getting the 406 response.\n. ping\n. ping\n. I still do not understand how the issue is happening.\nThat being said, I just created a new PR that allows one to set a different exception fallback format than the default format fallback. Maybe with this you do not need your own listener anymore?\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/940\n. closing due to lack of feedback\n. answered on SO\n. answered on SO\n. looking at the history, this never made any sense .. can you submit a PR to remove this? it is explained in the next chapter.\n. looking at the history, this never made any sense .. can you submit a PR to remove this? it is explained in the next chapter.\n. ok cool. so I guess the ticket can be closed?\n. will have to think about that .. or rather its hard to predict if this causes some unwanted edge cases. would be good to add a test case for this.\n. can you open a new issue for this, referencing this one?\n. right now it would be your responsibility to set the return status code in this case. for forms we do however handle this automatically in ViewHandler::getStatusCode(). I would be open to a PR that checks if the content is an instance of ConstraintViolationListInterface and then sets the status code automatically (unless the status code was already manually set).\n. can you try to debug if CamelKeysNormalizer is called and if it is what might be going wrong there?\n. you also need to register the mime type and configure the format listener to allow for those other formats\n. not entirely sure I understand the question .. \nyou can use FOSRestBundle with your main application. but as #760 points out, some features of this Bundle will change behavior that might have undesired side effects with other parts of your app. for this case I recommend to separate things into multiple kernels.\n. ping\n. ping\n. btw don't newer versions of Symfony2 provide a core serializer service?\n. ah ok .. can you then update the sentence that tells users that they need to define the serializer service themselves if they do not use JMSSerializerBundle to instead tell them to simply activate the service in the framework bundle?\n. will do this myself\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/933\n. IIRC the reason why we assume an array is that the ParameterBag interface excepts an array. as such we cannot sensibly use the request attribute and as a result we kind of would need an entirely different listener.\n. IIRC the reason why we assume an array is that the ParameterBag interface excepts an array. as such we cannot sensibly use the request attribute and as a result we kind of would need an entirely different listener.\n. yeah .. please submit a PR with a fix .. can you also check if the tests are wrong or if we are missing a test case for this?\n. yeah .. please submit a PR with a fix .. can you also check if the tests are wrong or if we are missing a test case for this?\n. hmm .. so the question is if someone just forced the tests to pass or if the rather odd behavior was intentional .. can you check the \"blame\" for the tests you adjusted to see with what comment they were introduced and double check the docs?\nthank you\n. hmm .. so the question is if someone just forced the tests to pass or if the rather odd behavior was intentional .. can you check the \"blame\" for the tests you adjusted to see with what comment they were introduced and double check the docs?\nthank you\n. yeah .. I fear in this case we need to maintain BC\n. yeah .. I fear in this case we need to maintain BC\n. to maintain BC the default must be the current behavior :-/\n. to maintain BC the default must be the current behavior :-/\n. thx!\n. thx!\n. good point .. yeah please add something in the docs\n. good point .. yeah please add something in the docs\n. hmm not sure .. can you debug this a bit .. might be an edge case in the serializer itself.\n. hmm not sure .. can you debug this a bit .. might be an edge case in the serializer itself.\n. check what happens in https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/EventListener/ViewResponseListener.php\nalso try without the view annotations, ie. by creating the view manually and setting the groups to see if you also have a difference there.\nfinally you can also test with just the jms serializer alone to see if it also behaves differently with and without a serialization group.\n. check what happens in https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/EventListener/ViewResponseListener.php\nalso try without the view annotations, ie. by creating the view manually and setting the groups to see if you also have a difference there.\nfinally you can also test with just the jms serializer alone to see if it also behaves differently with and without a serialization group.\n. I always have concerns about adding options that have a global effect since it means that people combining different Bundles that require different config will run into trouble. at the same time adding more features that are configured by path etc add overhead.\nsigh :-/\n. I never used the decoder myself but I guess this could be argued to be a bug fix rather than a BC break ..\n. hmm I do not see anything wrong from a quick look either. Did you clear your cache?\n. does it work with page ?\n. I assume you have use FOS\\RestBundle\\Controller\\Annotations as REST; in your code?\nif so .. I fear you will have to debug this inside the ParamFetcher (and the ParamFetcherReader) or try to reproduce the issue inside https://github.com/gimler/symfony-rest-edition and send me a PR with the test case.\n. ok then the issue is in the ParamReader\n. @ClementGautier can you have a look here?\n. ping\n. I guess this is ready to merge?\n. I guess this is ready to merge?\n. needs a rebase\n. @mosch can you have a look at https://github.com/FriendsOfSymfony/FOSRestBundle/issues/992 ?\n. building a universal controller makes sense, but in practice I would then still extend that controller for each entity. Furthermore if you are concerned about the route generation, there are simply limitations there. It simply doesn't work for every case.\n. We now have fairly naiv accept header based content negotiation and serialization. It basically means that a single controller is able to serialize all versions (or at least is responsible for dispatching), usually by leveraging the JMS serializer versioning support:\nhttps://github.com/gimler/symfony-rest-edition/pull/35\nThe next step would be to move the content negotiation (ie. dropping the FormatListener) to the routing layer, which would then allow the routes to configure the formats they support and therefore making it possible to easily handle different versions via different controllers. This would essentially be an improvement on top of this:\nhttp://labs.qandidate.com/blog/2014/10/16/using-the-accept-header-to-version-your-api/\n. the current state is this:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/1.5.0-RC3/Resources/doc/3-listener-support.md#media-type-version-extraction\n. i rather not have a dependency on the TwigBundle but then again .. I just noticed we rely on the TwigBundle for configuring the listener already ..that being said .. I wonder if we shouldn't even figure out a way to make this optional, so that one could also configure the exception controller without the TwigBundle\n. I think your change is not ideal, as it then assumes the existence of a template layer. i will try to come up with an alternative PR that will also make TwigBundle optional.\n. superseded by https://github.com/FriendsOfSymfony/FOSRestBundle/pull/908\n. try changing your priority to json instead of application/json\n. well .. this is something I am discussing with @willdurand already:\nhttps://github.com/gimler/symfony-rest-edition/pull/35#discussion_r18443327\n. am I right that #866 was only included in the RC and not in a stable release?\n. can you add a failing test case for the old behavior?\n. @urville can you have a look as well?\n. @mvrhov can you rebase on master so that HHVM is set to allowed fail again so that we get a nice shiny green here :)\n. ping @urville \n. it does not https://travis-ci.org/FriendsOfSymfony/FOSRestBundle/jobs/40059211#L178 :(\n. seems like we will then also have to hack the use of the custom ini into every php call :(\nhttps://github.com/phpspec/phpspec/blob/master/.travis.yml#L12\n. guess we need to call phpunit differently then:\nNotice: File could not be loaded: phpunit\nThe command \"sh -c 'if [ \"$TRAVIS_PHP_VERSION\" = \"hhvm\" ]; then hhvm -c travis.hhvm.ini phpunit --coverage-clover=coverage.clover; else phpunit --coverage-clover=coverage.clover; fi;'\" exited with 255.\n. thx @xabbuh that works .. but I am really not happy with the messy-ness of this ..\n. @adrienbrault hmm that seems to mess up something with the default ini .. but your command looks fine to me.\n. but that means I seem to be either overwriting the default hhvm php.ini .. or I am preventing the default php.ini from being written. in both cases its again a messy solution\n. nothing special should be necessary, ie. since its going to be handled by the exception listener, it should be possible to log this like any other exception. or do you mean you want to get the actual request data (ie. the json message) in the log?\n. how would that be used exactly?\n. can you also submit relevant changes to the docs and a test case?\n. ping\n. ping\n. essentially for the test setup you can check what is done in .travis.yml .. note however that it expects a recent version of phpunit to be installed globally. and yes adding a QueryParamsTests seems to make sense.\n. agreed.\n. ping\n. uhm .. not sure. what does the form layer do? I mean this should be caught by your validation rules ..?\n. can you add a failing test case?\n. you can do it in this PR .. or even better as a separate PR.\n1) PR with the failing test case\n2) update this PR to include the test case plus your fix\n. ping\n. hmm it seems like the commit in this PR doesn't match the on in #915 ..\n. hmm not sure why the commit hash is different then .. anyway .. looks good in manual inspection .. thanks!\n. can you look into those build failures?\n. ping\n. can you explain a bit more what was changed and why .. there are a lot of whitespace changes mixed in there\n. ah ok .. so for now this is just how it is .. and we should just merge this?\n. then we will have them again next time ..\n. needs a rebase now too\n. it seems there is an issue with HHVM. i re-ran HHVM on master and it passes\n. can you also update the docs?\n. i am also wondering if we should have an explicit setting of the default format:\nfos_rest:\n    body_listener: json\n. yeah .. agreed\n. why do you get an error when posting without a content type header, because of your controller? the body listener should not throw an error in this case ..\n. ah you have throwExceptionOnUnsupportedContentType set to true?\n. no clue what could cause this in the this bundle .. that being said, I have not used that feature myself yet.\n. this is a JMS serializer issue\n. serializer:\n        serialize_null: true\nsets the null serialize strategy in the serializer:\nhttp://knpuniversity.com/screencast/rest-ep2/serializer-configuration\nview:\n        serialize_null: true\ndetermines if a null value passed in as the data into a view object should trigger the serializer at all\n. via this configuration it should be automatically set on the context. can you debug if this line is triggered accordingly?\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/View/ViewHandler.php\n. What serializer are you using?\n. Hmm I guess this is using the core serializer rather than JMS serializer which afaik does not have this feature.\n. What I am saying is that the core serializer does not atm support what you want, so you will need to use the JMS serializer instead, however the JMS serializer does not provie a twig function.\n. maybe @dunglas has a hint here or can add the missing functionality to the core serializer since he has taken over the development\n. like I said .. JMS serializer will not work with the twig function .. in fact you will have to disable json templating to use the JMS serializer=\n. no .. I am pretty sure that there is not anything in FOSRestBundle that would change that behavior\n. in the config.yml do not configure json to be a templated format. this is the default. =\n. still not calling the serializer direct in the ViewHandler? \nanyway .. have a look here https://github.com/gimler/symfony-rest-edition \n. I dont think its possible right now other than via a regexp.\n. we have a configuration setting to determine for what exceptions we expose the message, which is handled in the ExceptionController:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Controller/ExceptionController.php#L174\nsee here for the docs:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/4-exception-controller-support.md\n. I made some changes here .. its now also possible to configure a service:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/942\n. this is only possible since version 1.5.0 (note there is no stable release yet). I assume you are still on an earlier version. Please check the docs that there installed along with your version of the Bundle.\n. sounds good to me, ie the integration into symfony.com docs :)\n. maybe while you are at it you can also have a look at https://github.com/FriendsOfSymfony/FOSRestBundle/pull/855\nin general the docs were created evolutionary ... meaning as the above PR tried to start, we might need to restructure them to better accommodate the fact that the Bundle has grown a lot.\n. I just released 1.5.0-RC3 .. so I merged this after wards so that we can tweak it as needed with the previous state locked in with that release.\n. @javiereguiluz any ETA here? I would like to make the stable release now .. so it would be good to have a proper URL to point to\n. I never used param converters .. did you check via app/console router:debug [route_name] if your expectations are met?\n. can you create a failing test case?\n. interesting .. so your use case is that you only want to send additional variables to the template but not when using the serializer? I guess right now my answer for such a requirement would be to have a wrapper object that simply does not include the unwanted data in the serialization mapping.\n. in jmsserializer you can choose which properties should be serialized and which should be skipped.\n. lazy loading of such optional data indeed seems like what we want to encourage. in theory it is possible that the output format isn't determined yet in the controller but at a later stage. but this does seem highly theoretical .. however especially those who do not inject the ViewHandler and also do not extend the base Controller .. lazy loading would be better so that they do not have to add this dependency.\n. in order to determine if its a templating format inside the controller, the controller needs access to the ViewHandler .. but if you use the ViewResponseListener, you don't have the ViewHandler instance in the Controller.\n. yeah .. but like I said .. this is likely more a theoretical concern but if we can make the callback approach work nicely then its all good.\nBTW another option is of course also to let the templates pull the additional information. of course one should not have business logic there and also not elegant in terms of error handling but this is what I do at times when I encountered the above described needs before.\n. did you intentionally close this ticket?\n. ping\n. @Cript ok .. so theb we can close this PR in favor of the new one?\n. @Cript ok .. so theb we can close this PR in favor of the new one?\n. can you paste your entire config?\na short explanation of how things work .. in case of an exception we run through the content negotiation once more since we do not know for sure if the format has been determined properly yet when the exception was thrown.\n. it seems like right now, you do not configure the format listener at all:\nhttp://symfony.com/doc/master/bundles/FOSRestBundle/3-listener-support.html#format-listener\n. In that case you should probably do something like:\nformat_listener:\n        rules:\n            - { path: '^/l10n', priorities: [json, html], fallback_format: html, prefer_extension: false }\nThis means you prefer json but are also willing to serve up html in case the accept header does not allow json.\n. can you explain a bit what your use case is for extending?\n. @Tobion / @stof can you give some feedback here on what the best approach is?\n. can you investigate a bit where the 501 is thrown? I think this is rather a Symfony core issue\n. closing this ticket for now .. if it turns out that this Bundle is part of the problem after all .. I will reopen the ticket.\n. looking good so far. @stof might have some feedback\n. @stof something seemed to have gone wrong with scrutinizer when I wanted to check the code coverage. I guess in general specifically testing this will be hard but I guess we sort of test it, since we test multiple Symfony versions .. as such .. I guess we can just merge this?\n. when were these features deprecated?\n. ok .. I just noticed that in the composer.json we still support 2.2, while in travis we only test against 2.3:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/composer.json#L26\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/.travis.yml\nI guess we should also bump this to 2.3 in composer. Meaning there might be even more stuff to remove then.\n. see also https://github.com/FriendsOfSymfony/FOSRestBundle/pull/952\n. duplicate of https://github.com/FriendsOfSymfony/FOSRestBundle/issues/931\n. @javiereguiluz / @fabpot please let me know when its ready, so that I can merge and release 1.5.0\n. merci!\n. At this point we are indeed following semver. All \"BC breaks\" noted in the upgrading guide are essentially considered to be bug fixes.\n. just for the record, I do not see bumping the minimal version requirement as a BC break:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/952/\nthat being said, I think that FOSRestBundle 1.x will remain compatible with Symfony 2.3, ie. dropping 2.3 support will likely happen in a 2.x version.\n. looks good .. hard to really see in the PR if nothing is lost .. gotta trust the tests, huh? :)\n. This indeed looks interesting and is sort of what I had in mind as well. I realize that the approach you take is essentially BC but for now lets target this for 2.0.\n. yeah for 2.0 I think it would be most efficient if the zones are responsible for all of this. ideally the zone even registers the listeners. in end effect .. most features of the Bundle can then be configured for specific parts of the API\n. ok it looks like 2.0 is on the horizon due to #1074 .. so lets get back on this as well\n. ok it looks like 2.0 is on the horizon due to #1074 .. so lets get back on this as well\n. Yeah .. I personally think it would be better if people used multiple Kernels .. but the current trend with a single AppBundle seems to be going in the opposite direction. so I think your idea is the best way to address this.\n. Yeah .. I personally think it would be better if people used multiple Kernels .. but the current trend with a single AppBundle seems to be going in the opposite direction. so I think your idea is the best way to address this.\n. I am not sure what the performance impact is but I also agree that removeListener is better than addListener .. +1 from me\n. I am not sure what the performance impact is but I also agree that removeListener is better than addListener .. +1 from me\n. please rebase on master\n. could be related to the following: https://github.com/FriendsOfSymfony/FOSRestBundle/pull/883\n. @johndodev by default PHP only decodes urlencode POSTs (ie from an html form) but if you send data as json/xml/etc it will not be decoded and so they will not show in the Symfony request class. this is where the body listener helps .. it looks at the request content type and if its json/xml/etc it will attempt to decode this data to an array and set it on the request instance just as if the data was submitted via an html form.\n. can you create a test case? or at least a fork of https://github.com/gimler/symfony-rest-edition to illustrate the problem?\n. it would still be good if you could provide me with the test case .. time is short, so it will help me spend my time on writing a fix .. that being said .. right now I am not sure how this Bundle is affecting this behavior .. it might just be a JMS serializer issue.\n. @MalteWunsch can you help us figure out a way to bring this feature to this Bundle? note that the Bundle still supports Symfony 2.3+ versions but of course its sufficient that we ensure that it doesnt break 2.3-2.5 but then works with 2.6+\n. sorry .. maybe I got the wrong github account here and the original feature was added by @mpdude to Symfony 2.6\n. sorry .. maybe I got the wrong github account here and the original feature was added by @mpdude to Symfony 2.6\n. awesome .. thx!\n. awesome .. thx!\n. depending on what needs to change this will be put into a 1.5 bug fix release .. or it will have to wait until 1.6.0\n. depending on what needs to change this will be put into a 1.5 bug fix release .. or it will have to wait until 1.6.0\n. @mpdude / @maltewunsch ping\n. one more ping\n. +1\n. if someone sends a PR I can quickly release\n. can you all test the PR as well? want to make sure I do not get another regression and I do not have a good code base I can use for testing this beyond our tests.\n. so with this null will then be converted to array() ?\n. OK thank you .. maybe something to add to the docs.\n. lets have this sit in master for a bit ..\n. lets have this sit in master for a bit ..\n. I just released 1.5.1 without this fix .. but I also now merged it into the 1.5 branch .. still waiting to see if someone reports issues for a few days since I am worried about causing another regression.\n. I just released 1.5.1 without this fix .. but I also now merged it into the 1.5 branch .. still waiting to see if someone reports issues for a few days since I am worried about causing another regression.\n. released as https://github.com/FriendsOfSymfony/FOSRestBundle/releases/tag/1.5.2\n. released as https://github.com/FriendsOfSymfony/FOSRestBundle/releases/tag/1.5.2\n. released in 1.5.1\n. released in 1.5.1\n. could possibly also be put into 1.5.1\n. could possibly also be put into 1.5.1\n. released in 1.5.1\n. released in 1.5.1\n. thx ... I guess this could also go into 1.5.1\n. thx ... I guess this could also go into 1.5.1\n. released in 1.5.1\n. released in 1.5.1\n. cool .. BTW .. I am not so big on squashing commits .. especially in this case I think its more proper in order to keep the credits .. \n. cool .. BTW .. I am not so big on squashing commits .. especially in this case I think its more proper in order to keep the credits .. \n. ok .. then all we need is documentation!\n. ok .. then all we need is documentation!\n. sure .. I can help with tweaking the language\n. sure .. I can help with tweaking the language\n. I do not see the advantage of this approach. It would for example make sense if we would then lazily (f.e. for the case when templating is used rather than serialization) do some expensive method calls but the calls to the context class are neither expensive, nor will they be done lazily\n. hmm I am not really convinced that this is useful enough so that it makes sense to add this. so I would prefer if you would just extend the View class in your code to add this.\n. indeed .. also in newer versions of Symfony, there is an alternative which this bundle can also use\n. indeed .. also in newer versions of Symfony, there is an alternative which this bundle can also use\n. good point .. we also need to then find a solution for the case when JMS serializer is not available, ie. one that works with the core serializer. however we will not add a dependency on JMS serializer.\n. @dunglas are you motivated to look into this? essentially we created a wrapper for exceptions so that we can better control the output structure for the JMS serializer. now we need an equivalent alternative for the core serializer.\n. closing in favor of https://github.com/FriendsOfSymfony/FOSRestBundle/pull/970\n. fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/releases/tag/1.5.3\n. I guess this will just mean that the return format will be different without JMS serializer. I guess this should be noted in the docs.\n. and yeah .. I will then cherry pick this into 1.5\n. i was refering to just the docs on the exception controller. there it should be noted that the documented structure will be different without JMS serializer\n. ie. I am talking about https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/4-exception-controller-support.rst\nthough the response format is there currently not even mentioned. but imho at the very least we should then mention that the format will be different depending on if one uses JMS serializer or not .. \n. tweaked the docs in 40e595a\n. looks like you opened the ticket on the wrong repo.\n. can you investigate this a but or submit a test a failing test case? there has been some refactoring in this area\n. ping\n. ping\n. did you also open a ticket on Symfony core?\n/cc @webmozart\n. maybe it was fixed by https://github.com/symfony/Validator/commit/b90adb60265bec674a0a5ac12bff95d93f7d78f1\nI guess then we could in theory add a conflict to lower versions. reading the commit info it would then be an issue with 2.5 versions up to exclusing 2.5.5. it never affected versions below 2.5 of course and also didn't affect 2.6 versions.\n. generally its contrary to the REST principles to have different paths for the same resource.\nthat being said, if you want to do this, then yes you will have to have some logic in your control to decide which route to use based on checking the route matched or the path in the request etc.\n. generally its contrary to the REST principles to have different paths for the same resource.\nthat being said, if you want to do this, then yes you will have to have some logic in your control to decide which route to use based on checking the route matched or the path in the request etc.\n. very nice!\n. sounds reasonable .. can you work on a PR?\n. closing due to lack of feedback\n. was pondering if we should make it an allowed failure .. but as things are green for now it would be good to detect any regression\n. pondering if the code in RequestUtil could be put some where more sensible .. was looking at @willdurand's Negotiation lib as one possible place .. \n. maybe we can at least add a comment that this util class may be removed in a future release?\n. or lets just make it a private method in the listener class?\n. fine for me\n. I somehow seem to remember that we had this topic before .. at least 1-2 years past. note you can override the service used for decoding of json with a custom service.\n. or we move to https://github.com/webmozart/json in case it already provides the options we need\n/cc @webmozart\n. maybe it would be safer to just add a flag on the request, like $request->attributes->set('_blank_object', true); which the view handler can then be made aware of\n. oddly enough the nightly builds are now failing ..\n. seems like yes. \n. can you try https://github.com/FriendsOfSymfony/FOSRestBundle/pull/979 ?\n. ok. this means that the core Request class doesnt by default return the body of the first message. this looks like it will need some improvements to core. 2.7 is close to freeze so it would be great if you could look into it.\n. @roelveldhuizen sorry I was unclear. I was suggesting to try and see about submitting improvements to Symfony 2.7 to better handle multi part messages.\n. not sure entirely .. you can debug this yourself maybe in the BodyListener.php code?\n. this relates to https://github.com/symfony/symfony/pull/10381 .. tl;dr; @fabpot decided against adding logic for parsing multi part messages.\nvia twitter (https://twitter.com/dickolsson/status/573248385446223873) I came across https://github.com/dickolsson/http-multipart\n. this relates to https://github.com/symfony/symfony/pull/10381 .. tl;dr; @fabpot decided against adding logic for parsing multi part messages.\nvia twitter (https://twitter.com/dickolsson/status/573248385446223873) I came across https://github.com/dickolsson/http-multipart\n. I do not think that we have anything for this in the Bundle. Of course you can customize the response structure via the serializer but it seems it would be more elegant to handle this on the server side, so your approach sounds sensible. If you can find a generic enough solution, we can maybe put it into this Bundle\n/cc @webmozart\n. closing this .. unless you want to keep it open until a solution is found for entities with composite primary keys?\n. closing this .. unless you want to keep it open until a solution is found for entities with composite primary keys?\n. can you add something to the docs and ideally also a test?\n. ping\n. ping\n. @backender not sure either about how the form layer expects composite keys to be received.\n. @backender not sure either about how the form layer expects composite keys to be received.\n. +1 on @stof's comment\n. simply specify the service name as the resource.\n. can you submit a failing test case for this?\n. ping @webmozart\n. it was added here https://github.com/FriendsOfSymfony/FOSRestBundle/pull/886/files\n. ping @webmozart\n. did you debug a bit what is going on? I guess the form is not considered to be valid? what data is in the $request->request in both cases? I assume there is some difference there that is causing the issue.\n. do you have the BodyListener activated?\n. ah yes you do .. can you pastebin the body of the request you send for DELETE with json/xml?\n. but I am right that in the xml/json case the $form->isValid() check returns false? then the issue is that the form layer isn't happy.\n/cc @webmozart\n. ping\n. ping\n. this is actually more a question about the Symfony2 form layer than this Bundle in particular. The key question is what array structure is needed and what additional steps might be needed in Doctrine ORM to make the form valid.\n. this is actually more a question about the Symfony2 form layer than this Bundle in particular. The key question is what array structure is needed and what additional steps might be needed in Doctrine ORM to make the form valid.\n. then you will likely need to add a transformer. speaking of which, this might be relevant to you https://github.com/FriendsOfSymfony/FOSRestBundle/pull/987\n. then you will likely need to add a transformer. speaking of which, this might be relevant to you https://github.com/FriendsOfSymfony/FOSRestBundle/pull/987\n. fix for https://github.com/FriendsOfSymfony/FOSRestBundle/issues/822\n. fix for https://github.com/FriendsOfSymfony/FOSRestBundle/issues/822\n. see my comment in #822 \n. see my comment in #822 \n. maybe you can use this new feature in 1.5.0 to stop the format listener rules at a defined point: http://symfony.com/doc/master/bundles/FOSRestBundle/3-listener-support.html#disabling-the-format-listener-via-rules\n. maybe you can use this new feature in 1.5.0 to stop the format listener rules at a defined point: http://symfony.com/doc/master/bundles/FOSRestBundle/3-listener-support.html#disabling-the-format-listener-via-rules\n. I guess the Doctrine API guarantees an array return value for us here or do we need to check for null etc?\n. that feels a bit hacky. maybe a black list of mime types makes more sense?\n. well it makes sense as we provide various config options for this listener .. that being said, at least we should provide some sensible extension points so people can easily extend the default listener\n. I have created an alternative approach to this that adds the extension point and makes the service configurable.\n. https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1267\n. @afranioce you can use it. there is nothing wrong with using the Symfony core routing and not relying on the route generation of this Bundle. its a question of preference. my point was just that if you are not using the route generation of this Bundle, then this is not the right place to find an answer.\n. looks good now I guess ..\ncan you make those minor changes that @xabbuh noted?\n. this might help https://github.com/schmittjoh/serializer/pull/429\n. guess we need to increase the minimum jms serializer version .. good catch!\n. guess we need to increase the minimum jms serializer version .. good catch!\n. can you also add a test case please?\n. can you also add a test case please?\n. ping\n. I have created a test https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1035\n. I have created a test https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1035\n. I am not surprised that you are running into issues there. using extensions to \"pick\" the input/output format is really a kludge. you should instead send the proper Content-Type and Accept headers, ie application/json and application/xml.\n. I am not surprised that you are running into issues there. using extensions to \"pick\" the input/output format is really a kludge. you should instead send the proper Content-Type and Accept headers, ie application/json and application/xml.\n. I think your issue is that you have not specified any rules or the format_listener .. but yes you should be able to process json input with the body listener and generate XML with the view handler as output the way you describe.\n. I think your issue is that you have not specified any rules or the format_listener .. but yes you should be able to process json input with the body listener and generate XML with the view handler as output the way you describe.\n. Indeed, the param converters are not meant for GET parameter validation.\nsee http://symfony.com/doc/master/bundles/FOSRestBundle/3-listener-support.html#param-fetcher-listener for a way to validate GET parameters.\n. fails how? at any rate, I never used param converters, so its hard for me to reproduce this. can you look at the test cases and see if you can reproduce it?\n. is there no way to determine if we have an instance of a 2.7 serializer available so that we do not need to bump the minimal version?\n. ping\n. it would also be good to add a test case for this\n. it would also be good to add a test case for this\n. the problem is then, that users that do not have JMS serializer installed will need to add it to be able to use the core serializer. In order to maintain BC maybe the best option is to create our own ContextInterface, which implemements JMS's interface and if JMS isn't installed it defines it.\nDue to difference in license it would be good to get @schmittjoh's permission for this.\n. @Ener-Getick can you create a PR .. makes it easier to review.\n. for the record the PR was created https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1074\n. Your question should be answered via:\nhttp://symfony.com/doc/master/bundles/FOSRestBundle/2-the-view-layer.html#csrf-validation\nIf not please reopen.\n. i think I seem to remember having seen this noted before .. best would be to investigate the code inside the Routing namespace in this Bundle to try and come up with a fix.\n. the method is only relevant if you do not use the serializer but instead use the templating. but default html will use templates, while json/xml will use the serializer. this is configurable as per the view Bundle configuration. the idea is to enable controllers that can serve both html and xml/json etc.\n. you are using the ViewResponseListener, do you also have the SensioFrameworkExtraBundle installed and if yes did you configure it according to the documentation of the ViewResponseListener?\n. did you set a an Accept header to application/json the Content-Type defines the encoding of your request body, the Accept header defines what you expect as the format for the response body.\n. You said the following:\nI have tried using Postman and after set the header Content-Type to application/json the error turns into this\nWhat I am telling you is that the Content-Type is irrelevant for the output format, you instead need to set the Accept header in your request.\n. You said the following:\nI have tried using Postman and after set the header Content-Type to application/json the error turns into this\nWhat I am telling you is that the Content-Type is irrelevant for the output format, you instead need to set the Accept header in your request.\n. i think in general multipart message handling is not ideal in the Request class in general. our BodyListener is also not really ready for it either.\n. @xabbuh yeah wasn't sure about the numbers in the file names either. was just following the current approach.\n. @xabbuh yeah wasn't sure about the numbers in the file names either. was just following the current approach.\n. I also wanted to prevent the old links from breaking, which is why I left the old listener overview page as is. This is also why I do not want to drop the numbering now. But I guess I can leave the numbering out of the new documents if you think its better.\n. I also wanted to prevent the old links from breaking, which is why I left the old listener overview page as is. This is also why I do not want to drop the numbering now. But I guess I can leave the numbering out of the new documents if you think its better.\n. I have did the changes as suggested by @javiereguiluz. I also removed the numbers from the new files. good to merge?\n. I have did the changes as suggested by @javiereguiluz. I also removed the numbers from the new files. good to merge?\n. ok, think its good now. once its merged I will release 1.6.0-RC1\n. ok, think its good now. once its merged I will release 1.6.0-RC1\n. anyone running into issues with this PR please try https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1038\n. anyone running into issues with this PR please try https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1038\n. ok thx .. will have to check what isn't working there.\n. ok thx .. will have to check what isn't working there.\n. can you test https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1038 ?\n. can you test https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1038 ?\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/commit/74d28f309550a1d9905b938fff7a3f28170ac3f0 for the fix for view_response_listener .. also added some testes\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/commit/74d28f309550a1d9905b938fff7a3f28170ac3f0 for the fix for view_response_listener .. also added some testes\n. yeah .. why not\n. yeah .. why not\n. will be fixed in 1.7.0\n. awesome! didn't realize we already had infrastructure for functional tests in the Bundle\n. as of 1.6.0 there is an extension point for this: https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1034\n. you set a custom service as the listener and implement custom logic in the isDecodeable method\n. that being said .. if you make it work .. maybe you can update the docs with that example?\n. You can maybe do something via a JMS visitor. Alternatively you can extend the base ViewHandler in this Bundle. Finally you could introduce your own View base class that decorates the data automatically.\n. do you have 1.6.0 or 1.6.1?\n. does this change fix the issue?\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/commit/81966a05ea92c87d21604a38ba867ebefa439802\n. can you give me more details? for example have a look in the profiler to tell me more information about the exception you are getting\n. hmm this sounds really strange .. the code looks fine and I have no idea what change could cause this to not work. I fear you will need to debug this some more yourself by looking at the ViewHandler class ..\n. can you work on this?\n. ah .. we will still need to support 2.3+ .. so this will require some conditional logic, along the lines of what I have done here:\nhttps://github.com/liip/LiipTranslationBundle/pull/39/files#diff-c2c20f7d6267a9f0628c1dda9a00437fR1\nhttps://github.com/liip/LiipTranslationBundle/pull/39/files#diff-a250e7565daed7b88f994541e152e67cR2\n. @peshi easiest is to just push to the same branch to update this PR\n. thx .. I am sure some people will find this useful.\n. can you fix the tests?\n. sure .. can you investigate how they are able to support this and submit a PR for this?\n. generally I like the direction of this PR but I fear you cannot just drop an typehint from a method:\nhttp://3v4l.org/SOhKd\n. in the end .. maybe we just need to do FOSRestBundle 2.0 ..\nthere are a few tickets planned there already .. maybe that its enough:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/milestones/2.0\n. in 2.0 I would still want to support JMS serializer ... but we would not have to do complicated BC hacks.\n. yeah .. \n. yeah .. \n. yeah .. lets screw BC and make this a 2.0 PR\n. yeah .. lets screw BC and make this a 2.0 PR\n. I would prefer a class\n. I think a class is much more user friendly since it makes the structures explicit. What are you struggeling with specifically?\n. i will try to find time this afternoon to have a look. sorry that I have been so unresponsive in terms of detailed feedback.\n. ok this is starting to look really good! I think ideally we will have people playing with this in some real applications both with using the advanced features of the JMS and Symfony core serializers.\n. OK no worries .. in the mean time I will try and find time to test this on some apps and get others involved in the feedback. thank you so much for your efforts .. enjoy your vacation!\n. @Ener-Getick the reason is that one of the tests is just for a BC hack that we will remove in 2.0 .. if its causing issues for you just remove https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Tests/Request/RequestBodyParamConverter20Test.php and https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Request/RequestBodyParamConverter20.php since we can drop SensioFrameworkExtraBundle 2.x compatibility in FOSRestBundle 2.0\n. yeah .. I think this would make sense .. @dunglas ?\n. good question .. I would say what you prefer or rather we may want to end up making this configurable in another PR to fix #842 \n. ok. i will try to find some time tomorrow for a final review. thank you for your efforts!\n. puh .. totally dropped the ball here .. putting it on my immediate todo list ..\n. yeah .. docs would be good .. also needs a rebase\n. I guess all open discussion points are taken care of here .. right?\nwould still be good to get the blessing from @dunglas \n. done :)\n. done :)\n. I guess moving the logic into the Param classes makes sense, but I would want to do this in a separate PR that we can put into 2.0 ..\nSupport for headers is something we could consider for 1.8 .. though maybe in the end the next step after 1.7 will be 2.0 anyway.\n. sounds good to me\n. #1097 was merged\n. #1097 was merged\n. BTW .. there might also be things from FOSRestBundle that we could consider pushing into 2.8/3.0 which would result in the question what the target version for FOSRestBundle 2.0 is .. right now I would say 2.7 but 2.8/3.0 is also a possibility.\n. BTW .. there might also be things from FOSRestBundle that we could consider pushing into 2.8/3.0 which would result in the question what the target version for FOSRestBundle 2.0 is .. right now I would say 2.7 but 2.8/3.0 is also a possibility.\n. this should already work .. what behavior are you experiencing that makes you believe it doesn't?\n. this should already work .. what behavior are you experiencing that makes you believe it doesn't?\n. yes from memory it should be possible to do @Rest\\View(template=\"..\",templateVar=\"..\")\nif this works feel free to send a PR to illustrate this in the docs\n. yes from memory it should be possible to do @Rest\\View(template=\"..\",templateVar=\"..\")\nif this works feel free to send a PR to illustrate this in the docs\n. well you cannot return 2 pieces of data, the serialized data and the template data, without a structure of sorts and this structure is a View instance.\nwhat you can do however if add a simple if in your controller to determine if the output format will use the serializer or not using $viewHandler->isFormatTemplating($request->getRequestFormat()\n. well you cannot return 2 pieces of data, the serialized data and the template data, without a structure of sorts and this structure is a View instance.\nwhat you can do however if add a simple if in your controller to determine if the output format will use the serializer or not using $viewHandler->isFormatTemplating($request->getRequestFormat()\n. return $this->handleView($view) will return a Response instance, which will need have the result of not triggering the listener responsible for the View annotation. In other words to use the View annotation you must not return a Response but either a View instance or anything else.\n. ok great.\n. hmm so it seems like something is breaking with non ascii characters badly so that we cannot report the error properly? can you investigate to see what happens differently in the two cases?\n. hmm so it seems like something is breaking with non ascii characters badly so that we cannot report the error properly? can you investigate to see what happens differently in the two cases?\n. this should be a question to direct to either the core or the jms serializer authors\n. this should be a question to direct to either the core or the jms serializer authors\n. sure .. I think this feature was added later on .. please make sure to also update the tests (and docs if necessary)\n. yes its possible. look at the documentation of the serializer that you use. you will then need to add relevant mapping information to your entities. \n. this is an issue with Symfony forms .. and not related to this Bundle or the serializer\n. There are several tickets related to multipart:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/search?q=multipart&type=Issues&utf8=\u2713\nPart of the issue is that Symfony core's Request class also not really support multipart all that nicely. Ideally we would improve the support for multipart in Symfony 2.8 and leverage this here.\n. I do not think that there is a way.\n/cc @stof \n. you can try something like this:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Tests/Fixtures/Controller/AnnotatedConditionalUsersController.php#L100\n. you can try something like this:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Tests/Fixtures/Controller/AnnotatedConditionalUsersController.php#L100\n. maybe just make the class ContainerAware and use setter injection?\n. can you have a look at the build failure with Symfony 2.8?\nhttps://travis-ci.org/FriendsOfSymfony/FOSRestBundle/jobs/73846264\n. @alekitto can you open a ticket (or a PR) on symfony/symfony for the 2.8 regression?\nfor the other issue, I have just retriggered the build for master and also seeing lots of failiures:\nhttps://travis-ci.org/FriendsOfSymfony/FOSRestBundle/jobs/70018789\n. I have retriggered the tests\n. can you rebase on master?\n. please rebase on master\n. can you also add something to the docs?\n. @alekitto can you identify which PR and who made the change in the SensioFrameworkExtraBundle and point them at this ticket?\n. sounds good to me .. can you submit a PR?\n. honestly I am not sure if we intentionally prevent POST from working .. the relevant code is here https://github.com/FriendsOfSymfony/FOSRestBundle/tree/master/Request .. maybe you can investigate\n. hmm .. IIRC this PR should have fixed this https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1024/files\n. dont think we need to note anything specific in the docs for this ..\n. yeah this is expected .. we didn't consider the use case of wanting to customize the error message this way .. \n. yeah this is expected .. we didn't consider the use case of wanting to customize the error message this way .. \n. can you try this syntax?\nhttps://github.com/gimler/symfony-rest-edition/blob/2.3/app/config/routing_dev.yml#L9\n. can you try this syntax?\nhttps://github.com/gimler/symfony-rest-edition/blob/2.3/app/config/routing_dev.yml#L9\n. maybe you can include https://github.com/FriendsOfSymfony/FOSRestBundle/issues/711 in here ?\n. hmm maybe we should then do this in a new PR .. and indeed for 2.0 we should move to the RequestStack\n. looks like the RequestStack is already implemented in this PR https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1104\n. awesome!\n. see also https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1105\n. needs a rebase\n. I guess we can close this one?\n. I guess we can close this one?\n. please rebase on master\n. can you also add something to the docs?\n. @graundas this was a change for the next major release .. aka 2.0\n. please rebase on master\n. can you also add something to the docs?\n. needs a rebase\n. and another one :-/\n. and another one :-/\n. actually .. I just activated styleci ..\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/1115\n. actually .. I just activated styleci ..\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/1115\n. indeed .. needs another rebase :-/\nform now on it should then also show you any CS violations automatically\n. indeed .. needs another rebase :-/\nform now on it should then also show you any CS violations automatically\n. awesome!\n. awesome!\n. see here https://github.com/liip-forks/symfony-standard/blob/techtalk/app/config/config.yml#L38\n. can you create a test case for this?\n. then you need to ensure that they are (ie. the methods) defined in the desired order\n. then you need to ensure that they are (ie. the methods) defined in the desired order\n. lets not bother with a BC hack .. RestBundle 2.0 will drop 2.3 compatibility\n. bumping master to ~2.7 in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1105\n. please rebase on master\n. @stof this is somewhat undecided at this point .. originally I wanted to have 2.0 release by now already. a few things came up but imho we can release very quickly if we decide to.\nIn the mean time this idea of a BC layer came up which would go into a 1.8 release and there we could in theory also enable 3.0 but with deprecation notices. I guess we can have a meeting on Saturday to discuss this and maybe pull in @Ener-Getick via video chat?\n. please rebase on master\n. though you might also want to wait on #1104 \n. yeah I also just noticed that #1104 only focuses on ParamFetcher ..\nanyways .. looks like this needs a rebase again ..\n. needs a rebase\n. awesome!\n. awesome!\n. yeah, I think this could be done .. please submit a PR for the 1.7 branch\n. yeah, I think this could be done .. please submit a PR for the 1.7 branch\n. yeah .. this is indeed a typo .. can you submit a PR to fix this in the docs .. it will indeed be \"votes\"\n. yeah .. this is indeed a typo .. can you submit a PR to fix this in the docs .. it will indeed be \"votes\"\n. please target the 1.7 branch for the fix\n. please target the 1.7 branch for the fix\n. hmm not sure if we shouldn't just add a new method to \"validate the form\" .. or we can introduce an option for this. indeed the current behavior is mostly intended for controllers that deal with both HTML and JSON/XML requests, but it doesn't make so much sense for pure JSON/XML controllers.\nanother option which feels unclean but might be the most flexible and least risky to cause incompatibilities between controllers would be to add a flag (or closure) to the View class to determine the behavior\n. hmm not sure if we shouldn't just add a new method to \"validate the form\" .. or we can introduce an option for this. indeed the current behavior is mostly intended for controllers that deal with both HTML and JSON/XML requests, but it doesn't make so much sense for pure JSON/XML controllers.\nanother option which feels unclean but might be the most flexible and least risky to cause incompatibilities between controllers would be to add a flag (or closure) to the View class to determine the behavior\n. can you target this PR at the 1.7 branch?\n. can you target this PR at the 1.7 branch?\n. BTW .. we also still lack tests for this controller :-/\n. assuming you are using JMS serializer: http://jmsyst.com/libs/serializer/master/reference/annotations#xmlvalue\n. ah actually misunderstood the question .. generally JMS serializer requires you to work with objects to get proper serialization results.\n. maybe in 2.0 as part of https://github.com/FriendsOfSymfony/FOSRestBundle/pull/955\n. It makes sense to disable based on role as long as the auth data is not available to anyone browsing the site.\n. there seems to be a style issue that needs fixing\n. hmm yeah .. we might be overdoing the \"magic\" here .. one way to solve this would be to check the http verb and limit this behavior to POST/PUT .. \nmaybe the cleaner thing would be to stop defaulting to a specific status code and leaving it at null so that we know if an explicit status code is set, we should always return that, rather than doing any sort of magic. though this would be a change for 2.x only.\n. yeah .. probably best to first create a functional test (we already have a few of those) to reproduce the issue ..\n. did you check out the master branch? we have introduced an interface there to make it easier to support different serializers.\n. you can set a context on the View instance in your action. but if you want to add this strategy in all cases, then indeed you should override the getSerializationContext() method in the ViewHandler and call the parent method and then add the relevant calls on the $context instance.\n. i think it might make more sense to add this to JMSSerializerBundle some how .. I do not want to add any more features to the Bundle that is just specific to one serializer.\n. my point is JMSSerializerBundle should have a config to automatically add exclusion strategies, since we use the serializer from that Bundle it should then also work for FOSRestBundle without any additional code.\nright now it seems like JMSSerializerBundle just allows configuring custom visitors but not exclusion strategies.\n. the release should be there\nhttps://packagist.org/packages/willdurand/negotiation#v2.0.0-alpha1\n. this should just work like any placeholder in the route pattern: http://symfony.com/doc/current/book/routing.html#routing-in-action\nie. just add $apiKey to your controller action signature\n. I fear there isn't anything the FOSRestBundle can do here ..\n. there might be something else breaking the CardDav functionality. to verify this, please disable the format_listener entirely and see if things work then.\n. either way works\n. if you could make a fork and a reproducible test case inside for example https://github.com/gimler/symfony-rest-edition, then I could debug this myself a bit.\n. what urls should I call there to see the issue?\n. what urls should I call there to see the issue?\n. BTW I figured out that I can use mod:1234 for the login .. but beyond that I am not sure how to get any useful output .. that being said .. it looks like a proper carddav response though:\n```\nlsmith@pooteeweet krzysztofbitnoise (2.7)$ http http://krzysztofbitnoise.lo/app_dev.php/mod --auth mod:1234HTTP/1.1 404 Not Found\nContent-Length: 270\nContent-Type: application/xml; charset=utf-8\nDate: Fri, 16 Oct 2015 17:23:06 GMT\nServer: Apache/2.4.16 (Unix) PHP/5.6.14\nX-Powered-By: PHP/5.6.14\nX-Sabre-Version: 2.1.7\nxml version=\"1.0\" ?\n\n<s:sabredav-version>2.1.7</s:sabredav-version>\n\n\n<s:exception>Sabre\\DAV\\Exception\\NotFound</s:exception>\n\n\n<s:message>File not found: mod in 'root'</s:message>\n\n\n```\n. BTW I figured out that I can use mod:1234 for the login .. but beyond that I am not sure how to get any useful output .. that being said .. it looks like a proper carddav response though:\n```\nlsmith@pooteeweet krzysztofbitnoise (2.7)$ http http://krzysztofbitnoise.lo/app_dev.php/mod --auth mod:1234HTTP/1.1 404 Not Found\nContent-Length: 270\nContent-Type: application/xml; charset=utf-8\nDate: Fri, 16 Oct 2015 17:23:06 GMT\nServer: Apache/2.4.16 (Unix) PHP/5.6.14\nX-Powered-By: PHP/5.6.14\nX-Sabre-Version: 2.1.7\nxml version=\"1.0\" ?\n\n<s:sabredav-version>2.1.7</s:sabredav-version>\n\n\n<s:exception>Sabre\\DAV\\Exception\\NotFound</s:exception>\n\n\n<s:message>File not found: mod in 'root'</s:message>\n\n\n. @mpbzh that is the thing .. what is the url to a specific contact? the library makes it a bit non obvious where URL parameters are read and how they are used in queries.\n. diff\nlsmith@pooteeweet krzysztofbitnoise (2.7)$ git diff app/config/\ndiff --git a/app/config/config.yml b/app/config/config.yml\nindex 6a6306e..9742888 100644\n--- a/app/config/config.yml\n+++ b/app/config/config.yml\n@@ -51,7 +51,7 @@ doctrine:\n         charset:  UTF8\n         # if using pdo_sqlite as your database driver, add the path in parameters.yml\n         # e.g. database_path: %kernel.root_dir%/data/data.db3\n-        # path:     %database_path%\n+        path:     %database_path%\n orm:\n     auto_generate_proxy_classes: %kernel.debug%\n\n@@ -79,7 +79,8 @@ fos_rest:\n             html: true\n     format_listener:\n         rules:\n-            - { path: ^/, priorities: [ html, json, xml ], fallback_format: ~, prefer_extension: true }\n+            - { path: '^/api', priorities: ['json'], fallback_format: json, }\n+            - { path: '^/', stop: true }\n         media_type:\n             version_regex: '/(v|version)=(?P[0-9.]+)/'\n     exception:\nlsmith@pooteeweet krzysztofbitnoise (2.7)$ http http://krzysztofbitnoise.lo/app_dev.php//addressbooks/mod/list-of-example-contacts/contact-1.vcf --auth mod:1234\nHTTP/1.1 200 OK\nContent-Length: 444\nContent-Type: text/vcard; charset=utf-8\nDate: Mon, 19 Oct 2015 07:44:46 GMT\nETag: \"145ca716db1bc9810e3085ca87aa5950\"\nLast-Modified: Mon, 19 Oct 2015 07:44:47 GMT\nServer: Apache/2.4.16 (Unix) PHP/5.6.14\nX-Powered-By: PHP/5.6.14\nX-Sabre-Version: 2.1.7\nBEGIN:VCARD\nVERSION:3.0\nPRODID:-//Sabre//Sabre VObject 3.4.7//EN\nFN:Roy Kilback\nTEL:(533)739-3887x23601\nN:Kilback;Roy;;;\nEMAIL:heidenreich.alessia@example.com\nUID:1\nTEL;TYPE=CELL:1-873-387-1562\nADR;TYPE=work:920 Reinger Trace Apt. 283;;;;;;\nNOTE:Voluptatibus rerum cupiditate at repudiandae asperiores aut. Ratione q\n ui et excepturi voluptatem assumenda a. Ut voluptas error voluptatibus et\n eos earum necessitatibus.\nEND:VCARD\n```\n. sorry it took me so long to get back to you:\nwhen I do the following\nconsole\nlsmith@pooteeweet krzysztofbitnoise (2.7)*$ http PUT http://krzysztofbitnoise.lo/app_dev.php/addressbooks/mod/list-of-example-contacts/contact-1.vcf Content-Type:text/vcard --auth=mod:1234 < contact.vcf\nHTTP/1.1 204 No Content\nContent-Length: 0\nContent-Type: text/html; charset=UTF-8\nDate: Sun, 25 Oct 2015 13:01:40 GMT\nETag: \"16d502e52c97526e09b4d7036f9977d2\"\nServer: Apache/2.4.16 (Unix) PHP/5.6.14\nX-Powered-By: PHP/5.6.14\nX-Sabre-Version: 2.1.7\nI see that the CardDavController is called and if I dump $request->getContent() in the controller action, I see the modified data as expected. However it doesn't seem to be stored.\n. @mpbzh note that I send the PUT with Content-Type:text/vcard\n. @paali this issue seems to be covered in https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1237 ?\naside from this .. in 2.0 its possible to disable the entire events based on routes .. the question is therefore if we should even keep the \"stop\" rule in 2.0 or remove it entirely?\n. What I wonder if we can optimize things a bit more .. potentially unregistering the listeners instead of disabling them via the request attribute.\n. or maybe the better approach would be to dynamically register the event listeners. in fact this could allow enabling different combinations listeners for different parts of the application.\n. ok .. when no one is defined we no longer register the ZoneListener\nfurthermore I added a few tests to check what happens of the zone support is enabled but didn't match.\n. also allowed 3.0 to fail due to JMSSerializerBundle not supporting 3.0 atm\n. @stof would love to get some feedback from you before merging .. but for now I do not see how we can make it faster without a lot of additional work.\n. PHP Fatal error:  Call to undefined method Mock_ValidatorInterface_5cfaa869::validate() in /home/travis/build/FriendsOfSymfony/FOSRestBundle/Request/AbstractRequestBodyParamConverter.php on line 159\n. ```\nThere were 2 errors:\n1) FOS\\RestBundle\\Tests\\View\\ViewHandlerTest::testCreateResponseWithFormErrorsAndSerializationGroups with data set \"json\" ('json')\nSymfony\\Component\\Form\\Exception\\InvalidArgumentException: Could not load type \"text\"\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormRegistry.php:91\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormFactory.php:84\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormBuilder.php:106\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormBuilder.php:267\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormBuilder.php:215\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/Tests/View/ViewHandlerTest.php:598\n2) FOS\\RestBundle\\Tests\\View\\ViewHandlerTest::testCreateResponseWithFormErrorsAndSerializationGroups with data set \"xml\" ('xml')\nSymfony\\Component\\Form\\Exception\\InvalidArgumentException: Could not load type \"text\"\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormRegistry.php:91\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormFactory.php:84\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormBuilder.php:106\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormBuilder.php:267\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormBuilder.php:215\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/Tests/View/ViewHandlerTest.php:598\n--\nThere were 9 failures:\n1) FOS\\RestBundle\\Tests\\Functional\\SerializerErrorTest::testSerializeExceptionJson with data set #0 ('Serializer', '{\"code\":500,\"message\":\"Someth...:null}')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'{\"code\":500,\"message\":\"Something bad happened.\",\"errors\":null}'\n+'An Exception was thrown while handling: Something bad happened.'\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/Tests/Functional/SerializerErrorTest.php:22\n2) FOS\\RestBundle\\Tests\\Functional\\SerializerErrorTest::testSerializeExceptionJson with data set #1 ('JMSSerializer', '{\"code\":500,\"message\":\"Someth...ned.\"}')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'{\"code\":500,\"message\":\"Something bad happened.\"}'\n+'An Exception was thrown while handling: Something bad happened.'\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/Tests/Functional/SerializerErrorTest.php:22\n3) FOS\\RestBundle\\Tests\\Functional\\SerializerErrorTest::testSerializeExceptionXml with data set #0 ('Serializer', '<?xml version=\"1.0\"?>\\n\\n')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'<?xml version=\"1.0\"?>\n-500Something bad happened.\n-'\n+'An Exception was thrown while handling: Something bad happened.'\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/Tests/Functional/SerializerErrorTest.php:43\n4) FOS\\RestBundle\\Tests\\Functional\\SerializerErrorTest::testSerializeExceptionXml with data set #1 ('JMSSerializer', '<?xml version=\"1.0\" encoding=...sult>\\n')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-\n-  500\n-  <![CDATA[Something bad happened.]]>\n-  \n-\n-'\n+'An Exception was thrown while handling: Something bad happened.'\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/Tests/Functional/SerializerErrorTest.php:43\n5) FOS\\RestBundle\\Tests\\Functional\\SerializerErrorTest::testSerializeInvalidFormJson with data set #0 ('Serializer', '{\"code\":400,\"message\":\"Valida...\"]}}}}')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'{\"code\":400,\"message\":\"Validation Failed\",\"errors\":{\"children\":{\"name\":{\"errors\":[\"This value should not be blank.\"]}}}}'\n+'An Exception was thrown while handling: Could not load type \"text\"'\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/Tests/Functional/SerializerErrorTest.php:78\n6) FOS\\RestBundle\\Tests\\Functional\\SerializerErrorTest::testSerializeInvalidFormJson with data set #1 ('JMSSerializer', '{\"code\":400,\"message\":\"Valida...\"]}}}}')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'{\"code\":400,\"message\":\"Validation Failed\",\"errors\":{\"children\":{\"name\":{\"errors\":[\"This value should not be blank.\"]}}}}'\n+'An Exception was thrown while handling: Could not load type \"text\"'\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/Tests/Functional/SerializerErrorTest.php:78\n7) FOS\\RestBundle\\Tests\\Functional\\SerializerErrorTest::testSerializeInvalidFormXml with data set #0 ('Serializer', '<?xml version=\"1.0\"?>\\n\\n')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'<?xml version=\"1.0\"?>\n-400Validation FailedThis value should not be blank.\n-'\n+'An Exception was thrown while handling: Could not load type \"text\"'\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/Tests/Functional/SerializerErrorTest.php:97\n8) FOS\\RestBundle\\Tests\\Functional\\SerializerErrorTest::testSerializeInvalidFormXml with data set #1 ('JMSSerializer', '<?xml version=\"1.0\" encoding=...sult>\\n')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-\n-  400\n-  <![CDATA[Validation Failed]]>\n-  \n-    \n-      \n-      \n-        \n-          <![CDATA[This value should not be blank.]]>\n-        \n-      \n-    \n-  \n-\n-'\n+'An Exception was thrown while handling: Could not load type \"text\"'\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/Tests/Functional/SerializerErrorTest.php:97\n9) FOS\\RestBundle\\Tests\\Request\\RequestBodyParamConverterTest::testExecutionInterceptsSymfonySerializerException\nFailed asserting that exception of type \"Symfony\\Component\\Serializer\\Exception\\InvalidArgumentException\" matches expected exception \"Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException\". Message was: \"\" at\n0 [internal function]: FOS\\RestBundle\\Tests\\Request\\AbstractRequestBodyParamConverterTest->testExecutionInterceptsSymfonySerializerException()\n1 phar:///home/travis/.phpenv/versions/7.0snapshot/bin/phpunit/phar/phpunit/Framework/TestCase.php(888): ReflectionMethod->invokeArgs(Object(FOS\\RestBundle\\Tests\\Request\\RequestBodyParamConverterTest), Array)\n2 phar:///home/travis/.phpenv/versions/7.0snapshot/bin/phpunit/phar/phpunit/Framework/TestCase.php(752): PHPUnit_Framework_TestCase->runTest()\n3 phar:///home/travis/.phpenv/versions/7.0snapshot/bin/phpunit/phar/phpunit/Framework/TestResult.php(606): PHPUnit_Framework_TestCase->runBare()\n4 phar:///home/travis/.phpenv/versions/7.0snapshot/bin/phpunit/phar/phpunit/Framework/TestCase.php(708): PHPUnit_Framework_TestResult->run(Object(FOS\\RestBundle\\Tests\\Request\\RequestBodyParamConverterTest))\n5 phar:///home/travis/.phpenv/versions/7.0snapshot/bin/phpunit/phar/phpunit/Framework/TestSuite.php(735): PHPUnit_Framework_TestCase->run(Object(PHPUnit_Framework_TestResult))\n6 phar:///home/travis/.phpenv/versions/7.0snapshot/bin/phpunit/phar/phpunit/Framework/TestSuite.php(735): PHPUnit_Framework_TestSuite->run(Object(PHPUnit_Framework_TestResult))\n7 phar:///home/travis/.phpenv/versions/7.0snapshot/bin/phpunit/phar/phpunit/TextUI/TestRunner.php(423): PHPUnit_Framework_TestSuite->run(Object(PHPUnit_Framework_TestResult))\n8 phar:///home/travis/.phpenv/versions/7.0snapshot/bin/phpunit/phar/phpunit/TextUI/Command.php(153): PHPUnit_TextUI_TestRunner->doRun(Object(PHPUnit_Framework_TestSuite), Array)\n9 phar:///home/travis/.phpenv/versions/7.0snapshot/bin/phpunit/phar/phpunit/TextUI/Command.php(105): PHPUnit_TextUI_Command->run(Array, true)\n10 /home/travis/.phpenv/versions/7.0snapshot/bin/phpunit(510): PHPUnit_TextUI_Command::main()\n11 {main}.\nFAILURES!\nTests: 318, Assertions: 1566, Errors: 2, Failures: 9.\n```\n. looks like there are some issues with form type loading and exception handling\n. nope. so any way i can make this work in both 2.7 and 3.0?\n. heh .. fun little typo!\n. @stof sure .. someone just needs to figure out which one exactly we need :)\n. no .. you will need to manually define the routes in this case.\nfor 2.0 this might become possible if someone works on an implementation of this concept here https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1139#issuecomment-145364181\n. I wonder if we can also get rid of the acl dependency in the travis setup:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/.travis.yml#L31\n. '/' doesn't work .. try */* instead\n. ping\n. ping\n. exactly .. @Tobion what do you think are the chances to add a method to read Request::format from the outside?\n. @Ener-Getick right now the only option I see is forcing the user to configure the entire mapping again\n. the Negotiation lib used to provide such a mapping in version 1.x .. \n. I do not think I will have time soon to continue work on this ..\n. We can also add whatever mappings the users has set manually via:\nfos_rest:\n    view:\n        mime_types:\n            json: ['application/json', 'application/json;version=1.0', 'application/json;version=1.1', 'application/json;version=1.2']\n. closing in favor of https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1156\n. yeah. i will add a note in the docs about this change\n. There is an error now:\nhttps://travis-ci.org/FriendsOfSymfony/FOSRestBundle/jobs/84038805#L301\nThis is caused by https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1156 which now uses the fos_rest.mime_types in two more places.\n. sounds more like an issue that should be fixed in the SensioFrameworkExtraBundle? \n. I am not on my laptop atm .. so I cannot investigate what we could do in the case that we are not using a template. I guess we could check if the output format requires a template and only then set the request attribute?\n. right now style ci branch disabling is essentially useless. hopefully they will soon address this. as for back porting the CI fixes .. if you are motivated to do this .. feel free but we will then also need to ensure that we can still merge 1.7 into master afterwards.\n. @xabbuh can you open a PR that fixes this conflict? I am away from my laptop until tuesday evening\n. maybe I didn't understand the approach .. but it seems there are still CS violations left to fix.\n. I guess this should go into 1.7?\n. closed via https://github.com/FriendsOfSymfony/FOSRestBundle/commit/a812c5ae367acf44a1b07f07d57ef413fb25f365\n. closed via https://github.com/FriendsOfSymfony/FOSRestBundle/commit/a812c5ae367acf44a1b07f07d57ef413fb25f365\n. IIRC we injected the container in the ExceptionController and ViewHandler mostly because depending on the code paths, not all dependencies were needed. These days there are of course proxy services which could be used here as well.\n. @xabbuh so how to best address the performance concerns in regards to optional dependencies ..? I guess our options are 1) leave as is 2) your proposal 3) use proxy service. I guess the proper way to do this would be to try and benchmark this ..\nwe can of course look for some blog posts (f.e. https://blog.cloudtroopers.com/symfony-2-lazy-loading-services-and-performance-analysis) and try and extrapolate the relevance. maybe we can also look a bit more closely which services are actually expensive to create and which are actually fairly cheap.\n. @xabbuh I commented inline\n. ping\n. need a rebase\n. need a rebase\n. please rebase again to get the 3.0 build issue fixed\n. @xabbuh FYI I have you write permissions on this repo .. as you know its still best to work through PRs and branches but this makes it easier to collaborate\n. 1) FOS\\RestBundle\\Tests\\Functional\\RequestBodyParamConverterTest::testRequestBodyIsDeserialized\nArgument 1 passed to FOS\\RestBundle\\Tests\\Functional\\Bundle\\TestBundle\\Controller\\RequestBodyParamConverterController::putPostAction() must be an instance of FOS\\RestBundle\\Tests\\Functional\\Bundle\\TestBundle\\Controller\\Post, null given\n. I guess we should not overburden this PR .. so imho lets get this wrapped up and then do more things in other PRs.\nI still think that we should also do something like https://github.com/FriendsOfSymfony/FOSRestBundle/commit/93758654c0ac2ed29576c0dcbe7d42122d71bf37 with all the places where we inject the templating engine.\n. i think this part of the docs might be out dated. afaik right now we do indeed require configuration of a rule in order for the format listener to do anything useful.\n. could you either create a failing test or illustrate the issue by forking https://github.com/gimler/symfony-rest-edition ?\n. AFAIK there were some changes there indeed, can you investigate if this can be fixed in the 1.7 branch? otherwise it might have to wait until the 2.0 stable release\n. FYI I just released https://github.com/FriendsOfSymfony/FOSRestBundle/releases/tag/1.7.2\nAs for master, it requires 2.7+ and therefore should not require BC hacks\n. master is 2.7+  so I guess we can just apply the same change there with out any BC hack\n. so yes a PR would be good :)\n. like I said .. master needs to work with 2.7+ .. ie. 2.7, 2.8, 3.0 ..\n. @javiereguiluz I guess it would be good to use the 1.7 branch on the symfony.com website for now\n. The Bundle uses the exception code mapping and otherwise just returns the status code as its defined in the Exception. see https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Controller/ExceptionController.php#L178\nThat being said the Exception you note above should default to 404:\nhttps://github.com/symfony/http-kernel/blob/master/Exception/NotFoundHttpException.php#L30\n. do you literally have \"...\" in there?\n. can you debug if the above mentioned method is called and if it returns the status code you would expect? ie. if we later on for some reason end up with a different error code (for example because an exception is thrown inside the ExceptionController which would explain why it ends up as a 500)\n. did you read the UPGRADING guide? master is a considerable refactoring which will break BC in many ways\n. sure. sounds interesting as well\n. I would say first write the docs and then we can see if it makes sense to move it to a separate section .. but I agree that the entire version stuff is currently too hidden.\n. looks great!\n. @Tobion might have some hints here as well .. especially as he plans to do some refactoring in core on this topic.\n. sure .. what would be nice .. so this function would then trigger the version matching earlier?\n. needs a rebase\n. needs a rebase\n. @Ener-Getick I guess we can merge it now?\n. @Ener-Getick I guess we can merge it now?\n. this cannot be caused by FOSRestBundle .. all the bundle does is configure routes and the access control's are checked way before the routing system is triggered by symfony.\n. please review http://symfony.com/doc/current/cookbook/security/access_control.html\nFOSRestBundle has no impact on how the access_control system works.\n. it will be merged right away once SerializerBundle abd SensioFrameworkExtraBundle releases have been made. in the mean time you can use this branch. \n. it will be merged right away once SerializerBundle abd SensioFrameworkExtraBundle releases have been made. in the mean time you can use this branch. \n. damn .. not as simple as I had hoped\n. sounds good to me.\n. sounds good to me.\n. would be good to add a test case and mention this in the docs\n. would be good to add a test case and mention this in the docs\n. well it would be good to also test with an associative array\n. well it would be good to also test with an associative array\n. @Ener-Getick FYI I have you write permissions on this repo .. as you know its still best to work through PRs and branches but this makes it easier to collaborate\n. @Ener-Getick yeah that would be best. And of course you can now add tags, close/edit tickets\n. the build error seems to be an issue with the PHP7 setup on travis:\nhttps://travis-ci.org/FriendsOfSymfony/FOSRestBundle/jobs/91239000\n. build is fixed again\n. @piotrantosik is https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1191 a viable alternative for you? \n. @piotrantosik is https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1191 a viable alternative for you? \n. @piotrantosik can you also push a test case into this PR in a separate commit? then @Ener-Getick can pull in the test case into his PR and show how things would work there.\n. @piotrantosik can you also push a test case into this PR in a separate commit? then @Ener-Getick can pull in the test case into his PR and show how things would work there.\n. closed in favor of https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1191\n. yeah .. I guess nobody is taking care of the XSD :(\nsee also https://github.com/FriendsOfSymfony/FOSRestBundle/issues/343\nwould be great if you could do a PR for the 1.7 and 2.0 branch for this.\n. yeah .. I guess nobody is taking care of the XSD :(\nsee also https://github.com/FriendsOfSymfony/FOSRestBundle/issues/343\nwould be great if you could do a PR for the 1.7 and 2.0 branch for this.\n. we have a static list of arguments to ignore:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Routing/Loader/Reader/RestActionReader.php#L412\nwe could either make this lyst \"dynamic\" by also looking for ParamConverter annotations. another approach could be to simply ignore all type hinted parameters but I think this could also have unwanted side effects. I have personally never used ParamConverter's ..\n. FOSRestBundle is a toolbox that can be combined but doesn't have to be .. the body converter is about accepting request data .. output is beyond its scope .. this is where for example the view layer is relevant. feel free to send a PR for the docs to reference the view layer section ..\n. @Soullivaneuh can you maybe follow this up with a doc PR?\n. what do you mean \"fixed also with the priorities\"?\n. yeah .. was pondering this as well\n. not sure if its worth it .. I mean we have tons of open bugs/enhancement tickets .. at this point moving to 2.0 should not take all too long .. what does make sense is to maybe invest some more time into a migration guide\n. To fix the tests one needs to do the following, which sucks big time as it basically means the trait isn't a logical unit anymore but requires other things that I cannot express with code :-/\n```\ndiff --git a/Controller/ContainerAwareControllerTrait.php b/Controller/ContainerAwareControllerTrait.php\nindex b03ecd2..d677c1d 100644\n--- a/Controller/ContainerAwareControllerTrait.php\n+++ b/Controller/ContainerAwareControllerTrait.php\n@@ -12,7 +12,6 @@\n namespace FOS\\RestBundle\\Controller;\nuse FOS\\RestBundle\\View\\ViewHandlerInterface;\n-use Symfony\\Component\\DependencyInjection\\ContainerAwareTrait;\n/**\n  * Trait for Controllers using the View functionality of FOSRestBundle.\n@@ -22,7 +21,6 @@ use Symfony\\Component\\DependencyInjection\\ContainerAwareTrait;\n trait ContainerAwareControllerTrait\n {\n     use ControllerTrait;\n-    use ContainerAwareTrait;\n /**\n  * Get the ViewHandler.\n\n``\n. Note even if we would change the coreContainerAwareclass to use theContainerAwareTraitwe would still run into the same problem as can be seen here https://3v4l.org/l1qkE\n. ok changing to usegetContainer()and defining such an abstract method withinContrainerAwareControllerTrait` along with the following change fixes the issue:\ndiff --git a/ContainerAware.php b/ContainerAware.php\nindex af977fe..080f8cb 100644\n--- a/ContainerAware.php\n+++ b/ContainerAware.php\n@@ -18,18 +18,5 @@ namespace Symfony\\Component\\DependencyInjection;\n  */\n abstract class ContainerAware implements ContainerAwareInterface\n {\n-    /**\n-     * @var ContainerInterface\n-     */\n-    protected $container;\n-\n-    /**\n-     * Sets the Container associated with this Controller.\n-     *\n-     * @param ContainerInterface $container A ContainerInterface instance\n-     */\n-    public function setContainer(ContainerInterface $container = null)\n-    {\n-        $this->container = $container;\n-    }\n+    use ContainerAwareTrait;\n }\ndiff --git a/ContainerAwareTrait.php b/ContainerAwareTrait.php\nindex 57280aa..caf222a 100644\n--- a/ContainerAwareTrait.php\n+++ b/ContainerAwareTrait.php\n@@ -32,4 +32,14 @@ trait ContainerAwareTrait\n     {\n         $this->container = $container;\n     }\n+\n+    /**\n+     * Gets the Container associated with this Controller.\n+     *\n+     * @return ContainerInterface\n+     */\n+    public function getContainer()\n+    {\n+        return $this->container;\n+    }\n }\nNote technically it is sufficient to add the getContainer() method to ContainerAware but while we are at it, we should also add such a method to ContainerAwareTrait. And we can of course choose to not use the ContrainerAwareTrait inside the ContainerAware class in all versions of Symfony that are compatible with PHP 5.3.\ntl;dr: trait properties should always come with a getter method\n. @Ener-Getick at the end of the day it still relies on a property that is no where defined in the trait or the contract defined by the trait. will see what happens with the ticket I opened on symfony core.\n. ok .. keeping FOSRestController and just introducing ControllerTrait .. ready for final review.\n. @Ener-Getick fixed\n. not sure what the benefit would be of adding accessors to the annotations\n. if we do this .. then maybe it makes more sense after all to do a 1.8 release\n. @Ener-Getick I assume you went through the UPGRADING guide?\naside from this, here you can see all changes between master and 1.7:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/compare/1.7...master\n. I guess this can be closed ..\n. I guess this can be closed ..\n. yeah .. I do not think it makes sense for us to add this to 1.7 at this point. That being said, until we release 2.0 stable it might make sense for some users to adopt this.\n. closing in favor of https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1245\n. @Ener-Getick I guess in master we can then tighten visibility\n. +1 .. that being said .. I keep wondering if we should not generally ignore any type hinted parameter?\n. yes :)\n. can you also look into incorporating the changes I did here https://github.com/FriendsOfSymfony/FOSRestBundle/commit/93758654c0ac2ed29576c0dcbe7d42122d71bf37 ?\n. uhm .. why is travis not running the tests?\n. @robhunt3r see @xabbuh's comment\n. +1\n. should go to the 1.8 branch /cc @stof \n. @stof can you modify the target branch? would like to see this merged quickly .. @Ener-Getick alternatively you can also just open a new PR\n. ping\n. see also https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1213/files#diff-a017d18c947ad8d86d5f6ad13de8ce6e\n. @xabbuh / @Ener-Getick good to merge?\nscrutinzer seems to not have received any info to build .. but lets not worry about that\n. @xabbuh / @Ener-Getick what do you think about this change? I think its a bug fix .. but maybe \"safer\" to put it into 1.8/2.0 rather than 1.7? obviously also still needs a test case.\n. ok .. will work on a test case\n. I pushed a test case\n. the change in the ViewHandler is clearly a bug fix and cannot have any unwanted side effects. the change with not setting a template if one was set manually is imho also a clear bug fix and its unlikely to break any work arounds. the only questionable change is the one about not setting parameters on a redirect. so I could move that one over to a new PR on the 1.8 branch.\n. agreed\n. needs a rebase\n. fine for me.\n. @gtrias just FYI 1.8 will not be released before 2.0 though .. but it will be easier to switch from 1.7 to 1.8\n. @gtrias just FYI 1.8 will not be released before 2.0 though .. but it will be easier to switch from 1.7 to 1.8\n. looks good to me.\nStatus: Reviewed\n. Status: Reviewed\n. BTW .. just noticed that carson doesn't seen to see it when one edits a comment.\n. @JHGitty would you be motivated to work on a PR?\n. @JHGitty would you be motivated to work on a PR?\n. reason for its existence is explained here https://florian.voutzinos.com/blog/handling-camelcase-with-fosrestbundle/\n. reason for its existence is explained here https://florian.voutzinos.com/blog/handling-camelcase-with-fosrestbundle/\n. yeah .. I guess this can indeed break things .. I do not think that a black list is the way to go .. but we can either delay this until 1.8 or even 2.0 .. or we can provide a switch to get this new behavior.\n. yeah .. I guess this can indeed break things .. I do not think that a black list is the way to go .. but we can either delay this until 1.8 or even 2.0 .. or we can provide a switch to get this new behavior.\n. in 2.0 we have a way to enable listeners for specific paths\n. in 2.0 we have a way to enable listeners for specific paths\n. well it fixes something I would consider a bug and it has been reported as a bug.\nnow we can say this bug was there so long it has become a \"feature\" that would be a BC break to fix. in this case we can offer it as a config option or we provide 2 services, ie. add a new service with the new behavior.\n. well it fixes something I would consider a bug and it has been reported as a bug.\nnow we can say this bug was there so long it has become a \"feature\" that would be a BC break to fix. in this case we can offer it as a config option or we provide 2 services, ie. add a new service with the new behavior.\n. moved it to a new class/service\n. moved it to a new class/service\n. @ruudk please fix the CS violations\nStatus: Reviewed\n. @ruudk please fix the CS violations\nStatus: Reviewed\n. BTW did you intend to send this PR to master only?\n. BTW did you intend to send this PR to master only?\n. what is the logic here? that these classes should be extended only via inheritance?\n. +1\n. How so? Looks fine to me\n. looks good I guess ..\n. looks good to me\nonce this is merged we can also continue https://github.com/FriendsOfSymfony/FOSRestBundle/commit/93758654c0ac2ed29576c0dcbe7d42122d71bf37\nStatus: Reviewed\n. I see these as potential extension points then again since we now use constructor injection, there are less uses .. ie. likely anything that needs to be done could/should be done in the constructor anyway.\nso I am +0 on this change\n. We should then do the same with the ViewHandler\n. looks good to me\n. I guess we didn't manage that and I also think we should do an RC phase before we make the final releases. As for this PR .. fine for me .. though I do not have so much experience with managing deprecations\n. @Ma27 can you also look to add some information about this into the docs?\n. ok .. style ci issue is fixed\n. I am ok with adding these annotations .. if someone needs them I guess it proofs there is a use :)\n. we will soon release 2.0 stable, so it needs to happen really quickly ..\n. we will soon release 2.0 stable, so it needs to happen really quickly ..\n. did you try with 2.0?\n. did you try with 2.0?\n. @Ener-Getick or @xabbuh do you have time to look at this .. ?\n. please also rebase on master\n. @xabbuh can you have a look here as I am not a form expert either ..\n. lets move this back to 2.1 then ..\n. sounds great!\n. heh .. now scrutinizer is happy but styleci is unhappy ..\n. awesome! .. @Ma27 thanks for working through all the review feedback! :)\n. maybe also mention this in the changelog?\n. maybe also mention this in the changelog?\n. do we want to wait until 3.1 is out or merge this already, its unlikely that this will be reverted I guess.\n. yeah\nStatus: Reviewed\n. this seems to be a new thing in the symfony fixer rules of styleci .. I guess we should just apply that change and move on?\n. @Ma27 hmm shouldn't this then go into the 1.8 branch?\n. @Ma27 hmm shouldn't this then go into the 1.8 branch?\n. but you opened the PR again on master?\n. but you opened the PR again on master?\n. we have an issue with 2.3:\n1) FOS\\RestBundle\\Tests\\Routing\\Loader\\DirectoryRouteLoaderTest::testLoad\nBadMethodCallException: Unknown property \"condition\" on annotation \"FOS\\RestBundle\\Controller\\Annotations\\Get\".\n. we have an issue with 2.3:\n1) FOS\\RestBundle\\Tests\\Routing\\Loader\\DirectoryRouteLoaderTest::testLoad\nBadMethodCallException: Unknown property \"condition\" on annotation \"FOS\\RestBundle\\Controller\\Annotations\\Get\".\n. looks good to me\nStatus: Reviewed\n. looks good to me\nStatus: Reviewed\n. can you open a PR for master to move this feature there?\n. I would say .. lets merge and see what reports we get during the RC phase\n. but it would be good to have a test case for this ..\n. yup .. good for me ... @xabbuh ?\n. Configuration read from /home/travis/build/FriendsOfSymfony/FOSRestBundle/phpunit.xml.dist\n...............................................................  63 / 322 ( 19%)\n............................................................... 126 / 322 ( 39%)\n............................................................... 189 / 322 ( 58%)\n....SSSSSSSSSSSSS....................F......................... 252 / 322 ( 78%)\n............................................................... 315 / 322 ( 97%)\n.......\nTime: 1.71 minutes, Memory: 60.25Mb\nThere was 1 failure:\n1) FOS\\RestBundle\\Tests\\Routing\\Loader\\RestRouteLoaderTest::testCustomActionRoutesOrder\nFailed asserting that 1 is less than 0.\n. this feature does not make it possible to change the message .. it only makes it configurable if the message should be shown at all and what http status code should be used.\nto customize the actual message you need to override the exception controller\n. An uncaught exception should always go to the configured exception handler .. if you enable the FOSRestBundle exception handler, than its also to be expected that it handles this exception. But if you do not enable the FOSRestBundle exception controller .. it will use the one from Twig if that is enabled.\nSo the solution is enable the FOSRestBundle exception controller.\n. not sure ..\n. this PR now conflicts too .. but yeah seems like a good idea!\n. @Ener-Getick well we kind of are stuck in the never releasing phase right now .. that being said .. you are doing the bulk of the work in the past months .. so I would say its your call :)\n. +1\nStatus: Reviewed\n. this change should get an entry in the UPGRADING file\n. not sure why .. but this PR needs to be rebased before it can be merged\n. also PR needs a rebase\n. but I like the idea\n. I assume this is on 1.8 beta1?\n. I assume this is on 1.8 beta1?\n. do you want to put this into 2.0?\n. do you want to put this into 2.0?\n. the conflicts is I think nothing related to the required checks .. this is more that git cannot cleanly merge the source branch into the target branch\n. the conflicts is I think nothing related to the required checks .. this is more that git cannot cleanly merge the source branch into the target branch\n. yeah\n. yeah\n. needs a rebase\n. fone for me ..\n. Yeah this is an annoying issue but I do not understand the proposed solution.\n. Yeah this is an annoying issue but I do not understand the proposed solution.\n. could in theory also be back ported to 1.7/1.8\n. +1 .. that being said, since we did the stable release it is technically a BC break but we can call it a bug fix, since we didn't intend to carry over BC hacks from 1.x\n. could in theory also be back ported to 1.7/1.8\n. good catch .. +1\n. maybe just put it into 1.8?\n. I guess we already test the transformation of exceptions else where?\n. +1\n. there appears to be a conflict here .. (maybe due to the merge I just did)\n. what is going on with this PR?\n. fine for me .. guess there are some style ci issues to fix\n. are you sure the bundle is properly registered in your kernel .. or more importantly that you are running the CLI on the kernel you are assuming it runs against?\n. at any rate .. nothing in this Bundle could cause this issue, ie. it would be an issue in the FrameWorkBundle\n. aha .. interesting .. so if there is no configuration class .. then it gives this exception ..\n. @lferro9000 I think you just installed this Bundle .. the documentation assumes without saying it, that you are adding this Bundle to a symfony full stack application.\n@xabbuh maybe we should mention this as a pre-requisite\n. I am fine with not backporting the version annotation\n. fine for me.\n. can someone update the upgrading file and then close this ticket?\n. Sorry not enough time to dig into this. Previously we also ran into issues with the content types when exceptions happen before the controller is called. That being said, in 2.0 the ExceptionController was significantly refactored .. so which version are you using?\n. Sorry not enough time to dig into this. Previously we also ran into issues with the content types when exceptions happen before the controller is called. That being said, in 2.0 the ExceptionController was significantly refactored .. so which version are you using?\n. FYI I created a PR but I am not sure yet what the side effects will be https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1692. the cause for this does not need to be in FOSRestBundle. AccessDeniedListener is simply triggered because there is an uncaught AccessDeniedException.\n. the cause for this does not need to be in FOSRestBundle. AccessDeniedListener is simply triggered because there is an uncaught AccessDeniedException.\n. I think this is a good idea to have.\n@xabbuh what do you think?\n. to me its also a security question .. exception messages can leak internals. this is why in the exception controller we by default do not include the message in the response.\n. looks good to me from a quick inspection .. @Ener-Getick wdyt?\n. documentation is here https://github.com/FriendsOfSymfony/FOSRestBundle/tree/master/Resources/doc\n. I am not 100% sure but I think this restriction was for security reasons.\n. that should be fine indeed.\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/736\n. fine for me\n. I guess we should close this PR? @alceus do you think we should expand the docs on this topic?. due to the close timing of the bug reports .. is the there a relation to https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1637 ?. due to the close timing of the bug reports .. is the there a relation to https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1636 ? . can you submit a PR improving https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/UPGRADING-2.0.md accordingly?. it looks like we have a markup issue in the docs (see #1646) but this can be achived with the zone listener. search for \"zone\" on http://symfony.com/doc/current/bundles/FOSRestBundle/3-listener-support.html. markup has been fixed http://symfony.com/doc/current/bundles/FOSRestBundle/3-listener-support.html#zone-listener. see https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/UPGRADING-2.0.md\n```\nuse FOS\\RestBundle\\Context\\Context;\n$view = new View();\n$context = new Context();\n$view->setContext($context);\n$context = $view->getContext();\n```. can you add a test please?. did you also enable the exception controller ?\nfos_rest:\n    exception:\n        enabled:              true. I was also pondering if we should in fact disable the relevant core listener and extend it .. rather than relying on priorities. It increases the coupling .. but in a way the coupling exists already but is left implicit causing the issues to begin with.. @xabbuh decorate is fine for me too. haven't found time to work on a decorator :-/. rather than using priorities, we wanted to look into decorating the core listener (i guess the exception listener). i am just not finding the time to work on this. but this PR works for me in a project I am about to wrap up. but its hard to know for sure that it does not have unwanted side effects. . @darkbluesun do you have time to work on this?. Generally the idea would be to have get_users vs. get_user for such route names, but not all subjects will nicely pluralize.\nSo this sounds like a sensible solution to me.\nMaybe we should even deprecate the old behavior?. I guess we could remove the type hint?\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/e7d987b310ec77376a85eabdc84a8df98892dd09/Serializer/Normalizer/FormErrorHandler.php#L89\n@NadaBen can you test if that fixes things?. can we merge this? looks ok from a quick inspection.. damn .. its seems like the failure is caused by an issue we already have in master :(. great stuff .. I will try to have a look over the weekend and also test it with an app where we currently rely on the hack in #1692. great stuff .. I will try to have a look over the weekend and also test it with an app where we currently rely on the hack in #1692. looks good to me!\n@GuilhemN @xabbuh wdyt?. looks good to me!\n@GuilhemN @xabbuh wdyt?. This is awesome! Donations in the form of money are quite complex in open source. Generally donations in the form of time are therefore the best way, ie. working on features, bug reports, PR reviews, documentation.. sure. this can be a nice gesture. I am not sure I understand .. you can use \nhttps://symfony.com/doc/master/bundles/FOSRestBundle/7-manual-route-definition.html and the annotations listed there without having to disable the magic way .. so I am not sure what you are asking here.\ndo you want to deprecate it out of principle or because its actually making something impossible for you?. ok. so how about we add new class level annotations to configure this?. BTW as for deprecating .. I am open to this. I think anyone that really is focused on RAD is by now anyway using API Platform and the main use for this Bundle are people that are doing a lot of custom things that likely do not really benefit from the magic.. globally is not possible since it could have surprising issues with existing, especially 3rd party controllers.. no .. we specifically solved this issue with 2.x by allowing listener to be scoped by zones:\nhttps://symfony.com/doc/master/bundles/FOSRestBundle/3-listener-support.html#zone-listener. yes .. I can break things but I can fix them again by properly configuring zones .. what you are suggesting would lead to Bundles that cannot ever be combined in the same kernel.. yes .. I can break things but I can fix them again by properly configuring zones .. what you are suggesting would lead to Bundles that cannot ever be combined in the same kernel.. the opening curly bracket should be on the same line as the if statement\n. there should be a space between if and the opening bracket\n. this actually was one of the few lines that was correct. its just that instead of the serializer i should have injected the container.\n. Yeah, some tests would be good. I made the change, which probably breaks Silex. Will see how to deal with it. We might need to move the RequestListener to some separate repo and extend it in the Bundle with the Container stuff, so that Silex can extend it and use Pimple instead. Or we just need a small enough common interface for the DependencyInjection Container and the Pimple Container.\n. opening bracket should be on the previous line\n. @everzet: was there a reason (windows maybe?) for how the code was before?\n. hmm i guess its ok that this means that anyone who wants to do a custom TemplateReference needs to extend from the FrameworkBundle one.\n. can you upper case the first letter in all class names?\n. can you give this a bit more whitespace? :)\n. guess this comment was taken 1:1 from the NoopNormalizer by mistake?\n. can you put the operators at the beginning of the lines? its common style in Symfony2\n. why not just return the expression?\n. again this should be fixed to match the actual code.\n. WS issue\n. WS issues around here ..\n. one space missing :)\n. one space missing before $this->invalidMethods\n. the || should be on the following line\n. i prefer single quotes in cases like this, not for php parse performance, but for my mental parsing performance, double quotes make me look for a PHP vairable\n. why not just return $data instanceof FormView;?\napplies to the other normalizers too.\n. There are also a bunch of useful blog posts here: http://miller.limethinking.co.uk/\n. the license header should remain unchanged, however you can add an author tag to the class itself. in that case please also include Konstantin\n. same as in the other pull, please use the standard header and add yourself inside an author tag.\n. And like in the other pulls, please use the standard header.\n. do you need any more assistance? if you have some questions please do not hesitate to ask here .. or join in #symfony-dev on freenode IRC\n. please remove the trailing WS\n. you should remove the isset() check, as the parameter needs to be set always, as its referenced in the service definition\n. could you please take care of this?\n. s/hyptext/hypertext\n. move the { to the next line please\n. here as well\n. would be nicer to use @expectedException here \n. here you might want to use getMockBuilder() instead because then you have a method disableOriginalConstructor method\n. phpunit doesnt seem happy when use ContainerInterface:\n    PHP Fatal error:  Class Mock_ContainerInterface_280968c9 contains 10 abstract methods and must therefore be declared abstract or implement the remaining methods (Symfony\\Component\\DependencyInjection\\ContainerInterface::set, Symfony\\Component\\DependencyInjection\\ContainerInterface::has, Symfony\\Component\\DependencyInjection\\ContainerInterface::getParameter, ...) in /usr/local/php5-20110407-153336/lib/php/PHPUnit/Framework/MockObject/Generator.php(170) : eval()'d code on line 72\n. i have already removed the unnecessary $serializer = in a later commit\n. figured out the issue .. it works if you dont set a method array\n. done\n. done\n. done\n. why first convert the format to a mimetype to then convert it back to a format in case the content type is empty?\nalso ?: only triggers on NULL not on ''\n. hmm .. just changing to $format = $request->getFormat($request->headers->get('Content-Type', $request->getRequestFormat())); doesnt break the tests for me ...\n. how about:\n-            $format = $request->getFormat($request->headers->get('Content-Type'));\n+            $content_type = $request->headers->get('Content-Type');\n+\n+            $format = null === $content_type\n+                ? $request->getRequestFormat()\n+                : $request->getFormat($request->headers->get('Content-Type'));\n. ok .. will commit ..\n. fixed\n. don't quite understand what you mean here .. all we are doing here is falling back to the FrameworkExtraBundle listener ..\n. so in this setup we would still use the onKernelController() method from FrameworkExtra, but would then generate the response before FrameworkExtra tries to ..?\n. ok .. got a patch ready for this ..\n. yeah .. i admit this is hacky indeed. we could still add this \"somewhere\" not sure where though. one option would be to add another property with getters/setters in View\n. should be fixed now\n. to make the TemplateListener in FrameworkExtra able to do its magic.\n. this entire listener depends on SensioFrameworkExtraBundle already .. if you have a more elegant solution i am all ears, but short of duplicating the entire code (including ControllerListener) i don't know what else to do.\n. FrameworkExtra is responsible for setting all the $request->attributes->get('_template*') stuff ..\n. hmm seems like this is an alias .. but changing it to array_key_exists()\n. could you explain this change?\nthis is how the configuration of the formats used to be:\n- \"true\" aka supporting the given format while using the JMSSerializerBundle to generate the Response content\n- \"some service\" aka supporting the given format while using the JMSSerializerBundle to generate the Response content\n- \"templating\" aka supporting the given format and using the\naka\nformats:\n    xml: true\n    json: false\n    html: templating\n    rss: my_rss_decoder\n. could you create a PR to update the documentation?\n. hmm .. but there is definitely something wrong now. it seems like you are merging those two configs, but then how is the ViewHandler supposed to differentiate between templating and non templating formats?\n. ok i fixed the issue by reverting things back to having the format as the key. the purpose is to make it possible to disable a format that was previously enabled in an imported config file.\n. your english seems fine to me :)\nbut i already updated the docs .. so nothing needed all all is well :)\nthx\n. actually never mind .. will merge this and then fix some minor spelling\n. there seems to be a typo in this sentence\n. yeah .. not sure if it should just be return $this->container->get($id); or if the decoders should be injected into the provider .. I think I prefer the first over the later.\n. why did you change this?\n. ah i see. ok\n. can you undo that change?\n. hmm isn't it obvious that the above are just examples?\n. do we now still need this try/catch?\n. still one extra whitespace ..\n. indenting seems off here ..\n. seems like it will now always be either the default or whatever the user set .. there is no distinction anymore for form ..\n. yeah .. i think so too .. just that you then also need to update the docs accordingly :)\n. i think you can just call it QueryParamReader\n. yeah maybe ..\n. that $param !== $default further down is just a performance optimization to avoid the regexp if it isn't needed. so i think the code is ok as is.\n. looking at the code it seems like it would be inefficient for the case when the controller is not implemented as a service. but it looks like we are lacking support for a:b:c notation atm.\n. ok .. we should now cover all the cases\n. yeah it would .. but i don't think the overhead makes this legitimate.\n. hmm it could be a possibility. in that case we would move the other listener from a request listener to a controller listener as well. in that case of course the parameters would no longer be available in any listeners run before the controller, but i guess that would be ok.\n. we need a listener to set the request attribute, so that it can be injected via the action signature, which is imperative to controllers that do not inject the DIC .. \n. ok .. i have an implementation using a controller event .. will push that into a new branch\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/186\n. well it can't work with closures .. or am i missing something?\n. i was pondering calling it _queryFetcher, but the issue is that whatever we call it, will be the name that needs to be used in the action signature. I think the issue of conflicts is very low and the listener needs to be enabled explicitly.\n. i am not sure what you mean .. but i don't know how to make it work with anything but a class, but i have not played with annotations on functions.\n. yes .. it might. but it seems a bit fragile. plus we would still need a listener to set the request attribute, though that could become optional in that case again.\n. i think he is suggesting to use debug_backtrace to get rid of the need for the setController method. in this way the initParams could just look at the calling class to determine the method.\n. i think debug_backtrace is likely more expensive than the listener. plus it can lead to wtf issues when you move code from the controller to a service, as suddenly the debug backtrace would not find the original controllers annotations.\n. sure .. but then we are containing how method names are allowed to be called.\n. its only an enforced standard for people not defining their controllers as services. furthermore there is nothing that enforces not using this postfix for services that could be using the query fetcher.\n. i agree. note that we could still allow disabling the listener. in that case the user would need to call setController manually\nregards,\nLukas\nOn 08.02.2012, at 12:33, Christophe Coevoet reply@reply.github.com wrote:\n\n\n{\n-        $request = $event->getRequest();\n-        $request->attributes->set('queryFetcher', $this->container->get('fos_rest.request.query_fetcher'));\n-        $queryFetcher = $this->container->get('fos_rest.request.query_fetcher');\n  +\n-        $queryFetcher->setController($event->getController());\n-        $event->getRequest()->attributes->set('queryFetcher', $queryFetcher);\n\nUsing the call stack means that you are breaking OO code (the behavior of the method depends of the place calling it) and makes you code impossible to test (you would have to recreate the call stack). Thus, I think it is quite bad for performances. So I really don't like using it to initialize the fetcher\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/186/files#r427394\n. exactly\n\nregards,\nLukas\nOn 08.02.2012, at 13:16, Christophe Coevoet reply@reply.github.com wrote:\n\n\n{\n-        $request = $event->getRequest();\n-        $request->attributes->set('queryFetcher', $this->container->get('fos_rest.request.query_fetcher'));\n-        $queryFetcher = $this->container->get('fos_rest.request.query_fetcher');\n  +\n-        $queryFetcher->setController($event->getController());\n-        $event->getRequest()->attributes->set('queryFetcher', $queryFetcher);\n\nyeah, when you are in the controller, it is simply a matter of calling $queryFetcher->setController(array($this, __FUNCTION__)), right ?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/186/files#r427489\n. can you make it return parent::onKernelView($event); just to me sure?\n. i wanted to keep it simple, especially since there could eventually be multiple FOS libs. also there is no src dir atm ..\n. yeah .. i just fixed that in a new commit\n. i would rather not have this supported in the create() method\n. i would rather not have this supported in the __construct() method\n. why did you change the syntax here?\n. i use it here https://github.com/liip/LiipHelloBundle/blob/master/Resources/config/routing.yml#L40\n. ah sorry .. got confused with the lines .. will adjust my test scenario to see if the above is really in need of fixing.\n. ok .. i see the issue now.\n\nRestRouteLoader does not extend from Symfony\\Component\\Config\\Loader\\FileLoader so the locator isn't used to locate the file:\nhttps://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/FileLoader.php#L66\ni don't know the routing well enough to say how to best resolve the issue.\ni will open an new ticket to add support for this syntax, but for now indeed we should update the docs as per your PR\n. this syntax works however?\n. think it would be good to align this code with how versioning works. and please make sure to follow the CS\n. no clue .. ask @everzet  :)\n. whats the syntax for that?\n. this would mean i need to write a lot more code into the tests .. its fine like it is.\n. fixed.\n. fixed\n. fixed\n. fixed\n. fixed\n. doesn't your email address show this sufficiently?\n. does PSR-1/2 mandate public keywords for methods in interfaces?\n. the following if should just be \"and'ed\" into this one\n. fos_rest.request.param_converter.request_content_param_converter seems a bit redundant\nwhy not just fos_rest.request.param_converter\n. indenting is off here ..\n. the format should be determined via https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/EventListener/FormatListener.php#L101\naka imho this code should rely on the format being set properly. if necessary move the FormatListener up in priority.\n. missing public (see also later methods)\n. yes\n. well you can actually just do if (!empty($config['request_content_param_converter']['enabled'])) { alone\n. it would not :)\n```\n<?php\nvar_dump(!empty($config['request_content_param_converter']['enabled']));\n``\n. isset/empty are special like that :)\n. the integration point would be$request->getRequestFormat()` .. so if its not enabled .. there would just not be any \"smarter\" logic to determine the format.\n. yeah .. though i would make it 10 or so .. also i can never remember if it needs to be negative or positive to run first :)\n. sounds better indeed\n. yeah you are right. i got the listeners confused. this is more similar to the body decoding listener. that being said then we should imho require the correct content type or do nothing. \nnote we should maybe support some callback or other extension point to support custom media types. \n. hmm .. maybe you are right.\ni also see that you likely used the BodyListener as inspiration:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/EventListener/BodyListener.php#L55\nBut I am not sure about my choice to call back to $request->getRequestFormat() .. i doubt anyone really will send decode able content that cannot set a proper content type.\n. this will cause a warning on PHP 5.4 due to an array string conversion .. so we need something a bit more elaborate to deal with arrays for sure.\n. maybe this class should be abstract\n. needs some ws tweaking\n. why add that *?\n. but do we actually want to support that?   especially once NelmioApiDoc supports this stuff with the sandbox there are no more excuses to allow POST params via GET\n. well imho it has a cost for the end user in that it can break their caching strategy.\n. please remove the \"@Param\" part\n. is this necessary?\n. i rather wonder why not make the method static?\n. i guess we could dynamically determine the class name .. but that would be more or less the same. so i guess there is no way around this ..\n. space missing after the elseif\ninteresting .. i never knew about this optional param.\n. already merged :)\n. i think we default all other listeners to false\n. these tests are broken on 5.4\nhttp://travis-ci.org/#!/FriendsOfSymfony/FOSRestBundle/jobs/1834684\n. hmm ok i added numbers .. but it appears i also need to support underscores?\n. hmm .. well supporting dots too would essentially make the entire filter superfluous. but maybe the best approach for supporting YUI would be a dedicated optional pattern just for YUI.\n. just to clarify .. this filter is for security\n. i am not a frontend guy .. but yeah thinking about it .. the trouble is mostly on the frontend side having to trust the remote provider. i did a quick google and found a blog post describing similar intentions to what i have done here and people in the comments pointing out that it might not really be necessary:\nhttp://tav.espians.com/sanitising-jsonp-callback-identifiers-for-security.html\n. why? 'rest' is the default/current behavior\n. ah .. i see what you mean now .. yup that code messed up during refactoring. will have a look\n. i wonder if we should do an empty check on the current configured groups just like we do for the status code .. this way it would still be possible to override the value in the annotation ..\n. ah right .. merging.\n. should we replace headers here?\n. should we replace headers here?\n. should we replace headers here or just set the location?\n. or should we just remove getHeaders()?\n. can you split this over multiple lines for better readability?\n. yeah its a bit brute force .. but easy to use .. think for most users that will be fine.\n. fixed\n. i intentionally made it possible to configure the formats, because in many cases at least for html people will most likely prefer the current behavior.\n. we could also turn it into a blacklist of for what formats it should be disabled and default it to html .. not sure ..\n. can you remove this else?\n. s/expound/explain\n. i think \"There are at least 4 listeners.\" can be removed. maybe you can also link to the listener docs on symfony.com?\n. the paragraph should include the next one too .. otherwise it seems like this intro paragraph covers the entire functionality.\n. i think i would just call this serialize_null .. i think the config component allows adding some info text which we could use to explain this feature ..\n. i think we can just call this empty_content and default it to 204 .. similar to failed_validation\n. ah .. yes it still supports 2.0\n. yeah, i think it should be strict\n. @schmittjoh do you think there would be any sense in keeping this callback solution to be able to configure the serializer now that we have the SerializationContext?\n. ok good.\n. this is no longer needed once the PR is rebased to master\n. this service is created through an alias in the extension class. the alias defaults to using fos_rest.inflector.doctrine .. see the Configuration class\n. hmm indeed .. \"1.0.*\" would be better\n. can you fix this and rebase on current master? note this might cause conflicts with your change in the .travis.yml file, please use the one from master and not from your branch as I did some additional tweaks in master\n. missing space after the elseif\n. i said after .. not between :)\nie elseif ( .. rather than elseif(\n. please remove the whitespace here\n. can you add some spaces to improve readability?\n. @stof: ping\n. please use 4 spaces to intend\n. i guess this should use the serializer service configured in FOSRestBundle:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/DependencyInjection/Configuration.php#L68\n. wouldn't this also in theory work with the core serializer?\n. it might make sense to explore duck typing for this:\nhttps://github.com/symfony/Serializer/blob/master/Tests/SerializerTest.php#L123\n. yes .. its a pitty .. the difference between the two interfaces are almost non existent:\nthe only difference is that the context is an array in the core serializer and a class in the jms one.\n. i am still unsure if we should keep this check. if we have it here, i guess we should also have it in the ViewHandler:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/View/ViewHandler.php#L192\n. given the revert, should we add a note here that for this route one will likely want to use the @NoRoute annotation and instead manually define the route?\n. it might make sense to look at the OptionResolver component here ..\n. i guess we could also inject this dependency .. but seems a bit overzealous?\n. yeah as in we should inject .. or yeah as in overzealous? :)\n. Sure .. but it doesn't work. See https://github.com/FriendsOfSymfony/FOSRestBundle/pull/266#issuecomment-7624904\n. Well the point of my tweet was that someone needs to figure this out. The comments in the ticket I made show that there was an issue. So would be great if you could try and determine a viable mime type and then we can wrap this PR up :)\n. guess this should be removed :)\n. missing space\n. good question :)\n. { should be on the next line\n. { needs to be on the next line\n. why not just getData? or getDataFromView?\n. doesn't this PR change the general error structure?\n. i think its good to change the default structure, so yes please add a note for this too.\n. @stof is there a way to leverage the configuration class for this somehow?\n. do we need to be more liberal with what we allow in an extension?\n/cc @tobion\n. right of course. will fix tomorrow\n. > In Util/FormatNegotiator.php:\n\n\n\n$acceptHeader = $request->headers->get('Accept');\nif ($options['prefer_extension']) {\n// ensure we only need to compute $extensionHeader once\nif (!isset($extensionHeader)) {\nif (preg_match('/.*.([a-z]+)$/', $request->getPathInfo(), $matches)) {\n\n\nseems sensible to me. but is it not possible to use the _format request attribute instead?\n\nI was previously using that but that value is not necessarily the extension as it could also be set via a route default\n. > yeah, i don't see why we need this extension thing. the matching is the task of the routing. what if someone doesnt want to format to be in the extension but something like /json/article and /xml/article.\nwell that would go beyond what we are doing here. in this case I would recommend to disable this listener and just plain use the routing system to set the route. this listener is about determining the format based on media type + extension which are the \"standard\" ways to specify the expected output formats.\n. this means the listener will be triggered before the core RouteListener. could this create issues with routes that set a format?\n. yeah .. @stof / @tobion .. do you have a comments here? i guess if someone has a _format in their route, it would overwrite whatever our listener would set .. right?\n. ok good .. i guess the only issue then would be people using $_format in their action method signature and expecting it to match the request format, but i guess that is something we need to accept.\n. agreed\n. please revert\n. i guess we do not follow core on that point then .. seems like a very bad idea to use instanceof\n. ok changed in master to all lowercase\n. could you rename the variable here too to match the rest of the code?\n. fixed\n. i think it would be better to use 1.0.* here\n. missing space. if we do merge this then I would prefer it if the if() condition would be inverted\n. then again .. if we make this optional ..\n. the exception you throw does not match the exception you add in the use statement\n. can you use an elseif .. also maybe store the content into a local variable and I guess actually if the content is empty we could skip the entire decoding logic.\n. well there is a no \"standard\" for extracting version information from a media type. at the same time there can of course be multiple media types in the Accept header and its the job of the negotiation to figure out which one to use. however in the end we only know the format and not the actual media type (though this might be fixable).\nthat being said, in 95% of the cases when it comes to using versioned media types, people are passing in a single media type anyway.\n/cc @willdurand @adrienbrault\n. @lyrixx I have credit you as the author of the extension. let me know if you want the information to be different \n. while i got you .. do you know an example of a unit test for a form extension that I can use as an example for adding a test case for this class?\n. hmm I need an example of a test for a FormTypeExtensionInterface and not for a FormExtensionInterface :-/\nI simply do not know enough about how to wire up a form instance ..\n/cc @webmozart\n. yes .. at the very least the regular expression should be configurable\n. FOSRest has been removed .. FOSRestBundle is already using the Negotiation lib but we are just getting the optimal format, not the optimal media type: https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Util/FormatNegotiator.php#L81\n. @willdurand yeah i guess we could refactor to use getBest() instead of getBestFormat() but then it would be nice if FormatNegotiator could be refactored to provide a method to convert that accept header into a format.\n. @willdurand ok .. i was unsure because there is a fair bit of additional logic in the getBestFormat() method. @amenophis can you update the FormatListener with the suggestions by @willdurand so that you can store the matched media type into a request attribute?\n. yes .. we could support both but that would not really solve the issue i guess ..\n. this is a bit iffy .. this method does not exist in the FormatNegotiatorInterface.\nso we either:\n1) set the media type in the FormatNegotiator and leave this class unchanged, which is sort of a surprising side effect from calling getBestFormat()\n2) add a new interface that if used in the injected format negotiator triggers the new logic, which is a bit annoying since we would have to maintain duplicate logic and two interfaces\n. i took this from the Negotiation lib .. but yeah maybe not the ideal API to copy.\n. ah yes that would be good. misread the last release and thought you already did.\n. this should now be $request->attributes->get('media_type');\nhowever it requires FOSRestBundle master with the format listener enabled.\n. this is now solved (see the comment on line https://github.com/FriendsOfSymfony/FOSRestBundle/pull/612#discussion-diff-7875642R48). however the regular expression should still be configurable. or maybe even the detection should be injectable, see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/561/files#diff-8\n. { needs to be on a newline\n. { needs to be on a newline\n. this is a really ugly interface name .. but cannot think of any thing better\n. should be removed\n. this should be reverted\n. one thing I am wondering here is how to make it possible that one could annotate multiple controllers that each cover a different version of the API for the same path.\n. this goes into the direction of what I wanted to achieve in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/561/files#diff-3b898a9b28925d8dc60210cb06ed7719R14\n. are there CS issues?\n. is the lib not configurable?\n. hmm ok I see how its handled. i added that setting mostly because I wasn't sure if it would be flexible enough otherwise but I guess its really not needed anymore. the question is however if we can just drop the setting if we stay in 1.x.\nmaybe we need to keep the setting and throw an exception in the extension if its set to a different value than the default. this way we would at least be a little bit more friendly ..\n. well the idea would be to leave the config option and then check in the extension if the user changed the default value and then throw an exception that explains specifically that this option was removed in 1.2.0\n. why do you assign this var before the if statement\n. can you remove the else around the return?\n. can remove this empty line?\n. could you remove this empty line?\n. maybe we should refactor this method and split it up to make things more readable\n. hmm that might be an idea to simplify the code indeed.\n. else needs to be on the same line as the closing }\n. do not omit brackets and add a space after if\n. i dont quite understand why this is necessary.\n. hmm .. i still do not understand likely because I just do not know all the details.\nso someone sends a POST with _method=PUT. so on line 61 we trigger the method override in the request class. why do we need to set it back to POST?\n. sorry .. but I do not get it .. why do you feel the need to mess with this at all? the point of the listener is to handle the request data. it simply needs to know the request method. if we reset the method, then indeed it will just trigger the fallback again. why would it come out to anything different than the first time?\naaahhhh .. now I get it .. the _method value you want is inside the request data that is being decoded. so you need to reset, to have the fallback logic reapplied that would then of course have a different resulting method.\n. intention is off\n. intention is off\n. we have:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/config/schema/routing/rest_routing-1.0.xsd\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/config/schema/routing-1.0.xsd\nie.\n../../Resources/config/schema/routing/rest_routing-1.0.xsd\n../../Resources/config/schema/routing-1.0.xsd\n. yes\n. ok so we were asserting that they are the same when all we want is for them to have the same state but not be the same instance so that we in the end actually get 2 separate routes in the collection\n. noticed in a few places that are you are removing the description text for parameters .. why?\n. again why remove stuff like this?\n. hmm well not sure if the BC break is worth it ..\nbut we could add a note to do this if we ever do a new major version\n. I think the reason was because it is useful also to people who extend the class.\n. can you correct this manually then so that we can merge the PR?\n. pondering if it would be better to use a file_exist check here .. then again with your approach it might produce a clearer error message if there is a typo in the path.\nthat being said imho we should also support the @ notation here ..\n. I think it would be good to refactor this method a bit .. it seems strange that it has different responsibilities for directories and single resources\n. private methods should come after protected which in turn should come after public methods\n. ping\n. I would use double tickets around symfony/routing, ie symfony/routing\notherwise its good for me.\n. doh! .. indeed it should\n. thx\n. i improved it now\n. maybe we should move the initParams() call should be here and then use the getter inside the class as well?\n. I guess here you are talking about listeners that impact the response .. not listeners that are triggered on kernel.response? I think this needs to be made more clear.\n. its common practice in Symfony2 to use null ===\n. the service to replace is called fos_rest.inflector.doctrine. Furthermore I would remove the of \"fos_rest.inflector\" bit in the above sentence.\n. I would remove the bit about defining the service in this sentence as this is done further down with a different service name.\n. this needs to be mentioned somewhere else then maybe?\n. if we do add thigs feature, then this should be handled via the DI extension\n. can we move the assignment to before the if?\n. already fixed in another PR\n. any specific reason why you dropped this method? I am not sure why we had a setter for this, but it doesn't seem worthwhile to break BC over this.\n. hmm what would be other content types? wondering if it would not be easier for the user if this is just a flag\n. I think that is better\n. Indeed .. these two seem to be the only ones:\nhttps://twitter.com/lsmith/status/542616104972333057\nso is there a use case where I only want it for one mime type but not for the other?\nimho it would be better to just have a flag for this ..\n. missing space after if\n. { needs to be on the next line\n. missing spaces around =\n. remove this extra new line\n. I guess if $normalizeRequest is true already, we can skip this if?\n. we also need to check if the HTTP method is POST\n. ah well it should already be skipped I guess due to the above line\n. hmm then again .. in theory there can be an empty POST in which case we still execute the logic for no reason\n. actually maybe we should replace the check for something like:\nif ((!in_array($contentType, array('multipart/form-data', 'application/x-www-form-urlencoded'), true) || $method != 'POST')\n  && in_array($method, array('POST', 'PUT', 'PATCH', 'DELETE'))\n) {\n. { needs to be on the next line\n. please remove the extra new line\n. please remove\n. why did you need to add this code if this PR is just about syncing the xml schema?\n. isnt there a new syntax that automatically picks a good version?\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/commit/2fb6d7018ba30933010a80f29c3673b2bb0ef6e3\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/commit/2fb6d7018ba30933010a80f29c3673b2bb0ef6e3\n. I prefer keeping the initialization here\n. note we still support php 5.3 in this bundle\n. actually I am wondering if we can do anything smarter here .. obviously we cannot refactor getFormat() too much without a BC break but obviously now a bunch of logic in the method is now sort of superfluous by default.\n. curly bracket needs to be on the previous line\n. hmm .. why did we have this check here before? just to prevent a method call?\n. @giosh94mhz you can also propose an alternative PR based on this PR .. might make the discussion easier.\n. i guess either we use the ClassMetadata to figure out how to get he id or we need to maybe make this configurable or a clear extension point\n. good catch! @backender can you have a look and submit a new PR?\n. ah sorry. overlooked the comment. yeah you are right\n. please remove this new line\n. the fact that your PR removes this line makes it seem to me like maybe some of the changes you did are just the result of resolving some conflicts during a rebase?\n. needs to be } else {\n. needs to be } else {\n. needs to be if (\n. why did you move this is_scalar() call?\n. you can use $constraint here instead of $config->requirements\n. moving this out of the if introduced a new code path, can you check that this doesn't have any adverse side effects?\n. please follow the Symfony2 CS\n. why not just move all of this code into the else clause? it should not hurt to pass an extra parameter\n. I tried using canBeEnabled() here, but it didn't work as expected as it ended by defaulting enabled to false, so I just added the code for canBeEnabled() for this, removed treatNullLike() and switched the default of enabled to true.\n. puh .. this is getting a bit nasty. we then also need such a method on the View along with a setSymfonySerializationContext() method. very ugly but I see no way to not have to duplicate those methods without breaking BC in a big way.\n. yes .. that being said, maybe some of the tests actually cover too much of how JMS Serializer behaves instead of just ensuring that we pass the right information to the serializer. So it might not be necessary to duplicate all the tests. furthermore, for some tests it will just boil down to a different service injected into the ViewHandler, so we can have a base class for both serialziers.\n. missing space after if\n. I am trying to be forwards compatible and consistent across all listeners\n. missing space .. ie. if (\n. you should reference http://symfony.com/doc/master/bundles/FOSRestBundle/format_listener.html#media-type-version-extraction as the format is actually configurable\n. doh .. https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1056\n. should be     sensio/framework-extra-bundle:2.*\n. was just pondering .. this test isn't really so useful .. it basically just duplicates the logic. what would be ideal is to have a functional test that just tests if the parameter converters actually work .. but for this we would have to add an actual Kernel and do a proper functional test .. \n. I guess this change is problematic, since we override the method, without checking if something was set before .. ?\n. 14:53 <Zerrvox> lsmith: FosRestBundle 1.7 has a BC break https://github.com/FriendsOfSymfony/FOSRestBundle/blob/bd233aca63b0965171d60fe4c539afa10d45633e/Controller/Annotations/Route.php\n14:53 <lsmith> Zerrvox: what breaks?\n14:55 <Zerrvox> If you have a route annotation in a FOSRest Controller the method of the generated route ends up being null\n14:55 <Zerrvox> which cannot be loaded\n. fixed with https://github.com/FriendsOfSymfony/FOSRestBundle/releases/tag/1.7.1\n. I think we might want to make a simpler ContextInterface maybe leaving out things like version, maxdepth and groups. and that for these 3 things we create additional interfaces that extend from ContextInterface. this way we are more flexible for a possible 3rd serializer that might not provide these features. also afaik the core serializer does not yet support version or max depth (yet).\n. yeah ...\n. hmm actually it might be clearer to use new View here as $this->view isnt available by default\n. not entirely happy with this method name .. maybe configure() ?\n. also not sure about $direction .. but don't have a good idea there either\n. another idea for the method name convert() .. for $direction maybe $type .. but not so great ..\n. to get rid of $direction we could also split up this method.\nright now the adapters are stateless .. but maybe it would be better to require the serializer to be set on the adapter. this way we can use typehints to ensure the right serializer is passed in.\n. so maybe something like:\n```\nnamespace FOS\\RestBundle\\Context\\Adapter;\nuse FOS\\RestBundle\\Context\\ContextInterface;\ninterface ContextAdapterInterface\n{\n      public function convertSerializationContext(ContextInterface $context);\n      public function convertDeserializationContext(ContextInterface $context);\n      public function supportsSerialization(ContextInterface $context);\n      public function supportsDeserialization(ContextInterface $context);\n}\n```\nwe could even take it a step further:\n```\nnamespace FOS\\RestBundle\\Context\\Adapter;\nuse FOS\\RestBundle\\Context\\ContextInterface;\ninterface SerializationContextAdapterInterface\n{\n      public function convertSerializationContext(ContextInterface $context);\n      public function supportsSerialization(ContextInterface $context);\n}\ninterface DeserializationContextAdapterInterface\n{\n      public function convertDeserializationContext(ContextInterface $context);\n      public function supportsDeserialization(ContextInterface $context);\n}\n```\n\n. why not inject this service?\n. we can set the serializer inside the ViewHandler I guess before doing the conversion.\n. what do you mean? the serializer is injected ..\n. looks fine to me\n. is this really equivalent? enableMaxDepthChecks() just enables checking for max depth, where the max depth is then actually \"dynamic\", ie. defined on the relevant mapping data in the relevant entities\n. { needs to be on the next line\n. missing space ... needs to be if (\n. missing space ... needs to be if (\n. missing space ... needs to be foreach (\n. ok thx!\n. missing space .. foreach (\n. missing space .. foreach (\n. just wondering .. did you take this logic from another Bundle?\n. @dunglas ping\n. should we maybe split the adapters into serialization and deserialization adapters?\n. I guess this can be removed in 2.0 but we can leave that to another PR .. but then we should revert this change.\n. yeah .. we will keep sensio 2.x support for now which is why I was saying please remove the above change.\n. I think we should split them inside the constructor foreach loop .. so that at run time we do not have to do the instanceof check anymore\n. we currently have a setting for default groups https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/DependencyInjection/Configuration.php#L111\n. I doubt that anyone has extended this class ..\n. anyway .. I will revert the order change\n. missing space\n. also I would change this to return early ..\n```\nif (!$this->pluralize) {\n    return $resource;\n}\nreturn $this->inflector->pluralize((string)$resource);\n``\n. just removed outdated code\n. formatting is off here\n. formatting is off here\n. formatting is off here\n. formatting is off here\n. not sure .. probably not worth it ..\n. or what do you think @stof ?\n. and what happens now in this case .. we return null?\n. I guess this is an unrelated addition to the test suite .. right?\n. I am wondering if we do not need to refactor this a bit to bring the methods back down to a manageable level of complexity .. quite some deep if constructs we have here ..\n. since this is going into master the deprecation notices should go into the 1.7 branch\n. since this is going into master the deprecation notices should go into the 1.7 branch\n. since this is going into master the deprecation notices should go into the 1.7 branch\n. since this is going into master the deprecation notices should go into the 1.7 branch\n. yeah .. it tries to parse a version string from themedia_type` request attibute\n. space missing\n. I think the above code is a bit hard to read .. maybe this is better ..\nif (null !== $accept && 0.0 < $accept->getQuality()) {\n    $format = $request->getFormat($accept->getType();\n    if (null !== $format) {\n        $request->attributes->set('media_type', $accept->getValue());\n    }\n}\n. this code was necessary to explicitly register supported mime types .. is this really no longer necessary?\n. please add an empty line between methods\n. { needs to be on the next line\n. space missing\n. space missing\n. space missing and please use single quotes where possible\n. space missing\n. space missing\n. please add one empty line here\n. I guess this was the wrong annotation to begin with\n. hmm not sure that I like this without intention\n. comments in this file need to be adjusted\n. comments in this file need to be adjusted\n. comments in this file need to be adjusted\n. comments in this file need to be adjusted\n. comments in this file need to be adjusted\n. comments in this file need to be adjusted\n. comments in this file need to be adjusted\n. comments in this file need to be adjusted\n. comments in this file need to be adjusted\n. comments in this file need to be adjusted\n. comments in this file need to be adjusted\n. well then it will keep complaining in every PR. overall I see more benefit in style ci than in having proper indention for these two closures\n. yeah .. that was propably the case\n. did we forget to remove this class earlier?\n. yeah can you fix this minor detail to improve readability?\n. this method no longer exists in 2.0\n. @willdurand I am not sure how we can revive this anyway .. the array with formats to mime types mapping is protected in the Request class .. so there is no way to nicely \"explode\" a format to an array of enabled mime types, so I guess users will just need to specify mime types from now on? or we just map a format to the \"primary\" mime type\n. @Ener-Getick it seems like we have no tests for this code path :(\n. does this mean that priorities now need to be mime types and we no longer support formats?\n. ok .. we should then create a follow up ticket for this. its annoying that the Request class does not give access to the mappings in Request::formats.\n/cc @Tobion \n. I guess this applies to tons of other parameters as well ..\n. sure .. I am open to doing this.\n. +1\n. +1\n. +1\n. since we are inside the exception handler, we would otherwise risk a loop.\n. basically this duplicates the configuration logic from WebProfilerBundle to be able to determine in the FOSRestBundle if the toolbar will be enabled or not.\n. hmm I actually wonder how this even worked before .. the order of rules matters .. so imho just appending the rule to the end is problematic as if someone as a ^/ rule defined, then this automatic rule will never be applied. so I guess we need to add this rule to the beginning of the array.\n. +1\n. i think it would also be good to define the order of the resolvers similar to here:\nhttps://github.com/lunetics/LocaleBundle/blob/master/Resources/doc/index.markdown#guessers\n. this is a problem ..\nthe request listener is triggered at 32 and I understand why you now moved it to 31 because you need this for the other resolvers. however if we do this at 31, then it means that mime type based versioning will not be able to set the version as a request attribute before the routing, meaning that we loose the ability to define route conditions on the version.\nas such we will need to trigger the listener twice .. once before and once after the request (ie. 32).\nthis however also raises the question if its even feasible to allow the configuration of multiple resolvers .. or maybe it only makes sense to allow the configuration of one resolver ... ?\n. this is a good example of a service where I think for performance reasons it would make sense to keep the container injection and its essentially a factory .. one of the few cases where I would say service locator pattern is legitimate.\n. I would make this a lazy service, since it might never be needed for an API only setup\n. I would make this a lazy service, since it might never be needed for an API only setup\n. I would make this a lazy service, since it might never be needed for an HTML request\n. not sure if this should also be a lazy service .. I guess its fairly cheap ..\n. not really sure how PHPUnit deals with traits at this point .. maybe better just remove this expects() entirely now?\n. is there an elegant way to check for the trait? I guess one could check for the method .. then again what was the value of this assertion to begin with?\n. needs to be reverted back once SensioFrameworkExtraBundle gets a new release\n. needs to be reverted back once JMSSerializerBundle gets a new release after https://github.com/schmittjoh/JMSSerializerBundle/pull/492 was merged\n. can be moved back to require-dev once https://github.com/Soullivaneuh/php-cs-fixer-styleci-bridge/pull/49 is merged\n. ah .. right\n. should be removed once https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1188 is merged\n. this is just a cosmetic change as we now have 2 different places where we use a RequestMatcher\n. think about versioning your API\nif you introduce changes to your current API, your users might not upgrade their applications right away, so versioning is important to prevent existing applications to break when such changes are made.\n. i think this is now a bit confusing .. I guess I would still mention URI versioning in the list above.\n. @WouterJ how do we usually format such lists?\n. If you want to version by Accept header, you will need to do the following\"\n. You must configure the possible mime types for all supported versions\n(makes me wonder if we could not support version ranges like composer supports to automatically expand the possible mime types ..)\n. I think we can remove this and instead suggest to use the profiler\n. I guess here it might be nice syntax sugar to offer a custom expression that would simplify this code\n. I think we should also think about how one would deal with having to different controllers for the same thing, ie. I have one ProductController for v1 and one for v2. Should we also support some convention there? like MyBundle/Controller/v1/FooController and MyBundle/Controller/v2/FooController will automatically set the version contraints in the route and name the routes accordingly ..\n. I do not want to block the release because of this.\n. yeah .. I also think it will add confusion .. we have a solution in the docs to make it easier to define multiple mime types quickly .. so yeah lets not bother\n. I guess uri needs to be removed?\n. the profiler shows the request attributes its quite simple to use .. I would just remove this entire hint\n. I guess this could also be done in a followup PR\n. good point .. this means we need to dynamically determine in the extension if to inject the service .. or alternatively we can use the syntax to optionally inject the twig service only if its available\n. created https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1202 as a follow up\n. BTW same applies to the ViewHandler\n. imho its also worth consider using setter injection for those \"optional\" or non strongly typed dependencies and then using an internal getter that handles the case of a missing dependency\n. BTW for the serializer we could also consider creating an adapter so that for the ViewHandler we can assume a specific interface\n. here is an attempt to solve the issue:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/commit/93758654c0ac2ed29576c0dcbe7d42122d71bf37\nmaybe we should do something similar for the ViewHandler?\n. well the trait falls back to using the magic get() method .. but it can work without it .. \nI am not quite sure how to best approach this .. maybe provide two traits .. ?\n. because i wanted this trait also to be useful when not using the ContainerAwareTrait. will send a PR in a few mins that splits that use case into two separate traits\n. its useful if you define controllers as services\n. i fixed it by using $this->container->get()\n. there is a typo here that I need to fix\n. we should actually have at least one test case using this trait\n. Symfony\\Component\\DependencyInjection\\ContainerAware and FOS\\RestBundle\\Controller\\ContainerAwareControllerTrait define the same property ($container) in the composition of FOS\\RestBundle\\Tests\\Fixtures\\Controller\\AnnotatedNonPluralizedArticleController. This might be incompatible, to improve maintainability consider using accessor methods in traits instead. Class was composed\n. I guess this is one of the draw backs of this .. ie. we now hardcode exactly which Serializer implementations we support\n. refactor this to be a base class, ie. keep the existing name FOSRestController\n. but don't we then miss running php 7.0 with symfony 3.0 ?\n. imho its cleaner to do this ..\n. agreed\n. this here just prevents overriding a manually set template\n. if we do not do this change it means that in the case of a redirect, we still set template variables, which in turn then means that instead of a redirect we trigger this code (introduced in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/451):\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/View/ViewHandler.php#L352\nthis issue is illustrated in the LiipHelloBundle:\nhttps://github.com/liip/LiipHelloBundle/blob/master/Controller/ArticleController.php#L149\n. or should we just ignore anything with a leading underscore? or should we just ignore a single underscore?\n. sure .. actually I am wondering if there is a more efficient way than to use a regexp here ..\n. good call .. updated the code accordingly\n. yeah .. but I doubt that this will be more efficient or more readable .. \n. is this correct?\n. this fixes an issue since in newer versions one actually needs to pass 0 to get absolute urls\n. this is the only change that isn't clearly a bug fix.\n. I got some errors .. but I think in the end it was probably something else .. so I guess this could be reverted\n. lets not bother with this in here .. its big enough of a PR\n. I would add a @TODO item for such stuff ... even if we are going to do this change right afterwards\n. actually I think the \"trick\" with making the service private is likely causing a problem:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/1288#issuecomment-167811904\n. personally I prefer using setting injection for stylistic reasons when extending a class .. especially if there are so many constructor parameters already. I realize that this has the unelegant side effect of kind of binding things to a dependency injection container in order to get a properly working instance of the service.\nBut I will not fight over this ...\n. well one can also make the constructor private and provide a factory method instead .. anyway .. its not a big issue for me and you all seem to think its fine .. so its good for me as well :)\n. @stof that is true ..\n. @xabbuh can you have a look here?\n. there should probably be a reference here\n. needs to be array() as we still support PHP 5.3\n. https://github.com/FriendsOfSymfony/FOSRestBundle/commit/6fb5d3bfe995d29f08fd36e7d7f351e52e23f7df\n. I guess this should be removed. ",
    "igorw": "Which is now: https://github.com/FriendsOfSymfony/RestBundle/blob/master/Request/RequestListener.php\n. Should be all good now.\n. @stof agreed\n. done\n. ",
    "johnwards": "@lsmith77 I'm happy to look at adding in accept header support today. To save me some bumbling around time, have you looked at the theory of implementing this? If so any pointers/files to look at etc would be useful. I'm about to look at form encoding too...\n. Sorry about the formatting stuff! I was getting around to it, honest!\n. Okay I've had a quick look at validators tonight. It's a private var in Symfony\\Component\\Form\\Form.\nI'm not even sure if any useful data is in the validator object yets. But getting the objects out is going to be a pain, I guess some Reflection magic might do it but this feels very hacky.\nI wonder if @bschussek has an opinion on getting Validator objects from a Form?\nMaybe we could reparse the object for its validators but this feels wrong!\n. Okay I've had a chat with @bschussek about validation and he is of the opinion that it is too hard do do correctly and error free with the way the Form and Validation component is setup at the moment. Trying to map the errors and constrains to the correct fields is difficult.\nI am going to skip form constrains stuff for now. I'm going to start using the output of this normalizers this week so we'll see if they are of any use in real world usage\n. We can get \"required\" but the constrains are all server side. FormView knows nothing about the constrains or validation.\nI think I could lose days walking through the Validator code trying to wrangle this into some sort of useful data.\nCurrently parent \"errors\", the ones that bubble from hidden fields (csrf key invalidation etc), are stored in a numeric array and don't have an association to the original field. I had a quick look at changing this and I abandoned ship quickly as it was a nightmare to debug.\nThis is what @bschussek is going look at to fix I believe.\n. @lsmith77 to get this merged is all that I need to do is fix the coding style comments etc or have you other concerns?\n. Yeah the normalisers were all copied from the original noop one I wrote as it was a sane base.\nI'll tidy this pull up in the morning and look at tests for it. The original pull message did warn that this was the case.\nNow that it seems useful I'll tart it up :)\n. Because it gives @lsmith77 something to do? Sorry coding standards isn't one of my strong points, I still want to add sf to the start of my class names ;)\n. @lsmith77 I bet his code formatting is better than mine. ;)\n. I'm happy to do this refactoring in this pull? Just give me the word..\n. Will await his return from throwing Frisbees at Italians then.\n. Hows that? Wasn't sure if there was a naming convention for Listeners namespace.\n. Yeah I started with that but I thought the other two listeners didn't seem event based?\n. If the action redirects before you set parameters I am getting this warning. So I guess its the value coming from _template_default_vars\n. i'll have to help I guess if this is going to be a BC break as my app will break...\nAt the moment I won't be able to commit to anything until September, got a major deadline and a holiday. Holiday is getting in the way of the deadline...sorry not much use..\n. i'll have to help I guess if this is going to be a BC break as my app will break...\nAt the moment I won't be able to commit to anything until September, got a major deadline and a holiday. Holiday is getting in the way of the deadline...sorry not much use..\n. ",
    "odino": "we should insert the versioning in the media type, as described in the linked article :)\n. 406 denies the generation of a response according to the Accept-Headers sent by the client, no good.\n422 is WebDav, unfortunately no good.\n400 is okay, as Allamaraju states ( http://www.subbu.org/ ).\n403 seems better, but is has a pretty-different semantics nowadays.\n. This discussion is more about HTTP and its status codes: for example, REST doesn't speaks about PUT, POST, DELETE and GET, but about CREATE, READ, UPDATE & DELETE, because the former are tightly bound to the HTTP protocol, while the latter more generic.\nThat said, we are tightly coupled with this protocol on the web, so we should use HTTP's status codes to generate valid responses.\n( Not directly related to this topic, for whoever that, additionally, wants to know why WebDav has conflicts with REST, go further here: http://www.mail-archive.com/microformats-rest@microformats.org/msg00189.html )\n. I personally don't like it, but could we discuss the generation of the documentation in the WADL format?\nhttp://www.w3.org/Submission/wadl/\n. Are we talking about documentation for the clients?\nBare in mind, that is what REST tries to avoid :)\n. agree, the only thing we should avoid is to heavily rely on generated documentation, otherwise we would replicate WSDL\nthumbs down for tree-killers :)\n. Yes vladar, URI templates are obviously evil. But if we need to develop a REST bundle we should follow those principles.\nA URI template would fit well for an ApiBundle\n. Have to add that the problem is not there on 2.3.4, once I update to 2.3.5 everything explodes :)\n. git diff v2.3.5 v2.3.4 shows it pretty clearly:\n```\ndiff --git a/src/Symfony/Bundle/TwigBundle/Controller/ExceptionController.php b/src/Symfony/Bundle/TwigBundle/Controller/ExceptionController.php\nindex 3abc2a9..5a52791 100644\n--- a/src/Symfony/Bundle/TwigBundle/Controller/ExceptionController.php\n+++ b/src/Symfony/Bundle/TwigBundle/Controller/ExceptionController.php\n@@ -12,7 +12,7 @@\n namespace Symfony\\Bundle\\TwigBundle\\Controller;\nuse Symfony\\Bundle\\FrameworkBundle\\Templating\\TemplateReference;\n-use Symfony\\Component\\Debug\\Exception\\FlattenException;\n+use Symfony\\Component\\HttpKernel\\Exception\\FlattenException;\n``\n. @liuggio points to [this](https://github.com/symfony/symfony/issues/9145)\n. Not sure what they will be doing in the **symfony/symfony** repo, I think it's better to wait for them to take a decision\n. @lsmith77 agree that dropping type hinting is not ideal but probably the most viable solution here, will come up with something in a bit\n. What about all the reference toFlattenExceptionin the _phpdoc_? Change tomixed?\n. let me know guys\n. @lsmith77 done\n. from0.13.1or what?\n. done, will you also tag?\n. :+1: \n. hey guys no decision on this?\n. hey guys no decision on this?\n. duplicated of https://github.com/FriendsOfSymfony/FOSRestBundle/pull/565\n. duplicated of https://github.com/FriendsOfSymfony/FOSRestBundle/pull/565\n. To integrate:\n- this lets you write routes likepostCustomerAction, and it seems thatpostCustomersActionwill still work ( @lsmith77 didnt test it throughly though )\n- route will still bePOST /customers`\nThis way we can provide consistency to the routing and to the action naming, even though Im not sure if there is any unhandled special case @AyhamAlzoubi is forgetting about...\n. ",
    "merk": "Another issue I hadnt considered yet: you cant have a namespace beginning with a numeral. You can also not have namespaces with . in them.\nUsing the directory glob to discover versioning, then, wont work. I think using the metadata library is going to be the best solution, unless we make users define each version as a separate route 'instance'.\n. Sounds good. Should we automatically guess if a route should be versioned based on the presence of multiple controllers (or the presence of a version metadata for a single controller)?\n- Many resources = must be versioned, all must be defined as having a version\n- One resource = only versioned if a version is supplied?\nIll be trying out modifying RestBundle to use the metadata library tomorrow, hopefully it wont take too long.\n. ```\nrest_test:\n  type: rest\n  prefix: /test\n  resource:\n    - @TestVersionBundle\\Controller\\v1_0\\UserController\n    - @TestVersionBundle\\Controller\\v1_1\\UserController\n```\nIt is not possible to have a resource as an array, FileLoader uses the resource string as an array key to check for circular references.\nAt this point I'm a bit stuck on the best direction to head, the RestRouteLoader class has quite a large function body and messing with it is likely to break things. I'm inclined that we should write down the requirements of this section and start fresh, unless someone wants to tackle refactoring this?\n. From what I've seen while digging, the best case we can hope for in routing definitions without changing underlying Symfony code or implementing our own routing stuff:\nIt will introduce more complexity doing it this way though, since v1 will define some routes that already exist in v1.1.\n```\ntest_version_user_1_0:\n  type: rest\n  prefix: /test\n  resource: @TestVersionBundle\\Controller\\v1_0\\UserController\n  options:\n    version: 1.0\ntest_version_user_1_1:\n  type: rest\n  prefix: /test\n  resource: @TestVersionBundle\\Controller\\v1_1\\UserController\n  options:\n    version: 1.1\n```\n. Overall it seems to be exactly what I was trying to accomplish, its just a shame that the xml configuration looks a bit odd having resources in 2 places.\nhttps://github.com/FriendsOfSymfony/RestBundle/issues/12#issuecomment-1353945 becomes viable with such a set-up.\n. Looks great, thanks heaps for looking at that. I'll spend some time tomorrow testing it against our use case but it looks perfect.\n. Not yet, been working on it this afternoon.\nCant promise anything yet :\\\n. Not yet, been working on it this afternoon.\nCant promise anything yet :\\\n. I've attempted to reduce the number of assertions, thinking it could be the cause of the slow run time for the 20 tests in RestBundle, but I still get ~52 second runtimes regardless of these changes.\nAfter reading s_bergmann's new book it still seems prudent to me to reduce the number of assertions per testcase.\nFeedback?\n. Looks like something has changed since I reported this, my tests run in 1 second now too.\n. Looks like something has changed since I reported this, my tests run in 1 second now too.\n. I was never able to work out the metadata lib enough in the time I had allocated - I'm also not happy with the Routing annotation/yml code.\n. We support the symfony serializer as well as JMS serializer. It is an optional dependency.\n. I think it'd be helpful here to provide bc given this is a massive change to the way the ViewHandler handles redirections. Or at least, revert to the previous way of doing it, tag a version and then proceed forward.\n. I think it'd be helpful here to provide bc given this is a massive change to the way the ViewHandler handles redirections. Or at least, revert to the previous way of doing it, tag a version and then proceed forward.\n. I'm just concerned because this is such a massive change for anyone using $view->setRoute(). I've got 50+ places to change it :\\\n. I'm just concerned because this is such a massive change for anyone using $view->setRoute(). I've got 50+ places to change it :\\\n. I like the second one, without the top level 'error'.\n. The issue also appears to be coming from \nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/EventListener/ViewResponseListener.php#L106\nAre there many cases with a redirect in html where if we get data as well we want to render the template?\n. Well, realistically I think this use case should be handled, given that regardless of using @View or not, you would expect returning a RedirectView will result in a redirect.\nI'll see if I can come up with a solution with test cases so we can discuss it from that perspective instead of just speculating.\n. Found the problem. A RouteRedirectView object is defaulting to HTTP_CREATED. I do not believe this should be the default code.\n201 and 202 are not redirection response codes. \nIt looks like you changed it a while back, @lsmith77 - but why?\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/ce77ebf7c6b804f1b01fb091f8a55cc43861c65f/View/View.php#L181\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/commit/e5e05fc57bacf220bd3ee334d1e9ec2fe59b0b4d#diff-65d29ba37ec13130e886b500bed8895aL16\nThis problem does not occur with a RedirectView, only a RouteRedirectView.\n. Found the problem. A RouteRedirectView object is defaulting to HTTP_CREATED. I do not believe this should be the default code.\n201 and 202 are not redirection response codes. \nIt looks like you changed it a while back, @lsmith77 - but why?\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/ce77ebf7c6b804f1b01fb091f8a55cc43861c65f/View/View.php#L181\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/commit/e5e05fc57bacf220bd3ee334d1e9ec2fe59b0b4d#diff-65d29ba37ec13130e886b500bed8895aL16\nThis problem does not occur with a RedirectView, only a RouteRedirectView.\n. I propose we change the default status for a RouteRedirectView to HTTP_SEE_OTHER. (303)\nThe only issue here will be BC of people relying on a 201 response code when doing a redirect, which in my opinion doesnt make any sense.\n. I propose we change the default status for a RouteRedirectView to HTTP_SEE_OTHER. (303)\nThe only issue here will be BC of people relying on a 201 response code when doing a redirect, which in my opinion doesnt make any sense.\n. Even in that case, in normal operation I believe that 303 is the best response for a redirection. In a REST situation, maybe 201 with a location header is acceptable.\nI think at the very least we have to synchronise the behaviour of the RedirectView and RouteRedirectView, because they should behave the same - but they will act differently at the moment. And if someone wants to return a 201 with a redirect, it should be explicit.\n. Even in that case, in normal operation I believe that 303 is the best response for a redirection. In a REST situation, maybe 201 with a location header is acceptable.\nI think at the very least we have to synchronise the behaviour of the RedirectView and RouteRedirectView, because they should behave the same - but they will act differently at the moment. And if someone wants to return a 201 with a redirect, it should be explicit.\n. A fair point. It means that we need to update the way it is handled, because the behaviour works as expected when using a non templating format, but will still fail to produce proper results when the format is HTML.\n. A fair point. It means that we need to update the way it is handled, because the behaviour works as expected when using a non templating format, but will still fail to produce proper results when the format is HTML.\n. Could it be that we want conditional status codes depending on format?\nI can see HTML wanting 3xx but if a json or xml request came into the same controller we'd want to reply with a 201/202 and a Location header?\nRight now, we either have a 2xx response which is broken for a normal HTML form or we have a 3xx which wont give us the desired output for a json/xml request\n. Could it be that we want conditional status codes depending on format?\nI can see HTML wanting 3xx but if a json or xml request came into the same controller we'd want to reply with a 201/202 and a Location header?\nRight now, we either have a 2xx response which is broken for a normal HTML form or we have a 3xx which wont give us the desired output for a json/xml request\n. I dont think force_redirects has anything to do with the issue I'm reporting in here. See #574 for a proposed change that fixes the inconsistency with redirection status codes.\n. I dont think force_redirects has anything to do with the issue I'm reporting in here. See #574 for a proposed change that fixes the inconsistency with redirection status codes.\n. With #574 merged, this can be considered closed, though #576 is also related.\n. With #574 merged, this can be considered closed, though #576 is also related.\n. @Param(.., default=false) was not supported without this change, I wasnt sure if {} should be supported too but it makes sense that the default can be set to as many different types that the fetcher can actually retrieve, imo.\n. @Param(.., default=false) was not supported without this change, I wasnt sure if {} should be supported too but it makes sense that the default can be set to as many different types that the fetcher can actually retrieve, imo.\n. I'll make it a config option instead, then we wont break anything regardless. I dont personally see any reason this should break anything, I will do some more tests, but I believe this behaviour is expected and will work as long as the parameter doesnt have a default value in the method signature.\n. Forgetting ParamConverters for a minute, the issue appears without them anyway:\nThe above controller action, with just the QueryParam annotation, will result in an exception. Given the annotation itself indicates the parameter is nullable, and the method signature says its nullable, I would expect it just to pass null, not to throw an exception.\nCouple this with ParamConverters that run after the ParamFetcher (and the ParamFetcherListener set to add all parameters to the attributes bag) its safe to assume that a ParamConverter should be usable on a Query/RequestParam.\nI'll make this more robust and add some tests \n@asm89 you originally wrote this code, do you have an opinion?\n. Having run more tests today on this, I am convinced we should allow the ParamFetcherListener set attributes on the request if they're null and setParamsAsAttributes is true.\nA default value of null in the controller parameter will stop the QueryParam from working at all.\nphp\n    /**\n     * @Rest\\QueryParam(name=\"customer\", nullable=true, description=\"Customer (optional)\")\n     * @param Customer|null $customer\n     */\n    public function createAction(Request $request, Customer $customer = null)\n    {\nIn this specific instance, we will get a ParamFetcher parameter conflicts with a path parameter exception and I think this is entirely wrong.\nDoes anyone have any problem with me merging this? @lsmith77?\n. I've added some tests for the ParamFetcherListener.\nGood to merge.\n. I would like to take a stab at #547 before tagging stable. I will try to get a PR in the next day or so to see if its going to be possible.\n. Going to finalise 576 tonight, may be a day or two before I'll have time to work on 575.\n. You can define default formats by using this listener:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/3-listener-support.md#format-listener\n. The other idea I had to handle this was to provide a method on the Codes helper that would return true or false if a status code could be a redirect with content (and we maintain a list of status codes that support a Location header with data)\n. Looks like I was a bit ambitious with this change, only 200, 201 and 202 would normally contain a body.\nIt might be better to keep a list of status codes that are not allowed to have a body and check against that instead?\n. Not sure whats going on with travis and this pull request, but tests pass locally for me.\n. That means we have to maintain multiple branches just for a single BC break. It adds a lot of maintenance overhead.\n. :+1:\n. Sorry, missed that in my glance - PR has been merged\n. Do we have to force users to upgrade to 2.0 to actually get a proper fix here?\n. Do we have to force users to upgrade to 2.0 to actually get a proper fix here?\n. No, the change made in that PR fixes a new issue exposed with the new implementation in 2.0, not ~1.7\n. No, the change made in that PR fixes a new issue exposed with the new implementation in 2.0, not ~1.7\n. @GuilhemN is there anything stopping this from being merged?. Might make sense to allow devs to use the QF instead of the Request for all params, rather than ones defined?\n. Thanks for the submission, but could you please modify it to use the symfony2 coding standards. Thanks\nuse FOS\\RestBundle\\Request\\ParamFetcher;\nuse FOS\\RestBundle\\Controller\\Annotations\\RequestParam;\n. Never mind, I sorted it out.\n. Are you sure? Symfony2 has no instances of instanceOf and only instanceof?\n. Me too. I also provided another method of doing it in #580 \n. It was intentional not to have a default value, allowing 3 states.\nThe system then allows someone to specify, yes redirect with body, no dont redirect with body, or let the system work it out for me.\n. My mistake, obviously when I wrote this Codes is in a different repository. The implementation should have been provided with this PR but wasnt.\nI will rebase and resubmit tomorrow (~12 hours from now) now that it is back in FOSRestBundle.\n. The implementation effectively just said 'if it is a 204, 304 there should be no body'\nI'm probably missing a status code or two, but looking through the spec there are only a few response codes that shouldnt contain a body in their response.\n. Sentence is a bit weird..\n..tries the following (in order) to determine...\n. This doesnt appear to be used any more?\n. validate works. I also considered using validator[enable] given we already have a validator options key.\n. Changed to validate\n. If SensioFrameworkExtraBundle is not installed (and isnt required by FOSRestBundle), you cannot use TemplateListener::class because you will end up with the string 'TemplateListener' which is not the same thing.. ",
    "vicb": "@lsmith77 did you intend to ping me ? What kind of hints are you looking for ?\n. something like https://github.com/vicb/symfony/tree/router%2Fload-resources ?\n. The branch has been updated:\n- YML: accept either resource and resources keys,\n- XML: you can specify either the resource attribute or resource child nodes (if both are provided they'll get merged)\n@merk, @lsmith77 feedback ?\n. what about moving the default to the annotation, looks weird to have the config split between annotation and php\n. Some thoughts:\nIs the queryFetcher a good idea ? Let's imagine I do some processing in my controller based on the query parameters and then I call doSomeGreatStuff($request). This function would get the query parameters as $request->query->... and then we have a mismatch. Would it be possible to drop the queryFetcher and replace (or update) the query parameter bag instead so that the API does not get changed ? \nI can imagine some day we have a router component that is aware of the query parameters. This PR could not work as the parameters are processed in the controller only. So I would prefer if the changes are moved to the router layer.\n. Some thoughts:\nIs the queryFetcher a good idea ? Let's imagine I do some processing in my controller based on the query parameters and then I call doSomeGreatStuff($request). This function would get the query parameters as $request->query->... and then we have a mismatch. Would it be possible to drop the queryFetcher and replace (or update) the query parameter bag instead so that the API does not get changed ? \nI can imagine some day we have a router component that is aware of the query parameters. This PR could not work as the parameters are processed in the controller only. So I would prefer if the changes are moved to the router layer.\n. @lsmith77 \n- What I can imagine is to update the parameters in the bag and then use the bag as before.\n- I would go for the router layer for the reason explained in my previous message. I had first thought of a custom bag class but I don't even think it is necessary (see my point above).\n. @lsmith77 \n- What I can imagine is to update the parameters in the bag and then use the bag as before.\n- I would go for the router layer for the reason explained in my previous message. I had first thought of a custom bag class but I don't even think it is necessary (see my point above).\n. Well maybe the best place is the controller event. IMO the most important thing is to drop the $queryFetcher and be able to use doSomeGreatStuff($request). I let you work out the details.\n. Well maybe the best place is the controller event. IMO the most important thing is to drop the $queryFetcher and be able to use doSomeGreatStuff($request). I let you work out the details.\n. That might indeed be a bad idea but the current implementation is even worse then. The solution would be to change to router to support matching query params.\n. That might indeed be a bad idea but the current implementation is even worse then. The solution would be to change to router to support matching query params.\n. I think you mentioned that the code should work after re-factoring. Keeping the $queryFetcher prevent this, right ? Passing it as a parameter does not solve the solution either: it would introduce coupling and legacy (/3rd party) services would not work.\n. Moving some code from an action to a service (i.e. doSomeGreatStuff($request)). Wasn't that you were speaking about.\nAnyway the other part doSomeLegacyStuff($request), doSome3rdPartyStuff($request) is still valid.\n. @lsmith77 do they really need a listener ?\n. Great PR !\nI have some (other) ideas for optim which I need to check before submitting a PR.\n. @asm89 even greater then ! see you there.\n. I think this is a copy paster error from the xliff loader - it is required there - who got propagated to other sf2 xml loaders which end up there (sf2 loaders should have been fixed now).\n. \"requirements\" \u00e0 la Sf2 ?\n. Could you leverage the ControllerResolver ?\n. is '$' missing on purpose ?\n. factorize $default\n. using has() would allow always validating against the requirement (thinking of the default value here but not sure of what is the desired behavior) \n. That would be more dry and future proof\n. just wanted to make sure you were aware of the edge case here.\n. could the controller event help with efficiency ?\n. do we really need a listener, can't it be lazy loaded (just a thought, too late to check for now)\n. Back to my listener thing, using debug_backtrace might allow dropping the listener and using lazy loading, what do you think ?\n. The whole idea would be to drop the listener when you can inject the fetcher in your controller (which is a speed optim) making the call to setController() optional. Of course this can only be done if you use a service for your controller.\n. > i think debug_backtrace is likely more expensive than the listener\nnot sure at all, the event process takes some time + you always instantiate the fetcher even when it is not used.\nI am not sure to fully get your 2nd point, would looking for the 'Actionsuffix solve this ?\n. ?Actionis the sf2 standard, we can keep the ability to callsetController.\n. One solution could be to rewind back tohandleRaw`... or may be using the call stack is not a good idea at all ?\n. > the behavior of the method depends of the place calling it\nagree\n\nmakes you code impossible to test (you would have to recreate the call stack)\n\ndon't agree, stubs can help you\n\nI think it is quite bad for performances\n\ndon't agree. This would prevent from instantiating the listener & the fetcher. We might want to check debug_backtrace perfs.\n\nI really don't like using it to initialize the fetcher\n\nThis one is a valid reason...\n. Do you want to test debug_backtrace itself (this is done here)?\n. ",
    "breerly": "ping - anything juicy?\n. Might be able to take concepts from http://swagger.wordnik.com/\n. To create a similar experience we might be able to:\n- Parse methods marked as @apidoc or something\n- Get description of method and parameters from docblock on @apidoc marked methods\n- Allow for inline-testing of calls on a per action basis.\nAll in all I think achieving screens like Swagger is pretty do-able and makes tons of sense for this Bundle.\n. Another option would be simply generating the JSON that Swagger consumes but that comes with some weight (Java)... Would rather see a \"like\" implementation.\n. @pminnieur seems like we could just as easily provide the same basic functionality rather than integrating.\n. Could we add an example of how to use a custom normalizer to the README? Is it enabled by default? I'm setting an object to View which implements NormalizableInterface and the normalize method is not being called.\n. does the fos_rest normalizers: section in config.yml take anything else other than a service string? would be helpful if you could whip up an example (I'll add it to the documentation with a little better description of what to expect). thanks\n. Nice I was able to get an Entity's normalize method called by adding the custom normalizer above get set and implementing NormalizableInterface... Just need to figure most elegant way to normalize doctrine entities (one by one basis vs a general normalizer)\n. Got it. Looks like the problem is when including the routes file. You absolutely need to specify the include as a type:rest or else it won't go through the right processor.\n``` yaml\napp/config/routing.yml\napp:\n    type:     rest\n    resource: \"@AcmeHelloBundle/Resources/config/routing.yml\"\n```\nI'll add a note in the README and take out a pull request against master.\n. Correct. But since I had already implemented the include at the application-level routing.yml it was easy to skip over thinking I had already included it. I think this will be a common gotcha for beginners so it's worth a note in the readme.\n. The other thing that could make it confusing (at least it did for me) was that all rest routing worked fine without the type: rest at the application-level routing.yml, it only broke when I tried to use the parent param. Again, a simple note could alleviate this for future adopters.\n. added a pull @ https://github.com/FriendsOfSymfony/RestBundle/pull/68\n. looks like line 253 of RestBundle\\Routing\\Loader\\RestRouteLoader.php changes new into get.\n``` php\n// If passed method is not valid HTTP method, then it's custom object (PUT) or collection (GET) method\nif (!in_array($httpMethod, $this->availableHTTPMethods)) {\n    $urlParts[] = $httpMethod;\n    $httpMethod = 'put';\nif (count($arguments) < count($resources)) {\n    $httpMethod = 'get';\n}\n\n}\n```\nIt's not immediately clear when looking at the code the logic to turn into get vs put here so I'm not sure how we could add support for edit and remove... Off hand maybe a property called facilitaters that had an array('new', 'edit', 'remove') which could be checked against and then set $httpdMethod = 'get';'...\n. Here's an example of a fix but it might be rubbing your original intentions in dirt.\n``` php\nprotected $availableFacilitators;\npublic function __construct()\n{\n    $this->availableFacilitators = array('new', 'edit', 'remove');\n}\n```\n``` php\n// If passed method is not valid HTTP method, then it's custom object (PUT) or collection (GET) method\nif (!in_array($httpMethod, $this->availableHTTPMethods)) {\n    $urlParts[] = $httpMethod;\nif (in_array($httpMethod, $this->availableFacilitators)) {\n    $httpMethod = 'get';\n} else {\n    $httpMethod = 'put';\n\n    if (count($arguments) < count($resources)) {\n        $httpMethod = 'get';\n    }\n}\n\n}\n``\n. tested this fix and it works with custom objects still and collections. going to submit pull request.\n. added pull @ https://github.com/FriendsOfSymfony/RestBundle/pull/69\n. this got merged into master. closing.\n. Thanks for the review - I'll add a test that makes sure these controllers stay reachable and a section to the README.\n. this should do 'er ^^\n. I'd have to disagree. Allowing/new/edit/removedoes not de-validate REST. They are resources/nouns as opposed to operations. They encourage HATEOAS.\n-users/new- sends a form (the resource) for creating a new resource of said type. The engine to POST.\n-users/123908/edit- sends a form (the resource) for editing an existing resource of said type. The engine to PUT.\n-users/124908/remove` - sends a form (the resource) for removing an existing resource of said type. The engine to DELETE.\nResources are typically pluralized while subordinates (like PUT /users/13453/name) and nouns are not. Having a sub-resource of new does not really make any sense to me, I don't really see the possibility for collision. Neither does edit or remove. I think this is an edge case. We should allow overriding of this behavior instead of gutting it. \n. @lsmith77 also you seem to have your urls confused.\n/foo/new - the possible collision here is :id=new\n/foo/:id/edit - the possible collision here is a sub-resource called edit or a subordinate called edit. \n/foo/:id/remove - the possible collision here is a sub-resource called remove or a subordinate called remove.\nSub-resources typically are pluralized and subordinates are sub-sections of the resources data. This makes it highly unlikely that these names will collide. That being said, I think it should be override-able. Or not on by default but enable-able.\n. I have to also submit this. In foo/new, new IS the resource. It says give me a representation (HTML) containing hypertext (a form) that drives state of the foo resource. This is the very meat of the HATEOAS constraint. The same applies for foo/123/edit and foo/123/remove - give me the subordinate resource of 123 etc... Note that none of these actions perform operations themself, they are purely GET nouns and are therefor entirely valid REST.\nAnother thing, new/edit/remove are not REST or even HATEOAS reserved words, they are just based on common convention. Some people have even suggested others for bulk manipulation of a resource. Because of this, maybe we should handle these within the methods that would regularly handle them without any special magic. We could provide a separate interface for those who follow these conventions so they get the plug-in-play support they're looking for\nThis should satisfy both scenarios.\n. Sure, edit is the \"formed\" representation of said resource. Whereas remove would probably be delete confirmation. \nSo you propose the following? \nfoo?new\nfoo/123?edit\nfoo/123?remove\nI wonder if there is a way we can ease the calling of another method in the given cases. Maybe just good documentation is all...\n. That sounds gravy and should provide enough flexibility to the end user\n(us).\nOn Oct 24, 2011 12:06 AM, \"Lukas Kahwe Smith\" \nreply@reply.github.com\nwrote:\n\nyes that is what i am proposing. as mentioned above, we might be able to\nadd something into the custom RouterListener we are working on for content\ntype negotiation, that can also (optionally?) handle pointing things at\ndifferent action methods based on these conventions.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/69#issuecomment-2500365\n. I would like that, sounds like Lukas has that in mind.\nOn Oct 24, 2011 12:56 AM, \"Pierre Minnieur\" \nreply@reply.github.com\nwrote:\n\nAnother thing, new/edit/remove are not REST or even HATEOAS reserved\nwords, they are just based on common convention.\n\nAdditionally, why not making these configurable if they're not reserved?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/69#issuecomment-2500643\n. Aaah. It's built into Symfony\\Component\\HttpFoundation\\Request. \n\nLooks like you can either set the X-HTTP-METHOD-OVERRIDE header or do ?_method=PUT, ?_method=DELETE. \nI'll put a small note in the documentation and submit a pull.\n. Nevermind looks like they just moved TO Yaml::parse from Yaml::load... I'm on BETA4 so it broke my app but I can maintain a hack till they release BETA5. Sorry.\n. thanks @stof. been working on RestBundle so trying to stay up to date.\n. that makes sense. thanks bud\n. While I don't necessarily agree that HATEOS is only about having state transitions expressed as links (links link to somewhere, to the hypermedia that drives the application state) I'm fine with changing to Conventional Actions. I had a difficult time naming these actions myself. \n. Added a pull @ https://github.com/FriendsOfSymfony/RestBundle/pull/78\n. I agree that link is required. My point is that with X/HTML it is common that you are providing a URI to request the hypermedia that will be driving your application state. Either way, I think it was a good suggestion and change.\n. Also found this issue which looks related, to this convo at least: https://github.com/FriendsOfSymfony/RestBundle/issues/52\n. Nice. Is there anyway to hint to a git submodule to check out that branch? From a deploy standpoint I'm not sure I'll be able to manage the switching to that branch after checking out... Thanks\n. ok good deal. thanks.\n. @stof sure that makes sense. Actually this is from lsmith/SerializerBundle:use_core but I get your drift.\n@lsmith77 from running phpunit -c app/phpunit.xml.dist from the top level of my symfony2 project.\n. nice! that's great news\n. this whole month is so brutal - will be MAKING me time (symfony) after that :)\n. I'm fairly new to Symfony2 & FOSRestBundle, so if I get things going I might need help along the way critiquing it. Also, User and Comment will probably confuse some (since there are already bundles for managing these things), maybe we should do something like Category and Product instead. How can I get push access to FriendsOfSymfony? \n. Any way I can help scoot this along? What's the block exactly?\n. Any chance we could look at URI versioning for the time being since that will likely be desired by many users?\n. ",
    "webmozart": "As John said, I highly discourage you from trying to collect the constraints. There are too many different places currently where validation takes place. I'll try to simplify and unify this, but I can't promise anything - at least not for 2.0.\n. If you set $assoc to true, that's what json_decode() does. You need to either set $assoc to false or convert empty arrays to objects manually. \nThe problem is that json_decode() is not schema-aware, but neither is webmozart/json. You could maybe create a feature request on the PHP bug tracker?\n. I agree, writing a transformer sounds like a good solution to me. :)\n. The problem about null/false is that the Form component was never designed to be used in API requests. That's what usually a serializer is for. The Form component is designed against the CGI protocol, where each value is a string or not set.\nI understand however that the Form component offers functionality that serializers are missing. The problem is that we can't change the Form component to pass false as false (instead of null) without breaking BC.\n. This should rather be done in a listener for the SUBMIT event.\n. IMO the option name \"type\" is too generic. Can you find a better option name that describes better what the option does? E.g. strict_string_handling?\n. Sure, why not. :)\n. ",
    "beberlei": "What about tests? This code seems to be some sort of copy paste monster, please add tests or this will come back to haunt us.\n. This has to be a second type of routing so we don't break BC for old installations. I think the change would be too big to put on anyone. But maybe code-reuse can be made HUGE between these strategies.\n. This has to be a second type of routing so we don't break BC for old installations. I think the change would be too big to put on anyone. But maybe code-reuse can be made HUGE between these strategies.\n. this makes sense, but why not add this to jmsserializerbundle?\n. this makes sense, but why not add this to jmsserializerbundle?\n. @everzet \nSeveral reasons from my side:\n- type: rest - forced lots of duplication in method names, that the controller already had.\n- no reusibility of actions through traits or a base controller possible, since resource name is hardcoded in action names.\n. @everzet \nSeveral reasons from my side:\n- type: rest - forced lots of duplication in method names, that the controller already had.\n- no reusibility of actions through traits or a base controller possible, since resource name is hardcoded in action names.\n. yes\n. Wouldn't it be easy to keep it BC by offering proxy methods on $view?\n. ",
    "marijn": "Is there a reason that all class names start with lower case letters?\n. Aside from the question if an RSS handler should add any dependencies, there should at least be a notice that this implementation depends on the Zend_Feed component. \n. ",
    "Seldaek": "16:32 <Seldaek> lsmith, johnwards: I guess having an optional \"normalize silently\" option would be ok, could actually be\n                default because atm it's just the xml encoder that goes boom I think, json_encode(), if you do not\n                normalize fully an object, will just ignore the sub-objects, it still goes boom if one of the top level\n                nodes is not normalizable though (well, it's more complicated)\n16:32 <Seldaek> I think we should align the XmlEncoder with that behavior\n16:33 <lsmith> k\n16:33 <lsmith> we also need to look into lazy loading normalizers\n16:33 <lsmith> (and encoders too maybe ..)\n16:34 <Seldaek> yeah well, for that we need to extend the Serializer class I guess\n16:34 <Seldaek> and make a DIC aware one\n16:34 <Seldaek> where you can just register services for interfaces\n16:34 <Seldaek> or something\n16:34  * lsmith nods\nCan't say I disagree :)\nThe way the component works should not be changed, we just need to extend it with DIC functionality in FrameworkBundle. I'm seriously time-constrained lately so I'm sorry I haven't been able to give too much attention to this issue.\nOne thing to change (in the XmlEncoder) is that a normalize call should return a normalized object, and if objects are found again the returned array, they should be ignored. If there is no normalizer found, maybe we could have a silent flag that kills the exception, but I believe the better way would be to create a DoctrineNormalizer and then most problems would probably go away.\n. 422 is WebDAV.. but I guess it's the most appropriate. Anyway with regard to the Serializer thing, I don't think it should be in there no. The Serializer has nothing to do with response generation, and it shouldn't be aware of what's going through it. Whatever Form-controller calls it should flag the request as a \"form\" one, so that the response can be appropriately generated.\n. @lsmith77: This should be merged, I got some patch I'd like to push but it conflicts with this and I'd like to clean up once this is merged. Also I experienced the same 400 issue.\n. You can have multiple composer.json (+ their respective lock files) in a test/ or whatever directory you see fit.\nThen in your travis config using the following I believe it should work, it's untested though.\nyaml\nenv: \n  - COMPOSER=test/foo-composer.json # containing symfony/symfony 2.1.0\n  - COMPOSER=test/bar-composer.json # containing symfony/symfony 2.0.5\n. Please open an issue, but at first sight I'm not such a fan of opening that can of worms.\n. Fair enough, but it's a bit annoying because it breaks common assumptions.\n. Fair enough, but it's a bit annoying because it breaks common assumptions.\n. Another approach could be to just do reflection on the controller action to see which argument has the given type hint, and name it with that arg's name instead of queryFetcher.\n. Another approach could be to just do reflection on the controller action to see which argument has the given type hint, and name it with that arg's name instead of queryFetcher.\n. Obviously I'm happy to fix these and provide a PR if everyone agrees these are ok changes, I just don't want to do it for nothing.\n. Obviously I'm happy to fix these and provide a PR if everyone agrees these are ok changes, I just don't want to do it for nothing.\n. After discussing it with @asm89, I realize I kinda misused this in a way, because I planned on using it for request params (and not query). So the second point makes no sense, for QueryParam, defaulting to \"\" is probably fine. I guess it'd be nice to have a RequestParam annotation then, with no default value.\n. After discussing it with @asm89, I realize I kinda misused this in a way, because I planned on using it for request params (and not query). So the second point makes no sense, for QueryParam, defaulting to \"\" is probably fine. I guess it'd be nice to have a RequestParam annotation then, with no default value.\n. Just to be clear, RequestParam would default to null, which would not match an empty/omitted parameter, and it would default to strict mode, because POST values should not accept random stuff by default IMO.\n. Just to be clear, RequestParam would default to null, which would not match an empty/omitted parameter, and it would default to strict mode, because POST values should not accept random stuff by default IMO.\n. Also we could have a simple Param annotation (not sure if that'd conflict with the usual @param) that accepts any GET or POST value.\n. Also we could have a simple Param annotation (not sure if that'd conflict with the usual @param) that accepts any GET or POST value.\n. See #257 for the code.\n. @stof please report on the api doc bundle, and open a new issue here if you have an idea how to solve this. I guess we could have an optional=false (default) too, that allows something to be pass even in strict mode if it's missing, but not if it's invalid. I'm closing this issue since it's not very relevant anymore.\n. I could see the value in adding basic support for arrays, but for deeply complex stuff you'll probably want to use a form to map to objects anyway, so that it's possible to validate it. And if you use forms, I don't quite see the point of the QueryFetcher stuff anymore, but maybe I'm missing something?\n. I could see the value in adding basic support for arrays, but for deeply complex stuff you'll probably want to use a form to map to objects anyway, so that it's possible to validate it. And if you use forms, I don't quite see the point of the QueryFetcher stuff anymore, but maybe I'm missing something?\n. @lsmith77 our bundle already supports forms for documentation, but anyway at some level of complexity you just can't automate it anymore I guess.\n@stephpy IMO it should just be supporting ids[]=1&ids[]=2 with a array=true on the annotation. The rest is bastardized data input, and you can already validate it with a regex if you really want to.\n. I see this as a convenience feature, so validating each item individually sounds fine to me. If I have a case where I need 500 items, I think it's ok to drop the training wheels and go a bit lower level to get more speed.\n. Well if it's about performance only, then you can most likely serialize on a weird unicode character, and use that to modify the pattern so it can match a repetition with the weird char as separator.\n. The fact that we can doesn't mean we should encourage such practices.\n. I think for no param given, array(1) is expected, but maybe we should force the default to be an array, so you have to do default={1}, and it's more clear what you get as default. Invalid entries IMO should just be discarded, and if nothing is valid maybe use the default value?\n. Fixed the WS.. anything else?\n. @lsmith77 regarding the mime-type, application/javascript makes sense IMO, since you are basically serving JS.\n. How does setting the response content-type do anything to the request?\n. Having jsonp support can be a security issue in some way if you don't know about it, so it's not ok to have it on by default. Having it configured globally would be a good first step, but ideally this should be an option/flag you set on the view allowing jsonp fallback. Whether it's done by detecting callback or with a .jsonp request format I don't really mind.\n. @schmittjoh BTW - I agree with you that complex cases have to be handled manually, but in most cases I think people are happy to combine A && B, so having this basic functionality built in via schmittjoh/JMSSerializerBundle#140 would still be welcome.\n. I am ambivalent because the symfony routing requirements only seem to have the \"s\" flag set and that's all you get. Here we have \"xs\" set, which seems kinda wrong. I think I'd be for either having \"s\" or requiring a full pattern always. Then again \"us\" seems fine too.\nAuto-magic might work though, but indeed it's a dangerous path.\n. What do you mean dev-master isn't allowed in the require-dev dependencies?\n. I think you should do the require command without --dev here, because it's a non-dev require in your original composer.json. If you do it with --dev it ends up requiring both >=2.0,<2.3-dev (from require) and dev-master or whatever (from require-dev). That might lead to conflicts.\n. Either pre-allow in 2.3 as you said, or you run multiple commands I guess:\ncomposer require symfony/framework-bundle:dev-master --no-update\ncomposer require --dev something/else:dev-master --no-update\ncomposer update\n. It's not like this really changes anything in effect right? It's just to remove IDE warnings?\n. It's not like this really changes anything in effect right? It's just to remove IDE warnings?\n. Maybe an easy enough thing would be a way to tweak the current listener to provide a default_priorities thing per path and/or host. That way you could say /api is only json,xml and the rest is only html for example. Then specific cases can still be handled in controllers. That said :+1:  for this.\n. Maybe an easy enough thing would be a way to tweak the current listener to provide a default_priorities thing per path and/or host. That way you could say /api is only json,xml and the rest is only html for example. Then specific cases can still be handled in controllers. That said :+1:  for this.\n. I agree that it should continue matching if it didn't find a match, basically the rule is a match on (path, host, format) and if no format matches then the rule doesn't match. If no rule matched then 406 sounds good at that point.\n. No idea what's up but a suggestion is that you maybe could drop 2.1 support at this point :)\n. No idea what's up but a suggestion is that you maybe could drop 2.1 support at this point :)\n. If anyone wants to \"donate\" to composer the best is to start using (Private Packagist)[https://packagist.com] - we don't accept donations per se. But IMO @xabbuh you should just accept it if someone wants to give something back for your work :). Well it allows reading from both GET or POST if you just use @Param. That's why I left it \"active\".\n. Well I like to enable use cases if they don't have a cost, but if you really want I make it abstract.\n. Alright well I disabled it for now, we can always re-allow it later on.\n. Oops, done.\n. It was for BC because before the default was always a string. I personally don't mind..\n. Well as I said, it was just to preserve the previous behavior, if you\nwant to change it feel free to make another PR.\n. ",
    "tyx": "In my company we use 422 in this case !\n. Yes BC Break I know. For now I have no idea to avoid it.\nIt is already a service but you can only change the class name or I miss something. \nSo it is not really a service as the view_handler which can be totally overrided by users. \n. I will do.\n. I hope I have time this week\n. ",
    "mahono": "what about 406 ?\n. but 400 also seems ok to me\n. ",
    "evert": "412 = strictly for precondition checking (like viadar mentioned). 409 is appropriate if the server is not currently in a state where it can accept the request, but in my mind.. can also be used if you're specifying relations in your body (1-1, 1-many) that don't exist.\nI'd go for 400 as general client-failure fallback.\n. WebDAV status codes are fine to use in a REST context IMHO.\n. ",
    "pminnieur": ":+1: to Swagger. This looks awesome!\n. :+1: to Swagger. This looks awesome!\n. Generating compatible JSON was my first thought. I'll dig a little bit deeper on the weekend, maybe there's some quick 'n dirty prototyping possible.\n. Generating compatible JSON was my first thought. I'll dig a little bit deeper on the weekend, maybe there's some quick 'n dirty prototyping possible.\n. At least it could work like https://github.com/FriendsOfSymfony/FOSJsRoutingBundle - just adding some fancy HTML/CSS and expose your RESTful routes with some kind of API docs. Maybe we could use some Annotations to support more informations.\n. At least it could work like https://github.com/FriendsOfSymfony/FOSJsRoutingBundle - just adding some fancy HTML/CSS and expose your RESTful routes with some kind of API docs. Maybe we could use some Annotations to support more informations.\n. I'd like to start with this but I think it would be better to put the code into a dedicated bundle (e.g. FOSRestAPIExplorerBundle). Question is, shall we support the Swagger API only (so Swagger is used to visualize the information gathered and exposed in JSON) or shall we provide our own web interface, too?\n. I think you simply have to not make the URL returning the Swagger JSON public if you don't want it to be public ... :D Seriously, I'd like to use annotations and if you don't want a route to be public, you won't add the @Expose() annotation or add @Expose(false) -- something like this. Just like FOSJsRoutingBundle is configurable how to deal with it (expose everything by default, or expose whitelisting). If you mean \"here's a link for our public API and this link is only for you\", we may add an annotation like @Api(\"public\") and @Api(\"private\") including the security component so you could hand out different API documentations to different people (and control the access to 'em).\nFor the name: I'd like to have a generic name, Swagger would be the first API documentation service to be supported. If people want to add any other service, they could just do it (and must not start from scratch). @odino for example could add the WADL support. At least I'd like to provide a web interface, too.\n. I created a GitHub repository so far to collect ideas and issues before we get started. Feel free to open issues for any questions or topics to discuss (naming could be discussed too, for sure) ;-)\nhttps://github.com/pminnieur/FOSRestApiExplorerBundle\n. in the first place, yes. only generate swagger-spec conform json to be used by the swagger-ui.\n. What has to be done?\n- remove L#23-#26 in Resources/routing.xml\n- fix docs so people include custom annotations in their use statements?\nIf I do this, everything works as expected. We just have to improve the Reader service (adding Cache, etc...)?\n. If so, we have to split Controller/Annotations.php. Overseen that!\n. Yep. I just don't use Annotations, so everything worked as expected when I removed the lines from the routing.xml. My bad ;-)\n. Ignore the first two commits, I --force them away because there were two little things missing.\nUse this PR: https://github.com/FriendsOfSymfony/RestBundle/pull/44 (equals last commit).\n. See #42 discussion, that's not enough.\n. Which one does not work? the extra: or the rest: part?\n. Do you import the annotations in your controllers? The symfony-standard edition e.g. imports the Sensio FrameworkExtra bundle  Route and Template annotations. See src/Acme/DemoBundle/Controller/DemoController#L8\n. I already complained about those kind of routes here -- https://github.com/everzet/EverzetRestfulControllersBundle/issues/4 -- may be a informational addition to you, Lukas :)\n. > Another thing, new/edit/remove are not REST or even HATEOAS reserved words, they are just based on common convention.\nAdditionally, why not making these configurable if they're not reserved?\n. I'd like to help but I can't until next week.\n. I'd like to help but I can't until next week.\n. Sounds more like a symfony-rest package/distribution to be set up :-)\n. Sounds more like a symfony-rest package/distribution to be set up :-)\n. I'd like to see some more hints and links to code equivalents from/in the LiipHelloBundle examples in the documentation, as it would help a lot with quick prototyping.\n. I'd like to see some more hints and links to code equivalents from/in the LiipHelloBundle examples in the documentation, as it would help a lot with quick prototyping.\n. @lsmith77 pardon? ;-)\n. @lsmith77 indeed. But I think I won't have much time to work on the apidoc bundle until April :/\n. ",
    "avalanche123": "dot is a segment separator so it is has special treatment e.g.\n/{directory}/{file}.{format}\nif dot wasn't used as a segment separator by default, the framework would not be able to split image.jpg into $file=image $format=jpg and you would end up with $file=image.jpg\nto get around that limitation, you can specify segment separators per route:\nroute:\n    pattern: /{id}\n    options:\n        segment_separators: [/]\n. ",
    "lenar": "Really, I don't need multiplexing support. I want transparent output-format-agnostic support.\nThis bundle almost provides it (there is excellent support for exceptions) but falls short\nconverting normal (The Book) responses. I only think it would be nice if this bundle included\na way to specify serializer for this kind of cases. The bundle really has all the other components\nneeded. Why should I look at MultiplexBundle in this case? It's not logical.\nSorry if it's too much to be asked. \n. I didn't argue that MultiplexBundle wouldn'y give me what I need. Yes, it does. But it feels kind of hacky and certainly not as flexible as it can be. Maybe that's just me. But.\nBut this bundle would give me the support of different serializers and normalizers which would be very nice even\nin the case of the common \"return new Response(...)\" and \"return new RedirectResponse()\" from the actions.\nI would even argue that MultiplexBundle does too much - it should just multiplex. And the format conversion\nshould be done by some other bundle. Currently the RestBundle has the best implementation of this conversion.\nSo MultiplexBundle should IMHO actually live on and together with RestBundle.\nAnd of course since exceptions can be already nicely and automatically converted to suitable format with this bundle I\nonly thought that handling (of course configurable as exceptions are) ordinary ...Responses in the same way would\nonly be consistent and logical. I really expected that this bundle does this when I found it - because it felt\nright and because it's README.md had this sentence: \nFor now the Bundle provides a view layer to enable output format agnostic Controllers, which includes the ability to handle redirects differently based on a service container aware Serializer service that can lazy load encoders and normalizers.\nThis sentence really got me excited and I never thought it only provides this ability when using special View class. I really can see the format conversion for ordinary Responses can be done very efficiently in this bundle \n(and so much more than MultiplexBundle) and so it makes sense for me.\nMaybe I'm wrong. Maybe I'm missing something. I don't know.\n. Provide a way to match the behavior of ordinary exceptions\n```# app/config.yml\nframework:\n    exception_controller: 'FOS\\RestBundle\\Controller\\ExceptionController::showAction'\n```\nfor ordinary Responses.\nOk, I can provide some example code which maybe could be included in RestBundle but it takes a bit time.\nUntil then, let this conversation rest.\n``\n. Thanks, I think that would be nice and enough in this case. I will close this issue as you created new.\n. I could. I actually looked at other examples, and 'View support' and 'ExceptionController support' also had single quotes.\nShould I convert those too and add to this pull request?\n. Managed to destroy my previous PR accidentally.\n. In Firefox&Chrome both:text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8`\nSetting prefer_extension to true cures the behavior. Thanks.\n. ",
    "schmittjoh": "You could also take a look at http://github.com/schmittjoh/metadata.git as it has most of what you probably need already built-in (like caching, metadata abstraction, etc.). You only need to add some drivers, and your bundle related properties/flags to the metadata classes.\n. I have nothing against this, but someone needs to implement it :)\n. If you can add some failing tests to the JMSSerializerBundle, then I can write the code to make them pass, but I don't have time to debug the FOSRestBundle as I haven't used it yet.\nThe data that you want to serialize would need to be added here:\nhttps://github.com/schmittjoh/JMSSerializerBundle/blob/master/Tests/Serializer/BaseSerializationTest.php#L181\nand then you just need to add the desired xml/json output in these places\nhttps://github.com/schmittjoh/JMSSerializerBundle/tree/master/Tests/Serializer/xml for XML\nhttps://github.com/schmittjoh/JMSSerializerBundle/blob/master/Tests/Serializer/JsonSerializationTest.php#L47 for JSON\n. If you can add some failing tests to the JMSSerializerBundle, then I can write the code to make them pass, but I don't have time to debug the FOSRestBundle as I haven't used it yet.\nThe data that you want to serialize would need to be added here:\nhttps://github.com/schmittjoh/JMSSerializerBundle/blob/master/Tests/Serializer/BaseSerializationTest.php#L181\nand then you just need to add the desired xml/json output in these places\nhttps://github.com/schmittjoh/JMSSerializerBundle/tree/master/Tests/Serializer/xml for XML\nhttps://github.com/schmittjoh/JMSSerializerBundle/blob/master/Tests/Serializer/JsonSerializationTest.php#L47 for JSON\n. Depends, if these handlers are for FOSRestBundle classes it might make more sense to add them to FOSRestBundle directly. If they are for symfony classes, then I would say let's add them to the serializer bundle.\n. Depends, if these handlers are for FOSRestBundle classes it might make more sense to add them to FOSRestBundle directly. If they are for symfony classes, then I would say let's add them to the serializer bundle.\n. I should add that I am open to provide a PR for this :)\n. I should add that I am open to provide a PR for this :)\n. Controller code changes like this:\nBefore:\n``` php\n<?php\npublic function myAction()\n{\n    $view = $this->container->get('fos_rest.view');\n    $view->setParameters(array('foo'));\n    $view->setStatusCode(400);\nreturn $view->handle($this->container->get('request'));\n\n}\n```\nAfter:\n``` php\n<?php\npublic function myAction()\n{\n    return new View($parameters, 400);\n}\n```\n. Controller code changes like this:\nBefore:\n``` php\n<?php\npublic function myAction()\n{\n    $view = $this->container->get('fos_rest.view');\n    $view->setParameters(array('foo'));\n    $view->setStatusCode(400);\nreturn $view->handle($this->container->get('request'));\n\n}\n```\nAfter:\n``` php\n<?php\npublic function myAction()\n{\n    return new View($parameters, 400);\n}\n```\n. I can look into it, do we have tests for this listener?\n. Regarding #30, and tests, at least not yet. \nRight now, it seems like this would need to be implemented on the route level which I'm not sure if it is the right place. Then I also don't know how much of the RestBundle I'll use, as it is a bit too intrusive for my taste because its listeners are active for all requests, and not only those that are going to the API.\n. So, license headers should now all be nice and shiny.\n. see sensio/SensioFrameworkExtraBundle#78\nThere is not much I can do in the JMSSecurityExtraBundle.\n. There is another solution, but it's not so elegant:\nhttps://github.com/schmittjoh/JMSDiExtraBundle/issues/14#issuecomment-2858715\nOn Sat, Dec 10, 2011 at 8:14 PM, Jordan Alliot <\nreply@reply.github.com\n\nwrote:\n@stof I believe the problem is the same with @Secure, @SecureParam,\n@SecureReturn or even @LookupMethod from JMSDiExtraBundle. The\n@PreAuthorize was only an example from a real controller of mine :)\nSo if I understand correctly, the only possible thing to do is waiting for\n@fabpot to review and merge sensio/SensioFrameworkExtraBundle#78?\n/cc @schmittjoh\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/156#issuecomment-3092425\n. This is already the case in the 1.0 version when the controller is replaced by a closure (the solution there is to increase the priority of your listener). The solution for the master version is to use AOP which  guarantees higher interoperability between bundles.\n. Why? Just curious, have you used AOP yet?\n\nOn Sat, Dec 10, 2011 at 8:30 PM, Christophe Coevoet <\nreply@reply.github.com\n\nwrote:\n@schmittjoh using AOP seems overkill here. the listener simply reads an\nannotation on the controller and sets a request attribute when it exists\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/156#issuecomment-3092509\n. Is this still relevant? I think it should be fixed now.\n. Is this still relevant? I think it should be fixed now.\n. btw, is inheritance supported for composer files? Would come in handy for this scenario.\n. About silently setting the default value on validation failure, would it not make more sense to redirect to the URL with the default value? Also in terms of SEO, and duplicate content, this seems more sensible, no?\n. About silently setting the default value on validation failure, would it not make more sense to redirect to the URL with the default value? Also in terms of SEO, and duplicate content, this seems more sensible, no?\n. This atm only returns the form's errors. What would you expect?\n. The question is what output would you expect here? Can you give an example\nwith some fields?\n\nOn Mon, Feb 27, 2012 at 11:53 AM, david42 <\nreply@reply.github.com\n\nwrote:\nOk. I thought that returned the form's elements in xml format.\nIs it possible ?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/190#issuecomment-4199047\n. it's not possible right now, but you might want to help with\nschmittjoh/JMSSerializerBundle#60\n\nOn Tue, Mar 13, 2012 at 10:53 AM, log0 <\nreply@reply.github.com\n\nwrote:\nI know FOSRestBundle uses JMSSerializerBundle behind the scenes, but I am\nalso new to both. So I hope to get some directions on this. I haven't seen\nmuch directions or tutorials on that yet.\nSuppose I have these associations:\nA has many B.\nB has many C.\nC has many D.\nIf I request a list of all A in JSON format, the default response data\nwould contain all A, and all B associated with A, and all associated C with\nB, and all associated D with C.\nMy question:\n- If I want to export A with Bs only, but stops there, and does not\n  recurse into C anymore. How would I do that on a per API basis? (I would\n  have another API which exposes all of them)\n- If I want to export A with an extra field, which depends on B and the Cs\n  associated with B, e.g.:\n$A[\"cids\"] = function(){\n $arr = [];\n foreach ( $A->getBs() as $B)\n {\n    $arr[] = $B->getCs();\n }\nreturn $arr;\n};\nHow would I do that in a per API basis?\nThanks!!!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/202\n. How can people that return View instances make use of the more advanced features?\n. How can people that return View instances make use of the more advanced features?\n. Maybe, we can also add a closure:\n\nphp\n$view->configureSerializer(function($serializer) {\n    // do your stuff here\n});\n. Maybe, we can also add a closure:\nphp\n$view->configureSerializer(function($serializer) {\n    // do your stuff here\n});\n. Or, add a conflict for a lower version?\n. It's already possible, but you need to write a wrapper class for how to combine them.\nIn this case, you probably want to exclude as soon as one strategy fails.\n``` php\n$serializer->setExclusionStrategy(new ExclusionStrategyInterface($versionStrategy, $groupStrategy) {\n    public function shouldSkipProperty() {\n        if ($this->versionStrategy->shouldSkipProperty()) {\n            return true;\n        }\n    if ($this->groupStrategy->shouldSkipProperty()) {\n        return true;\n    }\n\n    return false;\n}\n\n});\n```\n. The problem is that you can make combining strategies arbitrary complex $a\n&& $b, $a || $b, $a || ($b && $c) etc.\nThat really needs to be handled in the calling code which knows more about\nthese strategies. What we could add is something like an \"AND\" and an \"OR\"\nstrategy, but you would still have to wire it manually and then set it on\nthe serializer.\nOn Mon, Aug 20, 2012 at 2:51 PM, Lukas Kahwe Smith <notifications@github.com\n\nwrote:\n@schmittjoh https://github.com/schmittjoh why not offer a sane standard\nimplementation as part of the Bundle?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/282#issuecomment-7868044.\n. The problem is that you can make combining strategies arbitrary complex $a\n&& $b, $a || $b, $a || ($b && $c) etc.\n\nThat really needs to be handled in the calling code which knows more about\nthese strategies. What we could add is something like an \"AND\" and an \"OR\"\nstrategy, but you would still have to wire it manually and then set it on\nthe serializer.\nOn Mon, Aug 20, 2012 at 2:51 PM, Lukas Kahwe Smith <notifications@github.com\n\nwrote:\n@schmittjoh https://github.com/schmittjoh why not offer a sane standard\nimplementation as part of the Bundle?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/282#issuecomment-7868044.\n. You can use a CrossDomainRpc. \n\nThis works by submitting a form through an iframe to the server. The server detects the CrossDomainRpc, and sends back a specially crafted response, that redirects the client back to the origin url, along with the response data. Once returned, the parent window reads the returned data out of the iframe. \nAll you need for this is a custom listener which hooks into the kernel.request/kernel.response events to modify request, and response.\nSee http://closure-library.googlecode.com/svn/docs/closure_goog_net_crossdomainrpc.js.source.html for more info, and sample implementations.\n. I'm not sure this is a good idea, just yet. \nI plan to move the serializer to a dedicated repository before releasing a 1.0 version. For now, I'd say, it might be better if you add something like \"jms/serializer\": \"1.0.x as 0.9\" to your composer.json if you want to use the latest version.\n. If you plan to make a stable release, I'd depend on version 0.9 of the serializer bundle. \n0.10 is fairly new and untested, I've just added it to give people a bit more time to upgrade, but I don't plan to make any bug fixes in there.\n. @lsmith77, JMSSerializerBundle 0.10 is also not compatible with Symfony 2.0, only JMSSerializerBundle 0.9 is.\n. I'd go for 1).\n. This indeed is a common scenario I think, and it would be cool to provide\nsome better support for it.\nOn Wed, Dec 5, 2012 at 10:55 AM, Daan van Renterghem \nnotifications@github.com wrote:\n\nHello,\nwe want to use FOSRestBundle for the API part of our application. The API\nis split into a different bundle.\nThe \"standard\" controllers make use of the @Template annotation. For the\nAPI controllers, we want to use the @View annotation.\nThe tricky part comes with the Content Negotiation. For the application\nitself, only HTML should be returned, for the API only json should be\nreturned. I cannot find a way to set up the content negotation of\nFOSRestBundle in such a way that it either:\n- applies only to the API controllers, or\n- supports only json for the API, only html for the application\nWhat I've tried so far (all with prefer_extension set to false):\n- disable content-negotiation, set json as fallback. Result:\n  - everything is returned as json\n    - enable content-negotiation, set json first, html second, fallback\n      to null. Result:\n  - application returned as html (Accept:\n    text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8)\n  - application returned as json (Accept: application/json) where we\n    want a 406\n  - api returned as json (Accept: application/json)\n  - api returns 500 (template not found) when not having\n    application/json in the accept header, where we want a 406\n    - enable content-negotiation, set html first, json second, fallback\n      to null. Results same as above.\nWithout bloating this, we've also tried it with extensions, with fallback,\nwith returning Views, not using the view and returning a Symfony\nJsonResponse etc.\nThere does not seem to be a way to have the FormatListener only apply to\nparticular controllers, at least not while using the @Template and @Viewannotations. It would seem to work when not using\n@Template annotation but just returning the response object (as said by\nW. Durand here http://stackoverflow.com/a/11984213). Is there any other\nway to set up configuration/code so that we can return html only for the\napplication and json only for the api, while using both annotations?\nCheers!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/335.\n. Hm, sounds like something that needs to be handled in the bundle if I understood the problem correctly. \n\nThe serializer just converts the data that it gets, it does not know about the context in which it is called.\n. No, more likely that json_encode does something.\n. It might be worthwhile to prepare a context which can then be modified by the user. This context could automatically be pre-populated with version information for example.\n. Yeah, this is because PHP7 does not yet have the xdebug extension, and cannot generated code coverage. You see this in the nightly job here: https://travis-ci.org/FriendsOfSymfony/FOSRestBundle/jobs/57321300#L272\nThe only solution at the moment is to not try to upload code coverage if a job cannot generate it.\n. I would also allow numbers here. For example, jQuery sends this callback \"jQuery171065827149929257_1343950463342\".\n. This is not necessary for prototypes.\n. This would apply to all firewalls, but since it is not enabled by default, I can't think of any negative side-effects that it would have right now.\n. Since the serializer itself is stateless now, I think you can remove this entirely.\n. ",
    "mvrhov": "or not. I had a typo in the controller :|\n. PR 121 which implements hal+json serialization in JMSSerializer bundle has a support for link metadata.\n. PR 121 which implements hal+json serialization in JMSSerializer bundle has a support for link metadata.\n. IMHO yes, I might make the separate PR for the links, but the implementation is not complete, and ATM even I don't know what else we are going to need to complete our app.\n. POST to /contact/1337/star will set the contact to primary this is wrong IMO it should be PUT.\n. Because the resource uri is known. When you use POST the resource uri is returned in Location header and it's different than the one used for POST\n. I'm going to go off topic, but [0-9.]+ regex is invalid for lat/long. For once you allow more than one ., secondly if your lat/long is supposed to be in radians, then you also have to take negative numbers into an account.\n. Yeah it probably belongs there, but it won't go through. You are not the first one requesting this feature, but it was always shoot down.\n. My PR was the first: symfony/symfony#1000, symfony/symfony#4202 is another one, but there are probably more.\n. Basically nothing new. M$ is still hampering the web development. :thumbsdown:\n. I thought that the link method was removed from http specs...\n. aha. I knew I was right, when I said it's not in the specs anymore, but I was unable to find proper RFCs\n. getName function in type returns form type name and not a from name. The fom name is specified when the form instance is created.\nAlso the from type names returned by getName are supposed to be unique.\n. @hradtke: You did see my implementation of hal+json on JSMSerializer bundle.. It's not up to date with the master, but it still works quite fine. Also there is another PR from another author which is supposed to be based on a master.\nEither way I don't care which implementation I'm going to use in the future but It has to support at lest what my PR does. \nNow regarding the json+hal it's not that hard I find it simple or at least my co-workers did. They had a C++ implementation quite quickly.\nNow there is one another format called siren and at a glance it really looks way more complicated than hal+json.\n. Does setting the \"jms/security-extra-bundle\": \"dev-master\", help. AFAIR I've done just that the last time I had a dependency hell problem.\nP.S I've not set any version for jms/di-extra-bundle the composer resolved this just fine from other dependencies...\n. We are also using separate kernels for api and www, but both applications are under the same git.\n. IMO: we should push to get the negotiation into the core for symfony 2.3\n. @lsmith77 it seems that I have fixed the issue. I don't know if we still need the patch in symfony.\n@hason: Will you remove the PR from symfony repo?\n. We had a bit different requirement. We just wanted a /api/users/me to automatically resolve to currently logged in user. This one was solvable by creating an event listener bound to kernel.controller event...\n. @pulse00 I had to had it already decoded to real user id. Also my controllers or actions to be exact don't know anything about security. \nAll the security happens before the action is executed.\n. Please do not omit the content type. Our client's depend on that even if the http code is 204.\n. We are not serializing arrays and what gets returned from doctrine is usually a (Persistent|Array)Collection or a null. Which work fine. now if you don't want to write the array serializer handler and contribute it to the JMS\\serializer, then you still has the option to assign your arrays to the ArrayCollection which should work just fine.\n. @stof: You are right the result is an array. I've forgotten that I'm making them a collections so I can pin a different metadata on them.\n. You should set the form name to '' when creating a form\n. The form name sets a \"namespace\" for the form so it knows where to take the data when binding. The same should apply to json.\nedit: This is the way symfony2 forms work. For more information you should take a look at the forms documentation.\n. The XML requires exactly one element at root by a definition. \n. Every browser should be able to decode such json because this is an java script defined escaping for unicode code points. Also AFAIK json_encode does this by default.\n. I still don't understand what exactly is a problem here? \n. Once again This is perfectly valid json. I suggest that you replace the decoder on the other side..\n. Guys if you need this so badly why don't you step up. I'm quite sure that lsmith77 would be glad to give the hints and help along the way.\n. I'm running an application on 2.2 RC2 and if works just fine. Also the resource is supposed to be a namespace! and not a php file..\n. I'd remove the .php from the resource. Then it should work.  If not, then try with a fully qualified controller class name.\nOn another hand my bundle configs are in xml so they probably won't help.\n. Just a little hint, if something weird will be going on it's PHP messing with you.\nI don't remember exactly what we were trying to achieve, but PHP was trying to being smart and was changing our output/http code when location header was being present.\n. Oh. Now I remember we wanted to have a Location header and 202 status code.\n. IMO you should connect with @willdurand and @adrienbrault. They have a library that currently supports json+hal and are looking into also supporting other formats.\n. This works just fine without param converters.\n. The symfony matches parameter names between the uri and the action. This is how it knows where to bind the values to.\nIn such cases I always name the first one id, and the second one idSomething\n. Sorry I can't help you there as we are not using Param converters. My suggestion would be to dig into that code/tests.\n. @lsmith77 done\n. @lsmith77 done\n. IMO this should go into the symfony\n. Why do we need.\n\"status\": \"error\",\n  \"status_code\": 400,\n  \"status_text\": \"Bad Request\",\nAll that information is already contained in response headers. And I really don't see the need to repeat it again.\n. @lsmith77:\nAs soon as i replied I remembered that this is the same way sf2 reports the errors. IMO we could differentiate from that as we provide a bit different set of features.\nMy opinion on this would be that we should provide both the new and streamlined way of reporting the errors and the old one. Without the old one a lot of us will be locked out of upgrading , just because the errors are being reported in a different format.\n. Sometimes there is just too much difference between two versions that having both in one controller would be impractical.\n. Are you sure, that the problem is not in your actual web server?\n. Are you sure, that the problem is not in your actual web server?\n. Oh well. The upcoming sf 2.5 broke the validator implementation.\n. Method override should NOT be part of a query string due to security considerations.\nEvery JS library can set custom headers so this shouldn't be a problem.\n. This PR broke the FOSRest for those using symfony ESI.\nThe fragment listener doesn't set the format.\n. Also.... This PR is all messed up... I've tried to do as suggested inside #896... But it doesn't work.\nThe $format is never set up... and thus the exception is thrown...\n. Yes this was in 1.5 RC. I've provided a fix. in a new PR\n. Done\n. @urville does it work for you?\n. Well the problem is that he has to set the form name to empty string. Empty from name must be set when form is created and not in getName method of the form itself.\nThen everything will start to work automatically.\n. @xabbuh: You tell me.. You are the original author of this :)\n@lsmith77 as stof said. Most are whitespace changes in symfony xsd. Now the code change copies the route definition from fosrest namespace to a symfony one. This step is needed only in xml.\n. done\n. That's interesting. The reason I do a clone is because without it, the infinite loop happens in PHP also.\n. I've removed the clone now and the length is stored into temp variable. Lets see what happens now.\n. It's not there by default because the bundle also works with default symfony serializer.\nYou should search old issues and read the docs, where this is documented.\n. It's not there by default because the bundle also works with default symfony serializer.\nYou should search old issues and read the docs, where this is documented.\n. I  think error_message would be better to message\n. Well if you use a jms serializer with BazingaHateoasBundle and a bunch of groups migrating to symfony serializer is not an option\n. in php 7 the speed difference is it's not that drastic anymore, spl is 50% faster in TTF\nand uses 50% less memory.\n~~Whats more interesting is that the results below are from a run on i7 6700. And the author run it on Core2Duo. 7 generations and only ~33% difference.~~ Sorry the first test was made with xdebug on.\nWell the memory consumption in recent versions is still pretty high, comparing to the original test\n```\nxdebug on\nSplObjectStorage:\nTime to fill: 0.063576936722.\nTime to check: 0.079049000000.\nMemory: 15121864\nArrays:\nTime to fill: 0.135654926300.\nTime to check: 0.055525000000.\nMemory: 30318672\n```\n```\nwithout xdebug\nSplObjectStorage:\nTime to fill: 0.034295082092.\nTime to check: 0.044715000000.\nMemory: 15121864\nArrays:\nTime to fill: 0.034868001938.\nTime to check: 0.020962000000.\nMemory: 30318672\n```\nSorry I had xdebug on on first test, the difference between generations is huge\n. The symfony does contain all the codes necessary and thus that class is gone in 2.0\n. I don't get it. Use master then.. Please use FOSOAUTHbundle for this functionality. Also this has nothing to do with this bundle.. This is working as designed. You either have to return the string or a array/object which will then get serialized in full in the response listener.. He probably has something in monolog turned on. Don't inject the services into the actions as the bundle doesn't support this.\nIMO it's better to inject the dependencies in constructor also this works since the beginning.. Don't inject the services into the actions as the bundle doesn't support this.\nIMO it's better to inject the dependencies in constructor also this works since the beginning.. You could also use class per action and __invoke, but then there won't be automatic route generation however it will work with constructor injection.. You could also use class per action and __invoke, but then there won't be automatic route generation however it will work with constructor injection.. Or just stop using it like that. Inject everything in constructor, or generate one class per action and again inject everything in constructor.. @bilel-noomene read my post from 6th December. @stof: Can You reiterate. I don't understand the question.\n. I've updated the description\n. ",
    "wowo": "Yeah, I saw ValidatorconstraintViolationList, but apperently serializer doesn't use it.\n. yes I will do it, that's way I closed this pull request\n. which version you are talking about?\n. branch made from wrong starting point...\n. ",
    "stof": "I would have used EventListener like Symfony and FrameworkExtraBundle\n. @johnwards the listeners listen at some events.\n. You are currently reverting the change made after beta3.\nTo use the bundle with beta3, use the version before the update to the new syntax.\n. git is a versionning system. so use a commit before the one named \"update listener config\".\n. Create a topic branch based on the upstream master and do the needed changes in it. And then, I think you should do a git reset --hard upstream/master in your own master branch to avoid having a messed one.\n. These 2 points are not FOSRestBundle issues but Symfony2 issues (in the HttpFoundation component). You should open the issue on symfony2.\n. the _method parameter allows to change the method of the request for POST requests (same for the X-HTTP-METHOD-OVERRIDE header). This is handled by the Request class so the router considers them as PUT or DELETE requests.\n. just use an older version of RestBundle\n. When working on a FOS bundle, you have to use the Symfony master branch :)\n. Thanks\n. I think this should not be added in FOSRestBundle but in a separate bundle as it can be useful for people that don't need FOSRestBundle.\nBtw, the bundle you linked is totally outdated (it still uses the implementation of DI extensions that was changed at the beginning of February). And it is not integrated with the Security component. So you should probably consider finding another bundle or writing our own.\n. https://github.com/mazen/EtcpasswdOAuthBundle is an implementation that was initially submitted to FOSUserBundle and is uptodate with Symfony (and the original PR has been stoffed :p)\n. https://github.com/mazen/EtcpasswdOAuthBundle is an implementation that was initially submitted to FOSUserBundle and is uptodate with Symfony (and the original PR has been stoffed :p)\n. I think so\n. @lsmith77 the real fix is to allow to unset values in the Configuration class.\n. @lsmith77 using ->canBeUnset(). In this case, the value will be removed from the array if the user set false.\n. note that you can also load the main file with the type rest by defining the type in your router configuration\n. @danielcsgomes the exception you get is inside SensioFrameworkExtraBundle, not inside FOSRestBundle. and it seems like you use an outdated version of SensioFrameworkExtraBundle as getTemplate is not used at all in the TemplateListener.\n. @breerly it seems like you updated the Gedmo extensions to their latest version without reading the upgrade information: this annotation has been dropped when refactoring the Sluggable extension. So either use the 2.1.x tag of the extensions, either update your entity to the new way to configure the behavior. And this is not related to FOSRestBundle\n. @lsmith77 the Translator service is always defined. You simply receive an identity translator (doing what the current implementation does: a simple str_replace for the params) when you don't activate the real one.\n. open the issue on the good repo. The failing test is not in FOSRestBundle but in JMSSerializerBundle\n. Does it still support using the core implementation or is JMSSerializerBundle mandatory after these changes ?\n. Does it still support using the core implementation or is JMSSerializerBundle mandatory after these changes ?\n. is the exception controller covered by some tests ?\n. is the exception controller covered by some tests ?\n. Btw, many license headers are now missing.\n. Btw, many license headers are now missing.\n. One thing I would like to know is why people outside FOS use the FOS namespace instead of their own one.\n. You may need to update the Metadata library to its master branch instead of the 1.0.0 tag.\n. is the current doc about routing and subresource routing enough to close the issue or is something else needed ?\n. is the current doc about routing and subresource routing enough to close the issue or is something else needed ?\n. You can only use name_prefix in a file loaded by the rest loader. So you need to add type: rest for this file.\nNote that it can also be done for the main routing file in the configuration, along the file name (but take care that routing.yml is not the main routing file in dev but a file imported from routing_dev.yml)\n. @lsmith77 The issue is that the request attributes are initialized by the ControllerListener of the SensioFrameworkExtraBundle and it seems like the ViewResponseListener runs before it. So the annotation will not work because of the check\n. @lsmith77 any news here ?\n. @dustin10 ping ?\n. @dustin10 ping ?\n. there is a form.csrf_provider service used to generate the token. Simply take care to use the same \"intention\" than the form do (which is configurable as an option of the form)\n. Reading #69, a solution to avoid putting all logic in the same action when using ?edit could be to use a kernel.controller listener (with a high priority so that later listener know about the modified method) to change the action to the appropriate method. This would obviously work only for object controllers, not for closures (so no Silex support for this for instance), but it is already the case for all the routing part IIRC\n. Reading #69, a solution to avoid putting all logic in the same action when using ?edit could be to use a kernel.controller listener (with a high priority so that later listener know about the modified method) to change the action to the appropriate method. This would obviously work only for object controllers, not for closures (so no Silex support for this for instance), but it is already the case for all the routing part IIRC\n. @jonathaningram it is not the same example. You use the same variable name in the route and in the mathod. In this case, the param converter will not do anything as the variable already exists.\n. @lsmith77 here, nothing special as the param converter already works with FOSRestBundle when writing things properly (the issue in the original report was that FOSRestBundle was not used for the route and the issue later was that the ParamConverter was not used properly).\nHowever, what could be done is bother @fabpot to review (and hopefully merge) the refactoring done by @henrikbjorn in https://github.com/henrikbjorn/FrameworkExtraBundle/commit/52b1c99d35e214a149b021728b380e1758cba9ba to allow using the DoctrineParamConverter several times on a route.\nBtw @henrikbjorn is there a PR for this ? I haven't found it\n. I don't think so because the typehint is not the same.\n. and wit this change, I think you have the same error in Symfony 2.0 (but the opposit for servoces)\n. the version packaged with the SE is the 1.0 version of JMSSecurityExtraBundle which does not have PreAuthorize.\nThe issue here is that JMSSecurityExtraBundle replaces the controller by its generated class meaning that it will probably break all listeners using the kernel.controller event (it only works with SensioFrameworkExtraBundle because it provides a listener replacing the listener of SensioFrameworkExtraBundle to support its changes).\nSo the improvement probably need to be done in JMSSecurityExtraBundle /cc @schmittjoh \n. @schmittjoh this PR could fix it for this case but the replacement of the controller by JMSDiExtraBundle means that you break every listener on kernel.controller expecting to read annotations on the controller or similar stuff as they don't get the original one but a generated one.\n. @schmittjoh using AOP seems overkill here. the listener simply reads an annotation on the controller and sets a request attribute when it exists\n. @mailaneel FOSRestBundle has its own annotation to register routes. @Route is from SensioFrameworkExtraBundle and so uses a different loader.\n. @lsmith77 I think about a possible way to do this but not sure it works: keeping the different composer.lock file somewhere in the test folder, and then copying the needed one before running the composer.phar install command. @Seldaek could it work ?\n. @lsmith77 the 2.0.9 release broke some of the composer installs as the tag was not created in the subtree splits when creating them in the main repo.\n. This broke the tests\n. @lsmith77 the testsuite should probably use the symfony repo to avoid issues when running the testsuite. but putting it as the dependency seems wrong as it would imply dependencies to Swiftmailer (and Doctrine in 2.0) as it has the requirements of all replaced bundles.\n. @lsmith77 you probably should write it in bold at the very beginning of the readme\n. the branch 2.0 in the bundle does not exist anymore as it was totally messed. We started to use version numbers for the bundle instead of using Sf2 ones and there is now a branch for a 0.6 version of the bundle which is compatible with Sf 2.0\n. It is a branch, not a tag. So it is version=origin/0.6\n. the issue is that the parameter is not defined yet: the resource is loaded first, and then imported with a prefix\n. @everzet they can contain placeholders in 2.1\n. @lsmith77 all FOS guys are owners and so have access to all repo. The additional team are only there to get notifications\n. @asm89 github tells me it cannot be merged automatically. Seems like you need a rebase\n. @asm89 yep\n. does the QueryParam stuff depend on FrameworkExtraBundle currently ?\n. does the QueryParam stuff depend on FrameworkExtraBundle currently ?\n. @grEvenX The bundle does not change the request attributes, and so will not change the params available for the method arguments.\n. it would duplicate the param in 2 parameter bags (query and attributes). I don't think it is a good idea\n. @lsmith77 As I already said a while ago, I think you should add an interface for the QueryParamReader and use it in the typehints, to allow people to replace the implementation if they want.\n. probably both :)\nBut I was talking about the reader first, thus allowing people to write an implementation reading from elsewhere than annotations if they don't like annotations\n. probably both :)\nBut I was talking about the reader first, thus allowing people to write an implementation reading from elsewhere than annotations if they don't like annotations\n. There is one issue here (and probably also in the other implementation in fact): the query fetcher depends on the request and the controller so it will currently be broken if a controller does a subrequest. You need to put it in the request scope\n. There is one issue here (and probably also in the other implementation in fact): the query fetcher depends on the request and the controller so it will currently be broken if a controller does a subrequest. You need to put it in the request scope\n. in fact, only here. The service definition you removed had the scope\n. in fact, only here. The service definition you removed had the scope\n. @lsmith77 it is called for every request. But if someone does a subrequest inside a controller, he will not be able to use the query fetcher anymore in the main request as it will now contain parameters passed to the subrequest\n. @lsmith77 it is called for every request. But if someone does a subrequest inside a controller, he will not be able to use the query fetcher anymore in the main request as it will now contain parameters passed to the subrequest\n. The loading is not a bundle alias syntax but a FQCN (which also explain why / does not work)\n. There is 2 things here:\n- the doc is wrong as it changed to POST a while ago IIRC\n- you can use the method you want if you send $_POST['_method'] thanks to HttpFoundation\n. @lsmith77 should this be merged ?\n. The issue you get here is logical for one part: you are adding the prefix on the ProduitAdminController which is used as a subresource and so the prefix is added on the subresource. I find it a bit weird not to have the prefix applied also at the beginning though.\nthe simplest way to apply the prefix for the whole api is probably to define it when importing the routing of the api:\n``` yaml\napp/config/routing.yml\ncartes:\n    resource: \"@FastcookCarteBundle/Resources/config/routing/cartes_routes.yml\"\n    type: rest\n    prefix: /admin/carte\n```\n. The issue you get here is logical for one part: you are adding the prefix on the ProduitAdminController which is used as a subresource and so the prefix is added on the subresource. I find it a bit weird not to have the prefix applied also at the beginning though.\nthe simplest way to apply the prefix for the whole api is probably to define it when importing the routing of the api:\n``` yaml\napp/config/routing.yml\ncartes:\n    resource: \"@FastcookCarteBundle/Resources/config/routing/cartes_routes.yml\"\n    type: rest\n    prefix: /admin/carte\n```\n. The doc is versionned with the code so I think it is a bad idea to have doc for different code versions in the branch containing one version of the code.\n. I added a second link in the readme to the 0.6 doc instead of always linking to the master doc\n. @asm89 you should add a new section in the UPGRADING file\n@lsmith77 as it is a BC break, it should probably not be merged in the 0.6 branch\n. @lsmith77 is it really a good idea ? Currently, the resource is not a path but a class name, so the shortcut notation for paths would be more confusing than helpful IMO\n. @tecbot which other HTTP method would you use ? According to the HTTP spec, PATCH is the way to go. Using POST is a workaround for cases where PATCH is not supported properly\n. @tecbot which other HTTP method would you use ? According to the HTTP spec, PATCH is the way to go. Using POST is a workaround for cases where PATCH is not supported properly\n. Hmm, actually, PATCH does not appear in HTTP 1.1: http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9\n. Hmm, actually, PATCH does not appear in HTTP 1.1: http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9\n. @sescandell the master branch of FOSRestBundle is for both Symfony 2.0 and Symfony 2.1.\n. @sescandell the master branch of FOSRestBundle is for both Symfony 2.0 and Symfony 2.1.\n. Btw, there is no 1.x branch at all\n. Btw, there is no 1.x branch at all\n. @asm89 the hosting provider not supporting it being the AWS load balancer, I fear it could impact other people. But indeed, I don't need it anymore myself.\n. and anyway, this was not removing PATCH entirely: it was still possible to force using PATCH by naming the method patch*Action. So closing this PR\n. And please follow the Symfony2 coding standards for the code.\n. @orfin many more CS violations are left in your code. Most of them can probably be fixed by running the PHP-CS-Fixer on your file.\n. such array is impossible to build as soon as you have a placeholder in the route\n. I would move the extraction logic to a class (implementing an interface to allow replacing the implementation if someone wants to get the data from elsewhere than the router) that uses the ConfigCache to cache the data. And then, the listener would only get the values from it without bothering about the way the class caches it. The current implementation does not allow to use the ConfigCache as it splits the handling of the cache in 2 different places.\nAnd then, the cache warming is easy: trigger the logic in other class (which could implement the CacheWarmerInterface itself to avoid adding another class, but this should not be its primary interface)\n. The interface indeed looks like what I thought about. but the caching should be done in the router loader itself as it is the only place where you can have a powerful caching, taking care of the resources. A wrapper around another loader simply cannot have enough data to refresh the cache in dev.\n. @borisguery the routing resources. Look at the ConfigCache. If you don't pass the resources when writing, it will never refresh itself, even in debug mode. And this would mean that you would have to clear your cache manually in dev each time you do a change in the routing (which is exactly what we want to avoid)\n. Well, AllowedMethodsLoader is a good idea, but it should either be directly in the bundle root, or in Request. Definitely not in EventListener. @lsmith77 thoughts ?\n. I did a few comments about consistency in the way we fix the CS, but otherwise it is fine (once rebased)\n. I see another issue: currently strict is used for 2 things: invalid values, and missing values. This makes it impossible to handle the case of partial updates: in such case, I want a strict mode for invalid values but I still want the value to be optional (btw, in your NelmioApiDocBundle, you force all param to be optional in the documentation of PUT requests, which does not match the behavior of the code at all).\n. removeUserAction is not the route responsible to delete a user, but the route responsible to display a form to the browser to allow deleting it (as a browser cannot have a direct link to a DELETE action). If your API is only meant for real HTTP clients, you don't need this action at all.\nThe DELETE action is deleteUserAction.\n. removeUserAction is not the route responsible to delete a user, but the route responsible to display a form to the browser to allow deleting it (as a browser cannot have a direct link to a DELETE action). If your API is only meant for real HTTP clients, you don't need this action at all.\nThe DELETE action is deleteUserAction.\n. we should indeed require common >=2.2\n. @asm89 the routing component can handle any method: it simply compares the _method requirement to the request method. You could use the FOOBAR method if you manage to send it :)\n. isn't it a BC break ? From what I see, the current behavior is achieved by using rest_class as type whereas the current type is rest\n. isn't it a BC break ? From what I see, the current behavior is achieved by using rest_class as type whereas the current type is rest\n. nvm, I misunderstood the behavior before looking at the example\n. nvm, I misunderstood the behavior before looking at the example\n. @everzet Allowing to omit the resource name from the methods, thus allowing to implement these methods using traits (or using a base class) for different controllers.\n. @everzet Allowing to omit the resource name from the methods, thus allowing to implement these methods using traits (or using a base class) for different controllers.\n. @pierrre if you don't like the generated pattern, you can always change it by adding the @Post annotation to give a pattern explicitly.\n. @pierrre if you don't like the generated pattern, you can always change it by adding the @Post annotation to give a pattern explicitly.\n. It was already open at the same time than this issue: schmittjoh/JMSSerializerBundle#158\n. you can already, as there is a generic @Rest\\Route() allowing to set any method (the other ones are just shortcuts for it setting the _method requirement) :)\n. you can already, as there is a generic @Rest\\Route() allowing to set any method (the other ones are just shortcuts for it setting the _method requirement) :)\n. arf, indeed.\nHmm, this also means it is impossible to allow several methods for a route (except by allowing all of them). this looks bad.\n. arf, indeed.\nHmm, this also means it is impossible to allow several methods for a route (except by allowing all of them). this looks bad.\n. Update FOSRestBundle. this error should be fixed in the master branch\n. it is not about friendsofsymfony/rest but about friendsofsymfony/rest-bundle\n. you also need to update the code calling it.\n. you also need to update the code calling it.\n. already fixed in #286 (and properly, not breaking the code)\n. already fixed in #286 (and properly, not breaking the code)\n. @ericclemmons you can simply reference 0.10.* and allow the dev version\n. @lsmith77 travis disagrees :)\n. Well, how are you using your decoded array in your controller ?\n. @rickard2 the checkbox type in the Form component is not considering whether the value is true or false but whether it is set or no as this is how checkboxes work\n. @rickard2 I think you have to create it yourself\n. If you send the data as form-urlencoded, the right way to send an unchecked checkbox is to omit it, not to send it with false as value.\n. @Fraktl If you implement a REST api, the input should be in json IMO, not form-urlencoded. The form encoding is not good enough for it (the case of a checkbox is a good example as only checked ones are submitted)\n. are you using the new lock file format or the old one ?\n. The reason of your bug when running composer install is that the branch alias has changed in FOSRest after it was locked. This was a known issue in composer which has been resolved with the new format for the lock file (storing much more information about the locked packages).\nTo solve your issue, run composer self-update to get the latest version and then regenerate your lock file with the new format (using composer update)\n. As your autoloading is using Composer, why don't you simply use composer to manage FOSRestBundle too ? It would then handle the autoloading for you\n. You should require a range instead of a fixed version: 0.9.*\n. @boby733 As FOSRestBundle depends on JMSSerializerBundle, you need to register it in your kernel too\n. you don't need to specify the JMSSerializerBundle in your config (it is already installed as a dependency of FOSRestBundle). You only need to add it in your kernel.\n. you should be typehinting the interface, not the class\n. did you add the use statement for the interface ?\n. @lsmith77 __get will not work because of the AnnotationReader validation IIRC (except if it breaks the validation entirely by making it accept any property)\n. @pmartelletti your use case seems weird to me. If your controller wants to call a rest action to do the work, you are probably putting the logic in the wrong location. You should move the shared logic to service called by both controllers\n. @pmartelletti yes, that's what I'm suggesting. Both controllers should call the service to handle the business logic\n. @lsmith77 But then, it should still not be done using a subrequest passed to the kernel (it would not trigger your reverse proxy as it stays behind it). If you want to benefit from the cache of your API, you have to do a real HTTP request to it (which means you consider your API as an external webservice and build your app in a distributed way)\n. The POST route should be pointing to api/users, not to api/user\n. @comensee if you rely on the ClassResourceInterface feature, you should implement the interface in your class. Implementing it in the abstract class was forcing people to rely on it, forbiddign to reuse only the base class for its helper methods\n. you can create forms with an empty root name, which is what you need here.\nBtw, both format are Rest-full compliant. REST does not define how your representation should look like.\n. And they cannot be null either.\n. @marcospassos third option, define your non-REST routes in a different file than your REST route, and put the default format on the import (works as of Symfony 2.1)\n. this is wrong. The master branch of the bundle is now using JMSSerializerBundle 1.0 instead of 0.x (use the released versions of the bundle to use it with stable JMSSerializerBundle). And the JMS\\SerializerBundle\\Serializer\\Serializer`` class does not exist anymore in the new version as it has been moved\n. JMSSerializerBundle is no longer marked as a required dependency of FOSRestBundle as it was in fact possible to sue the Symfony Serializer component instead. So now, you have to add it in your composer.json if you use it\n. @lsmith77 you should add@Target(\"METHOD\")in its phpdoc so that the annotation reader enforces it: https://github.com/doctrine/doctrine2/blob/master/lib/Doctrine/ORM/Mapping/PostPersist.php#L24\n. and you should move it before the private method\n. @j The is not the job of the ODM. Handling the user input to update the object requires validating it (because you can never trust the input) and often involves transforming it (the JSON input will never be a\\DateTimeinstance for date fields for instance). All these tasks are exactly what the Form component does.\nAnd if you look at the implementation of the Symfony Form component, the only part really tied to forms are the templates doing the rendering (and some types for which the implementation comes from the way HTML form types work). 80% of the Form component is in fact a DataBinder component, binding an array of data (coming from$_POSTfor forms but it can come fromjson_decode($requestBody, true)`) to an object (your entity).\nSimpleThingsFormSerializerBundle is implementing exactly this, and also the other way (but the serialization of an object graph using a form is far slower than when using JMSSerializerBundle)\n. it depends which version of JMSSerializerBundle you use. 1.0 does not need the argument anymore\n. This is not needed anymore in JMSSerializerBundle 1.0, so the doc is not wrong.\n. your issue is the minimum stability as jms-serializer 1.0 is not stable yet\n. 1.0 is not released yet\n. @nmeirik The latest version of this bundle requires the dev version of JMSSerializerBundle when you want to use the JMSSerializerBundle integration. If you want to use only stable versions, use the older release of the bundle\n. @highroller ->findAll() is not indexing results by id. Are you overwriting it in your repository\n@mvrhov please don't give wrong informations. Doctrine ORM query results are always arrays. collections are used only for relations in entities (or when using the Selectable interface)\n. toArray on what ? and if you overwrite the method, you should keep the same behavior, i.e. returning a numerically indexed array. Otherwise, you are likely to cause some issues in other part of the code expecting the standard behavior.\nIf you want to index by id, use a custom method name instead of findAll.\nand btw, array_values is your friend here.\n. It is not a bug. Encoding unicode chars is perfectly valid in JSON.\n. none of your examples above are decoding something. Each time, you were pasting the json string, not the decoded data.\n. Well, as the order of patterns is meaningful for the router, sorting names in descending order could also lead to issues. What we bother about is not the order of names\n. The fos-rest package allows Sf 2.2 in its dev version. @lsmith77 You should probably create a new tag in it.\n. @lsmith77 fos-rest was incompatible with 2.3 (which I fixed). I haven't checked the bundle itself\n. @Elexy See http://getcomposer.org/doc/05-repositories.md#vcs\nIf you want to use a local clone, simply remember that the git repo itself in the .git folder, not the working directory, and it will work.\n. it is not about getting around it. If you don't have JMSSerializerBundle in your project, you need to configure a serializer in your project and tell FOSRestBundle about it. You should now be getting an exception explaining you that you need to configure the bundle before being able to use it.\nAnd if your issue is not about the JMSSerializerBundle dependency but about another one, please open a separate discussion. The problem reported in this issue has been fixed\n. @lsmith77 dev-master as 2.2 ?\n. @lsmith77 it may break the support of 2.0, but it is OK IMO as it is EOLed. You should simply create a tag with the latest version compatible with 2.0 before bumping the requirement.\n. As you can see in the Configuration class, this is handled by using code and message tags:\nxml\n<config xmlns=\"http://example.org/schema/dic/fos_rest\">\n    <exception>\n        <code name=\"Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException\">404</code>\n        <code name=\"Doctrine\\ORM\\OptimisticLockException\">HTTP_CONFLICT</code>\n        <message name=\"Acme\\HelloBundle\\Exception\\MyExceptionWithASafeMessage\">true</message>\n    </exception>\n</config>\n. be careful. It has been merged only for Symfony 2.3 (yeah, SensioFrameworkExtraBundle maintains 3 separate branches with a compatible code base in all of them, except the composer constraints)\n. This looks like a bug in Symfony. The container scope should be considered as parent of any scope.\n. What is the name of your UserType ? It is used as default value for the form name, and your code will work only if the form is named user\n. @dupuchba createForm uses the type name to create the name of the form. To force the name of the form to whatever you want, use $this->get('form.factory')->createNamed($name, $type, $data) instead of $this->get('form.factory')->create($type, $data) (which is what the createForm shortcut does)\n. @dupuchba what is the command you are using to run the tests\n. hmm wait, you are running the testsuite with FOSRestBundle in your dependencies ? this is exactly what @lsmith77 identified: you are not running the FOSRestBundle testsuite. You are running the FOSRestBundle tests as part of your own testsuite\n. Well, from what I see in the stack trace, you are trying to serialize your logger, which contains a resource and so cannot be serialized.\nIt is because you are serializing a Doctrine\\ODM\\MongoDB\\LoggableCursor which contains a reference to the Connection which itself contains the logger\n. Well, from what I see in the stack trace, you are trying to serialize your logger, which contains a resource and so cannot be serialized.\nIt is because you are serializing a Doctrine\\ODM\\MongoDB\\LoggableCursor which contains a reference to the Connection which itself contains the logger\n. I think the read part can already be achieved using FSCHateosBundle and JMSSerializerBundle (and returning the appropriate data in your controller). the update part requires work as the json patch format needs to be parsed and converted into an update of the object.\n. I think the read part can already be achieved using FSCHateosBundle and JMSSerializerBundle (and returning the appropriate data in your controller). the update part requires work as the json patch format needs to be parsed and converted into an update of the object.\n. :+1: \n. @lukeman83 no it is not. the firewall pattern: ^/ should be the last one as it is a catch-all (any firewall placed after it can never been reached)\nHowever, wsse_secured and api firewalls should be combined together as they have the same pattern (you cannot trigger 2 firewalls for the same url so api can never be reached to authenticate on the API using OAuth).\nAnd oauth_authorize may not be necessary as authenticating for this url can be done by the main firewall (which is already the case currently btw because of the order)\n. However, it is weird to extend the base controller class when defining it as a service as this base class is not meant to be used as a service. Btw, your service definition is wrong. It misses the call to setContainer to initialize the base controller.\nand when using your controller as service, you need to modify your routing to reference the controller as service (see the official doc)\n. your class in the file is project\\MainBundle\\Services\\MySecurity\\MySecurity, not project\\MainBundle\\Services\\MySecurity because your naemspace is wrong (as said by the error message btw).\nand if you want to get it from the container, you don't need to create a wrapper around security.context. You can get it directly.\n. Well, maybe you are anonymous. Your firewall allows it. And in such case, $user will be a string.\n. I have no experience with WSSE. I suggest you check your logs to see where the authentication failed\n. I don't think NoRoute makes sense at the controller level. If you don't want any route on the controller, don't import it as type rest\n. The serializer settings should be nested into view as they are related to the View part of the bundle, not to a separate serialization part\n. and it should be exposed through the semantic configuration\n. ah, @tystr was faster than me at writing the answer.\nOn a side note, your generateUrl is weird. If you want to set the format to json, you should pass the _format placeholder when generating, not appending .json at the end after the generation.\n. content-type: \"*/*; charset=UTF-8\" seems an invalid request. */* is not a content-type.\n. Use the HTTP method override using the _method POST parameter (remember that it needs to be enabled explicitly in the Request object as of Symfony 2.2)\n. Use the HTTP method override using the _method POST parameter (remember that it needs to be enabled explicitly in the Request object as of Symfony 2.2)\n. @bburnichon the Location header can only be set with a 201 status code or a 3xx one. This is the HTTP spec defining it. As PHP implements it properly on this point, it sets the status code to 302 if you set a Location header with another status code\n. $this->routeRedirectView('get_entity', compact('id'), Codes::HTTP_NO_CONTENT); is still not right as 204 is not a valid redirection status code\n. Symfony used to do this in the Response and then removed it because it was breaking everything when the webserver is using chunked encoding (as the content length will be different in this case)\n. Symfony used to do this in the Response and then removed it because it was breaking everything when the webserver is using chunked encoding (as the content length will be different in this case)\n. thanks\n. thanks\n. @Chrysweel $view is an instance of this class\n. setSerializerGroups does not exist anymore in the latest version. You need to use the SerializationContext.\nAnd this SerializationContext has a setGroups method (defined in the parent Context class as it is also used for the deserialization).\nand by reading your JMS Serializer issue, you already know how to create this context as you did it in the code snippet you pasted in the issue: SerializationContext::create()->setGroups(array('list'))\n. @lsmith77 As 2.1 reached its end of maintenance already, I think it is fine\n. @konradpodgorski Optional dependencies means that you need them only when using some features of the bundle (the features using them) but not all the time. Putting them in require would force every user to download them all the time even when they don't need them at all. If all libraries are doing it, it means you get quickly lots of code you don't use (but you still need to download it when deploying).\nAnd even if you run your app in a dev setup locally, you will notice the missing requirements. require-dev has an impact only for the root package. It is totally ignored for others. So the FOSRestBundle dev requirements are used only when FOSRestBundle itself is the root, i.e. when developing the bundle itself (to run its testsuite)\n. @willdurand children is not useless as a form with children can also have errors attached to itself instead of to children; In this case, you would have a key errors containing an array (which would look weird with the top-level errors key btw)\n. @willdurand As you can have several levels of nesting inside your form, it can still look weird\n. name_prefix can only be used in files loading with the rest type themselves as it is a feature of the RestLoader\n. @merk The point is that when doing a JSON response after a creation, you don't want to redirect to the location of the created element but only return a 201 status code with the location of the new element.\n. @merk The point is that when doing a JSON response after a creation, you don't want to redirect to the location of the created element but only return a 201 status code with the location of the new element.\n. However, I agree that both classes should behave in a consistent way\n. However, I agree that both classes should behave in a consistent way\n. @lsmith77 see https://github.com/symfony/symfony/issues/8976\n. @lsmith77 see https://github.com/symfony/symfony/issues/8976\n. @willdurand Would it be really longer than 2 route definitions duplicating everything except the controller ? I don't expect the controller map to contain tens of entries\n. @adrienbrault this would work if you have the version as a placeholder in the url (and you don't need anything special for it as the routing component alone can handle it). the goal of this PR is to select the version based on the Accept header, not based on some URL placeholder.\n. @iagomez Yes it is related. As this has been merged, you can update FOSRestBundle to its dev version and it should work with 2.3.5\n. @liuggio I don't think it is. Limiting the methods of the interface being mocked does not make sense. A mock of an interface needs to mock all methods\n. QueryParam means that you want to have user as a query string parameter, so it should indeed not be part of the url path anymore\n. otherwise it is a regression in Composer\n. I reported it to composer: https://github.com/composer/composer/issues/2626\nI haven't had time to dig into the issue itself yet.\n. I reported it to composer: https://github.com/composer/composer/issues/2626\nI haven't had time to dig into the issue itself yet.\n. well, it is valid JSON. JSON does not enforce using an array or object only as main value. Try json_encode('2') and you will get exactly \"2\".\nHowever, a scalar value cannot be decoded into the parameter bag.\n. I don't see where the spec restricts the value being encoded.\nand being able to encode scalars into JSON is not specific to PHP. Try in JavaScript: JSON.stringify('2')\n. This is indeed wrong. useAttributeAsKey marks the array as associative (and defines which XML attribute contains the key as it cannot be the tag name in XML). This array node is not an associative array. Closing this as invalid\n. This is indeed a mistake. Can you send a PR fixing it ?\n. And for returning json here, I don't think it is a good idea. It is not the same content type (a JSONP response is JS, not JSON)\n. @lsmith77 since Symfony 2.2, the security component provide a translation key for its exception, with a message which is safe to be displayed (i.e. not leaking infos about table names because of a bad SQL query). For them, it would make sense to use this message and to translate it: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Exception/AuthenticationException.php#L68-86 (the translations are available in the security domain)\n. @lsmith77 since Symfony 2.2, the security component provide a translation key for its exception, with a message which is safe to be displayed (i.e. not leaking infos about table names because of a bad SQL query). For them, it would make sense to use this message and to translate it: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Exception/AuthenticationException.php#L68-86 (the translations are available in the security domain)\n. the second argument of controller() defines request attributes, not request query parameters\n. the file using the name_prefix needs to be loaded with type: rest too, as the name prefix is a feature of the rest loader\n. type: rest is about choosing the right loader to process the imported resource. So this means that Acme\\DemoBundle\\Controller\\DemoController will be loaded by the RestLoader.\nname_prefix: api_v1_ is a feature of the rest loader though, not of the Symfony routing loader system. So this means that it can be used only in files which are themselves loaded by the RestLoader.\nThis means you have 2 types involved here:\n- the type of the imported resources\n- the type used when importing the current file (which is defined by the place importing the current file)\nyour app/config/routing.yml file does not define the type when importing @AcmeDemoBundle\\Resources\\config\\routing.yml, so this bundle routing file will be loaded by the normal Yaml loader, not by the FOSRestBundle Yaml loader.\n. what is the result of such setup currently ?\n. @gnat42 yes:\n``` yaml\napp/config/config.yml\nframework:\n    router:\n        resource: '%kernel.root_dir%/config/routing.yml'\n        type: rest\n```\nNote that if you use the AsseticBundle controller, you will need to update to the the latest dev version of AsseticBundle because there was a bug in AsseticBundle breaking the usage of the type for the main routing resource\n. @adrienbrault I disagree as well. The main feature of the Form component is data binding. If all you need is validating data, binding a form is useless overhead (and not negligeable overhead). It is better to run only the validator in such case\n. Well, given that the requirement is a regex, applying preg_quote is indeed wrong\n. annotations have never been meant to work as @Constraints\\NotBlank({\"message\": \"my custom message\"}) but as @Constraints\\NotBlank(message=\"my custom message\").\nYour syntax is passeing an array as param to the constraint, with a message key in it. This param gets set in the default property of the constraint\n. The issue is that \\L is a special char in YAML double-quoted strings: https://github.com/symfony/Yaml/blob/master/Escaper.php#L40\nSo you have 3 solutions:\n- escape the \\ properly in your YAML\n- use single quotes instead of double quotes for your value\n- use an unquoted YAML value\n. Are you using the ExceptionController provided by FOSRestBundle or the default one provided by TwigBundle ?\n. @lsmith77 technically, it can be considered a BC break as the validator needs to enabled in FrameworkBundle. The changelog should mention it\n. @lsmith77 I would need to understand the purpose of this listener first. I don't know what it was designed for:\nIf the goal was to prevent the redirection to the login form for people using the same firewall for the web and the API, I know what the issue is: the listener in Symfony Security is checking the current exception or any linked exception (the reason was to be able to handle security thrown inside Twig because of the wrapping in a Twig_Error_Runtime). Given your listener sets the AccessDeniedException as the linked exception of your new instance, the listener of the security component handles it again after your own. Changing the priority to run after the listener of the Security component would not prevent redirections to a login form (running too late). The only way to fix it would be to avoid linking the exception in the new one.\nIf the goal is to handle the case of API-only firewalls which don't have to redirect at all, this should not be handled by a custom exception listener at all but using the listener shipped in the component to call an appropriate entry point (i.e. not the entry point redirecting to a login page). In this case, the listener here will indeed hurt you (and changing the priority is only part of the fix, as it will not be called anymore for these exceptions as they will be covered by the previous listener).\n. OK, so it seems that the use case is to handle the case of firewalls covering both the web interface and the API. This means that this PR is the wrong fix (it simply makes this listener useless by putting it at a priority where it will always consider that it has nothing to do).\nSee my previous comment about the actual way to make it work.\nThis listener would deserve adding some functional tests to ensure its behavior (and better documentation about its goal).\n. Well, the fix is not complex. It could go in 1.5 (writing functional tests would take more time). But in any case, this PR should be rejected, as it is not the right approach to the fix.\n. what is taking time here seems to be the JMSSerializer, not the ViewListener itself, so you should report it to the serializer project. (the ViewListener appears as a long time as well, because it is the caller of the serializer).\nThe first think to check for the serializer is whether the metadata cache is configured (and already has the data at the time you look at the time as an empty cache will not help)\n. The issue here is that your form is created with a root name equal to the name of your form type (it is the behavior of the createForm shortcut). So your method currently expects the following data (assuming the name of your form type is my_entity):\njson\n{\n    \"my_entity\": {\"name\":\"Hello word\",\"description\":\"I am a hello word\"}\n}\nIn an API, you generally don't want to have a root name on the form. Doing it requires passing the name of your form explicitly (and empty string in this case) instead of relying on the default convention:\nphp\n$form = $this->get('form.factory')->createNamed('', new entityType(), $entity);\n. be careful when using entity as your type name. this name is already used by a core type, so it will cause weird bugs.\nIs the result exactly he same when changing the code according to my comments, or is there some difference ?\n. can you check the value of $form->isSubmitted() after the call to handleRequest() ?\nalso note that my 2 code blocks are exclusive. Changing both the submitted data and the expectation will not work (the issue will be the same in the opposite way). You should either submit the data with the top-level key, or tell Symfony that you don't want it, but not both\n. it cannot be empty. It is always true or false (quick reminder, print_r is not a good debugging function, as its output can be the same for many different values)\n. @lsmith77 it is caused by https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/EventListener/ParamFetcherListener.php#L57\nThe logic is not tied at all to the controller typehints\n. This is wrong. the bundle can be used without JMSSerializerBundle, by configuring a different serializer.\nThe proper fix is to enhance the configuration to use the JMS serializer as default only when the bundle is registered.\n. This is wrong. the bundle can be used without JMSSerializerBundle, by configuring a different serializer.\nThe proper fix is to enhance the configuration to use the JMS serializer as default only when the bundle is registered.\n. well, your rest_api firewall will never be used, as it is after the main firewall which will always match. This means that your API is secured through the stateful form_login auth, not through http_basic.\n. yes. The order is important.\n. this is because 1.3.1 is 2 months old, and you are reading the doc of master, in which this has been added. the ArrayNormalizer configuration is a 1.4 feature (not yet released)\nIn general, you should always read the documentation at the same revision than the code you use (or at least check it at this revision in case something does not work as documented to be sure it was already documented the same way at the time the code was written).\n. this is because the index of the first element in your array is 1, not 0, making it an associative array, not an indexed array. This is why json_encode turns it into a JSON object to keep the 1 key\n. ensure that your array is indexed properly if you expect getting a JSON array (you can use array_values to force it if you don't control the building of the array)\n. I think it does not really make sense to overwrite the request method through the request content when using a JSON or XML content type. Overwriting the request method through the content is a workaround to allow sending a DELETE/PUT request in browsers where it cannot be done with a real request (for form submissions in all browsers and for ajax request in IE8) and the ehader overwirte does not work either (for form submissions).\nAs of Symfony 2.2, this feature is disabled by default because it implies a CSRF issue if you don't protect all these methods with a CSRF token.\nIMO,, an API does not need this body method overwrite at all. It does not make much sense. If your API client is not able to perform a PUT or DELETE request and cannot set headers in the request either, you should better change your HTTP client.\n. @SimonSimCity Firefox is a web browser, not an HTTP client. When visiting pages and submitting forms, it is indeed a bad client (like all other browsers)\nAnd when using Ajax request (for which browser provide an HTTP client), you can use the header override instead of the body override to set the method, which will not be affected by the body decoding.\nThe body override is useful only when you use a form submission in the browser (for which you cannot set headers).\n. well, like any other case using the Symfony security system: getting the user from the security context.\n. 'format' => DateTimeType::HTML5_FORMAT is already the default in the datetime type. I'm not sure introducing a new form type just for the sake of changing the default widget type to single_text is worth it\n. But this form type would have nothing to do with REST (the name restdatetime has no meaning for it btw).\nAnd I'm not sure shipping it in a public bundle is a good idea. This datetime has exactly the same feature than datetime. It just have a different default value. People are still able to put it in selectbox mode when using it.\n. this is because it is meant to be available for child classes when they overwrite this method. It is an extension point (which is why it is protected, not private)\n. JMSSerializerBundle already allows to configure the options passed to json_encode: http://jmsyst.com/bundles/JMSSerializerBundle/master/configuration#extension-reference\n. btw, you don't need to pass the computed bitmask. You can also pass a string being the name of a JSON constant, or an array of constant names to combine them. It will normalize them by building the corresponding bitmask\n. @cordoval no, this will avoid breaking the WDT when enabling the FormatListener of the bundle, without requiring the user to fix it themselves\n. well, this has nothing to do with FOSRestBundle. The errors says that the constructor argument of Genius\\ProfileBundle\\Handler\\ActualiteHandler is wrong. Anf given the location of the error, I think you have defined a service for this class and the arguments are wrong\n. @florianv Your API may be only a part of your app rather than being your full app.\n. This is why we asked to change the behavior to disable the whole listener, which is the case now\n. @backender can you rebase your code on top of the master branch ? It conflicts currently\n. @backender can you rebase your code on top of the master branch ? It conflicts currently\n. and you haven't rebased your branch on top of the latest FOS master branch. It still conflicts\n. and you haven't rebased your branch on top of the latest FOS master branch. It still conflicts\n. thanks\n. well, your issue says that you get an error saying that the template cannot be found, and says later that the template does not exist. the issue is quite clear here: you need to create the template\n. IMO, loading directories and simple resources belong to 2 different loaders rather than a single class\n. when using a constraint, the message of the ConstraintViolation could be used => no new feature needed in the config, just using available ones.\n. or you use the dev version of Symfony 2.5 to get the fix without waiting for the release\n. yes, it is a Symfony bug and it already has a fix\n. we always use private over protected in Symfony, because it gives us much more flexibility when maintaining the code: every protected part is an extension point for which BC need to be considered each time we do a change.\nThe FOS bundles follow the same rule (well, not entirely as many things have been created protected at first and cannot be changed to private because of the same BC concerns).\nwhat is you use case for overwriting this method ?\n. Renaming the config and the service is a BC break.\nand I don't understand the reason of this change. the exception handler is already a service\n. @lsmith77 The issue is that your Travis setup is not testing against Symfony 2.3, 2.4 or 2.6. It is testing against FrameworkBundle 2.3, 2.4 or 2.6, and the latest stable version of the components.\nSee https://github.com/FriendsOfSymfony/FOSJsRoutingBundle/commit/cb1ea448fc291fe27dedae8d738614ed7a1d519d (and the next commit fixing a typo) for a setup working properly. I'm using such setup in several projects since months\n. thanks\n. :+1: \n. the message of an AuthenticationException is not safe to be displayed\n. Annotations are meant to configure the View when you don't create it yourself but return only the data and expect the ViewListener to build the View object itself AFAIK\n. well, the issue here is that $this->forward('AcmeApiBundle:Entity:get', array('id' => 'd22484bf-1d48-11e4-a4e4-a45d36c13021')); is not setting a query string parameter. It is setting a request attribute (the ones set by the routing usually). If you want to pass query parmaeters, you have to use the thrid argument of forward(), not the second one.\nIMO, this is invalid. It opens the road to lots of nasty bugs, while forward() already allows to use things the clean way.\n. well, the issue here is that $this->forward('AcmeApiBundle:Entity:get', array('id' => 'd22484bf-1d48-11e4-a4e4-a45d36c13021')); is not setting a query string parameter. It is setting a request attribute (the ones set by the routing usually). If you want to pass query parmaeters, you have to use the thrid argument of forward(), not the second one.\nIMO, this is invalid. It opens the road to lots of nasty bugs, while forward() already allows to use things the clean way.\n. and btw, I don't understand what you mean saying why is it coming in as a QueryParam, should this be a requestparam ? Where is there a RequestParam involved here ?\n. and btw, I don't understand what you mean saying why is it coming in as a QueryParam, should this be a requestparam ? Where is there a RequestParam involved here ?\n. @whitewhidow nope. The QueryParam are coming from the query string, and the RequestParam from the request body. For routing attributes, there is no need for the ParamFetcher:\n- requirements and default values are defined in the routing\n- getting them as controller arguments is already supported in Symfony directly.\nthe goal of the ParamFetcher is to add some valdiation when retrieving the query or request params, precisely because they cannot be enforced through the routing.\nand no, I was saying that to use query params with forward you have to use the third argument. So if you pass the thrid argument, they are not request attributes. they are query params.\nPassing attributes to have them in $request->attributes is what you do in your code snippet using the second argument (similar to what the routing would produce, but outside the scope of the ParamFetcher).\nAnd passing request params (to fill $request->request) is not supported by forward()\n. @whitewhidow nope. The QueryParam are coming from the query string, and the RequestParam from the request body. For routing attributes, there is no need for the ParamFetcher:\n- requirements and default values are defined in the routing\n- getting them as controller arguments is already supported in Symfony directly.\nthe goal of the ParamFetcher is to add some valdiation when retrieving the query or request params, precisely because they cannot be enforced through the routing.\nand no, I was saying that to use query params with forward you have to use the third argument. So if you pass the thrid argument, they are not request attributes. they are query params.\nPassing attributes to have them in $request->attributes is what you do in your code snippet using the second argument (similar to what the routing would produce, but outside the scope of the ParamFetcher).\nAnd passing request params (to fill $request->request) is not supported by forward()\n. @xabbuh The ViewListener extends the listener of SensioFrameworkExtraBundle to add more logic. this is why it requires disabling the original listener\n. @xabbuh The ViewListener extends the listener of SensioFrameworkExtraBundle to add more logic. this is why it requires disabling the original listener\n. @AlmogBaku Monolog allows you to configure your own implementation of an ExclusionStrategyInterface, meaning you can exclude what you want from the logging.\nbut I don't think this is something we should put in FOSRestbundle itself. What you want to exclude from the logs depend of what you use in your project\n. Well, in your case, I think you should build your own activation strategy which would apply a different logic depending on the path. But I don't think that this kind of logic should be in FOSRestBundle.\n. @JeroenDeDauw JSON_UNESCAPED_SLASHES is only available on 5.4+\n. @JeroenDeDauw you asked why the full JSON escaping is ON by default, I answered\n. @JeroenDeDauw it is perfectly valid JSON to escape them, so why not ?. And if you want to know why it is the default behavior of PHP, you should ask the PHP team, not the FOSRestBundle team\n. :+1: \n. @ruscon there is several questions for this format:\n- how are you rendering errors attached at the root of the form rather than on a child ?\n- how does it work for deeper forms, which have child forms nesting other simpler forms ?\nErrors may be attached at any level of the tree. The JMSSerializer serialization format handles it by keeping a tree in the error serialization as well. Given that you want o use a flat structure, you need to define how the flattening will happen.\n. @lucascourot no, I don't know. I never tried to customize the serialization of errors to add such error code, so I don't have a solution for you\n. > Easily\nwell, this is not easy. How do you return errors attached at the user level when it also has children ?\n. you still only have errors attached on leafs in your example. This is not the case I described above\n. you still only have errors attached on leafs in your example. This is not the case I described above\n. @lsmith77 instead of displaying the code coverage in the Travis output in text format, what do you think about submitting it to Scrutinizer instead at the end of the build ?\n. easy to make it work (we already have it in other projects like FOSHttpCache for instance.\n. The coverage is available on Scrutinizer since https://github.com/FriendsOfSymfony/FOSRestBundle/commit/11bed754e76902a0bb01c1d54bf61b2a7d750509\nI haven't added the coverage badge in the readme yet though\n. The coverage is available on Scrutinizer since https://github.com/FriendsOfSymfony/FOSRestBundle/commit/11bed754e76902a0bb01c1d54bf61b2a7d750509\nI haven't added the coverage badge in the readme yet though\n. Badge is added\nAnd for fixing the issues reported by Scrutinizer, I haven't done any work on it. any contributions are welcome\n. Badge is added\nAnd for fixing the issues reported by Scrutinizer, I haven't done any work on it. any contributions are welcome\n. @tonivdv both projects are complementary. They don't provide the same warnings (we could probably enable Insight too, but not as a replacement of scrutinizer).\nScrutinizer performs a static analysis of the code, inferring types in a complex way (the same work than done by IDEs like PhpStorm for instance), allowing to detect many issues which cannot be found by Insight (yet).\n. @tonivdv both projects are complementary. They don't provide the same warnings (we could probably enable Insight too, but not as a replacement of scrutinizer).\nScrutinizer performs a static analysis of the code, inferring types in a complex way (the same work than done by IDEs like PhpStorm for instance), allowing to detect many issues which cannot be found by Insight (yet).\n. Well, I think opening a new github issue for each issue reported by Scrutinizer would be a mess. It is probably easier to keep this one for people wanting to discuss about the work, or wanting to know how they can contribute.\n. Well, I think opening a new github issue for each issue reported by Scrutinizer would be a mess. It is probably easier to keep this one for people wanting to discuss about the work, or wanting to know how they can contribute.\n. I marked this issue as Easy Pick because there are a lot of easy picks in the issues found by scrutinizer (the label should be removed once only more complex issues are left)\n. I marked this issue as Easy Pick because there are a lot of easy picks in the issues found by scrutinizer (the label should be removed once only more complex issues are left)\n. I fixed a few other issues, improved the scrutinizer config (no need to analyse method calls existence on test files as it does not play well with mocks) and enabled SensioLabsInsight as well (and I reported a bunch of issues to the SensioLabs support)\n. I fixed a few other issues, improved the scrutinizer config (no need to analyse method calls existence on test files as it does not play well with mocks) and enabled SensioLabsInsight as well (and I reported a bunch of issues to the SensioLabs support)\n. should we remove the allow_failure on HHVM now ?\n. you need to tell the JMSSerializer to use the accessor rather than Reflection to access the property, with @AccessType\nHowever, it will never get the surname in this case, because the serializer will never pass the current user to the getter.\nHiding the surname is better done with a custom exclusion strategy than with changing the getter. See http://jolicode.com/blog/how-to-implement-your-own-fields-inclusion-rules-with-jms-serializer for an example of building one\n. use the 2.5-bc validation API rather than the non-BC one for now, as the FOSRestBundle is not yet updated to support both the 2.4 and the 2.5 APIs (which are different).\nNote that 2.5-bc is used by default by Symfony (so you just need to remove the config you added to disable the BC layer explicitly)\n. Reopen this as we should make the bundle compatible with the 2.5 API\n. @lsmith77 The issue is that currently, we are incompatible with some parts of Symfony 2.5. We need to make our code compatible with both validation APIs. It is not about a phpdoc change. It is about changing our code to support all Symfony users\n. @lsmith77 The issue is that currently, we are incompatible with some parts of Symfony 2.5. We need to make our code compatible with both validation APIs. It is not about a phpdoc change. It is about changing our code to support all Symfony users\n. @lsmith77 A symfony 2.6+ would not get rid of this issue. the old validation API is supported until 3.0, even if it is deprecated.\nAnd the drawback of a 2.6+ version is that you would not support Symfony LTS anymore (unless you wait for the 2.7 release)\n. @lsmith77 A symfony 2.6+ would not get rid of this issue. the old validation API is supported until 3.0, even if it is deprecated.\nAnd the drawback of a 2.6+ version is that you would not support Symfony LTS anymore (unless you wait for the 2.7 release)\n. sending the v with chunked transfer encoding is indeed broken. This would then be a bug in mod_security if it does not allow it.\nBut I don't think this has anything to do with FOSRestBundle\n. sending the v with chunked transfer encoding is indeed broken. This would then be a bug in mod_security if it does not allow it.\nBut I don't think this has anything to do with FOSRestBundle\n. > Symfony2 by default does not really separate the Content-Type \"format\" and the Accept \"format\". That is Symfony2 core just looks at the Content-Type and assume that the response should be in the same format.\nThis is wrong. $request->getRequestFormat() is about the format requested for the response, and $request->getContentType() is about the content type of the request. getRequestFormat is absolutely not based on the content-type. It is based on the _format attribute in Symfony, which generally comes from the routing (using the Accept header is not implemented in core, but in FOSRestBundle).\nNote that there is a known issue in Symfony (but fixing it is a BC break) which allows to specify the _format through a GET or POST parameter in case the route does not enforce it.\nnote that $request->getContentType() gives you the format associated to the mime type (i.e. json), not the mime type itself. To get the mime type, it should use $request->headers->get('CONTENT_TYPE'))\n. @jonmchan you mean the maping between the Content-Type header and the format returned by getContentType ? Well, the implementation can answer you: it is done by $request->getFormat($mimeType) (passing the value of the header as argument).\nFOSRestBundle will use the exact same code to set the requestFormat based on the Accept header (the negotiation gives you a mime type)\n. use the latest master branch of the bundle and switch the config to disable the format_listener entirely outside the API:\nyaml\nfos_rest:\n    param_fetcher_listener: true\n    format_listener: true\n        rules:\n              - { path: ^/api/, priorities: ['json', 'html', 'xml'], fallback_format: ~, prefer_extension: true }\n              - { path: '^/', stop: true }\n    view:\n        view_response_listener: true\n. I was actually the PHP-CS-Fixer on the whole project and it fixed it.\n. well, actually only most of it. It has not removed the blank lines in the middle\n. indeed, they were not removed because of the method names matching the clas names of the use statement\n. Looks like it is an habit to do the same thing in parallel: https://github.com/FriendsOfSymfony/FOSRestBundle/commit/64942ab1ad56adeae6318a2c372160758cff345c :smile: \n. you could extend the https://github.com/FriendsOfSymfony/FOSRestBundle/blob/03e3663f447b4432a088a7dab27a1ff9e3722d75/View/ViewHandler.php#L253 to add it\n. Actually, we must support both, not only the new one\n. This is even worse, because you typehint the new interface, but you don't update the code, which still relies on the old one...\n. this looks like an issue in the serializer library here\n. @mpdude @MalteWunsch ping\n. @hyyan if you used a form with a non-empty root name, it indeed must appear in the request, otherwise it won't be considered as submitted. If you want to avoid this, you could use an empty form name:\nphp\n$form = $this->get('form.factory')->createNamed('', $type, $data);\n. @lsmith77 do we really need to make listener services configurable ? If you want your own listener, register your own listener and disable the listener from the bundle.\n. @nschurmann as a workaround until it is implemented, note that the security system allows to configure the field names\n. You are not doing anything wrong with your route definition. But your route is defined as being /api/user/profile/, so accessing /api/user/profile is not the same.\nIn case a route could match by adding a / at the end, Symfony redirects you to make the life easier for clients. But it does that only for safe requests (i.e. GET and HEAD), because redirecting other methods is not supported properly by browsers (they will generally follow the redirection with a GET request). So the solution is simple: use the URL you defined in your routing files, not a different one.\nAnyway, I'm closing this issue because there is nothing related to FOSRestBundle in it.\n. This new features should be covered in the testsuite before being accepted\n. please update the min requirement to a working version\n. looks good to me\n. I agree that in 2.0, the View classes should not expose any JMS class at all. The JMS integration should be completely done internally based on the exposed abstraction\n. I think supporting 2.7 is a must-have for now (2.8 is not even released). It depends on the date at which you plan to release it though\n. @Ener-Getick 2.0 is a dev version, not a released version, so this is not what people are using\n. please add a test using a regex A|B to ensure it indeed rejects Ac\n. The reason we use private visibility is that it makes maintenance much easier: anything protected needs to be taken into account for backward compatibility.\nwhat is your use case exactly for extending this method ?\n. Well, if you force depending on ~1.2, you indeed won't be able to install the dev version of FOSRestBundle which relies on the dev version of willdurand/negotiation 2.0. these would be conflicting requirements\n. this will only force it for our own testsuite, so is it really needed ?\n. would it be possible to depend on the security subcomponents instead of the full security component ?\n. @lsmith77 look for any usage of the security classes in the bundle, and look at which namespace they come from :smile: \n. From a quick github search, only security-core is needed: https://github.com/FriendsOfSymfony/FOSRestBundle/search?utf8=%E2%9C%93&q=Security\n. @lsmith77 this dependency is needed only because of the dev stability (Symfony 2.8 requires the ACL component for BC reasons)\n. ah, it is not needed anymore: Symfony 2.8 now allows to use security-acl 2.7, which is stable.\n. @lsmith77 I went for the simple configuration at first. I never went to uploading coverage on a single Travis job in my projects for now. It might be worth changing this though to run the coverage only once and upload it always from this job\n\nWhat about using the scrutinizer code coverage integrated feature?\n\nThis would require running tests on scrutinizer itself, which is not worth it IMO. No need to maintain 2 testing environments (and we need travis to be able to test multiple versions of PHP)\n. I suggest changing the command to generate the code coverage only on 5.6 too, as you don't need it if you don't upload it\n. :+1: \n. @lsmith77 if you don't provide a smooth upgrade path from 1.x to 2.x, it means you will need to provide a LTS for 1.x as people would not be able to upgrade all projects.\nAnd it will also make it much harder for bundles depending on FOSRestBundle as they would have to either support only one version (splitting the community between people able to upgrade or now) or make crazy stuff to support both without a simple way to write compatible code.\nNote that BC layers are mostly necessary for changes impacting the places using the bundle feature, for instance the annotations.\nBundles extending internal parts of the bundle may be left in front of the above difficulties if you want (but a smooth upgrade path for everyone would be easier)\n. @pinouf the issue is that you give a string to FOSRestBundle and ask it to return it as JSON. If you want to make the json encoding yourselves, return a Response object. And if you want to use the view system of FOSRestBundle, return the data themselves (your contentRequest variable)\n. you also need to add extended-type in the tag in the service definition, with the new name in it\n. you also need to add extended-type in the tag in the service definition, with the new name in it\n. I suggest providing a BC layer for this, to make it easier to migrate to the new version of the bundle. It should not be hard to keep support for the old signature of the annotation for now\n. this has been added temporarily because Symfony stable versions currently trigger deprecation warnings of Twig 1.23\n. this has been added temporarily because Symfony stable versions currently trigger deprecation warnings of Twig 1.23\n. @Ener-Getick using public properties is the way the annotation parser works\n. @Ener-Getick because there is 2 ways to work with annotations:\n- the old way using the constructor\n- the newest way using public properties directly, for which the annotation parser can validate what are the supported properties (and also which one are required and the type of values)\n. @Ener-Getick PR builds are not triggered when the PR is conflicting. This may have been the issue\n. hmm, this makes me think that Travis broke something on their end\n. Anyway, removing the request scope was broken, as the params are specific to each request. The ParamFetcher needs to be refactored to be able to live in the container scope.\n@Ener-Getick can you check this as you worked on the Symfony 3 compat ?\n. this would not work. It would mean that after the subrequest, the main request would get the params of the subrequest instead of its own params\n. @Ener-Getick check also for any class which is in 1.8 but not yet in 1.7, as these can be switched to private visibility already (as they are not yet released)\n. I saw the same error in FOSUserBundle builds. Looks like the PHP 7 install is broken\n. Indeed. This feature is not yet released.\nRegarding the doc, symfony.com displays the master branch by default for bundles. But there is a version switcher to see the 1.7 doc\n. @Ener-Getick this would mean dropping the support for the injection as a service, which is not good as a bugfix.\n. @Ener-Getick this would mean dropping the support for the injection as a service, which is not good as a bugfix.\n. @Ener-Getick Inheritance is generally a worse way to provide an extension point than composition (and much harder to provide BC btw).\nSo making inheritance the recommended extension is a big -1 from me. I would rather have an interface to allow composition and forbig inheritance.\nThe issue with the ViewHandler is of course that it has far too many responsibilities, making it impossible to use composition to provide useful extension points.\n. What is the benefit of this child class though ?\n. Use the service id instead of the class name when importing the rest routing resource for this controller, and it will work.\n. yeah, both ways are actually supported, depending on whether annotations (which works when importing a directory too) or explicit imports (which work when importing from any format, but class by class) are used\n. > Both serializers don't allow to define maxDepth at runtime\nWhat do you mean here ?\n. what is the use case for passing the Twig_Template instance rather than the template name ?\n. @phoenixgao private services can perfectly be used as a dependency (the container itself does not isolate services by bundle, there is no such concept). The only thing being forbidden for private services is runtime retrieval with $container->get('my_id') (this restriction is what allows us to optimize the container, as all other accesses to the service are known at compile time). we should not force these services to be public, but instead use Symfony 3.3+ lazy-loading features when available instead.. this can actually be done, by overriding the fos_rest.request.param_fetcher.reader service with your own implementation of the ParamReaderInterface (be careful to still support the logic of the default implementation in parallel of yours, otherwise it might break third-party bundles expecting the default behavior). I'm wondering why you would want to inject a service into a DTO. That looks like a weird architecture to me.. You need to update it to the new interface\n. This should be an BadMethodCallException (and returning false for supportDenormalization)\n. There is an extra blank line here\n. You should inject the dependency instead of instanciating it in the class.\n. The indentation of the file is wrong and there is extra blank lines at the beginning and the end of the class.\n. Well, look at the way the loader are defined as service and also at the doc about dependency injection: http://symfony.com/doc/2.0/book/service_container.html\nBut FOS bundles are meant to follow the Symfony 2 standards, and DI is one of the core ones.\n. You should use a self-closing tag here.\n. I think that the order of the test should be changed. RestRouteLoader extends the FileLoader.\n. There is an extra blank line here.\n. you should use @expectedException for places where you test exceptions (and @exceptedExceptionMessage in this case)\n. you should mock the interface instead of the implementation\n. same here. The requirement of the View is the interface, not the implementation\n. what is the need here ?\n. you should typehint the arguments IMO\n. Really ? A mock for an interface should precisely implement all methods of the interface. This seems like a bug in PHPUnit\n. please use 4 spaces for the indentation\n. the only place where you use the code of the parent class is here. so it would be far cleaner to drop the inheritance and simply register the listener with a higher priority than the Sensio one. This will make it possible to use this listener without having SensioFrameworkExtraBundle, and to use both bundles without having to change the config of SensioFrameworkExtraBundle\n. This is wrong. the class does not have a constructor but a static factory method\n. is this method really working ?\n. The license header should not be removed\n. why removing the phpdoc of all methods ?\n. you should add an interface for the the ViewHandler.\n. all this part should probably be changed to use the same way than in FOSUserBundle now: using a private service with the default implementation, and an alias for the real one (the config value being the id of the service). The class is not a good extension point for a service as it requires that the new one has exactly the same dependencies.\n. you committed some code between the time I loaded the page and the time I commented, thus making the place of the comment wrong as it is attached to the new state. So this comment is invalid as it is about the 3 lines you removed in e2e04a5 here.\n. there is an issue here. The route should not be used as the location. It does not make sense.\n. it should probably be callable instead of callback\n. the type is missing for the format\n. Do you really need to set it as a request attribute (or in fact to ask SensioFrameworkExtraBundle to do it, thus adding a dependency to this bundle for this feature) as you don't even bother about the value of the attribute ? All you need is to check if there is the annotation, so using the annotation reader would be better IMO.\n. what is the goal of this code ?\n. what relies on it exactly now ? As shown by the changes here, the listener is not as tied as originally as you were able to remove the inheritance.\n. the useful config here is no the one with all the default values, as they can be omitted.\n. Yep, probably. At this stage, you should probably show the minimal configuration\n. You should not typehint on the Monolog class but on the Symfony LoggerInterface. And you should also let the logger be optional (like in all places in Symfony) as it is not needed to use the class (it is a debugging tool)\n. the property should be renamed to logger\n. I don't think giving a DIC config here is a good idea. The class does not depend on the DIC at all.\n. you should add a line after the short description.\n. I don't think this is a good idea. The trace should not be displayed here. You should let the exception controller create a response for the exception, respecting the different behavior between prod and dev.\nBtw, this is also broken: you are rendering an HTML output but setting the headers from the View so you will be sending an RSS content-type.\n. the return phpdoc is missing\n. why rss here whereas the format is configurable in the function ?\n. the indentation is wrong here. It should add only one level for the items of the array and go back to the original level for the closing parenthesis.\n. same here\n. why making the format configurable here if it is not configurable for the call ?\n. this semi-colon should be removed\n. Why putting the handler in Resources/docs/examples and then using a namespace of the bundle? it cannot be autoloaded here.\n. the indentation is wrong\n. and $this->decoders does not exist here\n. personally, I would find it more logical to have a getDecoder($format) method\n. there is a typo in the exception class\n. this change is wrong IMO. Your sentence let me think that the goal of the bundle is to leverage JMSSerializerBundle whereas it is only the tool used by FOSRestBundle to achieve the serialization\n. writing this here seems weird as it will appear in the rendered doc\n. this is wrong indeed. It is not enabled by default\n. please don't add trailing whitespaces\n. you should add a blank line before the phpdoc of the method\n. same here\n. this tests will throw a warning in PHPUnit 3.6 as it does not contain any assertion\n. please remove these 3 lines\n. there is no need to add an empty phpdoc\n. SensioFrameworkExtraBundle should be mentionned for the annotation support\n. according to the Sf2 CS, you need to add a space after the cast (and yes, I know it was missing previously too)\n. this one should still be on the previous line\n. /users/lsmith/threads.json?sort=comments will not set the $sort variable in the controller as the arguments are taken from attributes, not from query parameters. So this route does not correspond to the controller IMO.\n. you should not use $request->get() as it is really slow and is not what you need here. This is about query params so it should use $request->query->get()\n. missing empty line\n. you should not use the base exception class but some SPL exceptions\n. you should add a use statement for this one\n. shouldn't you use fos_rest_queryFetcher to make conflicts less likely ?\n. what about controller that are closures or functions (think about Silex) ?\n. well, Does the queryParamReader supports reading params in a ReflectionMethod ?\n. what do you want to do with debug_backtrace ? The request attribute has to be set before resolving the controller argument in the controller resolver (which is done after the kernel.controller event, just before calling it).\n. Using the call stack means that you are breaking OO code (the behavior of the method depends of the place calling it) and makes you code impossible to test (you would have to recreate the call stack). Thus, I think it is quite bad for performances. So I really don't like using it to initialize the fetcher\n. well, for tests, you would have to recreate the backtrace to test the code using debug_backtrace. I don't see how a stub could help here (it will help to test other parts of the code by skipping the use of debug_backtrace)\n. not debug backtrace itself but the code using it (i.e. getting the backtrace and parsing it to find the controller)\n. yeah, when you are in the controller, it is simply a matter of calling $queryFetcher->setController(array($this, __FUNCTION__)), right ?\n. at least you should change the error message. There is 2 cases: null when not set (current error message) and all others when setting an invalid one (i.e. not supported by the QueryFetcher)\n. what ?\n. this is wrong according to what you used previously. The second location will be __DIR__.'/../vendor/fos/FOS/RestBundle/src\nAnd I would recommend registering the FOS\\Rest namespace instead of adding a second location for the FOS namespace. The autoloader is more efficient when registering the specific namespace\n. ok, so only the deps is broken.\n. typo here\nand take care that you can use name_prefix on an import only when the file is imported itself with the type rest\n. this is unused\n. the processor is not used\n. @static should be removed\n. missing type\n. why is it empty ?\n. in fact, it seems like the rest loader does not support imports properly. It will always load them itself instead of asking the resolver to find the appropriate loader according to the type\n. you should probably add the annotations allowing the AnnotationReader to validate annotations as of Common 2.2 (see the ORM or @schmittjoh's bundles for instance)\n. you could use if ($config['query_fetcher_listener']) { as you will always have a boolean (the node is a booleanNode and it has a default value)\n. I would use if (null === $this->params) {\n. I think you should have an interface for the QueryParamReader, allowing people to have another implementation reading from another source than annotations\n. private methods should be declared after public ones\n. shouldn't it be a booleanNode ? And you could use defaultFalse()\n. ok, it is not a boolean. But you should probably limit the possible values\n. https://github.com/FriendsOfSymfony/FOSUserBundle/blob/master/DependencyInjection/Configuration.php#L46\n. well, my comment is not really accurate anymore as it is not a boolean anymore (because of force)\n. missing one indentation level\n. same here\n. why this restriction ?\n. especially as you never use this\n. but an empty base class is a hard requirement as PHP does not have multiple inheritance\n. @orfin it means that all the classes you want to use this way need to extend DTO. What if you want to use a third party class as parent ? you can't.\nAs it is empty, using an interface would be better\n. this is wrong. You should not support any class here as you require extending DTO\n. this is useless (and error-prone as it is likely to be forgotten if the default value is modified)\n. you should remove this. We don't want extra copyright for each file of the library depending of who contributed it (we keep extra copyright header only when the code is copied from an existing library)\n. you should remove this extra empty line\n. you should add another @author annotation for Matthias\n. you should use implementInterface instead of using an in_array check in PHP. The Reflection code is probably optimized for the lookup.\n. no need to use else as the if leaves the flow of the function\n. why using an array of options and then doing isset checks when you only need one param ? pass the boolean directly as a property\n. This is wrong. If there is several ignored classes, you will do the interface check several times.. You should add a second foreach loop over the ignored interfaces and use implementInterface in it.\n. this is wrong. You need to add the leading \\ if you want to use a FQCN. Otherwise, you should use the relative class name (relying on use statements)\n. same issue here for the class name\n. you should not inject the full container but only your dependency (the router in such case)\n. please inject your real dependencies instead of depending on the full container\n. the ->end() call should be at the end of the previous line\n. simply if ($config['allowed_http_methods_listener']) { as it will always contain a boolean\n. this use statement is useless\n. what about routes having a requirement looking like GET|POST ?\n. wrong indentation\n. except you don't need the router :)\n. higher first\n. please remove the extra empty line\n. If a route does not have any requirement, it should allow all methods. Currently, it will return no method.\n. There is an issue here. It will not refresh the cache automatically in debug mode when you do a change.\n. (Query|Request)Param :)\n. annotation classes should be value objects only. They should not contain logic IMO. Otherwise, you would have to duplicate many logic if you give the possibility to map it in yaml or xml later.\n. @lsmith77 unless you want to bump the requirement to 5.4 (and I would hate you for that as I'm stuck on 5.3 at work for the app using FOSRestBundle), yes. You cannot use $this in a closure on 5.3\n. If someone extends the class, the static method would not be overwritable (you cannot use static::... to call it as you are not in the class but in the closure, forcing you to use the class name to access the static method)\n. the check on the count should be separated to have a different exception message\n. @Seldaek why turning null into an empty string if it was the default ? What if I want my RequestParam to default to null ?\n. well, if you want the default to be an empty string in the RequestParam, don't set it to null. but currently, you make it impossible to pass null as a default as it replaces it. And for a RequestParam coming from a json input, null can be passed (with a form encoded input, it would always be a string, but not in json)\n. don't resolve it here. It makes no sense as the container does it anyway when needed.\n. the EventListener namespace should only contain the listeners. This has nothing to do in a subnamespace of EventListener\n. please don't call $router->getRouteCollection() twice. This methods triggers the routing loaders.\n. to be consistent with other places, I would add a line between the param and the return instead of aligning them.\n. same here\n. the leading \\ is missing (or even better relying on the use statement)\n. same here for the empty line\n. same for this class\n. please remove this @abstract. It does not make any sense\n. you have an extra empty line here\n. please use one use statement per class\n. why getting the definition to add it ? You should be using a reference instead.\n. The license header is missing\n. typo here\n. The default value looks weird here. Shouldn't it be an empty string (or null) ?\n. it is the default for the type. but this is not what the RestActionReader receives. It receives a resource (this does not affect your example as the default value is not really used anyway: the RestControllerReader always pass it explicitly as an empty string for the new behavior).\n. typo here\n. no need to use else here as the if returns\n. this is totally useless IMO. $config->default is always null with your implementation\n. this will not work in a real case as the AnnotationReader validates the property name when reading an annotation and so will throw an exception if you try to set a default.\n. Please fix the phpdoc. There is no boolean here but an array\n. could you add the typehint for the array too ?\n. does it really make sense to make the view handler optional, requiring to add this check ?\n. You are not relying on the view response listener here as you are using the ViewHandler explicitly (you cannot rely on the ViewResponseListener btw)\n. As you always inject the handler in this listener in the container, this if will always return true.\nThe only reason for this if is that you added = null in the constructor to allow someone to use the class without an handler.\n. else is not needed as the if returns\n. why not triggering the autoloader ? It might not work\n. shoudln't you return the result ?\n. @lsmith77 does the bundle still support 2.0 ? The info text is a 2.1 feature\n. IMO, it should be strict.\n. this exclusion strategy can be removed by using the DisjunctExclusionStrategy\n. this defines a hard requirement on jms/serializer instead of allowing both the Symfony serializer and the JMS serializer\n. Please use spaces for the indentation, not tabs\n. same here\n. There is an issue here: if someone overwrite 1 controller in a child bundle, the locator will find the directory in the child bundle and so will find only the overwritten controller and not the others AFAIK.\n. 2 reasons:\n- this PR is 9 months old, so before the method was implemented in Symfony\n- the JsonResponse is intended to be used by passing the data and letting the JsonResponse class do the json_encode call internally. But the view handler is already serializing the data as json so it woould encode the json string as json again if you use the JsonResponse class, which is wrong.\n. You can avoid repeating the check on the configuration:\nif ($configuration->getStatusCode() && (null === $view->getStatusCode() || Codes::HTTP_OK === $view->getStatusCode())\n. these extra lines should be removed\n. this is not a NullInflector. It does not return null. It is a NoopInflector, or an IdentityInflector\n. Please use &&, not and\n. This code is a copy-paste of Symfony\\Component\\Serializer\\Encoder\\XmlEncoder (half of the class as the other half is about encoding into XML), but without the security fixes applied in 2.0.17 (which means it is vulnerable, especially as it is always used on untrusted XML).\nWould it make sense to use the Symfony code instead\n. the new code can only be done with in_array if you build an array of all 2xx codes.\nHowever, a more readable (and cleaner) way would be to compare the code as >= 200 && <300 as it is an integer\n. @Tobion I think this is actually a bug in Symfony, which could be missing an error checking in case the XML is invalid, making the next call using the XML failing. Does your failure happen for a valid XML body or an invalid one ?\n. Can you try to apply this patch in your Symfony XmlEncoder to see if the warning disappears.\nIt should now throw the same exception than when detecting other decoding failures, which can then be catched by FOSRestBundle in case the behavior of a failed decoding is not an exception (I think it should return null in case of failure to be consistent with the json decoder)\n. This is the wrong class name\n. We need to account for empty request body IMO, handling it diffently than a body which cannot be decoded.\n. I catched the exception in eda156bc8341ecf17ff712d5cbb5808cd6bf3687 as the body decoders should fail silently currently (seee how the BodyListener works). There is a separate discussion about making them fail for real.\n. And the symfony fix has been submitted: https://github.com/symfony/symfony/pull/9391\n. This should be done in the DI extension, not in a compiler pass\n. your service definition passes null as context when JMSSerializerBundle is not available, which will break\n. please use private visibility by default (if it is protected, we have to maintain compatibility over them because they become extension points)\n. Please use the ClassUtils to get the real class of the controller, to be compatible with proxied controllers (JMSDIExtraBundle and JMSSecurityExtraBundle are using suc proxies)\n. This should be defined in the XML file like other services, not in the PHP file\n. no, you are still getting a Fatal error in the constructor, because your typehint does not allow null values.\n. @lsmith77 Shouldn't the version be handled by the Negotation library integration ? this logic seems too simplistic compared to the allowed values for the Accept header\n. xml\n<argument type=\"service\" id=\"fos_rest.version.serialisation_context\" on-invalid=\"null\" />\n. getBest is a bit weird IMO. It does not explain what it gets (the best what ?)\n. maybe getBestMediaType\n. Using ConfigurationInterface\u00e8 orParamConverter`` as prefix for the class name looks weird to me, when the real difference is the expected SensioFrameworkExtraBundle version\n. why are you moving these methods around ?\n. no need forelseas$this->markTestSkipped();throws an exception\n. you should add a message explaining why it is skipped\n. same here\n. you changed the order of methods, thus adding useless changes in the diff (and breakinggit blamefor anyone trying to use it on this code)\n. I suggest keeping ``RequestBodyParamConverter\u00e8 for the uptodate implementation, and using a different name for the legacy one (supporting SensioFrameworkExtraBundle 2). This is what we were doing for the RestRouteLoader to support Symfony 2.0 in older versions of the bundle: https://github.com/FriendsOfSymfony/FOSRestBundle/tree/0.7.0/Routing/Loader\n. I would actually typehint the more specific class here, which is the one we expect to receive anyway\n. it is always a ParamConverter. param converters are not called for other annotations (the typehint was just crappy in 2.x)\n. This needs to be updated\n. This should be written in the message passed as argument to markTestSkipped instead, so that the explanation is displayed when running phpunit in verbose mode\n. I don't think you need 2 separate fixture classes for the Post. Simply move it to its own file to be able to reuse it in both tests\n. I would use ~1.0 here, to rely on semver totally (i.e. expecting that JsonpCallbackValidator will not break BC in a 1.x release)\n. we don't need a normalizer for the attribute when used a key.\nThe real reason for removing this call is that priorities are not an associative array, so there is no key needing to be defined\n. The typehint should be the ValidatorInterface, not the implementation\n. This is broken because the param_fetcher is request-scoped. It must be reverted\n. listeners in the request scope are causing some issues with the profiler integration of the event dispatcher.\nAnd it would cause even more issues if the event dispatcher used in the fullstack framework was not lazy, as it would then require moving the event_dispatcher to request scope, and then half of the container because of that (using a scoped listener is a very bad idea IMO)\n. this should support typehinting the interface as well\n. getting the extension config in a compiler pass is the wrong way to implement it. At this time, the config has already been processed to configure the container, so you should deal with the container content instead.\nThus, your logic is currently broken, because you don't take care of merging the different extension configs together (which would require duplicating part of the work done in the extension)\n. not compatible with PHP 5.3\n. The BodyListener runs before the RouterListener currently, so it cannot rely on the router.\nso before making it work, the priority of the listener should be reverted back to a lower version than the router: https://github.com/FriendsOfSymfony/FOSRestBundle/issues/763\nIf you have some time to submit a PR doing the revert, it will make your code work after that\n. you could simplify it:\nphp\n$this->assertEquals($getRoute, $cgetRoute);\n$this->assertNotSame($getRoute, $cgetRoute);\n. there is no rule forit in Symfony. It depends of who documented it.\n. why not fixing it here as well ?\n. cleans\n. I would keep the description saying it is an HTTP status code here\n. This does not provide much value IMO\n. Such comment on the constructor does not add much value IMO\n. this one should be kept according to your pattern of documenting things which cannot be infered\n. you could document it as object|null\n. the type of parameters should be added, otherwise the phpdoc is useless (and invalid)\n. please add it, not remove it :)\n. this return type is not always a string\n. @lsmith77 we should probably rename this method btw. is* should be reserved for methods returning a boolean, which is not the case here\n. btw, it can also be int|false rather than string|false depending on the array being passed...\n. I would keep the description here explaining what the listener expects in the array\n. the wording of the sentence is a bit weird though\n. the description of the format of the array should be kept IMO\n. well, I don't even understand why this method is protected. It should be a private helper method (which would have avoided any BC concern on it)\n. this file must be removed (you should ignore your .idea folder locally as it is IDE-specific: https://help.github.com/articles/ignoring-files\n. why are you changing the order of arguments in the data provider ? It makes the review harder\n. could you avoid changing the order of arguments ?\n. This change looks wrong to me. It is still a prototyped node\n. the message is weird. One of the case is that the class might be loaded without being an exception too.\n. should be private\n. there is a method on the collection to do it directly instead of looping over routes actually\n. this seems unused code as well\n. hmm, indeed, it sets the resolver in the loader. Can you add a comment ?\n. Changing would be better than Change\n. If you want to change....  The next parts of the sentence are looking weird as well ?\nand please wrap the line for consistency.\n. why .doctrine ? It is not based on the doctrine inflector anymore\n. please use Acme\\HelloBundle in code examples\n. and the service id should be something like acme_hello.* once you fix the example to use the AcmeHelloBundle\n. <-- By default this is: Inflector::pluralize($word); should be removed. It makes no sense here, given that you provide a different implementation than the DoctrineInflector\n. This is not a DoctrineInflector. It is a NoopInflector. It is not based on the doctrine code\n. wrong phpdoc\n. this class name must match the class name used in the PHP code example.\nAnd it would be great to display the inflector implementation first, as you will generally create it before defining a service using it\n. please use ~1.4 instead\n. what is the goal of closing the node ?\n. this check looks wrong to me. What about PUT for instance ?\n. what is forbidden is older versions of Validator, not of FrameworkBundle\n. this should not be added in the legacy group. isBound was already deprecated in favor of isSubmitted in Symfony 2.3, so we should just update the code instead\n. this does not make sense either. The codebase already sypports using the new validator. You should just detect the availability of the new validator interface and then use it for the mock instead of the old one.\n. you should mock the interface, not the class\n. same here\n. this is not even needed\n. this should not be done on the deps=low, otherwise the deps won't be low anymore\n. use canBeDisabled if you want it to be enabled by default\n. looks like you only care about it being empty or no. So a boolean disable_listener might be better as you don't care about the actual id.\n. and for this case, you don't even need anything IMO: given there is no specific config, it can just be disabled.\n. getting a JMSerializer context here means you have a dependency on JMSSerializer even when using the Symfony serializer. This is really bad (and it is a BC break)\n. The right solution IMO would be to have a method getSymfonySerializationContext or something like that, returning the context array expected by Symfony (and it could be returned for any version btw, as Symfony will ignore unknown keys and this would allow people to provide other context options too)\n. @lsmith77 the issue with the View API is that it currently exposes some methods dealing with the JMSSerializer class directly. This means that supporting any other serializer needs to provide another way to configure them.\nIMO, the clean solution would be to provide a way to configure the serializer without dealing with the JMSSerializer classes directly (except maybe inside a callable passed by the user, which would receive the serializer and decide which logic to apply). this way, we could build an API which does not depend on JMSSerializer.\n. there is another place using _method in this file\n. this should be methods, not method\n. not needed actually\n. It should methods, not method, to match the Symfony naming\n. this is wrong. Requirements should still be set in the route\n. not always. There is code setting the _format requirement a few lines above\n. wrong indentation here\n. and the wrong indentation means you are missing a ->end() call, which might hurt you in the future (the ->end() call at the same indentation than ->arrayNode('media_type') is not ending this array node anymore)\n. please use a strict comparison (same in other places)\n. Rather than having 2 tests with one of them being skipped each time and only changing the expectation, I suggest using a single test changing the expectation based on the bundle version\n. these should be private\n. We generally don't put @author tags on test files\n. please keep the setDefaultOptions(OptionsResolverInterface $resolver) calling the new configureOptions(OptionsResolver $resolver) as the forward compatibility layer is only implemented in AbstractTypeExtension in 2.7+, not in older versions, so you have to implement it yourselves here to keep compatibility with older versions\n. this will throw an exception in case there is no token (i.e. outside of a firewall), which is why there was the check on the token you removed\n. please never typehint the implementation but the interface (otherwise, you would not be compatible with any bundle extending the service through composition).\nAnd you should accept both the old and the new APIs to be compatible with 2.3+ (this means removing the typehint and replacing it with 2 instanceof check in the constructor)\n. you would need a compiler pass changing this argument to security.context for older versions\n. this extra line should be reverted\n. this does not make sense\n. passing the return value of a function to empty() works only on PHP 5.5+. AFAIK, this bundle still supports older versions\n. please don't retrieve the request in the constructor. Store the RequestStack and get the request on demand.\nThis will allow you to move the service to the container scope (the request scope is deprecated in 2.8)\n. COMPOSER_FLAGS=\"--prefer-lowest\" must be done on a build which does not change the Symfony requirements at all, otherwise you are not actually testing the lowest bounds (as you modify them)\n. you should first add a deprecation warning in 1.x versions when configuring this, to warn people before they upgrade (Symfony does not log deprecations triggered that early for now, but there is a pending PR for that)\n. you should avoid changing the order of arguments. It is a useless BC break\n. I suggest removing all *.class parameters in the new major version as this practice is discouraged in Symfony (we need a major version to stop using parameters, but we should not wait until the next one)\n. please use a non-capturing group (adding a new capturing group makes it slower for all cases, and can break cases using advanced regex features)\n. I don't. This looks like a bug in PHPCsFixer\n. @lsmith77 I suggest you to revert these changes (and to open an issue in the tool)\n. these changes are weird though.\n@GrahamCampbell is the symfony preset enforcing the short array syntax on StyleCI ? This would be weird as Symfony itself explicitly chose not to use it.\n. @lsmith77 looks like the config you committed is not the config being used\n. this is wrong here. This method is not a test\n. The annotations still need to be registered (even though the code can be simplified)\n. and @group legacy should be added only on test covering your BC layers. This is not used in a test covering BC layers, so it should not be flagged as such (it would hide the fact that the testsuite will break on Symfony 3.0)\n. I would use <argument type=\"collection\"> here, so that the non-replaced argument is already an array\n. shouldn't this be a collection rather than an empty string when loading the file ?\n. this is wrong. The $exceptionMap array is meant to contain only integers as values\n. I don't think this is needed here. the case where it happens is not a case where you would want to catch it (except on a top-level error handler)\n. a RuntimeException would be better. This is not about validating an argument\n. private methods should be after protected ones\n. In Symfony (and in my own code), we only document it when the constructor does not allow inferring it. This avoids having to maintain the phpdoc for them (which could become outdated)\n. you should detect the version of the Form component, not of the DI component (they may be different).\nUse method_exists(AbstractType::class, 'getBlockPrefix') (without using the PHP 5.5 feature if needed for compat).\n. And getExtendedType needs to make the same check btw\n. The alias here must be the same thing that the return value of getExtendedType in the type extension (and Symfony 2.8 now validates it early to avoid hard-to-debug issues). So you need to update the type extension to be compatible with 2.8 without deprecations too (your current code is not compatible at all because of the mismatch)\n. This is wrong. You can have multiple tags with the same name.\nIMO, the simpler solution would be to remove the tag entirely from the XML file and add it here rather than trying to edit it here.\n. hmm, even much simpler actually: set both alias and extended-type in the tag. the compiler pass in 2.8 will ignore alias if type-extension is set, and it will use the alias in 2.7\n. you still need to detect the Symfony version in FOS\\RestBundle\\Form\\Extension\\DisableCSRFExtension::getExtendedType though\n. the return value of this method needs to be the new value in Symfony 2.8, based on the feature detection.\nand yes, set both aliases in XML as it is possible to do it\n. making the service lazy would be hard (as you don't own the service, and it would add overhead to anyone using it all the time because of the proxy wrapper).\nHowever, there is something else needed here: \n- it should be possible to build this service when there is no templating system in the project (assuming you don't use the HTML format)\n- I would suggest using Twig directly instead of the templating component wrapping twig, as you only render Twig templates anyway\n. indeed\n. a container-aware annotation ? WTF ?\n. This is not a BC layer, it is a new feature. So it must not be in this PR\n. you should add a @trigger_error on top\n. using the FQCN would make the message more understandable when being logged by the DebugClassLoader\n. injecting the container in the annotation is likely to cause issues with the annotation parser cache. This is a very bad idea IMO\n. This is totally unrelated to the title of the PR, and it must not be removed\n. well, to support everything, the compiler pass should also accept configuring a service implementing directly the FOSRestBundle interface\n. your Yaml is invalid (because of the : here). This is why there is no Travis build\n. missing @Annotation to make the class usable as annotation\n. does it actually need to be a reference ? This will cause reference mismatches\n. this should probably be more specific than mixed, abstracting the differences\n. this should not extend the TemplateListener anymore but just run earlier (and so no need for the container)\n. this is indeed needed to avoid fatal errors in weird cases\n. We should only inject a UrlGeneratorInterface here (changing the getRouter)\n. We should allow injecting Twig_Environment directly too.\n. and should be optional\n. instead of overwriting the constructor in the child class to avoid the warning, you can use if (!$this instanceof NewDoctrineInflector) { @trigger_error(...) } (if it is an instance of the new class, it means the code is using the new class and so things are OK)\n. the alias is weird, as it is not a base class\n. this constructor is useless\n. you should not redefine the methods of the parent interface. This causes compatibility issues with some PHP versions. Just inherit them from the parent\n. in such case, Symfony generally puts the warning outside the class declaration, to trigger it when the class is autoloaded\n. btw, you can use __CLASS__ to build the message\n. the alias is weird, as it is not a base class\n. then, why is it instantiating a new format negotiator internally to defined the old API through decoration ? You should just keep the code here, and have the child class being empty (moving the code only when removing the deprecated class)\n. does Symfony really create a new class extending the old one, and instantantiate the new class inside the old one ? Please give me a link to a place doing such weird setup\n. hmm, indeed.\nRenaming classes definetely sucks\n. I don't understand what you mean\n. OK, found the issue: $this->controller should also be scoped to the request\n. exactly my point: $this->controller needs to be reset to the master one after leaving the subrequest\n. this should use strict comparison\n. You should mention that overwriting it is deprecated (and maybe mention get_class($this) in the message too to help finding where it happens)\n. I'm with @xabbuh and @Ener-Getick here.\n. @lsmith77 this does not change the fact that your factory method will need to receive all deps, otherwise you have the same issue about creating an incomplete object.\n. does PHP-CS-fixer rely forbids no-op closures to be written as one-liners ?\n. @Soullivaneuh except that your bridge does not have anything with a __static method needing to be called when the class is loaded. This was the specific need asked in this github issue, not a requirement when writing custom autoloaders.\nAnd your \"custom\" autoloader will not prevent library conflicts, as it will still delegate calls to the composer autoloader for any class, meaning it will still load everything.\n. this is wrong for multiple reasons:\n\nyou check only the first config of the bundle, which is not the final config at all (subsequent configs could enable it, or could re-disable it)\nthere is no guarantee at all that $config[0]['view']['annotations'] exists (the user might be configuring other parts of SensioFrameworkExtraBundle\nthis leaves out any processing that the bundle could do on the config (which includes the fact of defining a default value). that's broken. $argument->getType() will never return object. that's broken. The return value of $argument->getType() will be a ReflectionType object, so there is no way to have the same instance in the ignoreTypes property.. \n",
    "gmaiztegi": "Good to hear that. I'm really looking forward to seeing this bundle fully working.\nI will close the issue then.\n. ",
    "javiern": "after reading and thinking a lot a came to the conclusion than the issue here is about spelling... about verbs and nouns, not about the feature. may be the solution its tu replace the words new/edit/remove for the what they really represent.\nthe Represent a FORM resource, to give, clients the capabilities they dont have (like using PUT), instead of giving an VERB as name, it could easily give their real name, FORM\nso the url will look like this\n/users -> give list of links to users\n/users/form -> this will serve userform resource, an empty form to submiting a new user (code on demand).\n/user/[slug] -> give the representation of the user\n/user/[slug]/form -> will render the userform, but with the data loaded, for partial, or total edit.\nwhat about the delete, well the delete, should be a button on the /user/[slug]/form resource, the same applies to, ban, or what ever other VERB action you can think about, \ni think this not violates REST in any way, you are givening the client code on demand whitin a resource.\nand the same applies to subodinates resources, think about a transference between 2 banks accounts\nwe dont do calls like this\n/account/[id]/transfer/ and show a transfer form....\nwe should be dount\n/transfers/form to display code on demand\nor post to /transfers.\nany thoughts? i think this way could be more clear....\n. after reading and thinking a lot a came to the conclusion than the issue here is about spelling... about verbs and nouns, not about the feature. may be the solution its tu replace the words new/edit/remove for the what they really represent.\nthe Represent a FORM resource, to give, clients the capabilities they dont have (like using PUT), instead of giving an VERB as name, it could easily give their real name, FORM\nso the url will look like this\n/users -> give list of links to users\n/users/form -> this will serve userform resource, an empty form to submiting a new user (code on demand).\n/user/[slug] -> give the representation of the user\n/user/[slug]/form -> will render the userform, but with the data loaded, for partial, or total edit.\nwhat about the delete, well the delete, should be a button on the /user/[slug]/form resource, the same applies to, ban, or what ever other VERB action you can think about, \ni think this not violates REST in any way, you are givening the client code on demand whitin a resource.\nand the same applies to subodinates resources, think about a transference between 2 banks accounts\nwe dont do calls like this\n/account/[id]/transfer/ and show a transfer form....\nwe should be dount\n/transfers/form to display code on demand\nor post to /transfers.\nany thoughts? i think this way could be more clear....\n. i say form, beacause, in this case, we were talking about rendering forms, it could be any noun\nits just i dont like verbs in the URI, looks like RPC and is just contributting to general confussion about REST. \nits hard to found really good resources of info about REST in the web, and if even good implementations looks like RPC, i dont know... its just confussing...\n. i say form, beacause, in this case, we were talking about rendering forms, it could be any noun\nits just i dont like verbs in the URI, looks like RPC and is just contributting to general confussion about REST. \nits hard to found really good resources of info about REST in the web, and if even good implementations looks like RPC, i dont know... its just confussing...\n. i would like to see something like this.... in fact im trying to achieve it... \nwhen using this bundle ( the symffony 2.0 branch) all my controllers become pretty much the same,\nso i get a lot of duplication.... im trying to find a way to make a single controller to work for every resource i have.\n. Thanks! i am checking in already!\n. i think i dont make myself clear.... this way of doing thinks is NOT RESTful,\nyou guys are using a NOT RESTful way in the server to save a client specific incompatibility, \nthe rest way to make the cliente compatible with the post method is using code on demand,\nfor example, if you are asumming this is going to be reendered in a browser, the broser will ask for an html representation, in wich it will be an html form, and the broser will support javascript (all modern brosers do that) then u can send some javascript to capture the form whe its ready for submission and use the correct method, with for example xmlhttprequest.\nits my way of seeing things, \n. i think i dont make myself clear.... this way of doing thinks is NOT RESTful,\nyou guys are using a NOT RESTful way in the server to save a client specific incompatibility, \nthe rest way to make the cliente compatible with the post method is using code on demand,\nfor example, if you are asumming this is going to be reendered in a browser, the broser will ask for an html representation, in wich it will be an html form, and the broser will support javascript (all modern brosers do that) then u can send some javascript to capture the form whe its ready for submission and use the correct method, with for example xmlhttprequest.\nits my way of seeing things, \n. ok... i think you already passed for this discussion, i'm looked a little bit, i will read it all. for now i have to say that im do not agree with this comment\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/69#issuecomment-2497827\nnouns are nouns and verbs are verbs. and as far as i know, edit is a verb and delete is a verb (new is not a verb... but in context it means make a new resource, so its used like verb).\ni will keep reading and if i get some ideas i will share them.\nThanks for the answer and the good work, i really like this bundle!\n. ok... i think you already passed for this discussion, i'm looked a little bit, i will read it all. for now i have to say that im do not agree with this comment\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/69#issuecomment-2497827\nnouns are nouns and verbs are verbs. and as far as i know, edit is a verb and delete is a verb (new is not a verb... but in context it means make a new resource, so its used like verb).\ni will keep reading and if i get some ideas i will share them.\nThanks for the answer and the good work, i really like this bundle!\n. hi. thanks for your answer... i will research about possibly security risk.\nabout JMSSerializer, how it can be done? i mean, i dont find a way to add a new format. i have read the docs and doesnt explain it. and looking in the code i have seen the serialization visitors and seems easy to implement one, but im not getting how to make the bundle use my visitor:\ni tried defining a service like this\nxml\n        <parameter key=\"my_bundle.jsonp_serialization_visitor.class\">MyBundle\\JsonpSerializationVisitor</parameter>\n        <service id=\"my_bundle.jsonp_serialization_visitor\" class=\"%my_bundle.jsonp_serialization_visitor.class%\" public=\"false\">\n            <argument type=\"service\" id=\"jms_serializer.naming_strategy\" />\n            <argument type=\"collection\" />\n            <tag name=\"jms_serializer.serialization_visitor\" format=\"jsonp\" />\n        </service>\nbut it keep saying unsupported format.... im surely missing something...\ncan u give me a hint? Thanks!\n. yes! i got it working... typo error!! lol! its better to implent this way... thanks.\n. yes its probably a good idea... in fact, it is not so simple to add\nnew format to jmsserializer...\ni dont yet know how to inject the handlers(in a clean way) to my\nvisitor... so i implemented it decorating the existing json format and\nused the dependencies from there.... but there must be a better\nway....\n2012/7/23 Lukas Kahwe Smith\nreply@reply.github.com:\n\nwould probably be useful to add this to either the FOSRestBundle or JMSSerializerBundle docs\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/263#issuecomment-7180058\n. yes that could be a good way to go, i must confess that i tried this\nway. but, wasnt inspired and things get too complicated. so i dropped\nit and started for other paths.\n\nwhat i basicly did was decorate the json visitor, i made a class and\npassed the json vistor as parameter, taked the output for that visitor\nand wrapped it whit a hardcoded jsonp callback... that way i dont need\nto validate the callback gived to the user...\n(i am lazy sometimes... :P). but this approch its not good enough if i\nneed to make another format in the future, i just cant decorate\nexisting classes always....\nThanks for the help guys! i will give a try the way you say again to\nsee if i get it working.\n2012/7/23 Lukas Kahwe Smith\nreply@reply.github.com:\n\ni was just chatting with @schmittjoh on IRC\nwhat we could do is provide an implementation of a custom handler for jsonp and then potentially a configuration flag to enable \"jsonp\" support. enabling \"jsonp\" support would also register the mime type via the mime type listener:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/2-the-view-layer.md#custom-handler\nin this customer listener you would basically just call the ViewHandler::createResponse method with the format \"json\" and then adjust the returned Response accordingly. you should also support some regexp to validate the callback string which should probably also be configurable.\nmaybe that is the easiest solution after all.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/263#issuecomment-7186626\n. i think the custom view handler approch wont work if he needs to receive jsonp. if you need to receive jsonp for an external service you will need to do something with the serializer.\n\nwhat u can do, is decorate the json format visitor. (i decorate it because i dont found the way to inject to this visitor the functionality to manage doctrine objects. its not documented and done in a very specific way. so this approch was faster and works).\ni left an example of how to do with a serialization visitor, you will need a desarializator visitor, you can do exactly the same in a nother class.\nthe desarialization visitor has a decode($str) method, so instead of getResult() you will have a decode method.\nin that method, you extract the json string from the containg function, and then, call the decode mehod of the decorated class of serializer bundle, and you are done. its preatty easy. but its not the best method there is out there.\nif someone knows how to get the custom handlers array of jmsserialer get injected into visitors, it will be really usefull.\nafter u made the visitor, just add it as a service like this;\niway_util.jsonp_serialization_visitor:\n        class: %iway_util.jsonp_serialization_visitor.class%\n        arguments: [ @jms_serializer.naming_strategy, [] ]\n        tags: [ { name: jms_serializer.serialization_visitor, format: jsonp } ]\nthe class will look something like this:\n``` php\n<?php\nnamespace Iway\\UtilBundle\\Serializer;\nuse JMS\\SerializerBundle\\Metadata\\ClassMetadata;\nuse JMS\\SerializerBundle\\Metadata\\PropertyMetadata;\nuse JMS\\SerializerBundle\\Serializer\\GraphNavigator;\nuse JMS\\SerializerBundle\\Serializer\\GenericSerializationVisitor;\nuse JMS\\SerializerBundle\\Serializer\\VisitorInterface;\nclass JsonpSerializationVisitor implements VisitorInterface\n{\nprivate $jsonVisitor = null;\n\npublic function getResult()\n{\n    $encodedData = $this->getJsonVisitor()->getResult();\n    return 'jsonp_callback('. $encodedData .')';\n}\n\n\npublic function getJsonVisitor()\n{\n    return $this->jsonVisitor;\n}\n\n\npublic function setJsonVisitor(VisitorInterface $jsonVisitor)\n{        \n    $this->jsonVisitor = $jsonVisitor;\n}\n\n\nfunction prepare($data)\n{\n    return $this->getJsonVisitor()->prepare($data);\n}\n\n\nfunction visitString($data, $type)\n{\n    return $this->getJsonVisitor()->visitString($data, $type);\n}\n\n\nfunction visitBoolean($data, $type)\n{\n    return $this->getJsonVisitor()->visitBoolean($data, $type);\n}\n\n\nfunction visitDouble($data, $type)\n{\n    return $this->getJsonVisitor()->visitDouble($data, $type);\n}\n\n\nfunction visitInteger($data, $type)\n{\n    return $this->getJsonVisitor()->visitInteger($data, $type);\n}\n\n\nfunction visitUsingCustomHandler($data, $type, &$visited)\n{\n    return $this->getJsonVisitor()->visitUsingCustomHandler($data, $type, $visited);\n}\n\n\nfunction visitArray($data, $type)\n{\n    return $this->getJsonVisitor()->visitArray($data, $type);\n}\n\n\nfunction visitTraversable($data, $type)\n{\n    return $this->getJsonVisitor()->visitTraversable($data, $type);\n}\n\n\nfunction startVisitingObject(ClassMetadata $metadata, $data, $type)\n{\n    return $this->getJsonVisitor()->startVisitingObject($metadata, $data, $type);\n}\n\n\nfunction visitProperty(PropertyMetadata $metadata, $data)\n{\n    return $this->getJsonVisitor()->visitProperty($metadata, $data);\n}\n\n\nfunction endVisitingObject(ClassMetadata $metadata, $data, $type)\n{\n    return $this->getJsonVisitor()->endVisitingObject($metadata, $data, $type);\n}\n\n\nfunction visitPropertyUsingCustomHandler(PropertyMetadata $metadata, $object)\n{\n    return $this->getJsonVisitor()->visitPropertyUsingCustomHandler($metadata, $object);\n}\n\n\nfunction setNavigator(GraphNavigator $navigator)\n{\n    return $this->getJsonVisitor()->setNavigator($navigator);\n}\n\n\nfunction getNavigator()\n{\n    return $this->getJsonVisitor()->getNavigator();\n}\n\n}\n```\n. i think the custom view handler approch wont work if he needs to receive jsonp. if you need to receive jsonp for an external service you will need to do something with the serializer.\nwhat u can do, is decorate the json format visitor. (i decorate it because i dont found the way to inject to this visitor the functionality to manage doctrine objects. its not documented and done in a very specific way. so this approch was faster and works).\ni left an example of how to do with a serialization visitor, you will need a desarializator visitor, you can do exactly the same in a nother class.\nthe desarialization visitor has a decode($str) method, so instead of getResult() you will have a decode method.\nin that method, you extract the json string from the containg function, and then, call the decode mehod of the decorated class of serializer bundle, and you are done. its preatty easy. but its not the best method there is out there.\nif someone knows how to get the custom handlers array of jmsserialer get injected into visitors, it will be really usefull.\nafter u made the visitor, just add it as a service like this;\niway_util.jsonp_serialization_visitor:\n        class: %iway_util.jsonp_serialization_visitor.class%\n        arguments: [ @jms_serializer.naming_strategy, [] ]\n        tags: [ { name: jms_serializer.serialization_visitor, format: jsonp } ]\nthe class will look something like this:\n``` php\n<?php\nnamespace Iway\\UtilBundle\\Serializer;\nuse JMS\\SerializerBundle\\Metadata\\ClassMetadata;\nuse JMS\\SerializerBundle\\Metadata\\PropertyMetadata;\nuse JMS\\SerializerBundle\\Serializer\\GraphNavigator;\nuse JMS\\SerializerBundle\\Serializer\\GenericSerializationVisitor;\nuse JMS\\SerializerBundle\\Serializer\\VisitorInterface;\nclass JsonpSerializationVisitor implements VisitorInterface\n{\nprivate $jsonVisitor = null;\n\npublic function getResult()\n{\n    $encodedData = $this->getJsonVisitor()->getResult();\n    return 'jsonp_callback('. $encodedData .')';\n}\n\n\npublic function getJsonVisitor()\n{\n    return $this->jsonVisitor;\n}\n\n\npublic function setJsonVisitor(VisitorInterface $jsonVisitor)\n{        \n    $this->jsonVisitor = $jsonVisitor;\n}\n\n\nfunction prepare($data)\n{\n    return $this->getJsonVisitor()->prepare($data);\n}\n\n\nfunction visitString($data, $type)\n{\n    return $this->getJsonVisitor()->visitString($data, $type);\n}\n\n\nfunction visitBoolean($data, $type)\n{\n    return $this->getJsonVisitor()->visitBoolean($data, $type);\n}\n\n\nfunction visitDouble($data, $type)\n{\n    return $this->getJsonVisitor()->visitDouble($data, $type);\n}\n\n\nfunction visitInteger($data, $type)\n{\n    return $this->getJsonVisitor()->visitInteger($data, $type);\n}\n\n\nfunction visitUsingCustomHandler($data, $type, &$visited)\n{\n    return $this->getJsonVisitor()->visitUsingCustomHandler($data, $type, $visited);\n}\n\n\nfunction visitArray($data, $type)\n{\n    return $this->getJsonVisitor()->visitArray($data, $type);\n}\n\n\nfunction visitTraversable($data, $type)\n{\n    return $this->getJsonVisitor()->visitTraversable($data, $type);\n}\n\n\nfunction startVisitingObject(ClassMetadata $metadata, $data, $type)\n{\n    return $this->getJsonVisitor()->startVisitingObject($metadata, $data, $type);\n}\n\n\nfunction visitProperty(PropertyMetadata $metadata, $data)\n{\n    return $this->getJsonVisitor()->visitProperty($metadata, $data);\n}\n\n\nfunction endVisitingObject(ClassMetadata $metadata, $data, $type)\n{\n    return $this->getJsonVisitor()->endVisitingObject($metadata, $data, $type);\n}\n\n\nfunction visitPropertyUsingCustomHandler(PropertyMetadata $metadata, $object)\n{\n    return $this->getJsonVisitor()->visitPropertyUsingCustomHandler($metadata, $object);\n}\n\n\nfunction setNavigator(GraphNavigator $navigator)\n{\n    return $this->getJsonVisitor()->setNavigator($navigator);\n}\n\n\nfunction getNavigator()\n{\n    return $this->getJsonVisitor()->getNavigator();\n}\n\n}\n```\n. and of course, you can always in an controller get the serializer, instanciate your visitor at the controller, register in that serializer instance and use it, but will only be available on that controller... or you will need to do this every time you need it... its better to register it as a service....\n. and of course, you can always in an controller get the serializer, instanciate your visitor at the controller, register in that serializer instance and use it, but will only be available on that controller... or you will need to do this every time you need it... its better to register it as a service....\n. Its great! Thanks a lot! i will give this a try\nbut i still think its better to rely on the serializer to add formats,\nlet say, for example y want atom, or rss, in the view handler, u can\nonly serialize, but implementing the format inside the serializer,\nallows you to desarialize too.\n2012/8/3 Maciej Rzepi\u0144ski\nreply@reply.github.com:\n\nThanks, but I extricated myself from the problem in another way. I have used AJAX in Sencha Touch, instead of JSONP.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/263#issuecomment-7476469\n. Its great! Thanks a lot! i will give this a try\n\nbut i still think its better to rely on the serializer to add formats,\nlet say, for example y want atom, or rss, in the view handler, u can\nonly serialize, but implementing the format inside the serializer,\nallows you to desarialize too.\n2012/8/3 Maciej Rzepi\u0144ski\nreply@reply.github.com:\n\nThanks, but I extricated myself from the problem in another way. I have used AJAX in Sencha Touch, instead of JSONP.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/263#issuecomment-7476469\n. it seems nice, \nim trying to implent something like this by abstracting the Reosurce and Representation concept to a common interface but not being able so far to get results... i made a post in symfony user group to see if some one can give me a hand or if im totally wrong in my aproach.\n\nhttps://groups.google.com/forum/?fromgroups#!topic/symfony2/7uKWq9OX6S0%5B1-25%5D\n. ",
    "fran6co": "Exactly, and the way it's working now it's putting an empty message if the map is not set or the original message if some mapping is given. Am I missing something in the code?\n. Oh, sorry, I reread the documentation. You are right. Closing the pull request... Sorry\n. +1, I have a resource named Community and the getCommunitiesAction gets singularized when generating the url.\n. ",
    "boekkooi": "@merrix If you are using the symfony security. What you can do is remove all oauth_ keys from the request after it was handled by using a 'Symfony\\Component\\Security\\Http\\Firewall\\ListenerInterface' atleast that is what i do at the moment. or you could extend the FOS\\RestBundle\\EventListener\\BodyListener to allow the needed parameters.\nAlso it would be nice if there was a configuration option so that some request parameters would be allowed by the BodyListener.\n. @lsmith77 see https://github.com/FriendsOfSymfony/RestBundle/pull/87 \n@stof ->canBeUnset() only works on a entire array not it's values\n. This is true for the rendering but not for the 'POST', 'PUT', 'PATCH', 'DELETE' body because the BodyListener (see line 55) only looks at the 'Content-Type' header.\n. see https://github.com/FriendsOfSymfony/RestBundle/pull/88\n. This good enough?\n. You forgot the unit test change :)\n. I'm using ?: because this should logicaly only be used when someone did not specify a 'Content-Type' header \n(The question is are they implementing it wrongly when it is empy based on http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17 ?)\nThe reason for the conversion between format -> mimetype -> format is that when a invalid format was specified it could still pass see RequestListenerTest.php test  'POST request with unallowed format'.\n. Yeah but that just breaks the 'POST request with no Content-Type' test. \nThe correct line in that case would be $format = $request->getFormat($request->headers->get('Content-Type', $request->getMimeType($request->getRequestFormat())));\nBut the other option would be $format = $request->getFormat($request->headers->get('Content-Type')) ?: $request->getRequestFormat(); and breaks 'POST request with unallowed format' test.\n. works like a charm.\n. ",
    "dcsg": "@Stof if i disable that option in my config.yml the @Template() works well, so i guessed it could be from FOSRestBundle.\n. Thanks @lsmith77 i had that option set to true. Problem solved.\n. ",
    "yethee": "I created PR with implementation of the form error handler, which replaces the form error normalizer.\nWhere should be implementation of the handlers, in this bundle or JMSSerializerBundle?\n. I can update the configuration, if needed\n. Default configuraion:\nyaml\nfos_rest:\n    formats: ['json', 'xml']\n    templating_formats: ['html']\n    failed_validation: 400\n    body_listener:\n        decoders:\n            json: fos_rest.decoder.json\n            xml: fos_rest.decoder.xml\n    format_listener:\n        default_priorities: ['html', '*/*']\n        fallback_format: html\n    flash_message_listener:\n        name: flashes\n        path: /\n        domain: ~\n        secure: false\n        httpOnly: true\n    view_response_listener: true\n    service:\n        view_handler: fos_rest.view_handler.default\n. Yes, I guess that is intentional.\nThis is quick fix as temporary. Just in my project work with the jms_serializer_bundle branch.\nI close this PR and make a temporary patch locally.\n. Fix this error: No engine is able to work with the template \"TwigBundle:Exception:exception_full.html.\".\n. This exception thrown by the DelegatingEngine when called findTemplate() method, before handle to the view handler.\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/jms_serializer_bundle/Controller/ExceptionController.php#L67\nFor using exists() method of the templating service in template must be set the engine property.\n. I rebased this branch and changed commit. Sorry, if it is misleading.\n. If use templating.engines parameter of the container, can be try search template for each the engine from an array.\n. Sorry. Fixed now\n. I not seen in the code how is used value of the format, without considering 'templating' === $this->formats[$format]. Most likely I will not correctly interpret the situation with formats and therefore split configuration on formats and templating_formats.\nNow:\ntrue - supporting the given format while using the templating to generate the Response content;\nfalse - supporting the given format while using the JMSSerializerBundle to generate the Response content;\nI'll fix it, if needed.\n. You right, use indexed array for formats it was not elegant solution but could be more concise in yaml configuration.\n. My english is lame... I try to make a draft of the docs in the near future\n. Maybe move to end of the doc?\n. Thanks. Fixed now, 013beb7\n. Seems, the dot should not be.\n. ",
    "lmcd": "+1 for this!\n. ",
    "dietervds": "Hoping it's ok to bump this, but a big +1 from me on this.\n(in case anyone has time, we all have too little of that)\n. ",
    "sdiaz": "I am involved in some private projects with FOSRestBundle, i can setup an example simple project with FOSUserBundle integration using WSSE (MOPA bundle) and Nelmio Api Doc Bundle. Code Coverage on nearly 100% (except entities). Maybe I can learn from you guys by enhancing my code (Im not pure php developer but C, C++, ObjC, Javascript), I use Jenkins / Sonar / Capifony to do CI/QA/CD so I will keep them on the project as well as travis if required. If you are interested I can start a new project (symfony 2.1 based)\n. I started the project some hours ago, I made some initial commits that should log you in with wsse auth using for example \"Dev Http Client\" extension in Chrome.\nYou will find the Nelmio API Doc at \"http://localhost/app_dev.php\"\nI have added an ANT build.xml and a small doc with the php components you will need in order to get all the reports that the ant command will generate and that jenkins will read from.\nI have added to travis, and I will create a user rest controller to deal with userbundle \"without\" forms, just using the user manager.\n. It's currently implements the use of a service container (in this case fos_user.user_manager). It could be improved by using the fos validator. Next step to find an entity to use fosrest with symfony forms (without csrf at the moment) and improve the documentation. All suggestions are welcome as contributions.\n. ",
    "ericclemmons": "<3 :)\n. I just noticed the same thing, as I was checking out Configurator.php :)\nOn Aug 28, 2011, at 1:22 PM, lsmith77reply@reply.github.com wrote:\n\nah, i see now that the listener might now be enabled by default.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/116#issuecomment-1924827\n. Aha!  So you have this instead:\n\n``` yaml\napp/config/default.yml\nApi:\n    type: rest  # Required for RestYamlLoader to process imported routes\n    prefix: /api\n    resource: \"@ApiBundle/Resources/config/routing.yml\"\n```\nyaml\napi.posts:\n    type: rest    # This resource will have RESTful routes\n    resource: My\\Bundle\\ApiBundle\\Controller\\PostsController\n    name_prefix: api_   # RestBundle-specific prefixes are allowed now, as the RestBundle is now processing routes\nThis indeed works and makes sense.  I assumed that the processing was ran for each imported file separately.  I assume it would be helpful if I update the docs with this hint?\n. Actually, you already did a sufficient job in a previous commit.\nI haven't kept up to date on the README since using this bundle several weeks ago, so I missed this tip.\n. @lsmith77 Will you be tagging now that this is merged in?  Otherwise, I'll have to reference dev-master in Composer :)\n. ",
    "jdewit": "I had started making it in the FOS namespace. Didn't know you guys would be on this so quickly! \nThe idea is to generate code similar to the FOSUserBundle. I've just been using the Group code.\nI'd appreciate some feedback on the code so far. It still needs a lot of work. I'll work on making just a crud generator tonight.\n. Just thought I'd let you know that I have updated my bundle to a more complete state. Feedback/help would be much appreciated. Thanks!\nhttps://jdewit@github.com/jdewit/GeneratorBundle.git\n. The first error is happening again.\n. Hey stof, thanks for the reply. You're right, the first error is still happening occasionally with fosrestbundle disabled. \nI will move this issue to the odm bundle. \n. hey @yellow1912. I was unable to find the cause. I created a fresh virtualbox instance and haven't seen the error since.\n. ",
    "tarjei": "On 2012-05-17 00:47, Christophe Coevoet wrote:\n\nis the current doc [about\nrouting](https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/5-automatic-route-generation_single-restful-controller.md)\nand [subresource\nrouting](https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/6-automatic-route-generation_multiple-restful-controllers.md)\nenough to close the issue or is something else needed ?\n\nYes, that is much better!\nFeel free to close the issue - or I will do it when I get to work.\nTarjei\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/121#issuecomment-5754145\n. On 2012-05-17 00:47, Christophe Coevoet wrote:\nis the current doc [about\nrouting](https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/5-automatic-route-generation_single-restful-controller.md)\nand [subresource\nrouting](https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/6-automatic-route-generation_multiple-restful-controllers.md)\nenough to close the issue or is something else needed ?\n\nYes, that is much better!\nFeel free to close the issue - or I will do it when I get to work.\nTarjei\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/121#issuecomment-5754145\n. marijn: I've seen too many badly formed rss feeds not to use a library for that :)\n\nI added a note on the issue.\n. Lsmith77: That depends a lot on how much time you spend thinking about each line in the configuration. As the problem will not show up as an error when clearing the cache, I think it should be stated. I used this bundle for quite some time before the problem arose. \n. @lsmith77 could you provide pointers to how this should be implemented as part of the RouteResource annotation?\n. Ok, I tried that. I got quite far, but my unittests fail with the error:\nDoctrine\\Common\\Annotations\\AnnotationException: [Syntax Error] Expected Value, got 'r' at position 31 in class FOS\\RestBundle\\Tests\\Fixtures\\Controller\\AnnotatedNonPlurlizedArticleController.\nHere's the value I tried:\n``` php\n/*\n *  @Rest\\RouteResource(\"Article\", false)\n /\nclass AnnotatedNonPlurlizedArticleController extends FosRestController\n```\nAnd the Annotation definition:\n``` php\n/\n * RouteResource annotation class.\n * @Annotation\n * @Target(\"CLASS\")\n */\nclass RouteResource\n{\n    /\n     * @var string required\n     */\n    public $resource;\n/**\n * @var boolean\n */\npublic $pluralize = false;\n\n}\n```\n. I'll do that tomorrow. \n. Hmm, I ended up just defining an extra service. Maybe some way to define extra viewhandlers in the config is what is needed? I.e. something that is generated in the compile step and thus will incur a much smaller performance penalty. \n. Kudos for following this up!\n. Interesting, I wasn't aware of the getContext posibility. That would solve most of my usecases. \nHmm, I suggest we close this PR. Mainly because the methods suggested are better IMHO.\n. Also, while I'm at it, why isn't phpunit in the dev-dependencies?\n. I can, although I will miss the functionality - but then again I have already converted my code to 2.0 :)\n. No problem,  thanks for a Great bundle!\n25. apr. 2016 9.51 p.m. skrev \"Guilhem N\" notifications@github.com:\n\nThank you @tarjei https://github.com/tarjei !\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/1427#issuecomment-214497839\n. @GijsL I agree that it is a BC break. @GuilhemN: @GijsL suggested PR sounds like a simple solution. \n\nT. Looks good. One question: How should implementers use this. I.e. how should existing implementations using the class param be changed?. Hmm, I think it is ok to leave it in there in case of a different error. The path is not performance critical and finding the error without the try/catch is quite hard.\n. Yes, but my main problem is the issue I outlined in this comment: https://github.com/FriendsOfSymfony/FOSRestBundle/issues/294#issuecomment-22757392\nIf you can suggest a solution to that issue, then whitespace etc can be fixed :)\n. ",
    "willdurand": "Just a question, why didn't you follow the Symfony2 coding standards ?\n. Yup. Don't really know how to that though.\nI did API versioning once using different routes /v1/..., /v2/... but it is not \"cool\". What we want is to leverage the Accept header but then what? How do we organize controllers and actions?\n- A sub-namespace?\n- A specific controller name mapped to a version somewhere?\n- Something else?\nI thought about using a proxy controller that would forward the request to the right controller.\nExample: the routing uses Controller\\UserController. In this controller, if the version is:\n- v1 then we use Controller\\V1\\UserController\n- v2 then we use Controller\\V2\\UserController\n. Ah I am stupid. Yes, using the routing layer makes sense.\n. It does not work. UrlMatcher don't use attributes.. I think we need a RequestMatcher, but don't know who to inject it into the RouterListener...\n. It does not work. UrlMatcher don't use attributes.. I think we need a RequestMatcher, but don't know who to inject it into the RouterListener...\n. See this: https://github.com/willdurand/BazingaRestExtraBundle/commit/5880f3eb558f0d4f32b49184a085a0c673910624\nWhich default?\nSo, the UrlMatcher is not able to check attributes other than _method and _scheme. It is not able to check \"custom\" attributes. That is why we need a RequestMatcher but it is not injected by default in the RouterListener, and I am not sure to know how to do that the right way.\n. See this: https://github.com/willdurand/BazingaRestExtraBundle/commit/5880f3eb558f0d4f32b49184a085a0c673910624\nWhich default?\nSo, the UrlMatcher is not able to check attributes other than _method and _scheme. It is not able to check \"custom\" attributes. That is why we need a RequestMatcher but it is not injected by default in the RouterListener, and I am not sure to know how to do that the right way.\n. > do you really think it makes sense to add this feature to that Bundle rather than adding it here?\nNot at all! I just hacked into this bundle as it does not pollute that one, and it made things easier in my test project. This feature MUST be part of the FOSRestBundle.\nSo now that we know that this solution does not work, we need to find a new idea :p\n. @kbond you could do more stuff than changing the \"view\" of your data between two given versions.\n. nope. I guess we can even close this issue.\n. Priorities must be ordered but it makes sense right?\n. I'd like to see this PR merged, I don't want to write more code just to set a status code..\n. Is everything automatic once you enable the listener? Is it based on routing requirements?\n. Is everything automatic once you enable the listener? Is it based on routing requirements?\n. thanks\n. I thought it didnt work, what did you do?\n. I thought it didnt work, what did you do?\n. Ship it :)\n. Ship it :)\n. @dupuchba think about friendship between users, and how to add/remove friends.\n. I would PUT the collection, or use LINK whatever the spec says. \n. It's up to you as @stof said. The most important thing is to document your choice and to be consistent.\n. The BazingaHateoasBundle leverages the JMSSerializerBundle and the Serializer lib. By simply requiring it, it is able to add links on collections/resources without having to configure anything else (except the metadata for the links, but it is obvious). That means:\n1. add the bundle;\n2. add Hateoas specific annotations to your classes (the ones that are already configured for the Serializer) or use YAML files;\n3. enjoy!\n. @lsmith77 we could even delete the branch I'd say.\n. What about releasing 1.0.0 with JMS 0.9, and then start a new minor version (aka 1.1.0).\nAccording to semver:\n\n[Minor version] MAY be incremented if substantial new functionality or improvements are introduced within the private code.\n\nBecause if we don't introduce BC breaks on the public API, no need to start 2.0.0 IMO.\n. @lsmith77 isn't it a common use case? Having one bundle for the API part in a classic application?\nI know it would be better to have distinct applications with shared bundles for the common/business logic, but having an ApiBundle may be useful.\n. Btw you could set the _format to html in your routing definition, for all routes returning HTML only.\n. Why not, but then it should be documented somewhere.\n. As far as I understand, he just has a web application, and some other\nroutes to expose data.\n\nWilliam Durand | http://www.williamdurand.fr\nOn Mon, Dec 10, 2012 at 10:46 PM, Lukas Kahwe Smith \nnotifications@github.com wrote:\n\nbut i want to stress once more .. having a separate \"api\" and html\nresource urls is not REST. imho the only legitimate use is if you have\nradically different security setups for the API .. but even then i am not\nsure if its really necessary. a legitimate use case here would be for\nexample a project where the API was only supposed to be accessed by other\nmachines within the organizations intranet.\nbtw having separate kernels also has the added benefit if being able to\ntrim down the loaded bundles and configured services.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/335#issuecomment-11219512.\n. Experiencing the same issue on my repos.. I ended by requiring all packages in the travis setup...\n. Did you turn on the body listener?\n. @mvrhov PHP changes the status code if you set a location header with a status code that is not 201 or 3xx. It sets 302 instead. It makes sense according to RFC 2616.\n. anyone willing to write a PR for that?\n. :+1: for merging this ASAP\n. @steffenbrem I like your JsonApiSerializer class, would probably be a nice contribution to Hateoas.\n. @steffenbrem I like your JsonApiSerializer class, would probably be a nice contribution to Hateoas.\n. :+1: great idea!\n\nA new documentation chapter, and/or some doc fixes either on my blog post or in this bundle are welcome :)\nNote that the LiipHelloBundle also implements a few use cases.\n. what do you mean? just use the appropriate constraint for this bundle, something like 0.13.*.\n. arf...\nThis bundle has the following \"composer/packagist/package\" name: friendsofsymfony/rest-bundle, so change the constraint of this package. You should never use dev-master by the way!\n. Stable packages such as ~0.123 or 0.123.*, you will find more information at: http://getcomposer.org/doc/01-basic-usage.md#package-versions\n. thx\n. Short answer: no.\nLong answer: work in progress. See https://github.com/FriendsOfSymfony/FOSRestBundle/pull/136.\n. thanks!\n. Obviously :+1:\n. Could you paste the content sent by the server? Looks like it does not return XML for some reasons.\n. That has been discussed a few days ago. There are a few PRs to merge before we release a 1.0.0 version.\n. There won't be a 0.13 version I guess.\n. The only issue I can see here is that _format is not handled, but I don't know why. IMO there is nothing wrong except the use of _format itself...\n. You set prefer_extension to false, so there is no issue here. Look at your Accept header and you will see that rendering html makes the most sense in your case. Turn prefer_extension to true if you want to get JSON again.\n. :+1:\n. AFAIK there is no CORS support in this bundle, prefer that one: https://github.com/nelmio/NelmioCorsBundle.\n. Could you be more precise?\n. Note that you MUST set the Content-Type header with an appropriate value such as application/json. Do you do that? At first glance, everything looks good..\n. >  CRSF token generation\nThat won't work anyway. A REST API is stateless per se, which is not the case of CSRF token generation in Symfony2. A double submit mechanism is a better alternative, but it is not even needed in a REST API.\nChecking the content-type is enough to protect you against CSRF attacks as a form can't really send data encoded in a format other than text/plain, application/x-www-form-urlencoded, and multipart/form-data.\n@tonivdv I would add a listener to make a more user friendly response. The serialized form is ok-ish, but we could do a better job.\n. There is no \"standard\", you are free to document an error as you wish. You should probably read this Apigee paper.\n. Yeah, looks good to me. However it is a BC break.\n. @tonivdv you are modifying the response of an errored form, it's a BC break.\nGiven your example, displaying the error message is a matter of iterating over children.username.errors, and printing each entry. Because of your modification, you now have to access errors.children.username.errors.\n. Yes!\n. Shouldn't it be handled by the listener? Or, by another listener? Throwing an exception in each action seems painful.\n. Could you squash your commits please?\n. Ah good catch, introduced by 219466a69a07ab9c8518890854e0b32052cd5bfc.\n. Maybe just key is enough. We already know that it is a query parameter, part of the request.\n. @lsmith77 the hhvm builds you mean?\n. ah sorry, I misread the Allowed Failures section.\n. That could be a \"soft\" BC break I guess :p\n. Yep, looks weird to me as well. I mean, it works as is. Providing a failing test case would be nice :)\n. thx\n. oO\n. Tests for this handler are pretty not good by the way...\n. I will work on it.\n. This would need a bit more work I would say. For instance, relying on the FormatNegotiatorInterface would be nice.\n. To me, it is an issue with your web server. I don't think the bundle returns a 501 error response.\n. To me, it is an issue with your web server. I don't think the bundle returns a 501 error response.\n. :+1:\n. Yeah but it is a BC break I guess.\n. Yeah but it is a BC break I guess.\n. I don't think we plan to create a new major release yet.\n. I don't think we plan to create a new major release yet.\n. Well.. A BC break is a BC break, no matter how serious it is.\n. Well.. A BC break is a BC break, no matter how serious it is.\n. Sorry, what?\n. Sorry, what?\n. Yep, it is probably related to Negotiation.\n. I have backported the fix into 1.2, and then released 1.2.3. So this issue is fixed now.\n. Ahm, that was more a question than a suggestion.. Sorry :-(\n. I can't really remember but I'm pretty sure someone alrady reported such an issue. I think it is more related to this bundle than the FOSJsRoutingBundle.\n. I think adding such a feature would add too much complexity for almost no gain. What you could do however is creating an exception listener that would do the job.\n. :+1:\n. Let's fix the doc, it is not clear at all.\n. Let's fix the doc, it is not clear at all.\n. Yes, you should rely on the \u02cbAccept-Language` header. This bundle relies on Negotiation lib, so you may want to use it for negotiating the language as well.\nFor overriding this header, I would suggest a \u02cblocale\u02cb or \u02cblanguage\u02cb parameter in the query string.\nPut all the logic in a listener, and you're done!\n. :+1:\n. If this works, it will be useful to some of my projects as well :p\n. :+1:\n. :+1:\n. It is not supported at least.\n. Well, it should work I guess except for some edge cases just like this one. I did not test to be honest, but I'd be interested in bringing FOSRestBundle 2.0 support into NelmioApiDocBundle.\n. Argh. I knew it.. Sorry for this, I am going to revert the change and publish a fix right away.\n. This is now fixed in Negotiation 2.2.1. @edefimov could you please confirm?\n. I don't think it is worth adding a conflict either. We don't do that for other bug fixes.\n. The curly brackey should be on a new line.\n. Sf2 coding standards require an indentation with 4 spaces.\n. Add a use statement or what you want but the constructor should be all on the same line.\n. The opening curly bracket should be on a new line for functions.\n. Should be \\Exception.\n. Missing a blank line after this closing curly bracket.\n. You could use sprintf instead of concatenation (for readability)\n. Inline comments should bet with // even if you have two or more lines.\n// Add one or more entries. Note that entries must\n// be manually added once created.\n. Avoid blank lines for nothing.\n. Extra space before the closing parenthesis.\n. You could remove this line.\n. Add this line at the end of your doc block. and remove the colon\n. Always add * and indent to show the configuration.\n*  services:\n *      my.rss_handler:\n *          class: FOS\\RestBundle\\Examples\\RssHandler\n *          ....\n. Add a space after each comma\n. Add a new line after this curly bracket.\n. Remove extra lines here and after the closing curly bracket\n. Add a new blank line here, it will be more readable.\n. Yeah..\n. Yeah as this looks like a good idea, but it is too much. Lets KISS\n. you can use ~1.0 now, just tagged a first stable release.\n. I guess it should be application/javascript according to:\n- http://stackoverflow.com/questions/111302/best-content-type-to-serve-jsonp\n- https://github.com/rails/rails/pull/2321\n- https://dev.twitter.com/discussions/1232\n. Not sure to understand the issue..\n. what?\n. I would rely on Negotiation rather than parsing the header \"by hand\", at least to get the right header string (Negotiation does not extract parameters at the moment, but it should be fairly easy to implement).\nAlso, I would use a parameter to configure the v|version. \n. Isn't FOSRest supposed to be deprecated?\n. What about setting the optimal AcceptHeader to the request?\n. @amenophis available with ~1.0@dev.\n. @amenophis when what? I pushed the code.\n. @lsmith77 from Negotiation POV, you can use getBest() rather than getBestFormat() and call getFormat($acceptHeader->getValue()) to retrieve the format.\n. @lsmith77 because of priorities, which makes me think that it might not work as well as I thought... Priorities in FOSRestBundle are formats, not mime types right?\n. So. Basically, FOSRestBundle's negotiator would have to mimic the following method: https://github.com/willdurand/Negotiation/blob/master/src/Negotiation/FormatNegotiator.php#L84-L98, except that it would call getBest() itself, rather than directly use this method, so that it can set the AcceptHeader object to the request.\n. because it is not the same signature. Negotiation one is:\nNegotiatorInterface::getBest($header)\nThere it is clear.\n. I will release a new minor version.\n. Here it is: https://github.com/willdurand/Negotiation/releases/tag/1.1.0.\n~1.1 should be better.\n. Yep. Why not. But exception or trigger_error? Because, the config layer will throw an exception already...\n. ok.\n. updated the PR. I didn't know which kind of exception to use, I quickly googled for \"deprecated exception\", and most of the results were in favor of LogicException...\n. yes\n. preg_quote()?\n. ",
    "najiasup": "Hi, \ni want to use FOSRestBundle in my project, for this i followed the this web-site:\" http://blog.logicexception.com/2012/04/setting-up-symfony2-rest-service-with.html\"  but i got the following error: \" Fatal error: Class 'JMS\\SerializerBundle\\JMSSerializerBundle' not found in ...\\app\\AppKernel.php\"\nbut in my file AppKernel.php i added this ligne: new JMS\\SerializerBundle\\JMSSerializerBundle($this),\nthank's for your help\n. i got my error\nthank's :)\n. in the final, i got this error:\n2/2 FileLoaderLoadException: Cannot import resource \"...\\app/config\\config.yml\" from \"...\\app/config/config_dev.yml\"\n1/2 InvalidArgumentException: There is no extension able to load the configuration for \"acme_user_rest\" (in ...\\app/config\\config.yml). Looked for namespace \"acme_user_rest\", found \"framework\", \"security\", \"twig\", \"monolog\", \"swiftmailer\", \"doctrine\", \"assetic\", \"sensio_framework_extra\", \"jms_security_extra\", \"comback\", \"fos_user\", \"jms_serializer\", \"fos_rest\", \"acme_demo\", \"web_profiler\", \"sensio_distribution\"\n:(\n. ",
    "ferrangimenezz": "Hi augf87, I'm spanish too.\nIMO there's no need to support plurals in all main languages 'cos it's too complicated. You have two workarounds.. use spanish and don't care at all about this or use english.\nSaludos!\n. Solved. It might have been some miss-configuration or outdated component.\nI started from scratch and everything works fine now.\n. @stof: Thanks for the info, I'm gonna look for it to see if I can get it.\n@lsmith77: Yes, that would be a good idea. I was thinking about when loading the form in the client app, use the \"new\" method and get the token only, instead of the whole form as an option. I think it would be great for adding security to the REST methods.\n. ",
    "leevigraham": "SensioFrameworkBundle is being loaded before FOSRestBundle. The thing I found was that @View() requires you to add \".html.twig\" where are Template() doesn't require the engine or format. \nIs this by design? If so can you explain why for my ow understanding?\n. Register Bundles: http://pastebin.com/BK0cVR7J\nFull view path (works): http://pastebin.com/b58BiCv5\nWithout format and engine (doesn't work): http://pastebin.com/UQRunGdb\nError: http://cl.ly/182b1R3n2v1b1f0D0k3k\n. Oh man, I feel like an idiot. I just retested using @Template() without .html.twig and it doesn't work as suggested. \nI have no idea what was going on last night (I wasn't even coding with beer). Sorry for wasting everyones time!\n. Jumping in on this one with nothing to add other than this caught me out as well.\n. ",
    "mdhooge": "OK. I hope this is now cleaner\u2026\nBut note it is the corrections I made as I was reading for the first time and experimenting.\n. Here are my understanding of the problem\u2026 if you could advise me on how to investigate more, I'll happily do it.\nIn both cases, an exception is thrown because a parameter is missing.\nWith param_fetcher_listener: true, the ParamFetcher instance is simply created and handed over to the Controller action method. Then within the controller, when $paramFetcher->get() is called, the fetcher detects that the param is missing and throws the exception. But I don't know how the exception is caught (not by me, for sure) and who translates it into JSON.\nIn the other case, with param_fetcher_listener: 'force', the fetcher tries to retrieve all the declared parameters (so Symfony's default code can put them into the action method parameters). The exception is thrown but not caught at the same level. So finally an HTML page is constructed.\nI mentioned priorities in my previous comment but unfortunately they cannot be changed. Otherwise the Fetcher won't be called before the action is executed.\nThanks for your help\n. Thanks, it was the missing part of the puzzle ;-)\nI'll experiment that way\u2026\n. Rule #1: Never blindly accept pull request\n:o)\n. I updated this in a new commit but I'm still not sure this is what Lukas wanted to explain.\n. I removed \"except the mime_type listener\" but I doubt now that it is correct :'-(\n. because when I read \u201cexception_map\u201d, I expected to find this as a token in the config.yml. And since it isn't the case, I thought it would be better to remove the underscore and the ' '...\nBut this is really minor ;-)\n. ",
    "cystbear": "@lsmith77 will you add object versioning from JMSSerializerBundle doc link ?\n. @lsmith77 will you add object versioning from JMSSerializerBundle doc link ?\n. @lsmith77 not sure regarding this lines cause ViewHandler::getSerializer should return Symfony\\Component\\Serializer\\SerializerInterface but Symfony\\Component\\Serializer\\SerializerInterface have not setVersion method.  \nShould I add additional condition?, like:\n$serializer = $this->getSerializer();\n    if ($serializer instanceof \\JMS\\SerializerBundle\\Serializer\\Serializer) {\n        $serializer->setVersion($this->getObjectsVersion($view));    \n    }\n    $content = $serializer->serialize($view->getData(), $format);\n. @lsmith77 not sure regarding this lines cause ViewHandler::getSerializer should return Symfony\\Component\\Serializer\\SerializerInterface but Symfony\\Component\\Serializer\\SerializerInterface have not setVersion method.  \nShould I add additional condition?, like:\n$serializer = $this->getSerializer();\n    if ($serializer instanceof \\JMS\\SerializerBundle\\Serializer\\Serializer) {\n        $serializer->setVersion($this->getObjectsVersion($view));    \n    }\n    $content = $serializer->serialize($view->getData(), $format);\n. So, can I remove this docblock type hinting? And what other changes I should do, to prepare my PR to merge?\n. So, can I remove this docblock type hinting? And what other changes I should do, to prepare my PR to merge?\n. Is PR ready for merge?\n. Is PR ready for merge?\n. ",
    "adrienbrault": "Hi, any news on this ? (maybe after yesterday's REST talk at symfony live ?)\nWhat needs to be done ?\n. Hi, any news on this ? (maybe after yesterday's REST talk at symfony live ?)\nWhat needs to be done ?\n. I think that the FOSRestBundle would need to implement a MetadataDriver like https://github.com/willdurand/Hateoas/blob/master/src/Hateoas/Configuration/Metadata/Driver/AnnotationDriver.php . The HateoasBundle could have a DI tag to wire it up.\n. What about using version constraints like in composer instead ?\nEDIT: missed the description, sorry\n. Hm, why isnt the version set as a request attributes, and then matched as a regular route requirement ? (Do you think it is possible to translate a version constraint to a regex ?)\n. So now my understanding is:\n- We cannot define multiple routes, because only the first one will be matched by the router ?\n- @willdurand suggested to use the RequestMatcherInterface, however it seems that almost everything would have to be rewritten in the Routing component (compiler/optimized dumpers, the matcher itself)\n. Then we would just need a way to add negotiation functions to the routing expression language right ?\n``` yaml\nhello_version_v1:\n    pattern:  /liip/version\n    defaults:\n        _controller: 'liip_hello.world.controller:v1Action'\n        _format: json\n    condition: 'matchesVersion(request, \"1.*\")'\nhello_version_v2:\n    pattern:  /liip/version\n    defaults:\n        _controller: 'liip_hello.world.controller:v2Action'\n        _format: json\n    condition: 'matchesVersion(request, \"2.*\")'\n```\nThough I would not like having multiple routes that would generate the same path.\nRight now it does not seem easy add functions because : https://github.com/symfony/symfony/blob/5ebaad33e6b6e01b46afb86a9370dfe7e5d136c0/src/Symfony/Component/Routing/Matcher/UrlMatcher.php#L235-L245\n. Yes, I only created the issue because I didn't really had time but didn't want to forget about it :P\n. :+1: \n. Just to make sure, with this implementation declaring 2 controllers with the same path but with different versions won't work in practice right ?\n. Whether you want nested values or validation, I think you should use a form:\nphp\npublic function fooAction(Request $request)\n{\n    $form = $this->get('form.factory')->createNamed('', 'acme_foo_filter');\n    $form->submit($request->query->all(), false);\n}\nI also think QueryParam should always be replaced by using a form.\nWhat the FOSRestBundle could do to help is add some kind of ParamConverter to get the bound form as an argument:\n``` php\n/*\n * @SomeFosRestConverter(name = \"form\", type = \"acme_foo_filter\", request = {\"query\", \"_attributes\"})\n /\npublic function fooAction(Form $filterForm)\n{\n}\n``\n. I'm not arguing against that change, I'm arguing against the whole@QueryParam` concept.\n. I think this worked for me on travis pro a week ago:\necho -e '\\nhhvm.libxml.ext_entity_whitelist = \"file\"' | sudo tee -a /etc/hhvm/php.ini\n. Try also adding:\necho -e '\\ndate.timezone = \"UTC\"' | sudo tee -a /etc/hhvm/php.ini\n. ",
    "gimler": "any news\n. Would a PR accepted with a FOS\\RestBundle\\Controller\\SecurityController getSecurityTokenAction($intention).\nphp\nreturn $this->container\n            ->get('form.csrf_provider')\n            ->generateCsrfToken($intention);\n. Yes another solutions can be send the csrf token as header and add a method to the RestController for that. What Do you think? Why  is ehe _token field Not in the serialized Form response?\n. yes ;( see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/184\n. any news?\n. All html links are get requests. So i can't use the _method param it only works with post requests. See Symfony\\Component\\HttpFoundation\\Request line 747\n. yes but i think this is a hack. So the site doesn't work if the user has js disabled in the browser.\n. i think this is not so sexy so when you have a list with 100 entries you have for each special action a form. 3 actions = 300 forms. also in a plain email you can't put a form tag ;( \n. any news?\n. fixed\n. ",
    "blaugueux": "The version need to be also configured in the SerializationContext object.\n. The version need to be also configured in the SerializationContext object.\n. I have the same issue. Any chance to see this supported ?\n. ping @nils-wisiol Please \nCould you finish this patch. We need this fix for the 0.12 release asap :)\n. Great :)\n. Removing null === $view->getStatusCode() && is not the solution because it override the status code even if a 500 is throw. We are working on a fix.\n. Removing null === $view->getStatusCode() && is not the solution because it override the status code even if a 500 is throw. We are working on a fix.\n. This is not working for me because of null == $view->getStatusCode() && that need to be removed in ViewResponseListener.php on line 88\n. We use the ViewResponseListener.php and \n* @Rest\\View(statusCode=201)\n. @lsmith77 Sure, you can tag a patch after the 0.12.0\n. @lsmith77 we are currently trying to implement some failing tests for the @View(statusCode=xxx) annotation.\nAccording to @willdurand you should merge this PR because the issue is solved when using the ViewHandler. We will make a specific PR to solve the Listener issue.\n. @lsmith77 we are currently trying to implement some failing tests for the @View(statusCode=xxx) annotation.\nAccording to @willdurand you should merge this PR because the issue is solved when using the ViewHandler. We will make a specific PR to solve the Listener issue.\n. @lsmith77 i will\n. @lsmith77 i will\n. Issue with the View annotation is fixed in #454\n. Issue with the View annotation is fixed in #454\n. @lsmith77 tests are failing because of a timeout during composer install\nUpdate: tests are now ok!\n. @lsmith77 tests are failing because of a timeout during composer install\nUpdate: tests are now ok!\n. @lsmith77 fixed CS\n. @lsmith77 fixed CS\n. Thanks @lsmith77 \n. Thanks @lsmith77 \n. Why not using the native setCallback http://symfony.com/doc/current/components/http_foundation/introduction.html#jsonp-callback\n. You should remove one space after =\n. { should be on the next line.\n. I don't agree with that. You can make a jsonp request with some credentials into a private application.\n. ",
    "Codepadawan": "API versioning still out in the cold?\n. @kbond https://github.com/kbond  Absolutely... two different versions of\nan API could do very different things, despite identical endpoints.\nOn Fri, Aug 16, 2013 at 11:43 AM, William Durand\nnotifications@github.comwrote:\n\n@kbond https://github.com/kbond you could do more stuff than changing\nthe \"view\" of your data between two given versions.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/136#issuecomment-22743064\n.\n. I'd like to comment that it still appears that there is no way to patch an entity and set a boolean to false. This is a significant problem with Symfony2 forms.\n. I ended up using a \"choices\" field type with choices of 0 and 1. This\nactually works fine.\n\nOn Wed, Apr 16, 2014 at 11:53 PM, lukaszwit notifications@github.comwrote:\n\n@Codepadawan https://github.com/Codepadawan I had the same issue. My\nworkaround was to set default value in entity to false; But still this is\nhack not fix.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/296#issuecomment-40600906\n.\n. I ended up using a \"choices\" field type with choices of 0 and 1. This\nactually works fine.\n\nOn Wed, Apr 16, 2014 at 11:53 PM, lukaszwit notifications@github.comwrote:\n\n@Codepadawan https://github.com/Codepadawan I had the same issue. My\nworkaround was to set default value in entity to false; But still this is\nhack not fix.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/296#issuecomment-40600906\n.\n. \n",
    "denderello": "Actually @meandmymonkey and I thought about a similar approach lately using a listener which does negotiation before the routing using https://github.com/willdurand/Negotiation and setting request attributes.\n. Actually @meandmymonkey and I thought about a similar approach lately using a listener which does negotiation before the routing using https://github.com/willdurand/Negotiation and setting request attributes.\n. ",
    "clementblanco": "Is there anything stable already released about a dynamic versioning support with FosRestBundle and JMSSerializer (for Until and Since annotation support)?\n. Is there anything stable already released about a dynamic versioning support with FosRestBundle and JMSSerializer (for Until and Since annotation support)?\n. ",
    "babour": "Is this the issue that when there is camel case in an entity : \n- Keep the camel case for the get function \n- Force to use change the variable name and put underscore in front of every case \nIf so, do you have an hint for me to start investigating ?\nIt is just the most handicapping and time wasting bug I have ever seen.\n. Is this the issue that when there is camel case in an entity : \n- Keep the camel case for the get function \n- Force to use change the variable name and put underscore in front of every case \nIf so, do you have an hint for me to start investigating ?\nIt is just the most handicapping and time wasting bug I have ever seen.\n. I am having exactly the same issue.\nEven if it's not related to the bundle, could you tell me what solution you used to solve this problem?\nThank you.\n. I am having exactly the same issue.\nEven if it's not related to the bundle, could you tell me what solution you used to solve this problem?\nThank you.\n. @rickard2 Thanks a lot for your help. A quick questions : \nDid you put the code inside the bundle or did you override it somehow? If you override it, could you tell me how?\n. @rickard2 Thanks a lot for your help. A quick questions : \nDid you put the code inside the bundle or did you override it somehow? If you override it, could you tell me how?\n. Oh, it makes sense, but then you have to do it for each of your binding functions (at list each entity) right ?\n. Oh, it makes sense, but then you have to do it for each of your binding functions (at list each entity) right ?\n. Considering the requirement of the bundle, it would nice to update the decoder function and add this code to the bundle : \nclass JsonDecoder implements DecoderInterface {\npublic function decode( $data )\n{\n$decoded = @json_decode( $data, true );\n$decoded = $this->removeBooleans( $decoded );\nreturn $decoded;\n}\nprivate function removeBooleans( $array )\n{\nforeach ( $array as $key => $item ) {\nif ( is_array( $item ) ) {\n$array[ $key ] = $this->removeBooleans( $item );\n} else if ( $item === false ) {\nunset( $array[ $key ] );\n}\n}\nreturn $array;\n}\n}\n. Considering the requirement of the bundle, it would nice to update the decoder function and add this code to the bundle : \nclass JsonDecoder implements DecoderInterface {\npublic function decode( $data )\n{\n$decoded = @json_decode( $data, true );\n$decoded = $this->removeBooleans( $decoded );\nreturn $decoded;\n}\nprivate function removeBooleans( $array )\n{\nforeach ( $array as $key => $item ) {\nif ( is_array( $item ) ) {\n$array[ $key ] = $this->removeBooleans( $item );\n} else if ( $item === false ) {\nunset( $array[ $key ] );\n}\n}\nreturn $array;\n}\n}\n. After some investigation, I found out that 3 month ago the fosrest was updated with this code: \nhttps://github.com/FriendsOfSymfony/FOSRest/blob/master/Decoder/JsonToFormDecoder.php\nWe just have to use it in the fosrestbundle\n. I have looked around the bundle code and this is what we have to do :\n- Add the news service to the bodylistener.xml file\n- Add the options to the configuration.php file\n- Dynamically change the use of the service depending on the option added : decoder.json to the added service (decoder.jsontoform)\nThe first two are easy and i figured out how to do it, but I have no idea how to do the last part.\n. This issue should be reoppened.\n. I resolved the issue here : \nhttps://github.com/babour/FOSRestBundle/commit/cfd8df6f03401b16dfd07ca0f356e7531223d640\nBut I modified a few files a while ago and I can't delete the modification. \nWhat should I do ?\n. It's good, I just made PR. \nI only added one line of code and some documentation.\n. You register the services perfectly.\nAnd the type checkbox is the good one.\nI guess everyo ther fields works perfectly?\nDo you have the right fosrest version ? (not fosrestbundle)\n+If you want to be able to use form with checkbox and have true and false value (without any issue) you have to use : fos_rest.decoder.jsontoform (available since fosrest 0.8.0)\nHere is a sample of my config :\nyaml\nfos_rest:\n    view:\n        view_response_listener: false\n        failed_validation: HTTP_BAD_REQUEST\n        default_engine: php\n        force_redirects:\n            json: true\n        formats:\n            json: true\n    format_listener:\n        fallback_format:  json\n        prefer_extension: true\n    body_listener:\n        decoders:\n            json: fos_rest.decoder.jsontoform\n    param_fetcher_listener: true\nI know many of this options doesn't change anything, your configuration should work.\n. I agree with @stof I have been using it since I updated the bug and it works fine for me.\n. Sure, here is some code that I have issues when I return it, but the same problem occurs when the data are stored in the DataBase.\n$view = View::create()\n                        ->setStatusCode(401)\n                        ->setData(\"Erreur: Une demande est d\u00e9j\u00e0 cours\");\n                return $this->get('fos_rest.view_handler')->handle($view);\n. When I display the information (with Symfony views), It works fine.\nThis issue only happens with FOSRestBundle.\nDoes the character with an accent display when you do it? \n. Of course, I am not sure what you are expecting though, would you have an example by any chance?\n. I used the file and modified it. \nI didn't want to mess it up because I don't know how to run the test (and couldn't test the test file) so I just changed one function and put it in the first place. Le me know if you need anything else.\nhttp://temp.nt-race.fr/ViewHandlerTest.php\n. It's done, the test name is \"testPrepareTemplateParametersWithProvider\" : \nhttps://github.com/babour/FOSRestBundle\n. It's done here : https://github.com/FriendsOfSymfony/FOSRestBundle/pull/378\n. here is an update : \nAs you advised, I forked, installed and configured the bundle : https://github.com/liip-forks/symfony-standard\nI tried to reproduce the error and succeeded, so here is what I did once everything set-up.\nI went to this link : http://localhost/test/web/app_dev.php/liip/hello/d\u00e9j\u00e0.json\nAnd it's displayed : {\"name\":\"d\\u00e9j\\u00e0\"}\nSo the issues was there, but has this open issues suggested  : https://github.com/FriendsOfSymfony/FOSRestBundle/issues/311\nIt could be the fact that the accent was within the link.\nSo I went to this files : vendor/liip/hello-bundle/Liip/HelloBundle/Controller/RestController.php\nAnd changed the line 36 by (adding accent) : \"$articles = array('b\u00eem', 'b\u00e0m', 'b\u00efng\u00f4');\"\nI went to the associated link : http://localhost/test/web/app_dev.php/liip/hello/rest/articles.json\nAnd got that : {\"articles\":[\"b\\u00eem\",\"b\\u00e0m\",\"b\\u00efng\\u00f4\"],\"page\":\"1\"}\nSo I concluded that the issues is real and that there must be something that messes the test case I did.\n. It's very strange, I didn't changed anything on the bundle (only database parameters) and the line I told you.\nI tried on Chrome and Firefox and I have the samed display.\nI am running on oracle Virtual Box : ubuntu 10.04 and I am having the same issues on my dev server.\nWhat do you mean by Tag ?\n\n. What do you mean?\n. Good, I am happy that we successfully reproduced the error on different system. \nThank you for your help.\nI have the same issues when I try to get this information on iOS systems (iphone App).\n. Should we let someone know for this php bug? \nWould it be possible to make a fixe in the repository?\n. How to make it work with special characters such as accent?\n. When you user FOSRest and you use accent in your returned data, it doesn't return the right value, it returns the raw unicode value such as \"\\u00ee\".\nIt seems to be an issue with json_encode/json_decode I am trying to figure out a fix but nothing so far.\nIf anyone has a cue...\n. Would you have an example of how to decode this properly?\nI tried with json_decode() but the result are the same in Mozila or Chrome, is there some specific header or something to do to display it the right way?\n. For now I am just trying to do this with php json_decode() function, but it displays exactly the same as the encode version from my screenshot earlier.\n. Indeed, thank you for your help.\nA simple json_decode on the content field of the json request was enough.\nI am not familiar with json format, but my iOS developer should have known better.\nSorry for wasting your time guys, I hope it will help other people :).\nThanks a lot to everyone!\n. As you advised, I forked, installed and configured this bundle.\nI tried to reproduce the error, so here is what I did once everything set-up.\nI went to this link : http://localhost/test/web/app_dev.php/liip/hello/d\u00e9j\u00e0.json\nAnd it's displayed : {\"name\":\"d\\u00e9j\\u00e0\"}\nSo the issues was there, but has this open issues suggested  : https://github.com/FriendsOfSymfony/FOSRestBundle/issues/311\nIt could be the fact that the accent was within the link.\nSo I went to this files : vendor/liip/hello-bundle/Liip/HelloBundle/Controller/RestController.php\nAnd changed the line 36 by (adding accent) : \"$articles = array('b\u00eem', 'b\u00e0m', 'b\u00efng\u00f4');\"\nI went to the associated link : http://localhost/test/web/app_dev.php/liip/hello/rest/articles.json\nAnd got that : {\"articles\":[\"b\\u00eem\",\"b\\u00e0m\",\"b\\u00efng\\u00f4\"],\"page\":\"1\"}\nSo I concluded that the issues is real and that there must be something that messes the testcase.\n. ",
    "nmathon": "Hi Ismith,\nI'm using FOSRestBundle with the route generation.\nAll my services are standards (GET, POST, PUT, DELETE) and works fine when they are public.\nI try to protect my REST api with a WSSE authentication :\nhttp://symfony.com/doc/2.0/cookbook/security/custom_authentication_provider.html\nIn order to call the API, I make the following ajax call\njavascript\n$.ajax(Routing.generate('api_get_user'), {\n    type: \"GET\",\n    beforeSend: function(xhrObj){\n        xhrObj.setRequestHeader(\"Authorization\",'WSSE profile=\"UsernameToken\"');\n        xhrObj.setRequestHeader(\"X-WSSE\",wsseHeader(login, password));\n    },\n});\nBut, before to make the GET request, the browser first send an OPTIONS request which should respond \"OK you can call this method with GET\". But currently, the response is \"You can't make an OPTIONS request\".\nDo you see what I'm looking for ?\nBut it's my first REST + WSSE project, so correct me, if I am mistaken\n. Yes, I think it should be a good solution.\n. Why not. I will have a look to the RestBundle code first :-)\n. So, I looked more precisely. In order to handle WSSE request, I have some specific parameters to set in the header of options requests. \nSo I think the best solution is to make a specific Request Listener to handle this case. I made a WsseBundle with a Request Listener and it works fine with FOSRestBundle.\nSo I will not add this functionnality to FOSRest but publish a specific bundle to handle Wsse correctly.\nThanks for your help  lsmith, it was very useful for me.\n. ",
    "jonathaningram": "OK after some debugging I believe that I've got it to work. As far as I can see, the correct code should be:\n```\n<?php\n/\n * @Route(\"/sites\")\n */\nclass SitesController extends Controller\n{\n    /\n     * @Get(\"/{id}/status\", requirements={\"id\" = \"\\d+\"})\n     \n     * @ParamConverter(\"site\", class=\"MyCoreBundle:Site\")\n     * \n     * @View()\n     /\n    public function statusAction(SiteInterface $site)\n    {\n        // do something\n        return array();\n    }\n}\n```\nThe key is to use a @Get or @Post or whatever method annotation instead of the Symfony @Route. Note: the method routes like @Get extend the Symfony @Route, so as far as I can see from debugging the code, they work the same, but facilitate FOS REST to work.\nWe could probably get some better documentation here. Maybe once I get my controllers looking nice, I can provide some working code.\n. OK some more checking and it appears that it does not work as expected, primarily, it seems because we have a @Route(\"/sites\") prefix.\nIf I can paste some code from https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Routing/Loader/RestRouteLoader.php#L299, perhaps you might understand what is happening:\n```\n<?php\nforeach ($resources as $i => $resource) {\n    if (null !== $resource) {\n        $routeName .= '_' . basename($resource);\n    }\nif (!empty($this->prefix) && $i === count($this->parents)) {\n    $urlParts[] = $this->prefix;\n}\n\nif (isset($arguments[$i])) {\n    if ($patternStart) {\n        // We go into this if\n        $urlParts[] = strtolower($patternStart) . '/{' . $arguments[$i]->getName() . '}';\n    } elseif (null !== $resource) {\n        $urlParts[] =\n            strtolower(Pluralization::pluralize($resource)) . '/{' . $arguments[$i]->getName() . '}';\n    } else {\n        $urlParts[] ='{' . $arguments[$i]->getName() . '}';\n    }\n} else {\n    if ($patternStart) {\n        $urlParts[] = $patternStart;\n    } elseif (null !== $resource) {\n        $urlParts[] = strtolower($resource);\n    }\n}\n\n}\n```\nLook for my comment within that block to see what the code does. Here, we do have a $patternStart equal to sites. So, we are going to end up with $urlParts equal to sites/{site} (after it is imploded with / - also remember that our argument name is site, hence the {site}\nThe problem we are about to see is that if we have a method annotation @Get(\"/{id}\"), it is not used, but rather the argument name site is.\nThen in the next block of code,\n```\n<?php\n// Implode it as I said above\n$pattern        = implode('/', $urlParts);\n// ...\nforeach ($this->annotationClasses as $annotationClass) {\n    $routeAnnnotation = $this->reader->getMethodAnnotation($method, $annotationClass);\nif (null !== $routeAnnnotation) {\n    $annoRequirements   = $routeAnnnotation->getRequirements();\n\n    if (!isset($annoRequirements['_method']) || null === $annoRequirements['_method']) {\n        $annoRequirements['_method'] = $requirements['_method'];\n    }\n\n    // *\n    $pattern        = $routeAnnnotation->getPattern() ?: $pattern;\n    $requirements   = array_merge($requirements, $annoRequirements);\n    $options        = array_merge($options, $routeAnnnotation->getOptions());\n    $defaults       = array_merge($defaults, $routeAnnnotation->getDefaults());\n\n    break;\n}\n\n}\n```\nThe important line is *. It looks on our method annotation @Get(\"/{id}\"), sees that it has a pattern /{id} and chooses it over $pattern, which was equal to sites/{site}. And so we end up with a final $pattern equal to /{id} without our @Route or @Prefix prepended to it (i.e. the @Route and @Prefix are completely ignored) (aside - I don't actually understand the difference between these two annotations and @Prefix is not documented).\nIt seems to me that at the * line, it needs to check that if the method has an annotation, do the check again for a prefix/patternStart and prepend it also, no?\nSomething like this:\n```\n<?php\nif ($routeAnnotation->getPattern() !== null && $routeAnnotation->getPattern() !== '') {\n    $pattern = $patternStart . '/' . $routeAnnotation->getPattern();\n    // Or something similar to $urlParts array as done above and then implode on a \"/\"\n}\n```\nWhat do you think?\n. Thanks :) is it because you have no time or because my comments don't make sense?\n. @henrikbjorn, so are you suggesting that my example does in fact work? Because my example above is basically the same as your code and it did not work.\n. Yes just to confirm this issue has broken with symfony master rendering our app unusable since there are no tags to fall back to.\n. @lsmith77 any chance you'd be able to rebase this branch to pull in the latest commits from master?\n. @lsmith77 thanks so much for doing that! I'm not sure if I can do anything to help, but please let me know?\nAlso, I have the same problem as @ilanco whereby we get the error You have requested a non-existent servicefos_rest.view_handler(i.e. anyfos_rest.view_handler.*service disappears entirely from the compiled container!) . I know you said that you tried figuring it out and writing a test to trap the issue, but it's really weird: searching the entire cache folder forview_handler` yields only two results, namely the two callback parameters:\n'fos_rest.view_handler.jsonp.callback_param' => 'callback',\n'fos_rest.view_handler.jsonp.callback_filter' => '/(^[a-z0-9_]+$)|(^YUI\\\\.Env\\\\.JSONP\\\\._[0-9]+$)/i',\n(There is no default or jsonp fos_rest.view_handler). Force clearing the cache, restarting Apache doesn't help.\nI thought maybe changing the fos_rest.view_handler.* services in view.xml from private to public would help, but it didn't seem to help.\nIt would seem there's an issue with the container definition decorator in the FOSRestExtension class, but again, changing/commenting-out different parts within https://github.com/FriendsOfSymfony/FOSRestBundle/pull/266/files#L1R123 didn't help either. I've compared your code with some other definition decorators in my vendors, and I can't figure out the issue either. Maybe someone with a bit more knowledge of compiling the container could take a look at that if block and shed insight if there's some secret problem in there that causes the code to not work pre Symfony dev-master?\nI am on Symfony v2.1.5-dev (not dev-master) and I just updated FOSRestBundle to the rebased version.\n. > A separate kernel is an interesting idea however the only difference between the two kernels would be the Content Negotiation.\n\nAs a sidenote, a cookbook entry about having two kernels would be great!\n\n@dvrenterghem-ibuildings if it helps, we are using two separate kernels (one for WWW and one for api [under /api/*]), and it works quite good (so far). We also keep them in separate git projects, which has the advantage that the API can be developed separately from WWW. There's other pros and cons, obviously, which I won't go into.\n. I actually just noticed the TODO note that says content-type negotiation does not work: https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/EventListener/AccessDeniedListener.php#L55\n. Fixed.\n. Also, if you are happy with this, a rebase on https://github.com/FriendsOfSymfony/FOSRestBundle/pull/266 would be amazing ;)\n. ",
    "henrikbjorn": "``` php\n<?php\n/\n * @Route(\"/blog\")\n */\nclass DefaultController extends Controller\n{\n    /\n     * @Get(\"/hello/{name}\")\n     * @Template()\n     */\n    public function indexAction($name)\n    {\n        return array('name' => $name);\n    }\n/**\n * @Route(\"/converter/{id}\")\n * @View()\n */\npublic function converterAction(Post $post)\n{\n    var_dump($post);die;\n    return array();\n}\n\n}\n```\nGive me a Post object\ntext\nobject(Acme\\BlogBundle\\Entity\\Post)[376]\n  private 'id' => int 1\n  private 'title' => string 'This is a blog post' (length=19)\n  private 'body' => string 'With some very interesting content' (length=34)\nSame with @Get annotation.\nphp\n<?php\n    /**\n     * @Get(\"/converter/{id}\")\n     * @ParamConverter(\"post\", class=\"AcmeBlogBundle:Post\")\n     * @View()\n     */\n    public function converterAction(Post $post)\n    {\n        var_dump($post);die;\n        return array();\n    }\nworks aswell\n. @stof nope there isnt. I did that change in between some other refactoring. And currently i have some problems personally so i wont be able to do more about it. So if somebody could cherry pick it that would be fine.\n. @Dattaya the commit i did would look like this.\nphp\n<?php\n/**\n * @ParamConverter(\"user\", class=\"AcmeDemoBundle:User\")\n * @ParamConverter(\"comment\", class=\"AcmeDemoBundle:Comment\")\n */\npublic function getUserCommentAction(User $user, Comment $comment)\n// \"get_user_comment\"     [GET] /users/{user}/comments/{comment}\nAnd the {user} and {comment} would contain id's if you need to select based on name, then you should create your own ParamConverter to do this.\n. @lsmith77 sorry i wont be back for a couple of weeks personal issues.\n. @lsmith77 sorry i wont be back for a couple of weeks personal issues.\n. Don't think this is a good idea. But it might be okay, as having ParamConverters for optional Parameter would seem weird.\n. Only for the @View annotation when that have been created.\n. /[[:alnum:]-_.]+/i ?\n. ",
    "Dattaya": "ParamConverter can work with FOSRestBundle but for dynamic routes a name of a variable in method got to be the same as a field name of an entity:\nphp\n<?php\npublic function getTplAction(Project $id)\n{\n    //...\n} // route: /tpl/{id}\n. I don't know how it is possible to generate appropriate route, e.g. /tpl/{id} if type hinted variable is ignored.\nWhen multiple param converter annotation will be supported, FOSRestBundle can have it's own param converter for automatically generated routes. \nOne idea:\nBy default for type hinted variables an entity object can be fetched with findById\nFor other fields we can extend default notation \"bundle:repository\" to \"bundle:repository:fieldname\"\nExample:\nphp\n<?php\n/**\n * @ParamConverter(\"user\", class=\"AcmeDemoBundle:User:name\")\n */\npublic function getUserCommentAction(User $user, Comment $comment)\n// \"get_user_comment\"     [GET] /users/{user}/comments/{comment}\nIn this case $comment will be fetched by default by id, and user by name. \nand possible very simple implementation:\n``` php\n<?php \nclass DoctrineParamConverter implements ParamConverterInterface\n{\n    public function apply(Request $request, ConfigurationInterface $configuration)\n    {\n        $object = $this->findOneBy($request, $configuration);\n        if (null === $object && false === $configuration->isOptional()) {\n            throw new NotFoundHttpException(sprintf('%s object not found.', $configuration->getClass()));\n        }\n    $request->attributes->set($configuration->getName(), $object);\n\n    return true;\n}\n\nprotected function findOneBy(Request $request, ConfigurationInterface $configuration)\n{\n    $by = 'id';\n    $class = $configuration->getClass();\n    $exploded = explode(':', $class);\n\n    if (count($exploded) == 3) {\n        $by = array_pop($exploded);\n        $class = implode(':', $exploded);\n    }\n\n    $options = $this->getOptions($configuration);\n\n    $value = $request->attributes->get($configuration->getName());\n\n    return $this->registry->getRepository($class, $options['entity_manager'])\n        ->findOneBy(array($by => $value));\n}\n\n//...\n```\n. Interesting idea, but what about more than one object that should be fetched by id?\npublic function getUserCommentAction(User $user, Comment $comment, $id, $id) //?\n. Interesting idea, but what about more than one object that should be fetched by id?\nI believe it is possible to have fields with the same name if @henrikbjorn param converter will be merged.\nExample, lets assume these two entities both have name field:\nphp\n<?php\n/**\n * @ParamConverter(\"uname\", class=\"AcmeDemoBundle:User\", options={ \"method\" = \"name\" })\n * @ParamConverter(\"cname\", class=\"AcmeDemoBundle:Comment\", options={ \"method\" = \"name\" })\n */\npublic function getUserCommentAction(User $user, Comment $comment, $uname, $cname)\n// \"get_user_comment\"     [GET] /users/{uname}/comments/{cname}\n. but again only $id would then be considered to be a route parameter. \n@lsmith77 , i don't quite understand how converter could know from this getUserCommentAction(User $user, Comment $comment, $uid, $cid) that we want it to fetch objects by id.\n. Right, my example is wrong. The bundle needs its own converter or users have to create it by themselves.\n. Yes, I can.\n. Yes, I can.\n. If a custom View object with explicitly format set is returned from a controller, e.g.:\nphp\n<?php\n        $view = new \\FOS\\RestBundle\\View\\View(array('project' => $project));\n        return $view->setFormat(\"html\");\nand format from Accept header doesn't require template,\nwith this PR an error will arise:\n{\"status\":\"error\",\"status_code\":500,\"status_text\":\"Internal Server Error\",\"current_content\":\"\",\n\"message\":\"Unable to find template \\\"\\\".\"}\n. If a custom View object with explicitly format set is returned from a controller, e.g.:\nphp\n<?php\n        $view = new \\FOS\\RestBundle\\View\\View(array('project' => $project));\n        return $view->setFormat(\"html\");\nand format from Accept header doesn't require template,\nwith this PR an error will arise:\n{\"status\":\"error\",\"status_code\":500,\"status_text\":\"Internal Server Error\",\"current_content\":\"\",\n\"message\":\"Unable to find template \\\"\\\".\"}\n. Do you think it's worth/possible to move template processing to the kernel.view event, so the default behavior won't be broken? Or another ideas?\n. Do you think it's worth/possible to move template processing to the kernel.view event, so the default behavior won't be broken? Or another ideas?\n. but if the user created a View instance with a hardcoded format, then this information would be available in the view listener.\nYes, but all these template things are happening during a kernel.controller phase\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/EventListener/ViewResponseListener.php#L52\nhttps://github.com/sensio/SensioFrameworkExtraBundle/blob/master/EventListener/TemplateListener.php#L49\n. And an interesting article about PATCH - Edge Rails: PATCH is the new primary HTTP method for updates  - http://weblog.rubyonrails.org/2012/2/25/edge-rails-patch-is-the-new-primary-http-method-for-updates/\n. About documentation, all these actions now by default accept PATCH method and instead of\n\nDefine resource actions\npublic function lockUserAction($slug)\n {} // \"lock_user\"    [POST] /users/{slug}/lock\npublic function banUserAction($slug)\n  {} // \"ban_user\"     [POST] /users/{slug}/ban\npublic function voteUserCommentAction($slug, $id)\n {} // \"vote_user_comment\"    [POST] /users/{slug}/comments/{id}/vote\n\nshould be:\n\nDefine resource actions\npublic function lockUserAction($slug)\n {} // \"lock_user\"    [PATCH] /users/{slug}/lock\npublic function banUserAction($slug, $id)\n  {} // \"ban_user\"     [PATCH] /users/{slug}/ban\npublic function voteUserCommentAction($slug)\n {} // \"vote_user_comment\"    [PATCH] /users/{slug}/comments/{id}/vote\n. because this \"resource: \"@AcmeHelloBundle\\Controller\\UsersController\"\" didn't work for me. Have you tried to use such syntax?\n. now try to change \"type:     annotation\" to \"type: rest\"\n. yes it does, because it's yml file, i guess RestYamlCollectionLoader loads yml files.\n. and btw i haven't seen such syntax \"@AcmeHelloBundle\\Controller\\UsersController\" anywhere, only \n\"@LiipHelloBundle/Controller/ExtraController.php\" for controller class\n\"@SensioBlogBundle/Controller\" - whole directory\n. \n",
    "jrobeson": "ping\n. @lsmith77 : i think it can.\n. @stof: how come the composer constraint isn't updated to 2.3-dev ? Pardon my ignorance and assumptions on that one.\n. tthe branch was merged, so 2.2.* deps on sensio/frameworkextrabundle should work again. I'll see about updating the listener code in the next day or so.\n. note : i don't use FOSRestBundle, so i don't actually know which order ends up being in effect. thus the WIP.\n. @adriensamson : it's -10 in master.\n. @amenophis : you will be a hero if you accomplish this!\n. @amenophis : you will be a hero if you accomplish this!\n. how did this turn into a support thread?\n. this issue tracker is meant to track issues/bugs with FosRestBundle, not help you learn how to use symfony. The mailing list is a much better place to ask for help with using the code.\n. @suncat2000 : still into this?\n. ping @tyx ?\n. ping @tyx ?\n. updated with fixes from @xabbuh \n. so.. minus those two issues what do you think? I didnt bother fixing them until the change is agreed with.\n. ",
    "farconada": "Any example with POST and json parameters?\n. ",
    "parnas": "Currently it's possible to work around that by adding @QueryParam(name=\"...\") to the annotations before method. \nWhile certainly workable, it's clashes with possible magic by annotation usage of ParamConverter (when no annotations are required at all).\nLike it was said here, making fos rest to skip all the annotations would break the BC, but what if we allow users to pass list of class names to add to the skip list in RestActionReader::getMethodArguments?\nI can submit a pull request or patch if you think that this is a good idea.\n. You can check my comment made last december:\n\"Like it was said here, making fos rest to skip all the annotations would break the BC, but what if we allow users to pass list of class names to add to the skip list in RestActionReader::getMethodArguments?\nI can submit a pull request or patch if you think that this is a good idea.\"\n. There indeed is probably no need to make a version that will accept all a list of hints to skip since this \"skip all\" version is switchable and off by default (to be certain about bc).\n. Wouldn't that actually be a huge BC break? I know that it would be for my projects. It's working now, and with my changes - it's working with type hinted values as well.\n. I'm really wondering in what cases that might happen, but sure, it would be, technically, more correct :)\nWhat do you prefer, assign in a separate line then check or \"&& $class !== false\"?\n. ",
    "epicwhale": "Is there any workaround to this?\nEven without a ParamConverter, it looks like I even can't pass parameters to the controller action uses the concept of having the Request attribute names == parameter names which I believe is resolved by the ControllerResolver. \nfor e.g, I can't send the 'foo' request attribute to this controller action (like stated below). When I do the below, it instead generates a Child Resource route.\n/**\n     * \n     * @param \\FOS\\RestBundle\\Request\\ParamFetcher $paramFetcher\n     * @View(serializerGroups={\"list_view\"})\n     */\n    public function getCategoriesAction(ParamFetcher $paramFetcher, Document\\Foo $foo)\nFor now, I've to inject the Request object and access the store attribute via it. Wanted to know what's my next best solution to this problem?\n. Is there any workaround to this?\nEven without a ParamConverter, it looks like I even can't pass parameters to the controller action uses the concept of having the Request attribute names == parameter names which I believe is resolved by the ControllerResolver. \nfor e.g, I can't send the 'foo' request attribute to this controller action (like stated below). When I do the below, it instead generates a Child Resource route.\n/**\n     * \n     * @param \\FOS\\RestBundle\\Request\\ParamFetcher $paramFetcher\n     * @View(serializerGroups={\"list_view\"})\n     */\n    public function getCategoriesAction(ParamFetcher $paramFetcher, Document\\Foo $foo)\nFor now, I've to inject the Request object and access the store attribute via it. Wanted to know what's my next best solution to this problem?\n. Yes, what @websirnik has pointed is the only way to get ParamConverter working with FOSRestBundle. You've to sacrifice automatic route generation in favor of using the REST Bundle's route annotations. \nThe trade-off is acceptable.. in fact, I completely avoid automatic route generation as it opens room for confusion.\n. @lsmith77 @websirnik Could you help put a conclusion note here for people like me who encountered the problem, but do not clearly understand the consensus of this thread.\nDoes this pull request ensure that ParamConverter's injected into route actions are untouched and not interpreted by FOS REST even when using Automatic Route generation?\n. Excuse my delayed reply.\nI honestly don't see the point of ignoring the ParamConverter type hint. I (in my experience) haven't ever seen anyone inject the ParamConverter into any action.\nThe only way I see this issue actually being solved is by ignoring all parameters of an action which have any kind of type-hint (or else actually parsing the ParamConverter's annotation config to know which all fields are owned by it and ignoring those).\n. @parnas @lsmith77 Why would ignoring all type hints break the BC? \nI think the idea of having users to pass list of class names is going to create further confusing configuration and management overhead. Developers use ParamConverter and Request Attributes into controller actions as parameters because of its ease of use and minimal configuration..\nIn the worse case, if we have to, it could be annotation on that action defining the parameters which should be skipped by the Rest bundle.\nBut I still feel blindly ignoring all type-hinted parameters is the way to go and I don't see a case where there will be a BC break (yet). \n. After much thought, we just decided to stop using Automatic Route generation throughout the project. Was creating more complications and limitations than easing things up.. \nI think the best solution to the above problem is to define the FOS Rest routes manually using Symfony2's extra annotations and enjoy all the features of symfony2 peacefully.\n. Where's the documentation regarding how to use this feature?\n. @AlmogBaku how did you end up implementing this?\n. @stof How would I go about configuring this in Monolog? Can't find an ExclusionStrategyInterface there.\n. @AlmogBaku thanks for sharing.\n@AlmogBaku @lsmith77 I ended up raising my production error logging from error to critical as symfony2 marks all HTTP Exceptions as errors. That seemed to solve it elegantly for me, but I see the above solution provides a lot more flexibility. \nHow would such a feature be implemented in the bundle? \n. @AlmogBaku I think the regex is an ugly idea.. instead we should have a list of exceptions which can be silenced from logging.. just like how there's a config for exception.messages. These exceptions should ideally be an instance of HTTPException.\n. @AlmogBaku sorry, didn't get you.. why would other parts of the website be a concern of the FOS REST bundle?\n. ",
    "websirnik": "The following example works for me. Specifiying @Rest\\Get(\"/posts/{slug}\")and converter=\"mongodb_converter\" was the solution for me.\n``` php\nuse Org\\AppBundle\\Document\\Post;\n/\n * @Rest\\Get(\"/posts/{slug}\")\n * @ParamConverter(\"post\", converter=\"mongodb_converter\")\n * @Rest\\View()\n /\n public function getPostAction(Post $post) {\n     return $post;\n }\n```\nyml\nservices:\n    myapp.converter.doctrine.mongodb:\n        class: Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DoctrineParamConverter\n        arguments: [@doctrine_mongodb]\n        tags:\n            - { name: request.param_converter, priority: -2, converter: mongodb_converter }\n. @lsmith77 yes it does. Added ParamConverter to ignore list, allowed me to remove @Rest\\Get(\"/posts/{slug}\") reference.\n``` php\n// ../FOSRestBundle/Routing/Loader/Reader/RestActionReader.php\n$ignoreClasses = array(\n    '...',\n    'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\ParamConverter'\n);\n``\n. So the Pull Request solves the problem when$this->container->get('kernel')->isDebug() === true.\nWhen$this->container->get('kernel')->isDebug() == false`, the Response is \njson\n{\"code\":401,\"message\":\"Unauthorized\"}\nNow the question is how to get \"My message\" in Response when  $this->container->get('kernel')->isDebug() == false?\n. Hm. Even when I know what I'm doing? I need to pass some data to tell the user what he/she will get after the authentication. \n. As a different approach for my problem. If I create a custom exception and map it to 401 via the config in the bundle, would I be able to get \"My message\" in Response?\njson\n{\"code\":401,\"message\":\"My Message\"}\n. The second idea worked. I've created a custom exception and mapped it to 401&403.\nyml\nfos_rest:\n    exception:\n        codes:\n            'Topboard\\AppBundle\\Exception\\ExposableAuthenticationException': 401\n            'Topboard\\AppBundle\\Exception\\ExposableAccessDeniedException': 403\n        messages:\n            'Topboard\\AppBundle\\Exception\\ExposableAuthenticationException': true\n            'Topboard\\AppBundle\\Exception\\ExposableAccessDeniedException': true\nPull request is not relevant anymore.\n. ",
    "arnaud-lb": "can this be merged ?\n. Sure: https://github.com/FriendsOfSymfony/FOSRestBundle/pull/158\n. there was a failing test, fixed it.\n. sure, done\n. Since jsonp allows non trusted sites to send requests on behalf of users and see the response, it should be noted that implicit authentication mechanisms must be disabled if jsonp is enabled (e.g. cookie or authorization header based auth).\nThe bundle could even disable these itself (or e.g. allow to configure a whitelist of auth providers, or remove cookies and authorization headers from the request) during jsonp requests.\n. You can make a jsonp request with some credentials.\nBut the credentials should not be sent implicitly by the browser, else any untrusted website can do an authenticated request without knowing the credentials, since the browser sends them implicitly.\nSo a jsonp API must not use cookies or http auth for authentication.\n. ",
    "jalliot": "Well it should be as LoaderResolver implements LoaderResolverInterface...\nAnyway, without this change, the loader is broken because it is incompatible with the interface from upstream.\n. @stof I believe the problem is the same with @Secure, @SecureParam, @SecureReturn or even @LookupMethod from JMSDiExtraBundle. The @PreAuthorize was only an example from a real controller of mine :)\nSo if I understand correctly, the only possible thing to do is waiting for @fabpot to review and merge sensio/SensioFrameworkExtraBundle#78?\n/cc @schmittjoh \n. Seems like we would need a standardized way (i.e. in core) to generate proxies for controllers or stuff...\n. @schmittjoh sensio/SensioFrameworkExtraBundle#78 has been merged :)\n. @schmittjoh I actually didn't have time to work on this project for a long time so I can't really tell.\nBut given the recent changes I assume it is now working so I'm closing the issue.\nIf by any chance I (or anyone else) have still the problem, I'll reopen :)\n. @schmittjoh I actually didn't have time to work on this project for a long time so I can't really tell.\nBut given the recent changes I assume it is now working so I'm closing the issue.\nIf by any chance I (or anyone else) have still the problem, I'll reopen :)\n. ",
    "jmikola": "Cross-reference here: symfony/symfony#2785\nYou may wish to wait and see if that PR will ultimately go to 2.0 or master. But if it does go to master, it probably makes sense to have a 2.0 branch in this bundle w/o the interface change.\n. See: sensio/SensioFrameworkExtraBundle#87\n. Ping: @lsmith77. I contemplated making this change myself but I'd rather let you sign off on it. I believe these are all used exclusively by the bundle:\n- _view\n- _template\n- _template_vars\n- _template_default_vars\nI'm not entirely sure about _view... I know _format is common to Symfony. Anywho, I suggest prefixing all of these with something like _fos_rest_ to avoid conflicts.\n. My mistake. I went right to the code before consulting the README :)\n. ",
    "asm89": "@everzet I agree on the fact that you will not have optional controller parameters in case you're defining RESTful resources, but if you do, the previously generated url would be incorrect. I guess it would be better to not add optional parameters to the route and put a warning in the doc?\nApart from the routing thing, it would still be nice to have some sort of service that helps you with dealing with optional parameters. Check out the initial IRC discussion for examples of those.\nClosing the PR is fine btw. I'll check out the new code.\n. Woops, should be 2.0 branch.\n. @lsmith77 @stof Rebased. Does it work now?\n. The code hasn't changed a lot from the original PoC I send. I think that if this would get merged it would be supporting the original idea? #178 In short the idea was to support the developer with checking and documenting query parameters used in api controller actions.\n. The code hasn't changed a lot from the original PoC I send. I think that if this would get merged it would be supporting the original idea? #178 In short the idea was to support the developer with checking and documenting query parameters used in api controller actions.\n. Honestly I think it doesn't make sense to inject the query parameters in your method signature. That would make your code even less portable. My original idea was that the query param thing could help you with checking very basic requirements on the query parameters (like &page should be \\d+) and return a default value (1 for page) or null otherwise. The upside of this would be less checking of stuff like that \"by hand\", but also having controller methods annotated with the appropriate query parameters which is very nice for api documentation etc.\n. @vicb Just checking that everyone is on the same line. This got merged into the other PR #185. :P\n. @vicb Just checking that everyone is on the same line. This got merged into the other PR #185. :P\n. Good catch!\n@lsmith77 Do you port this to 0.6?\n. Ah yes, but I didn't know if we should all cherry-pick commits to the 0.6 branch. Will do next time.\nThanks!\n. Changing data with a GET action isn't restful at all. I don't think the bundle should add support for this. You can of course work around it like you just did, but you said yourself, that's a hack. ;)\n. :thumbsup: I'll send a PR.\n. ping @everzet :)\n. @lsmith77 commented on your problem in #126. Please be a bit more patient for an answer before duplicating your comments at multiple issues..\n. If this PR were to be merged I'd like to see it configurable with the restriction mentioned by @lsmith77.\nI have one big concern with this though. What about bundles you're using? If a third party bundle assumes the custom method uses PATCH and also adds the appropriate hidden fields to forms to \"convert\" POST requests to PATCH requests for browser forms. If you use such a bundle, but configure the custom methods to be PUT, things will break?\n. If this PR were to be merged I'd like to see it configurable with the restriction mentioned by @lsmith77.\nI have one big concern with this though. What about bundles you're using? If a third party bundle assumes the custom method uses PATCH and also adds the appropriate hidden fields to forms to \"convert\" POST requests to PATCH requests for browser forms. If you use such a bundle, but configure the custom methods to be PUT, things will break?\n. @lsmith77 I believe the issue was 'resolved' for @stof because they switched to another hosting provider. Maybe we should just close the issue until the need for it comes up again?\nIf we want to set it through I would not make the default method configurable globally, but per controller (maybe an annotation on the class?). It is probably less DRY to do it this way, but it allows 3rd party bundles to rely on the default setting without breaking. Then there is of course still the issue of hosting provider not providing PATCH support, but I think that is very tricky to add built in support for anyway?\n. I like the idea of this, but your current implementation with RouteCollection#all() will trigger a load of the route collection on every request (normally this isn't needed as everything is cached). I guess we'll have to add some kind of cache that keeps the allowed methods for the routes in the system?\n. @stof Actually you can because you correlate different routes based on the original pattern. For routes generated by the route loader of this bundle that would work just fine.\n@borisguery I think you should be able to create an array like:\nphp\n<?php\narray(\n    'api_get_user'  => array('GET', 'PUT'),\n    // ..\n    'api_get_users' => array('GET', 'POST'),\n)\nIf that array is cached there is no need to load the entire route collection to determine the allowed request methods.\n. Maybe it could be done while reading the annotations?\n. Maybe it could be done while reading the annotations?\n. > - First of all QueryFetcher::get() defaults to non-strict, which is really breaking the assumption that your requirements are applied.\nThis was a design decision. The idea is that query parameters are optional anyway. If the requirements don't match they'll fall back to the default.\nTo be honest I missed the whole get(.., $strict = false) thing after my initial PoC. I think you should be able to tell on the @QueryParam point whether a parameter is strict or not.\n\n\nFinally, if a strict check does not pass, it throws a runtime exception, which ends up as a 500. I would expect a 400 Bad Request there, without having to catch/rewrite those exceptions in every controller. That would remove any convenience from the feature.\n\n\nI think a 400 makes sense here.\n. > - First of all QueryFetcher::get() defaults to non-strict, which is really breaking the assumption that your requirements are applied.\nThis was a design decision. The idea is that query parameters are optional anyway. If the requirements don't match they'll fall back to the default.\nTo be honest I missed the whole get(.., $strict = false) thing after my initial PoC. I think you should be able to tell on the @QueryParam point whether a parameter is strict or not.\n\n\nFinally, if a strict check does not pass, it throws a runtime exception, which ends up as a 500. I would expect a 400 Bad Request there, without having to catch/rewrite those exceptions in every controller. That would remove any convenience from the feature.\n\n\nI think a 400 makes sense here.\n. If we support array checking it should be the 'easy' implementation imo. So add array=true to the annotation and check the requirement for each element. If you need more complicated things, use something else.\nPlease don't do serialization/imploding, it makes things far more complicated than the original philosophy of the fetcher ever meant to do. If we're worried about the input array becoming to big I'd even say we put a hard limit on it.\n. Is there support for OPTIONS in the symfony routing component? git grep OPTIONS on the symfony codebase gives me no hits.\n. - What will happen if you have a ArticleController#getArticleAction() in this new setup?\n- Can't we keep only type: rest and add an annotation no indicate that the name of the resource should be guessed from the class (or configured in that annotation)? Something like: @REST\\Resource()? I think the responsibility for this should be at class level, not configuration (how you import the routes).\nApart from these two questions +1 from me. Having getAction() in a base rest class or trait would be very nice.\n. - What will happen if you have a ArticleController#getArticleAction() in this new setup?\n- Can't we keep only type: rest and add an annotation no indicate that the name of the resource should be guessed from the class (or configured in that annotation)? Something like: @REST\\Resource()? I think the responsibility for this should be at class level, not configuration (how you import the routes).\nApart from these two questions +1 from me. Having getAction() in a base rest class or trait would be very nice.\n. My take on the issue is injecting \"User\" or \"Users\" depending on the amount of parameters on the method, but always doing this for all the methods in the class. Code! Mind it is in PoC state. So hardcoded class with resource and adjusted the original test.\nPlus:                                                                                                               \n- Easy to imagine how the method will get mapped. The resource will always be inserted.\n- No ambiguous mapping (e.g. getAction and getUserAction getting will never mapped to the same route)\nMinus:                                                                                                              \n- You can't have getFooBarsAction mapping to /foos/{foo}/bars in your UserController anymore, but I think that's a plus.  \nWhat is still an issue though is how to map the following:                                                            \n```\nworks\ngetAction()    -> getUsersAction()                                                                                  \ngetAction($id) -> getUserAction($id)                                                                                \n```\nThese methods can't co-exist in the same class in php.                                                                \nA more explicit solution might be adding a 'collection' prefix to the predefined keywords? For example cget, cpost, ...? This way we can avoid having the getList special case.\ngetAction($id)  GET  /users/{id}                                                                                      \ncgetAction      GET  /users                                                                                           \npostAction($id) POST /users/{id}                                                                                      \ncpostAction()   POST /users\n. My take on the issue is injecting \"User\" or \"Users\" depending on the amount of parameters on the method, but always doing this for all the methods in the class. Code! Mind it is in PoC state. So hardcoded class with resource and adjusted the original test.\nPlus:                                                                                                               \n- Easy to imagine how the method will get mapped. The resource will always be inserted.\n- No ambiguous mapping (e.g. getAction and getUserAction getting will never mapped to the same route)\nMinus:                                                                                                              \n- You can't have getFooBarsAction mapping to /foos/{foo}/bars in your UserController anymore, but I think that's a plus.  \nWhat is still an issue though is how to map the following:                                                            \n```\nworks\ngetAction()    -> getUsersAction()                                                                                  \ngetAction($id) -> getUserAction($id)                                                                                \n```\nThese methods can't co-exist in the same class in php.                                                                \nA more explicit solution might be adding a 'collection' prefix to the predefined keywords? For example cget, cpost, ...? This way we can avoid having the getList special case.\ngetAction($id)  GET  /users/{id}                                                                                      \ncgetAction      GET  /users                                                                                           \npostAction($id) POST /users/{id}                                                                                      \ncpostAction()   POST /users\n. For what it's worth, I have adjusted my \"fork\" of this PR (which was not behaving the same as the implementation of @lsmith77 before) to also include the cget changes and I added tests for the new behaviour ().\n@lsmith77 I have a separate commit with the tests that you can cherry-pick if you want: asm89/FOSRestBundle@798d5a2c2e55e1d247247c9424d10c7ad31f3ad8.\n. For what it's worth, I have adjusted my \"fork\" of this PR (which was not behaving the same as the implementation of @lsmith77 before) to also include the cget changes and I added tests for the new behaviour ().\n@lsmith77 I have a separate commit with the tests that you can cherry-pick if you want: asm89/FOSRestBundle@798d5a2c2e55e1d247247c9424d10c7ad31f3ad8.\n. I don't think it differs much from your code anymore since we gradually worked to the point where we do the same. :)\n- It always injects the resource in each method of the controller\n- Based on the amount of arguments in the method User or Users will be injected\n- if Users in injected , thehttpMethods cget etc are aliases to get\nIn the implementation I didn't change any existing tests (no BC breaks?), I only added new tests to verify the new behaviour (you can cherry-pick them :) asm89/FOSRestBundle@798d5a2c2e55e1d247247c9424d10c7ad31f3ad8).\n. :+1: Let's see what @everzet has to say about it.\n. ping @everzet \n. @lsmith77 @Markkaz Maybe also squash the commits in this PR? I'll try to find some time to run one of our apps against this PR, but that app hasn't been touched in quite a while, so it will depend on how much time I must spend on upgrading.\n. The main reason for it not being possible is that the QueryParam functionality was once meant to be used in cases where a form with complex validation was a bit too much.\nAs for this specific request I'm not sure if we should go down this road with the component. Next up is a PR for validating every object in a \"categories\" array using the same syntax, and then specifying whether that collection can be empty, and ... ;) Before we know it we end up with a form component!\n. Yes, I was a bit in a hurry and didn't realize this. If you generate a route in the symfony framework, parameters that are not defined in the pattern are append as a query string. That's where my assumptions went wrong.\nAnyway, I still think this PR is valid as the situation before would generate routes with parameters that weren't optional, while they were defined as such in the controller.\nTo address the issue you raise, maybe it is possible to add the matching query parameters to the controller call? It's also interesting what the opinion of @everzet is on the subject, because apparently he was already working on a rewrite of all of this. \n. Was basing it of this but I can rename it.\n. Not sure about that. Imo people that use @QueryParam should be encouraged do add the annotation for all the parameters that are used in a controller. See the bonus of documentation of optional parameters. :)\n. Yes, that makes sense. I'll refactor it.\n. (Query|Request)?Param even afaik ;)\n. Instead of doing instanceof consider adding a method to the annotation class?\n$param = $config->getParam($request)\n. Tricky this one. From a rest perspective it probably doesn't make sense at all to support a parameter coming from both?\n. Since the $name is now put in instead of the value, maybe the message should be changed to:\nQuery parameter value of '%s' is not an array?\n. Really? ;)\n. What should it be securing then? The callback is called on the implementers side, so I guess you're in trouble yourself if you do weird things with callbacks?\n. ",
    "mailaneel": "thank you \n. URL:  http://localhost/wsl/web/app_dev.php/sb/api/v1/subscribers\n``` javascript\nRequest Url: http://localhost/wsl/web/app_dev.php/sb/api/v1/subscribers\nRequest Method: GET\nStatus Code: 401\nParams: {}\nAccept: application/json\nContent-Type: application/json\nConnection: keep-alive\nOrigin: chrome-extension: //rest-console-id\nUser-Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1068.1 Safari/536.3\n```\n. URL:  http://localhost/wsl/web/app_dev.php/sb/api/v1/subscribers\n``` javascript\nRequest Url: http://localhost/wsl/web/app_dev.php/sb/api/v1/subscribers\nRequest Method: GET\nStatus Code: 401\nParams: {}\nAccept: application/json\nContent-Type: application/json\nConnection: keep-alive\nOrigin: chrome-extension: //rest-console-id\nUser-Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1068.1 Safari/536.3\n```\n. This is my config file and configured the exception controller correctly\n``` yaml\nimports:\n    - { resource: parameters.ini }\n    - { resource: security.yml }\nframework:\n    #esi:             ~\n    translator:      { fallback: %locale% }\n    secret:          %secret%\n    charset:         UTF-8\n    router:          { resource: \"%kernel.root_dir%/config/routing.yml\" }\n    form:            true\n    csrf_protection: true\n    validation:      { enable_annotations: true }\n    templating:      { engines: ['twig'] } #assets_version: SomeVersionScheme\n    session:\n        auto_start:     true\n        default_locale: %locale%\n        #storage_id: wsl.session.storage\nTwig Configuration\ntwig:\n    debug:            %kernel.debug%\n    strict_variables: %kernel.debug%\n    exception_controller: 'FOS\\RestBundle\\Controller\\ExceptionController::showAction'\nAssetic Configuration\nassetic:\n    debug:          %kernel.debug%\n    use_controller: false\n    # java: /usr/bin/java\n    filters:\n        cssrewrite: ~\n        # closure:\n        #     jar: %kernel.root_dir%/java/compiler.jar\n        # yui_css:\n        #     jar: %kernel.root_dir%/java/yuicompressor-2.4.2.jar\nDoctrine Configuration\ndoctrine:\n    dbal:\n       default_connection: default\n       connections:\n             default:\n                   driver:   %database_driver%\n                   host:     %database_host%\n                   port:     %database_port%\n                   dbname:   %database_name%\n                   user:     %database_user%\n                   password: %database_password%\n                   charset:  UTF8\n             acl:\n                   driver:   %database_driver%\n                   host:     %database_host%\n                   port:     %database_port%\n                   dbname:   %acl_database_name%\n                   user:     %database_user%\n                   password: %database_password%\n                   charset:  UTF8     \norm:\n    auto_generate_proxy_classes: %kernel.debug%\n    auto_mapping: true\n\nSwiftmailer Configuration\nswiftmailer:\n    transport: %mailer_transport%\n    host:      %mailer_host%\n    username:  %mailer_user%\n    password:  %mailer_password%\nsensio_framework_extra:\n    view:    { annotations: false }\n    router:  { annotations: true }    \nfos_user:\n    db_driver: orm # other valid values are 'mongodb', 'couchdb'\n    model_manager_name: default\n    firewall_name: app\n    user_class: WSL\\BaseBundle\\Entity\\User \n    group:\n        group_class: WSL\\BaseBundle\\Entity\\Group\n    registration:\n        form:\n            type: wsl_user_registration\n            handler: wsl.base.user.registration.form.handler\nfos_rest:\n    routing_loader:\n        default_format: json\n    view:\n        default_engine: twig\n        view_response_listener: force\n        formats:\n            json: true\n            xml: true\n        templating_formats:\n            html: true\n    body_listener: true\n    format_listener:\n        default_priorities: [json,html] #this value should be json in production, remove html from this,issue raised\n        fallback_format: json\n        prefer_extension: true\n    exception:\n        codes:\n            'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': 404\n            'Doctrine\\ORM\\OptimisticLockException': HTTP_CONFLICT\n            'WSL\\BaseBundle\\Exception\\EntityNotFoundException': 200\n            'Symfony\\Component\\Security\\Core\\Exception\\AuthenticationCredentialsNotFoundException': 401\n        messages: \n            'WSL\\BaseBundle\\Exception\\EntityNotFoundException': true\n            'Symfony\\Component\\Security\\Core\\Exception\\AuthenticationCredentialsNotFoundException': true\n    service:\n        view_handler: fos_rest.view_handler.default  \njms_serializer:\n    metadata:\n        directories:\n            FOSUB:\n                namespace_prefix: FOS\\UserBundle\n                path: %kernel.root_dir%/serializer/FOSUB        \nwsl_base:\n  product_shortname: cs  \n```\n. This is my config file and configured the exception controller correctly\n``` yaml\nimports:\n    - { resource: parameters.ini }\n    - { resource: security.yml }\nframework:\n    #esi:             ~\n    translator:      { fallback: %locale% }\n    secret:          %secret%\n    charset:         UTF-8\n    router:          { resource: \"%kernel.root_dir%/config/routing.yml\" }\n    form:            true\n    csrf_protection: true\n    validation:      { enable_annotations: true }\n    templating:      { engines: ['twig'] } #assets_version: SomeVersionScheme\n    session:\n        auto_start:     true\n        default_locale: %locale%\n        #storage_id: wsl.session.storage\nTwig Configuration\ntwig:\n    debug:            %kernel.debug%\n    strict_variables: %kernel.debug%\n    exception_controller: 'FOS\\RestBundle\\Controller\\ExceptionController::showAction'\nAssetic Configuration\nassetic:\n    debug:          %kernel.debug%\n    use_controller: false\n    # java: /usr/bin/java\n    filters:\n        cssrewrite: ~\n        # closure:\n        #     jar: %kernel.root_dir%/java/compiler.jar\n        # yui_css:\n        #     jar: %kernel.root_dir%/java/yuicompressor-2.4.2.jar\nDoctrine Configuration\ndoctrine:\n    dbal:\n       default_connection: default\n       connections:\n             default:\n                   driver:   %database_driver%\n                   host:     %database_host%\n                   port:     %database_port%\n                   dbname:   %database_name%\n                   user:     %database_user%\n                   password: %database_password%\n                   charset:  UTF8\n             acl:\n                   driver:   %database_driver%\n                   host:     %database_host%\n                   port:     %database_port%\n                   dbname:   %acl_database_name%\n                   user:     %database_user%\n                   password: %database_password%\n                   charset:  UTF8     \norm:\n    auto_generate_proxy_classes: %kernel.debug%\n    auto_mapping: true\n\nSwiftmailer Configuration\nswiftmailer:\n    transport: %mailer_transport%\n    host:      %mailer_host%\n    username:  %mailer_user%\n    password:  %mailer_password%\nsensio_framework_extra:\n    view:    { annotations: false }\n    router:  { annotations: true }    \nfos_user:\n    db_driver: orm # other valid values are 'mongodb', 'couchdb'\n    model_manager_name: default\n    firewall_name: app\n    user_class: WSL\\BaseBundle\\Entity\\User \n    group:\n        group_class: WSL\\BaseBundle\\Entity\\Group\n    registration:\n        form:\n            type: wsl_user_registration\n            handler: wsl.base.user.registration.form.handler\nfos_rest:\n    routing_loader:\n        default_format: json\n    view:\n        default_engine: twig\n        view_response_listener: force\n        formats:\n            json: true\n            xml: true\n        templating_formats:\n            html: true\n    body_listener: true\n    format_listener:\n        default_priorities: [json,html] #this value should be json in production, remove html from this,issue raised\n        fallback_format: json\n        prefer_extension: true\n    exception:\n        codes:\n            'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': 404\n            'Doctrine\\ORM\\OptimisticLockException': HTTP_CONFLICT\n            'WSL\\BaseBundle\\Exception\\EntityNotFoundException': 200\n            'Symfony\\Component\\Security\\Core\\Exception\\AuthenticationCredentialsNotFoundException': 401\n        messages: \n            'WSL\\BaseBundle\\Exception\\EntityNotFoundException': true\n            'Symfony\\Component\\Security\\Core\\Exception\\AuthenticationCredentialsNotFoundException': true\n    service:\n        view_handler: fos_rest.view_handler.default  \njms_serializer:\n    metadata:\n        directories:\n            FOSUB:\n                namespace_prefix: FOS\\UserBundle\n                path: %kernel.root_dir%/serializer/FOSUB        \nwsl_base:\n  product_shortname: cs  \n```\n. In exception controller\nI debugged this one, the problem is with $formatNegotiator->getBestFormat($request, $priorities, $preferExtension) ?: $format;, i can set up a reproduce able test case in 1 or 2 days\n``` php\nprotected function getFormat(Request $request, $format)\n    {\n        $request->attributes->set('_format', $format);\n        $priorities = $this->container->getParameter('fos_rest.default_priorities');\n        $preferExtension = $this->container->getParameter('fos_rest.prefer_extension');\n        $formatNegotiator = $this->container->get('fos_rest.format_negotiator');\n    return $formatNegotiator->getBestFormat($request, $priorities, $preferExtension) ?: $format;\n}\n\n```\n. Ya but it is returning html for me\n. Process to replicate this issue, make a Url secure and do not redirect the user to login page if token is not found, you can see this error\n. Hi,\nI am out of country, will be back next week, will update on this\nOn Fri, Apr 20, 2012 at 5:45 AM, Lukas Kahwe Smith <\nreply@reply.github.com\n\nwrote:\nany luck?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/208#issuecomment-5230298\n. Hi,\n\nI am out of country, will be back next week, will update on this\nOn Fri, Apr 20, 2012 at 5:45 AM, Lukas Kahwe Smith <\nreply@reply.github.com\n\nwrote:\nany luck?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/208#issuecomment-5230298\n. \n",
    "meandmymonkey": "@lsmith77 travis hook was broken, I was seeing an old green build... looking into it.\n. @lsmith77 I can't yet make much of this... on Travis, Composer seems to break down and the tests aren't even run (see http://travis-ci.org/#!/meandmymonkey/FOSRestBundle/jobs/485977). Locally with a clean setup as per the .travis.yml, Composer runs but misses installing some required dependencies for the tests (DI, Form component...).\nIf I run the tests with autoloading set against a regular SF2 install, they pass. \n. done\n. fixed already\n. Yes... I found this behaviour a bit quirky (forcing a name based on the value being a formtype). With this change, it's up to the user to name the form var. Seems like less magic to me.\n. hehe... good point. fixed\n. It might pass if $this->container->getParameter('fos_rest.view_response_listener.force_view') returns true, $configuration can still be null then\n. ",
    "bzitzow": "Thank you I will look into it. I appreciate your responsiveness. \n. ",
    "djoos": "Ok, just for other people's reference:\n[FOSRestBundle]\n    git=git://github.com/FriendsOfSymfony/FOSRestBundle.git\n    target=bundles/FOS/RestBundle\n    version=origin/2.0\n...and a vendors-install:\nphp bin/vendors install\n...does the trick when running into this issue - thanks!\n. So,\n[FOSRestBundle]\n    git=git://github.com/FriendsOfSymfony/FOSRestBundle.git\n    target=bundles/FOS/RestBundle\n    version=0.6\n...should do the trick!\n. Perfect, thanks stof!\n. ",
    "Chrysweel": "Hello! \nI have the same problem. So I wrote:\n[FOSRestBundle]\ngit=git://github.com/FriendsOfSymfony/FOSRestBundle.git\ntarget=bundles/FOS/RestBundle\nversion=origin/2.0\nBut when I do php bin/vendors install on error ocurred: fatal: ambigous 'argument /origin/2.0' : unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions.\nI dont know what to do, Any idea?\nThanks you very much.\n. It works!! \nThanks a lot !! \n. Thanks for to reply Ismirth77. \nCan u explain better?\nWhat event listener documentation? \nI wrote in my config.yml:\nsensio_framework_extra:\n router:  { annotations: true }\n request: { converters: true }\n view:    { annotations: false }\n cache:   { annotations: true }\nBut this solution is not valid, Now in my project does not work this line  type : {{ event.date }}\nVery thanks for your time.\n. Now I don't see the exception. But some lines of my templates does not work, now I see the following error:\nFatal error: Method Proxies\\ApplicationApplicationBundleEntityUserProxy::__toString() must not throw an exception in /var/www/Application/vendor/twig/lib/Twig/Extension/Core.php on line 718.\nI think that this problem is associated with: annotations: false.\nI dont understand anything. ; (\nthank you very much for help me\n. Neither do I, but: \nbefore: $ bin vendors/install , my project works\nAfter:\nYou need to disable the view annotations in SensioFrameworkExtraBundle when using the FOSRestBundle View Response listener.\nWhy now {{ entity.property }} does not work ?\n. My deps.lock: \nsymfony v2.0.11\ntwig v1.6.0\nmonolog 1.0.2\ndoctrine-common 2.1.4\ndoctrine-dbal 2.1.6\ndoctrine 2.1.6\nswiftmailer v4.1.5\nassetic v1.0.2\ntwig-extensions 1dfff8e793f50f651c4f74f796c2c68a4aee3147\nmetadata 1.1.0\nSensioFrameworkExtraBundle 638f545b7020b9e9d5944a7e3167f60ed848250d\nJMSSecurityExtraBundle 541a4c242328dc04b99540c75346cc74a7c0cfb5\nSensioDistributionBundle 20b66a408084ad8752f98e50f10533f5245310bf\nSensioGeneratorBundle dd37fc4487bc09ac01bdcf89e0ff4ee4484b7fab\nAsseticBundle v1.0.1\n. Here my config.yml.\nimports:\n    - { resource: parameters.ini }\n    - { resource: security.yml }\n    - { resource: services.yml }\nparameters:\nsecurity.acl.permission.map.class: Sonata\\AdminBundle\\Security\\Acl\\Permission\\AdminPermissionMap\n   sonata.admin.security.mask.builder.class: Sonata\\AdminBundle\\Security\\Acl\\Permission\\MaskBuilder\nframework:\n    #esi:             ~\n    #translator:      { fallback: %locale% }\n    translator:  {fallback: es} #puesto esto para el UserBundle \n    secret:          %secret%\n    charset:         UTF-8\n    router:          { resource: \"%kernel.root_dir%/config/routing.yml\" }\n    form:            true\n    csrf_protection: true\n    validation:      { enable_annotations: true }\n    templating:      { engines: ['twig', 'php'] } #assets_version: SomeVersionScheme\n    session:\n        default_locale: %locale%\n        auto_start:     true\nTwig Configuration\ntwig:\n    debug:            %kernel.debug%\n    strict_variables: %kernel.debug%\n    globals:\n       dir_imagenes: 'uploads/images/'\nAssetic Configuration\nassetic:\n    debug:          %kernel.debug%\n    use_controller: false\n    filters:\n        cssrewrite: ~\n        yui_css:\n              jar: usr/share/yui-compressor/yui-compressor.jar\n        yui_js:\n              jar: usr/share/yui-compressor/yui-compressor.jar\nDoctrine Configuration\ndoctrine:\n    dbal:\n        default_connection: default\n        driver:   %database_driver%\n        host:     %database_host%\n        port:     %database_port%\n        dbname:   %database_name%\n        user:     %database_user%\n        password: %database_password%\n        charset:  UTF8\norm:\n    auto_generate_proxy_classes: %kernel.debug%\n    auto_mapping: true\nSwiftmailer Configuration\nswiftmailer:\n    transport: %mailer_transport%\n    host:      %mailer_host%\n    username:  %mailer_user%\n    password:  %mailer_password%\njms_security_extra:\n    secure_controllers:  true\n    secure_all_services: false\njms_serializer:\n    handlers:\n        object_based: false\n        datetime:\n            format: \"Y-m-dTH:i:s\" # ISO8601\n            default_timezone: \"UTC\" # defaults to whatever timezone set in php.ini or via date_default_timezone_set\n        array_collection: true\n        form_error: true\n        constraint_violation: true\n```\nproperty_naming:\n    separator:  _\n    lower_case: true\nmetadata:\n    cache: file\n    debug: \"%kernel.debug%\"\n    file_cache:\n        dir: \"%kernel.cache_dir%/serializer\"\n# Using auto-detection, the mapping files for each bundle will be\n# expected in the Resources/config/serializer directory.\n#\n# Example:\n# class: My\\FooBundle\\Entity\\User\n# expected path: @MyFooBundle/Resources/config/serializer/Entity.User.(yml|xml|php)\nauto_detection: true\n\n```\nfos_user:\n    db_driver: orm # other valid values are 'mongodb', 'couchdb' and 'propel'\n    firewall_name: main\n    user_class: sdfs\\sdfsBundle\\Entity\\User\n    #user_class: Application\\Sonata\\UserBundle\\Entity\\User\ngroup: \n   #group_class: Application\\Sonata\\UserBundle\\Entity\\Group\n   group_class: sdfs\\sdfsBundle\\Entity\\Group\nfos_comment\nfos_comment:\n   db_driver: orm\n   class:\n      model:\n         comment: sdfs\\sdfsBundle\\Entity\\Comment\n         thread: sdfs\\sdfsBundle\\Entity\\Thread\n   acl: true\n   acl_roles:\n           comment:\n               create: ROLE_USER\n               view: IS_AUTHENTICATED_ANONYMOUSLY\n               edit: ROLE_ADMIN\n               delete: ROLE_ADMIN\n           thread:\n               create: IS_AUTHENTICATED_ANONYMOUSLY\n               view: IS_AUTHENTICATED_ANONYMOUSLY\n               edit: ROLE_ADMIN\n               delete: ROLE_ADMIN\n           vote:\n               create: IS_AUTHENTICATED_ANONYMOUSLY\n               view: IS_AUTHENTICATED_ANONYMOUSLY\n               edit: ROLE_ADMIN\n               delete: ROLE_ADMIN\n   service:\n       acl:\n           thread: fos_comment.acl.thread.roles\n           comment: fos_comment.acl.comment.roles\n           vote: fos_comment.acl.vote.roles\nAvalancheImageBundle\navalanche_imagine:\n    web_root: %kernel.root_dir%/../web\n    driver: gd\n    filters:\n        my_thumb:\n            type:    thumbnail\n            options: { size: [100, 100], mode: outbound }\n        icono:\n           type: thumbnail\n           options: {size: [100, 100], mode: outbound }\n           path: uploads/images/\nsonadaAdminBundle\nsonata_admin:\n   security:\n       handler:   sonata.admin.security.handler.acl\n       information:\n           GUEST: [VIEW, LIST]\n           STAFF: [EDIT, LIST, CREATE]\n           EDITOR: [OPERATOR]\n           ADMIN: [MASTER]\nadmin_permissions: [CREATE, LIST, DELETE, UNDELETE, OPERATOR, MASTER]\n   object_permissions: [VIEW, EDIT, DELETE, UNDELETE, OPERATOR, MASTER, OWNER]\ntitle: 'sdfs - Administracion'\n   templates:\n       layout:    SonataAdminBundle::standard_layout.html.twig\n       ajax:     SonataAdminBundle::ajax_layout.html.twig\n       list:    SonataAdminBundle:CRUD:list.html.twig\n       show:    SonataAdminBundle:CRUD:show.html.twig\n       edit:    SonataAdminBundle:CRUD:edit.html.twig\n   dashboard:\n        blocks:\n            # display a dashboard block\n            - { position: left, type: sonata.admin.block.admin_list }\nsonata_block:\n    default_contexts: [cms]\n    blocks:\n        sonata.admin.block.admin_list:\n            contexts: [admin]\n        sonata.block.service.text:\n        sonata.block.service.action:\n        sonata.block.service.rss:\nsonataUser\nsonata_user:\n    security_acl: false\n    class:\n       user: sdfs\\sdfsBundle\\Entity\\User\n       group: sdfs\\sdfsBundle\\Entity\\Group\nSonataMedia\nsonata_media:\n    db_driver: doctrine_orm # or doctrine_mongodb\n    class:\n        media: sdfs\\sdfsBundle\\Entity\\Imagen\n        gallery: Application\\Sonata\\MediaBundle\\Entity\\Gallery\n        gallery_has_media: Application\\Sonata\\MediaBundle\\Entity\\GalleryHasMedia\n```\ndefault_context: default\ncontexts:\n    default: \n        providers:\n            - sonata.media.provider.dailymotion\n            - sonata.media.provider.youtube\n            - sonata.media.provider.image\n            - sonata.media.provider.file\n    formats:\n        small: { width: 100 , quality: 70}\n        big:   { width: 500 , quality: 70}\n\ncdn:\n    server:\n        path: /uploads/media # http://media.sonata-project.org/\nfilesystem:\n    local:\n        directory:  %kernel.root_dir%/../web/uploads/media\n        create:     false\n```\nfos_rest:\n    view:\n        view_response_listener: force\nsensio_framework_extra:\n router:  { annotations: true }\n request: { converters: true }\n view:    { annotations: false }\n cache:   { annotations: true }\n. Ok Ismith77 I understand it.\nI will search where is the problem, I discard that the problem is in FOSRestBundle.\nthank you very much for help me\n. So if my $view is an instance of the class, I could to use the method, doesn it ?\n```\n    $view = $this->view($channel, 200);\n    $view->setSerializerGroups(array('list'));\nreturn $this->handleView($view);\n\n```\nBut I get the error: \n\nError: Call to undefined method FOS\\RestBundle\\View\\View::setSerializerGroups()\n\nI am lost..\nOther issue is: The method setSerializationContext which you say me ... is used to manage groups ?? Because I dont understand that is Serialization Context... \n\nhttps://github.com/schmittjoh/serializer/blob/master/src/JMS/Serializer/SerializationContext.php\nYou can be a little more specific? Thanks in advance. : )\n\nThanks for to reply @stof \n. Oooook thanks @stof !!!\nSo I use the method setGroups defined in the parent Context class.\n\n$view->setSerializationContext(SerializationContext::create()->setGroups(array('list')));\n\nNow I understand it !!! Thank you very much ! : )\n. OK, I think I found error. \nIt is a issue of symfony sorry.\nhttps://github.com/symfony/symfony/blob/75abd1a451d97f5075128ea10b2598b6df41a065/src/Symfony/Component/HttpFoundation/Response.php#L212\nNow reponse with code 204 has not content-type.\nI close the issue ! sorry again :)\n. ",
    "jrgns": "Schweet, thanx!\n. ",
    "SofHad": "For the versions > 1.3.0 you must set\nlang\n    format_listener:\n        rules:\n            - priorities: [json, xml]\n            - fallback_format: xml\n. array|callable|null ?\n. ",
    "ibolmo": "Could you piggy back on @Route?\n. ",
    "Tobion": "I agree that query param requirements shouldn't prevent route matching. As far as I see the  requirements for params have two use cases:\n- I like that the default value is returned if a requirement for a param doesn't match. \n- I guess specifiying the requirement for a param is also used for API documentation.\nBut I don't see what this PR has to do with URI templates, that was also discussed here. And I thought we might plan to support query params in the routing component directly. There I would implement this quite differently (without using QueryFetcher etc).\n. I agree that query param requirements shouldn't prevent route matching. As far as I see the  requirements for params have two use cases:\n- I like that the default value is returned if a requirement for a param doesn't match. \n- I guess specifiying the requirement for a param is also used for API documentation.\nBut I don't see what this PR has to do with URI templates, that was also discussed here. And I thought we might plan to support query params in the routing component directly. There I would implement this quite differently (without using QueryFetcher etc).\n. I think this is all easiliy possible in the routing, even without breaking BC. I image a new option, besides pattern, for specifying query params: let's call it query. Example:\nyaml\nblog_show:\n    pattern:   /blog/{slug}\n    query: \n        param1: {param1}\n        param2: {param2}\n    defaults:  { param1: 1 }\n    requirements:\n        param1:  \\d+\nAs you can see, we can simply use the existing default and requirements sections and introduce a new option for queries (similar to what is planned to be merged for host requirements). But a requirement for a param in the query section will of course not be used for matching. The query params will be passed as arguements to the controller action (only the ones specified, not all). And for validating them and returning the default on mismatch can be achieved by introducing a new method in Request (in addition to the standard $request->get()). This will allow a developer to implement any specific logic in the controller he wants.\nThat way, it will also make the implementation independent of where the parameter comes from (path, hostname or query). So one can simply change the route without needing to adjust any code. For example we decide to change the location of param2 in the above route and we are done:\nyaml\nblog_show:\n    pattern:   /blog/{slug}/{param2}\n    query: \n        param1: {param1}\n    defaults:  { param1: 1 }\n    requirements:\n        param1:  \\d+\n. I think this is all easiliy possible in the routing, even without breaking BC. I image a new option, besides pattern, for specifying query params: let's call it query. Example:\nyaml\nblog_show:\n    pattern:   /blog/{slug}\n    query: \n        param1: {param1}\n        param2: {param2}\n    defaults:  { param1: 1 }\n    requirements:\n        param1:  \\d+\nAs you can see, we can simply use the existing default and requirements sections and introduce a new option for queries (similar to what is planned to be merged for host requirements). But a requirement for a param in the query section will of course not be used for matching. The query params will be passed as arguements to the controller action (only the ones specified, not all). And for validating them and returning the default on mismatch can be achieved by introducing a new method in Request (in addition to the standard $request->get()). This will allow a developer to implement any specific logic in the controller he wants.\nThat way, it will also make the implementation independent of where the parameter comes from (path, hostname or query). So one can simply change the route without needing to adjust any code. For example we decide to change the location of param2 in the above route and we are done:\nyaml\nblog_show:\n    pattern:   /blog/{slug}/{param2}\n    query: \n        param1: {param1}\n    defaults:  { param1: 1 }\n    requirements:\n        param1:  \\d+\n. I don't think so. Moving a param from query to path is even more restrictive. And moving from path to query will validate the requirement and pass the default to the action if it doesnt match. And if you have a non-matching requirement but not configured a default neither in the route nor in the action (fooAction($param1)) it will create a 404 (or a specific exception). You can of course specify a default in the action to circumvent the 404 and do your custom validation and logic in the controller.\n. I don't think so. Moving a param from query to path is even more restrictive. And moving from path to query will validate the requirement and pass the default to the action if it doesnt match. And if you have a non-matching requirement but not configured a default neither in the route nor in the action (fooAction($param1)) it will create a 404 (or a specific exception). You can of course specify a default in the action to circumvent the 404 and do your custom validation and logic in the controller.\n. I don't see any other reasonable way to implement query params in the routing component. And it's basically the same configuration style as with the upcoming hostname-pattern option. So quite straightforward. How would you like to see it implemented in core?\n. I don't see any other reasonable way to implement query params in the routing component. And it's basically the same configuration style as with the upcoming hostname-pattern option. So quite straightforward. How would you like to see it implemented in core?\n. I think having both a requirements (for path params and hostname params) and a validation (for query params) option makes it even more confusing. People would think: Are requirements not validated? Do I need to place a param in both sections to be sure?\nBtw, in your current implementation your option is called requirement, too. So also the same option name with different meaning (in @Route and in @QueryParam\n. I think having both a requirements (for path params and hostname params) and a validation (for query params) option makes it even more confusing. People would think: Are requirements not validated? Do I need to place a param in both sections to be sure?\nBtw, in your current implementation your option is called requirement, too. So also the same option name with different meaning (in @Route and in @QueryParam\n. My concern is, that the main point of configuring routes is that it hides the implementation. So currently you can change the order of path params or change a prefix etc. without touching code for url matching and url generation. It will still work.\nSame with the hostname PR: You will be able to change the locale from a hostname {_locale}.example.org to the path without problems.\nBut this implementation for query params can only be used for query params. You cannot even change the param name without modifying all code. E.g. you introcude a typo for a query name or simply want to change it, like ?query=value to ?q=value. It's not possible without rewriting code.\nWith my idea you can simply reconfigure it like\nquery: \n    q: {query}\nand you're done. No need to touch the templates etc.\nBtw query: [param1, param2, param3] should be a shorthand for query: { param1: {param1}, param2: {param2}, param3: {param3} }. And one could do stuff like query: { price: {amout}{currency} }.\n. My concern is, that the main point of configuring routes is that it hides the implementation. So currently you can change the order of path params or change a prefix etc. without touching code for url matching and url generation. It will still work.\nSame with the hostname PR: You will be able to change the locale from a hostname {_locale}.example.org to the path without problems.\nBut this implementation for query params can only be used for query params. You cannot even change the param name without modifying all code. E.g. you introcude a typo for a query name or simply want to change it, like ?query=value to ?q=value. It's not possible without rewriting code.\nWith my idea you can simply reconfigure it like\nquery: \n    q: {query}\nand you're done. No need to touch the templates etc.\nBtw query: [param1, param2, param3] should be a shorthand for query: { param1: {param1}, param2: {param2}, param3: {param3} }. And one could do stuff like query: { price: {amout}{currency} }.\n. I would recommend to reuse the symfony namespace and xsd for route elements/attributes that are already defined there. And only add custom attributes in the fos namespace. This is usually how namespaced should be used.\nI also fixed the symfony xml loader to accepts namespace prefixes, so its really compatible with xml. So there should be no problem in mixing namespaces.\n. This problem is resolved. It now returns the the correct error response format for 405.\nThe only time when it appears that the 405 is not caught, is when an exception is thrown inside the exception controller. Then the symfony http kernel will ignore this exception in the from the exceptioncontroller and instead render the origin exception (which is for example the HttpMethodNotAllowException).\nBut this situation should not occur anymore and if so, is a caused by developer error.\n. This should be merged in any case. Independent of the decision in symfony.\nBut you need to raise the dependency on framework-bundle in composer.json to ~2.3.\n. Still the dependency is ~2.3 as the class was introduced in 2.3 and it should also work in 2.3. Or not?\n. @lsmith77 why do you need different branches? I don't see the need. The dependencies got raised but that does not require a new branch. Unless you really want to have a maintenance branch for symfony < 2.3. But symfony 2.2 is only maintained itself for 2 more month.\n. @lsmith77 it's not possible to maintain bc here. That's the same problem as in symfony/symfony#9145. Removing the typehint is also a bc break for people extending the class/method.\n. @stof so all FOS bundles have the same maintenance process as symfony itself? That's probably pretty hard to achieve considering there a less people involved to maintain all the bundles than for symfony. And it should probably be documented that there is version of each bundle maintained for each symfony minor version.\n. @stof that means yes, you have a version of each bundle maintained for each symfony minor version. In this case it's only one branch. But I questioned when you said that symfony 2.2 is still maintained, we also need to maintain the rest bundle. This means we cannot just drop symfony 2.2 support for fos rest bundle from now on. Although to me we could do so and follow our own maintenance process because this is an independent \"organisation\".\n. Hm the errror looks rather strange. Where does \"in_memory_buffer\" come from? Can't see it referenced anywhere. Probably something internal to PHP. The only possible issue I see is that https://raw.github.com/FriendsOfSymfony/FOSRestBundle/master/Resources/config/schema/routing/rest_routing-1.0.xsd is sent with a text mime type instead of xml. So maybe that's the reason why it cannot be used for validation.\n. Seems to be a php bug. See symfony/symfony#9731\n. It should be fixed by https://github.com/symfony/symfony/pull/10493 which is in v2.3.12. Can you update symfony in your project and try again?\n. composer.phar update symfony/symfony\n. You also need to restart php fpm to reset the system.\n\nIssues described that only a restart of php-fpm solves the error.\n. I case the ParamFetcher doesn't do anything, when param_fetcher_listener:  false the service that requires the validator should only be defined if the setting is enabled. Otherwise it's not an optional but a new required dependency.\n. See #722 for my idea to fix it.\n. I still think ParamFetcher should be moved to param_fetcher_listener.xml which is only loaded when the listener is enabled. As I did in #722\n. Closing because @defrag explained it correctly. This is not an implementation problem but a usage problem. Also it seems that the rest bundle can actually handle this: https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/View/ViewHandler.php#L498\nWhen the form is not submitted because of wrong data, the view is marked as validation failed.\n. Closing due to conflicts. Feel free to open a new rebased PR if those changes are still relevant.. @saro0h can you give more details about your exception handling please? The error structure looks like the one from symfony with a custom \"timestamp\" in it. But the message \"No matching accepted Response format could be determined\" comes from the RestBundle. So you probably have a strange setup.\n. Fixed by #1937. Closing as the underlying issue to load non-annotated routes from a directory is a new feature that has not been requested further. Btw, about the custom option name_prefix, this is now part of symfony itself: https://symfony.com/blog/new-in-symfony-4-1-prefix-imported-route-names. Closing as explained by @GuilhemN . Adding versioning based on the path could be implemented by adding a new fos_rest.versioning.resolvers config. But that is a would be a new feature.. Actually URI versioning seems possible since #1937, see also #1529. While I think this the current naming is indeed broken because of easily conflicting route names, see #1954,, changing it like this is probably a BC break as it changes the route names.. The only potential BC break by changing the parent I see is for people who used the Rest Route but loaded it with the FrameworkExtraBundle instead of the Rest Route loader: https://github.com/sensiolabs/SensioFrameworkExtraBundle/blob/6966aee1bfc020d6683156784d0c78c365d0f83b/Routing/AnnotatedRouteControllerLoader.php#L45\nThis \"service\" thing won't work anymore. But it seems like an edge case and a note in the changelog about the changed parent class should be enough.. https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/annotations-reference.rst#route also needs an update as it links to FrameworkExtraBundle. Maybe you do not load the controller annotations with the rest route loader but the symfony core route loader that does not know about Prefix annotation. How do you load the controller routes in /config/routing?. @xabbuh without https://github.com/FriendsOfSymfony/FOSRestBundle/commit/f144dbbea507c2bca3753b96f8cf28ed82ddf550 (which is not tagged unfortuantely) the rest bundle with SF 4 has broken exception serialization. It cannot find the jms_serializer.handler_registry so it removes the fos_rest.serializer.exception_normalizer.jms. Without that normalizer, the serialization of the errors is different and it even serializes the backtrace. This has be considered a security hole.\nSo it would be important to resolve this issue and make a release.. Does this fix #1851?. This is fixed with #1904. When using sf 4.1 it uses ::.. Thanks @magnetik . Thanks @jhcasado . I can only use manual route definitions as long as my actions method are suffixed. See 3)\nAs soon as I change it, all routes are gone. But we also cannot change that because of all the magic.\nAnd even if you use manual route definitions, there is still magic that you cannot disable:\n1. methods where you do not set a route on will create a route magically, so you have to add a NoRoute annotation explicitly to avoid that.\n2. the route name is still magic, see https://symfony.com/doc/master/bundles/FOSRestBundle/7-manual-route-definition.html#method-name-prefix Even if I set a route name, the route name get's changed based on the method name. So refactoring a method name, breaks all routing url generation. And if you are unlucky and change it to an action name that already exists, it will override routes due to #1759. > ok. so how about we add new class level annotations to configure this?\n\nI'd prefer a config option on fos_rest to be able to disable this globablly. So I don't have to do it for each controller. I mean, if the default behavior was disabled, then it would make sense to have a class-level annotation to enable this. This would make the code more self-explaning as we could just document this annotation what it means. But as the default is enabled, disabling it for each class does not make it better.. Well, the default would still be enabled for BC. So if people disable it, it's up to them. Maybe they don't use 3rd party rest controllers.\nAlso the argument that enabling/disabling things might break 3rd party controllers can be applied to any config like symfony routing itself or fos rest body converters (https://symfony.com/doc/master/bundles/FOSRestBundle/request_body_converter_listener.html). If I disable https://github.com/FriendsOfSymfony/FOSRestBundle/blob/39fc21db2820f419bea955da83e42c08dea693f2/DependencyInjection/FOSRestExtension.php#L147 then those listeners are not active, thus breaking 3rd party controllers that rely on it. The zones do not help at all in this regard.. If I disable https://github.com/FriendsOfSymfony/FOSRestBundle/blob/39fc21db2820f419bea955da83e42c08dea693f2/DependencyInjection/FOSRestExtension.php#L147 then those listeners are not active, thus breaking 3rd party controllers that rely on it. The zones do not help at all in this regard.. seems sensible to me. but is it not possible to use the _format request attribute instead?\n. yeah, i don't see why we need this extension thing. the matching is the task of the routing. what if someone doesnt want to format to be in the extension but something like /json/article and /xml/article.\n. Looking at the code, I don't think it would be overridden by the router_listener. The router listener sets the request->attributes but the format_listener uses request->setRequestFormat. The getter on request should still return the set request format because it only uses the attributes when the format is empty.\n. I would inline this code. It's only called once and should not be protected anyway.\n. I think it does not do the same. I upgraded to use the symfony one and now I get test failures like \"simplexml_import_dom(): Invalid Nodetype to import\".\n. invalid xml\n. Yes looks like the warning became an exception. But it needed to be tested standlone in symfony. Also I'm not really using the RestBundle for it. I was just replacing this class with the symfony 2.4 xml encoder and recognized a change in behavior. But the main change was that it now throws exceptions which was not done before. So the EncoderInterface and DecoderInterface in symfony need to be updated as well.\n. Didn't move this as well because its used by fos_rest.routing.loader.reader.action which might not have anything to  do with the listener. But request.xml is probably ill-named now.\n. How about making the Listener go into the request scope as well?\n. You said, the error is only on windows. But how did it ever work when the path is wrong?\n. you need to implement ContainerAwareInterface. Otherwise I don't thikn, the container will be set at all.\n. I don't think you need to use the old syntax TestBundle:RequestBodyParamConverter:putPost at all. The controllers are not services, so the FQCN::action should work with SF 4.1 and older versions alike.. Fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/commit/5e38509c14798579ba5655846cc9c4876f0b40e7. This does not solve the problem you described. The service name is used in https://github.com/FriendsOfSymfony/FOSRestBundle/blob/5e38509c14798579ba5655846cc9c4876f0b40e7/DependencyInjection/Configuration.php#L287 and the service is tried to be fetched from the container\nSo instead of the Class 'Symfony\\Component\\Serializer\\Encoder\\XmlEncoder' not found error, this causes a service does not exist error. So the better solution would be to remove the decoder registration in the config I linked above when the serializer is not installed.. Service existence checks should not be done in the extension as it then depends on the order the extensions are registered. As I said, you could check if the class exists and adjust the config default accordingly.. What's the point of this? This class always exists. You need to check against Symfony\\Component\\Serializer\\Encoder\\XmlEncoder .... please sort them alphabetically like it was before. ",
    "grEvenX": "This rocks @lsmith77 , what's does the fortuneteller say about when this stuff is ready to be merged into master? And what's left before that can happen?\n. From my personal view, I think this approach is just fine. But I'm not a Symfony advocate, thus my points might/should not count for much in this case. But as you said, this works, and isn't that good enough for a first version.\nCouldn't the possibility to configure it through routing config be added as an option at a later stage if there is actually need for it?\n. Yes, but isn't that the same as for Route configuration. The developer has a choice, either through routing config or annotations?\n. Btw, trying to test this out, but I get \"<CLASS> requires that you provide a value for the \"$queryFetcher\" argument (because there is no default value or because there is a non optional argument after this one).\" when I use first parameter with QueryFetcher. I've also added the QueryParam annotation to the method. It's based on the same as your example but using annotations to build the Route etc. \nWhat is needed in order for the QueryFetcher to be injected when the method is called?\n. Thanks for pointing that out, works now :) now off to do some real testing\n. I agree on the expressability part of injecting the query params.\nIf one defines a route with parameters and also uses queryparam, how will it affect the method signature and which (if any) would take precedence?\nE.g:\nPHP\n/*\n * @Route(\"/{id}\", requirements={\"id\" = \"\\d+\"})\n * @QueryParam(name=\"id\",requirements={\"id\" = \"\\d+\"})\n */\npublic function getCustomerAction($id)\n. This issue does perhaps belong to the Symfony project and not FOSRestBundle, but I guess this is of main concern to this project.\n. @mvrhov Where have this been discussed earlier, I just searched through the Symfony github repo but couldn't find any issue on the topic (only related topics)? On another note, have you experience with this issue yourself and do you know if there are any good alternative workarounds?\n. An update on the issue, HTTPS POST requests from IE is indeed possible, however there's another bug in their implementation which I need to get around (Source http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx):\n\n\nOnly text/plain is supported for the request's Content-Type header\n\nIn the original incarnation of the XDomainRequest object, we allowed specification of the Content-Type for a POST >request. It was pointed out that this violated our goal of emitting only requests that HTML Forms can issue, because >HTML Forms are limited to sending data in three different content types: text/plain, application/x-www-urlencoded, >and multipart/form-data. In particular, it was pointed out that some AJAX server libraries would blindly assume that if >they received a request with a SOAP or JSON Content-Type, then the client must either be trusted or Same Origin (because HTML itself previously offered no way to issue cross-origin requests with that Content-Type).\nUnfortunately, when we fixed this problem in a later IE8 Beta, we went a bit too far; we restricted the content type to >text/plain but didn\u2019t allow the caller to specify that the data was in application/x-www-urlencoded form. This is >problematic because server-side frameworks (e.g. ASP, ASPNET, etc) will only automatically parse a request\u2019s fields >into name-value pairs if the x-www-urlencoded content type is specified.\nTo workaround this issue, server code that currently processes HTML Forms must be rewritten to manually parse the >request body into name-value pairs when receiving requests from XDomainRequest objects. This makes adding >support for the XDomainRequest object more difficult than it would be otherwise.\n\nSo basically I guess we can do without allowing GET request to support _method, just have to figure out how to cope with this text/plain sent as Content-Type. I think perhaps I'll write up a blog-post about all of these issues regarding creating a restful service which should also work with current generation browsers (after I've figured out the solutions to it).\n. @lsmith77 I see FOSRestBundle as a bundle that should help developers create best-practice based REST APIs (correct me if wrong). I think making sure the REST API is accessible from all clients (even flawed ones as MS IE) is of importance.\nI agree with the Symfony devs that it seems like a poor choice to support overriding method in GET in this area as it's possible to use POST which is not considered \"safe\" as GET per RFC. There's howeve one remaining issue that needs to be dealt with in order for IE to work, which is to \"force\" how the POST request is handled by the server.\nWhat's your thoughts:\n1. Should I close this one and open a new issue with a request to override how Symfony parses the request body when no Content-Type is set from the client? \n2. Should I close this one and open an issue on the Symfony project instead? \n3. Is there no concern/interest for the issue, and I should just leave it to be an implementation I enable on my own services\n. @schmittjoh @lsmith77  thanks for the input, perhaps it's better to support something like this on the server-side and recommend using it on the clients. I found also http://easyxdm.net/ which seems to be a good match.\nI'm closing this one as it seems like the consensus is on not to do a hack to fix one specific browser's flaws.\n. ",
    "coderbyheart": "I also don't think the query parameter configuration should be part of the routing configuration as this tends to change quite often and would add a lot of noise to the routing config and add more ways to introduce errors to that file. \nI'd favour a more expressive solution than having one QueryParamReader which behaves essentially like the Request.\nIf one decides to mark up his desired query params he should get them nicely laid out for him:\n/**\n * Get the list of articles\n *\n * @param int $page\n * @QueryParam(name=\"page\", requirements=\"\\d+\", default=\"1\", description=\"Page of the overview.\")\n */\npublic function getArticlesAction($page)\n{\nThis perfectly aligns to the request parameter configuration where you also get to use the named parameter from the routing configuration.\n. Of course one could image getting some query params only conditinally:\nif ($search = $queryFetcher->getParameter('search')) {\n    $term = $queryFetcher->getParameter('term');\n}\nbut I personally would just fetch all the queryparams in one block anyway and deal with them conditionally later.\n$search = $queryFetcher->getParameter('search');\n$term = $queryFetcher->getParameter('term');\n\u2026\nif ($search) { \u2026 }\n. @grEvenX I think a conflict should raise an exception.\n. > That would make your code even less portable. \nCan you elaborate?\nDo you mean, by hard coding the query params in the method signature one limits possibility of extending the method in a subclass with a different implementation which would require other params?\n. ",
    "leek": "@lsmith77 I tried that, it seems the \\ is escaped because I had the resource in quotes from previous tests using @Bundle syntax. Here are the the resource syntax's that do not work:\nyml\nfoobar_api:\n    resource: \"PW\\FoobarBundle\\Controller\\Api\\BazController\"\n    type:     rest\nyml\nfoobar_api:\n    resource: \"PW/FoobarBundle/Controller/Api/BazController\"\n    type:     rest\nyml\nfoobar_api:\n    resource: PW/FoobarBundle/Controller/Api/BazController\n    type:     rest\nyml\nfoobar_api:\n    resource: \"@PWFoobarBundle/Controller/Api/\"\n    type:     rest\nyml\nfoobar_api:\n    resource: \"@PWFoobarBundle/Controller/Api/Baz\"\n    type:     rest\nyml\nfoobar_api:\n    resource: \"@PWFoobarBundle/Controller/Api/BazController\"\n    type:     rest\nThis is the only one that works:\nyml\nfoobar_api:\n    resource: PW\\FoobarBundle\\Controller\\Api\\BazController\n    type:     rest\n. ",
    "soullivaneuh": "Great :+1: for this.\nHaving this kind of configuration:\nyaml\napi:\n    type:     rest\n    resource: \"@AppBundle/Controller/\"\n    prefix:   /api\nWould be very painless than defined a resource per controller, especially for huge API.\n. Ok my english is not perfect, news does not have singular form.\nSo I have to edit this class and add it to uncountables property ? \n. :+1: \nWhat is missing to get this PR merged?\n. You're welcome. :+1: \n. StyleCI is screaming a lot.\nMaybe can I backport StyleCI config on 1.7 branch and fix CS?\nOtherwise, you should deactivate StyleCI for this branch.\n. > feel free but we will then also need to ensure that we can still merge 1.7 into master afterwards.\nIMO, if the code is actually BC and cs configuration the same, the merge should not be a problem.\nExcept maybe for deleted code/class on master.\nI suggest to merge 1.7 on master just after the CS PR and ignore modification (because CS is already fixed on master). Then you will able to continue merges later.\n@stof Review corrected.\n. @xabbuh Please take a look: https://github.com/Soullivaneuh/FOSRestBundle/commit/93e87093d2289567db7b7fa41126b13c096a2f77\nNo long_syntax_array fixer applied. Should not be a problem IMO excepts for some inline array with modified content.\n. @stof @lsmith77 done.\n. Strange. Will take a look.\n. Seems StyleCI has extra check that PHP-CS-Fixer could not handle.\nWill manually fix it.\n. @lsmith77 CS fixed.\n. No, it's an integer.\nAll my NotBlank fields are integer, float or string.\n. No, it's an integer.\nAll my NotBlank fields are integer, float or string.\n. Here my form definition:\n``` php\nclass ServerStatType extends AbstractType\n{\n    /*\n     * {@inheritdoc}\n     /\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('cpuStats')\n            ->add('loadAvrg')\n            ->add('memPhysFree')\n            ->add('memPhysUsed')\n            ->add('memSwapFree')\n            ->add('memSwapUsed')\n            ->add('memCached')\n            ->add('diskUsage')\n            ->add('networkTraffic')\n        ;\n    }\n/**\n * {@inheritdoc}\n */\npublic function configureOptions(OptionsResolver $resolver)\n{\n    $resolver\n        ->setDefaults([\n            'data_class' => ServerStat::class,\n            'csrf_protection' => false,\n        ])\n    ;\n}\n\n/**\n * {@inheritdoc}\n */\npublic function getName()\n{\n    return '';\n}\n\n}\n```\n. Here my form definition:\n``` php\nclass ServerStatType extends AbstractType\n{\n    /*\n     * {@inheritdoc}\n     /\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('cpuStats')\n            ->add('loadAvrg')\n            ->add('memPhysFree')\n            ->add('memPhysUsed')\n            ->add('memSwapFree')\n            ->add('memSwapUsed')\n            ->add('memCached')\n            ->add('diskUsage')\n            ->add('networkTraffic')\n        ;\n    }\n/**\n * {@inheritdoc}\n */\npublic function configureOptions(OptionsResolver $resolver)\n{\n    $resolver\n        ->setDefaults([\n            'data_class' => ServerStat::class,\n            'csrf_protection' => false,\n        ])\n    ;\n}\n\n/**\n * {@inheritdoc}\n */\npublic function getName()\n{\n    return '';\n}\n\n}\n```\n. @lsmith77 maybe can I have some advice about this view layer? :-)\n. Review corrected.\n. The error is:\njson\n        \"message\": \"The format \\\"form\\\" is not supported for deserialization.\",\n        \"class\": \"Symfony\\Component\\HttpKernel\\Exception\\UnsupportedMediaTypeHttpException\",\n. Actually not.\n. Actually not.\n. DoctrineObjectConstructor is part of jms/serializer package. Using FOSRest information on this object can not be possible here.\n. DoctrineObjectConstructor is part of jms/serializer package. Using FOSRest information on this object can not be possible here.\n. But I :+1: The request. Actually I have to do this:\n``` php\n/\n * @param PowerDNSDomain                   $domain\n * @param PowerDNSRecord                   $record\n * @param PowerDNSRecord                   $updatedRecord\n * @param ConstraintViolationListInterface $validationErrors\n \n * @ParamConverter(\"updatedRecordData\", converter=\"fos_rest.request_body\")\n \n * @return View\n */\npublic function putAction(PowerDNSDomain $domain, PowerDNSRecord $record, PowerDNSRecord $updatedRecord, ConstraintViolationListInterface $validationErrors)\n{\n    if ($validationErrors->count() > 0) {\n        return $this->handleBodyValidationErrorsView($validationErrors);\n    }\n$record->setName($updatedRecord->getName().'.'.$domain->getName())\n       ->setContent($updatedRecord->getContent())\n       ->setTtl($updatedRecord->getTtl())\n       ->setPrio($updatedRecord->getPrio());\n\n$this->get('manager.dns')->saveRecord($record);\n\nreturn $this->view($record);\n\n}\n```\nTwo parameters and manual copy, that is overkill.\nWould be greate to have a system that will merge submitted data with the retrieved object automatically.\nAny idea and/or ETA on this?\n. But I :+1: The request. Actually I have to do this:\n``` php\n/\n * @param PowerDNSDomain                   $domain\n * @param PowerDNSRecord                   $record\n * @param PowerDNSRecord                   $updatedRecord\n * @param ConstraintViolationListInterface $validationErrors\n \n * @ParamConverter(\"updatedRecordData\", converter=\"fos_rest.request_body\")\n \n * @return View\n */\npublic function putAction(PowerDNSDomain $domain, PowerDNSRecord $record, PowerDNSRecord $updatedRecord, ConstraintViolationListInterface $validationErrors)\n{\n    if ($validationErrors->count() > 0) {\n        return $this->handleBodyValidationErrorsView($validationErrors);\n    }\n$record->setName($updatedRecord->getName().'.'.$domain->getName())\n       ->setContent($updatedRecord->getContent())\n       ->setTtl($updatedRecord->getTtl())\n       ->setPrio($updatedRecord->getPrio());\n\n$this->get('manager.dns')->saveRecord($record);\n\nreturn $this->view($record);\n\n}\n```\nTwo parameters and manual copy, that is overkill.\nWould be greate to have a system that will merge submitted data with the retrieved object automatically.\nAny idea and/or ETA on this?\n. Indeed, spoke too faster. Sorry for that.\n. Indeed, spoke too faster. Sorry for that.\n. @Ener-Getick Don't know, maybe both. This is the serializer work but maybe this could be fixed with some configuration from your bundle.\nBTW, do you have an advice for how to add a relation link on the post body ?\n. @Ener-Getick Don't know, maybe both. This is the serializer work but maybe this could be fixed with some configuration from your bundle.\nBTW, do you have an advice for how to add a relation link on the post body ?\n. @Ener-Getick Already done: http://stackoverflow.com/q/36205565/1731473\n. @Ener-Getick Already done: http://stackoverflow.com/q/36205565/1731473\n. Can confirm the issue since upgrading to v2.0.\nWhat is the state of the issue?\n. PHP-CS-Fixer is not required at project level dependencies and user can use both version ATM.\n. @Ener-Getick updated.\n. > as we use the default configuration of php-cs-fixer anyway...\nYou are not using the default, you disabled braces.\nAlso, StyleCI integrate fixer from php-cs-fixer dev-master, so this could be different.\nThis bridge avoid config duplication and ensure working for both PHP-CS-Fixer v1 and v2 at the moment.\nAbout the autoloader, this might be right, I have to test.\nBut I have also dependencies to add. I think I'll add it manually.\n. I saw the deprecation message here: https://github.com/FriendsOfSymfony/FOSRestBundle/compare/1.8.0...2.0.0#diff-ffb88a00253e285e14e0d32ef5423cd1L198\nBut this does not get so much information.\n. Ok for anyone having the same issue, here is the right config:\nyaml\nfos_rest:\n    routing_loader:\n        default_format: json\n    body_converter:\n        enabled: true\n        validate: true\n    serializer:\n        serialize_null: true\n    view:\n        formats:\n            xml:  false\n            json: true\n            rss:  false\n            yml:  true\n        view_response_listener: force\n    param_fetcher_listener: force\n    format_listener:\n        rules:\n            - { path: '^/api/', priorities: ['json', 'yml'], fallback_format: json, prefer_extension: true }\n            - { path: '^/', stop: true } # FOSRest should not handle other routes than API\n    versioning:\n        enabled: true\n        resolvers:\n            media_type:\n                enabled: true\n. Which version of this bundle do you have? I have 2.0.0 and here is my complete config:\nyaml\nfos_rest:\n    routing_loader:\n        default_format: json\n    body_converter:\n        enabled: true\n        validate: true\n    serializer:\n        serialize_null: true\n    view:\n        formats:\n            xml:  false\n            json: true\n            rss:  false\n            yml:  true\n        view_response_listener: force\n    param_fetcher_listener: force\n    format_listener:\n        rules:\n            - { path: '^/api/', priorities: ['json', 'yml'], fallback_format: json, prefer_extension: true }\n            - { path: '^/', stop: true } # FOSRest should not handle other routes than API\n    versioning:\n        enabled: true\n        resolvers:\n            media_type:\n                enabled: true\nAnd I have json if I don't specify any extension on the URL.\n. :-1: For this way. For me this is only a workaround. Plus, the logger example is not really relevant, this is a common service usually injected on controller constructors.\nOn a huge project with a lot of specific services, this way will be overkill with a huge configuration file.\nInstead, we should find a way to make it working without any workaround.. Or, at least, this should be improved with a compiler pass fetching existing services class to add them to the ignore list. Still a workaround for me, but it avoids filling a big configuration file. :confused: . BTW, I tried updating manually the ignoreClass variable on current stable:\nphp\n$ignoreClasses = [\n    \\Symfony\\Component\\HttpFoundation\\Request::class,\n    \\FOS\\RestBundle\\Request\\ParamFetcherInterface::class,\n    \\Symfony\\Component\\Validator\\ConstraintViolationListInterface::class,\n    \\Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\ParamConverter::class,\n    MessageInterface::class,\n    LoggerInterface::class,\n    Logger::class,\n];\nBut this change nothing, with this controller:\nphp\npublic function indexAction(LoggerInterface $logger)\n{\n    dump($logger);\nI still got this error:\n```\nThe format \"\" is not supported for deserialization.\nSymfony\\Component\\HttpKernel\\Exception\\\nUnsupportedMediaTypeHttpException\nin vendor/friendsofsymfony/rest-bundle/Request/RequestBodyParamConverter.php (line 99)\n```\nOr maybe this is an another issue?. The format \"\" is not supported for deserialization.. More info. Here is the post action:\n```php\n/\n * @QueryParam(name=\"record\", key=null)\n \n * @ParamConverter(\"record\", converter=\"fos_rest.request_body\")\n \n * @IsGranted(\"edit\", subject=\"domain\")\n */\npublic function postAction(PowerDNSDomain $domain, PowerDNSRecord $record, ConstraintViolationListInterface $validationErrors): View\n{\n    if ($validationErrors->count() > 0) {\n        return $this->handleBodyValidationErrorsView($validationErrors);\n    }\n$record\n    ->setDomain($domain)\n    ->setName($record->getName())\n    ->setType($record->getType())\n;\n\n$this->get('manager.dns')->saveRecord($record);\n\n$view = $this->view($record, 201);\n$view->getContext()->setGroups(['details']);\n\nreturn $view;\n\n}\n```\nAlso, if I try to dirty change the code on SymfonySerializerAdapter:\n```php\n/*\n * {@inheritdoc}\n /\npublic function deserialize($data, $type, $format, Context $context)\n{\n    $newContext = $this->convertContext($context);\nif ($type === PowerDNSRecord::class) {\n    $newContext['default_constructor_arguments'] = [\n        PowerDNSRecord::class => ['domain' => new PowerDNSDomain()],\n    ];\n}\n\nreturn $this->serializer->deserialize($data, $type, $format, $newContext);\n\n}\n```\nIt works.. @GuilhemN not on the body, and AFAIK I shouldn't because the URL is POST /dns/{domain_id}/records.\nThe domain_id is used to retrieve the domain.. Should be ^2.0.\n. Indeed, forgot the caret rule.\nBut it's still better to see. :-)\n. I was searching for a detection with form without success.\nI did't see for getBlockPrefix, thanks for the tip. :+1: \n. > And getExtendedType needs to make the same check btw\nWhat do you mean? Related to this PR?\n. > hmm, even much simpler actually: set both alias and extended-type in the tag. the compiler pass in 2.8 will ignore alias if type-extension is set, and it will use the alias in 2.7\nOh, indeed.\nIn this case, would not be better to set both of them directly under the xml config file?\n. > you still need to detect the Symfony version in FOS\\RestBundle\\Form\\Extension\\DisableCSRFExtension::getExtendedType though\nI'm sorry I don't understand. Detecting this for what?\n. > the return value of this method needs to be the new value in Symfony 2.8, based on the feature detection.\nI didn't find this one the upgrade note...\n. Oh! Found it! Thanks, will update this PR.\n. @stof Note: Add some sub-titles on upgrade note would be better for link reference. :+1: \n. Why not just use your VCS?\n. That's @Ener-Getick fault! :-P\nWill correct it.\n. You might have some common library conflict with the composer autoload.\nSee: https://github.com/Soullivaneuh/php-cs-fixer-styleci-bridge#troubleshooting\n. You mean this solution? https://github.com/composer/composer/issues/1493#issuecomment-12492276\nAFAIK, this is exactly what I did: https://github.com/Soullivaneuh/php-cs-fixer-styleci-bridge/blob/v2.1.1/autoload.php#L32-L34\nAnd this solve the issue I got on Puli.\n. If you have better to propose to fix issue like puli/cli#21, I'm hearing because this is the only thing I found so far.\nAs this library is not concerned yet, I'll revert this part for now.\n. On puli, the conflict is still here:\nbash\nsullivan@sweetnexy:~/projects/fork/puli/cli(styleci-bridge)$ php-cs-fixer fix -v\nFixer \"ordered_use\" does not exist, skipping.\nFixer \"empty_return\" does not exist, skipping.\nLoaded config from \"/home/sullivan/projects/fork/puli/cli/.php_cs\".\nUsing cache file \".php_cs.cache\".\nPHP Fatal error:  Call to undefined method PhpCsFixer\\FixerFileProcessedEvent::setDispatcher() in /home/sullivan/.composer/vendor/symfony/event-dispatcher/EventDispatcher.php on line 42\nBut this happen only with a composer globally installed php-cs-fixer. The .phar way works great.\nNot sure if this can be easily resolvable.\n. ",
    "GuilhemN": "Fixed by https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1339\n. @magnetik @xabbuh I merged 2.0 into master.\n. This issue/PR seems to be abandoned ... I will continue this work in a new PR.\n. @gmansilla can you provide more information please? \nLike the content returned, your configuration and everything which may be useful. \n. @gmansilla can you provide more information please? \nLike the content returned, your configuration and everything which may be useful. \n. We really need to improve this error message and maybe log it...\nCan you dump the exception thrown here please?\n. Did you dump $e or $exception ? It doesn't seem to be the right exception :x\n. Should be easy to implement with #1358\n. Fixed by #1358\n. Fixed by #1095.\n. @kuroisuna it is up to your serializer, not to fosrestbundle.\n. @kuroisuna it is up to your serializer, not to fosrestbundle.\n. You can also do this by adding your @QueryParam dynamically:\n``` php\n<?php\nuse FOS\\RestBundle\\Request\\ParamFetcher;\nuse FOS\\RestBundle\\Controller\\Annotations\\QueryParam;\n\nclass FooController extends Controller\n{\n    public function getArticlesAction(ParamFetcher $paramFetcher)\n    {\n        $dynamicParam = new QueryParam();\n        $dynamicParam->name = \"dynamic_query\";\n        $dynamicParam->default = $this->getParameter('today_object');\n        $dynamicParam->requirements = \"\\d+\";\n        $paramFetcher->addParam($dynamicParam);\n    }\n}\n\n``\n. You can also do this by adding your@QueryParam` dynamically:\n``` php\n<?php\nuse FOS\\RestBundle\\Request\\ParamFetcher;\nuse FOS\\RestBundle\\Controller\\Annotations\\QueryParam;\n\nclass FooController extends Controller\n{\n    public function getArticlesAction(ParamFetcher $paramFetcher)\n    {\n        $dynamicParam = new QueryParam();\n        $dynamicParam->name = \"dynamic_query\";\n        $dynamicParam->default = $this->getParameter('today_object');\n        $dynamicParam->requirements = \"\\d+\";\n        $paramFetcher->addParam($dynamicParam);\n    }\n}\n\n``\n. This was fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1240\n. This was fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1240\n. #1097 introduced the support of the file with a newFileParam` annotation.\nYou can use this annotation like that:\n``` php\n<?php\nuse FOS\\RestBundle\\Request\\ParamFetcher;\nuse FOS\\RestBundle\\Controller\\Annotations\\FileParam;\n\nclass FooController extends Controller\n{\n    /**\n     * @FileParam(name=\"fooFile\")\n     * In this example, if firstName and fooFile are defined at the time,\n     * ParamFetcher::get(\"fooFile\") will throw an error.\n     * Otherwise, if the file is valid, it will return a Symfony\\Component\\HttpFoundation\\File\\UploadedFile.\n     * See http://api.symfony.com/2.7/Symfony/Component/HttpFoundation/File/UploadedFile.html\n     *\n     * @FileParam(name=\"myJsonFile\", requirements={\"mimeTypes\"=\"application/json\", \"maxSize\"=\"2k\"}, strict=true)\n     * The ParamFetch will throw an error if the file passed is not a json file or is bigger than 2,000 bytes.\n     * See all file possible requirements: http://symfony.com/doc/current/reference/constraints/File.html\n     *\n     * @FileParam(name=\"avatar\", requirements={\"mimeTypes\"=\"application/json\", \"minWidth\"=\"200\"}, image=true)\n     * The ParamFetch will throw an error if the file passed is not an image and is not larger than 2O0px.\n     * See all image possible requirements: http://symfony.com/doc/current/reference/constraints/Image.html\n     *\n     * @FileParam(name=\"identityCard\", image=true, default=\"noPicture\")\n     * If \"identityCard\" is not an image, paramFetcher will return \"noPicture\"\n     *\n     * @param ParamFetcher $paramFetcher\n     */\n    public function getArticlesAction(ParamFetcher $paramFetcher)\n    {\n    }\n}\n\n``\n. #1097 introduced the support of the file with a newFileParam` annotation.\nYou can use this annotation like that:\n``` php\n<?php\nuse FOS\\RestBundle\\Request\\ParamFetcher;\nuse FOS\\RestBundle\\Controller\\Annotations\\FileParam;\n\nclass FooController extends Controller\n{\n    /**\n     * @FileParam(name=\"fooFile\")\n     * In this example, if firstName and fooFile are defined at the time,\n     * ParamFetcher::get(\"fooFile\") will throw an error.\n     * Otherwise, if the file is valid, it will return a Symfony\\Component\\HttpFoundation\\File\\UploadedFile.\n     * See http://api.symfony.com/2.7/Symfony/Component/HttpFoundation/File/UploadedFile.html\n     *\n     * @FileParam(name=\"myJsonFile\", requirements={\"mimeTypes\"=\"application/json\", \"maxSize\"=\"2k\"}, strict=true)\n     * The ParamFetch will throw an error if the file passed is not a json file or is bigger than 2,000 bytes.\n     * See all file possible requirements: http://symfony.com/doc/current/reference/constraints/File.html\n     *\n     * @FileParam(name=\"avatar\", requirements={\"mimeTypes\"=\"application/json\", \"minWidth\"=\"200\"}, image=true)\n     * The ParamFetch will throw an error if the file passed is not an image and is not larger than 2O0px.\n     * See all image possible requirements: http://symfony.com/doc/current/reference/constraints/Image.html\n     *\n     * @FileParam(name=\"identityCard\", image=true, default=\"noPicture\")\n     * If \"identityCard\" is not an image, paramFetcher will return \"noPicture\"\n     *\n     * @param ParamFetcher $paramFetcher\n     */\n    public function getArticlesAction(ParamFetcher $paramFetcher)\n    {\n    }\n}\n\n``\n. Fixed by https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1339\n. :+1: would be great but IMO we should create aRestDirectoryLoaderinstead of using theRestRouteLoader.\nMaybe even create a specific typerest_directory` to simplify the new loader (but this second idea is not really user friendly...).\n. If you want still want to improve this, it's now easier.\nYou have to update https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Controller/Annotations/AbstractScalarParam.php\n. If you want still want to improve this, it's now easier.\nYou have to update https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Controller/Annotations/AbstractScalarParam.php\n. @lsmith77 what do you think about using a custom exception listener with an exception normalizer (something like the symfony normalizers) which would convert the exception to an array ?\n. Should be fixed by #1358 \n. @bblue see https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1536\n. @lsmith77 this has been fixed by #1107.\n. @lsmith77 this has been fixed by #1107.\n. It seems to be the expected comportment. If you want to check that your param is not empty you must define allowBlank to false instead of nullable which just checks that your param is not strictly equals to null.\nphp\n    /*\n     * @RequestParam(\n     *     name=\"text\",\n     *     requirements=\"dummy\",\n     *     description=\"text of the reply (can't be empty)\",\n     *     strict=true,\n     *     allowBlank=false\n     * )\n     * @View(statusCode=201) \n     *\n     * @throws NotFoundHttpException|BadRequestHttpException\n     */\n    public function postVideoCommentReplyAction(\n        ParamFetcherInterface $paramFetcher,\n        $videoId,\n        $commentId\n    ) {\n        $text = $paramFetcher->get('text');\n   }\n. It seems to be the expected comportment. If you want to check that your param is not empty you must define allowBlank to false instead of nullable which just checks that your param is not strictly equals to null.\nphp\n    /*\n     * @RequestParam(\n     *     name=\"text\",\n     *     requirements=\"dummy\",\n     *     description=\"text of the reply (can't be empty)\",\n     *     strict=true,\n     *     allowBlank=false\n     * )\n     * @View(statusCode=201) \n     *\n     * @throws NotFoundHttpException|BadRequestHttpException\n     */\n    public function postVideoCommentReplyAction(\n        ParamFetcherInterface $paramFetcher,\n        $videoId,\n        $commentId\n    ) {\n        $text = $paramFetcher->get('text');\n   }\n. @kopaygorodsky bugs are no longer fixed in FOSRestBundle 1.8, you should upgrade to 2.0.\n. @hyyan @bpolaszek could you create a fork of the symfony-rest-edition reproducing this issue ?\n. Do you use the jmsserializer or the symfony serializer? \nAnd submit is not deprecated as @sepikas-antanas said only passing Request as an attribute. \n. Finally, I think that the best solution is to make an adapter that transform the jms context into a standard context class and after this standard context class is transformed for a specific serializer.\nLike that, if you want for example to change your serializer for the symfony serializer, you will not have to change anything.\nSo for that, View::setSerializationContext() must accept the jms normalization context and the standard normalization context.\n. I have an other idea, sorry if I didn't good explain.\nI created new context classes that do not implement the jms context interface :\nhttps://github.com/Ener-Getick/FOSRestBundle/tree/TICKET_1025/Context\nBut to fix the BC breaks, the users can use the jms context or the new context in the view.\nhttps://github.com/Ener-Getick/FOSRestBundle/blob/TICKET_1025/View/View.php#L194-209\nTo don't have to maintain two context classes, I also created some adapters that transform the context classes to another format.\nhttps://github.com/Ener-Getick/FOSRestBundle/tree/TICKET_1025/Context/Adapter\nWhat do you think ?\n. I just don't know if we should transform the JMS context directly into the view or after in the view handler ?\nIf we do the transformation after, we should transform the context in all handlers ...\n. @ianfp this is not related to FOSRestBundle but to php itself. \n. @ianfp this is not related to FOSRestBundle but to php itself. \n. You'll be able to change the bundle output thanks to #1358 \n. It's really hard to fix it without creating bc breaks because the jms serializer is deeply integrated...\n. Why did you put parenthesis ? \nYou should write:\nphp\n/**\n * @QueryParam(name=\"categories\", default=Category::TYPE_BOOKS, description=\"Category filters.\")\n */\n. @lsmith77 if you want to do the 2.0, I think that we should rewrite the bundle to remove everything linked to JMSSerializer.\nAbout this PR, I don't know if we should not just use an array rather than a class.\n. I mean that the bundle should support the jms serializer but not directly. I think it should be done via something included in the bundle and the users should not use directly the jms classes.\n. I mean that the bundle should support the jms serializer but not directly. I think it should be done via something included in the bundle and the users should not use directly the jms classes.\n. So do you still want to work on this PR or do you want to work on something more generic for the 2.0 ?\n. So do you still want to work on this PR or do you want to work on something more generic for the 2.0 ?\n. There are several problems I don't know how to solve. \nIt's impossible to not create bc breaks with a feature like that. This PR minimizes the bc breaks but there are several things illogical: user could get a jms context or standard context with View::getSerializationContext() and if he gets a standard context, there is a risk he don't know how to process it.\nDo you think this bc breaks are acceptable or should we report this PR to the 2.0 ? \n. There are several problems I don't know how to solve. \nIt's impossible to not create bc breaks with a feature like that. This PR minimizes the bc breaks but there are several things illogical: user could get a jms context or standard context with View::getSerializationContext() and if he gets a standard context, there is a risk he don't know how to process it.\nDo you think this bc breaks are acceptable or should we report this PR to the 2.0 ? \n. Ok so I will remove the JMS direct support.\n. Ok so I will remove the JMS direct support.\n. In this case, I think it's easier to use an array instead of a class for the context.\n. In this case, I think it's easier to use an array instead of a class for the context.\n. Do you prefers classes or an array to support a serialization context ?\n. Ok so I revert the last commits\n. Should I create a chain class for adapters and define it in the symfony container or should I process the adapters with conditions ?\n. I don't know how to rewrite the request converters tests ... If you have an idea...\n. The problem of using classes is that it's more complicated and less user-friendly :/\n. The problem is that I use the container in AbstractRequestBodyParamConverter (I don't know if it is the best way) to get a context adapter. So the tests are more complicated but I will do fix the bugs.\nI will maybe rewrite AbstractRequestBodyParamConverterTest to have less duplicated code.\n. @lsmith77 do you see something to change ?\n. We can even imagine something to define the serializer to use on each view or entity. \n. I will need at least 2 weeks to rewrite the tests because there is a lot of code not covered... (I'm on vacation this week) \n. Ok, I hope you will like to use it \ud83d\ude00 thx! \n. I do not understand why the request converter tests (FOS\\RestBundle\\Tests\\Request) are copied in the two sub classes... \nWe can group them in the parent class FOS\\RestBundle\\Tests\\Request\\AbstractRequestBodyParamConverterTest no ? \n. I rewrote this tests and now they are grouped. I used the Reflection to test AbstractRequestBodyParamConverter::execute() directly.\nI didn't test the dependencies output because I think that we must write tests for each component.\nInstead, I tested their parameters.\n. I found a problem. ConstraintViolationListInterface is serialized but not its ConstraintViolations:\njson\n[\n  [],\n  [],\n  []\n]\nI don't know how to solve it ... Maybe a new custom normalizer ?\n. Should I do the same as the current forms errors normalization ?\njson\n{\n  \"code\": 400,\n  \"message\": \"Validation Failed\",\n  \"errors\": {\n    \"children\": {\n      \"username\": {\n        \"errors\": [\n          \"This value should not be blank.\"\n        ]\n      }\n    }\n  }\n}\nOr something more like https://github.com/FriendsOfSymfony/FOSRestBundle/issues/842 ?\n. I think it would be better to fix this in another PR. \nMoreover, I don't really have the time for the moment ...\n. Ok, cool \u263a\n. Don't worry, you have the time, there are many things to do before deploying the 2.0.\n. Should we create documentations for this pr? \n. I added a paragraph explaining how to use the Context class.\n. Thanks, I hope it will be useful for many projects. \n@lsmith77 yes, they are all treated. \n. +1\nI am wondering if we should not create a getConstraints method in this interface to simplify the ParamFetcher.\nWe have to decide which fields must be present in the ParamInterface. I think that we should do something like that:\n``` php\n<?php\nnamespace FOS\\RestBundle\\Controller\\Annotations;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Validator\\Constraint;\ninterface ParamInterface\n{\n    /\n     * @return mixed\n     */\n    public function getValue(Request $request, $default);\n    /\n     * @return mixed\n     /\n    public function getDefault();\n    /\n     * @return Constraint|Constraint[]\n     */\n    public function getConstraints();\n    /\n     * @return string\n     /\n    public function getDescription();\n    /\n     * @param array $params List of the controller parameters\n     * @return bool\n     */\n    public function isConflicted(array $params);\n    /\n     * @return bool\n     */\n    public function isStrict();\n}\n```\n. This feature will be available in 2.0.\n. This feature will be available in 2.0.\n. We can't fix that as our annotations extend the annotations of symfony.\n. We can't fix that as our annotations extend the annotations of symfony.\n. The parameters are taken directly from the request which is filled by the symfony core.\nIt might be a symfony bug but I don't think so.\nTry to set a default value for this param and check if you get the default value or something else.\n. Did you try with the last version or the dev version ?\n. Should we use the 2.0 version of willdurand/negotiation ?\nThat's an alpha but it may be stable when FOSRestBundle 2.0 will be released.\n. Ok, I will update this PR.\n. @lsmith77 do you want to implement willdurand/negotiation FormatNegotiatorInterface on the fos rest FormatNegotiator or to inject a service implementing FormatNegotiatorInterface in the fos rest FormatNegotiator ?\nIf you want to implement this interface, we need to find a solution to match the request; maybe using the RequestStack service ?\n. Hum ... I just discover that the RequestStack has been released in Symfony 2.4 ... What should we do ?\n. Ok cool, so I will rewrite the negotiator with the RequestStack !\n. Ok, I will see if the are other features that we can now implement.\n. Do you want to merge this PR before the 2.0 ? So I will work with BC breaks on another PR or do you want me to include the format negotiator rewriting in this PR and remove the BC layers ?\nEdit: I think it's better to create one PR with BC layers and another one for 2.0 that applies this BC breaks.\n. @willdurand Do you have an idea of when you will release the 2.0 stable version of your negotiation package ?\n. Yes, we can reorganize the classes directly without BC layers in the 2.0.\n. Yes, we can reorganize the classes directly without BC layers in the 2.0.\n. Done.\n. I add some examples in the ParamFetcher documentation.\n. done.\n. done.\n. done :-)\n. done :-)\n. I'll wait that you merge #1115 to see if there is some standard mistakes related to this PR. \n. I'll wait that you merge #1115 to see if there is some standard mistakes related to this PR. \n. Yes, I fixed them.\n. Yes, I fixed them.\n. Hum so it seems that the doctrine annotations reader doesn't support the scalar type... If you have the time, can you change this doc and add a test for this case please? \nInstead I'll fix this later, probably tomorrow. \n. @xabbuh Yeah it needs a lot of changes to be backported this is why I didn't do it.\n. But at least we can backport the map option in Param. It should be pretty simple.\n. Removed in #1358 \n. What do you mean? all the constraints are updated in 2.0 https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/composer.json\n. Sure sorry I didn't see your message... To support symfony 3.0, we would have to create bc layers. We should discuss about this, it depends too if the 2.0 will be released soon or not. \n. Why not @lsmith77, but I do not understand English as well orally as writing :/\n. As you want, it doesn't change anything.\n. We must change the minimum version of willdurand/negotiation if we want to use the FormatNegotiationInterface. This interface only appear with the 1.3.0 ...\n. @willdurand said that willdurand/negotiation@2.0 will be released as stable in a few weeks (https://github.com/willdurand/Negotiation/issues/56#issuecomment-127066087).\nI think it could be a good idea to update this dependency version, no ?\n. done.\n. done.\n. will be possible with #1358 \n. I think that we can create a voter based on a request matcher.\n. I see something like that:\n``` php\nclass ApiVoter extends Voter\n{\n    private $requestMatcher;\n    private $requestStack;\npublic function __construct(RequestMatcherInterface $requestMatcher, RequestStack $requestStack) {\n    $this->requestMatcher = $requestMatcher;\n    $this->requestStack = $requestStack;\n}\n\nprotected function supports($attribute, $object) {\n    return $object === null && $attribute === 'ON_API';\n}\n\nprotected function voteOnAttribute($attribute, $subject, TokenInterface $token) {\n    return $this->requestMatcher->matches($this->requestStack->getCurrentRequest();\n}\n\n}\n```\nWe would need a new configuration section for the RequestMatcher and it would also be nice to create a ChainRequestMatcher to avoid having to inject multiple RequestMatcherInterface.\n. I don't know, it's not related to this PR. Should I fix it anyway ?\n. Hum, sorry, I understood that it would also force it for the projects using FOSRestBundle ...\n. @temp a solution is to decorate the service and change its tag with a lower priority.\n@lsmith77 I think we should do that in 2.0.\n. @temp a solution is to decorate the service and change its tag with a lower priority.\n@lsmith77 I think we should do that in 2.0.\n. @lsmith77 I guess we should keep it for now as we can't disable a specific listener.\n@paali this was fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1346\n. This feature makes bc breaks, you can still use the dev version of the bundle if you want \ud83d\ude09\n. Hi,\nthat's strange dev-master works for me. There may have conflicts, I'll check.\n. Your configuration has conflicts between the fpn/* packages.\nI changed several package version: \n``` json\n{\n    \"require\": {\n        \"php\": \">=5.3.9\",\n        \"symfony/symfony\": \"2.7.*\",\n        \"doctrine/orm\": \"~2.2,>=2.2.3,<2.5\",\n        \"doctrine/dbal\": \"<2.5\",\n        \"doctrine/doctrine-bundle\": \"~1.4\",\n        \"symfony/assetic-bundle\": \"~2.3\",\n        \"symfony/swiftmailer-bundle\": \"~2.3\",\n        \"symfony/monolog-bundle\": \"~2.4\",\n        \"sensio/distribution-bundle\": \"~4.0\",\n        \"sensio/framework-extra-bundle\": \"~3.0,>=3.0.2\",\n        \"incenteev/composer-parameter-handler\": \"~2.0\",\n    \"twig/extensions\": \"v1.3.0\",\n\n    \"jms/security-extra-bundle\": \"1.5.*\",\n    \"jms/di-extra-bundle\": \"1.5.*\",\n    \"jms/serializer-bundle\": \"1.0.*\",\n    \"friendsofsymfony/rest-bundle\": \"dev-master\",\n    \"doctrine/doctrine-fixtures-bundle\": \"v2.2.1\",\n    \"stof/doctrine-extensions-bundle\": \"v1.2.1\",\n    \"knplabs/knp-paginator-bundle\": \"~2.4.\",\n    \"seld/jsonlint\": \"1.3.*\",\n    \"friendsofsymfony/user-bundle\": \"v1.3.6\",\n    \"guzzle/guzzle\": \"v3.9.3\",\n    \"friendsofsymfony/jsrouting-bundle\": \"1.5.4\",\n    \"knplabs/knp-menu-bundle\": \"v2.0.0\",\n\n    \"fpn/doctrine-extensions-taggable\": \"^0.9\",\n    \"fpn/tag-bundle\": \"dev-master\",\n\n    \"knplabs/knp-gaufrette-bundle\": \"v0.1.7\",\n    \"willdurand/js-translation-bundle\": \"^1.0\",\n    \"friendsofsymfony/oauth-server-bundle\": \"1.4.2\",\n    \"nelmio/api-doc-bundle\": \"2.9.*\",\n    \"oldsound/rabbitmq-bundle\": \"v1.7.0\",\n    \"sensio/generator-bundle\": \"v2.5.3\",\n    \"liuggio/excelbundle\": \"^2.0\",\n    \"nelmio/cors-bundle\": \"^1.4\"\n}\n\n}\n```\nIt should work now ;)\nPs: You should use the ^major.minor syntax instead of selecting a specific version of a package if you want to have the new features/bugs fixes.\n. This bug is fixed by #1149, this is the disadvantage of the dev version ...\nYou can fix the code directly in your vendors waiting this PR is merged.\nIt's this line: https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1149/files#diff-fb25b174c69c239c848f3c46379a7c2cR89.\n. Hum this is another bug we try to solve :P\nUse in your config text/html instead of html ;) \nIf you have another error like that, try to replace the formats (json, html, ...) to their mime-type form (application/json, text/html, ...).\n. I tried to use the current Request::getMimeType() function. It supports the main mime types but not the aliases...\n. Another solution is to copy the Request::format at least temporarily. We can also search if there is no component that contains this mime types map.\n. If this is too complicated we can always revert to willdurand/negotiation 1.x...\nEdit: I change willdurand/version in https://github.com/FriendsOfSymfony/FOSRestBundle/commit/ac9961cc76282f36e9da31f366b782ee060bb387 so I think just reverting this commit may be do the job.\n. Yes but we need a different container than the request for that :/ \nMaybe re-creating a registerMimeType function on the FormatNegotiator.\n. +1, the only problem remaining is that the aliases are not configured by default. \nI think this is negligible.\n. You can create a Response by yourself ;)\nphp\n$response = new Response();\n$response->headers->set('Content-Type', 'application/json');\n$response->setContent($result->getJson());\nreturn $response;\nBut it's not possible actually to send a json directly. You can also use the templating functions.\nphp\n$view->setTemplateData(['object' => $object]);\n$view->setTemplate('fooTemplate');\n$view->setFormat('json');\nreturn $this->get('fos_rest.view_handler')->handle($view);\n. What about using the scrutinizer code coverage integrated feature? \n. @makasim You can use this to guess templates in an uncommon directory but this can't be fixed in FOSRestBundle as we do not manage the template name guess.\n. You should remove the parameter $view in the ViewHandler line 492 https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1171/files#diff-45a0db0063c1c7cb842b986447692221R492. It is useless now.\n. :+1: with this change, we could move the Context transformation in Serializer.\n. @xabbuh I merged the master branch and fixed the tests in this branch if it helps you ;)\n. @xabbuh do you need help on this PR ?\n. Already done in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1252 :P\nI'll try to import your commit to have something cleaner.\n. Ready to merge for me.\nDo you want to include other changes @xabbuh?\nPs: I resolved the conflicts in the service-container branch\n. Ready to merge for me.\nDo you want to include other changes @xabbuh?\nPs: I resolved the conflicts in the service-container branch\n. Status: reviewed\n. Status: reviewed\n. See #1286 \n. fixed by https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1265\n. fixed by https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1265\n. You should not use json_encode, FOSRestBundle manages this.\n. This feature will only be available in the 2.0. Which version of FOSRestBundle do you use ?\n(Doc of the 1.7: https://github.com/FriendsOfSymfony/FOSRestBundle/blob/1.7/Resources/doc/param_fetcher_listener.rst)\n. This feature will only be available in the 2.0. Which version of FOSRestBundle do you use ?\n(Doc of the 1.7: https://github.com/FriendsOfSymfony/FOSRestBundle/blob/1.7/Resources/doc/param_fetcher_listener.rst)\n. @xabbuh It seems that it come from FormatListenerRulesPass:49. \nI think this is linked to #1158. (https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1158/files#diff-ffb88a00253e285e14e0d32ef5423cd1L163)\nWe have to pass the rules to the FormatListenerRulesPass. Maybe use a static variable or redefine fos_rest.format_listener.rules in the container.\n. A functional test that activates all the FOSRestBundle features would be a good beginning.\n. #1184 should fix this. \n. If you use format in your priorities (json,  xml, ...)  you have to define their corresponding mime types in 2.0.\nNormally, only text/xml is auto detected in 2.0.\n. If someone  knows why the travis ci build fails ...\nEdit: It needed the symfony/security-bundle.\n. It depends if we absolutely want to not expose the bundle internals.\nI pushed another commit that uses the container, I don't know what's the best ...\n. I tried to apply what you described but I doesn't understand how you want to use Extension::prepend @lsmith77 to move the rule for the profiler. Is this function executed after Extension::load() ?\n. It has to be tested but this should work.\n. The last commits remove completely the uri support so only the Request attributes are used.\nI also merged #1194 in this PR and add a little part in the doc.\n. We can think about renaming the array parameter  to map because this option only encapsulate the constraints in a super Constraint\\All. So if map=false the raw data is passed to the constraints (an array). \n. This is just a rename, there is already a test for this. And is this https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1191/files#diff-2bf0083cfe57bb37a1bf4800c70a2733R61 not enough ?\n. IMO the array and withKeys parameters are not really different... \nI think that just renaming array to map is clearer and it will be easier to maintain (see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1191). \nThe type check may be a good idea but with something more flexible (like a type option). \n. IMO the array and withKeys parameters are not really different... \nI think that just renaming array to map is clearer and it will be easier to maintain (see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1191). \nThe type check may be a good idea but with something more flexible (like a type option). \n. But I do not understand you can set array/map to false to have the same result... \n. But I do not understand you can set array/map to false to have the same result... \n. With your example it would be:\n``` php\nnamespace Controller;\nclass Foo {\n    /*\n     * No array=true\n     * @QueryParam(name=\"filters\", requirements=@MyComplexConstraint, description=\"List of complex filters\")\n     /\n    public function getUsersAction(ParamFetcher $paramFetcher)\n}\nnamespace Constraint;\nclass MyComplexConstraintValidator extends ConstraintValidator\n{\n    public function validate($value, Constraint $constraint)\n    {\n        dump($value);\n    }\n}\n```\nWith ?filters[name]=rob&filters[year]=2015 the constraint will dump:\nphp\nMyComplexConstraintValidator.php on line 15:\narray:2 [\n  \"name\" => \"rob\"\n  \"year\" => \"2015\"\n]\nThe only difference with your code is that there is no type check, but I think that a type parameter would  be better.\n. Ping @piotrantosik \n. +1\n. +1\n. Is memCached an array parameter ? \n. Is memCached an array parameter ? \n. Can you provide me your form definition please? \n. Can you provide me your form definition please? \n. The forms are normalized by the JMSSerializer (https://github.com/schmittjoh/serializer/blob/master/src/JMS/Serializer/Handler/FormErrorHandler.php#L128).\nIs your field in a child form ? Otherwise you should open an issue on https://github.com/schmittjoh/serializer to ask if this behaviour is expected.\n. The forms are normalized by the JMSSerializer (https://github.com/schmittjoh/serializer/blob/master/src/JMS/Serializer/Handler/FormErrorHandler.php#L128).\nIs your field in a child form ? Otherwise you should open an issue on https://github.com/schmittjoh/serializer to ask if this behaviour is expected.\n. Ok... so we will have to remove that later and to set this variable for the bc build (https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/.travis.yml#L28) (see https://github.com/KnpLabs/KnpMenuBundle/blob/master/.travis.yml#L19 for an example).\n. Ok... so we will have to remove that later and to set this variable for the bc build (https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/.travis.yml#L28) (see https://github.com/KnpLabs/KnpMenuBundle/blob/master/.travis.yml#L19 for an example).\n. I guess we can detect the fos_rest.request_body converter and remove it from the route.\n. I guess we can detect the fos_rest.request_body converter and remove it from the route.\n. ``` php\n/*\n * @ParamConverter(\"post\", converter=\"fos_rest.request_body\", options={\"validator\"={\"groups\"={\"foo\", \"bar\"}})\n /\npublic function putPostAction(Post $post, ConstraintViolationListInterface $validationErrors)\n{\n    if (count($validationErrors) > 0) {\n        // Handle validation errors\n    }\n// ...\n\n}\n``\n. This syntax is managed by theRequestitself. I guess we can add a new method to theParameterInterface: something likegetLinkedParameters`.\n(#1192 is only related to the array option)\n. Another option would be to use ParamFetcher::all().\n. I'm closing this issue as this syntax is deprecated.\n. I'm closing this issue as this syntax is deprecated.\n. I suppose we can always use composer/semver as this package is installed by default.\nI'd like something like:\nyaml\nroute:\n    # ...\n    condition: matchVersion('^1.0|^2.0')\n. Yes, this is the expected behavior (see https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/UPGRADING.md). \nUnfortunately, we can't get all the mime types corresponding to a format... (https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Negotiation/FormatNegotiator.php#L68) \nYou can find an explanation here: https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1149#discussion_r41261839\n. Except if you think that we should improve something, you can close this. \n. Should be fixed by https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1317\n. Should be fixed by https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1317\n. I'm wondering if it wouldn't be better to suffix its name with Trait and to remove FOS: RestControllerTrait. \n. And IMO we should create a last release for the 1.* branch with bc layers to help to migrate to FOSRestBundle 2.0. \n. What about doing something like https://github.com/FriendsOfSymfony/FOSRestBundle/compare/master...Ener-Getick:CONTROLLER?expand=1 ?\n. Except my last comment, sounds good to me :+1:.\n. It seems that this class resolves the real class path of a proxy. \nCan you make a pr and add a comment with a link to this issue to prevent it to be removed again? \n. This is not supported in a routing  file managed by symfony. \nIf you want to use this, you have to create a dedicated file for your rest routes and to load it:\nyaml\nfos_rest:\n    resource: fos_rest.yml\n    type: rest\n. I think that you have to update the tests for hhvm. \n. :+1: \n. We can't use trigger_error or throw an exception when someone gets the value directly without using accessors ...\nMoreover we can't really check the type of the value.\nMaybe can someone give us a hint ?\n. @stof not necessary, for example the Route annotation uses private properties (see https://github.com/symfony/symfony/blob/2.8/src/Symfony/Component/Routing/Annotation/Route.php).\n. Ok so we can leave the annotations as is.\nShould I deprecate or add BC layers for something else ?\n. ParamFetcherInterface, ParamReaderInterface, ViewHandlerInterface and ConfigurableViewHandlerInterface are IMO not really useful and there are probably not used.\nShould we not remove them to make the bundle clearer ?\n. I didn't think to use the github comparator ^_^\nApparently it remains the context adapters. I will create a simple support (just the context classes not the symfony serializer support). \n. :+1: @xabbuh, keeping BC is sometimes really hard because of these classes...\n. I'll split this PR into smaller PRs, this one begins to be too complicated to manage...\n. :+1:\n. Thank you @Soullivaneuh \n. Another solution is to extend the constraints which needs the Container and to make them ContainerAware. \nThen the ParamFetcher will inject the Container into these constraints and the AbstractParameter won't be ContainerAware. \nIs this a better solution @stof ?\n. I'll make a PR. But isn't NelmioApiDoc not compatible with FOSRestBundle 2.0? \n. The problem is that this parameter doesn't have the same meaning in 2.0.\nIt is renamed to map and means that the parameter value will be validated row per row...\nI think that we should create a new type option that would be more powerful.\n. This is fixed in NelmioApiDocBundle 2.11.\n. I don't think that what you want @mdriessen is compliant to HTTP. The request content, if not empty must have a Content-Type imo.\n. Apparently the body_listener uses Request::getRequestFormat which is weird as it is related to the response...\nSo I think it conflicts here with the format_listener.\nCan you provide me your config ?\n. Are you using the body converter when the error occurs ? \nCan you also copy-paste your controller and your request headers/parameters ?\n. Ok I understood the issue (in fact your issue @mdriessen is not exactly the same as the original). It doesn't seem related to FOSRestBundle but to JMSSerializerBundle which doesn't support forms by default.\nThe solution of @acassan looks good to me to fix it.\nThen @mdriessen you pointed the fact that it is not possible to define a default format for the body converter, this should be added but probably  won't before 2.1 (which will be released in a few months).\nAs a workaround, you can create a kernel.request listener setting a default Content-Type when none is provided.\n. This is supported in FOSRestBundle 2.0 which is actually in development. You can use it at your own risks if you want with 2.0.x-dev.\n. The problem is that it's not easy to support the symfony serializer without making BC breaks... (JMS is deeply integrated in 1.7)\nIf we do not accept your PR, you can use it thanks to composer (see the docs) but you can still make use review it :-)\n. This is actually not supported in FOSRestBundle: some parts of the code have to be changed to support this.\nCould you make a PR ?\n. What output do you have ? This should make it work...\n. What output do you have ? This should make it work...\n. I'm not sure that this is a good solution, this class would have two methods to set the serialization context and this new method would be deleted in 2.0 so instantly deprecated... \nI'm actually creating BC layers in #1213 to help people to migrate to 2.0. The 2.0 will probably be released soon so except if you can't I suggest you to wait. \n. Isn't it related to symfony more than FOSRestBundle? \n. Could you create a PR please?\n. Could you create a PR please?\n. @fsevestre In 1.8\n. @fsevestre In 1.8\n. Thank you @OskarStark \n. What is your configuration? \n. Oops, not specified ... the configuration in your controller ^^\n. Yeah apparently, the current version return the default value if there is a nested array ... (See here)\nFOSRestBundle 2.0 allows to validate the first depth of an array. (See here)\n. Thank you @mpbzh, merged in 1af7cab8a315b549b87b605709da486d3384cdd0.\n. See this. We can't break backwards compatibility with a protected method whereas a private method.\n. Thanks you @mpbzh, merged in 9a16b0ec5a2655a0fda28efe5be9789eb9417b8c.\n. A solution might be to ignore any type hinted parameter except those coupled with a ParamConverter annotation.\n. Sure but I think this is the best compromise we can do ... :/\n. @lsmith77 I think we can merge this PR as long as we have not a better solution.\n. A better solution may be to add normalizers on top of the serializers (and not only for the exceptions) to avoid having different output for common classes...\nWhat do you think @xabbuh @lsmith77 ?\n. Thanks @stloyd but this is not a definitive api. I'm wondering if we should not manage this differently on top of the new serializer adapters introduced by @xabbuh in 651714c94a7c2c61dcc83cff7e7d0410714253fa.\n. I'm not sure about this PR.... might be better to provide different normalizers for each serializer. \nI'll search if we can provide a standard normalizer which will be adapted for each serializer then.\n. It seems that there is no longer deprecation warnings with symfony 2.7.\n. Probably because of this. \n@stof do you know why travis is not running the tests for this PR ?\nIt seems that there is the same issue on #1213.\n. The build is launched twice when I remove the branches section ...\n. I removed the last commit and rebased but Travis is still not launched ...\n. That's better thanks @stof\n. I reverted this change temporally, we have to add a check to fix this bug. \n. IMO we should add a new Travis test with - - no-dev and skip the tests when required classes are not present \n. Not a good idea imo instead we should create a new check to fix this (with class_exists / interface_exists) or catch the reflection exception. \n. @eXtreme apparently we catch this kind of exception in the ExceptionController may be better to do the same thing.\n. @xabbuh @lsmith77 we should decide if we create bc layers for 1.* or if we leave it as is.\nAs @stof said here IMO it's easier for everyone to upgrade a project to 2.0 with BC layers but that's also true that we lose time by creating them and that we could use this time to create new features...\nIMO we should at least create BC layers for the features the most used (context, annotation properties, ...).\nAlready mentioned here:\n- https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1171#issuecomment-159972323\n- https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1171#issuecomment-159996085\n- https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1213#issuecomment-158617633\n. I opened #1254\n. This error is caused by the twig exception controller which requires the logger.\nOnly the RequestBodyParamConverter can support this class so it is executed but it isn't expected to be...\nI don't really see a solution to this problem except maybe creating a list of classes to ignore...\n. FOSRestBundle tries to deal with this class method which requires the logger. This is not a constructor argument ;-)\n. We can also force the user to explicitly requests the RequestBodyParamConverter by checking that ParamConverter::getConverter() === 'fos_rest.request_body' but this is a BC break so only in FOSRestBundle 2.0...\n. What do you think about this @xabbuh @lsmith77 ?\n. Sure @ogizanagi, @lsmith77 introduced a similar feature in #1139 which was merged on master.\nThere are several BC breaks but I think that they can be easily removed to merged this PR in 1.* but it would mean to create a new 1.8 release.\n1152 tried to introduce something really flexible but @lsmith77 couldn't finish it if someone wants to continue the work on it, any help is welcome ;-)\n. Not sure what you mean.\nDo you have this in your config ?\nyml\nfos_rest:\n    routing_loader:\n        include_format: true\n    format_listener:\n        enabled: true\n        rules:\n            - { path: '^/', priorities: ['bson', 'json'], fallback_format: json, prefer_extension: true }\nThen if you want to use bson you should create a new encoder and tag it with serializer.encoder (if you use the symfony serializer).\nOr if you use the jms serializer, you have to create a new SerializationVisitor and tag it with jms_serializer.serialization_visitor.\nThen normally you will have the possibility to use bson.\n. ping\n. Thank you @patxi1980 \n. FOSRestBundle 1.7 now supports symfony 3.0.\n. I'll try to work on this issue this weekend if no-one else is on it \n. IMO you can also remove the tests on symfony 2.6 and 3.0 (3.0 is now the default version of symfony installed)\n. As you want but IMO we already test the bundle with symfony 2.3 and 2.8 so it should work with 2.6\n. Seems to be ok for me\n. :+1:\n. I agree with @xabbuh IMO this should be merged in 1.7 as 1.8 is clearly not ready yet. \n. I don't know if this PR is a bug fix or an enhancement...\nAfter all, may be safer to merge it in 1.8.\n. I think that this change has to be merged in 1.8.\nFor the rest :+1:\n. @xabbuh @lsmith77 can you review this PR please?\n. @xabbuh @lsmith77 can you review this PR please?\n. After another review, ready to be merged for me.\n. Status: Reviewed\n. :+1:\n. I made the changes thank you @stof.\nThe review should be easier now that I use inheritance.\n. Yeah didn't think about this when I refactored the ParamFetcher to support RequestStack...\nThis bug is probably also present in master as the initParams function hasn't been refactored.\n. What about saving the last request used in the param fetcher and change ParamFetcher::getParams() to:\nphp\npublic function getParams() \n{\n    $request = $this->getRequest();\n    if ($this->lastRequest !== $request) {\n        $this->initParams();\n        $this->lastRequest = $request;\n    }\n    return $this->params;\n}\n. Is #1263 an appropriate bug fix for you ?\n. Is #1263 an appropriate bug fix for you ?\n. Fixed in #1263.\nThank you!\n. @lsmith77 what do you think about making scrutinizer optional as there are often bugs with it ?\n. Thank you @lsmith77 \n. You're right I'll create another PR for 1.8\n. See #1258 \n. Closes #1244\n. Did I miss something ?\n. Closes #1243\n. There is nothing in 1.8 for the moment https://github.com/FriendsOfSymfony/FOSRestBundle/compare/1.7...1.8\n. @lsmith77 @xabbuh do you see something else to mark as internal or can I merge this PR ?\n. @lsmith77 @xabbuh do you see something else to mark as internal or can I merge this PR ?\n. There's a strange error on php 7.0... May be caused by travis.\n. @stof it is fixed now\n. We can probably easily port this feature to 1.8\n. A solution might be to instantiate a ParamFetcher for each controller in the ParamFetcherListener and force the user to get it as an argument..\n. A solution might be to instantiate a ParamFetcher for each controller in the ParamFetcherListener and force the user to get it as an argument..\n. We can also use a ParameterBag which would use spl_object_hash internally to match the current params but I don't know its performance...\n. We can also use a ParameterBag which would use spl_object_hash internally to match the current params but I don't know its performance...\n. What do you think about this new solution @stof ?\n. What do you think about this new solution @stof ?\n. Yeah it only works when you submit a comment (may have a weird behavior if the edited comments were supported)\n. :+1:\nI think that we should follow the symfony standards and use the AppBundle at least for the first code block of each page then we can just add the file path.\nIMO we should also remove all the <?php tag to follow the symfony standards.\n. :+1:\nI think that we should follow the symfony standards and use the AppBundle at least for the first code block of each page then we can just add the file path.\nIMO we should also remove all the <?php tag to follow the symfony standards.\n. Why don't we use Serializer::deserialize in the listener instead of our own decoders?\n. Why don't we use Serializer::deserialize in the listener instead of our own decoders?\n. I'm not sure that we should keep this feature in 2.0 as it's not intuitive and I don't really see the interest of converting the request parameters from snake case to camel case...\n. I'm not sure that we should keep this feature in 2.0 as it's not intuitive and I don't really see the interest of converting the request parameters from snake case to camel case...\n. hum... What about creating a black list instead of changing the behaviour for all params ?\n. Well I'm still not sure this is a good solution to have an array normalizer on top of the request parameters... As we can see, it can break many things.\nIMO it would be better to at least specify on each request if we want to use the normalizer (via a request matcher or an annotation in the controller) or to create a new FormSubmitter providing a request adapter.\n. Yeah, so wouldn't it be better to orientate people to 2.0 instead of changing the array normalizer behavior? \n. I personally would prefer a new service/option. \nWhat do you think @xabbuh? \n. :+1:\nStatus: reviewed\n. What about using Container::hasDefinition() instead? \nStatus: needs work\n. Thank you @ruudk, fixed in #1275\n. Arf yeah that's a mistake, sorry... \nI just released 1.7.6.\n. IMO it should also be changed for createRedirect. \n. Would be better to target 1.8 instead of master. \n. Just rebase this one on 1.8, it will do the trick.\n. I created #1273. I thought I could merge your changes with the command lines but it didn't work...\nAnyway, thank you @rokkie.\n. There weren't many changes in 1.7.6 (see here).\nSo I don't think that this is linked to FOSRestBundle.\n. Status: Reviewed\n. Did you try to run composer update?\n1.8 doesn't support willdurand/negotiation 2.0 (see here)\n. Well IMO, if the status code is manually defined by the user, we should not override it.\n(that's your case)\nBut in the case that the status code is not specified, I think that we should override it if the response is empty.\n. Because we actually don't make any difference between this two cases.\nCould you create a PR on master? \n. Yeah, everything has been said in #1250 normally.\n. You're welcome \u263a\n. Sounds good :+1:\nStatus: Reviewed\n. :+1: see https://github.com/puli/manager/pull/9#discussion_r40499480\n. Status: Reviewed\n. :+1: \nStatus: Reviewed\n. Everything seems ready to me. Do you see anything else to change?\nStatus: Needs review\n. Should I use the same method used here to trigger a deprecation?\n. The bundle would trigger deprecations that couldn't be fixed so I don't really like that...\n. We always call this methods in the ViewHandler when we need to access the serializer, the router or the template engine.\nI think that I will use the reflection because in the case these methods are extended nothing will be triggered with your method (it seems that they are only there to be extended not to be called).\n. Done. \n@lsmith77 @xabbuh would be amazing to release 1.8 and 2.0 before the end of the year! We have almost finished.\n. It seems that we forgot a fix in 1.7... I'll fix it this afternoon. \n. Not in 1.7 @xabbuh\n. I released a new version including #1294, thank you @ibraelillo :-)\n. Seems good to me but I'm not really experimented in the Form component so would be better to have someone else review.\n. After all, this may be merged only in 2.1. It depends how fast we merge the remaining PRs.\n. :+1:\n. :+1: \n. I don't see how this can be related to FOSRestBundle which never update this attribute...\nCan you create a fork of symfony/symfony-standard to illustrate this issue please?\nAnd of course, happy new year! :smile:\n. You're welcome :-)\n. please change this to int|null.\n. Otherwise seems good to me :+1:\n. Awesome, thank you!\nStatus: Reviewed\nMaybe another review @lsmith77 @xabbuh ?\n. What about https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1299#discussion-diff-49263613?\nAnd @lsmith77, after all it may be easier to protect the branches but disable required checks.\n. I think we have to wait for it to be fixed :-/\nDid you run php-cs-fixer? If yes, we can just remove the required check and merge your PR\n. Can you show us the code of one of your controller concerned please?\n. And your full configuration\n. This bug is not related to 044f4e0, it's related to https://github.com/FriendsOfSymfony/FOSRestBundle/commit/b8f80f68273836336374ea717d36cfc56fd0ec7d.\nSince this commit, the ViewResponseListener no longer extends the TemplateListener and we forgot to re-enable it by default...\n. Can we have more informations please? It would be easier if we had your entire configuration and the stack trace of the error.\n. Are you sure that the error is not triggered in your template?\nYou can try to update the FOSRestBundle ExceptionListener to dump the exception here (we need to improve the logs of this controller BTW...).\n. You're welcome at least you're issue makes us remember that we have to improve the exception controller output. \n. Thank you @brunoroux! \nWe need a test case for this class... \n. Can you create a PR please?\n. I think that we can just add a link to the Listener documentation:\nrst\n:doc:`Mime Type Listener <3-listener-support>`.\n. This doc is outdated. In master the mime types must be added in the FOSRestBundle configuration. \nSee the documentation of the mime type listener.\n. In fact this link must be removed and we should advise to add the mime types thanks to the FOSRestBundle mime type listener.\n. :+1: for me\nStatus: Reviewed\n. Thank you @yceruto \u263a\n. Since #1171, the ViewResponseListener do not longer extends the TemplateListener. This was causing an issue because the TemplateListener converts _template to a TemplateReferenceInterface|string.\nThis PR fixes this bug by alloying to use the TemplateListener with the ViewResponseListener and by doing the transformation internally when _view is used.\n. I'm not sure that we need this classes:\nIMO these annotations are shortcuts and should only be available for the most common http verbs. \n. Then I'm ok with it too \ud83d\ude09\n. Can you fix the tests?\n. Ok no problem \ud83d\ude09\n. Where do you see  bc breaks? \n. ah yeah ok a solution would be to support both http methods for LOCK\n. Yeah, this is a known issue unfortunately :-/\nWould be great to find a solution...\n. Yeah but this would mean having to define them for every routes except if we keep the current behaviour when there is no annotation.\n. Then :+1:, feel free to create a PR :-)\nOtherwise I'll implement it but it may not be soon...\n. Not necessarily this is bc compatible @lsmith77\n. Not necessarily this is bc compatible @lsmith77\n. @cve ParamConverter aren't detected automatically by the router so you have to define this route manually.\n. @cve ParamConverter aren't detected automatically by the router so you have to define this route manually.\n. Indeed thank you @egeloen :smiley: \nI'm just waiting for the travis build to pass... (there is an incident)\n. If it's backward compatible, you should target 1.8 ;-)\n. Seems good to me :+1: I'll review it again tomorrow when I'll be more awake.\n. @blazarecki that's not the same thing, we're talking about converting '1', 'true', ... to true in symfony forms.\n. Otherwise seems good to me but I don't know very well the Form component.\n. @shakaran did you clean your cache? If yes, do you have a service extending fos_rest.decoder_provider or using FOS\\RestBundle\\Decoder\\ContainerDecoderProvider? \n. It don't seem to be related to FOSRestBundle... \nAny idea @xabbuh ?\n. It don't seem to be related to FOSRestBundle... \nAny idea @xabbuh ?\n. ping @shakaran \n. Sorry i'll review your PR during the week I don't have enough time for now. \n. Sorry i'll review your PR during the week I don't have enough time for now. \n. Otherwise good for me :+1: \n. Otherwise good for me :+1: \n. @xabbuh you can see his previous pull request https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1309\n. @xabbuh you can see his previous pull request https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1309\n. For me the rest is ok :+1: \n. @Ma27 We can introduce this new methods in 1.8 except COPY and LOCK which break BC.\n. ping\n. Seems good to me :+1:\nStatus: reviewed\n. I think that we should refactor this function to use is_sublass_of which is normally faster than reflections. \n. I think that we should refactor this function to use is_sublass_of which is normally faster than reflections. \n. Or http://php.net/manual/en/function.is-a.php with allow string as true. \n. Or http://php.net/manual/en/function.is-a.php with allow string as true. \n. Done @lsmith77 :smiley: \n. Done @lsmith77 :smiley: \n. I fixed the tests\n. Hum didn't see that from this point of view... \nI think we can already merge it that would allow people to migrate to FOSRestBundle 2.0 easily and if it is ever reverted we can just revert this changes too. \n. @lsmith77 @xabbuh what do you think about using a hack with \\ReflectionClass::getStaticProperties() for sf < 3.1 to access Request::$formats ?\n. @lsmith77 @xabbuh is this ok for you ? It would be easier for people to migrate to FOSRestBundle with this patch.\n. ping\n. Relates to https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1318\n. Relates to https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1318\n. I think there is another error in this pr sorry I didn't mention it :x\n. I think there is another error in this pr sorry I didn't mention it :x\n. I'll check it in a few hours. \n. I'll check it in a few hours. \n. @xabbuh @lsmith77 do you see anything else to change/add?\n. @xabbuh @lsmith77 do you see anything else to change/add?\n. Is it ok for you?\n. Cool thank you :-)\n(My implementation of carsonbot seems to be down, i'll investigate...)\n. This behavior is linked to PHP not to FOSRestBundle.\nPHP fills $_FILES only when using POST. And this variable is used internally by symfony...\nSee the php doc.\n. Did I miss something?\n. Did you run git fetch before? \n. Yeah that happens some time I don't why... \nDid you base your new branch on your local branch 1.8 or on the fosrest one? \n. I removed them because we decided to take a different approach (the Serializer interface). \n. Hum that's strange... Moreover one of them has been committed by me. \nThat's possible that I rebased my branch too fast and that I changed some commits hash... \n. \nAnyway as you can see on this screenshot some commits weren't merged in master by your PR. \n. No idea ^_^ and unrelated by I won't be at home this week so if you review this feel free to merge it \ud83d\ude09\nOtherwise I'll review it deeper next week. \n. Hum this explains some things \ud83d\ude1d\n. Can you create a pr fixing this issue please? (just remove the final state) \n. @robhunt3r it's the correct fix if we want to let this services lazy and I think there is no enough advantages to let them final instead. \n. Fixed in #1334 \n. Wrong branch... \n. Please also update the symfony adapter \n. :+1: just needs @lsmith77 to remove the required statuses. \n. Yeah but this may happen again... And I can't merge 1.7 in 1.8 without a computer :x\n. Ah yeah sorry the build failure is clearly unrelated to that change \n. Please rebase on 1.8\n. Ah I just see that you targeted master. Then you have to run git rebase upstream/1.8 -i and to remove all the commits that aren't yours. And then you will have to create a new pull request and to target 1.8.\n. Fixed in #1334 \n. @lsmith77 can you remove the required checks please? We can't merge small changes like this one easily :-/\n. @xabbuh @lsmith77 I need your help to merge 1.7 into 1.8 and master :x\n. @xabbuh yeah it's just that I can't merge branches on my phone :x\n. Thank you @xabbuh \u263a\n. Thank you @xabbuh\n. This doesn't seem to be related to FOSRestBundle \n. Thank you @rokkie \n. I can't do it this week, so except if @xabbuh or @lsmith77 do it, not before next week. \n. You can't merge this because of the required statuses :x\n. @hacfi we have to create a new pr based on master :x\nIf you want to do it that would be really helpful \u263a\n. You just have to run git checkout -b merge1.8 upstream/master & git merge upstream/1.8 normally \ud83d\ude09\n. Thank you @hacfi :smile: \n. I think that's confusing if they aren't supported by the router. \n. I think that's confusing if they aren't supported by the router. \n. No only for lock \n. No only for lock \n. What do you mean @xabbuh ? I didn't understand your sentence :x\n. What do you mean @xabbuh ? I didn't understand your sentence :x\n. Ah ok fine for me @xabbuh  :+1: \n. Good catch :+1: Which version of FOSRestBundle are you using?\n. Ok in fact, that's fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1317, we just need to merge it\n. I'll work on a patch to have less BC breaks between FOSRestBundle 1.8 and 2.0 on the mime types ;-)\n. Fixed in #1317 \n. :+1:\nStatus: Reviewed\n. It already is. \n. That's weird to have a Content-Type with an empty response, this is probably why symfony removes this header.\n. IMO we should update all our listeners to kernel subscribers. \nIf you can submit a pull request that would be helpful :-)\n. Fixed in #1348\n. After all I'm not sure this fixes https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1237 but anyway I think it's better to execute our param converter after the others as it is less restrictive (its supports function doesn't check anything).\nI think we should look at https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1237#issuecomment-160698182 instead for fixing #1237 but this won't be a BC break so we can do it later.\n. @lsmith77 I fixed #1237 by not throwing exceptions when a parameter is optional.\n. @xabbuh I added a commit with your suggestions.\n. @xabbuh The issue in #1237 is that the RequestBodyParamConverter tries to create a Logger instance for this controller. \nThis behavior is normal because the logger attribute is not present in the Request attributes as it is optional.\nBut the issue is that the RequestBodyParamConverter can't create a Logger instance from the Request content so it throws an error.\nThis PR fixes this by not throwing errors when a parameter is optional.\n. @lsmith77 @xabbuh is this new behavior ok for you ?\n. No, this is a bc break not applicable to 1.8.\n. @xabbuh @lsmith77 I updated UPGRADING.md and I added a comment in RequestBodyParamConverterTest to explain why TwigBundle returns a 200 status.\nThis PR is ready for me and https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1317 too. Do you see anything else to change before merging them and releasing 1.8/2.0 ?\n. This is included in 2.0.0-BETA1 but we don't know when we will release it as stable as it depends if we have feedbacks or not. \n. This is included in 2.0.0-BETA1 but we don't know when we will release it as stable as it depends if we have feedbacks or not. \n. Status: reviewed\n. Thank you @xabbuh \n. Ah right, I completely forgot this :+1: \n. Status: Reviewed\n:+1: \n. @xabbuh it doesn't seem to work see https://travis-ci.org/FriendsOfSymfony/FOSRestBundle/jobs/109469333\n. Status: reviewed\n:+1: \n. It is not an error, see this comment.\n. Can you take a look at this and tell me if this is enough to solve your issue please ?\n. @wesleyvicthor ok thanks, I'll wait for more feedbacks and maybe this will be included in 2.0 \u263a\n. Thanks for the report, I'll take a look at it this afternoon. \n. https://github.com/sensiolabs/SensioFrameworkExtraBundle/commit/82b8ad65409c99f693088ecbc09c857f01e3b3fa removed many request attributes so we can't use them anymore ...\nWe have to refactor the ViewResponseListener to work again.\n@lsmith77 @xabbuh I think we should mark SensioFrameworkExtraBundle > 3.0.13 as not supported in 1.7/1.8 and fix its support in 2.0 to not have too much work to do.\n. I agree but SensioFrameworkExtraBundle introduced a big bc break in a patch... \n. @xabbuh just take a look at https://github.com/sensiolabs/SensioFrameworkExtraBundle/commit/82b8ad65409c99f693088ecbc09c857f01e3b3fa and all the request attributes no longer available. \n. @blamonet many parts of the ViewResponseListener are broken with SensioFrameworkExtraBundle 3.0.13 so I advise to use the version 3.0.12 until we fix this issue. \nOtherwise, you may have a weird behavior without knowing it. \n. @iltar I opened https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1355\n. @stof @xabbuh @lsmith77  can you take a look at https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1355 and #1362 please?\n. BTW @lsmith77 why does the AccessDeniedListener extend the twig ExceptionListener ?\nIt could only change the event exception and let the other listeners configured render the response right ?\n. https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1363 should fix your issue\n. Fixed by #1363 (master branch).\n. Well IMO we should not keep this wrapper and instead let the serializer normalizes the data.\n@lsmith77 Why was this created in first place ? \n. Yeah but serializing an array would be the same. \nBTW it would be clearly more powerful to serialize exceptions instead of only strings representing them (we would be able to have complex responses based on the exception fields). \n. Yeah you're right didn't see that from this point of view.\nWell you can rely on this array in 1.7/1.8 but this might change in 2.0 (not sure at all because we want to release it soon...).\nFor your initial issue you can customize our services as you want (see the symfony doc)\n. At worst if you really want to have two different behaviors you can check if the errors field is empty (exception controller) or not (view handler) in your exception wrapper. \nI think the comment was there for when this bundle only supported the jms serializer to advise that the exception wrapper is useless when using deserialization. \n. Would this be better for your use case ?\n. @xabbuh the removing of the ExceptionWrapper will impact many people but of course we can include that in 2.1 with deprecations. \n. @Abam This PR is marked as \"Work in progress\" so it's just an example of implementation and I didn't fixed the implementation details yet.\n. @Abam I overwritted the exception listener to pass the raw exception to the controller ;-)\n. This PR is almost finished. \nI just have to finish to fix the tests; if someone has an idea why they fail, it would be helpful \u263a\n. Only one error remaining !\n. @lsmith77 should be fixed now :-)\nBTW if we could merge this in 2.0 it would be much easier for me (there are many bc breaks in it).\n. Well let's say if I finish it today we merge it in 2.0 ? Otherwise let's just release 1.8/2.0, I think we have waited enough ^_^\n. And I found why the tests fail. Symfony have a weird behaviour when serializing in XML an object implementing \\Traversable (see here): it doesn't even consider the possibility of normalizing it.\nI'll create an issue to see if this can be considered as a bug.\nEdit: The last commit fixes the tests :-)\nEdit 2: I opened symfony/symfony#17984 and schmittjoh/serializer#556 but we don't need to be looking for their merge to merge this.\n. @lsmith77 @xabbuh Sorry to disturb you again (I'd like to do as many things as possible before we release 2.0), but this PR is ready for me so I would like to know if you agree with this points to know if I can merge it:\n- removing the option exception_fallback_format in favor of matching request attributes\n- overriding the jms HandlerRegistry until https://github.com/schmittjoh/serializer/pull/556 is merged\n- Transform the FormInterface in a FormWrapper until https://github.com/symfony/symfony/pull/17984 is merged\n- Overriding the default ExceptionListener to pass the raw exception to the controller\n. @peshi I'm not really good at writing docs :x\nMoreover this feature is specific to the serializer used so this is complicated to write a generic documentation. But if you are motivated, feel free to open a PR :-)\n. @peshi I'm not really good at writing docs :x\nMoreover this feature is specific to the serializer used so this is complicated to write a generic documentation. But if you are motivated, feel free to open a PR :-)\n. Well FOSRestBundle doesn't have to be configured to use your custom normalizer, it depends on the serializer you use (if you use the symfony serializer, that's really easy: How to add normalizers to your app ; How to create a normalizer).\nThe best solution might be to add links to the documentation of the serializers we support.\n. Well FOSRestBundle doesn't have to be configured to use your custom normalizer, it depends on the serializer you use (if you use the symfony serializer, that's really easy: How to add normalizers to your app ; How to create a normalizer).\nThe best solution might be to add links to the documentation of the serializers we support.\n. @Maxooo if you use the symfony serializer, you can take a look at the UPGRADING-2.0.md file. It is explaining how to create a symfony normalizer dedicated to an exception.\nIf you're using the jms serializer (i advise you to migrate to the symfony serializer as it is not updated frequently), you have to create an handler targetting the exception you want.\nIt would indeed be better to explain that in the docs but I didn't have the time to do that yet...\nAbout fost_rest.exception.enabled it is enabling the FOSRestBundle exception controller. And I agree, we should add more comments in the configuration reference section.\n. @Maxooo if you override the ExceptionController, you'll end up changing everything as the serialization part is managed by the ViewHandler.\nThe easiest solution imo is to create a jms handler.\n. Merged in a4f890c7ebdf6f51d7b9c28fac22229e575f862f.\nThank you !\n. Looks good to me :+1: \nStatus: Reviewed\n. Could you create a PR containing a test reproducing your issue or a fork of symfony/standard-edition please?\n. @merk it would need a lot of logic to support both SensioFrameworkExtraBundle 2.0 and 3.0, so except if someone wants to create a PR to backport the fix to 1.8, people have to upgrade to 2.0.\n. @merk it would need a lot of logic to support both SensioFrameworkExtraBundle 2.0 and 3.0, so except if someone wants to create a PR to backport the fix to 1.8, people have to upgrade to 2.0.\n. @xabbuh no that won't be possible unless we refactor the ViewResponseListener in 1.*.\n. @xabbuh no that won't be possible unless we refactor the ViewResponseListener in 1.*.\n. @lsmith77 updated\n. Thank you @jbenezech !\n. Thank you @enekochan \n. @lsmith77 that's because of the required statuses which require PRs to always be sync with the targeted branch.\nOtherwise seems good to me :+1: \n. Should be fixed by https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1369 thank you :-)\n. You can launch your functional tests as if they were in a prod environment so I'm :-1: on this \n. As there is not a lot of use cases, I'm wondering if it wouldn't be easier to have a container parameter aliasing kernel.debug.\n. Except my messages fine for me :+1: \n. Thank you @munkie :-)\n@xabbuh can you merge this in the 1.8 branch please?\n. Thank you @munkie :-)\n@xabbuh can you merge this in the 1.8 branch please?\n. @xabbuh I don't think so but 1.8 is still in beta so shouldn't we merge this PR in it ?\n. @xabbuh I don't think so but 1.8 is still in beta so shouldn't we merge this PR in it ?\n. @xabbuh I created a 2.0 branch so let's just merge this in master.\nThank you again @munkie \n. @xabbuh I created a 2.0 branch so let's just merge this in master.\nThank you again @munkie \n. No @lsmith77 this is on 2.0.0-BETA1 \n. No @lsmith77 this is on 2.0.0-BETA1 \n. Fix in #1374 thank you !\n. Fix in #1374 thank you !\n. Seems really good :+1: \n. Seems really good :+1: \n. should be rebased on master\n. should be rebased on master\n. Yeah it certainly don't affect people and it would be easier to respect bc \n. Yeah it certainly don't affect people and it would be easier to respect bc \n. Status: Reviewed\n@lsmith77 what do you think about removing the required statuses ? It's really annoying to have to rebase a PR each time another one is merged :-/ \n. Status: Reviewed\n@lsmith77 what do you think about removing the required statuses ? It's really annoying to have to rebase a PR each time another one is merged :-/ \n. @lsmith77 right here yeah but the other rebase were needed by github, nothing related to git.\nAnyway we still can't resolve the conflicts manually as we can't push to the master branch without creating a PR.\n(BTW removing the required statuses doesn't mean removing the protection against force pushing)\n. Merged in #1380 thank you @munkie \n. @lsmith77 should I release the 2.0.0-BETA2 to include this fix ?\n(BTW we should add a test for the twig exception controller)\n. @lsmith77 should I release the 2.0.0-BETA2 to include this fix ?\n(BTW we should add a test for the twig exception controller)\n. We should really test this class... and I should look a bit more my PR before merging it...\nThank you, I'll search how to fix it :-)\n. We should really test this class... and I should look a bit more my PR before merging it...\nThank you, I'll search how to fix it :-)\n. Can you take a look at https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1376 please?\n. Can you take a look at https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1376 please?\n. The short syntax is not supported yet, you have to use the full directory path. \n. The short syntax is not supported yet, you have to use the full directory path. \n. The right syntax should be %kernel.root_dir%/../src/AppBundle/Controller.\nIt wouldn't be so hard to support the short syntax but I think we have to focus on the bugs of the 2.0 before introducing new features.\nAnd in fact, this is not a bug, the syntax you use is not supported for the directories so another route loader (the RestRouteLoader which normally loads classes) tries to load your routes but fail.\nWe can probably add a new check in it to be sure that the controller that it tries to load is supported and to have a better error message.\n. The right syntax should be %kernel.root_dir%/../src/AppBundle/Controller.\nIt wouldn't be so hard to support the short syntax but I think we have to focus on the bugs of the 2.0 before introducing new features.\nAnd in fact, this is not a bug, the syntax you use is not supported for the directories so another route loader (the RestRouteLoader which normally loads classes) tries to load your routes but fail.\nWe can probably add a new check in it to be sure that the controller that it tries to load is supported and to have a better error message.\n. Then do you want to add the support of the short syntax in the 2.0 ?\n. This should work...\nDid you disable the SensioFrameworkBundle @Template annotation ?\n. Yeah you have to enable it. I think we should throw an exception when it isn't the case...\n. @sloba88 it has to be disabled on 1.* and enabled on 2.0\n. @AlbertSabate this commit replaces the ExceptionHandler by normalizers so it do not longer exist.\nSee https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1358\n. As said in the documentation you can have examples in our code https://github.com/FriendsOfSymfony/FOSRestBundle/tree/master/Serializer/Normalizer. \n. Did you disable the SensioExtraFrameworkBundle @Template annotation ?\nIf yes, you have to enable it.\n. Just to inform you, you're doing the opposite of what you want, you disable @Template and enable @Route.\n. @vlyagusha the solution is the same you have to enable the SensioFrameworkExtraBundle view annotations. \n. @vlyagusha this is an issue we didn't fix yet, see https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1395.\n. @vlyagusha you have to specify your controller manually until we provide a fix.\nI'll take a look at it this afternoon.\n. Yeah 1.* still works I thought you were using 2.0 for its new features so I didn't advise you to use it. \nAnyway, I opened https://github.com/sensiolabs/SensioFrameworkExtraBundle/pull/409 which fixes this issue. \n. @lsmith77 done.\n. You're not in the right bundle. Post your issue in FOSCommentBundle.\n. Status: Reviewed\n:+1: \n. Thank you for the report, added to our todo list :-)\n. Fixed by https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1438\n. Thank you @superhaggis \n. This syntax looks harder to read to me ... Is there any gain to use the locator?\n. @chalasr yeah you're probably right...\nWhat do you think @lsmith77 @xabbuh ?\n. I guess we can close this ?\n. @NadaBen could you answer this questions too please?\n\nWhich version of FOSRestBundle do you use? Did you try to use your own serializer?\n. Why don't you let the framework bundle configure symfony the serializer? \nYou would be able then to use the serializer tags to set normalizers and encoders and FOSRestBundle would configure it automatically. \n. Why don't you let the framework bundle configure symfony the serializer? \nYou would be able then to use the serializer tags to set normalizers and encoders and FOSRestBundle would configure it automatically. \n. Well you can use the framework bundle tags instead of having your own serializer service:\n\n``` yml\nconfig.yml\nframework:\n    serializer: true\n```\n``` yml\nservices.yml\nservices:\n    api.normalizer.competition:\n        tags:\n            - { name: serializer.normalizer }\n# ...\n\napi.encoder.json:\n    tags:\n        - { name: serializer.encoder }\n\n```\n. Well you can use the framework bundle tags instead of having your own serializer service:\n``` yml\nconfig.yml\nframework:\n    serializer: true\n```\n``` yml\nservices.yml\nservices:\n    api.normalizer.competition:\n        tags:\n            - { name: serializer.normalizer }\n# ...\n\napi.encoder.json:\n    tags:\n        - { name: serializer.encoder }\n\n```\n. I guess we can close this issue ?\n. Well I think that's a problem but it doesn't seem to be related to FOSRestBundle which doesn't contain any logic about serializing. Except if I misunderstood your problem ?\n. @Alex-D I think the best solution to solve your problem is to ask the question on stack overflow (the jms serializer repository isn't too much active...).\nI do not know the JMS serializer very well so I can't help you...\n. :+1: I think we can safely add this as a bug fix\n. Status: Reviewed\nI was pretty sure that I already added it but apparently not... :+1: \n. Status: Reviewed\nI was pretty sure that I already added it but apparently not... :+1: \n. I see nothing else to change :+1: \n. I see nothing else to change :+1: \n. Status: reviewed\nWe have to do something here ... but submitting a PR to SensioExtraFrameworkBundle should be better than copy-pasting more logic in FOSRestBundle...\n. Status: reviewed\nWe have to do something here ... but submitting a PR to SensioExtraFrameworkBundle should be better than copy-pasting more logic in FOSRestBundle...\n. I opened https://github.com/sensiolabs/SensioFrameworkExtraBundle/pull/409\n. Fixed in https://github.com/sensiolabs/SensioFrameworkExtraBundle/pull/409. Will be completely fixed as soon as they release a new patch version.\n. Fixed in https://github.com/sensiolabs/SensioFrameworkExtraBundle/pull/409. Will be completely fixed as soon as they release a new patch version.\n. If you want to upgrade SensioFrameworkExtraBundle you have to use the master branch of the FOSRestBundle. \nYou can also remove your vendor folder and run composer again. \n. If you want to upgrade SensioFrameworkExtraBundle you have to use the master branch of the FOSRestBundle. \nYou can also remove your vendor folder and run composer again. \n. Thank you @xabbuh :+1:\n. Thank you @xabbuh :+1:\n. Hum there are apparently 2 bugs in cause. \nThe first one is in FOSRestBundle and is fixed by #1400 but the second one is caused by the symfony Request which removes all the parameters from the mime types (see here).\nSo until a fix is applied on symfony you have to use this in your config:\nyml\nmime_types:\n    json: ['application/vnd.foo.api+json;version=3', 'application/vnd.foo.api+json']\n. See https://github.com/symfony/symfony/pull/18255\n. @araines thank you for your report, we need people like you to tell us when a feature breaks and we don't catch it :-)\nhttps://github.com/symfony/symfony/pull/18255 doesn't contain major changes so I think it will be merged quickly.\n. Fixed in https://github.com/symfony/symfony/pull/18255, you'll be able to use this fix as soon as patch versions are released ;-)\n. Fixed in https://github.com/symfony/symfony/pull/18255, you'll be able to use this fix as soon as patch versions are released ;-)\n. @xabbuh thank you, I forgot this PR...\n. @xabbuh thank you, I forgot this PR...\n. Did you try the body listener ?\nAnd we would more informations about your controller to understand your issue (its code, maybe its routing, ...).\n. $updatedServer is type hinted as Server so it probably isn't a json string...\n. I guess this was forgotten, WDYT @lsmith77 ?\n. Fixed in #1406\n. Fixed in #1406\n. @Soullivaneuh isn't this related to the jms serializer?\n. @Soullivaneuh sorry I can't help you, I prefer using the symfony serializer :-/\nAnd I do not use the body converter too much too...\nMaybe asking on stack overflow would help you?\n. @Soullivaneuh sorry I can't help you, I prefer using the symfony serializer :-/\nAnd I do not use the body converter too much too...\nMaybe asking on stack overflow would help you?\n. What is the exact error you have ? I didn't find what throws an error here.\n. What is the exact error you have ? I didn't find what throws an error here.\n. Thanks for your detailed answer. Wouldn't it be better to use the following then? \nphp\nnew All(array('constraints' => $constraints));\n. Thanks for your detailed answer. Wouldn't it be better to use the following then? \nphp\nnew All(array('constraints' => $constraints));\n. Sorry, I forgot your PR for a while... thank you @mikelinington :-)\n. Sorry, I forgot your PR for a while... thank you @mikelinington :-)\n. @xabbuh I forgot again to merge this into 2.0 instead of master... any idea how to backport it ? :/\n. @xabbuh I forgot again to merge this into 2.0 instead of master... any idea how to backport it ? :/\n. @xabbuh no the ParamFetcher was refactored in 2.0.\n. @xabbuh no the ParamFetcher was refactored in 2.0.\n. Thank you @jovobe \n. Thank you @jovobe \n. Thank you @e-moe !\n. Thank you @e-moe !\n. I'm not convinced that this is useful as the value of this constants will never change and is very intuitive.\n. I'm not convinced that this is useful as the value of this constants will never change and is very intuitive.\n. @ihsanudin in what would this help you? do you have any real examples?\nI'm just asking to help us take a decision.\n. @ihsanudin in what would this help you? do you have any real examples?\nI'm just asking to help us take a decision.\n. Then I guess we can close this.\nThank you for your contribution anyway @ihsanudin :-)\n. Then I guess we can close this.\nThank you for your contribution anyway @ihsanudin :-)\n. Do we really need this, isn't it better to rely on listeners priority? \n. Do we really need this, isn't it better to rely on listeners priority? \n. @xabbuh do you want to me to open a PR as I apparently forgot several changes ?\nmost of the doc introduced in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/908/files is irrelevant now (it isn't possible anymore to use the twig config to enable the FOSRestBundle exception listener).\n. @xabbuh do you want to me to open a PR as I apparently forgot several changes ?\nmost of the doc introduced in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/908/files is irrelevant now (it isn't possible anymore to use the twig config to enable the FOSRestBundle exception listener).\n. LGTM :+1:\nStatus: Reviewed\n. LGTM :+1:\nStatus: Reviewed\n. @xabbuh fine for me \u263a\n. @xabbuh fine for me \u263a\n. Updated @xabbuh \n. Updated @xabbuh \n. Thanks for the report, but I do not use much this listener.\nCould you provide more details please? like checking if the listener is registered/executed on sf 3.1 and if you can detect where the problem is located?\nOr if you prefer, can you fork the symfony standard edition and reproduce your issue in it to help us debug ?\n. Thanks for the report, but I do not use much this listener.\nCould you provide more details please? like checking if the listener is registered/executed on sf 3.1 and if you can detect where the problem is located?\nOr if you prefer, can you fork the symfony standard edition and reproduce your issue in it to help us debug ?\n. Nice, I didn't have the time yet to take a deep look at your issue.\nIf you prefer, you can only describe where the issue is located.\n. Nice, I didn't have the time yet to take a deep look at your issue.\nIf you prefer, you can only describe where the issue is located.\n. Actually I don't think that's the right fix, which version of FOSRestBundle do you use ?\n. Actually I don't think that's the right fix, which version of FOSRestBundle do you use ?\n. Yeah but it triggers deprecations, I'll open a PR ;-)\n. Yeah but it triggers deprecations, I'll open a PR ;-)\n. I opened #1419\n. Thank you @eugenegp \n. Thank you @eugenegp \n. @NadaBen this is not really an issue with FOSRestBundle, the best would be to ask on StackOverflow (to share the solutions with others).\nAnyway, FOSRestBundle doesn't allow to use either query parameters or request parameters so I think the best solution here is to create your own annotation extending ours:\n``` php\nnamespace AppBundle\\Annotations;\nuse FOS\\RestBundle\\Controller\\Annotations\\AbstractScalarParam;\nuse Symfony\\Component\\HttpFoundation\\Request;\n/\n * @Annotation\n * @Target({\"CLASS\", \"METHOD\"})\n */\nclass CustomParameter extends AbstractScalarParam {\n    /\n     * {@inheritdoc}\n     */\n    public function getValue(Request $request, $default = null)\n    {\n        return $request->request->has($this->getKey())\n            ? $request->request->get($this->getKey(), $default)\n            : $request->query->get($this->getKey(), $default);\n     }\n}\n```\nThen you'll be able to use this annotation in your controller to fetch either from query parameters or request parameters:\n``` php\nuse AppBundle\\Annotations\\CustomParameter;\n/**\n * @CustomParameter(name=\"username\", nullable=false, strict=true, description=\"Username.\")\n */\npublic function postUserAction(ParamFetcher $paramFetcher)\n{\n\n    $userManager = $this->container->get('fos_user.user_manager');\n\n    $user = $userManager->createUser();\n    $user->setUsername($paramFetcher->get('username'));\n}\n\n```\nNote that this solution only works with FOSRestBundle 2.0, I don't see any solution for 1.*.\n. @NadaBen this is not really an issue with FOSRestBundle, the best would be to ask on StackOverflow (to share the solutions with others).\nAnyway, FOSRestBundle doesn't allow to use either query parameters or request parameters so I think the best solution here is to create your own annotation extending ours:\n``` php\nnamespace AppBundle\\Annotations;\nuse FOS\\RestBundle\\Controller\\Annotations\\AbstractScalarParam;\nuse Symfony\\Component\\HttpFoundation\\Request;\n/\n * @Annotation\n * @Target({\"CLASS\", \"METHOD\"})\n */\nclass CustomParameter extends AbstractScalarParam {\n    /\n     * {@inheritdoc}\n     */\n    public function getValue(Request $request, $default = null)\n    {\n        return $request->request->has($this->getKey())\n            ? $request->request->get($this->getKey(), $default)\n            : $request->query->get($this->getKey(), $default);\n     }\n}\n```\nThen you'll be able to use this annotation in your controller to fetch either from query parameters or request parameters:\n``` php\nuse AppBundle\\Annotations\\CustomParameter;\n/**\n * @CustomParameter(name=\"username\", nullable=false, strict=true, description=\"Username.\")\n */\npublic function postUserAction(ParamFetcher $paramFetcher)\n{\n\n    $userManager = $this->container->get('fos_user.user_manager');\n\n    $user = $userManager->createUser();\n    $user->setUsername($paramFetcher->get('username'));\n}\n\n```\nNote that this solution only works with FOSRestBundle 2.0, I don't see any solution for 1.*.\n. Answered in https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1428\n. @xabbuh you're welcome \u263a \ni'll try to fix this this week, otherwise it will have to wait a bit (i won't be there next week) \nI don't know if this is really complicated to do, maybe fixing conflicts will be enough. \n. Great, thank you @xabbuh \n. Thank you @xabbuh \u263a\n. Thank you @tarjei \n. Another solution is to use\nphp\n$view->getContext()\n    ->addGroup('some-group');\nI'm not against this, but I don't know if we still need setContext  as now the Context class is final.\n. I guess that's because we don't know if your default value was manually set or not (null is the default value of php).\n. I agree. WDYT @lsmith77 @xabbuh  ?\n. @xabbuh in fact it was introduced by @Seldaek here.\n. @xabbuh Apparently the reason was bc (see this comment) so we can safely change it.\n. I think we should improve our UPGRADING file to describe how to update an existing codebase.\nOur new Context class is not exactly the same as the JMS' one because some methods have unconsistent names such as enableMaxDepthExclusionStrategy, this probably makes sense when we look at the jms serializer internals but for an abstraction class it should not be named that way imo.\nFor Codes, FOSRestBundle 2.0 doesn't support sf < 2.7, so there is normally no problem and the only thing to do is to use the Response instead (the name of the constants are the same).\nTo maintain a generic bundle, I think the best solution is to use directly status codes (without constants) or at worst to copy-paste the class as @internal and remove it once symfony 2.3 is not supported anymore.\n. Thank you @tarjei !\n. This doesn't work in FOSRestBundle 1.7, you have to use FOSRestBundle 2.0 which created the method ParamInterface::getValue().\nBTW the class Param doesn't exist in 2.0, you have to use AbstractScalarParam.\n. This branch is not supported anymore\n. Thank you @filimongeorge \n. Merged in https://github.com/FriendsOfSymfony/FOSRestBundle/commit/6e083f13c495f867a154098bf2d37c4ae8b0db13\n. Fixed in #1446 \n. Yeah FOSRestBundle supports symfony 3 since it's 1.7 version. \n. Fixed by https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1438\n. Closed in favor of https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1438\n. LGTM :+1:\n. LGTM :+1: \n. Thank you @dmaicher \n. You're right @xabbuh, i'll open a pr\n. @xabbuh I remember why I didn't do it, this is based on https://github.com/FriendsOfSymfony/FOSRestBundle/commit/05330bab029201c6a976da392f46a59ccb7d58b5 so it needs some modifications to be integrated in 1.8.\n. see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1456\n. @xabbuh yes it would but I think it's a bad practice to run tests in normal mode.\n. https://github.com/symfony/symfony/pull/18630 was merged so we do not need this anymore.\n. Indeed this should be changed :+1: \n. Fixed in #1445 \n. Weren't there any conflicts? \n. Status: reviewed\n:+1: \n. :+1: but the tests fail. \n. LGTM :+1:\n. ping\n. Except my last comments, ready for me :+1: \n. I'm :-1: for this PR as it targets docs but the others are relevant ;-)\n. BTW, maybe we should also remove the type hint on this method\n. @xabbuh yeah but the 2.0 is still in beta and I think it's something we should do now as php7 will become more and more used and we could have issues related to this in the future.\n. Status: reviewed\nLGTM :+1:\n. #1473 is merged so no need for this anymore :-)\nThank you @fprochazka \n. 1.7 is not really supported anymore... so i think this should only be applied on 1.8.\nWDYT @xabbuh @lsmith77 ?\n. fine for me then :+1: \n. Thank you @fprochazka \n. Why not, can you had tests to ensure this works as expected?\n. Fine for me @jorge07 :-) \nI think we should merge this in master (2.1) as 2.0 is now in beta.\n. :+1: should also be added to the symfony normalizer (won't work for jms anyway as it doesn't support interfaces for handlers)\n. In fact the symfony kernel doesn't support \\Throwable so that's a bit useless... (see https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/HttpKernel.php#L67)\n. No problem @xabbuh \u263a\n. This issue seems related to the JMS serializer not to this bundle.\n. We have our own Context class because we also support the symfony serializer so we needed to abstract the serializers we support.\nAnd I didn't understand your 2nd question... do you have an example ?\n. The maxDepth attribute enables the jms max depth checks, its value doesn't change anything (it does only for the symfony serializer).\nI guess you can only use the @MaxDepth annotation.\n. updated to change the styleci config instead\n. @stof they both only allow to enable max depth checks not to customize the max depth at runtime.\nTo customize the maximal depth, you can only edit your entities metadata.\n. This is not possible for now but it could be a great improvement :+1: \n. The /api prefix is managed by symfony. Do you load your routes elsewhere ?\n. @JHGitty did you enable the view_response_listener ?\nWith it, you can simply use:\nphp\n    /**\n     * @Rest\\Get(\"/api/category/{name}.{_format}\", name=\"api_category\", options={\"method_prefix\": false}, defaults={\"_format\": \"json\"})\n     * @Rest\\View()\n     */\n    public function getCategoryAction($name)\n    {\n        return 'test';\n    }\n. can you provide your form as well please?\n. @JHGitty it looks normal to me, the error you specify is related to the entire form (there are more fields than expected), not to the name field.\n. What's the exception thrown ?\n. Is your config used in the prod environment or only in the dev env ?\nAnd can you try to debug the bundle extension to check if the configuration is as you expect it in your prod env?\n. Could you reproduce your issue in a fork of https://github.com/gimler/symfony-rest-edition please ? For now I have no idea what's the problem here ... :/\n. maybe try to clear the cache ?\n. no idea but that shouldn't be the problem here. I think this a problem of configuration, maybe you forgot to load a config file ?\n. LGTM now :+1:\n. @Soullivaneuh the solution to your problem would be to create your own autoloader:\nphp\n// vendor/.../autoload.php\n$loader = new \\Composer\\Autoload\\ClassLoader();\n$loader->add('SLLH\\StyleCIBridge', __DIR__);\n$loader->register();\n``` php\n// .php_cs\nrequire('vendor/.../autoload.php');\n//...\n```\nBut I'm wondering if we really need your bridge for this bundle as we use the default configuration of php-cs-fixer anyway...\n. @Soullivaneuh in fact we disabled braces to have the same behaviour than php-cs-fixer. WDYT @xabbuh @lsmith77 ?\n. I think we should close this. In the current state, it is very likely to create conflicts between libraries and the php-cs-fixer api is good enough to be managed by hand imo.\n. I'm closing this as we're back to the standard classes.\n. Indeed, we forgot this in our UPGRADING file... Thanks !\n. done in https://github.com/FriendsOfSymfony/FOSRestBundle/commit/183989449865836c08347f8e0e54e1f3aa9c45f0, thanks !\n. Your ExceptionWrapperHandler is supposed to return an instance of ExceptionWrapper.\nAnyway I advise you to upgrade to 2.0 to be able to use serializer normalizers instead.\n. Thank you @gimler !\n. Fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1568, thanks for the report !\n. This should work as expected. \nAt first, you must uncomment the line prefix. And do you load this controller somewhere else ?\n. In fact, you don't need the versioning feature of this bundle if you only use a path parameter.\nWhat do you mean by not working ? You can't access your  controller ?\n. Can you try finding the corresponding route with bin/console debug:router ?\n. Fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1937 \ud83c\udf89. Tests fixed :)\n. Do we still support the 1.7 branch ?\n. @xabbuh is that ok now if i merge this pr in 1.8 ? :)\n. @xabbuh is that ok now if i merge this pr in 1.8 ? :)\n. Thanks to you \ud83d\ude09\n. Thanks to you \ud83d\ude09\n. Thank you @daifabde \n. This is not a bug, the 1.x releases of fosrestbundle aren't compatible with sensioframeworkextrabundle 3.0.13 and higher.\nTo upgrade the sensio bundle, you must upgrade fosrestbundle to 2.0.\n. Should be merged in 1.8 i guess ? \ud83d\udc4d \n. Everything's ok, i'm just not near a computer to merge this for now \ud83d\ude09\n. We should probably move $map from AbstractScalarParam to AbstractParam.\nThis would need a new test to ensure this works as expected. Can you work on that @muffe ?\n. We should probably move $map from AbstractScalarParam to AbstractParam.\nThis would need a new test to ensure this works as expected. Can you work on that @muffe ?\n. Fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1474\n. What about using a new attribute exclusion_strategies ?\ncc @xabbuh \n. What about using a new attribute exclusion_strategies ?\ncc @xabbuh \n. It would only be used by the jms serializer but i don't see another solution.\nExcept maybe making the adapters extandable.\n. It would only be used by the jms serializer but i don't see another solution.\nExcept maybe making the adapters extandable.\n. Can someone submit a PR for this one ? I already have a lot of PRs to manage :/\n. I don't think so but updating the jms adapter should be enough.\n. It looks like it was fixed https://travis-ci.org/FriendsOfSymfony/FOSRestBundle/branches :)\n. Why not using the format listener with a default format ?\n. Why not using the format listener with a default format ?\n. @AyrtonRicardo don't worry about my first comment... I posted it too quickly.\nI'm just wondering why would a tool not send the Content-Type header ? unless the request content is empty of course and we should add something to manage this case (if not already done?).\nI'll see tomorrow what we can do to improve this listener a bit :)\n. @AyrtonRicardo don't worry about my first comment... I posted it too quickly.\nI'm just wondering why would a tool not send the Content-Type header ? unless the request content is empty of course and we should add something to manage this case (if not already done?).\nI'll see tomorrow what we can do to improve this listener a bit :)\n. In fact i'm still not sure I understood your issue... Why not defining a default format ?\n. Thank you @AyrtonRicardo !\n. in fact this is a duplicate of https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1474.\nI'm closing this one as I prefer https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1474.\nThanks !\n. This was fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1405.\nThanks for the report !\n. I propose to use the VarDumper of symfony to print the invalid value. Could you submit a pr ?\n. I'd say only when not scalar, for bc :)\n. It looks like we don't :/ but we follow symfony practices.\nI'd say let's do that on master as it is a consequent change.\n. Yes could be fine as well, i'm not even sure we need to include the invalid value in the exception message.\n. Could you add a note in a new UPGRADING-2.1.md file please?\n. Thank you @magnetik ! :)\n. @marczaq it looks like you have a complex parameter. Unless you really want to validate the parameter format (in that case you need to create your own validation constraint), i don't think the ParamFetcher is the more adapted here and using $request->query->get('sender') could be enough.\n. Thank you @hpatoio !\n. :+1: but do we really still need this listener ?\nUsing the exception listener, it's easy to use a different status code depending of the exception.\n. @lolmx you can disable it for now at least:\nyml\nfos_rest:\n    access_denied_listener: false\n@lsmith77 what do you think about this change ?\n. @lolmx i would prefer to have someone else point of view before :)\n. @lsmith77 ok thanks :) then i think we should add a note in the docs saying that this listener should not be used to keep custom messages.\nThank you @lolmx !\n. Can you try running bin/console debug:router?\nIn case you can't fix that yourself, we're gonna need more information such as your config, the URL you called, your routing, anything that might be useful.\n. That's an error in the use statement, the annotation is https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Controller/Annotations/View.php.\n. Well in fact both classes are used. View\\View in the method content and Annotations\\View for the annotation, an alias should be used here :)\n. @tael it allows to omit the View::create() for those who prefer annotations.\nAnd yes we need two use statements :)\n. @tael no problem you can ask questions if you don't know how to do something \ud83d\ude09\n. @tael no problem, my comment https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1553#discussion-diff-75634744 still isn't fixed :)\n. Thank you @tael ! :)\n. @tael if you want to fix bugs or propose features i advise you to take a look at the symfony repository, it is much bigger and there are always things moving ;)\nYou can also review the other PRs to practice english (even if most of us don't have a perfect english :P).\n. That's the same except that's targeting another branch, right ?\nWe're usually merging branchs in each other ourselves unless there are too complex conflicts.\n. That's just a merge of #1553 in master right ? We're usually doing that ourselves after merging a pr ;)\n. Just focus on #1553 we're gonna merge it in master then \ud83d\ude09\n. Why removing the content type ? The listener can simply return null in JSON.\n. Well maybe we could add an option but i don't think it should be the default as some people would expect this behavior.\n. That was fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1548\n. @Abam it would be the safest action. We should maybe release 2.1 sooner...\nping @xabbuh @lsmith77 \n. I don't think that's the right fix. The problem is that we can't know now if the value has been manually defined or not.\n. @goetas the global parameter should normally be used only when it isn't defined locally (eg. explicitelly in the controller).\nBut yes the safest option we have here imo is to use ||.\n. That's a solution but it depends of @schmittjoh point of view.\n. @goetas thanks ! Can you update your pr @bendavies ? :)\n. @bendavies did you remove your vendor directory ? Sometimes it fixes cache issues.\n. Only tomorrow, i'm on phone right now :/\n. Shouldn't we use | for consistency?\n. Thank you @bendavies ! :)\n. Yes, i'll merge it soon ;)\n. I agree it may look weird for your case but html is used as the default fallback.\nYou must explicitly remove it:\nyml\nfos_rest:\n  format_listener:\n    enabled: true\n    rules:\n      - { path: ^/api, priorities: json, prefer_extension: false, fallback_format: false }\n. That's weird when we consider that it is supported to not define the fallback_format option.\n. Thank you @IndraGunawan :)\n. Thank you @IndraGunawan ! :)\n. Sorry one more thing... Could you add it to the UPGRADING files?\n. Thank you @IndraGunawan \n. Could you fix cs please?\n. Great, thanks @senkal ! :)\n. BTW is it really useful to keep supporting XML and Yaml? This is more or less a copy-paste of the ones of symfony except some features but they are not worth it imo (automatically add format prefix, naming prefix (this one can be useful but it doesn't belong to this bundle)).\nWDYT?\n. Thank you @pedroresende !\n. Thank you @glickel !\n. Thank you @parnas !\n. Why this change? The Action prefix is not required for manual routing it is only for automatic routing.\n. Ok got it.\nI have to look deeper into the implementation but imo we should instead remove this restriction when using custom routes.\n. Let's merge this for now :)\n. LGTM :+1: btw could you add some tests to avoid regressions?\n. @bblue no problem, my review is here for that :)\nThanks for taking care of this issue !\n. Thank you @bblue !\n. @xabbuh i'm affraid it would be confusing and harder to use for no gain.\nWhat's the problem of depending on an external interface as long as we can still use the class in other contexts? At worst if we really don't want a jms interface what about using an attribute? \n. Thank you @merk!. Could you fix cs and add tests for that please?\n. I went through our extension, and in fact it looks like this is already managed here. Are you sure this doesn't work?\n. No problem for me :) We just need to remove these lines of the extension then.\n. No problem for me :) We just need to remove these lines of the extension then.\n. Except my last comment, LGTM :+1:\n. Except my last comment, LGTM :+1:\n. Thank you @edefimov !\n. Thank you @edefimov !\n. I don't think we can do anything except advising you to upgrade to 3.0.\n. I don't think we can do anything except advising you to upgrade to 3.0.\n. @xabbuh indeed, it shouldn't be hard i'll try to remember to do it tomorrow unless someone already submited a pr.\n. @xabbuh indeed, it shouldn't be hard i'll try to remember to do it tomorrow unless someone already submited a pr.\n. Fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1598.\n. Can you add tests for that please?\n. Can you add tests for that please?\n. Can you also add a functional test? I'm not sure it will work nicely with the rest of the ViewHandler.\n. Can you also add a functional test? I'm not sure it will work nicely with the rest of the ViewHandler.\n. I guess you reference this controller in your own code and you didn't change this reference by the service name or you didn't change its building arguments.\nWithout more informations, it looks like this is related to your code.\n. I guess you reference this controller in your own code and you didn't change this reference by the service name or you didn't change its building arguments.\nWithout more informations, it looks like this is related to your code.\n. LGTM :+1:\n. LGTM :+1:\n. BTW maybe we should move our constraints to 3.1 if 3.0 is not maintened anymore?\n. BTW maybe we should move our constraints to 3.1 if 3.0 is not maintened anymore?\n. LGTM :+1:\nCould you add a requirement here using parameter injection at the same time? It should ensure the constraint actually works.\n. Not tonight but i must be able to do it tomorrow :)\n. Test case added.\n. Thank you @xabbuh !\n. I agree i don't think we need to add a conflict either :)\n. I think it would be interesting to have such param converter.\nBut it looks like param converter are meant to die, so shouldn't we wait for their alternative?\nBesides that, would you be interested to port some of your bundle features into fosrestbundle? I looked quickly its doc and your EtagListener looks especially interesting to me.\n. In fact didn't it break because of the use of reflection? As we removed it, i think we can safelly re-add the interface directly.\n. Thank you @xabbuh\n. Thank you @xabbuh !\n. I can't access github right now :/ (dns issues i guess). I'll try to fix it\ntomorrow.\nLe ven. 21 oct. 2016 21:06, Christian Flothmann notifications@github.com\na \u00e9crit :\n\n\ud83d\udc4d after the small typo fix\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/1599#issuecomment-255442928,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGjbW349d0BWJj-TeC76wwJH9W5XOLEtks5q2Q1QgaJpZM4KdK6R\n.\n. @xabbuh nothing, i sent this message by mail a while ago and it looks like github posted it only now. Sorry for the inconvenience.\n. Could you rebase your changes on 2.0 please?\n. Thanks @xabbuh !\n. I'm not against that but as I don't use much symfony forms I can't tell if that's the right solution. Do you know what caused this?\n. I investigated a bit and I didn't find what could cause this issue in the PR you linked :/\nWould you mind reverting it locally on your repository and see if this issue still happen ?\n. It may be a symfony issue but adding a priority on our side to fix it looks good to me.\n. Fixed in https://github.com/symfony/symfony/pull/20995.. You can use your own validator for FOSRestBundle services using its configuration (e.g. fos_rest.service.validator) but I'm not sure that's what you want.\n\nIf you only want to use validation without an ORM, you can use symfony's annotations or configuration files.\n. @xabbuh what about adding a RequestAttributeVersionResolver instead?\n. Then maybe we could do in the same listener (at the end):\nphp\nif ($request->attributes->has('version') && $this->viewHandler instanceof ConfigurableViewHandlerInterface) {\n    $this->viewHandler->setExclusionStrategyVersion($request->attributes->get('version'));\n}\n?\n. It's just I think having a new listener is overkill but if you think it's worth it, we can create it.\n. Do you see something else to change, or can I merge this? :). Maybe that's gonna look hacky, but you could have your own annotation:\n``` php\n/*\n  * @Annotation\n  /\nclass Annotation extends QueryParam\n{\n    public $array = false;\npublic function getConstraints(...)\n{\n     if (property_exists($this, 'map')) {\n         $this->map = $this->array;\n     }\n\n     return parent::getConstraints(...);\n}\n\n}\n```\nThen you'll be able to use array for 1.x and 2.x.\nOr maybe better, you could have your own annotation harcoding both array and map to true.\n. > I was wondering if this method is the one I should call to add parameters programmatically. If yes I think the way to go would be to implement ParamReaderInterface myself\u2026 is that right? \n\nIf yes, maybe there is a design problem here (or a naming problem). IMHO, the FOSRestBundle\\Controller\\Annotations namespace would be better of if the Annotations was replaced with something not tied to a particular driver. But that's a wider problem I guess. \n\nOur annotations implement ParamInterface but a param doesn't need to be an annotation, it's just convenient. You can add parameters using addParameter if you don't want to use an annotation of course (btw you could extend QueryParam and fill its properties as you need in the constructor and then inject the parameter dynamically).\n\nI think there must be some kind of thing that reads annotations, then calls some method on a class to register the parameters. Not sure how it works, but maybe you do? I was hoping it was not tightly coupled with annotations. \n\nFrom what i know doctrine injects values directly in the annotation (that's why parameters are public) and that's why it's really hard to provide a smooth path for annotations.\nThat's where my second suggestion could look better, you would only have to replace QueryParam default values:\nphp\n/**\n  * @Annotation\n */\nclass MyQueryParam extends QueryParam\n{\n    public $array = true;\n    public $map = true;\n}\nHowever i'm not sure php wouldn't complain about a value conflict with the parent.\n. > IMO, it should be Metadata, just like in doctrine.\nThis is doable, however i'm not sure that's worth it.\n\nI know maintaining things is hard, so I'm not suggesting FOSRest should support XML or YAML for this, but I think it should support php for this.\n\nUsing php is already possible, just not very user friendly.\nphp\n$param = new QueryParam();\n$param->array = true;\n$paramFetcher->addParam($param);\n. It looks like tests are broken.\n. LGTM :+1: \n@xabbuh @lsmith77 is it ok for you as a bug fix or should it be considered a bc break?. @xabbuh I think the expected behavior is the one of this PR. I don't use this feature myself but I would say it's unlikely that someone relied on the previous behavior.. Thank you @IndraGunawan !. From what I see, this issue should have been submitted to FriendsOfSymfony/FOSOAuthServerBundle. So I'm closing it, feel free to resubmit it on the right repo.\n. I had concerns that I found easier to fix by reopening a PR. So closed in favor of https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1622.\nThanks!. That's possible but that's not safe (people may not realize that they did something that won't count).\nYou should instead put your prod config in config_prod.yml and your dev config in config_dev.yml.. Rethinking about it, this method is used in the SecurityBundle and we have quite the same priorities issues. So I'm :+1: for merging this.. Rethinking about it, this method is used in the SecurityBundle and we have quite the same priorities issues. So I'm :+1: for merging this.. https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1568 wasn't available in a stable version.\nI released new patches, you just need to upgrade :)\nThanks for the report!. @xabbuh I'd go for a separate loader like what does symfony with the rest-directory type. But that would need some work, so do we really want to support this case? It looks very unusual to me.. Sure, let's see if someone is interested then.. I agree about referencing useful articles, however i don't think we need to do it in several languages, english is very common and it will be likely that one article in french for example won't explain the same thing than an english article.. I agree about referencing useful articles, however i don't think we need to do it in several languages, english is very common and it will be likely that one article in french for example won't explain the same thing than an english article.. You can fix this by putting all your mime types in arrays. I don't know if we ever supported using only strings.\nIn any case, I'm wondering whether we should deprecate this section as framework.request.formats does exactly the same thing.... Fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1626 . Fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1626 . Fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1626 . Fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1626 . @xabbuh sure, it's done.. @xabbuh sure, it's done.. Thanks for your reviews !. Thanks for your reviews !. @xabbuh @lsmith77 is it ok for you to remove this spaces?. Thank you @IndraGunawan !. This bug was fixed a while ago in php 5.3 and is_subclass_of is faster, so there's no need to change it.. LGTM :+1: . Thank you @xabbuh :). Thank you @xabbuh :). I wonder, isn't this related to https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1622 ?. I wonder, isn't this related to https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1622 ?. The error seems to be caused by your services configuration. Did you inject @serializer instead of @jms_serializer.serializer in App\\HttpFoundation\\ControllerResultConverter\\NullResult?. No bundle I know adds stuff in your working directory (except for caching purpose), everything should be in vendor, so yes it's part of your project.\nI close this as this is fixed :). Actually it is talking about the config here.. Actually it is talking about the config here.. I'm refering to the Configuration. But there's still a typo, it should be fos_rest.service.serializer.. I'm refering to the Configuration. But there's still a typo, it should be fos_rest.service.serializer.. https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1622 fixes it :). https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1622 fixes it :). It is used here. The extension creates fos_rest.serializer which is used later in the pass.. It is used here. The extension creates fos_rest.serializer which is used later in the pass.. Sorry for the delay, it looks good to me. Could you add a failing test to avoid future regressions?. @daFish actually, it looks like this is a bug in symfony due to an unpredictable behavior of \\SplPriorityQueue (see https://github.com/symfony/symfony/pull/20995).\nIt should be enough to fix this issue. I think we should keep the code as is as it's very unlikely that someone will enable csrf in an extension while disabling it with fosrest.. Thanks @daFish !. Already done in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1624/files, it will be soon in master.. Already done in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1624/files, it will be soon in master.. Do you have a class called Target? Normally the @Target annotation is a special annotation allowing us to specify to what doc blocks the annotation applies (classes, methods, parameters).. Do you have a class called Target? Normally the @Target annotation is a special annotation allowing us to specify to what doc blocks the annotation applies (classes, methods, parameters).. Whatever happens it must be a bug in another library, Reader::getMethodAnnotations() must return an array.\nIt seems that in your case it returns null. Maybe we should look if doctrine/annotations recently introduced a bc break.. @chosroes I think you should submit an issue on doctrine/annotations, from what you say, it seems to be caused by constants.. Sorry for answering so lately, I did not have the time to review your PR until now.... Closing in favor of https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1937, thank you!. Thank you @xabbuh !. Can you show us your controller ?. @ektarum the container is no longer passed to the ExceptionController as it has been transformed in a service (its constructor is changed).\nTo have something more stable, you should either use normalizers (as explained in the upgrading file) or extend/decorate fos_rest.exception.messages_map.. Thanks @lsmith77 :). Unfortunately you can't as symfony response stores the request format but not its precise mime type so only application/json is given.\nI suggest you to register your own request listener adding your version suffix to the content-type.. It seems we didn't correctly understand the issue. https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1683 should fix it.. That's not planed for now and I don't think it will be done as long as bug fixes are provided for 2.x.\nWhat is the problem of keeping 2.x support?. I thought https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1655 fixed this but in fact it does not, we can't easily fix it as the ViewHandler depends on the Templating component and we would need to adapt it to make it work without it.\nFeel free to submit a PR if you're willing to do it :). see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1675. @c410-f3r see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1684. Features are only packaged in minor versions. It is fine for me to release 2.2.0, what about you @xabbuh @lsmith77?. > I am not sure if we have enough features for a new minor version. \nThere aren't many feature requests nor features PRs so imo we should release what we already have.\n\nAt least, we should first agree on if and for how long we then maintain already existing 2.x minor versions\n\nImo we should only fix bugs in the latest minor as we ensure bc.. I'll take care of it at the end of the week, i don't have time right now to check if everything's ready.. 2.2 is released. Sorry for the delay.... I don't think people depend on this aliases,  they're not documented anywhere nor useful for the end user (why would someone use fos_rest.validator instead of validator?).\nBut if you really don't want this, we can also move the aliases creation where it is actually needed.. @xabbuh imo this is not worth a bc layer :) No one should rely on that.. Ok, thanks \u263a. Well after rethinking about it we should just revert this PR, it did only bring unwanted effects without solving https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1652. Sorry for that.... Thanks!. Can you check that https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1669 fixes your issue?. Thanks you @JProffitt71! Sorry it has taken so much time.. Imo using setContext should be discouraged (maybe we should deprecate it?): I think we should instead promote using getContext.. Thank you @clavier-souris !. It looks like we should not have merged https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1655 after all... I'll provide a better fix asap.. I reverted https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1655, it was just a wrong fix... Sorry for this.. That's true, thanks!. That's the opposite: now map is used. https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Controller/Annotations/AbstractScalarParam.php . I have no strong opinion about it, but if we do it for the jms serializer, we should also do it for the symfony serializer.. An example for json could be:\n```php\nuse JMS\\Serializer\\Handler\\SubscribingHandlerInterface;\nuse JMS\\Serializer\\GraphNavigator;\nuse JMS\\Serializer\\JsonSerializationVisitor;\nuse JMS\\Serializer\\Context;\nclass MyExceptionHandler implements SubscribingHandlerInterface\n{\n    public static function getSubscribingMethods()\n    {\n        return array(\n            array(\n                'direction' => GraphNavigator::DIRECTION_SERIALIZATION,\n                'format' => 'json',\n                'type' => 'App\\Exception\\MyException',\n                'method' => 'serializeMyExceptionToJson',\n            ),\n        );\n    }\npublic function serializeMyExceptionToJson(JsonSerializationVisitor $visitor, App\\Exception\\MyException $exception, array $type, Context $context)\n{\n    return $visitor->visitArray([\n        'message' => $exception->getMessage(),\n    ]);\n}\n\n}\n```. Do you think it's now ok to release 2.2?. It's injected here.. Thank you @maxcanna !. Thank you @biganfa !. > there are some usecases where users want to specify at application level if serialize nulls or enable max-depth... so IMO make sense to have a place with per-app configs\nSure but imo this should be configured directly on the serializer not by forcing to instantiate contexts through a factory all the time. Anyway this is not the place to discuss your choices :)\n\nImo this is not bug fix so should not go with 2.2.something, but more with 2.3.0... \n\nI agree\n\nImo this is not bug fix so should not go with 2.2.something, but more with 2.3.0... but I do not know if you have plans to release it soon..\n\nThat's the problem, it depends how much PRs we get, we try to release minors only when we have enough changes. I'll submit some changes soon, if they're big enough then we'll probably release a minor version soon.. Thank you @goetas !. Thank you @Aliance!. Actually it's not redundant, it's here to support\nyml\nfos_rest:\n    view: { enabled: true }\nOtherwise this would be converted to:\nyml\nfos_rest:\n    view:\n        formats: { enabled: true }\nwhich is definitely not what we want.. The second step reuse the original $v ($v = ['formats' => $v, ...];), so $v['enabled'] must be removed.\nThis should indeed be closed, thanks!. Shouldn't we run tests using it?. Thank you @xabbuh!. This is related to WordPress, please ask your question on StackOverflow or directly on their repository.. We indeed didn't think about the case where you would pass an exception manually to the view handler, so except my comment :+1: . > is passing an exception to the view layer intended\nI would instead throw the exception but I guess we can also accept passing it directly to the view layer as it's just a data object.\n\nand should that trigger the exception handler or should we log some warning that something weird has been done when no status_code was provided?\n\nI think it should be managed just like any other value.. Sure, sorry I forgot your PR.\nThank you @dbu!. Sure, sorry I forgot your PR.\nThank you @dbu!. Rethinking about it, I don't think that's the right solution, I would rather prefer using setGroups with array_merge in our code.. Rethinking about it, I don't think that's the right solution, I would rather prefer using setGroups with array_merge in our code.. Closing as https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1740 is merged.. Closing as https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1740 is merged.. The query resolver tries to fetch the version from a query parameter (e.g. /foo?version=1.0), so no pattern is added to your routes.\nThe versioning feature of this bundle does not alter your routes, it only tries to resolve the requested version from a header, a query parameter or from the accepted content types. So if you want to use a path attribute, adding a prefix to your route is the way to go :). It seems the tests need to be updated :). I guess you shouldn't capitalize both words then and call your controller FoobarController.. I guess you shouldn't capitalize both words then and call your controller FoobarController.. There is two ways to do that:\n- one option is to use messages:\nyml\nfos_rest:\n    exception:\n        messages: [Exception: true]\n- or use debug:\nyml\nfos_rest:\n    exception:\n        debug: true. There is two ways to do that:\n- one option is to use ``messages``:yml\nfos_rest:\n    exception:\n        messages: [Exception: true]\n- or use `debug`:yml\nfos_rest:\n    exception:\n        debug: true. Oops sorry I didn't pushed the right branch after rebasing...\nPlease run git pull https://github.com/friendsofsymfony/FOSRestBundle.git silverbackdan-master and re-push :)\n. Oops sorry I didn't pushed the right branch after rebasing...\nPlease run git pull https://github.com/friendsofsymfony/FOSRestBundle.git silverbackdan-master and re-push :)\n. I didn't really understand the original issue so I can't tell if this is the right solution. I will just follow @lsmith77 point of view :). I didn't really understand the original issue so I can't tell if this is the right solution. I will just follow @lsmith77 point of view :). Duplicate of https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1716\nI did not have the time to look at it but at first sight I don't really like it, I'd prefer having a setGroups method and maybe even deprecate the adders.. Duplicate of https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1716\nI did not have the time to look at it but at first sight I don't really like it, I'd prefer having a setGroups method and maybe even deprecate the adders.. Rethinking about it, I don't think that's the right solution, I would rather prefer using setGroups with array_merge in our code.. Rethinking about it, I don't think that's the right solution, I would rather prefer using setGroups with array_merge in our code.. There is already a setGroups function, we just need to use it. See https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1740 :). There is already a setGroups function, we just need to use it. See https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1740 :). Closing as https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1740 is merged.. Closing as https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1740 is merged.. instead of duplicating code, can we do \n```php\n$childDefinitionClass = class_exists(ChildDefinition::class) ? ChildDefinition::class : DefinitionDecorator::class;\n$definition = new $childDefinitionClass(...);\n// $this->assertInstanceOf($childDefinitionClass, ...);\n?. instead of duplicating code, can we dophp\n$childDefinitionClass = class_exists(ChildDefinition::class) ? ChildDefinition::class : DefinitionDecorator::class;\n$definition = new $childDefinitionClass(...);\n// $this->assertInstanceOf($childDefinitionClass, ...);\n``\n?. Yes and more maintainable as here we have two update two lines instead of one.. Yes and more maintainable as here we have two update two lines instead of one.. Well in fact it's the opposite, it must be set totrue` as specified a few lines later \n\nThis requires adding the SensioFrameworkExtraBundle to your vendors and making sure sensio_framework_extra.view.annotations is set to false.. Well in fact it's the opposite, it must be set to true as specified a few lines later \nThis requires adding the SensioFrameworkExtraBundle to your vendors and making sure sensio_framework_extra.view.annotations is set to false.. @xabbuh do you have some time to review this please? :). @xabbuh do you have some time to review this please? :). @xabbuh thanks for your review. I'm sorry I won't be able to fix your comments right now (I'm really running out of time) so if you can please do the changes you want otherwise maybe I'll have more time in october.. I fixed your comments, not sure what to do about the broken links though.. I'm not sure about this change, if it becomes protected it ends up in our public api while it looks internal to me.. I'm not sure about this change, if it becomes protected it ends up in our public api while it looks internal to me.. @dlpetrie maybe they can no longer make it private because it is in their public api :)\nImo if you are reusing this method you are basically rewriting the controller and I don't think we should support this case.\n\nI am closing for now, feel free to reopen if you think this should be reconsidered.. I don't really get why we allow to override our listeners service... For me it's the same as just disabling them.. I don't really get why we allow to override our listeners service... For me it's the same as just disabling them.. Yes but to disable the listener you can as well do fos_rest: exception: false, right?. Yes but to disable the listener you can as well do fos_rest: exception: false, right?. Fair point, thank you @egils!. Fair point, thank you @egils!. Can't you use @All?. Can't you use @All?. Indeed you're right.\nWell I guess it would make sense as under the hood we have an array of constraints, not sure how to detect it though. Can you submit a PR?. Indeed you're right.\nWell I guess it would make sense as under the hood we have an array of constraints, not sure how to detect it though. Can you submit a PR?. Thank you @Tobion!. Thank you @Tobion!. Thank you @sandermarechal!. Thank you @roukmoute!. Thank you @roukmoute!. Well this PR misses a test case, except that it is all good :+1:. They were failing \ud83d\ude05 but it seems it was a network issue because I just relaunched them to fix them. Fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1934, thanks!. https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1769 is merged. https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1769 is merged. What noise are you talking about ?. What noise are you talking about ?. Oh ok, then LGTM :+1: :). Oh ok, then LGTM :+1: :). That's because there was a BC break in it that broke fosrest. Why not upgrading to 2.0?. Thank you @kunicmarko20!. I think we should define the class conditionnally :\n`php\nif (class_exists(LegacyBaseRoute::class)) {\n    class Route extends LegacyBaseRoute {\n        // ...\n    }\n} else {\n    class Route extends BaseRoute {\n        // ...\n    }\n}. That's fine for me, this is a temporary fix until we drop sf < 4 support :+1:. @xabbuh I prefer avoiding BC breaks but here that would most likely improve DX more than it would hurt it indeed.\nSo if you prefer staying simple this solution is fine for me, I would just add a small note in the changelog about the change.. @karousn if you want to use fosrest routing, yes. It has always been the case so far.. Thank you @rokkie!. I agree with @xabbuh :+1:. I added acaution` for users not using Flex. Does it look good to you?. We may also merge https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1743 directly to avoid merge conflicts.. Thank you @Idziak!. I see no need for this, imo using a symfony route parameter works already good enough.. Closing as is inactive, feel free to reopen if not.. Thank you @gdbonino.. Closing in favor of https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1879. I personally prefer @xabbuh's approach which has the benefit of letting jms bundle manage the extension process.. I just merged @xabbuh's PR, thanks for your PR still!. @tarjei @GijsL if you want to completely overwrite fos rest' handler, you may use jms class parameter and remove the service from fos rest. If you only want to do small changes, with @xabbuh's change, jms class parameter will work again and will overwrite jms handler which will then still be decorated by fos rest handler.. Thank you @xabbuh (and sorry for the delay).. Have you tried clearing your cache by hand (removing the cache dir)?. We can't do that because of BC, this possibility was introduced in 3.3 (or 3.4 maybe) but we still support 2.7. Thanks for the proposal still!. Sorry I closed #1891 so quickly... It was on the right path, I just think instead of always using::` class named services it should only be done when using sf>3.4 (this can be detected from a new class or new method introduced in the minor). . Your fix won't work, using 3.x an exception will be thrown: https://github.com/symfony/symfony/blob/3.3/src/Symfony/Component/HttpKernel/Controller/ControllerResolver.php#L180.\nWe need to change the syntax conditionally.. Should be done conditionally as in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1904.. I don't truly know jms internals so I can hardly review this, please tell me when you think it is ready to merge :). Ok, no problem, I'll merge it \u263a. > Not sure if that custom fos type handler makes sense. It should have huge performance impact. Is there a reason for it?\nThis is because of the Exception controller, we wanted users to be able to overide exceptions rendering for each sub class. I didn't find a better and simpler alternative at the time at least.. Thank you @goetas :). Thank you @goetas :). Thank you @goetas :). Remaining deprecations are unrelated.. Thank you @ball00n-!. Indeed the deprecation is still triggered but there is a workaround and this solution doesn't introduce a BC break.\nBut you're right, #1822 is probably better.. Thank you @2binfree!. @goetas oops, I thought all test failures were unrelated (I didn't check all cases \ud83d\ude36)... It proves we need to fix our test suite :). Thank you :). see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1822. Closing since there is already https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1822. FrameworkExtraBundle is a dev dependency because it is not strictly required.. That's all good for me :+1:\nThanks!. Fixed in #1822. Thank you @tonivdv for taking care of this!. We usually release when there are a significant number of bug fixes/features awaiting (see https://github.com/FriendsOfSymfony/FOSRestBundle/compare/2.3.1...master). I guess we can release 2.4 though, important fixes are awaiting right now. Is it ok for you @xabbuh?. Done, see https://github.com/FriendsOfSymfony/FOSRestBundle/releases/tag/2.4.0. That's great, thanks a lot for this fix many were awaiting :). Thank you @magnetik!. I think the issue is your input data, constructor arguments are entirely managed by symfony serializer.\nDid you actually put something under domain in your input?. This is not a supported case, the serializer doesn't know about other request parameters, the only solution I see is to deserialize your input by hand (with https://symfony.com/doc/current/components/serializer.html#handling-constructor-arguments).. Thank you @darrylhein!. Closing in favor of https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1960, thanks!. Closing in favor of https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1960, thanks!. Thank you @IonBazan! :). Thank you @IonBazan! :). We get new notices (https://travis-ci.org/FriendsOfSymfony/FOSRestBundle/jobs/467961242), should autoconfiguration be enabled in our test suite?. We get new notices (https://travis-ci.org/FriendsOfSymfony/FOSRestBundle/jobs/467961242), should autoconfiguration be enabled in our test suite?. Thank you @l-vo!. This has been fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1899, thanks!. Thank you @l-vo :). Thank you @xabbuh :). I'm afraid it would add one more thing to maintain with no much gain.\nIsn't calling AbstractFOSRestController::view() good enough ?. I'm afraid it would add one more thing to maintain with no much gain.\nIsn't calling AbstractFOSRestController::view() good enough ?. If I create a new context class that implements the jms serializer context methods, would it be ok for bc breaks ?\n. But if we create 3 interfaces, we have to create 3 context classes ? \nSo it's not still standard.\nOr do you think it's better to always check which context is it ?\nEdit: Sorry, I didn't understand. I will try to do that.\n. I think that we can remove this class and create a single class that supports deserialization and serialization. \nI split this class to support the JMSSerializer but we can do it otherwise.\n. I didn't work on the compatibility yet.\nI wanted before to submit an idea to resolve the problem of the 2.7 serializer.\nDo you agree globally with the new classes ?\n. Does https://github.com/Ener-Getick/FOSRestBundle/commit/6fa9d371452e4b61d9f450a4bab3313bc6a42c27 fix what you wanted ?\n. I changed that in https://github.com/Ener-Getick/FOSRestBundle/commit/6fa9d371452e4b61d9f450a4bab3313bc6a42c27. I use constants instead.\n. I didn't set the serializer on the adapter because ViewHandler::getSerializer() allows to change dynamically the serializer by extending the class, no ?\n. That's a good question ... I will create a call action.\nAnd why isn't the serializer injected in the ViewHandler instead of getting it by the dependency container ?\n. I prefers to split the adapter interface in two interfaces. If someone wants to change an adapter comportment, it's easier like that.\n. Yes, I thought you wanted to inject it by the dependency container.\n. Is this important ? Because the new context class supports it just with attributes.\nEdit: sorry, I failed my quote ...\nphp\n       $options = array(\n            'deserializationContext' => array(\n                'json_decode_options' => 2, // JSON_BIGINT_AS_STRING\n            ),\n        );\nIs the option json_decode_options important and must be supported ?\n. I can update the AbstractRequestBodyConverter::configureDeserializationContext() method like this :\n``` php\n    /\n     * @param ContextInterface $context\n     * @param array            $options\n     \n     * @return ContextInterface\n     /\n    protected function configureDeserializationContext(ContextInterface $context, array $options)\n    {\n        foreach($options as $key => $value) {\n            if ($key == 'groups' && $context instanceof GroupableContextInterface) {\n                $context->addGroups($options['groups']);\n            } elseif ($key == 'version' && $context instanceof VersionableContextInterface) {\n                $context->setVersion($options['version']);\n            } elseif ($key == 'maxDepth' && $context instanceof MaxDepthContextInterface) {\n                $context->setMaxDepth($options['maxDepth']);\n            } elseif ($key == 'serializeNull' && $context instanceof SerializeNullContextInterface) {\n                $context->setMaxDepth($options['maxDepth']);\n            } else {\n                $context->setAttribute($key, $value);\n            }\n        }\n    return $context;\n}\n\n```\nIs it ok for you ?\n. Yes, for a serialization context it does the same thing :\nphp\n        // FOS\\RestBundle\\Context\\Adapter\\JMSContextAdapter\n        if ($context instanceof MaxDepthContextInterface && null !== $context->getMaxDepth()) {\n            $newContext->enableMaxDepthChecks();\n        }\nBut for a deserialization context it does that in addition :\nphp\n        // FOS\\RestBundle\\Context\\Adapter\\JMSContextAdapter\n        if ($context instanceof MaxDepthContextInterface && null !== $context->getMaxDepth()) {\n            for ($i = 0; $i < $context->getMaxDepth(); $i++) {\n                $newContext->increaseDepth();\n            }\n        }\nI have to check if this is really what we want.\n. Should we create this array index, if the groups context attribute is empty ?\nBecause if the user doesn't define context groups, he will have an empty output with the symfony serializer.\n. I don't know, an adapter can be both at the same time ...\nDo you mean to split them in the constructor arguments or to create two class parameters  to simplify the deserialize/serialize functions ?\n. Oups, I didn't see this (Php-cs-fixer updates everything).\nI think it's better to leave this to another PR, to discuss if we should support sensio 2.x still.\nUnless you are sure that we can remove that ?\n. I removed the changes made by php-cs-fixer that are not linked to this PR.\n. Because I think this option should not be present in a deserialization context. \n. Should we add a new config parameter to define that ?\n. I have to adapt this code but I don't know how work the version listener...\nShould it parse a mime type like \"application/json+v1\" and extract \"v1\" ?\n. Look the code, it's the same thing, I just removed an useless call to simplify.\n. Yes, in part, I'm trying to understand how the version listener works to make this PR compatible with it.\nDo you want me to split this change in another PR ?\n. It's probably a good idea, the ParamFetcher begins to be really complex...\nI will include #1075 at the same time.\n. This is no longer necessary because I now use the Request to find the format corresponding to a mime type.\n. Yes, maybe after a conflict ...\n. Symfony/phpunit-bridge registers them: https://github.com/symfony/phpunit-bridge/blob/2.7/bootstrap.php#L29.\n. The problem is that this tests use a deprecated API, so if I don't flag this tests as legacy, there is an error.\nEdit: See https://travis-ci.org/FriendsOfSymfony/FOSRestBundle/jobs/83441697\nEdit 2: A better solution may be to set SYMFONY_DEPRECATIONS_HELPER to weak in the travis.yml.\n. Hum, the solution may be to copy the Request::$formatsarray... Or as you said, we can also force the users to only provide mime types.\n. I created a new PR https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1149.\n. Yes, for the moment I just removed it. I have to think how to replace this ...\n. Why do we send a string instead of throwing an exception ?\n. No, the $exceptionMap can also contain boolean.\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/DependencyInjection/Configuration.php#L327\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Controller/ExceptionController.php#L161\n. Yes, sorry I didn't see that the next function was protected. We should probably fix all this mistakes in another PR.\n. I replace false by bool but the function can return an error message, do you know why ?\n. You're right, I changed it.\n. Why did you remove this php docs ?\n. I don't know most of the packages always document the properties...\n@lsmith77 @stof what do you think ?\n. Ok, so it's better to remove them when they are useless. Thanks\n. There is a ParamFetcherInterface. I think it would be better to use it.\n. RequestStack::getCurrentRequest() can also be null, maybe add a check ?\n. It seems that we can only access the WebProfilerBundle config in the Extension::prepend function. I will move this logic.\n. That's right. I don't think this part of their code will change but in the case it does, it may be better to use a container parameter (https://github.com/FriendsOfSymfony/FOSRestBundle/compare/master...Ener-Getick:aafa3a7ce39e316e263fc5a5b88a344709b1238b).\nWe have to decide what's the best to do ...\n. This is already like that https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1180/files#diff-ffb88a00253e285e14e0d32ef5423cd1R192.\n. We can even replace several dependency injection tests by functional tests.\n. Yes, good idea ! Should we also use router instead of uri ?\n. Hum... Well, we can maybe remove the uri resolver, for most of the cases it only duplicates the corresponding route attribute.\n. +1, might be:\nyaml\ncondition: \"matchVersion('v1')\"\nand even \nyaml\ncondition: \"matchVersionCondition('^1.0')\"\nif we use https://github.com/composer/semver.\nEdit: I'll look at it over the next few days.\n. I doesn't use the profiler a lot ... I gave you the rights on my repository if you want to change this part.\n. It may make the code harder to maintain for a small benefit :/ \nIf we find a simple solution why not (besides IMO we should reorganize the routing files).\n. Thanks and sorry it's the first documentation I wrote, I didn't know all this standards...\nI'll try to read the reStructuredText doc soon.\n. If we use a pre-defined list of versions, we could use something like:\nyaml\nfos_rest:\n    view:\n        mime_types:\n            json: ['application/json;version={^1.0}']\n    versioning:\n        versions: ['v1', 'v1.2', 'v2']\nAnd using https://github.com/composer/semver we can transform this in \nyaml\n['application/json;version=v1', 'application/json;version=v1.2']\nfor example.\n. oops... it's a mistake\n. Sure it's just a syntax sugar.\n. It's a misunderstanding, I use this part of the profiler ^_^ \nI'll change this.\nEdit: As you said it may be better to just remove this hint...\n. This is related to https://github.com/symfony/symfony/pull/16521.\nShould I create another PR for this ?\n. We should maybe create an issue / a pr for symfony 2.8 or 3.0 to add a new method Request::getMimeTypes() and see what the symfony staff think about this. \n. This is not clear, imo include the new and the old name would be clearer. \n. I think that this trait must extend the ContainerAwareTrait as it can't work without it. \n. Another solution would be to add an abstract method get. \n. Oops look too fast... \nIf there are two traits, the problem will be the same (moreover get belongs to Controller) ... \nYou can maybe check if the get method exists on $this or if $this is an instance of Controller. \n. Why did you create this function? \n. Extending getViewHandler is already possible and I'm not sure that the setter will be used a lot. \n. :+1:\n. Finally, I'm wondering if two traits it's not too complicated to use... \nCan't we just check if $this is an instance of ContainerAwareInterface or if $this->viewHandler is defined and otherwise throw an exception? \n. You should not use the ContainerAwareTrait apparently as it is already used by Controller. \n. The Container is used to resolve the parameter in the default value. We should probably move this to the ParamFetcher ...\n. I remember why it was not in the ParamFetcher ... The requirements are also resolved but this cannot be done in the ParamFetcher.\nSo we have two solutions:\n- remove the requirements resolution\n- let the annotation extending ContainerAware\n. This behaviour was introduced by #1087 and I transformed it to introduce the ParamInterface.\nShould we keep this feature @lsmith77 ?\n. Firstly, I will remove this in this PR as this is a BC break ...\nBut we have to decide what to do for the master branch.\n. Not the same fault ! https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1200#issuecomment-156137323 :D\n. What about renaming these functions to getContext and setContext ? (will simplify the bc layers and the users won't have to remember which function to use in function of the class)\n. I'm wondering if we should not remove the sub-context interfaces and focus on the most used features.\n. These functions allow to define the (de)serialization context for a specific view. How would we do this with only the serializer api? \n. Yeah probably better to import the 2.0 features to 1.8 when possible and then remove all the deprecations in 2.0.\n. IMO this should be private and be renamed to createPlainResponse.\n. This will throw an error if the service doesn't exist, right ?\n. Right stupid error....\n. Not yet I forgot to extend the old class which triggers a deprecation in its constructor. \n. IMO this should be public to allow setter injection\n. Must be changed to FOS\\RestBundle\\Serializer\\JMSSerializerAdapter ;-)\n. The problem is the same as for the other classes, the legacy class is extended by the new one.\n. Yeah I copied the old name but I have no idea of something better...\n. I did as in symfony core but it was probably a bad idea for this...\n. https://github.com/symfony/symfony/blob/2.8/src/Symfony/Component/Debug/Exception/FlattenException.php\n. yeah :/ we'll see if the next merges are complicated and if they are we can still revert this changes.\n. As @xabbuh said here IMO we should the context adapters behavior in the serializer adapters and change this type hint to ContextInterface.\nMay be better to do this later in another PR as this one becomes really big.\n. This class is just there for BC and must be removed in 2.0.\n. I'm not sure if this is a regression or not and how we can fix it...\n. If we call ParamFetcher::getParams() after calling Kernel::handle() the params returned are those of the controller of the sub request.\n. Yeah but the paramfetcher can also receive params dynamically... IMO the best solution is to instantiate a param fetcher for each controller in the listener and force the user to use the request attributes. \n. For bc we can create a ParamFetcherStack which would receive the current ParamFetcher but it would be bugged in part. \n. IMO you should add a $ to be sure that you match the entire string\n. You can maybe use strspn http://php.net/manual/fr/function.strspn.php\n. You can also replace the preg_replace by an explode with an array_reduce\n. We have to benchmark it ;-)\n. The goal was to make it more flexible for a potential 3rd serializer but I agree that we can just not consider the unsupported fields and have a single class.\n. :+1:\n. Not if View is extended.\n. This is just here to improve the performance as the reflection classes are very slow. \n. Oops, you're right, this was corrected in https://github.com/FriendsOfSymfony/FOSRestBundle/commit/1d1ce09d6f7737e1230cb32c75933dc720226eb9.\n. Not sure this is the good way...\n. why did you escape this?\n. I personnaly prefer the shorter syntax:\nyml\nresource: FOS\\RestBundle\\Tests\\Functional\\Bundle\\TestBundle\\Controller\\ArticleController\n. I'm wondering if we should not just remove this function.\n. same thing here\n. You can use a shorter syntax here:\nphp\nif () { // ...\n} elseif (isset($container->getParameter('kernel.bundles')['TwigBundle'])) {\n    // ...\n}\n. I think that inheritdoc should not be uppercased. \n. Good catch, thanks!\n. Should be moved in the TwigExceptionController\n. This service is private so I don't think that we need to remove it manually.\n. Remember this\n. This optimization pass is always executed so I think that we can rely on it.\n. Ok so leave it as is, it isn't a big point and it doesn't cost anything to remove this service earlier.\n. :+1: @xabbuh fixed it in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1291\n. Me too, I noticed that when I saw your PR ^_^\n. I don't know if we should keep this method, Context is a final class so it is useless now...\nconfigureContext is there to customize the Context class.\n. This class can't work without an EngineInterface so IMO we should use the constructor injection.\n. Yeah seems logic, the service is never injected and is private... so it is removed.\nThis service must be public (and manually removed).\n. Is it better?\n. Oops good catch\n. Please remove this parameter and define the class inline.\n. You must also define getBlockPrefix for symfony 2.8 and 3.0.\n\nFOS\\RestBundle\\Form\\Type\\BooleanType: The FormTypeInterface::getName() method is deprecated since version 2.8 and will be removed in 3.0. Remove it from your classes. Use getBlockPrefix() if you want to customize the template block prefix. This method will be added to the FormTypeInterface with Symfony 3.0: 8x\n. please call configureOptions here instead.\n. can you make this default to null please to have less changes here and to make this PR easier to review?\n. please replace this by:\n\nphp\nif(null !== $view->getStatusCode()) {}\n. should be null !== $code\n. IMO we don't need this type hint as this function must receive an integer.\n. null !== ($code = $this->getStatusCode())\n. IMO this should be transformed to:\nrst\nNote that the format needs to be added using the :doc:`Mime Type Listener <3-listener-support>`.\nping @lsmith77 \n. This is causing a bug see https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1301.\nShould we revert this change or force the user to always enable the TemplateListener ?\n. May be better to just revert this change or the ViewResponseListener will be dependant of the SensioExtraFrameworkBundle\n. We may need to have a bigger priority, needs to be changed in another PR... \n. Not sure we need this section. May be better to move it to the UPGRADING.md file\n. There is a typo and I'd prefer an empty response, this status will be used\n. That's not true, 204 is the default status code, the configuration should only be used to use another status code.\n. IMO you should add configured manually\n. Then IMO the section should not refer to 2.0 and to the issue.\nMay be something like:\n``` rst\nDon't use the empty content status\n\nIf you don't want to use the empty content status for an specific emptyResponse, you just \nhave to set a status code manually thanks to the @View() annotation or the View class.\n```\n. Another typo :-P\nWhat do you think about the following proposition?\nrst\nBy default, ``FOSRestBundle`` will send a *204* status if the response is empty. \nIf you want to use another status code for empty responses, you can update your configuration file:\n. Can be remove IMO\n. I created https://github.com/symfony/symfony/pull/17318\n. I think that we can improve this even more:\nphp\nforeach($this->annotationReader->getMethodAnnotations($reflectionMethod) as $annotation) {\n    if($annotation instanceof Route) {\n        $annotations[] = $annotation;\n    } \n}\n. Why did you remove this?\n. Please set this class inline\n. Indeed you're right, I'll change it tomorrow \n. Changed\n. I do not understand why not just using:\nphp\n$annotations = $this->readMethodAnnotations($method, 'Route');\nThanks to inheritance, this should match all annotations.\n. Not sure this is better that way.\n. I'm still not sure if we should not support both ways...\n. There is no soft wrap ? :-P\n. I'm not a huge fan of this notation :x (but that's subjective...)\nMaybe concatenating multiple strings would be better?\nAnyway that's not a big point, @xabbuh what do you use in symfony for the long regexps?\n. You're right I was more thinking about a BC approach but this would look strange... \n. To check that the routing is working and that this type hints do not affect the routes. \n. ping\n. And there is a typo here have to use\n. The best and clearer solution might be to emulate filter_var behavior:\nphp\nin_array(array('1', 'true', 'on', 'yes'), $value) ?: (in_array(array('0', 'false', 'off', 'no', ''), $value) ? false : null);\n. Yeah that was a quick example of inlining I'd prefer a if/else structure. \n. Why not using the symfony finders here ?\n. The last part of the message should be removed as the ClassUtils are @internal\n. maybe replace this by:\nphp\nforeach ($collection->all() as $route) {\n    $this->assertInstanceOf('Symfony\\Component\\Routing\\Route', $route);\n}\n?\n. It is testing that no exceptions are thrown. Do you think I should an assertion on the page content? \n. I don't like duplications really much but I agree that it may be the best solution here :-\\\n. What about using sprintf here?\n. It is in the symfony best practices so I think it is better to use it.\n. Because this page describes an error it is not a page always shown when there is a 404 status code. \n. Well it seems logic to me. What kind of message do you think about?\n. This was useless IMO and BTW removed a check in SensioFrameworkBundle and allowed to have a @View annotation and a @Template annotation at the same time which is inconsistent.\n. This is needed because _template_default_vars doesn't exist anymore.\n. _template now contains the annotation.\n. Not possible anymore.\n. IMO we should encourage people to look their logs instead of this ugly try/catch which doesn't log anything BTW.\n. What do you think about searching the available templates in a compiler pass instead to avoid calls to the template engine which probably cost a lot of resources ?\n. Yeah it's just a first approach ^_^ I plan to move the form normalization to another normalizer. \n. Yeah the request attributes are reinitialized in the ExceptionListener so this is useless. \n. It is catched by the exception listener and logged. \n. Yeah you should not look the normalizer inner. \n I just wanted to have feedbacks on the globality of the proposal so I didn't update everything \n. :+1: to be done for 2.1 !\n. I think that's better to avoid having multiple format negotiator and instead allow to detect when the ExceptionController is used.\nOur code is clearer and easier to maintain that way.\n. It seems that travis doesn't run twice the build now.\n. Should be proposed directly to the JMSSerializer but done in FOSRestBundle for the moment to be able to use it without changing our version constraints.\n. What does this function actually test?\n. should be private (public=\"false\")\n. I don't think that's a good idea to have a function dedicated to the tests.\n. I don't see any benefits to have two fields.\n. This conversion should be done in the Extension instead IMO.\n. $container->getParameter('kernel.debug') can be inlined in the xml file.\nAnd the rest can be replaced by\nphp\nif (null !== $config['exception']['show_exception']) {\n   $container->getDefinition('fos_rest.exception.controller')->replaceArgument(2, $config['exception']['show_exception']);\n}\nIMO that's clearer and that way we do not need to add a constructor argument to our Configuration class.\n. That's probably a mistake from me ... \n. @xabbuh this was part of #1358 which wasn't much reviewed so it's still time to backport things :-)\n. Any reason to not make this private?\n. why not always use the FileLocator ?\n. I mean removing the if. That way we would have clear messages in case the folder does not exist and we would be able to support relative paths.\n. Why not just catching it?\n. After all I don't know ... The advantage would be to support relative paths but without using a specific type for directories I don't know how we could do that (the current path is not passed to the sub FileLoaders, see here).\nSo let's forget it :-/\n. BTW did we forget to make the other services private?\n. What about using @FOSRestBundle/Resources/config ?\n. Oops sorry I didn't see that the target branch was 1.8.. \n. IMO null should be treated as %kernel.debug%.\n. Why not merging this 3 tests?\n. I told the opposite earlier but if you think this is better then why not.\n. contains too much (4 instead of 3)\n. There's a missing space here (should be)\n. In fact that's the SensioFrameworkExtraBundle@Templateannotation. \nWhat about replacing it bythe SensioFrameworkExtraBundle view annotations? \n. Yeah the mime types are already registered by the mime type listener in the Request and the format negotiator fetch them from the request.\n. That's a part of the fix, we also need https://github.com/symfony/symfony/pull/18255 to be merged.\n. In fact this PR is useless as long as https://github.com/symfony/symfony/pull/18255 is not merged.\n. This test is useless now \n. In fact I don't see why we needed this in first place, it would be better to change the priority of our listener imo. \n. What do you mean? This wasn't added in this pr. \n. This was introduced in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/908 \n. It seems to me that we can safely remove this but I'll investigate a bit more tomorrow to be completely sure. \n. That's fine as is :-)\n. available since 2.2 and sf provides a bc layer, so this should be safe\n. I think we have already a lot of test cases (maybe we should reorganize them later) but you're right, that's confusing...\n. updated :-) \n. done\n. done ;)\n.Creates,new. should be quoted\nand could you mentiongetSerializationContextandgetContext` too please?\n. IMO we should not support strings here and force the user to use an array.\n. updated :+1: \n. You should use the yoda notation here:\nphp\nnull === $conditionTwo\nsame thing for the condition above\n. I'd prefer to add a space after the comma and to use double quotes:\nphp\nimplode('\", \"', $this->versions)\n. I'm not sure we should rename this variable, this looks a bit confusing with the one which keeps the same name.\n. we should always use the past right ? removed\n. Do we need the as you can see?\n. Well with this change the ViolationFormatter is now completely useless (even if i don't know if someone ever used it).\nIMO the exception message should be generated by the ViolationFormatter in this branch whereas in 2.0 where it is generated by the exception.\n. Did i forgot to remove the interface too ?\n. Maybe we can add the possibility to pass \u00e0 ViolationFormatter for bc?\n. Maybe this should be entitled 1.7.9?\n. In a sub section i mean\n. this null doesn't pass the StyleCi validation, should be only return;\n. WDYT about making the constructor private ?\n. typo\n. there's a typo here (not related to this PR but maybe it's easier to change this here ?)\n. What about defining this with an annotation ?\n. Should this be in the 1.8 branch or in 2.0 or in both ?\n. could be great to add a @see:\nphp\n/**\n * @see FOS\\RestBundle\\Exception\\InvalidParameterException\n*/\n. same here\n. I reverted some of this changes as they only make merges more complex...\n. maybe we should only keep the 2.0 section in the 2.0 branch?\n. It depends on what we decide in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1471 but this may have to be reverted\n. The class_exists is useless here\n. ok fine for me\n. ParamInterface should be used\n. same here\n. unavailable\n. Should be merged with the section below\n. I don't know if we should still advise to use the JMS serializer as it isn't updated a lot...\n. no i find that weird too ... we should probably just change styleci config...\n. The short syntax should be used here: Configuration::class\n. @xabbuh indeed you're right. That's fine for me then.\n. should be 1 >= func_num_args() || func_get_arg(1)\n. Isn't it enough to load composer ?\n. @Soullivaneuh your autoloader doesn't fix anything (seldaek proposed a solution in https://github.com/composer/composer/issues/1493 to automatically call the __static method of every objects loaded which is not what you tried to fix in https://github.com/puli/cli/pull/21).\nWhatever is the solution it is not this one, so should be reverted ;)\n. @Soullivaneuh maybe the conflict wasn't longer here but the aim of this autoloader is not to fix conflicts. \n. This should stay inside the if\n. That's not needed as already handled L90.\n. not needed\n. should be replaced by $request->getContentType()\n. still not needed\n. Sorry if was unclear, I meant putting it in the if ($this->isDecodeable($request)) {\n. Maybe adding something like\nphp\nif (!$request->getContent()) {\n    return;\n}\non top of the listener would help ?\n. BTW it looks wrong to use getRequestFormat (that's not up to you of course).\nI think this is dedicated to the response format not the request content.\n@xabbuh what do you think about only keeping the getContentType check ?\n. maybe \\All would be better ?\n. should be of the form new All(array('constraints' => $constraints))\n. Yes but getRequestFormat has a confusing name, in fact it contains the response format not the request one.\nI'd say, let's only keep the getContentType check.\n. a space is missing before\n. ] should be on a new line\n. should be on a new line\n. null ===\n. You should use the Yoda notation null !==\n. This is just a fixture it is not really important\n. the php doc should be updated to string|null\n. can be changed null !== $context->getGroups()\n. same here\n. I usually prefer aliasing annotations. What about ViewAnnotation?\n. Can you remove those spaces please ?\n. Looks good to me \ud83d\udc4d \n. Can you add an @expectedExceptionMessage please ?\n. Same here\n. Is this related ?\n. Yes, should be better :)\n. It looks like this one should be deprecated (as it was deprecated in symfony) but ok for this test.\n. Should be done in another PR (targetting master), but sure :)\n. This method should not be used imo (maybe we will deprecate it), using getContext is preferred.\n. Maybe we can include the file name ?\n. it is called mapping in Yaml. maybe we can replace that by a Yaml mapping (an array)?\n. No need for a regexp, it is already checked using assertContains\n. The section title says that those methods are the most important so I think we should only include the most important :)\n. Fine for me :+1:\n. And what about the route name ? (Sorry i didn't think about this one earlier)\n. I don't think we should include this in of our first examples, it would only confuse people as it's not something very common.\nEdit: moreover this one is managed by symfony\n. this one is managed by symfony anyway so it's useless imo.\n. I agree with @stloyd I don't think we need this variable. Maybe we should remove the other variables as well.\n. Maybe we should use a stricter comparison in case there class name is similar to false false !==\n. I was thinking about a name such as 0 but i realized that's not allowed so it's fine for me as is :)\n. That's a bc break\n. why not just always make it an array ?\n. Do we really need a setter? Isn't an adder enough?\n. What about validate?\n. I think something static would be better :)\n. Same here, no need to test all the constants ;)\n. I don't think we need to link this issue.\n. can't we type hint on an interface?\n. The jms interface would be fine :)\n. It looks very verbose, let's keep something short :)\n. Can be changed to int .\n. This looks useless\n. The next assertion is enough\n. Can be replaced by assertEquals([$s1, $s2], $strategies);\n. This is deprecated :/ you can replace it by getMockBuilder(...)->getMock() and also use the ::class constant.\n. Do we depend on this?\n. Ok, thanks :)\n. What about adding a comment such as BC to remind us to remove it next time we bump sf version?\n. Indeed, i forgot to close my opened files before changing branch.\n. Btw this is really not expected. It is due to the x option and is not convenient imo, unfortunately it's gonna be hard to change...\n. updated :)\n\nBy the way, what was the reason for the getVersion() method which requires us to make the event listener stateful?\n\nThat was for bc reason if I remember well (this listener already existed in 1.x).\n. We could remove it as we made listeners @internal. WDYT?\n. That's alright, it's not much to do and I won't forget it if I do it now :stuck_out_tongue: \n. I would prefer a earlier return here.\n. I think it would be better to add a case before the others instead (move the one line 65).. I agree, will do it.. @xabbuh this was wrong according to the docs but it is technically a bc break. Is it fine for you anyway?. styleci failed without it. that's not related, just a cs fix. that's not related, please open another issue . This is already managed here.. It is already supported under jms_serializer.serializer. I don't think we need to support the case where the jms serializer is only configured under serializer. Wdyt?. I don't think it has ever been supported, what's supported is removing the serializer alias.. Good question, it should probably be removed.. { version: v1|v3 }. Isn't this already supported?. Can be removed, it is @internal.. I'd be in favor of merging checks here.. Why not using the REQUEST_URI header?. what if $header is empty? is foo;q=10, valid?. Does not look very useful.. Sure, done.. Can you remove the trailing space too please ?. Can't we just require 4.0.*@dev instead ?. It's fine for me as long as we don't have problems, just tests are more likely to break with this setting.\nLet's keep it this way for now, we'll see soon enough if it causes issues :). Not sure this bc break is acceptable in a patch, should we release this in 2.3?. Doesn't seem very useful to me. It can be removed imo.. missing 'string' argument here. You shouldn't use the $data variable here, we voluntarily don't include the other keys.. I don't think we need the class existence check as $class comes from php itself.. We should also add a check here imo: is_string($key) ? $key : null. We should decorate the core listener instead imo (see https://symfony.com/doc/current/service_container/service_decoration.html). Here in case the FrameworkBundle is registered after the FOSRestBundle, it won't work as expected.. security.exception_listener should be fine to decorate, you should just inject it in the constructor of the fosrest listener instead of instantiating it by hands.. Ok, thank you for working on this :). This interface can be added to the hardcoded list :). What about ignored_types?. IMO we should deprecate having something else than an array of Constraints at this point.. Sorry I meant renaming the option to ignored_types because it also accepts interfaces and traits FQCN.. This feature doesn't seem very useful to me. I would just remove this comment, this is an advanced feature that's useless to most users and this comment doesn't truly help since that's not the only condition.. Yes :). Please silence them with @ indeed. Is this for bc? If so I think we should deprecate these calls.. Tags were not inherited before it thus making the FormErrorHandler not working.. Indeed, see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1907 :). It depends on the httpkernel component because the ContainerControllerResolver belongs to the component :slightly_smiling_face: . We consider exception messages as exceptions :). requires. Thanks, sorry I forgot to take care of this :). I'm not sure resetting these fields is legit, they're defined in config so not per request, right ?. Ok but then we should reset to config values, don't you think ?. Thing is the initial state of the object differs from its state at the beginning of requests because of https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/DependencyInjection/FOSRestExtension.php#L400.. Sure but I think we should save differently the config settings in order to use them when resetting. I don't get what is this test supposed to assert, the new listener does not update the request at all. Shouldn't it be removed?. return false !== strpos($path, '{version}');. To be clearer, config options should be passed to the constructor and stored to be later restored. The constructor has already many arguments so we could group most of them under an $options argument but I wouldn't mind if you just add the resetted config parameters as arguments in this PR.. $this->options = $options + ['exclusionStrategyGroups' => [], 'exclusionStrategyVersion' => null, 'serializeNullStrategy' => null]; to remove isset checks in reset() and ensure fields are reset to their default value if none was explicitely provided :). Should be optional: $options = []. Sure we could do that indeed. If $this->map is false then it's added here.. see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1970. So should we just keep the NotNull additionnal check? I think it would make sense, I'm updating it pending your answer :). Sorry to bother, rethinking about it, I think in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1752/files#r136455286 I meant deprecating using arrays not only containing Constraints, scalar requirements seems like a nice syntactic sugar to me.. suggestion\n                } else {\n                    @trigger_error('Using an array not only containing `Constraint`s is deprecated since version 2.6.', E_USER_DEPRECATED);\n                }. ",
    "magnetik": "I just tested and it seems that it's not working.\nI'm trying to load controllers with the following code:\n```\napi:\n    resource: \"@AppBundle/ApiController/\"\n    type:     rest\n```\nFirstly FOS\\RestBundle\\Routing\\Loader\\RestRouteLoader is created/tagged before the DirectoryRouteLoader in routing.xml, and the supports methods does not exclude the case when the resource is a directory.\nSecondly it seems that calling is_dir($resource) will fail, because \"@AppBundle/ApiController\" is not a directory: it needs some resolution to a path first. \nNot sure if I should create a new bug instead of reopening this one. I can work on a PR.\n. Ho, indeed it is working now. I was using ~2.0@dev and I though it was giving me head of the 2.0 branch.\nThanks \n. I don't really understand how this PR helps to solve the bug described here. \nShould I use custom serialization groups ?\n. I think I've pinpointed the issue (after a few hours) \nI'm using symfony 3.1.3 with FOSRestBundle 2.0\n1. When translating the serializer contexts (in \\FOS\\RestBundle\\Serializer\\SymfonySerializerAdapter::convertContext), when not using the groups the context 'group' is set to an empty array (default value). Then it's passed to symfony serializer.\n2. Then when the ObjectNormalizer tries to get the allowed attributes (in \\Symfony\\Component\\Serializer\\Normalizer\\AbstractNormalizer::getAllowedAttributes), it checks if the context group is an array : if (!$this->classMetadataFactory || !isset($context[static::GROUPS]) || !is_array($context[static::GROUPS])) {. Which is true because we initialized it with an empty array. So it check if an attribute belongs to the group before adding it. But if you are not using the groups, it fails every time, so no attribute is added. \nIn \\FOS\\RestBundle\\Serializer\\SymfonySerializerAdapter::convertContext, I have changed:\n$newContext['groups'] = $context->getGroups()\nfor\n$newContext['groups'] = $context->getGroups() ?: false;\nAnd it seems to be ok. \n. But maybe the fix should be in the serializer component : it's useless anyway to loop on all attributes when the group array is empty since there won't be any match anyway. \n. So as @xabbuh  suggested in inline comment: set the default value of the property groups to null and set it as array when a group is added? \nAs it would be a BC break, it won't be shipped before 3.0 (not sure if FOS follows the same BC rules as symfony)?\n. Thanks.\nShould I write a PR? Since the change are quite straightforward maybe it's faster if you write it directly, but I can do it if you want.\n. See #1548\n. @rokkie if you do not load the TwigBundle, it will be removed by the container compiler optimizer pass of the SensioFrameworkExtraBundle (in \\Sensio\\Bundle\\FrameworkExtraBundle\\DependencyInjection\\Compiler\\OptimizerPass) so it's not available. Add the TwigBundle in your bundles. . I wanted to do a similar PR.\nThe test that are now falling are:\n1) FOS\\RestBundle\\Tests\\Functional\\RoutingTest::testPostControllerRoutesAreRegistered\nFailed asserting that '{\"id\":\"1\"}' matches JSON string \"{ \"id\": 1 }\".\n--- Expected\n+++ Actual\n@@ @@\n-{\"id\":\"1\"}\n+{ \"id\": 1 }\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/Tests/Functional/RoutingTest.php:28\n2) FOS\\RestBundle\\Tests\\Functional\\RoutingTest::testCommentControllerRoutesAreRegistered\nFailed asserting that '{\"id\":\"3\"}' matches JSON string \"{ \"id\": 3 }\".\n--- Expected\n+++ Actual\n@@ @@\n-{\"id\":\"3\"}\n+{ \"id\": 3 }\n/home/travis/build/FriendsOfSymfony/FOSRestBundle/Tests/Functional/RoutingTest.php:36\nNot sure what caused this change in 7.2. I'm all in not supporting Symfony 2 but it won't be possible before a FOSRestBundle 2.4 or something like that? \nMeanwhile, I've done #1884 to fix it on the short term.. So yeah let's remove it completely, its done in #1892 :). Yup I \"just\" removed the translator dependency completely (or I just misunderstood you right now). . @xabbuh any input on this quick fix?\nNot really a blocker but it can help during bootstrapping a project with SF4 and FOSRestBundle.. Might be related : https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1772. humm, the fail in the test looks totally unrelated to this change \u00af_(\u30c4)/\u00af. Oops I thought I was super clever but in fact it was just friday afternoon \u00af_(\u30c4)/\u00af\nI'm just randomly looky why this test do not pass.. I just faced it today so I'll hope it will get released :). The current incompatibility between FOSRestBundle and JMSSerializerBundle 3.0. Can a release be tagged with this fix? \nThanks.. Can a release be tagged with this fix? \nThanks.. Which version of the FOSRestBundle are you using ? The JMSSerializer is not defining the serializer alias, but jms_serializer.serialize alias.. The Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener::logKernelException() has a priority of 0 while the FOS\\RestBundle\\EventListener\\ExceptionListener::onKernelException() has a priority of -100 and Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener::onKernelException() has a priority of -128. So the logKernelException should be always called.\nWhat am I missing ?. (tests are passing, it's only the same deprecation warning). I've made the changes :). Is that what dunglas proposed in the bug comment (not sure if I understood well)?\n. Hey why not, I've just pushed #1892. Humm right, nice catch. \nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/5e38509c14798579ba5655846cc9c4876f0b40e7/DependencyInjection/FOSRestExtension.php#L164\nSo checking if the \"id\" is a service here would work and help preventing bad configuration, right?. @Tobion  ?\n. wow I'm really sorry about that. I should focus more when doing a pull request.. ",
    "xabbuh": "@magnetik Can you try the latest version of the 1.8 or 2.0 branch for this please? We did not tag another beta yet after fixing this bug.\n. @magnetik You will then end up with 2.1.x-dev (admittedly we didn't merge up 2.0 to master for some time). You can use the ~2.0.0@dev constraint instead.\n. see #1354\n. @spwin see #1671. I don't understand why that doesn't lead to an internal server error then as such a response is created and returned in that code path. But to handle this gracefully, you will need to replace the exception controller with a custom implementation if the TwigBundle is disabled (luckily that will be a bit easier in 2.0 thanks to #1288).\n. closing here in favour of #1339\n. closing here in favour of #1339\n. Is someone of you working on an implementation?\n. Alright. Let me know when you start working on this. Otherwise I can pick this after Christmas as I could need this as well.\n. :+1:\n@lsmith77 is it already possible to configure a service as a rest controller in XML or YAML? Didn't find out how.\n. Ah, figured out how to do it. Should we document this? For me it was not that clear that your controller class needs to implement the ClassResourceInterface.\nBy the way: The generate routes names look rather odd to me. For example, if I have a getUsersAction() method in a UserController class, the generated route name is get_user_users. As you can see the service name is not part of the route name. Is this intended?\n. Alright, let's see if I can spend some time on this. :)\nI thought of something like prepending the route name with the service name. Don't know if this can be achieved easily. Nonetheless, that would make it much easier since you have all your routes from the service next to each other.\n. @merk I think that would require some big refactoring, wouldn't it? Not sure if it's worth to do that.\n. Basically, configuring a controller as service isn't that hard. Can you show how you tried to do it?\n. I tried to fix this with #624.\nFurthermore, I noticed that configuration options such as the default_format one don't apply for manual rest route definitions. Is that intended?\n. I tried to fix this with #624.\nFurthermore, I noticed that configuration options such as the default_format one don't apply for manual rest route definitions. Is that intended?\n. Thank you! See #626 for the other issue.\n. The problem is that SensioFrameworkExtraBundle 3.0 requires to use Symfony 2.4. Thus, moving to 3.0 is no option I think.\n. The best way I guess is to create a branch for the current version (let's say 1.0) and making master the branch for 2.0 in which the implementation can be changed against SensioFrameworkExtraBundle 3.0. What do you think?\n. The best way I guess is to create a branch for the current version (let's say 1.0) and making master the branch for 2.0 in which the implementation can be changed against SensioFrameworkExtraBundle 3.0. What do you think?\n. Okay, I'll try to fix it inside the DI extension then.\n. Okay, I'll try to fix it inside the DI extension then.\n. I created a pull request. Though I'm not really happy with class names chosen for the concrete RequestBodyParamConverter implementations. I really appreciate any better class name suggestions.\n. I created a pull request. Though I'm not really happy with class names chosen for the concrete RequestBodyParamConverter implementations. I really appreciate any better class name suggestions.\n. Thanks!\n. I do not understand why this should be an issue with the normalizePriorities() method since 1.0.x wasn't allowed before. However, the change still makes sense since it allows to user higher 1.x versions too.\n. @JHGitty @Ener-Getick I'll look into this this week.\n. closing here in favour of #1339\n. @egulias Tests should be fine if you rebase on the latest master.\n. It doesn't require JMSSerializerBundle for all features. For example, it's also possible to use the Symfony Serializer component (see Install FOSRestBundle).\n. @lsmith77 Forcing the value to false could be misleading since the SensioFrameworkExtraBundle might not work as expected for the user, couldn't it?\n. I just rebased. There are three use statements left that will be removed if I didn't miss anything.\n. :+1: \n. This change makes it possible to test the bundle with Symfony 2.6.\n. @lsmith77 Thanks, I didn't notice that they failed. Fixed it now.\n. I had some other issue after updating the serializer version for the tests. I think I can get back to this tomorrow and ping you after everything has been fixed.\n. I made some updates to the test dependencies. However, there's still at least one failure. When running the test from SerializerErrorTest, the ExceptionWrapperNormalizer is not always executed as expected and thus doesn't change the output format. Does anybody of you know which dependency keeps the normalizer from being executed?\n. @ianfp In fact, the content type (not the HTTP method) is important when you build the request (it has to be application/x-www-form-urlencoded). And there is nothing we can do about that else as this is a limitation given by PHP.\n. I would not make the number a part of the filename. This way, would have to rename them when new ones get added in the middle or when existing chapters will be removed. If you want the filenames to represent the structure, I suggest to move them to a subdirectory.\nIf I did not miss anything, you will also have to add toctree entries for the new files.\n. At least, it would help you keep URLs if you change the order in which the documents are referenced in the future.\n. By the way, the extension class needs to be fixed too (we should probably check if something else exists for the other options too).\n. @kierate This sounds like the best solution to me (IIRC force was the only possible value besides false and true before).\n. :+1: \n. see #1057\n. :+1: \n. I was really happy about that fact. ;)\n. I was really happy about that fact. ;)\n. This was fixed by #1564.\n. This was fixed by #1564.\n. @Ener-Getick @lsmith77 For some reason it seems that this change is not in the 1.8 branch. Do you now if that was intended?\n. @Ener-Getick Alright, thanks for the confirmation.\n. Do you define both routes in the same file?\n. Is that a good idea? Wouldn't that make it possible to run CSRF attacks through, for example, AJAX requests?\n. Sure, but disabling it based on headers makes it possible to disable it everywhere from the outside (and not only for the API). This would work quite well for API-only applications but what if my application had an API and a regular user interface?\n. This does not seem to be related with FOSRestBundle at all.\nAnd the issue seems to be that you are trying to use the coice type while you should rather use the entitytype here. Anyway, I suggest to ask for support on StackOverflow.\n. This is probably due to the fact that the minimum-stability option in your composer.json file is stable. Thus, non-stable dependencies that are required by your dependencies won't be pulled in automatically. You can add the willdurand/negotation package to your project's composer.json file or lower the minimum-stability setting for now.\n. @MavenSean FYI, route parameters are available through the request's attributes like this:\n``` php\n$request->attributes->get('apiKey');\n// or if you prefer to refer to the route params:\n$request->attributes->get('_route_params')['apiKey'];\n``\n. Maybe we can extend the zone concept in 2.1 to make it possible to only disable some of the listeners. Then we could indeed entirely remove thestoprule. What do you think?\n. @lsmith77 Imho using the constants from this class should be deprecated in FOSRestBundle 1.x in some way. For example, OroCRM refers to theCodesclass which would probably lead to a lot of applications to break when upgrading.\n. @AlexandreKilian For the records, the last paragraph at http://symfony.com/doc/current/bundles/FOSRestBundle/3-listener-support.html#security-exception-listener describes this, but I completely agree that this should be way more visible and discoverable.\n. @AlexandreKilian For the records, the last paragraph at http://symfony.com/doc/current/bundles/FOSRestBundle/3-listener-support.html#security-exception-listener describes this, but I completely agree that this should be way more visible and discoverable.\n. ThetestLegacyValidatorParameters()inAbstractRequestBodyParamConverterTestuses the deprecated validator API that will be removed with Symfony 3.0. This test can probably simply be skipped when the legacy API is not available (i.e.Symfony\\Component\\Validator\\ValidatorInterfacedoes not exist).\n. You can check for the [getBlockPrefix()](https://github.com/symfony/symfony/blob/2.8/src/Symfony/Component/Form/AbstractType.php#L82-L89) method being present in theAbstractTypeclass.\n. closing in favour of #1144\n. targeting the right branch now\n. If you want to I can look for the actual dependencies later on today. Otherwise, if found this to be done fast, feel free to close here and do the split in a separate PR. :)\n. Let's see if Travis agrees.\n. @pinouf Would you mind creating issues with the error messages you got so that it will be easier to fix possible existing bugs and to help stabilising the bundle for 2.0?\n. @pinouf great :)\n. I rebased and fixed the two parts.\n. indeed, good idea\n. The main problem will probably be the fact that themasterbranch uses the shortcut notation for arrays. \n. @lsmith77 Sure, will do that tonight.\n. see #1170\n. Do you only have blanks or also other \"special characters\" in your path?\n. This is ready to be reviewed.\n. @lsmith77 Do you remember which of the injected services were expected to be slow to initialize? On a quick look it doesn't seem to me that it's actually expensive to construct them.\n. I did two more things here:\n- Removed theContainerAwareInterface` usages where we already always inject the container through a setter. The only places left being \"container aware\" should now be the request params.\n- Introduced adapter for the JMS serializer and Symfony's core serializer. Now we can use lazy services and type hints here. I just wonder if we now also could get rid the of context adapters.\nThe next step will be to apply the changes @lsmith77 proposed for controllers (or something similar).\n. @lsmith77 I agree with you (93758654c0ac2ed29576c0dcbe7d42122d71bf37 actually is the thing I talked about I would like to include). On the other hand @Ener-Getick and me were talking about backporting certain features to a (potential) 1.8 release to be able to create true BC layers and to provide a smooth upgrade path (see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1213#discussion_r45556284). What do you think about this?\n. @lsmith77 I agree with you that we cannot do that for each and every part. But I also agree with @stof that we should provide a clear and smooth upgrade path to ease the life for other bundles that depend on FOSRestBundle.\nI believe defining first which parts of the bundle are internal and which expose our public API would be a big step in the right direction (everything not being part of the public API would not necessarily have to provide a smooth upgrade path). For that reason I suggest that we start marking all classes that are not meant to be used by consumer code as internal (see https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1213#issuecomment-158617633). What do you think?\n. @Ener-Getick Ah that did the trick. What a stupid mistake. Thank you very much!\n. @Ener-Getick Rebasing was a nightmare. ;) I need to resolve some conflicts and move the serialization API to a new pull request that will go to the 1.8 branch.\n. @Ener-Getick Ah right, I didn't think about that. I think we still need to simplify that a bit, but I will comment directly on your PR.\nLet's see if all tests still pass and then I need to check all comments again and see if I really addressed all of your comments.\n. Then we should also trigger some warning/error when there is no rule configured.\n. @pilotepro Can you please check which part of the code is refering to the fos_rest.format_listener.rules parameter? And did you try to delete the cache manually instead of using the cache:clear command?\n@lsmith77 Unfortunately, I forgot to update the upgrade file in #1158. I will take a look at it.\n. @pilotepro Thanks for the stack trace. This is indeed a bug. I will have a look at it.\n. @Ener-Getick Exactly, though I am not quite sure yet what would be the best solution (by the way, we should think of adding a test when fixing it to prevent regressions in the future).\n. I just had a quick look at the compiler pass and it seems to me that we could simply move this handling to the extension class.\n. But the profiler rule does not depend on the parameter. So we can handle it differently.\n. The issue with that solution is that in a prepend extension we can only prepend some config but we cannot check the configured values. Thus we should keep the handling for the profiler in the compiler pass but move our own handling to the extension.\n. Are you sure? Looking at the code I don't see how the bundle's configuration should already have been processed when the prepend extensions are processed.\n. Can you check #1173?\n. @pstephenson02 Instead of getStandardProposalAction() try getAction() instead.\n. Though I think the error message should indeed be improved.\n. @mamartins Would you mind sharing your complete security.yml file?\n. IIRC in Symfony we made some properties protected in annotations and added magic getters and setters to be able to trigger deprecation warnings.\nBy the way, what do you think about adding @internal annotations to a lot of classes? This would make it easier for us to break BC in the future (many classes actually should never be used directly by consumers of the bundle)?\n. fixed in 9a16b0ec5a2655a0fda28efe5be9789eb9417b8c and 1af7cab8a315b549b87b605709da486d3384cdd0\n. I think we can solve this by checking first if the interface exists (see #1597).\n. Thank you for reporting this bug @robhunt3r. The issue is that ReflectionClass::isSubclassOf()fails if the class name argument refers to a non-existent class (which can happen as the dependency on psr/http-message is optional).\n. @eXtreme Does it still fail for you with the latest master version where that commit was reverte?\n. @eXtreme @Ener-Getick Please take a look at #1597.\n. Well, actually the tag for that fix isn't created yet (you can expect that tomorrow), but the 1,7 branch already contains the necessary changes.\n. Yeah, makes sense to remove the 3.0 build. Though I would rather like to keep the 2.6 build as that version still keeps getting security patches.\n. @lsmith77 I am not sure if I understand the underlying issue. Can you give an example that does not work with the current code?\n. I think we should merge this into 1.7. We can then decide at some point if we really want to release a new 1.7 patch version or if we just include it in the new minor version (depends on how fast we progress with new versions imo).\n. Thank you @francescolaffi.\n. This will also be applied on 1.7 branch with #1256.\n. I think we should do that step in 1.8 instead so that people could already check before the next major version if there could would work well.\n. Well, actually I would split the PR: adding the @internal annotation in 1.8 and changing the visibility in 2.0.\n. :+1: looks good to me, this just needs a rebase\n. :+1: looks good to me, this just needs a rebase\n. I think we should only remove interfaces when there is no need for custom implementations of a class. And then we should make our own implementation final.\n. I agree with @Ener-Getick. Supporting this in a generic way only complicates things and honestly I do not thing that this is an everyday use case. Maybe you can even just register another listener that intercepts before the one from FOSRestBundle and only steps into when an exception occurred.\n. The latest 1.7 releases of the bundle can be used with Symfony 3 too.\n. Thank you very much for rebasing @Ener-Getick!\n. I cannot think of a use case where you would want to use this method in custom code. So I am :+1: on this change. But I think we should trigger a deprecation in 1.8 and document the removal of this method in case someone really used this.\n. @lsmith77 Sorry, my review overlapped with you merging the PR.\n. see #1291\n. @peshi @phoenixgao The issue with the non-existent fos_rest.exception.twig_controller service is fixed in the latest version of the master branch.\n@peshi I'll also take a look into the other issue you reported.\n. @peshi Are you able to provide a complete stack trace for your second issue?\n. @peshi Thank you, this helps a lot.\n. @stof Which child class? The abstract one?\n. @stof Imo it does not make sense for people using another templating engine than Twig to extend the TwigExceptionController class. I think they should use some other base class instead. So the only thing they have to do is provide a different implementation for the findTemplate() method.\n. I don't have anything to add. But I would like to wait for @stof to explain what he meant with his comment.\n. Isn't it sufficient to simply always trigger the deprecation when one of these methods is called?\n. In Symfony we had a few places where we passed a special argument to silence deprecations in a method. But what are the parts where we still call these methods? And is that really necessary?\n. :+1: LGTM\n. @stof Do you see anything else we may want to change? Otherwise this look good to merge to me.\n. We have a check using method_exists(): https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Routing/Loader/RestRouteLoader.php#L120\n@ibraelillo Which version of the bundle do you use?\n. Indeed, maybe we can simply backport that patch.\n. I think we can better create a form type extension for the checkbox type which adds the data transformer when a special option (for which we must think about a name) is set (enabled).\n. @fsevestre Feel free to ask if you need some assistance.\n. :+1: \n. Thank you for the fix and a happy new year @kherge!\n. Wouldn't it be possible to do this in the 1.8 release?\n. It seems that your production server does not run on PHP 5.5 or higher yet (the class constant was introduced in PHP 5.5) while your local development environment does.\nThere's nothing we can do about that in FOSRestBundle (the 2.0 version will not support PHP versions before 5.5 anymore). So I'll close this issue. But please feel free to ask if you still have questions.\n. We have a similar report in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1288#issuecomment-168173516. So it looks like the issue is not limited to FOSRestBundle 2.0.\n. Oh maybe I misunderstood the issue though. @marcobarcaro Did you update both Symfony (from 2.7 to 2.8) and FOSRestBundle (from 1.7 to 2.0-dev)?\n. Thanks for the bug report @glasset. Can you check if your issue is the same as #1301?\n. @kcivey see #1355\n. This is weird as the error message doesn't match the generated container code (as you can see the first argument is $this which clearly is not an array but the actual container).\n. This is weird as the error message doesn't match the generated container code (as you can see the first argument is $this which clearly is not an array but the actual container).\n. @shakaran Can you show the line from the generated container that is mentioned in the error message?\n. @shakaran Can you show the line from the generated container that is mentioned in the error message?\n. Thanks for the feedback. Just let use know in case you experience this again.\n. Can you please shortly explain what the use case is for these new methods (and maybe link to a short description or some other related resources)?\n. Can you please shortly explain what the use case is for these new methods (and maybe link to a short description or some other related resources)?\n. The rest looks great to me too. The only thing we could think about is to backport parts of this to 1.8 (the non BC breaking parts). But that's something we can decide after merging this PR.\n. We could at least backport the annotations. Setting the HTTP method based on the method name for the new support methods would indeed be a BC break though.\n. closing here because of the changes @Ener-Getick made in #1316\n@palra Thanks for starting this. Please let me know if you disagree and you think that the issue still isn't fixed fully.\n. closing here because of the changes @Ener-Getick made in #1316\n@palra Thanks for starting this. Please let me know if you disagree and you think that the issue still isn't fixed fully.\n. :+1: looks good to me\n. fixed in #1319\n. fixed in #1319\n. :+1: \n. :+1: \n. Thank you @Ener-Getick.\n. Thank you @Ener-Getick.\n. Thank you @Ener-Getick.\n. It looks strange to me that there are so many changes given that I merged the 1.8 branch into the master branch earlier today (see #1323).\n. Yes, and the diff was defintely not what it looks like now when looking at #1323.\n. Hm, why does this remove all the serialization context related classes?\n. I based it on the remote branch. And when I take a look at the history of the MERGE1.8 branch, I can see some commits twice. For example, take a look at https://github.com/FriendsOfSymfony/FOSRestBundle/commits/MERGE1.8?page=2 and you will see the commit with message \"do not overwrite explicit templates, fix issues with redirects\" twice on December 28.\n. Yeah, GitHub is showing me the same. It might have been too late when I made the merge. :(\n. Yeah, I will try to find the cause and otherwise merge here in case I don't find anything weird. :)\n. Oh, I noticed my mistake. I merged 1.7 into master. :(\n. @Ener-Getick see #1331\n. @Ener-Getick I do not see a problem. Tests run successfully.\n. Oh then I misunderstood your problem. :)\n. I'll do this in #1335. Thanks for this fix @hmlb.\n. Thanks for handling this @hacfi! :)\n. @Ener-Getick @lsmith77 I think we can backport only the annotation related changes to 1.8. What do you think?\n. @Ener-Getick @lsmith77 I think we can backport only the annotation related changes to 1.8. What do you think?\n. @Ener-Getick Sorry if that wasn't clear. I meant to backport the support for the new annotations to 1.8 and trigger deprecations if the method name prefixes whose behaviour will change with 2.0 are used. I prepare a pull request.\n. In another PR it was suggested to parse directories recursively. I think we rather should not do that but simply handle only the files from the configured directory. What do you think?\n. In another PR it was suggested to parse directories recursively. I think we rather should not do that but simply handle only the files from the configured directory. What do you think?\n. Hm, looks like we cannot load the whole controller fixtures directory. So that's another reason to rearrange the tests.\n. Hm, looks like we cannot load the whole controller fixtures directory. So that's another reason to rearrange the tests.\n. Tests are fixed.\n. Tests are fixed.\n. will do\n. see #1348\n. @Ener-Getick Just to fully understand the changes: What is the underlying in #1237 and how is solved by this PR?\n. I will still need to play with this locally to completely understand the fix, but as this seems to let the original issue go away, we can merge this imo.\n. By the way, does this affect 1.8 too?\n. I wasn't sure if we need to update the requirement or the conflict rule. But test seem to confirm that the conflict rule indeed needs to be changed.\n. Tests pass now and this should also be backwards compatible (annotations are taken into account, method names still have the old behaviour).\n. @Ener-Getick Dropping support for a patch release version looks like an ugly hack to me. Is this actually a BC break in the SensioFrameworkExtraBundle or did rely on implementation details?\n. I left some comments, but in general I like the approach. Maybe this could be something for 2.1? In 2.0 we could mark some more classes as internal (if needed) so that we could easily drop them in 2.1 without breaking BC.\n. @Ener-Getick Can't we revert this change when a new version of SensioFrameworkExtraBundle gets released?\n. @Ener-Getick Can't we revert this change when a new version of SensioFrameworkExtraBundle gets released?\n. @merk @Ener-Getick Thanks for clarifying. I guess that's not worth it (at least not right now, we may reconsider that in the future though).\n. @merk @Ener-Getick Thanks for clarifying. I guess that's not worth it (at least not right now, we may reconsider that in the future though).\n. I like this and I think we should do it in 1.8 (if I didn't miss anything this feature is fully backwards compatible).\n. :+1: \n. :+1: \n. @Ener-Getick Do we want to treat this PR as a kind of bug fix?\n. @Ener-Getick Do we want to treat this PR as a kind of bug fix?\n. This looks like a bug to me (I can confirm that this is not working as expected).\n. This looks like a bug to me (I can confirm that this is not working as expected).\n. The thing is that this is not really usable when you have a bundle that is supposed to be reused where you do not no anything about the directory structure of the application this bundle is used in.\n. Imo we should do that. Otherwise the feature feels incomplete. To be honest, I thought that we already implemented it that way. But apparently I didn't and I even did not think about adding according tests. :(\n. @aguidis @jovobe Can you both check if the changes in #1385 solve the issue for you? It adds support for the @BundleName notation (not sure if we should also fix it for the absolute path notation when DI parameters are used).\n. I see no real value in making this change (it only adds one additional method call that cannot be optimised). Imo this is an example where SensioLabs Insight gives a warning that can safely be ignored.\n. Which version of FOSRestBundle do you use? Did you try to use your own serializer? Can you please show your FOSRest related configuration?\n. FOS\\RestBundle\\Serializer\\Serializer is just an interface. You cannot use it as the class name in your DI configuration. Do you have your own custom serializer class and if so how does it look like? What exactly do you have to customise in the serialisation process?\n. FOS\\RestBundle\\Serializer\\Serializer is just an interface. You cannot use it as the class name in your DI configuration. Do you have your own custom serializer class and if so how does it look like? What exactly do you have to customise in the serialisation process?\n. @araines We have the SymfonySerializerAdapter which is responsible to build the bridge between our interface and the Symfony Serializer component (there is a similar adapter for the JMSSerializer). I hope this helps you achieving what you are aiming for. But feel free to ask further questions if anything is not clear (enough).\n. @araines We have the SymfonySerializerAdapter which is responsible to build the bridge between our interface and the Symfony Serializer component (there is a similar adapter for the JMSSerializer). I hope this helps you achieving what you are aiming for. But feel free to ask further questions if anything is not clear (enough).\n. The config file you are pointing to is about lazily loading services. As long as you do not use the ocramius/proxy-manager package, Symfony won't lazy load services.\nHowever, I am not sure if that is actually what you are talking about. Can you clarify a bit more what happens and what you did instead?\n. I guess the only way to prevent that is to configure a group that does not contain the properties that are not initialised. This way, the serializer should try to retrieve them which shouldn't trigger initialisation in Doctrine.\n. Basically this is described on http://jmsyst.com/libs/serializer/master/cookbook/exclusion_strategies#creating-different-views-of-your-objects. That's the part to configure groups for the serializer. And inside FOSRestBundle you can use the ViewResponseListener to configure which groups actually should be used when serializing: http://symfony.com/doc/master/bundles/FOSRestBundle/view_response_listener.html\n. I don't see what we can do in FOSRestBundle here. We just configure the chosen serializer and then let that tool do its job. Though if you can show as an example about how you are able to configure the serializer outside FOSRestBundle that is not possible when using the bundle, we can reconsider that.\nAs a last resort, by the way, you can create your own serializer if none of the available ones matches your needs.\n. I absolutely agree. This looks like one of the WTF moments that we should definitely avoid.\n. symfony/symfony#18255 was merged\n. symfony/symfony#18255 was merged\n. Yeah, looks like it was forgotten.\n@jovobe Would you like to open a pull request?\n. Yeah, looks like it was forgotten.\n@jovobe Would you like to open a pull request?\n. @Ener-Getick Cherry picking the needed commits should solve the issue. Can this also be applied to 1.8?\n. @Ener-Getick Cherry picking the needed commits should solve the issue. Can this also be applied to 1.8?\n. :+1: \n. :+1: \n. Usually I would agree that adding constants to improve the developer experience through auto-completion was a nice improvement. However, in this concrete example I feel that this might lead to the misperception that we only support the given three formats which might confuse people.\n. Usually I would agree that adding constants to improve the developer experience through auto-completion was a nice improvement. However, in this concrete example I feel that this might lead to the misperception that we only support the given three formats which might confuse people.\n. You mean updating the docs? I think that would be good (and we should check if we can trigger a deprecation in 1.8 in case someone use this way).\n. You mean updating the docs? I think that would be good (and we should check if we can trigger a deprecation in 1.8 in case someone use this way).\n. Thank you @jovobe.\n. Thank you @jovobe.\n. @Ener-Getick I am sorry. @jovobe and me missed this when updating #1410. I suggest to merge #1410 as it also adds a test to ensure that the listener behaves as expected and change this to only backport/update the documentation. What do you think?\n. @Ener-Getick I am sorry. @jovobe and me missed this when updating #1410. I suggest to merge #1410 as it also adds a test to ensure that the listener behaves as expected and change this to only backport/update the documentation. What do you think?\n. Thank you @Ener-Getick.\n. Thank you @Ener-Getick.\n. @NadaBen FYI, I have modified your issue to make it readable for anyone trying to help you (note that I didn't have time to look at your issue in detail).\n. @NadaBen FYI, I have modified your issue to make it readable for anyone trying to help you (note that I didn't have time to look at your issue in detail).\n. Imo if you handle the patch request manually, you will need to check on your own if any of the methods of the $updatedServer object returns null before calling the setter of the $server instance.\n. Using the Form component is one way to do that. Otherwise you will have to write some custom code that does that in a more elegant way than writing a lot of if statements.\n. Thank you @Ener-Getick.\n. @Ener-Getick You are right. Thanks for taking care of creating this issue to keep track of it.\n. Let's see what the tests tell us in #1422.\n. fixed by #1422\n. Sounds reasonable to.\n@Ener-Getick As you did that in #1097, do you remember why you did it this way?\n. Yeah, let's do that and document it in the upgrade document.\n. I agree with @Ener-Getick.\n@tarjei Do you think you can make the change?\n. @NadaBen FYI, I have updated your description to make it more readable.\n. Are your custom parameters part of the URL parameters or part of the request body?\n. @NadaBen What does that mean? Which exact steps did you do and what happened then?\n. Please note that we do not have a stable release of FOSRestBundle 2.0 yet. You need require a beta version:\nbash\n$ composer require friendsofsymfony/rest-bundle:~2.0@beta\n. Well, you need Symfony 2.7 or higher (precisely only some components/bundles are actually required by FOSRestBundle). The new bundle version is not compatible with Symfony 2.5.\n. :+1: \n. @sgasser If you do not want to deal with BC breaks right now, you can use 1.8 (which also is in BETA right now) which is compatible with Symfony 2.8.\nNonetheless, we should of course fix the documentation if it is wrong about this.\n. For the record, this option was removed in #1358.\n. The status code depends on the concrete exception being thrown (see http://symfony.com/doc/master/bundles/FOSRestBundle/3-listener-support.html#security-exception-listener):\n\nIt will return 401 for Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException or 403 for Symfony\\Component\\Security\\Core\\Exception\\AccessDeniedException.\n. Thank you @Ener-Getick.\n. @Ener-Getick should then backport this to 1.8 too to minimise the gap between both versions.\n. @Ener-Getick Wouldn't the fix in Symfony be enough?\n. rebased and comments addressed\n. Removing the type hint would be a BC break.\n. @Ener-Getick Oh well, given that 1.8 even doesn't have the type hint, you are actually even more right and we can simply drop it again in 2.0.\n. see #1477\n. To me this is a bug fix and should be merged in 1.7 as this is currently the only stable version we have.\n\n@fprochazka Can you revert the change to the docs here?\n. :+1: \n. I am not convinced that this feature belongs to the bundle. If it is currently not possible to easily implement this in userland code, I think we should rather think about exposing clean extension points to make it possible.\n. @Ener-Getick Thanks for taking care of this. I somehow missed your comment in the other PR.\n. @hshn Thanks for fixing this. But can you please revert the CS changes (we updated the StyleCI config recently so this shouldn't be necessary anymore)?\n. @hshn Thank you! I'll merge the 1.7 branch up to 1.8, 2.0, and master tonight. After that this should work.\n. @hshn I have merged things up. Can you rebase here and thus trigger the hooks again?\n. :+1:\n. Thank you @phansys!\n. @Ener-Getick @lsmith77 Can anyone of you update the repo description?\n. This sounds wird. The AppKernel class is part of the Symfony Standard Edition. How did you initially set up your application?\n. @lsmith77 @Ener-Getick I wonder if we should not rather backport #1182 to the 1.8 branch instead. The PR looks fully backwards compatible to me. What do you think?\n. Thank you @hpatoio.\n. Hm, need to check why tests are failing.\n. Okay, tests finally pass.\n. You can try to disable other bundles you use to see if they influence the configuration.\n. I don't think that we need to support both versions as the CS fixer is only required as a dev dependency.\n. @Lumbendil What is the exact path that you are trying? What output do you get when using the router:match command with that path?\n. If someone of you could provide a small project that makes it possible to reproduce your issue, we could look into where the issue actually lies and try to solve it. That would be great. :). @Ener-Getick Shouldn't we do this for the 1.7 branch first?\n. Apparently we may have to dicuss that. :)\n. @Ener-Getick Let me do that for you. ;) Thanks!\n. @Ener-Getick Let me do that for you. ;) Thanks!\n. \ud83d\udc4d \n. All releases of FOSRestBundle can be used on PHP 7. Did you experience any problems?\n. :+1:\n. Thank you @Rewieer. FYI, I have merged your PR into the 2.0 branch as this was the version where we introduced the ControllerTrait. From there everything will be merged up to the master branch soon.\n. Sounds like a good idea. A comment may be needed to explain that this might not be supported by adapters (or we could make this comment even more generic so that it applies to the Context class as a whole).\n. Sounds like a good idea. A comment may be needed to explain that this might not be supported by adapters (or we could make this comment even more generic so that it applies to the Context class as a whole).\n. This was implemented in #1583.\n. This was implemented in #1583.\n. Closing as the problem seems to have been solved.\n@abimelex Please let us know if you think that we still need to fix something.\n. In general this looks good so far. I have just left some minor comments.\nOn a general note: I would be in favour to reword the chapter to not be in the first person perspective. That would be more inline with the rest of the documentation.\n. Without more information (the best would be a reproducable application) we won't be able to help you.. This was fixed by #1585.\n. This was fixed by #1585.\n. Wouldn't it be better to then let the decoder provider decide whether or not support this content type and let the already existing exception mechanism step into?\n. @aaronahearne Can you please check if #1591 fixes this issue for you?\n. The Context class is part of our abstraction layer. Cluttering it with implementation-specific (JMS-specific here) code goes against this abstraction. I think a proper solution would be to ship our own ExclusionStrategy interface and let the concrete adapters deal with the implementation-specific stuff.\nThis way we could also easily update the Symfony Serializer integration if at some time in the future the Symfony Serializer component ships with a similar feature.\n. The Context class is part of our abstraction layer. Cluttering it with implementation-specific (JMS-specific here) code goes against this abstraction. I think a proper solution would be to ship our own ExclusionStrategy interface and let the concrete adapters deal with the implementation-specific stuff.\nThis way we could also easily update the Symfony Serializer integration if at some time in the future the Symfony Serializer component ships with a similar feature.\n. Imagine the Symfony Serializer got exclusion strategies in the future too? Due to the JMS type hint we would have to add new methods for the Symfony implementation serving the same purpose but with a different signature. Or what do we do when we want to support more implementations (for example, ivory/serializer? This would lead in the same direction. If we went this way, the Context class could become a huge mess.\n. But what would the less stricter type hint? There is no common base interface that we could use. Which means that we would then be forced to remove the type hint at all.\nWhat exactly do you mean with the attributes concept? I mean what do you envision?\n. We couldn't add the interface to the type hint (except if there was a common base interface for both implementations which doesn't seem very likely). So effectively we would have to remove the type hint. I am not convinced if that were the better option. At least it would make it harder to find some bugs in userland code.\nSpeaking about the attributes: Making this change would be compatible with how the Symfony serializer handles groups and attributes. So it would make the behaviour more consistent with this implementation (you couldn't have a custom groups attribute here anyway). However, we would introduce a small BC break for the JMS serializer like you said. I am actually not completely sure if we should go that way (it may confuse people who are used to the JMS serializer that there are some attributes that have a special meaning).\n. We could add the tag inside the DI extension instead of here. This way we could select the tag attributes based on the installed version of the Form component.\n. We could add the tag inside the DI extension instead of here. This way we could select the tag attributes based on the installed version of the Form component.\n. see #1598\n. see symfony/symfony#15748 and the related pull requests for some context\n. see symfony/symfony#15748 and the related pull requests for some context\n. Well, the code will still work. So I think it's not needed to intentionally break people's apps. But as they won't get any Symfony support anymore it's imo okay to not focus on this release too much.\n. Well, the code will still work. So I think it's not needed to intentionally break people's apps. But as they won't get any Symfony support anymore it's imo okay to not focus on this release too much.\n. @Ener-Getick For now, I failed to create a proper test (admittedly I didn't invest too much time in it). Do you have time to take over?\n. Closing here for the reasons given in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1594#issuecomment-253753014.\nBy the way, you don't have to merge branches up yourself. We usually do that from time to time after having merged some pull requests. :)\n. Thank you for reporting this issue @edefimov. However, I am closing here as this will be fixed by willdurand/Negotiation#87.\n. Imo that's not really necessary. Noone should use a version constraint that is so restrictive in that it only allows 2.2.0, but denies 2.2.1. The thing is that each conflict rule we add will add more workload to Composer's solver without much added benefit imo.\n@lsmith77 @Ener-Getick What do you think?\n. Thanks for trying to fix this issue @shakly. But I am closing here as the cause was a mistake in the negotiation library and has been fixed by its 2.2.1 release.\n. @Ener-Getick You are right. I removed my commit and kept only the one from #1229.\n. \ud83d\udc4d after the small typo fix\n. @Ener-Getick Not sure what you mean. What do you wanna fix?\n. In what or do you enable the FOSRestBundle and JMSSerializerBundle in the kernel class?\n. Thank you @toby-griffiths! I rebased your changes while merging them into the 2.0 branch (from there we will merge them up to the master branch).\n. This indeed looks like an issue to me. I suggest to split the VersionListener to fix this bug. The existing VersionListener should only be responsible to set the version request attribute when necessary. We can then introduce a new event listener that is executed after the VersionListener and sets the view handler's exclusion strategy version based on the request's version attribute (if set).\n. @GuilhemN But we actually do not need to resolve the attribute anymore. We get that for free thanks to the Symfony routing system. So I don't think we should add this resolver at all.\n. That would work too.\n. \ud83d\udc4d failures do not seem to be related. I would say this is a bugfix. Question is how likely is it that someone relied on the previous behaviour?. @alcaeus Can you rebase on the latest master branch?. @alcaeus Can you rebase on the latest master branch?. never mind, it was easy to do, see #1973. never mind, it was easy to do, see #1973. Did you put the routes containing options specific to FOSRestBundle in a separate file and then loaded that file with the type: rest option?. Unfortunately, I don't think there is another solution currently.\n@GuilhemN @lsmith77 I could imagine that we make it possible to let the DirectoryRouteLoader load a bunch of configuration files (be it PHP, XML, or YAML) from a directory too (or write a dedicated loader for that). What do you think?. Not sure how common this is. I usually stick with annotations. However, adding a new loader should not really hurt if someone is willing to provide a pull request.. #1626 should also fix the issue.. Closing as this indeed looks like it was posted on the wrong repository.. @GuilhemN I would prefer if we could split this PR into two commits. One for the code style changes and one for the actual fix which would make it easier to use git blame in the future.. @GuilhemN I would prefer if we could split this PR into two commits. One for the code style changes and one for the actual fix which would make it easier to use git blame in the future.. Fine for me. This will allow us to add/remove dependencies in the future without having to potentially realign all other lines.. Can you show the stack trace of this error? Is it happening when FOSRestBundle tries to serialise stuff or when you are doing some custom serialisation?. Can you show the stack trace of this error? Is it happening when FOSRestBundle tries to serialise stuff or when you are doing some custom serialisation?. Thanks, could you also please show your FOSRestBundle configuration?. Thanks, could you also please show your FOSRestBundle configuration?. @GuilhemN Not completely sure, but it seems so.. @GuilhemN Not completely sure, but it seems so.. @stof That should be resolved by #1622.. @Yoann53 Does #1622 fix your issue?. Though I think that we could indeed improve this sentence to become something like this:\nThe one you configured using the fos_rest.service.serializer option (if you did).\nBeware that you will probably have to rebase your changes on the 2.0 branch (the service/services mismatch is already solved on that branch).. Though I think that we could indeed improve this sentence to become something like this:\nThe one you configured using the fos_rest.service.serializer option (if you did).\nBeware that you will probably have to rebase your changes on the 2.0 branch (the service/services mismatch is already solved on that branch).. symfony/symfony#20995 has been merged.. \ud83d\udc4d . \ud83d\udc4d . Indeed, we did not update the changelog file very often and we should change that. However, maybe you find all the information you need in the upgrade file.. Indeed, we did not update the changelog file very often and we should change that. However, maybe you find all the information you need in the upgrade file.. @juillerat Thank you for your report. Would you be able to provide a small reproducable example?. @juillerat Thank you for your report. Would you be able to provide a small reproducable example?. The \"Called Listeners\" tab could be interesting too. It could be that another listener is catching the event and prevents other listeners from being executed.. It looks like your controller doesn't throw an exception, but just returns a response. So there's no need for the listener to be executed.. Well, this listener is all about dealing the exceptions that occur when access is denied. But when that never happens there is no need for the listener to be executed. The only thing that changed with 2.0 is that the listener itself won't create a response anymore, but you will have to turn the exception option on to let the ExceptionController deal with that matter. However, if there is no exception triggered, there is no need to run all this logic.. @juillerat Do you think you will be able to finish here? Otherwise, please feel free to say so and we will happily finish this one for you. :). Thank you for this PR. However, this change is not necessary as it is already covered by the autoload section. Did you experience any issue this would solve?. What do you think if we set the parameter in a compiler pass instead to completely prevent those WTF moments?. We should solve the issue somehow. But we need to deeper think about a proper solution.. I am not sure if we have enough features for a new minor version. At least, we should first agree on if and for how long we then maintain already existing 2.x minor versions. Added to that I am uncertain if we should continue the discussion started in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1583#issuecomment-253018931.. Does #1769 fix this?. Does #1769 fix this?. Should we really apply this latch so broadly? It could break applications where people rely on the aliases being public.. I am not sure. They shouldn't, but that doesn't it's not happening. But we could agree on this being an unsupported use case and make the changes you suggested nonetheless.. :+1: let's do it then :). @cfoehrdes That sounds interesting. I would be happy to review a PR proposing this.. \ud83d\udc4d . fixed in #1669. Does it help to define zones so that the OAuth routes are not covered by any zone?. Can you explain what you mean with \"access token\"? If we are talking about authentication and authorisation, then that's nothing related to FOSRestBundle as this bundle does not deal with the Security layer at all. This is the responsibility of Symfony's Security component and you can configure/customise it to fit whatever use case you have.. That's nothing really specific to FOSRestBundle IMO. If you want to do this in Symfony, you can register an event listener that handles the kernel.request event, performs some check and returns the response before it actually reaches your controllers. But of course you can as well handle this in a dedicated server/in the web server (Nginx or Apache should be able to do that) or whatever you prefer.. The JsonResponse class is a child class of the base Response class from the HttpFoundation component. A controller's job in any Symfony application is to create and return a Response instance. In all other cases, the kernel dispatches the kernel.view event. The BodyListener from FOSRestBundle is one of those listeners. If you need to treat PSR-7 responses differently, you need to register your own listener with a higher priority and handle these objects yourself.. Do you use JMSDiExtraBundle?. Do you register your controllers as services? If yes, what does your config look like? Can you also show the code of your controller?. Can someone of you create a small example project that makes it easily possible to reproduce your issue?. Thank you for providing this useful example. I think I was able to reproduce the issue. Can you please check if symfony/symfony#23239 fixes it for you?. Symfony 3.3.3 containing this fix was released.. Symfony 3.3.3 containing this fix was released.. Are you using JMSDiExtraBundle?. Then it's probably related to their code. I don't know if they ever fixed the issue on their side.. Thank you Tobias.. But the goal is to use the controller as a service. This is just a workaround around some inconsistency in FrameworkBundle's ControllerResolver implementation. And I am not really convinced that this is the right fix. Probably it's just wrong that setContainer() is called for a controller being registered as a service, but I am not sure we should revert that now.. We should probably only do this when the id equals the class.. It seems tests are passing now. :). closing as symfony/symfony#23239 has been merged. closing as symfony/symfony#23239 has been merged. Do you have any service where you used to inject the fos_rest.view_handler.default service before and now rely on autowiring doing the job for you?. Do you have any service where you used to inject the fos_rest.view_handler.default service before and now rely on autowiring doing the job for you?. Can you try out the changes from #1763?. We could. Do you find that more readable?. We could. Do you find that more readable?. @GijsL Yes, I think it's better to move the discussion into a new issue.. @GijsL Yes, I think it's better to move the discussion into a new issue.. @GuilhemN of course, I'll take care of it. I guess this needs to be fixed in JMSSerializerBundle by executing the JMSHandlersPass earlier.. I guess this needs to be fixed in JMSSerializerBundle by executing the JMSHandlersPass earlier.. It's present here: https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/DependencyInjection/Configuration.php#L106 Can you show the output of composer show for your project?. It's present here: https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/DependencyInjection/Configuration.php#L106 Can you show the output of composer show for your project?. Oh well, it looks like we in fact did not tag a new release since then.. Oh well, it looks like we in fact did not tag a new release since then.. Can you add a test case to prevent future regressions?. Can you add a test case to prevent future regressions?. Not sure I completely understand. You mean that you don't get any violation when issuing POST requests, but it's emitted when using PUT instead?. This looks weird. Can you create a small example project that allows to reproduce your issue?. Looks like you now need to update some tests too. And we should also document the deprecations in the changelog file for the next release.. Please try the debug:router command to find out if your routes are actually registered at all.. Please try the debug:router command to find out if your routes are actually registered at all.. Actually, you were trying to access /api/configurazione/1 while the configured path pattern was /api/configuraziones/{id} (notice the extra \"s\").. Actually, you were trying to access /api/configurazione/1 while the configured path pattern was /api/configuraziones/{id} (notice the extra \"s\").. I don't see why we would want to do that. Not enumerating items statically has the advantage than we can delete/add items in the middle without having to adjust all other items.. I don't see why we would want to do that. Not enumerating items statically has the advantage than we can delete/add items in the middle without having to adjust all other items.. I see. Thanks for the hint. Actually, we currently have three lists with one item each. Indenting the other paragraphs of the items will solve that (see my inline comment above).. Would you mind to open a PR? We would need to add your check after the existing one (we need to keep it for PHP 5.x compatibility)?. I guess both issues have the same cause. So no need for a new issue IMO.. Thank you @pculka.. @juliusstoerrle Feel free to propose a PR.. Thank you @tomaszhanc.. Thank you @tomaszhanc.. I guess you meant #1779 :). decoder_mango must be the name of your custom service that implements the DecoderInterface.. Thank you @mmoll.. Thank you @connorhu. I am closing here nonetheless as the same issue will already be fixed by #1773.. What kind of error message do you get?. Does #1769 fix it?. Does #1769 fix it?. Thank you @gabriel-caruso.. I think we should make a case by case decision. Is each service actually meant to be used by third party code? Or is it only there for internal purposes? Services that are actually meant to be used could be turned to public to still allow users to make use of service location with the Symfony container. For the latter, we IMO don't need to do anything as users will see a deprecation with Symfony 3.4.. Does that happen when using Symfony 3.4 or 4.0? Would you be able to create a small reproducing project?. > Are there any services a consumer needs?\nI don't have any in mind. Could also be that none of them really needs to be exposed (at least there shouldn't be many that should turned into public ones).. Could you downgrade to Symfony 3.4 and check for the exact deprecation message (there should be one)?. I had a look at the code and I wonder how this can happen. As far as I can see, the service seems to be set to public: https://github.com/FriendsOfSymfony/FOSRestBundle/blob/3e65ef5f5cef2ecc6f6a18d204dc5193f0feb272/DependencyInjection/FOSRestExtension.php#L246. Cool, thanks for confirming. I leave this ticket open though as we still have to look into other services we may try to retrieve from the container.. I agree with @stof. See #1793 for the implementation.. I agree with @stof. See #1793 for the implementation.. looks like that could be solved with schmittjoh/JMSSerializerBundle#618. looks like that could be solved with schmittjoh/JMSSerializerBundle#618. Can you publish a small example project that makes it possible to reproduce it?. Can you publish a small example project that makes it possible to reproduce it?. Thank you! I am going to check that.. Thank you! I am going to check that.. @juliusstoerrle Just to give you quick feedback: I was able to reproduce the issue you reported with your application. Thanks for that. \ud83d\udc4d I also managed to identify one issue, but there's still some things more to fix. I'll keep you updated.. @juliusstoerrle Just to give you quick feedback: I was able to reproduce the issue you reported with your application. Thanks for that. \ud83d\udc4d I also managed to identify one issue, but there's still some things more to fix. I'll keep you updated.. Please take a look at #1805 which will solve the first issue I was able to identify.. Please take a look at #1805 which will solve the first issue I was able to identify.. @juliusstoerrle I guess that's just related to the pending changes in schmittjoh/JMSSerializerBundle#618.. @juliusstoerrle I guess that's just related to the pending changes in schmittjoh/JMSSerializerBundle#618.. @XWB Thanks for the hint with the FOSCommentBundle builds. It allowed me to find the root cause which was now fixed by #1840.. Yes, we already discussed that. We'll publish a new 2.3 release by the end of this week.. Even when tests pass, we get some logging output like this (that's related to symfony/symfony#24300):\n```\n$ vendor/bin/simple-phpunit\nPHPUnit 5.7.25 by Sebastian Bergmann and contributors.\nTesting FOSRestBundle test suite\n...............................................................  63 / 389 ( 16%)\n............................................................... 126 / 389 ( 32%)\n................................................2017-11-25T09:02:02+00:00 [info] Matched route \"test_allowed_methods2\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.response\" to listener \"FOS\\RestBundle\\EventListener\\AllowedMethodsListener::onKernelResponse\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n..2017-11-25T09:02:11+00:00 [info] Matched route \"_profiler_search_results\".\n2017-11-25T09:02:11+00:00 [info] Populated the TokenStorage with an anonymous Token.\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\MimeTypeListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\VersionListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RouterDataCollector::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RequestDataCollector::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\SecurityListener::onKernelControllerArguments\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:11+00:00 [info] Matched route \"_profiler_search_bar\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\MimeTypeListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\VersionListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RouterDataCollector::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RequestDataCollector::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\SecurityListener::onKernelControllerArguments\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"FOS\\RestBundle\\EventListener\\AllowedMethodsListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RequestDataCollector::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\Security\\Http\\Firewall\\ContextListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Bundle\\WebProfilerBundle\\EventListener\\WebDebugToolbarListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener::onKernelFinishRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"FOS\\RestBundle\\EventListener\\AllowedMethodsListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RequestDataCollector::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Bundle\\WebProfilerBundle\\EventListener\\WebDebugToolbarListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener::onKernelFinishRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.terminate\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener::onKernelTerminate\".\n..2017-11-25T09:02:15+00:00 [info] Matched route \"test_serializer_error_exception\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [critical] Uncaught PHP Exception LogicException: \"Something bad happened.\" at /Users/christian/projects/FOSRestBundle/Tests/Functional/Bundle/TestBundle/Controller/SerializerErrorController.php line 30\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.exception\" to listener \"FOS\\RestBundle\\EventListener\\ExceptionListener::onKernelException\".\n2017-11-25T09:02:15+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ExceptionListener::onKernelException\" stopped propagation of the event \"kernel.exception\".\n2017-11-25T09:02:15+00:00 [debug] Listener \"Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener::onKernelException\" was not called for event \"kernel.exception\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:19+00:00 [error] Uncaught PHP Exception Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException: \"No route found for \"GET /api/test\"\" at /Users/christian/projects/FOSRestBundle/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php line 139\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.exception\" to listener \"FOS\\RestBundle\\EventListener\\ExceptionListener::onKernelException\".\n2017-11-25T09:02:19+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ExceptionListener::onKernelException\" stopped propagation of the event \"kernel.exception\".\n2017-11-25T09:02:19+00:00 [debug] Listener \"Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener::onKernelException\" was not called for event \"kernel.exception\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:19+00:00 [error] Uncaught PHP Exception Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException: \"No route found for \"GET /test\"\" at /Users/christian/projects/FOSRestBundle/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php line 139\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.exception\" to listener \"FOS\\RestBundle\\EventListener\\ExceptionListener::onKernelException\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.exception\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener::onKernelException\".\n2017-11-25T09:02:19+00:00 [debug] Listener \"Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener::onKernelException\" stopped propagation of the event \"kernel.exception\".\n2017-11-25T09:02:20+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:20+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:20+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:20+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:20+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:20+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher_test\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher_file_test\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher_file_test\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher_file_collection_test\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher_image_collection_test\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n. 189 / 389 ( 48%)\n2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher_image_collection_test\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:27+00:00 [info] Matched route \"request_body_param_converter\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:27+00:00 [info] Matched route \"_twig_error_test\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:30+00:00 [info] Matched route \"get_post\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:30+00:00 [info] Matched route \"get_comment\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n............2017-11-25T09:02:34+00:00 [info] Matched route \"version\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\MimeTypeListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\VersionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\".\n2017-11-25T09:02:34+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\" stopped propagation of the event \"kernel.view\".\n2017-11-25T09:02:34+00:00 [debug] Listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelView\" was not called for event \"kernel.view\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:34+00:00 [info] Matched route \"test_version\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\MimeTypeListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\VersionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\".\n2017-11-25T09:02:34+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\" stopped propagation of the event \"kernel.view\".\n2017-11-25T09:02:34+00:00 [debug] Listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelView\" was not called for event \"kernel.view\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:34+00:00 [info] Matched route \"test_version\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\MimeTypeListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\VersionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\".\n2017-11-25T09:02:34+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\" stopped propagation of the event \"kernel.view\".\n2017-11-25T09:02:34+00:00 [debug] Listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelView\" was not called for event \"kernel.view\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:35+00:00 [info] Matched route \"test_version\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\MimeTypeListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\VersionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\".\n2017-11-25T09:02:35+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\" stopped propagation of the event \"kernel.view\".\n2017-11-25T09:02:35+00:00 [debug] Listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelView\" was not called for event \"kernel.view\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:35+00:00 [info] Matched route \"test_version\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\MimeTypeListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\VersionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\".\n2017-11-25T09:02:35+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\" stopped propagation of the event \"kernel.view\".\n2017-11-25T09:02:35+00:00 [debug] Listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelView\" was not called for event \"kernel.view\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:35+00:00 [info] Matched route \"test_version_path\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\MimeTypeListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\VersionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\".\n2017-11-25T09:02:35+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\" stopped propagation of the event \"kernel.view\".\n2017-11-25T09:02:35+00:00 [debug] Listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelView\" was not called for event \"kernel.view\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:39+00:00 [info] Matched route \"post_articles\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\".\n2017-11-25T09:02:39+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\" stopped propagation of the event \"kernel.view\".\n2017-11-25T09:02:39+00:00 [debug] Listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelView\" was not called for event \"kernel.view\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:39+00:00 [info] Matched route \"get_articles\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\".\n2017-11-25T09:02:39+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\" stopped propagation of the event \"kernel.view\".\n2017-11-25T09:02:39+00:00 [debug] Listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelView\" was not called for event \"kernel.view\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n...................................... 252 / 389 ( 64%)\n............................................................... 315 / 389 ( 80%)\n............................................................... 378 / 389 ( 97%)\n...........                                                     389 / 389 (100%)\nTime: 1.64 minutes, Memory: 44.00MB\nOK (389 tests, 1738 assertions)\nLegacy deprecation notices (6)\n```. Even when tests pass, we get some logging output like this (that's related to symfony/symfony#24300):\n```\n$ vendor/bin/simple-phpunit\nPHPUnit 5.7.25 by Sebastian Bergmann and contributors.\nTesting FOSRestBundle test suite\n...............................................................  63 / 389 ( 16%)\n............................................................... 126 / 389 ( 32%)\n................................................2017-11-25T09:02:02+00:00 [info] Matched route \"test_allowed_methods2\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.response\" to listener \"FOS\\RestBundle\\EventListener\\AllowedMethodsListener::onKernelResponse\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:02+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n..2017-11-25T09:02:11+00:00 [info] Matched route \"_profiler_search_results\".\n2017-11-25T09:02:11+00:00 [info] Populated the TokenStorage with an anonymous Token.\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\MimeTypeListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\VersionListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RouterDataCollector::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RequestDataCollector::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\SecurityListener::onKernelControllerArguments\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:11+00:00 [info] Matched route \"_profiler_search_bar\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\MimeTypeListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\VersionListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener::onKernelRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RouterDataCollector::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RequestDataCollector::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\SecurityListener::onKernelControllerArguments\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"FOS\\RestBundle\\EventListener\\AllowedMethodsListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RequestDataCollector::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\Security\\Http\\Firewall\\ContextListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Bundle\\WebProfilerBundle\\EventListener\\WebDebugToolbarListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener::onKernelFinishRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"FOS\\RestBundle\\EventListener\\AllowedMethodsListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RequestDataCollector::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Bundle\\WebProfilerBundle\\EventListener\\WebDebugToolbarListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener::onKernelFinishRequest\".\n2017-11-25T09:02:11+00:00 [debug] Notified event \"kernel.terminate\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener::onKernelTerminate\".\n..2017-11-25T09:02:15+00:00 [info] Matched route \"test_serializer_error_exception\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [critical] Uncaught PHP Exception LogicException: \"Something bad happened.\" at /Users/christian/projects/FOSRestBundle/Tests/Functional/Bundle/TestBundle/Controller/SerializerErrorController.php line 30\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.exception\" to listener \"FOS\\RestBundle\\EventListener\\ExceptionListener::onKernelException\".\n2017-11-25T09:02:15+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ExceptionListener::onKernelException\" stopped propagation of the event \"kernel.exception\".\n2017-11-25T09:02:15+00:00 [debug] Listener \"Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener::onKernelException\" was not called for event \"kernel.exception\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:15+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:19+00:00 [error] Uncaught PHP Exception Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException: \"No route found for \"GET /api/test\"\" at /Users/christian/projects/FOSRestBundle/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php line 139\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.exception\" to listener \"FOS\\RestBundle\\EventListener\\ExceptionListener::onKernelException\".\n2017-11-25T09:02:19+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ExceptionListener::onKernelException\" stopped propagation of the event \"kernel.exception\".\n2017-11-25T09:02:19+00:00 [debug] Listener \"Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener::onKernelException\" was not called for event \"kernel.exception\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:19+00:00 [error] Uncaught PHP Exception Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException: \"No route found for \"GET /test\"\" at /Users/christian/projects/FOSRestBundle/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php line 139\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener::__invoke\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.exception\" to listener \"FOS\\RestBundle\\EventListener\\ExceptionListener::onKernelException\".\n2017-11-25T09:02:19+00:00 [debug] Notified event \"kernel.exception\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener::onKernelException\".\n2017-11-25T09:02:19+00:00 [debug] Listener \"Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener::onKernelException\" stopped propagation of the event \"kernel.exception\".\n2017-11-25T09:02:20+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:20+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:20+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:20+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:20+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:20+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher_test\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher_file_test\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher_file_test\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher_file_collection_test\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher_image_collection_test\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n. 189 / 389 ( 48%)\n2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher_image_collection_test\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:23+00:00 [info] Matched route \"test_param_fetcher\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:23+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:27+00:00 [info] Matched route \"request_body_param_converter\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:27+00:00 [info] Matched route \"_twig_error_test\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:27+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:30+00:00 [info] Matched route \"get_post\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:30+00:00 [info] Matched route \"get_comment\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:30+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n............2017-11-25T09:02:34+00:00 [info] Matched route \"version\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\MimeTypeListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\VersionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\".\n2017-11-25T09:02:34+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\" stopped propagation of the event \"kernel.view\".\n2017-11-25T09:02:34+00:00 [debug] Listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelView\" was not called for event \"kernel.view\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:34+00:00 [info] Matched route \"test_version\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\MimeTypeListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\VersionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\".\n2017-11-25T09:02:34+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\" stopped propagation of the event \"kernel.view\".\n2017-11-25T09:02:34+00:00 [debug] Listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelView\" was not called for event \"kernel.view\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:34+00:00 [info] Matched route \"test_version\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\MimeTypeListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\VersionListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\".\n2017-11-25T09:02:34+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\" stopped propagation of the event \"kernel.view\".\n2017-11-25T09:02:34+00:00 [debug] Listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelView\" was not called for event \"kernel.view\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:34+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:35+00:00 [info] Matched route \"test_version\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\MimeTypeListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\VersionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\".\n2017-11-25T09:02:35+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\" stopped propagation of the event \"kernel.view\".\n2017-11-25T09:02:35+00:00 [debug] Listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelView\" was not called for event \"kernel.view\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:35+00:00 [info] Matched route \"test_version\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\MimeTypeListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\VersionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\".\n2017-11-25T09:02:35+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\" stopped propagation of the event \"kernel.view\".\n2017-11-25T09:02:35+00:00 [debug] Listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelView\" was not called for event \"kernel.view\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:35+00:00 [info] Matched route \"test_version_path\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\MimeTypeListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\VersionListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\".\n2017-11-25T09:02:35+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\" stopped propagation of the event \"kernel.view\".\n2017-11-25T09:02:35+00:00 [debug] Listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelView\" was not called for event \"kernel.view\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:35+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:39+00:00 [info] Matched route \"post_articles\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\".\n2017-11-25T09:02:39+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\" stopped propagation of the event \"kernel.view\".\n2017-11-25T09:02:39+00:00 [debug] Listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelView\" was not called for event \"kernel.view\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n.2017-11-25T09:02:39+00:00 [info] Matched route \"get_articles\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener::configure\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SessionListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\FormatListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\ResolveControllerNameSubscriber::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelController\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelController\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.controller_arguments\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener::onKernelControllerArguments\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\".\n2017-11-25T09:02:39+00:00 [debug] Listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\" stopped propagation of the event \"kernel.view\".\n2017-11-25T09:02:39+00:00 [debug] Listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener::onKernelView\" was not called for event \"kernel.view\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TestSessionListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\".\n2017-11-25T09:02:39+00:00 [debug] Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\".\n...................................... 252 / 389 ( 64%)\n............................................................... 315 / 389 ( 80%)\n............................................................... 378 / 389 ( 97%)\n...........                                                     389 / 389 (100%)\nTime: 1.64 minutes, Memory: 44.00MB\nOK (389 tests, 1738 assertions)\nLegacy deprecation notices (6)\n. requires symfony/symfony#25168 to work. requires symfony/symfony#25168 to work. [This information](https://travis-ci.org/FriendsOfSymfony/FOSRestBundle/jobs/307877898#L577-L603) was lost previously.. [This information](https://travis-ci.org/FriendsOfSymfony/FOSRestBundle/jobs/307877898#L577-L603) was lost previously.. @kunicmarko20 does symfony/symfony#25231 fix your issue?. @kunicmarko20 does symfony/symfony#25231 fix your issue?. @juliusstoerrle Thanks for confirming. I might have to sync your example project with the other pending changes in JMS Serializer again, but IIRC I still got some errors this weekend.. @juliusstoerrle Thanks for confirming. I might have to sync your example project with the other pending changes in JMS Serializer again, but IIRC I still got some errors this weekend.. @GuilhemN What do you think?. @GuilhemN What do you think?. Thank you @IndraGunawan..yaml\nrest:\n    resource: '@RestBundle/Controller'\n    type: rest\n```\nDid you try something like this?. I think we should investigate if we could move/copy some logic to FOSRestBundle.. Can you confirm that the change proposed in #1834 will give a better error message?. @DavidGarciaCat #1834 is not the solution. It's just there to provide a better feedback on how to work around the issue for the moment.\nAs written in https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1812#issuecomment-355236147 the real solution IMO is to implement some of the logic of the TemplateListener from SensioFrameworkExtraBundle ourselves. But that requires a bit more effort.. @rokkie That should not happen. Can you show the configuration that you use and the error you end up with?. I am sorry, but that code is part of the SensioFrameworkExtraBundle. However, looking at the code it seems that they made that part of the bundle compatible with Symfony 4 in more recent releases. So just updating that bundle could possibly solve your issue.. Tests just don't pass yet as there are some more issues with the current implementation and I didn't find the time to finish it yet.. This was fixed in #1840.. Seems like you need to update the version of FOSRestBundle that you use.. Thank you @carusogabriel.. Which version of jms/serializer do you use?. I am talking about the version of JMS Serializer not the version of FOSRestBundle.. And I do not mean the serializer bundle but the library. Please show the output of composer show.. Oh I see, you are working on top of #1805. Thanks for catching this. The Travis CI build is currently failing with the same error. I am going to see how we can fix this.. @sanchobouillant Can you please try the latest changes from #1805? The issue you reported here shouldn't happen anymore.. Does this also happen when you switch to dev-master? If so, are you able to create a small project that allows to reproduce your issue?. I am closing here as the reported issue has been solved. The other issue will already be covered by  #1812.. @GuilhemN Is that really necessary? I don't see anything that requires us to rely on this switch.. I checked the history of the annotation and this was indeed changed on intent in the past to allow controllers to be services (see #604 and #646). I think if we were to make this change, we should bump requirements to at least 3.4 at the same time. An alternative solution would mean to ship our own annotation route loader and deprecate the service option there. That's probably a bit too much here.. see sensiolabs/SensioFrameworkExtraBundle#441. @XWB Not yet, I started to investigate locally, but didn't come to a solution right now.. Thank you @XWB.. @XWB FYI, the deps=low tests broke in #1805. Changing the type of the compiler pass again would make the test green, but that would of course bring back the issue that was fixed there.. cleaning the Travis CI cache resolved the underlying issue. > then it seems the FormatListeners of Symfony and FOSRest crash upon each other and from the REST controllers you cannot output a simple array which corresponds to a json output, as the Symfony expects to find a corresponding template, which is defined as an empty string.\nDo you mean something like what is described in #1812?. I would rather add doctrine/common as a dependency then because that is what we need here.. Thinking about this again, I wonder if we just modify the code instead. I mean we do not need to use the ClassUtils::getClass() method if Doctrine is not installed. In these cases, just using get_class() should be sufficient.. What do you mean with \"i am getting an unexpected '<' \"?. Please show the log of the failing request.. It's probably going to be published by the end of this week.. 2.3.1 was published a few days ago.. The remaining failures will be fixed by symfony/symfony#25471.. Did you install the Validator component?. Does it change anything if you change the config for SensioFrameworkExtraBundle to something like this:\nyaml\nsensio_framework_extra:\n    view: { annotations: true }. You probably also need to install and enable the TwigBundle.. Can you try the latest master? If that still does not work, are you able to create a small project that allows to reproduce the issue?. Thanks for the feedback. Closing here then.. The latest master branch (not tagged yet) should be usable with Symfony 4. If you experience any errors, please feel free to open dedicated issues.. @FabulousCo Can you please check if your issue is the same as #1538 and thus would be fixed by #1692?. Thanks for the confirmation. This at least means, that the decoration approach we favour will probably solve our issues.. I am closing here as we do run tests with PHP 7.2 since #1900. Thanks for your work.. Can you explain what exactly does not work?. Sorry, but with this little information I am afraid I will not be able to help you. Maybe it's easier to explain your problem by pushing a small example project that shows what is not working for you.. @Tobion Sadly, exactly that commit broke our test suite (I didn't notice before merging), see https://travis-ci.org/FriendsOfSymfony/FOSRestBundle/jobs/317959484. So I am a bit reluctant in making a tag in this state.. should be fixed by #1873 . To be more clear: updating to 2.3.1 should help you. If you are using Symfony Flex, the config/bundles.php file does not have to be changed manually. I would omit that part and just reword the existing paragraph to explain that the step is only necessary if you do not use Flex.. Can you create a small example application that allows to reproduce your issue?. fixed by #1873 . fixed by #1873 . I agree with @simsComputing that this looks related to JMSSerializerBundle (or maybe the underlying serializer library). Thus I am closing here.. How do you load the routes? Where does the configuration of the admin/user prefix happen?. thanks for letting us know. Thanks for investigating the failures @XWB. Closing in favour of #1873.. I think this was just missed when implementing setGroups().. Sorry, I don't understand what you mean.. @TemirkhanN Your solution would not replace existing groups. But in general, I would not consider a change that ensures unique groups when calling setGroups() a BC break.. I am not sure I understand why this change is necessary. Can we create a test case that proves that these changes are indeed needed?. With the changes done in #1834 you should not see the reflection error anymore. Can you confirm that?. When I remove TwigBundle in your example application and update FOSRestBundle to the latest dev version, I see this:\nExecuting script cache:clear [KO]\n [KO]\nScript cache:clear returned with error code 1\n!!  \n!!  In ConfigurationCheckPass.php line 36:\n!!                                                                                 \n!!    You must enable the SensioFrameworkExtraBundle view annotations to use the   \n!!    ViewResponseListener. Did you forget to install and enable the TwigBundle?   \n!!                                                                                 \n!!  \n!!. Indeed, so with the new release you will see a better error message which makes clear that you (currently) need the bundle. And we have an open ticket that this could be improved internally, so we do not need the bundle.. @XWB here we go \ud83c\udf89 . @Tobion yes, updating to 2.3.1 should help. Thank you @XWB.. Are you sure that you are not using JMSSerializer in the view handler?. This part is not relevant. It will look the same not matter if you use the Symfony Serializer or JMS Serializer. Do you have the JMSSerializerBundle installed and enabled? Can you also show your FOSRestBundle related config?. I think we should decorate the service instead to fix the BC break (see #1879).. I wonder if we shouldn't stop changing the parameter at all and decorate the JMS service instead.. see #1879. You are right. But we already have an open issue for this. So I am closing here in favour of #1812.. Since we can use the Form component without translations I suggest that we make this argument optional and skip translations if the translator is not present.. Can you show the code from the generated container class that references it?. Which version of FOSRestBundle do you use?. And what does your config look like?. Can you create a small example application that allows to reproduce your issue?. If there is an existing app that could be easier to set up. Can you share the URL of the git repository?. Thank you @magnetik.. Did you check if that still works with Symfony 3.4?. Did any of you test this change with older Symfony versions? Does it work there?. I am closing here as the issue was fixed with #1911. Thank you for the initial work @pdugas.. Would you like to create a PR?. Since the RequestBodyParamConverter is the only class depending on the OptionsResolver component I think the best solution is to throw a meaningful exception when the option is enabled without the component being installed. Would you like to create a PR?. closing here as this was fixed by #1912. Closing in favour of #1822. Thanks for working on this issue @codereviewvideos.. Thank you @sarcher.. I do not see that this will ever happen inside FOSRestBundle. So I am going to close here.\nFor validation, you can use the validator service and pass it your DTO. Validation constraints can be registered as services and thus do nearly everything.. I do not see that this will ever happen inside FOSRestBundle. So I am going to close here.\nFor validation, you can use the validator service and pass it your DTO. Validation constraints can be registered as services and thus do nearly everything.. @ruudk Are you sure that this worked differently in 1.7?. see #1822 for the attempt to fix this. Can you show the code of your DefaultController class?. will be fixed by #1899. I think currently #1961 is a blocker for the next release.. fixed in #1962. Thank you @IonBazan.. The changes required to make FOSRestBundle compatible with JMSSerizerBundle 3 have not been part of a release yet. You will need to allow development dependencies for it for the moment.. The changes required to make FOSRestBundle compatible with JMSSerizerBundle 3 have not been part of a release yet. You will need to allow development dependencies for it for the moment.. #1972 would be nice, but is not really a blocker. But #1970 needs to be solved first so that we do not introduce new issues related to maps in query params with the next release.. I am not so much concerned about dropping support for Symfony 2 especially given the fact that even Symfony 2.8 doesn't receive bugfixes anymore. But, what's more important to consider is that making this change will probably break a lot of applications out there as the AbstractController does not allow to access all public services if you do not explicitly subscribe to each and every service you need.\nI think we should do the following instead: Deprecate the existing controller class, introduce a new one extending AbstractController that offers the same functionality (we can share common code between both controller classes with a trait).. getSubscribedServices() is the important differences here because AbstractController does not have access to the full DI container, but only gets injected a subset of the full container giving you only access to the services specified in getSubscribedServices().. Thank you @phamuyentri.. Thank you @phamuyentri.. Good catch, thanks @phamuyentri.. If you could create a small example application that allows to reproduce your issue, we could probably try to debug the issue.. Thank you @alcaeus.. Without knowing how your code looks like it's hard to tell what is going wrong here. Can you create a small example application that allows us to reproduce?. I completely missed that I never merged this PR. \ud83d\ude01. If there's anything that needs to be updated, I will happily review a PR. :). If there's anything that needs to be updated, I will happily review a PR. :). Can you explain which error you got when following the current steps? We may want to improve the overall experience when no serializer is installed or configured nonetheless.. Can you explain which error you got when following the current steps? We may want to improve the overall experience when no serializer is installed or configured nonetheless.. As stated in #622 I'm neither happy with these class names and I am open to any better suggestion.\n. What do you mean? This is the old implementation which I kept in the base class since the methods can be used by both implementations.\n. done\n. done\n. done\n. done\n. Changed the class names accordingly. Didn't see the way that has been done for the RestRouteLoader before.\n. Is there always a ParamConverter instance passed? Even for the legacy implementation? Or do I misunderstand what you mean?\n. Good to know. I changed it.\n. Fixed it.\n. done\n. routing instead of rounting\n. And I think the dot at the end of the sentence is missing.\n. I think you should add a comma after \"applications\".\n. I thought that first too. But it has side-effects leading to failing tests when removed:\n1) FOS\\RestBundle\\Tests\\Routing\\Loader\\RestYamlCollectionLoaderTest::testUsersFixture\nSymfony\\Component\\Config\\Exception\\FileLoaderLoadException: Cannot load resource \"FOS\\RestBundle\\Tests\\Fixtures\\Controller\\UsersController\".\nand some more failures like that.\n. sure\n. Is this needed now that there will only be one forms child element?\n. Wouldn't it be better to use replaceArgument() instead (makes it less error prone when at some point in the future the definition is modified somewhere else in the extension class or something like that)?\n. use only one backtick here (also in the following two lines)\n. Missing ===================  ======  ======  ====  ==================== at the end of the table and newline at the end of file.\n. wrong newline\n. You need to remove the file extension here (same with the other references in this file).\n. Hm, actually you're right.\n. What is the advantage in using array_map() here?\n. I think this is wrong. I didn't contribute anything to this class if I'm not mistaken. :)\n. I think we should remove this parameter. There are better ways for third-parties to overwrite/modify service definitions. Even Symfony itself doesn't introduce class name parameters for new services anymore (removing the parameter wouldn't be a BC break right now since there was no release since the PR has been merged).\n. You should make sure that $idObject is an array.\n. missing newline\n. Does this make sense? Shouldn't it be return array($object->getId())? Does it make sense to check if the object actually has a getId() method first?\n. should be string\n. The docblock should be either complete (it's currently missing the $entityName parameter) or should be omitted otherwise.\n. make is correct (because of \"might\")\n. This should be reverted (you can ignore that globally on your system or per project).\n. The changes to the blank lines should imho be reverted as well.\n. There should be a space after elseif.\n. The is_array($config->requirements) check is not necessary by the way (it's already covered by the following isset() call).\n. I would revert this change.\n. and this as well\n. This does not work on PHP 5.3.\n. For consistency, I would uppercase the L of listener.\n. same here\n. and here\n. here too\n. oh and here too, seems that all \"listeners\" except one were lowercased before\n. This, for example, allows [...]\n. I am not sure if that really is the best solution. Imho enabled should only be true or false. What do you think about adding a boolean child node force which could be set accordingly?\n. missing newline\n. I'll look into that.\n. functional test added\n. The fos_rest.form.extension.csrf_disable service is only loaded if disable_csrf_role is configured. So you need to check for its existence first.\n. missing newline\n. missing newline\n. php\nif ($container->hasDefinition('fos_rest.form.extension.csrf_disable') {\n. I would enclose $view with double backticks too.\n. [...] to a template [...] or [...] to the template [...]\n. I would add a test to avoid future regressions. It might not be obvious at a later time why empty() is used here.\n. we can do that but it does not make a difference\n. done\n. This looks wrong (see #1145).\n. I would do something like the following instead:\nphp\n$container->getDefinition('fos_rest.version_listener')->addArgument($config['format_listener']['media_type']['default_version']);\nThis way you don't have to worry about maintaining container parameters in the future (people might use them).\n. Probably, though I think 2.0 would be good release to clean them up (another advantage is that you reduce the size of the compiled container).\n. alright, see #1158 \n. good idea\n. You are right. I also found some more places where such a change was needed.\n. Shouldn't these methods be private to not expose additionally extension points?\n. What about adding an array type hint for $priorities?\n. see #1162 \n. They did not provide any additional value (the type is already derived by the type hint of the constructor).\n. Then we need to add string as a possible return type too.\n. @Soullivaneuh Second item at https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md:\n\nType extension should return the fully-qualified class name of the extended type from FormTypeExtensionInterface::getExtendedType() now.\n. I am not sure how this is supposed to work. At least, there should be a test for it.\n. Well, but we never get the web profiler bundle's configuration here, do we?\n. I am still not convinced that this is the best solution here. We would now depend on assuming how the web profiler config is processed internall which makes our code very fragile to break in case they make some changes there.\n. Imho we should split the handling or if you prefer to keep it in one place reintroduce the container parameter in FOSRestBundle.\n. Actually, it does not really matter how often this stub is called an we could omit the expects() call entirely.\n. Good idea, though which interface should we rely on then?\n. Agreed, I reverted this change.\n. I am wondering how the test passed before as the event does not return a callable controller.\n. Got it, I simply deleted too much from the ParamFetcherListener class.\n. Well, maybe we should inject the container in the constructor as it is required anyway. What do you think?\n. Not sure if that works fos_rest.serializer only is an alias. What about still injecting the container and retrieving the serializer from it? We then just have to think about what we do at runtime if the service doesn't exist.\n. Not sure if we need them at all, when we introduce the serializer API with #1171. What do you think?\n. Ah yes, you're right. Maybe we should backport the serializer API to 1.8, add our own layer for the context and rely on that then.\n. Well, the idea is to add a config option in the future that would make it possible to inject/create your own serializer service. The compiler pass then would exit earlier here without throwing an exception.\n. I agree and that's what I mean with the early exit in the compiler pass when the fos_rest.serializer service is already set (which we may ease later by adding a config option for it). Or do you mean something else?\n. I think in this case the service should already be removed as it is an unused private service then (IIRC we have functional tests that cover this case).\n. We can remove this line to save one job.\n. We would. But is that necessary? I mean we already run Symfony 3.0 tests with other PHP versions.\n. The issue with introducing changes like this right now might be that merges between branches might become trickier so we should be careful with doing them.\n. That's true but we need to fix this in previous versions.\n. I am not sure if we really need an interface for the context. Imo we can rather make this class even final. Or do you see a use case for a custom implementation of the context?\n. I don't think we should do types check at runtime. Having proper docblock contracts should be enough.\n. This will now break applications in which users managed to somehow inject their own serializer before. Do we really need this check?\n. This is always true due to the code above, isn't it?\n. You're right, but then we don't need this special case, do we? This should all be handled the same way if we only had the code from the else block, shouldn't it?\n. good argument\n. This won't do anything now that the interface is dropped.\n. This looks strange. Isn't this an issue with StyleCI?\n. I remember one thing we talked about in #1171, but for which either did not come to a conclusion or I missed to implement that: Should we add special handling if the user doesn't have the templating component but only wants to use the Twig_Environment class?\n. I think we should make this method private.\n. I don't think that this is true anymore. If we want people to be able to use other templating engines, they should not extend the TwigExceptionController. We should then rather create a base TemplatingExceptionController or something like that which defines all the base logic and has an abstracht findTemplate() method (so you don't depend on Twig in a way when using something different).\n. @Ener-Getick Looks like lowercasing inheritdoc indeed does the trick.\n. If I am not mistaken, the DependencyInjection will complain about the not existing argument before removing unused private services.\n. good catch, updated\n. You are right. Technically this should work without removing it. I am just not sure if we should really rely on that.\n. Yes, the thing is just if someone injects our service somewhere else (or we start do that at some point for whatever reason), it wouldn't be removed anymore and the error message would be harder to understand imo.\n. Actually, I didn't even notice that the @ was missing. :)\n. Well, I see one drawback with that solution: We needed to do runtime checks then to ensure that we can actually access the value which adds a bit overhead for (in my opinion) no added value. And if someone really wants to use the class outside the bundle, they will need to go the hard way to figure out which methods to call to properly set up the object (that's probably what you mean with binding it to the DI container).\n. Indeed, the ControllerResolver class from the Symfony FrameworkBundle lazy loads controllers as services at runtime. For this, the service must not be private (similar to what applies to event listeners and form types). I opened #1296 as a hotfix to not keep the master branch in a broken state until we decide how to proceed with this pull request.\n. This will also be triggered when one implements/extends our classes, won't it?\n. We have few places with such long regular expressions, but you may want to take a look at how this is done in the UrlValidator: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/UrlValidator.php#L23-L37\n. I don't think it's a good idea to automatically support both HTTP methods then.\n. But, doesn't this also apply to the other new methods and shouldn't they be listed here too?\n. Might be an idea to think about this so that we could include it in 1.8. However, you will then still allow additional HTTP methods which one could consider a BC break too.\n. What is this change needed for?\n. And this?\n. This was added in #1250. I first overlooked this but the tests passed nonetheless. So it looks like we should add a test on the 1.7 branch to avoid future regressions.\n. @lsmith77 Should still we do this change?\n. I agree that we can be explicit here. But please let us not use the ternary operator here then as it becomes quite unreadable now.\n. I am not really happy with this test. I think we should find a better way to ensure that the class does what it should.\n. What about having this check in each catch block or moving it into a private method? I find the nested try blocks harder to read.\n. Having a test without an assertion looks wrong to me.\n. I think so. Checking for the proper status code (404 instead of 500) should be enough though.\n. I don't have any preference here. If you favour sprintf(), I can change it.\n. yeah, changed it :)\n. Why do we have a 200 status code here?\n. Ah, you are right. Thanks. Maybe we should add a comment to avoid confusion for anybody else stumbling over this.\n. This is the only change that we need to make here to keep BC (the HTTP method is only allowed to be different when the route is created due to an annotation).\n. I agree. The option could then also be changed to only except boolean values.\n\nWhat do you also think about adding a global option to change the default value for this option? For example, in an API only application you might want to always set the option to true without changing all your form types while you rather do not want to do the same in an application that offers an API and a common HTML interface.\n. ~~$configuration will now never be an instance of ViewAnnotation if our listener is executed before the one from the SensioFrameworkExtraBundle, will it?~~\nNever mind...\n. We would then need to access the templating service during compilation. I don't think that this is a good idea.\nA better approach would be do this when warming up the cache for a reasonable matrix of formats and status codes and then rely on the cached data if present.\n. Is it intended to not check the request attribute anymore?\n. What happens now if an exception is thrown by the view handler?\n. The translator is still used in getErrorMessage().\n. By the way, was there a reason that we merged support for attributes in rules into the master branch and not in 1.8? Looks to me like this would be backwards compatible.\n. ah, thanks for the hint :)\n. At least no good reason :) (we already made the other loader services private in 2.0). I'll change this.\n. You mean relying on the concrete class?\n. No, this would fail when a FQCN is passed to the loader because the FileLocator class then throws an exception.\n. Not sure if that makes sense. I mean what advantage do we have by passing everything to the file locator?\n. If I am not mistaken we did that in 2.0 (it's a BC break).\n. Can you revert this change please?\n. I would also inject the kernel.debug parameter to the Configuration constructor (for example, in Symfony we do the same in the FrameworkBundle: https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php#L197).\n. I would not wrap this in an if statement. Let's just always do the replacement here.\n. Let's use something like this for clarity:\nxml\n<argument /> <!-- show exception -->\n. I think so as it enables us to avoid the inconsistencies we would need to discuss otherwise here.\n. I would omit this description as it doesn't add any value any just keep the parameter description.\n. This is an implementation detail which is only true when used in the extension class. We can just use something like \"Whether or not to enable the debug mode\".\n. thanks, fixed\n. Agreed, we use the same wording in the ConfigurationCheckPass exception message. So it makes sense to use that here too.\n. Are you sure that this is not needed?\n. I see, so the fix basically is to call get getValue() instead of getType()?\n. Do you remember why you added that in #1358?\n. Ah indeed, you only introduced the new class. I'll check with @jovobe tomorrow the failing example we had.\n. @Ener-Getick Indeed, we can simply register our listener with a higher priority and do not remove the core one.\n. I would write \"JMS serializer\" and \"Symfony serializer\"\n. [...] take a look at [...]\n. [...] an uncaught exception [...]\n. Looks a bit strange to search for the configuration in the ParamFetcher test. Let's use a dedicated section instead (makes it easier to find the right test case).\n. The changes in this file should be reverted.\n. What about adding this to the other route for consistency too? I am sure this is my last remark here. ;)\n. [...] have been removed [...]\n. should be ^2.7.11|^3.0.4\n. Yeah, I reworded this a bit. Do you think it's more clear now?\n. good catch, fixed\n. Probably no, but I suggest to tweaks things in a separate PR.\n. Not sure if this change is right. Should we expect \"foobar\" instead of the empty string?\n. same here\n. good idea, done\n. Yes, you're right. I'll partially revert these changes.\n. I added two factory methods instead of adding more arguments to the constructor.\n. fixed\n. That's not possible because of the public parent constructors.\n. In Symfony we kept them in all branches.\n. good catch, now that we have this interface in 1.8 too\n. I agree. We can remove this file after #1460 has been merged up.\n. Imo we should keep this as is as we need to merge this into the 1.8 branch.\n. Actually, it should be 1 >= func_num_args() || func_get_arg(1), shouldn't it?\n. fixed the index here\n. I wonder if we should allow to set the groups in the context to null to make it possible to distinguish the case where someone builds their group dynamically and actually wants to force the serializer to exclude everything in that case.\n. Yes, the AccessDeniedListener makes use of the AccessDeniedException and AuthenticationException classes.\n. yaml\n. I would enclose Task with double backticks too.\n. [...] data coming from the request [...]\n. please\n. set up\n. I would omit all the docblock comments. They imo do not add much value.\n. This method should be removed.\n. I would add a private getRepository() method and use it throughout this controller to short the code.\n. I would remove these comments.\n. Why don't we return the form instead?\n. After having set up [...]\n. built-in\n. Please use terminal instead.\n. makes sense, I added a comment\n. The added annotations are not needed, right?\n. no longer\n. What about changing this to:\nphp\nif (false === $this->version && $request->attributes->has('version')) {\n    $this->version = $request->attributes->get('version');\n} elseif (false === $this->version && null !== $this->defaultVersion) {\n    $this->version = $this->defaultVersion;\n}\n. The code below could then be simplified a bit.\n. By the way, what was the reason for the getVersion() method which requires us to make the event listener stateful?\n. Oh, I missed the fact that we made it internal in 1.8. So yes, I would update it accordingly. But we can do that in a separate PR.\n. This block should be removed now.\n. We can now save a method call here by checking for $this->version instead of the request attributes.\n. Just wondering if we shouldn't actually compare the expected JSON structured instead of the formatted JSON string to make the tests more stable (but should be done in another PR then).. What if neither the Symfony Serializer component nor the JMS Serializer is installed?. What about the case of JMS\\Serializer\\SerializerInterface?. I thought that's something that's explicitly supported by the JMSSerializerBundle. Isn't that the case (anymore)?. \ud83d\udc4d then for me. By just looking at the name of the option I would expect to be able to pass a string that will be the prefix. To have an option acting as a toggle to turn on/off the feature I would rather rename it to something like prefix_methods.. Yeah, I think naming that option method_name_prefix was not the best idea. Let's not make the same mistake here again. Can you please rename it? :). Can't we also check the returned value?. the class property docblocks are not needed. It's not a blocker for me. But I would prefer to remove them.. We can if you prefer that. :). Oh indeed, I missed that. We could default the argument to null and fall back to the old code then, right?. indeed. What is the reason for this change?. We need to indent the content of the list items by three spaces each. That should fix the rendering of the list.. [...] response. So it [...]. caution instead?. terminal. this line must be indented by three spaces. Maybe link to the bundle's documentation (http://jmsyst.com/bundles/JMSSerializerBundle) instead?. Do we really want to delete the whole file? There may be references out there linking to it.. @javiereguiluz Is there a chance we are able to create a redirection map for bundles featured on symfony.com like we do it for the Symfony docs?. see #1800. I am not sure about this. Empty is not necessarily the same as null.. looks like we can now use the COMPOSER_MEMORY_LIMIT var for this (see https://github.com/composer/composer/issues/6931#issuecomment-355240659). this will likely fail with pre 3.4 Symfony versions. I'm gonna take a look into it.. Looks like we sadly cannot use it now as the current release has some autoloading issues (see #1833). So let's stick with your approach for the moment.. We should keep this job, but add a dedicated job that uses PHP 7.1 with stable dependencies (it will automatically use Symfony 4 then right now).. What is the reason for this change?. this should be reverted. you can use class_exists(ClassUtils::class) here then. please keep this file. please do not mocker the DI related classes. I decided to do this since the FormErrorHandler from JMSSerializerBundle does not implement an interface and I don't want to us to have to update our class every time a change in JMSSerializerBundle is made (i.e. new methods are added).. Can't we drop the dependency at all? Form errors should already be translated, shouldn't they?. In the Kernel class we could more easily check the values of the version related constants. :). Is this actually depending on the version of the HttpKernel component? It depends on the Routing component being 4.1 or higher, doesn't it?. let's use the class constant here. please just place this on a single line. I would merge block with the previous if instead to have something like this:\n```php\nif (Kernel::VERSION_ID >= 40100) {\n    $controller = 'fos_rest.exception.controller::showAction';\n} else {\n    $controller = 'fos_rest.exception.controller:showAction';\n}\nif ($config['exception']['exception_controller']) {\n    $controller = $config['exception']['exception_controller'];\n} elseif (isset($container->getParameter('kernel.bundles')['TwigBundle'])) {\n    if (Kernel::VERSION_ID >= 40100) {\n        $controller = 'fos_rest.exception.twig_controller::showAction';\n    } else {\n        $controller = 'fos_rest.exception.twig_controller:showAction';\n    }\n}\n$container->getDefinition('fos_rest.exception_listener')->replaceArgument(0, $controller);\n```\nThen we can set the argument to null in the exception_listener.xml file:\nxml\n<service id=\"fos_rest.exception_listener\" class=\"FOS\\RestBundle\\EventListener\\ExceptionListener\">\n    <tag name=\"kernel.event_subscriber\" />\n    <tag name=\"monolog.logger\" channel=\"request\" />\n    <argument />\n    <argument type=\"service\" id=\"logger\" on-invalid=\"null\" />\n</service>. That's because the coffee in the extension class uses the twig_ prefix. :). ~~should be always() (see #1918)~~ ah no, never mind. We should mention that you should use FCQN as service ids instead. And we should also update the branch alias in the composer.json file.. Thanks, fixed in #1931.. let's use the class constant here. this should be removed. should be assertSame(). but please also add use ~case~ statements for the classes :). we should also pass true as the third argument. Oh, I meant use statements. \ud83d\ude48 . \ud83d\udc4d . In fact, for classes from the global namespace we follow the same approach as the Symfony code style and keep the namespaced variant. Sorry for the confusion.. Why are all the test here marked as legacy?. let's use the class constant and a use statement for the class. please add a use statement for this class and make use of the class constant here. I think we should move the if from line 57 after the if ($this->map) block instead.. Isn't this something that should be added when $this->map is false too?. Should we also make it final?. What if someone has JMSSerializerBundle 1 installed? Would it make sense to add a conflict rule or detect this when the container is built?. A conflict rule would mean that people using JMSSerializerBundle 1, but not its integration into FOSRestBundle will not be able to update to the next release of FOSRestBundle. I am not sure we really want to prevent that.\nTo work around that we could instead detect the version inside our DI extension class and throw an exception. But that would mean people would have already updated their dependencies before noticing the incompatibility.\nIs version 1 of JMSSerializerBundle still maintained or is it already recommended to update?. > JMSSerializerBundle 1.x is not maintained anymore\nThen the conflict rule looks like the best solution to me.. this change needs to be reverted (see the failing test). Yes, I think that would be better.. We will also have to override the getSubscribedServices() method so that we can actually access the fos_rest.view_handler service here:\nphp\npublic static function getSubscribedServices()\n{\n    return array(\n            'fos_rest.view_handler' => ViewHandlerInterface::class,\n    );\n}. I think we should just deprecate the class:\nphp\n/**\n * @deprecated since FOSRestBundle 2.5, use {@see AbstractFOSRestController} instead\n */. yes \ud83d\udc4d . I think my suggestion in #1769 was not good either. Keeping the constraint on line 59 is probably necessary so that it will be applied to the nested data. Though applying it to the collection itself does not make much sense IMO (and we also have the NotNull constraint).. \ud83d\udc4d . For some reason PHPUnit 5.7 triggered deprecation on this job (see https://travis-ci.org/FriendsOfSymfony/FOSRestBundle/jobs/474149446). But since we can use PHPUnit 6.5 anyway I suggest not to spend time on investigating this now (we could do that later though).. added to be compatible with the Form component in version 4.2. renamed some data providers so that they are not executed as tests (which makes them being reported as risky). needed for the deps=low job which would otherwise fail because of schmittjoh/JMSSerializerBundle#625. We do not rely on the full container to be injected. Thus this kind of change is safe.. same here. added some assertions to tests that didn't have them so that they are not reported as risky by PHPUnit. Needed for the Symfony 3.4 build, otherwise Symfony would try to create services for argument type hints where we rely on param converters. This parameter opts in for the Symfony 4 behaviour.. needed so that a PSR-11 compatible container (service locator) is injected into all our controllers that extend the AbstractController class (autoconfigure for the creation of the container, autowire so that the setContainer() method is called with this container as an argument). I think we can improve this a bit by triggering a deprecation in the constructor when no validator is passed. That would allow us to get rid of this runtime check in the next major version.. But if you prefer to, we can do that in a follow-up PR.. We should reword this a bit like this:\nphp\n@trigger_error(sprintf('Using no validator is deprecated since FOSRestBundle 2.6. The `$validator` constructor argument of the `%s` will become mandatory in 3.0.', __CLASS__), E_USER_DEPRECATED);. We can make use of the @expectedDeprecation feature of the PHPUnit bridge:\nphp\n/**\n * @expectedDeprecation put the deprecation message here\n * @group legacy\n */\npublic function testConstructorCallWithNullValidatorShouldTriggerDeprecation()\n{\n    new ParamFetcher($this->container, $this->paramReader, $this->requestStack, null);\n}. I am afraid I was too eager by suggesting to throw an exception here. There may be applications where someone enabled the option without using the feature at all. Having these applications break on an update is not the best experience. I think we should instead just trigger a deprecation here.. I think we should reword this a bit now:\n\nEnabling the fos_rest.param_fetcher_listener option when the Symfony Validator component is not installed is deprecated since FOSRestBundle 2.6 and will throw an exception in 3.0. Disable the feature or install the symfony/validator package.. looks like something went wrong here :). we should still keep all the references at the bottom. I would remove these three lines. \n",
    "david42": "Ok. I thought that returned the form's elements in xml format.\nIs it possible ?\nFor exemple :\n<form name=\"dav2_testbundle_personnetype\" action=\"xxxxxx\">\n  <input type=\"xxxx\"  name=\"xxx\" id=\"xxx\" />\n  ......\n</form>\n. I added an example in my last response ;-)\n. Ok, thanks.\n. Hi,\nI modified my action and it's ok now :\n```\npublic function newPersonne_wsAction()\n{\n    //la route get /personne_ws/new sera automatiquement g\u00e9n\u00e9r\u00e9e\n    $request = $this->getRequest();\n    $link = $request->get('link');\n$entity = new Personne();\n$form    = $this->createForm(new PersonneType(), $entity);\n\n$view = $this->render('dav2TestBundle:Personne:new.xml.twig', array(\n    'entity' => $entity,\n    'form'   => $form->createView(),\n    'link'   => $link\n));\nreturn $view;\n\n}\n```\nI have an other action for the data send by the form :\n```\npublic function postPersonne_wsAction()\n{\n    $entity  = new Personne();\n    $form    = $this->createForm(new PersonneType(), $entity);\n    $request = $this->getRequest();\n    $form->bindRequest($request);\nif ($form->isValid()) {\n    $em = $this->getDoctrine()->getEntityManager();\n    $em->persist($entity);\n    $em->flush();\n    return $this->redirect($request->get('link'));\n\n}\nelse\n{\n    die('ko');\n}\n\n}\n```\nI tried these webservices with a java client to provide and validate the form.\nHere is my view :\n<form action=\"http://127.0.0.1/Symfony_dav2/web/app_dev.php/personne_ws\" method=\"post\" {{ form_enctype(form) }}>\n  {{ form_widget(form) }}\n  {{ form_rest(form) }}\n <input type=\"hidden\" name=\"link\" value=\"{{ link }}\" />\n <p>\n     <button type=\"submit\">Valider</button>\n </p>\n</form>\nMy form is displayed correctly in my client and in the source code I have the token, but after validate my form I have this error :\nThe CSRF token is invalid. Please try to resubmit the form \nThanks for your help.\n. ",
    "lanthaler": "I was just about to create an issue for that and then I saw yours. PUT has clear semantics in HTTP, i.e., replace a resource (see HTTP spec whereas POST's function \"is determined by the server and is usually dependent on the effective request URI\" HTTP spec and\n\nThe fundamental difference between the POST and PUT methods is\n   highlighted by the different intent for the target resource.  The\n   target resource in a POST request is intended to handle the enclosed\n   representation as a data-accepting process, such as for a gateway to\n   some other protocol or a document that accepts annotations.  In\n   contrast, the target resource in a PUT request is intended to take\n   the enclosed representation as a new or replacement value.  Hence,\n   the intent of PUT is idempotent and visible to intermediaries, even\n   though the exact effect is only known by the origin server.\n\nSo it should definitely be POST and not PUT.\n. ",
    "beryllium": "Hmm! This was supposed to go to the 0.6 branch. Sorry!\n. ",
    "raulfraile": "Sorry, I was overriding the 'FOS' namespace later... works fine in both orders now. The PR does not make sense anymore, unless you want for clarity. Otherwise, close it. Thanks!\n. ",
    "log0": "If I have to support GET (regardless of what FOSRestBundle recommends), how would I do that?\n. It is a test environment I'm working on, and is generated completely via doctrine:generate:crud, so nothing special.\npublic function indexAction()\npublic function showAction($id)\npublic function newAction()\npublic function createAction()\npublic function editAction($id)\npublic function updateAction($id)\npublic function deleteAction($id)\nAlso other information:\n63 [JMSSerializerBundle]\n 64     git=git://github.com/schmittjoh/JMSSerializerBundle.git\n 65     target=bundles/JMS/SerializerBundle\n 66\n 67 [FOSRest]\n 68     git=git://github.com/FriendsOfSymfony/FOSRest.git\n 69     target=fos/FOS/Rest\n 70\n 71 [FOSRestBundle]\n 72     git=git://github.com/FriendsOfSymfony/FOSRestBundle.git\n 73     target=bundles/FOS/RestBundle\n 74     version=origin/0.6\n1 [symfony]\n  2     git=git://github.com/symfony/symfony.git\n  3     version=v2.0.6\n  4\n. Thanks, it generated a GET but the routes become different, please check:\npublic function indexAction()\npublic function getShowAction($id)\npublic function newAction()\npublic function createAction()\npublic function editAction($id)\npublic function updateAction($id)\npublic function deleteAction($id)\ncreate                   GET    /writer/create.{_format}\ndelete                   DELETE /writer/{id}.{_format}\nedit                     GET    /writer/{id}/edit.{_format}\nindex                    GET    /writer/index.{_format}\nnew                      GET    /writer/new.{_format}\nupdate                   POST   /writer/{id}/update.{_format}\nget_show                 GET    /writer/shows/{id}.{_format}\nnotice that the get_show is now GET /writer/shows/{id}.{_format} rather than /writer/{id}/show.{_format}\nIs this expected or \"recommended defaults\"? Is it changeable? I have a doctrine model that I have already exposed but now want to work with FOSRestBundle, so I do not want to break the interface. Thanks.\n. Thanks Smith, but I don't quite follow. Should I need to change the routes to GET /writer/{id}/show.{_format}, how would I do that? Thanks.\n. Updated... it seems to have issues for methods that goes by names such as \"getSalesOrderAction\"... which splits up into something funny like this:\nget_sales_order          GET    /writer/sales/{id}/order.{_format}\n. Thanks Smith! You're great ~ I will rename it accordingly and post again if I have questions. I hope this helps the other guys on this thread.\n. I found a possible duplicate here : https://github.com/FriendsOfSymfony/FOSRestBundle/issues/129\nI am digging into it. It is odd the usage is unexpected... (for those who haven't understood... we should minimize errors, right?).\n. It's a duplicate, however I really suggest highlighting this up in the wiki / docs. If the author thinks no, feel free to close this. Thanks!\n. Thanks for swift reply. If I have to, how should I workaround this?\n. Thanks for swift reply. If I have to, how should I workaround this?\n. ",
    "sensorario": "Mmmm here https://github.com/FriendsOfSymfony/FOSCommentBundle/issues/149 stof says to use 0.6 of FosRestBundle:\nI've tryed that solution right now:\n[FOSRestBundle]\n    git=git://github.com/FriendsOfSymfony/FOSRestBundle.git\n    target=bundles/FOS/RestBundle\n    version=0.6\nI get this:\n\nInstalling/Updating FOSRestBundle\nc11ab9d990a1e0e979b1c8ab72cc9793b4b2dcb5\nfatal: ambiguous argument '0.6': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions\n\nmmm any suggestion?\n. Ok, The correct way to configure deps file is this.\n[FOSRestBundle]\n    git=git://github.com/FriendsOfSymfony/FOSRestBundle.git\n    target=bundles/FOS/RestBundle\n    version=origin/0.6\n. ",
    "fluxuator": "Hi there. Is any fix there? \n. ",
    "fabpot": "probably related to symfony/symfony#8819\n. That's because the request scope is now created by the ContainerAwareHttpKernel instead of FrameworkBundle. So, at the time the compilation occurs, the request scope does not exist yet. See symfony/symfony@550df5a\n. That's because the request scope is now created by the ContainerAwareHttpKernel instead of FrameworkBundle. So, at the time the compilation occurs, the request scope does not exist yet. See symfony/symfony@550df5a\n. see symfony/symfony@853f681 for the fix.\n. see symfony/symfony@853f681 for the fix.\n. I've checked and this issue is now gone.\n. I've checked and this issue is now gone.\n. I would recommend to not merge this workaround as we have a proper patch for Symfony 2.2 (see symfony/symfony#8819).\n. see #537 for the undefined var fixed. Sorry about that.\n. @lsmith77 This is about to be deployed, should be done today. I will ping you when everything is working fine on our side.\n. Done: http://symfony.com/doc/master/bundles/FOSRestBundle/index.html\n. ",
    "makasim": "I have the same issue. with 0.13 version of RestBundle (current dev-master is not working too) and latest symfony verison (which include 8819 fix).\n. @lsmith77  yes I tried  (actually I've updated my previous comment). I would have to  investigate it further. The problem come after update from 2.1 to 2.3\n. I'll be back here as soon as I find a problem (and hopefully  a solution)\n. I've found the problem. The wrong format comes from Negotiation\\FormatNegotiator::getBest because of priorities. You have to set json before html like this. \nyml\nfos_rest:\n    format_listener:\n        default_priorities: [json,html]\nI had also problems with rendering of xxx.rss.twig. Adding rss to the list before html helped me.\n. @willdurand It works for me at least and solved my problems. I do not think I have to configure priorities explicitly. \nWhy should I configure something in fos_rest section to make working pages not related to rest anyhow?\n. @lsmith77 I dont think so, The _template is forced in fos rest bundle code https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/EventListener/ViewResponseListener.php#L52\nThe SensioFrameworkExtraBundle sees this attribute and tries to do its job. \n. ",
    "chregu": "My usecase was simple:\nfunction someMethod() {\n   $this->viewHandler->getSerializer()->setGroups(array(\"bar\"));\n   return $this->viewHandler->handle(View::create($issue));\n}\nFor Groups and Depth it will be added to the viewHandler, but that doesn't really scale if there are more options to be set one day ;)\n. My usecase was simple:\nfunction someMethod() {\n   $this->viewHandler->getSerializer()->setGroups(array(\"bar\"));\n   return $this->viewHandler->handle(View::create($issue));\n}\nFor Groups and Depth it will be added to the viewHandler, but that doesn't really scale if there are more options to be set one day ;)\n. ",
    "ghost": "Thanks @lsmith77!\n. You're right. Disabled the SensioFrameworkExtraBundle and everything worked as expected. Sorry, I thought it was just the case when view_response_listener: force.\n. Surely. I will have time in this weekend and will be online at #symfony-dev IRC channel.\n. I'll rebase @stof.\n. Rebased.\n. ##  Could anyone review my issue: \nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/774\nThanks in advance.\n. A more concrete proposal has been suggested in #1476.\n. I didn't knew, that the RestActionReader combines just the http method and the action name. So the route was overwritten. I added the name_prefix to my routing file for bar.yml and everything works now.\n. @robertblock I have the same issue and your change seems to work for me. Until a change has been implemented I will make sure I return a FOS\\RestBundle\\View\\View which also seems to work (return $this->view($data, 200);).\n. @robertblock I have the same issue and your change seems to work for me. Until a change has been implemented I will make sure I return a FOS\\RestBundle\\View\\View which also seems to work (return $this->view($data, 200);).\n. I solved the problem the file name was wrong. It should be OgppRestController.php, not OgppRest.php\n. Any update on this? A REST API should have pagination IMO. \nCreating a new bundle doesn't seem like a good option to me, it would probably be better to implement a plugin structure within this bundle that could be used to create a pagination plugin outside of this scope.\n. @jdwil Ah, I see, no worries, just wondering as I'm having to add pagination as well. Using a fork isn't something I want to do though so I guess I'll have to wait or implement something myself without touching core Symfony files.\n. I am sorry to bump this issue, but was this ever resolved or a hotfix/bypass found? I'm currently running into this problem myself, well the prefix part at least. \nObservation:\nThe reason this seems to go wrong because the Request given to match-function of the RedirectableUrlMatcher-class does not contain any attributes.\nReproduce:\nI tested this by accessing a route like /api/{version}/emails where {version} is v1 and dumped the incoming request in appDevDebugProjectContainerUrlMatcher. The request contained no attributes, request or query values, thus making the matching of a route with a prefix impossible.\nStrange behaviour:\nWhen the Request is passed to one of my controllers, $request->attributes->get('version') does return v1, which seems to suggest that the URL hasn't been fully parsed when it's given to the class extending RedirectableUrlMatcher. . @xabbuh I'll get a small example up and running after lunch. ;). @xabbuh Here you go: https://github.com/hipio/FosRestBundleFoc\n\n\nAdding echo \"Version: \" . $request->attributes->get('version', 'null'); on line 109 in appDevDebugProjectContainerUrlMatcher (once generated) shows that the Request object really is empty.\nIf you remove the # from routing.yml on line 5 you'll be able to see that the Request object that the controller receives does contain the version parameter. \n\n\n\n0 === strpos($pathinfo, '/api') && preg_match('#^/api/(?P[^/]++)/test(?:\\.(?P<_format>json|xml|html))?$#s', $pathinfo, $matches)\n\nSeems to work fine so it really is in_array($request->attributes->get(\"version\"), array(0 => \"v1\")) that fails in appDevDebugProjectContainerUrlMatcher. Which brings me back to my previous comment stating that somehow the URL isn't fully parsed (if that makes sense) when it's passed to appDevDebugProjectContainerUrlMatcher.\n\nI hope this helps a bit. When you find the issue, could you let me know? . For me the behaviour is gone now. I will close this issue.. ",
    "paztek": "Thanks, i ended up doing something like this.\n. ",
    "titomiguelcosta": "After a few more tests, the problem only happen when i extend a template and redefine a block. If my template doesn't use inheritance, everything works as expects, renders the page properly.\n. i confirm, after another update, no sign of the problem. thanks @lsmith77 \n. thanks @lsmith77 now everything is back working, I was having an error: Uncaught PHP Exception Symfony\\Component\\DependencyInjection\\Exception\\InvalidArgumentException: \"The parameter \"fos_rest.serializer.serialize_null\" must be defined.\"\n. ",
    "pculka": "Also, happened since yesterday. Test builds are failing, Sensio Framework bundle v3.0.13 aswell\n. v3.0.12 works fine . https://github.com/sensiolabs/SensioFrameworkExtraBundle/compare/v3.0.12...v3.0.13\n. I'm in same boat... using extra bundle v 5.0.1 with view_response_listener: force or true.. The xor is there as the configuration is mutually exclusive. Either you use the old verion or a new one. There\u2019s nothing between.\nI will check the ParamConverter too. And also will swap out FQCN. Well, I've updated the code and fixed most of the build except Symfony 3.4 and 4.0, which fail due different tests, not those relevant to this PR.\nCan somebody please merge this, so we can start using also newer versions of SymfonyFrameworkExtraBundle?. /poke anyone? Can anybody merge/decline this?. Well in that case the only possible check is to loop through all the configuration and merge it. Default configuration is view.listener: enabled for FrameworkExtraBundle...\nRendering the whole view.listener check useless and the SensioFrameworkExtraBundle dependency should be properly stated in the documentation?. Updated the PR to use a xor check against the new TemplateListener which replaces ViewReponseListener in SensioFrameworkExtraBundle  4+ (i.e. it either has new config or old config). ",
    "jupeter": "I have same problem. \nProblem appear in v3.0.13. \nWorks file in v3.0.12.\n. I do quick hotfix on my code: \nfos_rest.form.extension.csrf_disable:\n        class: FOS\\RestBundle\\Form\\Extension\\DisableCSRFExtension\n        arguments: [\"@security.token_storage\", \"%api_csrf_disable_roles%\", \"@security.authorization_checker\"]\n        tags:\n           - { name: form.type_extension, priority: -5, extended_type: \"Symfony\\\\Component\\\\Form\\\\Extension\\\\Core\\\\Type\\\\FormType\" }\nDirty, but works in meanwhile. . ",
    "mcg-web": "This feature look nice to me ! Is there any particulars reasons why this feature could not be implement ? \n. Ok thank you for your answer. I'll try to implement it.\n. ",
    "Wirone": "+1 this is crucial :exclamation:\nWe have API method for generating report. It can be returned as json or xml with simple array passed from controller. However, we would like to serve csv and xlsx formats, then controller would return StreamedResponse. Now we have to register custom handler (in development now, I hope it will work..). Would be so easier with this feature.\nWasn't it implemented since 2012 or I'm missing something?\n. +1 this is crucial :exclamation:\nWe have API method for generating report. It can be returned as json or xml with simple array passed from controller. However, we would like to serve csv and xlsx formats, then controller would return StreamedResponse. Now we have to register custom handler (in development now, I hope it will work..). Would be so easier with this feature.\nWasn't it implemented since 2012 or I'm missing something?\n. It would be great to support this, anyone was working on it?\n. It would be great to support this, anyone was working on it?\n. ",
    "codeMonkeysBe": "What an idiot I am.\nresource: TON*Bundle*\\VideoBundle\\Controller\\VideoRestController\nThanks for the fast reply :D\n. ",
    "jamhall": "I even tried putting \n/**\n* @Prefix(\"api/v1\")\n* @NamePrefix(\"api_\")\n*/\nat the top of the class (i made sure to import the NamePrefix and Prefix annotations). but this made no difference. Alas\n. to the action or the controller?\nMaking it automatic would be very useful. +1\nThanks\n. ",
    "thvd": "Indeed I have actually the same problem, I'm using the 0.6 branch with the latest Symfony release. (2.0.12)\n. A similar discussion is going on here: https://github.com/misd-service-development/guzzle-bundle/issues/36\n. A similar discussion is going on here: https://github.com/misd-service-development/guzzle-bundle/issues/36\n. ",
    "JohnLoo": "I am having the same issue : name_prefix is ignored.\nI think the bug resides in the file FOS\\RestBundle\\Routing\\Loader\\RestRouteProcessor.\nSince the fusion of the branch master and 0.6, you added the class RestRouteLoader20 in order to correct the change of the interface LoaderInterface.\nLine 54, you test that the loader is an intance of RestRouteLoader and I think you should also test that the loader is an instance of RestRouteLoader20 ?\n. Are you using the latest version of this bundle with Symfony 2.0 and customizing your route name with 'name_prefix' ? \nDoes the route \"fos_comment_get_thread_comments\" appear in router:debug ?\nMaybe this is related with this one\n. ",
    "intel352": "Shouldn't this be closed now? [EDIT] Nevermind, this issue is still present afaict. Setting prefix at top of class via annotation, or setting it in bundle routing.yml, sees the prefix ignored in either location.\n. This is indeed a valid issue. The FosRest @Route (and aliases) annotation will only generate for the first given route.\n@lsmith77's link to Liip isn't relevant, as it's using the Sensio route annotation, not FosRest.\n. I'll see if I can get to it later this weekend, in a crunch atm :-)\n. While understanding FOSRestBundle isn't stable, this change arguably breaks BC. In our application, all routes built w/ FOSRest (built explicitly, not generated) excluded the .{_format}, since FOSRest added the format directly. After this update, the format is lost from all routes. I understand the desire to remove format, and having a config option for that is great, but it seems that format should still retain the old behavior if I don't \"opt in\" to the new functionality. In other words, leaving things as-is with default configs, my routes should stay the same, with even my explicit routes retaining the FOSRest-appended format on the route.\n. Fix submitted\n. @Get actually, but yes. Had removed the format addition from routes once I'd discovered FOSRest added that automatically, then found my routes broke after this weekend's update :-)\n. Ah good, the travis build passed this time :-)   We should probably expand the test coverage to test both options for format. I hope to put some time in for additional submissions to fosrestbundle later on (end of this week or later) for documentation and testing, so if someone else gets to the test enhancement before me, kudos.\n. Rather than join routePrefix to the pattern w/ a slash, how about this?  $this->routePrefix . $annotation->getPattern()\nThat could possibly allow a prefix to be specified, and then joined to a pattern, without a slash (which is actually something I'd personally like in my own code). So rather than forcing a convention of a slash between prefix & pattern, it would boil down to how the prefix & pattern are defined in the developed app.\nI'm thinking I like that approach better, and simplifies the code.\n. done\n. ",
    "aderuwe": "@stof I do agree, but when using GitHub as documentation resource it is all too easy to end up in master documentation when you actually need to be reading 0.6 documentation\nIf this really is just me having issues, then please close this PR... ;)\n. Ok, works for me.\n. > populateVariables() (is theres a need to mention \"Template\"?)\n:+1: but maybe the shorter populateVars is enough?\n. ",
    "iVariable": "CS fixed, sorry.\nAbout aligning code with versioning - it's not possible, because of setGroups implementation. If we will pass null to setGroups method it will reset previously setted by setVersion exclusion policy. \n. You're right. :) \nDone\n. ",
    "nurikabe": "Okay, this is what I was hoping it did, but I seem to be having trouble with getting route from the view.  It is always coming back null; createRedirectResponse() never gets called.\nDo I need to configure the route to use per action?\nBTW, I'm in the old 0.6 tag.  Maybe I should upgrade if it FOSRestBundle is working against 2.0.12?\n. Okay, this is what I was hoping it did, but I seem to be having trouble with getting route from the view.  It is always coming back null; createRedirectResponse() never gets called.\nDo I need to configure the route to use per action?\nBTW, I'm in the old 0.6 tag.  Maybe I should upgrade if it FOSRestBundle is working against 2.0.12?\n. BTW, will definitely update the docs once I get my head around this.  Also, no \"reopen\" perms for me it seems.\n. BTW, will definitely update the docs once I get my head around this.  Also, no \"reopen\" perms for me it seems.\n. (Just switched to master and it seems okay with 2.0.12)\nThanks for the example; I think maybe I'm just using the bundle wrong.  I was hoping I could get redirect to work without explicitly instantiating views.  For example:\n/**\n * @Route(\"/{id}/update\", name=\"company_update\")\n * @Method(\"post\")\n * @Template(\"MyBundle:Company:update.html.twig\")\n */\npublic function updateAction(Company $company)\n{\n    // ... bind form, etc.\n    return array(\n        'company' => $company,\n        'form' => $boundForm,\n    );\n}\nThanks to FOSRestBunbdle, the above returns a populated HTML template in the case of an HTML request and a simple JSON structure for a request of application/json.  Nice.  In the case of HTML, however, no redirect occurs.  The view passed to createResponse does not seem to have a route.  Do I have to explicitly instantiate views as per your example?\n. (Just switched to master and it seems okay with 2.0.12)\nThanks for the example; I think maybe I'm just using the bundle wrong.  I was hoping I could get redirect to work without explicitly instantiating views.  For example:\n/**\n * @Route(\"/{id}/update\", name=\"company_update\")\n * @Method(\"post\")\n * @Template(\"MyBundle:Company:update.html.twig\")\n */\npublic function updateAction(Company $company)\n{\n    // ... bind form, etc.\n    return array(\n        'company' => $company,\n        'form' => $boundForm,\n    );\n}\nThanks to FOSRestBunbdle, the above returns a populated HTML template in the case of an HTML request and a simple JSON structure for a request of application/json.  Nice.  In the case of HTML, however, no redirect occurs.  The view passed to createResponse does not seem to have a route.  Do I have to explicitly instantiate views as per your example?\n. Ok, got it.  Thanks again.\n. Ok, got it.  Thanks again.\n. ",
    "cedricduffournet": "I have the same issue in 2.0\n. :+1: \n. Ok I didn't know, actually It was working on my project before the modification\n. As template guessing is not working anymore in V2, did you try to specify template in @View annotation ? \nSomething like : \n/**\n * @return array\n * @View(template = \"UsersBundle:get.html.twig\")\n */\npublic function getUsersAction()\n{\n    return ['hello' => 'world'];\n}\n. Okay, better to wait for a fix then\n. ",
    "tecbot": "IMO then we can make the custom method configurable and not be limited to post and patch only. \n. IMO then we can make the custom method configurable and not be limited to post and patch only. \n. In the first version of the bundle was the custom method PUT, then POST and the last one PATCH. If we make this configuarble so the user can select which should use. in my project i musst rewrite my controllers two times because this changes. so we can prevent this in the future.\n. In the first version of the bundle was the custom method PUT, then POST and the last one PATCH. If we make this configuarble so the user can select which should use. in my project i musst rewrite my controllers two times because this changes. so we can prevent this in the future.\n. ",
    "sescandell": "It should be better to be a PR into 1.X branch no ? Because symfony2.1 is supporting PATCH method\n. It should be better to be a PR into 1.X branch no ? Because symfony2.1 is supporting PATCH method\n. My mistake, I thought I was on FriendsOfSymfony/FOSCommentBundle\n. My mistake, I thought I was on FriendsOfSymfony/FOSCommentBundle\n. Ok, I see.\nThank you,\n. Ok, I see.\nThank you,\n. ",
    "wheelsandcogs": "Sorry I'm struggling to follow what the final decision was... Can you use POST for custom actions in the current master? Or was it decided that PATCH was fine because Symfony 2.1 will support it?\n. Ok understood, thanks Lukas.\n. Ok thanks - new to this :) \n. ",
    "hubgit": "This would be great to have. \nAt the moment I'm doing this in each controller - https://gist.github.com/3380014 - but it seems repetitive to require this boilerplate in the controller for every type of resource.\n. Perhaps something like a @Resource annotation on the controller class would be enough to specify which type of entity this controller is for? \nIt would be good if all $id parameters could be automatically converted to that type of entity as well (as ParamConverter would do if it was specified explicitly).\n. ",
    "wlzch": "@Url(field=\"productUrl\") means it will use setProductUrl to set the generated url\n@Url(routeName=\"api_get_category_products\") is the name of the route to be generated\n@Url(params={}) is the parameters needed by the route\nIn this example when I serialize with Json format it will returns\njson\n{\n  \"id\" : \"1\",\n  \"productUrl\" : \"/uri/to/resource/\"\n}\nI will add some docs. But for the unit test, It will take some times since I'm not quite good at it.\n. ",
    "phillpafford": "Thanks, I did do a little more research on this subject ( http://jasonsirota.com/all-those-sses-what-pluralization-method-do-y ). I think this is a non issue and can be closed. But as a suggestion could this be better documented? I spent half a day tracking down why all my routes where pluralized when I was expecting them to be singular.\n. Thanks, I did do a little more research on this subject ( http://jasonsirota.com/all-those-sses-what-pluralization-method-do-y ). I think this is a non issue and can be closed. But as a suggestion could this be better documented? I spent half a day tracking down why all my routes where pluralized when I was expecting them to be singular.\n. Either here: ( https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/6-automatic-route-generation_multiple-restful-controllers.md ) or here: ( https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/5-automatic-route-generation_single-restful-controller.md ) would be great\n. I did find a way to get the functionality desired, in routing.yml I added this\nNOTE: _my and my are referring to MyController\nNOTE: function is referring to getFunction \n\n_my:\n    pattern:      /path/to/my/function/{arg}\n    defaults:     { _controller: ACMEMyBundle:MyController:getFunction }\n    requirements:\n        _method:  GET\n\nMyController.php\n\nclass MyController extends Controller\n{\n    public function getFunction($arg)\n    {\n        return new Response(json_encode(array('response' => 'Arg Passed: '.$arg)));\n    }\n\nThe check if the route is configured correctly using this command on the command line\n\nphp app/console route:debug\n\nYou should see something like:\n\n[router] Current routes\nName                           Method Pattern\n_my                  GET    /path/to/my/function/{arg}\n\n\n.  lsmith77 could you please point out the REST standard / principle you are referring to? I understand you are trying to create a standard in how the REST calls are generated but something of a Vanity URL would also be beneficial\n. ",
    "InputOutput": "Not wanting to dive into the discussion on if you should even want to enforce REST principles in this way but AFAIK there is no rule that a RESTfull URL should be in english. \nAppending an 's' to nouns in any language but English results in total gibberish. Even in English there are so many exceptions to the pluralization rule that I certainly wouldn't take this route (pun intented).\nA way of overriding this behaviour on a per route basis would make the FOSrest bundle even more usefull, in my opinion.\n. ",
    "dalibor983": "It will be nice if there is an option to tell FOSRestBundle to generate singular paths for routes.\n. It will be nice if there is an option to tell FOSRestBundle to generate singular paths for routes.\n. If FOSRestBundle generates routes based on controller name (UserController) or by annotation (@RouteResource(User)) why links must be started with \"users\" instead of \"user\"?\nWith \"user\" we also can create all of those restful routes https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/5-automatic-route-generation_single-restful-controller.md\nIn my case I have \"BlogController\" and I get all routes with \"blogs\" and this will be much better with \"blog\".\n. If FOSRestBundle generates routes based on controller name (UserController) or by annotation (@RouteResource(User)) why links must be started with \"users\" instead of \"user\"?\nWith \"user\" we also can create all of those restful routes https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/5-automatic-route-generation_single-restful-controller.md\nIn my case I have \"BlogController\" and I get all routes with \"blogs\" and this will be much better with \"blog\".\n. @lsmith77 thanks for this information.\nFor everyone who wants to change pluralization in generated routes, you can do this by replacing \"fos_rest.service.inflector\" service with your implementation of \"fos_rest.inflector.doctrine\" service by creating new class that implements \"FOS\\RestBundle\\Util\\Inflector\\InflectorInterface\", than define service of this class with name e.g. \"my_fos_rest.inflector.doctrine\" and simply set parameter in config.yml like this:\nyaml\nfos_rest:\n    service:\n        inflector: my_fos_rest.inflector.doctrine\n. @lsmith77 thanks for this information.\nFor everyone who wants to change pluralization in generated routes, you can do this by replacing \"fos_rest.service.inflector\" service with your implementation of \"fos_rest.inflector.doctrine\" service by creating new class that implements \"FOS\\RestBundle\\Util\\Inflector\\InflectorInterface\", than define service of this class with name e.g. \"my_fos_rest.inflector.doctrine\" and simply set parameter in config.yml like this:\nyaml\nfos_rest:\n    service:\n        inflector: my_fos_rest.inflector.doctrine\n. ",
    "hussfelt": "@lsmith77 I can't find any docs relating to this - but it works. Are you still in need of a PR or am I looking in the wrong place?\n. Done, referred the other related tickets as well - so that someone possibly can create an interface supporting Spanish or other languages. Great work guys!\n. @stof - updated docs according to comments, good points! Mergeable?\n. Changed\n. Fixed! :+1: \n. ",
    "orfin": "@stof https://github.com/FriendsOfSymfony/FOSRestBundle/pull/249#issuecomment-6372017\nDone.\n. @stof fixed cs: https://github.com/imagin/FOSRestBundle/commit/3e41fc0c6b35fe59f866bffe2dfe5f61019a5ce6\n. @matthiasnoback - happy to see you there :)\nabout DTO - the need of this weird limitation is described in comments:\n- https://github.com/FriendsOfSymfony/FOSRestBundle/pull/249#discussion_r997506\n- https://github.com/FriendsOfSymfony/FOSRestBundle/pull/249#discussion_r997521\nit's all about how FOSRest is generating routes and how to bypass it :-/\n. This restriction is connected to https://github.com/imagin/FOSRestBundle/commit/ccfd53bf8a632db8f790eb754a9e099f682d0d0a . This follows from the behaviour of FOSRest routes generator - all arguments of a controller method which aren't instances of Request or QueryFetcherInterface will be added as a route parameters. I had to somehow mark DTObjects to not be involved into route.\n. Yes, im aware of that 'weird requirement' but I didnt have any idea how to pass FOSRest route generator limitation.\nAnyway: multiple inheritance won't be neccessery as only the parent class must inherit DTO.\n(notice line: https://github.com/imagin/FOSRestBundle/blob/17df9f878fae7c756b48999332dc52c6b2c4b9ba/Routing/Loader/Reader/RestActionReader.php#L272 \nphp\n$argumentClass->isSubclassOf($class)\n(btw is there better way on github to add link to a code fragment?\n. Ok, probably we can check if on an argument is set ParamConverter annotation. I will try to make it that way.\n. Fixed: https://github.com/imagin/FOSRestBundle/commit/eeeddfd61eeef2a539d7cb9aa3424932a7cbcfd8\n. Fixed: https://github.com/imagin/FOSRestBundle/commit/13fb4392b19f928d21bb741448dd5fde2a6f9f43\n. So what is a proper way to mark that I've written it as an employee of IMAGIN IT?\n. Yep, done by mistake ;-)\n. hmh maybe better will be fos_rest.request.param_converter.request_content because what if later someone will have an idea of making another param_converters?\n. Isn't it better readable with two ifs? (line of code will be very long if I'll use one if)\n. Script will crash if 'request_content_param_converter' key will be undefined won't it? ;-)\n. Hmmh what if FormatListener will be turned off?\n. yea I forgot about this behaviour. fixed! :P\n. Ok it makes sense ;-) ParamConverter's listener has priority '0' so it will be necessary to change FOS Format Listener priority to hmhm... '2'? Will it be OK? \n. Hey. I think that FormatListener isn't apprioprate for this 'job' - it listens for an \"Accept\" header but in this ParamConverter we need info about \"Contet-Type\":\n1. User is making request with XML content body and headers: Content-Type: application/xml; Accept: application/json\n2. Serializer can deserialise it from XML format. (bcs Content-Type is set to app/xml)\n3. We are returning some response content\n4. Response content is being serialized into JSON format (bcs of Accept header)\nif we would use FormatListener for deciding 'from which format we are gonna to deserialize\" in (2) we will pass to deserializator JSON format as a base of deserializating.\nSo the only way to do it is based on the code from BodyListener (https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/EventListener/BodyListener.php#L53)\n. Yep, listener similiar to a FormatListener should be added (like ContentTypeListener or smthing) with logic similar to the Format one - imho it should be considered as a next issue/pull request :-P\n. It's easy to mismatch meaning of Request::getRequestFormat() method - it's about 'in which format should be Response returned' not like 'in which format is request given'. Im not sure if @fabpot named that method properly...\n...and not sure what was behind of decision to name it like that. \nAnyway it seems that there isn't any Request method like this one but for Content-Type. So it will be worth thinking 'what should content type listener really do - where to set that real content-type'.\n//added:\nOh wait,  we have MimeTypeListener [https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/EventListener/MimeTypeListener.php] which will do the work.\nSo why we just don't use: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php#L997 in the ParamConverter AND BodyListener?!\n. ",
    "nifr": "ping .. Any updates over here ? I need this functionality in almost every of my current projects. Would be really nice to have it merged.\n. The annotation scope has been added in ef8f6cd.\nThis was an undocumented BC break for functionality which had been there for a while :-)\nLogically the behavior should be:\n- class-level @View provides defaults for all class methods \n- method-level annotations override class-level defaults\nThis is how it already works out of the box with the widened scope.\nCan you construct an example where this is not working? \nI tested every combination that came to my mind and found all method-/class-level combinations working as described above. Only returning a FormTypeInterface overwrites class-level templateVar to 'form' for the method which is nice.\nI came across this while updating an older project which was using Tag 0.11.0 of FOSRestBundle where i accidently annotated the class with @View aswell as all my methods in a controller. But didn't notice until now ..\nAfter updating to master i faced this Exception:\n[Doctrine\\Common\\Annotations\\AnnotationException]\n[Semantical Error] Annotation @FOSRest\\View is not allowed to be declared on \nclass Vendor\\MyBundle\\Controller\\PersonController. You may only use this\nannotation on these code elements: METHOD.\nTurns out just adding CLASS to the scopes and annotating a class ( not every single method ) with @View . already magically provides the expected behavior and i was able to ommit a lot of method-annotations:\n- setting a template-name on class-level @View renders it for all routes - can be useful ...\n- every xyAction's route renders Resources/views/Person/xy.twig.html correctly if no template specified on class-level but @View is present. No need to put @View on every method any more.\n- all definitions on method-level override the according class-level definitions! ( this is how it should work, right? )\n- setting a templateVar on class-level forwards the name to all methods\n  - setting on method-level overrides the variable\n  - returning a FormTypeInterface forwards 'form' even with class-level templateVar definition ( good behavior )\n- the request format listener works as expected i.e. person/id.json renders JSON\n- .. something missing?\nA quick example - automatic route generation, implicit resource names\n``` php\n/*\n * @FOSRest\\View(templateVar=\"testdata\", statusCode=201)\n /\nclass PersonController implements ClassResourceInterface\n{\n    public function newAction()\n    {\n        return $this->formHandler->createForm();\n        // template: Person/new.html.twig , template variable is 'form' , http status: 201\n    }\npublic function helloAction()\n{\n    return \"hello\";\n    // template: Person/hello.html.twig,  template variable 'testdata' , http status: 201\n}\n\n/**\n * @FOSRest\\View(\"AnotherBundle:Person:get\", templatevar=\"person\")\n */\npublic function getAction(Person $person)\n{\n    return $person;\n   // template: AnotherBundle:Person:get , template variable is 'person' , http status: 201\n}\n\n/**\n * @FOSRest\\View(\"AnotherBundle:Person:overview\", templatevar=\"persons\", statusCode=200)\n */\npublic function cgetAction()\n{\n    return $this->personManager->findAll();\n   // template: AnotherBundle:Person:overview , template variable is 'persons' , http status: 200\n}\n\n// ...\n\n```\nThis can potentially really slim down controllers!\n. What needs to be done to get this merged ? Please provide some information. \nSome functional tests? \nbtw Travis build failed due to Composer being older than 30days - no unit tests failing.\nThis is not only a great enhancement in terms of slim controllers and DRY - it has already quietly been working before 0.11 :)\n. will do - currently on vacaction, gonna tackle it next week! :)\n. back in the game :) \nmaybe we should discuss wether scope-widening more annotations would make sense.\ni.e. controller's having more @NoRoute methods than @Route methods could benefit.\nI'm not sure wether the http method annotations ( @Get, @Put , etc... ) on class-level could make sense in some rare cases aswell. Imagine a controller handling only post requests i.e.\nWhat's your oppinion?\n. @stof adding NoRoute to a class having i.e. only one or two routes to be exposed but a large number of methods to be excluded would prevent having to add NoRoute to all of these methods. \nI think this would come in handy sometimes.\ngeneral question - how should we test the class-level annotation behavior most intelligently? suggestions?\n. ",
    "borisguery": "+1 any news on this? It would be really helpful to have this.\n. Agree, I though about it while I was writing this snippet. I guess we could store an array like this:\narray(\n    '/path/to/the/resource' => array('GET', 'POST', 'PUT', 'DELETE', 'PATCH');\n);\nBut what kind of strategy would you advise to cache it effectively?\n. I don't get your point, why would the placeholders would be a problem?\nAfaik, an URI to a resource is unique as well as the resource itself meaning that if you have some different pattern including a placeholder it will not match the same uri/resource.\nCurrently a router:debug tends to prove this:\napi_get_user          GET    /api/users/{id}.{_format}\napi_put_user          PUT    /api/users/{id}.{_format}\napi_get_users         GET    /api/users.{_format}\napi_post_users        POST   /api/users.{_format}\nHowever, if you have a more flexible or bullet-proof strategy I'll be happy to know it since I didn't dive in the Router API so far\n. I've written a quick implementation using the CacheWarmerInterface to generate the data once.\nFeel free to comment it.\n. @lsmith77, concerning the naming, how would you name it? I though of HateoasListener. What about it?\n. So you think about something like this:\nphp\n<?php\ninterface AllowedMethodsLoaderInterface\n{\n    function getAllowedMethods();\n}\n``` php\n<?php\nclass AllowedMethodsRouterLoader implements AllowedMethodsLoaderInterface\n{\npublic function __construct(Router $router, $isDebug = false);\n\npublic function getAllowedMethods()\n{\n    $routes = $this->router->getRouteCollections()->all();\n    // Process routes and extract methods\n\n    return $allowedMethods;\n}\n\n}\n```\nGiven your suggestion, I though such decorator could be a good idea because it would ease the implementation of cache in any other loaders.\n``` php\n<?php\nclass AllowedMethodsConfigCacheLoader implements AllowedMethodsLoaderInterface, CacheWarmerInterface\n{\n    public function __construct(AllowedMethodsLoaderInterface $loader, $file, $isDebug = false)\n    {\n        $this->loader = $loader;\n        $this->cache = new ConfigCache($file, $isDebug);\n    }\npublic function getAllowedMethods()\n{\n    if (!$this->cache->isFresh()) {\n        $this->cache->write(sprintf('<?php return %s;', var_export($loader->getAllowedMethods(), true));\n    }\n\n    return require $this->cache;\n}\n\n}\n```\nThe listener now just needs a loader implements the given interface to fetch the allowed methods.\n``` php\n<?php\nclass AllowedHttpMethodsListener\n{\npublic function __construct(AllowedMethodsLoaderInterface $loader)\n{\n    $this->loader = $loader;\n}\n\npublic function onKernelResponse(FilterResponseEvent $event)\n{\n    // Do something onKernelResponse\n}\n\n}\n```\n(Note that I wrote it as-is so it may contains errors)\n. @stof I don't get your point on the wrapper, which data do we need to have a powerful caching? The cache loader doesn't need to be aware of where we get the data from.\nI actually think that using such decorator helps to don't tie the cache system with the loader itself. If we're using an interface, it is mostly because we suppose we could have several loaders in place of the RouterLoader. If we put cache inside, we will need to implement cache in each loader and it doesn't follow the DRY principle imho.\nI may miss a point or two, but the ConfigCache only needs data, a file to write to and a debug flag.\n. @stof mm ok got it, I didn't knew about this resources things.\n. I fixed both comments. Do you have any advices about the namespace?\n. @lsmith77 yeah sure, I badly worked in master, I'll create a new branch, rebase and open a new PR to let you merge properly when things will be done.\n. I chose AllowedMethodsLoader as namespace and disabled the listener by default.\nIf all is ok for you, I'll branch, rebase and open a new PR. Let me know\n. Hi,\nSorry I was travelling for a while, and very busy, thanks for finishing the work.\n. Hi,\nSorry I was travelling for a while, and very busy, thanks for finishing the work.\n. Well, as I said, it is an option, but the main question is, it is friendly? I know that we can't always be happy, but should I really need to always use a ViewHandler when I want to set up Cache? In any medium/large sized application, Cache is not an option, it is a requirement.\n@Cache annotation may obviously be used but there are use cases where we need to programmatically configure it. We can't do it with the current View whereas it is possible with the native Response object.\nI think adding the HeaderBag and some proxy methods to the View object won't lead to a code bloat while allowing an easy way to work with Cache within a Restful api.\nIf you agree on this, I'll open a PR. \n. Most of my action aren't using any ViewHandler, I've extra tiny controllers which only returns the data provided by a service.\n``` php\n    public function getArticleAuthorAction(Article $article)\n    {\n        $article = $article->getAuthor();\n    return RestView::create(array('author' => $author), Codes::HTTP_OK);\n}\n\n```\nI would therefore be able to do:\n``` php\n    public function getArticleAuthorAction(Article $article)\n    {\n        $article = $article->getAuthor();\n    $view = RestView::create(array('author' => $author), Codes::HTTP_OK);\n    $view->setMaxAge(10);\n\n    return $view;\n}\n\n```\nCurrently I would need to do:\n``` php\n    public function getArticleAuthorAction(Article $article)\n    {\n        $article = $article->getAuthor();\n    $view = RestView::create(array('author' => $author), Codes::HTTP_OK);\n\n    $handler = $this->get('fos_rest.view_handler');\n    $response = $handler->handle($view)\n        ->setMaxAge(100);\n\n    return $response;\n}\n\n```\nI agree it doesn't make much differences, but is it worth to manually calling the ViewHandler service to allow to set such common headers? \nIf I want to make it available in all my action I either need to create my own base controller, create an init method on each of my controller, override the default view handler or append the call to the view handler service in each of my action.\n. I don't think it is wrong, but I was experiencing with the Custom Handler and naively followed the doc:\n\n\nThe handler must have the following signature: handler($viewObject, $request, $response)\n\n\nSo I wrote a quick class with the following method:\nphp\nclass ExperimentHandler {\n{\n    public function createResponse(View $view, Request $request, $format)\n    {\n        return new Response('ok');\n    }\n}\nWhich raised the point I'm trying to fix.\nAt usage however, it may be handy to fix the Handler documentation instead, and keep injecting the ViewHandler into the custom.\n. let's close this, and update the doc accordingly :)\n. well I didn't think about such pattern, I will fix it.\n. Something like \nphp\npublic function __construct(RouterInterface $router, AllowedHttpMethodsCacheWarmer $cacheWarmer, $kernelCacheDir)\n?\n. done\n. done\n. done\n. indeed :) done.\n. fixed\n. hehe that's the end of the week :) done\n. Yeah, I forgot to comment about that. I had no idea about where to put them.\nSent from my iPhone\nOn 8 juil. 2012, at 19:58, Christophe Coevoetreply@reply.github.com wrote:\n\n\n@@ -0,0 +1,32 @@\n+<?php\n+/\n- * This file is part of the FOSRestBundle package.\n- \n- * (c) FriendsOfSymfony http://friendsofsymfony.github.com/\n- \n- * For the full copyright and license information, please view the LICENSE\n- * file that was distributed with this source code.\n- /\n  +\n  +namespace FOS\\RestBundle\\EventListener\\AllowedMethodsLoader;\n\nthe EventListener namespace should only contain the listeners. This has nothing to do in a subnamespace of EventListener\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/250/files#r1119461\n. thanks, fixed.\n. No, $config->default returns the actual default or null if there is not, but won't be used in this case since $hasDefault would be false.\n. I was not sure, I thought that it may be needed if the view_response_listener was disabled. Not sure if it is needed though.\n. Indeed, what I meant is that if you disable the view response listener, the view handler would never be called, except manually, so to make things clearer I thought we may enable it in the same way in the listener. \n\nOn 4 oct. 2012, at 20:31, Christophe Coevoet notifications@github.com wrote:\n\nIn EventListener/AccessDeniedListener.php:\n\n@@ -48,7 +60,14 @@ public function onKernelException(GetResponseForExceptionEvent $event)\n$request = $event->getRequest();\n     if (!empty($this->formats[$request->getRequestFormat()])) {\n-            $response = new Response('You dont have the necessary permissions', 403);\n-            $message = \"You don't have the necessary permissions\";\n-            if ($this->viewHandler) {\n  You are not relying on the view response listener here as you are using the ViewHandler explicitly (you cannot rely on the ViewResponseListener btw)\n\n\u2014\nReply to this email directly or view it on GitHub.\n. I know, that was just unfinished work here ;)\n. Ah ok, I wasn't sure, because of this https://github.com/borisguery/FOSRestBundle/commit/34f44a7954592cbfcb17279c458cb916ee296286#L0L44.\n\nI'll fix it tomorrow.\n. Dunno either, I've no such use cases. Being pragmatic I'm tempted to say that we should blacklist because I can't see many cases when it should be disabled compared to those when it shouldn't. But we may try to gather some feedbacks for this.\n. Done\n. ",
    "jhallbachner": "what would be needed to get this PR moving again? this would be incredibly useful on a few different projects and I'd be willing to jump in and do some work to get it merge-ready.\n. ",
    "stephpy": "What's your pov about using boolean instead of Boolean ? I know it's a redundant question but it's not on any PSR and not too on Symfony CS ...\nI'll squash my commits after this\n. Yep, i just wanted to be sure you'll be ok to merge it after ;)\n. Wait for merging that, i see some other CS while i rebase. I'll fix them soon\n. 2 solutions i see:\n1) Do not support array, by this way, we'll return default value if params is not scalar !\n2) It works for only one depth ! But we can support array.\nIt works for 2 cases:\n- ?ids[]=1&ids[]=2\n- ?ids=1,2\nWe could add two params on QueryParam: \n- collection_separator\n- is_collection (for second exemple).\nWith this, we'll implode first exemple with collection_separator.\nSecond params is for making preg_match dynamics and then validate just one time each values of array.\nI've no idea actually how to be able to works with more than one depth array\n. 2 solutions i see:\n1) Do not support array, by this way, we'll return default value if params is not scalar !\n2) It works for only one depth ! But we can support array.\nIt works for 2 cases:\n- ?ids[]=1&ids[]=2\n- ?ids=1,2\nWe could add two params on QueryParam: \n- collection_separator\n- is_collection (for second exemple).\nWith this, we'll implode first exemple with collection_separator.\nSecond params is for making preg_match dynamics and then validate just one time each values of array.\nI've no idea actually how to be able to works with more than one depth array\n. I guess too queryFetch is not useful to validate forms or array with more than one depth ...\nThis pr at first time just want to fix an exception when an array is given on a param.\n. I guess too queryFetch is not useful to validate forms or array with more than one depth ...\nThis pr at first time just want to fix an exception when an array is given on a param.\n. @Seldaek To validate this it could be better to implode theses datas and improve the regex no ?\nElse we'll do 500 preg_match if array has 500 entries.\nThen we may add a collection_separator on annotation to implode this.\nIf we do that, we could supports too ids=1,2 easily ... that's just my pov\n. Ok, it'll make it as soon as possible\n. Actually i make it like that:\nAnnotation:  param= foo; array = true; requirements = \\d+; default = 1\n- No param given => array(1)\n  May we should pass an empty array ? not sure that's the best solution.\n- array(1, 'toto', 3) given => array(1, 1, 3);\nDo you think it's what we need ?\n. Yep, i guess that's a good solution @Seldaek.\nI'll rebase soon\n. Oh, you're fast as hell ! I'm just delete my comment coz i make mistake during rebase\n. > also .. could you add something to the docs?\nOk, i will\n. Rebased, i added a block on documentation too\n. I updated doc (i hope it's OK like that).\nI added too a verification of depths count to return default if there is more than one depth\n. :+1:\n. Fix https://github.com/FriendsOfSymfony/FOSRestBundle/pull/256/files#r1139331\n. :+1:\n. +1 for this !!! Thanks :)\n. As you said i'm not sure it's a good choice to replace automatically Response Headers with view headers, but it could be useful too ...\nWe could have an option on view handler to deal with that, no ?\n. I guess,\npsr2\n\nThe term \"class\" refers to all classes, interfaces, and traits\n\nSection 4.3\nOr method on Interfaces are not targeted about this ?\n. I'll add it to use statements, thanks\n. Fixed\n. done\n. fixed, i'll squash my commits when this pr can be merged \n. Han ... it was merged, i open a new pr to this that\n. And you already do that ... i should look at commits before talk ... thanks \n. That's the array(array(1)) which fail, i'm working on it. \n. ",
    "shouze": "@Seldaek array serialization looks like the better solution to validate 1 dimension arrays in 1 simple cheap cpu cost operation.\n. Having either a querystring like this :\nid=1,2,3,4\nOR\nid[]=1&id[]=2&id[]=3&id[]=4\nCan be treated the (almost) same way :\nIF id IS_COLLECTION (setted from annotations) THEN\n   IF IS_STRING OR IS_ONE_DIMENSION_ARRAY (count($array) === count($array, COUNT_RECURSIVE)) THEN\n      IF IS_ONE_DIMENSION_ARRAY\n         STRING = SERIALIZE ARRAY TO STRING WITH SEPARATOR (defined from annotations)\n      ENDIF\n      PREG_MATCH STRING OR THROW VALIDATION EXCEPTION\n   ENDIF\nENDIF\n. +1\n. ",
    "thalwani": "I agree with stephpy... If we do that, we could supports too ids=1,2 easily ...\n. ",
    "pschirch": "Updated my Doctrine common and now it works\nThanks.\n. Thx!\n(Shame - How could I overlooked? )\nMake things easier sounds nice. :)\n. Yes, I'm going to do it.\n. Here is my first solution to resolve that issue.\n1. Add a wrapper builder method\nI added a wrapper getter to FOS\\RestBundle\\Controller\\ExceptionController:\n```\nprotected function createExceptionWrapper(array $parameters)\n{\n    return new ExceptionWrapper($parameters);\n}\npublic function showAction(...)\n{\n    ...\n    try {\n        if (!$viewHandler->isFormatTemplating($format)) {\n            $parameters = $this->createExceptionWrapper($parameters);\n        }\n    }\n    ...\n}\n```\n2. Configure Twig exception controller with extended ExceptionController\n```\nTwig exception configuration\ntwig:\n    exception_controller: 'Acme\\DemoBundle\\Controller\\ExceptionController::showAction'\n```\n3. Add custom parameters in extended ExceptionController\n```\n// src/Acme/DemoBundle/Controller/ExceptionController.php\nnamespace Acme\\DemoBundle\\Controller;\nuse Acme\\DemoBundle\\Util\\ExceptionWrapper;\nuse FOS\\RestBundle\\Controller\\ExceptionController as FOSExceptionController;\nuse FOS\\RestBundle\\View\\ViewHandler;\nuse Symfony\\Component\\HttpKernel\\Exception\\FlattenException;\nuse Symfony\\Component\\HttpKernel\\Log\\DebugLoggerInterface;\nclass ExceptionController extends FOSExceptionController\n{\n    const X_APPLICATION_ERROR_CODE = 'X-Application-Error-Code';\nprotected function hasExceptionApplicationErrorCode(FlattenException $exception)\n{\n    $headers = $exception->getHeaders();\n    if (array_key_exists(self::X_APPLICATION_ERROR_CODE, $headers))\n        return true;\n}\n\nprotected function getExceptionApplicationErrorCode(FlattenException $exception)\n{\n    $headers = $exception->getHeaders();\n    return $headers[self::X_APPLICATION_ERROR_CODE];\n}\n\nprotected function createExceptionWrapper(array $parameters)\n{\n    return new ExceptionWrapper($parameters);\n}\n\nprotected function getParameters(ViewHandler $viewHandler, $currentContent, $code, FlattenException $exception, DebugLoggerInterface $logger = null, $format = 'html')\n{\n    $defaultParameters = parent::getParameters($viewHandler, $currentContent, $code, $exception, $logger, $format);\n\n    if ($this->hasExceptionApplicationErrorCode($exception)) {\n        $parameters  = array(\n            'application_error_code' => $this->getExceptionApplicationErrorCode($exception),\n        );\n        $parameters = array_merge($parameters, $defaultParameters);\n        return $parameters;\n    }\n\n    return $defaultParameters;\n}\n\n}\n```\n4. Extend ExceptionWrapper with custom parameters\n```\n// src/Acme/DemoBundle/Util/ExceptionWrapper.php\nnamespace Acme\\DemoBundle\\Util;\nuse FOS\\RestBundle\\Util\\ExceptionWrapper as FOSExceptionWrapper;\nclass ExceptionWrapper extends FOSExceptionWrapper\n{\n    private $applicationErrorCode;\npublic function __construct(array $data)\n{\n    parent::__construct($data);\n\n    if (array_key_exists('application_error_code', $data))\n        $this->applicationErrorCode = $data['application_error_code'];\n}\n\n}\n```\nThat works for me! But I think mapping custom HTTP headers to exception dynamically with the help of bundle configuration will be more sophisticated.\nfos_rest:\n    exception:\n        headers:\n             'X-Application-Error-Code' : 'application_error_code'\n             ...\nI can prepare an example for this too.\n. PR done. Sorry for waiting, it was my first PR on Github.\n. However, in the Composer's philosophy it is said that I need \"friendsofsymfony/rest-bundle\": \"{VERSION}\". It's in the bundle's responsibility to define its own correct requirements. \n. Yes. I want to update my webservice from Symfony 2.1.8 to 2.2.0 (code refactoring still done). But I won't roll out in production until a stable fix is released. So I be patient ... :D\n. While debugging I spot that the attribute value  for _view in the Request object differs:\nSymfony 2.2\ntemplate={Symfony\\Bundle\\FrameworkBundle\\Templating\\TemplateReference} (Object)\nSymfony 2.3 \ntemplate=AcmeDemoBundle:Acme:myTemplate.html.twig (String)\n. Furthermore the _template var in  in onKernelController() added to the Request on line 60 differs too:\nSymfony 2.2\n_template={FOS\\RestBundle\\Controller\\Annotations\\View} (Object)\nThe $configuration value  is a FOS\\RestBundle\\Controller\\Annotations\\View object.\nSymfony 2.3\nnot defined (because $configuration === null)\n. Checked out 0.13.x-dev. Your PR solves the issue.\nIt works like a charm here. Thanks! \n. ",
    "mrzepinski": "So, how can I set format 'jsonp' to serializer? I have to use Sencha Touch 2 in my project. I have created a Store with proxy\nto get jsonp list contains my objects, but when it is serialized by json, not jsonp, I get 'Uncaught SyntaxError: Unexpected token : '\n. Thanks, but I extricated myself from the problem in another way. I have used AJAX in Sencha Touch, instead of JSONP.\n. ",
    "ilanco": "@lsmith77 Your patch breaks the call to the service fos_rest.view_handler:\nThis is the error message I get when calling $this->get('fos_rest.view_handler') from the controller.\nYou have requested a non-existent service \"fos_rest.view_handler\"\n. ",
    "pierrre": "Yes. It's enabled by default in sf2, right?\n. Yes. It's enabled by default in sf2, right?\n. Ok, thank you very much.\nI have already seen the documentation. I'll try again tomorrow :-) \n. Ok, thank you very much.\nI have already seen the documentation. I'll try again tomorrow :-) \n. How to create a POST route with this patch?\nI'd like to create \"POST /users/register\".\nI've created a function named postRegisterAction() in my UsersController,\nbut it creates \"POST /users/registers\"... :(\n. How to create a POST route with this patch?\nI'd like to create \"POST /users/register\".\nI've created a function named postRegisterAction() in my UsersController,\nbut it creates \"POST /users/registers\"... :(\n. ",
    "travisbot": "This pull request passes (merged 2c699918 into c05cdaa3).\n. This pull request passes (merged 0738bad4 into 63cfa480).\n. This pull request fails (merged 0d576d17 into d3f15d6c).\n. This pull request fails (merged c117acbc into d3f15d6c).\n. This pull request passes (merged 05516320 into d3f15d6c).\n. This pull request fails (merged 9c650860 into d3f15d6c).\n. This pull request fails (merged 9c650860 into d3f15d6c).\n. This pull request passes (merged a58ac44d into c05cdaa3).\n. ",
    "dtunes": "I wonder if this will ever make into master.\n. ",
    "hd-deman": "+1 for jsonp\n. @tonivdv, override ExceptionController will not help. because in ExceptionController->\ngetParameters you can access only to FlattenException that is not exception\nthat your throw. and if you add some extra data to your exception it will\nnot be assessable from FlattenException.\n. ...it is bless ::)\n. yes. its fixed by #732\n. ",
    "spwin": "I had the latest version #6edf1ee however I keep getting the error\nYou have requested a non-existent service \"fos_rest.view_handler\"\nI solved it by changing view.xml:\n<service id=\"fos_rest.view_handler.default\" class=\"FOS\\RestBundle\\View\\ViewHandler\" public=\"false\">\nto\n<service id=\"fos_rest.view_handler.default\" class=\"FOS\\RestBundle\\View\\ViewHandler\" public=\"true\">\nAnd FOSRestController.php\n$this->viewhandler = $this->container->get('fos_rest.view_handler');\nto\n$this->viewhandler = $this->container->get('fos_rest.view_handler.default');\nClear the cache!\nMy Symfony version is: 2.8.17. InvalidArgumentException in YamlFileLoader.php line 399:\nThere is no extension able to load the configuration for \"fos_rest.view_handler\" (in /Resources/config/services.yml). Looked for namespace \"fos_rest.view_handler\", found none. This is result of the trick :) \nI can get it to work only if I change rest-bundle controller FOSRestController.php\n$this->viewhandler = $this->container->get('fos_rest.view_handler');\nto\n$this->viewhandler = $this->container->get('fos_rest.view_handler.default');\nmanually. ",
    "vslinko": "No, I'm use 'use'. Without 'use' different error like 'no use found'.\nThis error because AnnotationRegistry is empty and DocParser load classes only from AnnotationRegistry.\nBut how fix it?\n. ",
    "phidah": "Seems that adding the following line as line 332 in FOS\\RestBundle\\View\\ViewHandler (before $content = $serializer->serialize($view->getData(), $format);) solves the issue:\n$serializer->setGroups($request->attributes->get('_view')->getSerializerGroups());\nIs this how it should be implemented, or is there a better way?\n. Thanks for the feedback.\n@naahuc I have no mentioning of versions whatsoever :/\n. Hi Lukas, Yes, it is of course error 202 :-)\n. Hi Lukas, Yes, it is of course error 202 :-)\n. ",
    "mixegen": "But I c this in Route annotation class:\n```\npublic function __construct(array $data)\n    {\n        parent::__construct($data);\n        $requirements = $this->getRequirements();\n        $requirements['_method'] = $this->getMethod();\n        $this->setRequirements($requirements);\n    }\npublic function getMethod()\n{\n    return null;\n}\n\n```\nSo, as I understand, no matter which method I set it Route(...) requirements parameter it will ignore it. And as result I will get route with GET method required or I missed something...\n. But I c this in Route annotation class:\n```\npublic function __construct(array $data)\n    {\n        parent::__construct($data);\n        $requirements = $this->getRequirements();\n        $requirements['_method'] = $this->getMethod();\n        $this->setRequirements($requirements);\n    }\npublic function getMethod()\n{\n    return null;\n}\n\n```\nSo, as I understand, no matter which method I set it Route(...) requirements parameter it will ignore it. And as result I will get route with GET method required or I missed something...\n. For issue #283\n. For issue #283\n. ",
    "garciaf": "I got the same issue ...\n. ",
    "Bendihossan": "I had a routing issue that was causing this to happen. Fix is described in the docs.\n. I had a routing issue that was causing this to happen. Fix is described in the docs.\n. I think the reason the bundle doesn't generate a route for the collection resource is that it tries to generate two routes with the same name (get_content) for both the collection and the individual resource URLs. I think to fix this issue we want to check to the uncountable static array in Util\\Pluralization and modify the name of the route if we're trying to get a collection (cgetAction) rather than the singular resource.\nI'm still new to Symfony and haven't developed a bundle myself so I don't quite understand how information flows around the FosRestBundle so I don't know if what I'm suggesting is that easy.\n. Am I right in saying that the function at fault is generateRouteName in RestActionReader? https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Routing/Loader/Reader/RestActionReader.php#L296\n. @lsmith77 I have a (hacky) fix for this: https://gist.github.com/bd08ec2488eb816c561d\nWit this change the bundle generates this output:\nget_collection_content         GET      /{_locale}/content.{_format}\nget_content                    GET      /{_locale}/content/{id}.{_format}\nI've hard coded 'cgetAction' for now, I'll try and find a way around this. If you're otherwise OK with that I will add a test and make a PR.\n. How do you detect if the action is a GET for a collection without looking up the method name? I can change the code to do this if you know.\n. What do you think is the best thing to do? Using the code in the gist as it is with the hard coded 'cgetAction' would limit any potential edge case behaviour changes as it'd be targeted to functions with that method signature? I realise that's not ideal so I don't mind if you don't like that.\nThis code seems to detect if the route is for a collection or not but it looks messy to me: https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Routing/Loader/Reader/RestActionReader.php#L334\n. populateTemplateVariables instead of setFillTemplateVars?\n. ",
    "benja-M-1": "Should I do something else so that this can be merged?\n. ",
    "mevers47": "+1 Can be very handy in my situation where every resource has one name, not a plural and singular one. Just one singular name, like the name for an entity.\n. ",
    "rickard2": "This hack will fix the issue for me at least for now, but I'd like to know if a proper change would be possible in the bundle.\nhttps://gist.github.com/3690671\n. No JsonDecoder is not the cause of this issue, I'm just using it as a simple solution to be able to continue  on with the project. \nWithout my hack the decoded JSON looks like this: \narray\n  'subject' =>\n    array\n      'id' => int 2\n      'name' => string 'Biologi' (length=7)\n      'active' => boolean false\nBut when that data is then parsed by the bundle, the boolean in the database is set to true. This leads me to believe that as long as the key is set to something the value is considered to be true. \nBy removing false booleans in the incoming data after decoding, the bundle considers it to be false and it all works for me, but the issue has to be somewhere else in the code. \n. Code removed, not relevant to the issue\n. @lsmith77 Ok, so this is maybe an issue of the Form component of symfony and not the REST bundle?\n. Ok, is there some other type I can use in the Form component which could be used in the way that I'm trying? I'm using ember-data as front end framework which send the data back to the server in this format. \n. @babour I'm still using the hack described in https://gist.github.com/3690671 which basically just removes all boolean false values\n. @babour I'm still using the hack described in https://gist.github.com/3690671 which basically just removes all boolean false values\n. Its part of request handling and processing, basically just fetching the data from the Request object and removing all boolean false values. Then bind the processed data to the Form instead of the actual request\n. Its part of request handling and processing, basically just fetching the data from the Request object and removing all boolean false values. Then bind the processed data to the Form instead of the actual request\n. ",
    "lukaszwit": "@Codepadawan I had the same issue. My workaround was to set default value in entity to false; But still this is hack not fix.\n. ",
    "m-naw": "Can confirm that issue.\n. The problem was I had NotBlank validator turned on and when boolean field is set to false is being probably removed by fos_rest.decoder.jsontoform decoder\n. ",
    "mpclarkson": "I am having this issue again since the merge referenced in issue #740 . I can no longer set a boolean property to default to true without explicitly setting it to true in every JSON request.\n. In this commit: \nhttps://github.com/FriendsOfSymfony/FOSRestBundle/commit/909c67b47236686530c8c751049177a47b55f8c7\nMatthew Clarkson\n\nOn 12 Dec 2014, at 6:04 pm, Lukas Kahwe Smith notifications@github.com wrote:\nwhich merge? I do not see any referenced merge in #740\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "waiting-for-dev": "Thanks a lot for your response lsmith77. But, how can I know if isFormatTemplating(). First of all, instead of:\nif ($view->isFormatTemplating())\nI have to use:\nif ($this->get('fos_rest.view_handler')->isFormatTemplating())\nBut maybe this is because I'm not using the listener support.\nAnyway, isFormatTemplating() expects one parameter, $format, and $view->getFormat() is always returning NULL\n. Ok, thank you very much. This worked, setting $_format as the first parameter in the action signature, and providing _format: html and _format: json for each route.\nShouldn't this be more straightforward? I mean, a way to automatically set other variables for the template, I think ideally in the same setTemplate():\n->setTemplate('MyBundle:MyController:myTemplate.html.twig', array('name' => $name))\nI think this should be a feature request (I leave the ticket opened just in case this is accepted as a feature request, otherwise close).\nThank you very much again, you saved me a headache day :)\n. I think I have been dealing with a very common procedure, because I just generated the controller with the Admin Generator, and in the show action the $deleteForm is passed to the template.\n. ",
    "kristofvc": "Your composer.json must have these two lines: \n\"jms/serializer-bundle\":\"dev-master\",\n\"friendsofsymfony/rest-bundle\": \"*\",\nIt will work then.\n. ",
    "n1c01a5": "I have an equivalent problem:\nWhen I run php composer.phar install\nI have this error:\n```\nLoading composer repositories with package information               \nInstalling dependencies from lock file\nYour requirements could not be resolved to an installable set of packages.\nProblem 1\n    - Can only install one of: friendsofsymfony/rest 0.7.x-dev, friendsofsymfony/rest 0.8.x-dev.\n    - Can only install one of: friendsofsymfony/rest 0.8.x-dev, friendsofsymfony/rest 0.7.x-dev.\n    - Can only install one of: friendsofsymfony/rest 0.8.x-dev, friendsofsymfony/rest 0.7.x-dev.\n    - Installation request for friendsofsymfony/rest == 0.7.9999999.9999999-dev -> satisfiable by friendsofsymfony/rest 0.7.x-dev.\n    - Installation request for friendsofsymfony/rest == 0.8.9999999.9999999-dev -> satisfiable by friendsofsymfony/rest 0.8.x-dev.\n```\nAny idea?\n. My composer.json:\n{\n    \"name\": \"symfony/framework-standard-edition\",\n    \"description\": \"The \\\"Symfony Standard Edition\\\" distribution\",\n    \"autoload\": {\n        \"psr-0\": { \"\": \"src/\" }\n    },\n    \"require\": {\n        \"php\": \">=5.3.3\",\n        \"symfony/symfony\": \"2.1.*\",\n        \"doctrine/orm\": \">=2.2.3,<2.4-dev\",\n        \"doctrine/doctrine-bundle\": \"1.0.*\",\n        \"twig/extensions\": \"1.0.*\",\n        \"symfony/assetic-bundle\": \"2.1.*\",\n        \"symfony/swiftmailer-bundle\": \"2.1.*\",\n        \"symfony/monolog-bundle\": \"2.1.*\",\n        \"sensio/distribution-bundle\": \"2.1.*\",\n        \"sensio/framework-extra-bundle\": \"2.1.*\",\n        \"sensio/generator-bundle\": \"2.1.*\",\n        \"jms/security-extra-bundle\": \"1.2.*\",\n        \"jms/di-extra-bundle\": \"1.1.*\",\n        \"gedmo/doctrine-extensions\": \"dev-master\",\n        \"friendsofsymfony/user-bundle\": \"*\",\n        \"friendsofsymfony/comment-bundle\": \"dev-master\",\n        \"mopa/bootstrap-bundle\": \"dev-master\",\n        \"twitter/bootstrap\": \"master\",\n        \"knplabs/knp-paginator-bundle\": \"dev-master\",\n        \"knplabs/knp-menu-bundle\": \"dev-master\",\n        \"kriswallsmith/assetic\": \"dev-master\",\n        \"whiteoctober/breadcrumbs-bundle\": \"2.1.x-dev\",\n        \"stof/doctrine-extensions-bundle\": \"dev-master\"\n    },\n    \"scripts\": {\n        \"post-install-cmd\": [\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::buildBootstrap\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::clearCache\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::installAssets\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::installRequirementsFile\"\n        ],\n        \"post-update-cmd\": [\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::buildBootstrap\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::clearCache\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::installAssets\",\n            \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::installRequirementsFile\"\n        ]\n    },\n    \"config\": {\n        \"bin-dir\": \"bin\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"extra\": {\n        \"symfony-app-dir\": \"app\",\n        \"symfony-web-dir\": \"web\"\n    },\n    \"repositories\": [\n           {\n               \"type\": \"package\",\n               \"package\": {\n                   \"version\": \"master\",\n                   \"name\": \"twitter/bootstrap\",\n                   \"source\": {\n                       \"url\": \"https://github.com/twitter/bootstrap.git\",\n                       \"type\": \"git\",\n                       \"reference\": \"master\"\n                   },\n                   \"dist\": {\n                       \"url\": \"https://github.com/twitter/bootstrap/zipball/master\",\n                       \"type\": \"zip\"\n                   }\n               },\n               \"type\": \"vcs\",\n               \"url\": \"http://github.com/phiamo/assetic\"\n           }\n       ]\n}\nAnd my composer.lock\n```\n{\n    \"hash\": \"bdd18a9e0a005f70f5f26888ceb974a1\",\n    \"packages\": [\n        {\n            \"package\": \"doctrine/common\",\n            \"version\": \"2.3.x-dev\",\n            \"source-reference\": \"605b1b8b5a7bc8daf9111fb35483e5708e30de35\",\n            \"commit-date\": \"1346249247\"\n        },\n    {\n        \"package\": \"friendsofsymfony/rest\",\n        \"version\": \"dev-master\",\n        \"alias-pretty-version\": \"0.7.x-dev\",\n        \"alias-version\": \"0.7.9999999.9999999-dev\"\n    },\n\n//...\n    {\n        \"package\": \"jms/aop-bundle\",\n        \"version\": \"1.0.0\"\n    },\n    {\n        \"package\": \"jms/cg\",\n        \"version\": \"1.0.0\"\n    },\n    {\n        \"package\": \"jms/di-extra-bundle\",\n        \"version\": \"1.1.x-dev\",\n        \"source-reference\": \"af219527024c584d7311aa855d7522429c5bdb67\",\n        \"commit-date\": \"1346947722\"\n    },\n    {\n        \"package\": \"jms/metadata\",\n        \"version\": \"1.1.1\"\n    },\n    {\n        \"package\": \"jms/security-extra-bundle\",\n        \"version\": \"1.2.x-dev\",\n        \"source-reference\": \"9ab6aceda50fc7a2b07d741ba4b3f0695508afcb\",\n        \"commit-date\": \"1346947943\"\n    },\n    {\n        \"package\": \"jms/serializer-bundle\",\n        \"version\": \"dev-master\",\n        \"alias-pretty-version\": \"0.9.x-dev\",\n        \"alias-version\": \"0.9.9999999.9999999-dev\"\n    },\n    {\n        \"package\": \"jms/serializer-bundle\",\n        \"version\": \"dev-master\",\n        \"source-reference\": \"5a9b7e6b62143950726f642da23d7eebf850e389\",\n        \"commit-date\": \"1346073949\"\n    },\n\n///...\n        {\n            \"package\": \"whiteoctober/breadcrumbs-bundle\",\n            \"version\": \"2.1.x-dev\",\n            \"source-reference\": \"67ed84215d05bff1d4de22ce16e09bc0a0ae9b40\",\n            \"commit-date\": \"1345904937\"\n        }\n    ],\n    \"packages-dev\": null,\n    \"aliases\": [\n],\n\"minimum-stability\": \"dev\",\n\"stability-flags\": {\n    \"gedmo/doctrine-extensions\": 20,\n    \"friendsofsymfony/comment-bundle\": 20,\n    \"mopa/bootstrap-bundle\": 20,\n    \"knplabs/knp-paginator-bundle\": 20,\n    \"knplabs/knp-menu-bundle\": 20,\n    \"kriswallsmith/assetic\": 20,\n    \"whiteoctober/breadcrumbs-bundle\": 20,\n    \"stof/doctrine-extensions-bundle\": 20\n}\n\n}\n```\nAny problem?\n. I have already run this command but that not solve it?\nHow I can fix my composer.lock?\nThis line is very strange \"alias-version\": \"0.7.9999999.9999999-dev\".\nMy \"solution\": remake the whole installation.\n. I try use subresource controller but doesn't solve this issue.\nThe controller also catches the string \"new\" instead of \"123\".\nThe error is:\nThe resource 'new' was not found.\nI also try with @route:\n* @Annotations\\Get(\"foo/{id}/bar/new\") but it doesn't works.\n. In first, I would send only the variable $form to be logic rest but it was not necessery because the method newProductElementAction($id)it's an \"interface\" for the client.\nSo\nreturn array(\n            'form' => $form, \n            'id' => $id\n        );\nand it's works.\n@lsmith77  I didn't know the subressource for the controller it's very practice. Thanks.\n. ",
    "boby733": "Thank you for everything, it works!!\n. ",
    "PoisonousJohn": "@stof  you mean signature should be like \n    public function postPointsCheckAction(ParamFetcherInterface $paramFetcher) \n? I tried that way. It didn't help\n. @lsmith77 ofcourse, the first parameter under a fos_rest section. I posted my config\n. @stof yep :\n``` php\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Nelmio\\ApiDocBundle\\Annotation\\ApiDoc;\nuse FOS\\RestBundle\\View\\View;\nuse FOS\\RestBundle\\Controller\\Annotations\\QueryParam;\nuse FOS\\RestBundle\\Request\\ParamFetcherInterface;\nuse FOS\\RestBundle\\Controller\\Annotations\\RequestParam;\nuse FOS\\RestBundle\\Request\\ParamFetcher;\nclass RestController extends Controller\n{\n    /\n     * Return array of points and status of checkin.\n     * Status can be:\n     * \n     *      \"success\" - successful checkin \n     *      \"badPoint\" - you're in a bad point, can't checkin\n     *      \"badTime\" - you're in a good point, but in a bad time, can't check in\n     * \n     * @QueryParam(name=\"udid\", requirements=\"[0-9a-z]+\", default=\"0\", description=\"required\")\n     * @QueryParam(name=\"latitude\", requirements=\"[0-9.]+\", default=\"0\", description=\"required\")\n     * @QueryParam(name=\"longitude\", requirements=\"[0-9.]+\", default=\"0\", description=\"required\")\n     * @ApiDoc(\n     *      resource=true\n     * )\n     */\n    public function postPointsCheckAction(ParamFetcherInterface $paramFetcher)\n    {\n//        public function postPointsCheckAction(ParamFetcherInterface $paramFetcher)\n        $view = new View();\n        /\n         * @var ParamFetcher $params\n         */\n    $data = array();\n\n...\n```\n. @mvrhov yeah, thx, I'll fix it\n. @lsmith77 yep fixed. thank you! Was a problem on my side\n. ",
    "damienalexandre": "Up on this issue, and I vote for a nullable or required option rather than a default check.\n- when a default is set, user might still send nothing (foo=bar&toto), and this should be considered as null, right?\n- then depending on the nullable setting, we can allow or stop the request\nThe nullable default should be false to keep BC.\n. @lsmith77 Sorry I can't atm, I was trying to move the PR forward as this block the Bundle update on one work project.\n. Looks good to me. @QueryParam(name=\"content_filter_name\", description=\"Search by name.\", strict=true) throw the error, and if I add nullable=true, it does not.\nThe ParamFetcher give me a nullable, which is good. And the requirements (when there is one) are checked only if there is a value in the request.\n. ",
    "MaksSlesarenko": "If it was fixed what was the solution? Have same problem now. I had to specify format to make it work.\n$this->forward('...', array(), array('_format' => 'json'));\n. @stof to perform validation against database for example. ",
    "mdarse": "Fixed :-)\n. I think a 401 status code is good here, but it should come with a \"WWW-Authenticate\" header according to the spec.\n. On my side, I disabled AccessDeniedListener and made an authentication entry point based on BasicAuthenticationEntryPoint with a custom header to prevent browser from trigger auth dialog WWW-Authenticate: CustomFormAuth.\nyaml\nsecurity:\n   firewalls:\n        api_firewall:\n            pattern:    ^/api\n            entry_point: <my_entrypoint_service>\nM\n. ",
    "comensee": "I don't see where i could rely on this feature. I am just extending FOSRestController, that's it.\n. This PR solve the issue for me.\n. This PR solve the issue for me.\n. I am facing the same issue when trying to return form errors when bound form is not valid by doing so : \nphp\n   return View::create($form, 400);\nDid something recently changed on this ?\n. it was working about 2 weeks ago i guess... But any tagged versions i am trying now looks to not work.\n. well i found this commit : ab3fb147440aa21aeb357a1638730f8a2ce850d9 .\nGot to figure out a way to test it.\n. Well i loaded this commit putting this in my composer.json.\njavascript\n        \"symfony/symfony\": \"dev-master#ab3fb147440aa21aeb357a1638730f8a2ce850d9\",\nstill getting that empty response : \njavascript\n{}\n. It sounds like the form is not valid but FormErrorIterator is empty at the top.\nSo it may not be a problem with fosrestbundle.\nI'll continue to investigate later.\n. ",
    "OwlyCode": "Yep there's one PR related, it's about adding an annotation for Link method. Concerning the removal of link from the http specs, I effectively can't see it in the http 1.1 specification. \nI followed this guide for REST implementation wich is promoting the use of the LINK method.\nhttp://williamdurand.fr/2012/08/02/rest-apis-with-symfony2-the-right-way/\n. Nice ! Since the change I made is really tiny (actually a one line change), where can I put the doc ?\n. I made the changes to the doc, adding the methods to the full example and some documentation at the bottom, where the list of the available http methods lives.\nAlso, I added the unlink method as it would be inconsistent not to provide it. However I'm aware it is an undiscussed feature. Tell me if you want me to remove it while a choice is made about it.\n. ",
    "dupuchba": "What is the alternative though? any support in the doc? #323 #288 \n. @bmeynell do you have any example? I don't get it...\n. So I must use PATCH to add a user to the collection? @willdurand \n. I have to say your listener in your tuto is quite impressive :) @willdurand ! Ithink we should close this issue then @lsmith77 \n. Hey, I have the same issue but I can't make it work with @stof proposed...\nSo I built a \"Rest\" Api with a backbone.js front-end. Like @pulse00 , it sends format without the root name.\nWhen I make a POST request with backbone, the request is not bind correctly... I have the same error s @pulse00 .\nI tried to set the form with an empty root name with createNamed() but It's not working...\nany idea guys?\n. @pulse00 thinks for the response, but that is exactly what I have and it returns errors as the values somehow are set to empty...\n\nThis is what my header send via POST for a Book object\n. Well, it's working now... I also forgot to set \nnullable=true\nto the entity. Thanks a lot for your help :)\n. The form is not valid because data is empty, and if I delete validations it posts empty values\n. @willdurand I did turn on the body_listener\n@stof you were right, but I still don't understand why... thx :)\n. ok, nice, thx @stof and everyone. Debugging in the terminal is not so easy but all is working fine now.\n. @lsmith77 any idea why? I did not modified any tests files...\n. Nice use of JSON to enhance hypermedias.\nWhat are you plans of implementation of it and do you have any idea what work needs to be done?\n. @lsmith77 ok :), I am ready to participate if someone take the lead of it. Right now I have no idea where to start.\n. ",
    "bmeynell": "Alternative is to not use LINK at all and instead create a separate resource that serves as the link (similar to a m2m table).\n. :+1: for easy separation of an application-level FooApiBundle with a segregated route prefix (e.g., /api/*) that encapsulates all FOSRest functionality.\nAnd what is all this talk about separate kernels? Where's the documentation on this what-sounds-like super useful strategy?\n. Why isn't the form valid? What is the error message?\n. Any news on this? What about ignore_trailing_slash: true|false in the routing config? How difficult would it be to simulate the symfony core behavior?\n. Same issue here. \nUsing a simple @Rest\\View(serializerGroups={\"list\"}) in the controller results in the error: \nThe Response content must be a string or object implementing __toString(), \"boolean\" given.\"\nHowever, using @Rest\\View(serializerGroups={\"Default\", \"list\"}) works without issue. Note that I do not explicitly define a Default group anywhere in my entities.\nUsing PHP 5.6.9-1+deb.sury.org~trusty+2 and Symfony version 2.3.24\n. @Ener-Getick is right: Both default=Category::TYPE_BOOKS and default={Category::TYPE_BOOKS, Category::TYPE_ELECTRONICS} work. Closing.\n. ",
    "pulse00": "@stof @willdurand thanks for your input, makes sense!\n. @dupuchba our base FormType class for the backbone.js frontend looks like this:\n``` php\n<?php\nnamespace Acme\\Demo\\ApiBundle\\Form;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolverInterface;\nabstract class ApiType extends AbstractType\n{\n    /*\n     *  {@inheritdoc}\n     /\n    public function getName()\n    {\n        return null;\n    }\npublic function setDefaultOptions(OptionsResolverInterface $resolver)\n{\n    $resolver->setDefaults(array(\n        'csrf_protection' => false,\n    ));\n}\n\n}\n```\nAs a sidenote: After getting feedback from @bschussek, it's probably cleaner to simply use the Validation Component directly for input validation, and don't have the overhead of the FormComponent.\n. >  it returns errors\nwhat error do you get?\n. @mvrhov @stof the above solution worked for us, although as i've mentioned that for simple input validation of a REST API you'd probably be better off by using the Form component directly.\n. just because i'm a little confused by the latest changes: is it possible to use the current master branch of the fosrestbundle with jms serializer bundle 1.0.* ?\n. great, thanks. \n. @lsmith77 2.0 is the current master? i can't find a branch/tag with version 2.0.\n. @lsmith77 yep, i was confused ;) nevermind.\n. i'm currently trying to upgrade our setup to #332. To satisfy composer with the changes, we needed to change the following dependencies:\n- jms/security-extra-bundle from 1.2.x-dev to 1.*\n- jms/di-extra-bundle from 1.1.* to 1.3.x-dev\nafter adding jms/serializer-bundle manually with version set to 1.0.*.\nAfter renaming all namespaces to the standalone jms/serializer component and the serializer service to jms_serializer, we're getting the following exception:\nCatchable Fatal Error: Argument 1 passed to JMS\\SecurityExtraBundle\\Security\\Authorization\\RememberingAccessDecisionManager::__construct() must implement interface Symfony\\Component\\Security\\Core\\Authorization\\AccessDecisionManagerInterface, array given\nI'll try to find the reason for this BC break and let you know how we managed it to upgrade to the latest changes, however if someone could push me in the right direction, i'd be grateful.\n. @mvrhov thanks for the tip, i've run into another upgrade problem which was related to the order of registering the security bundles with the latest security-bundle version (see my previous comment). The SecurityExtraBundle must be registered after the SecurityBundle. Anyway,  here's the fos-rest / jms related composer setup that works for us now in case anyone else runs into the same upgrade troubles:\n```\n        \"friendsofsymfony/rest-bundle\": \"dev-jms_serlializer_1_0\",\n        \"jms/serializer-bundle\": \"1.0.*\",\n        \"jms/security-extra-bundle\": \"1.4.x-dev\",\n        \"jms/di-extra-bundle\": \"1.3.x-dev\",\n``\n. So for anyone who used dev-master of the fos-rest-bundle, upgrading simply meanssearch/replace` the new jms namespaces and some changes to composer.json. Anyone who used fosrestbundle with 0.9 of the jms serializer must simply use the stable release of fosrestbundle.\nSounds good to me. I'd recommend to add some notes about the upgrade mechanism, as you can easily waste  time in dependency hell during the upgrade process.\n. fyi: this doesn't seem to be compatible with 2.1, i've created a fork of the 2.1 branch and added the fos-rest-bundle / jms-serializer-bundle: https://github.com/pulse00/symfony-standard/blob/2.1/composer.json\nInstalling dependencies ends with the following error:\n```\nYour requirements could not be resolved to an installable set of packages.\nProblem 1\n    - Conclusion: don't install jms/di-extra-bundle 1.1.x-dev\n    - Installation request for jms/serializer-bundle 1.0. -> satisfiable by jms/serializer-bundle 1.0.x-dev.\n    - Conclusion: don't install jms/di-extra-bundle 1.1.1\n    - Conclusion: don't install jms/di-extra-bundle 1.1.0\n    - jms/serializer-bundle 1.0.x-dev requires jms/di-extra-bundle >=1.3 -> satisfiable by jms/di-extra-bundle dev-master, jms/di-extra-bundle 1.3.x-dev.\n    - Can only install one of: jms/di-extra-bundle dev-master, jms/di-extra-bundle 1.1.0-RC.\n    - Can only install one of: jms/di-extra-bundle 1.3.x-dev, jms/di-extra-bundle 1.1.0-RC.\n    - Installation request for jms/di-extra-bundle 1.1. -> satisfiable by jms/di-extra-bundle 1.1.0, jms/di-extra-bundle 1.1.0-RC, jms/di-extra-bundle 1.1.1, jms/di-extra-bundle 1.1.x-dev.\n```\n. yeah, that's somewhat not that easy, see https://github.com/FriendsOfSymfony/FOSRestBundle/issues/330#issuecomment-10971696 ;)\n. @lsmith77 yep, i can confirm that it works with 2.1 if the jms dependencies are set correctly: https://github.com/FriendsOfSymfony/FOSRestBundle/issues/330#issuecomment-10989105\n. @lsmith77 thanks for the feedback. what would you suggest as a restful URI for a resource representing the currently logged in user? \n@mvrhov what you describe works for us without any specific listener, if the controller/action is secured by a firewall with a simple $this->context->getToken()->getUser() where $this->context is the security.context service.\n. alright, thanks.\n. @drgomesp  try \n``` json\n   \"minimum-stability\": \"dev\",\n```\nWhich basically says: I'm ok with non-stable versions\n. ",
    "hjr3": "I think we should be careful here. HATEOAS is a principle, not an actual design pattern or implementation. When a media type has a certain set of principles it can then be said it is using HATEOAS. The problem I have with the FSCHateoasBundle is that it is too broad. This is akin to wanting to write good object oriented code and creating a SeparationOfConcernsBundle. There are many ways to do separation of concerns just like there are many ways to achieve HATEOAS.\nI would like to move in a direction where we write bundles that implement certain media types. There are a few major ones out there right now:\n1. Atom+xml\n2. Collection+json (this is Atom+xml but the specs are mutually exclusive)\n3. Hal+json / Hal+xml\nAtom and Collection are great for authoring APIs, such as blogs, newspapers and CMS. The number of H-factors is small and it is easier to understand. Hal is a more general media type that allows for more flexibility. It has more H-factors and can be harder to understand. I think implementing bundles for Hal or Collection/Atom are about the same amount of code though.\nAt HauteLook, we use Hal+json because there is no defined e-commerce media type out there. The tooling for it has been horrible. We face challenges on both the server side (symfony) and the client side (ember.js) in trying to make Hal+json easy to use. I know @baldurrensch has been working tirelessly with the existing bundles to try and make them more Hal friendly. The PR's are slow to be merged, or even rejected, because people do not understand or disagree with what we are trying to do.\nHauteLook is definitely committed to solving the Hal tooling problem with symfony bundles. I just think trying to make a bundle that allows for easier implementation of all media types is just too broad and challenging at this time. Half of the problem any solution is education on how hypermedia works. Focusing on solving specific use cases, such as Hal, allows us to establish a convention. We can publish a README or series of articles that are concrete enough for people to understand and empower them to build hypermedia friendly APIs.\n. @mvrhov Yes, @baldurrensch is the author of the other PR who works with me at HauteLook. I agree that it doesn't matter if JSMSerializer or FOSRestBundle have the actual implementation. We should try, for the communities sake, to keep it together. I know @baldurrensch has had some trouble with getting the PR merged into JSMSerializer.\nI don't think hal+json is difficult to understand as a format. However, understanding what affordances Mike Kelly made (and why he made them) is a deeper dive into hypermedia design. Those of us who are students of hypermedia design can grok hal+json, but I would imagine that many people do not really understand it all. My point in mentioning that was only to stress that we establish a convention that is pointing those people who are new to hypermedia APIs in the right direction and try to prevent them from making common mistakes.\nThank you for linking Siren! That looks interesting.\n. ",
    "choomz": ":+1: for this commit :)\n. @lsmith77 thanks for your answer. I got exactly the same problem, but I don't see how to set the request format before it goes throught the ParamFetcher. My exception is triggered in html like mdhooge. Can you provide a good way to handle it ? I would like to keep using the force parameter of th param fetcher listener.\nThanks a lot !\n. Well, I checked deeper into the ExceptionController & FormatNegotiator and it seems that the problem come from the _format parameter wich is set in the getFormat() in the ExceptionController.\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Controller/ExceptionController.php#L179\nCommenting this line make the trick, unit tests are still OK, but I am not sure about potential side effects...\nCan you confirm that it should be OK ?\nI will then make a small PR on that. Thanks.\n. Actually it does not work, because when the showAction is called, the $format is already set as 'html'. So the default parameter is not used. I tried to change html to null here : \nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Controller/ExceptionController.php#L54\n. I don't know :) But if we want to keep it, maybe we could do something like that at the end of getFormat() method : \n$format = $formatNegotiator->getBestFormat($request, $priorities, $preferExtension) ?: $format;\n$request->attributes->set('_format', $format);\nreturn $format;\nPlease tell me what you want, and maybe we can make a fix today ?\n. yes it's ok for me, let's go for a PR ?\n. @lsmith77 ping ? :)\n. Thanks\n. ",
    "eXtreme": "Any progress on that? It would be cool to get rid of _format automatically.\n. > BTW the exception controller does support defining what HTTP status to use ona per exception class basis.\nWell, when I do that, many of my 200 statuses started becoming 400\n/edit - or maybe it is just a regression I introduced into my code ;)\n. Wait because I probably introduced this error while working on some code so probably it is not related to exception mapping.\n. @lsmith77 Thanks, it helped. :) :+1: \n. @lsmith77 it does not, because the original function takes $startObLevel as an argument while Rest's does not.\n. Well I decided to stick with 0.13.1 release because latest updates to Exception controller (#532 and #533) broke error responses for me.\nAfter 5 minutes of playing after the update:\n1. PHP Notice in all responses because this $startObLevel is undefined\n2. My API calls with Accept application/json return HTML error responses instead of JSON\n3. Example: Accesing a route with non-allowed method (like PUT instead of POST) return a huge html exeption\n4. My functional tests dependent on checking the error status code and response type are broken becase there is no response even, they are Errored with exceptions (like Symfony\\Component\\HttpKernel\\Exception\\HttpException when @REST\\RequestParam requirement is not met)\nand so on..\nAm I doing something wrong? Everything was fine before and on 0.13.1 is ok.\n. @lsmith77 looks like this simple bug and simple solution fixed some errors\nHowever new thing:\nNotice: Undefined property: FOS\\RestBundle\\Controller\\ExceptionController::$twig in friendsofsymfony/rest-bundle/FOS/RestBundle/Controller/ExceptionController.php on line 279\n@fabpot ping :)\n. Yeah, they could have prevented above problems ;) \n. @lsmith77 Markdown removed * from my text :) It should have been Accept: */*.\n@emgiezet I know about this commit and my config is up to date as it is shown in issue's description :).\n. @lsmith77 My rules are very similar but I created them based on documentation. And:\nWorks (but well, without any other request than html):\nrules:\n  - { path: ^/, host: %api_domain_pattern%, priorities: [ 'json', 'xml' ], fallback_format: json, prefer_extension: false }\n  - { path: ^/, host: %panel_domain_pattern%, priorities: [ 'html' ], fallback_format: ~, prefer_extension: true }\nFails:\nrules:\n  - { path: ^/, host: %api_domain_pattern%, priorities: [ 'json', 'xml' ], fallback_format: json, prefer_extension: false }\n  - { path: ^/, host: %panel_domain_pattern%, priorities: [ 'html', '*/*' ], fallback_format: ~, prefer_extension: true }\nFails:\nrules:\n  - { path: ^/, host: %api_domain_pattern%, priorities: [ 'json', 'xml' ], fallback_format: json, prefer_extension: false }\n  - { path: ^/, host: %panel_domain_pattern%, priorities: [ 'html', '*/*' ], fallback_format: ~, prefer_extension: true }\n  - { path: ^/, priorities: [ html, '*/*' ], fallback_format: ~, prefer_extension: true }\nWorks (but well, without any other request than html):\nrules:\n  - { path: ^/, host: %api_domain_pattern%, priorities: [ 'json', 'xml' ], fallback_format: json, prefer_extension: false }\n  - { path: ^/, host: %panel_domain_pattern%, priorities: [ 'html' ], fallback_format: ~, prefer_extension: true }\n  - { path: ^/, priorities: [ html, '*/*' ], fallback_format: ~, prefer_extension: true }\nNote where */* is located in every example.\nSo I ended up with latest solution and adding \"json\" to priorities.\nAre you sure it should work that way?\n. @lsmith77 \"no fallback route was set\" you mean not fallback format? Does not work either, I changed to ~ after I saw it in liip fork.\n. I can test it tomorrow\n. @lsmith77 so far so good, seems to be working\n. Yup it broke all regexes in my \"requirements\".\n. BTW it is a funny situation because this should have been covert by unit tests but.. tests have been updated as well. :)\n. :+1: waiting for this to be merged!\n. this is not my pull request... @mgiustiniani  ?\n. @renatomefidf I'm struggling with the same thing. I tried writing my ExceptionWrapperHandler but there is no original exception available to retrieve additional data from it. Has anyone managed to do this? I have a custom exception which carries command validation errors and I can't find any way to show them within fos rest.\n. @renatomefidf the easiest thing to do (and the thing I did, cuz it just works) is to write a kernel.exception listener and return JsonResponse with custom format, but it is outside fosrest.\n. @hsz thanks, I will try it.\n. Updated PR to support also Psr\\Http\\Message\\MessageInterface and Psr\\Http\\Message\\RequestInterface\n. What about automatic paramconverters?\npushed the commit once again with removed forgotten debug line\n. What about extending the list via configuration? Like\nyml\nfos_rest:\n    routing_loader:\n        ignored_typehints:\n            - Foo\\Bar\n. Oh snap. Well if it is broking that way, it should also broke if someone does not have SensioFrameworkExtraBundle installed right?\n. From my testing, fosrestbundle fails badly without SensioFrameworkExtraBundle and it is a \"dev\" dependency.\n. @xabbuh are you referring to SensioFrameworkExtraBundle fail? Yes it is independent from my PR. :P I think SensioFrameworkExtraBundle should be moved to \"required\" dependencies.\n```\n..............................................................  62 / 342 ( 18%)\n.............................................................. 124 / 342 ( 36%)\n.....................................PHP Fatal error:  Class 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener'\nnot found in C:\\Users\\Jacek\\Work\\FOSRestBundle\\EventListener\\ViewResponseListener.php on line 29\nFatal error: Class 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener' not found in ...\\FOSRestBu\nndle\\EventListener\\ViewResponseListener.php on line 29\n```\n. See: https://github.com/eXtreme/FOSRestBundle/commit/bb75490723e48f69078b05da054eff3316620ab0\nAdded class_exists || interface_exists check before isSubclassOf. For testing I separated the controller to first using symfony request and second using psr request. Also separated test, first testing \"TypeHintedController\" and second testing \"TypeHintedPsr7Controller\" with skipping when no psr/http-message package is installed. To make tests actually fail without psr package I had to add a fake typehinted parameters to actions.\nAlso, testing with composer --no-dev won't even run the test suite.\n. @lsmith77 what about https://github.com/eXtreme/FOSRestBundle/commit/bb75490723e48f69078b05da054eff3316620ab0 ? Do you want me to re-make the PR?\n. There are many extensions with numbers. I can't think of someone generating a mp3 file (but possible of course) but M3U is a very easy example.\n. ",
    "DRvanR": "The main reason for having the separation is that the application is being used in two different sections.\nOne is just HTML, and mostly powers crud screens, as well as the login, search, favourites, etc. pages. The second part, what we're going to use the API for, is read-only on a subset of the entities managed by the crudscreens and read/write on entities managed by the api. This second part is a heavy js editing interface, used to graphically design (for some users) and navigate/consult (for all users) complex diagrams. Both sections use a lot of shared business logic for the read-only items, abstracted through a service layer. The two sections cannot exist separately so it makes sense to keep them within the same application but the sections are large enough that it would be useful to automate the api parts using FOSRest.\nThe read-only entities are basically a resource for the js side, but powering the html side of the application. We're not looking for different representations of the same resource (i.e. html for app, json for api), but we want to expose some data through a json api and other data through crud-screens.\n. Hello,\n\nhaving a separate \"api\" and html resource urls is not REST. imho the only legitimate use is if you have radically different security setups for the API .. but even then i am not sure if its really necessary.\n\nBoth are true. We do have radically different security setups for parts of the information, but for the largest part the API uses some of the information from the CRUD section but the API-resource is dramatically different. It really is a different resource, not simply a different representation.\n\na legitimate use case here would be for example a project where the API was only supposed to be accessed by other machines within the organizations intranet.\n\nThis is literally the case here. The API is 100% proprietary, will not be exposed to the outside whatsoever. It will only be consumed by the js part of the application. The application itself (both the crud parts and the js part) will not be publicly available. FOSRest is still very useful for having these sections respond correctly and unlocks useful content negotiation, routing, serializer integration etc.\n\nbtw having separate kernels also has the added benefit if being able to trim down the loaded bundles and configured services.\n\nA separate kernel is an interesting idea however the only difference between the two kernels would be the Content Negotiation.\n\nAs far as I understand, he just has a web application, and some other routes to expose data.\n\nExactly. As said before, we're not using the same resource with 2 different representations, we're just exposing parts of the data in our resources.\nIn my mind, it would be great if the FOSRestBundle had the ability to disable it's listeners if the route detected was not one generated by FOSRest (i.e. starting with the prefix). This could be achieved by using a decisionmanager of some sorts that all listeners use in order to advise them on whether they should act or not?\nAs a sidenote, a cookbook entry about having two kernels would be great!\n. ",
    "marcospassos": "imho it should be set by paths, otherwise will be necessary to set _format: html in all routes that do not support rest.\nxml\nfos_rest:\n    coverage:\n        - {path: ^/, formats: {}, templating_formats: {html: true}}\n        - {path: ^/api, formats: {json: true, xml: true}, templating_formats: {}}\nWhat you think?\n. @lsmith77 Figure out that you have a part of your application using REST. Without this approach you have two choices:\n1 - Do not map globally and map each rest route with all formats accepted:\nyml\nroute_api_1:\n    pattern api/1\n    _format: json|xml\nroute_api_2:\n    pattern: api/2\n    _format: json|xml\nroute_api_n:\n    pattern: api/n\n    _format: json|xml\n2 - Map globally and override each non rest router\nyml\nroute_site_1:\n    pattern: site/1\n    _format: html\nroute_site_2:\n    pattern: site/2\n    _format: html\nroute_site_n:\n    pattern: site/n\n    _format: html\nSo, as you can see, will require a lot of work to use the FOSRest together with non rest controllers. With the approach that I suggested you wont worry about in define in each route, reducing a lot the work and improving the maintainability.\nyml\nfos_rest:\n    coverage:\n        - {path: ^/, formats: {}, templating_formats: {html: true}}\n        - {path: ^/api, formats: {json: true, xml: true}, templating_formats: {}}\n``` yml\nroute_site_1:\n    pattern: site/1\nroute_site_2:\n    pattern: site/2\nroute_site_n:\n    pattern: site/n\nroute_api_1:\n    pattern api/1\nroute_api_2:\n    pattern: api/2\nroute_api_n:\n    pattern: api/n\n```\n. @stof Sorry, I didn't know about this new feature. I agree, it sounds the best solution.\n. @stof I haven't found anywhere that talks about it, could you point me one?\n. Yes, it was just for testing. I would like to handle correctly the MethodNotAllowedHttpException. I've just updated my example.\n. @lsmith77 Enable the ExceptionController is the same of put the following code?\nyml\ntwig:\n    exception_controller: 'FOS\\RestBundle\\Controller\\ExceptionController::showAction'\nIf so, I've enabled.\n. Yes, but do you agree this is a fundamental error in a REST application? Even whether it requires a event listener, I think this should be handled for a good understanding of final user.\nI can work on this whether you agree.\n. Wow, it's more complicated than I've imagined. It seems like a Symfony limitation or bug (in our case a serious security case). \nExplanation:\nThe Symfony router cache system generates a cached UrlMatcher ( appdevUrlMatcher ) that has a method match($pathinfo) which verifies which cached URL matches with the current URL (including the _method) and returns the preg_match result to be merged with the context parameters. The preg_match result has all variables declared in the routes configurations populated with the URL data. The problem is when the parameter _method of route does not match with the request type, even then nothing is returned because a MethodNotAllowedHttpException is thrown. \n``` php\napp/cache/dev/appdevUrlMatcher.php\npublic function match($pathinfo)\n{\n    if (0 === strpos($pathinfo, '/product/option/show') && preg_match('#^/product/option/show(?:\\.(?P<_format>json))?$#s', $pathinfo, $matches)) {\n        if ($this->context->getMethod() != 'POST') {\n            // print_r($matches);\n            // Array ( [0] => /product/option/show.json [_format] => json [1] => json )\n            $allow[] = 'POST';\n            goto not_product_option_show;\n        }\n    return $this->mergeDefaults(array_replace($matches, array('_route' => 'product_option_show')), array (  '_format' => NULL,  '_controller' => 'product.controller.option:showAction',));\n}\nnot_product_option_show:\n\nthrow 0 < count($allow) ? new MethodNotAllowedException(array_unique($allow)) : new ResourceNotFoundException(); //\n\n}\n```\nThus, the method getRequestFormat returns html once the  Request->format property is null. \n``` php\nSymfony\\Component\\HttpFoundation\\Request\npublic function getRequestFormat($default = 'html')\n{\n    #echo $this->format; // returns 'html'\n    if (null === $this->format) {\n        $this->format = $this->get('_format', $default);\n    }\nreturn $this->format;\n\n}\n```\nAs the format is html, the method ExceptionController->showAction understands that is a case of templating format and renders a html page error.\n``` php\npublic function showAction(Request $request, FlattenException $exception, DebugLoggerInterface $logger = null, $format = 'html')\n{\n   ...\n    if (!$viewHandler->isFormatTemplating($format)) {\n        $parameters = $this->createExceptionWrapper($parameters);\n    }\n$view = View::create($parameters, $code, $exception->getHeaders());\n$view->setFormat($format);\n\nif ($viewHandler->isFormatTemplating($format)) {\n    $view->setTemplate($this->findTemplate($format, $code));\n}\n\n$response = $viewHandler->handle($view);\n...\n\n}\n```\nI'll report this case on Symfony's page because it may cause some vulnerabilities issues as happened to us.\n. I can't figure out how we can do that without duplicate a lot of code. Maybe a possible solution is to pass the $matches embedded in the MethodNotAllowedException, but it requires their approval.\n. @lsmith77 My team is facing other problem here. As I already have said, just one part of our app is a REST API. Errors like NotFoundHttpException are not caught properly because the routing context does not even have a format yet. But, would be nice if just in /api/ the errors was rendered properly (catching all Exceptions). Maybe a configuration based on a route could be a good solution, requiring just a small modification in the ExceptionController:\nyml\nexception:\n    coverage: [{path: /api, templating: false}] # templating: true, false or auto\nWhat do you think?\n. No problems, I just didn't see any alternative to do this trick without create other Kernel. As we will develop some solution, I've thought in discuss about, in order to do something reusable that we could share with the other users.\n. Ok :)\n. ",
    "luishdez": "Currently a project that I'm working on has \napi.domain.com/ (Only Rest API)  Loads a different kernel \u2026\napp.domain.com/ (Web UI) that uses REST for backbone also\nPractically all my controllers for web app fit a REST pattern. I don't want to duplicate all of them to define a FooApiBundle\u2026 (I got multiple bundles based on functionality also, and doesn't make sense put all apis in one) define all security annotations etc when I can just have one to maintain.\nFinally I've decided to drop FOSRest and add a Listener to the kernel check the content negotiation and use JMSSerializer with groups \u2026 with a few lines I have a REST api and web App using the same controllers.\n@mvrhov +1 About the negotiation to the core.\n. ",
    "cordoval": "@lsmith77 ready :+1: \n. @lsmith77 :+1: ready too\n. @lsmith77 :+1: \n. @lsmith77 rebased :+1: \n. I think this is a bug on the dumper as well, i will open an issue because the documentation is just a config:dump fos_rest and it misleads you.\n``` php\n->arrayNode('rules')\n    ->cannotBeOverwritten()\n    ->prototype('array')\n        ->children()\n            ->scalarNode('path')->defaultNull()->info('URL path info')->end()\n            ->scalarNode('host')->defaultNull()->info('URL host name')->end()\n            ->booleanNode('prefer_extension')->defaultTrue()->end()\n            ->scalarNode('fallback_format')->defaultValue('html')->end()\n            ->arrayNode('priorities')\n                ->beforeNormalization()->ifString()->then(function($v) { return preg_split('/\\s,\\s/', $v); })->end()\n                ->useAttributeAsKey('name')\n                ->prototype('scalar')->end()\n            ->end()\n        ->end()\n    ->end()\n->end()\n```\n. I think this is a bug on the dumper as well, i will open an issue because the documentation is just a config:dump fos_rest and it misleads you.\n``` php\n->arrayNode('rules')\n    ->cannotBeOverwritten()\n    ->prototype('array')\n        ->children()\n            ->scalarNode('path')->defaultNull()->info('URL path info')->end()\n            ->scalarNode('host')->defaultNull()->info('URL host name')->end()\n            ->booleanNode('prefer_extension')->defaultTrue()->end()\n            ->scalarNode('fallback_format')->defaultValue('html')->end()\n            ->arrayNode('priorities')\n                ->beforeNormalization()->ifString()->then(function($v) { return preg_split('/\\s,\\s/', $v); })->end()\n                ->useAttributeAsKey('name')\n                ->prototype('scalar')->end()\n            ->end()\n        ->end()\n    ->end()\n->end()\n```\n. @lsmith77 yeah i have noticed the same issue with symfony/symfony i think is because of the openssl extension not supported on travis distro there of php53. I think we have to plug it manually now but that is just mo.\n:baby: let me know so i can send a PR to other repos thanks!\n. @lsmith77 yeah i have noticed the same issue with symfony/symfony i think is because of the openssl extension not supported on travis distro there of php53. I think we have to plug it manually now but that is just mo.\n:baby: let me know so i can send a PR to other repos thanks!\n. could you please add a failing test for expected generation?\n. could you please add a failing test for expected generation?\n. sure thing @willdurand  :baby: \n. sorry it took me a while chief @willdurand  :baby: \nall done i just recovered network\n. :+1: :baby: \n. so this will plug fosrest into the WDT? :+1: \n. you removed the option for the serializer, is this not needed anymore?\n. you removed the option for the serializer, is this not needed anymore?\n. i wonder if this is really needed or what is the advantage\n. shouldn't this be fos_rest.inflector.doctrine?\n. why not 1.0.* is this doctrine's pattern of using composer? i know probably is the name or valid but just curious\n. php-cs-fixer?\n. this indentation is messed up please use phpstorm or set/fix your indentation\n. same problem\n. really?\n. remove this as it is an obvious comment\n. is this from your phpstorm? better remove these\n. ",
    "domnikl": ":+1: on adding XSDs for all configuration settings, not only for routes\n. ",
    "IgorN": "I tried to use php composer.phar update --dev\n. Ok, I understand. Thank you!\n. ",
    "dewos": "Ok, found it. The problem shows up only when @View is set globally on top in the class definition.\n. Sorry for the delay. The dev.log loops on (again and again and again)\n[2013-02-24 23:55:02] security.INFO: No expression found; abstaining from voting. [] []\n[2013-02-24 23:55:02] event.DEBUG: Notified event \"kernel.view\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelView\". [] []\n[2013-02-24 23:55:02] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener::onKernelRequest\". [] []\n[2013-02-24 23:55:02] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener::onKernelRequest\". [] []\n[2013-02-24 23:55:02] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\". [] []\n[2013-02-24 23:55:02] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\". [] []\n[2013-02-24 23:55:02] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Component\\Security\\Http\\Firewall::onKernelRequest\". [] []\n[2013-02-24 23:55:02] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\AsseticBundle\\EventListener\\RequestListener::onKernelRequest\". [] []\n[2013-02-24 23:55:02] event.DEBUG: Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\". [] []\n[2013-02-24 23:55:02] event.DEBUG: Notified event \"kernel.request\" to listener \"Nelmio\\ApiDocBundle\\EventListener\\RequestListener::onKernelRequest\". [] []\nThe @View annotation not in class but in each action methods fixes the problem, anyway.\n. Ok thanks.\n. Sorry @lsmith77 , I've only now read your reply. Do you still need it?\n. NamePrefix, Prefix, RouteResource, NoRoute and Route, right?\n. I'm not sure either, for NoRoute (by the way, docs should cover completly all annotations, i think).\nAnyway, SensioFrameworkExtraBundle leaves @Route without @Target annotation.\n. Sorry, not now. I'm overloaded with work.\n. - +1 the QueryParam overwrite defaults of the route-definition / ParamConverter.\n. ",
    "j": "We ended up resorting to just using SF2 forms for now, but I'll revisit this issue later!... as it does seem to be a problem because everyone I've asked doesn't have a solid answer, lol.\n. I created a gist of what I wish ODM's could do built in :tongue:\nhttps://gist.github.com/e27b1e61ed6011359b75\n. @stof yep, I know it's not the job of the ODM, but it could be less of a pain to implement this in a custom manner.  We did resort to forms and I'll check out the bundle you showed me here in a few.  When switching to the forms, the only problem we had is patch (when using Symfony's serializer), but that's another issue.  And yeah, I know that the form component mostly binds data. :)  I'm going to close this issue for now.\n. @schmittjoh, yep I believe that is the true nature of the serializer and it isn't a problem with either serialization methods... it should always serialize what it's given...\n. I just feel that users should be given the option to provide a json response with error messages, but also return an empty content body (which is what we'd rather do), and not have to have conditions all over the place with returning a new Response() then a view object. I like clean controllers :P\n. Along these lines also, shouldn't content-type always be omitted when no content is provided?\ni.e.)\ncurl\ncurl -i -H 'Accept: application/json' -X POST http://localhost:7000/resource/1?_method=delete\nWhich may return the view of:\nphp\nreturn $this->view('', Codes::HTTP_NO_CONTENT);\nShould produce:\nHTTP/1.1 204 No Content\nDate: Thu, 24 Feb 2011 12:36:33 GMT\nStatus: 204 No Content\nConnection: close\nSo this being said, since a lot of the stuff in this bundle is magical already and does a lot in the background, can it guess content types based on the view's content?\ni.e)\n1)\nphp\nreturn $this->view();\nShould produce:\nHTTP/1.1 204 No Content\nDate: ...\nStatus: 204 No Content\nConnection: close\n2)\nphp\nreturn $this->view(['status' => 200, 'message' => 'Resource successfully removed!'], 200);\n```\nHTTP/1.1 200 OK\nDate: ...\nStatus: 200 OK\nConnection: close\nContent-Type: application/json\nContent-Length: ...\n{ \"status\": 200, \"message\": \"Resource successfully removed!' }\n```\n. My vote is for automatically passing in a 204 status without a content-type b/c there technically isn't a response to pass... but if a user does have content, then it should be a 200\n. rfc2616 states on persistance verbs that a 200 or a 204 should be sent depending on if there is content or not.\n```\n9.5 POST\nThe action performed by the POST method might not result in a\n   resource that can be identified by a URI. In this case, either 200\n   (OK) or 204 (No Content) is the appropriate response status,\n   depending on whether or not the response includes an entity that\n   describes the result.\n```\n. Symfony Response::prepare() automatically populates the content-type from the request, so, I'm not certain the best way to omit it's content-type on empty responses.\n. Yep, I'll get on this when I relieve some overhead here at work.\n@mvrhov i'm going to ignore the ommitting of a content-type for the time being.  that can be a later discussion.  it's a pain anyway since symfony internally gets the content-type via the request if it is not provided in the reponse anyway.\n. I just realized my example above, I had a copy/paste fail. It's fixed for less confusion when people look at this.  I passed in a 204 with content... browsers wouldn't like that.  Fixed to a 200.\n. ping @lsmith77 \n. @mvrhov , note that content type is not being omitted.\n. Also, we can remove the two made* commits if we want to force this behavior... I'm +1 for that... If a user wants to return a view with no data with a status code of 200, they can just do:\nphp\nreturn $this->view()->setStatusCode(200)\n. I can say after developing a full \"restful api\" from scratch using the HAL / Hateos specs, I wish I would have come across http://jsonapi.org much sooner b/c it makes way more sense in most cases.  HAL / Hateos complicates things a bit... and I had to sit down with front-end people all the time b/c they we're confused.\n. granted, i only skimmed through the http://jsonapi.org stuff.... but i liked the small amount of what i saw and it seemed simple and dumbed down.\n. Yep, I'm +1 of a \"helper\" annotation to do extra stuff with the automatic route generation\n. If we call it empty_content (which is what I wanted), should we be strict on the null type, or just use empty()\n. Yep, agreed.\n. Coming right up!\n. Ah darn, i just did this. :P reverting\n. thanks @stof!\n. ",
    "mbedna": "Hello, \nI would like to receive HTTP 204 error code when JSON response is null. In View/ViewHandler.php in initResponse function JSON serializer returns 'false' string because internaly it uses json_encode function which returns false when passed data is null. 'false' string is passed then to $content variable: $content = $serializer->serialize($data, $format, $context); \nLater $content variable is used to set proper HTTP code:  return null !== $content ? Codes::HTTP_OK : $this->emptyContentCode; \nBecause $content is equal to 'false' and not null HTTP code is set as 200 and not 204.\nCould you please let me know if this is expected behaviour?\n. ",
    "kminh": "I'm having the exact same issue using Symfony 2.6.1 and FOSRestBundle 1.4.2.\nMy configuration is as followed:\nyml\nfos_rest:\n    access_denied_listener: true\n    view:\n        view_response_listener: 'force'\n        formats:\n            json: true\n        mime_types:\n            json: ['application/json; charset=UTF-8', 'application/json']\n    routing_loader:\n        default_format: json\n        include_format: false\nI doubt that I'm doing something wrong, because all I have done is setting up some empty controllers to test, using this documentation: https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/5-automatic-route-generation_single-restful-controller.rst\nThe response for a 405 response code is always a standard Symfony exception page.\nI have also taken a look at https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/4-exception-controller-support.rst, but the documentation seems outdated as there are neither enabled nor exception configuration key under fos_rest.exception.\nThanks for any insight.\n. ",
    "gmansilla": "I'm having the same issue. \nAfter reading this response I went to Exception to controller to check by myself the error code being returned. The error code is a 404, which is wrong (maybe because of this?).\n. I'm having the same issue. \nAfter reading this response I went to Exception to controller to check by myself the error code being returned. The error code is a 404, which is wrong (maybe because of this?).\n. Aight, here are the relevant parts\n```\n//routing.yml\nproduct:\npattern: /product/{product_id}/{_format}\ndefaults: { _controller: AppBundle:Product:get, _format: json }\nrequirements:\n    _method: GET\n//config.yml\nFOSRestBundle\nfos_rest:\n    allowed_methods_listener: true\n    routing_loader:\n    default_format: 'json'\nformat_listener: true\nbody_listener:\n    decoders:\n        json: fos_rest.decoder.json\n        xml: fos_rest.decoder.xml\nview:\n    formats:\n        json: true\n        xml: true\n        rss: false\n        html: false\n    view_response_listener: 'force'\nexception:\n    enabled: true\n    exception_controller: 'FOS\\RestBundle\\Controller\\ExceptionController::showAction'\n    codes:\n        'Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException': 404\n        'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': 404\n        'Doctrine\\ORM\\OptimisticLockException': HTTP_CONFLICT\n    messages:\n        'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': false    \n//Controller action\n/*\n * @Rest\\View()\n /\npublic function getAction($productId) {\n    $product = $something->getProduct($productId);\nif (!$product instanceof Product) {\n    throw new NotFoundHttpException(\"Product not found\");\n}\n\nreturn $product;\n\n}\n```\nUsing postman to simulate a POST to the above action returns\nAn Exception was thrown while handling: No route found for \"POST /product/\"\n\nI aso put a var_dump($code) after this line and the code at that point is 404\n. Aight, here are the relevant parts\n```\n//routing.yml\nproduct:\npattern: /product/{product_id}/{_format}\ndefaults: { _controller: AppBundle:Product:get, _format: json }\nrequirements:\n    _method: GET\n//config.yml\nFOSRestBundle\nfos_rest:\n    allowed_methods_listener: true\n    routing_loader:\n    default_format: 'json'\nformat_listener: true\nbody_listener:\n    decoders:\n        json: fos_rest.decoder.json\n        xml: fos_rest.decoder.xml\nview:\n    formats:\n        json: true\n        xml: true\n        rss: false\n        html: false\n    view_response_listener: 'force'\nexception:\n    enabled: true\n    exception_controller: 'FOS\\RestBundle\\Controller\\ExceptionController::showAction'\n    codes:\n        'Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException': 404\n        'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': 404\n        'Doctrine\\ORM\\OptimisticLockException': HTTP_CONFLICT\n    messages:\n        'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': false    \n//Controller action\n/*\n * @Rest\\View()\n /\npublic function getAction($productId) {\n    $product = $something->getProduct($productId);\nif (!$product instanceof Product) {\n    throw new NotFoundHttpException(\"Product not found\");\n}\n\nreturn $product;\n\n}\n```\nUsing postman to simulate a POST to the above action returns\nAn Exception was thrown while handling: No route found for \"POST /product/\"\n\nI aso put a var_dump($code) after this line and the code at that point is 404\n. Here\nDo you want me to paste the whole thing here? (1254 lines though)\n. Oh, ok. You're right. I var_dumped $exception instead of $e.\nThe thing is, when I var_dump($e) I get a timeout. However, if I check the message (var_dump($e->getMessage()) I get this message\nstring(76) \"The template \"TwigBundle:Exception:exception_full.html.twig\" does not exist.\"\nWhich makes sense because I am not using Twig. Do you want me to debug something else on $e?\nAnother thing I'd like to mention is that  my composer entry for this bundle is:\n\"friendsofsymfony/rest-bundle\": \"~1.0\",\nand after taking a look at composer.lock I see this entry\n\"version\": \"1.7.4\",\nmeaning I am var_dumping the exception thrown in this line\n. If anyone has the same issue in the future, this is what I did:\nI created a custom Exception controller that extends this bundle's controller and then override the showAction method.\n```\nnamespace AppBundle\\Controller;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Log\\DebugLoggerInterface;\nclass ExceptionController extends \\FOS\\RestBundle\\Controller\\ExceptionController \n{\npublic function showAction(Request $request, $exception, DebugLoggerInterface $logger = null)\n{\n\n    if ($exception->getClass() == 'Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException') {\n        return new Response(\"Not found\", 404);\n    }\n    return parent::showAction($request, $exception, $logger);\n\n}\n\n}\n```\nDon't forget to change the configuration setttings (config.yml)\nexception:\n    enabled: true\n    exception_controller: 'AppBundle\\Controller\\ExceptionController::showAction'\n. ",
    "h00dstoker": "obs: The name of route(s) should to be unique.\n. ",
    "anagorski": "please close this pull, i will send new functionality in a few days\n. ",
    "drgomesp": "I don't have a minimum stability set on composer.json.\nWhat should I do?\nThis is the output:\nProblem 1\n    - jms/serializer-bundle 0.10 conflicts with friendsofsymfony/rest-bundle dev-master.\n    - friendsofsymfony/rest-bundle dev-master conflicts with jms/serializer-bundle 0.10.\n    - Installation request for jms/serializer-bundle 0.10 -> satisfiable by jms/serializer-bundle 0.10.\n    - Installation request for friendsofsymfony/rest-bundle dev-master -> satisfiable by friendsofsymfony/rest-bundle dev-master.\n. @lsmith77 \nWould this resolve?\njson\n\"require\": {\n        \"php\": \">=5.3.3\",\n        \"symfony/symfony\": \"2.1.*\",\n        \"doctrine/orm\": \">=2.2.3,<2.4-dev\",\n        \"doctrine/doctrine-bundle\": \"1.1.*\",\n        \"twig/extensions\": \"1.0.*@dev\",\n        \"symfony/assetic-bundle\": \"2.1.*\",\n        \"symfony/swiftmailer-bundle\": \"2.1.*\",\n        \"symfony/monolog-bundle\": \"2.1.*\",\n        \"sensio/distribution-bundle\": \"2.1.*\",\n        \"sensio/framework-extra-bundle\": \"2.1.*\",\n        \"sensio/generator-bundle\": \"2.1.*\",\n        \"jms/security-extra-bundle\": \"1.2.*\",\n        \"jms/di-extra-bundle\": \"1.1.*\",\n        \"kriswallsmith/assetic\": \"1.1.*@dev\",\n        \"nelmio/api-doc-bundle\": \"dev-master\",\n        \"friendsofsymfony/rest-bundle\": \"dev-master\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"3.7.*\",\n        \"jms/serializer\": \"*@dev\",\n        \"jms/serializer-bundle\": \"0.10@dev\"\n    },\n. @lsmith77, still outputs:\n```\nYour requirements could not be resolved to an installable set of packages.\nProblem 1\n    - jms/serializer-bundle 0.10 conflicts with friendsofsymfony/rest-bundle dev-master.\n    - friendsofsymfony/rest-bundle dev-master conflicts with jms/serializer-bundle 0.10.\n    - Installation request for jms/serializer-bundle 0.10@dev -> satisfiable by jms/serializer-bundle 0.10.\n    - Installation request for friendsofsymfony/rest-bundle dev-master -> satisfiable by friendsofsymfony/rest-bundle dev-master.\n```\nWhat should I do?\n. @pulse00\nAlready tried and it didn't work.\n. @pulse00, @lsmith77, @stof \nAny ideas?\n. @lsmith77 \nChanged to:\njson\n\"jms/serializer-bundle\": \"1.0.*@dev\"\nAnd now the output is:\n```\nProblem 1\n    - Installation request for jms/serializer-bundle 1.0.*@dev -> satisfiable by jms/serializer-bundle 1.0.x-dev.\n    - jms/serializer-bundle 1.0.x-dev requires jms/di-extra-bundle >=1.3 -> no matching package found.\nPotential causes:\n - A typo in the package name\n - The package is not available in a stable-enough version according to your minimum-stability setting\n   see https://groups.google.com/d/topic/composer-dev/_g3ASeIFlrc/discussion for more details.\nRead http://getcomposer.org/doc/articles/troubleshooting.md for further common problems.\n```\nSomething else missing?\n. @Baachi\nChanged to what you proposed, and the same output occurs:\nProblem 1\n    - Installation request for jms/serializer-bundle 1.0.*@dev -> satisfiable by jms/serializer-bundle 1.0.x-dev.\n    - jms/serializer-bundle 1.0.x-dev requires jms/di-extra-bundle >=1.3 -> no matching package found.\n. @Baachi,\nOk, now the error is worse:\nProblem 1\n    - Installation request for jms/serializer-bundle 1.0.*@dev -> satisfiable by jms/serializer-bundle 1.0.x-dev.\n    - don't install jms/serializer-bundle 1.0.x-dev|install jms/serializer-bundle dev-master\n    - jms/serializer-bundle dev-master requires jms/di-extra-bundle >=1.3 -> satisfiable by jms/di-extra-bundle dev-master, jms/di-extra-bundle 1.3.x-dev.\n    - Conclusion: don't install jms/di-extra-bundle 1.3.x-dev\n    - Can only install one of: jms/di-extra-bundle dev-master, jms/di-extra-bundle 1.3.0-alpha.\n    - Installation request for jms/di-extra-bundle 1.3.*@dev -> satisfiable by jms/di-extra-bundle 1.3.0-alpha, jms/di-extra-bundle 1.3.x-dev.\n. I did, and the output is:\nProblem 1\n    - Installation request for jms/serializer-bundle 1.0.*@dev -> satisfiable by jms/serializer-bundle 1.0.x-dev.\n    - jms/serializer-bundle 1.0.x-dev requires jms/di-extra-bundle >=1.3 -> satisfiable by jms/di-extra-bundle dev-master, jms/di-extra-bundle 1.3.x-dev.\n    - Conclusion: don't install jms/di-extra-bundle 1.3.x-dev\n    - Can only install one of: jms/di-extra-bundle dev-master, jms/di-extra-bundle 1.3.0-alpha.\n    - Installation request for jms/di-extra-bundle 1.3.*@dev -> satisfiable by jms/di-extra-bundle 1.3.0-alpha, jms/di-extra-bundle 1.3.x-dev.\n. I'm really going nuts with this.\n@Baachi, @lsmith77, @pulse00\nCan you guys give me some more opinions?\n. Ok, so apparently it works by using the solution from @pulse00, on #330.\nStill, I think that's a work around.\n. Any timelines for this to be merged? Trying to integrate it with a Sf 3.0 app.\n. Thanks @lsmith77 \n. ",
    "tasuki": "Thanks @drgomesp, this is true black magic!\n@teo-sk, I pulled out at least as much hair as you did.\n. ",
    "nmeirik": "Is it just me, or has the 1.0.* release been removed causing this not to work anymore?\nhttps://github.com/schmittjoh/JMSSerializerBundle/tags\n. Then how can this bundle be in conflict with versions less than 1.0-dev?\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/composer.json#L39\n. Apologies as I'm new to both Symfony and Composer, but I'm having a really hard time (spent the last 6 hours) getting the dependencies to work out. Which changes specifically do I need to make in my composer.json file compared to the standard one provided by Symfony 2.1.7 in order to have the FOSRestBundle installed? Regarding the need for JMSSerializerBundle, I'm unclear as to what this does (and what are the alternatives) apart from it being recommended in the documentation.\n. ",
    "gkatsanos": "I added this, same problem.. Here's how I load them in the Kernel:\n....\n            new FOS\\RestBundle\\FOSRestBundle(),\n            new JMS\\SerializerBundle\\JMSSerializerBundle($this),\n        );\n. Actually I added the bundles for the dev and test environments, and now when visiting app_dev, it works.\nWhen I have the bundles both in dev/test and in prod, I get an error message \"can't have bundles with the same name\"..\n. Done!:) Closing issue, thanks for the quick support!\n. ",
    "wowpatrick": "Unfortunately I don't have any time to look into the problem ATM, but I guess it's an application error on my side so I'll close this Issue. If can't seem to fix it I'll just reopen the issue. Thanks for your help @lsmith77 !\n. ",
    "smartinsalmeida": "OK  I will but i've found this in the docs\nfos_rest:\n    param_fetcher_listener: true\n    body_listener: true\n    format_listener: \n    #    default_priorities: ['json']\n    #    fallback_format: json\n        prefer_extension: true\n    view:\n        view_response_listener: true\n        default_engine: php\n        formats: \n            json: true\n            rss: false\n            html: false\n            xml: false\n        serialize_null: true\n    routing_loader:\n        default_format: json\nhow to activate this line ?\nserialize_null: true\nOr i misunderstood the usage.\n. uhh ok\nMany thanks\n. @lsmith77 same error with 0.12.0\n\"jms/serializer-bundle\": \"dev-master\",\n\"friendsofsymfony/rest-bundle\": \"0.12.*@dev\",\nThen latest master version of FOSRestBundle that switched to a different library for content negotiation does not seem to be the problem at his own\nHope it helps\n. @lsmith77 same error with 0.12.0\n\"jms/serializer-bundle\": \"dev-master\",\n\"friendsofsymfony/rest-bundle\": \"0.12.*@dev\",\nThen latest master version of FOSRestBundle that switched to a different library for content negotiation does not seem to be the problem at his own\nHope it helps\n. OK maybe some cache after modifying the fos rest version in composer.json.\nAll working as expected.\n. OK maybe some cache after modifying the fos rest version in composer.json.\nAll working as expected.\n. ",
    "geshan": "How do we serialize null values for JSON, for XML it does it with the xsi:nil name space but still the xml does not validate. Any ways to do it from config?\n. ",
    "highroller": "I checked JMS serializer, I don't see any way to force array notation in configuration, maybe I miss something?  \nMy problem should be very common, everybody are serializing array of results from db all the time.  Why is there only one reply?\n. do you mean that it is the way it is in fosrestbundle without coding custom jms serializer handler?  I guess the second question is how do people handle the list of objects in client side?  Their code is expecting an array.\n. I am using toarray( ) instead of for loop.\nOn Feb 11, 2013 1:51 PM, \"Christophe Coevoet\" notifications@github.com\nwrote:\n\n@highroller https://github.com/highroller ->findAll() is not indexing\nresults by id. Are you overwriting it in your repository\n@mvrhov https://github.com/mvrhov please don't give wrong informations.\nDoctrine ORM query results are always arrays. collections are used only\nfor relations in entities (or when using the Selectable interface)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/374#issuecomment-13405270.\n. \n",
    "tonivdv": "@mvrhov This works indeed, but then it fails for json! But why should the name be removed? It should work as it is no?\n. Unless I'm supposed to send:\nxml\n<reports>\n  <report>\n      <templateId>1<templateId>\n  </report>\n</reports>\nThen it works. Maybe someone can explain me the reasons, or maybe it's how it is supposed to work in REST?!\n. So if I understand correctly. I should not set a namespace name for the ReportType \nand thus my XML can look like:\nxml\n<report>\n    <templateId>1<templateId>\n</report>\nand then my json should be\njson\n{\"templateId\":\"1\"}\nI just get confused that in the xml i have to root 'report' but not in the json.\nCan you confirm that this is correctN thx\n. @mvrhov indeed, just tested with a random root and also works. I'm to focused with the FOSRest that I just forget the most basic stuffs. \nMany many thanks for your help!!!! I owe you a drink ;)\n. Hello @lsmith77,\nThx for the quick answer. \nI did oversee that part in the documentation. However I activated this and it still returns text/html:\nAllow \u2192GET\nCache-Control \u2192no-cache\nConnection \u2192Keep-Alive\nContent-Type \u2192text/html; charset=UTF-8\nDate \u2192Mon, 25 Feb 2013 08:09:01 GMT\nKeep-Alive \u2192timeout=5, max=100\nServer \u2192Apache/2.2.17 (Win32) mod_ssl/2.2.17 OpenSSL/0.9.8o PHP/5.3.5\nTransfer-Encoding \u2192chunked\nWWW-Authenticate \u2192Basic realm=\"Secured Area\"\nX-Debug-Token \u2192512b1c1e86205\nX-Powered-By \u2192PHP/5.3.5\nNow when I put a breakpoint in the constructor of AccessDeniedListener it gets called, but in the method AccessDeniedListener::onKernelException it doesn't get into it.\nAm I overlooking something else?\nCheers\n. Some additional information.\nBefore I added the security component I had a test which verifies the response content-type. The tests that are failing are those where the header 'ACCEPT' is given. For those the response content type is always html. The tests where the param _format is given the response content-type is correct.\nHere is the test I use. (I identified the failing providers with 'THIS FAILS'):\n``` php\n  /*\n   * @dataProvider requestDataProvider\n   * @test\n   /\n  public function allRequestsShouldReturnTheExpectedResponse($requestHeader, $requestParams, $expectedContentType) {\nif (null == $requestParams) {\n  $requestParams = array();\n}\n\nif (null == $requestHeader) {\n  $requestHeader = array();\n}\n\n$client = static::createClient();\n$client->request('GET', '/api', $requestParams, array(), $requestHeader);\n\n/** @var Response $response  */\n$response = $client->getResponse();\n\n$this->assertEquals($expectedContentType, $response->headers->get('content-type'));\n\n}\npublic function requestDataProvider() {\n    return array(\n      array(null, null, \"text/xml; charset=UTF-8\"), // THIS FAILS\n      array(null, array(\"_format\" => \"json\"), \"application/json\"),\n      array(null, array(\"_format\" => \"xml\"), \"text/xml; charset=UTF-8\"),\n      array(array('HTTP_ACCEPT' => \"application/json\"), null, \"application/json\"), // THIS FAILS\n      array(array('HTTP_ACCEPT' => \"text/xml\"), null, \"text/xml; charset=UTF-8\"), // THIS FAILS\n      array(array('HTTP_ACCEPT' => \"application/json\"), array(\"_format\" => \"json\"), \"application/json\"),\n      array(array('HTTP_ACCEPT' => \"text/xml\"), array(\"_format\" => \"xml\"), \"text/xml; charset=UTF-8\"),\n  // Depends on the configuration in config.yml. If fos_rest -> format_listener -> prefer_extension = true\n  // then the _format value always has priority on the request headers!\n  array(array('HTTP_ACCEPT' => \"application/json\"), array(\"_format\" => \"xml\"), \"text/xml; charset=UTF-8\")\n);\n\n}\n```\nCheers\n. Maybe also interesting to say is that, once the security is passed (so correct credentials are given) the response content type is always correct.\nI think some FOSRest events are not being caught when exceptions occurs in the security layer.\n. I'm starting to think that a listener on the event kernel.event_listener simply doesn't get called. And I think it is because the security listeners do not throw an exception, they simply return a response with a 4xx status response.\n``` php\n// class BasicAuthenticationListener\ntry {\n    $token = $this->authenticationManager->authenticate(new UsernamePasswordToken($username, $request->headers->get('PHP_AUTH_PW'), $this->providerKey));\n    $this->securityContext->setToken($token);\n} catch (AuthenticationException $failed) {\n    $this->securityContext->setToken(null);\nif (null !== $this->logger) {\n    $this->logger->info(sprintf('Authentication request failed for user \"%s\": %s', $username, $failed->getMessage()));\n}\n\nif ($this->ignoreFailure) {\n    return;\n}\n\n$event->setResponse($this->authenticationEntryPoint->start($request, $failed));\n\n}\n```\nThe last line it just adds the response to the event.\n. @dincho Sorry, somehow I didn't get notified by Github about your reply grrr.\nBut in my previous post where you can see my tests, you'll see that it does work with the _format given. That's why I think somewhere there is an issue.\n@lsmith77 and @schmittjoh did you had another look into that? (I know it's been some time :( )\n. I'm closing this ticket as it is related to format listener being loaded to late FriendsOfSymfony/FOSRestBundle#548\n. :+1:  for @matthiasnoback  proposition\n. Hey @pinouf ,\nThat's the expected behaviour. By default in production the message is not displayed. If you want to display it, you need to configure it as described in the documentation (same section):\nTo map Exception classes to HTTP response status codes an \u201cexception map\u201d may\nbe configured, where the keys match a fully qualified class name and the values\nare either an integer HTTP response status code or a string matching a class\nconstant of the FOS\\Rest\\Util\\Codes class:\n``` yaml\napp/config/config.yml\nfos_rest:\n    exception:\n        codes:\n            'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': 404\n            'Doctrine\\ORM\\OptimisticLockException': HTTP_CONFLICT\n        messages:\n            'Acme\\HelloBundle\\Exception\\MyExceptionWithASafeMessage': true\n```\nIf you want to display the message from the exception in the content of the\nresponse, add the exception to the messages map as well. If not only the status\ncode will be returned.\nThe `messages` section you need to add which Exception class is safe to display the message.\nHope this helps\nCheers\n. > As for the structure of the errors in a form, this isn't an exception. The rendering is done using the FormErrorHandler\nCorrect, although that you do return a 400 HTTP code. Thus it's like an exception for me :)\n\nI would add a listener to make a more user friendly response. The serialized form is ok-ish, but we could do a better job.\n\nWould it have to be integrated in the exception message, but then something like this:\njavascript\n{\n  \"status\": \"error\",\n  \"status_code\": 400,\n  \"status_text\": \"Bad Request\",\n  \"current_content\": \"\",\n  \"message\": {\n    \"children\": {\n      \"username\": {\n        \"errors\": [\n          \"This value should not be blank.\"\n        ]\n      }\n    }\n  }\n}\nor \njavascript\n{\n  \"status\": \"error\",\n  \"status_code\": 400,\n  \"status_text\": \"Bad Request\",\n  \"current_content\": {\n    \"children\": {\n      \"username\": {\n        \"errors\": [\n          \"This value should not be blank.\"\n        ]\n      }\n    }\n  },\n  \"message\": \"Invalid parameters\"\n}\nor completely something different.\nI'm asking because if we could find something acceptable, I'de love to provide a PR for that or at least some documentation on how to handle such case.\n. @lsmith77 I'll check that out and let you know\n@willdurand thx for the link. Seems very interesting read\n. I read about errors a bit and I found a nice example (on http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api?hn#errors) which could be the out of the box feature when symfony forms do not validate. It would be something like this:\njavascript\n{\n  \"code\" : 1024,\n  \"message\" : \"Validation Failed\",\n  \"errors\" : [\n    {\n      \"code\" : 5432,\n      \"field\" : \"first_name\",\n      \"message\" : \"First name cannot have fancy characters\"\n    },\n    {\n       \"code\" : 5622,\n       \"field\" : \"password\",\n       \"message\" : \"Password cannot be blank\"\n    }\n  ]\n}\nIt needs some changes, but I do like the output.\nIf you think this could be helpful for FOSRestBundle, I could try to incorporate it in the bundle. If not then I'll do it somewhere in my mess ;)\nLet me know.\nCheers\n. Okay @lsmith77 . I'll do that.\n. I think we can close this ticket as there is a PR\n. > Yeah, looks good to me. However it is a BC break.\nDid you mean \"it has a BC break\". In both cases can you elaborate :)\n\ngood. +1 for this. but please update docs too.\n\n+1, but I wanted to have a first feedback. If it could be accepted, then I'd finalize.\nThanks\n. @willdurand Yes correct. But we could propose a setting that activates the \"wrapping into ExceptionWrapper\" ?\n@mvrhov I only did reuse how the current exceptions are handled in FOSRestBundle. IMHO this is another topic?\n. So what now?\n1. Is this POC acceptable? If not, then we can stop here ;)\n2. Add a configuration to activate the wrapping of an invalid form into the errors, or allow the BC break? /cc @willdurand \n3. Update the doc\n4. ?\nLet me know, as I really like this idea, and if it cannot be accepted then I need to solve this differently.\n. > only other topic was if we want to clean up the error response structure while we are at it.\nLet me know to what you'de like to change it, and I can do it at the same time\n. I already changed the error structure, to what I saw above. If I mix this with my stuff it gives this:\njavascript\n{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"Validation Failed\",\n    \"errors\": {\n      \"children\": {\n        \"templateId\": {\n          \"errors\": [\n            \"templateId must not be empty\"\n          ]\n        },\n        \"period\": {\n          \"errors\": [\n            \"This value should not be blank.\"\n          ]\n        }\n      }\n    }\n  }\n}\nHowever, I don't really like the repeating 'error'. It's confusing no? Shouldn't it be better something like 'extra'?\njavascript\n{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"Validation Failed\",\n    \"extra\": {\n      \"children\": {\n        \"templateId\": {\n          \"errors\": [\n            \"templateId must not be empty\"\n          ]\n        },\n        \"period\": {\n          \"errors\": [\n            \"This value should not be blank.\"\n          ]\n        }\n      }\n    }\n  }\n}\nOr simply:\njavascript\n{\n  \"code\": 400,\n  \"message\": \"Validation Failed\",\n  \"errors\": {\n    \"children\": {\n      \"templateId\": {\n        \"errors\": [\n          \"templateId must not be empty\"\n        ]\n      },\n      \"period\": {\n        \"errors\": [\n          \"This value should not be blank.\"\n        ]\n      }\n    }\n  }\n}\nWaiting for your votes :)\n. > \"children\" is useless.\nThis is done by FormErrorHandler.php. If the user desires another serialization, then he can override it. Unless FOSRestBundle should have it's own?\n\nform_errors would be nice\n\nIt's not that I don't like the idea, but what if in other circumstances you also want to provide more info?\n. I updated the PR with updated doc and with new proposed error response structure\njavascript\n{\n  \"code\": 400,\n  \"message\": \"Validation Failed\";\n  \"errors\": {\n    \"children\": {\n      \"username\": {\n        \"errors\": [\n          \"This value should not be blank.\"\n        ]\n      }\n    }\n  }\n}\n1. Why did I not use 'form_errors'\n   I think it can be used for other uses cases than forms. I'm still hesitating about the errors?! If we call it 'message_extra' as in the https://github.com/TheBigBrainsCompany/TbbcRestUtilBundle , then we could even use this field for something else than error information?\n2. Why didn't I change the serialization of the Form\n   Because this is how JMS Serializer (FormErrorHandler.php) does it. And this is something that can be changed at any time. And if FOSRestBundle wants their own version of Form Error Serialization, this should then be another PR?\nThe only thing I can't think off, is to customize the error message \"Validation Failed' through a configuration as it is hard coded currently!\nWaiting for your feedback :)\n. Let me know what else should be done for that PR to be merged into master?\n. @lsmith77 I completely understand. \nAnd all those conversations made me realise that somehow it will be very difficult to impose a specific error structure. FOSRestBundle could provide their standard structure, but I guess that if someone wants another structure it should also be possible.\nOf course they can do it, when they override or reimplement FOS\\RestBundle\\Controller\\ExceptionController but if they simply want to choose between:\njavascript\n{\n  \"code\": 400,\n  \"message\": \"Validation Failed\";\n  \"errors\": {}\n  }\n}\nor\njavascript\n{\n  \"code\": 400,\n  \"message\": \"Validation Failed\";\n  \"form_errors\": {}\n  }\n}\n(this would satisfy @willdurand  :) )\nor\njavascript\n{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"Validation Failed\",\n    \"errors\": {}\n  }\n}\nIt's actually just providing another implementation for FOS\\RestBundle\\Util\\ExceptionWrapper !\nSo if we could inject this in FOS\\RestBundle\\Controller\\ExceptionController then it offers more flexibility?\nLet me know your thoughts on this.\nCheers\n. @lsmith77 I completely understand. \nAnd all those conversations made me realise that somehow it will be very difficult to impose a specific error structure. FOSRestBundle could provide their standard structure, but I guess that if someone wants another structure it should also be possible.\nOf course they can do it, when they override or reimplement FOS\\RestBundle\\Controller\\ExceptionController but if they simply want to choose between:\njavascript\n{\n  \"code\": 400,\n  \"message\": \"Validation Failed\";\n  \"errors\": {}\n  }\n}\nor\njavascript\n{\n  \"code\": 400,\n  \"message\": \"Validation Failed\";\n  \"form_errors\": {}\n  }\n}\n(this would satisfy @willdurand  :) )\nor\njavascript\n{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"Validation Failed\",\n    \"errors\": {}\n  }\n}\nIt's actually just providing another implementation for FOS\\RestBundle\\Util\\ExceptionWrapper !\nSo if we could inject this in FOS\\RestBundle\\Controller\\ExceptionController then it offers more flexibility?\nLet me know your thoughts on this.\nCheers\n. @hd-deman I was more speaking about how the structure would look like. When overriding the ExceptionController, you can then override the method createExceptionWrapper which then allows you to return whatever object you'de like.\nNote that I'm not in favour of this work-around\n. @hd-deman I was more speaking about how the structure would look like. When overriding the ExceptionController, you can then override the method createExceptionWrapper which then allows you to return whatever object you'de like.\nNote that I'm not in favour of this work-around\n. Sorry about changing things again, but I think now it allows users to handle the structure of the exception themselves \n. Sorry about changing things again, but I think now it allows users to handle the structure of the exception themselves \n. @lsmith77 yep didn't notice it. Sorry. (didn't get notified of that)\n. @lsmith77 yep didn't notice it. Sorry. (didn't get notified of that)\n. @lsmith77 test are passing now ;)\n. @lsmith77 test are passing now ;)\n. @lsmith77 I just tested with latest 2.3 branch and the issue remains.\nPersonally I don't think it is related! \nIf I'm not mistaken it's the FormatListener who's in charge of finding the best format for a given request, right? So the fact that the FormatListener is not being called is simply the origin of the issue!?\nI tried changing the priority of the FormatListener (to 9999), but it doesn't work.\nBut could it be related to the type of event that is being used in the FormatListener? The fact that it is a \"kernel.controller\" event, isn't that the problem? Are the kernal.controller events being notified when the Security stuff is being executed?\n. After I posted, I played a bit by changing the FormatListener to a request listener. But even then it doesn't get called :s :(\nAny ideas?\n. Ignore my previous comment. It does work.\nSo how about a small PR to change the FormatListener event from a controller to a request?\n. @lsmith77 I'm actually checking this :) Currently it already works with priority 100, but I don't know if there is a list of priorities of core listeners in Symfony?\n. Okay. Let me try that and I'll provide a PR soon :) \n. Amazing tool actually :)\nHere's the output:\n+---------------------------------------+----------------+----------+\n| Name                                  | Event          | Priority |\n+---------------------------------------+----------------+----------+\n| fos_rest.mime_type_listener           | kernel.request | 200      |\n| session_listener                      | kernel.request | 128      |\n| fos_rest.format_listener              | kernel.request | 100      |\n| security.firewall                     | kernel.request | 8        |\n| debug.emergency_logger_listener       | kernel.request | 0        |\n| fos_rest.body_listener                | kernel.request | 0        |\n| router_listener                       | kernel.request | 0        |\n| nelmio_api_doc.event_listener.request | kernel.request | 0        |\n| debug.deprecation_logger_listener     | kernel.request | 0        |\n| locale_listener                       | kernel.request | 0        |\n+---------------------------------------+----------------+----------+\nSo we could put the FormatListener to 20 ?\n. :+1: \n. @lsmith77 and bug #578 should be fixed with PR #581  :)\n. @lsmith77 Sure. I'll have a look later today.\n. > (for future reference .. it would have been good if you would have cherry-picked @ASKozienko commit into your branch.\nSearched 5 min on how I could contribute somehow to that PR, but couldn't find how. I'll check that cherry picking thingy the next time ;) \n. @merk okay thx for the info\n. I decided to put the business of the clone into the creation of my resource by adding a clone parameter. I then handle this through the Symfony forms\nSo the json of the body looks something like this\n``` javascript\n// curl -i -X POST ..... \"http://api/resources\"\n{\n   \"resource\":{\n      \"field1\":\"value\",\n      \"field2\":\"value\",\n      \"clone\":{\n         \"id\":1,\n         \"cloneParam1\":\"value\",\n         \"cloneParam2\":\"value\",\n      }\n   }\n}\n```\nI'll close this question, but if someone has any alternatives feel free to share.\n. And you always want to make multiple resources? Or it should also work for one resource?\n. Have you already tried with a collection field type ?  http://symfony.com/doc/current/reference/forms/types/collection.html\nSo basically a collection of the CategoryType.\n. You need to tell the serializer to exclude those fields. Check http://williamdurand.fr/2012/08/02/rest-apis-with-symfony2-the-right-way/ for an example. (and it's a good read anyway in general ;) )\n. I managed to get a very good result with the FSCHateoasBundle.\nMy controller looks like this:\n``` php\n// Controller\n$users = UserQuery::create();\n$pager = new Pagerfanta(new PropelAdapter($users ));\n$pager->setCurrentPage(1);\n$pager->setMaxPerPage(10);\n$this->get('fsc_hateoas.metadata.relations_manager')->addBasicRelations($pager);\n$usersCollection = new UsersCollections($pager);\nreturn $usersCollection ;\n// UsersCollections class\nclass UsersCollections\n{\n    /*\n     * @var Pagerfanta\n     /\n    private $pager;\n/**\n * @param Pagerfanta $pager\n */\npublic function __construct($pager)\n{\n    $this->pager = $pager;\n}\n\n}\n```\nThis results in\nxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<users page=\"1\" limit=\"10\" total=\"24\">\n  <link rel=\"self\" href=\".../users.xml?limit=10&amp;page=1\"/>\n  <link rel=\"first\" href=\".../users.xml?limit=10&amp;page=1\"/>\n  <link rel=\"last\" href=\".../users.xml?limit=10&amp;page=3\"/>\n  <link rel=\"next\" href=\".../users.xml?limit=10&amp;page=2\"/>\n  <user>\n    <id></id>\n    <name></name>\n  </user>\n  <user>\n    <id></id>\n    <name></name>\n  </user>\n<users>\nOf course here it's with the pager (which I needed too), but I'm sure its achievable in the same way without the pager.\nI'm closing this ticket, but if someone else has alternatives, don't hesitate to share.\n. :+1:  \n@willdurand @lsmith77  About that presentation, do you know if it was recorded? And if yes when and where it will be available?\n. :+1:  \n@willdurand @lsmith77  About that presentation, do you know if it was recorded? And if yes when and where it will be available?\n. Hey vgross,\nAnd you are sure that in production there are only 6 entries? It's not like the 'dev' environment goes to a 'dev' database with 6 entries, and the 'prod' environment goes to a database with far too much entries?\n. And can you tell us at what exact moment the out of memory is happening?\n. Just for the sake of test, can you comment all code in your controller and see if the problem persists?\nAlso do you special configs or code that gets activated in prod mode but not in dev mode?\n. Hey @mappedinn ,\nWhen you tried curl -i -H 'Accept:application/json' -H 'Authorization:Basic username:password' ... did you base64 the username:password?\n. Hey @mappedinn ,\nWhen you tried curl -i -H 'Accept:application/json' -H 'Authorization:Basic username:password' ... did you base64 the username:password?\n. Just use http://www.base64encode.org/ for example. Put your username:password, hit encode and run the curl.\nSo for example, assume my user is tonivdv and password is 1234  it would be:\ncurl -i \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Basic dG9uaXZkdjoxMjM0' \\\n\"http://....\"\n. Just use http://www.base64encode.org/ for example. Put your username:password, hit encode and run the curl.\nSo for example, assume my user is tonivdv and password is 1234  it would be:\ncurl -i \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Basic dG9uaXZkdjoxMjM0' \\\n\"http://....\"\n. @mappedinn  No it's really \ncurl -i \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Basic dG9uaXZkdjoxMjM0' \\\n\"http://....\"\nThe server will itself decode the base64 and extract from there the user and password. Check https://en.wikipedia.org/wiki/Basic_access_authentication#Client_side\n. @mappedinn  No it's really \ncurl -i \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Basic dG9uaXZkdjoxMjM0' \\\n\"http://....\"\nThe server will itself decode the base64 and extract from there the user and password. Check https://en.wikipedia.org/wiki/Basic_access_authentication#Client_side\n. Hello @KevinM1 ,\nThere are many ways, it all depends what kind of authentication you seek (token only, basic auth, oauth, etc)\nIf you elaborate, maybe we can help and/or direct you to a place where you can find that kind of information.\nCheers\n. @KevinM1  well with the SecurityBundle you could support all of them at the same time :) Now it's actually fair easy for your boss to choose from. IMHO if you create a wide open api for the public to use, I would go for the oauth authentication. If not it could be much faster to implement a token or user/password through e.g basic auth. For example I maintain an api used by a couple of customers only and opted for a token + basic auth (token = needed to use the api, basic auth = user/password from the underlying application)\nAn other case could be to use WSSE which is very well explained here: http://symfony.com/doc/2.3/cookbook/security/custom_authentication_provider.html#meet-wsse\nHave fun :)\n. @defrag That could be very interesting :) I could also help on doing one for basic authentication and token. \n@lsmith77  what do you think?\n. @saharabear And your server configuration on the ubuntu is correct?\n. Maybe adding mime types in the config could help?\njavascript\nfos_rest:\n  view:\n    mime_types:\n      json: ['application/json']\n. @lsmith77 good catch, however why would that work locally?\n. @stof little question just for my understanding. Why using scrutinizer and not sensiolabs insights? It's a symfony bundle after all? Is scrutinizer IYHO better?\n. @stof little question just for my understanding. Why using scrutinizer and not sensiolabs insights? It's a symfony bundle after all? Is scrutinizer IYHO better?\n. Thanks @stof for your insights ;p \n. Thanks @stof for your insights ;p \n. Perect. Thanks @lsmith77 .\n. @lsmith77 I agree this is not the same. I was merely referring to the FOSRestBundle API that if I upgrade minor version it should work out of the box. Document I guess will have to point out that 1.5 will be latest compatible with sf 2.2 though (something like that)\n. Hey @alexdrupal ,\nWhen you submit do you do the following ? :\nphp\n$form->submit(\n          $this->request,\n          !$this\n            ->request\n            ->isMethod('PATCH')\n        );\n. Ok that's already good. However I'm afraid it will be hard to help without more code snippets. Can you share more?\n. Hey @alexdrupal ,\nYou still have the issue?\n. Hey @alexdrupal ,\nYou still have the issue?\n. Hi @felicitus ,\nYou want this for debugging purposes?\n. Hi @felicitus ,\nYou want this for debugging purposes?\n. You can create your custom view. Following page should help you achieve this http://symfony.com/doc/master/bundles/FOSRestBundle/4-exception-controller-support.html\n. You can create your custom view. Following page should help you achieve this http://symfony.com/doc/master/bundles/FOSRestBundle/4-exception-controller-support.html\n. Yes you can close it and if you have difficulties again you could reopen it (ps: I don't have to rights to close them :) )\n. Yes you can close it and if you have difficulties again you could reopen it (ps: I don't have to rights to close them :) )\n. @GuilhemN It would be great to fix this issue.  Are the failing tests the main reason this PR was never accepted? If yes, @Parent5446 I could help you make this PR pass the tests?\nLet me know. I would have bed that the PR had failing tests :) I'll see what I can do as I currently have the issue and work around it in a crappy way ;), unless @Parent5446 beats me to it.. @pdugas need help?. I was not able to run the php-cs fixer. Somehow it fails on my machine :/ And there is no doc on how it should be executed. It would be cool to have a docker config for that to avoid this kind of situations ;). ping @GuilhemN . Fixed the CS issue with the provided diff by styleci \ud83d\udc4d . @xabbuh @GuilhemN you plan a new fix release shortly? I noticed that releases are not done very often?!. @lsmith77 Already doing that :) \nMaybe we should take the one that contributed the most for a specific time and buy him something from his wishlist ?. Since last year, the user contributed the most is @xabbuh . So @xabbuh do you have any wishlist somewhere? Like on Amazon? Or any book you want?\nResults where found by doing following:\n$ git log --since=\"1 year ago\" | grep Author | sort | uniq -c | sort -n -r\n  71 Author: Christian Flothmann <christian.flothmann@sensiolabs.de>\n   7 Author: Guilhem N <egetick@gmail.com>\n   5 Author: Asmir Mustafic <goetas@gmail.com>\n   3 Author: Peter Culka <culka@trexima.sk>\n   2 Author: Tobias Schultze <webmaster@tubo-world.de>\n   2 Author: Karel Souffriau <karel@hardware.info>\n   2 Author: Guilhem Niot <guilhem.niot@gmail.com>\n   2 Author: Guilhem N <guilhem.niot@gmail.com>\n   2 Author: Gabriel Caruso <carusogabriel34@gmail.com>\n   1 Author: kunicmarko20 <kunicmarko20@gmail.com>\n   1 Author: gdbonino <gdbonino@gmail.com>\n   1 Author: ball00n- <herman.belous@gmail.com>\n   1 Author: Toni Van de Voorde <toni.vdv@gmail.com>\n   1 Author: Tomasz Hanc <tomasz.hanc@gmail.com>\n   1 Author: Shane Archer <sarcher@ampdraw.com>\n   1 Author: RokkieBrown <rokkie@users.noreply.github.com>\n   1 Author: Peter Culka <p.culka@gmail.com>\n   1 Author: Michael Moll <kvedulv@kvedulv.de>\n   1 Author: Laurent Aubertin <2binfree@users.noreply.github.com>\n   1 Author: Indra Gunawan <guind.online@gmail.com>\n   1 Author: Fabian Gut <fabian.gut@ethy.ch>\n   1 Author: Baptiste Lafontaine <baptiste@nadeo.com>. @xabbuh Composer is indeed very important but we also want to gratify contributors to libraries we are using that speed up our dev. Now if you prefer to give to composer fine by us ;). The fact that I use ExceptionWrapper directly, isn't this a problem?\nWhat if the following setting is not used: ?\n``` yaml\napp/config/config.yml\ntwig:\n    exception_controller: 'FOS\\RestBundle\\Controller\\ExceptionController::showAction'\n```\n. I tested without the exception controller of FOSRest and it works perfectly.\n. yep correct, should add it to the notes too! Unless you want to keep the old error structure? (now that the user can inject it's own implementation?)\n. I don't have any clue about that. But what I know is that there is no choice, because it has to run before the security stuff which has a higher priority than the route listener.\n+---------------------------------------+----------------+----------+\n| Name                                  | Event          | Priority |\n+---------------------------------------+----------------+----------+\n| fos_rest.mime_type_listener           | kernel.request | 200      |\n| session_listener                      | kernel.request | 128      |\n| fos_rest.format_listener              | kernel.request | 20       |\n| security.firewall                     | kernel.request | 8        |\n| debug.emergency_logger_listener       | kernel.request | 0        |\n| fos_rest.body_listener                | kernel.request | 0        |\n| router_listener                       | kernel.request | 0        |\n| nelmio_api_doc.event_listener.request | kernel.request | 0        |\n| debug.deprecation_logger_listener     | kernel.request | 0        |\n| locale_listener                       | kernel.request | 0        |\n+---------------------------------------+----------------+----------+\nIf it causes an issue then I don't really know how we could fix it ...\n. oops. Ok. Just copied from previous tests.. Not sure I understand what you mean, can you elaborate.. Alright, I prefer that too, but since a lot in the code is with FQN I thought it was some standard or something. Will do that simplification.. I changed all FQN in that method so it's cleaned up at the same time.. Ah lol. Alright no problem.. done . ",
    "zefrog": "Just a quick note as I am also impacted, following a recent upgrade to sf2.2 and friendsofsymfony/rest-bundle 0.11.\nI have two functions in the same controller, one is more a service than a resource, but anyway it was working using 0.9 and it is not using 0.11 :\n```\npublic function getContactsSearchAction()\n{\n    // whatever\n}\npublic function getContactsAction($id) \n{\n     // whatever\n}\n```\nThis is causing the router:debug command to output the routes in the wrong order, thus matching /contacts/search.json to the wrong route :\napi_contacts_get_contacts                      GET      ANY  /contacts/{id}.{_format}\napi_contacts_get_contacts_search          GET      ANY  /contacts/search.{_format}\nI agree with @stof that we do not bother the name of the routes, but the order in which they come in the controller, aren't we ? Returning 0 in the uksort callable function is not helping either. I am missing something ?\n. I am currently digging into this issue because sf2.3 is causing the same problem.\nI am tempted to think this is a Symfony issue, because the routes order is the same using 2.1 and 2.3. But whereas Symfony2.1 matches the second route, the most specific one, Symfony2.3 matches the first one. And this is correct, as it is clearly stated in the Router documentation : \n\nEarlier Routes always Win\n\nSo I believe this is a Symfony2.1 \"feature\"... That was removed for some reason (I will look further).\nA quick fix I came up with is to change the all() function of RestRouteCollection. I don't get the point sorting the routes by HTTP method, rather than letting the developer chose the best order. Is there one ?\nIf this feature is used, I suggest taking the custom methods routes out of the $routes array, and moving them at the top, without touching the others. I am preparing a pull request for this.\nRegards.\n. Travis failures due to credentials asked... Is this a common problem ?\n. @everzet I am curious to know how bad that is compared to call preg_match twice on a sorting callback... What complexity is implied by uksort ?\n. @everzet I added a test that fails without the fix, passes after. Some travis jobs are still failing due to a credential problem for dependencies...\n. Well, adding a test was not so simple because the $formats var was not passed to the RestActionReader object built in tests.\nThis shoud be really tested now, tests were failing disabling my fix, passing with.\n. Ping ! Can someone run the travis build again ?\n. @tystr allright I fixed some functions description I forgot.\n. Was this the doc part you were thinking about ?\nThanks.\n. ",
    "lfbrandao": "Any updates or workarounds for this issue? Just upgraded an application to Symfony 2.2 and I'm running into this problem. The issue that I'm running into is the same described above by @zefrog.\n. ",
    "Narretz": "A good addition for the next version would also be a generic \"SerializerExclusionStrategy\" method on the View class, that takes an object that implements ExclusionStrategyInterface. This makes it easier to include custom exclusion strategies without having to hack the bundle. This probably won't work with annotations though.\n. ",
    "gordalina": "Implements #380 \n. My first concern was to make the rest bundle compatible with the new serializer API; I have to agree that ViewHandler could be simplified by passing around the SerializationContext thus providing more flexibility to the consumer.\nIf we are to use a SerializationContext then View::$serializerCallback becomes useless, or there are any corner cases that I'm not aware of?\n. @lsmith77 next week i can work on this\n. ",
    "pinouf": "i have the same problem =/ \n. i prefer to wait the real fix =/\n. Should i add the HttpException under codes too?\ncan you explain please the difference between \" messages \" and  \" codes \" sections. \ni will test tomorow this configuration.\nthank you =)\n. yeahh it's work !!\nI understood the difference now !!!\n@lsmith77 thank you =) \ni close. \n. ohhhh !!!! ok thank you so much @stof \n=) u saved my morning !! \n. @Ener-Getick hi -)\nwhat should use in composer.json to take the dev version master ?\nIndeed, i use          \"friendsofsymfony/rest-bundle\": \"dev-master\" and composer only take me the version 1.7-dev ... \n```\n\"require\": {\n    \"php\": \">=5.3.9\",\n    \"symfony/symfony\": \"2.7.*\",\n    \"doctrine/orm\": \"~2.2,>=2.2.3,<2.5\",\n    \"doctrine/dbal\": \"<2.5\",\n    \"doctrine/doctrine-bundle\": \"~1.4\",\n    \"symfony/assetic-bundle\": \"~2.3\",\n    \"symfony/swiftmailer-bundle\": \"~2.3\",\n    \"symfony/monolog-bundle\": \"~2.4\",\n    \"sensio/distribution-bundle\": \"~4.0\",\n    \"sensio/framework-extra-bundle\": \"~3.0,>=3.0.2\",\n    \"incenteev/composer-parameter-handler\": \"~2.0\",\n\"twig/extensions\": \"v1.3.0\",\n\n\"jms/security-extra-bundle\": \"1.5.*\",\n\"jms/di-extra-bundle\": \"1.5.*\",\n\"jms/serializer-bundle\": \"1.0.*\",\n\"friendsofsymfony/rest-bundle\": \"dev-master\",\n\"doctrine/doctrine-fixtures-bundle\": \"v2.2.1\",\n\"stof/doctrine-extensions-bundle\":\"v1.2.1\",\n\"knplabs/knp-paginator-bundle\": \"~2.4.\",\n\"seld/jsonlint\": \"1.3.*\",\n\"friendsofsymfony/user-bundle\": \"v1.3.6\",\n\"guzzle/guzzle\": \"v3.9.3\",\n\"friendsofsymfony/jsrouting-bundle\": \"1.5.4\",\n\"knplabs/knp-menu-bundle\": \"v2.0.0\",\n\n\"fpn/doctrine-extensions-taggable\": \"dev-master\",\n\n\"knplabs/knp-gaufrette-bundle\": \"v0.1.7\",\n\"fpn/tag-bundle\": \"dev-master\",\n\"willdurand/expose-translation-bundle\": \"1.0.0\",\n\"friendsofsymfony/oauth-server-bundle\": \"1.4.2\",\n\"nelmio/api-doc-bundle\": \"2.9.*\",\n\"oldsound/rabbitmq-bundle\": \"v1.7.0\",\n\"sensio/generator-bundle\": \"v2.5.3\",\n\"liuggio/excelbundle\": \"^2.0\",\n\"nelmio/cors-bundle\": \"^1.4\"\n\n},\n```\nthank you -)\n. thank you @Ener-Getick !! it seem the that work but i have another problem.\nI will like to test with your exemple in another ticket.\n    /\n     * \n     * @POST(\"/v2/contents/upload\")\n     * @View(statusCode=200)\n     * @ApiDoc(\n     *   section= \"contents\",\n     *   description=\"Upload content\"\n     * )\n     * @FileParam(name=\"fooFile\")\n     * In this example, if firstName and fooFile are defined at the time,\n     * ParamFetcher::get(\"fooFile\") will throw an error.\n     * Otherwise, if the file is valid, it will return a Symfony\\Component\\HttpFoundation\\File\\UploadedFile.\n     * See http://api.symfony.com/2.7/Symfony/Component/HttpFoundation/File/UploadedFile.html\n     \n     * @FileParam(name=\"myJsonFile\", requirements={\"mimeTypes\"=\"application/json\", \"maxSize\"=\"2k\"}, strict=true)\n     * The ParamFetch will throw an error if the file passed is not a json file or is bigger than 2,000 bytes.\n     * See all file possible requirements: http://symfony.com/doc/current/reference/constraints/File.html\n     \n     * @FileParam(name=\"avatar\", requirements={\"mimeTypes\"=\"application/json\", \"minWidth\"=\"200\"}, image=true)\n     * The ParamFetch will throw an error if the file passed is not an image and is not larger than 2O0px.\n     * See all image possible requirements: http://symfony.com/doc/current/reference/constraints/Image.html\n     \n     * @FileParam(name=\"identityCard\", image=true, default=\"noPicture\")\n     * If \"identityCard\" is not an image, paramFetcher will return \"noPicture\"\n     * @param  integer $id\n     * @return array\n     /\n    public function uplaodContentAction(ParamFetcher $paramFetcher)\n    {\n}\ni got error\nUndefinedMethodException in FormatNegotiator.php line 94:\nAttempted to call an undefined method named \"normalizePriorities\" of class \"FOS\\RestBundle\\Negotiation\\FormatNegotiator\".\nShould i use another bundle?\n. @Ener-Getick lol it seem that it is very hard to manage that -) \nI got another error : \nInvalidMediaType in Accept.php line 20:\nin Accept.php line 20\nat Accept->__construct('html') in Negotiator.php line 12\nat Negotiator->acceptFactory('html')\nat array_map(array(object(FormatNegotiator), 'acceptFactory'), array('html', '/')) in AbstractNegotiator.php line 28\nat AbstractNegotiator->getBest('text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8', array('html', '/')) in FormatNegotiator.php line 78\nat FormatNegotiator->getBest('', array()) in ExceptionController.php line 199\nat ExceptionController->getFormat(object(Request), 'html') in ExceptionController.php line 60\nat ExceptionController->showAction(object(Request), object(FlattenException), object(Logger))\nat call_user_func_array(array(object(ExceptionController), 'showAction'), array(object(Request), object(FlattenException), object(Logger))) in bootstrap.php.cache line 3109\nat HttpKernel->handleRaw(object(Request), '2') in bootstrap.php.cache line 3071\nat HttpKernel->handle(object(Request), '2', false) in bootstrap.php.cache line 3222\nat ContainerAwareHttpKernel->handle(object(Request), '2', false) in ExceptionListener.php line 50\nat ExceptionListener->onKernelException(object(GetResponseForExceptionEvent), 'kernel.exception', object(TraceableEventDispatcher))\nat call_user_func(array(object(ExceptionListener), 'onKernelException'), object(GetResponseForExceptionEvent), 'kernel.exception', object(TraceableEventDispatcher)) in WrappedListener.php line 61\nat WrappedListener->__invoke(object(GetResponseForExceptionEvent), 'kernel.exception', object(ContainerAwareEventDispatcher))\nat call_user_func(object(WrappedListener), object(GetResponseForExceptionEvent), 'kernel.exception', object(ContainerAwareEventDispatcher)) in classes.php line 1828\nat EventDispatcher->doDispatch(array(object(WrappedListener), object(WrappedListener)), 'kernel.exception', object(GetResponseForExceptionEvent)) in classes.php line 1757\nat EventDispatcher->dispatch('kernel.exception', object(GetResponseForExceptionEvent)) in TraceableEventDispatcher.php line 124\nat TraceableEventDispatcher->dispatch('kernel.exception', object(GetResponseForExceptionEvent)) in bootstrap.php.cache line 3141\nat HttpKernel->handleException(object(InvalidMediaType), object(Request), '1') in bootstrap.php.cache line 3077\nat HttpKernel->handle(object(Request), '1', true) in bootstrap.php.cache line 3222\nat ContainerAwareHttpKernel->handle(object(Request), '1', true) in bootstrap.php.cache line 2444\nat Kernel->handle(object(Request)) in app_dev.php line 37\n=/\n. same error -).\nI think i am giving up lol ...\n    format_listener:\n        rules:\n            - { path: '^/api', priorities: ['application/json'], fallback_format: json, prefer_extension: true }\n            - { path: '^/data', priorities: ['application/json'], fallback_format: json, prefer_extension: true }\n            - { path: '^/', priorities: [ 'text/html', '/'], fallback_format: ~, prefer_extension: true }\nPerhaps you have another solution for me?\ni have to develop a rest api who allow to a client javascript to uplaod a file ...\n. I tested with\n- { path: '^/api', priorities: ['application/json'], fallback_format: json, prefer_extension: true }\n- { path: '^/data', priorities: ['application/json'], fallback_format: json, prefer_extension: true }\n- { path: '^/', priorities: [ 'text/html', '/'], fallback_format: ~, prefer_extension: true }\nand got errors -)\ni gave up the dev-master version and return to the 1.7 stable version.\nI found another solution, and will use the fileParam annotation when it will be stable.\nt\n. @xabbuh \nok , I'll do it tonight or tomorrow when I have some time . =)\n. here my config =)\n``` yaml\nfos_rest:\n    serializer:\n        serialize_null: false\n    view:\n        view_response_listener: 'force'\n        formats:\n            json: true\n            xml: true\n            yml: true\n            rss: false\n        mime_types:\n            json: ['application/json', 'application/x-json', 'application/vnd.example-com.foo+json']\n            xml: 'application/xml'\n            yml: 'text/yaml'\n        templating_formats:\n            html: true\n        force_redirects:\n            html: true\n        failed_validation: HTTP_BAD_REQUEST\n        default_engine: twig\n    exception:\n        codes:\n            'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': 404\n            'Doctrine\\ORM\\OptimisticLockException': HTTP_CONFLICT\n        messages:\n            'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': true\n            'Symfony\\Component\\HttpKernel\\Exception\\HttpException': true\nformat_listener:\n    rules:\n        - { path: '^/api', priorities: ['application/json'], fallback_format: json, prefer_extension: true }\n        - { path: '^/data', priorities: ['application/json'], fallback_format: json, prefer_extension: true }\n        - { path: '^/', priorities: [ 'text/html', '*/*'], fallback_format: ~, prefer_extension: true }\n\nrouting_loader:\n    default_format: json\n\nparam_fetcher_listener: true\n\n```\nThanks !\n. @stof  @Ener-Getick \nThat's work . thanks ! \n. @stof  @Ener-Getick \nThat's work . thanks ! \n. hello,\nHave you use this?\nfos_rest:\n    param_fetcher_listener: true \n. hello,\nHave you use this?\nfos_rest:\n    param_fetcher_listener: true \n. ",
    "thebillkidy": "Same problem here\n. ",
    "gildniy": "I meet the same problem as @pschirch  got, and I can't even update my dependences, I use sf2.1.8.\nor if possible wish someone can give the link how to install a bundle without composer (manually) thanks!\n. ",
    "MichaelHindley": "Are you using the autogeneration-example as in the docs? Can you show an example?\nThe resource was like this \"@GatewayHomepageBundle/Controller/ContactController.php\" when I started using the bundle.\nAnyway, it worked fine before updating Symfony to 2.2, and as stated I have tried all different combinations - symfony just keeps saying that the route does not exist.\nSo if you provide an example of your working code and composer.json I'd be very thankful! :)\n. I've ran into this today:\nFatal error: Uncaught RuntimeException: You need to enable the parameter converter listeners in SensioFrameworkExtraBundle when using the FOSRestBundle RequestBodyParamConverter in /var/www/symfony/vendor/friendsofsymfony/rest-bundle/DependencyInjection/Compiler/ConfigurationCheckPass.php on line 29\nIt seems indeed that it depends on stuff that is not available anymore!\n. @ramoshka I'm seeing this error with the following config:\nyml\n   exception:\n      enabled: true\n      exception_controller: 'AppBundle\\Port\\Rest\\RequestValidation\\RequestValidationExceptionListener::render'\nIt's on 3.4 though, should I open a new issue?. It would seem that this is fixed in 2.3 by introducing the extra check \n&& 'fos_rest.request_body' === $configuration->getConverter()\ngiving the user granular control over when the request body parameter is used.\nIs this correct?. It would seem that this is fixed in 2.3 by introducing the extra check \n&& 'fos_rest.request_body' === $configuration->getConverter()\ngiving the user granular control over when the request body parameter is used.\nIs this correct?. ",
    "EmiiKhaos": "close, 'cause not a bug or issue. Sorry for bloating the issue list.\n. ",
    "cve": "You are right, sorry for that.\n. http://symfony.com/doc/current/reference/constraints/Range.html :)\n. Is it in the 2.0? I still have the issue...\n. Is there any solution to this?\n. Is there any solution to this?\n. I have 2.0\n. I have 2.0\n. My code:\nPermissionController\n``` php\n<?php\nnamespace AppBundle\\Controller;\nuse AppBundle\\Entity\\Permission;\nuse FOS\\RestBundle\\Controller\\FOSRestController;\nuse FOS\\RestBundle\\Routing\\ClassResourceInterface;\nuse Nelmio\\ApiDocBundle\\Annotation\\ApiDoc;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\ParamConverter;\nuse Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\nuse Symfony\\Component\\Validator\\ConstraintViolationListInterface;\nclass PermissionController extends FOSRestController implements ClassResourceInterface\n{\n    /\n     * This method returns list of permissions\n     \n     * @ApiDoc(\n     *     description=\"Get list of permissions\"\n     * )\n     \n     * @return array\n     */\n    public function cgetAction()\n    {\n        return $this->get('permission_repository')->findAll();\n    }\n/**\n * @ParamConverter(\"permission\", converter=\"fos_rest.request_body\")\n *\n * @param Permission $permission\n * @param ConstraintViolationListInterface $errors\n * @return Permission|ConstraintViolationListInterface\n */\npublic function postAction(Permission $permission, ConstraintViolationListInterface $errors)\n{\n    /**\n     * IS THERE A WAY TO NOT REPEAT HANDLING ERRORS IN EVERY CONTROLLER?\n     */\n    if (count($errors) > 0) {\n        throw new BadRequestHttpException($errors);\n    }\n\n    $em = $this->getDoctrine()->getManager();\n\n    $em->persist($permission);\n\n    return $permission;\n}\n\n}\n```\n\n. My code:\nPermissionController\n``` php\n<?php\nnamespace AppBundle\\Controller;\nuse AppBundle\\Entity\\Permission;\nuse FOS\\RestBundle\\Controller\\FOSRestController;\nuse FOS\\RestBundle\\Routing\\ClassResourceInterface;\nuse Nelmio\\ApiDocBundle\\Annotation\\ApiDoc;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\ParamConverter;\nuse Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\nuse Symfony\\Component\\Validator\\ConstraintViolationListInterface;\nclass PermissionController extends FOSRestController implements ClassResourceInterface\n{\n    /\n     * This method returns list of permissions\n     \n     * @ApiDoc(\n     *     description=\"Get list of permissions\"\n     * )\n     \n     * @return array\n     */\n    public function cgetAction()\n    {\n        return $this->get('permission_repository')->findAll();\n    }\n/**\n * @ParamConverter(\"permission\", converter=\"fos_rest.request_body\")\n *\n * @param Permission $permission\n * @param ConstraintViolationListInterface $errors\n * @return Permission|ConstraintViolationListInterface\n */\npublic function postAction(Permission $permission, ConstraintViolationListInterface $errors)\n{\n    /**\n     * IS THERE A WAY TO NOT REPEAT HANDLING ERRORS IN EVERY CONTROLLER?\n     */\n    if (count($errors) > 0) {\n        throw new BadRequestHttpException($errors);\n    }\n\n    $em = $this->getDoctrine()->getManager();\n\n    $em->persist($permission);\n\n    return $permission;\n}\n\n}\n```\n\n. @lsmith77 am I missed somethink?\n. @lsmith77 am I missed somethink?\n. I will check If that works for 4 hours\n. It works, thanks.\n. ",
    "iamdey": "Up again on 1.0-RC1\nRun this issue on symfony 2.3 (almost standard installation).\nI'll will check again on a real fresh install of symfony and inform you.\n. ok so this is explained in the install doc. \nBut JMSSerializerBundle is not included in Symfony any more.\nSo FosRestBundle should requires it, isn't it?\n. ",
    "hgraca": "Hi, I'm new to Symfony and I'm also having this issue...\nI installed from scratch, followed the instructions on FOSRestBundle installation page, but it doesn't work.\nIf I try to add JMSSerializerBundle to the appKernel (as in the documentation) it cant find the bundle:\nWhoops, looks like something went wrong.\n2/2 InvalidArgumentException: Unable to replace alias \"jms_serializer.serializer\" with \"fos_rest.serializer\".\nIf I try to intall the JMSSerializerBundle it gives me a conflict with FOSRestBundle:\n$ php composer.phar require jms/serializer-bundle\nPlease provide a version constraint for the jms/serializer-bundle requirement: 0.9.0\n./composer.json has been updated\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nYour requirements could not be resolved to an installable set of packages.\nProblem 1\n    - jms/serializer-bundle 0.9.0 conflicts with friendsofsymfony/rest-bundle[1.0.0].\n    - jms/serializer-bundle 0.9.0 conflicts with friendsofsymfony/rest-bundle[1.0.0].\n    - Installation request for jms/serializer-bundle 0.9.0 -> satisfiable by jms/serializer-bundle[0.9.0].\n    - Installation request for friendsofsymfony/rest-bundle 1.0.0 -> satisfiable by friendsofsymfony/rest-bundle[1.0.0].\nInstallation failed, reverting ./composer.json to its original content.\nAny Ideas?\n. I see now... \nMy request accept headers are:\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nclearly stating xml.\nI removed the 'xml' on the priorities list and it worked perfectly.\nTkx for your help and for building this really awesome bundle.\nall the best\n. ",
    "linaori": "Having this issue after removing JMS, if it by default requires JMS, please add it as dependency. I'm glad I can remove my dep on JMS so BY DEFAULT, this package is broken on packagist\n. The main problem is that I need to overwrite the by default setting of JMS. I have to get the service name of the SF2 Serializer, but that one isn't stated anywhere. Having the setting on SF2 by default with optionally to JMS is the best solution. If you don't want a default dependency on JMS, then don't use a JMS service for a default setting, it's that easy.\n. So you have created your own problem:\na) You don't want a dependency on the Symfony2 Serializer because few people use it.\nb) You don't want a dependency on the JMS Serializer for what ever reason.\nSimple, create your own serializer and have a dependency on that. If people want the SF2 or JMS, they can always install it, but at least a default installation of the bundle will work. At the moment it's broken and I refuse to use JMS.\n. It's a very big problem, the bundle won't work without the serializer and it's referring to a service that doesn't exist. It's like using a class in your code without defining the dependency in composer and then wondering why it doesn't work...\n. Or just provide a custom serializer if it's that important to have.. That way you are not dependent on JMS nor the SF2 version. For all I care it throws an exception with a huge message when you try to use it, telling what to install.\n. And without view handler, what good is this bundle? I still say putting a useless mock by default is a better solution than having a dependency without defining it. It feels more than hacky hacky like that. I'm not sure what the serializer does, but I presume some sort of json_encode?\n. I that case I suggest a different plug & play setup where you can just inject custom/available conversion objects. SerializableConversionInterface extends Serializable perhaps? Simply stating what type it is, some serialize and unserialize method and what ever else is required... Needing just a whole service from a different bundle seems like an overkill dependency :/\nAnyways, I will have to check on how to use the default symfony2 one and I guess an update on the docs on how to choose (+ perhaps differences between them) would be welcome. \n. @matthiasnoback That sounds like a reasonable solution. :+1: \n. Maybe it's time to start splitting up the bundle...\n. I sadly don't have enough experience with REST nor this bundle in general. I do know that I dislike the current usage, but there are little to no alternatives to this bundle. \n. Or fix your bundle. Pointing out to people how to get around it, is not a fix. Documenting the bug as a feature is not a fix either. You have introduced a dependency issue which should be addressed.\n. The change that probably causes this is here. If you can point me to the location in this bundle where it breaks, I can try to submit a patch.\n. Looks good as far as I can see :+1: \n. To me this looks like a bad approach (sorry for bursting in, came here through the linked PR). This means that adding a specific annotation would cause manipulation of objects you receive, while this manipulation should be initiated in your controller. As it is, you are altering the state of managed objects at a point you have no control over. That means that if an event listener that triggers a flush for any reason at all, you have no idea if this will flush your entity, not to mention that you can't guarantee a valid state of your entity at all.\nJust my 2 cents.\n. @maennchen parameter converters are meant to transform an incoming parameter into an object, not to execute logic.\n. ``` php\npublic function fooAction(Comment $comment)\n{\n    $this->someCommandBus->handle(new PathEntity($comment));\n}\n// or service style\npublic function fooAction(Comment $comment)\n{\n    $this->patcher->patch($comment);\n}\n```\nJust because it's convenient, doesn't make it a good solution (especially not this one).\n. ",
    "csarrazi": "I agree with @lsmith77 on that one. What would be done is not adding the bundle as a required dependency, but simply checking whether the JMSSerializerBundle is registered or not in the AppKernel.\nI guess I'll submit a PR for that one if nobody does it by Sunday (won't have the time before)\n. After checking a few things, here is the result of my research:\n- The symfony serializer service doesn't exist until Symfony 2.3 (even though the component exists before), so we cannot fall back to the Symfony serializer if we don't have a jms_serializer.serializer service unless we drop support for Symfony before 2.3.\n  - In this case, we can have a second level fallback for that. This means creating the symfony serializer service ourselves.\n- Enabling the symfony serializer service has to be done using configuration prepend. But this can only be done in symfony >= 2.3, as the config value doesn't exist in the previous versions. What's your take on bumping the version requirement for FrameworkBundle to version >= 2.3 ?\n. Yes, it's one of the new features of Symfony 2.3. See http://symfony.com/doc/current/cookbook/serializer.html#activating-the-serializer\nOtherwise, we won't be able to fall back safely, as 2.3 uses configuration to handle the service creation, whereas the previous versions don't. In this case, the only possible approach would be to improve the error message in the compiler pass, saying that the jms_serializer.serializer service was not found, thus, that you need to download and/or register JMSSerializerBundle.\nFalling back to the symfony serializer when not having the jms_serializer.serializer service would be a breakable change indeed, and should only be done in a major version.\nSo in the mean time, I'll improve the error handling in case the jms serializer bundle is not active, and improve/add the documentation:\n- Telling that by default, the bundle needs JMS Serializer.\n- Telling that you can use the default Symfony serializer, by creating your own serializer service and using it in the configuration for Symfony <2.3, and by enabling it in Symfony >=2.3 (using the bundle's semantic configuration).\n. Actually, the view is not the only thing depending on the serializer. The request body listener also requires the serializer to transform the request's content.\nSo basically, we would need to disable:\n- the request body listener\n- the view listener\n- the view handler\nIs that alright with you?\nIn any case, I don't really understand where isEnabled() should be set in the configuration. Are you talking about the view section of the semantic configuration ?\n. ",
    "ArlingtonHouse": "This is still an issue.  You are providing people with a broken bundle.  Maybe you could prompt users to choose one serializer during bundle installation.\n. This is still an outstanding issue, the installation documentation is incomplete.\n. Related question-- what is the difference between a RequestParam and a QueryParam?  Are QueryParams things like page number, sort by, count, etc, and RequestParam things like filters (?email=foo@bar.com) etc?  Thanks!\n. ",
    "Markkaz": "Configuration added and indention issues fixed.\n. And done\n. Hmm, not sure why I used 1.0.x instead of 1.0.*. Better to change it probably.\n. ",
    "simonchrz": "done :-)\n. ",
    "KingCrunch": "@borisguery No, I am talking about, that you code doesn't do, what it should do :smile: Even further the ETag is never set.\n. @lsmith77 @borisguery Doesn't the built-in implementation requires, that you set the ETag manually via setETag()? This would mean, that I can skip every process as long as I know the ETag before somehow.\nI didn't thought about automatic etag generation, but when I now set $view->getResponse()->setETag() it doesn't appear in the response.\n. @lsmith77 I'll have a look at it. Not today, but I guess at the weekend I can spent some time :)\n@borisguery Thanks for the hint, that may be related.\n. @borisguery You were right and this made the fix quite simple: The View-object used an own status code, which overwrites the status code of the response object later. This PR fixed this.\n$view->getResponse()->setEtag($etag);\n$view->getResponse()->isNotModified($this->request);\nThe rendering process can now skipped too, but I think this is fine so far (fow now ;)), because on the one side the \"big work\" is in the controller anyway and must be skipped by the developer himself\nif ($view->getResponse()->isNotModified($this->request)) {\n  // Code\n  $view->setData($computed);\n}\nAnd as far as I had tested symfony already drops the content on 304, which saves both time and bandwidth when handling huge lists.\n. populateVariables() (is there's a need to mention \"Template\"?)\n. ",
    "davidterranova": "Hi,\nanother problem is that jms/serializer-bundle 0.12.* requires jms/serializer that does not contains the last SerializationContext class\nBut FOSRestBundle use it\nany idea to fix this the right way ?\n. ",
    "RLovelett": ":+1: \n. Alright, I will see what I can do.\n. As far as I can tell this will return a 401 AuthenticationException and 403 for any case it would have in the past. (Sorry for the two clobbered commits a58c18e and 1f0d6b5)\n@lsmith77 What do you think of this?\n. It was my understanding that elseif is the \"always\" correct way of doing it in PHP.\n\nNote: Note that _elseif and _else if will only be considered exactly the same when using curly brackets as in the above example. When using a colon to define your _if/elseif conditions, you must not separate _else if into two words, or PHP will fail with a parse error.\n\nHowever, I understand that in this condition (because I use the curly brackets) there is no functional difference; only style. So if you prefer the style change then I of course can make the change.\nThoughts?\n. Fixed! :+1: \n. ",
    "pylebecq": "Oops, my mistake. Sorry.\n. ",
    "vkartaviy": ":+1: \n. ",
    "skydiablo": "ok, sry for my useless comment, but what can i do to around this error ?\n. ",
    "joshparolin": "This is fixed after running a 'composer update' a few days after the problem started. Must have been a bug in another package. Thanks @lsmith77.\n. This is fixed after running a 'composer update' a few days after the problem started. Must have been a bug in another package. Thanks @lsmith77.\n. ",
    "benbender": "The problem is a bit deeper I think. If I have something like:\nphp\n    /**\n     * @Rest\\QueryParam(name=\"page\",  requirements=\"\\d+\", default=\"1\", description=\"Page of the overview\")\n     * @Rest\\QueryParam(name=\"limit\", requirements=\"\\d+\", default=\"25\", description=\"Limit per page\")\n     */\n    public function indexAction($page = 1, $limit = 25)\nand set param_fetcher_listener to force I'm getting an exception from:\nFOS/RestBundle/EventListener/ParamFetcherListener.php at line 64\nwith the message:\nParamFetcher parameter conflicts with a path parameter 'page' for route 'api_model_index'\"\nIf I remove the defaults from the method-signature, everything is working fine. So we have a conflct between ParamFetcher from FOSRest and ParamConverter from SensioExtraBundle.\nI would be happy to provide a patch, but I'm unsure what`s the intended behavior would be. The simplest (and imho propably best) solution would be, to simple remove the Exception from ParamFetcherListener and document the behaviour, that if both Listeners are used, the ParamConverter takes precedence.\n. The problem is a bit deeper I think. If I have something like:\nphp\n    /**\n     * @Rest\\QueryParam(name=\"page\",  requirements=\"\\d+\", default=\"1\", description=\"Page of the overview\")\n     * @Rest\\QueryParam(name=\"limit\", requirements=\"\\d+\", default=\"25\", description=\"Limit per page\")\n     */\n    public function indexAction($page = 1, $limit = 25)\nand set param_fetcher_listener to force I'm getting an exception from:\nFOS/RestBundle/EventListener/ParamFetcherListener.php at line 64\nwith the message:\nParamFetcher parameter conflicts with a path parameter 'page' for route 'api_model_index'\"\nIf I remove the defaults from the method-signature, everything is working fine. So we have a conflct between ParamFetcher from FOSRest and ParamConverter from SensioExtraBundle.\nI would be happy to provide a patch, but I'm unsure what`s the intended behavior would be. The simplest (and imho propably best) solution would be, to simple remove the Exception from ParamFetcherListener and document the behaviour, that if both Listeners are used, the ParamConverter takes precedence.\n. As I thought a bit more about this topic, it became clear, that the problem is more or less conceptional. The root-problem is that the force-option copies content from one \"context\" (in symfony terms query- to request) to another and there is no defined solution to handle possible conflicts. \nIf I think about the expected behavior, I would say that defaults of QueryParamFetcher should take precedence because it is the place where I define the query-parameter I am actually sending. This would also play nice with the term \"force\" in the ParamFetcher-config.\nSo imho there are two possible solutions:\n- Give precedence to QueryParamFetcher:\n  - the QueryParam overwrite defaults of the route-definition / ParamConverter.\n  - the defaults are defined in the QueryParam-Annotation. Possible defaults in the method-signature or route-definition are ignored   if both set.\n  - There should no exception to be thrown if both set defaults\n  - this behavior should be documented\n- Define the actual behavior as expected and document it because we think the conflict can't be decided by the bundle\nEither way, there should be a defined and documented way to resolve this (or not) :)\n. As I thought a bit more about this topic, it became clear, that the problem is more or less conceptional. The root-problem is that the force-option copies content from one \"context\" (in symfony terms query- to request) to another and there is no defined solution to handle possible conflicts. \nIf I think about the expected behavior, I would say that defaults of QueryParamFetcher should take precedence because it is the place where I define the query-parameter I am actually sending. This would also play nice with the term \"force\" in the ParamFetcher-config.\nSo imho there are two possible solutions:\n- Give precedence to QueryParamFetcher:\n  - the QueryParam overwrite defaults of the route-definition / ParamConverter.\n  - the defaults are defined in the QueryParam-Annotation. Possible defaults in the method-signature or route-definition are ignored   if both set.\n  - There should no exception to be thrown if both set defaults\n  - this behavior should be documented\n- Define the actual behavior as expected and document it because we think the conflict can't be decided by the bundle\nEither way, there should be a defined and documented way to resolve this (or not) :)\n. The 3. error would be fixed with PR #444 \n. The 3. error would be fixed with PR #444 \n. Ooops, did not saw PR #288. Sorry for the doubled effort but it seems to be abandoned anyway?\n. Ooops, did not saw PR #288. Sorry for the doubled effort but it seems to be abandoned anyway?\n. For clearance on 2. I also get an exception if I use the NoRoute-Annotion in sf 2.2.1 (exactly as for the Route-Annotation):\n```\nInvalidArgumentException: Routing requirement for \"_method\" must be a string.\n.../vendor/symfony/symfony/src/Symfony/Component/Routing/Route.php line 570\nat Route->sanitizeRequirement('_method', null) in .../vendor/symfony/symfony/src/Symfony/Component/Routing/Route.php line 497\nat Route->addRequirements(array('_method' => null)) in .../vendor/symfony/symfony/src/Symfony/Component/Routing/Route.php line 482\nat Route->setRequirements(array('_method' => null)) in .../vendor/symfony/symfony/src/Symfony/Component/Routing/Route.php line 85\nat Route->__construct('', array(), array('_method' => null), array(), '', array(), array()) in .../vendor/symfony/symfony/src/Symfony/Component/Routing/Loader/AnnotationClassLoader.php line 197\n```\n. For clearance on 2. I also get an exception if I use the NoRoute-Annotion in sf 2.2.1 (exactly as for the Route-Annotation):\n```\nInvalidArgumentException: Routing requirement for \"_method\" must be a string.\n.../vendor/symfony/symfony/src/Symfony/Component/Routing/Route.php line 570\nat Route->sanitizeRequirement('_method', null) in .../vendor/symfony/symfony/src/Symfony/Component/Routing/Route.php line 497\nat Route->addRequirements(array('_method' => null)) in .../vendor/symfony/symfony/src/Symfony/Component/Routing/Route.php line 482\nat Route->setRequirements(array('_method' => null)) in .../vendor/symfony/symfony/src/Symfony/Component/Routing/Route.php line 85\nat Route->__construct('', array(), array('_method' => null), array(), '', array(), array()) in .../vendor/symfony/symfony/src/Symfony/Component/Routing/Loader/AnnotationClassLoader.php line 197\n```\n. Would love to but didnt find any doc on the route-annotations at all. So the task would be to write them from scratch or did I miss something?\n. Would love to but didnt find any doc on the route-annotations at all. So the task would be to write them from scratch or did I miss something?\n. Will try to put something up in the coming week. Would love to get this PR merged in the meanwhile and handle docs in a separate issue/PR. Deal? :)\n. Will try to put something up in the coming week. Would love to get this PR merged in the meanwhile and handle docs in a separate issue/PR. Deal? :)\n. ",
    "adriensamson": "The priority in framework extra bundle is actually at -128. But any strictly negative priority is OK since this listener only needs to be called after framework extra's ControllerListener which has a priority of 0.\n. ",
    "lsnpatryksz": "I'm sorry for my mistake, and thanks for fix of that :).\n. ",
    "conradfr": "So, is there a way to make it work with the current Symfony 2.3 branch ?\n. So, is there a way to make it work with the current Symfony 2.3 branch ?\n. ",
    "venu": ":+1: yes, thank you\n. :+1: yes, thank you\n. Yep! this is just to remind you all. And FOSUserBundle, NelmioApiDocBundle also hasn't mark it as supported (I guess you are part of them also :) ). \nThanks in advance.\n. ",
    "javiermartinezruiz": "'csrf_protection'   => false,\n. 'csrf_protection'   => false,\n. ",
    "SimonSimCity": "Can the challenge be empty, or should we use undefined as default?\nMaybe this is link is of help for someone - how browsers handle challenges: http://greenbytes.de/tech/tc/httpauth/\n. @murilolobato I just wonder why you don't want your API to send that header ... it's part of the HTTP specs, that you should do it ... I guess, you don't want the system to send WWW-Authenticate: Basic realm=\"Restricted Area\" so your browser doesn't show the login prompt.\n. @lsmith77 Thanks for being focused on what should be in this package. I now totally agree with you. Had a talk about my API with one of my colleges lately and we came up on, that what I call API is more like a combination of an API and an application-server, serving JSON responses.\nAm now trying to split that up - and here your comment (even so I had to re-read it now to get the full meaning of what you meant) was of great help!\n. Took some time now and added a global configuration here on if to handle unsupported request-body types by throwing an exception.\nKept the merge in an extra commit here to separate between the changes I did and the changes in the repo in the meanwhile.\n. What test? Didn't I already add the one here? https://github.com/SimonSimCity/FOSRestBundle/commit/d3682cce1648eb6c90490a5b0ee0057f6208a517#diff-278735801e5d1edb6132d402fe2acc39R96\nOr what do you think of?\n. As I did ... see: https://github.com/SimonSimCity/FOSRestBundle/blob/d3682cce1648eb6c90490a5b0ee0057f6208a517/Tests/EventListener/BodyListenerTest.php\n. Never mind :)\nI've updated the minor comment now.\n. What about overwriting the service security.access_listener?\nIf you take a look at Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\SecurityExtension, this is the listener, called after all security-listeners are through. This is the class throwing the AuthenticationCredentialsNotFoundException exception ... Even so I don't know if we should throw a 401, because it requires a WWW-Authenticate header field .. or should we keep being inconsistent to the RFC here?\n. Just to fresh this up - this issue still is on my hand ...\nI found out, that the firewall, at runtime, adds a new listener to the event kernel.exception, where also the here named listener, registered in AccessDeniedListener, is involved.\nAs the firewall adds the listener at runtime, not in a configuration file, the listener itself has no priority (in other words: it has 0). And this listener is responsible for handling the AuthenticationFailure-stuff for the currently selected authentication. See: http://api.symfony.com/2.4/Symfony/Component/Security/Http/Firewall/ExceptionListener.html#method_register\n@lsmith77, you said before here, that\n\nsince the proper solution is a separate handler for each possible auth provider.\n\nIf I get the implementation correct, moving the handler behind the one, added by the firewall, would be a proper solution as well, as it's then only executed if the firewall does not know how to handle it. Can you please have a look into that? I'll write some functional-tests for my API to check if it works as expected, when setting the priority of FOS\\RestBundle\\EventListener\\AccessDeniedListener to something negative - like -64. This should fix #434, even if the 401-HttpExceptions thrown in there still aren't valid ...\n. Ran all the tests on my server and Travis CI also shows no indication on that. But the documentation may need some updates to show, that it's possible to limit for methods :)\n. I think it's enough when naming it once in an example in the documentation ... what do you think?\nI'm always doing something wrong when sqashing the commits ... am I? Or do I have to create a new pull-request for that one, just because I changed some lines of code?\nI squashed that stuff now locally and was not able to push. After pulling and pushing I got that ... is that what you want?\n. Yea! Here we go!\nThanks :) Now you have the commit squashed.\n. Looked a bit into the code and found a quite good solution. The only services now ahead of the listener are:\nProfilerListener (1024)\nTestSessionListener (192)\nSessionListener (128)\nhttp://symfony.com/doc/current/reference/dic_tags.html#kernel-request\n. I also found nelmio's extension for CORS (https://github.com/nelmio/NelmioCorsBundle) being higher ... they have a priority of 10000, but this shouldn't be of any issue here.\n. :+1:, @mvrhov, will fix it as soon as the project goes into a final state. Will then either use my fix, provided in #725 or the next version of this bundle, where this will (hopefully) be resolved.\n. I asked for reverting the changes for this ticket, because you can also send the HTTP header X-HTTP-METHOD-OVERRIDE along to change the HTTP method used in the request.\nSee #763 for more details why this has been a candidate for to be reverted.\n. Maybe also related to: https://github.com/symfony/symfony/issues/10035\n. This situation is quite tricky .... Haven't thought of default content-type in routings when I wrote that patch, that's right.\n724 and #725 are the issues fixed by 0bb8cb4\n\nWe need the correct HTTP method to find the correct route\nThe route may contain a default content-type whereby the content can be encoded\nBut the encoded content can contain an attribute, that overwrites the HTTP method and thereby you are not able to get the correct route before the content is decoded\n\nThe fact, we can't take away is:\nYou can't overwrite the HTTP method by an attribute in your request-body if you do not define a content-type or your request-body cannot be decoded by PHP.\nI think that we can say for sure. But I think, running the listener two times is the best way we have to allow the most possibilities here. Just save if the listener was successful the first time, then you can skip the encoding the second time ;)\n. For me it was mostly about these guys here :)\n- http://stackoverflow.com/questions/9649972/firefox-overwrites-custom-http-method-link-to-mixed-case-link-on-xhr\n- http://stackoverflow.com/questions/9645037/nginx-rejects-custom-http-methods-if-not-all-upper-case\n@lsmith77, feel free to take it back.\nAs the client \"Firefox\" is (according to @stof) a bad client when using the HTTP method LINK, and nginx seems to be a bad server here, I have to take something else if you decide to drop the code-change.\nIf a compromise is not good for the public, revert my change. I think, having a default content-type is more important than method-overriding, but please add a note in the documentation.\n. @stof Nice you say that! Wasn't aware of, that I also can send a X-HTTP-METHOD-OVERRIDE header that has the same functionality.\n@lsmith77, so, go ahead! Revert the feature I requested that time.\n. Because the request, once you've asked for the method, stores the generated fallback-method. And we ask for the method already in line 61. Please take a look at Request::getMethod() if I wrote it incomprehensibly ;)\nIf you comment this out, the tests will fail.\n. The point is, that the class Request checks all possible fallbacks the first time you call the method Request::getMethod() and saves the result in a private variable Request::$method. The next time, you call Request::getMethod(), the system won't check all the fallbacks but directly give you Request::$method.\nBy calling Request::setMethod() we replace the system's original method. This sets Request::$method to null again, and the fallbacks are checked again, next time the method Request::getMethod() is called. This way, it'll then (if no other fallback hits) return the method given in the _method-parameter, that's now (by us) set in the Request::$request parameter-bag.\nAnd because I don't want to change the real http-method (that can still be POST ...) I call $request->setMethod($request->getRealMethod()).\n. :+1: yepp, exactly :)\n. ",
    "murilolobato": "I'm not understanding what is really going on.\nAll I want to do is: When an request to a http_basic endpoint, with no username/pass or invalid username/pass is made, the backend don't return the WWW-Authenticate header. This header breaks ionic applications.\nNow, after configure unauthorized_challenge on config.yml to an empty string, or to null, I stopped to receive those headers, but only if I don't send any user/pass information. Once I send invalid username/pass I receive the WWW-Authenticate header again.\nFor now, I'll try to overwrite the Symfony\\Component\\Security\\Http\\EntryPoint\\BasicAuthenticationEntryPoint class of security bundle via an parameter, as follows: \n// config.yml\nparameters:\n    security.authentication.basic_entry_point.class: APPBundle\\EntryPoint\\BasicAuthenticationEntryPoint\nAnd my custom BasicAuthenticationEntryPoint will not add any headers. I hope this works, and is what I'm doing correct?\n. I wan't that because my API is being consumed basically by an ionic app, and cordova on ios or android have some trouble with that header.\nActually, the best solution obviously is to fix the behavior on my cordova app. But until now I couldn't find anything to fix the problem.\n. The solution for this, is to have two folders inside Controller: Web and Api, as suggested on 3:27 at this video https://knpuniversity.com/screencast/symfony-rest/post\n. The solution for this, is to have two folders inside Controller: Web and Api, as suggested on 3:27 at this video https://knpuniversity.com/screencast/symfony-rest/post\n. ",
    "nils-wisiol": "Do you have any suggestions to my proposed patch? I'm happy to improve it, if necessary.\n. coming!\n. @lsmith77 IMHO we can not move the check until after the force redirect check as $response is still null at this point. Therefore, we can not call $response->setStatusCode().\n. gah, something is wrong with this commit. There are a lot of changes I didn't want to make.\n. It's a mess. I will do it again with a new pull request.\n. ",
    "gondo": "i was using this setup but after updating from 02fd6423543d673946246c7f74a738099951aaff to b38db72be9eed4f5c2135ba6ea19b66eaa1def22, encoding is broken again. no charset is set in response anymore.\nversion 1.5.3 was the last working one\n. sure, here:\n```\nfos_rest:\n    disable_csrf_role: ROLE_API\n    param_fetcher_listener: true\n    service:\n        inflector: app_utill_noopInflector #disable pluralization of routes\n    view:\n        view_response_listener: force\n        mime_types:\n            json:\n                - \"application/json; charset=UTF-8\"\n                - \"application/json\"\n    exception:\n        codes:\n            'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': 404\n            'Doctrine\\ORM\\OptimisticLockException': HTTP_CONFLICT\n        messages:\n            'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': true\n    serializer:\n        serialize_null: true\n``\n. the first \"error\" was, that response is served withoutcharset=Utf-8` and therefore its unreadable\nthan i tried to downgrade to different RC and started to receive errors regards invalid config, but i assume those were fixed or silenced in none RC release of 1.6.\nnow i am not sure if my config is still working or just silently being accepted, but the only real problem is the encoding. as mentioned in #438 \n. thx\n. ",
    "terranisu": ":+1: \n. ",
    "excursions": "+1\n. ",
    "smilesrg": "+1 for this PR. Users tell that everything works fine.\n. @lsmith77 Is there any progress on this? API versioning is a really must-have feature!\n. ",
    "ChadSikorra": "Ignore this one, opening a different PR to clean-up the mess of commits.\n. @lsmith77 The call to findClass will let it ignore an interface, and the call to isAbstract on the reflection class will make it ignore abstract classes.\n. @lsmith77 The call to findClass will let it ignore an interface, and the call to isAbstract on the reflection class will make it ignore abstract classes.\n. Hmm..I think I noticed an issue when importing a directory of controllers from a YAML collection. It imports all the routes, but doesn't seem to add name_prefix to all of them when it's defined in the YAML and not as an annotation. I'll try to take a look at it today.\n. Hmm..I think I noticed an issue when importing a directory of controllers from a YAML collection. It imports all the routes, but doesn't seem to add name_prefix to all of them when it's defined in the YAML and not as an annotation. I'll try to take a look at it today.\n. I think I worked out all the issues when using a directory resource in a YAML collection. Which actually makes it pretty nice because you can use name_prefix and prefix options without having to add the annotation to each file in the directory. I need to add some more tests though.\n. I think I worked out all the issues when using a directory resource in a YAML collection. Which actually makes it pretty nice because you can use name_prefix and prefix options without having to add the annotation to each file in the directory. I need to add some more tests though.\n. Sorry, it has been a busy past 2 weeks. I hope to finish this within a week or so. Any word from @stof regarding the locator and child bundles?\n. I have to adjust a test now and figure out a way to add some additional ones, but that makes directory resource loading from imported rest resources work correctly. Let me know if you want me to do it differently, but that seemed to be the least invasive way to make it work.\n. Sorry, this kinda fell off my radar. Due to a recent job change and other things I'm not sure I'll find the time to clean this up again. If someone wants to resubmit this on a different PR please do! I think the only real issue left on this (as I remember it) was fleshing out the tests.\n. @stof Interesting, it would seem this is also an issue with the Symfony\\Component\\Routing\\Loader\\AnnotationDirectoryLoader for standard routes. It looks like the workaround for this is to reference the directory paths themselves as separate resources, rather than using the @AcmeDemoBundle/Controller/Api syntax.\nAn alternative approach would be to call $this->locator->locate($path, null, false) instead, then loop on each directory returned. But it would also be necessary to  detect if an array was actually returned by the locate method, because if a full directory path is used then it seems it will simply return the path again. Considering how the method is documented, this would almost seem to be a bug in Symfony\\Component\\Config\\FileLocator. https://github.com/symfony/Config/blob/master/FileLocator.php#L51 But I guess that's debatable. Anyway, should I implement something like this?\n. ",
    "egulias": "You where referring to this ones https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Resources/doc/7-manual-route-definition.md ?\n. Can this be closed?\n. Hi @lsmith77 ,\nI started working on this and arrived to the following situation:\nIf I'm not wrong, to add the rules to the format_listener I have to do something like this https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/DependencyInjection/FOSRestExtension.php#L142\nThe method createRequestMatcher is only used for the format_listener. \nThis means that in order to add the rules I have to copy that code.\nWould be possible to refactor that (code that goes from line 141 to 163) into something like FormatListenerPass and add there the rules for the profiler toolbar?\nOther option would be to take that code to a method and there add the rules for the profiler, without a compiler pass.\nLet me know what you think.\n. Hi @lsmith77 ,\nI started working on this and arrived to the following situation:\nIf I'm not wrong, to add the rules to the format_listener I have to do something like this https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/DependencyInjection/FOSRestExtension.php#L142\nThe method createRequestMatcher is only used for the format_listener. \nThis means that in order to add the rules I have to copy that code.\nWould be possible to refactor that (code that goes from line 141 to 163) into something like FormatListenerPass and add there the rules for the profiler toolbar?\nOther option would be to take that code to a method and there add the rules for the profiler, without a compiler pass.\nLet me know what you think.\n. Is this a duplication from https://github.com/FriendsOfSymfony/FOSRestBundle/issues/439 ?\n@lsmith77 should implement the expose option when loading the routes, right? ( As used here? \nhttps://github.com/FriendsOfSymfony/FOSJsRoutingBundle/blob/master/Extractor/ExposedRoutesExtractor.php#L160)\nIs there any tests for this? I've been searching but failed to see one. \nThanks!\n. I went to test this implementation with FOSJsRoutingBundle (as suggested by @lsmith77 on the PR), but I first tried to replicate the issue. \nBut I couldn't. The console command fos:js-routing:debug shows the right routes when expose option is used with annotations and with yaml (can we assume that will work with xml then?)\nWith annotation:\nbash\nsf fos:js-routing:debug\n[router] Current routes\n Name  Method Scheme Host Path   \n _demo ANY    ANY    ANY  /demo/\nWith yaml:\nfos:js-routing:debug\n[router] Current routes\n Name    Method Scheme Host Path                        \n index   GET    ANY    ANY  /api/index.{_format}        \n hello   PATCH  ANY    ANY  /api/{name}/hello.{_format} \n contact GET    ANY    ANY  /api/contact.{_format}\n@Bup3 can you take a look at this?\n. What I was trying to achieve with this (despite several errors I've found), is not to modify the configuration but to add the method calls added by the user in the config and the method calls for the  \"default\" rules for the toolbar. \nI've updated the commit to reflect that. If you think that is better the other way, prepending the config, let me know and I'll change the implementation in a new PR.\n. Perfect!\nI'll try to pick another one soon :smile:\n. I'd like to know if I'm going in the right direction, thanks!\n. Hi @lsmith77 ,\nSorry for the delay with this PR, I've been a bit busy, and I wanted to investigate further to confirm.\nBut yes, apparently FOSJsRoutingBundle reads the expose option by its own (https://github.com/FriendsOfSymfony/FOSJsRoutingBundle/blob/master/Extractor/ExposedRoutesExtractor.php#L155), without the need FOSRestBundle. I couldn't replicate the issue.\nIf the feature is still needed for FOSRestBundle I can finish the PR.\n. Hi @lsmith77 \nseems that there are dependencies with ExprLang to run the tests. I can't see how to make test pass on my dev machine, tried installing exprlang but that didn't helped. How can I fix it?\nOn the other hand I'm having a weird bug wile adding a child element to the node for the options, it kills the machine, don't know why.\nOnce I get the tests fixed I'll try to solve that and add the annotations support.\nI hope to finish this PR before the end of the year.\nThanks!!\n. Hi @lsmith77 \nseems that there are dependencies with ExprLang to run the tests. I can't see how to make test pass on my dev machine, tried installing exprlang but that didn't helped. How can I fix it?\nOn the other hand I'm having a weird bug wile adding a child element to the node for the options, it kills the machine, don't know why.\nOnce I get the tests fixed I'll try to solve that and add the annotations support.\nI hope to finish this PR before the end of the year.\nThanks!!\n. Documentation update is needed?\n. Documentation update is needed?\n. Hi there!\nThanks @xabbuh, rebasing solved the issue. I've finished all the tests. The XML issue was strange and I solved it by splinting the collection of options and the addition to the node.\nThis last commit https://github.com/FriendsOfSymfony/FOSRestBundle/commit/33a200d84c1bb8822d41914692cfee1135c3ca9b made the test got a little worst in terms of code, but I'd have to refactor entirely and split that method in to 3 new ones.\nLet me know if I should update the docs.\n. Right, I missed that part. Can this be solved by using PrependExtensionInterface and pre pending the config?\n. ",
    "alexdominte": "Since I haven't seen this issue raised until now it may be something wrong in the way I use the Annotations & View Listeners.\nViewResponseListener class at line 88:\nif (null === $view->getStatusCode() && $configuration->getStatusCode()) {\n    $view->setStatusCode($configuration->getStatusCode());\n}\nIf I remove the first condition it should work, in this way if the configuration (annotation) has a statusCode set I assume it want to be imposed, disregarding the current status code of the view:\nif ($configuration->getStatusCode()) {\n    $view->setStatusCode($configuration->getStatusCode());\n}\nAgain, I'm not sure of my code or if I use correctly the annotation, but certainly it reaches these lines with the correct configuration, but my data gets wrapped as a View class of Rest so the statusCode will not be overwritten.\n. ",
    "mangelsnc": "This is embarrasing... you're right, I got a\n\"friendsofsymfony/rest-bundle\": \"*\",\nin my composer.json, now it works fine.\nThanks!\n. This is embarrasing... you're right, I got a\n\"friendsofsymfony/rest-bundle\": \"*\",\nin my composer.json, now it works fine.\nThanks!\n. ",
    "staabm": "What about also supporting 204 No Content? this is also frequently used in REST services (even if 201 is the prefered one)\n. ",
    "awildeep": "Keep in mind http://jsonapi.org/ is still a work in progress: \n\"This media type is still a work in progress, and we are extremely open to feedback and proposals for improvement. That said, implementation work has already begun, and we value good working systems over perfect vaporware.\"\nThat being said if this can be implemented properly, FOSRestBundle will truly help developers support Ember-data (Outside of this ticket the only active support I have seen is from the Ruby and Python communities).  \nI think two big keys here will be making the documentation, and keeping the implementation simple.  I've been attempting to implement something of my own, and failing miserably as of late.  I have high hopes for this however, and I am willing to try and help where ever I can (time permitting).\n. I've been going through the pains of trying to implement a simple one to many relationship.  Spent pretty much all day attempting to simulate the docs, and it is not as easy as it may seem.  There is an incredible amount of labor involved, and I fear I may end up writing a LOT of custom code.   I am struggling coming up with common code that could ease this pain yet.  I am open for suggestions, but at this point I fear this implementation is just not worth the effort given the current state of existing REST, Serializer, and HATEOS bundles.\n. As far as the read side goes; I am fairly sure that the ORM/ODM should have all the information it needs with the possible exception of the relationship data required to build the HATEOS links (HATEOS will know the relationship, but not the URL path to the target REST API).\nThis is the first time i've really looked at any of the internals for the REST bundle, so I am definitely working a bit uphill.\n. Personally I am all for dropping 2.1 support (All my apps are 2.3/2.4), but it would be nice to tag a last supported 2.1 version for those who have not upgraded.\n. ",
    "koemeet": "Also looking for something like this, I am currently working/trying on creating a bundle which follows the jsonapi spec using JMS Serializer. Currently trying to figure out how to add data to the top-level. Anybody also working on a solution to support jsonapi?\n. Thanks, I see they are already on it, will try to help them out. :)\n. @skqr Wow, looks good. But, why doesn't it integrate with JMS Serializer? A lot of people are using this when building there API's. Also when using this you are tight to use JSON API right? You cannot easily switch to XML or another format? The approach of HateoasBundle of @willdurand is very flexible (uses the JMS serializer also). What I like about your library is that you have sorting etc. automatically working when using Doctrine. Looks good overall, but I don't think it would integerate very well with popular existing bundles and projects.\n. @skqr Ah I've been there too. Here is a Gist of the serializer I wrote for JMS Serializer and the library of @willdurand. It supports linked resources, links etc. Not the whole json-api spec (but I don't need the whole spec, yet). https://gist.github.com/steffenbrem/ebfe0f07fe7b1df93b54. It is hacky in some sort, but it is still experimental for me.\nIt is currently optimized to work with Ember Data, but I try to follow JSON API as closely as possible.\nHere is a screenshot of an example response that my serializer creates:\n\nI don't know if this would help you ;) But I understand that you created your own solutions for this, you need a deeper understanding of the libraries before you can deal with the complex stuff JSON-API comes with.\nThat last thing you said, is very interesting haha. But I like how Ember data handles stuff. Easy to implement your JSON-API in it :+1: Good work man!\n. @skqr I am not so sure, JMS does a pretty good job on the serialization/deserialization part. Of course, you need to move the functionalities like sorting and including embedded resources with the include param somewhere else. But if you only support JSON-API, then your library simply rocks ;) \n@willdurand Sure, I was thinking about creating a PR for this library. I need to write proper tests for this and clean stuff a bit up. What do you think about functionality like include and sorting as @skqr described. Do you want something like this as a part of the Hateoas library. Currently I've implemented the sorting stuff using the ParamFetcher which provides auto documentation with NelmioApiDocBundle, which is nice. But I haven't given it much tought yet on how to create a reusable component for this in your Hateoas library.\nAlso my current implementation gets its relation (linked) key from the ClassTypeResolver, I simply camelcase the class name in there :P, does the job for me now. If you want to make this configurable we should look into abstracting the Hateoas some more as @Alabme describes in this PR.\n. @skqr I am not so sure, JMS does a pretty good job on the serialization/deserialization part. Of course, you need to move the functionalities like sorting and including embedded resources with the include param somewhere else. But if you only support JSON-API, then your library simply rocks ;) \n@willdurand Sure, I was thinking about creating a PR for this library. I need to write proper tests for this and clean stuff a bit up. What do you think about functionality like include and sorting as @skqr described. Do you want something like this as a part of the Hateoas library. Currently I've implemented the sorting stuff using the ParamFetcher which provides auto documentation with NelmioApiDocBundle, which is nice. But I haven't given it much tought yet on how to create a reusable component for this in your Hateoas library.\nAlso my current implementation gets its relation (linked) key from the ClassTypeResolver, I simply camelcase the class name in there :P, does the job for me now. If you want to make this configurable we should look into abstracting the Hateoas some more as @Alabme describes in this PR.\n. I am currently working on this, trying to get it out for public. I inspired most of it from the Hateoas bundle from willdurand. \nFor example, this is how you would configure the JSON-API serializer for your data models (later on it can also support XML of YAML, since I use jms/metadata to abstract the metadata):\n``` php\n/\n * @Hateoas\\Resource(type=\"posts\")\n \n * @author Steffen Brem steffenbrem@gmail.com\n/\nclass Post\n{\n    /\n     * @Hateoas\\Id\n     */\n    protected $id;\n/**\n * @var string\n */\nprotected $title;\n\n/**\n * @var string\n */\nprotected $description;\n\n/**\n * @Hateoas\\HasMany(includeByDefault=true)\n */\nprotected $comments;\n\n// ...\n\n}\n```\nWhat I am working on now is a seperate bundle, that will integrate with FOSRestBundle. I think that is the best approach for this. I hope I can make my work public soon :+1: \n. I am currently working on this, trying to get it out for public. I inspired most of it from the Hateoas bundle from willdurand. \nFor example, this is how you would configure the JSON-API serializer for your data models (later on it can also support XML of YAML, since I use jms/metadata to abstract the metadata):\n``` php\n/\n * @Hateoas\\Resource(type=\"posts\")\n \n * @author Steffen Brem steffenbrem@gmail.com\n/\nclass Post\n{\n    /\n     * @Hateoas\\Id\n     */\n    protected $id;\n/**\n * @var string\n */\nprotected $title;\n\n/**\n * @var string\n */\nprotected $description;\n\n/**\n * @Hateoas\\HasMany(includeByDefault=true)\n */\nprotected $comments;\n\n// ...\n\n}\n```\nWhat I am working on now is a seperate bundle, that will integrate with FOSRestBundle. I think that is the best approach for this. I hope I can make my work public soon :+1: \n. I am not sure though if it needs to be another HateoasBundle or if I should just use JsonApiBundle and make it only for JSON-API.\n. I am not sure though if it needs to be another HateoasBundle or if I should just use JsonApiBundle and make it only for JSON-API.\n. @szachara I will put something public today, for now I am only working with an AnnotationDriver. Currently I've got some basic JSON-API serialization going with FOSRestBundle. You can mix anything with it, as you can see is the title attribute of a post annotated with @JMS\\SerializedName(\"tiiitel\"), so you can still use JMS features in it. \nHere is a simple output from the serializer that I wrote of a basic Post > Comment relationship:\njson\n{\n    \"data\": [\n        {\n            \"type\": \"posts\",\n            \"id\": 1,\n            \"attributes\": {\n                \"tiiitel\": \"My post\",\n                \"description\": \"This is the first post\"\n            },\n            \"relationships\": {\n                \"comments\": {\n                    \"data\": [\n                        {\n                            \"type\": \"comments\",\n                            \"id\": 1\n                        }\n                    ]\n                }\n            }\n        },\n        {\n            \"type\": \"posts\",\n            \"id\": 2,\n            \"attributes\": {\n                \"tiiitel\": \"My second post\",\n                \"description\": \"This is the second post\"\n            },\n            \"relationships\": {\n                \"comments\": {\n                    \"data\": [\n                        {\n                            \"type\": \"comments\",\n                            \"id\": 1\n                        }\n                    ]\n                }\n            }\n        },\n        {\n            \"type\": \"posts\",\n            \"id\": 3,\n            \"attributes\": {\n                \"tiiitel\": \"My third post\",\n                \"description\": \"This is the third post\"\n            },\n            \"relationships\": {\n                \"comments\": {\n                    \"data\": []\n                }\n            }\n        }\n    ],\n    \"included\": [\n        {\n            \"type\": \"comments\",\n            \"id\": 1,\n            \"attributes\": {\n                \"title\": \"This is a comment title\",\n                \"body\": \"My body\"\n            }\n        }\n    ]\n}\n. If anyone wants to discuss about this topic, I created a public repo, which I will soon fill with my work that I have done. See: https://github.com/steffenbrem/JsonApiBundle\n. Use class reflection for this. Would be the best solution for this I think.\n. @xabbuh My oauth routes live inside /api, for now I solved it by removing the array normalization. But I am sure that more people stumble upon this issue.. ",
    "skqr": "@steffenbrem, it's your class that got me rolling :smile_cat: \n@willdurand's amazing post and projects too, obviously.\nI'd love to see how this PR progresses.\nKeep rocking, guys.\n. ",
    "steveklabnik": "Hey there! I just wanted to let you know that JSON API has hit RC3, and we'd like client libraries to start implementing it like it was 1.0, as a final check that we're good for 1.0. So hopefully that can inform the discussion here a bit.\nhttps://github.com/json-api/json-api/issues/484\n. ",
    "amenophis": "@lsmith77: I can start working on this, it is an interresting topic !\nHow can we start ?\n. @lsmith77: I can start working on this, it is an interresting topic !\nHow can we start ?\n. I just create 2 annotations (Since and Until) that I can use on METHOD. And into a kernel.controller event, I check if the called method is available for asked version into Accept Header, if not I throw a Exception (SinceException, UntilException).\nI can do a PR tonight when I will be at home :) \nDo you understand what I do ?\n. I'am not using this solution for the moment.\ni will take the time to use it asap.\n. @willdurand @lsmith77 I just have a try, i works.\nSo i think i detect a problem, the version is not extracted from the mediaType to the version request attribute.\nI take a look at: https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/EventListener%2FVersionListener.php#L55 and the $mediaType doesn't contain the version information ...\nI call my api with this accept header: application/vnd.my.app+json;version=1.0\nMy config looks like:\nyaml\nfos_rest:\n    disable_csrf_role: ROLE_CONTACT\n    param_fetcher_listener: force\n    format_listener:\n        media_type:\n            version_regex: '/(v|version)=(?P<version>[0-9\\.]+)/'\n        rules:\n            - { path: '^/api', priorities: ['application/json'], fallback_format: json, prefer_extension: false }\n            - { path: '^/', priorities: ['text/html', '*/*'], fallback_format: html, prefer_extension: false }\n    view:\n        mime_types:\n            json:\n                - application/vnd.my.app+json\n        view_response_listener: force\n        formats:\n            json: true\n        templating_formats:\n            html: true\n        force_redirects:\n            html: true\n        failed_validation: HTTP_BAD_REQUEST\n        default_engine: twig\nAm i missed something ?\n. I already tried it but i get this error : No matching accepted Response format could be determined (406 Not Acceptable)\n. @lsmith77 idea ?\n. @lsmith77 Do you see more what i'm doing ?\n. Hi @stof,\nThanks for your feedback !\nI've done some corrections based on your remarks !\nCould you review ?\n. @stof @lsmith77 Is it better like this ?\n. The idea I want to adress is, I want to expose methods only for version. I want to have the same application serve multiple version of the API.\nAnd, yes, if you declare 2 controller with an action with the same route, it do not work. But we don't need to have a same method in two controllers .\n. Yes, but in this case, the method you use the Until annotation, and you declare another method with a Since annotation. If you don't want to change the name of the method, you have to switch on the version inside the main method and route into Vx or Vy method\n. Yes, it could be better to handle the version inside the routing. Any idea on how to implement it ?\n. Yes, it could be better to handle the version inside the routing. Any idea on how to implement it ?\n. @lsmith77 Can you explain me more ? IRC ?\n. @lsmith77 Can you explain me more ? IRC ?\n. @lsmith77 OK ! thanks\n. @lsmith77 OK ! thanks\n. Can i do something ?\n. @lsmith77 I'm not sure about my rebase ... is it OK ?\n. @lsmith77 Done.\nDo i need to move the regex into configuration ? If yes, where ? Which key ?\n. thanks @lsmith77 \n. @lsmith77 How can i help ?\n. :+1: It works ! I got the version in the attributes !\nJust another question, why is needed to declare all the versions in the mime_type ?\n. OK i see, will wait :)\n. hi @lsmith77,\nany idea when you this PR will get merged ?\n. I have added a check before use the context. Is it OK ?\n. I do this in PHP as i'm not sure how to make the condition for serialization context argument. Can you say me more ?\n. @willdurand Do you know when this will be available into Negociation ? And usable into FOSRest ?\n. You know when ?\n. @willdurand, sorry, misunderstand ;)\n@lsmith77 I wiil take a look at home tonight. But i'm not sure about what i need to do ...\nIf you can explain more ?\n. Oups ! Done\n. Why this is not done in convertContext directly ?\n. ",
    "silverqx": "I have read whole json api spec now and it will not be as simple as it looks, there are many complicated scenarios and this spec is really extensive, but I hope we will have some implementation in near future, because I really like this new fresh spec. \n. I have read whole json api spec now and it will not be as simple as it looks, there are many complicated scenarios and this spec is really extensive, but I hope we will have some implementation in near future, because I really like this new fresh spec. \n. Hi, \nfrom my point of view this is the way which I would also went. I really like how the FOSRestBundle works. I think that the best name for your bundle would be JsonApiBundle and only one think which will do, will be to work with JSON API, by FOSRestBundle way. \nThis problem could be accomplished by so many ways. I prefer to use and extend the FOSRestBundle and to use and inspire by the HateoasBundle regarding the work with links. \nWhen you will have working bundle which will be compatible with JSON API v1, so you can work on better abstraction of the code and other enhancements. \nYou can use many code from Hateoas library, because there is really good code which handles links and mappings between entities and serialization ( through annotations ). \nThis is how I'm looking on this enhancement.\nAnd about this unassuming line:\n\nI hope I can make my work public soon :+1:\n\nI'm really impatient how it will be implemented. ;-) \n. Great start, I have not found any error in serialized output, already now it's valid JSON API output. Of course a links objects are missing, but when a relationships object contains data object ( resource linkage) , so links are optional. And I absolutely understand that this is the output of a development preview. \n\nYou can mix anything with it, as you can see is the title attribute of a post annotated with @JMS\\SerializedName(\"tiiitel\"), so you can still use JMS features in it.\n\nThis is very important. \n. :+1: \n. ",
    "esistgut": "Is anyone working on this? JSON API hit the 1.0 stable and Ember Data just pushed the first stable release using it.\n. Is anyone working on this? JSON API hit the 1.0 stable and Ember Data just pushed the first stable release using it.\n. ",
    "hglattergotz": "@lsmith77 After further reading your comments and the links you provided I think I understand the difference between the two \"null issues\" and it would indeed seem like there would have to be two settings for this.\nOne that allows no content to be returned in the view. This is what seems to be configurable with the following:\nyaml\nfos_rest:\n    view:\n        serialize_null:          false\nThe code provided in this issue configures the JMS serializer to serialize keys that have a null value (default behavior seems to be to drop keys with null values). However, it uses the above configuration setting that is intended for the other null issue (no content).\nWould it be ok to do something like this:\nyaml\nfos_rest:\n    serializer:\n        version:              ~\n        groups:               []\n        serialize_null:       false\n. Welcome!\n. ",
    "dunglas": "Another FOSRest + Backbone implementation: https://github.com/dunglas/DunglasTodoMVCBundle\n. I've just tried my sample app that uses JsonToFormDecoder with latest vendors and everything is OK: https://github.com/dunglas/DunglasTodoMVCBundle\n@nunojsferreira can you provide sample code to reproduce the problem?\n. This not a bug fix, just a small optimization: if this class is instantiated several times, this method can be shared between instances.\n. Feel free to close this PR if you think this optimization is not relevant.\n. This PR is useless. Sorry for the noise.\n. @lsmith77 I'm don't have time to work on this bug yet.\n. @munkie Why do you not extend https://github.com/schmittjoh/serializer/blob/master/src/JMS/Serializer/Handler/FormErrorHandler.php instead of writing a whole new handler?\n. This limitation only occurs when using the PATCH HTTP method with the JsonToFormDecoder:\n- If the HTTP method is set to PATCH, the Symfony Form Component only updates entity properties submitted by the user.\n- The component also assumes checkboxes behave like in application/x-www-form-urlencoded. To set its value to false, the data for this checkbox must be unset (it's what currently do JsonToFormDecoder). Or, as @meyerbaptiste noticed, set to null.\n- Actually, if JsonToFormDecoder is used together with the PATCH method, a checkbox cannot be set to false because the PATCH mode take precedence and the checkbox is ignored (because unseted).\nAs the role of JsonToFormDecoder is only converting JSON data to a format accepted by the Form Component, this PR can be simplified a lot: just change the current behavior to always set $value to null and remove the unset call. It will be much simpler and will work in all use cases.\n. What normalizer are you using? With GetSetMethodNormalizer the default behavior is not ignoring null values: https://gist.github.com/dunglas/6e6a99626ddb9ab3fee4\n(You can run the example script with Melody).\n. Hi @khalilst,\nTo run Melody you need the CURL PHP extension.\nAnyway, I'm just saying that the default configuration of the Symfony Serializer component doesn't ignore null values but I don't know if it's the behavior of FOSRest. @lsmith77 do you know if there is a special tweak regarding the serializer in FOSRest?\n. @lsmith77 why not. It would be cool if the Symfony Serializer become a first-class citizen in FOSRest but too busy to work on that right now.\nIf someone is interested to work on that, this error normalizer can be good example of how using new features of the serializer: https://github.com/dunglas/DunglasJsonLdApiBundle/blob/master/Serializer/ConstraintViolationListNormalizer.php\n. Yes the custom normalizer sounds like the appropriate solution.\nI've done it in API Platform for Hydra serialization, maybe can you just adapt it: https://github.com/dunglas/DunglasApiBundle/blob/master/Hydra/Serializer/ConstraintViolationListNormalizer.php\n. I've looked quickly but it looks good to me! Great work @Ener-Getick \n. It is better to not set the groups key when groups are not used (for forward compatibility).\n. ",
    "lukeman83": "I would to use Restful Api from native mobile apps. (without browser and cookie)\nI thought to authenticate users by wsse and give logged user in restcontroller.\nNow I have two problems:\n1)If I'm not logged the API don't respond.\n2)Which is the way to get logged user in RestController using wsse authentication?\n. I used a FOSRestBundleByExample https://github.com/sdiaz/FOSRestBundleByExample/blob/master/app/Resources/doc/index.md to integrate FOSRestBundle and MopaWSSEAuthenticationBundle.\nMy own security provider is done!\nBut I want to retrieve the logged user in a controller and I want to use the Api without classic login but with wsse authentication only.\n. Is this the right order?\n```\nfirewalls:\n        wsse_secured:\n            pattern:   ^/api/.*\n            stateless:    true\n            wsse:\n                nonce_dir: null\n                lifetime: 5184000\n                provider: fos_userbundle\n            anonymous:    true\n        main:\n            pattern: ^/\n            form_login:\n                provider: fos_userbundle\n                csrf_provider: form.csrf_provider\n                check_path: fos_user_security_check\n                login_path: fos_user_security_login\n                default_target_path: homepage\n            fos_facebook:\n                app_url: %facebookAppUrl%\n                server_url: %facebookServerUrl%\n                login_path: fos_user_security_login\n                check_path: _security_check\n                default_target_path: homepage\n                provider: my_fos_facebook_provider\n            logout:\n                handlers: [\"fos_facebook.logout_handler\"]\n            anonymous:    true\n            switch_user: true\n    oauth_token:\n        pattern:    ^/oauth/v2/token\n        security:   false\n\n    oauth_authorize:\n        pattern: ^/oauth/v2/auth \n        form_login:\n            provider: fos_userbundle\n            check_path: /oauth/v2/auth_login_check\n            login_path: /oauth/v2/auth_login\n        anonymous: true\n        pattern:    ^/oauth/v2/auth\n\n    api:\n        pattern:    ^/api\n        fos_oauth:  true\n        stateless:  true\n\n```\n. It is ok now?\n```\nfirewalls:\n        wsse_secured:\n            pattern:   ^/api/.*\n            stateless:    true\n            wsse:\n                nonce_dir: null\n                lifetime: 5184000\n                provider: fos_userbundle\n            anonymous:    true\n    oauth_token:\n        pattern:    ^/oauth/v2/token\n        security:   false\n\n    oauth_authorize:\n        pattern: ^/oauth/v2/auth \n        form_login:\n            provider: fos_userbundle\n        anonymous: true\n\n    api:\n        pattern:    ^/graph\n        fos_oauth:  true\n        stateless:  true\n\n    main:\n        pattern: ^/\n        form_login:\n            provider: fos_userbundle\n            csrf_provider: form.csrf_provider\n            check_path: fos_user_security_check\n            login_path: fos_user_security_login\n            default_target_path: homepage\n        fos_facebook:\n            app_url: %facebookAppUrl%\n            server_url: %facebookServerUrl%\n            login_path: fos_user_security_login\n            check_path: _security_check\n            default_target_path: homepage\n            provider: my_fos_facebook_provider\n        logout:\n            handlers: [\"fos_facebook.logout_handler\"]\n        anonymous:    true\n        switch_user: true\n\n``\n. Or I have to combinewsse_securedandapi` together?\n. I have not use oauth pattern yet.\nI think I can you whatever pattern I want in the future.\n. At the moment the RESPONSE is:\n403 Forbidden\nAnd this is my token creator controller:\n```\n/\n     * WSSE Token generation\n     \n     * @return FOSView\n     * @throws AccessDeniedException\n     * @ApiDoc()\n     /\n    public function postTokenCreateAction()\n    {\n    $view = FOSView::create();\n    $request = $this->getRequest();\n\n    $username = $request->get('_username');\n    $password = $request->get('_password');\n\n    //$csrfToken = $this->container->get('form.csrf_provider')->generateCsrfToken('authenticate');\n    //$data = array('csrf_token' => $csrfToken,);\n\n    $um = $this->get('fos_user.user_manager');\n    $user = $um->findUserByUsernameOrEmail($username);\n\n    if (!$user instanceof User) {\n        throw new AccessDeniedException(\"Wrong user\");\n    }\n\n    $created = date('c');\n    $nonce = substr(md5(uniqid('nonce_', true)), 0, 16);\n    $nonceHigh = base64_encode($nonce);\n    $passwordDigest = base64_encode(sha1($nonce . $created . $password . \"{\".$user->getSalt().\"}\", true));\n    $header = \"UsernameToken Username=\\\"{$username}\\\", PasswordDigest=\\\"{$passwordDigest}\\\", Nonce=\\\"{$nonceHigh}\\\", Created=\\\"{$created}\\\"\";\n    $view->setHeader(\"Authorization\", 'WSSE profile=\"UsernameToken\"');\n    $view->setHeader(\"X-WSSE\", \"UsernameToken Username=\\\"{$username}\\\", PasswordDigest=\\\"{$passwordDigest}\\\", Nonce=\\\"{$nonceHigh}\\\", Created=\\\"{$created}\\\"\");\n    $data = array('WSSE' => $header);\n    $view->setStatusCode(200)->setData($data);\n    return $view;\n}\n\n``\n. No it isn't.\nMaybe I need to inject thesecurity.contextservice in my controller.,\nWhich is the best way to do it?\n@stof what do you think about?\n. By the way...At the moment I have two problems:\n-I need the right way to inject thesecurity.contextservice in abovepostTokenCreateAction()`\n-When I try to use the api I receive 403 Forbidden Response\n. Can you show me an example please?\n. Ok, I will read the official docs.\nAnd what about 403 Forbidden Response?\n. Is this the right way to define my controller as a service and explicitly do the injection?\nwsse_security:\n        class: project\\MainBundle\\Controller\\Api\\projectApiSecurityController\n        arguments: [\"@security.context\"]\n```\n<?php \n/\n * This file is part of the FOSRestByExample package.\n \n * (c) Santiago Diaz santiago.diaz@me.com\n\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n \n/\nnamespace project\\MainBundle\\Controller\\Api;\nuse project\\UserBundle\\Entity\\User;\nuse Nelmio\\ApiDocBundle\\Annotation\\ApiDoc;\nuse FOS\\RestBundle\\Controller\\Annotations\\Prefix;\nuse FOS\\RestBundle\\Controller\\Annotations\\NamePrefix;\nuse FOS\\RestBundle\\View\\RouteRedirectView;\nuse FOS\\RestBundle\\View\\View AS FOSView;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Security\\Core\\Exception\\AccessDeniedException;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken;\nuse Symfony\\Component\\Security\\Core\\SecurityContextInterface;\n/\n * Controller that provides Restfuls security functions.\n \n * @Prefix(\"/security\")\n * @NamePrefix(\"project_securityrest_\")\n * @author Santiago Diaz santiago.diaz@me.com\n/\nclass projectApiSecurityController extends Controller\n{\n    protected $securityContext;\npublic function __construct(SecurityContextInterface $securityContext)\n{\n    $this->securityContext = $securityContext;\n}\n/**\n * WSSE Token generation\n *\n * @return FOSView\n * @throws AccessDeniedException\n * @ApiDoc()\n */\npublic function postTokenCreateAction()\n{\n\n    $view = FOSView::create();\n    $request = $this->getRequest();\n\n    $username = $request->get('_username');\n    $password = $request->get('_password');\n\n    //$csrfToken = $this->container->get('form.csrf_provider')->generateCsrfToken('authenticate');\n    //$data = array('csrf_token' => $csrfToken,);\n\n    $um = $this->get('fos_user.user_manager');\n    $user = $um->findUserByUsernameOrEmail($username);\n\n    if (!$user instanceof User) {\n        throw new AccessDeniedException(\"Wrong user\");\n    }\n\n    $created = date('c');\n    $nonce = substr(md5(uniqid('nonce_', true)), 0, 16);\n    $nonceHigh = base64_encode($nonce);\n    $passwordDigest = base64_encode(sha1($nonce . $created . $password . \"{\".$user->getSalt().\"}\", true));\n    $header = \"UsernameToken Username=\\\"{$username}\\\", PasswordDigest=\\\"{$passwordDigest}\\\", Nonce=\\\"{$nonceHigh}\\\", Created=\\\"{$created}\\\"\";\n    $view->setHeader(\"Authorization\", 'WSSE profile=\"UsernameToken\"');\n    $view->setHeader(\"X-WSSE\", \"UsernameToken Username=\\\"{$username}\\\", PasswordDigest=\\\"{$passwordDigest}\\\", Nonce=\\\"{$nonceHigh}\\\", Created=\\\"{$created}\\\"\");\n    $data = array('WSSE' => $header);\n    $view->setStatusCode(200)->setData($data);\n    return $view;\n}\n\n/\n     * WSSE Token Remove\n     \n     * @return FOSView\n     * @ApiDoc()\n     /\n    public function getTokenDestroyAction()\n    {\n        $view = FOSView::create();\n        $security = $this->get('security.context');\n        $token = new AnonymousToken(null, new User());\n        $security->setToken($token);\n        $this->get('session')->invalidate();\n        $view->setStatusCode(200)->setData('Logout successful');\n        return $view;\n    }\n}\n```\n. It doesn't work:\nCatchable Fatal Error: Argument 1 passed to project\\MainBundle\\Controller\\Api\\projectApiSecurityController::__construct() must be an instance of project\\MainBundle\\Controller\\Api\\Symfony\\Component\\Security\\Core\\SecurityContextInterface, none given, called in C:\\xampp\\htdocs\\project\\app\\cache\\dev\\jms_diextra\\controller_injectors\\projectMainBundleControllerApiprojectApiSecurityController.php on line 13 and defined in C:\\xampp\\htdocs\\project\\src\\project\\MainBundle\\Controller\\Api\\projectApiSecurityController.php line 40\n. Thanks!\nI read docs and my code is:\nmy routing.yml:\nmy_security:\n        class: project\\MainBundle\\Services\\MySecurity\n        arguments: [\"@security.context\"]\nmy Security class:\n```\nnamespace project\\MainBundle\\Services\\MySecurity;\nuse Symfony\\Component\\Security\\Core\\SecurityContextInterface;\nclass MySecurity\n{\n    protected $securityContext;\npublic function __construct(SecurityContextInterface $securityContext)\n{\n    $this->securityContext = $securityContext;\n}\n\n}\n```\nin my controller:\n```\n$user=$this->container->get('my_security')->getToken()->getUser();\n```\nthe error is:\nhe autoloader expected class \\\"project\\MainBundle\\Services\\MySecurity\\\" to be defined in file \\\"C:\\xampp\\htdocs\\project\\/src\\/\\project\\MainBundle\\Services\\MySecurity.php\\\". The file was found but the class was not in it, the class name or namespace probably has a typo.\n. Do you mean I need to use?\n$user=$this->container->get('security.context')->getToken()->getUser();\n. Ok,\nso I used it in my controller\n$user=$this->container->get('security.context')->getToken()->getUser();\n$id=$user->getId();\nbut the error is: \nCall to a member function getId() on a non-object\n. Ok....\nSo the last problem is authentication by wsse.\nI received 403 Forbidden Response.\n. Yes, but I don't understand what I need to change.\nmy security.yml is\n```\nimports:  \n    - { resource: facebookParameters.ini }\njms_security_extra:\n    secure_all_services: false\n    expressions: true\nsecurity:\n    providers:\n        my_fos_facebook_provider:\n            id: my.facebook.user          \n        fos_userbundle:\n            id: fos_user.user_manager\n    encoders:\n        FOS\\UserBundle\\Model\\UserInterface: sha512\n    firewalls:\n        wsse_secured:\n            pattern:   ^/api/.*\n            stateless:    true\n            wsse:\n                nonce_dir: null\n                lifetime: 5184000\n                provider: fos_userbundle\n            anonymous:    true\n    main:\n        pattern: ^/\n        form_login:\n            provider: fos_userbundle\n            csrf_provider: form.csrf_provider\n            check_path: fos_user_security_check\n            login_path: fos_user_security_login\n            default_target_path: homepage\n        fos_facebook:\n            app_url: %facebookAppUrl%\n            server_url: %facebookServerUrl%\n            login_path: fos_user_security_login\n            check_path: _security_check\n            default_target_path: homepage\n            provider: my_fos_facebook_provider\n        logout:\n            handlers: [\"fos_facebook.logout_handler\"]\n        anonymous:    true\n        switch_user: true\n\naccess_control:   \n    - { path: ^/$, role: IS_AUTHENTICATED_ANONYMOUSLY }\n    - { path: ^/mobile, role: IS_AUTHENTICATED_ANONYMOUSLY }\n    - { path: ^/login_api, role: IS_AUTHENTICATED_ANONYMOUSLY }\n    - { path: ^/api/, role: IS_AUTHENTICATED_ANONYMOUSLY }\n    - { path: ^/login, role: IS_AUTHENTICATED_ANONYMOUSLY }\n    - { path: ^/security, role: IS_AUTHENTICATED_ANONYMOUSLY }\n    - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }\n    - { path: ^/_, role: IS_AUTHENTICATED_ANONYMOUSLY }\n    - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }\n    - { path: ^/reset, role: IS_AUTHENTICATED_ANONYMOUSLY }\n    - { path: ^/send-email, role: IS_AUTHENTICATED_ANONYMOUSLY }\n    - { path: ^/.*, role: ROLE_USER }\n    - { path: ^/admin/, role: ROLE_ADMIN }\n\nrole_hierarchy:\n    ROLE_ADMIN:       ROLE_USER\n    ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]\n\n```\nmy config.yml is\n```\nimports:\n    - { resource: parameters.yml }\n    - { resource: security.yml }\n    - { resource: facebookParameters.ini }\n    - { resource: websiteParameters.ini }\nservices:\n    my.facebook.user:\n        class: project\\UserBundle\\Security\\User\\Provider\\FacebookProvider\n        arguments:\n            facebook: \"@fos_facebook.api\"\n            userManager: \"@fos_user.user_manager\"\n            validator: \"@validator\"\n            container: \"@service_container\" \n....\nframework:\n    #esi:             ~\n    translator:      { fallback: %locale% }\n    secret:          %secret%  \n    router:\n        resource: \"%kernel.root_dir%/config/routing.yml\"\n        strict_requirements: %kernel.debug%\n    form:            true\n    csrf_protection: true\n    validation:      { enable_annotations: true }\n    templating:      { engines: ['twig'] } #assets_version: SomeVersionScheme\n    default_locale:  %locale%\n    trust_proxy_headers: false # Should Request object should trust proxy headers (X_FORWARDED_FOR/HTTP_CLIENT_IP)\n    session:         ~        \n.....\nAssetic Configuration\nassetic:\n    debug:          %kernel.debug%\n    use_controller: false\n    bundles:        [ ]\n    #java: /usr/bin/java\n    filters:\n        cssrewrite: ~\n...\nfos_user:\n    db_driver: orm # other valid values are 'mongodb', 'couchdb' and 'propel'\n    firewall_name: wsse_secured #fos_secured\n    user_class: project\\UserBundle\\Entity\\User\n    registration:\n            form:\n                type: project_user_registration\n            confirmation:\n                enabled:    true\nfrom_email:\n    address:        %mailer_user%\n    sender_name:    %sender_name%\n\nfos_facebook:\n      file:   %kernel.root_dir%/../vendor/facebook/php-sdk/src/base_facebook.php\n      alias:  facebook\n      app_id: %facebookAppId%\n      secret: %facebookAppSecret%\n      cookie: true\n      permissions: [email, user_birthday, user_location, user_hometown, read_friendlists, user_relationships]   \njms_security_extra:\n    secure_all_services: false\n    enable_iddqd_attribute: false\n    expressions: true\nsensio_framework_extra:\n    router:  { annotations: true }\n    request: { converters: true }\n    view:    { annotations: false }  # More info at https://github.com/FriendsOfSymfony/FOSRestBundle/issues/95\n    cache:   { annotations: true }\njms_aop:\n    cache_dir: %kernel.cache_dir%/jms_aop\nfos_rest:\n    view:\n        view_response_listener: true\n        failed_validation: HTTP_BAD_REQUEST\n        default_engine: php\n        formats:\n            json: true\n            xml: true\n            rss: false\n    format_listener:\n        prefer_extension: true\n    body_listener:\n        decoders:\n            json: fos_rest.decoder.json\n    param_fetcher_listener: true\n    allowed_methods_listener: true\nMopa Rackspace Cloud Files configuration\nmopa_wsse_authentication:\n    provider_class: Mopa\\Bundle\\WSSEAuthenticationBundle\\Security\\Authentication\\Provider\\WsseAuthenticationProvider\n    listener_class: Mopa\\Bundle\\WSSEAuthenticationBundle\\Security\\Firewall\\WsseListener\n    factory_class: Mopa\\Bundle\\WSSEAuthenticationBundle\\Security\\Factory\\WsseFactory\n```\nI'm testing it with this Dev HTTP Client extension (https://chrome.google.com/webstore/detail/aejoelaoggembcahagimdiliamlcdmfm) and the Checking the Restful API section (of https://github.com/sdiaz/FOSRestBundleByExample/blob/master/app/Resources/doc/index.md)\n. Ok I changed firewall properties:\nfirewalls:\n        wsse_secured:\n            pattern:   ^/api/.*\n            stateless:    true\n            wsse:\n                nonce_dir: null\n                lifetime: 5184000\n                provider: fos_userbundle\n            anonymous:    false\nI try to use my api in this way:\nFirst I do a POST request:\nlocalhost/project/web/app_dev.php/security/token/create?_username=a@a.it&_password=aaa\nHEADERS:\nAccept            : application/json\nContent-Type : application/x-www-form-urlencoded\nI receive response 200 OK:\nBODY:\n{\n\"WSSE\":\"UsernameToken Username=\\\"a@a.it\\\", PasswordDigest=\\\"R82hdPWyV3PoTliW5O1aoSkKRZk=\\\", Nonce=\\\"YmUwZDVhNDliNzZiM2QzZA==\\\", Created=\\\"2013-05-23T07:57:03+02:00\\\"\"\n}\nAfter I call my api with a GET request:\nlocalhost/project/web/app_dev.php/api/something\nHEADERS:\nAuthorization    : WSSE profile=\"UsernameToken\"\nX-wsse           : UsernameToken Username=\\\"a@a.it\\\", PasswordDigest=\\\"R82hdPWyV3PoTliW5O1aoSkKRZk=\\\", Nonce=\\\"YmUwZDVhNDliNzZiM2QzZA==\\\", Created=\\\"2013-05-23T07:57:03+02:00\\\"\nACCEPT           : application/json\nI receive response 403 FORBIDDEN.\nWhat is the error?\n. Someone can help me please?\n. What do you mean?\n. I'm agree with you.\nI'm sorry!\nThis is a problem linked with rest API and for this reason I ask help here.\n. ",
    "Baachi": "@lukeman83 It is possible. You need to create your own security provider which authenticate the user over WSSE. Then you must configure the firewall to use you own security provider. Maybe one of this bundles can help you.\n. Retrieve the current user\nTo retrieve the current user then you must inject the security.context service in your controller. Now you can do this:\nphp\n$user = $context->getToken()->getUser();\nUse WSSE only\nMake sure your firewall is in the right order. The first firewall wich matched the request uri will be used (WSSE, Login, ...). If you want to disable the form login completly change the pattern option in security.yml. \n. @lukeman83 You changed the pattern from the api firewall in your second comment. What is now the right pattern, /graph or /api?\n. Is your app online or opensource?\n. Yes this is one method to inject the security.context.\n. @lukeman83 Yes.\n. Than you are not authenticated.\n. You haven't the required privileges to visit this site. Maybe you are not authenticated?\n. You can use this repository as documentation: https://github.com/pulse00/symfony-chaplin-demo\n. AFAIK the method getIdentifierValues return always an array. If it's not the case, you misconfigured your entity anyways.\n. This isn't php 5.3 compatible.\n. Same here\n. @lsmith77 I created a PR #1001 \n. ",
    "tystr": "@Fraktl is your question related specifically to FOSRestBundle's automatic route generation, or just to using multiple ParamConverters to convert 2 ids to 2 different entities? You can use a route parameter besides id to reference the entity's identifier, but it must be configured in the options for the param converter as described in the ParamConverter documentation.\n. Can you supply an example of how this isn't working? I am unable to reproduce this. It looks like the following line in the ViewHandler should be handling the problem you're describing correctly https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/View/ViewHandler.php#L278\n. It'd be nice to add a simple test case for this imo\n. @zefrog you could push something then force push it back to force the build again\n. Perhaps this issue should be opened on https://github.com/FriendsOfSymfony/FOSCommentBundle?\n. :+1: \n. :thumbsup: \n. I believe your json string is incorrect. It should be something like this:\nJSON\n{\"mood\": {\"emotions\": [{\"name\":\"anger\", \"value\":\"3\", \"sequence\":\"2\"}], \"score\":12}}\n. The packagist and poser urls should be .../FriendsOfSymfony/rest-bundle/*\n. If the POSTed body only contains \"2\", then that's not technically valid json. What happens if you POST [\"2\"]?\n. Hmm, looking at the spec at http://www.json.org/, it seems to indicate otherwise.\n. Indeed, you are correct as usual. I guess I was interpreting the \"JSON is built on two structures:\" bit of the spec too aggressively.\n. :thumbsup: \n. :thumbsup: \n. @hyyan Why do you need to use a form when deleting a resource?\n. @hyyan Why do you need to use a form when deleting a resource?\n. :+1: \n. :+1: \n. I suppose, although it will break if the configured serializer is not an instance of JMS\\Serializer\\SerializerInterface, as that is the typehint\n. hm indeed it would, although there's no common interface to typehint....\n. indeed...so what would you suggest we do here? I agree that there's no need to require jms serializer instead of the core serializer...\n. hmm...I guess I can remove the check since this is the current approach to handling the configured serializer\n. Hmm, yes, a note is a good idea. Also, i think ConstraintViolationListInterface instances should be ignored, same as Request and ParamFetcherInterface\n. ",
    "fpoirier1": "How do we fix this issue exactly ? I am using composer to manage libraries.\n. Well I don't no where to change it. The only part refering to sensio framework bundle is the framework-extra-bundle but its constraint is at 2.3.. It seems to me that it doesn't make sens to downgrade to 0.13....\nHere is a part of my composer.json :\n\n. Thanks! What you should I use to make sur that I always have the latest compatible version?\n. Thank you very much, it enlightens me a lot\n. ",
    "brunoroux": "Oops, my bad I really thought I was on FOSCommentBundle repo.\n. ",
    "kbsali": ":+1: \n. ",
    "bartoszrychlicki": "Awesome guys! Thank you so much! Houpfully I will have an occasion to get a round for that :-)\n@stof thanks for the tip about the format, I did found it wierd also ;-)\n. ",
    "Takeno": "Yes, my bad mistake. Url corrected in new commit\n. ",
    "afilina": "Thanks @flip111. I was searching for this solution on the Internet for the last few hours.\n. Thanks @flip111. I was searching for this solution on the Internet for the last few hours.\n. ",
    "MiljenkoR": "That is returned from\n$contentType = $request->headers->get('Content-Type');\non line 53. of BodyListener when you don't send content-type. Example was used from log that I was making.\nI will write patch and send pull request probably over weekend.\n. Hi, I don't know why i didn't finish this. I will have time next week to look at this, so @gou1 if you have time earlier feel free to do so.\n. ",
    "gou1": "Any news on this feature? Or maybe it was implemented another way?\n. That was a fast answer :+1: I will look into and submit a PR, thanks!\n. Oops i accidently deleted my previous comment :-1: \nIt was about splitting the listeners into separate pages with a common structure, keepning the current page for an overview of the listeners as discussed previously in this issue. It might also facilitate people submitting PRs to improve the doc.\nIt does take time to understand the documentation, and some information are hard to find ; i'm willing to help in this.\nExample of issue finding information: #923 \nI you want I can come up with a 1st example of such a page inspired from the work already done in this PR?\n. For such an edge-case, I think it would be clearer to have an explicit setting indeed.\nWouldn't the following be even clearer ( and/or more future-proof) ?\nfos_rest:\n    body_listener:\n        default_format: json\n. I tested it in my app, it doesn't work. Fixing it now.\n. Now it works, and I do have the following behaviour:\n- If there's only body_listener: ~, I have an Error when trying to POST a (f.e.) json payload without a Content-Type header.\n- If i set the default format to json, I can successfully post a JSON payload without a Content-Type header.\n. Ok, thanks for the response!\n. ",
    "robertdolca": "It works.\n. It works.\n. Yes. I am in a dev env (app_dev.php). I do not know what intercept_redirects is. I can find it in 'Full default configuration' list.\n. Yes. I am in a dev env (app_dev.php). I do not know what intercept_redirects is. I can find it in 'Full default configuration' list.\n. intercept_redirects is set to false. I tried on a prod env and it does the same thing. The only way I managed to make it work is \"Accept: application/json\". Adding .json at the end of the URL does not work for DELETE requests with redirect. \n. intercept_redirects is set to false. I tried on a prod env and it does the same thing. The only way I managed to make it work is \"Accept: application/json\". Adding .json at the end of the URL does not work for DELETE requests with redirect. \n. ",
    "bburnichon": "Got the exact same issue. It happens when I set status code to Codes::HTTP_NO_CONTENT (following a successful PUT request, no entity created so I do not want a Codes::HTTP_CREATED to be returned)\nI traced with xdebug until the end of script and response seems correct. I see in the profiler a 204 response but apache gives a 302 and I have an infinite loop\n. @stof Ok, I was not aware of this Location header requirement.\nSo now, what's the correct way for FOSRestBundle to handle successful PUT requests? I mean, when using templating format like 'html', you wish to redirect to the entity view. If it is a web service, you wish to have a 204 response with no redirect.\nI was expecting something like:\nphp\n  return $this->routeRedirectView('get_entity', compact('id'), Codes::HTTP_NO_CONTENT);\nbut ended up to code like below:\nphp\nif ($this->get('fos_rest.view_handler')->isFormatTemplating($request->getRequestFormat())) {\n  return $this->routeRedirectView('get_entity', compact('id'), Codes::HTTP_NO_CONTENT);\n} else {\n  return $this->view(null, Codes::HTTP_NO_CONTENT);\n}\n. ",
    "bes89": "i just installed the bundle (v1.3.1) and saw this error.\nthe install should not fail that way. if the serializer ts an optional dependency the bundle should work without it!\nplease reopen\n. i just installed the bundle (v1.3.1) and saw this error.\nthe install should not fail that way. if the serializer ts an optional dependency the bundle should work without it!\nplease reopen\n. Thank you for the link but it wasn't that helpfull.\nI found the solution here:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/390#issuecomment-15029822\nThe serializer is not optional and thatswhy it has be mentioned in the docs.\n. ",
    "TheBabaYaga": "Ok, never mind!\n. Ok, never mind!\n. ",
    "suncat2000": "Sorry, I was not available... \nI had this problem when I configure of rest routing in multiple levels of nesting...\nExample:\n```\nrouting.yml\nrest:\n    type: rest\n    resource: \"routing_rest.yml\"\n    prefix: /api\n```\n```\nrouting_rest.yml\nmy_bundle:\n    type: rest\n    resource: \"@MyBundle/Resources/config/routing_rest.xml\"\n```\n```\nMyBundle/Resources/config/routing_rest.xml\nrest_foo:\n    type: rest\n    resource: \"MyBundle:REST/Foo\"\n    name_prefix: \"rest_foo_\"\nrest_bar:\n    type: rest\n    resource: \"MyBundle:REST/Bar\"\n    name_prefix: \"rest_bar_\"\n```\n. Ok I will try to add in the near future\n. ",
    "emgiezet": "Ok I managed with this by implementing a interface for my controller ClassResourceInterface\n. Look at the error log in apache. It seems that you have:\nformat_listener:\n    default_priorities:\n        - json\n        - xml\n        - html\n    prefer_extension: true\nremove it and it will be fine.\nThis is related to:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/commit/faaa682c8b47aee0b6175a4766b8d07d35c9a20c\n. ",
    "aferrandini": "I don't know why, after Commit \"use willdurand/negotiation\" 1bd4dbbc18b17cbf74b16815c8c7588892c86e9c\nAll the app breaks showing the error above.\n. Hi @willdurand, \nI don't know why the FOSRestBundle handles the request/response, this controller is not configured with type: rest\nThose are the response headers:\nRequest URL:http://app.local/login\nRequest Method:GET\nStatus Code:200 OK\nRequest Headersview source\nAccept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Encoding:gzip,deflate,sdch\nAccept-Language:es-ES,es;q=0.8\nCache-Control:no-cache\nConnection:keep-alive\nCookie:PHPSESSID=m9f1ljqtf3g8sr58udqm54t6k4\nHost:md3.local\nPragma:no-cache\nUser-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.71 Safari/537.36\nResponse Headersview source\nCache-Control:no-cache\nConnection:Keep-Alive\nContent-Type:text/xml; charset=UTF-8\nDate:Mon, 29 Jul 2013 18:36:01 GMT\nKeep-Alive:timeout=5, max=100\nServer:Apache/2.2.22 (Unix) DAV/2 PHP/5.5.0 mod_ssl/2.2.22 OpenSSL/0.9.8x\nTransfer-Encoding:chunked\nX-Powered-By:PHP/5.5.0\nThis is the response text:\nxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<result>\n  <entry xsi:nil=\"true\"/>\n  <entry xsi:nil=\"true\"/>\n</result>\nThis is the routing.yml configuration for the Controller::Action executed\nyaml\nfront:\n    resource: \"@FerrandiniFrontendBundle/Controller/\"\n    type:     annotation\n    prefix:   /\nAnd this is my FOSRestBundle configuration\n``` yml\nfos_rest:\n    routing_loader:\n        default_format: \"json\"\n        include_format: true\nview:\n    view_response_listener: 'force'\n    formats:\n        json: true\n        xml: true\n        html: false\n\nservice:\n    router:       router\n    templating:   templating\n    serializer:   jms_serializer.serializer\n    view_handler: fos_rest.view_handler.default\n\nparam_fetcher_listener:  true\n\nformat_listener:\n    prefer_extension: true\n    default_priorities: ['json', 'xml', */*]\n    fallback_format: 'json'\n\nbody_converter:\n    enabled: true\n\n```\n. What makes me think that it's that it was working correctly until commit 1bd4dbb, I test to checkout the previous commit and it starts working again.\n. @lsmith77  @willdurand \nProfiler shows this:\nWhy is the paramFetcher executed? This Controller is not configured as Rest.\n\n. @lsmith77 I'm using:\n\"jms/serializer-bundle\": \"0.12.@dev\"\n. The problem it's that I cannot use an older version of Serializer, because FOSRestBundle requires Serializer 0.12..\nIf I use the last version of Serializer, and the commit 1bd4dbb of FOSRestBundle, it works correctly.\n:S\n. The last commit that works with All versions of Serializer is 4c573ca06686134a11388d2de55633db0e123e2e, after this commit, it doesn't work.\nSorry, I'm dizzzying you :S\n. I'll check this tomorrow with an empty project... I don't know what's happening with this, and I'm getting crazy jaja\nEnviado desde mi iPhone\nEl 29/07/2013, a las 23:02, Lukas Kahwe Smith notifications@github.com escribi\u00f3:\n\ni might be too dense .. but there was no change in the serializer requirements .. so I do not understand your comment \"The problem it's that I cannot use an older version of Serializer, because FOSRestBundle requires Serializer 0.12.*.\" how is that then relevant at all?\nat any rate .. i am sorry but i dont have any more time for this .. please debug this on your own. my hint was do not assume it must be FOSRestBundle if you also changed other libs/Bundles when you updated the code. maybe this top is relevant .. maybe it isnt .. i still do not understand what you actually update when you get to the failing state.\n\u2014\nReply to this email directly or view it on GitHub.\n. @lsmith77 @willdurand I tested in an empty project, and the problem was on my fos-rest-bundle configuration.\n\nIf you don't add html as format_listener.default_priorities, then the Bundle tries to render the view with one of the other options.\nBefore update, I remember that if I add the html format, the API didn't work as spected but now it works :D\n``` yaml\napp/config/config.yml\nfos_rest:\n    ....\n    format_listener:\n        prefer_extension: true\n        default_priorities: ['json', 'html', 'xml', /]\n        fallback_format: 'json'\n    ....\n```\n. ",
    "birko": "Oww thank you. did forget about that. I found my error. something stupid. I switched accidentally parameter values in url\n. ",
    "nick4fake": "But I meant not 1.0.0, just current stable tag (0.13)\n. @lsmith77 So when do you plan to add 0.13 tag?\n. @lsmith77 So when do you plan to add 0.13 tag?\n. Thanks a lot!\n. Thanks a lot!\n. ",
    "Tjorriemorrie": "My problem might be related. Any help will be greatly appreciated!\nSince upgrading to 2.3.2\nstackoverflow\n. \n. I managed to resolve mine by setting the listener to false:\nstackoverflow updated\n. ",
    "priestor": "Hello, sorry for the delay.\nIt was a realy urgent issue in my case. I had to use a backup of an old stage and just updated the serializer packages. So it runs again as it should.\nBut the issue is still there. What excacly do you mean by \"_format is not handled\"?\nGreetings\n. Hi I'm sorry could not find some time to set up a playground with the state of the issue. I'm trying but the days still have only 24h :)\n. Hi I'm sorry could not find some time to set up a playground with the state of the issue. I'm trying but the days still have only 24h :)\n. ",
    "naroga": "@stof how would one add a SerializationContext without JMS/Serializer? I'm using the default Symfony serializer (since the JMS is released under the Apache license and I can't use in my project), and I can't seem to find a way to exclude a property from being serialized.\n. Thank you, @lsmith77.\nI've disabled JMS/Serializer and enabled the Symfony Serializer instead. It works as intended now.\n. ",
    "chadyred": "No it's simple like this : \ninclude this class in the class : \n\n    use FOS\\RestBundle\\Context\\Context;\n\nand in you action\n\n            $context = new Context();\n            $context->addGroup('article');\n            $view = $this->view($data, 200);\n             $view->setContext($context);\n\n. ",
    "Yuav": "http://cdivilly.wordpress.com/2014/03/11/why-trailing-slashes-on-uris-are-important/\nI also wanted to prototype my REST API with https://github.com/jpillora/jquery.rest, but it seems like I'm not able to do that out of the box..\n. ",
    "Airborn22": "Hi @lsmith77,\nAre there any updates on this issue? I ran into the same problems as the others above :)\nThank you,\nAlex\n. ",
    "fieg": "Got the documentation covered, the test(s) will have to wait till I get back at my home computer.\n. @lsmith77 I looked at how to test this, expecting I could use a similar test for the serializerGroups thingy, but there no test for that either (see PR #276). I'm still not sure how to test this, perhaps you, or someone else, can give a hand?\n. @lsmith77 I added the test, can you review and merge this?\n. ",
    "agemmell": "Ping again!  I'd love this serializer feature to be available via the View annotation.  Looking forward to the test being added so I can get this.  Thanks @fieg!\n. Ha! I was afraid someone might come back with the old \"PR are welcome\" reply!  I've not done this before but I guess there's a first time for everything.  Let's see how soon I can do this...\n. ",
    "ckdarby": "I forgot to wrap the curl get url in quotes. Bash was using the & to run it in the background instead of it having it apart of the url.\nThanks for the fast reply though.\n. I forgot to wrap the curl get url in quotes. Bash was using the & to run it in the background instead of it having it apart of the url.\nThanks for the fast reply though.\n. ",
    "SelrahcD": "Sorry.\nDo I have to make one ?\n. The answer seems good to me.\nClose ?\n. ",
    "k0pernikus": "I just hit the same issue in symfony2.4 while setting up FOSRestBundle and JMSSerializerBundle using groups\nIf I allow all the properties to be exposed, everything works fine. If I expose an ArrayCollection of an entity via a groups, suddenly this error appears using php55.\nDowngrading to php54 solved this issue for me for now.\n. ",
    "michalkvasnicak": "same here with symfony 2.4 and PHP 5.5.8\n. same here with symfony 2.4 and PHP 5.5.8\n. ",
    "yellow1912": "same issue with Symfony 2.4, weird. PHP 5.5+, issue starts happening after using groups\nI posted an issue here: https://github.com/schmittjoh/serializer/issues/230 as it seems to be jms bundle' issue instead.\n. I'm very sorry to post this here, but I searched high and low for a solution for this exact issue as well. @jdewit have you got it sorted out yet? Please let me know.\n. ",
    "jhkchan": "same here with symfony 2.3 and php 5.5\n. ",
    "konradpodgorski": "@lsmith77 I must disagree with you, they are not optional right now, so why not add them to production dependencies\nRight now you cannot even run tests without them. require-dev should contains dependencies that are required to run tests but not actually dependencies that are required for bundle to work.\n. ",
    "edmondscommerce": "I've found that passing in invalid JSON will fail silently which could explain this.\nI would prefer it if an application/json request receives invalid JSON then the decoder throws an exception or something to make it clear to the user (and developer) why this request is not working\nI've made a pull request to have an exception thrown instead which works well for me but if there is a better solution that would be great\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/590\n. Noticed your testing with PATCH\nare you running an up to date version of Symony including this:\nhttps://github.com/symfony/symfony/pull/7849\n. Noticed your testing with PATCH\nare you running an up to date version of Symony including this:\nhttps://github.com/symfony/symfony/pull/7849\n. I have found that the form needs to be created with the method explicitly set to PATCH, I'm doing it like this:\n$method=$request->getMethod();\n  $editForm = $this->createEditForm($entity, $method);\nprivate function createEditForm(Entity $entity, $method='PUT')\n    {\n        if(!in_array($method, array('PUT', 'PATCH'))){\n            throw new Exception('invalid method');\n        }\n        $form = $this->createForm(\n            new EntityType(),\n            $entity,\n            array(\n                'action' => $this->generateUrl('entity_update', array('id' => $entity->getId())),\n                'method' => $method,\n            )\n        );\n. Apologies I'm a bit of a symfony noob so still finding my way\n. I think tests should all pass now\nHappy to add documentation but not sure what you would like me to do?\n. I think tests should all pass now\nHappy to add documentation but not sure what you would like me to do?\n. would be nice if this contrib makes it in and i can stop using my fork :)\nlet me know if there is anything else I can do to help\n. ",
    "lngphp": "I have similar issue using handleRequest().\nMy headers include:\nAccept: application/json\nContent-Type: application/json; charset=utf-8\nbut $form->isValid() is false and in this case I return array('form' => $form).\nHTTP Status is 200 and Response body is this:\n{\n    \"children\": {\n        \"expire_account\": [], \n        \"status_id\": []\n    }\n}\nIf I change handleRequest() back to bind(), it works as expected - HTTP Status 400 if some parameters are missing.\nI test it with such command:\nhttp -v PATCH http://symfony/app_dev.php/api/user/ABC \\\n    users:='{\"status_id\":1, \"expire_account\": \"2010-11-27 16:28:14\"}'\n. I have similar issue using handleRequest().\nMy headers include:\nAccept: application/json\nContent-Type: application/json; charset=utf-8\nbut $form->isValid() is false and in this case I return array('form' => $form).\nHTTP Status is 200 and Response body is this:\n{\n    \"children\": {\n        \"expire_account\": [], \n        \"status_id\": []\n    }\n}\nIf I change handleRequest() back to bind(), it works as expected - HTTP Status 400 if some parameters are missing.\nI test it with such command:\nhttp -v PATCH http://symfony/app_dev.php/api/user/ABC \\\n    users:='{\"status_id\":1, \"expire_account\": \"2010-11-27 16:28:14\"}'\n. Oh, I see! Thanks a lot for your help!\n. This conf suits my needs - I can use file extension instead of Accept header:\nfos_rest:\n        view:\n            view_response_listener: true\nIs it correct?\n. @stof, which config is invalid? I just haven't imported HttpException deliberately to see what happens. ExceptionController works well for other errors, like when I produce warning calling file() with no arguments.\nDo you have an idea on how to fix it?\n. I see. Thank you!\n. ",
    "liuggio": "@lngphp \nplease could you tell me what's the return value of the form::getName?\n. @samsamm777  doesn't reply since July, for me this could be closed.\n. @samsamm777  doesn't reply since July, for me this could be closed.\n. Thanks ok, I thought this bundle provides a sort of aliasing in order to improve the name of the controller my bad.\n. The test are still broken :(\n. The test are still broken :(\n. I think is better to revert this.\n. I think is better to revert this.\n. This works to me (or maybe I'm missing something)?\nWas the name of the form?\n@richardpi could be closed?\n. I think this could be closed.\n. In leaphly we have used different routes (because the forms could be totally different).\nBut I was thinking about associating a set of  forms to a specific ROLE, so implementing a simple strategy pattern'd be easy to get the correct form given the correct ROLE.\nI think this could be a good approach...\n. In leaphly we have used different routes (because the forms could be totally different).\nBut I was thinking about associating a set of  forms to a specific ROLE, so implementing a simple strategy pattern'd be easy to get the correct form given the correct ROLE.\nI think this could be a good approach...\n. Closed thanks Lukas.  IMHO I think that is better use different form for different route.\n. Closed thanks Lukas.  IMHO I think that is better use different form for different route.\n. @skripted  why not a form for each use case?\n. I don't think.\n. @ogimenezb \nThanks to the Exp.Lang. is possible to satisfy the #610 as well.\n\nto automatically parse the version with JMS\n\nbut JMS is a namespace and a guy, and if are you talking about serializer I don't get.\nIf append version to the controller means injecting I don't like this idea, an objective could be have different controller for different API version.\n. @ogimenezb \nThanks to the Exp.Lang. is possible to satisfy the #610 as well.\n\nto automatically parse the version with JMS\n\nbut JMS is a namespace and a guy, and if are you talking about serializer I don't get.\nIf append version to the controller means injecting I don't like this idea, an objective could be have different controller for different API version.\n. Simple but i see two limitations:\nFirst is that the versions of the API are not a precise number but it maybe happen something like >1 <2\nand also you are coupling controller name with routes name and I don't like it so much.\n. ",
    "wuestkamp": "@lngphp \ndoes your actions Method match the one specified in the form? That solved my issue which seemed to be same as yours!\n. @lngphp \ndoes your actions Method match the one specified in the form? That solved my issue which seemed to be same as yours!\n. @HamidDarash same here, how did you solve?\n. @HamidDarash same here, how did you solve?\n. ",
    "bichotll": "Just cause I was also looking for a solution:\nhttps://github.com/schmittjoh/JMSSerializerBundle/issues/380#issuecomment-68520209\n. ",
    "lucasgranberg": "Just as reference. If you use knp paginator and jmsserializer this solution works: http://stackoverflow.com/questions/27214339/jms-serializer-ignores-mappings-for-knp-paginator\n. ",
    "mamartins": "any news on this?\n. apparently it is correctly configured, on it.\n. ",
    "oleg-andreyev": "@mvrhov +1\n. :+1: for 1.0.*\nP.S. I haven't been following composer doc for along time, so 1.0.*, is more intuitive for me\n. Shouldn't format listener be before RouterListener? Currently it has also 32-priority click here\nAfter upgrading till 1.4.2 this scenario is failing with ResourceNotFoundException instead of NotAcceptableHttpException, because format is determined after RouterListener\nScenario: Sending un-supported version\n    Given I send \"GET\" request to \"/api/0.3/brands\"\n    And response status should be \"406\"\n    And response should contain \"[code]\" and should be \"406\"\n    And response should contain \"[status]\" and should be \"Not Acceptable\"\nConfigs:\nfos_rest:\n...\n    format_listener:\n        rules:\n            -\n                path: '^/api/(0.1|0.2)' #api\n                priorities: [json, html]\n                fallback_format: json\n            -\n                path: '^/(?!api/)|(/api/doc)' #urls\n                priorities: [html, json]\n                prefer_extension: false\n        media_type:\n            version_regex: '{/api/(?P<version>[0-9\\.]+)/}'\n. Shouldn't format listener be before RouterListener? Currently it has also 32-priority click here\nAfter upgrading till 1.4.2 this scenario is failing with ResourceNotFoundException instead of NotAcceptableHttpException, because format is determined after RouterListener\nScenario: Sending un-supported version\n    Given I send \"GET\" request to \"/api/0.3/brands\"\n    And response status should be \"406\"\n    And response should contain \"[code]\" and should be \"406\"\n    And response should contain \"[status]\" and should be \"Not Acceptable\"\nConfigs:\nfos_rest:\n...\n    format_listener:\n        rules:\n            -\n                path: '^/api/(0.1|0.2)' #api\n                priorities: [json, html]\n                fallback_format: json\n            -\n                path: '^/(?!api/)|(/api/doc)' #urls\n                priorities: [html, json]\n                prefer_extension: false\n        media_type:\n            version_regex: '{/api/(?P<version>[0-9\\.]+)/}'\n. I don't how for others, but for me this line is associating with WAT. IMO in_array will be more readable\n. Well according to RFC2616#section-14.30, Location header should be used for 201(about 202 I'm not sure) responses and 3xx responses, but not all 2xx responses\nI'm :-1:  with this PR :)\n. Be aware that @lsmith77 has merged FOS\\Rest into FOSRestBundle\n. Where is the implementation of canHaveBody? or I'm missing something\nPHP Fatal error:  Call to undefined method FOS\\Rest\\Util\\Codes::canHaveBody() in /home/travis/build/FriendsOfSymfony/FOSRestBundle/View/View.php on line 474\n. default of this argument should be true and remove null from docblock\n. should be with default value, probably false\n. AFAICS, redirectWithBody is used only once in if (null !== $view->getData() && $view->redirectWithBody()), so NULL will be casted into boolean false. I'm not very sure that we should have 3 states.\n. ",
    "webda2l": "FYI, just found https://github.com/TheBigBrainsCompany/TbbcRestUtilBundle with an example of a FormErrorException exception in their Readme in a bit different syntax\n. @benjamindulau Yes I have already noticed your bundle https://github.com/FriendsOfSymfony/FOSRestBundle/pull/544#issuecomment-23678877\n. @benjamindulau Yes I have already noticed your bundle https://github.com/FriendsOfSymfony/FOSRestBundle/pull/544#issuecomment-23678877\n. ",
    "benjamindulau": "Maybe too late, but we implemented something about rest errors handling here:\nhttps://github.com/TheBigBrainsCompany/rest-util\nhttps://github.com/TheBigBrainsCompany/TbbcRestUtilBundle \nWe were not aware of this PR, but maybe you can find something interesting in our approach.\n. @webda2l Ha indeed, I missed it sorry ;-)\n. ",
    "jaugustin": "@AlmogBaku there is a regession in sf 2.3.4 and rendering error in json format check with sf 2.3.3\n. @AlmogBaku there is a regession in sf 2.3.4 and rendering error in json format check with sf 2.3.3\n. ",
    "hidabe": "Hello, it should fix \"You have requested a non-existent service \"fos_rest.templating\" error?\nI found it in Symfony 2.3.3 and Symfony 2.3.4, i will try others versions...\n. Hello, it should fix \"You have requested a non-existent service \"fos_rest.templating\" error?\nI found it in Symfony 2.3.3 and Symfony 2.3.4, i will try others versions...\n. I dont thing it,\nI have tried Symfony 2.3.3 and it dont work: \nYou have requested a non-existent service \"fos_rest.templating\" again,\n. I dont thing it,\nI have tried Symfony 2.3.3 and it dont work: \nYou have requested a non-existent service \"fos_rest.templating\" again,\n. My configuration:\n``` yaml\nimports:\n    - { resource: parameters.yml }\n    - { resource: security.yml }\n    - { resource: \"../../vendor/sopinet/userbundle/Sopinet/UserBundle/Resources/config/config.yml\" }\nframework:\n    #esi:             ~\n    translator:      { fallback: \"%locale%\" }\n    secret:          \"%secret%\"\n    router:\n        resource: \"%kernel.root_dir%/config/routing.yml\"\n        strict_requirements: \"%kernel.debug%\"\n    form:            true\n    csrf_protection: true\n    validation:      { enable_annotations: true }\n    templating:      { engines: ['twig'] } #assets_version: SomeVersionScheme\n    default_locale:  \"%locale%\"\n    trusted_proxies: ~\n    session:         ~\n    default_locale: %locale%\nsensio_framework_extra:\n    view:\n        annotations: false    \nsopinet_bootstrap_extend:\n    include: [ jcrop, image-gallery, xeditable, font-awesome, jqueryform, datepicker, easy-pie-chart, jquery-flot, fuelux-wizard, jquery-mask, jquery-validate, jquery-collagePlus ]\nTwig Configuration\ntwig:\n    debug:            \"%kernel.debug%\"\n    strict_variables: \"%kernel.debug%\"\n    form:\n        resources:\n           - 'A2lixTranslationFormBundle::form.html.twig'\n    globals:\n      prev_label: \"<\"\n      next_label: \">\"\n      first_label: \"<<\"\n      last_label: \">>\"\n      base_url: %base_url%\nAssetic Configuration\nassetic:\n    debug:          \"%kernel.debug%\"\n    use_controller: false\n    bundles:        [ SusPasitosFrontBundle, SopinetTemplateAceBundle, FOSUserBundle, SopinetBootstrapExtendBundle ]\n    #java: /usr/bin/java\n    filters:\n        lessphp:\n            file: %kernel.root_dir%/../vendor/leafo/lessphp/lessc.inc.php\n            apply_to: \".less$\"\n        cssrewrite: ~\n        yui_css:\n            jar: \"%kernel.root_dir%/Resources/java/yuicompressor-2.4.2.jar\"\n        yui_js:\n            jar: \"%kernel.root_dir%/Resources/java/yuicompressor-2.4.2.jar\"        \nDoctrine Configuration\ndoctrine:\n    dbal:\n        driver:   \"%database_driver%\"\n        host:     \"%database_host%\"\n        port:     \"%database_port%\"\n        dbname:   \"%database_name%\"\n        user:     \"%database_user%\"\n        password: \"%database_password%\"\n        charset:  UTF8\n        types:\n            json: Sonata\\Doctrine\\Types\\JsonType\norm:\n    auto_generate_proxy_classes: \"%kernel.debug%\"\n    entity_managers:\n        default:\n            auto_mapping: true\n            mappings:\n                gedmo_translatable:\n                    type: annotation\n                    prefix: Gedmo\\Translatable\\Entity\n                    dir: \"%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Translatable/Entity\"\n                    alias: GedmoTranslatable # this one is optional and will default to the name set for the mapping\n                    is_bundle: false\n                gedmo_translator:\n                    type: annotation\n                    prefix: Gedmo\\Translator\\Entity\n                    dir: \"%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Translator/Entity\"\n                    alias: GedmoTranslator # this one is optional and will default to the name set for the mapping\n                    is_bundle: false\n\nstof_doctrine_extensions:\n    default_locale: %locale%\n    translation_fallback: true  \n    orm:\n        default:\n            translatable: true\n    uploadable:\n        validate_writable_directory: true\na2lix_translation_form:\n    locales: [en]       # [1]\n    default_required: false      # [2] default true\n    manager_registry: doctrine      # [3]\n    templating: \"A2lixTranslationFormBundle::default.html.twig\"      # [4]\nSwiftmailer Configuration\nSwiftmailer Configuration\nswiftmailer:\n    transport: %mailer_transport%\n    host:      smtp.gmail.com\n    port:      465\n    username:  %mailer_user%\n    password:  %mailer_password%\n    spool:\n        type:                 file\n        path:                 \"%kernel.cache_dir%/swiftmailer/spool\"\napp/config/config.yml\nsonata_block:\n    default_contexts: [cms]\n    blocks:\n        sonata.admin.block.admin_list:\n            contexts:   [admin]\n        sonata.block.service.text:\n        sonata.block.service.action:\n        sonata.block.service.rss:\n        sonata.block.service.tableinput:\nsonata_admin:\n    title:      Questforme - AdminPanel\n    templates:\n        ## default global templates\n        layout:  SonataAdminBundle::standard_layout.html.twig\n        ajax:    SonataAdminBundle::ajax_layout.html.twig\n    ## default actions templates, should extend a global templates\n    list:    SonataAdminBundle:CRUD:list.html.twig\n    show:    SonataAdminBundle:CRUD:show.html.twig\n    edit:    SonataAdminBundle:CRUD:edit.html.twig\n\ndashboard:\n    blocks:\n        - { position: left, type: sonata.block.service.text, settings: { content: \"<h2>Administraci\u00f3n de Cuestionarios</h2><p>Desde aqu\u00ed podr\u00e1 administrar todos los cuestionarios: Bloques, Quest, Preguntas, Respuestas, Tipo de Respuestas...</p>\"} }\n        - { position: left,  type: sonata.admin.block.admin_list, settings: { groups: [Cuestionarios] } }\n        - { position: right,  type: sonata.block.service.tableinput, settings: { groups: [Tabla de Reglas] } }\n\nfos_user:\n    db_driver: orm\n    firewall_name: main\n    user_class: Application\\Sonata\\UserBundle\\Entity\\User        \nservices:\n    encoderback:\n        class: SusPasitos\\CoreBundle\\Service\\EncoderBack\ncontaineraware:\n    class: SusPasitos\\FrontBundle\\Menu\\Builder\n    arguments: [ @doctrine.orm.default_entity_manager ]\n\nknp_menu:\n    twig:  # use \"twig: false\" to disable the Twig extension and the TwigRenderer\n        template: SopinetTemplateAceBundle:Element:knp_menu.html.twig\nknp_paginator:\n    page_range: 5                      # default page range used in pagination control\n    default_options:\n        page_name: page                # page query parameter name\n        sort_field_name: sort          # sort field query parameter name\n        sort_direction_name: direction # sort direction query parameter name\n        distinct: true                 # ensure distinct results, useful when ORM queries are using GROUP BY statements\n    template:\n        #pagination: SusPasitosFrontBundle:Common:pagination_bootstrap.html.twig     # sliding pagination controls template\n        sortable: KnpPaginatorBundle:Pagination:sortable_link.html.twig # sort link template        \nservices:\nquestforme.listener:\nclass: Questforme\\CoreBundle\\Listener\\LocaleListener\narguments: [%locale%, '@service_container', '@session']\ntags:\n-  { name: kernel.event_subscriber }\n```\n. No, i dont \n. Lol, it work now\nI have replaced bootstrap.app.cache generate from Symfony 2.2.x by file in Symfony 2.3.4 (new installation), and error solved.\nI dont know :S\n. ",
    "mente": "Hi guys,\nQuick debug has shown that format_listener configuration is not working properly. I have latest stable version 1.0.0. $config['format_listener']['rules'] is empty in FOSRestExtension class. Full config:\nfos_rest:\n    format_listener:\n        rules:\n            - { path: '^/v1', priorities: ['json', 'xml'], fallback_format: json, prefer_extension: false }\n    view:\n        formats:\n            json: true\n            rss: false\n            xml: false\n        templating_formats:\n            html: true\n    routing_loader:\n        default_format: json\n        include_format: false\n    param_fetcher_listener: force\n    body_listener: false\n    format_listener: true\n    exception:\n        codes:\n            'Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException': HTTP_BAD_REQUEST\n        messages:\n            'Symfony\\Component\\HttpKernel\\Exception\\HttpException': true\nAm I doing something wrong? Should I create separate issue for this? Symfony is also the latest stable version 2.3.6\n. The error was in duplicate format_listener field at the middle of configuration. Thanks for reference.\n. I wish someone made a PR for it, e.g. FileParam annotation. Will take a look into it...\n. ",
    "ravitej91": "Thanks for the quick reply.....  @lsmith77 \n. ",
    "AAtticus": "I've looked into serialization groups but wouldn't you need to create n x m groups depending on the number of variables in the entity class? \n. ",
    "iagomez": "Guys,\nI just performed these updates:\nSymfony 2.3.4 -> 2.3.5\nFOSRestBundle 0.12.0 -> 0.13.1\nMy Exceptions are no longer being processed by FOS\\RestBundle\\Controller\\ExceptionController::showAction. Instead of getting a json object with the Status Code and the Exception Message I get the html response:\nHTTP/1.0 500 Internal Server Error\nDate: Tue, 01 Oct 2013 17:00:20 GMT\nServer: Apache/2.4.4 (Fedora) OpenSSL/1.0.1e-fips PHP/5.5.1\nX-Powered-By: PHP/5.5.1\nCache-Control: max-age=604800\nExpires: Tue, 08 Oct 2013 17:00:20 GMT\nContent-Length: 0\nConnection: close\nContent-Type: text/html; charset=UT\nI stepped through with the debugger to confirm that my controller is in fact throwing the exception\nMy config.yml contains\ntwig:\n    debug:            %kernel.debug%\n    strict_variables: %kernel.debug%\n    exception_controller: 'FOS\\RestBundle\\Controller\\ExceptionController::showAction'\nIs this related to this issue? Any advice?\n. Guys,\nI just performed these updates:\nSymfony 2.3.4 -> 2.3.5\nFOSRestBundle 0.12.0 -> 0.13.1\nMy Exceptions are no longer being processed by FOS\\RestBundle\\Controller\\ExceptionController::showAction. Instead of getting a json object with the Status Code and the Exception Message I get the html response:\nHTTP/1.0 500 Internal Server Error\nDate: Tue, 01 Oct 2013 17:00:20 GMT\nServer: Apache/2.4.4 (Fedora) OpenSSL/1.0.1e-fips PHP/5.5.1\nX-Powered-By: PHP/5.5.1\nCache-Control: max-age=604800\nExpires: Tue, 08 Oct 2013 17:00:20 GMT\nContent-Length: 0\nConnection: close\nContent-Type: text/html; charset=UT\nI stepped through with the debugger to confirm that my controller is in fact throwing the exception\nMy config.yml contains\ntwig:\n    debug:            %kernel.debug%\n    strict_variables: %kernel.debug%\n    exception_controller: 'FOS\\RestBundle\\Controller\\ExceptionController::showAction'\nIs this related to this issue? Any advice?\n. I downgraded back to Symfony 2.3.4 and FOS\\RestBundle\\Controller\\ExceptionController is handling my exceptions again.\nLet me know if you need me to provide information about my system.\n. I downgraded back to Symfony 2.3.4 and FOS\\RestBundle\\Controller\\ExceptionController is handling my exceptions again.\nLet me know if you need me to provide information about my system.\n. @stof Thank you.\n. @stof Thank you.\n. ",
    "jonmchan": "Nevermind - the latest version of format_listener has all the support I need. Thanks!\n. @LitzOuille cheers - fancy seeing you here... I saw your answer on SO already and was hoping there was something more FOSRestBundle related. thanks though!\n. I took an initial look at this, but I didn't get a chance to put together a PR or anything. I ended up using symfony Form File type in the interim, but I'm still interested to see if I can add file support to the RequestParam. Assuming the client sends the file correctly, we would have to get the file from $_FILES and we may want to consider using the http://api.symfony.com/2.5/Symfony/Component/HttpFoundation/File/UploadedFile.html object to handle all the different moving parts of the uploaded file.\n. @pyrech I agree, maybe even setting it as a variable so we don't have to constantly call instanceof. I'm not sure how expensive that check is.\n. yay for DRY - thanks @pyrech !\n. yay for DRY - thanks @pyrech !\n. @lsmith77 - thanks.. I think it would be good to have an addParams() method for ParamFetcher that accepts a \\FOS\\RestBundle\\Controller\\Annotations\\Param and maybe a getParams() to see what's in there already. Would you like a PR for that or is this functionality you're not interested in seeing in the main branch?\n. @lsmith77 how is this version now?\n. @lsmith77 how is this version now?\n. Sure\n. Sure\n. @lsmith77 should be good to go assuming all tests pass.. (Can't see how changing docs can break tests :smirk: )\n. @lsmith77 should be good to go assuming all tests pass.. (Can't see how changing docs can break tests :smirk: )\n. I assume that it is because it is an implementation detail and not required for core ParamFetcher functionality. That was my reasoning when I implemented like this in the first place.\n. I defer to @lsmith77 . I have no strong opinion either way.\n. I defer to @lsmith77 . I have no strong opinion either way.\n. After submitting this issue, I spent a few hours going through the source and I understand it much better. That said, I think that other developers should not have to go through the source to understand how to use this. I submitted a PR with some proposed changes... I don't have enough time to work out the entire documentation, but perhaps my PR can be a start and others can get involved in fleshing out the documentation and rewriting it so it is more clear. I think the most unclear issue about it is that the listeners are not categorized but just thrown together (probably in the order they were implemented?). If we categorize the different listeners, it will make the whole thing more clear.\n. After submitting this issue, I spent a few hours going through the source and I understand it much better. That said, I think that other developers should not have to go through the source to understand how to use this. I submitted a PR with some proposed changes... I don't have enough time to work out the entire documentation, but perhaps my PR can be a start and others can get involved in fleshing out the documentation and rewriting it so it is more clear. I think the most unclear issue about it is that the listeners are not categorized but just thrown together (probably in the order they were implemented?). If we categorize the different listeners, it will make the whole thing more clear.\n. Are you pinging me?\n. Sorry - I no longer am working on symfony projects anymore. My work has pulled me off to RoR projects and it doesn't look like i'll be doing symfony anytime soon. So I don't really have the bandwidth to finish up the docs.\n. I was hoping I can comment directly onto the file, but it looks like I can only leave comments for my modifications. \nHere are some of the things that I think can improve the documentation.\n1. Every Listener should follow the same documentation pattern. I propose a short introduction, a config section, and then a full example of all the code changes required with comments that state what specific client requests is necessary to invoke the behavior and what happens when the client passes the correct data.\n2. Every listener should explain how it interacts with other listeners such as \"see also\" and/or \"provides xx for xx listener down the chain\".\n3. Format Listener documentation should not go in between Request Body Converter Listener and Param Fetcher. I suggest grouping the documentation as I proposed in the TOC of this PR.\n4. The documentation should not just use Symfony terminology but should refer to what is going on at the HTTP level. An example of this is \"request format\". It took me a long time to understand that this was referring to the client request's Accept and that the \"request body format\" was referring to the client's request Content-Type. I think basing the docs around how the request Accept and the request Content-Type affects the response Content-Type and the subsequent view will make the docs much more clear. Basing the documentation on what is happening at the HTTP level makes it so that anyone viewing these listeners with different backgrounds understands exactly what is happening. Also, when trying to debug by viewing raw requests, the user understands what header elements actually trigger behavior.\n. I was hoping I can comment directly onto the file, but it looks like I can only leave comments for my modifications. \nHere are some of the things that I think can improve the documentation.\n1. Every Listener should follow the same documentation pattern. I propose a short introduction, a config section, and then a full example of all the code changes required with comments that state what specific client requests is necessary to invoke the behavior and what happens when the client passes the correct data.\n2. Every listener should explain how it interacts with other listeners such as \"see also\" and/or \"provides xx for xx listener down the chain\".\n3. Format Listener documentation should not go in between Request Body Converter Listener and Param Fetcher. I suggest grouping the documentation as I proposed in the TOC of this PR.\n4. The documentation should not just use Symfony terminology but should refer to what is going on at the HTTP level. An example of this is \"request format\". It took me a long time to understand that this was referring to the client request's Accept and that the \"request body format\" was referring to the client's request Content-Type. I think basing the docs around how the request Accept and the request Content-Type affects the response Content-Type and the subsequent view will make the docs much more clear. Basing the documentation on what is happening at the HTTP level makes it so that anyone viewing these listeners with different backgrounds understands exactly what is happening. Also, when trying to debug by viewing raw requests, the user understands what header elements actually trigger behavior.\n. @stof so one thing i never understood is where does the mapping between client request header Content-Type (application/x-www-form-urlencoded, multipart/form-data, application/json, application/xml, etc.) gets converted to the format type (json, form, xml, etc.). What is responsible for this?\n. @stof so one thing i never understood is where does the mapping between client request header Content-Type (application/x-www-form-urlencoded, multipart/form-data, application/json, application/xml, etc.) gets converted to the format type (json, form, xml, etc.). What is responsible for this?\n. I see now that it is directly implemented in \\Symfony\\Component\\HttpFoundation\\Request. So if I understand the code correctly, neither application/x-www-form-urlencode  nor multipart/form-data is interpreted and falls under default behavior?\nThe list of supported formats in Request::$formats set in Request::initializeFormats() seem quite limited. I think that this would be very vital info to include into the MIME type listener section as it gives rationale for what MIME types actually aren't included by default and needed to be added.\n. I see now that it is directly implemented in \\Symfony\\Component\\HttpFoundation\\Request. So if I understand the code correctly, neither application/x-www-form-urlencode  nor multipart/form-data is interpreted and falls under default behavior?\nThe list of supported formats in Request::$formats set in Request::initializeFormats() seem quite limited. I think that this would be very vital info to include into the MIME type listener section as it gives rationale for what MIME types actually aren't included by default and needed to be added.\n. Sounds like a good idea - I'll make the necessary changes.\n. ",
    "ASKozienko": "Would be even better to create for test custom ExceptionWrapperHandler\nbecause part of error response is out of test coverage now.\n. ",
    "richardpi": "@stof you are absolutely right, HttpFoundationRequestHandler sets submit 2nd argument to false if method is PATCH\nnonetheless fosrestbundle still doesn't bind data passed as json if we use:\n- $form->submit($request)\n- $form->submit($request, false)\n- $form->handleRequest($request) with PATCH method\ni will try to investigate when i have some time. if anyone has some clues, please let me know\n. ",
    "khalilst": "I have the same issue. I'm using Symfony version 2.5.5 and FOSRestBundle latest version.\nPost methods with json file doesn't bind anything to form.\nI've checked the content of request and it was OK, but nothing loaded in form.\n. I solved this problem via this:\n    public function getName()\n    {\n        return 'comment';//or return '';\n    }\nIn general if you want to post a json with a placeholder like {comment\":{\"id\":\"1\",...}}\nyour form name must be exactly \"comment\" or it must be empty\n. Thank you lsmith77 for your comment.\nBut as you can see I added the following config which still is not working:\ntwig\n    serializer:\n        serialize_null: true\nI tried this config with view.serializer_null and without it, but same issue.\nActually I think the serializer.serialize_null has been ignored.\nThe link you posted doesn't use yml configuration, it creates SerializerContext object and override the serialize function.\nIs there a way to do this via config.yml file???\n. My debug resulted to this:\nphp\n    private function initResponse(View $view, $format)\n    {\n        $content = null;\n        if ($this->isFormatTemplating($format)) {\n            $content = $this->renderTemplate($view, $format);//------->Goes here, because i'm using handleView(view(['result'=>$data])->setTemplate())\n        } elseif ($this->serializeNull || null !== $view->getData()) {\n            $data = $this->getDataFromView($view);\n            $serializer = $this->getSerializer($view);\n            if ($serializer instanceof SerializerInterface) {\n                $context = $this->getSerializationContext($view);//------>Here loads the config, but this line never runs\n                $content = $serializer->serialize($data, $format, $context);\n            } else {\n                $content = $serializer->serialize($data, $format);\n            }\n        }\nAnd this is my Controller.Action Method:\nphp\n    public function detailAction($id)\n    {\n        $detail = $this->getRepository()->getDetail($id);\n        return $this->handleView(\n            $this->View(['result' => ['detail' => $detail]])\n            ->setTemplate('result.json.twig')\n        );\n    }\nSo the code which uses serialize_null config never runs, because this function $this->isFormatTemplating($format) returns true.\nAnd finally my result.json.twig file looks like this:\ntwig\n{{result|serialize|raw}}\nI think there must be a config for templating_formats to serialize null values.\nI set these config, it runs without error but same issue still running:\ntwig\n        templating_formats:            \n            html: true\n            serializer: true\n            serialize_null: true\nWhat do you think???\n. I installed FOSRestBundle and I'm using its default serializer, unless your guess was correct.\nSo, if you are right, there is no way to config serialize_null by config.yml?\nAll I want serializing some array or objects and returning them in json format.\nI prefer to use FOSRestBundle and I dont want to change my method just because of null values!!!\n. I have enabled JMSSerializer according to FOSRestBundle. I read it from RestBundle documentation.\nBut I didn't change anything.\nAnd About your gist, i ran it \nfrom this command melody run https://gist.github.com/dunglas/6e6a99626ddb9ab3fee4\nThis error shown:\nerror\nPHP Fatal error:  Call to undefined function SensioLabs\\Melody\\Handler\\Github\\curl_init() in phar:///usr/local/bin/melody/src/SensioLabs/Melody/Handler/Github/Gist.php on line 51\nRunning it from local file like this melody run script.php also raised another error:\nerror\n[Symfony\\Component\\Process\\Exception\\ProcessTimedOutException]               \n  The process \"'/bin/composer' 'require' 'symfony/serializer:~2.6' '--prefer-  \n  dist'\" exceeded the timeout of 240 seconds.\nAnyway this is not my point. So you tell me that default setting isn't ignoring the null values:\nI did wrong setting and it was disabled???\nThis is my config and also I am using handleView($this->view()->setTemplate)\ntwig\nfos_rest:\n    serializer:\n        serialize_null: true\n    view:\n        serialize_null: true\n        formats:\n            rss: false\n            xml: false\n            json: true\n        templating_formats:\n            html: true\n        force_redirects:\n            html: true\n        failed_validation: HTTP_BAD_REQUEST\n        default_engine: twig\n    disable_csrf_role: ROLE_API\n. Hi @dunglas, yes, you were right, I run your gist with melody and I'm seeing that Symfony Serializer is working fine with null values.\nAlso I can fix my problem using the following method.\n``` php\n    public function detailAction($id)\n    {\n        $detail = $this->getRepository()->getDetail($id);\n    $context = new SerializationContext();\n    $context->setSerializeNull(true);\n\n    $serializer = $this->get('jms_serializer');\n\n    $response = new Response($serializer->serialize(['detail' => $detail], 'json', $context));\n    $response->headers->set('Content-Type', 'application/json');\n\n    return $response;\n}\n\n```\n@lsmith77, Can you tell me please how to use jms_serializer in FOSRestBundle without templating?\n. I did it, but still same issue is running here.\n@lsmith77 BTW, thank you so much for your time\n. Thank you again, this is working.\nMaybe I had a bad teacher.\nsymfony-rest-edition was great and it contains what I need.\nGod Bless You\n. ",
    "AlmogBaku": "Opps.. I put the wrong example in the decription..\nBut it seems you just gave me the exact solution I was looking for!(I don't know how do you understand me.. even I didn't!)...\nThanks\n. @lsmith77 yeha but what about other errors? such an 500 501 etc..? that's all the beauty of REST. and from the other side we still need to determinate bugs/errors/unexpected exceptions.\nDon't you think?\n. @lsmith77 I mean that we still need to log for exceptions and errors, but we need to find a way to exclude REST Exceptions.. \nMaybe we can exclude all exceptions that implement some interface or something..\n1. @lsmith77 do you have any idea how we can \"hook\" the logger? maybe you have experienced with this?\n2. Is there any other possibility, you can think of, for determinate REST-Errors?\nWe would love to do PR for this issue :) and a little help/ideas can do.\nP.S. This is still issue, can you please reopen it?\n. what does it mean kernel for REST?\n. We have only API app.\nThe whole app kernel is uses for the API.\nLet me clarify a bit the problem as I see it:\n1. We want to be aware for errors/bugs at the system when we can detect them - asap\n2. We having emails & phone calls for errors/exceptions as they appear + they are logged.\n3. This is fine! and we should get this logs!\n4. The thing is that we want to reduce them, and exclude expected-rest-exceptions(such as venue not found or wrong password) - they should be excluded from the logging.\nI suggest to detect this kind of \"expected-rest-exceptions\" and to exclude them.\nAs I see this there are multiple solution to face this:\n1. each \"expected-rest-exception\" will implement some basic interface\n2. excluding only httpKernel implements\n3. path regex - that can prevent unexceptional exceptions too\nI think that the second option is the better.. then we should encourage developers to throw this kind of errors or implementing their interface. what do you think @lsmith77 ?\nI will work on PR for the monolog's activation strategy\n. hey @stof, thanks for your comment.. I'm actually about to finish building it, I'll publish it as OS later..\n. I solve it by adding a custom activation strategy that solve this issue.\nGoDisco\\ApiBundle\\Monolog\\ApiActivationStrategy.php:\n``` php\n<?php\n/\n * @author  Almog Baku\n *          almog@GoDisco.net\n *          http://www.GoDisco.net/\n \n * 8/18/14 12:48 AM\n /\nnamespace GoDisco\\ApiBundle\\Monolog;\nuse Monolog\\Handler\\FingersCrossed\\ActivationStrategyInterface;\nuse Symfony\\Component\\DependencyInjection\\ContainerAware;\nuse Symfony\\Component\\HttpKernel\\Exception\\HttpException;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Monolog\\Logger;\nclass ApiActivationStrategy extends ContainerAware implements ActivationStrategyInterface\n{\n    public function isHandlerActivated(array $record) {\n        /* @var Request $request /\n        $request = $this->container->get(\"request\");\n        if(preg_match('/^\\/api/', $request->getPathInfo())) {\n            if(isset($record['context']) && isset($record['context']['exception']) && ($record['context']['exception'] instanceof HttpException)) {\n                return false;\n            }\n        }\n        return $record['level'] >= Logger::ERROR;\n    }\n} \n```\nservices.yml:\nyaml\nservices:\n    api.monolog.activation_strategy:\n        class: GoDisco\\ApiBundle\\Monolog\\ApiActivationStrategy\n        calls:\n            - [setContainer, ['@service_container'] ]\nconfig.yml:\nyaml\nmonolog:\n    handlers:\n        main:\n            type:                   fingers_crossed\n            activation_strategy:    api.monolog.activation_strategy\n            handler:                grouped\nThen make sure you always use HttpException type for normal exception, such as not-found item etc.\n. @lsmith77 I think that could be a good Idea, but it needs some changes before I can make a PR.\nRight now, there are two filters that allows me to know if its a normal exception or not. Normal exception is located on /api/ path prefix and is instance of HttpException.\nThe thing is FOSRestBundle does not obligate you to only one path.. and I can't determinate if this request was made for the REST or for the normal website.. unless you forces me to define a specific path prefix.\nDo you have any idea how can we solve it?\n. @epicwhale, again- that's still not solving the issue of NotFoundHttpException on other paths of the website..\n. @epicwhale this strategy is applied for the whole environment.\nFor example, on my project I have some available paths:\n- /terms/\n- /login/\n- /api/*\nIf someone calling /api/my-resource/exists... I don't care, because it's normal to not finding the item.\nBUT, if someone calling for /logina or /old-login-url.. I do want to be inform for the broken link.\nThe thing is, both of them throwing a NotFoundHttpException exception. So how can you know if its api-exception or it doesn`t?\nThe only other solution, that crossing to my mind, is to create a new interface RestHttpException, but its a big change.\n. @stof I agree that logic that depends on the path is not generic enough to be pushed to the repo.\nBUT, I think that ignoring based a interface implementation(ignoring class that implement RestHttpException) is a good solution.\n@stof @lsmith77  what do you think?\nalso, please re-open this issue.\n. any update?. ",
    "kieste": "Same Problem here! Error occurs occasioanlly. Most of the time reloading the page resolves the issue. But Sometimes I have to clear the symfony cache to get rid of the error message. Restarting apache also solves this. I guess its a APC cache bug...!? Have no solution yet. (PHP = 5.4.23, Symfony = 2.3.7)\n. same here. Reinstalled debian 7 with default php 5.4.4 and never saw the error since. Maybe it was due to the unsupported dev-php version 5.4.23 I was running on the other machine.\n. ",
    "kowsercse": "I am facing the problem randomly, refreshing the page solves it. Any update on this issue.\nPHP 5.4.17 (cli) (built: Aug 25 2013 02:03:38) \nSymfony 2.4.1 \n. ",
    "acidjames": "Hi,\nseems like upgrading to php 5.5 solved the problem for me\nusing : php 5.5.11 with zend opcache on centos 5.6\n. Hi,\nseems like upgrading to php 5.5 solved the problem for me\nusing : php 5.5.11 with zend opcache on centos 5.6\n. ",
    "confusedbyphp": "There's a similar issue at the bottom of the config, eg:\nyaml\n   format_listener:\n        rules:\n            prefer_extension:     true\nI got errors until I changed it to:\nyaml\n   format_listener:\n        rules:\n            - prefer_extension:     true\n. ",
    "mvdbos": "Oops, not compatible with Symfony 2.1. My bad.\n. Hmm, thats weird, I did:\n- git checkout master\n- git fetch upstream\n- git merge upstream master\n- git checkout feature/specific-http-exceptions\n- git rebase master\n- git push --force origin feature/specific-http-exceptions\n. Hmmm, a PR was merged in the meantime. Updated everything, shouldn't be any conflicts now.\n. Done\n. ",
    "maxromanovsky": "@lsmith77 How do you think it should be implemented?\n- via existing Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route annotation\n- introducing somw new annotation in FOSRestBundle namespace?\n. I haven't dig into it yet. It was just a question about you vision from the architectural perspective.\n. Not yet. Currently there's a lot of tasks on the project\n. I'll notify you if I am able to start an implmentation.\n. @mbedna Can't find if it's possible to use this implementation along with ClassResourceInterface. From what I see it's impossible as for now.\n. @stof I understand that it's just a single line with a proper configuration, but anyway it could be a useful \"syntactic sugar\" just to omit repeating the same widget type across all datetime fields in the API. It's all about copy-pasting :)\n. @stof. Okay. I'm closing this issue then.\n. ",
    "deegital": "+1\n. ",
    "dvcrn": "Isn't https://github.com/liip/LiipHelloBundle/blob/master/Controller/HelloController.php a typical CoS using FOSRest? \n. ",
    "mnapoli": "I can't get controller as service to work too. Here is what I do:\nyaml\nnotification:\n    type:     rest\n    resource: Missive\\ApiBundle\\Controller\\NotificationController\n``` php\nclass NotificationController extends FOSRestController\n{\n    public function __construct(LoggerInterface $logger) {\n    }\n/**\n * @Get(\"notifications\")\n */\npublic function getNotificationsAction() {\n}\n\n}\n```\nException thrown: Catchable Fatal Error: Argument 1 passed to Missive\\ApiBundle\\Controller\\NotificationController::__construct() must implement interface Psr\\Log\\LoggerInterface, none given\nWhat am I doing wrong?\n. Damn OK I get what's wrong thanks.\nSorry I skipped something: the controller service definition is == the class name (I'm using PHP-DI in Symfony).\nSo \"Missive\\ApiBundle\\Controller\\NotificationController\" is actually the service name. And FOSRestBundle seems to interpret it as \"it's not a container entry, so load it without using the container\".\n\"Normal\" controllers and routing in the Framework Bundle works differently: if it's the short controller notation (e.g. MyBundle:MyController) then the controller is loaded normally (not controller as service), if it's a class name then the controller is loaded through the container\u2026\n. Right! I'm on it thanks for the tip.\n. That sounds absolutely reasonable to me but that's not what I see happening unfortunately. In the ExceptionController the status code is Response::HTTP_INTERNAL_SERVER_ERROR.\nOK if I remove the exception: key, then I indeed get a 404. But if I add it, I get a 500.\nIn other words, if I have that in my config then I get a 500:\nyaml\n    exception:\n        codes:\n            '\u2026\\Exception\\NotFound': 404\n        messages:\n            '\u2026\\Exception\\NotFound': true\n            'Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException': true\n. That sounds absolutely reasonable to me but that's not what I see happening unfortunately. In the ExceptionController the status code is Response::HTTP_INTERNAL_SERVER_ERROR.\nOK if I remove the exception: key, then I indeed get a 404. But if I add it, I get a 500.\nIn other words, if I have that in my config then I get a 500:\nyaml\n    exception:\n        codes:\n            '\u2026\\Exception\\NotFound': 404\n        messages:\n            '\u2026\\Exception\\NotFound': true\n            'Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException': true\n. > do you literally have \"...\" in there?\nNope :)\nWill debug more, I first wanted to make sure there was no obvious mistake in my config.\n. > do you literally have \"...\" in there?\nNope :)\nWill debug more, I first wanted to make sure there was no obvious mistake in my config.\n. OK indeed I was confused by the 500 error message (No route found for \"GET /promotions\") which was actually hiding an exception in the code:\n\nInvalidArgumentException The template \"TwigBundle:Exception:exception_full.html.twig\" does not exist.\n\nI'm using the PHP templating engine (not Twig). Is there some config to make that work without Twig?\nHere is what I tried:\nyml\nfos_rest:\n    ...\n    view:\n        default_engine: php\nI still get the same error.\nIf I install Twig and the Bundle and enable it, I get this when running in prod environment (but with a correct 404 header):\n\nAnyway I don't want to install Twig.\n. OK I understand thanks. Should I close this issue?\n. ",
    "wenmingtang": "ok, thx.\n. ",
    "aftabnaveed": "Sorry I had to delete my previous  as I figured it my possible outputs by this configuration\nfos_rest:\n    format_listener:\n        rules:\n        - { priorities: ['rss','html', 'json', 'xml'], fallback_format: json, prefer_extension: false }\n    view:\n        view_response_listener: true\n. Sorry I had to delete my previous  as I figured it my possible outputs by this configuration\nfos_rest:\n    format_listener:\n        rules:\n        - { priorities: ['rss','html', 'json', 'xml'], fallback_format: json, prefer_extension: false }\n    view:\n        view_response_listener: true\n. ",
    "Toflar": "The JMS Serializer has annotations for Since and Until too. Any reason why we cannot reuse them? :)\n. I see, thx for the hint :)\n. ",
    "codepushr": "By the way is there now a way to annotate a controller action and somehow define a validation group for the automatic body converter validation? I didn't find anything in the docs so I had to disable the option and use the validator manually.\n. @liuggio You mean creating multiple forms for one entity (scenario) and setting the validation group for each one in the getDefaultOptions()? Is this still compatible with the body converter - like is the param converter also accepting form models?\n. I see. Well anyway there should definitely be such a feature. I think it would make the body converter validation even more powerful and useful if there was a way to annotate the validation groups for the entities :)\n. Me being dumb again. Thanks for pointing it out!\n. ",
    "USvER": "Ok second bug is not really bug, it's just a method to handle conflict with get_user route...\nFirst still need a fix... For now i fixed a resource name so autogenerator is not try to bound my class as a subresource.\n. ",
    "dioxmio": "@lsmith77 I'm using the latests version: 3.0.0\nDowngrading it to 2.3.4 it worked for me. Does that mean there's a bug on the latest one? \nAs well the feature converter=\"fos_rest.request_body\" seems only to work with entity object types. Is it possible to make it work with no orm objects? Just object models?\nthanks\n. ",
    "marcj": "Ok, got it. Have to define the requirements in the @Rest\\Get annotation. Unfortunately, that annotation does not support descriptions or something like that.\n. Unfortunately, that issue still persists for me, but now with a non-path parameter withAcl.\nMy route:\nphp\n/**\n     * @ApiDoc(\n     *    description=\"Returns a single object item\"\n     * )\n     *\n     * @Rest\\QueryParam(name=\"fields\", requirements=\".+\", description=\"Fields to select\")\n     * @Rest\\QueryParam(name=\"withAcl\", requirements=\".+\", default=false, description=\"With ACL information\")\n     *\n     * @Rest\\View()\n     * @Rest\\Get(\"/{pk}\", requirements={\"pk\" = \".+\"})\n     *\n     * @param string $pk\n     * @param string $fields\n     * @param boolean $withAcl\n     *\n     * @return array\n     */\n    public function getItemAction($pk, $fields = null, $withAcl = false)\n    {\nSame Exception as abov:\nParamFetcher parameter conflicts with a path parameter 'withAcl' for route 'route_name'\nAnyone a idea how to fix that?\n. Unfortunately, that issue still persists for me, but now with a non-path parameter withAcl.\nMy route:\nphp\n/**\n     * @ApiDoc(\n     *    description=\"Returns a single object item\"\n     * )\n     *\n     * @Rest\\QueryParam(name=\"fields\", requirements=\".+\", description=\"Fields to select\")\n     * @Rest\\QueryParam(name=\"withAcl\", requirements=\".+\", default=false, description=\"With ACL information\")\n     *\n     * @Rest\\View()\n     * @Rest\\Get(\"/{pk}\", requirements={\"pk\" = \".+\"})\n     *\n     * @param string $pk\n     * @param string $fields\n     * @param boolean $withAcl\n     *\n     * @return array\n     */\n    public function getItemAction($pk, $fields = null, $withAcl = false)\n    {\nSame Exception as abov:\nParamFetcher parameter conflicts with a path parameter 'withAcl' for route 'route_name'\nAnyone a idea how to fix that?\n. Temporarily fixed with \n... , $withAcl = null)\nBut shouldn't it be possible to set default values, or should those php default values are replaced with those in @QueryParam&Co?\n. Temporarily fixed with \n... , $withAcl = null)\nBut shouldn't it be possible to set default values, or should those php default values are replaced with those in @QueryParam&Co?\n. ",
    "Gnucki": "Here is my Request object:\nphp\narray (size=20)\n  'attributes' => \n    object(Symfony\\Component\\HttpFoundation\\ParameterBag)[9]\n      protected 'parameters' => \n        array (size=5)\n          '_controller' => string 'My\\Bundle\\Controller\\ParticipationController::cgetAction' (length=77)\n          '_format' => string 'json' (length=4)\n          '_route' => string 'api_participation_get_participations' (length=36)\n          '_route_params' => \n            array (size=1)\n              ...\n          'media_type' => string '*/*' (length=3)\n  'request' => \n    object(Symfony\\Component\\HttpFoundation\\ParameterBag)[7]\n      protected 'parameters' => \n        array (size=0)\n          empty\n  'query' => \n    object(Symfony\\Component\\HttpFoundation\\ParameterBag)[8]\n      protected 'parameters' => \n        array (size=1)\n          'search' => string '060606' (length=18)\n  'server' => \n    object(Symfony\\Component\\HttpFoundation\\ServerBag)[12]\n      protected 'parameters' => \n        array (size=32)\n          'REDIRECT_STATUS' => string '200' (length=3)\n          'HTTP_HOST' => string 'domain.fr' (length=38)\n          'HTTP_CONNECTION' => string 'keep-alive' (length=10)\n          'HTTP_CACHE_CONTROL' => string 'no-cache' (length=8)\n          'HTTP_USER_AGENT' => string 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/30.0.1599.114 Chrome/30.0.1599.114 Safari/537.36' (length=135)\n          'HTTP_ACCEPT' => string '*/*' (length=3)\n          'HTTP_ACCEPT_ENCODING' => string 'gzip,deflate,sdch' (length=17)\n          'HTTP_ACCEPT_LANGUAGE' => string 'fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4' (length=35)\n          'HTTP_COOKIE' => string 'PHPSESSID=apcbqs4vd80npag4lnldb' (length=36)\n          'PATH' => string '/usr/local/bin:/usr/bin:/bin' (length=28)\n          'SERVER_SIGNATURE' => string '<address>Apache/2.2.22 (Ubuntu) Server at domain.fr Port 80</address>\n' (length=99)\n          'SERVER_SOFTWARE' => string 'Apache/2.2.22 (Ubuntu)' (length=22)\n          'SERVER_NAME' => string 'domain.fr' (length=38)\n          'SERVER_ADDR' => string '127.0.0.1' (length=9)\n          'SERVER_PORT' => string '80' (length=2)\n          'REMOTE_ADDR' => string '127.0.0.1' (length=9)\n          'DOCUMENT_ROOT' => string '/path/web' (length=47)\n          'SERVER_ADMIN' => string '[no address given]' (length=18)\n          'SCRIPT_FILENAME' => string '/path/web/app_dev.php' (length=59)\n          'REMOTE_PORT' => string '51924' (length=5)\n          'REDIRECT_QUERY_STRING' => string 'search=060606' (length=25)\n          'REDIRECT_URL' => string '/api/participations' (length=19)\n          'GATEWAY_INTERFACE' => string 'CGI/1.1' (length=7)\n          'SERVER_PROTOCOL' => string 'HTTP/1.1' (length=8)\n          'REQUEST_METHOD' => string 'GET' (length=3)\n          'QUERY_STRING' => string 'search=060606' (length=25)\n          'REQUEST_URI' => string '/api/participations?search=060606' (length=45)\n          'SCRIPT_NAME' => string '/app_dev.php' (length=12)\n          'PHP_SELF' => string '/app_dev.php' (length=12)\n          'REQUEST_TIME_FLOAT' => float 1386751759.939\n          'REQUEST_TIME' => int 1386751759\n  'files' => \n    object(Symfony\\Component\\HttpFoundation\\FileBag)[11]\n      protected 'parameters' => \n        array (size=0)\n          empty\n  'cookies' => \n    object(Symfony\\Component\\HttpFoundation\\ParameterBag)[10]\n      protected 'parameters' => \n        array (size=1)\n          'PHPSESSID' => string 'apcbqs4vd80npag4lnldb' (length=26)\n  'headers' => \n    object(Symfony\\Component\\HttpFoundation\\HeaderBag)[13]\n      protected 'headers' => \n        array (size=10)\n          'host' => \n            array (size=1)\n              ...\n          'connection' => \n            array (size=1)\n              ...\n          'cache-control' => \n            array (size=1)\n              ...\n          'user-agent' => \n            array (size=1)\n              ...\n          'accept' => \n            array (size=1)\n              ...\n          'accept-encoding' => \n            array (size=1)\n              ...\n          'accept-language' => \n            array (size=1)\n              ...\n          'cookie' => \n            array (size=1)\n              ...\n          'x-php-ob-level' => \n            array (size=1)\n              ...\n      protected 'cacheControl' => \n        array (size=1)\n          'no-cache' => boolean true\n  '\ufffd*\ufffdcontent' => null\n  '\ufffd*\ufffdlanguages' => null\n  '\ufffd*\ufffdcharsets' => null\n  '\ufffd*\ufffdacceptableContentTypes' => null\n  '\ufffd*\ufffdpathInfo' => string '/api/participations' (length=19)\n  '\ufffd*\ufffdrequestUri' => string '/api/participations?search=060606' (length=45)\n  '\ufffd*\ufffdbaseUrl' => string '' (length=0)\n  '\ufffd*\ufffdbasePath' => null\n  '\ufffd*\ufffdmethod' => string 'GET' (length=3)\n  '\ufffd*\ufffdformat' => null\n  '\ufffd*\ufffdsession' => \n    object(Symfony\\Component\\HttpFoundation\\Session\\Session)[140]\n      protected 'storage' => \n        object(Symfony\\Component\\HttpFoundation\\Session\\Storage\\NativeSessionStorage)[139]\n          protected 'bags' => \n            array (size=2)\n              ...\n          protected 'started' => boolean false\n          protected 'closed' => boolean false\n          protected 'saveHandler' => \n            object(Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy)[136]\n              ...\n          protected 'metadataBag' => \n            object(Symfony\\Component\\HttpFoundation\\Session\\Storage\\MetadataBag)[137]\n              ...\n      private 'flashName' => string 'flashes' (length=7)\n      private 'attributeName' => string 'attributes' (length=10)\n  '\ufffd*\ufffdlocale' => null\n  '\ufffd*\ufffddefaultLocale' => string 'en' (length=2)\narray (size=20)\n  'attributes' => \n    object(Symfony\\Component\\HttpFoundation\\ParameterBag)[86]\n      protected 'parameters' => \n        array (size=6)\n          '_controller' => string 'twig.controller.exception:showAction' (length=36)\n          'exception' => \n            object(Symfony\\Component\\HttpKernel\\Exception\\FlattenException)[95]\n              ...\n          'logger' => \n            object(Symfony\\Bridge\\Monolog\\Logger)[195]\n              ...\n          'format' => string 'json' (length=4)\n          '_format' => string 'json' (length=4)\n          'media_type' => string '*/*' (length=3)\n  'request' => \n    object(Symfony\\Component\\HttpFoundation\\ParameterBag)[92]\n      protected 'parameters' => \n        array (size=0)\n          empty\n  'query' => \n    object(Symfony\\Component\\HttpFoundation\\ParameterBag)[93]\n      protected 'parameters' => \n        array (size=1)\n          'search' => string '060606' (length=18)\n  'server' => \n    object(Symfony\\Component\\HttpFoundation\\ServerBag)[88]\n      protected 'parameters' => \n        array (size=32)\n          'REDIRECT_STATUS' => string '200' (length=3)\n          'HTTP_HOST' => string 'domain.fr' (length=38)\n          'HTTP_CONNECTION' => string 'keep-alive' (length=10)\n          'HTTP_CACHE_CONTROL' => string 'no-cache' (length=8)\n          'HTTP_USER_AGENT' => string 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/30.0.1599.114 Chrome/30.0.1599.114 Safari/537.36' (length=135)\n          'HTTP_ACCEPT' => string '*/*' (length=3)\n          'HTTP_ACCEPT_ENCODING' => string 'gzip,deflate,sdch' (length=17)\n          'HTTP_ACCEPT_LANGUAGE' => string 'fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4' (length=35)\n          'HTTP_COOKIE' => string 'PHPSESSID=apcbqs4vd80npag4lnldb' (length=36)\n          'PATH' => string '/usr/local/bin:/usr/bin:/bin' (length=28)\n          'SERVER_SIGNATURE' => string '<address>Apache/2.2.22 (Ubuntu) Server at domain.fr Port 80</address>\n' (length=99)\n          'SERVER_SOFTWARE' => string 'Apache/2.2.22 (Ubuntu)' (length=22)\n          'SERVER_NAME' => string 'domain.fr' (length=38)\n          'SERVER_ADDR' => string '127.0.0.1' (length=9)\n          'SERVER_PORT' => string '80' (length=2)\n          'REMOTE_ADDR' => string '127.0.0.1' (length=9)\n          'DOCUMENT_ROOT' => string '/path/web' (length=47)\n          'SERVER_ADMIN' => string '[no address given]' (length=18)\n          'SCRIPT_FILENAME' => string '/path/web/app_dev.php' (length=59)\n          'REMOTE_PORT' => string '51924' (length=5)\n          'REDIRECT_QUERY_STRING' => string 'search=060606' (length=25)\n          'REDIRECT_URL' => string '/api/participations' (length=19)\n          'GATEWAY_INTERFACE' => string 'CGI/1.1' (length=7)\n          'SERVER_PROTOCOL' => string 'HTTP/1.1' (length=8)\n          'REQUEST_METHOD' => string 'GET' (length=3)\n          'QUERY_STRING' => string 'search=060606' (length=25)\n          'REQUEST_URI' => string '/api/participations?search=060606' (length=45)\n          'SCRIPT_NAME' => string '/app_dev.php' (length=12)\n          'PHP_SELF' => string '/app_dev.php' (length=12)\n          'REQUEST_TIME_FLOAT' => float 1386751759.939\n          'REQUEST_TIME' => int 1386751759\n  'files' => \n    object(Symfony\\Component\\HttpFoundation\\FileBag)[89]\n      protected 'parameters' => \n        array (size=0)\n          empty\n  'cookies' => \n    object(Symfony\\Component\\HttpFoundation\\ParameterBag)[90]\n      protected 'parameters' => \n        array (size=1)\n          'PHPSESSID' => string 'apcbqs4vd80npag4lnldb' (length=26)\n  'headers' => \n    object(Symfony\\Component\\HttpFoundation\\HeaderBag)[87]\n      protected 'headers' => \n        array (size=10)\n          'host' => \n            array (size=1)\n              ...\n          'connection' => \n            array (size=1)\n              ...\n          'cache-control' => \n            array (size=1)\n              ...\n          'user-agent' => \n            array (size=1)\n              ...\n          'accept' => \n            array (size=1)\n              ...\n          'accept-encoding' => \n            array (size=1)\n              ...\n          'accept-language' => \n            array (size=1)\n              ...\n          'cookie' => \n            array (size=1)\n              ...\n          'x-php-ob-level' => \n            array (size=1)\n              ...\n      protected 'cacheControl' => \n        array (size=1)\n          'no-cache' => boolean true\n  '\ufffd*\ufffdcontent' => null\n  '\ufffd*\ufffdlanguages' => null\n  '\ufffd*\ufffdcharsets' => null\n  '\ufffd*\ufffdacceptableContentTypes' => null\n  '\ufffd*\ufffdpathInfo' => string '/api/participations' (length=19)\n  '\ufffd*\ufffdrequestUri' => string '/api/participations?search=060606' (length=45)\n  '\ufffd*\ufffdbaseUrl' => string '' (length=0)\n  '\ufffd*\ufffdbasePath' => null\n  '\ufffd*\ufffdmethod' => string 'GET' (length=3)\n  '\ufffd*\ufffdformat' => string 'json' (length=4)\n  '\ufffd*\ufffdsession' => \n    object(Symfony\\Component\\HttpFoundation\\Session\\Session)[140]\n      protected 'storage' => \n        object(Symfony\\Component\\HttpFoundation\\Session\\Storage\\NativeSessionStorage)[139]\n          protected 'bags' => \n            array (size=2)\n              ...\n          protected 'started' => boolean false\n          protected 'closed' => boolean false\n          protected 'saveHandler' => \n            object(Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy)[136]\n              ...\n          protected 'metadataBag' => \n            object(Symfony\\Component\\HttpFoundation\\Session\\Storage\\MetadataBag)[137]\n              ...\n      private 'flashName' => string 'flashes' (length=7)\n      private 'attributeName' => string 'attributes' (length=10)\n  '\ufffd*\ufffdlocale' => null\n  '\ufffd*\ufffddefaultLocale' => string 'en' (length=2)\n. Here is my Request object:\nphp\narray (size=20)\n  'attributes' => \n    object(Symfony\\Component\\HttpFoundation\\ParameterBag)[9]\n      protected 'parameters' => \n        array (size=5)\n          '_controller' => string 'My\\Bundle\\Controller\\ParticipationController::cgetAction' (length=77)\n          '_format' => string 'json' (length=4)\n          '_route' => string 'api_participation_get_participations' (length=36)\n          '_route_params' => \n            array (size=1)\n              ...\n          'media_type' => string '*/*' (length=3)\n  'request' => \n    object(Symfony\\Component\\HttpFoundation\\ParameterBag)[7]\n      protected 'parameters' => \n        array (size=0)\n          empty\n  'query' => \n    object(Symfony\\Component\\HttpFoundation\\ParameterBag)[8]\n      protected 'parameters' => \n        array (size=1)\n          'search' => string '060606' (length=18)\n  'server' => \n    object(Symfony\\Component\\HttpFoundation\\ServerBag)[12]\n      protected 'parameters' => \n        array (size=32)\n          'REDIRECT_STATUS' => string '200' (length=3)\n          'HTTP_HOST' => string 'domain.fr' (length=38)\n          'HTTP_CONNECTION' => string 'keep-alive' (length=10)\n          'HTTP_CACHE_CONTROL' => string 'no-cache' (length=8)\n          'HTTP_USER_AGENT' => string 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/30.0.1599.114 Chrome/30.0.1599.114 Safari/537.36' (length=135)\n          'HTTP_ACCEPT' => string '*/*' (length=3)\n          'HTTP_ACCEPT_ENCODING' => string 'gzip,deflate,sdch' (length=17)\n          'HTTP_ACCEPT_LANGUAGE' => string 'fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4' (length=35)\n          'HTTP_COOKIE' => string 'PHPSESSID=apcbqs4vd80npag4lnldb' (length=36)\n          'PATH' => string '/usr/local/bin:/usr/bin:/bin' (length=28)\n          'SERVER_SIGNATURE' => string '<address>Apache/2.2.22 (Ubuntu) Server at domain.fr Port 80</address>\n' (length=99)\n          'SERVER_SOFTWARE' => string 'Apache/2.2.22 (Ubuntu)' (length=22)\n          'SERVER_NAME' => string 'domain.fr' (length=38)\n          'SERVER_ADDR' => string '127.0.0.1' (length=9)\n          'SERVER_PORT' => string '80' (length=2)\n          'REMOTE_ADDR' => string '127.0.0.1' (length=9)\n          'DOCUMENT_ROOT' => string '/path/web' (length=47)\n          'SERVER_ADMIN' => string '[no address given]' (length=18)\n          'SCRIPT_FILENAME' => string '/path/web/app_dev.php' (length=59)\n          'REMOTE_PORT' => string '51924' (length=5)\n          'REDIRECT_QUERY_STRING' => string 'search=060606' (length=25)\n          'REDIRECT_URL' => string '/api/participations' (length=19)\n          'GATEWAY_INTERFACE' => string 'CGI/1.1' (length=7)\n          'SERVER_PROTOCOL' => string 'HTTP/1.1' (length=8)\n          'REQUEST_METHOD' => string 'GET' (length=3)\n          'QUERY_STRING' => string 'search=060606' (length=25)\n          'REQUEST_URI' => string '/api/participations?search=060606' (length=45)\n          'SCRIPT_NAME' => string '/app_dev.php' (length=12)\n          'PHP_SELF' => string '/app_dev.php' (length=12)\n          'REQUEST_TIME_FLOAT' => float 1386751759.939\n          'REQUEST_TIME' => int 1386751759\n  'files' => \n    object(Symfony\\Component\\HttpFoundation\\FileBag)[11]\n      protected 'parameters' => \n        array (size=0)\n          empty\n  'cookies' => \n    object(Symfony\\Component\\HttpFoundation\\ParameterBag)[10]\n      protected 'parameters' => \n        array (size=1)\n          'PHPSESSID' => string 'apcbqs4vd80npag4lnldb' (length=26)\n  'headers' => \n    object(Symfony\\Component\\HttpFoundation\\HeaderBag)[13]\n      protected 'headers' => \n        array (size=10)\n          'host' => \n            array (size=1)\n              ...\n          'connection' => \n            array (size=1)\n              ...\n          'cache-control' => \n            array (size=1)\n              ...\n          'user-agent' => \n            array (size=1)\n              ...\n          'accept' => \n            array (size=1)\n              ...\n          'accept-encoding' => \n            array (size=1)\n              ...\n          'accept-language' => \n            array (size=1)\n              ...\n          'cookie' => \n            array (size=1)\n              ...\n          'x-php-ob-level' => \n            array (size=1)\n              ...\n      protected 'cacheControl' => \n        array (size=1)\n          'no-cache' => boolean true\n  '\ufffd*\ufffdcontent' => null\n  '\ufffd*\ufffdlanguages' => null\n  '\ufffd*\ufffdcharsets' => null\n  '\ufffd*\ufffdacceptableContentTypes' => null\n  '\ufffd*\ufffdpathInfo' => string '/api/participations' (length=19)\n  '\ufffd*\ufffdrequestUri' => string '/api/participations?search=060606' (length=45)\n  '\ufffd*\ufffdbaseUrl' => string '' (length=0)\n  '\ufffd*\ufffdbasePath' => null\n  '\ufffd*\ufffdmethod' => string 'GET' (length=3)\n  '\ufffd*\ufffdformat' => null\n  '\ufffd*\ufffdsession' => \n    object(Symfony\\Component\\HttpFoundation\\Session\\Session)[140]\n      protected 'storage' => \n        object(Symfony\\Component\\HttpFoundation\\Session\\Storage\\NativeSessionStorage)[139]\n          protected 'bags' => \n            array (size=2)\n              ...\n          protected 'started' => boolean false\n          protected 'closed' => boolean false\n          protected 'saveHandler' => \n            object(Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy)[136]\n              ...\n          protected 'metadataBag' => \n            object(Symfony\\Component\\HttpFoundation\\Session\\Storage\\MetadataBag)[137]\n              ...\n      private 'flashName' => string 'flashes' (length=7)\n      private 'attributeName' => string 'attributes' (length=10)\n  '\ufffd*\ufffdlocale' => null\n  '\ufffd*\ufffddefaultLocale' => string 'en' (length=2)\narray (size=20)\n  'attributes' => \n    object(Symfony\\Component\\HttpFoundation\\ParameterBag)[86]\n      protected 'parameters' => \n        array (size=6)\n          '_controller' => string 'twig.controller.exception:showAction' (length=36)\n          'exception' => \n            object(Symfony\\Component\\HttpKernel\\Exception\\FlattenException)[95]\n              ...\n          'logger' => \n            object(Symfony\\Bridge\\Monolog\\Logger)[195]\n              ...\n          'format' => string 'json' (length=4)\n          '_format' => string 'json' (length=4)\n          'media_type' => string '*/*' (length=3)\n  'request' => \n    object(Symfony\\Component\\HttpFoundation\\ParameterBag)[92]\n      protected 'parameters' => \n        array (size=0)\n          empty\n  'query' => \n    object(Symfony\\Component\\HttpFoundation\\ParameterBag)[93]\n      protected 'parameters' => \n        array (size=1)\n          'search' => string '060606' (length=18)\n  'server' => \n    object(Symfony\\Component\\HttpFoundation\\ServerBag)[88]\n      protected 'parameters' => \n        array (size=32)\n          'REDIRECT_STATUS' => string '200' (length=3)\n          'HTTP_HOST' => string 'domain.fr' (length=38)\n          'HTTP_CONNECTION' => string 'keep-alive' (length=10)\n          'HTTP_CACHE_CONTROL' => string 'no-cache' (length=8)\n          'HTTP_USER_AGENT' => string 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/30.0.1599.114 Chrome/30.0.1599.114 Safari/537.36' (length=135)\n          'HTTP_ACCEPT' => string '*/*' (length=3)\n          'HTTP_ACCEPT_ENCODING' => string 'gzip,deflate,sdch' (length=17)\n          'HTTP_ACCEPT_LANGUAGE' => string 'fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4' (length=35)\n          'HTTP_COOKIE' => string 'PHPSESSID=apcbqs4vd80npag4lnldb' (length=36)\n          'PATH' => string '/usr/local/bin:/usr/bin:/bin' (length=28)\n          'SERVER_SIGNATURE' => string '<address>Apache/2.2.22 (Ubuntu) Server at domain.fr Port 80</address>\n' (length=99)\n          'SERVER_SOFTWARE' => string 'Apache/2.2.22 (Ubuntu)' (length=22)\n          'SERVER_NAME' => string 'domain.fr' (length=38)\n          'SERVER_ADDR' => string '127.0.0.1' (length=9)\n          'SERVER_PORT' => string '80' (length=2)\n          'REMOTE_ADDR' => string '127.0.0.1' (length=9)\n          'DOCUMENT_ROOT' => string '/path/web' (length=47)\n          'SERVER_ADMIN' => string '[no address given]' (length=18)\n          'SCRIPT_FILENAME' => string '/path/web/app_dev.php' (length=59)\n          'REMOTE_PORT' => string '51924' (length=5)\n          'REDIRECT_QUERY_STRING' => string 'search=060606' (length=25)\n          'REDIRECT_URL' => string '/api/participations' (length=19)\n          'GATEWAY_INTERFACE' => string 'CGI/1.1' (length=7)\n          'SERVER_PROTOCOL' => string 'HTTP/1.1' (length=8)\n          'REQUEST_METHOD' => string 'GET' (length=3)\n          'QUERY_STRING' => string 'search=060606' (length=25)\n          'REQUEST_URI' => string '/api/participations?search=060606' (length=45)\n          'SCRIPT_NAME' => string '/app_dev.php' (length=12)\n          'PHP_SELF' => string '/app_dev.php' (length=12)\n          'REQUEST_TIME_FLOAT' => float 1386751759.939\n          'REQUEST_TIME' => int 1386751759\n  'files' => \n    object(Symfony\\Component\\HttpFoundation\\FileBag)[89]\n      protected 'parameters' => \n        array (size=0)\n          empty\n  'cookies' => \n    object(Symfony\\Component\\HttpFoundation\\ParameterBag)[90]\n      protected 'parameters' => \n        array (size=1)\n          'PHPSESSID' => string 'apcbqs4vd80npag4lnldb' (length=26)\n  'headers' => \n    object(Symfony\\Component\\HttpFoundation\\HeaderBag)[87]\n      protected 'headers' => \n        array (size=10)\n          'host' => \n            array (size=1)\n              ...\n          'connection' => \n            array (size=1)\n              ...\n          'cache-control' => \n            array (size=1)\n              ...\n          'user-agent' => \n            array (size=1)\n              ...\n          'accept' => \n            array (size=1)\n              ...\n          'accept-encoding' => \n            array (size=1)\n              ...\n          'accept-language' => \n            array (size=1)\n              ...\n          'cookie' => \n            array (size=1)\n              ...\n          'x-php-ob-level' => \n            array (size=1)\n              ...\n      protected 'cacheControl' => \n        array (size=1)\n          'no-cache' => boolean true\n  '\ufffd*\ufffdcontent' => null\n  '\ufffd*\ufffdlanguages' => null\n  '\ufffd*\ufffdcharsets' => null\n  '\ufffd*\ufffdacceptableContentTypes' => null\n  '\ufffd*\ufffdpathInfo' => string '/api/participations' (length=19)\n  '\ufffd*\ufffdrequestUri' => string '/api/participations?search=060606' (length=45)\n  '\ufffd*\ufffdbaseUrl' => string '' (length=0)\n  '\ufffd*\ufffdbasePath' => null\n  '\ufffd*\ufffdmethod' => string 'GET' (length=3)\n  '\ufffd*\ufffdformat' => string 'json' (length=4)\n  '\ufffd*\ufffdsession' => \n    object(Symfony\\Component\\HttpFoundation\\Session\\Session)[140]\n      protected 'storage' => \n        object(Symfony\\Component\\HttpFoundation\\Session\\Storage\\NativeSessionStorage)[139]\n          protected 'bags' => \n            array (size=2)\n              ...\n          protected 'started' => boolean false\n          protected 'closed' => boolean false\n          protected 'saveHandler' => \n            object(Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy)[136]\n              ...\n          protected 'metadataBag' => \n            object(Symfony\\Component\\HttpFoundation\\Session\\Storage\\MetadataBag)[137]\n              ...\n      private 'flashName' => string 'flashes' (length=7)\n      private 'attributeName' => string 'attributes' (length=10)\n  '\ufffd*\ufffdlocale' => null\n  '\ufffd*\ufffddefaultLocale' => string 'en' (length=2)\n. If I call /api/participations.json?search=060606 it works of course.\n. If I call /api/participations.json?search=060606 it works of course.\n. I investigated a bit on my problem. Seems the new system works differently with the accept header. When there is no Accept header containing, for instance application/json, a */* is returned by the following code (with my configuration):\n``` php\n// FOS\\RestBundle\\Util\\FormatNegotiator\n/\n * Detect the request format based on the priorities and the Accept header\n \n * @param   Request         $request          The request\n * @return  void|string                       The format string\n /\npublic function getBestMediaType(Request $request)\n{\n    // ...\n$mimeTypes = $this->formatNegotiator->normalizePriorities($options['priorities']);\n$mediaType = $this->formatNegotiator->getBest($acceptHeader, $mimeTypes);\nif (null !== $mediaType) {\n    return $mediaType->getValue(); // return '*/*'\n}\n\nif (isset($options['fallback_format'])) {\n    // if false === fallback_format then we fail here instead of considering more rules\n    if (false === $options['fallback_format']) {\n       return null;\n    }\n\n    // stop looking at rules since we have a fallback defined\n    return $request->getMimeType($options['fallback_format']);\n}\n\n// ...\n\n```\nBefore, the format variable was null and the format was taken on the fallback_format:\n``` php\n// FOS\\RestBundle\\Util\\FormatNegotiator\n/\n * Detect the request format based on the priorities and the Accept header\n \n * @param   Request         $request          The request\n * @return  void|string                       The format string\n /\npublic function getBestMediaType(Request $request)\n{\n    // ...\n$format = $this->formatNegotiator->getBestFormat($acceptHeader, $options['priorities']);\nif (null !== $format) {\n    return $format;\n}\n\nif (isset($options['fallback_format'])) {\n    // if false === fallback_format then we fail here instead of considering more rules\n    if (false === $options['fallback_format']) {\n       return null;\n    }\n\n    // stop looking at rules since we have a fallback defined\n    return $request->getMimeType($options['fallback_format']);\n}\n\n// ...\n\n```\nSo, I think I should be stricter and set my Accept header.\n. I investigated a bit on my problem. Seems the new system works differently with the accept header. When there is no Accept header containing, for instance application/json, a */* is returned by the following code (with my configuration):\n``` php\n// FOS\\RestBundle\\Util\\FormatNegotiator\n/\n * Detect the request format based on the priorities and the Accept header\n \n * @param   Request         $request          The request\n * @return  void|string                       The format string\n /\npublic function getBestMediaType(Request $request)\n{\n    // ...\n$mimeTypes = $this->formatNegotiator->normalizePriorities($options['priorities']);\n$mediaType = $this->formatNegotiator->getBest($acceptHeader, $mimeTypes);\nif (null !== $mediaType) {\n    return $mediaType->getValue(); // return '*/*'\n}\n\nif (isset($options['fallback_format'])) {\n    // if false === fallback_format then we fail here instead of considering more rules\n    if (false === $options['fallback_format']) {\n       return null;\n    }\n\n    // stop looking at rules since we have a fallback defined\n    return $request->getMimeType($options['fallback_format']);\n}\n\n// ...\n\n```\nBefore, the format variable was null and the format was taken on the fallback_format:\n``` php\n// FOS\\RestBundle\\Util\\FormatNegotiator\n/\n * Detect the request format based on the priorities and the Accept header\n \n * @param   Request         $request          The request\n * @return  void|string                       The format string\n /\npublic function getBestMediaType(Request $request)\n{\n    // ...\n$format = $this->formatNegotiator->getBestFormat($acceptHeader, $options['priorities']);\nif (null !== $format) {\n    return $format;\n}\n\nif (isset($options['fallback_format'])) {\n    // if false === fallback_format then we fail here instead of considering more rules\n    if (false === $options['fallback_format']) {\n       return null;\n    }\n\n    // stop looking at rules since we have a fallback defined\n    return $request->getMimeType($options['fallback_format']);\n}\n\n// ...\n\n```\nSo, I think I should be stricter and set my Accept header.\n. ",
    "phiamo": "shit should have looked here before :-)\nhaving the same, there seems not to be any fallback for sending\nAccept: */*\nheaders.\nMy config is:\n```\nfos_rest:\n    ...\n    format_listener:\n        rules:\n            - { path: '^/api', priorities: ['json', 'html'], fallback_format: html, prefer_extension: true }\n            - { path: '^/', priorities: [ 'html', '/'], fallback_format: ~, prefer_extension: true }\n    ...\n```\nin https://github.com/liip-forks/symfony-standard/blob/techtalk/app/config/config.yml the last line does not contain \n'*/*'\ndoes the techtalk sandbox not support _wdt cause this is issueing the request:\nRequest URL:http://localhost/app_dev.php/_wdt/81b0eb\nRequest Method:GET\nStatus Code:406 Not Acceptable\nRequest Headersview source\nAccept:*/*\nAccept-Encoding:gzip,deflate,sdch\nAccept-Language:de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4,en-GB;q=0.2\nCache-Control:max-age=0\nConnection:keep-alive\nCookie:__uvt=; jstree_open=; jstree_load=; uvts=xHNDAjKm3f2wIAe; PHPSESSID=o5act9hg9slk2s6sbej9ukftg3\nHost:local.booksync.net:8081\nReferer:http://local.booksync.net:8081/app_dev.php/feed\nUser-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36\nX-Requested-With:XMLHttpRequest\nor is there any other way implemented i didnt see (.htaccess does not change the request in that way or?)\n. shit should have looked here before :-)\nhaving the same, there seems not to be any fallback for sending\nAccept: */*\nheaders.\nMy config is:\n```\nfos_rest:\n    ...\n    format_listener:\n        rules:\n            - { path: '^/api', priorities: ['json', 'html'], fallback_format: html, prefer_extension: true }\n            - { path: '^/', priorities: [ 'html', '/'], fallback_format: ~, prefer_extension: true }\n    ...\n```\nin https://github.com/liip-forks/symfony-standard/blob/techtalk/app/config/config.yml the last line does not contain \n'*/*'\ndoes the techtalk sandbox not support _wdt cause this is issueing the request:\nRequest URL:http://localhost/app_dev.php/_wdt/81b0eb\nRequest Method:GET\nStatus Code:406 Not Acceptable\nRequest Headersview source\nAccept:*/*\nAccept-Encoding:gzip,deflate,sdch\nAccept-Language:de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4,en-GB;q=0.2\nCache-Control:max-age=0\nConnection:keep-alive\nCookie:__uvt=; jstree_open=; jstree_load=; uvts=xHNDAjKm3f2wIAe; PHPSESSID=o5act9hg9slk2s6sbej9ukftg3\nHost:local.booksync.net:8081\nReferer:http://local.booksync.net:8081/app_dev.php/feed\nUser-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36\nX-Requested-With:XMLHttpRequest\nor is there any other way implemented i didnt see (.htaccess does not change the request in that way or?)\n. btw this is probably the same as the error i am having now for fosrouting request:\nRequest URL:http://local.booksync.net:8081/app_dev.php/js/routing?callback=fos.Router.setData\nRequest Method:GET\nStatus Code:500 Internal Server Error\nRequest Headersview source\nAccept:*/*\nAccept-Encoding:gzip,deflate,sdch\nAccept-Language:de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4,en-GB;q=0.2\nCache-Control:max-age=0\nConnection:keep-alive\nCookie:__uvt=; jstree_open=; jstree_load=; uvts=xHNDAjKm3f2wIAe; PHPSESSID=i43li1ogubomgkm25nq4u2okc3\nHost:local.booksync.net:8081\nReferer:http://local.booksync.net:8081/app_dev.php/feed\nUser-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36\n. btw this is probably the same as the error i am having now for fosrouting request:\nRequest URL:http://local.booksync.net:8081/app_dev.php/js/routing?callback=fos.Router.setData\nRequest Method:GET\nStatus Code:500 Internal Server Error\nRequest Headersview source\nAccept:*/*\nAccept-Encoding:gzip,deflate,sdch\nAccept-Language:de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4,en-GB;q=0.2\nCache-Control:max-age=0\nConnection:keep-alive\nCookie:__uvt=; jstree_open=; jstree_load=; uvts=xHNDAjKm3f2wIAe; PHPSESSID=i43li1ogubomgkm25nq4u2okc3\nHost:local.booksync.net:8081\nReferer:http://local.booksync.net:8081/app_dev.php/feed\nUser-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36\n. ",
    "ogimenezb": "I like the approach in https://github.com/FriendsOfSymfony/FOSRestBundle/issues/610\nAlso consider the same way they do in Github http://developer.github.com/v3/media/#api-v3-media-type-and-the-future\nMaybe we could add an option to automatically parse the version with JMS or you can receive the parameters and then do whatever.\nAnother option would be to append the version to the controller, like A or B\nfos_rest:\n    versioning:\n        parse_auto: true\n        append_controller: false\n        as_parameter: true\nI think this approach is simple yet very powerful.\n. I like the approach in https://github.com/FriendsOfSymfony/FOSRestBundle/issues/610\nAlso consider the same way they do in Github http://developer.github.com/v3/media/#api-v3-media-type-and-the-future\nMaybe we could add an option to automatically parse the version with JMS or you can receive the parameters and then do whatever.\nAnother option would be to append the version to the controller, like A or B\nfos_rest:\n    versioning:\n        parse_auto: true\n        append_controller: false\n        as_parameter: true\nI think this approach is simple yet very powerful.\n. @liuggio \nLe me expand a little my explanation.\nFirst off, lets imagine a case:\n1) You have 20 different controllers (users, products, categories...)\n2) You have the corresponding models, forrms...\n3) You have 5 API versions, 2 of which are deprecated\nThings that you should be able to do:\n1) Serializer Version\n2) Serializer Groups\n3) other stuff\nPossible combinations:\n1) You can have like option A or B. In this case 20 controllers * 4 Actions * 3 API = 240 actions to maintain, if you use forms for POST... 60 Forms. You have to add too the routes: 20 * 3 = 60\n2) You can use the API version for Serialize in Headers + Validation. 20 controllers * 4 actions = 80 actions to maintain. You have to add too the routes: 20\n3) A combination of 1 and 2\nFor option 1 you can have:\nfos_rest:\n    versioning:\n        route_pattern: '/api/{version}/'\n        controller_mapping: '*{version}Controller'\nSo /api/2/Users would map to User2Controller\nFor option 2 you can have:\nfos_rest:\n    versioning:\n        accept_pattern:\n            json: 'application/vnd.myapp+json, application/vnd.myapp[.version]+json, application/vnd.myapp+json;[version]'\n            xml: 'application/vnd.myapp+xml, application/vnd.myapp[.version]+xml, application/vnd.myapp+xml;[version]'\n        controller_mapping: '*{version}Controller'\nThe mapping would be the same as before\napplication/vnd.myapp.2+json  to User2Controller\nFinally we could add and option:\nfos_rest:\n    versioning:\n        ......\n        fallback: true\nThis means: If you can't find a pattern in any controller use the SerializerContext and set the Version\napplication/vnd.myapp.2+json  to UserController\napplication/vnd.myapp.3+json  to UserController\nI think that with this you can have all options:\n1) Multiple versions and one controller\n2) Multiple versions and many controllers\nIf we use this we could expand the pattern:\napplication/vnd.myapp[.version]+json\napplication/vnd.myapp[.version][.group]+json\nThe result would be that users can have several options all leading to the same result:\n/api/2/Users\n/api/Users?version=2\n/api/Users (application/vnd.myapp.2+json)\nDoes controller User2Controller exist?\nYes: Actions are in User2Controller\nNo: Actions are in UserController\nThe last thing is that version and group should be passed to the Action as optional so if someone needs the values they can use them.\nWhat do you think???\n. @liuggio \nLe me expand a little my explanation.\nFirst off, lets imagine a case:\n1) You have 20 different controllers (users, products, categories...)\n2) You have the corresponding models, forrms...\n3) You have 5 API versions, 2 of which are deprecated\nThings that you should be able to do:\n1) Serializer Version\n2) Serializer Groups\n3) other stuff\nPossible combinations:\n1) You can have like option A or B. In this case 20 controllers * 4 Actions * 3 API = 240 actions to maintain, if you use forms for POST... 60 Forms. You have to add too the routes: 20 * 3 = 60\n2) You can use the API version for Serialize in Headers + Validation. 20 controllers * 4 actions = 80 actions to maintain. You have to add too the routes: 20\n3) A combination of 1 and 2\nFor option 1 you can have:\nfos_rest:\n    versioning:\n        route_pattern: '/api/{version}/'\n        controller_mapping: '*{version}Controller'\nSo /api/2/Users would map to User2Controller\nFor option 2 you can have:\nfos_rest:\n    versioning:\n        accept_pattern:\n            json: 'application/vnd.myapp+json, application/vnd.myapp[.version]+json, application/vnd.myapp+json;[version]'\n            xml: 'application/vnd.myapp+xml, application/vnd.myapp[.version]+xml, application/vnd.myapp+xml;[version]'\n        controller_mapping: '*{version}Controller'\nThe mapping would be the same as before\napplication/vnd.myapp.2+json  to User2Controller\nFinally we could add and option:\nfos_rest:\n    versioning:\n        ......\n        fallback: true\nThis means: If you can't find a pattern in any controller use the SerializerContext and set the Version\napplication/vnd.myapp.2+json  to UserController\napplication/vnd.myapp.3+json  to UserController\nI think that with this you can have all options:\n1) Multiple versions and one controller\n2) Multiple versions and many controllers\nIf we use this we could expand the pattern:\napplication/vnd.myapp[.version]+json\napplication/vnd.myapp[.version][.group]+json\nThe result would be that users can have several options all leading to the same result:\n/api/2/Users\n/api/Users?version=2\n/api/Users (application/vnd.myapp.2+json)\nDoes controller User2Controller exist?\nYes: Actions are in User2Controller\nNo: Actions are in UserController\nThe last thing is that version and group should be passed to the Action as optional so if someone needs the values they can use them.\nWhat do you think???\n. We could map to Action '*{version}Action' and try to match the closest number and fallback to main Action.\nUser could choose Controller or Action Mapping.\nBut all this is so the developer can take advantage of Route/Header - Mapping. \nWhat we should at least have is\nfos_rest:\n    versioning:\n        accept_pattern:\n            json: 'application/vnd.myapp+json, application/vnd.myapp[.version]+json, application/vnd.myapp+json;[version]'\n            xml: 'application/vnd.myapp+xml, application/vnd.myapp[.version]+xml, application/vnd.myapp+xml;[version]'\n        route_pattern: '/api/{version}/'\nAnd be able to get the version number in the action to do whatever, the only way we have now to do it is with params.\n. We could map to Action '*{version}Action' and try to match the closest number and fallback to main Action.\nUser could choose Controller or Action Mapping.\nBut all this is so the developer can take advantage of Route/Header - Mapping. \nWhat we should at least have is\nfos_rest:\n    versioning:\n        accept_pattern:\n            json: 'application/vnd.myapp+json, application/vnd.myapp[.version]+json, application/vnd.myapp+json;[version]'\n            xml: 'application/vnd.myapp+xml, application/vnd.myapp[.version]+xml, application/vnd.myapp+xml;[version]'\n        route_pattern: '/api/{version}/'\nAnd be able to get the version number in the action to do whatever, the only way we have now to do it is with params.\n. ",
    "davidkalosi": "I would go a little bit further then just header versioning - adding a feature to a controller method to accept a specific request type would be quite interesting. \nThe Accept header RFC permits something like this Accept: application/my.company.UserInfo+json; v=1\nBeing able to tell at the controller method level what that method should accept would give the whole approach a greater flexibility. This could be done with an annotation like \n/**\n * @Accept (\"application/my.company.UserInfo+json; v=1\")\n */\npublic function getUserinfoAction() {}\nThis is basically a more fine grained approach based on the B variant. As noted this would again lead to referencing multiple controllers/method for one path.\nAn ideal solution would be having an ability do define such mappings on both controller and action levels.\nBasic routing based on a version could be specified at class level  (wildcards like application/vnd.*[json|xml]; v=1) + you could enforce further a specified request at the method level\n. @merk flexibility is the a key issue when providing API versions. there must be an ability to run multiple versions of a service (or resource) since most APIs evolve by adding or refining new functionality. I was never a fan of URL based versioning since the /v1/ breaks the REST principles that a URL uniquely represents a resource. \nTaken the UserInfo example in my previous post - the v2 or the v1 representations of the UserInfo service are 2 different representations of the exact same resource with the v2 version containing more information resulting from new features in a software and I must run a client capable of interpreting the new properties in the v2 version. \nBut  /api/v1/userinfo vs /api/v2/userinfo are 2 logically different things considering the REST principles. \nSo with a header based approach we will end up with theoretically N unique representations that live at the same URI and there must be routing mechanism that will route the request to the right controller action.\n. so what do the versioning plans look like in FOSRestBundle? :)\n. @willdurand absolutely agree. I have just joined the discussion today so I have no idea how far the versioning talk has gone, but as it seems it's still in a heavy brainstorming mode :) \n. is there any particular reason that the addParam method is missing from the ParamFetcherInterface ? \n. is there any particular reason that the addParam method is missing from the ParamFetcherInterface ? \n. My opinion is that the current state is confusing. Adding runtime parameters is not an implementation detail but an extension of the api. So it should either be defined in the ParamFetcherInterface or create a MutableParamFetcherInterface or whatever.  my 2 cents.\n. ",
    "mgiustiniani": "if you interest i added a PR for symfony/routing component https://github.com/symfony/symfony/pull/10512 for add versioning with version_compare(a php function) in my project\n. @willdurand  if you want try my bundle for versioning https://github.com/mgiustiniani/ManticoraRestExtraBundle\ni need feedback!\nmy implementation is temporary. after expression language injection in symfony routing i can remove this.\n. ok but only unit test case? because with this PR i added a field parsing in annotation Route like original symfony annotation Route.\nfor functional case i need symfony/routing 2.4. i can introduce this depency in platform test?\n. with initial test, tests break with symfony2.2 but not in symfony2.3 in the same point.  i look for a reason and i notice that a suite test for symfony2.3 works because symfony/components are updated for symfony2.4 packages. is a correct behaviour? \n. i created new sets of fixtures for this feature(with skipped feature for symfony/routing < 2.4), i added a little lines of docs. we can create a Cookbook section? \n. with this pull https://github.com/mgiustiniani/FOSRestBundle/commit/6782641b8394211c7f96e267c70c3f3b508f0136\ni change FormatListener and VersionListener priority upper to 32.\nUrlMatcher has priority 32 with FormatListener (priority 34)and VersionListener (priority 33) i can see a version attribute setted in expression language, without this change i have this attribute always null.\n. i fix a typo but travis got error now, how can retry a tests?\n. wait guys, i want add first an my other PR(https://github.com/FriendsOfSymfony/FOSRestBundle/pull/714), these PRs need  to resolve merge conflict. \n. i added multiple routing in Routing Loader framework test, you need other tests?\n. i found bug \n``` php\n   $annotations = $this->readRouteAnnotation($method);\n        if ($annotations) {\n            foreach ($annotations as $annotation) {\n            $routeName    = $this->namePrefix.strtolower($routeName);\n            $pattern      = implode('/', $urlParts);\n            $defaults     = array('_controller' => $method->getName());\n            $requirements = array('_method' => strtoupper($httpMethod));\n\n```\na solution is remove line 198\nphp\n$routeName    = $this->namePrefix.strtolower($routeName);\n. for my fix i need this change in etalon route, is correct for you?\n``` yaml\napi_get_billing_spendings:\n  pattern:      /billing/spendings.{_format}\n  controller:   ::getBillingSpendingsAction\n  method: GET\napi_get_billing_spendings_by_campaign:\n  pattern:      /billing/spendings/{campaign}.{_format}\n  controller:   ::getBillingSpendingsByCampaignAction\n  method: GET\napi_get_billing_payments:\n  pattern:      /billing/payments.{_format}\n  controller:   ::getBillingPaymentsAction\n  method: GET\napi_get_billing_earnings:\n  pattern:      /billing/earnings.{_format}\n  controller:   ::getBillingEarningsAction\n  method: GET\napi_get_billing_earnings_by_platform:\n  pattern:      /billing/earnings/{platform}.{_format}\n  controller:   ::getBillingEarningsByPlatformAction\n  method: GET\napi_get_billing_withdrawals:\n  pattern:      /billing/withdrawals.{_format}\n  controller:   ::getBillingWithdrawalsAction\n  method: GET\n```\n. with 2.6 we can inject custom expression language https://github.com/symfony/symfony/pull/12006\n. correct a typo. \np.s. i want added unit tests for this PR after approving of this https://github.com/FriendsOfSymfony/FOSRestBundle/pull/714, if you ok\n. ",
    "INSEAD-asim": "Hi @lsmith77,\nCan you help where this change in latest version of FOSRestBundle? I unable to find any reference in listener-support document.\n. Thanks @lsmith77 !\n. I found that issue is only with SOAP 1.1 as it has same content type i.e. text/xml. The SOAP 1.2 is still okay as content type is application/soap+xml. Not sure if we can use mime type as SOAP is also xml. Here is the link with more details on SOAP headers http://www.herongyang.com/Web-Services/Perl-SOAP-1-2-Request-Differences-SOAP-1-1-and-1-2.html\n. I tried to override XML Decoder but it always asked to return array(). The modification is to just bypass the body listener in case of SOAP request. The SOAP 1.1 don't have anything specific except SoapAction. Happy to implement something more beautiful.\n. OK. Let me check again on my side. Thanks for tip.\n. Can you hint how to override body listener? Since it is not available by default in configuration for overriding.\nAlso, what I feel that it will create lot of extra work on developer side to override and manage body listener with default body listener provided by FOSRestBundle. This fix will help to overcome this situation. Since we are using this bundle as a part of application not full application.\n. Your idea seems very good. I will try to work on this.\nMeanwhile, I push one fix for same thing. It stopped body_listener with the previous fix. Check it out at https://github.com/INSEAD-asim/FOSRestBundle/commit/16a316364a93338c13fdeeadcda6f820ff345ad8\n. Here is the list of all listeners (called, not called). Thank you!\nCalled Listeners\n\n\nNot Called Listeners\n\n\n\n. Hi @xabbuh , How can I return json response for 401? as per documentation link shared earlier, it should return after adding exception: true.. I implemented listener for response body. Thanks anyway.. ",
    "dimitrilahaye": "Same issue is back - I see it just now :-/\n. Same issue is back - I see it just now :-/\n. ",
    "ioleo": "@lsmith77 thanks, it works now :)\n. ",
    "cobaltjeh": "Yes, I will start on a PR. Since I am new on GitHub please give me some time figure out the correct workflow. ;)\n. Yes it is. Perhaps include this in a new major version?\n. Yes it is. Perhaps include this in a new major version?\n. ",
    "istaveren": "I do this.\n$content = $this->getRequest()->getContent();\n  $arrBody = json_decode($content, true);\n;-).\n. I don't really know. I didn't enable it in config.yml.\nThis is my config.yml\nfos_rest:\n    routing_loader:\n        default_format: json\n    view:\n        formats:\n            json: true\nBut for this controller which is basically some key value store. It accepts all kind of json to be stored at the given key. Like /memmory/ and POST some json.\nThis can't be converted to an known object because it can be anything. \nBut because the listener is registered in the kernel somehow and the content type is json the listener is triggered and throws this exception.\nMaybe I might be able to switch it of for this specific controller, but I am not sure how to do that based on the route.  \nMaybe it is caused by the 'old' way of converting json to objects that I am still using. Via a custom SerializedParamConverter\nservices.yml\nsomebundle.serialized_param_converter:\n         class: SomeBundle\\Lib\\Request\\SerializedParamConverter\n         tags:\n           - { name: request.param_converter, priority: -100 }\n         arguments: ['@serializer']\nBut I don't see how this will use the BodyListner.\n. That doesn't help.\nfos_rest:\n    body_converter:\n        enabled: false\n    routing_loader:\n        default_format: json\n    view:\n        formats:\n            json: true\nI will fork the bundle and try to write some test for this to find out what happens.\n. Thanks\n. ",
    "leclercb": "For those we would face the same problem, here is what I did:\nAdd parameter: \n    fos_rest.view_handler.jsonp.class: XYZ\\ApiBundle\\Common\\JsonpHandler\nClass:\n```\n<?php\nnamespace XYZ\\ApiBundle\\Common;\nuse FOS\\RestBundle\\View\\View;\nuse FOS\\RestBundle\\View\\ViewHandler;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\nclass JsonpHandler\n{\nprotected $callbackParam;\n\npublic function __construct($callbackParam)\n{\n    $this->callbackParam = $callbackParam;\n}\n\nprotected function getCallback(Request $request)\n{\n    $callback = $request->query->get($this->callbackParam);\n    $validator = new \\JsonpCallbackValidator();\n\n    if (!empty($callback) && !$validator->validate($callback)) {\n        throw new BadRequestHttpException('Invalid JSONP callback value');\n    }\n\n    return $callback;\n}\n\npublic function createResponse(ViewHandler $handler, View $view, Request $request, $format)\n{\n    $response = $handler->createResponse($view, $request, 'json');\n\n    if ($response->isSuccessful()) {\n        $callback = $this->getCallback($request);\n\n        if (empty($callback)) {\n            $response->headers->set('Content-Type', $request->getMimeType('json'));\n        } else {\n            $response->setContent($callback . '(' . $response->getContent() . ')');\n            $response->headers->set('Content-Type', $request->getMimeType($format));\n        }\n    }\n\n    return $response;\n}\n\n}\n```\n. I'll create the PR.\nThat's why I change the content type:\nif (empty($callback)) {\n                $response->headers->set('Content-Type', $request->getMimeType('json'));\n            } else {\n                $response->setContent($callback . '(' . $response->getContent() . ')');\n                $response->headers->set('Content-Type', $request->getMimeType($format));\n            }\n. I created PR:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/665\nI hope I did it correctly as it's the first time I do this...\n. ",
    "josegranja": "I have tracked down the error an apparently this is caused by the JMSSerailizerBundle. I have posted an issue on their site:\nhttps://github.com/schmittjoh/JMSSerializerBundle/issues/357\nis there any workaround to this? \n. ",
    "cblegare": "I agree that the format negotiation could be refactored.  This refactor may induce BC break.  I must say I do not have much time right now.\n. I can submit a PR in the next few days.  I did not in the first place because of the BC break.\nI saw that version 2 is on the roadmap.  Is a complete refactor of the ViewHandler expected ?  Because it is becoming quite a mess, IMO...   I might have some time to give it a try, depending when the version 2 is intended to be released.\n. Darn, this method was public for one reason : testing the ConfigurableViewHandlerInterface methods.  These methods are intrinsically flawed, IMO, and that is not going to help me put efforts in rewriting the tests, mocking the entire world for these three.  Hence, my PR will probably not include refactored tests.\n. handle would not be enough, there are other uses ;)\nAnyway, the pull request makes it more messy but less bug-prone.\n. Of course.  I'll do it tomorrow.\n2014-05-24 8:47 GMT-04:00 Lukas Kahwe Smith notifications@github.com:\n\ncan you make a note of the BC break in\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/UPGRADING.md?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/779#issuecomment-44086098\n.\n. Sorry for being late ;)\n. Sorry for being late ;)\n. Squashed it all up.  I hope everything is ok !\n. Squashed it all up.  I hope everything is ok !\n. \n",
    "klattiation": "I'm sorry, you're right. I retried the request from a browser application and it works, Probably curl does something wrong when using LINK.\nThanks for your thoughts guys!\n. I'm sorry, you're right. I retried the request from a browser application and it works, Probably curl does something wrong when using LINK.\nThanks for your thoughts guys!\n. ",
    "Svel": "Somewhere from Controller\\ExceptionController --> fos_rest.view.exception_wrapper_handler --> till ViewHandler::handle() and ViewHandler::initResponse()\ncan't explain better, sorry :/ \nPS: TY @willdurand for http://williamdurand.fr/2012/08/02/rest-apis-with-symfony2-the-right-way/ :)\n. ",
    "Crell": "I don't think it's a serious break, since the the kernel logger extends the PSR logger now anyway.\n. ",
    "vigilant8": "I solved it.\nInstead of using the following code in config.yml:\nyaml\nfos_rest:\n    view:\n        view_response_listener: true\n        failed_validation: HTTP_BAD_REQUEST\n        default_engine: php\n        formats:\n            json: true\n            xml: true\n            rss: false\n    format_listener:\n        prefer_extension: true\n    body_listener:\n        decoders:\n            json: fos_rest.decoder.json\n    param_fetcher_listener: true\n    allowed_methods_listener: true\nUse this:\nyaml\nfos_rest:\n    routing_loader:\n        default_format: json\n    view:\n        view_response_listener: true\n    param_fetcher_listener: true\n    allowed_methods_listener: true\nespecially the lines \nyaml\nformat_listener:\n        prefer_extension: true\ncause the problem.\n. I solved it.\nInstead of using the following code in config.yml:\nyaml\nfos_rest:\n    view:\n        view_response_listener: true\n        failed_validation: HTTP_BAD_REQUEST\n        default_engine: php\n        formats:\n            json: true\n            xml: true\n            rss: false\n    format_listener:\n        prefer_extension: true\n    body_listener:\n        decoders:\n            json: fos_rest.decoder.json\n    param_fetcher_listener: true\n    allowed_methods_listener: true\nUse this:\nyaml\nfos_rest:\n    routing_loader:\n        default_format: json\n    view:\n        view_response_listener: true\n    param_fetcher_listener: true\n    allowed_methods_listener: true\nespecially the lines \nyaml\nformat_listener:\n        prefer_extension: true\ncause the problem.\n. ",
    "ogizanagi": "In a similar way, I'd like to be able to specify more informations when throwing Exceptions, by providing the API user a list of potentials, or occured errors that has caused the Exception.\n. Thanx for your answer.\nI've thought to use the parent resources solution, as I already use it for more common usages.\nBut the problem is that, in this case, the getAction($id) method will generate a route corresponding to the /api/devices/{id}/accesses pattern instead of the desired /api/devices/accesses/{id} one. :/\n. Thank you. I've tried with the prefix. The behaviour seems to be exactly the same as RouteRessource. \nIn fact, I think I've made an error. The Rest\\RouteResource(\"devices/access\") should work. But the problem was that /api/devices/{id} tries to catch the /api/devices/accesses/{id}, with {id} = accesses ...\nIs it possible to use both automatic route generation and the @Get annotation, only to specify requirements for id ?\nEDIT: NVM, it works.\n. @Ener-Getick : What about adding a check in the RequestBodyParamConverter::supports method for a list of approved paths from a new configuration parameter:\nyaml\nfos_rest:\n    body_converter:\n        enabled: true\n        paths:  ['^/'] # defaults\nBy default, when enabled, the converter will be supported for every requests (so no BC break). Otherwise, it can be configured to include required paths (or can work with exclusions instead, or both).\nIt'll do the trick for FOSRestBundle  < 2.0, and could be removed in 2.0 in favor of explicitly requesting the converter on the controller. \n. ",
    "ajaypatelbardoli": "I mean how can I set the common prototyped response for all rest API calls.\nSent from my iPhone\n\nOn 06-Feb-2014, at 19:04, William Durand notifications@github.com wrote:\nSorry, what?\n\u2014\nReply to this email directly or view it on GitHub.\n. @lsmith77 thanks man let me see jms serializer bundle. :)\n. \n",
    "rande": "// cc @Bladrak\n. ",
    "scasei": "that may be right, but i have followed the instructions on how to setup up media rest api and got an error, so from my side of view one thing has to be changed: the instructions or the xmlns\n. I followed the instruction on this page:\nhttp://sonata-project.org/bundles/media/master/doc/reference/api.html\nThen I tried to open the route '/api/doc' and got the error.\nShould I grab more information?\nFull error description:\nFileLoaderLoadException: Cannot import resource \"C:\\wamp\\www\\project\\vendor\\sonata-project\\media-bundle/Resources/config/routing/api.xml\" from \"C:/wamp/www/project/app/config\\routing.yml\". ([WARNING 1549] failed to load external entity \"in_memory_buffer\" (in n/a - line 0, column 0)\n[WARNING 3084] Element '{http://www.w3.org/2001/XMLSchema}import': Failed to locate a schema at location 'in_memory_buffer'. Skipping the import. (in in_memory_buffer - line 9, column 0)\n[ERROR 1845] Element '{http://friendsofsymfony.github.com/schema/rest}routes': No matching global declaration available for the validation root. (in file:///C:/wamp/www/project/web/ - line 5, column 0))\n. \"This path seems wrong in your log\": You mean the mixed slahes? Thats not a problem for windows PHP. Will be translated slightly.\nAdditionally the error occurs if I insert the 'sonata_api_media' route from instructions and disapear when I delete the route. (means that routing.yml will be found) \n. from my composer.lock:\njson\n            \"name\": \"friendsofsymfony/rest-bundle\",\n            \"version\": \"1.2.2\",\n            \"target-dir\": \"FOS/RestBundle\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/FriendsOfSymfony/FOSRestBundle.git\",\n                \"reference\": \"7c81a1879c5d8a3727932674509e96b2bb7a796e\"\n            },\n. My server software signature:\nApache/2.2.26 (Win32) mod_ssl/2.2.26 OpenSSL/1.0.1e PHP/5.5.8\nIs there something i could test or investigate?\n. ",
    "Bladrak": "@lsmith77 here's the api.xml routing file:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\n<import type=\"rest\" resource=\"sonata.media.controller.api.gallery\" name-prefix=\"sonata_api_media_gallery_\" />\n<import type=\"rest\" resource=\"sonata.media.controller.api.media\" name-prefix=\"sonata_api_media_media_\" />\n\n\n```\nWhen we remove the type: rest from the main routing configuration, we get the following exception:\nCannot import resource \"/web/Ekino/Sonata/src/sf2-sonata-sandbox/vendor/sonata-project/news-bundle/Resources/config/routing/api.xml\" from \"/web/Ekino/Sonata/src/sf2-sonata-sandbox/app/config/routing_api.yml\". ([ERROR 1845] Element '{http://friendsofsymfony.github.com/schema/rest}routes': No matching global declaration available for the validation root. (in /web/Ekino/Sonata/src/sf2-sonata-sandbox/web/ - line 5, column 0))\nNot sure where the problem is precisely, but I'm unable to reproduce @scasei's issue.\n. This path seems wrong in your log: C:/wamp/www/project/app/config\\routing.yml; I'm not familiar enough with Windows to help you with that though...\nI've noticed that there was an issue with an earlier version of Symfony (2.0.15 - cf https://github.com/symfony/symfony/issues/4479). Any idea @lsmith77?\n. Yep, that's what I meant. Ok then, didn't know about that.\nI think the issue comes from the fact that you're unable to parse the http://friendsofsymfony.github.com/schema/rest XML schema definition that's at https://raw.github.com/FriendsOfSymfony/FOSRestBundle/master/Resources/config/schema/routing/rest_routing-1.0.xsd\nI think we should wait for @lsmith77 insight about that. :)\n. Our requirement for FOSRestBundle in SonataMediaBundle is \"friendsofsymfony/rest-bundle\": \"~1.1\". Should we require ~1.2 instead?\n. ",
    "Soulaimaniya": "Up ! \nI followed every possible way to solve this issue, but I keep getting this error message : \n[2/2] FileLoaderLoadException: Cannot import resource \"C:\\wamp\\www\\sandbox\\vendor\\sonata-project\\news-bundle/Resources/config/routing/api.xml\" from \"C:/wamp/www/sandbox/app/config\\routing_api.yml\". ([WARNING 1549] failed to load external entity \"in_memory_buffer\" (in n/a - line 0, column 0)\n[WARNING 3084] Element '{http://www.w3.org/2001/XMLSchema}import': Failed to locate a schema at location 'in_memory_buffer'. Skipping the import. (in in_memory_buffer - line 9, column 0)\n[ERROR 1845] Element '{http://friendsofsymfony.github.com/schema/rest}routes': No matching global declaration available for the validation root. (in file:///C:/wamp/www/sandbox/web/ - line 5, column 0)) \nHelp! \n. This is my api.xml : \nxml version=\"1.0\" encoding=\"UTF-8\" ?\n\n<import type=\"rest\" resource=\"sonata.news.controller.api.post\" name-prefix=\"sonata_api_news_post_\" />\n<import type=\"rest\" resource=\"sonata.news.controller.api.comment\" name-prefix=\"sonata_api_news_comment_\" />\n\nand this is how my routing_api.yml :  \nNelmioApiDocBundle:\n    resource:     \"@NelmioApiDocBundle/Resources/config/routing.yml\"\n    prefix:       /doc\nsonata_api_news:\n    type:         rest\n    prefix:       /news\n    resource:     \"@SonataNewsBundle/Resources/config/routing/api.xml\"\nsonata_api_media:\n    type:         rest\n    prefix:       /media\n    resource:     \"@SonataMediaBundle/Resources/config/routing/api.xml\"\nsonata_api_notification:\n    type:         rest\n    prefix:       /notification\n    resource:     \"@SonataNotificationBundle/Resources/config/routing/api.xml\"\nsonata_api_ecommerce_product:\n    type:         rest\n    prefix:       /ecommerce\n    resource:     \"@SonataProductBundle/Resources/config/routing/api.xml\"\nsonata_api_ecommerce_order:\n    type:         rest\n    prefix:       /ecommerce\n    resource:     \"@SonataOrderBundle/Resources/config/routing/api.xml\"\nsonata_api_ecommerce_invoice:\n    type:         rest\n    prefix:       /ecommerce\n    resource:     \"@SonataInvoiceBundle/Resources/config/routing/api.xml\"\nsonata_api_ecommerce_customer:\n    type:         rest\n    prefix:       /ecommerce\n    resource:     \"@SonataCustomerBundle/Resources/config/routing/api.xml\"\nsonata_api_ecommerce_basket:\n    type:         rest\n    prefix:       /ecommerce\n    resource:     \"@SonataBasketBundle/Resources/config/routing/api.xml\"\nsonata_api_page:\n    type:         rest\n    prefix:       /page\n    resource:     \"@SonataPageBundle/Resources/config/routing/api.xml\"\nsonata_api_user:\n    type:         rest\n    prefix:       /user\n    resource:     \"@SonataUserBundle/Resources/config/routing/api.xml\"\nI've tried every single instruction, everything fails. \n. is there a cmd to upgrade symfony ? mine is v2.3.11\n. updated to symfony 2.3.12, same error. \n. ",
    "fabricek": "same error in Symfony version 2.5 somebody has solved it ? Maybe the beautifull Soulaimaniya ?\n. The solution\n\nI remove the bundle Fos rest in the vendor folder \\vendor\\friendsofsymfony\\rest-bundle \nand replace in composer.json \"friendsofsymfony / rest-bundle\": \"1.1.*\" instead of \"~ 1.1\". Make an composer update and no more error.\n. The problem is only in windows (wamp for me). I ll try on a debian machine with success. I don't know how to solve it in windows. It s a fos/rest problem with a  fos/restbundle version above 1.1.* on windows only.\n. the problem is finally solved. and i made a pr. #744 and read #739\n. The solution\n\nI remove the bundle Fos rest in the vendor folder and replace in composer.json \"friendsofsymfony / rest-bundle\": \"1.1.*\" instead of \"~ 1.1\". Make an composer update and no more error.\n. Unfortunately can't upgrade upper than 1.1.* (not 1.2, 1.3 ...possible). Any ideas ? \nThe problem is only in windows (wamp for me). I ll try on a debian machine with success. I don't know how to solve it in windows. It s a fos/rest problem with a  fos/restbundle version above 1.1.* on windows only.\n. The problem is only in windows (wamp for me). I ll try on a debian machine with success. I don't know how to solve it in windows. It s a fos/rest problem with a  fos/restbundle version above 1.1.* on windows only.\n. ---\nFinally solved :\n\nOn windows systems FriendsOfSymfony/FOSRestBundle Tests  are red : Failures!\nAll versions of of fos restbundle above 1.1.* are concerned 1.2, 1.3, ... This is due to the use of php realpath() and schemaValidateSource() functions. On windows, directory separator is \\,on linux / and realpath use one of them as appropriate.\nschemaValidateSource() accept only / slashes as directory separators and not basckslashes.\nIn FOS\\RestBundle\\Routing\\Loader\\RestXmlCollectionLoader.php  we have :\n$restRoutinglocation = realpath(DIR.'/../../Resources/config/schema/routing/rest_routing-1.0.xsd');\n$source = <<schemaValidateSource($source)). So there is no errors in linux systems. But we have errors on windows system as schemaValidateSource() expected /(slashes) as directory separator in file path while realpath use \\ in windows ($restrouting=realpath...).\nSo the solution is : after realpath() we have to replace backslashes with slashes in paths before the use of schemaValidateSource() .\nIn our case that is in FOSRestBundle / Routing / Loader / RestXmlCollectionLoader.php\n        $restRoutinglocation = realpath(DIR.'/../../Resources/config/schema/routing/rest_routing-1.0.xsd');\nwe must add after this line :\n        $restRoutinglocation =  str_replace('\\', '/', $restRoutinglocation);\nLinux system are not affected only windows path so I've made a pr.\n\nNotice that there is an error for the second path in this file :\n$routinglocation = realpath(DIR.'/../../Resources/config/schema/routing/routing-1.0.xsd');\nThis path doesn't exist and we have to replace it with :\n$routinglocation = realpath(DIR.'/../../Resources/config/schema/routing-1.0.xsd');\nand add just after :\n$Routinglocation =  str_replace('\\', '/', $Routinglocation);\n\n. Ok i'll do that\n. Done.\n2014-04-13 11:02 GMT+02:00 Lukas Kahwe Smith notifications@github.com:\n\nif you can fix the space intention issues I am fine with merging.\n\nReply to this email directly or view it on GitHubhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/744#issuecomment-40302941\n.\n\n\nCordialement,\nFabrice Kuissu\n. As you may see, you have 2 paths. I think the second path is not necessary\n$routinglocation. You can verify that there is no file in $routinglocation\n= realpath(DIR.'/../../Resources/config/schema/routing/routing-1.0.xsd\nthe file is one dir above. $restRoutinglocation is ok after the trick. It works on windows\nand linux and it's even not necessary to change the wrong path. But\n$restRoutinglocation is absolutely necessary. No more explanations for that.\n2014-04-13 2:24 GMT+02:00 Tobias Schultze notifications@github.com:\n\nIn Routing/Loader/RestXmlCollectionLoader.php:\n\n@@ -177,7 +177,9 @@ public function supports($resource, $type = null)\n     protected function validate(\\DOMDocument $dom)\n     {\n         $restRoutinglocation = realpath(DIR.'/../../Resources/config/schema/routing/rest_routing-1.0.xsd');\n-        $routinglocation = realpath(DIR.'/../../Resources/config/schema/routing/routing-1.0.xsd');\n\nYou said, the error is only on windows. But how did it ever work when the\npath is wrong?\n\nReply to this email directly or view it on GitHubhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/744/files#r11562672\n.\n\n\nCordialement,\nFabrice Kuissu\n. Remember that only\nFOSRestBundle/commits/master/Resources/config/schema/routing/routing-1.0.xsd\npath is wrong. It is in\nFOSRestBundle/commits/master/Resources/config/schema/routing-1.0.xsd in\nyour master version and below. So why use this false path ?\nFOSRestBundle https://github.com/FriendsOfSymfony/FOSRestBundle /\nResourceshttps://github.com/FriendsOfSymfony/FOSRestBundle/tree/master/Resources/\nconfighttps://github.com/FriendsOfSymfony/FOSRestBundle/tree/master/Resources/config/\nschema /routing-1.0.xsd\n2014-04-13 10:48 GMT+02:00 Lukas Kahwe Smith notifications@github.com:\n\nIn Routing/Loader/RestXmlCollectionLoader.php:\n\n@@ -177,7 +177,9 @@ public function supports($resource, $type = null)\n     protected function validate(\\DOMDocument $dom)\n     {\n         $restRoutinglocation = realpath(DIR.'/../../Resources/config/schema/routing/rest_routing-1.0.xsd');\n-        $routinglocation = realpath(DIR.'/../../Resources/config/schema/\n  routing/routing-1.0.xsd');\n-   $restRoutinglocation =  str_replace('\\', '/', $restRoutinglocation);\n-        $routinglocation = realpath(DIR.'/../../Resources/config/schema/routing-1.0.xsd');\n-   $routinglocation =  str_replace('\\', '/', $routinglocation);\n\nintention is off\n\nReply to this email directly or view it on GitHubhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/744/files#r11563925\n.\n\n\nCordialement,\nFabrice Kuissu\n. And again the phpunit tests for fosrestbundle are red in windows system.\n2014-04-13 10:55 GMT+02:00 Fabrice Kuissu fabrice@actacenter.com:\n\nRemember that only\nFOSRestBundle/commits/master/Resources/config/schema/routing/routing-1.0.xsd\npath is wrong. It is in\nFOSRestBundle/commits/master/Resources/config/schema/routing-1.0.xsd in\nyour master version and below. So why use this false path ?\nFOSRestBundle https://github.com/FriendsOfSymfony/FOSRestBundle /\nResourceshttps://github.com/FriendsOfSymfony/FOSRestBundle/tree/master/Resources/\nconfighttps://github.com/FriendsOfSymfony/FOSRestBundle/tree/master/Resources/config/\nschema /routing-1.0.xsd\n2014-04-13 10:48 GMT+02:00 Lukas Kahwe Smith notifications@github.com:\nIn Routing/Loader/RestXmlCollectionLoader.php:\n\n\n@@ -177,7 +177,9 @@ public function supports($resource, $type = null)\n     protected function validate(\\DOMDocument $dom)\n     {\n         $restRoutinglocation = realpath(DIR.'/../../Resources/config/schema/routing/rest_routing-1.0.xsd');\n-        $routinglocation = realpath(DIR.'/../../Resources/config/schema/\n  routing/routing-1.0.xsd');\n-  $restRoutinglocation =  str_replace('\\', '/', $restRoutinglocation);\n-        $routinglocation = realpath(DIR.'/../../Resources/config/schema/routing-1.0.xsd');\n-  $routinglocation =  str_replace('\\', '/', $routinglocation);\n\nintention is off\n\nReply to this email directly or view it on GitHubhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/744/files#r11563925\n.\n\n\nCordialement,\nFabrice Kuissu\n\n\nCordialement,\nFabrice Kuissu\n. ",
    "lyzkov": "I have the same error:\n[ERROR 1845] Element '{http://friendsofsymfony.github.com/schema/rest}route  \n  s': No matching global declaration available for the validation root.\ncomposer.json:\n\"symfony/symfony\": \"~2.4\",\n        \"friendsofsymfony/rest-bundle\": \"1.3.*\",\nPHP 5.5.11\nOSX 10.9.3\nMy routing.xml file:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\n\n```\n. I have the same error:\n[ERROR 1845] Element '{http://friendsofsymfony.github.com/schema/rest}route  \n  s': No matching global declaration available for the validation root.\ncomposer.json:\n\"symfony/symfony\": \"~2.4\",\n        \"friendsofsymfony/rest-bundle\": \"1.3.*\",\nPHP 5.5.11\nOSX 10.9.3\nMy routing.xml file:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\n\n```\n. dev-master is working like a charm. :)\n2014-06-02 13:29 GMT+02:00 Lukas Kahwe Smith notifications@github.com:\n\ncan you try current master?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/685#issuecomment-44826372\n.\n\n\nPozdrawiam,\nPiotr \u0141yczba\n. ",
    "fdonzello": "If an annotation is set (for seralizationGroups) I get:\nThis context was already initialized and is immutable; you cannot modify it anymore.\n. This is what I want to do:\n```\n$view = View::create($data != null ? $data : array(), Response::HTTP_OK);;\n$view->getResponse()->setEtag(md5($this->handleView($view)));\nreturn $view;\n```\n. ",
    "slavafomin": "I just though maybe someone with good understanding of bundle internals could review and update the documentation with this perspective in mind.\n. ",
    "aosmialowski": "@lsmith77 sorry, did not have some spare time to look more deeply into this issue. Will try to do some testing soon.\n. ",
    "danielentryless": "I have the same issue.\n. ",
    "gnat42": "I have the exact same issue as well. Why is this closed?\n. So its a bit confusing, but seem to have gotten it working because I found bug #129. This explains that in my app/config/routing.yml file is where the type: rest is required, I had it in my bundle's routing.yml which doesn't work. Is that a bug/expected?\n. I can - first off though I need to understand one thing.\nWhy does the type: rest have to be in the app routing.yml file? Why does it not work when defined in a bundle routing.yml file?\nFor example\n//app/config/routing.yml\nacme_demo:\n  resource: Acme\\DemoBundle\\Controller\\DemoController\n  type: rest\n  name_prefix: api_v1_\nwill work however\n```\n//app/config/routing.yml\nacme_demo:\n  resource: \"@AcmeDemoBundle\\Resources\\config\\routing.yml\n//AcmeDemoBundle/Resources/config/routing.yml\nacme_demo_routes:\n  type: rest\n  name_prefix: api_v1_\n  resource: Acme\\DemoBundle\\Controller\\DemoController\n```\ndoes not work.\nI understand this is because whatever is loading the routes can look at the type in the app/config/routing.yml file but somehow ignores it within a bundle? This doesn't make much sense to me since I can do the above if I use annotations such as\n```\n//app/config/routing.yml\nacme_demo:\n  resource: \"@AcmeDemoBundle\\Resources\\config\\routing.yml\n//AcmeDemoBundle/Resources/config/routing.yml\nacme_demo_routes:\n  type: annotations\n  resource: \"@Acme\\DemoBundle\\Controller\"\n```\nand this works. So the question is why is the type ignored when defined inside a bundle? If that is not a bug then I can explain the issue. However it somehow feels like a bug to me.\n. so @ikodev  I'm guessing that if you did\napp/config/config.yml\nmain_route_api:\n    type: rest\n    resource: \"@anyApiBundle/Resources/config/routing.yml\"\n    prefix: /api/\nanyApiBundle/Resources/config/routing.yml\nroute_api_v1:\n  type: rest\n  resource: \"@anyApiBundle/Resources/config/v1/routing.yml\"\n  prefix:   /v1/\n  name_prefix: api_v1_\nand continued on it would work... based on my new understanding from @stof \n. @stof based on your explanation of the type field, I'm wondering. Is there a way to have the app/config/routing.yml file handled by the FOSRest Routing object instead of symfony's? I would expect this is configurable somehow in app/config/config.yml...\n. Awesome - I'll look at modifying the docs with all this new found knowledge sometime today.\nOne more clarification though. Suppose I make the above change so that the rest bundle is loading all routes. I presume that this doesn't cause ALL routes to be exposed via REST? For example\n```\napp/config/config.yml\nframework:\n    router:\n        resource: '%kernel.root_dir%/config/routing.yml'\n        type: rest\napp/config/routing.yml\nmain_route:\n    resource: \"@AcmeDemoBundle/Resources/config/routing.yml\"\n    prefix: /\nmain_route_api:\n    type: rest\n    resource: \"@AcmeDemoBundle/Resources/config/api.yml\"\n    prefix: /api/\n    name_prefix: api_\nsrc/Acme/DemoBundle/Resources/config/routing.yml\nroutes:\n    resource: \"@AcmeDemoBundle/Controller\"\n    type: annotations\n    prefix: /\nsrc/Acme/DemoBundle/Resources/config/api.yml\napi_v1:\n  type: rest\n  resource: \"@AcmeDemoBundle/Controller/ApiController\"\n  prefix:   /v1\n  name_prefix: v1_\n```\nI should then see all the routes defined by Annotations in all my AcmeDemo Controllers, and the api accessible via the api controller. Is that correct? Or will all controllers be exposed via rest?\n. Not that I know of. My security.yml:\n```\n    firewalls:\n        dev:\n            pattern:    ^/(_(profiler|wdt)|css|images|js)/\n            security:   false\n    oauth_login:\n        pattern:    ^/oauth/v2/auth/login$\n        security:   false\n\n    oauth_token:\n        pattern:    ^/oauth/v2/token\n        security:   false\n\n    oauth_authorize:\n        pattern:    ^/oauth/v2/auth\n        form-login:\n            check_path: /oauth/v2/auth/login_check\n            login_path: /oauth/v2/auth/login\n            use_referer: true\n    login:\n        pattern:  ^/login$\n        anonymous: ~\n\n    api:\n        pattern:    ^/api/.*\n        fos_oauth:  true\n        stateless:  true\n\n    main_app:\n        ....\n\naccess_control:\n    - { path: ^/oauth/v2/auth/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }\n    - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }\n    - { path: ^/authorize, roles: ROLE_API }\n    - { path: ^/oauth, roles: ROLE_API }\n    - { path: '^/[^/]+/doc/api', roles: ROLE_API }\n    - { path: ^/api, roles: ROLE_API }\n\n```\nAnd the api is all through /api for example my controller:\n<?php \n/**\n * Description of ApiController\n *\n * @author gnat\n * @Route(\"/api\")\n */\nclass ApiController extends \\FOS\\RestBundle\\Controller\\FOSRestController\n{\n    /**\n     * Create IBD Case,\n     *\n     * @ApiDoc(\n     *   resource = true,\n     *   description = \"Creates a new IBD case\",\n     *   input = \"create_ibd\"\n     * )\n     *\n     * @REST\\Post(\"/ibd/cases\")\n     *\n     * @param Request $request the request object\n     *\n    */\n    public function postIbdCasesAction(Request $request)\n    {\n        return $this->postCase($request,'ibd');\n    }\n}\nThere are other functions in that same class and the security context has a token as it should. Like the function I posted above.\nSo how can the form extension not have one?\n. Not that I know of. My security.yml:\n```\n    firewalls:\n        dev:\n            pattern:    ^/(_(profiler|wdt)|css|images|js)/\n            security:   false\n    oauth_login:\n        pattern:    ^/oauth/v2/auth/login$\n        security:   false\n\n    oauth_token:\n        pattern:    ^/oauth/v2/token\n        security:   false\n\n    oauth_authorize:\n        pattern:    ^/oauth/v2/auth\n        form-login:\n            check_path: /oauth/v2/auth/login_check\n            login_path: /oauth/v2/auth/login\n            use_referer: true\n    login:\n        pattern:  ^/login$\n        anonymous: ~\n\n    api:\n        pattern:    ^/api/.*\n        fos_oauth:  true\n        stateless:  true\n\n    main_app:\n        ....\n\naccess_control:\n    - { path: ^/oauth/v2/auth/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }\n    - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }\n    - { path: ^/authorize, roles: ROLE_API }\n    - { path: ^/oauth, roles: ROLE_API }\n    - { path: '^/[^/]+/doc/api', roles: ROLE_API }\n    - { path: ^/api, roles: ROLE_API }\n\n```\nAnd the api is all through /api for example my controller:\n<?php \n/**\n * Description of ApiController\n *\n * @author gnat\n * @Route(\"/api\")\n */\nclass ApiController extends \\FOS\\RestBundle\\Controller\\FOSRestController\n{\n    /**\n     * Create IBD Case,\n     *\n     * @ApiDoc(\n     *   resource = true,\n     *   description = \"Creates a new IBD case\",\n     *   input = \"create_ibd\"\n     * )\n     *\n     * @REST\\Post(\"/ibd/cases\")\n     *\n     * @param Request $request the request object\n     *\n    */\n    public function postIbdCasesAction(Request $request)\n    {\n        return $this->postCase($request,'ibd');\n    }\n}\nThere are other functions in that same class and the security context has a token as it should. Like the function I posted above.\nSo how can the form extension not have one?\n. So I've been hit by this a few times and I don't know if its in the symfony best practices. However don't ever do anything in a service constructor. It results in issues like this. \nWhat was happening was that I had a request listener. It had the Router and FormFactory injected into it. Since I didn't need the factory, just a particular form I did $this->form = $formFactory->create('form_alias'); in the constructor. This causes the whole symfony system to initialized all form extensions and services prior to the security context being fully initialized/set with a token. This means that all objects with a securityContext injected into it that are instantiated before the security context receives a token seem to stay that way. This is what happened. \nStoring the formFactory in my object and only instantiating the form in the request handler code solved the problem.\nThis does somewhat fly in the face of 'one' object assumptions. Just because the security context is a shared service and always returns the same instance, somehow its being changed and I presume  php's copy on write then creates a copy of that object with the changes, all services with the other copy never see the token as they become copied objects.\n. @TrkiSF2  your constructor looks fine to me. What issue are you experiencing? The way I found the solution to mine was to start dying at various places in the stack track of my issue. Eventually I found myself in the symfony DIC bootstrap code and figured out that I was trying to build forms too early...\nWhat's your particular problem?\n@lsmith77 Against which component?\n. do you want a small example or would you be willing to look at the actual app? its on github and has .travis file - its easy to reproduce by changing composer.json to allow sf greater than 3.2.... https://github.com/IBVPD/Nuvi\nthe src/NS/ApiBundle and related tests is what fails when you change composer.json to allow symfony ^3.2. I'm on IRC and on slack if you want me to help point out what's going wrong and where . ",
    "stormsson": "i have stumbled on this problem too and still after reading a couple of time this thread ,and reading again the documentation had some problem to understand the solution,so i hope the following can help somebody else:\n0) i did NOT touch  app/config/config.yml\n1) in app/config/routing.yml  i had:\nyaml\n    mybundlerouting:\n        resource: \"@Mybundle/Resources/config/routing.yml\"\n        prefix:   /\ni simply added the type:\nyaml\n    mybundlerouting:\n        resource: \"@Mybundle/Resources/config/routing.yml\"\n        prefix:   /\n        type: rest\n2) in Mybundle/Resources/config/routing.yml file, i have both rest routes and non rest routes, both works correctly if i again specify the type:\n``` yaml\n    mybundle_home:\n        path:     /hello/{name}\n        defaults: { _controller: Mybundle:Default:index }\nmybundle_home_apis:\n    type:     rest\n    resource: \"@Mybundle/Controller/ApiV1Controller.php\"\n    prefix:   /api/v1\n    name_prefix: apiv1_\n    defaults: { _format:  json }\n\n```\nthis configuration generates the following routes, so as you can see there are both rest and non rest services:\nmybundle_home                                  ANY    ANY    ANY  /hello/{name}\napiv1_get_programs                             GET    ANY    ANY  /api/v1/programs\napiv1_get_program                              GET    ANY    ANY  /api/v1/programs/{program_id}\napiv1_get_program_webcontents                  GET    ANY    ANY  /api/v1/programs/{program_id}/webcontents\napiv1_delete_webcontent                        DELETE ANY    ANY  /api/v1/webcontents/{webcontent_id}\nUPDATE:\nthis for some reason broke the format listener: i had to force in app/config/config.yml to make it work again without an extension:\nfos_rest:\n    view:\n        view_response_listener: 'force'\n        formats:            \n            json : true\n    format_listener:\n        rules:\n            - priorities: [json]\n            - fallback_format: json\n. i have stumbled on this problem too and still after reading a couple of time this thread ,and reading again the documentation had some problem to understand the solution,so i hope the following can help somebody else:\n0) i did NOT touch  app/config/config.yml\n1) in app/config/routing.yml  i had:\nyaml\n    mybundlerouting:\n        resource: \"@Mybundle/Resources/config/routing.yml\"\n        prefix:   /\ni simply added the type:\nyaml\n    mybundlerouting:\n        resource: \"@Mybundle/Resources/config/routing.yml\"\n        prefix:   /\n        type: rest\n2) in Mybundle/Resources/config/routing.yml file, i have both rest routes and non rest routes, both works correctly if i again specify the type:\n``` yaml\n    mybundle_home:\n        path:     /hello/{name}\n        defaults: { _controller: Mybundle:Default:index }\nmybundle_home_apis:\n    type:     rest\n    resource: \"@Mybundle/Controller/ApiV1Controller.php\"\n    prefix:   /api/v1\n    name_prefix: apiv1_\n    defaults: { _format:  json }\n\n```\nthis configuration generates the following routes, so as you can see there are both rest and non rest services:\nmybundle_home                                  ANY    ANY    ANY  /hello/{name}\napiv1_get_programs                             GET    ANY    ANY  /api/v1/programs\napiv1_get_program                              GET    ANY    ANY  /api/v1/programs/{program_id}\napiv1_get_program_webcontents                  GET    ANY    ANY  /api/v1/programs/{program_id}/webcontents\napiv1_delete_webcontent                        DELETE ANY    ANY  /api/v1/webcontents/{webcontent_id}\nUPDATE:\nthis for some reason broke the format listener: i had to force in app/config/config.yml to make it work again without an extension:\nfos_rest:\n    view:\n        view_response_listener: 'force'\n        formats:            \n            json : true\n    format_listener:\n        rules:\n            - priorities: [json]\n            - fallback_format: json\n. @lsmith77  Well, my post doesn't really contribute in some way if not another verbose explanation: everything is already written both on the docs and in this thread, just for some reason not knowing what the problem was didn't allow to fully understand the configuration in the docs, and the explanations here.\n. @lsmith77  Well, my post doesn't really contribute in some way if not another verbose explanation: everything is already written both on the docs and in this thread, just for some reason not knowing what the problem was didn't allow to fully understand the configuration in the docs, and the explanations here.\n. ",
    "AntonStoeckl": "@lsmith77 \nI have tried that (*UTF8) hack but it does not work. The comment is 4 years old so I guess things have changed in PHP since then.\nFor doing the change myself and sending a PR I need some proposals from you guys what sort of solution you'd prefer.\nI have already tested that adding a \"u\" to the regex modifiers works:\npreg_match('#^'.$config->requirements.'$#xsu', $param)\nSo I'd suggest adding something like $config->enableUTF8\nand then doing\n$modifiers = ($config->enableUTF8 === true) ? 'xsu' : 'xs'\npreg_match('#^'.$config->requirements.'$#'.$modifiers, $param)\n. ",
    "uwej711": "FOSJSRoutingBundle requires jsonp-callback-validator ~1.0. This bundle requires ~1.0.0 \nCould that be a problem?\n. changing composer.json to require ~1.0 let's me install it, lets see whether it works ...\n. ",
    "ClementGautier": "@lsmith77 It's ready for review\n. @adrienbrault I disagree. With your proposal we should drop completly the requirements support as the @RequestParam and the @QueryParam. In this PR i'm basicly adding functionalities to the requirements option. With the constraint option we could drop the support of requirements as these 2 things are the same:\nphp\n/** @QueryParam(name=\"foo\", constraint=@Regex(\"\\d+\")) */\nand\nphp\n/** @QueryParam(name=\"foo\", requirements=\"\\d+\") */\nI'm only extending the functionalities here.\nThe \"problem\" with your SomeFosRestFormConverter proposal is that we would not be able to set datas before submiting request datas. As these Query parameters are used for basic purpose like filtering we will not use these form for the rendering process so, for me, it's not a usefull usage of forms.\n. Soooo ... Could we merge this as it ? We can discuss of droping QueryParam support in an other PR I guess.\n. I finaly reviewed the code. I hope it will be ok for you.\n. Rebased and added preg_quote as @willdurand suggested\n. wait, the annotation does not work:\nAttribute \"requirements\" of @QueryParam declared on method Acme\\Bundle\\AcmeBundle\\Controller\\AcmeController::cgetAction() expects a(n) string|\\Symfony\\Component\\Validator\\Constraint, but got an instance of Acme\\Bundle\\AcmeBundle\\Validator\\Constraints\\AcmeConstraint\n. I changed string|Constraint to mixed. It's ok now. Sorry\n. thx ;)\n. Good point. I will update the composer.json and the documentation as soon as I can (probably tonight)\n. @lsmith77 / @stof Do you want me to move the service declaration in a CompilerPass to be able to make the validator service optional if the param_fetcher_listener is defined to false ?\n. Ok so I don't add the validator service as a requirement in the composer.json but I add a compiler pass to ensure that, only if the param_fetcher_listener is enabled and the validator missing, we throw an error and I update the documentation.\n. @lsmith77 I'm erally srry, I had no time the last week to test it.\n. @lsmith77 Yes, @Tobion's fix is not good. I'm actually working on a PR today at sfLive Paris.\n. Looks good to me. \n. Sorry for the delay. \n:+1:  because we already have a nullable option. (But, for me, as we already can do it using a Constraint we could instead drop nullable as well :P))\n. @mosch You can combine NotNull and Regex with a All constraint, I think it could work. But yes, as I said I'm ok with allowBlank option.\n. @mosch I dont think its necessary. We only test strict cases on this test and, in this PR we only add \"white cases\" possibilities (which are covered by testValidatesConfiguredParam)\n. @stof Fixed, thx.\n. @lsmith77 And what about using the same option for requirements and constraints ? I mean, requirements === Constraints\\Regex no ? So we could use always \"requirements\" and in case requirements is not an instance of Constraint we replace it by a Regex constraint with the requirements argument.\nIf I do this this part of the method will be way more simple so I'll not have to split it up.\nI'm not 100% sure that it is possible to TypeHint an annotation on mixed string|\\Classname.\n. Ok, i'll do the job this week-end.\n. ",
    "snc": "It looks like the requirements are not working anymore because of preg_quote. The requirements=\"\\d+\" results in 'pattern' => '#^\\\\d\\+$#xsu'.\n. Looks good @lsmith77.\n. ",
    "SilverSting": "How can I set custom options for the Constraint?\nThe following doesn't work, the {\"message\": ...} ends up wrapped by another array.\nrequirements=@Constraints\\NotBlank({\"message\": \"my custom message\"})\n. ",
    "DIOHz0r": "Hello, I had a similar problem but in this case is the \\P string.\nWhen I add at route.yml this resource: \"AppBundle\\Controller\\ProveedorController\" at the debug routing I was getting \n[InvalidArgumentException]\n  Class could not be determined for Controller identified by \"AppBundle\\Controller\u00d4\u00c7\u00aeroveedorController\"\nYour solution works, thank you\n. ",
    "markitosgv": "Thanks, i add this line in my config file and works.\nexception_controller: 'FOS\\RestBundle\\Controller\\ExceptionController::showAction'\n. ",
    "joanteixi": "I'm trying to create new symfony project from scratch to reproduce this bug and I can't reproduce yet. \nI will close this issue until get more clues. \nAnyway, with the last change in this repo, I get the same routes duplicated. \n. ",
    "feridmovsumov": "I have the same problem. \nI added custom route for count action\nyml\nbrands_count:\n    pattern:  /brands/count.{_format}\n    defaults: { _controller: ApiBundle:Brand:getCount, _format: json }\n    methods:  [GET]\nand when I run php console debug:route\nyml\nbrands_count GET    ANY    ANY  /api/v2/brands/count.{_format}\nget_count  GET    ANY    ANY  /api/v2/count.{_format}\n. Example Usage: \nphp\n@QueryParam(name=\"parent_id\", requirements={\"rule\" = \"\\d+\", \"message\" = \"parent_id must be an integer\"}, strict=true, nullable=true, description=\"Parent Id\")\nError Message:\njson\n{\n    \"code\": 400,\n    \"message\": \"parent_id must be an integer\"\n}\n. I made a pull request https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1015\n. I think this will match requirements of many developers.\nphp\nrequirements={\"rule\" = \"\\d+\", \"message\" = \"parent_id must be an integer\"}\n. @mvrhov yes you right. I refactored code.\n. I fixed broken tests.\n. @xabbuh thanks for code review. I fixed.\n. I will add tests soon.\n. I will add tests soon.\n. @stof @lsmith77 I added tests for custom error messages.\n. @stof @lsmith77 I added tests for custom error messages.\n. @lsmith77 I removed unnecessary lines.\n. @lsmith77 I already fixed line problem mentioned by @xabbuh You can see lines below\nhttps://github.com/feridmovsumov/FOSRestBundle/blob/master/Request/ParamFetcher.php#L250\nhttps://github.com/feridmovsumov/FOSRestBundle/blob/master/Request/ParamFetcher.php#L213\n. I accidentally removed this line. I put it back in my last commit\n. Actually I didn't move this code I moved code below\nphp\nif (is_array($param)) {\n            if ($strict) {\n                throw new BadRequestHttpException(\n                    sprintf(\"%s parameter is an array\", $paramType)\n                );\n             }\n            return $default;\n}\n. It is required because tests gives an fatal error\njson\nPHP Fatal error:  Cannot use object of type Mock_Constraint_d66ec56b as array in /home/web/project/FOSRestBundle/Request/ParamFetcher.php on line 245\n. ok I fixed that.\n. There is no any risk I tested it.\n. ",
    "EmmanuelVella": "Same issue here, expose option doesn't work with FOSRest routes.\n. @lsmith77 Ok ! Thank you.\n. :+1: \n. I get an infinite loop when I access a non existing page matching the stop option. For the moment I don't know why it happens !\n. It works ! The infinite loop was because #897 is not present on this branch. Thank you very much !\n. ",
    "pyrech": "After some research, this don't seem to be related to FOSRestBundle because when i remove the Regex requirement, the issue is still here. I don't understand why because it worked before I update some vendors.  I think the problem is more in the jms/serializer repos.\nCan you just confirm me that I'm using the feature the right way?\n. This is definitely due to a bug in jms/serializer, not in this bundle because after removing the requirement, it still happen. Sorry for this is issue.\n. I will give it a look tonight ;)\n. Closing in favor of #734\n. I think it's not the good way to go IMO. It means that somebody able to access you api can retrieve information about all your users (they just have to change the id in the url) which I suppose is not desirable.\nYou would better create a new controller (like /me for example) that return the user associated with the given token with something like:\n// in your controller\n$user = $this->get('security.context')->getToken()->getUser();\n// then send the user to the client\n. What is the error? Is there an exception thrown? Please add a bit more informations to help debug your code\n. IMO it should be done the same way it is done on line 123\n. I can work on it this evening (not really sure that one or two instanceof make a big difference IMHO)\n. Related to @stloyd's comment, this should default to false IMO\n. ",
    "sztanpet": "yes, sorry, totally blanked on what actually is providing the documentation page\n. definitely, sorry for the noise\n. ",
    "denisvmedia": "Will this be included in the release? I'm experiencing the same problem with 'AuthenticationCredentialsNotFoundException' like mentioned in #666. I checked this solution and it performs well for me.\nP.S. Currently my workaround is to override %fos_rest.access_denied_listener.class%, but it'd be good to have the solution in the Bundle core.\n. Will this be included in the release? I'm experiencing the same problem with 'AuthenticationCredentialsNotFoundException' like mentioned in #666. I checked this solution and it performs well for me.\nP.S. Currently my workaround is to override %fos_rest.access_denied_listener.class%, but it'd be good to have the solution in the Bundle core.\n. ",
    "johndoesenior": "I have tried it \nyaml\n                priorities: ['json', 'xml', 'html', 'css', '*/*' ]\nStill returns application/json\n. My bad, your first answer was right. Works, thanks a lot!\nP.s why does it happen? \n. @lsmith77 Are you sure its the right way of implementing it? it sounds like a bug to me. \n. ",
    "florianv": "It should be ok. \nThe build fails with the composer requirement SYMFONY_VERSION='dev-master symfony/event-dispatcher:~2.5@dev'. I think it needs the \"minimum-stability\": \"dev\" to be added for that case\n. It should be ok. \nThe build fails with the composer requirement SYMFONY_VERSION='dev-master symfony/event-dispatcher:~2.5@dev'. I think it needs the \"minimum-stability\": \"dev\" to be added for that case\n. I agree that using a request matcher could quickly become bad performance wise.\nThe current problem is that the BodyListener must be before the routing layer to set the correct HTTP method, so we cannot disable routes by name.\nA possibility would be to split the BodyListener in two classes by creating an HttpMethodListener that only sets the method in the request. That way, we can change the priority of the BodyListener to pass just after the routing layer.\nWe could have something like:\n1) A configuration to disable routes by name\nyaml\nfos_rest:\n    body_listener:\n        disabled_routes: [acme_demo_product, acme_demo_products]\n2) In the BodyListener, we can add this check:\n``` php\npublic function onKernelRequest(GetResponseEvent $event)\n{\n    $request = $event->getRequest();\n// Now the listener is after the routing layer, \"_route\" is available\nif (in_array($request->attributes->get('_route'), $this->disabledRoutes)) {\n    return;\n}\n\n}\n``\n. It seems that moving theBodyListenerafter the router listener would partially solve my problem too.\nThe lines that were added in https://github.com/FriendsOfSymfony/FOSRestBundle/commit/0bb8cb4fb0e410421f69d8df1103adccd77a406b can be added in a separate listener running before the routing (like it is currently).\n. There is already a PR reverting it https://github.com/FriendsOfSymfony/FOSRestBundle/pull/780\n. There is already a PR reverting it https://github.com/FriendsOfSymfony/FOSRestBundle/pull/780\n. @lsmith77 done https://github.com/FriendsOfSymfony/FOSRestBundle/pull/787\n. @lsmith77 done https://github.com/FriendsOfSymfony/FOSRestBundle/pull/787\n. It seems good but I was wondering if it was not better to have a global configuration to disable all listeners. The disabled routes are not part of the REST api, so it might nice to disable all listeners (where it's possible) rather than having a configuration per listener that can become a mess if more listeners need to be disabled in the future.\n. Also it needs a test to assert that when a route is disabled the listener (decoder etc) is not called\n. I fail to see a case where the array normalizer needs to be disabled on some routes and not on some others. IMO, If the API supports underscores, it should be everywhere or nowhere, otherwise it is not consistent. And the developer knows if it is enabled or not so he knows the data he receives\n. @stof Yes, for the routes that are not part of the API, we should only need to disable the whole listener. But I don't think disabling only the array normalizer for some API routes is needed \n. Edit: It will need a test to ensure that the listener priority is inferior to32(which is the router listener priority) otherwise the code will break\n. Edit: It will need a test to ensure that the listener priority is inferior to32(which is the router listener priority) otherwise the code will break\n. @backender It should be ok without the test, we have reverted the priority separately https://github.com/FriendsOfSymfony/FOSRestBundle/pull/787. Your tests will pass as soon as you rebase \n. @backender It should be ok without the test, we have reverted the priority separately https://github.com/FriendsOfSymfony/FOSRestBundle/pull/787. Your tests will pass as soon as you rebase \n. Thanks for reviewing @stof, I addressed your comments.\n. Thanks for reviewing @stof, I addressed your comments.\n. np :) nice :+1: \n. It's an issue with Symfony's serializer. You will have to wait the 2.5.1 version to have this fixed.\n. The first stackoverflow answer is wrong, there is no deserialization when you receive data so it cannot be related toJMSerializer. Like @lsmith77 I think theCamelKeysNormalizer` is not called.\n@Sukhrob Please double check the second answer:\n\nIs there a typo in your config? You've missed four spaces before array_normalizer cause it's a property of body_listener\n\nOtherwise, please create a repo with a Symfony standard edition reproducing the bug and I will check it.\n. Thanks @Sukhrob for creating this repository. I have cloned it and it works as expected.\nAdd a die here to debug it : print_r($request->request->all()); die;.\nThen, if you send a POST request to /test:\nbash\ncurl -i -H \"Content-Type: application/json\" -X POST -d '{\"user\":{\"first_name\":\"Florian\"}}' http://localhost/NormalizerTest/web/app_dev.php/test\nYou will get:\n``` php\nArray\n(\n    [user] => Array\n        (\n            [firstName] => Florian\n        )\n)\n```\nfirst_name is correctly transformed to firstName so the CamelKeysNormalizer is correctly configured and works as expected.\n. You are right @Sukhrob there is indeed a bug with multipart/form-data.\nThis is because the CamelKeysNormalizer is only called when the data is decoded, which is not the case with multipart/form-data.\n. I think we should add a config option to avoid the BC break, something like normalize_all or an array of content types for which the normalizer is applied.\n. Finally, I added an option to support extra content types for the normalization.\n. I think for version 2, it will be better to have either a separate service like a RequestNormalizer or an other listener doing the normalization because the body listener is becoming overloaded.\n. Thanks for the suggestions @lsmith77, I updated the PR\n. @lsmith77 yes. The rebase has been done\n. @lsmith77 Yes I think some tests would have failed if I forgot something. I re-checked it and normally it should be good :)\n. @lsmith77 Can this feature also simplify the format_listener rules if it targets 2.0 ?\nIt seems to me (seeing the related issues) that the rules are solving the same problem than the zone but only for the format_listener (i.e disabling it for some requests).\nI don't see a use case where one would need multiple format rules inside the zone.\n. It seems it would be very flexible to be able to configure the listeners per zone. \nIn this case, we could maybe use a service configurator for the listeners, that will match requests and configure them accordingly at runtime. The ZoneMatcherListener would be dropped.\n. @lsmith77 I'm happy to finish this if it's still relevant (I think so)\n. @lsmith77 I'm happy to finish this if it's still relevant (I think so)\n. So to resume we could have something like this with the listeners configurable per zone:\n``` yaml\napp/config/config.yml\nfos_rest:\n    cache_dir: '%kernel.cache_dir%/fos_rest'\n    zones:\n        api:\n            path: ^/api \n            body_listener:\n                array_normalizer: fos_rest.normalizer.camel_keys      \n        auth:\n            path: ^/login\n            body_listener: true\n```\nTo reduce runtime configuration and complexity, we could always create the listeners for each zone with a name like fos_rest.listener.{zone_name}.{listener_name}. \nThen an early kernel.request listener would check which zone is matched and remove the unused listeners using EventDispatcherInterface::removeListener().\nI think it's better than having only one listener of each type and configuring them at runtime.\n. So to resume we could have something like this with the listeners configurable per zone:\n``` yaml\napp/config/config.yml\nfos_rest:\n    cache_dir: '%kernel.cache_dir%/fos_rest'\n    zones:\n        api:\n            path: ^/api \n            body_listener:\n                array_normalizer: fos_rest.normalizer.camel_keys      \n        auth:\n            path: ^/login\n            body_listener: true\n```\nTo reduce runtime configuration and complexity, we could always create the listeners for each zone with a name like fos_rest.listener.{zone_name}.{listener_name}. \nThen an early kernel.request listener would check which zone is matched and remove the unused listeners using EventDispatcherInterface::removeListener().\nI think it's better than having only one listener of each type and configuring them at runtime.\n. If we have to care about sub requests, we will have to add the listeners too! For example if we have two zones X and Y:\n- master request, zone X is matched, we remove all Y listeners\n- sub request, zone Y is matched, we remove the listeners from zone X but we need to add zone Y listeners since they were removed during the master request\n. If we have to care about sub requests, we will have to add the listeners too! For example if we have two zones X and Y:\n- master request, zone X is matched, we remove all Y listeners\n- sub request, zone Y is matched, we remove the listeners from zone X but we need to add zone Y listeners since they were removed during the master request\n. I reproduced it with the latest bundle version and it works as expected:\nName              Method Scheme Host Path\napi_1_userscreate POST   ANY    ANY  /foo/bar.{_format}\nI think you are already loading the routes before FOSRestBundle, so make sure the user controller routes are not already loaded and clear your cache. Otherwise you are maybe using the wrong loader type (i.e annotation instead of rest).\nIf you are unsure about that, please paste your routing configuration.\n. I agree that it could be located somewhere where it's more reusable.\nIn Symfony 2.6, the form request format was introduced but it seems to lack these cases as well (https://github.com/symfony/symfony/pull/7142).\nMaybe it would be better to contribute it to Symfony because there is no negotiation logic (it's just basic parsing) so I'm not sure if it should go in Negotiation.\n. @lsmith77 A private method in the listener will be annoying to test. What about adding an @internal annotation to the class ?\n. Ready for review. As per @stof comment a bug has also been fixed regarding form data normalization for PUT, PATCH and DELETE requests.\n. We could maybe provide an option for the JsonDecoder to preserve objects ? \nThe outermost object would still need to be encoded as associative array.\n. I have no clue why these tests are failing. From the output we see the form has no validation errors, so maybe it's related to Symfony...\nShould we allow failures for the nightly version ?\n. Done. I also added hhvm-nightly to the build matrix\n. This is the same issue than https://github.com/FriendsOfSymfony/FOSRestBundle/issues/760.\n. > so what else should be change?\nI read that some people complain about the size of this Bundle (it's quite big indeed). I think it's not easy for newcomers to apprehend it.\nI was thinking that some features like the annotations could be moved to a FOSRestExtraBundle ? The idea would be to keep only the core features to have a functional API.\n. > so what else should be change?\nI read that some people complain about the size of this Bundle (it's quite big indeed). I think it's not easy for newcomers to apprehend it.\nI was thinking that some features like the annotations could be moved to a FOSRestExtraBundle ? The idea would be to keep only the core features to have a functional API.\n. @lsmith77 Sorry for my absence, I had a lot of work.\nIndeed, ideally the listeners configuration should be a child of the zone and we could add them at runtime once a zone is matched (it is possible as the EventDispatcher is mutable)\n. There are too many blank lines\n. It should be changed to:\nphp\nisDisabledRoute($route)\n{\nAlso you need to add a blank line between param and return\n. I would add the check at the top of the method, because we want to disable the whole listener\n. Then the configuration name is wrong: it is not disabling the body listener but just the array normalizer\n. :+1: \n. I would remove this method\n. Thanks, fixed.\n. Symfony does not comment non-public properties and in this case the IDE can guess the type because there is a constructor injection. Here I kept it https://github.com/florianv/FOSRestBundle/blob/code-style/EventListener/BodyListener.php#L32-L35 because there is setter injection and the IDE can't guess\n. I removed them because they are obvious. Symfony has some of them in a few places and not on some others, maybe @stof knows the rule.\n. I changed the variable name instead because the other params are not commented\n. Please remove the extra space if (\n. yes :) \n. yes it is really odd. The result is used as status code https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Controller/ExceptionController.php#L197 or boolean\n. Yes you are right. I copied the output as it is, maybe it's an issue with Symfony\n. https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Tests/Definition/Dumper/YamlReferenceDumperTest.php#L25\n. We used the setter to configure the optional arrayNormalizer property but since we now need an other optional dependency, I thought it was messy to have two setters so I moved it to the constructor with a default value instead.\n. I could keep the setter and deprecate it for 2.0 too.\n. We can also have application/x-www-form-urlencoded\n. I don't think we need the distinction (at least not needed to fix the issue). Yes, you are right it's simpler\n. Nop, thanks!\n. Thanks for the suggestion, but replaceArgument() will throw an exception if the argument was not added (it only replaces it).\n. Well, I moved your code from the other pass so I left your copyright\n. Indeed these cases are missing. I will move this code to a private listener method as @lsmith77 suggested and add extra tests for this\n. ",
    "pacorampas": "I tested both solutions but they doesn't work for me. I am using mongodbBundle, I don't know if that could be a problem (I think not)\nThis is my EntityType:\n```\nclass EntityType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('name')\n            ->add('description')\n        ;\n    }\npublic function setDefaultOptions(OptionsResolverInterface $resolver)\n{\n    $resolver->setDefaults(array(\n        'data_class' => 'PieceCake\\APIBundle\\Document\\Entity',\n        'csrf_protection'   => false,\n    ));\n}\n\npublic function getName()\n{\n    return 'entity';\n}\n\n}\n```\n. I closed the issue, but was a mistake. I have reopened it. Sorry for that.\n. Yes, I have the same result. I don't use this name of the FormType, I change it only for copy paste here.\n. $form->isSubmitted() is empty. I get nothing.\nThis method of class FormType represent the name that I should put in the json:\npublic function getName()\n    {\n        return 'this_is_the_name';\n    }\nLike this:\n{\n    \"this_is_the_name\": {\"name\":\"Hello word\",\"description\":\"I am a hello word\"}\n}\n. I done this, and alwaysget else.\n$form->handleRequest($request);\n```\n    if ( $form->isSubmitted() ) $a = 'if';\n    else $a = \"else\";\nreturn $this->render(\n    'PieceCakeAPIBundle:Default:index.html.twig',\n    array('name' => $a)\n);\n\n```\nAlso, I done this, and $a = nothing.\n$form->handleRequest($request);\n```\n   $a= $form->isSubmitted() );\nreturn $this->render(\n    'PieceCakeAPIBundle:Default:index.html.twig',\n    array('name' => $a)\n);\n\n```\n. ",
    "defrag": "You can use two approaches.\n``` php\n    /\n     * Creates use profiles\n     * @ApiDoc(\n     *     resource=true,\n     *     description=\"Creates user profile\",\n     *     input=\"Foo\\BarBundle\\Form\\Type\\ProfileType\",\n     *     output=\"Foo\\BarBundle\\Entity\\User\\Profile\",\n     *     statusCodes={\n     *         201=\"Returned when successful\",\n     *         401=\"Returned when trying to create non authenticated\",\n     *         422=\"Returned when the profile validation failed\"\n     *      }\n     * )\n     \n     * @param  Request $request\n     * @return View\n     /\n    public function createAction(Request $request)\n    {\n        $profile = new User\\Profile($this->getUser());\n        $form = $this->createForm(new ProfileType(), $profile);\n        $form->submit(($request->request->get($form->getName())));        \n    if ($form->isValid()) {\n        $this->get('foo.user.manager')->saveProfile($profile);\n\n        return View::create($profile, Codes::HTTP_CREATED);\n    }\n\n    return View::create($form);\n}\n\n```\nSecond option:\n``` php\nif (!$form->isValid()) {\n    if (!$form->isSubmitted()) {\n        $form->submit([]);\n    }\nreturn View::create($form);\n\n}\n```\nIf you send invalid data, then the form will not be submitted and the response will be\n{\"children\":{\"name\":[],\"description\":[]}}\n@lsmith77 @pacorampas This is not fos rest bundle issue, so i would say it can be closed.\n. I could preprare a cookbook on integration oauth2 with for rest bundle if anyone would be interested.\n. This is as simple as integrating FOSOAuthServerBundle tho :)\n. ",
    "daFish": "@defrag But maybe a cookbook entry would be helpful in case others struggling with the same problem and overlook this issue. :smile: \n. @GuilhemN I'm not quite sure but I suspect it might be related to symfony/symfony#19790.\nThe used Trait sorts the fetched extensions causing the issue I describe.\n. @GuilhemN I just tried it and reverting the PR solves the problem. So, I'd go and open a PR to add the priority for the listener. Or should we go another route for solving the problem?\n. Any oppinions/hints/suggestions from @GuilhemN or @xabbuh?. Any oppinions/hints/suggestions from @GuilhemN or @xabbuh?. Great to see the root source of the issue has been fixed.. This variable is nowhere used.\n. There are 2 } missing at the end before the closing ).\n. Shouldn't this be array_images to be consistent?\n. Yes, but it could lead to confusion when someone is looking at the tests to understand how the feature works.\n. ",
    "eduardoconceicao": "Any thoughts on that?\nWhat if you change the form field type to text and allow users to send \"true\", \"false\", \"0\" or \"1\" values and then use a data transformer to convert them into boolean.\n. Any thoughts on that?\nWhat if you change the form field type to text and allow users to send \"true\", \"false\", \"0\" or \"1\" values and then use a data transformer to convert them into boolean.\n. ",
    "nunojsferreira": "Just found this on the doc:\nIf you want to be able to use form with checkbox and have true and false value (without any issue) you have to use : fos_rest.decoder.jsontoform (available since fosrest 0.8.0)\nso i tried changing the decoder on my confi.yml:\nYAML\nfos_rest:\n    body_listener:\n        decoders:\n            json: fos_rest.decoder.jsontoform\nAnd i am using:\n\"friendsofsymfony/rest-bundle\": \"1.3.*\"\nBut the behavior is the same. Any idea?\n. Maybe @dunglas can help.\n. I think a found the problem. \nI was testing with https://github.com/nelmio/NelmioApiDocBundle and seems like when dealing with boolean values it encapsulates the value with the quoting marks \\\" \nSo the data generated by Nelmio is:\n{\n  \"field\": {\n     \"name\": \"name2\",\n     \"required\" : \"true\",\n     \"searchable\": \"false\",\n     \"type\": 1\n  }\n}\nInstead of:\n{\n  \"field\": {\n     \"name\": \"name2\",\n     \"required\" : true,\n     \"searchable\": false,\n     \"type\": 1\n  }\n}\n. @lsmith77 seems like NelmioApiDocBundle bug. I will open an issue.\n. ",
    "neFAST": "Hi @nunojsferreira Did you open an issue on NelmioApiDocBundle repository? Did they fix it?. ",
    "mappedinn": "Thank you @lsmith77 for you help.\nI modified the config.yml based on the link you gave me. Actually, the config for FOSRestBundle is as follows:\nfos_rest:\n    disable_csrf_role: ROLE_AUTHOR\n    param_fetcher_listener: true\n    body_listener: true\n    access_denied_listener:\n        # all requests using the 'json' format will return a 403 on an access denied violation\n        json: true\nformat_listener: true\nview:\n    view_response_listener: 'force'  \nrouting_loader:\n    default_format: json\nAfter the check with the curl command, I noticed this:\n- I got the expected error code (403 FORBIDDEN) for curl -i http://localhost/tuto/web/app_dev.php/api/test/1\nHTTP/1.1 403 Forbidden\n  Date: Sat, 12 Apr 2014 08:21:02 GMT\n  Server: Apache/2.2.22 (Ubuntu)\n  X-Powered-By: PHP/5.4.9-4ubuntu2.4\n  Set-Cookie: PHPSESSID=vcku1e6ipi31k0kkejq4rsc1e4; path=/\n  Cache-Control: no-cache\n  Vary: Accept-Language\n  X-Debug-Token: d837da\n  Transfer-Encoding: chunked\n   Content-Type: application/json\n- I got a 500 error code for curl -i http://localhost/tuto/web/app.php/api/test/1\nHTTP/1.0 500 Internal Server Error\n  Date: Sat, 12 Apr 2014 08:21:39 GMT\n  Server: Apache/2.2.22 (Ubuntu)\n  X-Powered-By: PHP/5.4.9-4ubuntu2.4\n  Vary: Accept-Encoding\n  Content-Length: 0\n  Connection: close\n  Content-Type: text/html\nHave I missed some thing?\nThanks again.\n. this is the logs file:\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener::onKernelRequest\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener::onKernelRequest\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener::onKernelRequest\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\". [] []\n[2014-04-12 10:37:44] request.INFO: Matched route \"api_1_get_test\" (parameters: \"_controller\": \"Minn\\AdsAPIBundle\\Controller\\TestController::getAction\", \"id\": \"1\", \"_format\": \"json\", \"_route\": \"api_1_get_test\") [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Lunetics\\LocaleBundle\\EventListener\\LocaleListener::onKernelRequest\". [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale Router Guessing Service Loaded [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale has not been identified by the Router guessing service [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale Query Guessing Service Loaded [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale has not been identified by the Query guessing service [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale Session Guessing Service Loaded [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale has not been identified by the Session guessing service [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale Cookie Guessing Service Loaded [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale has not been identified by the Cookie guessing service [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale Browser Guessing Service Loaded [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale has not been identified by the Browser guessing service [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Component\\Security\\Http\\Firewall::onKernelRequest\". [] []\n[2014-04-12 10:37:44] security.INFO: Populated SecurityContext with an anonymous Token [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.exception\" to listener \"FOS\\RestBundle\\EventListener\\AccessDeniedListener::onKernelException\". [] []\n[2014-04-12 10:37:44] request.ERROR: Uncaught PHP Exception Symfony\\Component\\HttpKernel\\Exception\\AccessDeniedHttpException: \"You do not have the necessary permissions\" at /home/amine/NetBeansProjects/tuto/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle/EventListener/AccessDeniedListener.php line 67 {\"exception\":\"[object] (Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\AccessDeniedHttpException: You do not have the necessary permissions at /home/amine/NetBeansProjects/tuto/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle/EventListener/AccessDeniedListener.php:67, Symfony\\\\Component\\\\Security\\\\Core\\\\Exception\\\\AccessDeniedException: Access Denied at /home/amine/NetBeansProjects/tuto/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/AccessListener.php:70)\"} []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"closure\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener::onKernelRequest\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"closure\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener::onKernelRequest\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"closure\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener::onKernelRequest\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"closure\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelRequest\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"closure\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Lunetics\\LocaleBundle\\EventListener\\LocaleListener::onKernelRequest\". [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale Router Guessing Service Loaded [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale has not been identified by the Router guessing service [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale Query Guessing Service Loaded [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale has not been identified by the Query guessing service [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale Session Guessing Service Loaded [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale has not been identified by the Session guessing service [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale Cookie Guessing Service Loaded [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale has not been identified by the Cookie guessing service [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale Browser Guessing Service Loaded [] []\n[2014-04-12 10:37:44] app.DEBUG: Locale has not been identified by the Browser guessing service [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"closure\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelRequest\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"closure\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"FOS\\RestBundle\\EventListener\\BodyListener::onKernelRequest\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"closure\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Component\\Security\\Http\\Firewall::onKernelRequest\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"closure\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Bundle\\AsseticBundle\\EventListener\\RequestListener::onKernelRequest\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"closure\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Knp\\Bundle\\MenuBundle\\EventListener\\VoterInitializerListener::onKernelRequest\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"closure\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ErrorsLoggerListener::injectLogger\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"closure\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ErrorsLoggerListener::injectLogger\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"closure\". [] []\n[2014-04-12 10:37:44] event.DEBUG: Notified event \"kernel.request\" to listener \"Stof\\DoctrineExtensionsBundle\\EventListener\\LocaleListener::onKernelRequest\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ParamFetcherListener::onKernelController\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.controller\" to listener \"Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RouterDataCollector::onKernelController\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.controller\" to listener \"A2lix\\TranslationFormBundle\\EventListener\\ControllerListener::onKernelController\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.controller\" to listener \"Acme\\DemoBundle\\EventListener\\ControllerListener::onKernelController\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.controller\" to listener \"Symfony\\Component\\HttpKernel\\DataCollector\\RequestDataCollector::onKernelController\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener::onKernelController\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.controller\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener::onKernelController\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.controller\" to listener \"FOS\\RestBundle\\EventListener\\ViewResponseListener::onKernelController\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Component\\Security\\Http\\Firewall\\ContextListener::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Bridge\\Monolog\\Handler\\FirePHPHandler::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Bridge\\Monolog\\Handler\\ChromePhpHandler::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\CacheListener::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Lunetics\\LocaleBundle\\EventListener\\LocaleListener::onLocaleDetectedSetVaryHeader\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Bundle\\WebProfilerBundle\\EventListener\\WebDebugToolbarListener::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Listener \"FOS\\RestBundle\\EventListener\\AccessDeniedListener::onKernelException\" stopped propagation of the event \"kernel.exception\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Listener \"Symfony\\Component\\Security\\Http\\Firewall\\ExceptionListener::onKernelException\" was not called for event \"kernel.exception\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Listener \"Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener::onKernelException\" was not called for event \"kernel.exception\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Listener \"Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener::onKernelException\" was not called for event \"kernel.exception\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Component\\Security\\Http\\Firewall\\ContextListener::onKernelResponse\". [] []\n[2014-04-12 10:37:45] security.DEBUG: Write SecurityContext in the session [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Bridge\\Monolog\\Handler\\FirePHPHandler::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Bridge\\Monolog\\Handler\\ChromePhpHandler::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\CacheListener::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Lunetics\\LocaleBundle\\EventListener\\LocaleListener::onLocaleDetectedSetVaryHeader\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Bundle\\WebProfilerBundle\\EventListener\\WebDebugToolbarListener::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\". [] []\n[2014-04-12 10:37:45] event.DEBUG: Notified event \"kernel.terminate\" to listener \"Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener::onTerminate\". [] []\n. Sorry! I have to be more explicit!\nThis was the logs of the dev mode! No logs generated for the prod mode!\nI will try to make the log working for the prod mode! (i will be back)\n. how to make symfony2 writes log in prod mode?\nThanks,\n. @lsmith77 This is the config of monolog in config_prod.yml\nmonolog:\n    handlers:\n        main:\n            type:         fingers_crossed\n            action_level: error\n            handler:      nested\n        nested:\n            type:  stream\n            path:  %kernel.logs_dir%/%kernel.environment%.log\n            level: debug\nBut, not prod.log file is generated! Any idea?\n. I copied the config for the monolog from config_dev.yml to config_prod.yml\nThis config is as follows:\nmonolog:\n    handlers:\n        main:\n            type:  stream\n            path:  %kernel.logs_dir%/%kernel.environment%.log\n            level: debug\n        firephp:\n            type:  firephp\n            level: info\n        chromephp:\n            type:  chromephp\n            level: info\nGuess what? Still no prod.log file is generated!\nIs there any idea to check if the monolog of prod is starting or not?\n. I get back to a previous version of my project & things are working.\nI don't know what was the problem.\n@lsmith77 Thanks you for you help\n. I finally find the problem. I have extra config lines in config.yml\nThese lines are:\nweb_profiler:                       \n    intercept_redirects: false\nAfter removing this, no more 500 error code!\nHope it will help others.\n. I did not base64 the username:password.\nHow to do this?\n. I did not base64 the username:password.\nHow to do this?\n. @tecbot did you mean this command for the example tonivdv:1234?\ncurl -i \\\n-H 'Accept: application/json' \\\n-H 'Authorization:Basic tonivdv:dG9uaXZkdjoxMjM0' \\\nhttp://....\n. @tecbot did you mean this command for the example tonivdv:1234?\ncurl -i \\\n-H 'Accept: application/json' \\\n-H 'Authorization:Basic tonivdv:dG9uaXZkdjoxMjM0' \\\nhttp://....\n. I encoded the my user:password but still I have 302 error code.\nI am 99% sure that command I wrote is correct. So I wondering if I have an error in the configuration of FOSRestBundle.\nBelow is my config, so please tell me if there is an error.\n```\nsensio_framework_extra:\n    view:\n        annotations: false\n    router:                  \n        annotations: true      \nfos_rest:\n    disable_csrf_role: ROLE_AUTHOR\n    param_fetcher_listener: true\n    body_listener: true\n    format_listener: true\n    view:\n        view_response_listener: force\n    routing_loader:\n        default_format: json\n```\nAnd for the security.yml:\nfirewalls:\n    # ...    \n    rest_api:\n        pattern: ^/api/\n        stateless: true\n        http_basic:\n            provider: fos_userbundle\n    # ...    \naccess_control:\n    # ...    \n    - { path: ^/api/, role: IS_AUTHENTICATED_FULLY }\n. I encoded the my user:password but still I have 302 error code.\nI am 99% sure that command I wrote is correct. So I wondering if I have an error in the configuration of FOSRestBundle.\nBelow is my config, so please tell me if there is an error.\n```\nsensio_framework_extra:\n    view:\n        annotations: false\n    router:                  \n        annotations: true      \nfos_rest:\n    disable_csrf_role: ROLE_AUTHOR\n    param_fetcher_listener: true\n    body_listener: true\n    format_listener: true\n    view:\n        view_response_listener: force\n    routing_loader:\n        default_format: json\n```\nAnd for the security.yml:\nfirewalls:\n    # ...    \n    rest_api:\n        pattern: ^/api/\n        stateless: true\n        http_basic:\n            provider: fos_userbundle\n    # ...    \naccess_control:\n    # ...    \n    - { path: ^/api/, role: IS_AUTHENTICATED_FULLY }\n. so, I just need to define my rest_api firewall before the main firewall?\n. Thank you @stof \nIt is working perfectly ;)\n. Thank you very much for your quick answer.\nThanks @stof \n. :+1: \n. ",
    "dadamssg": "Just realized that you can't be in a debug environment. Nevermind! \n. ",
    "wouterj": "@stof I see now, thanks! See #750 for the suggested fix\n. @stof I see now, thanks! See #750 for the suggested fix\n. @lsmith77 done.\n. @lsmith77 done.\n. Updated it (and also rebased).\n. Yes, since Symfony 2.3 (https://github.com/symfony/FrameworkBundle/commit/98f30b0df147786f125cb0722c9db40cc91e5278), which is disabled by default btw.\n. @stof fixed it\n. @lsmith77 I've added the tests\n. I think you used numbers as the docs were rendered on GitHub. The only way to order them in such case is by numbering your pages. On symfony.com however, the toctree is what determines the order.\nAbout the reorganization: Generally speaking, shorter pages, shorters sections and shorter sentences make things more easy to follow and read (of course, too short isn't good). I guess this change makes sense. (it's also easier to link to specific things and google can sent you to the direct listener immediately this way)\n. I think you used numbers as the docs were rendered on GitHub. The only way to order them in such case is by numbering your pages. On symfony.com however, the toctree is what determines the order.\nAbout the reorganization: Generally speaking, shorter pages, shorters sections and shorter sentences make things more easy to follow and read (of course, too short isn't good). I guess this change makes sense. (it's also easier to link to specific things and google can sent you to the direct listener immediately this way)\n. Are you aware that form type names are removed in sf 3 in favor of the fqcn of the type class?\n. I think this was done previously to support XML, I don't think it's the best solution. I kept it to be BC.\n. there seem to be no attribute for the priorities setting, that's why I removed it. If there is an attribute, please say it as we need a normalizator for that.\n. in the note about JMSerializer, it states that the user should follow its own installation instructions to set-up and install it. I don't think this bundle should cover that.\n. Yes, but we (sf doc team) recommend to use the cersion in the docs, as you want users to install the version for which the documentation is created (otherwise, 1.0 docs would have a command that installs 2.0)\n. I would put this in a new section:\n``` rst\nC) Enable a Serializer\n\nThis bundle needs a serializer to work correctly. In most cases,\nyou'll need to enable a serializer or install one. This bundle tries\nthe following this (in this order) to determine the serializer to use:\n. The one you configured using fos_rest.services.serializer (if you did).\n. The JMS serializer, if the JMSSerializerBundle_ is available (and registered).\n. The Symfony Serializer_ if it's enabled.\n```\n. tests have to return an array of arrays. I don't like it for single values\n. Either:\nrst\n1. Item 1\n2. Item 2\n3. Item 3\nOr:\n```\n. Item 1\n. Item 2\n. Item 3\n```\nBoth will render as an ordered list. If possible, use the second example.\n. you shouldn't indent the list and use * as the indicator char. Also, please put an empty line between the paragraph and the list.\n. please add a new line before and after each headline (before line 3 and after line 4 in this example)\n. ",
    "mikeSimonson": "I suppose going from the object to the xml is considered encoding.\nI need to find a way to configure the symfony serializer then ?\n. I suppose going from the object to the xml is considered encoding.\nI need to find a way to configure the symfony serializer then ?\n. Looks like I will need the jms serializer and create a handler for it.\n. Looks like I will need the jms serializer and create a handler for it.\n. I realized that it was mostly possible with the annotation system.\nDo you know if it's possible to have the XmlRoot annotation call a method to fill it's value ?\n. I realized that it was mostly possible with the annotation system.\nDo you know if it's possible to have the XmlRoot annotation call a method to fill it's value ?\n. Hum.\nDo you know where there might be any documentation on how to implement the handler of the handlercallback or the encoder ?\nRight now I can output \nxml\n<MyElement generator=\"zend\" version=\"1.0\">\n    <xml_method>\n        <getVersion>\n            <response>1</response>\n            <status>success</status>\n        </getVersion>\n    </xml_method>\n</MyElement>\nAnd I need to be able to remove the the  element to have this : \nxml\n<MyElement generator=\"zend\" version=\"1.0\">\n        <getVersion>\n            <response>1</response>\n            <status>success</status>\n        </getVersion>\n</MyElement>\nI can't find any documentation on how to do that.\n. Thanks\n. ",
    "AyhamAlzoubi": "Here I am pluralizing the route in any case and seems fine \nCan you have a look please?\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Routing/Loader/Reader/RestActionReader.php#L410\n// if we have argument for current resource, then it's object.\n            // otherwise - it's collection\n            if (isset($arguments[$i])) {\n                if (null !== $resource) {\n                    $urlParts[] =\n                        strtolower($this->inflector->pluralize($resource))\n                        .'/{'.$arguments[$i]->getName().'}';\n                } else {\n                    $urlParts[] = '{'.$arguments[$i]->getName().'}';\n                }\n            } elseif (null !== $resource) {\n                $urlParts[] = $this->inflector->pluralize(strtolower($resource));\n            }\n. failing cases:\n- We have the case where the action name is single and the route is single, then after this change the route will plural and the old route won't be found \n  in this case we need to generate both routes the single and the plural \n- and the case when we generate route for action contains more than keyword, this will make them all plural as /customers/passwords/...\n. ",
    "mgrinko": "understood, thank you\n. ",
    "mjuchli": "@florianv Having the same issue so I'm just trying to make a little proof of concept.\nFor some reasons $request->attributes->get('_route') gives just null. Any idea?\n. Ok I now changed the flow to disabled the listener fully and hope i can provide a test soon.\nI think this is the way to go but what I'm struggling now is if it wouldn't be nice to also give the possibility to exclude routes from arrayNormalizing step. \nRight now I have to inject the arrayNormalizer for those routes they are disabled from the body listener. This isn't a big deal but I personally prefer to tweak configurations and have cleaner code. Also I think this wouldn't be an overkill as long as there is gonna be documentation. \nLet me know what you think. \n. (Sorry for the extra commits, I just amended the author information since things are getting messy with several computers...)\nI finally added a test.\n. (Sorry for the extra commits, I just amended the author information since things are getting messy with several computers...)\nI finally added a test.\n. @florianv regarding the routing priority test: do we have to test this case? I mean yes the code will break if the priority is lower than the one from the router listener but the priority itself is checked in as well...\n@stof I rebased (hope I did it right, I normally work with merge tool). But now I see 2 failing tests: \n``` php\n1) FOS\\RestBundle\\Tests\\EventListener\\BodyListenerTest::testBadRequestExceptionOnMalformedContent\n'application/json' does not match expected type \"array\".\n/Users/marc/Sites/FOSRestBundle/Tests/EventListener/BodyListenerTest.php:75\n/Users/marc/Sites/FOSRestBundle/Tests/EventListener/BodyListenerTest.php:230\n2) FOS\\RestBundle\\Tests\\EventListener\\BodyListenerTest::testShouldNotThrowUnsupportedMediaTypeHttpExceptionWhenIsAnEmptyDeleteRequest\nnull does not match expected type \"array\".\n/Users/marc/Sites/FOSRestBundle/Tests/EventListener/BodyListenerTest.php:75\n/Users/marc/Sites/FOSRestBundle/Tests/EventListener/BodyListenerTest.php:244\n```\nMaybe you see the right away? Otherwise I'll investigate tonight or tomorrow.\n. @florianv regarding the routing priority test: do we have to test this case? I mean yes the code will break if the priority is lower than the one from the router listener but the priority itself is checked in as well...\n@stof I rebased (hope I did it right, I normally work with merge tool). But now I see 2 failing tests: \n``` php\n1) FOS\\RestBundle\\Tests\\EventListener\\BodyListenerTest::testBadRequestExceptionOnMalformedContent\n'application/json' does not match expected type \"array\".\n/Users/marc/Sites/FOSRestBundle/Tests/EventListener/BodyListenerTest.php:75\n/Users/marc/Sites/FOSRestBundle/Tests/EventListener/BodyListenerTest.php:230\n2) FOS\\RestBundle\\Tests\\EventListener\\BodyListenerTest::testShouldNotThrowUnsupportedMediaTypeHttpExceptionWhenIsAnEmptyDeleteRequest\nnull does not match expected type \"array\".\n/Users/marc/Sites/FOSRestBundle/Tests/EventListener/BodyListenerTest.php:75\n/Users/marc/Sites/FOSRestBundle/Tests/EventListener/BodyListenerTest.php:244\n```\nMaybe you see the right away? Otherwise I'll investigate tonight or tomorrow.\n. @florianv thanks for reviewing. \n@stof Should be ok now. \n. @allan-simon I lost track of this a bit. The proposed zone conecpt (https://github.com/FriendsOfSymfony/FOSRestBundle/pull/955) is the better approach. \n@lsmith77 are you intended to still merge this in 1.X?, and then replace with zone concept in 2.X?\n. The case with the composite primary key seems rather rare. So to me it's ok.\n. this is the part which should be something like: $route = $request->attributes->get('_route'). But gives me null, any idea?\n. I don't have the full background of what was going on on #763 but next to the priority i also reverted the other 2-3 lines in the body listener itself. \n. I'd rather leave it since we need to assign the ParameterBag and therefore the decoder and the format are needed as well...\n. I see. You're probably right and we should disable the listener fully and not just partially. I'll see if I can make the changes and a test over the weekend.\n. Sorry this was not by accident and happened once I had to revert tests: https://github.com/backender/FOSRestBundle/commit/423684cf3208aac0ecea801636b600023e04cd5f \n. My first intention was to provide a constructor argument that holds a default value. This way, also reverseTransform can be configured in the same place. Obviously ClassMetadata would be an option too. I'll investigate here a bit further this week.\n. +1\n. ",
    "danrot": "Hm, feels a bit inconsistent, but would work for us. Would it take a long time include this in a new version, if I try to fix this? Maybe you can give me a short hint for the location of the error?\n. How do you define the route name manually? I have seen the NamePrefix-Annotation, but this one only is applyable to a class, and does not solve this problem.\nBut this behaviour is still better than no route at all, isn't it? Should I try to fix that, or don't you like that solution?\n. At least in https://github.com/FriendsOfSymfony/FOSRestBundle/tree/master/Controller/Annotations I can't find anything like that... there are some prefix annotations, which can only be applied to a class...\n. Another idea: What if the name cget_resource for collections is only used when it is an uninflectable word? Then adding a new route would not cause existing routes to change their name, and the BC break is not too hard. I guess it would only make some already used workarounds unneccessary.\n. Yes, but I would for the cgetAction of the MediaController always use the name cget_media, because media is an uninflectable word. For inflectable words like phone the route name for the cgetAction would still be get_phones.\nHowever, that means that you have to check if the word is inflectable when you generate the route names, but I think that would be a valid fix.\n. If it is ok for you, i would try to find some time to implement this at the weekend.\n. @lsmith77 Should I check if the word is uninflectable, and only then create two route names, or just do it for every word?\n. just another thought: what should be the preferred way? If you want to prefix all the route names for collections with c in some future version, it would be good to offer this route now as well, wouldn't it?\n. @lsmith77 The PR would be ready to merge, however I am not sure if I have solved everything in the right place, because I have to less knowledge about the code base...\nAnd @alexander-schranz, maybe you can test if this PR solves your problem with our MediaController.\n. I guess https://github.com/FriendsOfSymfony/FOSRestBundle/issues/351 is addressing the same problem.\n. @lsmith77 I am afraid there was a bug builtin... The same reference to the route is stored under both route names, and it looks like symfony doesn't handle that correct. This results in a double prefixing of routes.\nThat means that the second time a cloned route should be added to the RouteCollection (that would be that line: https://github.com/FriendsOfSymfony/FOSRestBundle/pull/761/files#diff-4f168cae49074c5f30b4abcccc85c281R558).\nIf that is ok for you, I would implement that fast.\n. @lsmith77 created a new PR: https://github.com/FriendsOfSymfony/FOSRestBundle/pull/781\n. @lsmith77 The PR would be ready to merge\n. Well, that's want Symfony wants ;-) I didn't know about that before, but if two routes in the collection are actually the same instance, Symfony is doing some actions twice on it.\nI don't know if I can test it in a better way, since the problem is \"caused\" by symfony code.\n. Of course, I tried it first like that, but misinterpreted the error message...\n. ",
    "alexander-schranz": "@danrot i did test it with our mediacontroller. The cgetAction was created as cget_media and worked other controllers like collection still get the name get_collections. so this changes fixed my problem.\n. ",
    "selmanon": "@stof  So how can i solve this problem, i m newbie in Symfony\n. @stof can you see my edit please .. and guide me .. i am lost http://stackoverflow.com/questions/23547419/fosrestbundle-json-response\n. ",
    "olee": "Ok I found a temporary solution by using a CompilerPass to override the priority set in bodyListener.yml configuration.\n```\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface;\nuse Symfony\\Component\\DependencyInjection\\Definition;\nclass FosRestPass implements CompilerPassInterface {\npublic function process(ContainerBuilder $container) {\n    if ($container->has('fos_rest.body_listener')) {\n        $definition = $container->getDefinition('fos_rest.body_listener');\n        $tag = $definition->getTag('kernel.event_listener');\n        $tag[0]['priority'] = 0;\n        $definition->setTags(array_merge($definition->getTags(), array('kernel.event_listener' => $tag)));\n    }\n}\n\n}\n```\n. (Sorry for closing and reopening -> missclick)\nI don't really get what 0bb8cb4 is for, but I think @florianv's suggestion would be the correct solution to this problem.\n. Just to be clear: so what's the conclusion now about this issue?\n. Sorry but I am not that knowledgeable with GitHub. Could anyone else clear the issue or tell me how to do it?\n. So if I am not mistaken this bug is fixed now and the issue closed, isn't it?\n. ",
    "wachterjohannes": "@lsmith77 i have the same issue (_format) and found perhaps the problem! The router listener set the default parameter (_format comes from config fos_rest: routing_loader: default_format: json) and  have the priority 32. The body listener (with priority 64) asks for requestformat:\nphp\n            $format = null === $contentType\n                ? $request->getRequestFormat()\n                : $request->getFormat($contentType);\n```\n    public function getRequestFormat($default = 'html')\n    {\n        if (null === $this->format) {\n            $this->format = $this->get('_format', $default);\n        }\n    return $this->format;\n}\n\n```\nwithout parameter says that the format is set to attribute '_format' or default (html)\nthe attribute '_format' is set later but the format for request is frozen to html ...\nThe solution is to set the priority of body listener to 10 ... but i don\u00b4t know if this matches the requirements!\n. @lsmith77 i have the same issue (_format) and found perhaps the problem! The router listener set the default parameter (_format comes from config fos_rest: routing_loader: default_format: json) and  have the priority 32. The body listener (with priority 64) asks for requestformat:\nphp\n            $format = null === $contentType\n                ? $request->getRequestFormat()\n                : $request->getFormat($contentType);\n```\n    public function getRequestFormat($default = 'html')\n    {\n        if (null === $this->format) {\n            $this->format = $this->get('_format', $default);\n        }\n    return $this->format;\n}\n\n```\nwithout parameter says that the format is set to attribute '_format' or default (html)\nthe attribute '_format' is set later but the format for request is frozen to html ...\nThe solution is to set the priority of body listener to 10 ... but i don\u00b4t know if this matches the requirements!\n. ",
    "kix": "@lsmith77, the action is present and is not overwritten now, but the route name prefix is now broken. That's what was before:\n$ app/console router:debug --show-controllers | grep cars\nmy_crm_link_section_car LINK   ANY    ANY  /api/sections/{id}/cars/{carId}.{_format}        my_crm_api.sections.controller:linkCarAction\nmy_crm_get_cars         GET    ANY    ANY  /api/cars/{id}.{_format}                         my_crm_api.cars.controller:getAction\nmy_crm_post_cars        POST   ANY    ANY  /api/cars.{_format}                              my_crm_api.cars.controller:postAction\nmy_crm_put_cars         PUT    ANY    ANY  /api/cars/{id}.{_format}                         my_crm_api.cars.controller:putAction\nmy_crm_delete_cars      DELETE ANY    ANY  /api/cars/{id}.{_format}                         my_crm_api.cars.controller:deleteAction\nAnd after updating FOSRestBundle to master it looks like this (2nd line):\n$ app/console router:debug --show-controllers | grep cars\n my_crm_link_section_car LINK   ANY    ANY  /api/sections/{id}/cars/{carId}.{_format}        my_crm_api.sections.controller:linkCarAction\n cmy_crm_get_cars        GET    ANY    ANY  /api/cars.{_format}                              my_crm_api.cars.controller:cgetAction\n my_crm_get_cars      GET    ANY    ANY  /api/cars/{id}.{_format}                         my_crm_api.cars.controller:getAction\n my_crm_post_cars     POST   ANY    ANY  /api/cars.{_format}                              my_crm_api.cars.controller:postAction\n my_crm_put_cars      PUT    ANY    ANY  /api/cars/{id}.{_format}                         my_crm_api.cars.controller:putAction\n my_crm_delete_cars   DELETE ANY    ANY  /api/cars/{id}.{_format}                         my_crm_api.cars.controller:deleteAction\n. @lsmith77, OK, I'll look into it.\n. @lsmith77, I'm a bit busy at the moment :(\n. @lsmith77, sorry for the delay.\n. The build failed because explicit dependencies on symfony/event-dispatcher and symfony/http-kernel did not resolve.\n. ",
    "zomberg": "Ok\n. ",
    "JeroenDeDauw": "Haha. That is so simple. And so obvious if you are used to working with Symfony Bundles. Thanks.\njms_serializer:\n    visitors:\n        json:\n            options: JSON_PRETTY_PRINT\n. Thanks for the answers!\nFYI: I cannot reopen this\n. @lsmith77 Thanks! Any idea why you'd want to have this behaviour, and why it's on by default?\nMy problem got fixed by changing my config to:\njms_serializer:\n    visitors:\n        json:\n            options:\n                - JSON_PRETTY_PRINT\n                - JSON_UNESCAPED_SLASHES\n. @stof I know, my app is PHP 5.5, so that works\n. @stof well, that's not the info I was asking about. Why is does json_encode escape slashes by default? That question is loose from any options to change the escaping behaviour or when they where added. Ah - I guess you figured I was asking about the behaviour in the serializer or the API, and not json_encode?\n. ",
    "kuroisuna": "Is there any way to do it at run time?\n. ",
    "allan-simon": "what's the status on this PR , is there anything that can be done to help getting it in a mergeable state ?\n. sorry for the delay, i'm still alive and repeating to myself \"you need to commit your changes\" :/ \n. ",
    "COil": "fos_rest:\n    param_fetcher_listener: true\n    body_listener:          true\n    format_listener:        true\n    view:\n        view_response_listener: 'force'\nThe FormatListener is never called whereas the Body and Param listener are.\n. We used to trust the \"Accept\" header for this. curl -v -H \"Accept: application/json\".\n. Yes i saw this in the loader extension. So what is the most generic rule to reproduce the old behavior ?\n. Yes i saw this in the loader extension. So what is the most generic rule to reproduce the old behavior ?\n. Ok thank you. Closing the issue. My other problem is more related to Behat.\n. Ok thank you. Closing the issue. My other problem is more related to Behat.\n. ",
    "MPLLC": "To be honest, I'm not sure which way this project will go re: authentication.  First my boss mentioned OAuth, then classic username/password, then just a token.  So he still seems a bit confused.\nSo I guess there's nothing to see here.\nThat said, +1 for the docs pointing at different REST related authentication strategies.\n. Okay, I finally got the specs from my boss:\nHe wants it so that when a person registers their account, it creates an API key that's linked to their account and will be stored on the client.  That key will then be used whenever a user does something potentially dangerous, like submitting an order, modifying their credentials, etc.*\nSo, I basically have to use a token, but only with a certain handful of routes.  Safe requests (like simply using GET to obtain a list of items) won't require the key/token.\n*Note that I'm not convinced of the security of this method, but, well, I'm not in charge. :-/\nSo, I've looked over the cookbook entry for API key authentication, but I'm unsure of what, if any, of that I should use given I'm using both FOSRest and FOSUser.  Specifically, I'm not sure how to use the FOSUserBundle as the user provider in this case.\n. ",
    "L0rD59": "@KevinM1 yes you can use this bundle https://github.com/uecode/api-key-bundle\ngood luck\n. Hi @lsmith77, thx for your reply and your time.\nI don't understand what you say when u talk about defining custom serialization mapping of my form type. i've seen the documentation of JMS serializer, and i dont see a chapter who talk about that.\nSee bellow my commun form type : \n``` php\n<?php\nnamespace LIG\\Bundle\\AppBundle\\Form;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolverInterface;\nclass AddressType extends AbstractType\n{\n    /*\n     * @param FormBuilderInterface $builder\n     * @param array $options\n     /\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('customer')\n            ->add('address1')\n            ->add('address2')\n            ->add('postcode')\n            ->add('city')\n            ->add('phone')\n            ->add('phoneMobile')\n            ->add('idCountry')\n        ;\n    }\n/**\n * @param OptionsResolverInterface $resolver\n */\npublic function setDefaultOptions(OptionsResolverInterface $resolver)\n{\n    $resolver->setDefaults(array(\n        'data_class' => 'LIG\\Bundle\\AppBundle\\Entity\\EnacoAddress',\n        'csrf_protection' => false\n    ));\n}\n\n/**\n * @return string\n */\npublic function getName()\n{\n    return 'address';\n}\n\n}\n```\nI've seen also the exemples of implementation of FOSRestBundle (Liip, FOSComment, etc..) describe in documentation. but i have not seen anything different.\nI join you also, my postAddressAction for complete : \n``` php\n    /\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $request\n     \n     * @FOSRestBundle\\Controller\\Annotations\\View(\n     *  template = \"LIGAppBundle:Address:newAddress.html.twig\",\n     *  statusCode = FOSRestBundle\\Util\\Codes::HTTP_BAD_REQUEST,\n     *  templateVar = \"form\"\n     * )\n     \n     * @NelmioApiDocBundle\\Annotation\\ApiDoc(\n     *  resource=true,\n     *  description=\"Create an address\",\n     *  input = \"address\",\n     *  statusCodes = {\n     *      201 = \"Returned when successful\",\n     *      400 = \"Returned when the form has errors\"\n     *  }\n     * )\n     \n     * @return Form\\FormTypeInterface|FOSRestBundle\\View\\View\n     /\n    public function postAddressAction(HttpFoundation\\Request $request)\n    {\n        $entity = new LIGAppBundle\\Entity\\EnacoAddress();\n        $form = $this->createForm(new LIGAppBundle\\Form\\AddressType(), $entity);\n        $form->handleRequest($request);\n    if ($form->isValid()) {\n\n        $em = $this->getDoctrine()->getManager();\n\n        $em->persist($entity);\n        $em->flush();\n\n\n\n        return $this->routeRedirectView('get_address',array('id' => $entity->getId()), FOSRestBundle\\Util\\Codes::HTTP_CREATED);\n    }\n\n    return $form;\n}\n\n```\nbest regards\n. Hi @lsmith77 ,\nIt would seem this bundle can help me : \nhttps://github.com/simplethings/SimpleThingsFormSerializerBundle\n. Hi @mvrhov, thx for your time\ni tried like you said but doesn't work : \n```\n/\n     * Presents the form to use to create an address.\n     \n     * @NelmioApiDocBundle\\Annotation\\ApiDoc(\n     *  resource = true,\n     *  statusCodes = {\n     *      200 = \"Returned when successful\"\n     *  }\n     * )\n     \n     * @FOSRestBundle\\Controller\\Annotations\\View()\n     \n     * @return Form\\FormTypeInterface\n     /\n    public function newAddressAction()\n    {\n        $form = $this->createFormBuilder(null, array())\n            ->add('customer')\n            ->add('address1')\n            ->add('address2')\n            ->add('postcode')\n            ->add('city')\n            ->add('phone')\n            ->add('phoneMobile')\n            ->add('idCountry')\n            ->getForm();\n    return $form\n}\n\n```\ni obtain the same result : \n{\"children\":{\"customer\":[],\"address1\":[],\"address2\":[],\"postcode\":[],\"city\":[],\"phone\":[],\"phoneMobile\":[],\"idCountry\":[]}}\nI've also test like that : \n```\n/* @var \\Symfony\\Component\\Form\\FormFactory $form /\n        $form = $this->get('form.factory');\n        $form = $form->createNamedBuilder('')->add('customer', 'text')\n            ->add('address1', 'text')\n            ->add('address2', 'text')\n            ->add('postcode', 'text')\n            ->add('city', 'text')\n            ->add('phone', 'text')\n            ->add('phoneMobile', 'text')\n            ->add('idCountry', 'text')\n            ->getForm();\n    return $form;\n\n```\nbut same result : \n{\"children\":{\"customer\":[],\"address1\":[],\"address2\":[],\"postcode\":[],\"city\":[],\"phone\":[],\"phoneMobile\":[],\"idCountry\":[]}}\n. ",
    "dangreenisrael": "I am using traditional username/password authentication, but using custom headers. \nI use this function in my controller to validate users.\n*Note that I pass $this is passed as $context\n``` PHP\nprivate function currentUser($context){\n    $username = @$context->container->get('request')->headers->get(\"key\");\n    $password = @$context->container->get('request')->headers->get(\"secret\");\n    return $this->container->get('helper')->loginUser($username, $password);\n}\n\n```\nAnd I have this registered as a service\n``` PHP\npublic function loginUser($username, $password){\n    $securityContext = $this->container->get('security.context');\n    if ($securityContext->isGranted('IS_AUTHENTICATED_REMEMBERED')) {\n        return $securityContext->getToken()->getUser();\n    }\n\n    /* Validate the User */\n    $user_manager = $this->container->get('fos_user.user_manager');\n    $factory = $this->container->get('security.encoder_factory');\n    $user = $user_manager->loadUserByUsername($username);\n    $encoder = $factory->getEncoder($user);\n    $validated = $encoder->isPasswordValid($user->getPassword(),$password,$user->getSalt());\n    if (!$validated) {\n        http_response_code(400);\n        echo \"Validation Failed\";\n        exit;\n    } else {\n        $token = new UsernamePasswordToken($user, null, \"main\", $user->getRoles());\n        $this->container->get(\"security.context\")->setToken($token); //now the user is logged in\n\n        //now dispatch the login event\n        $request = $this->container->get(\"request\");\n        $event = new InteractiveLoginEvent($request, $token);\n        $this->container->get(\"event_dispatcher\")->dispatch(\"security.interactive_login\", $event);\n\n        return $user;\n    }\n}\n\n```\nIt is tested and working using both browser based and CURL based methods.\n. ",
    "saharabear": "curl -v -H \"Accept: application/json\" http://api.mydomain.com/v1/meta/users\nThis does not work too.\n. @tonivdv  Hi, Thanks for your reply, I do not have extra configuration, it's apache server, default virtual host configuration. Anything extra I miss? \n. @lsmith77 @tonivdv \nThanks, I am trying to debug again. \n. @lsmith77   var_dump($request->headers->get('Accept')\nstring(16) \"application/json\"\n. @lsmith77\nvar_dump( $view->getFormat() ?: $request->getRequestFormat())\n//==> html\n. @lsmith77  Oh, Yes, that's the problem, thank you very much. \n@tonivdv  I have tested this app again on my local Slackware Linux with php 5.4.27, yes, it works. \nOn server, testing server, CI server, do not work. Maybe somethine problem about cache? Let me have a try to clear the cache.\n. ",
    "EwanValentine": "Thanks for your quick response. \nI couldn't find anything in the documentation about templates. The view layers documentation doesn't seem to mention what the view itself looks like, unless I'm missing something. Sorry, you probably get 'issues'like this all the time.\nCheers,\nEwan\n. Closing this, figured it out. Thanks for your help. \n. @pyrech Ahaa! I see exactly what you mean, thanks for your help!\n. ",
    "JHGitty": "ping @xabbuh Do you like to take it over? #798 (this) and #443 don't have time for it.\n. Fixed and merged in #1299. @paq85 @lsmith77 \n. @Ener-Getick Sure - but why happened it on my code? :smile:\n. @Ener-Getick Sure - but why happened it on my code? :smile:\n. Thanks @Ma27 @lsmith77 @Ener-Getick \n. @Ma27 @lsmith77 \nMaybe the classes should contain this comment:\nRFC2518 - see https://tools.ietf.org/html/rfc2518\nThis would explain the developers why these have been integrated.\nOtherwise some people would be confused.\nOr we add the information about RFC2518 just to the documentation.\n. Yep. So this is the issue. My routing.yml file:\n``` yaml\napi:\n    prefix:   /api\n    type:     rest\n    resource: \"@AppBundle/Controller/Api/\"\napp:\n    type:     annotation\n    resource: \"@AppBundle/Controller/\"\n```\nThe app routing is the issue here. If I remove it the issue does not appear again.\n. Yep. So this is the issue. My routing.yml file:\n``` yaml\napi:\n    prefix:   /api\n    type:     rest\n    resource: \"@AppBundle/Controller/Api/\"\napp:\n    type:     annotation\n    resource: \"@AppBundle/Controller/\"\n```\nThe app routing is the issue here. If I remove it the issue does not appear again.\n. This code works fine:\n``` php\nuse FOS\\RestBundle\\Controller\\Annotations as Rest;\nclass CategoryController extends FOSRestController\n{\n    /*\n     * @Rest\\Get(\"/api/category/{name}.{_format}\", name=\"api_category\", options={\"method_prefix\": false}, defaults={\"_format\": \"json\"})\n     /\n    public function getCategoryAction($name)\n    {\n        return $this->handleView(new \\FOS\\RestBundle\\View\\View('test'));\n    }\n```\nBut it would be much better if I could use @Rest\\View().\nIt would also be nice if I don't need to specify the default for _format on each action.\n. This code works fine:\n``` php\nuse FOS\\RestBundle\\Controller\\Annotations as Rest;\nclass CategoryController extends FOSRestController\n{\n    /*\n     * @Rest\\Get(\"/api/category/{name}.{_format}\", name=\"api_category\", options={\"method_prefix\": false}, defaults={\"_format\": \"json\"})\n     /\n    public function getCategoryAction($name)\n    {\n        return $this->handleView(new \\FOS\\RestBundle\\View\\View('test'));\n    }\n```\nBut it would be much better if I could use @Rest\\View().\nIt would also be nice if I don't need to specify the default for _format on each action.\n. Okay, that works fine. Is there any idea how to not always write the _format default and automatically add .{_format} to the route path?\n. Okay, that works fine. Is there any idea how to not always write the _format default and automatically add .{_format} to the route path?\n. This issue also appears on version 1.7.7 with Symfony 3.0.6. I use PHP 7.0.7.\n. This issue also appears on version 1.7.7 with Symfony 3.0.6. I use PHP 7.0.7.\n. Of course:\n``` php\nclass CategoryType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('name', TextType::class, [\n                'required' => true,\n            ]);\n    }\npublic function configureOptions(OptionsResolver $resolver)\n{\n    $resolver->setDefaults(array(\n        'data_class' => Category::class,\n    ));\n}\n\n```\n. Of course:\n``` php\nclass CategoryType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('name', TextType::class, [\n                'required' => true,\n            ]);\n    }\npublic function configureOptions(OptionsResolver $resolver)\n{\n    $resolver->setDefaults(array(\n        'data_class' => Category::class,\n    ));\n}\n\n```\n. Here is the same output as XML:\nxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<result>\n  <code>400</code>\n  <message><![CDATA[Validation Failed]]></message>\n  <errors>\n    <form name=\"\">\n      <errors>\n        <entry><![CDATA[This form should not contain extra fields.]]></entry>\n      </errors>\n      <form name=\"name\">\n        <errors/>\n      </form>\n    </form>\n  </errors>\n</result>\nThis is really not how it should be.\n. Here is the same output as XML:\nxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<result>\n  <code>400</code>\n  <message><![CDATA[Validation Failed]]></message>\n  <errors>\n    <form name=\"\">\n      <errors>\n        <entry><![CDATA[This form should not contain extra fields.]]></entry>\n      </errors>\n      <form name=\"name\">\n        <errors/>\n      </form>\n    </form>\n  </errors>\n</result>\nThis is really not how it should be.\n. You are right. Sorry.\n. You are right. Sorry.\n. ",
    "sandermarechal": "Thanks, I'll upgrade to 2.5.1 when it's released. I have worked around it for the time being by extending the XmlDecoder and removing all #text nodes.\n. Nope, @All requires that the value to be checked is an array, not a scalar. It will throw an UnexpectedTypeException.. Nope, @All requires that the value to be checked is an array, not a scalar. It will throw an UnexpectedTypeException.. Sure. PR created.. Sure. PR created.. Implemented, see #1752 . Implemented, see #1752 . I have updated the test and rebased everything on master. @shakura Looks like Travis failed to download some composer packages. All other tests in the matrix did pass. Can that Travis run be restarted somehow?. Rebased on master. That one Travis task still doen't run. Seems to be an SSL problem, nothing to do with my code ([Composer\\Downloader\\TransportException] Peer fingerprint did not match). This might have something to with the switch to TLS 1.2 that various sites have made.. How would you like to see that implemented? trigger a E_USER_DEPRECATED?. Done. Travis fails because of the new deprecation notices. Symfony recommends supressing the notices using the @ prefix. Shall I do that? Or is there a way for PHPUnit to expect these deprecations?. Done. They rely on using a scalar as a requirement, which is now deprecated. The @legacy annotation allows these tests to pass.. The original code already used FQCN strings so I just did the same. Anyway, fixed.. ",
    "arnolanglade": "Thank for your quick answer, I wanted to wrap the view data with a custom envelop. I think that I will create my own custom view. Is there a better way to do that (just in case of :D) ?\n. ",
    "pmithrandir": "Hello.\nI managed to do it by replacing in my form the type from datetime to text and by applying a transformer on it.\nBut I don't think it's the best option.\nMy APIdoc does not include the format expected now.\nI can't reuse my form in a view.\nAnyone played with form and DateTime ?\nbest regards,\nPierre\n. Hello,\ni'm using \"dev-master\": \"1.4-dev\"\nBest regards,\nPierre\n. Hello,\nYou were right. I had a global load from all controler actions in my main rooting file.\nthank you,\nQuestion would come back if I would mix different code, but I think I could manage from this point.\nThank you, and sorry for the false report.\nPierre\n. Hello,\nYou were right. I had a global load from all controler actions in my main rooting file.\nthank you,\nQuestion would come back if I would mix different code, but I think I could manage from this point.\nThank you, and sorry for the false report.\nPierre\n. ",
    "ousmaneNdiaye": "@pmithrandir I got the same problem...\n. thanks :+1: \n. ",
    "JohnnyEvo": "@ousmaneNdiaye @pmithrandir Me too, same problem\n. ",
    "JohannesKlauss": "A default datetime field expects the following structure:\n\"datePicture\": {\n    \"date\": {\n        \"year\": 2014,\n        \"month\": 11,\n        \"day\": 5\n    },\n    \"time\": {\n        \"hour\": 23,\n        \"minute\": 11\n    }\n}\n. ",
    "awessoEsso": "@ousmaneNdiaye  Can you please explain it to me? I don't understand what you mean. Thanks\n. ",
    "bveldhuis": "There seems to be a bug in the format configuration option on the datetime-type. The specified format is simply ignored. \nTo work around this bug and get this working, you should do one of two things. \nYou can make your API-client send the DateTime value in the structure provided above by @JohannesKlauss.\nIf you don't wish to use this format on the client-side, you can specify a custom format in the formBuilder configuration. Change: \n->add('datePicture', 'datetime', array(\n                'description' => 'The date when the picture was taken',\n                'format' => 'yyyy/MM/dd HH:mm',\n            ))\ninto\n->add('datePicture', 'datetime', array(\n                'description' => 'The date when the picture was taken',\n                'widget' => 'single_text',\n                'date-format' => 'yyyy/MM/dd',\n            ))\nThis got it working for me. Note that specifying the time-format is not necessary because you are using the default format for this. \n. ",
    "linh4github": "Thank @bveldhuis. You're absolute right : 'widget' => 'single_text' is important.\n. ",
    "z41": "Hello.\nPossibly you wrote simplified example, so please check this article.\nhttps://florian.voutzinos.com/blog/handling-camelcase-with-fosrestbundle/\n. ",
    "ninjabachelor": "I run into a similar issue.\nHave this controller:\n/**\n * @Rest\\View()\n */\npublic function getMessageAction( $id )\nand this config\n```\nsensio_framework_extra:\n    router: { annotations: true }\nfos_rest:\n    routing_loader:\n        include_format: false\n```\nIt correctly generates one route:\nget_message                GET    ANY    ANY  /messages/{id}\nbut I need requirements on the ID that is passed, so I add:\n/**\n * @Rest\\Get( requirements={\"id\" = \"\\d+\"} )\n * @Rest\\View()\n */\npublic function getMessageAction( $id )\ni get two routes:\napp_message_getmessage      GET    ANY    ANY  /                                 \nget_message                 GET    ANY    ANY  /messages/{id}\nHow can I avoid to generate the first one while keeping the requirements?\nThanks\n. Thanks @lsmith77 ! With @NoRoute it is working correctly.\nAnother solution I found was to disable the generic routing on my bundle, and keep the specific one for the controller.\n```\napp:\nresource: @AppBundle/Controller/\ntype:     annotation\nmessages:\n    resource:   @AppBundle/Controller/MessageController.php\n    type:       rest\n    prefix:     /api\n```\nBye!\n. ",
    "patrickli": "I just encountered the same issue and I think this is something that ParamFetcher need to account for. Since RegexValidator (and all symfony validators except NotBlankValidator) simply ignores null or empty string. Reference here.\nSo ParamFetcher need to add a NotBlank constraint in addition to Regex constraint so that empty values on a strict, not nullable parameter is considered invalid.\n. ",
    "munkie": "@dunglas Because we need to serialize ExceptionWrapper, not Form. Form instance will be passed further and serialized using FormErrorHandler. (See line 75)[https://github.com/FriendsOfSymfony/FOSRestBundle/pull/816/files#serializer-exceptionwrapperserializehandler-php-P75]\nAnd the main question - does this PR solve form validation error serialization issue?\n. @lsmith77 @dunglas So what do you think guys, is it good to be merged ?\n. @lsmith77 Great! Thanx!\n. @lsmith77 Great! Thanx!\n. @Ener-Getick By functional tests i meant something like this http://symfony.com/doc/current/book/testing.html#your-first-functional-test - testing using Symfony WebTestCase and Crawler.\nMost of the time tests are run with debug off (it speeds up execution).\nBut while developing, debug is switched on, so cache could be rebuild on every code change (not to run cache clear every time).\nIn this case error response JSON assertions will fail because they will also contain exception.\n. @lsmith77 @Ener-Getick Rebased master.\nAlso added fos_rest.exception.debug_message option to enable/disable usage of exception message in error response manually.\n. @lsmith77 @Ener-Getick Rebased master.\nAlso added fos_rest.exception.debug_message option to enable/disable usage of exception message in error response manually.\n. @Ener-Getick @lsmith77 @xabbuh Done :sweat_smile:\n. Rebased.\nMade map services private.\nMade ExceptionValueMap::resolveClass method private\n. So what's your suggestion: make it private ?\n. One show_exception forces to add exception to error response\nSecond debug_message forces to use exception message instead of standard response status text\nMaybe second config param should renamed to show_exception_message to be more clear\n. Dont see much benefits in moving to extension:\n$showException = (null === $config['exception']['show_exception']) ? $container->getParameter('kernel.debug') : $config['exception']['show_exception'];\n$container->getDefinition('fos_rest.exception.controller')->replaceArgument(2, $showException);\nLooks way more complicated.\nActually i used same approach as in symfony docs - http://symfony.com/doc/current/cookbook/configuration/using_parameters_in_dic.html\n. Boolean node does not allow to use other values than boolean.\ntreatNullLike('%kernel.debug%') will lead to config validation error.\nThat's why i was injecting 'kernel.debug' param bool value into config previously - to be able to use it as default value for this node. \nAlso without treatNullLike(false) null will be treated as true\n. Fixed :+1: \n. Fixed\n. ",
    "samvdb": "None of the annotations work either, havent tried using yml though. Using jms/serializer 0.13.0. \n. ",
    "robertblock": "Same problem here.\nI have not been able to upgrade from FOSRestBundle 1.2.* since the @Rest\\View annotation serializerGroups action does not work after upgrading to 1.3., 1.4. or 1.5.*.\nI have no doubt it's my fault, I'm just not sure what I'm doing wrong. \n. Same problem here.\nI have not been able to upgrade from FOSRestBundle 1.2.* since the @Rest\\View annotation serializerGroups action does not work after upgrading to 1.3., 1.4. or 1.5.*.\nI have no doubt it's my fault, I'm just not sure what I'm doing wrong. \n. Sure. Let me know if this is enough:\n```\nuse Doctrine\\DBAL\\DBALException;\nuse JMS\\Serializer\\SerializationContext;\nuse Nelmio\\ApiDocBundle\\Annotation\\ApiDoc;\nuse FOS\\RestBundle\\View\\View AS FOSView;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse FOS\\RestBundle\\Controller\\Annotations as Rest;\nuse JMS\\SecurityExtraBundle\\Annotation as Security;\nclass StudentRestController extends Controller\n{\n    /\n     * Get student by id.\n     \n     * @Rest\\View(serializerGroups={\"sg-default\", \"sg-details\"})\n     \n     * @ApiDoc()\n     \n     * @param Student $student\n     * @return FOSView\n     \n     * @Security\\Secure(\"ROLE_USER\")\n     */\n    public function getStudentAction(Student $student)\n    {\n        return FOSView::create()->setStatusCode(200)->setData($student);\n    }\n}\n```\n. Sure. Let me know if this is enough:\n```\nuse Doctrine\\DBAL\\DBALException;\nuse JMS\\Serializer\\SerializationContext;\nuse Nelmio\\ApiDocBundle\\Annotation\\ApiDoc;\nuse FOS\\RestBundle\\View\\View AS FOSView;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse FOS\\RestBundle\\Controller\\Annotations as Rest;\nuse JMS\\SecurityExtraBundle\\Annotation as Security;\nclass StudentRestController extends Controller\n{\n    /\n     * Get student by id.\n     \n     * @Rest\\View(serializerGroups={\"sg-default\", \"sg-details\"})\n     \n     * @ApiDoc()\n     \n     * @param Student $student\n     * @return FOSView\n     \n     * @Security\\Secure(\"ROLE_USER\")\n     */\n    public function getStudentAction(Student $student)\n    {\n        return FOSView::create()->setStatusCode(200)->setData($student);\n    }\n}\n``\n. Without looking too deeply into the code, it looks like the inclusion of$customViewDefinedinViewResponseListener` is causing this issue. \nAgain, without looking too deeply into the code, there may be a logic error on line 89. I think serializer groups should be applied if $customViewDefined == true:\nif ($configuration->getSerializerGroups() && !$customViewDefined) {\nshould be:\nif ($configuration->getSerializerGroups() && $customViewDefined) {\nI've never actually contributed to a project, but I can look into the process and give it a go if you'd like me to handle this one?\nEDIT: I'm going to try to contribute this change. Please let me know if I do something wrong. :)\n. Without looking too deeply into the code, it looks like the inclusion of $customViewDefined in ViewResponseListener is causing this issue. \nAgain, without looking too deeply into the code, there may be a logic error on line 89. I think serializer groups should be applied if $customViewDefined == true:\nif ($configuration->getSerializerGroups() && !$customViewDefined) {\nshould be:\nif ($configuration->getSerializerGroups() && $customViewDefined) {\nI've never actually contributed to a project, but I can look into the process and give it a go if you'd like me to handle this one?\nEDIT: I'm going to try to contribute this change. Please let me know if I do something wrong. :)\n. @hallabro Thanks for the feedback!\nI'm curious as to the intention behind $customViewDefined. I can't figure out why it was only used in checking whether to use groups when serializing.\n. @hallabro Thanks for the feedback!\nI'm curious as to the intention behind $customViewDefined. I can't figure out why it was only used in checking whether to use groups when serializing.\n. ",
    "stilllife00": "Referencing https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1875 which might be related. @xabbuh I think not.\n````\nuse FOS\\RestBundle\\Controller\\Annotations as Rest;\n...\n/* \n * @Rest\\View(statusCode=Response::HTTP_OK, serializerGroups={\"user\"})\n/\npublic function someUserAction() {\n // create an user\n return $user\n}\n``` . @xabbuh  You are right thanks for the clarification. JMSSerializer kicks in when returning an entity and it usesproperties` from the YAML file.. ",
    "andytruong": "it's issue of my server config. I am sorry!\n. ",
    "EnchanterIO": "@gnat42 thank you for a tip! I had something similar. \nwelcomepagebundle.listener.request:\n    class: TB\\WelcomePageBundle\\Listener\\CustomRequestListener\n    tags:\n        - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }\n    arguments: [ @session, @request_stack, @security.context, @tb_user.user.managment ]\nWas from some magical reason destroying my FosOauth API.\nCan you show me how did you modify your Listener?\nBecause my currently looks like:\n```\npublic function __construct(\n    Session $session,\n    RequestStack $requestStack,\n    SecurityContext $securityContext,\n    UserManagment $oUserManagment)\n{\n    $this->session = $session;\n    $this->requestStack = $requestStack;\n    $this->securityContext = $securityContext;\n    $this->oUserManagment = $oUserManagment;\n}\n/*\n * @param GetResponseEvent $event\n /\npublic function onKernelRequest(GetResponseEvent $event)\n```\nAnd the only solution that comes to my mind currently is this:\nif (preg_match('/api|oauth/', $event->getRequest()->getUri()))\n    {\n        return;\n    }\n. @gnat42 I am experiencing the same issue. \nWhen I call this method from onKernelRequest:\n/**\n * @param GetResponseEvent $event\n */\nprotected function trackLoggedInUserVisit(GetResponseEvent $event)\n{\n    if ($event->isMasterRequest() && $this->securityContext->isGranted('ROLE_USER'))\n    {\n        $this->oUserManagment->saveLoginActivity($this->securityContext->getToken()->getUser());\n    }\n}\nOR this one:\n```\n/*\n * @param GetResponseEvent $event\n /\nprotected function setCameFrom($event)\n{\n    if (\n        $event->isMasterRequest()\n        && (null !== $_request = $this->requestStack->getCurrentRequest()))\n    {\n        $came_from         = $_request->headers->get('referer');\n        $session_came_from = $this->session->get('came_from');\n    if (empty($session_came_from))\n    {\n        $this->session->set(\"came_from\", $came_from);\n    }\n}\n\n}\n```\nWhen I comment them out it's working fine my API\n. You mean: - { path: '^/',  priorities: [ json ], fallback_format: html, prefer_extension: true } ?\nIf I do that even the normal page load (which is html) will be converted to json response... or do you have something else in mind ? :) What about my main question? Are there some configuration values that will ensure the fos rest api doesn't care what happens under different paths then ^/api ? \n. Yes I tried that before but that's not good solution as next thing would need to be .css and then who knows how many more extensions. \n. Why can't I just tell fos rest to leave everything like before and don't apply any voodoo to non /api/ routes ???\n. Working! GJ!\n. ",
    "whitewhidow": "i was under the impresaion that there where 2 types of params, queryparams, and requestparams, i tought that the ones i was using where supposed to be requestparams. (the ones also used by the routing). i guess i was off on the terminology then ?\nso if i pass these as the third param to forward().  then they are request attributes ? same is in routing? and paramfetcher should feth them.\nim i correct in my thinking now ?\nthx for your time !\n. i was under the impression that the paramfetcher should fetch params coming from the routing aswell (request attributes right ?)\n. ",
    "sidharth721": "Thanks Ismith77 for your reply actually it was problem in composer itself. On update it worked properly.\nsidharth ramachandran\n. Thanks Ismith77 for your reply actually it was problem in composer itself. On update it worked properly.\nsidharth ramachandran\n. ",
    "pgodel": "Then the installation instructions are not clear enough:\n- it says that if you used composer to install the bundle, you need to enable the JMSSerializerBundle but JMSSerializerBundle was not installed by composer\n- is it somewhere described how to use the Symfony serializer?\n. Then the installation instructions are not clear enough:\n- it says that if you used composer to install the bundle, you need to enable the JMSSerializerBundle but JMSSerializerBundle was not installed by composer\n- is it somewhere described how to use the Symfony serializer?\n. ",
    "ruscon": "For mobile application form errors is a big trouble, because have a different formats (hash or array) :(\n. Can you write whole example for change form validation format with exception_wrapper_handler ? (need for rest api)\n{\n  \"code\": 400,\n  \"message\": \"Validation Failed\",\n  \"errors\": {\n    \"children\": {\n      \"username\": {\n        \"errors\": [\n          \"This value should not be blank.\"\n        ]\n      }\n    }\n  }\n}\nto  something like this\n{\n  \"error\": {\n      \"username\": [\n        \"This value should not be blank.\"\n      ]\n    }\n}\n. @stof \n\nhow are you rendering errors attached at the root of the form rather than on a child ?\n\nErrors needed only for form validation only\nDon't needed code field, because it is rest api (i use http status)\nDon't needed message, because i have api doc for http statuses (but may be i add this field later)\nAnd root errors it's a trouble for me, because of this https://github.com/sonata-project/SonataUserBundle/issues/462 :(\n\nhow does it work for deeper forms, which have child forms nesting other simpler forms ?\n\nEasily\n{\n  \"error\": {\n    \"user\": { # user child form\n      \"firstname\": [\n        \"This value should not be blank.\"\n      ]\n    },\n    \"agent_card\": [\n      \"This value is not valid.\"\n    ]\n  }\n}\n_Why i can't use default error structure ?_\nBecause ios programmer can't parse different error structure (sometime hash, sometime array)\nExample\n{\n  \"code\": 400,\n  \"message\": \"Validation Failed\",\n  \"errors\": {\n    \"children\": {\n      \"username\": { # hash, if has errors\n        \"errors\": [\n          \"This value should not be blank.\"\n        ]\n      }\n    }\n  }\n}\n{\n  \"code\": 400,\n  \"message\": \"Validation Failed\",\n  \"errors\": {\n    \"children\": {\n      \"username\": [] # array, if no errors\n    }\n  }\n}\nIf you could help me with good format for rest api (considering ios strong format) - I will be very grateful!\n\nNow i use this, but i thing should be a more correct approach\nAnd sometimes i have errors like this https://github.com/sonata-project/SonataUserBundle/issues/462\n``` <?php\nnamespace X\\Bundle\\ApiBundle\\EventListener;\nuse X\\Bundle\\ApiBundle\\Exception\\InvalidFormException;\nuse Symfony\\Component\\Form\\Form;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\GetResponseForExceptionEvent;\nuse Symfony\\Component\\HttpKernel\\Exception\\AccessDeniedHttpException;\nuse Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\nuse Symfony\\Component\\HttpKernel\\Exception\\ConflictHttpException;\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\nclass ExceptionFilterResponse\n{\n    /*\n     * @param GetResponseForExceptionEvent $event\n     /\n    public function onKernelResponse(GetResponseForExceptionEvent $event)\n    {\n        $request = $event->getRequest();\n        $routeName = $request->get('_route');\n    // if not api route, when don't catch\n    if ('api_' !== substr($routeName, 0, 4)) {\n        return;\n    }\n\n    $exception =  $event->getException();\n\n    $statusCode = 500;\n    $message = $exception->getMessage();\n\n    if ($exception instanceof NotFoundHttpException) {\n        $statusCode = $exception->getStatusCode();\n        $message = $exception->getMessage();\n\n    } elseif ($exception instanceof BadRequestHttpException) {\n        $statusCode = $exception->getStatusCode();\n        $message = $exception->getMessage();\n\n    } elseif ($exception instanceof ConflictHttpException) {\n        $statusCode = $exception->getStatusCode();\n        $message = $exception->getMessage();\n\n    } elseif ($exception instanceof AccessDeniedHttpException) {\n        $statusCode = $exception->getStatusCode();\n        $message = $exception->getMessage();\n\n    } elseif ($exception instanceof InvalidFormException) { // my custom exception with form object\n        $statusCode = 400;\n        $message = $this->getFormErrors($exception->getForm());\n\n    } elseif ($exception instanceof \\RuntimeException) {\n        $statusCode = 400;\n        $message = $exception->getMessage();\n\n    }\n\n    $content = json_encode(['error' => $message]);\n    $response = new Response($content, $statusCode, ['ACCEPT' => 'application/json']);\n    $event->setResponse($response);\n}\n\n/**\n * Get custom error structure\n * @param Form $form\n * @return array\n */\npublic function getFormErrors(Form $form)\n{\n    $errors = [];\n\n    if ($form instanceof Form) {\n        foreach ($form->getErrors() as $error) {\n            $errors[] = $error->getMessage();\n        }\n\n        foreach ($form->all() as $key => $child) {\n            /**\n             * @var $child Form\n             */\n            if ($err = $this->getFormErrors($child)) {\n                $errors[$key] = $err;\n            }\n        }\n    }\n\n    return $errors;\n}\n\n}\n```\nservice\n```\nparameters:\n    x_api.kernel.listener.exception_listener.class: X\\Bundle\\ApiBundle\\EventListener\\ExceptionFilterResponse\nservices:\n    x_api.kernel.listener.exception_listener:\n        class: %x_api.kernel.listener.exception_listener.class%\n        tags:\n            - {name: kernel.event_listener, event: kernel.exception, method: onKernelResponse}\n```\n. Recursion as you can see in\npublic function getFormErrors(Form $form)\ntest results\nhttp://i.imgur.com/KpYdMMX.png\nagain will be trouble with hash and array\n. +1 \nCan you add this hotfix to the current release ?\n. ",
    "broncha": "+1 for consistency between hash and array\n. ",
    "nikunjkabariya": "Try this class as service. It helped me. https://gist.github.com/Graceas/6505663\nSymfony Form Error Serializer. Allows tree and flat array styles for errors.. ",
    "pohlaniacz": "Hi, thanks for reply. I implemented the code from article, but now it's not retrieving surname at all. My point is, the proper way for API is to return null (surname: '') instead of returning nothing. Am I right?\n. ",
    "EduardTrayan": "@lsmith77 PR submitted\n. ",
    "mpoiriert": "I just wan to know how the \"traverse\" and \"deep\" parameters are supported in 2.5 ?\n. ",
    "mohdhallal": "all right! thanks!\n. ",
    "jbouzekri": "You are right, the core exception controller cannot know it. As I said previously, I think that the FOSRest exception controller should fall back to the classic one when the route is not a rest one.\nAfter that, how to do it ? Maybe adding a parameter to the configuration like exception_controller_paths and implementing a fallback to the one from SF if none of the configured paths matched with the request.\n. I see your point and I understand. But in this case, before checking if the format is authorized, I think the priority should be on the requested resource and its existence. So for me, my request /something_without_route should be catched before and return a 404 error code.\nLike you said, I am going to create a new Exception controller and check the path of my routes to check if they starts with /api or not and fallback to the sf exception controller in the later.\nThanks for your time.\n. It is open to debate. Do we want to check the format before the existence of the resource ? I would vote for a 404 because I think that the resource should be priorized. But I am not an expert in HTTP protocol so maybe it is the reverse.\n. Yeah thanks for clarifying all of it. My problem is that I have both a small api (json exclusive) and a small website on the same sf2 instance. Too bad, you cannot have out of the box both the FOSRestBundle with only json request enabled for some api needs and some routes serving html. It seems a classic use case in for small project in enterprise.\nI am going to look at the 2 solutions you proposed : \n- a dedicated kernel for my api (with an apache rewrite rule to the correct front controller for all routes starting with /api)\n- or the custom exception controller to differentiate which controller should be run based on route prefix.\nNice chart, I bookmarked it.\nOne more time, thanks for the time you took answering my questions.\nHave a nice day\n. Not exactly, the user enable this jms context feature by setting in a parameters.yml file : \nyaml\nfos_rest.serializer.exclusion_strategy.max_depth: true\nThen he can use the max_depth property in his JMS configuration. For example, in the file MyBundle/Resources/config/serializer/Item.yml : \nyaml\nMyBundle\\Entity\\Item:\n    exclusion_policy: ALL\n    properties:\n        children:\n            expose: true\n            max_depth: 3\n. Yeah I wanted to see if this pull request was acceptable. For the DIC extension, my bad, I just saw that there was a serializer section. Ok I will work on it shortly.\n. What an idiot I am. I just made a search on MaxDepth and I found that this feature was implemented for the View using annotation.\nphp\n/**\n * @View(\n *  serializerEnableMaxDepthChecks=false\n * )\n */\nAfter looking at what happens in the ViewResponseListener, I have created a CustomView extending the normal View and overrided the create static method and use it in my controllers (as I don't like annotation) : \n``` php\nuse FOS\\RestBundle\\View\\View as BaseView;\nclass View extends BaseView\n{\n    /*\n     * {@inheritDoc}\n     /\n    public static function create($data = null, $statusCode = null, array $headers = array())\n    {\n        $view = parent::create($data, $statusCode, $headers);\n        $view->getSerializationContext()->enableMaxDepthChecks();\n        return $view;\n    }\n}\n```\nSo i will close this pull request. Thanks for your time.\n. ",
    "saro0h": "@lsmith77 @Tobion Sorry about the delay. The output you see is because of an event subscriber (I created) listening to the kernel.exception to always have a json Response to serve to the client consuming my Api (and the client needs an extra field \"timestamp\").\nI make sure that I send a 500 error instead that 406 that seems to come from the negotiator having troubles.\nBut maybe I do it wrong? :/\n. Sure! Thank you very much for the improvement :)\n. ",
    "SpartakusMd": "Oh, thank you. That helped. Didn't know that you can disable the listener :)\n. ",
    "MlleDelphine": "You've just saved my day.. ! :+1: \n. ",
    "bblue": "Can this issue be re-opened? I need pretty much exactly the same feature as the author (same article even), and I need to access the JMS serialization context (preferably from a controller). \nIt appears however that the $view->setSerializationContext($context); is no longer available.\nI looked into a compiler pass for the JMSSerializationAdapter, but the convertContext method is private, so no luck there.\nAs a side-note, the documentation  still references  $view->setSerializationContext($context); \n. Can this issue be re-opened? I need pretty much exactly the same feature as the author (same article even), and I need to access the JMS serialization context (preferably from a controller). \nIt appears however that the $view->setSerializationContext($context); is no longer available.\nI looked into a compiler pass for the JMSSerializationAdapter, but the convertContext method is private, so no luck there.\nAs a side-note, the documentation  still references  $view->setSerializationContext($context); \n. I am successfully using the paramconverter and fetching objects by different keys when using the automatic route generation (I'm on 2.0). Never had an issue with this...\nExample code below that works.\n/**\n * Find object by different property than its ID\n *\n * @ParamConverter(\"referral\", options={\"mapping\":{\"referral\" = \"anotherPropertyThanID\"}})\n * @param Referral $referral\n */\npublic function getAction(Referral $referral)\n{\n    // ...\n}\nAccessible via http://~/myControllerName/{referral}\n. That was not really a solution. And I cannot recall exactly what I was thinking at the time, probably just a proposal to somehow let the user know why a 404 is generated by some fallback route. I'm at our summer cabin with no real way of investigating a proposed fix now (no 3G/4G), might look at it in a couple of weeks.\n. That was not really a solution. And I cannot recall exactly what I was thinking at the time, probably just a proposal to somehow let the user know why a 404 is generated by some fallback route. I'm at our summer cabin with no real way of investigating a proposed fix now (no 3G/4G), might look at it in a couple of weeks.\n. Is anyone working on a PR for this? I'll give it a shot if not... \n. Did a bit more digging, and it appears the requested format is dropped in the subrequest to fos_rest.exception.twig_controller:showAction. \nI also tried to remove the two rules below, and I then received a Content-Type of text/html; charset=UTF-8,text/html; charset=UTF-8.\n// config.yml\nfos_rest:\n    format_listener:\n        rules:\n            - { path: '^/api', priorities: [ 'json', 'xml', 'html' ], fallback_format: json, prefer_extension: true }\n            - { path: '^/', stop: true }\nBut the root cause appears to be merging the Content-Type headers of the subrequest and original request, instead of replacing them.\n. Researched a bit more now. Not sure if I am looking in the right place, but throwing it out here anyway.\nIt appears symfony http foundation might concatenate multiple Content-Type headers. The issue is discussed here: https://github.com/symfony/symfony/issues/16646, but for accept headers. Apparently RFC2616 describes multiple same-name headers to be comma separated, I could not find anything specific to Content-Type headers, but maybe some magic in Symfony \"fixes\" the response in the same manner.  I have not figured out why it only happens for php errors though, probably because something deep in symfony \"resets\" in such a situation.\nIf this indeed is the case, then I suppose there are three possible solutions:\n1) Remove the Content-Type header for the sub request\nI think this would be the preferred option, but it might be a BC break.\n2) Get the correct _format into the sub-request\nThis might still result in a comma separated Content-Type header, but at least with the same value\n3) Heal the http-foundation-healed Content-Type back to original state\nI am not sure where this logic would go.\n. I am actually using dev-master for some reason, probably in error. I should have been on a stable branch.\nEdit: I am using the TwigExceptionController, if it matters.\n. I am actually using dev-master for some reason, probably in error. I should have been on a stable branch.\nEdit: I am using the TwigExceptionController, if it matters.\n. Just realized I had been referenced in this thread a while ago. Haven't worked on that project for a loooong time, and its dependencies and symfony has not been updated since 2017. \nI recall initally making a compiler pass to override the FOSRest listener, but was not happy with that solution. I ended up instead solving the root cause that threw my initial exception (not linked to fosrest), thus I really just side-steped the real bug, but I then would not have to override any FOSRest classes.\nSo to summarize: you can probably avoid a particular use-case error with a compiler pass, but it would be fragile. Unfortunately I have deleted my compiler pass object, so I can't tell you what I actually wrote in it... I probably just rethrew the exception.\nI'm guessing the PR by @lsmith77 is the way to go, but have not looked at it.. Just realized I had been referenced in this thread a while ago. Haven't worked on that project for a loooong time, and its dependencies and symfony has not been updated since 2017. \nI recall initally making a compiler pass to override the FOSRest listener, but was not happy with that solution. I ended up instead solving the root cause that threw my initial exception (not linked to fosrest), thus I really just side-steped the real bug, but I then would not have to override any FOSRest classes.\nSo to summarize: you can probably avoid a particular use-case error with a compiler pass, but it would be fragile. Unfortunately I have deleted my compiler pass object, so I can't tell you what I actually wrote in it... I probably just rethrew the exception.\nI'm guessing the PR by @lsmith77 is the way to go, but have not looked at it.. I am not really sure why the last commit failed the Travis test... \n. Done. That was close to my first ever test, so don't ask me to create another unless you are prepared to tear it apart :)\n. Done. That was close to my first ever test, so don't ask me to create another unless you are prepared to tear it apart :)\n. Sure can. I will update the PR when I get home today. The is_array should move to the setExclusionStrategies() method instead then. I suppose the same method should throw an exception if the parameter is not an array.\n. On second thought is_array and an exception is not needed, any invalid data will clearly make itself known when the foreach fails. Pushed a simplied version just now.\n. Removed. I thought I initially added that for consistency with a previous build, JMS or something, but now I can't find back to it. It's gone anyway.\n. There is the JMS\\Serializer\\Exclusion\\ExclusionStrategyInterface interface unless you want something native to FOSRest\n. ",
    "urville": "ok, I'll add test cases\n. sure, I will\n. Sorry for delay. Yes, this completely works for me.\n. ",
    "Sukhrob": "Tried both. Neither worked. \n. With form-url-encoded body result is:\n{\n    \"phone\": \"Phone\"\n}\n. But, if I change first_name and last_name to firstName and lastName respectively, it works which means fos_rest.normalizer.camel_keys is doing nothing at all. Or maybe I am doing something really wrong.\n. I created a repo https://github.com/Sukhrob/NormalizerTest\n. Thanks @florianv for your quick response. Yes, it works with \"Content-Type: application/json\". But, what about \"Content-Type: multipart/form-data\". It didn't work.\n. ",
    "jerryladoo": "@lsmith77 thanks for that , but how to do that? Are there any examples around?\n. @lsmith77 thanks for that , but how to do that? Are there any examples around?\n. I have found an easiest way to solve this problem by just simply annotating the action with Route(requirements={\"_format\"=\"csv\"})\n. I have found an easiest way to solve this problem by just simply annotating the action with Route(requirements={\"_format\"=\"csv\"})\n. ",
    "jandom": "For completion of this thread, here is how to do this for PDFs/XLSs files, you can work by analogy from there.\nhttp://stackoverflow.com/questions/29385396/symfony2-fosrestbundle-rest-api-to-return-pdf\nOr as per @lsmith77 you'd need to\nfos_rest:\n    # registering the mime type\n    view:            \n        mime_types: { 'csv': ['text/csv','text/plain'] }\n        formats:\n            json: true\n            csv: true   \n    # modifying the format listener\n    format_listener:\n        rules:\n            # setting fallback_format to null, while setting exception_fallback_format to xml, will mean that in case of an exception, xml will be used\n            - { path: '^/api', priorities: [ 'csv', 'json'], fallback_format: ~, exception_fallback_format: json    , prefer_extension: false }\nReferences \nhttps://symfony.com/doc/current/bundles/FOSRestBundle/3-listener-support.html\nhttps://symfony.com/doc/current/bundles/FOSRestBundle/format_listener.html\nhttp://symfony.com/doc/current/cookbook/request/mime_type.html\n. For completion of this thread, here is how to do this for PDFs/XLSs files, you can work by analogy from there.\nhttp://stackoverflow.com/questions/29385396/symfony2-fosrestbundle-rest-api-to-return-pdf\nOr as per @lsmith77 you'd need to\nfos_rest:\n    # registering the mime type\n    view:            \n        mime_types: { 'csv': ['text/csv','text/plain'] }\n        formats:\n            json: true\n            csv: true   \n    # modifying the format listener\n    format_listener:\n        rules:\n            # setting fallback_format to null, while setting exception_fallback_format to xml, will mean that in case of an exception, xml will be used\n            - { path: '^/api', priorities: [ 'csv', 'json'], fallback_format: ~, exception_fallback_format: json    , prefer_extension: false }\nReferences \nhttps://symfony.com/doc/current/bundles/FOSRestBundle/3-listener-support.html\nhttps://symfony.com/doc/current/bundles/FOSRestBundle/format_listener.html\nhttp://symfony.com/doc/current/cookbook/request/mime_type.html\n. ",
    "umpirsky": "Thanks @stof, that did the trick! :+1: \n. @stof BTW, is this mentioned somewhere in the docs?\n. When can we expect to see this land in 2.4.0?. ",
    "00dani": "Is there any workaround for this yet? Could routes that must accept a JSON scalar annotate themselves to disable the BodyListener, perhaps?. Is there any workaround for this yet? Could routes that must accept a JSON scalar annotate themselves to disable the BodyListener, perhaps?. Alternatively, could non-arrays simply be wrapped in an array first? Something like this? (This does mean request content that consists of a single object {SCALAR_KEY: something} is indistinguishable from request content that consists of the scalar something, but that's unlikely enough a situation not to matter too much.)\nphp\nif (!is_array($data)) {\n  $data = [FOSRestBundle::SCALAR_KEY => $data];\n}\n$request->request = new ParameterBag($data);\nThis would require another change, however: currently, DecoderInterface simply returns false if the content couldn't be decoded, which is a problem because the content might also successfully decode to false. Instead, decoders should throw an exception if decoding fails, and any return value should be trusted as a successful decoding.. Alternatively, could non-arrays simply be wrapped in an array first? Something like this? (This does mean request content that consists of a single object {SCALAR_KEY: something} is indistinguishable from request content that consists of the scalar something, but that's unlikely enough a situation not to matter too much.)\nphp\nif (!is_array($data)) {\n  $data = [FOSRestBundle::SCALAR_KEY => $data];\n}\n$request->request = new ParameterBag($data);\nThis would require another change, however: currently, DecoderInterface simply returns false if the content couldn't be decoded, which is a problem because the content might also successfully decode to false. Instead, decoders should throw an exception if decoding fails, and any return value should be trusted as a successful decoding.. I went ahead and wrote a new JSON decoder class which implements my suggestion and it works very nicely. It also doesn't need DecoderInterface to be changed at all, since false like other scalars is wrapped by my decoder class, which actually knows whether there's been a failure or not. Neat. :). I went ahead and wrote a new JSON decoder class which implements my suggestion and it works very nicely. It also doesn't need DecoderInterface to be changed at all, since false like other scalars is wrapped by my decoder class, which actually knows whether there's been a failure or not. Neat. :). ",
    "Zeichen32": "I've check the documentation and cannot find any example or notice about this behavior. \nI think the rather odd behavior was intentional, because then you can define multiple routes with the same method prefix.\nExample:\nphp\n/**\n* @Link(\"/users1\",  name=\"_a_link_method\")\n* @Get(\"/users2\",   name=\"_a_get_method\")\n* @Get(\"/users3\",   name=\"_an_other_get_method\")\n* @Post(\"/users4\",  name=\"_a_post_method\")\n*/\npublic function multiplegetUsersAction() { /** */ }\nResult:\nmultipleget_users_a_link_method                 LINK      ANY    ANY  /users1.{_format}\nmultipleget_users_a_get_method                  GET       ANY    ANY  /users2.{_format}\nmultipleget_users_an_other_get_method           GET       ANY    ANY  /users3.{_format}\nmultipleget_users_a_post_method                 POST      ANY    ANY  /users4.{_format}\nMaybe in some situations this can be a great feature, but it is really confusing if this is the default behavior, because it is different to the behavior of the symfony routing annotation and the documentation says: \"RestBundle extends the @Route annotation from Symfony.\"\nMaybe to keep bc, i can add a new annotation option, to enable this behavior and add a notice to the docs and upgrading.md about this option.\nEdit:\nThe yml and xml routing definition follows the expected behavior.\n``` yml\nmultipleget_users_a_get_method:\n  pattern:      /users2.{_format}\n  controller:   ::multiplegetUsersAction\n  requirements: {_method: GET}\n  condition: \"context.getMethod() in ['GET'] and request.headers.get('User-Agent') matches '/firefox/i'\"\nmultipleget_users_an_other_get_method:\n  pattern:      /users3.{_format}\n  controller:   ::multiplegetUsersAction\n  requirements: {_method: GET}\nmultipleget_users_a_post_method:\n  pattern:      /users4.{_format}\n  controller:   ::multiplegetUsersAction\n  requirements: {_method: POST}\n  condition: \"context.getMethod() in ['POST'] and request.headers.get('User-Agent') matches '/firefox/i'\"\nmultipleget_users_a_link_method:\n  pattern:      /users1.{_format}\n  controller:   ::multiplegetUsersAction\n  requirements: {_method: LINK}\n  condition: \"context.getMethod() in ['LINK'] and request.headers.get('User-Agent') matches '/firefox/i'\"\n```\n. I've check the documentation and cannot find any example or notice about this behavior. \nI think the rather odd behavior was intentional, because then you can define multiple routes with the same method prefix.\nExample:\nphp\n/**\n* @Link(\"/users1\",  name=\"_a_link_method\")\n* @Get(\"/users2\",   name=\"_a_get_method\")\n* @Get(\"/users3\",   name=\"_an_other_get_method\")\n* @Post(\"/users4\",  name=\"_a_post_method\")\n*/\npublic function multiplegetUsersAction() { /** */ }\nResult:\nmultipleget_users_a_link_method                 LINK      ANY    ANY  /users1.{_format}\nmultipleget_users_a_get_method                  GET       ANY    ANY  /users2.{_format}\nmultipleget_users_an_other_get_method           GET       ANY    ANY  /users3.{_format}\nmultipleget_users_a_post_method                 POST      ANY    ANY  /users4.{_format}\nMaybe in some situations this can be a great feature, but it is really confusing if this is the default behavior, because it is different to the behavior of the symfony routing annotation and the documentation says: \"RestBundle extends the @Route annotation from Symfony.\"\nMaybe to keep bc, i can add a new annotation option, to enable this behavior and add a notice to the docs and upgrading.md about this option.\nEdit:\nThe yml and xml routing definition follows the expected behavior.\n``` yml\nmultipleget_users_a_get_method:\n  pattern:      /users2.{_format}\n  controller:   ::multiplegetUsersAction\n  requirements: {_method: GET}\n  condition: \"context.getMethod() in ['GET'] and request.headers.get('User-Agent') matches '/firefox/i'\"\nmultipleget_users_an_other_get_method:\n  pattern:      /users3.{_format}\n  controller:   ::multiplegetUsersAction\n  requirements: {_method: GET}\nmultipleget_users_a_post_method:\n  pattern:      /users4.{_format}\n  controller:   ::multiplegetUsersAction\n  requirements: {_method: POST}\n  condition: \"context.getMethod() in ['POST'] and request.headers.get('User-Agent') matches '/firefox/i'\"\nmultipleget_users_a_link_method:\n  pattern:      /users1.{_format}\n  controller:   ::multiplegetUsersAction\n  requirements: {_method: LINK}\n  condition: \"context.getMethod() in ['LINK'] and request.headers.get('User-Agent') matches '/firefox/i'\"\n```\n. In pr #761 the \"addRoute\" method was added.\n. In pr #761 the \"addRoute\" method was added.\n. I've added a new annotation option to enable the old behavior and maintain BC. Also i've added a new test case to test the old behavior.\n@lsmith77 What do you think about the option name \"method_prefix\"?\n. I've added a new annotation option to enable the old behavior and maintain BC. Also i've added a new test case to test the old behavior.\n@lsmith77 What do you think about the option name \"method_prefix\"?\n. @lsmith77 I have changed the default behavior.\n. @lsmith77 I have changed the default behavior.\n. @lsmith77  Should i add a notice about the behavior and the new option to the documentation?\n. @lsmith77  Should i add a notice about the behavior and the new option to the documentation?\n. You need to use the full class name:\nyml\ntemplate_card:\n    type:     rest\n    resource: Template\\CardBundle\\Controller\\CardsController\nSee: http://symfony.com/doc/master/bundles/FOSRestBundle/5-automatic-route-generation_single-restful-controller.html#single-restful-controller-routes\n. In your second message, you use @TemplateCardBundle not the full class name!\n. ",
    "beliz": "What can i do to debug it ?\n. What can i do to debug it ?\n. Yes, it was an issue in the JMS serializer, see :  https://github.com/schmittjoh/JMSSerializerBundle/issues/373 \nSorry. \n. Yes, it was an issue in the JMS serializer, see :  https://github.com/schmittjoh/JMSSerializerBundle/issues/373 \nSorry. \n. ",
    "Adapik": "OK, now how I cannot distinguish empty field from false field? No chance. ",
    "jcornide": "I ran into a similar problem and it was also because and invalid comment in the comments section. ",
    "mosch": "I'm not sure how the nullable option should work. i don't really get the difference. maybe this is redundant but the nullable option doesn't work? \n. javascript\nif (null === $value || '' === $value) {\n  return;\n}\nSince the RegexValidator#L37 ignores everything that is null or an empty string, I think even if you're using a constraint with a regex that doesn't allow an empty string, the validation will pass. \nSo :+1: is a go for a merge? \n. great, i think i should go and extend the test and then we can go for the merge. anything else missing?\n. i think it could should also be added in the testExceptionOnValidatesFailure() test, but the class is confusing to me a litte. any advice?\n. did the rebase, everything should be fine now.\n. :+1: thanks\n. @allan-simon sadly the regex validator does not work as expected. The RegexValidator ignores everything that is null or an empty string. What documentation can i add to complete this? \n. ",
    "Lewik": "Extend not so good idea - we cant change type of argument. So we need to make getChildAction and manually set @Get docblock for this route. (No, I will not erase type hinting, because I get entities without additional code =) )\nIt's easier to generate new rest controller and change methods bodies.\nYou're right about another controller and we can't generate it. We can't predict witch getter of parent entity we need to use in methods bodies.\nDo you have more ideas about universal controller and their generation?\n. ",
    "asimsagirabbasi": "hi , i am facing same prblm every thing is working fine on windows localhost but not in Linux shared hosting. please let me know how i can solve it.thnks. hi , i am facing same prblm every thing is working fine on windows localhost but not in Linux shared hosting. please let me know how i can solve it.thnks. ",
    "aitboudad": "see #891\n. ",
    "muka": "Oh sorry,\nso obvious somehow... I'm on an old version.. \n\"friendsofsymfony/rest-bundle\": \"1.2.*\"\nThank you\n. ",
    "ama3ing": "Yeah, it should. Since $form->isValid() returns false.  And actually response content returns form errors.\n. Yeah, it should. Since $form->isValid() returns false.  And actually response content returns form errors.\n. @lsmith77, but still this is a bug IMHO\n. @lsmith77 checked, that works. Created a PR for that :wink: \n. Ohh... Yes, it seems to be a problem. Basically you can add something like:\n``` php\n<?php\nif(!$form->isBound()) {\n    throw new HttpException(400, /.../);\n}\n```\nBut this introduces some copy-paste to the controllers, maybe this can be handled by adding an option like \"required\" to whole form? Do you have any thoughts on how this can be solved?\n. ",
    "eugef": "@lsmith77, do you want me to add test case that would fail before this fix is applied?\n. Ok, will do it\n. Sorry, was too busy this weekend.\n. Sorry, was too busy this weekend.\n. Test is added, also separate PR with only failing test is created https://github.com/FriendsOfSymfony/FOSRestBundle/pull/915\n. Test is added, also separate PR with only failing test is created https://github.com/FriendsOfSymfony/FOSRestBundle/pull/915\n. Well, i cherry-picked commit ec90c29 from 'patch-1' branch into the 'patch-1-test-only'\nOr should i did in other way?\n. Well, i cherry-picked commit ec90c29 from 'patch-1' branch into the 'patch-1-test-only'\nOr should i did in other way?\n. Ups, seems i had deleted by accident one test case https://github.com/eugef/FOSRestBundle/commit/ec90c29a560a80f015b987878d3d7b54afe260e4#diff-fbad238da345246612fd46bb2c0323c8L373\nWhat is the best way to add it back? Create another PR?\n. Ups, seems i had deleted by accident one test case https://github.com/eugef/FOSRestBundle/commit/ec90c29a560a80f015b987878d3d7b54afe260e4#diff-fbad238da345246612fd46bb2c0323c8L373\nWhat is the best way to add it back? Create another PR?\n. Done https://github.com/FriendsOfSymfony/FOSRestBundle/pull/916, please merge\n. If parameter is array then strict is used to determine if parameter is optional or not. \nProbably this is wrong and nullable should be used instead (for now nullable is not used at all for array parameter validation - see https://github.com/FriendsOfSymfony/FOSRestBundle/blob/2437a4fafb232bccac0dff71f9d2ada97e19155c/Request/ParamFetcher.php#L138).\nIf we use both strict and nullable options then following configurations are possible that cover all cases:\n- nullable=true and strict=true - array parameter is optional, items validation is strict\n- nullable=false and strict=true - array parameter is required, items validation is strict\n- nullable=true and strict=false - array parameter is optional, items validation is not strict\n- nullable=false and strict=false - array parameter is required, items validation is not strict\n@lsmith77 , what do you think?\n. @eliecharra , at line https://github.com/FriendsOfSymfony/FOSRestBundle/blob/2437a4fafb232bccac0dff71f9d2ada97e19155c/Request/ParamFetcher.php#L126 strict also should be replaced with nullable\nAnd probably tests should be adjusted for the new behavior.\n. ",
    "deeky666": "@lsmith77 actually I don't quite get the intention of having OPTIONS only available for /resources as the RFC says OPTIONS requests SHOULD include the Allow header in the response to be able to determine which HTTP methods are allowed on the particular resource (and this is what I was always having in mind so far). So IMO this method should also apply for singular resources.\nImagine having relational links in an entity response. Instead of having the HTTP method included explicitly:\njson\n[\n    {\n        \"href\": \"/users/1\",\n        \"rel\": \"show_user\",\n        \"method\": \"GET\"\n    },\n    {\n        \"href\": \"/users/1\",\n        \"rel\": \"replace_user\",\n        \"method\": \"PUT\"\n    },\n    {\n        \"href\": \"/users/1\",\n        \"rel\": \"delete_user\",\n        \"method\": \"DELETE\"\n    },\n]\nI would rather have one single link to /users/1 without the method included and let the user discover available HTTP methods via OPTIONS instead. This shrinks the response a lot and makes it also \"cleaner\".\nWhat do you think?\n. ",
    "Nicorr": "Hey, I had a similar problem, turns out the JSON Payload was malformed (i had to deleyer the name of the first node).\nDetails here : http://stackoverflow.com/questions/29984372/symfony-fosrestbundle-post-request-500-error/30030712#30030712\nHope it helps\n. ",
    "HamidDarash": "hi , my problem is , like the above post , please help me\n. my api return this:\n{\nchildren: {\nname: {}\nmobile: {}\nemail: {}\nsubject: {}\nmessage: {}\n}-\n}\n. ",
    "fabre-thibaud": "Dropping in here after @lsmith77 tweet... The HHVM build is failing because it's just taking too long to run (TravisCI times out after 10 minutes without output). \nAfter a bit of investigation, it turns out that https://github.com/FriendsOfSymfony/FOSRestBundle/pull/919/files#diff-7ea2c3c7fef1a89f7ed9e384321f0a14R161 is looping indefinitely. I don't know much about ~~PHP~~ HHVM & XML internals, but it seems that $nodes and $node are internally referencing the same XML node. I checked by dumping $nodes->childNodes->length on every iteration, and it does increase. \nSimple fix is to store $nodes->childNodes->length in a variable (it is good practice anyways) before starting the loop, though I can't speak for any possible side effects, or whether it was intended:\n```\n$length = $nodes->childNodes->length;\nfor ($i = 0; $i < $length; $i++) {\n```\nHope that helps...\n. Ah so it's probably an HHVM bug... Haven't checked on nightly, but HHVM 3.4.0 & 3.4.2 both have the issue.\n. ",
    "hacfi": "FYI: Just came across this issue myself and this should work fine (now?) as long as you don\u2019t use the resulting underscore names but the property names of your class instead.\n. Very cool idea :+1: \n. Can this be merged or should someone create a new PR for this?\n. ",
    "eddiejaoude": "I do not think so, https://github.com/TransformCore/dial-tone-backend/tree/feature/symfony2-rest-api/app/config\n. config_dev.yml\n```\nimports:\n    - { resource: config.yml }\nframework:\n    router:\n        resource: \"%kernel.root_dir%/config/routing_dev.yml\"\n        strict_requirements: true\n    profiler: { only_exceptions: false }\nweb_profiler:\n    toolbar: \"%debug_toolbar%\"\n    intercept_redirects: \"%debug_redirects%\"\nmonolog:\n    handlers:\n        main:\n            type:   stream\n            path:   \"%kernel.logs_dir%/%kernel.environment%.log\"\n            level:  debug\n        console:\n            type:   console\n            bubble: false\n        # uncomment to get logging in your browser\n        # you may have to allow bigger header sizes in your Web server configuration\n        #firephp:\n        #    type:   firephp\n        #    level:  info\n        #chromephp:\n        #    type:   chromephp\n        #    level:  info\nassetic:\n    use_controller: \"%use_assetic_controller%\"\nswiftmailer:\ndelivery_address: me@example.com\n```\nconfig_prod.yml\n```\nimports:\n    - { resource: config.yml }\nframework:\nvalidation:\ncache: apc\ndoctrine:\norm:\nmetadata_cache_driver: apc\nresult_cache_driver: apc\nquery_cache_driver: apc\nmonolog:\n    handlers:\n        main:\n            type:         fingers_crossed\n            action_level: error\n            handler:      nested\n        nested:\n            type:  stream\n            path:  \"%kernel.logs_dir%/%kernel.environment%.log\"\n            level: debug\n        console:\n            type:  console\n```\n. I still can not figure out what triggers Symfony to request a database, but I have commented this bundle out & it is not this bundle. Apologies my initial thoughts were it happened after including this bundle, but I was incorrect. \nThanks for your quick reply @stof :+1: \n. Sorry, I don't remember exactly what happened, so much has happened since then. I should have made notes at the time :(\n. ",
    "ben25belot": "Hi Eddie,\nI'm sorry to \"unearth\" this conversation but I have the same problem like you.\nI don't use FOSRestBundle but FOSUserBundle and when I switch from dev to prod, I have a database  connection error \"SQLSTATE[HY000] [2002] Connection refused\" like you.\nHow did you fix this issue ?\nThank you in advance for your answer\nBenji\n. Eddie said his error didn't come from this bundle.\nSo I have probably the same problem even if I don't use the same bundle. No ?\nI wanted to contact Eddie in a different way but I didn't know how.\n. ",
    "MisterIcy": "It's not a FOSRestBundle problem, you just have to cache:clear your production enviroment\n(Yeap, I lost a couple of hours to figure this out). ",
    "kwn": "Oh, ok. Thanks for explanation.\n. ",
    "javiereguiluz": "@stof the integration will be immediate. I've successfully tested my local setup with several bundles, so everything is ready.\n. @lsmith77 given my lack of experience with the bundle, dealing with #855 would take me lot of time. That's why I prefer to quickly integrate FOSRestBundle in symfony.com (done in #930) and then let's discuss about how to improve the contents.\n. @xabbuh thanks for the review! Everything is fixed now.\n. The doc reorganization looks right to me and the syntax of the cross-section links looks right too.\n. The doc reorganization looks right to me and the syntax of the cross-section links looks right too.\n. \ud83d\udc4d \n. Maybe you could reword this phrase as a note:\n```\n.. note::\nIf you use the ``camel_keys`` normalizer, you must be careful when choosing\nyour form name.\n\n``\n.for the request based on the Request's Accept-Header` looks confusing to me. What about rewording it as:\nfor the request based on the HTTP Accept header\n. [the listener] can also already set all [...] sounds a bit weird, but I'm not sure if it's wrong.\n. Any idea why do the original examples add a white space only after the opening bracket? [ 'xml', 'json'] Why not [ 'xml', 'json' ] or ['xml', 'json']?\n. I don't understand this phrase. Does it mean: \"do not call methods that have been removed in Symfony 3\" ?\n. I'm afraid it's not possible and we don't plan to implement that feature because it won't be simple to do it. However, I propose you a solution that will work:\n1) You maintain this article, but delete all the original contents.\n2) You put in this article some informational message like: \"we moved this content to this other article: xxxxxx (link to the new contents)\"\n3) You include this article in a hidden TOC to avoid RST issues saying that the article is not included in any TOC (to do that, just add :hidden: to the .. toctree:: directive). Since it's a hidden TOC, the article is not visible by anyone except those clicking on old links and going directly to this article.\nWe do the same in Symfony Docs to \"hide\" some contents. Example:\n```rst\nLearn more about Routing\n\n.. toctree::\n    :hidden:\ncontroller\n\n.. toctree::\n    :maxdepth: 1\n    :glob:\nrouting/*\n\n```. ",
    "tristanbes": "Thanks @merk , indeed it works better, but as far as I can remember, you don't have to specify custom mapping when the route parameter equals the property in your object. Why do we have to do this when dealing with FosRestBundle ?\n. Already did, and it only goes in the find method, calls getIdenfier which returns the value of my code property, then goes to line 96 and do a find(value) which is wrong and triggers a NoResultException.\nTo sum up, it treats my code value as it if was the id of the object.\n. Yes the route parameters are the right one ( /clients/{code}.json )\n. ",
    "Cript": "\ninteresting .. so your use case is that you only want to send additional variables to the template but not when using the serializer?\n\nYes\n\nI guess right now my answer for such a requirement would be to have a wrapper object that simply does not include the unwanted data in the serialization mapping.\n\nCould you explain more?\nWrapper object for what?\n. For example, let's discuss the product page.\nIn a json view I only need array with products. I can do it like this:\n$view = $this->view($products, 200)\n        ->setTemplate(\"SiteViewBundle:Category:show.html.twig\")\n        ->setTemplateVar('products')\nBut in a html view I need not only products array, but also the category object with name, children and other properties to show them in the html page.\nIt is possible to transfer category object only into html template now?\nIf it is not possible I suggest do it like this:\n$view = $this->view($products, 200)\n            ->setTemplate(\"SiteViewBundle:Category:show.html.twig\")\n            ->setTemplateVar('products')\n            ->setTemplateData('category', $category);\nIn then in twig for example:\n<h1>{{ category.name }}<h1>\n{% for product in products %}\n    {{ product.name }}\n{% endfor %}\n. I have found this discussion just now with the same problem.\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/299\n. No. I did not close.\n. @giosh94mhz , I have tried you code. It is very easy to use.\n. @giosh94mhz , I have tried you code. It is very easy to use.\n. @lsmith77, ok.\n. @lsmith77, ok.\n. How about my commit? I edited documentation. But I am not native speaker too.\nhttps://github.com/Cript/FOSRestBundle/commit/229f4b3e75d54b0af5fd73df33862a9be71ce754\n. How about my commit? I edited documentation. But I am not native speaker too.\nhttps://github.com/Cript/FOSRestBundle/commit/229f4b3e75d54b0af5fd73df33862a9be71ce754\n. What about this situation?\n$view = $this->view($products, 200)\n    ->setTemplate(\"SiteViewBundle:Category:show.html.twig\")\n    ->setTemplateVar('products')\n    ->setTemplateData('category', $category);\n/* more code */\n$view->setTemplateData('other_template_data', $otherTemplateData)\nI think its not necessary to change setTemplateData function.\n. There are may be few variables in$templateData`\nI think this code is correct:\nforeach($templateData as $keyTemplateData => $valueTemplateData) {\n        if (is_callable($valueTemplateData)) {\n            $templateData[$keyTemplateData] = call_user_func($valueTemplateData, $this, $view);\n        }\n    }\n. ",
    "giosh94mhz": "Thanks for the review @Cript \n. You're right, let's keep the credits. I take a look through the docs, but... I'm not a native speaker, so I need your final review :)\n. @Cript I've missed your commit. I'll merge it, and give it a review ;)\n. @lsmith77 you've merged it too fast :) I'll open another PR for my doc improvement, ASAP.\n. I would add the following:\ndiff\n@@ -381,6 +381,9 @@\n     {\n         $data = $view->getData();\n         $templateData = $view->getTemplateData();\n+        if (is_callable($templateData)) {\n+            $templateData = call_user_func($templateData, $this, $view);\n+        }\n         if ($data instanceof FormInterface) {\n             $preparedData = array_merge(\n                 array($view->getTemplateVar() => $data->getData(), 'form' => $data->createView()),\nAt least the ViewHandlerInterface ($this) and the View need to be passed to the callback, so that the format can be read correctly.\n. To make the interface clearer (IMO) and compatible with the callback patch below, I would change the method setTemplateData like setData, so:\n``` php\npublic function setTemplateData($data = [])\n{\n    $this->templateData = $data;\nreturn $this;\n\n}\n``\n. Minor fix: it's better to move this initialization to the constructor, since it is already present\n. Right. Then[]should be replaced byarray(). I know it is not required, but IMO is more consistent with current interface (only one 'array' passed toview/setData) and will guide the developer to a cleaner code. Also, if you allow setting one variable at a time as inRequest` object, you need to implement a container interface or it will be impossible to unset properties.\nYour example can be refactored as:\n``` php\n$viewData = array('category' => $category);\n/ more code /\n$viewData['other_template_data'] = $otherTemplateData;\nreturn $this->view($products, 200)\n    ->setTemplate(\"SiteViewBundle:Category:show.html.twig\")\n    ->setTemplateVar('products')\n    ->setTemplateData($viewData)\n;\n```\nor even better with the lazy approach:\n``` php\nreturn $this->view($products, 200)\n    ->setTemplate(\"SiteViewBundle:Category:show.html.twig\")\n    ->setTemplateVar('products')\n    ->setTemplateData(function () use ($category, $container) {\n        $viewData = array('category' => $category);\n        / more code using services & co /\n        $viewData['other_template_data'] = $otherTemplateData;\n        // adding 'products' key not recommended :)\n        return $viewData;\n    })\n;\n```\n. ",
    "lucachaco": "I hadn't seen the solution is here: http://symfony.com/doc/current/reference/forms/types/datetime.html#years\n. ",
    "waldermort": "@lsmith77 Well, simple actually, I want to dynamically prefix the route names/paths. In creating an admin generator, I have a treeview in the sidebar. Each Entity controller can be assigned (configured in yaml) to an admin group/subgroup. Due to conflicting routes and various permissions, a route prefix, depending on the position in the tree, is required. Doing this dynamically, allows me to specify a controller belongs in the admin zone by statically prefixing it with '/admin', and allows the controller to inherit the permissions of it's group.\n. @stof Notice the word 'dynamic' in my reply. You are talking about static prefixes. If I take the static approach I have to update the prefix any time I want to relocate a controller within the tree. This is going against my design goal. I have a simple requirement that when configuring the admin layout, I can say this controller belongs to this, this and that group. I've already coded this component and it works well.\n. @stof I have a treeview (menu) with categories like E-Commerce, Settings, User etc. When I add entity controllers to the admin, I want each route to include the slug of its parent category. So instead of routes like /admin/groups they will become /admin/user/groups. Yes, this can be done with static prefixes, but when I want to move a controller from say group Foo to group Bar, I will have to also update those route prefixes. My design fetches the slug from the group and prefixes it while building the routes. This way I can control the grouping from a single yaml file. Another point I didn't mention, but extending the service solves, is an Entity can belong to more than one group. Having two routes to the same resource makes selecting the active branch in the tree much easier.\n. Defining a custom loader won't solve this. First I will lose the 'rest' type, second I will still have to call into the rest loader to scan the class. I can do exactly what I want by overloading the RestRouteLoader and modifying the load method. The whole point of this pull request is to point out that I cannot redefine the load method without also copying the 'getControllerLocator' method. As you know, a private method in a parent class is not accessible. I'm not asking how to do something, I've already done it. \n. ",
    "pedroresende": "@lsmith77 I believe you might be right, apparently the only available methods in symfony are\n```\n    const METHOD_HEAD = 'HEAD';\n    const METHOD_GET = 'GET';\n    const METHOD_POST = 'POST';\n    const METHOD_PUT = 'PUT';\n    const METHOD_PATCH = 'PATCH';\n    const METHOD_DELETE = 'DELETE';\n    const METHOD_PURGE = 'PURGE';\n    const METHOD_OPTIONS = 'OPTIONS';\n    const METHOD_TRACE = 'TRACE';\n    const METHOD_CONNECT = 'CONNECT';\n```\ndeclared in https://github.com/symfony/symfony/blob/2.7/src/Symfony/Component/HttpFoundation/Request.php\n. I've opened a new issue on Symfony's core https://github.com/symfony/symfony/issues/13478\n. @lsmith77 This is a possible PR for this\n. @stloyd I've assigned to a local variable use the same structure that is currently present \n. ",
    "alekitto": "@lsmith77 I rebased my work onto current master. Still needs tests.\n. I extended the ContainerAware class and used the setContainer call to inject the container in the service definition.\nNow i have two failures on travis: the symfony 2.8 one is probably related to the symfony core (i think there is a missing isset here: https://github.com/symfony/symfony/blob/839e925dffff3d972b66ce950d5e44b32296ba7d/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php#L974).\nThe other one i really don't know if it is related to my changes: i tried to run phpunit against the master branch and the failure is still there, but the last travis build of the branch is green.\nI think i need some help...\n. I opened a ticket on symfony/symfony for the 2.8 regression (symfony/symfony#15449) and an issue (#1088) for the other failure\n. @lsmith77 Rebased on master. Tests passed.\n. @lsmith77 Rebased on master. Added an example to the docs.\n. The logic is taken from the FrameworkBundle router.\nDo you think it could be separated from the router to create a parameter resolver service?\n. ",
    "ahilles107": ":100: \n. :100: \n. ",
    "sergiu-popa": "Did something change? I'm using this code but the POST parameters is empty. I don't get it... last week this was working fine:\nphp\npublic function postUsersAction(Request $request)\n{\n  $userManager = $this->container->get('fos_user.user_manager');\n  $user = $userManager->createUser();\n  $user->setUsername($request->get('username'));\n  // $request->get('username') is empty\n. ",
    "johndodev": "Same for me, I tried lot of body_listener config but request bag remain empty.\n. I use nelmioApiDocBundle to test POST endpoints, I put a json on \"content\" field and use this trick:\n$data = json_decode($request->getContent(), true) ?: [];\n$request->request->replace($data);'''\n. ",
    "luxilio": "What are you using to make the post request? CURL in the console? REST Console in Google Chrome?\n. What are you using to make the post request? CURL in the console? REST Console in Google Chrome?\n. Try using cURL in the console. I had problems with REST Console in Chrome because I didn't check an option (RAW Body checkbox under Request Payload - although I was using the left column Request parameters).\n. Try using cURL in the console. I had problems with REST Console in Chrome because I didn't check an option (RAW Body checkbox under Request Payload - although I was using the left column Request parameters).\n. Thank you\n. ",
    "mpdude": "@Maltewunsch and/or me will have a look at this!\n. Yes, sorry for the delay\n. ",
    "peshi": "Is there anything I missed? Using 'dev-master'\n. I am using the latest, I still have the issue when it is enabled.\nIf I disable the body_converter, the issue is gone.\nfos_rest:\n    ...\n    body_converter:\n       enabled: false\n. @xabbuh Good catch, thanks for the solution.\n. @lsmith77 There's no BC layer\n. @lsmith77 There's no BC layer\n. \nGuess I knew it was coming :)\n. \nGuess I knew it was coming :)\n. @lsmith77 Have a look/try before i submit a pr.\nhttps://github.com/hyperunknown/FOSRestBundle/tree/csrf-ext-patch-2\n. @lsmith77 Have a look/try before i submit a pr.\nhttps://github.com/hyperunknown/FOSRestBundle/tree/csrf-ext-patch-2\n. Is there anything I have missed?\n. It looks like something was added in the 1.7 branch, but there's no tagged version.\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/1.7/Form/Extension/DisableCSRFExtension.php#L81\nHowever it is not in the master branch. I suppose 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' should be added to master - if master is a version without BC layers.\n. It looks like something was added in the 1.7 branch, but there's no tagged version.\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/1.7/Form/Extension/DisableCSRFExtension.php#L81\nHowever it is not in the master branch. I suppose 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' should be added to master - if master is a version without BC layers.\n. Thanks, 1.7.2 BC layer works for 2.8 - so back to master branch.\nSince getExtendedType 'form' was replaced in 2.8 I suppose master would be for 2.8 + else we would have to add the backward compatibility in master as well.\nCheck for getExtendedType.\nhttps://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md\nShall I create a small PR for the master branch and replace 'form' ?\n. Thanks, 1.7.2 BC layer works for 2.8 - so back to master branch.\nSince getExtendedType 'form' was replaced in 2.8 I suppose master would be for 2.8 + else we would have to add the backward compatibility in master as well.\nCheck for getExtendedType.\nhttps://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md\nShall I create a small PR for the master branch and replace 'form' ?\n. Great :) i'll close this issue, thank you for quick feedback and support.\n. Great :) i'll close this issue, thank you for quick feedback and support.\n. Sorry for the inconvenience - it has to be compatible with 2.7 also ? if yes i'll have to apply the patch from 2.3-2.8\n. Sorry for the inconvenience - it has to be compatible with 2.7 also ? if yes i'll have to apply the patch from 2.3-2.8\n. I reckon 2.7 has to be included due to its long support time to May 2019. So I'll apply the patch for 2.3-2.8  otherwise just let me know in PR.\n. I reckon 2.7 has to be included due to its long support time to May 2019. So I'll apply the patch for 2.3-2.8  otherwise just let me know in PR.\n. this PR breaks working setup.\nServiceNotFoundException in Container.php line 264:\nYou have requested a non-existent service \"fos_rest.exception.twig_controller\".\nInvalidArgumentException in View.php line 218:\nThe template should be a string or extend TemplateReference\n. @xabbuh this is the current error I receive after pulling form master.\nin vendor/friendsofsymfony/rest-bundle/View/View.php at line 218   -\n    public function setTemplate($template)\n    {\n        if (!(is_string($template) || $template instanceof TemplateReference)) {\n            throw new \\InvalidArgumentException('The template should be a string or extend TemplateReference');\n        }\n        $this->template = $template;\nat View ->setTemplate (object(Template)) \nin vendor/friendsofsymfony/rest-bundle/EventListener/ViewResponseListener.php at line 140   + \nat ViewResponseListener ->onKernelView (object(GetResponseForControllerResultEvent), 'kernel.view', object(TraceableEventDispatcher)) \nat call_user_func (array(object(ViewResponseListener), 'onKernelView'), object(GetResponseForControllerResultEvent), 'kernel.view', object(TraceableEventDispatcher)) \nin vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/WrappedListener.php at line 61   + \nat WrappedListener ->__invoke (object(GetResponseForControllerResultEvent), 'kernel.view', object(ContainerAwareEventDispatcher))\nat call_user_func (object(WrappedListener), object(GetResponseForControllerResultEvent), 'kernel.view', object(ContainerAwareEventDispatcher)) \nin var/cache/dev/classes.php at line 1754   + \nat EventDispatcher ->doDispatch (array(object(WrappedListener)), 'kernel.view', object(GetResponseForControllerResultEvent)) \nin var/cache/dev/classes.php at line 1672   + \nat EventDispatcher ->dispatch ('kernel.view', object(GetResponseForControllerResultEvent)) \nin vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php at line 132   + \nat TraceableEventDispatcher ->dispatch ('kernel.view', object(GetResponseForControllerResultEvent)) \nin vendor/symfony/symfony/src/Symfony/Component/HttpKernel/HttpKernel.php at line 144   + \nat HttpKernel ->handleRaw (object(Request), '1') \nin vendor/symfony/symfony/src/Symfony/Component/HttpKernel/HttpKernel.php at line 62   + \nat HttpKernel ->handle (object(Request), '1', true) \nin vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php at line 169   + \nat Kernel ->handle (object(Request)) \nin web/app_dev.php at line 30   +\n. @Ener-Getick It is a bit unclear how to use this when looking at the documentation.\nI'll also refer to a issue with TwigExceptionController\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/1372\n. @Ener-Getick It is a bit unclear how to use this when looking at the documentation.\nI'll also refer to a issue with TwigExceptionController\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/1372\n. @Ener-Getick I think we share the same boat when it comes to docs. :)\nWell, my first thought is.. 'where do I configure fos restbundle' to use my custom normalizer, that might be enough. Anyway - I need this feature as the wrapper has been scrapped, i'll see if I can make any sense of it during the week.\n. @Ener-Getick I think we share the same boat when it comes to docs. :)\nWell, my first thought is.. 'where do I configure fos restbundle' to use my custom normalizer, that might be enough. Anyway - I need this feature as the wrapper has been scrapped, i'll see if I can make any sense of it during the week.\n. @Maxooo I have no clue where to start since there is no documentation. I'm also using jms serializer.\nThis is still very much on my todo list.\n. ",
    "eliecharra": "\nnullable=true and strict=true - array parameter is optional, items validation is strict\nnullable=false and strict=true - array parameter is required, items validation is strict\nnullable=true and strict=false - array parameter is optional, items validation is not strict\nnullable=false and strict=false - array parameter is required, items validation is not strict\n\n@eugef @lsmith77 This behavior is better.\nstrict param shoud be user for validation only.\nand nullable param shoud be user for optional purpose\n. @lsmith77 PR #963 in progress, i'm fixing tests\n. Just tried to add a test to cover #910 break but couldn't make it work, if someone has some time ...\n. I'm fixing tests ...\n. @lsmith77 Here is a little summary to clarify the situation, let me know if it's ok for you.\n| Requirements | Default value | Given value | Strict | Nullable | Result |\n| --- | --- | --- | --- | --- | --- |\n| \\d+ | null | null | false | false | Array() |\n| \\d+ | null | null | true | true | Array() |\n| \\d+ | null | null | false | true | Array() |\n| \\d+ | null | null | true | false | Query parameter value of 'X' is not an array |\n| \\d+ | 42 | null | true | true | Array(42) |\n| \\d+ | 42 | null | true | false | Query parameter value of 'X' is not an array |\n| \\d+ | 42 | null | false | false | Array(42) |\n| \\d+ | 42 | test | false | true | Array(42) |\n| \\d+ | 42 | test | true | true | Query parameter X value 'test' violated a constraint |\n| \\d+ | test | null | true | true | Array('test') |\n| \\d+ | null | test | true | false | Query parameter X value 'test' violated a constraint |\n| \\d+ | null | Array(1) | false | false | Array(1) |\n| \\d+ | null | Array(1) | true | false | Array(1) |\n| \\d+ | null | Array(1) | true | true | Array(1) |\n. @lsmith77 Yeah I think so, maybe we need to add some other tests, not sure we cover all these cases.\nIt's quite complicated to reverse the behavior from the code there :wink: \n. ",
    "vierbergenlars": "As I see it, it's a bugfix, not a feature addition.\nI cannot imagine someone relies on requirements and defaults configuration not being passed to the routes in the collection, especially since the XML loader does the right thing, and so does the symfony RouteCollection.\n. I guess so. addOptions() does nothing spectacular, and that method already checks if $options is empty by itself before iterating over its routes.\n. ",
    "Strate": "This is more for passing View object through control flow. For example you need to chnage serialization context config, which comes in View class, passed from other method:\nphp\npublic function someAction()\n{\n    $view = $this->fetchViewObject();\n    // Now, you need to set serialization group in serialization context\n    $view->getSerializationContext()->setGroups('123');\n    return $viewl\n}\nanother way to do this with new method:\nphp\npublic function someAction()\n{\n    return $this->fetchViewObject()\n        ->configureSerializationContext(function($context) {\n            $context->setGroups('123')\n        });\n}\n. ",
    "mlimaloureiro": "hello, I was investigating a little bit this issue, and the problem is with symfony LegacyValidator. Somehow, it is expecting an object instead of a value. Anyway this is fixed in 2.5.10, didn't investigate any further since updating symfony fixed the problem\n. ",
    "YoruNoHikage": "Well, I\u2019m okay with that, but as my controller is the same for both ends, I have :\nphp\n$this->routeRedirectView('api_1_get_something', $routeOptions, Codes::HTTP_CREATED)\nHow can I work with the duplicated routes ? Should I write a method to get the route name, something like getRoute(\u2018get_something\u2019) returning the right route depending on the context ?\n. ",
    "AlexStansfield": "Sorry only just caught this reply and see @florianv beat me to it. \n. ",
    "sela": "Is this issue still open? I got the same issue in my code getting an empty object {} from React client that is being transformed to []. I guess I got no choice, but write a listener.. Is this issue still open? I got the same issue in my code getting an empty object {} from React client that is being transformed to []. I guess I got no choice, but write a listener.. Is overwriting fos_rest.serializer.exception_normalizer.jms the only solution?. I wonder if anyone else had that issue and managed to find a solution without overriding fos_rest.serializer.exception_normalizer.jms. ",
    "roelveldhuizen": "Tried and failed... any other ideas?\n. Hi @lsmith77,\nThanks again for the suggestion. I've updated the core to 2.7 dev.  Still, the same issue occurs. Would there be one specific change in the core / fosrestbundle where could look into debug this issue?\n. Well, the odd thing is that it works correctly in PHPUnit, so I'm not entirely sure whether it is an issue related to Symfony. Regarding your suggestion you at least think it is not an issue regarding FOSRestBundle itself?\n. ",
    "hyyan": "@lsmith77  thanks for replay , I have been debugging this for the last 3 days  but with no luck which made think it is a bug .\nThe $request->request is empty ParameterBag when I use json or xml and contains the following when I use HTML\nobject(Symfony\\Component\\HttpFoundation\\ParameterBag)[8]\n  protected 'parameters' => \n    array (size=2)\n      '_method' => string 'DELETE' (length=6)\n      'form' => \n        array (size=1)\n          'submit' => string '' (length=0)\n. @lsmith77 Yes the body listener is activated .\nI am using curl to test the api , and I am sending an empty request body ,I mean no need to send anything.\nHere is my curl command I am using \n$ curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -X\nDELETE symfony-rest.localhost.com/web/app_dev.php/tasks/3\nHTTP/1.1 400 Bad Request\nDate: Mon, 16 Mar 2015 16:30:47 GMT\nServer: Apache/2.2.22 (Win64) PHP/5.4.3\nX-Powered-By: PHP/5.4.3\nCache-Control: no-cache\nLocation: http://symfony-rest.localhost.com/web/app_dev.php/tasks/\nAllow: GET, PUT, DELETE\nX-Debug-Token: 1adc07\nX-Debug-Token-Link: /web/app_dev.php/_profiler/1adc07\nContent-Length: 0\nConnection: close\nContent-Type: application/json\n. @lsmith77  Sorry for taking so long to answer , it is work , sorry again\nYou were write the form layer is not happy in xml/json case , I have edited my curl command to become like this:\n$ curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -X\nDELETE symfony-rest.localhost.com/web/app_dev.php/tasks/3 -d '{\"form\":\"\"}'\nHTTP/1.1   204 \nDate: Mon, 16 Mar 2015 16:30:47 GMT\nServer: Apache/2.2.22 (Win64) PHP/5.4.3\nX-Powered-By: PHP/5.4.3\nCache-Control: no-cache\nLocation: http://symfony-rest.localhost.com/web/app_dev.php/tasks/\nAllow: GET, PUT, DELETE\nX-Debug-Token: 1adc07\nX-Debug-Token-Link: /web/app_dev.php/_profiler/1adc07\nContent-Length: 0\nConnection: close\nContent-Type: application/json\nas you can see from the response the  form method $fomr->isValid() is happy when I passed the form name in the request body , so it is something about the form name . so I tried to change the form name to null so I can execute the request without passing the form name in the request body , but that did not work. I am not sure how to solve this with the DELETE request\nIf you think this must not be discussed here , feel free to close the issue , and I will try Stackoverflow to get this right  \nThanks for being patient with me :smile:\n. @lsmith77  Sorry for taking so long to answer , it is work , sorry again\nYou were write the form layer is not happy in xml/json case , I have edited my curl command to become like this:\n$ curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -X\nDELETE symfony-rest.localhost.com/web/app_dev.php/tasks/3 -d '{\"form\":\"\"}'\nHTTP/1.1   204 \nDate: Mon, 16 Mar 2015 16:30:47 GMT\nServer: Apache/2.2.22 (Win64) PHP/5.4.3\nX-Powered-By: PHP/5.4.3\nCache-Control: no-cache\nLocation: http://symfony-rest.localhost.com/web/app_dev.php/tasks/\nAllow: GET, PUT, DELETE\nX-Debug-Token: 1adc07\nX-Debug-Token-Link: /web/app_dev.php/_profiler/1adc07\nContent-Length: 0\nConnection: close\nContent-Type: application/json\nas you can see from the response the  form method $fomr->isValid() is happy when I passed the form name in the request body , so it is something about the form name . so I tried to change the form name to null so I can execute the request without passing the form name in the request body , but that did not work. I am not sure how to solve this with the DELETE request\nIf you think this must not be discussed here , feel free to close the issue , and I will try Stackoverflow to get this right  \nThanks for being patient with me :smile:\n. @tystr Because I am serving the HTML view from same controller which  needs a form to perform delete request ? Is that wrong ? \n. @tystr Because I am serving the HTML view from same controller which  needs a form to perform delete request ? Is that wrong ? \n. @stof Thanks for replay , I have tried this as you suggest , but still the same , working for HTML but it is not for json/xml \n``` php\n$this->get('form.factory')->createNamed(\n                     ''\n                    , 'form'\n                    , array(\n                )\n                , array(\n                    'action' => $this->generateUrl('tasks_delete', array('id' => $id)),\n                    'method' => 'DELETE' ,\n                    'csrf_protection' => false,\n                    'allow_extra_fields' => true,\n\n                    )\n                )\n                ->add('submit', 'submit', array('label' => 'Delete'))\n\n```\n. @stof Thanks for replay , I have tried this as you suggest , but still the same , working for HTML but it is not for json/xml \n``` php\n$this->get('form.factory')->createNamed(\n                     ''\n                    , 'form'\n                    , array(\n                )\n                , array(\n                    'action' => $this->generateUrl('tasks_delete', array('id' => $id)),\n                    'method' => 'DELETE' ,\n                    'csrf_protection' => false,\n                    'allow_extra_fields' => true,\n\n                    )\n                )\n                ->add('submit', 'submit', array('label' => 'Delete'))\n\n```\n. ",
    "bpolaszek": "Hello,\nI'm running on exactly the same issue here.\nI have the same controller serving HTML and JSON. \nWhen using a browser and HTML, the form fakes the DELETE method and sends a POST request with an hidden input, thus validating the form. When using Postman or curl with the real DELETE method, the request body is empty, preventing the form from being submitted.\nThough I guess Friends of Symfony will find a turnaround about this (I hope so!), I'm wondering if this issue shouldn't be related to the Symfony Form Component itself?\n. ",
    "alexdrupal": "Yes, I have exactly this code\n. ",
    "loconox": "Hi, I had exactly the same issue. I was trying to update an entity with json data sent in a PATCH request.\nI solved my issue by adding options 'allow_add', 'allow_delete' and 'delete_empty' on the collection field.\n. ",
    "grzegorztomasiak": "A guy on stackoverflow helped me out by putting locale: 1 instead of locale: {id: 1} but what if I want to select locale not by id, but by code, e.g. locale: { code: 'en' }, that's not possible.\n. A guy on stackoverflow helped me out by putting locale: 1 instead of locale: {id: 1} but what if I want to select locale not by id, but by code, e.g. locale: { code: 'en' }, that's not possible.\n. I have solved the issue by changing the structure, so I dropped one to many relation.\n. I have solved the issue by changing the structure, so I dropped one to many relation.\n. I did not find the solution to this so I had to drop the idea and redesign the database.\nMy previous setup was to have Member entity that can have multiple MemberTranslation entities,  because at that time I thought it's going to be best way.\nMember:\n    MemberTranslation: 1, pl, Witaj\n    MemberTranslation: 2, en, Hello\n    MemberTranslation: 3, it, Ciao\nNow translatable properties (columns) are only in Member entity\nMember: 1, array('pl' => 'Witaj', 'en' => 'Hello', 'it' => 'Ciao')\n. never mind. I made something completely different.. ",
    "Drachenkaetzchen": "Yes. When an exception is thrown, I display the backtrace to the user so he can report it to me. My project PartKeepr is usually installed on the user's web server. I'm currently migrating the Project to Symfony2. It would be good to have a configuration option to specify if the backtrace should be returned.\n. Yes. When an exception is thrown, I display the backtrace to the user so he can report it to me. My project PartKeepr is usually installed on the user's web server. I'm currently migrating the Project to Symfony2. It would be good to have a configuration option to specify if the backtrace should be returned.\n. Thanks for pointing that out, I didn't see that. I guess this issue can be closed then.\n. Thanks for pointing that out, I didn't see that. I guess this issue can be closed then.\n. Thank you for your help :+1: \n. Thank you for your help :+1: \n. ",
    "Bencsi": "How did you solved? I'am stuck with problem.\n. ",
    "oliver13": "Thank you for the hint. I will try it soon with the stdClass handler.\nFor the moment a hack helped me: \n$data = json_decode(json_encode($instance_of_stdclass), true);\n. Thank you for the hint. I will try it soon with the stdClass handler.\nFor the moment a hack helped me: \n$data = json_decode(json_encode($instance_of_stdclass), true);\n. ",
    "marcoshoya": "Update: I've tried the solution here (https://github.com/FriendsOfSymfony/FOSRestBundle/issues/738#issuecomment-45312857) and It's works. \nI also tried\n$form->submit(array(\n            'username' => $request->get('username')\n        ));\nAnyway, I guess it must be a better way to validate input data... \nThanks\n. Update: I've tried the solution here (https://github.com/FriendsOfSymfony/FOSRestBundle/issues/738#issuecomment-45312857) and It's works. \nI also tried\n$form->submit(array(\n            'username' => $request->get('username')\n        ));\nAnyway, I guess it must be a better way to validate input data... \nThanks\n. ",
    "sepikas": "I had same issue. But it's strange as official symfony documentation suggest only using handleRequest() method because submit() is deprecated. http://symfony.com/doc/current/cookbook/form/direct_submit.html#cookbook-form-call-submit-directly \n. ",
    "Davidmattei": "@sepikas-antanas : I think using the request object as a input parameter for the submit function is deprecated, not the function itself ?\n. ",
    "Kaz-": "I got exactly the same issue and I'm using jmsserializer, any idea of where it might come from ? \n. ",
    "manasbala": "You should return \n$view = $this->view($form->getErrors(true));\nreturn $this->handleView($view);\n. ",
    "dotlg": "Hello and thanks for the answer.\nSo I'll keep the \"include_format: false\".\nBut I still have difficulties to understand how I can choose the input/output format. If I'm not mistaken I should be able to choose the input format with \"Content-type\", and choose the output format with \"Accept\". But when I'm trying to output an xml body response with the \"Accept\" \"application/xml\" header I still get a non-xml response.\nCan I send a POST request with a json content (\"Content-Type\", \"application/json\" header added), but with an XML output (\"Accept\", \"application/xml\" header added)? It's not working for me right now.\nMy FOSRestBundle configuration is:\nfos_rest:\n    param_fetcher_listener: true\n    body_listener: true\n    format_listener: true\n    view:\n        view_response_listener: 'force'\n        formats:\n            xml: true\n            json : true\n        templating_formats:\n            html: true\n        force_redirects:\n            html: true\n        failed_validation: HTTP_BAD_REQUEST\n        default_engine: twig\n    routing_loader:\n        default_format: json\n        include_format: false\n. Hello and thanks for the answer.\nSo I'll keep the \"include_format: false\".\nBut I still have difficulties to understand how I can choose the input/output format. If I'm not mistaken I should be able to choose the input format with \"Content-type\", and choose the output format with \"Accept\". But when I'm trying to output an xml body response with the \"Accept\" \"application/xml\" header I still get a non-xml response.\nCan I send a POST request with a json content (\"Content-Type\", \"application/json\" header added), but with an XML output (\"Accept\", \"application/xml\" header added)? It's not working for me right now.\nMy FOSRestBundle configuration is:\nfos_rest:\n    param_fetcher_listener: true\n    body_listener: true\n    format_listener: true\n    view:\n        view_response_listener: 'force'\n        formats:\n            xml: true\n            json : true\n        templating_formats:\n            html: true\n        force_redirects:\n            html: true\n        failed_validation: HTTP_BAD_REQUEST\n        default_engine: twig\n    routing_loader:\n        default_format: json\n        include_format: false\n. Ok thanks a lot. I've added rules and it's working fine now :)\nformat_listener:\n        rules:\n            - { path: ^/api/, priorities: [ json, xml ], fallback_format: json, prefer_extension: true }\n            - { path: '^/', priorities: [ 'html', '/'], fallback_format: html, prefer_extension: true }\n. Ok thanks a lot. I've added rules and it's working fine now :)\nformat_listener:\n        rules:\n            - { path: ^/api/, priorities: [ json, xml ], fallback_format: json, prefer_extension: true }\n            - { path: '^/', priorities: [ 'html', '/'], fallback_format: html, prefer_extension: true }\n. Thanks for your quick answer :)\nBut how/where do you use this extention point to exclude a specific function from the body_listener ? I searched in the documentation, but I was unable to find anything about that.\n. Thanks for your quick answer :)\nBut how/where do you use this extention point to exclude a specific function from the body_listener ? I searched in the documentation, but I was unable to find anything about that.\n. Ok thanks, got it !\n. Ok thanks, got it !\n. sure, will do !\n. sure, will do !\n. Ok thanks, I'll check there.\n. ",
    "soyuka": "Indeed, should we sait until it has been released?\nLe ven. 1 mai 2015 \u00e0 12:07, Christian Flothmann notifications@github.com\na \u00e9crit :\n\nFor example, the ObjectNormalizer\nhttps://github.com/symfony/symfony/blob/2.7/src/Symfony/Component/Serializer/Normalizer/ObjectNormalizer.php\nwill be first included in Symfony 2.7.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/1025#issuecomment-98090981\n.\n. Thought this was related to fosrest directly. \n. Can you confirm that every serialization tests on FOSRest are using the JMSSerializer? What about having those same tests with the Symfony Serializer, would we have to duplicate all those too?\n. \n",
    "tim96": "Hello @jtherin , @lsmith77 .\nI suggest this solution #1047 .\n. ",
    "reypm": "@lsmith77 you mean this config?\nsensio_framework_extra:\n    view:    { annotations: false }\n    router:  { annotations: true }\n    request: { converters: true }\n. I'm also change a bit the config for FOSRest, see below the current one:\n```\nfos_rest:\n    param_fetcher_listener: true\n    body_listener: true\n    format_listener:\n        rules:\n            - { path: ^/, priorities: [ json, html ], fallback_format: ~, prefer_extension: false }\n        #media_type:\n        #    version_regex: '/(v|version)=(?P[0-9.]+)/'\nbody_converter:\n    enabled: true\n    validate: true\n\nview:\n    view_response_listener: 'force'\n    formats:\n        xml: true\n        json: true\n    templating_formats:\n        html: true\n    force_redirects:\n        html: true\n    failed_validation: HTTP_BAD_REQUEST\n    default_engine: none\n    mime_types:\n        json: ['application/json', 'application/json;version=1.0', 'application/json;version=1.1']\n\nexception:\n    codes:\n        'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': 404\n        'Doctrine\\ORM\\OptimisticLockException': HTTP_CONFLICT\n    messages:\n        'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': true\nallowed_methods_listener: true\naccess_denied_listener:\n    json: true\nrouting_loader:\n    default_format: json\n\n```\n. I'm confused,how I do that? Did you see my latest configuration?\n. @lsmith77 do I need to setup any Twig view or anything else? If I change this:\nrules:\n        - { path: ^/, priorities: [ json, html ], fallback_format: ~, prefer_extension: false }\nTo this:\nrules:\n        - { path: ^/, priorities: [ json ], fallback_format: ~, prefer_extension: false }\nI'm able to view the JSON response but then all my HTML content stop working and I got sources in plain text, why?\n. ",
    "benjaminb-": "Ok i transformed my PUT request into POST request and it's working (it's not RESTful but i didn't find any other easy way to make working it)\nThanks\n. ",
    "ianfp": "Can we reopen this issue? I'm having the same problem. It seems like PHP does not populate the $_POST superglobal for PUT requests.\n. @Ener-Getick Yes, but isn't the purpose of FOSRestBundle to help us do these sorts of things? I realize this issue is a feature request and not a bug.\n. ",
    "vialcollet": "Same here. I have deleted param_fetcher_listener: true as I don't need it.\nThen it's working.\nI think it is due to the latest commit: #1034 \n. Same here. I have deleted param_fetcher_listener: true as I don't need it.\nThen it's working.\nI think it is due to the latest commit: #1034 \n. ",
    "matiux": "I have a similar error during composer update:\n[Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException]\nInvalid type for path \"fos_rest.param_fetcher_listener\". Expected array, but got string\nScript Sensio\\Bundle\\DistributionBundle\\Composer\\ScriptHandler::clearCache handling the post-update-cmd event terminated with an exception\nThis is my config:\n...\nparam_fetcher_listener: force\n...\nHow can I solve?\n. ",
    "haco28": "+1 i have the same error : \nInvalidConfigurationException in BaseNode.php line 313:\nInvalid configuration for path \"fos_rest.param_fetcher_listener\": The param_fetcher_listener option does not support {\"enabled\":true,\"service\":null}. Please choose one of [false,true,\"force\"] \nafter remove this line, it seems working\n. +1 i have the same error : \nInvalidConfigurationException in BaseNode.php line 313:\nInvalid configuration for path \"fos_rest.param_fetcher_listener\": The param_fetcher_listener option does not support {\"enabled\":true,\"service\":null}. Please choose one of [false,true,\"force\"] \nafter remove this line, it seems working\n. ",
    "obivan86": "+1 \n[InvalidArgumentException]\n  The param_fetcher_listener option does not support {\"enabled\":true,\"service\":null}. Please choose one of [false,true,\"force\"]\n. +1 \n[InvalidArgumentException]\n  The param_fetcher_listener option does not support {\"enabled\":true,\"service\":null}. Please choose one of [false,true,\"force\"]\n. ",
    "bassrock": ":+1:  same error with it set to true\n. ",
    "kierate": "I fixed the extension class to work with force in the enabled key (last commit).\nWith regards to moving force to a separate key how would you see this? With a true|false for the force key? i.e.:\nyaml\nparam_fetcher_listener:\n    enabled: true|false\n    force: true|false    # this would be ignored if enabled=false\n. I fixed the extension class to work with force in the enabled key (last commit).\nWith regards to moving force to a separate key how would you see this? With a true|false for the force key? i.e.:\nyaml\nparam_fetcher_listener:\n    enabled: true|false\n    force: true|false    # this would be ignored if enabled=false\n. I have separated it out, but just looking at the code - the view_response_listener also uses the true|false|force values (Configuration::$forceOptionValues). It would probably make sense to refactor that one as well at some point.\n. I have separated it out, but just looking at the code - the view_response_listener also uses the true|false|force values (Configuration::$forceOptionValues). It would probably make sense to refactor that one as well at some point.\n. ",
    "sylvaincombes": ":+1: thank you\n. ",
    "luispabon": "This would be great to have, we've just been puzzling about this same issue. On big payloads with nested relations it can be a bit of an issue to find.\n. This would be great to have, we've just been puzzling about this same issue. On big payloads with nested relations it can be a bit of an issue to find.\n. This is great stuff, thank you for the hard work. Can I ask which bundle version will see this in? 2.0?\n. :+1: I'm working on a new API build so it will be a while until I have to worry about versioning, but will definitely need this down the line\n. I will however integrate 2.0 + versioning as soon as it's available.\n. Will do. This project needs a 1.0 real quick so unfortunately I don't quite have the time to experiment with this just yet, otherwise I would.\n. I'm very keen on this as well, just coding something up for a 2018 release and naturally we're working against the very latest. ",
    "moroine": "I realized I didn't give enough information.\nFirst of all I know this bundle require SensioFrameworkExtraBundle, so the two versions tag I gave was :\n- Symfony: v2.3.28\n- SensioFrameworkBundle: v2.3.4\nThen the problem didn't appears on composer update but when I call php app/console cache:clear (it appears for me cause I call automatically cache:clear after updating dependencies).\nSo I tried your solution and message error is always here (I also remove dev cache folder).\nI investigate the problem and I think I found the compatibility issue: \nFOSRestBundle:Request:RequestBodyParamConverter extends FOSRestBundle:Request:AbstractRequestBodyParamConverter witch implements FrameworkExtraBundle:Request:ParamConvertor:ParamConverterInterface\nSo second parameter $configuration of RequestBodyParamConverter:apply need to implements Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\ConfigurationInterface according to ParamConverterInterface declaration. But $configuration is instance of Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\ParamConverter witch do not implement the required interface.\nHopping this will be helpful.\n. ",
    "ktounet": "Oops, it's done.\n. ",
    "Padam87": "Also fixed the method -> methods problem.\n. bump\n. bump\n. Awesome, thank you!\n. Awesome, thank you!\n. ping @zerrvox @lsmith77 \n. Yep, I know, but the other test fixtures use it like this. I think fixing that should be another PR. Or should I change it here?\n. fixed\n. At this point the $requirements only contained this:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/1054/files#diff-4f168cae49074c5f30b4abcccc85c281L186\n. It shouldn't be a BC break.\n(array) null ends up being an empty [], which is is the default value for the methods property, and this code is in the constructor.\nAlthough it might be a problem, tested it with both 1.6 and 1.7, and the methods part is definitely overwritten somewhere.\n. https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1067\n. ",
    "dinamic": "Sorry, must have been something on my end.\n. ",
    "leechao": "I tested both versions and neither of them works.\nHere is my composer : \n\"require\": {\n        \"php\": \">=5.3.3\",\n        \"symfony/symfony\": \"2.7.*\",\n        \"doctrine/orm\": \"~2.2,>=2.2.3,<2.5\",\n        \"doctrine/dbal\": \"<2.5\",\n        \"doctrine/common\": \"2.5\",\n        \"doctrine/doctrine-bundle\": \"~1.4\",\n        \"twig/extensions\": \"1.0.*\",\n        \"symfony/assetic-bundle\": \"~2.3\",\n        \"symfony/swiftmailer-bundle\": \"~2.3\",\n        \"symfony/monolog-bundle\": \"~2.4\",\n        \"sensio/distribution-bundle\": \"~3.0,>=3.0.12\",\n        \"sensio/framework-extra-bundle\": \"~3.0,>=3.0.2\",\n        \"sensio/generator-bundle\": \"~2.5\",\n        \"incenteev/composer-parameter-handler\": \"~2.0\",\n        \"lexik/workflow-bundle\": \"0.4.*@dev\",\n        \"behat/transliterator\": \"1.0.1\",\n        \"stof/doctrine-extensions-bundle\": \"1.1.0\",\n        \"nelmio/solarium-bundle\": \"2.1.0\",\n        \"friendsofsymfony/rest-bundle\": \"1.6.1\",\n        \"jms/serializer-bundle\": \"0.13.0\",\n        \"jms/di-extra-bundle\": \"1.4.0\",\n        \"nelmio/api-doc-bundle\": \"2.9.0\"\n    },\n. I tested both versions and neither of them works.\nHere is my composer : \n\"require\": {\n        \"php\": \">=5.3.3\",\n        \"symfony/symfony\": \"2.7.*\",\n        \"doctrine/orm\": \"~2.2,>=2.2.3,<2.5\",\n        \"doctrine/dbal\": \"<2.5\",\n        \"doctrine/common\": \"2.5\",\n        \"doctrine/doctrine-bundle\": \"~1.4\",\n        \"twig/extensions\": \"1.0.*\",\n        \"symfony/assetic-bundle\": \"~2.3\",\n        \"symfony/swiftmailer-bundle\": \"~2.3\",\n        \"symfony/monolog-bundle\": \"~2.4\",\n        \"sensio/distribution-bundle\": \"~3.0,>=3.0.12\",\n        \"sensio/framework-extra-bundle\": \"~3.0,>=3.0.2\",\n        \"sensio/generator-bundle\": \"~2.5\",\n        \"incenteev/composer-parameter-handler\": \"~2.0\",\n        \"lexik/workflow-bundle\": \"0.4.*@dev\",\n        \"behat/transliterator\": \"1.0.1\",\n        \"stof/doctrine-extensions-bundle\": \"1.1.0\",\n        \"nelmio/solarium-bundle\": \"2.1.0\",\n        \"friendsofsymfony/rest-bundle\": \"1.6.1\",\n        \"jms/serializer-bundle\": \"0.13.0\",\n        \"jms/di-extra-bundle\": \"1.4.0\",\n        \"nelmio/api-doc-bundle\": \"2.9.0\"\n    },\n. It doesn't break error pages and WebProfiler pages anymore. However, my REST actions still return 500 errors.\n. It doesn't break error pages and WebProfiler pages anymore. However, my REST actions still return 500 errors.\n. There is no exception thrown, that's the problem. I get the error 500 because apparently, the response does not contain any data. Here's the end of my action in my controller:\n$this->response = array(\n            \"status\" => $dataRepository->getStatus(),\n            \"last_update\" => (is_null($lastUpdate) ? \"null\" : $lastUpdate->format('Y-m-d H:i:s'))\n        );\n        $view = View::create();\n        $view->setStatusCode(200)\n            ->setData($this->response)\n            ->setFormat(\"json\");\n        $return = $this->get('fos_rest.view_handler')->handle($view);\n        $logger->info($return);\n        return $return;\nHere's the response logged that should be returned. Seems pretty valid to me.\napp.INFO: HTTP/1.0 200 OK Cache-Control: no-cache Content-Type:  application/json Date:          Thu, 11 Jun 2015 09:47:18 GMT  {\"status\":\"ok\",\"last_update\":\"2015-05-29 10:38:53\"} [] []\n. There is no exception thrown, that's the problem. I get the error 500 because apparently, the response does not contain any data. Here's the end of my action in my controller:\n$this->response = array(\n            \"status\" => $dataRepository->getStatus(),\n            \"last_update\" => (is_null($lastUpdate) ? \"null\" : $lastUpdate->format('Y-m-d H:i:s'))\n        );\n        $view = View::create();\n        $view->setStatusCode(200)\n            ->setData($this->response)\n            ->setFormat(\"json\");\n        $return = $this->get('fos_rest.view_handler')->handle($view);\n        $logger->info($return);\n        return $return;\nHere's the response logged that should be returned. Seems pretty valid to me.\napp.INFO: HTTP/1.0 200 OK Cache-Control: no-cache Content-Type:  application/json Date:          Thu, 11 Jun 2015 09:47:18 GMT  {\"status\":\"ok\",\"last_update\":\"2015-05-29 10:38:53\"} [] []\n. I did, but as you can see the class returns a valid response, \nobject(Symfony\\Component\\HttpFoundation\\Response)[1326]\n  public 'headers' => \n    object(Symfony\\Component\\HttpFoundation\\ResponseHeaderBag)[1322]\n      protected 'computedCacheControl' => \n        array (size=1)\n          'no-cache' => boolean true\n      protected 'cookies' => \n        array (size=0)\n          empty\n      protected 'headerNames' => \n        array (size=3)\n          'cache-control' => string 'Cache-Control' (length=13)\n          'content-type' => string 'Content-Type' (length=12)\n          'date' => string 'Date' (length=4)\n      protected 'headers' => \n        array (size=3)\n          'cache-control' => \n            array (size=1)\n              0 => string 'no-cache' (length=8)\n          'content-type' => \n            array (size=1)\n              0 => string 'application/json' (length=16)\n          'date' => \n            array (size=1)\n              0 => string 'Thu, 11 Jun 2015 11:31:18 GMT' (length=29)\n      protected 'cacheControl' => \n        array (size=0)\n          empty\n  protected 'content' => string '{\"status\":\"ok\",\"last_update\":\"2015-05-29 10:38:53\"}' (length=51)\n  protected 'version' => string '1.0' (length=3)\n  protected 'statusCode' => int 200\n  protected 'statusText' => string 'OK' (length=2)\n  protected 'charset' => null\nMy guess is that the problem lies somewhere else.\n. I did, but as you can see the class returns a valid response, \nobject(Symfony\\Component\\HttpFoundation\\Response)[1326]\n  public 'headers' => \n    object(Symfony\\Component\\HttpFoundation\\ResponseHeaderBag)[1322]\n      protected 'computedCacheControl' => \n        array (size=1)\n          'no-cache' => boolean true\n      protected 'cookies' => \n        array (size=0)\n          empty\n      protected 'headerNames' => \n        array (size=3)\n          'cache-control' => string 'Cache-Control' (length=13)\n          'content-type' => string 'Content-Type' (length=12)\n          'date' => string 'Date' (length=4)\n      protected 'headers' => \n        array (size=3)\n          'cache-control' => \n            array (size=1)\n              0 => string 'no-cache' (length=8)\n          'content-type' => \n            array (size=1)\n              0 => string 'application/json' (length=16)\n          'date' => \n            array (size=1)\n              0 => string 'Thu, 11 Jun 2015 11:31:18 GMT' (length=29)\n      protected 'cacheControl' => \n        array (size=0)\n          empty\n  protected 'content' => string '{\"status\":\"ok\",\"last_update\":\"2015-05-29 10:38:53\"}' (length=51)\n  protected 'version' => string '1.0' (length=3)\n  protected 'statusCode' => int 200\n  protected 'statusText' => string 'OK' (length=2)\n  protected 'charset' => null\nMy guess is that the problem lies somewhere else.\n. Just a quick update to say that the problem seems to occur when you use $this->getDoctrine()-> getRepository(). If I remove all those calls and set a static array as a response, then it works. \nVery strange since these DB queries return the expected results, don't throw any exception and leave no errors or warning in the logs.\n. The problem is fixed with the version 2.7.1 of Symfony.\n. ",
    "rubiodamian": "this seems not resolved.\nI'm having the same issue right now!\nwhen the controller returns a string the response is a json and when it returns an entity the request freeze and return a 500 http error\napparently the problem is when large objects are returned\n. solved using http://npmasters.com/2012/11/25/Symfony2-Rest-FOSRestBundle.html\n. ",
    "ivaaaan": "@Get annotations solved this problem\n. ",
    "ncrypthic": "This is how I do this on current version:\n- I create a new kernel.controller event listener\n- On the event method I get ParamFetcher service instance and set the parameter manually\nThats why I propose above implementation. If you decide to implement this, just tell me if there's anything I can help with.\n. ",
    "gtrias": "Well, I would like to have my actions something like this:\n/**\n     * @Rest\\View()\n     */\n    public function indexAction()\n    {\n        ...\n        $dataNotToSerialize = array();\n        $this->setTemplateData($dataNotToSerialize); // This is the functionality that I missing\n        return $data;\n    }\nInstead of this: \npublic function indexAction()\n    {\n        ...\n        $view = $this->view($entities, 200)\n            ->setTemplate(\"ACSACSPanelBundle:Domain:index.html.twig\")\n            ->setTemplateVar(\"entities\")\n            ->setTemplateData($dataNotToSerialize)\n        ;\n        return $this->handleView($view);\n    }\nI would like to omit the setTemplate and setTemplateVar as it could be handled by the View annotation.. \nIs it possible to be achieved what I want?\n. Well, I would like to have my actions something like this:\n/**\n     * @Rest\\View()\n     */\n    public function indexAction()\n    {\n        ...\n        $dataNotToSerialize = array();\n        $this->setTemplateData($dataNotToSerialize); // This is the functionality that I missing\n        return $data;\n    }\nInstead of this: \npublic function indexAction()\n    {\n        ...\n        $view = $this->view($entities, 200)\n            ->setTemplate(\"ACSACSPanelBundle:Domain:index.html.twig\")\n            ->setTemplateVar(\"entities\")\n            ->setTemplateData($dataNotToSerialize)\n        ;\n        return $this->handleView($view);\n    }\nI would like to omit the setTemplate and setTemplateVar as it could be handled by the View annotation.. \nIs it possible to be achieved what I want?\n. Ok I see, \nSo this works well.\n/**\n     * @Rest\\View()\n     */\n    public function indexAction()\n    {\n        ...\n        $view = $this->view($entities, 200)\n            ->setTemplateData($dataNotToSerialize)\n        ;\n        return $this->handleView($view);\n    }\nI would like to have a way to return directly the data to be serialized as you can do with the View annotation but keeping the possibility to set data not to be serialized. But this approach is OK for me.\nShould I create a PR to illustrate this scenario in the docs?\n. Ok I see, \nSo this works well.\n/**\n     * @Rest\\View()\n     */\n    public function indexAction()\n    {\n        ...\n        $view = $this->view($entities, 200)\n            ->setTemplateData($dataNotToSerialize)\n        ;\n        return $this->handleView($view);\n    }\nI would like to have a way to return directly the data to be serialized as you can do with the View annotation but keeping the possibility to set data not to be serialized. But this approach is OK for me.\nShould I create a PR to illustrate this scenario in the docs?\n. Thank you, @lsmith77 \nI had a mistake with the previous message I haven't tested the action on html format calls. \nSo now I can confirm that way doesn't works as expected. If you use the return $this->handleView($view); all the annotation stuff is ignored :(\nSo, the conclusion is if you need to set templateData you only can do it using the handleView  and there's nothing you can do with annotations...\n. Yes! That make the trick. I've tried returning the $view object directlly and it works like charm.\nThank you a lot @lsmith77 \n. Ok, I can see in master is defined the option in Configuration.php so, I guess there's not a release with this feature yet?\n. I would appreciate to be able to use this feature for a project I'm working in :), so if this can be easily port to 1.8 here you have my :+1: \n. I would appreciate to be able to use this feature for a project I'm working in :), so if this can be easily port to 1.8 here you have my :+1: \n. @lsmith77 let me try if it still works creating a new View instance\n. ",
    "juliomatcom": "hey, i try this again but its just happened that i was on prod environment and messages was like this.. \nim sorry , there is no issue with latin character at all :+1: \nPROD\n\n{\n  \"error\": {\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}\n...\n\n\nand in DEV\n\n{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"Bad Request\",\n    \"exception\": [\n      {\n        \"message\": \"Request parameter nombre value 'C\u00e9sar' violated a constraint (Request parameter value 'C\u00e9sar', does not match requirements '[a-zA-Z]')\",\n...\n\n\n. hey, i try this again but its just happened that i was on prod environment and messages was like this.. \nim sorry , there is no issue with latin character at all :+1: \nPROD\n\n{\n  \"error\": {\n    \"code\": 500,\n    \"message\": \"Internal Server Error\"\n  }\n}\n...\n\n\nand in DEV\n\n{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"Bad Request\",\n    \"exception\": [\n      {\n        \"message\": \"Request parameter nombre value 'C\u00e9sar' violated a constraint (Request parameter value 'C\u00e9sar', does not match requirements '[a-zA-Z]')\",\n...\n\n\n. ",
    "sarcher": "I ran into this as well just now after catching up my dependencies on a rebase. The relevant PR is sensiolabs/SensioFrameworkExtraBundle#369 (ping @derrabus)\nSince the test is just verifying the code path, a simple fix is to replace this:\n``` php\n        $request = new Request();\n    $event = $this->getResponseEvent($request, array());\n    $event->expects($this->never())\n        ->method('setResponse');\n\n    $this->container->expects($this->once())\n        ->method('get')\n        ->with($this->equalTo('templating'))\n        ->will($this->returnValue($this->templating));\n\n    $this->listener->onKernelView($event);\n\n```\nWith this:\n``` php\n        $request = new Request();\n    $event = $this->getResponseEvent($request, array());\n    $event->expects($this->never())\n        ->method('setResponse');\n\n    $this->assertEquals(array(), $this->listener->onKernelView($event));\n\n```\nBut maybe there is something better?\n. All set, the above change is in there now. Everything passes on my end and Travis looks good.\n. This is now causing a deprecation warning with SensioFrameworkExtraBundle 5.2 (see sensiolabs/SensioFrameworkExtraBundle#562). The conditional fix above works; maybe it could be made into its own PR or somebody updates this one so it can be merged?\n(Maybe that deserves its own issue, but it's sort of captured here, so I didn't create one). Sure thing, I can do that. I wasn't clear on why that was defaulted in both places, I'd say moving it out of the XML would be a good idea anyway.. ",
    "derrabus": "Sorry for breaking your test. ;-)\nThe failing test made assertions on the behavior of FrameworkExtraBundle which is obviously not its purpose. @sarcher's change sounds reasonable to me. I've tested #1091 with FrameworkExtraBundle 3.0.10 as well as 3.0.9 and the test passed in both cases.\n. Using a bitwise xor operator (^) here seems odd. Also, I don't see why the case that both definitions exist should be excluded explicitly. I'd prefer || instead.\nAlso, since we have php 5.5 here, you can safely use TemplateListener::class instead of the FQCN string.. @merk This is wrong. ::class will always resolve to the FQCN in your use statement, no matter if that class exists or not. Also, neither use nor ::class will trigger autoloading. So it is indeed perfectly save to use it here.\nhttps://3v4l.org/RkQNN. ",
    "gsdevme": "Thanks, looks like its included in 1.6.0. Should this stay open for a note of the documentation? if not please close it.\n. ",
    "NullDivision": "I've also tried to use @TemplateCardBundle/Controller/CardController but it trips Symphony's kernel saying:\n```\n[Sun Aug 16 17:20:27 2015] PHP Fatal error:  Uncaught exception 'InvalidArgumentException' with message 'Unable to find file \"@TemplateCardBundle/Controller/CardController\".' in /home/ancarius/Projects/tpl00001/server/vendor/symfony/http-kernel/Kernel.php:313\nStack trace:\n0 /home/ancarius/Projects/tpl00001/server/vendor/symfony/http-kernel/Config/FileLocator.php(51): Symfony\\Component\\HttpKernel\\Kernel->locateResource('@TemplateCardBu...', '/home/ancarius/...', true)\n1 /home/ancarius/Projects/tpl00001/server/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle/Routing/Loader/RestRouteLoader.php(107): Symfony\\Component\\HttpKernel\\Config\\FileLocator->locate('@TemplateCardBu...')\n2 /home/ancarius/Projects/tpl00001/server/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle/Routing/Loader/RestRouteLoader.php(72): FOS\\RestBundle\\Routing\\Loader\\RestRouteLoader->getControllerLocator('@TemplateCardBu...')\n3 /home/ancarius/Projects/tpl00001/server/vendor/symfony/config/Loader/FileLoader.php(112): FOS\\RestBundle\\Routing\\Loader\\RestRouteLoader->load('@TemplateCard in /home/ancarius/Projects/tpl00001/server/vendor/symfony/config/Loader/FileLoader.php on line 130\n[Sun Aug 16 17:20:27 2015] 127.0.0.1:56021 [500]: /app_dev.php/_profiler/477649?panel=router - Uncaught exception 'InvalidArgumentException' with message 'Unable to find file \"@TemplateCardBundle/Controller/CardController\".' in /home/ancarius/Projects/tpl00001/server/vendor/symfony/http-kernel/Kernel.php:313\nStack trace:\n0 /home/ancarius/Projects/tpl00001/server/vendor/symfony/http-kernel/Config/FileLocator.php(51): Symfony\\Component\\HttpKernel\\Kernel->locateResource('@TemplateCardBu...', '/home/ancarius/...', true)\n1 /home/ancarius/Projects/tpl00001/server/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle/Routing/Loader/RestRouteLoader.php(107): Symfony\\Component\\HttpKernel\\Config\\FileLocator->locate('@TemplateCardBu...')\n2 /home/ancarius/Projects/tpl00001/server/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle/Routing/Loader/RestRouteLoader.php(72): FOS\\RestBundle\\Routing\\Loader\\RestRouteLoader->getControllerLocator('@TemplateCardBu...')\n3 /home/ancarius/Projects/tpl00001/server/vendor/symfony/config/Loader/FileLoader.php(112): FOS\\RestBundle\\Routing\\Loader\\RestRouteLoader->load('@TemplateCard in /home/ancarius/Projects/tpl00001/server/vendor/symfony/config/Loader/FileLoader.php on line 130\n``\n. Tried that too. See my second message.\n. I've tried using the full qualified namespace. The result is the same. Unless I add.php` to the end (which basically just loads the PHP file as a resource it doesn't work.\n. ",
    "graundas": "Hi. Why isn't this commit fully added to the latest release of RestBundle? Specifically,  FOSRestBundle/Controller/Annotations/RouteResource.php line 29.\nThis line does not exist in the latest release. This feature does not work.\nIt exists in the docs: http://symfony.com/doc/current/bundles/FOSRestBundle/5-automatic-route-generation_single-restful-controller.html\n. ",
    "ReservedDeveloper": "In attempting to test this out (specifically using the example with @QueryParam(name=\"page\", requirements=\"\\d+\", default=\"1\", description=\"Page of the overview.\"), I ran in to an issue with the annotations parser. Specifically Doctrine/Common/Annotations/DocParser.php:786:\nphp\n} elseif (gettype($values[$property]) !== $type['type'] && !$values[$property] instanceof $type['type']) {\nNote the gettype call when $values[$property] is a string will return string type, when only scalar|array|Constraint|null are supported.\nSince string !== (scalar|array|Constraint|null)... :boom:\nThe specific error I'm receiving is:\nsh\n  [Doctrine\\Common\\Annotations\\AnnotationException]                                                                                                                                                     \n  [Type Error] Attribute \"requirements\" of @FOSRest\\QueryParam declared on method AppBundle\\Controller\\XyzController::indexAction() expects a(n) scalar|array|Constraint|null, but got string.\nI didn't see any changes to the dependencies that would suggest a different version of the Doctrine library. Am I missing something here?\n. From what I can see, this ticket is still valid. The above linked example does not mention exception_wrapper_handler in any way. Not sure if something has changed in that branch or not, but as  it stands usage is a little unclear, though the Upgrade Doc does allude to it being service-based now.\n. ",
    "davidjwilkins": "FYI this is an issue with PHP, not with FOSRestBundle.  See http://stackoverflow.com/questions/68651/get-php-to-stop-replacing-characters-in-get-or-post-arrays.\nSymfony has the same issue in HttpFoundation and they said\n\nClosing this one as this is just the way PHP parses HTTP requests and we won't workaround that.\n\nSee https://github.com/symfony/symfony/issues/9009\nFor anyone wondering what the simplest solution is - just change your annotation to:\n@QueryParam(name=\"customer_name\")\n\nor do $paramFetcher->get(\"customer_name\") and it will find it.\n. ",
    "zyphlar": "Nevermind, apparently the XML form was never being saved, just like in Issue 1018.\n. Ah, the ultimate solution to my problem was that I needed to wrap the form name in a throwaway root XML node: curl -s -H \"Accept: application/xml\" -H \"Content-type: application/xml\" -X POST -d '<blah><hardware><cpu>2</cpu><memory>8</memory></hardware></blah>' http://localhost/app_dev.php/hardware\nThe form wasn't being saved, apparently, because the form name was never making it to the actual form.\nThanks, \"remembering quirks about XML from 10 years ago!\"\n. ",
    "ad3n": "@xabbuh : Yes... you are right\n. @sstok : it's just my case, i don't know how many format can be supported by FOSRestBundle\n. @sstok : it's just my case, i don't know how many format can be supported by FOSRestBundle\n. This is my example\nlang=php\n$view = View::create()\n            ->setStatusCode(Response::HTTP_OK)\n            ->setFormat(View::FORMAT_HTML)\n            ->setTemplate('template.html.twig')\n        ;\nWith that constants, My IDE can suggest (auto complete) the view format. It's more efficient and easier for me\n. This is my example\nlang=php\n$view = View::create()\n            ->setStatusCode(Response::HTTP_OK)\n            ->setFormat(View::FORMAT_HTML)\n            ->setTemplate('template.html.twig')\n        ;\nWith that constants, My IDE can suggest (auto complete) the view format. It's more efficient and easier for me\n. ",
    "Minishlink": "I'm not sure how to implement the BC layer... Can you give me a hint please ?\n. It should be ok. :)\n. ",
    "b-viguier": "@stof Done\nI tried to mock the validator in order to cover 99% of the use cases, but since this service is injected we cannot guarantee that a standard Symfony RegexValidatorwill always be used.\nI am still open to your remarks if you are not totally satisfied, thanks :smile: \n. Nice!\n:smile: \n. Nice!\n:smile: \n. :+1: \n. ",
    "andreas-glaser": "thanks\n. ",
    "digitalkaoz": "@lsmith77 see #1119\n. ",
    "alfonmga": "Hey @jbenezech that scenario looks insteresting, you solved it?\n. Hey @jbenezech that scenario looks insteresting, you solved it?\n. ",
    "jbenezech": "@alfonsomga , as a temporary solution, we've solved that by registering a form type extension which disables the csrf protection based on the request path (/api)\n. @alfonsomga , as a temporary solution, we've solved that by registering a form type extension which disables the csrf protection based on the request path (/api)\n. Can't be able to clone symfony-standard today so can't give you a fork to reproduce the issue.\nProposed fix: https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1365\nThe issue comes from the XMLFileLoader setting the fos_rest.serializer.exclusion_strategy.groups parameter to an empty string in the container.\nWhen the ViewHandler service is loaded and the setExclusionStrategyGroups called, this sets the exclusionStrategyGroups to an array with 1 entry (empty string).\nNone of the properties of the entities satisfy this group and the serializer ignores them.\n. Finally managed to clone symfony-standard.\nProblem reproduced here:\nhttps://github.com/jbenezech/symfony-standard/tree/fos_rest_serialization_issue\nCommit:\nhttps://github.com/jbenezech/symfony-standard/commit/7f1dd0d70ff494613182559fe1fe5432533a2bec\n. ",
    "Ma27": "I'd add a new configuration parameter that disables the extension if the headers are not correct:\nyaml\nfos_rest:\n    disable_csrf:\n        role: ROLE_API (defaultNull) (moved with \"headers\" into one section because of readability)\n        headers:\n            Accept:\n                - text/html (can be string or array if many types should be accepted)\nif you'd be fine with that approach, I'd work on it when having time :)\n/cc @lsmith77 @Ener-Getick \n. the reason of that extension is to disable csrf protection on for the api, so if it is not a good idea, the whole approach including the solution of the issue reporter would be a bad idea or am I completly wrong?\n. awesome! thank you :)\n. seen it, but it'll take some days until I'll bump the version to 3.x :)\n2015-12-04 23:58 GMT+01:00 Christian Flothmann notifications@github.com:\n\nWell, actually the tag for that fix isn't created yet (you can expect that\ntomorrow), but the 1,7 branch already contains the necessary changes.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/1242#issuecomment-162104924\n.\n. thx :+1: \n. thx :+1: \n. you're welcome\n. ping @Ener-Getick @lsmith77 \n. ok, everything should be fixed now.\nAh and thanks for the hint with the default params in phpunit's dataprovider :)\n\n/cc @Ener-Getick \n. I don't think so: the FOS\\RestBundle\\View\\View#getStatusCode() returned in 1.7 200 if no status code was provided. In this change it returns null if no status code is provided just like @lsmith77 suggested it in #1126 . I didn't have such a usecase yet, but this class is not declared as @internal, so this change is an BC break that should not appear in minor versions.\n. ping @lsmith77 @xabbuh \n. rebased master. Writing now some docs and the it should be ready.\n. ping @lsmith77 review the docs and then this can be hopefully merged :)\n. ok, rebased master again @lsmith77 :)\n. hmm, will be difficult as \"PATCH\" worked as a fallback.\nI'm working on the tests and re-create a PR to be merged into master (I'll\nuse FOSRestBundle 2.0 when it comes out, so at least for me it won't be a\nproblem).\n2016-01-15 17:31 GMT+01:00 Ener-Getick notifications@github.com:\n\nah yeah ok a solution would be to support both http methods for LOCK\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/1309#issuecomment-172008042\n.\n. ping @Ener-Getick @lsmith77 \n. ok thank you @Ener-Getick \n. ping @Ener-Getick @lsmith77 \n. argh you're right, sry^^\n. I assumed that I should import all the changes that don't contain bc (annotations only). Thewhole router changes are a BCbreak.\n\nVon meinem iPhone gesendet\n\nAm 02.02.2016 um 17:10 schrieb Ener-Getick notifications@github.com:\nI think that's confusing if they aren't supported by the router.\n\u2014\nReply to this email directly or view it on GitHub.\n. actually not: the fallback chosen for controller actions is \"PATCH\".\n\nnow imagine you have any controller methods like this:\nphp\npublic function copyUserAction() {}\npublic function mkcolUserAction() {}\npublic function *UserAction() {}\nThen everyone expects in the 1.x release to have \"PATCH\" as fallback. With our change we introduce new http methods and then the default is not patch anymore, but MKCOL/COPY and that's definetly a BC break.\n. embarrasing... could you please do the whole stuff with the backport if you still wish to have it (I assume that the missing router feature is a :-1: for this feature)...\n. should be $code actually\n. string|null\n. https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1299/files#diff-5959da22e28b61bcb047ba680731fdcdR380\nas you can see, that returns type hint matches the hint of this property.\n. but I think that the ability to pass custom status codes even if the content is empty should be part of the documentation\n. mistyped\n. as the lock stuff will be handled by the lock method. The patch thing is simply a fallback: https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Routing/Loader/Reader/RestActionReader.php#L525-L539\n. should be removed. (I prefer using the composer dependency and just forgot to remove)\n. ok, let's check it out\n. I usually work on a 15\" Notebook and I really hate it to scroll horizontal in PhpStorm, so I decided to write it that way\n. call me crazy, but this looks IMHO odd, too :D \nBut hey, because of that the following rule exists: http://www.php-fig.org/psr/psr-2/ (120 char limit)\n. ok, then I'll change it. I observed that syntax in some parts of symfony, so I assume, it would be ok to use it (https://github.com/symfony/debug/blob/master/ExceptionHandler.php#L272)\n. oh yes, forgot to update the UPGRADING.md...\n. ",
    "filipjakubowski": "Hi, \nThnaks, \nI have tried every of those in my composer.json:\nadding negotiation\n\"willdurand/negotiation\":         \"~1.2\",\nremoving minimum-stability and adding prefer-stable\n\"minimum-stability\": \"stable\",\n\"prefer-stable\": true,\nand still got error on composer update:\nProblem 1\n    - friendsofsymfony/rest-bundle dev-master requires willdurand/negotiation ^2.0.0-alpha1 -> no matching package found.\n    - friendsofsymfony/rest-bundle dev-master requires willdurand/negotiation ^2.0.0-alpha1 -> no matching package found.\n    - Installation request for friendsofsymfony/rest-bundle dev-master -> satisfiable by friendsofsymfony/rest-bundle[dev-master].\nI even have tried removing minimum-stability and prefer-stable\n. Thanks @stof, \nmy bad - I think I took look on wrong version dependency in rest bundle. \nIt helped. :-) Still need to upgrade to newer version of Symfony ;-)\n. ",
    "vishalmelmatti": "Ah thats great. I am using 1.7.1. Thanks will close this issue. \n. jsm serializer supports adding custom exclusion strategy, how to add it in same serializer context which fosresbundle creates ? I don't want to create separate serialization context to avoid doing in each controller. \n. Thanks I can override but just wanted to know Isn't it worth having a feature to allow adding custom strategies ? May be having some tagged services as strategies and fosrestbundle should add them in context ?\n. Yeah right. JMSSerializerBundle already allows to add custom strategies but we need to access serializer context. I wanted to add strategies in same context created by fosrest.  May be ability to configure serialization context in fos_rest configuration make sense? That way it will decouple fosrest from JmsSerializer SerializationContext. \n. Thanks @lsmith77 for your help and time. Will post it on JMSSerializerBundle bundle. \n. ",
    "MavenSean": "That only works for a controller.  In this case as I mentioned I'm doing preauthorization.\nThe firewall intercepts the call before its passed to the controller, so I can't access route placeholders like you would in a normal controller.\n/v1.0/{apiKey} in this case routes -> Firewall rule -> authenticationHandler -> userProvider -> restController\nI need to retrieve the api key at the point of the authenticationHandler.  For the time being, I'm just exploding the URL to get the value, but that's a very dirty way of doing it.\n. @xabbuh Thank you, that answers my question exactly.  It didn't even occur to me to check the attributes and it worked exactly as I needed.\n. ",
    "mpbzh": "Thanks! Do I disable it by just ommitting the format_listener or setting it to false?\n. I did some further testing: \nSetting the format_listener to false did not have any effect, the CardDav functionality is still broken.\nDisabling the FOSRestBundle completely (Removing from the AppKernel.php and removing the config), however, restored full functionality.\nThe inital setup of a CardDav account (on the client) works, but not subsequent updates.\nLooking at the actual traffic caused by the client it might be related to the HTTP methods used: PROPFIND, OPTIONS and REPORT. \nOther methods that the server accepts: OPTIONS, GET, HEAD, DELETE, PROPFIND, PUT, PROPPATCH, COPY, MOVE, REPORT of which not all seem to be standard methods...\n. After even further testing a I am now very confused, it works now as expected, even with FOSRestBundle activated. \nI'm closing this issue until i notice any other problems.\n. So I did some in depth testing. It appears that the FOSRestBundle seems to be a problem after all.\nHere's what I did: \n- I removed FOSRestBundle from the AppKernel.php and the config.yml and emptied the cache.\n- I monitored all packets that my phone exchanged with the server using an intercepting proxy (Burp).\n- I then set up the CardDav account on my phone. The initial pull of the address book worked fine, even if I reenabled FOSRest.\n- When I update the contact on the phone with FOSRest enabled, the error below happens. If FOSRest is disabled, it works fine (see below)\n- There is no difference in outcome when I deactivate the bundle completely vs. only setting format_listener: false\nRequest (redacted):\n```\nPUT /addressbooks/admin/list/contact-126.vcf HTTP/1.1\nHost: [our server]\nContent-Type: text/vcard; charset=utf-8\nAccept-Encoding: gzip, deflate\nAuthorization: Basic [auth hash]\nConnection: keep-alive\nAccept: /\nUser-Agent: iOS/9.1 (13B5110e) dataaccessd/1.0\nIf-Match: \"32836d824bc54c955116fce22ef98ff6\"\nContent-Length: 309\nAccept-Language: de-ch\nBEGIN:VCARD\nVERSION:3.0\nPRODID:-//Apple Inc.//iOS 9.1//EN\nN:Name;Full;;;\nFN:Full Name\nTITLE:Leiter IT\nitem2.TEL;type=pref:+410000000\nREV:2015-10-07T08:09:46Z\nUID:126\nEND:VCARD\n```\nResponse without FOSRest (expected behavior):\nHTTP/1.1 204 No Content\nDate: Wed, 07 Oct 2015 08:23:02 GMT\nServer: Apache\nX-Sabre-Version: 2.1.3\nETag: \"8ef1d7c566076d2d3ce88dfbbb4e2943\"\nVary: Authorization\nContent-Length: 0\nX-Powered-By: PleskLin\nKeep-Alive: timeout=5, max=10\nConnection: Keep-Alive\nContent-Type: text/html\nResponse with FOSRest (not working):\n```\nHTTP/1.1 415 Unsupported Media Type\nDate: Wed, 07 Oct 2015 08:09:54 GMT\nServer: Apache\nX-Sabre-Version: 2.1.3\nVary: Authorization\nX-Powered-By: PleskLin\nKeep-Alive: timeout=5, max=10\nConnection: Keep-Alive\nContent-Type: application/xml; charset=utf-8\nContent-Length: 2996\nxml version=\"1.0\" encoding=\"utf-8\"?\n\n2.1.3\nSabre\\DAV\\Exception\\UnsupportedMediaType\nThis resource only supports valid vCard or jCard data. Parse error: End of document reached prematurely\n/home/httpd/vhosts/mydomain/vendor/sabre/dav/lib/CardDAV/Plugin.php\n429\n0\n#0 /home/httpd/vhosts/mydomain/vendor/sabre/dav/lib/CardDAV/Plugin.php(362): Sabre\\CardDAV\\Plugin->validateVCard('', false)\n#1 [internal function]: Sabre\\CardDAV\\Plugin->beforeWriteContent('addressbooks/ad...', Object(Sabre\\CardDAV\\Card), '', false)\n#2 /home/httpd/vhosts/mydomain/vendor/sabre/event/lib/EventEmitterTrait.php(105): call_user_func_array(Array, Array)\n#3 /home/httpd/vhosts/mydomain/vendor/sabre/dav/lib/DAV/Server.php(1085): Sabre\\Event\\EventEmitter->emit('beforeWriteCont...', Array)\n#4 /home/httpd/vhosts/mydomain/vendor/sabre/dav/lib/DAV/CorePlugin.php(501): Sabre\\DAV\\Server->updateFile('addressbooks/ad...', Resource id #390, NULL)\n#5 [internal function]: Sabre\\DAV\\CorePlugin->httpPut(Object(Sabre\\HTTP\\Request), Object(Sabre\\HTTP\\Response))\n#6 /home/httpd/vhosts/mydomain/vendor/sabre/event/lib/EventEmitterTrait.php(105): call_user_func_array(Array, Array)\n#7 /home/httpd/vhosts/mydomain/vendor/sabre/dav/lib/DAV/Server.php(469): Sabre\\Event\\EventEmitter->emit('method:PUT', Array)\n#8 /home/httpd/vhosts/mydomain/vendor/sabre/dav/lib/DAV/Server.php(254): Sabre\\DAV\\Server->invokeMethod(Object(Sabre\\HTTP\\Request), Object(Sabre\\HTTP\\Response))\n#9 /home/httpd/vhosts/mydomain/src/MyBundle/Controller/MasterData/CardDavController.php(71): Sabre\\DAV\\Server->exec()\n#10 [internal function]: MyBundle\\Controller\\MasterData\\CardDavController->indexAction()\n#11 /home/httpd/vhosts/mydomain/app/bootstrap.php.cache(3054): call_user_func_array(Array, Array)\n#12 /home/httpd/vhosts/mydomain/app/bootstrap.php.cache(3016): Symfony\\Component\\HttpKernel\\HttpKernel->handleRaw(Object(Symfony\\Component\\HttpFoundation\\Request), 1)\n#13 /home/httpd/vhosts/mydomain/app/bootstrap.php.cache(3165): Symfony\\Component\\HttpKernel\\HttpKernel->handle(Object(Symfony\\Component\\HttpFoundation\\Request), 1, true)\n#14 /home/httpd/vhosts/mydomain/app/bootstrap.php.cache(2406): Symfony\\Component\\HttpKernel\\DependencyInjection\\ContainerAwareHttpKernel->handle(Object(Symfony\\Component\\HttpFoundation\\Request), 1, true)\n#15 /home/httpd/vhosts/mydomain/web/app.php(28): Symfony\\Component\\HttpKernel\\Kernel->handle(Object(Symfony\\Component\\HttpFoundation\\Request))\n#16 {main}\n\n```\nNote: I am still using the same FOSRest configuration as posted above.\n. This fork shows the issue described above:\nhttps://github.com/krzysztofbitnoise/symfony-rest-edition\nThanks for having a look at it!\n. To see the behavior above you best configure the server as a new CardDav account on your smartphone. iPhones support this natively, Android phones need a (free) app installed.\nYou should then let the phone sync the contacts, open one, change any value and save. Have a look at the server response (which is an exception in case of FOSRest enabled).\nIf you don't want to configure your phone you can find out the URL of a specific contact and then send a PUT request to the server, like the one listed above.\nAs far as my testing goes, I have only seen PUT requests being affected by the issue.\n. I see. If you set the parameter carddav_browser in your parameters.yml to true, you have a rendered representation of the structure when accessing the server with the browser. \nThe direct URL to a contact would be /addressbooks/mod/list-of-example-contacts/contact-1.vcf\n. Looks good. Now you need to send a PUT request with the same body, but change for example the email to something else. That should lead to the same exception as above\n. @lsmith77 Thanks for looking into it. Have you checked if the Sabre\\DAV\\Exception\\UnsupportedMediaType exeption mentioned in a comment above is also thrown? \nThat would explain why nothing is stored and would lead to an assumption that FOSRest somehow tampers with the request (as this only happens if FOSRest is enabled)\n. Thanks for the feedback! However I would not change the visibility, why should it be private, when all the other methods are protected?\n. For anyone getting the same exception: I got it when I tried to run a Symfony 2.8 application with some bundles that required PHP 5.6 on a server that was running PHP 5.4. Updating the server to 5.6 fixed the problem.\n. For anyone getting the same exception: I got it when I tried to run a Symfony 2.8 application with some bundles that required PHP 5.6 on a server that was running PHP 5.4. Updating the server to 5.6 fixed the problem.\n. ",
    "vcrproszek": "@mpbzh \nHi, Which version of RestBundle are you using ? I have same problem. Disabling FOSRestBundle works only ( AppKernel, config and remove cache )\n. ",
    "paali": "Sorry for hijacking but I seem to have very similar issues with symfony2 custom error pages. Only way to make it work is to set:\nyml\nfos_rest:\n    body_converter:\n        enabled: false\nBut I need the body converter to work.\nThe testing routes can be enabled by setting this to routing_dev.yml:\nyml\n_errors:\n    resource: \"@TwigBundle/Resources/config/routing/errors.xml\"\n    prefix:   /_error\nAnd just accessing  http://127.0.0.1/_error/404\nI get these exceptions: https://gist.github.com/paali/7e2dc8c00a2d989e0298\nIn production environment the error pages won't work but I cannot figure out why from the short exception trace sent through email. Maybe the same issue or maybe not.\n. Sorry for hijacking but I seem to have very similar issues with symfony2 custom error pages. Only way to make it work is to set:\nyml\nfos_rest:\n    body_converter:\n        enabled: false\nBut I need the body converter to work.\nThe testing routes can be enabled by setting this to routing_dev.yml:\nyml\n_errors:\n    resource: \"@TwigBundle/Resources/config/routing/errors.xml\"\n    prefix:   /_error\nAnd just accessing  http://127.0.0.1/_error/404\nI get these exceptions: https://gist.github.com/paali/7e2dc8c00a2d989e0298\nIn production environment the error pages won't work but I cannot figure out why from the short exception trace sent through email. Maybe the same issue or maybe not.\n. ",
    "temp": "@paali I just stumbled upon the same problem.\nI need the body_converter in one place, but now it wants to convert every Object inside my action signature...\n. @paali I just stumbled upon the same problem.\nI need the body_converter in one place, but now it wants to convert every Object inside my action signature...\n. I always thought that a @ParamConverter annotation is needed for this. Never used them much, though.\n. I always thought that a @ParamConverter annotation is needed for this. Never used them much, though.\n. Not really. I found a solution for my problem.\nBut it should be stated somewhere, that this changes default serializer-bevaviour.\n. ",
    "Inwerpsel": "@temp @paali  The FOSRestBundle body converter requires the SensioFrameworkExtraBundle request.converters setting to be true (see https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/index.html ).\nyaml\nsensio_framework_extra:\n    request: { converters: true }\nThe default behavior of this setting is to automatically convert arguments that are type hinted in the controller action signature. You can disable this:\nyaml\nsensio_framework_extra:\n    request: { converters: true, auto_convert: false }\nFor me setting this to false solved a similar issue as @paali and @temp :\nI have FOSRestBundle combined with NelmioApiDocBundle. I use the body converter for converting json objects that are POSTed. The documentation of some routes can only be seen when logged in (via form login).\nThe api is at /\nThe docs are at /doc\nForm login for docs at /doc/login\nBefore disabling the auto_convert setting GET /doc/login gave following error:\nThe format \"\" is not supported for deserialization.. @temp @paali  The FOSRestBundle body converter requires the SensioFrameworkExtraBundle request.converters setting to be true (see https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/index.html ).\nyaml\nsensio_framework_extra:\n    request: { converters: true }\nThe default behavior of this setting is to automatically convert arguments that are type hinted in the controller action signature. You can disable this:\nyaml\nsensio_framework_extra:\n    request: { converters: true, auto_convert: false }\nFor me setting this to false solved a similar issue as @paali and @temp :\nI have FOSRestBundle combined with NelmioApiDocBundle. I use the body converter for converting json objects that are POSTed. The documentation of some routes can only be seen when logged in (via form login).\nThe api is at /\nThe docs are at /doc\nForm login for docs at /doc/login\nBefore disabling the auto_convert setting GET /doc/login gave following error:\nThe format \"\" is not supported for deserialization.. ",
    "AlexandreKilian": "this needs to be added to the docs! I've been looking for ages for that!\n. ",
    "Sydney-o9": "Awesome - good to know @lsmith77. Thank you!\n. ",
    "stloyd": "Such PRs & commits should contain [ci skip] to no waste resource like Scrutinizer and/or Travis-CI...\n. As version 2.0 requires already PHP 5.5+ you can call instead:\nphp\n$view->setContext(\n    (new Context())\n        ->addGroup('some-group')\n);\n. I guess this is answer you are looking for: https://stackoverflow.com/a/47602072/1565786. Seems like typo here, didn't you mean: array_key_exists() ?\n. Shouldn't this be: !empty($options['stop'])?\n. booleanNode()\n. Or probably even better: canBeEnabled().\n. Missing *.\n. Should be just if as you call return in if above.\n. else is useless as you call return in if.\n. Same here.\n. Wrong indent.\n. assertCount() should be used instead.\n. Assign this to local variable is useless, as this is used only once.\n. ",
    "Newan": "Thank you very much. works\n. Change the ajax call an it runs:\nhttp://stackoverflow.com/questions/2320069/jquery-ajax-file-upload. ",
    "lennerd": "Validation also wont work if you have other special characters than blanks. I tested this with the german characters \u00e4, \u00f6 and  \u00fc. rawurlencode fixes this.\n. ",
    "voslartomas": "I am sorry my bad, I was reading newer version.\n. I am sorry my bad, I was reading newer version.\n. I found it here http://symfony.com/doc/current/bundles/FOSRestBundle/param_fetcher_listener.html, but it's showing version 1.7 with this feature, so maybe at least fix this doc, so it won't confuse others in the future.\n. I found it here http://symfony.com/doc/current/bundles/FOSRestBundle/param_fetcher_listener.html, but it's showing version 1.7 with this feature, so maybe at least fix this doc, so it won't confuse others in the future.\n. Hello, yes, but that is imho something completely different, because this feature will just pass paramFetcher instance as a parameter into controller action, which is not exactly the thing I was mentioning :)\nAnyway, we already figured this out, because it's just wrong version of documentation on the link above. This feature will be introduced in version 2.0, which is not stable yet.\nNot sure if I have to close this issue right away and maybe create another one for wrong documentation on Symfony web (perhaps it's not connected) or ?\n. Hello, yes, but that is imho something completely different, because this feature will just pass paramFetcher instance as a parameter into controller action, which is not exactly the thing I was mentioning :)\nAnyway, we already figured this out, because it's just wrong version of documentation on the link above. This feature will be introduced in version 2.0, which is not stable yet.\nNot sure if I have to close this issue right away and maybe create another one for wrong documentation on Symfony web (perhaps it's not connected) or ?\n. ",
    "pilotepro": "Thank you for your reply, I have read the UPGRADING guide and I don't see a change that can break my configuration and according to the documentation my configuration is still good. So I don't understand why it doesn't work. So what I need to do to make it work exactly ?\nPS : All my code works with this new version and I no longer have errors if I disable format_listener but I need format_listener to work.\n. Thank you for your reply, I have read the UPGRADING guide and I don't see a change that can break my configuration and according to the documentation my configuration is still good. So I don't understand why it doesn't work. So what I need to do to make it work exactly ?\nPS : All my code works with this new version and I no longer have errors if I disable format_listener but I need format_listener to work.\n. I don't know this happens when I clear the cache with the command \"php app/console cache:clear --env=prod -v\".\nHere is the debug output when I clear the cache :\n```\nClearing the cache for the prod environment with debug false                                                 \n  Clearing outdated warmup directory\n  Warming up cache\n[Symfony\\Component\\DependencyInjection\\Exception\\ParameterNotFoundException]                               \n  You have requested a non-existent parameter \"fos_rest.format_listener.rules\".                                \nException trace:\n () at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\DependencyIn\njection\\ParameterBag\\ParameterBag.php:106                                                                    \n Symfony\\Component\\DependencyInjection\\ParameterBag\\ParameterBag->get() at C:\\Program Files\\Wamp Server\\www\\Una\nnimita\\API\\app\\bootstrap.php.cache:2063                                                                      \n Symfony\\Component\\DependencyInjection\\Container->getParameter() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\\nAPI\\vendor\\friendsofsymfony\\rest-bundle\\DependencyInjection\\Compiler\\FormatListenerRulesPass.php:49          \n FOS\\RestBundle\\DependencyInjection\\Compiler\\FormatListenerRulesPass->process() at C:\\Program Files\\Wamp Server\n\\www\\Unanimita\\API\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\DependencyInjection\\Compiler\\Compiler.php:117\n Symfony\\Component\\DependencyInjection\\Compiler\\Compiler->compile() at C:\\Program Files\\Wamp Server\\www\\Unanimi\nta\\API\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\DependencyInjection\\ContainerBuilder.php:614             \n Symfony\\Component\\DependencyInjection\\ContainerBuilder->compile() at C:\\Program Files\\Wamp Server\\www\\Unanimit\na\\API\\app\\bootstrap.php.cache:2633                                                                           \n Symfony\\Component\\HttpKernel\\Kernel->initializeContainer() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\a\npp\\bootstrap.php.cache:2411                                                                                  \n Symfony\\Component\\HttpKernel\\Kernel->boot() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\vendor\\symfony\\s\nymfony\\src\\Symfony\\Bundle\\FrameworkBundle\\Command\\CacheClearCommand.php:128                                  \n Symfony\\Bundle\\FrameworkBundle\\Command\\CacheClearCommand->warmup() at C:\\Program Files\\Wamp Server\\www\\Unanimi\nta\\API\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\FrameworkBundle\\Command\\CacheClearCommand.php:90            \n Symfony\\Bundle\\FrameworkBundle\\Command\\CacheClearCommand->execute() at C:\\Program Files\\Wamp Server\\www\\Unanim\nita\\API\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Console\\Command\\Command.php:259                         \n Symfony\\Component\\Console\\Command\\Command->run() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\vendor\\symf\nony\\symfony\\src\\Symfony\\Component\\Console\\Application.php:886                                                \n Symfony\\Component\\Console\\Application->doRunCommand() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\vendor\n\\symfony\\symfony\\src\\Symfony\\Component\\Console\\Application.php:195                                           \n Symfony\\Component\\Console\\Application->doRun() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\vendor\\symfon\ny\\symfony\\src\\Symfony\\Bundle\\FrameworkBundle\\Console\\Application.php:96                                      \n Symfony\\Bundle\\FrameworkBundle\\Console\\Application->doRun() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\\nvendor\\symfony\\symfony\\src\\Symfony\\Component\\Console\\Application.php:126                                     \n Symfony\\Component\\Console\\Application->run() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\app\\console:27 \ncache:clear [--no-warmup] [--no-optional-warmers]\n```\nBut I don't get the error if I disable format_listener like this :\nfos_rest:\n    [...]\n    format_listener:\n        enabled:             false\n        rules:\n            - { path: '^/', priorities: [ 'json', 'xml' ], fallback_format: json, prefer_extension: false }\n    [...]\nAnd yes I have done both, with command line and manually with deleting cache folder content and log file.\n. Hello,\nThank you for your help, PR #1180 fixes the first error but not the second one even though config remains the same, when I clear the cache (same command as above) and on the API directly too.\nHere is the debug output :\n```\n[Symfony\\Component\\DependencyInjection\\Exception\\InvalidArgumentException]\n  The service definition \"fos_rest.exception_format_negotiator\" does not exist.\nException trace:\n () at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\DependencyInjection\\ContainerBuilder.php:868\n Symfony\\Component\\DependencyInjection\\ContainerBuilder->getDefinition() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\vendor\\friendsofsymfony\\rest-bundle\\DependencyInjection\\Compiler\\FormatListenerRulesPass.php:77\n FOS\\RestBundle\\DependencyInjection\\Compiler\\FormatListenerRulesPass->addRule() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\vendor\\friendsofsymfony\\rest-bundle\\DependencyInjection\\Compiler\\FormatListenerRulesPass.php:51\n FOS\\RestBundle\\DependencyInjection\\Compiler\\FormatListenerRulesPass->process() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\DependencyInjection\\Compiler\\Compiler.php:117\n Symfony\\Component\\DependencyInjection\\Compiler\\Compiler->compile() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\DependencyInjection\\ContainerBuilder.php:614\n Symfony\\Component\\DependencyInjection\\ContainerBuilder->compile() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\app\\bootstrap.php.cache:2633\n Symfony\\Component\\HttpKernel\\Kernel->initializeContainer() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\app\\bootstrap.php.cache:2411\n Symfony\\Component\\HttpKernel\\Kernel->boot() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\FrameworkBundle\\Console\\Application.php:70\n Symfony\\Bundle\\FrameworkBundle\\Console\\Application->doRun() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Console\\Application.php:126\n Symfony\\Component\\Console\\Application->run() at C:\\Program Files\\Wamp Server\\www\\Unanimita\\API\\app\\console:27\n```\n. With PR #1184 I no longer have errors, but format_listener still doesn't work. When I set Accept header to \"application/xml\" the API output is still in \"application/json\", even though with 1.7.1 version of FOSRestBundle it's working.\n. The format_listener is now working.\nThank you all for your help.\n. Hello,\nSo to respect REST conventions (I can't update an item on a POST method) what do you recommend.\n. That's not a problem for me I just need to upload one file at once, but thank you for your help.\n. ",
    "piotrantosik": "I have not checked version 2.0. I will try to test as soon as possible if it is ok then this pr is pointless.\n. I will try to check this functionality on master branch at the weekend, sorry I did not have free time in last week\n. Sorry but no, i try to explain with simple example code\nController:\nphp\n/**\n * @QueryParam(array=true, name=\"filters\", requirements=@MyComplexConstraint, description=\"List of complex filters\")\n */\npublic function getUsersAction(ParamFetcher $paramFetcher)\nValidator - MyComplexConstraintValidator:\nphp\nclass MyComplexConstraintValidator extends ConstraintValidator\n{\n    public function validate($value, Constraint $constraint)\n    {\n        dump($value);\n    }\n}\nRequest: ?filters[name]=rob&filters[year]=2015\nWithout PR dump result:\nphp\nMyComplexConstraintValidator.php on line 15:\n\"rob\"\nMyComplexConstraintValidator.php on line 15:\n\"2015\"\nIn my opinion using array param without withKey is unpractical because we do not know key/value pair of being validated. Another example, from documentation:\nRequesting ?ids[]=1&ids[]=2 - in this case same array/map option is corectly because it validates only the value - the key remains same\nWith this PR and request ?filters[name]=rob&filters[year]=2015 in validator whe have value and key:\nphp\nMyComplexConstraintValidator.php on line 15:\narray:2 [\n  \"name\" => \"rob\"\n  \"year\" => \"2015\"\n]\nThis allows me to check the filter name or year is valid.\nConclusion - can use multiple filters in one array is not a good solution? :smile: \nOr maybe we should accept it and rename withKeys to for example mapKeys like in #1191?\n. Sorry but no, i try to explain with simple example code\nController:\nphp\n/**\n * @QueryParam(array=true, name=\"filters\", requirements=@MyComplexConstraint, description=\"List of complex filters\")\n */\npublic function getUsersAction(ParamFetcher $paramFetcher)\nValidator - MyComplexConstraintValidator:\nphp\nclass MyComplexConstraintValidator extends ConstraintValidator\n{\n    public function validate($value, Constraint $constraint)\n    {\n        dump($value);\n    }\n}\nRequest: ?filters[name]=rob&filters[year]=2015\nWithout PR dump result:\nphp\nMyComplexConstraintValidator.php on line 15:\n\"rob\"\nMyComplexConstraintValidator.php on line 15:\n\"2015\"\nIn my opinion using array param without withKey is unpractical because we do not know key/value pair of being validated. Another example, from documentation:\nRequesting ?ids[]=1&ids[]=2 - in this case same array/map option is corectly because it validates only the value - the key remains same\nWith this PR and request ?filters[name]=rob&filters[year]=2015 in validator whe have value and key:\nphp\nMyComplexConstraintValidator.php on line 15:\narray:2 [\n  \"name\" => \"rob\"\n  \"year\" => \"2015\"\n]\nThis allows me to check the filter name or year is valid.\nConclusion - can use multiple filters in one array is not a good solution? :smile: \nOr maybe we should accept it and rename withKeys to for example mapKeys like in #1191?\n. Is a bug with tag - 1.7.5 is tagged as 2.0 release https://github.com/FriendsOfSymfony/FOSRestBundle/blob/1.7.5/composer.json\nping @lsmith77 @Ener-Getick \n. Is a bug with tag - 1.7.5 is tagged as 2.0 release https://github.com/FriendsOfSymfony/FOSRestBundle/blob/1.7.5/composer.json\nping @lsmith77 @Ener-Getick \n. ",
    "pstephenson02": "I did first check https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1173 and its associated stackoverflow question.\nI made sure that was not the issue here. The method parameters are defined correctly (or rather: are not incorrect in the way they were shown in the stack question)\n. ",
    "kevin-lot": "Sorry, my bad.\nI forgot to read something in documentation, everything is fine.\nWithout it, symfony default XmlLoader load the configuration instead of the FosRest XmlLoader.\n```\nIt is also necessary to add type: rest to the routing.yml file:\napp/config/routing.yml\nacme_hello:\n    type: rest\n    resource: \"@AcmeHelloBundle/Resources/config/users_routes.yml\"\n```\nIt would nice to put this part of documentation at the top of the page.\nSorry for inconvenience.\n. Sorry, my bad.\nI forgot to read something in documentation, everything is fine.\nWithout it, symfony default XmlLoader load the configuration instead of the FosRest XmlLoader.\n```\nIt is also necessary to add type: rest to the routing.yml file:\napp/config/routing.yml\nacme_hello:\n    type: rest\n    resource: \"@AcmeHelloBundle/Resources/config/users_routes.yml\"\n```\nIt would nice to put this part of documentation at the top of the page.\nSorry for inconvenience.\n. ",
    "gijsstegehuis": "Whats the status on this?. Whats the status on this?. ",
    "aledeg": "I blame it on my eyes. I was reading https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/UPGRADING.md earlier and I didn't find the answer. With a thorough reading, I found that it is detailed but only for the view.\nThank you for your answer.\nShould I leave this open?\n. Maybe adding that it can be fixed also with the priorities.\nI made a test with the mime-type in the view section and I have the expected result.\n. I mean that to fix my original issue, I could do either\n``` yaml\nThis is with the mime-type configuration\nfos_rest:\n    routing_loader:\n        include_format: false\n    view:\n        formats:\n            json: ~\n            xml: ~\n        view_response_listener: force\n        mime_types:\n            xml: [application/xml]\n    format_listener:\n        rules:\n          - { path: '^/api', priorities: ['json', 'xml'], fallback_format: json, prefer_extension: false }\n          - { path: '^/', stop: true }\n```\nor \n``` yaml\nThis is with the priorities configuration\nfos_rest:\n    routing_loader:\n        include_format: false\n    view:\n        formats:\n            json: ~\n            xml: ~\n        view_response_listener: force\n    format_listener:\n        rules:\n          - { path: '^/api', priorities: ['json', 'xml'], fallback_format: json, prefer_extension: false }\n          - { path: '^/', stop: true }\n```\n. ",
    "GromNaN": ":+1: As PHP 5.4 is required.\n. ",
    "liverbool": "@lsmith77 There no fix in ~1.8.\n. @stof when we need to create template from string.\nphp\n$template = $twig->createTemplate(\"Example {{ string }}\");\n$view = View::create(['string' => 'test']);\n$view->setTemplate($template);\n// ...\n. @stof when we need to create template from string.\nphp\n$template = $twig->createTemplate(\"Example {{ string }}\");\n$view = View::create(['string' => 'test']);\n$view->setTemplate($template);\n// ...\n. ",
    "cacahouwete": "Ok, thx for your help\n. ",
    "palra": "Solved by using $form->submit() instead, nothing related to FOSRestBundle.\n. ",
    "acassan": "Have you find some solution ?\n. At least a form class deserializer\n```\nuse JMS\\Serializer\\GenericDeserializationVisitor;\n/\n * Class FormDeserializationVisitor\n * @package HOB\\CommonBundle\\Serializer\n */\nClass FormDeserializationVisitor extends GenericDeserializationVisitor\n{\n    /\n     * @param $str\n     * @return array\n     */\n    protected function decode($str)\n    {\n        parse_str($str, $output);\n    return $output;\n}\n\n}\n```\nAnd service configuration:\njms_serializer.array_deserialization_visitor:\n    class: HOB\\CommonBundle\\Serializer\\FormDeserializationVisitor\n    arguments: [ '@jms_serializer.naming_strategy', '@jms_serializer.object_constructor' ]\n    tags:\n        - { name: jms_serializer.deserialization_visitor, format: form }\nWorking on my side \n. At least a form class deserializer\n```\nuse JMS\\Serializer\\GenericDeserializationVisitor;\n/\n * Class FormDeserializationVisitor\n * @package HOB\\CommonBundle\\Serializer\n */\nClass FormDeserializationVisitor extends GenericDeserializationVisitor\n{\n    /\n     * @param $str\n     * @return array\n     */\n    protected function decode($str)\n    {\n        parse_str($str, $output);\n    return $output;\n}\n\n}\n```\nAnd service configuration:\njms_serializer.array_deserialization_visitor:\n    class: HOB\\CommonBundle\\Serializer\\FormDeserializationVisitor\n    arguments: [ '@jms_serializer.naming_strategy', '@jms_serializer.object_constructor' ]\n    tags:\n        - { name: jms_serializer.deserialization_visitor, format: form }\nWorking on my side \n. ",
    "onekit": "I had same problem. I fix it with creation ParamConverter for image data type:\nhttps://github.com/onekit/rest-tutorial/blob/master/src/AppBundle/Request/ContactPictureParamConverter.php\nConfig of fos_rest:\nfos_rest:\n    routing_loader:\n        default_format: json\n    param_fetcher_listener:\n        enabled:  true\n        force:    true\n    body_listener:\n        decoders:\n            json: fos_rest.decoder.jsontoform\n    body_converter:\n        enabled: true\n        validate: true\n    view:\n        formats:\n            json: true\n        templating_formats:\n            html: true\n        force_redirects:\n            html: true\n        failed_validation: HTTP_BAD_REQUEST\n        default_engine: twig\n        view_response_listener: \"force\"\n    exception:\n        enabled: true\n    service:\n        view_handler: fos_rest.view_handler.default\nhttps://github.com/onekit/rest-tutorial/blob/master/app/config/config.yml#L137-L165\nAdd ParamConveter as service:\napi.converter.contact_picture:\n    class: AppBundle\\Request\\ContactPictureParamConverter\n    arguments: ['@fos_rest.validator']\n    tags:\n      - { name: request.param_converter, converter: api.converter.contact_picture }\nhttps://github.com/onekit/rest-tutorial/blob/master/app/config/services.yml#L42-L46\nIn Controller on end point method in annotation say use for your field chosen annotation:\n  /**\n     * @ApiDoc(\n     *      parameters={\n     *          {\"name\"=\"image\", \"dataType\"=\"file\", \"required\"=true, \"description\"=\"contact picture\"}\n     *      },\n     *      views = {\"default\", \"admin\"}\n     * )\n     *\n     * @Sensio\\Security(\"has_role('ROLE_ADMIN')\")\n     * @Rest\\Post(\"/{id}/picture\", name=\"api_post_contact_picture\", requirements={\"id\" = \"\\d+\"})\n     * @Sensio\\ParamConverter(\"picture\", converter=\"api.converter.contact_picture\")\n     * @Rest\\View(serializerGroups={\"default\", \"contact_picture\"})\n     *\n     * @param Contact $contact\n     * @param ContactPicture $picture\n     * @param ConstraintViolationListInterface $validationErrors\n     * @return Contact|Response\n     */\n    public function postPictureAction(Contact $contact, ContactPicture $picture, ConstraintViolationListInterface $validationErrors)\n    {\n        if ($validationErrors->count()) {\n            return $this->handleError('Validation errors', $validationErrors);\n        }\n        $contact = $this->contactManager->setPicture($contact, $picture);\n        return $contact;\n    }\nhttps://github.com/onekit/rest-tutorial/blob/master/src/AppBundle/Controller/Api/PictureContactController.php#L47-L72. I had same problem. I fix it with creation ParamConverter for image data type:\nhttps://github.com/onekit/rest-tutorial/blob/master/src/AppBundle/Request/ContactPictureParamConverter.php\nConfig of fos_rest:\nfos_rest:\n    routing_loader:\n        default_format: json\n    param_fetcher_listener:\n        enabled:  true\n        force:    true\n    body_listener:\n        decoders:\n            json: fos_rest.decoder.jsontoform\n    body_converter:\n        enabled: true\n        validate: true\n    view:\n        formats:\n            json: true\n        templating_formats:\n            html: true\n        force_redirects:\n            html: true\n        failed_validation: HTTP_BAD_REQUEST\n        default_engine: twig\n        view_response_listener: \"force\"\n    exception:\n        enabled: true\n    service:\n        view_handler: fos_rest.view_handler.default\nhttps://github.com/onekit/rest-tutorial/blob/master/app/config/config.yml#L137-L165\nAdd ParamConveter as service:\napi.converter.contact_picture:\n    class: AppBundle\\Request\\ContactPictureParamConverter\n    arguments: ['@fos_rest.validator']\n    tags:\n      - { name: request.param_converter, converter: api.converter.contact_picture }\nhttps://github.com/onekit/rest-tutorial/blob/master/app/config/services.yml#L42-L46\nIn Controller on end point method in annotation say use for your field chosen annotation:\n  /**\n     * @ApiDoc(\n     *      parameters={\n     *          {\"name\"=\"image\", \"dataType\"=\"file\", \"required\"=true, \"description\"=\"contact picture\"}\n     *      },\n     *      views = {\"default\", \"admin\"}\n     * )\n     *\n     * @Sensio\\Security(\"has_role('ROLE_ADMIN')\")\n     * @Rest\\Post(\"/{id}/picture\", name=\"api_post_contact_picture\", requirements={\"id\" = \"\\d+\"})\n     * @Sensio\\ParamConverter(\"picture\", converter=\"api.converter.contact_picture\")\n     * @Rest\\View(serializerGroups={\"default\", \"contact_picture\"})\n     *\n     * @param Contact $contact\n     * @param ContactPicture $picture\n     * @param ConstraintViolationListInterface $validationErrors\n     * @return Contact|Response\n     */\n    public function postPictureAction(Contact $contact, ContactPicture $picture, ConstraintViolationListInterface $validationErrors)\n    {\n        if ($validationErrors->count()) {\n            return $this->handleError('Validation errors', $validationErrors);\n        }\n        $contact = $this->contactManager->setPicture($contact, $picture);\n        return $contact;\n    }\nhttps://github.com/onekit/rest-tutorial/blob/master/src/AppBundle/Controller/Api/PictureContactController.php#L47-L72. ",
    "J-Ben87": "Oh, great news! :)\nHowever, if you don't mind, I'll still make a PR (I'm almost done) as I need this functionnality now and in a stable version.\nI hope you will find it acceptable and merge it :)\n. You can find the PR here: https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1223\nThank you for your time anyway :)\n. Oops, wrong branch...\n. @Ener-Getick I completely understand your point, but the solution I implemented is made not to break anything, simply allow users from 1.7 to use the context through a little workaround.\nThe decision is up to you anyway ;)\n. ",
    "xocasdashdash": "I could look into it yes. Thanks for the quick answer!\n. ",
    "Nimothenicefish": "@fsevestre +1\n. ",
    "fsevestre": "I don't see any use case for using a BooleanType in a non-API app actually (a checkbox type is enough).\nFor me it's really an API feature and FOSRestBundle seems to be the best place to provide it.\n. Sorry, I didn't see your answer before. I create a PR this weekend.\n. Sorry, I didn't see your answer before. I create a PR this weekend.\n. @Ener-Getick In which branch(es) should I create the PR ?\n. @Ener-Getick In which branch(es) should I create the PR ?\n. Sorry my bad, you are right.\n. Sorry my bad, you are right.\n. @Ener-Getick I did the changes you requested.\n@xabbuh Nice idea, I will try that\n. Close in favor of #1312\n. Done\n. ",
    "claudiobizzotto": "I don't know the status of this issue and why this PR was reverted, but my routes come out like this (note the extra /{request} under POST):\n```\n\nName            Method   Scheme   Host   Path                           \n\ncget_thing     GET      ANY      ANY    /thing.{_format}          \n  get_thing      GET      ANY      ANY    /thing/{id}.{_format}     \n  post_thing     POST     ANY      ANY    /thing/{request}.{_format}\n  put_thing      PUT      ANY      ANY    /thing/{id}.{_format}       \n\n```\nCollection routes look good when I add \\Psr\\Http\\Message\\MessageInterface::class to ignoreClasses[]. Would be nice to work/play with  PSR-7 Bridge and FOSRestBundle together.\n. Awesome! Thanks :thumbsup:\n. ",
    "lyrixx": "I don't know fos rest at all, but I don't understand why fos rest try to do thing with constructor argument. It should deal only controller argument?\n. Oups, indeed. Sorry.\n. How can I work-arround it?\n. Hello. Do you have an ETA for the release of this Patch?\nThanks.\n. Hello. Do you have an ETA for the release of this Patch?\nThanks.\n. > Actually it is talking about the config here.\nI did not understand your comment. What do you mean?. > Actually it is talking about the config here.\nI did not understand your comment. What do you mean?. And BTW, the order is wrong (at least in for 2.0). And BTW, the order is wrong (at least in for 2.0). I detected this issue, because in my project I have the SF serializer and the JMS one. But, for legacy reason, fos rest should use the JMS one. And right now, it's not possible with ease. The only solution I see is to create a compiler pass, that should pass after your to update the alias.\n(I'm using 2.0). I detected this issue, because in my project I have the SF serializer and the JMS one. But, for legacy reason, fos rest should use the JMS one. And right now, it's not possible with ease. The only solution I see is to create a compiler pass, that should pass after your to update the alias.\n(I'm using 2.0). I don't understand the code here. There is a configuration available, but I can not find where it is used.\nThen, in the pass the code is looking for a service with id fos_rest.serializer.\n. I don't understand the code here. There is a configuration available, but I can not find where it is used.\nThen, in the pass the code is looking for a service with id fos_rest.serializer.\n. Thanks. It's nice.\n. No I don't. But you could have a look to Symfony ones. (CSRF Extension for instance).\nI can not help you more, I'm currently in Argentina ;)\n. This is a huge BC break unfortunately. But acutally, I prefer this versio of the code... ;). ",
    "wildpascal": "Thanks for your reply, now its working!\n. Thanks for your reply, now its working!\n. ",
    "Engerim": "a potential fix is to reset the params if a new controller is set in the paramfetcher\n. ",
    "ruudk": "@Ener-Getick Sorry for not updating the PR in time :) Thanks for your fix tho :tada: \n. ",
    "rokkie": "Should I create a new PR for this?\n. Should I create a new PR for this?\n. I rebased the branch, however, PR still seems to want to merge into master.\n. I rebased the branch, however, PR still seems to want to merge into master.\n. I ran into the same error today after upgrading from 2.3.0 > 2.3.1. I was a bit annoyed because I'm not using annotations (for routing) or templates, so for me it just broke.. I've decided to stay on 2.3.0 for now.\nIs there a way I can help fixing this?. @xabbuh This is all the config I could think of being relevant. This works with 2.3.0 but after upgrading I got the error as a result of ./bin/console cache:clear during install.\nconfig/routes/api.yaml:\n```yml\ncontent_pages:\n  type: rest\n  prefix: /v1\n  resource: App\\Controller\\Api\\V1\\PagesController\n...\n```\nconfig/packages/fos_rest.yaml:\nyml\nfos_rest:\n  routing_loader:\n    default_format: json\n    include_format: false\n  view:\n    view_response_listener: true\n    formats:\n      rss: false\n      xml: false\n      json: true\n  param_fetcher_listener:  true\nconfig/bundles.php:\nphp\nreturn [\n    Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle::class => ['all' => true],\n    Symfony\\Bundle\\WebServerBundle\\WebServerBundle::class => ['dev' => true],\n    JMS\\SerializerBundle\\JMSSerializerBundle::class => ['all' => true],\n    FOS\\RestBundle\\FOSRestBundle::class => ['all' => true],\n    Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle::class => ['all' => true],\n    Symfony\\Bundle\\MonologBundle\\MonologBundle::class => ['all' => true],\n    Symfony\\Bundle\\MakerBundle\\MakerBundle::class => ['dev' => true],\n    Doctrine\\Bundle\\DoctrineCacheBundle\\DoctrineCacheBundle::class => ['all' => true],\n    Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle::class => ['all' => true],\n    Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle::class => ['all' => true],\n    Knp\\Bundle\\MarkdownBundle\\KnpMarkdownBundle::class => ['all' => true],\n    Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle::class => ['all' => true],\n];\nsrc/Controller/Api/V1/PagesController.php:\n```php\nnamespace App\\Controller\\Api\\V1;\nuse FOS\\RestBundle\\Controller\\Annotations\\NamePrefix;\nuse FOS\\RestBundle\\Controller\\FOSRestController;\nuse FOS\\RestBundle\\Routing\\ClassResourceInterface;\nuse FOS\\RestBundle\\View\\View;\n/*\n * @NamePrefix(\"api_\")\n /\nclass PagesController extends FOSRestController\n  implements ClassResourceInterface\n{\n  // ...\n}\n``\n. Changed the dependency todoctrine/common`.. ",
    "basma-yangui": "Actually, I thought that it was possible to change only the error pages format by following this guide http://symfony.com/doc/current/bundles/FOSRestBundle/4-exception-controller-support.html\nIs it really impossible? Do I have to give up? :(\n. Ok thank you for your help :)\n. @xabbuh  Can you explain more your solution please?\n. ",
    "kherge": "Happy to help and happy New Years to you too!\n. I created a pull request that implements the proposed solution.. Abandoning in favor of using a custom route loader.. I've also considered making the actual list prefix configurable through the fos_rest.routing.cget_list setting. Maybe rename the setting to fos_rest.routing.cget and default it to cget?\nI'm open to suggestions.. Hi @GuilhemN, please let me know if there is anything I can do to help move this along!. I believe that the original behavior should be deprecated.\nThe original behavior would break route generation when used without ClassResourceInterface.. Abandoning in favor of using a custom route loader.. ",
    "kptLucek": "Can be closed, someone touched my server's config, backup solved the problem.\nThanks @Ener-Getick for support :)\n. ",
    "xorgxx": "thank. it look correct ver server local PHP Version 5.5.11 and on gandi PHP Version 5.4.45-0+deb7u2 \n. ",
    "phoenixgao": "+1,\nupdate restbundle broke every action that are not restful and using @Template annotation\n. Well, I just ran composer update too, and I am also looking at this error. Just looking at.\n. Hello in the documentation there's only example for people who uses symfony serializer, but no example for jms serializer,\nSo far what I did was created a customized ExceptionHandler which implements JMS\\Serializer\\Handler\\SubscribingHandlerInterface and tagged as \"jms_serializer.subscribing_handler\", but then the first required argument is ExceptionValueMap, but I cannot inject @fos_rest.exception.messages_map to it because this services in fos rest bundle is not public.\nSo how could I customize my exception handler with jms serializer, without customizing all services that related, e.g. exception code map and message map?\n@GuilhemN \nThanks!. @GuilhemN It's quite easy to write a custom exception normalizer for symfony serializer like in the documentation, but it's so difficult to have one for jms serializer, since from 2.0 the exception wrapper handler was deprecated, and jms exception handler service depends on other private service.\nIs it possible to have some examples in the documentation that how to customize jms exception handler? then I would be glad to close this PR :p   \n. @ebeem Hi, how/where did you define your service with the same name as \"fos_rest.serializer.exception_normalizer.jms\"? because this service depends on service \"@fos_rest.exception.messages_map\" which is not public in this bundle\nso far I can not find any way to override the jms exception handler without writing all the dependencies @stof  is it possible to add some example in the documentation about how to customize exception handler/normalizer for people who use jms serilaizer?\nRelated to https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1379. Perfect! Thanks! @ebeem @stof . Perfect! Thanks! @ebeem @stof . ",
    "glasset": "i don't think because there is my version:\nfos-rest: 1.7.7\nsymfony: 2.7 \nthe throw trigger in the render but no message of exception just 'not found' (status text of 404)\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/1.7/View/ViewHandler.php#L390\nmaybe i miss something in fos_rest conf ?\n. ``` yml\nimports:\n    - { resource: ../parameters/parameters.yml }\n    - { resource: ../security.yml }\n..\nmonolog:\n    handlers:\n        custom_app:\n            type: stream\n            path:  %kernel.root_dir%/logs/custom_app.log\n            level: info\n            channels: [custom_app]\nframework:\n    esi:             { enabled: true }\n    #translator:      { fallback: \"%locale%\" }\n    secret:          \"%secret%\"\n    router:\n        resource: \"%kernel.root_dir%/config/routing.yml\"\n        strict_requirements: ~\n    form:            ~\n    csrf_protection: ~\n    validation:      { enable_annotations: true }\n    templating:\n        engines: ['twig']\n        assets_version: v1\n        assets_version_format: %%s?v=%%s\n        assets_base_urls:\n            ssl:\n                - %cdn_url%\ndefault_locale:  \"%locale%\"\ntrusted_hosts:   ~\ntrusted_proxies: [172.16.0.0/12]\nsession:\n    # handler_id set to null will use default session handler from php.ini\n    handler_id: session.handler.pdo\n    cookie_domain: .com\n    cookie_lifetime: 31536000\n    gc_maxlifetime: 31536000\nfragments:       { path: /_proxy }\nhttp_method_override: true\ndefault_locale: %locale%\ntranslator:      { fallback: \"%locale%\" }\n\nparameters:\n    pdo.db_options:\n        db_table:    session\n        db_id_col:   session_id\n        db_data_col: session_value\n        db_time_col: session_time\nTwig Configuration\ntwig:\n    exception_controller: 'FOS\\RestBundle\\Controller\\ExceptionController::showAction'\n    debug:            \"%kernel.debug%\"\n    strict_variables: \"%kernel.debug%\"\n    globals:\n        typeform_uid:     \"%typeform_uid%\"\n        websiteName:  \"%website_name%\"\n        urlBaseCron: \"%url_mail_cron%\"\n        stripe_key_public: \"%stripe_key_public%\"\n        asseticVersion: \"?v=9\"\n        cdnUrl: \"%cdn_url%\"\n    form:\n        resources:\n             - ':Form:form_div_layout.html.twig'\n             - 'SonataCoreBundle:Form:datepicker.html.twig'\nAssetic Configuration\nassetic:\n    debug:          \"%kernel.debug%\"\n    use_controller: true\n    bundles:        [...]\n    filters:\n        cssrewrite: ~\n        jsqueeze: ~\n        lessphp:\n            file: %kernel.root_dir%/../vendor/oyejorge/less.php/lessc.inc.php\n            apply_to: \".less$\"\n            formatter: \"compressed\"\n            preserve_comments: \"false\"\nservices:\n    twig.extension.debug:\n        class:        Twig_Extension_Debug\n        tags:\n             - { name: 'twig.extension' }\n    pdo:\n        class: PDO\n        arguments:\n            - \"mysql:host=%database_host%;port=%database_port%;dbname=%database_name%\"\n            - %database_user%\n            - %database_password%\n        calls:\n            - [setAttribute, [3, 2]] # \\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION\n    session.handler.pdo:\n        class:     Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler\n        arguments: [\"@pdo\", \"%pdo.db_options%\"]\nDoctrine Configuration\ndoctrine:\n    dbal:\n        driver:   \"%database_driver%\"\n        host:     \"%database_host%\"\n        port:     \"%database_port%\"\n        dbname:   \"%database_name%\"\n        user:     \"%database_user%\"\n        password: \"%database_password%\"\n        charset:  UTF8\n        # if using pdo_sqlite as your database driver, add the path in parameters.yml\n        # e.g. database_path: \"%kernel.root_dir%/data/data.db3\"\n        # path:     \"%database_path%\"\n        schema_filter: ~^(?!(locations|session|threads|tickets))~\norm:\n    auto_generate_proxy_classes: \"%kernel.debug%\"\n    auto_mapping: true\n    # metadata_cache_driver: apc\n    # query_cache_driver: apc\n    # result_cache_driver: apc\n\nSwiftmailer Configuration\nswiftmailer:\n    transport: \"smtp\"\n    port: 465\n    encryption: \"ssl\"\n    auth_mode: login\n    host:      \"com\"\n    username: \"\"\n    password:  \"\"\n    spool:     { type: memory }\nsonata_block:\n    default_contexts: [cms]\n    blocks:\n        sonata.admin.block.admin_list:\n            contexts:   [admin]\nsonata_admin:\n    title:  \n    security:\n        handler: sonata.admin.security.handler.role\n        information:\n            EDIT: EDIT\n            LIST: LIST\n            CREATE: CREATE\n            VIEW: VIEW\n            DELETE: DELETE\n            EXPORT: EXPORT\n            OPERATOR: OPERATOR\n            MASTER: MASTER\nsonata_doctrine_orm_admin:\n    # default value is null, so doctrine uses the value defined in the configuration\n    templates:\n        form:\n            - SonataDoctrineORMAdminBundle:Form:form_admin_fields.html.twig\nstfalcon_tinymce:\n    include_jquery: false\n    tinymce_jquery: true\n    selector: \".tinymce\"\n    language: %locale%\n    theme:\n        simple:\n            theme: \"modern\"\nknp_snappy:\n   pdf:\n      binary: \"%kernel.root_dir%/../vendor/h4cc/wkhtmltopdf-amd64/bin/wkhtmltopdf-amd64\"\nJMS Serializer\njms_serializer:\n    metadata:\n        auto_detection: true\nNELMIO API Doc\nnelmio_api_doc:\n    name: API\nFOS Rest\nfos_rest:\n    format_listener:\n        rules:\n            - { path: '^/api/doc', priorities: ['html'], fallback_format: html, prefer_extension: false }\n            - { path: '^/api', priorities: ['json'], fallback_format: json, prefer_extension: false }\n            - { path: '^/', stop: true }\n    exception:\n        codes:\n            'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': 404\n            'Doctrine\\ORM\\OptimisticLockException': HTTP_CONFLICT\n        messages:\n            'Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException': true\n    view:\n        exception_wrapper_handler:  null\n        view_response_listener: force\n        formats:\n            json: true\n            xml:  false\n    routing_loader:\n        default_format: json\n    serializer:\n        serialize_null: true\n    param_fetcher_listener: true\n    body_listener: true\n    access_denied_listener:\n        json: true\nlexik_jwt_authentication:\n    private_key_path: %jwt_private_key_path%\n    public_key_path:  %jwt_public_key_path%\n    pass_phrase:      %jwt_key_pass_phrase%\n    token_ttl:        %jwt_token_ttl%\nfos_js_routing:\n    routes_to_expose:\n        - \"^api_.*\"\n```\nwebsite.com/fake-name: \nrender\nAn Exception was thrown while handling: Not Found\nlog/prod:\nrequest.ERROR: Uncaught PHP Exception Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException: \"No route found for \"GET /fake-name\"\" at /home/website/app/cache/prod/classes.php line 2500 {\"exception\":\"[object] (Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\NotFoundHttpException(code: 0): No route found for \\\"GET /fake-name\" at /home/website/app/cache/prod/classes.php:2500, Symfony\\\\Component\\\\Routing\\\\Exception\\\\ResourceNotFoundException(code: 0):  at /home/website/app/cache/prod/appProdUrlMatcher.php:2848)\"}\nlog/dev\n[2016-01-09 10:52:04] event.DEBUG: Notified event \"kernel.exception\" to listener \"FOS\\RestBundle\\EventListener\\AccessDeniedListener::onKernelException\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Notified event \"kernel.exception\" to listener \"Symfony\\Component\\Security\\Http\\Firewall\\ExceptionListener::onKernelException\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Listener \"Symfony\\Component\\Security\\Http\\Firewall\\ExceptionListener::onKernelException\" stopped propagation of the event \"kernel.exception\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Listener \"Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener::onKernelException\" was not called for event \"kernel.exception\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Listener \"Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener::onKernelException\" was not called for event \"kernel.exception\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Notified event \"kernel.response\" to listener \"Sonata\\BlockBundle\\Cache\\HttpCacheHandler::onKernelResponse\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener::onKernelResponse\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SurrogateListener::onKernelResponse\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener::onKernelResponse\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Notified event \"kernel.response\" to listener \"Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener::onKernelResponse\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener::onKernelResponse\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Bundle\\WebProfilerBundle\\EventListener\\WebDebugToolbarListener::onKernelResponse\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener::onKernelResponse\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Notified event \"kernel.response\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener::onKernelResponse\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener::onKernelFinishRequest\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\TranslatorListener::onKernelFinishRequest\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\RouterListener::onKernelFinishRequest\". [] []\n[2016-01-09 10:52:04] event.DEBUG: Notified event \"kernel.finish_request\" to listener \"Symfony\\Component\\Security\\Http\\Firewall::onKernelFinishRequest\". [] []\n[2016-01-09 10:52:05] event.DEBUG: Notified event \"kernel.terminate\" to listener \"Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener::onTerminate\". [] []\n[2016-01-09 10:52:05] event.DEBUG: Notified event \"kernel.terminate\" to listener \"Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener::onKernelTerminate\". [] []\n``\n. object(Twig_Error_Runtime)#440 (11) { [\"lineno\":protected]=> int(55) [\"filename\":protected]=> string(67) \"/home/website/app/Resources/views/meta.html.twig\" [\"rawMessage\":protected]=> string(146) \"An exception has been thrown during the rendering of a template (\"Unable to generate a URL for the named route \"\" as such route does not exist.\").\" [\"previous\":protected]=> NULL [\"message\":protected]=> string(230) \"An exception has been thrown during the rendering of a template (\"Unable to generate a URL for the named route \"\" as such route does not exist.\") in \"/home/website/app/Resources/views/meta.html.twig\" at line 55.\" ...\nedit: it found my error , and thx for your time  :) \n{# Get the current route : #}\n    {% set canonical = path(app.request.attributes.get('_route'), app.request.attributes.get('_route_params')) %}\n    {# Set the canonical tag : #}\n    <link rel=\"canonical\" href=\"https://wbsite.com{{ canonical }}\" />\n. ",
    "hmlb": ":+1: \n. Is 1.8 going to be merged in master soon ? This fix would be useful for 2.0@dev\n. Okay thanks @Ener-Getick  !\n. ",
    "yceruto": "@Ener-Getick I'm not sure what the correct URL link. :(\n. > Note that the format needs to either be supported by the Request class\n\nnatively or it needs to be added as documented here or using the\nmime type listener explained in the Symfony documentation.\n\n.. _mime type listener: http://symfony.com/doc/current/cookbook/request/mime_type.html ??\n. I'm not sure be consistent with the documentation now.\n. Updated!\n. ",
    "kcivey": "I think the change in ViewResponseListener may now be required in 1.7 for people who upgrade SensioFrameworkExtraBundle from 3.0.12, because 3.0.13 is now guessing the template in onKernelView rather than onKernelController:\nhttps://github.com/sensiolabs/SensioFrameworkExtraBundle/commit/82b8ad65409c99f693088ecbc09c857f01e3b3fa\n. ",
    "maennchen": "I think the easiest way would be to make the params configurable via an Annotation.\n. I think we should use the current behaviour if no annotation is specified.\n. I don't really have the time to implement this feature.\nAlso the advantage of using the Rest routing is minimal if we have to configure every url more or less manually...\n. I don't really have the time to implement this feature.\nAlso the advantage of using the Rest routing is minimal if we have to configure every url more or less manually...\n. @iltar Yes, but I don't see a point in repeating myself in every controller for a very defined task (like applying a JSON Patch onto an object.)\nThis way an API Controller can be built very fast and is tested thoroughly.\nAlso EventListeners shouldn't just flush random objects. That is not a problem of a ParamConverter.\n. @Ener-Getick Yes sure, I'll make separate PR's for the listeners that make sense. (Soon, I don't have time right now.)\nI don't really like the approach of this Arg Annotation. If you just call one simple function, it's easy. If you have a more complex converter (like setting the serializer context group) for the body converter, this will get very messy.\n. @iltar I have no doubt about that they are not meant to execute code, but lacking a better instrument we implemented it like that.\nEven though it may be not the perfect solution, it gets the job done without repeating the same code in every controller.\nIf you have a better Idea on how to solve a generic approach to execute JSON Patches, Link / Unlink requests etc. on incoming parameters, I'd love to change the code to a better suited implementation.\n. ",
    "egeloen": "@Ener-Getick Thanks! If I want to add a new feature, should I target the 1.8 or the master branch?\n. Oops, not notice the 1.8 branch is compatible with PHP 5.3. Will need to update the array syntax.\n. Btw, if this PR is accepted the code will need to be adjusted for the master branch (remove BC paths).\n. @blazarecki Good point! Will update it after my day work :)\n. I have updated the PR to rely on filter_var as suggested by @blazarecki \n. I have updated the PR to rely on filter_var as suggested by @blazarecki \n. Hum, according to travis, I'm not sure we can safely rely on filter_var. At least on PHP 5.3, the behavior seems not the same.\nI can maybe keep the previous implementation + remove the true_values and false_values on this branch and when merging on 2.x, we switch the code to rely on filter_var.\nWDYT?\n. Hum, according to travis, I'm not sure we can safely rely on filter_var. At least on PHP 5.3, the behavior seems not the same.\nI can maybe keep the previous implementation + remove the true_values and false_values on this branch and when merging on 2.x, we switch the code to rely on filter_var.\nWDYT?\n. Any feedback on what you would prefer?\n. Any feedback on what you would prefer?\n. After refactoring it using in_array, I'm still frustrating about the null and false values equality. Basically, the form component does not make difference between both as you can see here. False value are converted to null and null is kept as it is making no possibility to distinguish them latter whereas in an API context both are totally different values. Not sure how to workaround it right now...\n. After refactoring it using in_array, I'm still frustrating about the null and false values equality. Basically, the form component does not make difference between both as you can see here. False value are converted to null and null is kept as it is making no possibility to distinguish them latter whereas in an API context both are totally different values. Not sure how to workaround it right now...\n. IMO, since we have not found a way to distinguish null & false values, this PR still need some work... I will regive it a try tomorrow.\n. @lsmith77 on master? The target branch is 1.8.\n. Rebased on 1.8\n. For now, in my project, I \"pre-transform\" the data to something I can deal with before calling the submit method: https://github.com/php-lug/lug/blob/master/src/Bundle/ResourceBundle/Controller/Controller.php#L246-L250\nAn other solution is to override the form request handler but then it will only work with it not directly with the submit method...\n@webmozart Any suggestions?\n. Done\n. I'm not really fan of this block but it seems filter_var is buggy with object.\nQuoting the doc:\n\nReturns TRUE for \"1\", \"true\", \"on\" and \"yes\". Returns FALSE otherwise.\nIf FILTER_NULL_ON_FAILURE is set, FALSE is returned only for \"0\", \"false\", \"off\", \"no\", and \"\", and NULL is returned for all non-boolean values.\n\nUnfortunatelly, passing an \\stdClass (as it is done in the tests) returns false instead of null. So I workaround it this way for now...\n. Thanks for the feedback! So, we all agree to get rid of filter_var. I will update it tonight.\n. @afurculita I have already give a try and the result is not consistent accross different PHP versions...\n. ",
    "blazarecki": "@egeloen Why don't you use filter_var($value, FILTER_VALIDATE_BOOLEAN) ? \nSee the doc here : http://php.net/manual/en/filter.filters.validate.php\n. I think this feature is already in the bundle.\nThis decoder allow to use boolean https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Decoder/JsonToFormDecoder.php\nIn the config you can add:\nyaml\nfos_rest:\n    body_listener:\n        decoders:\n            json: fos_rest.decoder.jsontoform\n. I think this feature is already in the bundle.\nThis decoder allow to use boolean https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/Decoder/JsonToFormDecoder.php\nIn the config you can add:\nyaml\nfos_rest:\n    body_listener:\n        decoders:\n            json: fos_rest.decoder.jsontoform\n. ",
    "shakaran": "Hi @Ener-Getick \nI think that I don't have any piece of code directly using the fos_rest.decoder_provider or FOS\\RestBundle\\Decoder\\ContainerDecoderProvider, but I don't know if some bundle or dependancy is using it.\nAs far I see grepping all the folder I see this:\n```\ngrep -rin \"fos_rest.decoder_provider\" /home/myapp/public/current\n/home/myapp/public/current/app/cache/prod/appProdProjectContainer.php:113:            'fos_rest.decoder_provider' => 'getFosRest_DecoderProviderService',\n```\n/home/myapp/public/current/app/cache/prod/appProdProjectContainer.php:707:        $this->services['fos_rest.body_listener'] = $instance = new \\FOS\\RestBundle\\EventListener\\BodyListener($this->get('fos_rest.decoder_provider'), false);\n/home/myapp/public/current/app/cache/prod/appProdProjectContainer.php:725:        return $this->services['fos_rest.decoder_provider'] = new \\FOS\\RestBundle\\Decoder\\ContainerDecoderProvider($this, array('json' => 'fos_rest.decoder.json', 'xml' => 'fos_rest.decoder.xml'));\n```\ngrep -rin \"ContainerDecoderProvider\" /home/myapp/public/current\n/home/myapp/public/current/app/cache/prod/appProdProjectContainer.php:725:        return $this->services['fos_rest.decoder_provider'] = new \\FOS\\RestBundle\\Decoder\\ContainerDecoderProvider($this, array('json' => 'fos_rest.decoder.json', 'xml' => 'fos_rest.decoder.xml'));\n```\nAfter I force the delete of cache with symfony command and with:\n```\nrm -rf /home/myapp/public/current/app/cache/prod/*\n```\nIt is still generating the same lines of code.\n. And reverting to 6ebbd6d the bug seems dissappear.\n. And reverting to 6ebbd6d the bug seems dissappear.\n. Sorry for delay, I treat to reproduce today the bug, but it seems that dependencies or updates didn't broke again the code or some codebase was changed, so not sure if it is really fixed or only hidden. Probably you can close it and I will reopen if I see it again.\n. @mpbzh probably could be my exact workaround (but I didn't know it), since I was using php 5.4 too and now I am using 5.6.11 by the Ubuntu updates.\n. @mpbzh probably could be my exact workaround (but I didn't know it), since I was using php 5.4 too and now I am using 5.6.11 by the Ubuntu updates.\n. ",
    "antkowiakit": "I have this same issue. Temporary fix: \"friendsofsymfony/rest-bundle\": \"dev-master#46f70fa927b4e7aafbab8cf2d381f6f406f699a9\" in your composer.json\n. ",
    "fiburonsk": "oh ok.  I was using master for the version 2 stuff in my project.\nthanks!\n. ",
    "wesleyvicthor": "@Ener-Getick yup, this looks good, when I get back to that I will give a try. btw your point with the template engine makes sense, apparently.\n. ",
    "sh41": "I just upgraded sensio/framework-extra-bundle from v3.0.11 to v3.0.13 and\nFOS/RestBundle from 1.7.4 to 1.7.7 and had the same exception for Controller Action with an Template annotation. \nI found that making a configuration change in config.yml got things working again for me, but I must warn that I haven't confirmed whether the change has adversely affected other things. \nI changed: \nYAML\nfos_rest:\n    view:\n        view_response_listener: force\nto:\nYAML\nfos_rest:\n    view:\n        view_response_listener: true\nand things started working again. Hopefully that will help you. You may also want to check out #1301 which seems to mention a similar sort of problem. \nI tried this because of the documentation on this page: http://symfony.com/doc/1.7/bundles/FOSRestBundle/view_response_listener.html\n. ",
    "yalg": "fos_rest:\n    view:\n        view_response_listener: force\nThis config allows to return data from controller action without adding @View annotation (it will force using view), instead of \"view_response_listener : true\" which use SensioFrameworkExtraBundle if there is no @View annotation.\nhttp://symfony.com/doc/current/bundles/FOSRestBundle/view_response_listener.html\n\nWhen view_response_listener is set to true instead of force and @View() is not used, then rendering will be delegated to SensioFrameworkExtraBundle\n\nSo, we can resolve this issue by adding @View annotation on each action.\nBut it means that \"view_response_listener : force\" doesn't work anymore.\n. ",
    "blamonet": "I was running into this as well and noticed my issues went away with the current \"dev-master\". How close is a v2.0 release cut? :)\n. @Ener-Getick thank you for the clarification. Things are now working out much better! :+1: \n. ",
    "estahn": "@lsmith77 You're saying i haven't configured the FOSRestBundle exception handler and need to do this as well? I will give it a try and report back. Thanks for the hint.\n. ",
    "Abam": "On my understanding, this wrapper helps in formatting all exceptions and form validations errors  in the same format (code, message, errors).\n. If you use a custom wrapper, the wrap method is called with an array built by the ExceptionController;\nI've found no documentation for the expected array passed to wrap method and the one about ExceptionController is IMO not complete at all. \nI spent most of my time exploring the source code and I have no idea if It is safe to rely on it.\nphp\n<?php\n$parameters = array(\n            'status' => 'error',\n            'status_code' => $code,\n            'status_text' => array_key_exists($code, Response::$statusTexts) ? Response::$statusTexts[$code] : 'error',\n            'currentContent' => $currentContent,\n            'message' => $this->getExceptionMessage($exception),\n            'exception' => $exception,\n        );\n. With the 2.0, I could be possible (wrapper is injected as a dependency) but unfortunately, as of 1.7 and 1.8, the same service is fetched by the ExceptionHandler and the ViewHandler directly from the container, so I can't tweak it  separately.\nI've decided to use the exception_wrapper_handler config param to setup one wrapper for both cases.\nBy the way, the comment above the param # only relevant when using the JMS serializer for serialization seems wrong since the wrapper is called before any serialization processing.\n. Thanks for the tips ! \nThis issue can be closed.\n. You should also consider users of jms serializer. You normalier is only for symfony serializer.\nWhen Symfony call the exception controller, it changes any custom exception to a Symfony\\Component\\Debug\\Exception\\FlattenException. \nYou custom exception is never passed to you serializer.\n. @Ener-Getick I've got it. Just highlighting that using a nomalizer for handling exceptions doesn't seems to be the right way for tackling this problem.\nFOSRestBundle uses the base symfony exception listener to handle exceptions and that listener convert any exception to a Symfony\\Component\\Debug\\Exception\\FlattenException. So when are in FOSRestBundle ExceptionController, you have only access to the flatten exception.\n. The current fix modify the context object while changing the SymfonySerializerAdapter may cause less inpact to backward compatibility.\nWhich release will contain this fix ? 2.1 ?\n. The $exceptionWrapper is not known here.\n. ",
    "Maxooo": "First of all, thank you for this improvement : this approach make sense in the Symfony ecosystem. You're right, it is very easy to create and add a normalizer via a service. But I agree with @peshi : the documentation is very unclear about how to configure the normalizer with the bundle. Could you please explain how to automatically use the normalizer for every catched exceptions in a REST controller action ?\nAnother question, the effect of the fost_rest.exception.enabled option is unclear too. I think the full configuration reference (http://symfony.com/doc/master/bundles/FOSRestBundle/configuration-reference.html) would gain to be annotated with some comments.\nThank you.\n@peshi Any idea or suggestion since your last experience ?\n. Thank you everybody for your helpful answers. The upgrading documentation is exactly what I was looking for.\nUnfortunately I'm using JMS Serializer and the handler strategy seems to be the one I have to use. \nI also see an another solution, overriding the ExceptionController to implement the custom serialization and normalization : is this approach sounds good to you ?\nThank you again.\n. ",
    "enekochan": "I think it's fixed now. Ping @lsmith77\n. ",
    "louvelmathieu": "If it can help you, i have the same issue when i get a NotFoundHttpException or MethodNotAllowedHttpException\n. If it can help you, i have the same issue when i get a NotFoundHttpException or MethodNotAllowedHttpException\n. Thanks you, it's work.\nTest with the \"format_listener\", the response is send in good format\n. Thanks you, it's work.\nTest with the \"format_listener\", the response is send in good format\n. @GuilhemN : Have you take a look of the change ?. Yes, it's done. I add it but it's a feature only for php7 : https://secure.php.net/manual/fr/reflectionparameter.gettype.php. ",
    "boast": "Looks good to me, I used \"friendsofsymfony/rest-bundle\": \"dev-FIX\" and the errors were gone. Thank you!\n. Looks good to me, I used \"friendsofsymfony/rest-bundle\": \"dev-FIX\" and the errors were gone. Thank you!\n. ",
    "aguidis": "``` yml\napp/config/routing.yml\ncoucou_api:\n    type:     rest\n    prefix:   /api/{version}\n    resource: \"@AppBundle/Resources/config/api-routing.yml\"\n```\n``` yml\nsrc/AppBundle/Resources/config/api-routing.yml\napi:\n    type: rest\n    resource: \"src/AppBundle/Controller\"\n```\n\nbut I have this message : \n\nClass could not be determined for Controller identified by \"src/AppBundle/Controller\" in /home/me/src/AppBundle/Resources/config/api-routing.yml (which is being imported from \"/home/me/app/config/routing.yml\").\n. ``` yml\n\napp/config/routing.yml\ncoucou_api:\n    type:     rest\n    prefix:   /api/{version}\n    resource: \"@AppBundle/Resources/config/api-routing.yml\"\n```\n``` yml\nsrc/AppBundle/Resources/config/api-routing.yml\napi:\n    type: rest\n    resource: \"src/AppBundle/Controller\"\n```\n\nbut I have this message : \n\nClass could not be determined for Controller identified by \"src/AppBundle/Controller\" in /home/me/src/AppBundle/Resources/config/api-routing.yml (which is being imported from \"/home/me/app/config/routing.yml\").\n. I never go into DirectoryRouteLoader class :s \n. I never go into DirectoryRouteLoader class :s \n. \n",
    "jovobe": "I don't think the problem is the short syntax. The Loader does not even react to a folder path properly, even if the full path (%kernel.root_dir%/../src/AppBundle/Controller) is used. Can You confirm this @aguidis?\n. Yes, it does. Thanks!\n. You're welcome!\n. You're welcome!\n. Sorry, I don't remember the context.. ",
    "sloba88": "But it tells me that I need to disable it?\nSo how do I use @Template annotations together with FosRest?\nNow I get error that I should disable view annotations\nYou need to disable the view annotations in SensioFrameworkExtraBundle when using the FOSRestBundle View Response listener. Add \"view: { annotations: false }\" to the sensio_framework_extra: section of your config.yml\n. ",
    "abstractk": "Can you please update the documentation on how to customize the error format now? I was relying on exception_wrapper_handler previously.\nThanks\n. ",
    "howardem": "I disabled the SensioExtraFrameworkBundle routing annotation, not the @Template as far as I know:\nsensio_framework_extra:\n    view:   { annotations: false }\n    router: { annotations: true }\n. Thank you, for your answer!! I took a deeper look to the documentation and it's working now\n. I realized the configuration was wrong when I looked into the documentation. Probably I changed it following the steps of this video https://youtu.be/MQDkeuHluhM.\n. That was what I did and it solved my errors. Remove the\nsensio_framework_extra config or just set view: { annotations: true }\nOn Mon, Mar 21, 2016 at 5:22 PM, Guilhem N notifications@github.com wrote:\n\n@vlyagusha https://github.com/vlyagusha the solution is the same you\nhave to enable the SensioFrameworkExtraBundle view annotations.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/issues/1381#issuecomment-199492163\n. \n",
    "vlyagusha": "I have the same issue using the same Symfony 2.8 and FOS Rest version 2.0.0-BETA2\nThis is my config.yml\nsensio_framework_extra:\n    view:   { annotations: false }\n    router: { annotations: true }\nfos_rest:\n    param_fetcher_listener: true\n    body_listener: true\n    format_listener:\n        rules:\n            - prefer_extension: false\n    routing_loader:\n        default_format: json\n    view:\n        view_response_listener: true\nHelp me please to solve this problem\n. When I'm doing it, I'm geting\nUnable to find template \"\".\n500 Internal Server Error - InvalidArgumentException\n3 linked Exceptions: Twig_Error_Loader \u00bb InvalidArgumentException \u00bb InvalidArgumentException \u00bb\nerror\n. It doesnt help me\nI do\nsensio_framework_extra:\n    view:   { annotations: true }\n    router: { annotations: true }\nbut I get the same Unable to find template \"\" error\nThat is my controller\nnamespace RestBundle\\Controller;\nuse FOS\\RestBundle\\Controller\\Annotations\\View;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nclass UsersController extends Controller\n{\n    /*\n     * @param $userID\n     * @return array\n     * @View()\n     /\n    public function getUserAction($userID)\n    {\n        return ['hello' => 'world'];\n    }\n/**\n * @return array\n * @View()\n */\npublic function getUsersAction()\n{\n    return ['hello' => 'world'];\n}\n}\n. @Ener-Getick Thx. What version you can recommend to use while you fix it? I'm using Symfony 2.8\n. @cedricduffournet and I have to create empty UsersBundle:get.html.twig template? Or it's just for fun?\n. @Ener-Getick @cedricduffournet Thx a lot. I'll be waiting for u\n. @cedricduffournet I'v done this, but it doesn't help me. It renders only content of template instead of JSON return ['hello' => 'world']; that I've specified in controller.\n. I've solved my problem!))\nThis is correct config\nsensio_framework_extra:\n    view:   { annotations: false }\n    router: { annotations: true }\nfos_rest:\n    format_listener:\n        rules:\n            - { priorities: ['json', 'xml'], fallback_format: json, prefer_extension: false }\n    view:\n        view_response_listener: true\ncomposer.json\n    \"require\": {\n        \"php\": \">=5.4.0\",\n        \"symfony/symfony\": \"2.8.*\",\n        \"doctrine/orm\": \"^2.4.8\",\n        \"doctrine/doctrine-bundle\": \"~1.4\",\n        \"symfony/swiftmailer-bundle\": \"~2.3\",\n        \"symfony/monolog-bundle\": \"~2.4\",\n        \"sensio/distribution-bundle\": \"~5.0\",\n        \"sensio/framework-extra-bundle\": \"^3.0.2\",\n        \"incenteev/composer-parameter-handler\": \"~2.0\",\n        \"friendsofsymfony/rest-bundle\": \"1.7.8\",\n        \"doctrine/doctrine-migrations-bundle\": \"^1.0\",\n        \"jms/serializer-bundle\": \"^1.1\"\n    },\n...and controller are staying the same\n/*\n     * @return array\n     * @View()\n     /\n    public function getUsersAction()\n    {\n        return ['param' => 'world'];\n    }\nAnd it works!!)\n. ",
    "sstok": "It's more a warning then an actual problem, in this case I would (should) not be possible to replace the XSD right?\n. An FORMAT_HTML constant for 'html', that's a bit overdoing it :) for status codes I would say yes but in this case :-1: \n. An FORMAT_HTML constant for 'html', that's a bit overdoing it :) for status codes I would say yes but in this case :-1: \n. Could everyone please use descriptive subjects like Fix Symfony serializer not working on version >= 1.8 instead of Fix #1498! there are over 9 pull-requests with these type of subjects and I'm getting tired having to open them see what's it about.\nThanks \ud83d\udc4d \n. Is this empty constructor really needed?\n. FYI setUp() is actually defined protected in the parent class ;)\n. Correct version is {@inheritdoc} with the at-sign.\n. ",
    "chalasr": "It's effectively not a problem or a bug, but it's the only major warning of the analysis.\nI'm not sure to understand what you say, but because the path of the XSD is currently hard-coded, I think this commit doesn't involve any change of how it is loaded. \nDo I missed something ?\n. There is no real gain and no loss, but the locator is already accessible and until now never used in the class itself.\nThe primary goal is to avoid the only major warning on SLI (BTW change the medal from bronze to silver), and so use a better practice. \nIf you have some input to make it more readable, I can adapt it.\n. Agreed. For me, this warning could be ignored in most cases. Maybe I should contact the support  rather than trying to solve it. \n. That would be perfect but will not work out of a Symfony project, and so break the test suit, right ?\n. ",
    "NadaBen": "my config.yml is as follow\n``` yaml\nimports:\n    - { resource: parameters.yml }\n    - { resource: security.yml }\nframework:\n    #esi:             ~\n    #translator:      { fallback: \"%locale%\" }\n    secret:          \"%secret%\"\n    router:\n        resource: \"%kernel.root_dir%/config/routing.yml\"\n        strict_requirements: ~\n    form:            ~\n    csrf_protection: ~\n    validation:      { enable_annotations: true }\n    templating:\n        engines: ['twig']\n        #assets_version: SomeVersionScheme\n    default_locale:  \"%locale%\"\n    trusted_hosts:   ~\n    trusted_proxies: ~\n    session:\n        # handler_id set to null will use default session handler from php.ini\n        handler_id:  ~\n    fragments:       ~\n    http_method_override: true\nTwig Configuration\ntwig:\n    debug:            \"%kernel.debug%\"\n    strict_variables: \"%kernel.debug%\"\nAssetic Configuration\nassetic:\n    debug:          \"%kernel.debug%\"\n    use_controller: false\n    bundles:        [ ]\n    #java: /usr/bin/java\n    filters:\n        cssrewrite: ~\n        #closure:\n        #    jar: \"%kernel.root_dir%/Resources/java/compiler.jar\"\n        #yui_css:\n        #    jar: \"%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar\"\nDoctrine Configuration\ndoctrine:\n    dbal:\n        driver:   \"%database_driver%\"\n        host:     \"%database_host%\"\n        port:     \"%database_port%\"\n        dbname:   \"%database_name%\"\n        user:     \"%database_user%\"\n        password: \"%database_password%\"\n        charset:  UTF8\n        # if using pdo_sqlite as your database driver, add the path in parameters.yml\n        # e.g. database_path: \"%kernel.root_dir%/data/data.db3\"\n        # path:     \"%database_path%\"\norm:\n    auto_generate_proxy_classes: \"%kernel.debug%\"\n    auto_mapping: true\n\nSwiftmailer Configuration\nswiftmailer:\n    transport: \"%mailer_transport%\"\n    host:      \"%mailer_host%\"\n    username:  \"%mailer_user%\"\n    password:  \"%mailer_password%\"\n    spool:     { type: memory }\n```\n. Ok Thank you @xabbuh \n. Ok Thank you @xabbuh \n. Ok thank you i'll test that\n. Ok thank you i'll test that\n. I tested that, but it gives me the same error equest parameter \\\"username\\\" is empty when i try this url http://localhost/N_API/web/app_dev.php/users?username=foufou&email=ff@gmail.com&password=foufou&plainPassword=foufou&company_name=tctc&adress_zip=455&adress_name=blv%20dolez&adress_city=mons&adress_country=belgium\n. i try to add fos restbundle in the composer with \"friendsofsymfony/rest-bundle\": \"2.0\", or with \"friendsofsymfony/rest-bundle\": \"*\", and it work for * but it install 1.7. version , when i add it mannually it show me this error Class 'FOS\\RestBundle\\FOSRestBundle not found in AppKernel.php \n. i try it with ~2.0@beta  but \nProblem 1\n    - Conclusion: don't install symfony/symfony v2.5.12\n    - Conclusion: don't install symfony/symfony v2.5.11\n    - Conclusion: don't install symfony/symfony v2.5.10\n    - Conclusion: don't install symfony/symfony v2.5.9\n    - Conclusion: don't install symfony/symfony v2.5.8\n    - Conclusion: don't install symfony/symfony v2.5.7\n    - Conclusion: don't install symfony/symfony v2.5.6\n    - Conclusion: don't install symfony/symfony v2.5.5\n    - Conclusion: don't install symfony/symfony v2.5.4\n    - Conclusion: don't install symfony/symfony v2.5.3\n    - Conclusion: don't install symfony/symfony v2.5.2\n    - Conclusion: remove symfony/symfony v2.5.1\n    - Conclusion: don't install symfony/symfony v2.5.1\n    - friendsofsymfony/rest-bundle 2.0.0-BETA1 requires symfony/finder ^2.7|^3.0 -> satisfiable by symfony/finder[v2.7.0, v2.7.1, v2.7.10, v2.7.11, v2.7.2, v2.7.3, v2.7.4, v2.7.5, v2.7.6, v2.7.7, v2.7.8, v2.7.9, v2.8.0, v2.8.1, v2.8.2, v2.8.3, v2.8.4, v3.0.0, v3.0.1, v3.0.2, v3.0.3, v3.0.4].\n    - friendsofsymfony/rest-bundle 2.0.0-BETA2 requires symfony/finder ^2.7|^3.0 -> satisfiable by symfony/finder[v2.7.0, v2.7.1, v2.7.10, v2.7.11, v2.7.2, v2.7.3, v2.7.4, v2.7.5, v2.7.6, v2.7.7, v2.7.8, v2.7.9, v2.8.0, v2.8.1, v2.8.2, v2.8.3, v2.8.4, v3.0.0, v3.0.1, v3.0.2, v3.0.3, v3.0.4].\n    - don't install symfony/finder v2.7.0|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v2.7.1|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v2.7.10|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v2.7.11|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v2.7.2|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v2.7.3|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v2.7.4|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v2.7.5|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v2.7.6|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v2.7.7|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v2.7.8|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v2.7.9|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v2.8.0|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v2.8.1|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v2.8.2|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v2.8.3|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v2.8.4|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v3.0.0|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v3.0.1|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v3.0.2|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v3.0.3|don't install symfony/symfony v2.5.0\n    - don't install symfony/finder v3.0.4|don't install symfony/symfony v2.5.0\n    - Installation request for symfony/symfony 2.5.* -> satisfiable by symfony/symfony[v2.5.0, v2.5.1, v2.5.10, v2.5.11, v2.5.12, v2.5.2, v2.5.3, v2.5.4, v2.5.5, v2.5.6, v2.5.7, v2.5.8, v2.5.9].\n    - Installation request for friendsofsymfony/rest-bundle ~2.0@beta -> satisfiable by friendsofsymfony/rest-bundle[2.0.0-BETA1, 2.0.0-BETA2].\nDone.\n. Okey i'll install symfony 2.7.. thank you\n. It exists in routes .. i verified with bin/console debug:router \n. when i used\n```\n // get a ConstraintViolationList\n    $errors = $this->get('validator')->validate( $photo );\ni have as error\nobject(Symfony\\Component\\HttpFoundation\\File\\UploadedFile)#14 (7) {\n  [\"test\":\"Symfony\\Component\\HttpFoundation\\File\\UploadedFile\":private]=>\n  bool(false)\n  [\"originalName\":\"Symfony\\Component\\HttpFoundation\\File\\UploadedFile\":private]=>\n  string(7) \"dog.jpg\"\n  [\"mimeType\":\"Symfony\\Component\\HttpFoundation\\File\\UploadedFile\":private]=>\n  string(10) \"image/jpeg\"\n  [\"size\":\"Symfony\\Component\\HttpFoundation\\File\\UploadedFile\":private]=>\n  int(56996)\n  [\"error\":\"Symfony\\Component\\HttpFoundation\\File\\UploadedFile\":private]=>\n  int(0)\n  [\"pathName\":\"SplFileInfo\":private]=>\n  string(14) \"/tmp/php85CXlJ\"\n  [\"fileName\":\"SplFileInfo\":private]=>\n  string(9) \"php85CXlJ\"\n}\n{\"code\":500,\"message\":\"An exception occurred while executing 'INSERT INTO photo (id, created_at, file_path, file_size, file_mime_type, file_original_name, photoWidth, photoHeight) VALUES (?, ?, ?, ?, ?, ?, ?, ?)' with params [\\\"7641aa25-31a3-11e7-9f7e-9cb6d062ede1\\\", \\\"2017-05-05 16:59:39\\\", null, null, null, null, null, null]:\\n\\nSQLSTATE[23000]: Integrity constraint violation: 1048 Column 'file_path' cannot be null\"}\n```. ",
    "araines": "Also had this problem when upgrading to 2.0-BETA2, using my own custom serializer.\nconfig.yml\nfos_rest:\n    view:\n        view_response_listener: true\n    serializer:\n        serialize_null: true\n    service:\n        serializer: api.serializer.default\nservices.yml\napi.serializer.default:\n        class: 'FOS\\RestBundle\\Serializer\\Serializer'\n        arguments:\n            0:\n                - '@api.normalizer.competition'\n                - '@api.normalizer.round'\n                - '@api.normalizer.pick'\n                - '@api.normalizer.group'\n                - '@api.normalizer.position'\n                - '@api.normalizer.prediction'\n                - '@api.normalizer.taxonomy'\n                - '@serializer.normalizer.object'\n            1:\n                - '@api.encoder.json'\nError:\n[InvalidArgumentException]\n  \"fos_rest.serializer\" must implement FOS\\RestBundle\\Serializer\\Serializer (instance of \"FOS\\RestBund\n  le\\Serializer\\Serializer\" given).\n. Also had this problem when upgrading to 2.0-BETA2, using my own custom serializer.\nconfig.yml\nfos_rest:\n    view:\n        view_response_listener: true\n    serializer:\n        serialize_null: true\n    service:\n        serializer: api.serializer.default\nservices.yml\napi.serializer.default:\n        class: 'FOS\\RestBundle\\Serializer\\Serializer'\n        arguments:\n            0:\n                - '@api.normalizer.competition'\n                - '@api.normalizer.round'\n                - '@api.normalizer.pick'\n                - '@api.normalizer.group'\n                - '@api.normalizer.position'\n                - '@api.normalizer.prediction'\n                - '@api.normalizer.taxonomy'\n                - '@serializer.normalizer.object'\n            1:\n                - '@api.encoder.json'\nError:\n[InvalidArgumentException]\n  \"fos_rest.serializer\" must implement FOS\\RestBundle\\Serializer\\Serializer (instance of \"FOS\\RestBund\n  le\\Serializer\\Serializer\" given).\n. @xabbuh: Ah I just realised this and was about to respond again!  Teach me to read what I'm doing before commenting so quickly.\nBasically all I want to be able to do is what I was doing in 1.7 which is specifying the Symfony normalizers it picks from, which I used to do like this:\napi.serializer.default:\n        class: 'Symfony\\Component\\Serializer\\Serializer'\n        arguments:\n            0:\n                - '@api.normalizer.competition'\n                - '@api.normalizer.round'\n                - '@api.normalizer.pick'\n                - '@api.normalizer.group'\n                - '@api.normalizer.position'\n                - '@api.normalizer.prediction'\n                - '@api.normalizer.taxonomy'\n                - '@serializer.normalizer.object'\n            1:\n                - '@api.encoder.json'\nBut with that configuration I get:\n[InvalidArgumentException]\n  \"fos_rest.serializer\" must implement FOS\\RestBundle\\Serializer\\Serializer (instance of \"Symfony\\Comp\n  onent\\Serializer\\Serializer\" given).\nNow I understand that the Symfony Serializer isn't going to implement the FOS RestBundle Serializer interface, but presumably I can make a very simple class which extends the Symfony Serializer and implements the interface, unless there is a better way?\n. @xabbuh: Ah I just realised this and was about to respond again!  Teach me to read what I'm doing before commenting so quickly.\nBasically all I want to be able to do is what I was doing in 1.7 which is specifying the Symfony normalizers it picks from, which I used to do like this:\napi.serializer.default:\n        class: 'Symfony\\Component\\Serializer\\Serializer'\n        arguments:\n            0:\n                - '@api.normalizer.competition'\n                - '@api.normalizer.round'\n                - '@api.normalizer.pick'\n                - '@api.normalizer.group'\n                - '@api.normalizer.position'\n                - '@api.normalizer.prediction'\n                - '@api.normalizer.taxonomy'\n                - '@serializer.normalizer.object'\n            1:\n                - '@api.encoder.json'\nBut with that configuration I get:\n[InvalidArgumentException]\n  \"fos_rest.serializer\" must implement FOS\\RestBundle\\Serializer\\Serializer (instance of \"Symfony\\Comp\n  onent\\Serializer\\Serializer\" given).\nNow I understand that the Symfony Serializer isn't going to implement the FOS RestBundle Serializer interface, but presumably I can make a very simple class which extends the Symfony Serializer and implements the interface, unless there is a better way?\n. @Ener-Getick that sounds like exactly what I'm trying to achieve, but I'm a little unclear about how exactly to achieve it.  I've got it working for now like this:\nconfig.yml\nfos_rest:\n    view:\n        view_response_listener: true\n    serializer:\n        serialize_null: true\n    service:\n        serializer: api.serializer.bridge\nservices.yml\n```\n    api.serializer.bridge:\n        class: 'FOS\\RestBundle\\Serializer\\SymfonySerializerAdapter'\n        arguments:\n            - '@api.serializer.default'\napi.serializer.default:\n    class: 'Symfony\\Component\\Serializer\\Serializer'\n    arguments:\n        0:\n            - '@api.normalizer.competition'\n            - '@api.normalizer.round'\n            - '@api.normalizer.pick'\n            - '@api.normalizer.group'\n            - '@api.normalizer.position'\n            - '@api.normalizer.prediction'\n            - '@api.normalizer.taxonomy'\n            - '@serializer.normalizer.object'\n        1:\n            - '@api.encoder.json'\n\n```\nBut it does feel like I'm jumping around a fair bit to do something which can probably be achieved in a more simple way.\n. @Ener-Getick that sounds like exactly what I'm trying to achieve, but I'm a little unclear about how exactly to achieve it.  I've got it working for now like this:\nconfig.yml\nfos_rest:\n    view:\n        view_response_listener: true\n    serializer:\n        serialize_null: true\n    service:\n        serializer: api.serializer.bridge\nservices.yml\n```\n    api.serializer.bridge:\n        class: 'FOS\\RestBundle\\Serializer\\SymfonySerializerAdapter'\n        arguments:\n            - '@api.serializer.default'\napi.serializer.default:\n    class: 'Symfony\\Component\\Serializer\\Serializer'\n    arguments:\n        0:\n            - '@api.normalizer.competition'\n            - '@api.normalizer.round'\n            - '@api.normalizer.pick'\n            - '@api.normalizer.group'\n            - '@api.normalizer.position'\n            - '@api.normalizer.prediction'\n            - '@api.normalizer.taxonomy'\n            - '@serializer.normalizer.object'\n        1:\n            - '@api.encoder.json'\n\n```\nBut it does feel like I'm jumping around a fair bit to do something which can probably be achieved in a more simple way.\n. @Ener-Getick appreciate the speedy and detailed response :)  Hopefully everything will get sorted at both ends soon!\n. ",
    "Alex-D": "OK, so this is not about my problem.\nIn my project, when I do a find for example, Doctrine get the right result as I want: no associations are loaded by default. But when I return that result object in a REST method, FOSRestBundle call JMSSerializer (that is OK) but the serializer hydrate all associations, I don't want that. I just want the object serialized without any additionnal loading.\n. Have you got any documentation/example of that?\nI don't see any mention of \"Group\" in documention which do that :/\nThanks for your help!\n. I've search all day long, there is no solution. And it's so sad.\nI've used getArrayResult() in my repositories to get an array and do not pass through the Serializer crazy loading.\nYou can close if you think it's not a problem. I think it's a problem: You can't base your response on object without lazy load a lot of things. If I use annotations, lazy load is limited, but it use n or n\u00b2 requests that take some milliseconds. So at the end, you can have 100ms of additionnal queries by lazy loading. So you need to make that query AND put a lot of annotations to avoid that: that's a non-sens in my opinion.\nMaybe I do take the good way to do my queries, but annotions don't solve my problem.\nMaybe it's a JMSSerializer specific problem... I don't know.\n. I think it's from JMSSerializer in fact.\n. The SymfonyFramework Serializer seems do the same, except it throws circular error. Idk if it's a bug from FOSRestBundle in this case.\n. ",
    "AlexandreHagen": "Maybe we juste need to update the composer.json file to support sensio/framework-extra-bundle 3.0.14 ?\n. Maybe we juste need to update the composer.json file to support sensio/framework-extra-bundle 3.0.14 ?\n. OK thanks for your help I have my response. I with waiting the 2.0 stable release.\n. ",
    "alsar": "Yes, it is possible. You define your controllers as it is stated in the Symfony docs: https://symfony.com/doc/current/cookbook/controller/service.html\nThe only additional thing you have to do, is that you have to define the service id of the controller in the FOS Route annotation.\nExample:\n```\nuse FOS\\RestBundle\\Controller\\Annotations as Rest;\n/\n * @Service(\"api_profile_controller\")\n \n * @Rest\\Route(service = \"api_profile_controller\")\n /\nclass ProfileController\n```\n. ",
    "DavidGarciaCat": "Hello guys,\nThanks for your comments.\nI am going to try this immediately.\nGiven these solutions, I think we can close the issue.\nThanks for your help!\n. Hello guys,\nThanks for your comments.\nI am going to try this immediately.\nGiven these solutions, I think we can close the issue.\nThanks for your help!\n. Hi @xabbuh \nRight now I need to get an access token via OAuth, then I need to send this access token in order to identify the user. So, in the end, I need to call this endpoint:\nhttps://api.example.com/v1/path/to/my/resource?access_token={my-access-token-here}\nWhat I was expecting is to add a HTTP Header like X-AUTH-TOKEN, so instead of send a Query String argument with my token, I would like to identify my user via this header.\nI don't know if this bundle allows this, but I think the Symfony Guard Authentication feature - new in Symfony 2.8 - is giving us an easy way to manage a request like this. However I don't know the bundle is managing already this case, or how to use it.\nNew in Symfony 2.8: Guard authentication component\nhttps://symfony.com/blog/new-in-symfony-2-8-guard-authentication-component\nHow to Create a Custom Authentication System with Guard\nhttps://symfony.com/doc/current/security/guard_authentication.html\nAny idea?\nThanks,. OK @mvrhov I'll have a look - Thanks,. Hi @xabbuh \nThat was my plan B, so I assume is the best choice.\nThanks,. Hi all,\nNo more activity here? I have the same problem, using SF 3.4. Hi @xabbuh \nRegarding PR https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1834\n\nQuick question: given the PR description is pointing the TwigBundle and FOSRestBundle is a Bundle to create RESTful APIs (that nowadays usually return XML or JSON) what's the point to force me to install and enable a Bundle that deals with templates?\nMaybe I don't understand the logic behind this, but it seems useless to me to throw an error just because I don't have the TwigBundle when I have no intention to manage anything related with that Bundle or templates.\nOn the other hand, if TwigBundle is required, it should be included as a requirement in composer.json file to make sure no one has gets an error like this, right?. Hi @xabbuh \nExcellent, now I see your point!\nI believe that update might help a little but, in the end, the real problem is what was described and potential solution, as you said, might be to copy&paste some code, but TBH I don't know - I didn't check the TemplateListener so I can't confirm, but if you think this is the right approach then I guess is fine.. Hi @xabbuh \nUnfortunately that's not the case - I created yesterday evening (UK Time) a new SF 3.4 project with FOS Rest Bundle and I was unable to get a JSON Response until I installed the TwigBundle by myself.\nI needed to git stash my Controller and DTO to install the missed bundle, and just when I installed it I got the expected JSON.\nhttps://github.com/DavidGarciaCat/sf34-rest/commits/master\n. So, basically the problems are:\n- The merged PR was not released yet with a new Git Tag\n- Once done, I might need to change my SF settings\n?. I assume Issue https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1846 is related with your suggestion here?. \ud83d\udc4d Thanks for the update, closing this PR now. ",
    "Jerome1337": "\nDid you try the body listener ?\n\nNo but this will decode every request response I get, no ?\nThis is my controller action with the json_decode usage (this code work fine on other non-api controllers and I have other actions that work well in the same controller)\n```\n    public function patchAction(Server $server, Server $updatedServer, ConstraintViolationListInterface $validationErrors)\n    {\n        if ($validationErrors->count() > 0) {\n            return $this->handleBodyValidationErrorsView($validationErrors);\n        }\n    $em = $this->getDoctrine()->getManager();\n    $metadata = $em->getMetadataFactory()->getMetadataFor('AppBundle:Server');\n    $entity = $em->find($metadata->getName(), $server->getId());\n    $data = json_decode($updatedServer, true);\n\n    foreach ($metadata->getFieldNames() as $field) {\n        if (isset($data[$field])) {\n            $metadata->setFieldValue($entity, $field, $data[$field]);\n        }\n    }\n\n    $em->flush();\n\n    return $this->view($updatedServer);\n}\n\n```\nAnd this is my FOSRestBundle routing\nfos_rest:\n    routing_loader:\n        default_format: json\n    body_converter:\n        enabled: true\n        validate: true\n    serializer:\n        serialize_null: true\n    view:\n        formats:\n            xml:  false\n            json: true\n            rss:  false\n            yml:  true\n        view_response_listener: force\n    param_fetcher_listener: force\n    format_listener:\n        rules:\n            - { path: '^/api/', priorities: ['json', 'yml'], fallback_format: json, prefer_extension: true }\n            - { path: '^/', stop: true } # FOSRest should not handle other routes than API\n        media_type:\n            enabled: true\n. Yes, I understood this after I answered on this issue.\n. I had the same error, I just added an array in my JSON body like this\n{\n    \"group\": [1]\n}\nI tried with this too\n{\n    \"group\": [\n        {\"id\": 1}\n    ]\n}\nIn this 2 cases the 500 error is fixed but the values in the response are null\ncf : http://stackoverflow.com/questions/36198556/fosrestbundle-get-datas-from-manytomany-one-field-during-a-post-request\n. @Soullivaneuh @Ener-Getick I found this pull request (https://github.com/schmittjoh/serializer/pull/110) on jms serializer repo. This fix the error but this is not already merge :/\n. @Soullivaneuh @Ener-Getick I found this pull request (https://github.com/schmittjoh/serializer/pull/110) on jms serializer repo. This fix the error but this is not already merge :/\n. @xabbuh Yes I had this idea too, but I must write >15 condition. This is not really what I want... This can be handled automatiquely ?\n. ",
    "mikelinington": "@Ener-Getick Here's the exception being thrown:\nSymfony\\Component\\Validator\\Exception\\MissingOptionsException: The options \"constraints\" must be set for constraint Symfony\\Component\\Validator\\Constraints\\All\nYou can see this by creating a controller with this query param and making a request to the generated endpoint:\nphp\n/*\n * @QueryParam(name=\"filter\", map=true, nullable=true)\n */\npublic function cgetAction(ParamFetcher $fetcher) {\n}\nOr reverting the change I made in AbstractScalarParam and running the provided unit test (AbstractParamTest::testNotNullConstraint). I can add a test case to ParamFetcherTest if you'd like to see a functional test around this.\nLet me know if anything else is unclear!\n. @Ener-Getick Here's the exception being thrown:\nSymfony\\Component\\Validator\\Exception\\MissingOptionsException: The options \"constraints\" must be set for constraint Symfony\\Component\\Validator\\Constraints\\All\nYou can see this by creating a controller with this query param and making a request to the generated endpoint:\nphp\n/*\n * @QueryParam(name=\"filter\", map=true, nullable=true)\n */\npublic function cgetAction(ParamFetcher $fetcher) {\n}\nOr reverting the change I made in AbstractScalarParam and running the provided unit test (AbstractParamTest::testNotNullConstraint). I can add a test case to ParamFetcherTest if you'd like to see a functional test around this.\nLet me know if anything else is unclear!\n. @Ener-Getick good call, that's a bit more succinct! I just pushed that change, let me know if you want anything else on this.\n. @Ener-Getick good call, that's a bit more succinct! I just pushed that change, let me know if you want anything else on this.\n. @Ener-Getick I just pushed up a change to test that it's creating the constraint with an empty constraints key, would you prefer I just remove the test entirely?\n. ",
    "renan-taranto": "Some more details:\n-The listener is registered.\n-This listener obtains the allowed methods trough the AllowedMethodsRouterLoader class wich iterates (line 73) over Route objects and their $requirements array properties to grab the methods. I noticed that these Route objects does not have the '_method' key in the $requirements property.\n-Requesting with a not allowed method gives me a 405 status code with the Allow header perfectly set.\n. Some more details:\n-The listener is registered.\n-This listener obtains the allowed methods trough the AllowedMethodsRouterLoader class wich iterates (line 73) over Route objects and their $requirements array properties to grab the methods. I noticed that these Route objects does not have the '_method' key in the $requirements property.\n-Requesting with a not allowed method gives me a 405 status code with the Allow header perfectly set.\n. I believe I was able to fix the issue. I will fork and make a pull request as soon as I have time.\n. I believe I was able to fix the issue. I will fork and make a pull request as soon as I have time.\n. I tried creating the pull request 3 times but all failed passing the checks for the 2.0 version.\nI believe that the problem happens while creating the routes on RestActionReader class.\n Symfony 2 Route class used to add the method requirements trough the setMethods method called by the constructor, this does not happens on Symfony 3.\nI was able to fix the issue on FOSRestBundle v1.7 with this addition to the RestActionReader class:\nphp\n    private function includeMethodsIfNeeded(array $methods, &$requirements)\n    {\n        if (!isset($requirements['_method']) && !empty($methods)) {\n            $requirements['_method'] = implode('|', $methods);\n        }\n    }\nThe above method had to be called from the read() public method twice (once for annotations and once for the other case).\n. I tried creating the pull request 3 times but all failed passing the checks for the 2.0 version.\nI believe that the problem happens while creating the routes on RestActionReader class.\n Symfony 2 Route class used to add the method requirements trough the setMethods method called by the constructor, this does not happens on Symfony 3.\nI was able to fix the issue on FOSRestBundle v1.7 with this addition to the RestActionReader class:\nphp\n    private function includeMethodsIfNeeded(array $methods, &$requirements)\n    {\n        if (!isset($requirements['_method']) && !empty($methods)) {\n            $requirements['_method'] = implode('|', $methods);\n        }\n    }\nThe above method had to be called from the read() public method twice (once for annotations and once for the other case).\n. Version 1.7. The fix I mentioned in my last comment worked on FOSRestBundle 1.7 and Symfony 3.\n. Version 1.7. The fix I mentioned in my last comment worked on FOSRestBundle 1.7 and Symfony 3.\n. Yeah you are right, like I said it didn't passed the checks. Hope it helps someway.\n. Fixing some errors, sorry.\n. Fixing some errors, sorry.\n. ",
    "angrygreenfrogs": "This issue is causing me some trouble too.\nI'd like to second the suggestion that this can just return $default;\nOtherwise there's currently no way you can configure ParamFetcher to return null (which is what I want in my use case), but if you just return $default, then you can configure it to return '' if you want by directly specifying that as the default, so it allows the most flexibility.\n. Definitely. We're using the rest bundle for just about everything for input, output, etc.\nEverything works fine except for the Version annotation not creating the routing configuration\n. Hi guys,\nI've checked out a copy of the CHPICK branch where I see these changes that @Ener-Getick  mentioned have been applied. I double-checked to make sure the version I have is consistent and has them in place, which it does.\nHowever, I still can't get this version annotation to work.\nI've cut down my test classes to the bare minimum to try to figure it out, but no matter what, it always just uses the 'v1' class.\n```\n<?php\nnamespace ApiBundle\\Controller\\v1;\nuse FOS\\RestBundle\\Controller\\Annotations\\Version;\nuse FOS\\RestBundle\\Controller\\FOSRestController;\nuse FOS\\RestBundle\\Controller\\Annotations\\Route;\nuse FOS\\RestBundle\\Controller\\Annotations\\View;\nuse FOS\\RestBundle\\Controller\\Annotations\\Post;\n/\n * @Version(\"v1\")\n */\nclass TestController extends FOSRestController\n{\n    /\n     * @View\n     * @Route(\"/api/test\")\n     */\n    public function getTestAction()\n    {\n        $output = array();\n        echo \"test1\";\n        $view = $this->view($output, 200);\n        return $this->handleView($view);\n    }\n}\n```\n```\n<?php\nnamespace ApiBundle\\Controller\\v2;\nuse FOS\\RestBundle\\Controller\\Annotations\\Version;\nuse FOS\\RestBundle\\Controller\\FOSRestController;\nuse FOS\\RestBundle\\Controller\\Annotations\\Route;\nuse FOS\\RestBundle\\Controller\\Annotations\\View;\nuse FOS\\RestBundle\\Controller\\Annotations\\Post;\n/\n * @Version(\"v2\")\n */\nclass TestController extends FOSRestController\n{\n    /\n     * @View\n     * @Route(\"/api/test\")\n     */\n    public function getTestAction()\n    {\n        $output = array();\n        echo \"test2\";\n        $view = $this->view($output, 200);\n        return $this->handleView($view);\n    }\n}\n```\nI'm sending a request to \"/api/test?version=v2\", which always outputs \"test1\", which you can see is from my version 1 class.\nI've tried using @Get or @Post instead of @Route, and tried removing @View, but there's no change.\nAm I doing something wrong? Any ideas?\n. @xabbuh Thanks for the idea, I've given that a try, but to no effect.\nHowever, again if I manually add the routing condition, it works fine.\nSo for example this works exactly as expected:\n```\n<?php\nnamespace ApiBundle\\Controller\\v1;\nuse FOS\\RestBundle\\Controller\\Annotations\\Version;\nuse FOS\\RestBundle\\Controller\\FOSRestController;\nuse FOS\\RestBundle\\Controller\\Annotations\\Route;\nuse FOS\\RestBundle\\Controller\\Annotations\\View;\nuse FOS\\RestBundle\\Controller\\Annotations\\Get;\nuse FOS\\RestBundle\\Controller\\Annotations\\NamePrefix;\n/\n * @Version(\"v1\")\n * @NamePrefix(\"v1\")\n */\nclass ShareController extends FOSRestController\n{\n    /\n     * @Route(\"/api/test\",condition=\"request.attributes.get('version') == 'v1'\")\n     */\n    public function getTestAction()\n    {\n        $output = array();\n        echo \"test1\";\n        $view = $this->view($output, 200);\n        return $this->handleView($view);\n    }\n}\n```\n```\n<?php\nnamespace ApiBundle\\Controller\\v2;\nuse FOS\\RestBundle\\Controller\\Annotations\\Version;\nuse FOS\\RestBundle\\Controller\\FOSRestController;\nuse FOS\\RestBundle\\Controller\\Annotations\\Route;\nuse FOS\\RestBundle\\Controller\\Annotations\\View;\nuse FOS\\RestBundle\\Controller\\Annotations\\Get;\nuse FOS\\RestBundle\\Controller\\Annotations\\NamePrefix;\n/\n * @Version(\"v2\")\n * @NamePrefix(\"v2\")\n */\nclass ShareController extends FOSRestController\n{\n    /\n     * @Route(\"/api/test\",condition=\"request.attributes.get('version') == 'v2'\")\n     */\n    public function getTestAction()\n    {\n        $output = array();\n        echo \"test2\";\n        $view = $this->view($output, 200);\n        return $this->handleView($view);\n    }\n}\n```\nCalling /api/test?version=v1 outputs \"test1\" and /api/test?version=v2 outputs \"test2\"\nBut of course the whole point is I was hoping for the @Version annotation to take care of adding that routing condition for me.\nI'm going to try digging through the RestActionReader code to see if I can figure out why the condition isn't being added, but if anyone has any hints about how to debug that, please let me know.\n. Ah, OK, I think I finally figured this out.\nThe problem is that @Version is incompatible with manually setting your own routes.\nAs soon as I removed the * @Route(\"/api/test\") that I had set, it works just fine as expected.\n@Version was creating a separate duplicate route, but it wasn't updating the one that I had manually created.\nI'm not quite sure if that's expected functionality, a bug, or a new feature request to add support for manually created routes?\nMight be good to note in the documentation for versioning, however.\nAlso be good to specifically mention that you must have \"type: rest\" set in the routing configuration.\n. Oh hey nice! thanks! that's a lot better.\n. Definitely in the same area, but this is an additional issue.\nUnder the covers the problem is that rest bundle is using the Symfony NotBlank validator\nNotBlank also returns false if the value is null, so that means it's not really compatible with nullable any more. This must've been handled differently in 1.0 since it used to work.\nI think there should be a check that if nullable=true and value=null, that should take precedence and allowblank should be ignored.\n. Controller code:\n/**\n     * Login to the system via email/password and receive a security token.\n     * @Rest\\View()\n     * @Route(\"/user/login.{_format}\",defaults={\"_format\": \"json\"})\n     * @Method(\"POST\")\n     *\n     * @RequestParam(name=\"apikey\", requirements=\"[a-zA-Z0-9]{32}\", allowBlank=false, strict=true, description=\"Application API Key\")\n     * @RequestParam(name=\"email\", requirements=\".+@.+\\..+\", allowBlank=false, strict=true, description=\"User's e-mail address\")\n     * @RequestParam(name=\"password\", requirements=\".{4,30}\", allowBlank=false, strict=true, description=\"User's password\")\n     * @param ParamFetcher $paramFetcher\n     * @param Request $request\n     * @param LoggerInterface $logger\n     * @return Response\n     * @throws HttpException on application failure\n     */\n    public function postLoginAction(ParamFetcher $paramFetcher, Request $request, LoggerInterface $logger)\n    {\nUpon sending an API request, this results in an error like:\n[2018-01-11 16:13:57] php.CRITICAL: Class 'Symfony\\Component\\Validator\\Constraints\\NotNull' not found {\"exception\":\"[object] (Symfony\\\\Component\\\\Debug\\\\Exception\\\\FatalThrowableError(code: 0): Class 'Symfony\\\\Component\\\\Validator\\\\Constraints\\\\NotNull' not found at /home/eross/myp/vendor/friendsofsymfony/rest-bundle/Controller/Annotations/AbstractParam.php:75)\"} []\n[2018-01-11 16:13:57] request.CRITICAL: Uncaught PHP Exception Symfony\\Component\\Debug\\Exception\\ClassNotFoundException: \"Attempted to load class \"NotNull\" from namespace \"Symfony\\Component\\Validator\\Constraints\". Did you forget a \"use\" statement for another namespace?\" at /home/eross/myp/vendor/friendsofsymfony/rest-bundle/Controller/Annotations/AbstractParam.php line 75 {\"exception\":\"[object] (Symfony\\\\Component\\\\Debug\\\\Exception\\\\ClassNotFoundException(code: 0): Attempted to load class \\\"NotNull\\\" from namespace \\\"Symfony\\\\Component\\\\Validator\\\\Constraints\\\".\\nDid you forget a \\\"use\\\" statement for another namespace? at /home/eross/myp/vendor/friendsofsymfony/rest-bundle/Controller/Annotations/AbstractParam.php:75)\"} []\n. Ahh, thank you, yes that's all I needed apparently.\ncomposer require symfony/validator. ",
    "solazs": "This is still an issue, any news?. ",
    "fprochazka": "Oh, you're right, I didn't notice it's only the doc. So this can be closed then? Also, it probably applies for the other two PR's I've created, right?\n. Oh, you're right, I didn't notice it's only the doc. So this can be closed then? Also, it probably applies for the other two PR's I've created, right?\n. Ok, np :)\n. Ok, np :)\n. I've dropped the change in the doc FYI\n. I've dropped the change in the doc FYI\n. Done :) \n. Done :) \n. @Ener-Getick thank you too!\n. @Ener-Getick thank you too!\n. ",
    "jorge07": "You are right, I'll. \n. @Ener-Getick Done, tell if that cover enough its a simple test.\n. Great\n. You are right, im on it\n. I just followed the same behavior as the existing option that appears in the doc http://symfony.com/doc/current/bundles/FOSRestBundle/7-manual-route-definition.html#method-name-prefix\nBut maybe we can add that option too. Ping @xabbuh . Should I change it?. Done. ",
    "jdwil": "@xabbuh That's a fair point. I can refactor this to take a custom interface rather than a Doctrine QueryBuilder. Would it be okay to add an implementation of the interace for Doctrine to rest-bundle? Others could add implementations for Propel and other dbal's...\n. Roger that. I've got a new version using a StreamableInterface and PageableInterface. I'll try to get the tests cleaned up this week and push it up. Then we can talk about the event idea... not sure I completely follow.\n. So, this is what the Pageable/Streamable interfaces look like. I did make a vendor-specific Doctrine dao in the DBAL code, which I've found useful. Before I write more tests, can I get some feedback on this approach? I've been using this code in a development project for a few weeks and it makes hooking up to a data table front end, like Bootstrap Table or jQuery DataTables, quite easy.\n. So, this is what the Pageable/Streamable interfaces look like. I did make a vendor-specific Doctrine dao in the DBAL code, which I've found useful. Before I write more tests, can I get some feedback on this approach? I've been using this code in a development project for a few weeks and it makes hooking up to a data table front end, like Bootstrap Table or jQuery DataTables, quite easy.\n. @Ener-Getick @xabbuh Roger that. Thanks for the feedback. I'll look into refactoring this as I have time and creating a separate bundle.\n. @hipio Sorry, I haven't had any time to work on this. I've been using my FOS Rest Bundle fork in my current side-project, which has the functionality described here. I don't want to roll it into production that way so I will circle back to this at some point.\n. ",
    "vasilvestre": "Any news ? Fix checks ? Or already up ?. ",
    "Neirda24": "Any news ? Seems to me that any good API should have a pagination support. Keep it up ;). ",
    "Quovandius": "Ok i understand. i hope someone can have an idea for me. \n. ",
    "nico-incubiq": "I am facing a similar issue.\nMy requirement is being check when I pass no parameter, although I set nullable=true.\nThis used to work before and I cannot find any way around this issue...\nHere is my param:\n@REST\\QueryParam(name=\"page\", nullable=true, strict=true, requirements=@Assert\\Range(min=\"1\"), description=\"The page number\")\n. I am facing a similar issue.\nMy requirement is being check when I pass no parameter, although I set nullable=true.\nThis used to work before and I cannot find any way around this issue...\nHere is my param:\n@REST\\QueryParam(name=\"page\", nullable=true, strict=true, requirements=@Assert\\Range(min=\"1\"), description=\"The page number\")\n. ",
    "lbayerl": "I my case I had to overwrite the original ExceptionNormalizer like that in my services.yml:\n```\n     fos_rest.serializer.exception_normalizer.jms:\n        class: MyBundle\\EventHandler\\JmsExceptionHandler\n        tags:\n            - { name: jms_serializer.subscribing_handler }\n        arguments: [\"@fos_rest.exception.messages_map\", false]. Thanks @Ener-Getick for making this clear. I am just wondering a bit, because I already had FOS Rest 1.7.7 running with framework-extra 3.0.16. So was this a bug then which was fixed with 1.8? Because I got a downgrade for framework-extra when upgrading from 1.7.7 to 1.8?\n. @RuslanZavacky does this description here help you? . Can we help something? We're still stuck to FOS Rest 1.7 because of this issue.. Sorry for bothering you - can we do anything?. I don't get it as well, isn't 'master' by default an unstable non-tagged version which is for development and test purposes only which can change at any time even containing BCs? If the functionality is ready (as I understand the history of this issue) why not tagging a new version which contains it? Why is this bundle following semver then?. ",
    "ghanbari": "View::setSerializationContext() get one instance of FOS\\\\RestBundle\\\\Context\\\\ContextInterface,\nwhy this bundle use another context class?\nwhy Context class has setSerializationContext(deep) method and what do deep parameter?\n. @Ener-Getick Update post\n. @Ener-Getick Update post\n. @Ener-Getick thanks for help\n. @Ener-Getick thanks for help\n. @bassrock if you want use jms serializer, you should define max level value by annotaion @MaxDepth(Y) and then enable max depth check for given response view by View::setMaxDepth(X) (X is ignored and Y is applied). ",
    "hshn": "@xabbuh I've removed the CS changes, but the StyleCI configuration updates seems to be unavailable at branch 2.0 for now. What should I do?\n. @xabbuh rebased :)\n. ",
    "phansys": "Thank you @xabbuh. Please note that repo description should be updated accordingly:\n\nThis Bundle provides various tools to rapidly develop RESTful API's with Symfony2\n. Related to https://github.com/schmittjoh/JMSSerializerBundle/issues/523.. @GuilhemN, is there something I can do in order to get this merged?. Thank you @GuilhemN.. Done.. This change doesn't seem related to the subject.. Why not simply $v && !$v['formats']?. $v['enabled'] is overridden at the next line, which is the reason for this unset() call?. $v argument could be declared as array.. \n",
    "jhcasado": "I'm sorry, you are right,\nI checked dependencies and I don't know why the project had the jms version fixed in composer:\n\"jms/serializer-bundle\": \"^0.13.0\",\nIn that version they used an array in that line.\nUpdated to 1.1.0 and no problems.\nJust for the record this was my error:\n```\n{\n\"code\": 500,\n\"message\": \"Type error: Argument 1 passed to FOS\\RestBundle\\Serializer\\Normalizer\\FormErrorHandler::adaptFormArray() must be an instance of ArrayObject, array given, called in /home/r00t/Workspace/corporapp/vendor/friendsofsymfony/rest-bundle/Serializer/Normalizer/FormErrorHandler.php on line 68\"\n}\n```\n. It was my pleasure, thanks for your work and this great bundle :-P\n. ",
    "callistino": "I was able to overcome this issue by generating more routes using a class that overloads the \\FOS\\RestBundle\\Routing\\Loader\\RestYamlCollectionLoader:load() and sorting the routes in an order that fits my needs.\n. ",
    "zajca": "I'm throwing exception in controller like this:\n(there is always my custom message)\nthrow new ConflictHttpException($this->translator->trans($message));\nand I always get:\n{\n  \"code\": 409,\n  \"message\": \"Conflict\"\n}\nWhen I debug this, in exception controller there is my message in $templateData, but after serialization it's not.\nmessage will not be show because here: https://github.com/FriendsOfSymfony/FOSRestBundle/blob/2.0/Serializer/Normalizer/AbstractExceptionNormalizer.php#L54 resolveException will return always false since there is nothing inside ExceptionValueMap\n. If I debug bundle extension in both dev and prod config seems to be fine.\n\nbut nothing is injected, it looks like DI is not replacing arguments.\n. Well I'm screwed, I try do the same on rest-edition upgraded to same packages and result works as expected :(\nIt must be some bundle doing nasty stuff with listeners.\nI debug MergeExtensionConfigurationPass and after it is arguments for fos_rest.exception.messages_map right. I cant figure out what could be possibly wrong.\nThis is cached inside rest-bundle project:\n```\n//appDevDebugProjectContainer.php\nprotected function getFosRest_Serializer_ExceptionNormalizer_JmsService()\n{\n    return $this->services['fos_rest.serializer.exception_normalizer.jms'] = new \\FOS\\RestBundle\\Serializer\\Normalizer\\ExceptionHandler(new \\FOS\\RestBundle\\Util\\ExceptionValueMap(array('Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\BadRequestHttpException' => true, 'Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\AccessDeniedHttpException' => true, 'Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\ConflictHttpException' => true, 'Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\HttpException' => true, 'Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\NotFoundHttpException' => true)), true);\n}\n\n```\nAnd this is in my project:\n//appDevDebugProjectContainer.php\n    protected function getFosRest_Serializer_ExceptionNormalizer_JmsService()\n    {\n        return $this->services['fos_rest.serializer.exception_normalizer.jms'] = new \\FOS\\RestBundle\\Serializer\\Normalizer\\ExceptionHandler(new \\FOS\\RestBundle\\Util\\ExceptionValueMap(array()), '');\n    }\nI don't get it :/\n. I tried  like million times :( also restart php-fpm service nginx, try to run on php dev-server. \nRun on staging server from clear workspace.\n//Do you have knowledge what is happening with container between MergeExtensionConfigurationPass and PhpDumper?\n. Nope config us loaded, I'm using main config.yml, ale if I forget to load config there will empty array on MergeExtensionConfigurationPass.\n. I found why this happens after 3 days of debuging.\nI had in config.yml this line:\nimports:\n...\n    - { resource: \"@FOSRestBundle/Resources/config/exception_listener.xml\" }\nso loader loaded these services on initial load and after bundles configurations was build it override them with initial configuration.\n. ",
    "roelleor": "Nope, not loading the controller somewhere else. Good that you're checking, but I used it uncommented :)\nMy config:\n``` yml\nfos_rest:\n    routing_loader:\n        default_format: json\n    format_listener:\n        enabled: true\n    versioning:\n        enabled: true\n    view:\n        view_response_listener: force\n        formats:\n            json: true\n            jsonp: false\n            xml: false\n            rss: false\n```\n. to add: it does work well when using the version as a parameter\n\nOn 01 Jul 2016, at 13:16, Guilhem N notifications@github.com wrote:\nThis should works as expected. \nAt first, you must uncomment the line prefix.\nDo you load this controller somewhere else ?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1529#issuecomment-229922098, or mute the thread https://github.com/notifications/unsubscribe/AC-MigxR-7lA68BOZ2SwS9EUIRUMsL1Tks5qRPb2gaJpZM4JC-xX.\n. it gives a \"No route found\u201d error\nPerhaps you are right that one doesn\u2019t strictly need it. One could just hard code the prefix. It\u2019s not that much work, I\u2019ll just go for that route then.\nFYI, this approach of having {version} as a parameter in the path is in the documentation. However, not in combination with the ClassResourceInterface.\nOn 01 Jul 2016, at 14:04, Guilhem N notifications@github.com wrote:\nIn fact, you don't need the versioning feature of this bundle if you use a path parameter.\nWhat do you mean by not working ? You can't access your controller ?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1529#issuecomment-229929837, or mute the thread https://github.com/notifications/unsubscribe/AC-MiuOvatI-4vVa0df_AtKKDW4ZtKH_ks5qRQJQgaJpZM4JC-xX.\n. \n",
    "tetele": "Same issue here\n```\napp/config/routing.yml\napi:\n    resource: \"@ApiBundle/Resources/config/routes.yml\"\n    type:     rest\n    prefix:   /api/{version}\n```\nand then\n```\nsrc/ApiBundle/Resources/config/routes.yml\nproducts:\n    type:     rest\n    resource: ApiBundle\\Controller\\ProductController\n    name_prefix:  api_\nshops:\n    type:     rest\n    resource: ApiBundle\\Controller\\ShopController\n    name_prefix:  api_\n```\nWhen trying to access /api/v1/shops, a \"no route found\" exception is thrown. Note that this stopped working after I upgraded from 2.0.0-BETA to 2.0.0. Not to mention it's in the docs, like @roelleor said.\n. ",
    "Lumbendil": "Bumping this issue, as it's happening to me aswell, same case as @tetele\n. @Ener-Getick \nvagrant@mymachine:/vagrant$ app/console debug:router get_categories\n+--------------+--------------------------------------------------------------------+\n| Property     | Value                                                              |\n+--------------+--------------------------------------------------------------------+\n| Route Name   | get_categories                                                     |\n| Path         | /frontend/api/{tube}/{version}/categories                          |\n| Path Regex   | #^/frontend/api/(?P<tube>[^/]++)/(?P<version>[^/]++)/categories$#s |\n| Host         | ANY                                                                |\n| Host Regex   |                                                                    |\n| Scheme       | ANY                                                                |\n| Method       | GET                                                                |\n| Requirements | NO CUSTOM                                                          |\n| Class        | Symfony\\Component\\Routing\\Route                                    |\n| Defaults     | _controller: ApiBundle:Frontend\\V1\\Category:cget                   |\n|              | _format: json                                                      |\n| Options      | compiler_class: Symfony\\Component\\Routing\\RouteCompiler            |\n+--------------+--------------------------------------------------------------------+\nShould be noted aswell that in the profiler the symfony matcher complains about attributes.get('version') not being equal to v1 (my version).\n. @xabbuh answer from memory.\nThe path I tried was /frontend/api/something/v1/categories, there was no match, and on symfony debug, when inspecting, it said something along \"get_categories\" route is a close match but version doesn't match the requirements (the route version was being overriden by the listener).\n. It should be noted that adding ?version=v1 did make the route match.\n. ",
    "juillerat": "The problem is linked with priority of kernel.request event listeners\n- VersionListener (onKernelRequest priority 33) will run before Symfony RouterListener (kernel.request with priority 32). Then $request->attributes->get(\"version\") in VersionListener (priority 33) will never take into account the value of {version} url placeholder, as this will be defined later in Symfony RouterListener (priority 32).\n- VersionListener has to be executed before RouterListener, as the latter will match requested version (parsed with on priority 33) with routes using conditions that have been defined with @Version annotation (matching occurring on priority 32).\n- Even more subtle, as implemented now, @Version annotation cannot work with uri placeholders. In fact, @Version annotations define route conditions with expressions, using request.attributes.get('version') in [...]. These conditions are evaluated by Symfony RouterListener (priority 32), but at the time of evaluation, request.attributes.get('version') is still empty for url placeholders. The RequestMatcherInterface will throw a ResourceNotFoundException before the url placeholder value is stored in request attributes. This explain issue #1491\nTo resolve all these problems at the same time, I think we need to:\n- keep VersionListener with priority of 33 to resolve all versions but uri {version} placeholder\n- let Symfony RouterListener resolve uri {version} placeholder with priority of 32 and also match route requirements and conditions\n- apply the version exclusion strategy once all versions possibilities are resolved. So delegate this exclusion to a kernel request listener with priority < 32)\n- when a {version} placeholder is used in a path (prefix, path, route annotation, etc.), we should match routes by requirements and not conditions to fix issue #1491\nI will propose a PR that fix issues #1491 and #1529\n. The Reader::getMethodAnnotations() returns effectively null because the annotations doesn't get cached for some reasons: $this->fetchFromCache($cacheKey, $class) returns null.\nThis happens when methods have this annotation: @View(statusCode=Response::HTTP_NO_CONTENT) even if Response is declared with use Symfony\\Component\\HttpFoundation\\Response;. It works with @View(statusCode=204)\n. In this proposition, the VersionListener does not use the ViewHandlerInterface anymore. Regardless of this, I didn't changed the signature of the constructor .... ",
    "crashev": "Are there any workarounds for URI versioning? It still seems not to work, only query and header versioning works. Are there any workarounds for URI versioning? It still seems not to work, only query and header versioning works. will this be somehow fixed in order to stop symfony shouting about this deprecation ?. will this be somehow fixed in order to stop symfony shouting about this deprecation ?. ",
    "osavchenko": "Yes, still not working URI versioning. Why it happens and how I can help to fix this (maybe, we need new resolver for this)?. ",
    "lgraubner": "You can simply add your own onKernelRequest listener to work around the problem described by @juillerat.\n```php\nnamespace AppBundle\\EventListener;\nuse FOS\\RestBundle\\View\\ConfigurableViewHandlerInterface;\nuse FOS\\RestBundle\\View\\ViewHandlerInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\GetResponseEvent;\nclass VersionListener\n{\n    private $viewHandler;\npublic function __construct(ViewHandlerInterface $viewHandler)\n{\n    $this->viewHandler = $viewHandler;\n}\n\nprivate function resolveVersion(Request $request)\n{\n    $version = $request->attributes->get('version');\n\n    return is_scalar($version) ? $version : strval($version);\n}\n\npublic function onKernelRequest(GetResponseEvent $event)\n{\n\n    $request = $event->getRequest();\n    $version = str_replace('v', '', $this->resolveVersion($request));\n\n    $request->attributes->set('version', $version);\n\n    if ($this->viewHandler instanceof ConfigurableViewHandlerInterface) {\n        $this->viewHandler->setExclusionStrategyVersion($version);\n    }\n}\n\n}\n```\nyaml\napp.version_listener:\n        class: Acme\\AppBundle\\EventListener\\VersionListener\n        tags:\n          - { name: kernel.event_listener, event: kernel.request, priority: 30 }. ",
    "mhightower": "Was this problem ever resolved? I'm running into the same issue as @roelleor. I'm going to try the workaround but would like to configure it as documented.. ```\n/\n     * Gets the private 'fos_rest.format_negotiator' shared service.\n     \n     * @return \\FOS\\RestBundle\\Negotiation\\FormatNegotiator\n     /\n    protected function getFosRest_FormatNegotiatorService()\n    {\n        $this->services['fos_rest.format_negotiator'] = $instance = new \\FOS\\RestBundle\\Negotiation\\FormatNegotiator(${($ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->services['request_stack'] = new \\Symfony\\Component\\HttpFoundation\\RequestStack()) && false ?: ''});\n    $instance->add(new \\Symfony\\Component\\HttpFoundation\\RequestMatcher('^/_profiler|_wdt/', NULL, NULL, NULL, array()), array('methods' => NULL, 'priorities' => array(0 => 'html', 1 => 'json'), 'fallback_format' => 'html', 'attributes' => array(), 'prefer_extension' => '2.0'));\n    $instance->add(new \\Symfony\\Component\\HttpFoundation\\RequestMatcher('^/v1', NULL, NULL, NULL, array()), array('fallback_format' => 'json', 'prefer_extension' => false, 'methods' => NULL, 'attributes' => array(), 'stop' => false, 'priorities' => array()));\n    $instance->add(new \\Symfony\\Component\\HttpFoundation\\RequestMatcher('^/', NULL, NULL, NULL, array()), array('stop' => true, 'methods' => NULL, 'attributes' => array(), 'prefer_extension' => '2.0', 'fallback_format' => 'html', 'priorities' => array()));\n\n    return $instance;\n}\n\n```\n'fos_rest.decoder_provider' => 'getFosRest_DecoderProviderService',\n            'fos_rest.format_listener' => 'getFosRest_FormatListenerService',\n            'fos_rest.format_negotiator' => 'getFosRest_FormatNegotiatorService',\n            'fos_rest.mime_type_listener' => 'getFosRest_MimeTypeListenerService',\n            'fos_rest.normalizer.camel_keys' => 'getFosRest_Normalizer_CamelKeysService',\n. ```\n/\n     * Gets the private 'fos_rest.format_negotiator' shared service.\n     \n     * @return \\FOS\\RestBundle\\Negotiation\\FormatNegotiator\n     /\n    protected function getFosRest_FormatNegotiatorService()\n    {\n        $this->services['fos_rest.format_negotiator'] = $instance = new \\FOS\\RestBundle\\Negotiation\\FormatNegotiator(${($ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->services['request_stack'] = new \\Symfony\\Component\\HttpFoundation\\RequestStack()) && false ?: ''});\n    $instance->add(new \\Symfony\\Component\\HttpFoundation\\RequestMatcher('^/_profiler|_wdt/', NULL, NULL, NULL, array()), array('methods' => NULL, 'priorities' => array(0 => 'html', 1 => 'json'), 'fallback_format' => 'html', 'attributes' => array(), 'prefer_extension' => '2.0'));\n    $instance->add(new \\Symfony\\Component\\HttpFoundation\\RequestMatcher('^/v1', NULL, NULL, NULL, array()), array('fallback_format' => 'json', 'prefer_extension' => false, 'methods' => NULL, 'attributes' => array(), 'stop' => false, 'priorities' => array()));\n    $instance->add(new \\Symfony\\Component\\HttpFoundation\\RequestMatcher('^/', NULL, NULL, NULL, array()), array('stop' => true, 'methods' => NULL, 'attributes' => array(), 'prefer_extension' => '2.0', 'fallback_format' => 'html', 'priorities' => array()));\n\n    return $instance;\n}\n\n```\n'fos_rest.decoder_provider' => 'getFosRest_DecoderProviderService',\n            'fos_rest.format_listener' => 'getFosRest_FormatListenerService',\n            'fos_rest.format_negotiator' => 'getFosRest_FormatNegotiatorService',\n            'fos_rest.mime_type_listener' => 'getFosRest_MimeTypeListenerService',\n            'fos_rest.normalizer.camel_keys' => 'getFosRest_Normalizer_CamelKeysService',\n```. Yes I delete the directories under the cache directory. The, what I'm assuming is the container class , is regenerated. A lot of these configs came from a working Symfony 2.8 but I'm pretty much finished migrating to 3.4 but it is not working because of this.. And as easy as that the issue is gone now. I will close this issue if I don't see it again soon.\nI just deleted the cache dir but I had been doing that before when I ran into the issue.. ",
    "guilemos": "+1. ",
    "yeomi": "+1. ",
    "rewieer": "This is my first commit, I don't know much about github yet. So.. Am I supposed to do something or is everything ok ? \n. This method is quite cheap I must admit, but a setGroups method requires more work, and this feature is  important. Can't we put it \"as is\" for now (it doesn't really decrease code readibility or so) and refactor the group part later ?. This method is quite cheap I must admit, but a setGroups method requires more work, and this feature is  important. Can't we put it \"as is\" for now (it doesn't really decrease code readibility or so) and refactor the group part later ?. So you want me to remove addGroup and add a setGroups function. I will try to.. So you want me to remove addGroup and add a setGroups function. I will try to.. ",
    "muffe": "I just have taken a look at what the actual problem is.\nThe getConstraints method of the FileParam Annotation looks like this\nif ($this->image) {\n    $constraints[] = new Constraints\\Image($options);\n} else {\n    $constraints[] = new Constraints\\File($options);\n}\nIn both cases the validation is obviously failing because we get an array as return value.\nI just talked with @xabbuh about two possible ways of fixing this.\n1. - my way.\nWe add a new configuration flag to the FileParam Annotation called multiple. If this is true we use the Collection constraint. Something like this https://github.com/muffe/FOSRestBundle/commit/1cc293c271bac0e7a000cdc0795ae2265875e77d\n1. - the @xabbuh way.\nIn the configuration of the name field of the FileParam we append [] to the actual name (so image-data[] instead of image-data[]) to indicate that we want to receive multiple values. While retrieving the value from the actual FileBag we would have the remove the []again.\nIn both cases we would have to filter the array in some way because we could have potential NULL values.\n. I just have taken a look at what the actual problem is.\nThe getConstraints method of the FileParam Annotation looks like this\nif ($this->image) {\n    $constraints[] = new Constraints\\Image($options);\n} else {\n    $constraints[] = new Constraints\\File($options);\n}\nIn both cases the validation is obviously failing because we get an array as return value.\nI just talked with @xabbuh about two possible ways of fixing this.\n1. - my way.\nWe add a new configuration flag to the FileParam Annotation called multiple. If this is true we use the Collection constraint. Something like this https://github.com/muffe/FOSRestBundle/commit/1cc293c271bac0e7a000cdc0795ae2265875e77d\n1. - the @xabbuh way.\nIn the configuration of the name field of the FileParam we append [] to the actual name (so image-data[] instead of image-data[]) to indicate that we want to receive multiple values. While retrieving the value from the actual FileBag we would have the remove the []again.\nIn both cases we would have to filter the array in some way because we could have potential NULL values.\n. Yeah makes sense, you'll probably want to treat them all the same.\n. ",
    "TobiasXy": "Exclusion strategies are specific to the JMSSerializer, right?\nAdding a property exclusion_strategies to the generic Context class would make it somehow specific again or did I misunderstand you there?\n. Exclusion strategies are specific to the JMSSerializer, right?\nAdding a property exclusion_strategies to the generic Context class would make it somehow specific again or did I misunderstand you there?\n. ",
    "alanhartless": "In the same boat here - ended up just downgrading to 1.8 after realizing this would be an issue as I'm also using a JMS custom exclusion strategy. \n. ",
    "podorozhny": "+1\n. ",
    "pppdns": "Same here, although I get HTML data (coming from RedirectResponse#L85)) while redirecting to the login page.\nbtw I'm using FrameworkExtraBundle's @SECURITY annotation so the code of my controller action does not even start executing, the AccessDeniedHttpException is thrown automatically and handled by Symfony\\Component\\Security\\Http\\Firewall\\ExceptionListener.\nExceptionListener then stops propagation so FOSRestBundle's ExceptionListener is not called.\nFrom the logs:\njavascript\nDEBUG - Listener \"Symfony\\Component\\Security\\Http\\Firewall\\ExceptionListener::onKernelException\" stopped propagation of the event \"kernel.exception\".\nDEBUG - Listener \"FOS\\RestBundle\\EventListener\\ExceptionListener::onKernelException\" was not called for event \"kernel.exception\".\n@geoffreytran, @bblue have you solved the problem?. ",
    "scott-r-lindsey": "Any movement on this?  Or, a suggested workaround?. Any movement on this?  Or, a suggested workaround?. ",
    "abimelex": "I couldn't found the reason for this, but I removed FOSrest from the controller and now it works. \n. I couldn't found the reason for this, but I removed FOSrest from the controller and now it works. \n. ",
    "AyrtonRicardo": "@Ener-Getick in this project I'm using configuration to \"type: rest\", but when I tryed to use \"@ParamConverter\" on getAction the serializer doesn't works because \"$request->getContentType()\" wasn't setted.\nI didn't found how to use format_listener to set default format on my request\n. @Ener-Getick in this project I'm using configuration to \"type: rest\", but when I tryed to use \"@ParamConverter\" on getAction the serializer doesn't works because \"$request->getContentType()\" wasn't setted.\nI didn't found how to use format_listener to set default format on my request\n. @Ener-Getick No problem xD \nI was using Postman to make requests and the default Request is empty. \nAnyway the tests that failed on Windows were fixed xD\n. @Ener-Getick No problem xD \nI was using Postman to make requests and the default Request is empty. \nAnyway the tests that failed on Windows were fixed xD\n. @Ener-Getick sorry about the delay. I agree with you, then the code was reverted.\n. I understood, but $this->isDecodeable doesn't supports \"GET\" method, causing error on deserialization.\n. if $request->getContentType() stay empty the deserialization will fail again xD \n. ",
    "gatmanmihai": "until it is not fixed, try to use instead of nullable=true this default={}\nBefore\n* @REST\\RequestParam(map=true, name=\"images\", description=\"Images\", nullable=true)\nAfter\n* @REST\\RequestParam(map=true, name=\"images\", description=\"Images\", default={})\n. ",
    "senkal": "@Ener-Getick sure, will do.\nDo you want to use VarDumper all the time(even for string) or just when the invalid value is not scalar?\n. I am not sure from which branch should I create the PR, 2.0 or master?\nDo you have any contribute guide?\nIf so, sorry, I can't find it.\n. Just to be sure, I will need to add this dependency.\nI don't see Symfony var-dumper inside composer.\nThen just call dump() or use some more advanced formatting?\nMaybe just var_export will be fine, looks like a lot of hassle to just dump a variable.\n. In the end, the best way to format exception message is to catch the right Exception class and do the formatting on your own, thanks to Symfony Violation list for example.\nHere is just- do not break the app when using the use case I covered, simple var_export is fine probably.\nWill do it.\n. @Ener-Getick ~~I am afraid I need some help with it.~~\n~~I am not sure what to run.~~\n~~I downloaded php-cs-fixer, since you have the configuration for it in your project, and run fix.~~\n~~It used your configuration file(.php_cs) and fix the file when there is an issue.~~\nNvm, my mistake. Missed one file.\n. ",
    "qdequippe": "+1 to have custom messages\n. ",
    "lolmx": "The Travis build fails because the tests explicitly expect the message You are not authenticated for  UnauthorizedHttpException and HttpException.\nShould we allow custom messages for those two exceptions too (need updating the tests here) or not?\n. I don't know if the listener is still needed, but it's actually used.\nHere it's declared as a service.\nAnd because of the priority, the AccessDeniedListener will be called before the ExceptionListener. Once in the ExceptionListener, my custom message is lost yet, replaced by the You do not have the necessary permissionsmessage.\n. Indeed, I got my messages thanks :)\nShould I close this PR?\n. ",
    "snebes": "Did you verify that the routes are in prod, too?\nphp bin/console debug:router --env prod\n. ",
    "payene": "I have the same problem. In my case the route is available also in production .\nAny suggestions ?. All right ! i just clear the cache and it works !\nThanks. ",
    "greg0ire": "\nWe should maybe release 2.1 sooner...\n\nYes please! This bug is kind of deal-breaker if you're using the Symfony Serializer\n. > Maybe that's gonna look hacky\nYeah, a bit :laughing: \u2026 but that's an idea.\nI think there must be some kind of thing that reads annotations, then calls some method on a class to register the parameters. Not sure how it works, but maybe you do? I was hoping it was not tightly coupled with annotations.\nI was wondering if this method is the one I should call to add parameters programmatically. If yes I think the way to go would be to implement ParamReaderInterface myself\u2026 is that right?\nIf yes, maybe there is a design problem here (or a naming problem). IMHO, the FOSRestBundle\\Controller\\Annotations namespace would be better of if the Annotations was replaced with something not tied to a particular driver. But that's a wider problem I guess.\n. > You can add parameters using addParameter if you don't want to use an annotation of course (btw you could extend QueryParam and fill its properties as you need in the constructor and then inject the parameter dynamically).\nI'm indeed quite reluctant to use an annotation. I think these are great when you write something in RAD mode, but if you need flexibility like a library does, you shouldn't use annotations IMO : \n- They're by nature not dynamic.\n- They annotate something, which means they are very tightly coupled to it.\nI know maintaining things is hard, so I'm not suggesting FOSRest should support XML or YAML for this, but I think it should support php for this. Maybe it already does, if yes I'll probably contribute a documentation article to show how to do this.\n\nFrom what i know doctrine injects values directly in the annotation (that's why parameters are public) and that's why it's really hard to provide a smooth path for annotations.\n\nI think this happens here, so maybe I just need to write an implementation of ParamReaderInterface that will just return a hardcoded array of annotations. It will feel weird because I won't be using annotation at all, that's why I suggested there's probably a problem with the Annotations namespace. IMO, it should be Metadata, just like in doctrine. If I can do that, I'll just need to figure out how to use my implementation of instead of the other one. Otherwise I'll probably do what you suggest.\n. > This is doable, however i'm not sure that's worth it.\nAt the moment it probably isn't but, it might be a good thing to keep it mind if the library evolves towards more flexibility one day.\n\nUsing php is already possible, just not very user friendly.\n\nI'll try that and keep you posted. In the meantime, I'm going to close this, there is no need to keep it open IMO. Thanks for the help!\n. lol, I should have checked before approving. ",
    "goetas": "it would be good to have a test for this\n. > The problem is that we can't know now if the value has been manually defined or not.\ndoes it matter? isn't just serializeNulls|doNotSerializeNulls ? does FOSRestBundle adds a third case when instead a Boolean there is a null ?\n. @stof  i see, ok, now the existing value is always a boolean, and by default is false.\n. I'm not the best expert in how to deal with BC breaks, but does it make sense revert https://github.com/schmittjoh/serializer/pull/317 and create a 1.3.1 release? \nI think this will be the simplest solution. @schmittjoh was concerned too with this PR https://github.com/schmittjoh/serializer/pull/317#issuecomment-238610981\nMy bad, I've merged it\n. Created PR https://github.com/schmittjoh/serializer/pull/630 to revert the feature\n. https://github.com/schmittjoh/serializer/releases/tag/1.3.1 BC break reverted.\nto be safe probably on composer can be added a conflict with the version 1.3.0\n. This should go in 2.0 branch I guess\n. solved . > Oh, can you add an entry to the changelog?\nthere is no section for the 2.0 branch in https://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/CHANGELOG.md and the file looks almost one year old.. @GuilhemN I think the best approach is to keep this as it is and optimize the handler in a different PR.\nIMO this is ready for rewiew or merge if it looks OK to you . yay!. do you want me to remove them or is it ok as it is?. done. done. ~~hmmm... curios why this test was green then...~~ :confused: . ah, it did not https://travis-ci.org/FriendsOfSymfony/FOSRestBundle/jobs/235667634 :confused:  :confused:  :confused:  :confused: . fixed, thanks. This was not easy to spot at all. Introduced with https://github.com/symfony/symfony/pull/25471 and that was the reason of some failing tests. right! Will do!. This is a interesting question, and I had this problem multiple times with optional dependencies.\nGenerally yes, sounds a good idea! Any idea of possible side effects?. > Is version 1 of JMSSerializerBundle still maintained or is it already recommended to update?\nJMSSerializerBundle 1.x is not maintained anymore. > A conflict rule would mean that people using JMSSerializerBundle 1, but not its integration into FOSRestBundle will not be able to update to the next release of FOSRestBundle. I am not sure we really want to prevent that.\nsomebody is using jms + fos, but without integration....sounds weird to me. Probably a conflict rule is ok.. As this was used for the exception handler, will it make sense to limit this behavior only for classes extending Exception ?\nPerformance of this loop are really impacting serialization performance.... I have already pushed the changes. ",
    "bendavies": "@Ener-Getick not sure i follow. can you expand?\n. I see what you mean. so how can we support both 1.2 and 1.3 of jms serializer?\n. Will do.\nOn Tue, 23 Aug 2016, 18:36 Guilhem N, notifications@github.com wrote:\n\n@goetas https://github.com/goetas thanks ! Can you update your pr\n@bendavies https://github.com/bendavies ? :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/1557#issuecomment-241812279,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAmK8KKWVOGlEwOL5Aj37lRwyScTazoyks5qiy-ggaJpZM4Jq4Du\n.\n. @Ener-Getick how's that\n. hold on, that doesn't work.\n. well according to https://getcomposer.org/doc/articles/versions.md\n\"jms/serializer\":                 \"~0.13|~1.0, !=1.3.0\",\nshould work, but it doesn't.\n(confirmed it doesn't work by trying to exclude 1.3.1, but 1.3.1 is still installed)\n\nAny ideas?\n. i did, removed vendor and composer.lock and reinstalled. can you try it?\n. @Seldaek sorry for the ping, any ideas?\n. seems like a bug in the solver to me\nworks:\n\"jms/serializer\":                 \"~1.0 <>1.3.1\",\ndoes not work:\n\"jms/serializer\":                 \"~0.13|~1.0 <>1.3.1\",\n. fixed by not using the tilde operator and being verbose in the constraint.\nwill raise a issue with composer\n. still not fixed, can't get the conflict to work, do not merge.\n. https://github.com/composer/composer/issues/5616\nhttps://github.com/composer/composer/issues/5617\n. @Ener-Getick think this is good for merge now.\n. sure\n. i'm not sure 2.0 suffers from the bug...need to check\n. ",
    "glickel": "You're welcome :)\n. ",
    "warlock39": "@Ener-Getick , thank for your feedback.\nAccording to description of referenced issue: #1569 , the condition in Routing/Loader/Reader/RestActionReader.php#L430 filters any class methods without Action suffix. So there are two options to get manual routing work:\n1. Register additional routing resource (example: resource: '@AppBundle/Controller/' with type: annotation) in routing.yml\n2. Add Action suffix to method name with custom route annotation\nDocumentation says nothing about it.\nIf i overlooked something, please let me know. \n. ",
    "edefimov": "@tael No, it's not gone, it looks like a bug in the bundle. This PR fixes this issue\n. Yes. Well, the whole picture is that in the lines 329-332 the configuration is injected into the service as is and only after that the constants are actually replaced with their values. So, I think the complete fix should remove the substitution logic from extension and move exception class validation from extension into configuration.\n. Yes. Well, the whole picture is that in the lines 329-332 the configuration is injected into the service as is and only after that the constants are actually replaced with their values. So, I think the complete fix should remove the substitution logic from extension and move exception class validation from extension into configuration.\n. Done\n. Done\n. Yes, thanks, with 2.2.1 works well. \n@xabbuh, I suggest to add this into composer.json:\njson\n    \"conflict\": {\n        \"willdurand/negotiation\": \"2.2.0\"\n    },\n. It could be a very relyable test :) \n. ",
    "JornEngelbart": "Okay, after some research I think it would be better to have a configuration option to accept or not accept form content types. Will create pull request with my current solution\n. I also fixed this for the 1.7 branch. Should I create another pull request for this?\n. @Ener-Getick Because there is a csrf vulnerability when doing a POST request to an endpoint that does not require any request body. When a user is already logged in a malicious form could cause the user to perform actions that he did not intent to do.\n. @Ener-Getick Seems inconsistent to me. There is an option to throw exceptions when a content-type is not supported. But at the same time two \"special\" content-types, namely the forms, are always supported.\n. @Ener-Getick Implementing an own listener is no problem. But IMO if you give an option to throw an exception on unsupported content-types it would be rather logical to be able to support or not support any content-type including forms (whether or not they are managed by PHP, these are content-types). Right?\n. @Ener-Getick Would it be an idea to create an option to only use normalisation and not the rest of the bodylistener implementation for non-REST routes?\n. ",
    "ChristianVermeulen": "@Ener-Getick I just upgraded to 2.0 and created a handler for JmsSerializer but it is still not picking up the status code.. In my serialisation method I create an array and pass it on to the visitor:\n```\n// Format and return desired message\n$response = [\n    'status_code' => $customException->getStatusCode(),\n    'message' => $customException->getMessage(),\n    'type' => $customException->getMessageType(),\n    'baseExceptionClass' => $customException->getBaseExceptionClass()\n];\n$visitor->visitArray($response, $type, $context);\n```\nThe output I get in the body is a nice json, but the actual http status code is still 500 instead of the one I've set (400):\n\nHow do I get FosRestBundle to pickup the status_code from my exceptions just as it does with HttpException's?\nPS: The $customException is still an exception extending from HttpException.\n. But this means I need to config every exception we make / throw hardcoded... That is not a viable option. We need it to be dynamic. This list of exceptions can grow fairly quickly in a moderate sized API! It will turn into a very unmaintainable list...\n. ",
    "cyrilchapon": "Oh realy ? Didn't know that.\nAny reference ? Thanks for information :)\n. ",
    "valepu": "because i'd like to have all the stuff in the request as function arguments, which is what happens when i use Spring + Jackson\n. That is not an answer though, does it mean there's no chance to serialize an array as function argument using FosRestBundle right now? Not even an alternative way to implement it by myself?\n. I'm not sure i'm making myself clear. \nIf I try to serialize an array instead of an object using a configuration that works fine with objects, i get this error:\n{\n  \"code\": 500,\n  \"message\": \"Converter 'fos_rest.request_body' does not support conversion of parameter 'myArr'.\"\n}\nTo me this sounds like that the fos_rest.request_body converter is not able to serialize arrays at all. \nIs this correct? \nIs this a bug?\nWhy is it so?\nIf this is not a bug, why it is not possible to serialize arrays using the fos_rest.request_body converter?\nI'm sorry for the several questions but i want to make sure i'm understanding this right \n. Wouldn't that imply that i won't be able to use it as a function argument?\n. Ok, i think i'm actually going to make an object with an array inside, there won't be many use cases where i'll be sending an array but thanks for your suggestions.\nBut my question, which has not been answered yet, still stands: why the fos_rest.request_body converter does not offer json array conversion? \nI've seen that symfony does not populate the \"class\" parameter in the configuration object when calling the \"support\" method of the converter if the controller argument function is type hinted as array (and probably it happens the same for any kind of primitive type) but watching the code of the RequestBodyParamConverter i don't think it'd be that hard to implement array/primitive conversion, probably the hardest thing would be to implement array of objects conversion\n. Apparently there's no need to implement a param converter of my own or do any hacky thing. \nIf you have the JMS Serializer (which i think almost everybody has) all you need to do to convert an array is to put \"array\" in the class field of the paramconverter. \nOn top of that, if you write array<Namespace/Class> it will also deserialize arrays of objects (as long as they are the same class, i suppose)\n. Apparently there's no need to implement a param converter of my own or do any hacky thing. \nIf you have the JMS Serializer (which i think almost everybody has) all you need to do to convert an array is to put \"array\" in the class field of the paramconverter. \nOn top of that, if you write array<Namespace/Class> it will also deserialize arrays of objects (as long as they are the same class, i suppose)\n. ",
    "yagobski": "Please release this commit soon ! Thanks\n. ",
    "ddeboer": "Ran into this as well. Adding this to the docs in #1651.. @xabbuh Even better, of course!. ",
    "toby-griffiths": "@xabbuh Thank you.\n. ",
    "IndraGunawan": "@GuilhemN i think this issue can be closed\n. i can't add @expectedExceptionMessage because of i'm using @dataProvider so the exception message may be difference for every test files.\nfor example:\n- when exception catcby ParseException, the exception message is 'The file \"/home/your/path/bad_format.yml\" does not contain valid YAML' RestYamlCollectionLoader.php\n- when the value of the routes file is not array, the exception message is 'The file \"/home/your/path/nonvalid2.yml\" must contain a YAML array.' RestYamlCollectionLoader.php\ni need to split the test to use @expectedExceptionMessage, how about this?\n. this test for this\n. Ok. i will make seperate test for this. :D\n. how about if i add deprecated trigger_error to this section?\n. i just add available method of FOS\\RestBundle\\View\\View.\nits better to remove from doc?\n. done :D\n. it would be * getContext() - The serialization context to use.\nor you have another opinion?\n. ok. i will change it\n. ",
    "adiachenko": "I apologize. It seems like when testing things out I accidentally left a format specifier in a URI (i.e. /api/users.json instead of /api/users) which resulted in the above problem. \nIf you call the route like normally would, FOSRestBundle won't override default Exception handling behavior and you'll get your normal Twig error pages.\nI'll leave this comment for future reference in case someone else encounters the same issue and close the topic.\n. ",
    "alcaeus": "TBH, I don't understand why you shouldn't be able to overwrite them. Merging them would not make sense, but not allowing them to be overwritten at all seems weird. Note that this doesn't just affect the default prod/dev config files, but any configuration that includes another config file (for whatever reason that may be).. @lsmith77 @GuilhemN any chance this will get merged or would you rather document why configuration shouldn't be overwritten or merged?. @lsmith77 @GuilhemN any chance this will get merged or would you rather document why configuration shouldn't be overwritten or merged?. Looks like I missed both this pull requests' birthday as well as the 2.3.0 release. Is this something that could make it into 2.3.1?. Looks like I missed both this pull requests' birthday as well as the 2.3.0 release. Is this something that could make it into 2.3.1?. @GuilhemN any plans to merge this or do you want me to just close it?. @GuilhemN any plans to merge this or do you want me to just close it?. Thanks for merging this @xabbuh! \u2764\ufe0f . Thanks for merging this @xabbuh! \u2764\ufe0f . ",
    "adpauly": "Thanks to you!. ",
    "kubaceg": "Hi, I also had a problem with name_prefix, which is supplied in documentation, and because of that I think it's good idea to fix it.\nOn the other side IMHO routes prefixing by controller name should be default behaviour. And I there is PR providing such functionality https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1759.. ",
    "numediaweb": "I fixed it temporary by disabling the jpg and png mime types in config.yml\n```\nFOS REST Bundle\nfos_rest:\n    body_listener: true\n    format_listener:  true\n    param_fetcher_listener: true\n    view:\n        view_response_listener: 'force'\n        formats:\n            jsonp: true\n            json: true\n            xml: false\n            rss: false\n        mime_types:\n            json: ['application/json', 'application/x-json']\n            #jpg: 'image/jpeg'\n            #png: 'image/png'\n        jsonp_handler: ~\n```. see also: https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1896. I found a fix: https://stackoverflow.com/questions/50676160/symfony-restbundle-view-annotation-stopped-working-after-v2-upgrade\nMaybe documentation update?. ",
    "NaeiKinDus": "Thanks for the help but I think the controller is of no help here (you do not seem to deal with JSON data at all, especially the POST body request part). I've tried tinkering with the parameters, no luck so far :-/. OK I think I understood; I can \"describe\" the way I expect data to be passed in JSON using \\@RequestParam and then fetch them. But what next ? $form->handleRequest() requires a request object, and I only know this way to check whether a form is valid or not. The other way I an currently trying to implement is using JMSSerializer to serialize $request->getContent() and output an entity and later on call a \"validate\" using the validator to get possible issues.. OK thanks to you I got it working ! I still have to handle the error retrieving part by myself, but at least I can offer clients a useful error message. Thanks a lot for taking time to help me through that :+1: \nUpdated action:\n```php\n    /\n     * @Route(\"/customers\")\n     * @ApiDoc(\n     *      resource=false,\n     *      input=\"NetDev\\CoreBundle\\Form\\CustomerType\",\n     *      description=\"Create a new customer\",\n     *      section=\"Customers\",\n     *      statusCode={\n     *          201=\"Action successful\",\n     *          403=\"Authorization required but incorrect / missing information or insufficient rights\",\n     *          500=\"Returned if action failed for unknown reasons\"\n     *      }\n     *  )\n     \n     * @View(template=\"NetDevRestBundle:Common:form_error.json.twig\", templateVar=\"errors\", statusCode=400)\n     \n     * @RequestParam(name=\"customerName\", nullable=false)\n     * @RequestParam(name=\"customerIndex\", nullable=false)\n     \n     * @return \\FOS\\RestBundle\\View\\View\n     /\n    public function postCustomerAction(ParamFetcher $fetcher)\n    {\n        $customer = new Customer();\n        $form = $this->getForm($customer);\n        $form->submit($fetcher->all(), true);\n    if ($form->isValid()) {\n        $manager = $this->getManager();\n        $manager->create($customer);\n\n        return $this->redirectView($this->generateUrl('api_get_customer_internal', ['uuid' => $customer->getInternalUuid()], true), 201);\n    }\n\n    $err = $form->getErrors();\n    $errorsList = [];\n    foreach ($err as $it) {\n        $errorsList[(string)$it->getOrigin()->getPropertyPath()] = $it->getMessage();\n    }\n\n    return $this->view([$errorsList])\n        ->setTemplateVar('errors')\n        ;\n}\n\n```. I know, thanks, but I prefer explicit declaration over implicit.. I know, thanks, but I prefer explicit declaration over implicit.. ",
    "lukaszgoworko": "@NaeiKinDus You do not need @Route Annotation if you implement ClassResourceInterface\nsee: https://symfony.com/doc/master/bundles/FOSRestBundle/5-automatic-route-generation_single-restful-controller.html#define-resource-actions. @NaeiKinDus You do not need @Route Annotation if you implement ClassResourceInterface\nsee: https://symfony.com/doc/master/bundles/FOSRestBundle/5-automatic-route-generation_single-restful-controller.html#define-resource-actions. ",
    "Yoann53": "Yes, sorry :\n{\n  \"error\": {\n    \"code\": 500,\n    \"message\": \"Internal Server Error\",\n    \"exception\": [\n      {\n        \"message\": \"Catchable Fatal Error: Argument 1 passed to App\\\\HttpFoundation\\\\ControllerResultConverter\\\\NullResult::__construct() must implement interface JMS\\\\Serializer\\\\SerializerInterface, instance of Symfony\\\\Component\\\\Serializer\\\\Serializer given, called in /Applications/MAMP/htdocs/MoovTime-V2/var/cache/dev/appDevDebugProjectContainer.php on line 696 and defined\",\n        \"class\": \"Symfony\\\\Component\\\\Debug\\\\Exception\\\\ContextErrorException\",\n        \"trace\": [\n          {\n            \"namespace\": \"\",\n            \"short_class\": \"\",\n            \"class\": \"\",\n            \"type\": \"\",\n            \"function\": \"\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/src/App/HttpFoundation/ControllerResultConverter/NullResult.php\",\n            \"line\": 15,\n            \"args\": []\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\Debug\",\n            \"short_class\": \"ErrorHandler\",\n            \"class\": \"Symfony\\\\Component\\\\Debug\\\\ErrorHandler\",\n            \"type\": \"->\",\n            \"function\": \"handleError\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/src/App/HttpFoundation/ControllerResultConverter/NullResult.php\",\n            \"line\": 15,\n            \"args\": [\n              [\n                \"string\",\n                \"4096\"\n              ],\n              [\n                \"string\",\n                \"Argument 1 passed to App\\\\HttpFoundation\\\\ControllerResultConverter\\\\NullResult::__construct() must implement interface JMS\\\\Serializer\\\\SerializerInterface, instance of Symfony\\\\Component\\\\Serializer\\\\Serializer given, called in /Applications/MAMP/htdocs/MoovTime-V2/var/cache/dev/appDevDebugProjectContainer.php on line 696 and defined\"\n              ],\n              [\n                \"string\",\n                \"/Applications/MAMP/htdocs/MoovTime-V2/src/App/HttpFoundation/ControllerResultConverter/NullResult.php\"\n              ],\n              [\n                \"string\",\n                \"15\"\n              ],\n              [\n                \"array\",\n                []\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"App\\\\HttpFoundation\\\\ControllerResultConverter\",\n            \"short_class\": \"NullResult\",\n            \"class\": \"App\\\\HttpFoundation\\\\ControllerResultConverter\\\\NullResult\",\n            \"type\": \"->\",\n            \"function\": \"__construct\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/var/cache/dev/appDevDebugProjectContainer.php\",\n            \"line\": 696,\n            \"args\": [\n              [\n                \"object\",\n                \"Symfony\\\\Component\\\\Serializer\\\\Serializer\"\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"\",\n            \"short_class\": \"appDevDebugProjectContainer\",\n            \"class\": \"appDevDebugProjectContainer\",\n            \"type\": \"->\",\n            \"function\": \"getApp_EventListener_ViewService\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Container.php\",\n            \"line\": 275,\n            \"args\": []\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\DependencyInjection\",\n            \"short_class\": \"Container\",\n            \"class\": \"Symfony\\\\Component\\\\DependencyInjection\\\\Container\",\n            \"type\": \"->\",\n            \"function\": \"get\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/ContainerAwareEventDispatcher.php\",\n            \"line\": 181,\n            \"args\": [\n              [\n                \"string\",\n                \"app.event_listener.view\"\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\EventDispatcher\",\n            \"short_class\": \"ContainerAwareEventDispatcher\",\n            \"class\": \"Symfony\\\\Component\\\\EventDispatcher\\\\ContainerAwareEventDispatcher\",\n            \"type\": \"->\",\n            \"function\": \"lazyLoad\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/ContainerAwareEventDispatcher.php\",\n            \"line\": 127,\n            \"args\": [\n              [\n                \"string\",\n                \"kernel.view\"\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\EventDispatcher\",\n            \"short_class\": \"ContainerAwareEventDispatcher\",\n            \"class\": \"Symfony\\\\Component\\\\EventDispatcher\\\\ContainerAwareEventDispatcher\",\n            \"type\": \"->\",\n            \"function\": \"getListeners\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php\",\n            \"line\": 241,\n            \"args\": [\n              [\n                \"string\",\n                \"kernel.view\"\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\EventDispatcher\\\\Debug\",\n            \"short_class\": \"TraceableEventDispatcher\",\n            \"class\": \"Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher\",\n            \"type\": \"->\",\n            \"function\": \"preProcess\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php\",\n            \"line\": 131,\n            \"args\": [\n              [\n                \"string\",\n                \"kernel.view\"\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\EventDispatcher\\\\Debug\",\n            \"short_class\": \"TraceableEventDispatcher\",\n            \"class\": \"Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher\",\n            \"type\": \"->\",\n            \"function\": \"dispatch\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/HttpKernel.php\",\n            \"line\": 149,\n            \"args\": [\n              [\n                \"string\",\n                \"kernel.view\"\n              ],\n              [\n                \"object\",\n                \"Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\GetResponseForControllerResultEvent\"\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\HttpKernel\",\n            \"short_class\": \"HttpKernel\",\n            \"class\": \"Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel\",\n            \"type\": \"->\",\n            \"function\": \"handleRaw\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/HttpKernel.php\",\n            \"line\": 64,\n            \"args\": [\n              [\n                \"object\",\n                \"Symfony\\\\Component\\\\HttpFoundation\\\\Request\"\n              ],\n              [\n                \"string\",\n                \"1\"\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\HttpKernel\",\n            \"short_class\": \"HttpKernel\",\n            \"class\": \"Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel\",\n            \"type\": \"->\",\n            \"function\": \"handle\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php\",\n            \"line\": 169,\n            \"args\": [\n              [\n                \"object\",\n                \"Symfony\\\\Component\\\\HttpFoundation\\\\Request\"\n              ],\n              [\n                \"string\",\n                \"1\"\n              ],\n              [\n                \"boolean\",\n                true\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\HttpKernel\",\n            \"short_class\": \"Kernel\",\n            \"class\": \"Symfony\\\\Component\\\\HttpKernel\\\\Kernel\",\n            \"type\": \"->\",\n            \"function\": \"handle\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/web/app_dev.php\",\n            \"line\": 11,\n            \"args\": [\n              [\n                \"object\",\n                \"Symfony\\\\Component\\\\HttpFoundation\\\\Request\"\n              ]\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\nIt is happening when FOSRestBundle tries to serialise stuff. When I use custom serialization, I use symfony serializer for the \"normalize\" method and that works with enable_short_alias to false.. Yes, sorry :\n{\n  \"error\": {\n    \"code\": 500,\n    \"message\": \"Internal Server Error\",\n    \"exception\": [\n      {\n        \"message\": \"Catchable Fatal Error: Argument 1 passed to App\\\\HttpFoundation\\\\ControllerResultConverter\\\\NullResult::__construct() must implement interface JMS\\\\Serializer\\\\SerializerInterface, instance of Symfony\\\\Component\\\\Serializer\\\\Serializer given, called in /Applications/MAMP/htdocs/MoovTime-V2/var/cache/dev/appDevDebugProjectContainer.php on line 696 and defined\",\n        \"class\": \"Symfony\\\\Component\\\\Debug\\\\Exception\\\\ContextErrorException\",\n        \"trace\": [\n          {\n            \"namespace\": \"\",\n            \"short_class\": \"\",\n            \"class\": \"\",\n            \"type\": \"\",\n            \"function\": \"\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/src/App/HttpFoundation/ControllerResultConverter/NullResult.php\",\n            \"line\": 15,\n            \"args\": []\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\Debug\",\n            \"short_class\": \"ErrorHandler\",\n            \"class\": \"Symfony\\\\Component\\\\Debug\\\\ErrorHandler\",\n            \"type\": \"->\",\n            \"function\": \"handleError\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/src/App/HttpFoundation/ControllerResultConverter/NullResult.php\",\n            \"line\": 15,\n            \"args\": [\n              [\n                \"string\",\n                \"4096\"\n              ],\n              [\n                \"string\",\n                \"Argument 1 passed to App\\\\HttpFoundation\\\\ControllerResultConverter\\\\NullResult::__construct() must implement interface JMS\\\\Serializer\\\\SerializerInterface, instance of Symfony\\\\Component\\\\Serializer\\\\Serializer given, called in /Applications/MAMP/htdocs/MoovTime-V2/var/cache/dev/appDevDebugProjectContainer.php on line 696 and defined\"\n              ],\n              [\n                \"string\",\n                \"/Applications/MAMP/htdocs/MoovTime-V2/src/App/HttpFoundation/ControllerResultConverter/NullResult.php\"\n              ],\n              [\n                \"string\",\n                \"15\"\n              ],\n              [\n                \"array\",\n                []\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"App\\\\HttpFoundation\\\\ControllerResultConverter\",\n            \"short_class\": \"NullResult\",\n            \"class\": \"App\\\\HttpFoundation\\\\ControllerResultConverter\\\\NullResult\",\n            \"type\": \"->\",\n            \"function\": \"__construct\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/var/cache/dev/appDevDebugProjectContainer.php\",\n            \"line\": 696,\n            \"args\": [\n              [\n                \"object\",\n                \"Symfony\\\\Component\\\\Serializer\\\\Serializer\"\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"\",\n            \"short_class\": \"appDevDebugProjectContainer\",\n            \"class\": \"appDevDebugProjectContainer\",\n            \"type\": \"->\",\n            \"function\": \"getApp_EventListener_ViewService\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Container.php\",\n            \"line\": 275,\n            \"args\": []\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\DependencyInjection\",\n            \"short_class\": \"Container\",\n            \"class\": \"Symfony\\\\Component\\\\DependencyInjection\\\\Container\",\n            \"type\": \"->\",\n            \"function\": \"get\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/ContainerAwareEventDispatcher.php\",\n            \"line\": 181,\n            \"args\": [\n              [\n                \"string\",\n                \"app.event_listener.view\"\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\EventDispatcher\",\n            \"short_class\": \"ContainerAwareEventDispatcher\",\n            \"class\": \"Symfony\\\\Component\\\\EventDispatcher\\\\ContainerAwareEventDispatcher\",\n            \"type\": \"->\",\n            \"function\": \"lazyLoad\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/ContainerAwareEventDispatcher.php\",\n            \"line\": 127,\n            \"args\": [\n              [\n                \"string\",\n                \"kernel.view\"\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\EventDispatcher\",\n            \"short_class\": \"ContainerAwareEventDispatcher\",\n            \"class\": \"Symfony\\\\Component\\\\EventDispatcher\\\\ContainerAwareEventDispatcher\",\n            \"type\": \"->\",\n            \"function\": \"getListeners\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php\",\n            \"line\": 241,\n            \"args\": [\n              [\n                \"string\",\n                \"kernel.view\"\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\EventDispatcher\\\\Debug\",\n            \"short_class\": \"TraceableEventDispatcher\",\n            \"class\": \"Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher\",\n            \"type\": \"->\",\n            \"function\": \"preProcess\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php\",\n            \"line\": 131,\n            \"args\": [\n              [\n                \"string\",\n                \"kernel.view\"\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\EventDispatcher\\\\Debug\",\n            \"short_class\": \"TraceableEventDispatcher\",\n            \"class\": \"Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher\",\n            \"type\": \"->\",\n            \"function\": \"dispatch\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/HttpKernel.php\",\n            \"line\": 149,\n            \"args\": [\n              [\n                \"string\",\n                \"kernel.view\"\n              ],\n              [\n                \"object\",\n                \"Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\GetResponseForControllerResultEvent\"\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\HttpKernel\",\n            \"short_class\": \"HttpKernel\",\n            \"class\": \"Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel\",\n            \"type\": \"->\",\n            \"function\": \"handleRaw\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/HttpKernel.php\",\n            \"line\": 64,\n            \"args\": [\n              [\n                \"object\",\n                \"Symfony\\\\Component\\\\HttpFoundation\\\\Request\"\n              ],\n              [\n                \"string\",\n                \"1\"\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\HttpKernel\",\n            \"short_class\": \"HttpKernel\",\n            \"class\": \"Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel\",\n            \"type\": \"->\",\n            \"function\": \"handle\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php\",\n            \"line\": 169,\n            \"args\": [\n              [\n                \"object\",\n                \"Symfony\\\\Component\\\\HttpFoundation\\\\Request\"\n              ],\n              [\n                \"string\",\n                \"1\"\n              ],\n              [\n                \"boolean\",\n                true\n              ]\n            ]\n          },\n          {\n            \"namespace\": \"Symfony\\\\Component\\\\HttpKernel\",\n            \"short_class\": \"Kernel\",\n            \"class\": \"Symfony\\\\Component\\\\HttpKernel\\\\Kernel\",\n            \"type\": \"->\",\n            \"function\": \"handle\",\n            \"file\": \"/Applications/MAMP/htdocs/MoovTime-V2/web/app_dev.php\",\n            \"line\": 11,\n            \"args\": [\n              [\n                \"object\",\n                \"Symfony\\\\Component\\\\HttpFoundation\\\\Request\"\n              ]\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\nIt is happening when FOSRestBundle tries to serialise stuff. When I use custom serialization, I use symfony serializer for the \"normalize\" method and that works with enable_short_alias to false.. Sorry guys, I'm late about this discussion, my FOSRestBundle configuration in my config.yml :\nfos_rest:\n    param_fetcher_listener: true\nThat's all.. No I always get the same trace, even with modifications of #1622. Well, that's works ! Sorry, I have not tried that. It's in the first file to see in the trace, I am feeling quiet stupid now :s, I need to inject @jms_serializer.serializer instead of @serializer in my Resources/config/services/http.yml in both services :\nservices:\n    app.http_foundation.controller_result_converter.null_result:\n        public: false\n        class: App\\HttpFoundation\\ControllerResultConverter\\NullResult\n        arguments:\n            - '@jms_serializer.serializer'\napp.http_foundation.controller_result_converter.last_modified_result:\n    public: false\n    class: App\\HttpFoundation\\ControllerResultConverter\\LastModifiedResult\n\napp.http_foundation.controller_result_converter.serializable_result:\n    public: false\n    class: App\\HttpFoundation\\ControllerResultConverter\\SerializableResult\n    arguments:\n        - '@jms_serializer.serializer'\n        - '@security.token_storage'\n\nI am working on an existing project. Could you confirm me HTTPFoundation directory is a manually added directory in my project or an added directory by fos_rest bundle installation ? In that case, I think it would be easier to use that feature if it is noted in the bundle documentation.\nThanks for your time.. Ok thanks !. ",
    "alfupe": "Hi, take a look at #1662. I had a similar issue.. Finally I solved it. For anyone with the same doubt the related entities must have defined groups also.\nI have defined some groups for the action findById, in this case using serializerGroups in the @View annotation:\nphp\n/**\n * @Rest\\Get(\"/events/{id}\")\n * @Rest\\View(serializerGroups={\"default\", \"detail\"})\n * ...\n * @return View\n */\npublic function findById($id)\n{\n   ...\n}\nSo, the Ticket entity must define any property under any of the default or detail groups, if not the related Tickets will be empty.\nIt is not an issue so it can be closed. Sorry.. ",
    "achasseux": "You can keep the default serializer of symfony. No need of JMSSerializer.\nYou may have forgotten to activate the annotations of serializer in config.yml (https://symfony.com/doc/current/serializer.html#using-serialization-groups-annotations)\n```\napp/config/config.yml\nframework:\n    ....\n    serializer: { enable_annotations: true }\n```\nIt is necessary to force the view_response_listener in config.yml (http://symfony.com/doc/master/bundles/FOSRestBundle/3-listener-support.html, http://symfony.com/doc/master/bundles/FOSRestBundle/view_response_listener.html)\n```\napp/config/config.yml\nfos_rest:\n    view:\n        view_response_listener: 'force'\n```\nThat should work !. ",
    "qweluke": "It tunrs out that this is a problem with JMSSerializer. Solved with this:\n/**\n     * Contains user roles\n     *\n     * @Expose\n     * @Accessor(getter=\"getRoles\",setter=\"setRoles\")\n     * @JMS\\Groups({\"ROLE_USER\",\"ROLE_ADMIN\"})\n     */\n    protected $roles;. It tunrs out that this is a problem with JMSSerializer. Solved with this:\n/**\n     * Contains user roles\n     *\n     * @Expose\n     * @Accessor(getter=\"getRoles\",setter=\"setRoles\")\n     * @JMS\\Groups({\"ROLE_USER\",\"ROLE_ADMIN\"})\n     */\n    protected $roles;. ",
    "Aliance": "+1 for updating the changelog file.. +1 for updating the changelog file.. Any ideas why the enable key was missed before?\nShould I just add it to expected array?. Can't understand you idea. As I saw, there are two steps:\n1. unset key enabled from array $v*\n2. set array $v to ['enabled' => ...]\nSo the first step seems to be redundant, because of second step always add enabled key. Where am I wrong?\nClose pr?. Does Symfony leads PSR-2?\n\nWhen the argument list is split across multiple lines, the closing parenthesis and opening brace MUST be placed together on their own line with one space between them.\n\nhttp://www.php-fig.org/psr/psr-2/#method-arguments. ",
    "chosroes": "@juillerat I don't have this annotation but the error is nevertheless present\nBut I use some like that @QueryParam(map=true, name=\"sort\", requirements=@Sort, allowBlank=false, default={Sort::DEFAULT_FIELD : Sort::DEFAULT_ORDER}). When I don't use --optimize-autoloader on composer install it's ok, otherwise not.. ",
    "winkelsdorf": "~~Looks good and fixes #1691 for me.~~\nOne thing to note: As soon as {version} is used as part of the URI, other resolvers are ignored, i.e. Version always resolves to the URI part. Tested by adding query, custom_header and media_type.\nConsider a situation where an explicit URI points to a version, while using the URI without prefix should point to latest:\n```yaml\napi_with_prefix:\n    resource:     ApiBundle\\Controller\\ProductsController\n    type:         rest\n    prefix:       /{version}\n    name_prefix:  api_\napi_latest:\n    resource:     ApiBundle\\Controller\\ProductsController\n    type:         rest\n    defaults:\n        version:  latest\n    name_prefix:  api_latest_\n```\nProbably this should respect the order of the resolvers somehow, too?. As mentioned in #1691 I have further Issues with the proposed PR, but the current handling is really somehow broken, too.\nConsider the following situation\nI want to provide two ways of versioning (the usual: easier client consumption vs precise best practice approach). One URI based and another one using the usual custom_header and media_type resolvers, the latter pointing to the latest version when no version is specified, i.e. no header or media type given.\nWhere possible, I want to make use of Annotations to achieve this, with the least code overhead.\nSetup\nA local parameter.yml is loaded from my Bundle via the config.yml imports, versioning is enabled and has a default version.\napp/config/config.yml\nyaml\nimports:\n    - { resource: parameters.yml }\n    - { resource: security.yml }\n    - { resource: services.yml }\n    - { resource: \"@ApiBundle/Resources/config/parameters.yml\" }\n...\nfos_rest:\n    versioning:\n        enabled: true\n        default_version: \"%api.version%\"\n    format_listener: # determine best format for the request\n        enabled: false\n        # rules:\n        #    - { path: '^/', priorities: ['json', 'xml'], fallback_format: json, prefer_extension: false }\n    view:\n        view_response_listener: force # allow returning a view instance from action controllers\n        formats:\n            json: true\n            xml:  true\n        mime_types:\n            json: ['application/json', 'application/json; version=v1', 'application/json; version=v2']\n            xml:  ['application/xml', 'application/xml; version=v1', 'application/xml; version=v2']\nsrc/ApiBundle/Resources/config/parameter.yml\nyaml\nparameters:\n    api.versions: v1|v2 # available versions\n    api.version:  v2 # current version\nRouting is directed to the Bundle in\napp/config/routing.yml\nyaml\napi:\n    resource: \"@ApiBundle/Resources/config/routing.yml\"\n    type:     rest\nNow the routing inside the Bundle:\nsrc/ApiBundle/Resources/config/routing.yml\n```yaml\napi_with_prefix:\n    resource:     \"@ApiBundle/Controller/\"\n    type:         rest\n    prefix:       /{version}          # is this mapped to the Version Annotation?\n    requirements:\n        version:  \"%api.versions%\"    # allowed path versions from local parameters.yml\n    name_prefix:  api_\napi_latest_overridable:\n    resource:     \"@ApiBundle/Controller/\"\n    type:         rest\n    name_prefix:  api_latest_\n```\nNew to Symfony & FOSRestBundle, please correct me if something is wrong with the above configuration or my expectations.\nDirectory Structure\n```console\nsrc\\ApiBundle\\Controller\\v1\\\nsrc\\ApiBundle\\Controller\\v1\\ProductController.php\nsrc\\ApiBundle\\Controller\\v2\\\nsrc\\ApiBundle\\Controller\\v2\\ProductController.php\n```\nControllers\nsrc\\ApiBundle\\Controller\\v1\\ProductController.php\n```php\n<?php\nnamespace ApiBundle\\Controller\\v1;\nuse FOS\\RestBundle\\Controller\\Annotations\\NamePrefix;\nuse FOS\\RestBundle\\Controller\\Annotations\\RouteResource;\nuse FOS\\RestBundle\\Controller\\Annotations\\Version;\nuse FOS\\RestBundle\\Controller\\FOSRestController;\nuse FOS\\RestBundle\\Routing\\ClassResourceInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\n/\n * Class ProductController\n * @RouteResource(\"Product\")\n * @Version(\"v1\")\n * @NamePrefix(\"v1_\")\n */\nclass ProductController extends FOSRestController implements ClassResourceInterface\n{\n    /\n     * c stands for Collection\n     * /products\n     * @param Request $request\n     * @return array\n     */\n    public function cgetAction(Request $request)\n    {\n        $requestVersion = $request->get(\"version\");\n        $defaultVersion = $this->getParameter(\"api.version\");\n        $content = array(\n            'Controller' => '1',\n            'Requested' => $requestVersion,\n            # 'Default' => $defaultVersion\n        );\n    return $content;\n}\n\n/**\n * /products/{$id}\n * @param $id\n */\npublic function getAction($id)\n{\n}\n\n}\n```\nFor this test Version 2 Controller is basically the same, except for all 1 changed to 2. \n@RouteResource and ClassResourceInterface seem to generate the same resources. As the 2nd part of the PR is about ClassResourceInterface Versioning it is kept. Behavior is the same with and without.\nsrc\\ApiBundle\\Controller\\v2\\ProductController.php\n```php\n<?php\nnamespace ApiBundle\\Controller\\v2\nuse FOS\\RestBundle\\Controller\\Annotations\\NamePrefix;\nuse FOS\\RestBundle\\Controller\\Annotations\\RouteResource;\nuse FOS\\RestBundle\\Controller\\Annotations\\Version;\nuse FOS\\RestBundle\\Controller\\FOSRestController;\nuse FOS\\RestBundle\\Routing\\ClassResourceInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\n/\n * Class ProductController\n * @RouteResource(\"Product\")\n * @Version(\"v2\")\n * @NamePrefix(\"v2_\")\n */\nclass ProductController extends FOSRestController implements ClassResourceInterface\n{\n    /\n     * c stands for Collection\n     * /products\n     * @param Request $request\n     * @return array\n     */\n    public function cgetAction(Request $request)\n    {\n        $requestVersion = $request->get(\"version\");\n        $defaultVersion = $this->getParameter(\"api.version\");\n        $content = array(\n            'Controller' => '2',\n            'Requested' => $requestVersion,\n            # 'Default' => $defaultVersion\n        );\n    return $content;\n}\n\n/**\n * /products/{$id}\n * @param $id\n */\npublic function getAction($id)\n{\n}\n\n}\n```\nBasically both test controllers should return the actively used version number, the version requested and the default API version.\nExpectations and actual results\nAs described in the scenario, I would expect the following to work but in some cases the wrong controller is matched.\nThe Header Variants for unprefixed URIs:\n| URI | Accept Header | Expected | Actual |\n|---|---|---|---|\n| /products | w/o | (Default API): Controller 2, Requested v2 | correct |\n| /products | X-Accept-Version: v1 | Controller 1, Requested v1 | correct |\n| /products | Accept: application/json; version=v1 | Controller 1, Requested v1 | Wrong returns: Controller 2, Requested v2 |\nThe prefixed URI variants:\n| URI | Accept Header | Expected | Actual |\n|---|---|---|---|\n| /v1/products | w/o | Controller 1, Requested v1 | Wrong returns: Controller 2, Requested v1 |\n| /v2/products | w/o | Controller 2, Requested v2 | correct |\nAddendum: Furthermore the prefixed URI variants should still respect the serialization format sent via the Accept-Header. This is not tested here. \nObservations\n\nThe described wrong behavior is unchanged for the master branch and the PR fork.\nIIRC not using a resource collection like I did seems to behave differently again, but this is not tested here to not increase the complexity above the one of the above test matrix.\nAdditional Error: Removing the default_version from config.yml leads to 404 NotFoundHttpException for all above routes. Even when defaults: version: \"%api.version%\" is set for each route in local routing.yml.\nIt is not possible to debug routes via e.g. php bin/console router:match /v2/products as soon as @Version annotation is used. Console returns with [RuntimeException] Unable to get a property on a non-object. - all this while the route works (but sometimes returns the wrong controller as stated in the above test matrix).\n\nRoutes are generated correctly all the time:\n```console\n ~/Projects/GitHub/Test-Rest-API \ue0b0 \ue0a0 master \u25cf\u271a \ue0b0 php bin/console debug:router\n\nName                         Method   Scheme   Host   Path                               \n\n_wdt                         ANY      ANY      ANY    /_wdt/{token}                    \n  _profiler_home               ANY      ANY      ANY    /_profiler/                      \n  _profiler_search             ANY      ANY      ANY    /_profiler/search                \n  _profiler_search_bar         ANY      ANY      ANY    /_profiler/search_bar            \n  _profiler_info               ANY      ANY      ANY    /_profiler/info/{about}          \n  _profiler_phpinfo            ANY      ANY      ANY    /_profiler/phpinfo               \n  _profiler_search_results     ANY      ANY      ANY    /_profiler/{token}/search/results\n  _profiler_open_file          ANY      ANY      ANY    /_profiler/open                  \n  _profiler                    ANY      ANY      ANY    /_profiler/{token}               \n  _profiler_router             ANY      ANY      ANY    /_profiler/{token}/router        \n  _profiler_exception          ANY      ANY      ANY    /_profiler/{token}/exception     \n  _profiler_exception_css      ANY      ANY      ANY    /_profiler/{token}/exception.css \n  _twig_error_test             ANY      ANY      ANY    /_error/{code}.{_format}         \n  index                        ANY      ANY      ANY    /                                \n  api_v1_get_products          GET      ANY      ANY    /{version}/products              \n  api_v1_get_product           GET      ANY      ANY    /{version}/products/{id}         \n  api_v2_get_products          GET      ANY      ANY    /{version}/products              \n  api_v2_get_product           GET      ANY      ANY    /{version}/products/{id}         \n  api_latest_v1_get_products   GET      ANY      ANY    /products                        \n  api_latest_v1_get_product    GET      ANY      ANY    /products/{id}                   \n  api_latest_v2_get_products   GET      ANY      ANY    /products                        \n  api_latest_v2_get_product    GET      ANY      ANY    /products/{id}                   \n  nelmio_api_doc_index         GET      ANY      ANY    /doc/{view}                        \n\n```\nTest Setup\nAll tests were run with the current tagged release and this PR using an adjusted composer.json in the latter case:\njson\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/juillerat/FOSRestBundle.git\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=5.5.9\",\n        \"symfony/symfony\": \"3.2.*\",\n        \"doctrine/orm\": \"^2.5\",\n        \"doctrine/doctrine-bundle\": \"^1.6\",\n        \"doctrine/doctrine-cache-bundle\": \"^1.2\",\n        \"symfony/swiftmailer-bundle\": \"^2.3.10\",\n        \"symfony/monolog-bundle\": \"^3.0.2\",\n        \"symfony/polyfill-apcu\": \"^1.0\",\n        \"sensio/distribution-bundle\": \"^5.0\",\n        \"sensio/framework-extra-bundle\": \"~3.0\",\n        \"incenteev/composer-parameter-handler\": \"^2.0\",\n        \"twig/twig\": \"^1.0||^2.0\",\n        \"friendsofsymfony/rest-bundle\": \"dev-master\",\n        \"nelmio/api-doc-bundle\": \"^2.13\"\n    },\nI verified that the in this PR referenced commit #2726af9 from the repo of @juillerat is used when running composer update.\n. @xabbuh Yes, I can confirm that PR #1639 fixes my issue completely.\nAs a side note: $this->get('fos_rest.versioning.listener')->getVersion() throws an exception when using the PR, but this might be related to other changes in master as I used a tagged version before (^2.1).\nException:\nconsole\n[2017-04-10 09:33:00] php.CRITICAL: Fatal Error: Call to undefined method \n    FOS\\RestBundle\\EventListener\\VersionListener::getVersion() {\"exception\":\"[object] \n    (Symfony\\\\Component\\\\Debug\\\\Exception\\\\FatalErrorException(code: 0): \n    Error: Call to undefined method \n    FOS\\\\RestBundle\\\\EventListener\\\\VersionListener::getVersion() at \n    /Users/winkelsdorf/Projects/GitHub/Rest-API/src/ApiBundle/Controller/ProductsController.php:26)\"} []\n[2017-04-10 09:33:00] request.CRITICAL: Uncaught PHP Exception\n   Symfony\\Component\\Debug\\Exception\\UndefinedMethodException: \n  \"Attempted to call an undefined method named \"getVersion\" of class\n     \"FOS\\RestBundle\\EventListener\\VersionListener\".\" at \n    /Users/winkelsdorf/Projects/GitHub/Rest-API/src/ApiBundle/Controller/ProductsController.php \n    line 26 {\"exception\":\"[object]  \n   (Symfony\\\\Component\\\\Debug\\\\Exception\\\\UndefinedMethodException(code: 0): \n    Attempted to call an undefined method named \\\"getVersion\\\" of class\n     \\\"FOS\\\\RestBundle\\\\EventListener\\\\VersionListener\\\". at \n    /Users/winkelsdorf/Projects/GitHub/Rest-API/src/ApiBundle/Controller/ProductsController.php:26)\"} []\nAs far as I can see, version attribute is still populated, but it looks like there is no more public getVersion method?. @xabbuh That's what I thought, I likely found it through an outdated documentation earlier. Using the parameter with key version from the Request bag works fine though. Thanks for the clarification!. @xabbuh fyi: Proposed PR still does not fix all issues with URI versioning (wrong controller matched). Sadly I am unable to use router:match as soon as version annotation is used. It gives a RuntimeException with Unable to get a property on a non-object. for the route.\nRegarding the URI versioning - should I open a new issue or post a (lengthy) comment in the PR?. @xabbuh Agreed and done. If the discussion gets too complex for the PR it can later be moved to it's own issue for dealing with #1691, #1529 and #1491 altogether.. ",
    "mitrae": "any news?. even with this PR I still get exception \"Unable to get property on a non-object\"\nbut looks like it is bug in symfony itself https://github.com/symfony/symfony/pull/22636. ",
    "masterkaos": "Any news on this PR? I was bashing my head into the wall for the majority of the day trying to figure out why this wasnt working, then came across this. Sad to see this  issue open for so long when it seems like something that would be pretty common to run into.... ",
    "mmoll": "@juillerat this would need a rebase.... @analogic please test #1779. @xabbuh \n\nI guess you meant #1779 :)\n\naw, yes, editied.. ",
    "luiztiago": "\ud83d\udc4d . ",
    "ektarum": "yes the code is the follow :\n```php\n<?php\nnamespace XXX\\CommonBundle\\Handler;\nuse FOS\\RestBundle\\Controller\\ExceptionController;\nuse Symfony\\Component\\Translation\\TranslatorInterface;\nclass FosRestExceptionController extends ExceptionController\n{\n    /*\n     * @var TranslatorInterface\n     /\n    private $translator;\n/*\n * @var string\n */\nprivate $translationDomain = 'exception-ENV';\n\nprotected function getExceptionMessage($exception)\n{\n    $this->translator = $this->container->get('translator');\n\n    $env = $this->container->get('kernel')->getEnvironment();\n    $this->translationDomain = str_replace('ENV', $env, $this->translationDomain);\n\n    switch ($exception->getClass()) {\n        case 'Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException':\n            return $this->getNotFoundHttpExceptionMessage($exception->getMessage());\n        case 'Doctrine\\ORM\\EntityNotFoundException':\n            $message = 'entity_not_found';\n            break;\n        default:\n            $message = $exception->getMessage();\n            break;\n    }\n\n    return $this->translator->trans($message, [], $this->translationDomain);\n}\n\nprivate function getNotFoundHttpExceptionMessage($message)\n{\n    if (preg_match('`(.+) object not found.$`', $message, $matches)) {\n        return $this->translator->trans(\n            'given_object_not_found',\n            [\n                '%class%' => (string) $matches[1],\n            ],\n            $this->translationDomain\n        );\n    } elseif (preg_match('`^No route found for (.+)`', $message, $matches)) {\n        return $this->translator->trans(\n            'given_route_not_found',\n            [\n                '%route%' => (string) $matches[1],\n            ],\n            $this->translationDomain\n        );\n    }\n\n    return $this->translator->trans($message, [], $this->translationDomain);\n}\n\n}\n```\n. For me, it's a huge BC break for users of JMS serializer who extends ExceptionController.\nPass to JMS to normalizers it's possible but it's time consumming. \nI think the user should be aware before the upgrade.\nPerhaps the changelog need more clearly informations for this point ?\n. ",
    "JProffitt71": "EDIT: I was being dense.\nForgive me if I'm being dense, but shouldn't the testCustomActionRoutesOrder() method in Routing/Loader/RestRouteLoaderTest.php already test this? For that matter, shouldn't that be asserting already? I have not worked with tests yet, so my knowledge on them is limited.\nActually looking at that test, it looks like it is backwards. It will only fail if get_bar is dumped after new_bar (the final desired behavior we actually want).. My apologies, I misunderstood how PHPUnit worked. I learned more about it, and figured out why unit tests were not catching this issue.\nThe OrderController fixture had the actions already defined in the final correct order (['new_foos', 'get_foos', 'new_bars', 'get_bars_custom', 'get_bars']), which would pass unit tests even if custom route sorting wasn't working. I swapped newFoosAction and getFoosAction so it would properly test route sorting.. I wanted to do that, but Request->getRequestUri() caches the result, so any tests afterwards would erroneously use the first request uri set. \nActually it should be setting \"pathInfo\" because getPathInfo also caches its result and that is what is used by FormatNegotiator. I've pushed an update to fix that.. This test caught an issue before I made my modifications. Prior to my modification of FormatNegotiator, the mime-type in the Accept header would override the one prefer_extension appends. So if you requested file.json with the header in that test, the final header would be:\nAccept: text/html, application/json; q=0.1, application/json; q=2.0\nIt would ignore the second instance of application/json and prefer text/html, failing that test.\nThis test guards against the case where a contributor refactors FormatNegotiator to append the mime-type again. However if there are other guards against that, I agree we can scrap this test.. Good point, this has been fixed.. ",
    "helminster": "This is a must have, because lack of it breaks argument resolvers in Symfony >= 3.3 (currently only working workaround is to make arguments optional with default value null).. This is a must have, because lack of it breaks argument resolvers in Symfony >= 3.3 (currently only working workaround is to make arguments optional with default value null).. ",
    "vpassapera": "According to the docs, that accept header would be not supported, and the PR I opened those not directly address the issue of multiple types in the accept headers and which would be appropriate to select (probably last one), but it's a step to being able to use the mime types as the docs say they should be used for versioning (docs do not list requirement of an extra listener for this). \nhttps://github.com/symfony/symfony/pull/21975\n. Noticed this is actually a bug within the request object so I will open a PR against that.\nThere's a line that's hardcoding the top element in the config and returning that always.\nphp\n        return isset(static::$formats[$format]) ? static::$formats[$format][0] : null;. Opened a PR against http foundation.\nIF this is incorrect and there's another way of addressing this issue, I would be happy to take some direction.\nhttps://github.com/symfony/http-foundation/pull/34. Yes please :). ",
    "dbu": "i am merging this as its at least a help. if somebody wants to provide a compiler pass to make things more reliable, please do.... huh, what does this failure mean? can it be that the bug was hiding that we output stack traces?. it seems the problem happens when we pass an exception as $data in FOS\\RestBundle\\Controller\\ControllerTrait::view. for this issue: is passing an exception to the view layer intended? and should that trigger the exception handler or should we log some warning that something weird has been done when no status_code was provided?. the build is now green. ok to merge @GuilhemN ?. the build is now green. ok to merge @GuilhemN ?. ah, i guess thats also the reason for the failing tests... was not looking close enough to see that $data is already used here.. ",
    "Spea": "Any updates on this? :). ",
    "klnjmm": "Hi,\nI have exactly the same problem and I expected the described behavior.\nIs there something done since 6 March 2017 ?\nThanks. Hi,\nI have exactly the same problem and I expected the described behavior.\nIs there something done since 6 March 2017 ?\nThanks. ",
    "elkangaroo": "I think this is not about \"strict=true\" but about \"nullable=false\" not behaving as expected (same as issue #1765 and probably also related: #1785). The NotNull constraint is only applied to the array elements, not the param itself, which is unexpected.\nI don't know what and when exactly this changed, because we upgraded from 1.8 to 2.3 and somewhere in between this seems to have changed :(. Here is the relevant code from v1.8: https://github.com/FriendsOfSymfony/FOSRestBundle/blob/1.8/Request/ParamFetcher.php#L166\nThere a BadRequestHttpException \"%s parameter value of '%s' is not an array\" was thrown when we had \"array=true\" and \"nullable=false\". In newer versions, this behaviour changed (and as far as I see not documented).. ",
    "Preclowski": "Problem still exists. Hey guys, problem did back. Argument resolver does some problems with fos rest. This fix is solution, but it was reverted in 2.2 (or earlier).. Make sure that php does not occur fatal exception. I dont think so, fos_rest.exception.controller should be used by default. But it's declared and symfony throws exception \n\nThe service \"fos_rest.exception.twig_controller\" has a dependency on a non-\n    existent service \"templating.engine.twig\".. symfony 3.4.8, fosrest 2.3.1, twig removed from dependencies\n\n```yaml\nFOS Rest\nfos_rest:\n    exception:\n        enabled: true\n        exception_controller: 'fos_rest.exception.controller:showAction'\n```. ",
    "anonim1133": "It's still pain in the ass. #1669 fixes it, but does not exist in newer branches.. It's still pain in the ass. #1669 fixes it, but does not exist in newer branches.. ",
    "clavier-souris": "This is just about documentation.\nI have been mistaken by this error in a Symfony 3 project.. ",
    "jpillias": "Any du date for this fix ? \nBest regards.. Thank you.\nI've done the job with an alias : \nyaml\nservices:\n    # for bug fix fos rest bundle\n    fos_rest.view_handler:\n        alias: fos_rest.view_handler.default. Did you try my trick ? . ",
    "carlcasbolt": "OK, honest mistake, I must have an old version of the code (I started using it last year). I'll see if I can upgrade my version and use map=true. ",
    "ishapkin": "Same problem, but I can't solved this correctly.\nMay be you already received right solution. But my wrong upload consist of:\nfile FormManager.php - it is service 'app.form.manager'\n```\nclass FormManager {\n     /*\n     * @param Request $request\n     * @return bool|Media\n     /\n    public function wrongUploadMedia(Request $request) {\n    $media = false;\n\n    if($file = $request->files->get('binaryContent')) {\n        /** @var Media $media */\n        $media = $this->container->get('sonata.media.manager.media')->create();\n        // $this->provider = 'sonata.media.provider.file';\n        $media->setProviderName($this->provider);\n        $media->setBinaryContent($file);\n        //-> for form extra fields solved\n        $request->files->remove('binaryContent');\n        $this->container->get('sonata.media.manager.media')->save($media);\n    }\n\n    return $media;\n}\n\n}\nIn controller I use it this:\npublic function postAction(Request $request, ProgramParticipant $entity) {\n        $entity = new myEntity();\n        $media = $this->get('app.form.manager')->wrongUploadMedia($request);\n        $form = $this->createForm(new myEntityType(), $entity, array(\"method\" => $request->getMethod()));\n        $form->handleRequest($request);\n        if ($form->isValid()) {\n            $em = $this->getDoctrine()->getManager();\n        if($media instanceof Media) {\n            $entity->setMedia($media);\n        }\n        $em->persist($entity);\n        $em->flush();\n        return $entity;\n    }\n\n    return FOSView::create(array('errors' => $form->getErrors()), Codes::HTTP_INTERNAL_SERVER_ERROR);\n}\n\n```\n. Same problem, but I can't solved this correctly.\nMay be you already received right solution. But my wrong upload consist of:\nfile FormManager.php - it is service 'app.form.manager'\n```\nclass FormManager {\n     /*\n     * @param Request $request\n     * @return bool|Media\n     /\n    public function wrongUploadMedia(Request $request) {\n    $media = false;\n\n    if($file = $request->files->get('binaryContent')) {\n        /** @var Media $media */\n        $media = $this->container->get('sonata.media.manager.media')->create();\n        // $this->provider = 'sonata.media.provider.file';\n        $media->setProviderName($this->provider);\n        $media->setBinaryContent($file);\n        //-> for form extra fields solved\n        $request->files->remove('binaryContent');\n        $this->container->get('sonata.media.manager.media')->save($media);\n    }\n\n    return $media;\n}\n\n}\nIn controller I use it this:\npublic function postAction(Request $request, ProgramParticipant $entity) {\n        $entity = new myEntity();\n        $media = $this->get('app.form.manager')->wrongUploadMedia($request);\n        $form = $this->createForm(new myEntityType(), $entity, array(\"method\" => $request->getMethod()));\n        $form->handleRequest($request);\n        if ($form->isValid()) {\n            $em = $this->getDoctrine()->getManager();\n        if($media instanceof Media) {\n            $entity->setMedia($media);\n        }\n        $em->persist($entity);\n        $em->flush();\n        return $entity;\n    }\n\n    return FOSView::create(array('errors' => $form->getErrors()), Codes::HTTP_INTERNAL_SERVER_ERROR);\n}\n\n```\n. @mustapha72, do you can show your solution? . ",
    "tzfrs": "Just a thought: Could that be because I'm using the JMS Serializer and not the Symfony serializer? Because in the upgrade guide, it says:\n\nAfter (if you use the Symfony serializer):\n\nSo what about the JMS users? . I can confirm that while this PR works in general, it does have a side effect.\nWe're using sonata-admin, and when an unauthenticated user access an admin site, for example http://localhost:8080/admin/dashboard in the prod environment we're receiving a 500, because of the code in Symfony\\Component\\Security\\Http\\Firewall\\AccessListener::handle:L72 \nIt throws an Symfony\\Component\\Security\\Core\\Exception\\AccessDeniedException, which is then handled by FOS\\RestBundle\\EventListener\\ExceptionListener which doesn't redirect anymore to a login page but instead shows the error in the browser.\nWhen the FOS\\RestBundle\\EventListener\\ExceptionListener has a priority of -100 it's working, because then the HttpKernel::handleException method is called which creates a redirect response, because the Symfony\\Component\\Security\\Http\\Firewall\\ExceptionListener  sets $event->isPropagationStopped() to true and therefore it stops and the FOS\\RestBundle\\EventListener\\ExceptionListener is never called. . I can confirm that while this PR works in general, it does have a side effect.\nWe're using sonata-admin, and when an unauthenticated user access an admin site, for example http://localhost:8080/admin/dashboard in the prod environment we're receiving a 500, because of the code in Symfony\\Component\\Security\\Http\\Firewall\\AccessListener::handle:L72 \nIt throws an Symfony\\Component\\Security\\Core\\Exception\\AccessDeniedException, which is then handled by FOS\\RestBundle\\EventListener\\ExceptionListener which doesn't redirect anymore to a login page but instead shows the error in the browser.\nWhen the FOS\\RestBundle\\EventListener\\ExceptionListener has a priority of -100 it's working, because then the HttpKernel::handleException method is called which creates a redirect response, because the Symfony\\Component\\Security\\Http\\Firewall\\ExceptionListener  sets $event->isPropagationStopped() to true and therefore it stops and the FOS\\RestBundle\\EventListener\\ExceptionListener is never called. . ",
    "christhomas": "I have now, thanks for your comment!. ",
    "darkbluesun": "What's preventing this being done?. Sorry @lsmith77 I don't. I had thought that the PR was helpful having tried it, but it had some unfortunate side effects. What you suggest is probably better, but I don't have the time or expertise for it, sorry.. ",
    "zerkms": "Btw, this PR does not seem to change the behaviour (at least in the latest symfony v3.3.8): the Symfony\\Component\\Security\\Http\\Firewall\\ExceptionListener listener still handles the exception. And the FosRestBundle's ExceptionListener is not even registered.\nLooking at SecurityExtension::createFirewall (and SecurityExtension::createExceptionListener in particular) it looks that security.exception_listener service is pretty much hardcoded there, and there is really no other way than to override it somehow (but it may cause other unexpected side-effects).. My apologies, this PR totally works, thanks :-)\nAny chance to merge it any time soon?. ",
    "mi-schi": "No, it has nothing to do with monolog. I don't have an own monolog configuration defined. Its all default.\nThe header key is \"X-Debug-Error\". It comes from here:\nhttps://github.com/symfony/web-profiler-bundle/commit/4a81a3f61d33417c0ad9ec73168438cae1cdde27\nAnd the issue was already solved. I updated symfony and everything is fine :)\nSo the only point is the newline in the exception. I think a newline in an exception makes little sense. If you don't agree you can close the issue ;)\nThanks for your time.. ",
    "yarcowang": "It seems like after I added the config:\nview:\n        mime_types: ['application/json', 'application/vnd.mundo.v1+json', 'application/vnd.mundo.v2+json']\nfor the mime type versioning solution.. Whole fos_rest config is as following:\n```\nfos_rest:\n    routing_loader:\n        default_format: json\n        include_format: false\nview:\nmime_types: ['application/json', 'application/vnd.mundo.v1+json', 'application/vnd.mundo.v2+json']\nversioning:\n    enabled: true\n    default_version: ~\n    resolvers:\n        query:\n            enabled: true\n            parameter_name: version\n        custom_header:\n            enabled: true\n            header_name: X-Accept-Version\n\nmedia_type:\nenabled: true\nregex: '/(v)(?P[0-9.]+)+json$/'\nformat_listener:\nenabled: true\n``\nThose are commented out now for it does not work...\n(According to the document, it was said that if I'm going to usemedia_type, I should also add the mime_types. But then it shows me such error.). \"friendsofsymfony/rest-bundle\": \"^2.1\", im my composer.json. Is it fixed? I mean the header, I've customed theregexfield to make it accept:Accept: application/vnd.mundo.v1+jsonBut not:Accept: application/json; version=1.0`. ",
    "ostrolucky": "So that section looks quite different in latest release (2.1.1). Ok it was fixed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1585, there just wasn't new release since then (half a year, really?). ",
    "mtricht": "@xabbuh Same response but the Content-Type is application/json instead of text/html. @xabbuh Reverting https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1683 fixes this issue. ",
    "jeromelebleu26": "I have the same probleme, how do you resolve it ? . I've found a solution with JMS, so \ndesactivate :  \n//config.yml\nserializer:      { enable_annotations: true }. ",
    "MedUnes": "having the same nightmare since days as well. ",
    "Gregoire-M": ":+1: . ",
    "ebeem": "@phoenixgao  services.yml. @lukepass hey, sorry, but I switched to another framework (Java spring). I did not investigate the issue, but I think it's a bug.. ",
    "lukepass": "Hello,\nit seems that the bug still exists and I need to name my service fos_rest.serializer.exception_normalizer.jms in order to override the custom exception handler.\nCan you confirm that?\nThanks.. Hello,\nit seems that the bug still exists and I need to name my service fos_rest.serializer.exception_normalizer.jms in order to override the custom exception handler.\nCan you confirm that?\nThanks.. I am still doing this in my recent projects!. Please have a look at this thread on StackOverflow:\nhttps://stackoverflow.com/questions/46367244/jms-serializer-overriding-groups-in-fosrestbundle/47219227#47219227\nI faced the same problem.. Hello, so from version 2.4 how is the correct way to override the FormErrorHandler? I used to override the parameter jms_serializer.form_error_handler.class.. Hello, so from version 2.4 how is the correct way to override the FormErrorHandler? I used to override the parameter jms_serializer.form_error_handler.class.. ",
    "pritisolanki": "By adding the prefix , It works for me I was trying to leverage FOSRestBundle ability to generate the url implicitly [By using @RouteResource ] and adding versioning , which is why I believe I will be opting FOSRest Bundle.  I am sure this must be working in some way...the documentation is limited to explore FOSRest.. Would I always have to  return View instance from controller. . ",
    "maxixcom": "I have the same problem with Symfony 3.3.2. $this->container is null. So I get:\n\"Error: Call to a member function has() on null\" when I invoke $this->getDoctrine() in controller.\n. Yes it might be related.\nI've tried this solution for my controller(service.yml) as was mentioned in symfony/symfony#23200 thread:\ncalls:\n        - [setContainer, [\"@service_container\"]]\nand it works. But it's obvious that something wrong with auto injecting container in controller.\n. I don't. Here is my composer.json deps:\n```\n{\n    \"name\": \"root/api\",\n    \"license\": \"proprietary\",\n    \"type\": \"project\",\n    \"autoload\": {\n        \"psr-4\": {\n            \"\": \"src/\"\n        },\n        \"classmap\": [\n            \"app/AppKernel.php\",\n            \"app/AppCache.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\": \"tests/\"\n        },\n        \"files\": [\n            \"vendor/symfony/symfony/src/Symfony/Component/VarDumper/Resources/functions/dump.php\"\n        ]\n    },\n    \"require\": {\n        \"php\": \">=5.5.9\",\n        \"doctrine/doctrine-bundle\": \"^1.6\",\n        \"doctrine/doctrine-migrations-bundle\": \"^1.2\",\n        \"doctrine/orm\": \"^2.5\",\n        \"friendsofsymfony/user-bundle\": \"~2.0\",\n        \"incenteev/composer-parameter-handler\": \"^2.0\",\n        \"lexik/jwt-authentication-bundle\": \"^2.4\",\n        \"sensio/distribution-bundle\": \"^5.0.19\",\n        \"sensio/framework-extra-bundle\": \"^3.0.2\",\n        \"symfony/monolog-bundle\": \"^3.1.0\",\n        \"symfony/polyfill-apcu\": \"^1.0\",\n        \"symfony/swiftmailer-bundle\": \"^2.3.10\",\n        \"symfony/symfony\": \"3.3.*\",\n        \"twig/twig\": \"^1.0||^2.0\",\n    \"nelmio/cors-bundle\": \"^1.4\",\n    \"nelmio/api-doc-bundle\": \"^2.11\",\n    \"friendsofsymfony/rest-bundle\": \"^2.1\",\n    \"jms/serializer-bundle\": \"^1.1\"\n},\n\"require-dev\": {\n    \"sensio/generator-bundle\": \"^3.0\",\n    \"symfony/phpunit-bridge\": \"^3.0\"\n},\n\"scripts\": {\n    \"symfony-scripts\": [\n        \"Incenteev\\\\ParameterHandler\\\\ScriptHandler::buildParameters\",\n        \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::buildBootstrap\",\n        \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::clearCache\",\n        \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::installAssets\",\n        \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::installRequirementsFile\",\n        \"Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::prepareDeploymentTarget\"\n    ],\n    \"post-install-cmd\": [\n        \"@symfony-scripts\"\n    ],\n    \"post-update-cmd\": [\n        \"@symfony-scripts\"\n    ]\n},\n\"config\": {\n    \"sort-packages\": true\n},\n\"extra\": {\n    \"symfony-app-dir\": \"app\",\n    \"symfony-bin-dir\": \"bin\",\n    \"symfony-var-dir\": \"var\",\n    \"symfony-web-dir\": \"web\",\n    \"symfony-tests-dir\": \"tests\",\n    \"symfony-assets-install\": \"relative\",\n    \"incenteev-parameters\": {\n        \"file\": \"app/config/parameters.yml\"\n    },\n    \"branch-alias\": null\n}\n\n}\n```\n. This is the controller I stuck with:\n```\nnamespace AppBundle\\Controller;\nuse FOS\\RestBundle\\Controller\\Annotations\\RouteResource;\nuse FOS\\RestBundle\\Controller\\FOSRestController;\nuse FOS\\RestBundle\\Routing\\ClassResourceInterface;\n/\n * Class UserController\n * @package AppBundle\\Controller\n \n * @RouteResource(\"user\")\n /\nclass UserController extends FOSRestController implements ClassResourceInterface\n{\n    public function getAction($id) {\n        var_dump($this->container); // display null\n        exit;\n    // next code gives error because container is null:\n\n//        return $this->getDoctrine()\n//            ->getRepository('AppBundle:User')\n//            ->find($id);\n    } // \"get_user\"      [GET] /users/{slug}\n}\n```\nMy services.yml:\n```\nLearn more about services, parameters and containers at\nhttp://symfony.com/doc/current/service_container.html\nparameters:\n    #parameter_name: value\nservices:\n    # default configuration for services in this file\n    _defaults:\n        # automatically injects dependencies in your services\n        autowire: true\n        # automatically registers your services as commands, event subscribers, etc.\n        autoconfigure: true\n        # this means you cannot fetch services directly from the container via $container->get()\n        # if you need to do this, you can override this setting on individual services\n        public: false\n# makes classes in src/AppBundle available to be used as services\n# this creates a service per class whose id is the fully-qualified class name\nAppBundle\\:\n    resource: '../../src/AppBundle/*'\n    # you can exclude directories or files\n    # but if a service is unused, it's removed anyway\n    exclude: '../../src/AppBundle/{Entity,Repository}'\n\n# controllers are imported separately to make sure they're public\n# and have a tag that allows actions to type-hint services\nAppBundle\\Controller\\:\n    resource: '../../src/AppBundle/Controller'\n    public: true\n    tags: ['controller.service_arguments']\n\n# add more services, or override services that need manual wiring\n# AppBundle\\Service\\ExampleService:\n#     arguments:\n#         $someArgument: 'some_value'\n\n----------------------------------------------------------------\n!!!!!!! Next code inject container and the code is start working\nAppBundle\\Controller\\UserController:\ncalls:\n- [setContainer, [\"@service_container\"]]\n```\n. @xabbuh  Here is a test project with the problem:\nhttps://github.com/maxixcom/symfony-container\nBut it use db. You need configure and create some db. And run migrations:\n./bin/console doctrine:migration:migrate\nActually it creates FOSUserBundle User table.\nLook at UserController::getAction - (GET request - /users/1). There is a problem.\nBut if you try DefaultController::indexAction (GET request - /)  you'll see that container exist\n. @xabbuh Yes, it fixes the issue. Container is in controller now.. ",
    "nusje2000": "I got the same issue, it is a pain in the ass. ",
    "thibaultfalque": "Hi,\nI have the same issue. How to fix the problem? Manually?\nThanks. \n. ",
    "fpilee": "to fix it you have to update Framework Bundle... or just edit it and add the new content\nhttps://github.com/symfony/symfony/pull/23239/files\nvendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerResolver.php\n. ",
    "secit-pl": "Will it be fixed somehow in the bundle or should we wait for the next symfony release and until then apply some custom fixes?. ",
    "nicolas-grekas": "https://github.com/symfony/symfony/pull/23239 now merged. https://github.com/symfony/symfony/pull/23239 now merged. Imho, checking for a trait is checking for an implementation detail, should be avoided\n. ",
    "rileyrg": "Symfony 3.3.9 has this issue when using JMSDiExtraBundle. The \"solution\" (I bracket it as I have NO idea whats going on) was to add the setContainer call to my controllers in the \"generic\" autowiring section:\n# controllers are imported separately to make sure they're public\n# and have a tag that allows actions to type-hint services\nAppBundle\\Controller\\:\n    resource: '../../src/AppBundle/Controller'\n    public: true\n    tags: ['controller.service_arguments']\n    **calls:\n       - [setContainer, [\"@service_container\"]]**\n\n. ",
    "ventuc": "Also Symfony 3.3.13 is still affected. The solution is the same above... but didn't have it been fixed already?. Yes, version 1.9.0. ",
    "Nyholm": "Thank you for merging. . ",
    "Konafets": "Without using the the package, I would say this is no problem. The deprecation notice just let you now that something will not work with Symfony 4.0 and how you should fix it.. Without using the the package, I would say this is no problem. The deprecation notice just let you now that something will not work with Symfony 4.0 and how you should fix it.. ",
    "lucraraujo": "Thanks!. Thanks!. ",
    "rehoehle": "I have the same problem. In dev mode i see the message:\nmessage: \"Parameter \"hwVersion\" of value \"NULL\" violated a constraint \"This value should not be blank.\"\"\nin Production mode i see only:\nmessage: \"Bad Request\". I have the same problem. In dev mode i see the message:\nmessage: \"Parameter \"hwVersion\" of value \"NULL\" violated a constraint \"This value should not be blank.\"\"\nin Production mode i see only:\nmessage: \"Bad Request\". ",
    "ofo78": "+1. ",
    "mjpvandenberg": "Constructor injection is a good alternative, but I prefer action injection wherever possible. That's mostly a matter of taste, but also it prevents resolving and injecting unused services.. Turns out that the solution is, in fact, to simply use manual route definition. The reason this was causing duplicate and incorrect routes was because of this: https://github.com/FriendsOfSymfony/FOSRestBundle/issues/813#issuecomment-50966837. Moved the check into ClassUtils::findClassInFile(), so that RestRouteLoader will throw an exception if an abstract controller was configured.. ",
    "phptuts": "It makes it easier to wrap the form in a standard response which helps clients like iphone and android.  Here an example of what it could like.\n{\n    \"meta\": {\n        \"type\": \"form_errors\",\n        \"paginated\": false\n    },\n    \"data\": {\n        \"children\": {\n            \"email\": {\n                \"errors\": [\n                    \"This value is not a valid email address.\"\n                ]\n            },\n            \"plainPassword\": {\n                \"errors\": [\n                    \"This value is too short. It should have 3 characters or more.\"\n                ]\n            }\n        }\n    }\n}. It makes it easier to wrap the form in a standard response which helps clients like iphone and android.  Here an example of what it could like.\n{\n    \"meta\": {\n        \"type\": \"form_errors\",\n        \"paginated\": false\n    },\n    \"data\": {\n        \"children\": {\n            \"email\": {\n                \"errors\": [\n                    \"This value is not a valid email address.\"\n                ]\n            },\n            \"plainPassword\": {\n                \"errors\": [\n                    \"This value is too short. It should have 3 characters or more.\"\n                ]\n            }\n        }\n    }\n}. ",
    "xorik": "I agree with @Soullivaneuh this isn't convenient.\nImagine that I have 30 controllers with many different services and repositories, passed as arguments. In this case I need to write down 50-100 exclusions?\nAt least we need something like preg (something like (Service|Repository)). But it's also far from perfect. It's much better to make a whitelist of classes, than blacklist.So I prefer something like this:\nfos_rest:\n    routing_loader:\n        routing_allowed_types:\n            - '^AppBundle\\\\(Document|Entity)'\nSo we can pass entities and mongodb documents. Also we should allow string and int parameters. Everything else should considered as a service. ",
    "Laizerox": "@xorik and @Soullivaneuh I've written patch which does exactly what you want. The patch is based on conversation in this PR.\nIt is still WIP since it is missing tests and documentation update but should be done in coming days.\nSee here: laizerox/FOSRestBundle@919b7cf4584d4f28589db7696e4750cd27dcd21f\nWhitelisting is a new option under routing_loader. Simply give one string or array under allowed_types.\nExample:\nfos_rest:\n    routing_loader:\n        allowed_types:\n            - 'AppBundle\\Entity\\Class'\n            - '^AppBundle\\\\(Entity|Document)'\nor\nfos_rest:\n    routing_loader:\n        allowed_types: '^AppBundle\\\\(Entity|Document)'\nAs you can see it still accepts either FQCN including subclasses but as a new feature regex\nThe code logic already wraps strings into regex.\nI hope you will give me more feedback in upcoming PR or directly into commit before PR.\nThank you!. ",
    "silverbackdan": "Sorry, it's because I rushed this solution, I've had a re-think about it.\nThe modified listener no longer extends HttpKernelExceptionListener (It now extends ProfileListener with a higher priority) - before this PR the duplicateRequest method of HttpKernelExceptionListener was changed to save an Exception instead of a FlattenedException.\nI see now that it should have continued to use an Exception not FlattenedException - and thought that I can just create a new class that decorates HttpKernelExceptionListener to get the same result as before. I'll work on this.\nThank for the input.. There's the JSON response I was expected to see now and hopefully these changes shouldn't have knock-on consequences. Do let me know though - Thanks.. The failing phpunit tests are mostly the param profiler_listener.only_exceptions not being defined. When I'm using this update, it does appear to be setup in vendor/symfony/framework-bundle/DependencyInjection/FrameworkExtension::registerProfilerConfiguration\nThe 1st PHPUnit test fail was a simple fix - I hadn't defined logger as null by default as it should have been. I will continue to see if I can work out why the param can't be found in the tests though.. OK, so I've done this all wrong - I've extended the ProfileListener which is only active in dev and test env. Back to the drawing board I think. Please do comment if you get time to let me know the correct class to be decorating to bring the priority up if you can. But I'll keep looking too - quite keen to fix this one if I can. Cheers.. The Symfony 4 build error is related to https://symfony.com/blog/new-in-symfony-3-3-dependency-injection-deprecations#deprecated-the-definitiondecorator-class whereSymfony\\Component\\DependencyInjection\\DefinitionDecorator has been moved to Symfony\\Component\\DependencyInjection\\ChildDefinition - I don't think that's to do with this PR but it may just be the asserts that need updating to check for either class name.\nThe PHP5.5 and Symfony 2.8 tests - I'm not quite sure which bundle config is being loaded in, but I think the SecurityBundle just needs adding in wherever necessary.\nIf I can do anything else though, please do comment, I'll be happy to do what I can do get this issue fixed.. I can't quite work out why the --prefer-lowest flag is showing errors on this PR but not other PRs. It looks to me as though a form object is being passed to the Symfony serializer correctly and coming back incorrectly in the FOS\\RestBundle\\Serializer\\SymfonySerializerAdapter. Have you seen this happen before by any chance?\nI've worked through to get all other tests passing now though and updated where DefinitionDecorator is used.. Ah yes of course, that changed as I was testing on early Symfony versions. I'll sort that now.. That was what was causing the error in Travis-CI checks too it seems :). OK - could you perhaps give me the service ID or class which is the one you'd like decorated? (Possibly a quick technique for finding that out if you'd like me to?)\nor is this request more about just the configuration in the link you've provided?. Ah ok no problem - I'll see if I can get this updated later today. Thanks for the feedback. No worries, slight issue though security.exception_listener is abstract so I can't appear to decorate it like this or pass it into a service as an argument.. Looking into this with the help of Stof in this issue I found https://github.com/symfony/symfony/issues/11926\nhttps://github.com/symfony/symfony/blob/05c720734bae7f96edb5a3fb9644d360f6301336/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/AbstractFactory.php#L171-184. OK, well I'm a little stuck now how to move forwards with this one. I'll await feedback because I'm not 100% sure if this is the best way or if there should just be the option to change the priority of the listener currently implemented via the config. Maybe the default value could be 0 or 1 instead.. ",
    "dsuurlant": "That's exactly where the confusion comes from.\n\n\nIf you want to use the View object as a response: return new View($data) then sensio_framework_extra.view.annotations must be set to false.\n\n\nIf you want to  return data and have it processed further by what you specify in the annotations (serializer groups, status codes, etc) sensio_framework_extra.view.annotations must be set to true.\n. That's exactly where the confusion comes from.\n\n\nIf you want to use the View object as a response: return new View($data) then sensio_framework_extra.view.annotations must be set to false.\n\n\nIf you want to  return data and have it processed further by what you specify in the annotations (serializer groups, status codes, etc) sensio_framework_extra.view.annotations must be set to true.\n. \n\n",
    "GijsL": "I have a custom FormErrorHander, which i set with\nyaml\nparameters:\n    jms_serializer.form_error_handler.class: 'MyBundle\\Serializer\\Handler\\FormErrorHandler'\nI think the CompilerPass now will overwrite my parameter? Should I create a bug report for this?. Was deleted accidentally.. I used the other CompilerPass tests as template. Shoud I use a real instance of ContainerBuilder?. ",
    "dlpetrie": "The code refers to the TwigBundle ExceptionController as an example.  The Twig ExceptionController is protected, so why wouldn't this?. The code refers to the TwigBundle ExceptionController as an example.  The Twig ExceptionController is protected, so why wouldn't this?. ",
    "egils": "@GuilhemN it is disabling the listener. If fos_rest.exception.service (any) is defined in configuration, this code disables a default ExceptionListener. And all other listeners are disabled in same fashion after the commit that is linked in the description. . @GuilhemN it is disabling the listener. If fos_rest.exception.service (any) is defined in configuration, this code disables a default ExceptionListener. And all other listeners are disabled in same fashion after the commit that is linked in the description. . Yes, but that would also disable a default controller. In my case I want to keep the default controller and have a custom ExceptionListener. But that's not the main reason I opened this PR. At the current state there is a piece of unreachable code. To fix it I see two obvious ways:\n add fos_rest.exception.service configuration option to override a default listener (as this PR does);\n remove unreachable code and force users handle exception responses fully on their own.. Yes, but that would also disable a default controller. In my case I want to keep the default controller and have a custom ExceptionListener. But that's not the main reason I opened this PR. At the current state there is a piece of unreachable code. To fix it I see two obvious ways:\n add fos_rest.exception.service configuration option to override a default listener (as this PR does);\n remove unreachable code and force users handle exception responses fully on their own.. ",
    "karser": "@xabbuh It's in FOS\\RestBundle\\DependencyInjection\\Compiler\\JMSHandlersPass. That's where it's added\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/FOSRestBundle.php#L42. @xabbuh It's in FOS\\RestBundle\\DependencyInjection\\Compiler\\JMSHandlersPass. That's where it's added\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/master/FOSRestBundle.php#L42. ",
    "PeterZhukov": "comsposer show\n||||\n:-----:|:-----:|:-----:\ncocur/slugify|v2.5|Converts a string into a slug.\ncomposer/ca-bundle|1.0.7|Lets you find a path to the system CA bundle, and in...\ndoctrine/annotations|v1.4.0|Docblock Annotations Parser\ndoctrine/cache|v1.6.2|Caching library offering an object-oriented API for ...\ndoctrine/collections|v1.4.0|Collections Abstraction library\ndoctrine/common|v2.7.3|Common Library for Doctrine projects\ndoctrine/data-fixtures|v1.2.2|Data Fixtures for all Doctrine Object Managers\ndoctrine/dbal|v2.5.13|Database Abstraction Layer\ndoctrine/doctrine-bundle|1.6.8|Symfony DoctrineBundle\ndoctrine/doctrine-cache-bundle|1.3.0|Symfony Bundle for Doctrine Cache\ndoctrine/doctrine-fixtures-bundle|2.3.0|Symfony DoctrineFixturesBundle\ndoctrine/inflector|v1.1.0|Common String Manipulations with regard to casing an...\ndoctrine/instantiator|1.0.5|A small, lightweight utility to instantiate objects ...\ndoctrine/lexer|v1.0.1|Base library for a lexer that can be used in Top-Dow...\ndoctrine/orm|v2.5.6|Object-Relational-Mapper for PHP\ndoctrine/phpcr-bundle|1.3.9|Symfony DoctrinePHPCRBundle\ndoctrine/phpcr-odm|1.4.2|Object-Document-Mapper for PHPCR\nfergusean/nusoap|0.9.5|NuSOAP re-packaged for Packagist/Composer\nfriendsofsymfony/rest-bundle|2.2.0|This Bundle provides various tools to rapidly develo...\nimagine/imagine|v0.6.3|Image processing for PHP 5.3\nincenteev/composer-parameter-handler|v2.1.2|Composer script handling your ignored parameter file\njackalope/jackalope|1.3.3|Jackalope PHPCR library\njackalope/jackalope-doctrine-dbal|1.3.0|Jackalope Transport library for Doctrine DBAL\njdorn/sql-formatter|v1.2.17|a PHP SQL highlighting library\njms/metadata|1.6.0|Class/method/property metadata management in PHP\njms/parser-lib|1.0.0|A library for easily creating recursive-descent pars...\njms/serializer|1.8.1|Library for (de-)serializing data of any complexity;...\njms/serializer-bundle|1.5.0|Allows you to easily serialize, and deserialize data...\nknplabs/knp-menu|2.2.0|An object oriented menu library\nknplabs/knp-menu-bundle|2.1.3|This bundle provides an integration of the KnpMenu l...\nliip/imagine-bundle|1.8.0|This bundle provides an image manipulation abstracti...\nmonolog/monolog|1.23.0|Sends your logs to files, sockets, inboxes, database...\nparagonie/random_compat|v2.0.10|PHP 5.x polyfill for random_bytes() and random_int()...\nphpcollection/phpcollection|0.5.0|General-Purpose Collection Library for PHP\nphpcr/phpcr|2.1.4|PHP Content Repository interfaces\nphpcr/phpcr-utils|1.3.0|PHP Content Repository implementation independant ut...\nphpoption/phpoption|1.5.0|Option Type for PHP\npsr/cache|1.0.1|Common interface for caching libraries\npsr/http-message|1.0.1|Common interface for HTTP messages\npsr/log|1.0.2|Common interface for logging libraries\nsensio/distribution-bundle|v5.0.20|Base bundle for Symfony Distributions\nsensio/framework-extra-bundle|v3.0.26|This bundle provides a way to configure your control...\nsensio/generator-bundle|v3.1.6|This bundle generates code for you\nsensiolabs/ansi-to-html|v1.1.3|A library to convert a text with ANSI codes to HTML\nsensiolabs/security-checker|v4.1.3|A security checker for your composer.lock\nsonata-project/admin-bundle|3.x-dev 559797e|The missing Symfony Admin Generator\nsonata-project/block-bundle|3.3.2|Symfony SonataBlockBundle\nsonata-project/cache|1.0.7|Cache library\nsonata-project/core-bundle|3.4.0|Symfony SonataCoreBundle\nsonata-project/datagrid-bundle|2.2.1|Symfony SonataDatagridBundle\ncomposer.json\n\"require\": {\n...\n\"friendsofsymfony/rest-bundle\": \"^2.2\"\n...\n}\n...\n\"minimum-stability\": \"dev\"\n...\nI looked at master code you linked - here it is, thanks, that solves problem.. comsposer show\n||||\n:-----:|:-----:|:-----:\ncocur/slugify|v2.5|Converts a string into a slug.\ncomposer/ca-bundle|1.0.7|Lets you find a path to the system CA bundle, and in...\ndoctrine/annotations|v1.4.0|Docblock Annotations Parser\ndoctrine/cache|v1.6.2|Caching library offering an object-oriented API for ...\ndoctrine/collections|v1.4.0|Collections Abstraction library\ndoctrine/common|v2.7.3|Common Library for Doctrine projects\ndoctrine/data-fixtures|v1.2.2|Data Fixtures for all Doctrine Object Managers\ndoctrine/dbal|v2.5.13|Database Abstraction Layer\ndoctrine/doctrine-bundle|1.6.8|Symfony DoctrineBundle\ndoctrine/doctrine-cache-bundle|1.3.0|Symfony Bundle for Doctrine Cache\ndoctrine/doctrine-fixtures-bundle|2.3.0|Symfony DoctrineFixturesBundle\ndoctrine/inflector|v1.1.0|Common String Manipulations with regard to casing an...\ndoctrine/instantiator|1.0.5|A small, lightweight utility to instantiate objects ...\ndoctrine/lexer|v1.0.1|Base library for a lexer that can be used in Top-Dow...\ndoctrine/orm|v2.5.6|Object-Relational-Mapper for PHP\ndoctrine/phpcr-bundle|1.3.9|Symfony DoctrinePHPCRBundle\ndoctrine/phpcr-odm|1.4.2|Object-Document-Mapper for PHPCR\nfergusean/nusoap|0.9.5|NuSOAP re-packaged for Packagist/Composer\nfriendsofsymfony/rest-bundle|2.2.0|This Bundle provides various tools to rapidly develo...\nimagine/imagine|v0.6.3|Image processing for PHP 5.3\nincenteev/composer-parameter-handler|v2.1.2|Composer script handling your ignored parameter file\njackalope/jackalope|1.3.3|Jackalope PHPCR library\njackalope/jackalope-doctrine-dbal|1.3.0|Jackalope Transport library for Doctrine DBAL\njdorn/sql-formatter|v1.2.17|a PHP SQL highlighting library\njms/metadata|1.6.0|Class/method/property metadata management in PHP\njms/parser-lib|1.0.0|A library for easily creating recursive-descent pars...\njms/serializer|1.8.1|Library for (de-)serializing data of any complexity;...\njms/serializer-bundle|1.5.0|Allows you to easily serialize, and deserialize data...\nknplabs/knp-menu|2.2.0|An object oriented menu library\nknplabs/knp-menu-bundle|2.1.3|This bundle provides an integration of the KnpMenu l...\nliip/imagine-bundle|1.8.0|This bundle provides an image manipulation abstracti...\nmonolog/monolog|1.23.0|Sends your logs to files, sockets, inboxes, database...\nparagonie/random_compat|v2.0.10|PHP 5.x polyfill for random_bytes() and random_int()...\nphpcollection/phpcollection|0.5.0|General-Purpose Collection Library for PHP\nphpcr/phpcr|2.1.4|PHP Content Repository interfaces\nphpcr/phpcr-utils|1.3.0|PHP Content Repository implementation independant ut...\nphpoption/phpoption|1.5.0|Option Type for PHP\npsr/cache|1.0.1|Common interface for caching libraries\npsr/http-message|1.0.1|Common interface for HTTP messages\npsr/log|1.0.2|Common interface for logging libraries\nsensio/distribution-bundle|v5.0.20|Base bundle for Symfony Distributions\nsensio/framework-extra-bundle|v3.0.26|This bundle provides a way to configure your control...\nsensio/generator-bundle|v3.1.6|This bundle generates code for you\nsensiolabs/ansi-to-html|v1.1.3|A library to convert a text with ANSI codes to HTML\nsensiolabs/security-checker|v4.1.3|A security checker for your composer.lock\nsonata-project/admin-bundle|3.x-dev 559797e|The missing Symfony Admin Generator\nsonata-project/block-bundle|3.3.2|Symfony SonataBlockBundle\nsonata-project/cache|1.0.7|Cache library\nsonata-project/core-bundle|3.4.0|Symfony SonataCoreBundle\nsonata-project/datagrid-bundle|2.2.1|Symfony SonataDatagridBundle\ncomposer.json\n\"require\": {\n...\n\"friendsofsymfony/rest-bundle\": \"^2.2\"\n...\n}\n...\n\"minimum-stability\": \"dev\"\n...\nI looked at master code you linked - here it is, thanks, that solves problem.. @iBasit \nchange your composer.json record from \"friendsofsymfony/rest-bundle\": \"^2.2.0\" - (version may differ) to \"friendsofsymfony/rest-bundle\": \"2.2.x-dev\". Then run composer update. I think ^2.2.x-dev is better (https://getcomposer.org/doc/articles/versions.md), but i didn't try it.\nUPD:\nAnd yeah, my i have \"minimum-stability\": \"dev\" (but you can also set \"prefer-stable\": true).. @iBasit \nchange your composer.json record from \"friendsofsymfony/rest-bundle\": \"^2.2.0\" - (version may differ) to \"friendsofsymfony/rest-bundle\": \"2.2.x-dev\". Then run composer update. I think ^2.2.x-dev is better (https://getcomposer.org/doc/articles/versions.md), but i didn't try it.\nUPD:\nAnd yeah, my i have \"minimum-stability\": \"dev\" (but you can also set \"prefer-stable\": true).. ",
    "iBasit": "How did it solve the problem?. How did it solve the problem?. I have same problem with 2.2 and following is my config\n\nfriendsofsymfony/rest-bundle             2.2.0                  This Bundle provides various tools to rapidly develop RESTful A...\n\n```\nfos_rest:\n    param_fetcher_listener: true\n    routing_loader:\n        prefix_methods: false\n        default_format: json                            # All responses should be JSON formated\n        include_format: false\n```\nI found following in the configuration\n\n. I have same problem with 2.2 and following is my config\n\nfriendsofsymfony/rest-bundle             2.2.0                  This Bundle provides various tools to rapidly develop RESTful A...\n\n```\nfos_rest:\n    param_fetcher_listener: true\n    routing_loader:\n        prefix_methods: false\n        default_format: json                            # All responses should be JSON formated\n        include_format: false\n```\nI found following in the configuration\n\n. ",
    "alterphp": ":+1: . ",
    "JuanLuisGarciaBorrego": "Any alternative or example?\nthanks!. Hi @xabbuh \nYes, when I use POST the Constraint @UniqueEntity(\"mail\") it's works, but when using PUT jumps the constraint because it says that the email already exists (it exists because I am editing all the properties of that object and I have not modified it).\nAll this without using form.\n. Ok!\nI go to create a small example project and I notify you\nThanks. @xabbuh  here has the small example project with error\nProject issue\n@jfx  I go to try your solution and then i notify you\nThanks!. @jfx I'm trying with your solution, but in my $personUpdate ($projectDTO in your project) always there is an error.\nMy code\n```php\n    /\n     * @Rest\\Put(path = \"/people/{id}\", name = \"api_put\")\n     * @ParamConverter(\"person\", class=\"AppBundle\\Entity\\Person\")\n     * @ParamConverter(\"personUpdate\", converter=\"fos_rest.request_body\")\n     \n     * @Rest\\View(StatusCode = Response::HTTP_NO_CONTENT)\n     /\n    public function putPersonAction(Person $person, Person $personUpdate, Request $request)\n    {\n    $validator = $this->get('validator');\n    $validationUpdate = $validator->validate($person);\n\n\n    if($validationUpdate->count()) {\n        return $this->view($validationUpdate, Response::HTTP_BAD_REQUEST);\n    }\n  ...\n\n```\nyour code: \nphp\n/**\n* @ParamConverter(\"projectDB\", options={\"mapping\": {\"prefid\": \"refid\"}})\n* @ParamConverter(\"projectDTO\", converter=\"fos_rest.request_body\"\n*/\npublic function putProjectAction(ProjectDTO $projectDTO, Project $projectDB, Request $request)\n    {\n        if ($this->isInvalidToken($request, $projectDB->getToken())) {\n            return $this->getInvalidTokenView();\n        }\n        $validator = $this->get('validator');\n        $violationsDTO = $validator->validate($projectDTO);\n        if (count($violationsDTO) > 0) {\n            return $this->view($violationsDTO, Response::HTTP_BAD_REQUEST);\n        }\n        .... ",
    "jfx": "Hi,\nI had the same issue with UniqueEntity constrainst for POST and PUT requests. My hypothesis :\nFor PUT request :\n- the constrainst violations checks your first Entity\\Sample -> Ok it is the one from the database,\n- the constrainst violations checks your second Entity\\Sample from body -> It is a new one (not saved in DB) and failed because email already exists in DB.\nFor POST request, there is no probleme because on each checks the mail doesn't exist in database.\nTo bypass that you can use a form or a specific object to catch data from body :\nExample https://github.com/jfx/ci-report/blob/master/src/AppBundle/Controller/ProjectApiController.php (method : putProjectAction) . @JuanLuisGarciaBorrego : sure, $projectDTO is an instance of ProjectDTO class that is more or less identical to Project class except there is no constraint on unique field. This constrainst will be check on the second validation on Project class object.. Same issue on Symfony 4,\nI remove the line :\nexception_controller: 'App\\Exception\\ExceptionController::showAction'\nand it solves it.. ",
    "GuillaumeSTEIN": "Awesome, how can we make it happen ?. Go \ud83d\udc4d . Thank you for this new feature !. ",
    "shakura": "@sandermarechal does travis still fail? Do you need any help on it? \nI would love to see this PR merged . @sandermarechal merging master can probably help. @sandermarechal but travis CI is still failing, isn't it? . ",
    "l-vo": "Is there anything new about this PR please ?. Great :). @xabbuh Indeed, this kind of check was already done but was executed too late in the code. I moved it before constraints retrieval.. I'm agree with the approach you're suggesting, it was even my first intent but when I saw the existing exception I chose to stay close to the original code.  \nI plan to check the existence of a class from symfony/validator (Symfony\\Component\\Validator\\Constraint for instance) when the param fetcher listener is enabled and throw an exception if the class doesn't exist.\nConsidering this, I think I should change the error message here since the error won't be caused by symfony/validator component lack.\nWhat is your opinion about this please ?\n. @xabbuh updated, thanks :). My bad, I forgot E_USER_DEPRECATED type, sorry for that :/. Great ! I didn't know expectedDeprecation annotation, thank you :)). Done in #1980 but you've already seen it :). Indeed it might be more prudent. But the developper might miss it too because it's only a deprecation. The initial goal of the PR is too avoid a \"class not found\" message. What do you think about doing both things:\n- Add a deprecation at compile time\n- Fix the validator check position like I suggest it earlier (69e1d7) to have a more mainingfull message than \"class not found\" ?. I pushed the suggested changes. @xabbuh Reworded, thank you :). ",
    "awudarowicz": "It runs @QueryParam only if you use this param in your controller action via ParamFetcher $paramFetcher.\nSo simply do this in your action body:\n$count = $paramFetcher->get('count')\nAnd strict mode will work and throw an error because you want param which doesn't exists. ",
    "korsmakolnikov": "```\n[BlackSheep@mbp]$ bin/console debug:router\n\nName                       Method   Scheme   Host   Path\n\n...\n  get_configurazione         GET      ANY      ANY    /api/configuraziones/{id}\n\n```\nAs you can see, just like I said, that's the route. \nBut I found the problem now in the routing file: \nconfigurazione:\n    type:     rest\n    host:     ANY\n    resource: '@AppBundle/Controller/ConfigurazioneController.php'\nhost: ANY actually doesn't fit with localhost. Actually I suppose is totally wrong value for that entry. So debug:router list the route but that route doesn't match with hosts. The result is a 404. \n. ```\n[BlackSheep@mbp]$ bin/console debug:router\n\nName                       Method   Scheme   Host   Path\n\n...\n  get_configurazione         GET      ANY      ANY    /api/configuraziones/{id}\n\n```\nAs you can see, just like I said, that's the route. \nBut I found the problem now in the routing file: \nconfigurazione:\n    type:     rest\n    host:     ANY\n    resource: '@AppBundle/Controller/ConfigurazioneController.php'\nhost: ANY actually doesn't fit with localhost. Actually I suppose is totally wrong value for that entry. So debug:router list the route but that route doesn't match with hosts. The result is a 404. \n. Well xabbuh, you're right, but before the I've try with manual route conf so even if the route was exactly /api/configurazione/{id} it did not work for the reason above. . Well xabbuh, you're right, but before the I've try with manual route conf so even if the route was exactly /api/configurazione/{id} it did not work for the reason above. . ",
    "gabma": "Make sure you declare your service like this \napi.exception_normalizer:\n        class: ApiBundle\\Serializer\\ExceptionWrapperHandler\n        tags:\n            - { name: serializer.normalizer }\n        arguments: [\"@fos_rest.exception.messages_map\", false]\nApiBundle/Serialize/ExceptionWrapperHandler.php\n```\nnamespace ApiBundle\\Serializer;\nuse FOS\\RestBundle\\Serializer\\Normalizer\\ExceptionNormalizer;\nclass ExceptionWrapperHandler extends ExceptionNormalizer\n{\n    /*\n     * {@inheritdoc}\n     /\n    public function normalize($object, $format = null, array $context = [])\n    {\n        $data = [];\n    if (isset($context['template_data']['status_code'])) {\n        $data['my_code'] = $statusCode = $context['template_data']['status_code'];\n    }\n\n    $data['my_message'] = $this->getExceptionMessage($object, isset($statusCode) ? $statusCode : null);\n\n    return $data;\n}\n\n/**\n * {@inheritdoc}\n */\npublic function supportsNormalization($data, $format = null)\n{\n    return $data instanceof \\Exception;\n}\n\n}\n```\nand  config.yml\nexception:\n        enabled: true. ",
    "miholeus": "@gabma Thanks for your answer! I've checked it, but normalize function is not invoked. And yes, I enabled serializer.\nThe only way I could solve this problem was to create kernel.event_subscriber.. I think it does not relate to the bundle. You should look at the problem in your tests... ",
    "Landerstraeten": "@xabbuh, check http://symfony.com/doc/master/bundles/FOSRestBundle/versioning.html\nIt's 3 times '1'.... @xabbuh, check http://symfony.com/doc/master/bundles/FOSRestBundle/versioning.html\nIt's 3 times '1'.... @xabbuh, are you happy with the change?. Oh ok. I'll update this.. ",
    "zairigimad": "you can try to use the SymfonySerializerAdaptater \nfos_rest:\n    service:\n        serializer: fos_rest.serializer.symfony\n. ",
    "connorhu": "https://github.com/FriendsOfSymfony/FOSRestBundle/blob/4a1b70199943460273c4ab8f8ff841c8c79e0d28/DependencyInjection/Compiler/ConfigurationCheckPass.php#L33\nThe new id is:\nSensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener\n. ",
    "aequasi": "Simple fix for anyone that needs it:\nThrow this in your services.yaml (or config.yml for sf 3.0):\nservices:\n    sensio_framework_extra.view.listener:\n        alias: Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener. ",
    "roukmoute": "Up?. ",
    "Parent5446": ":sweat_smile: I was wondering if this PR would ever see the light of day. Let me know if there's anything I need to do to get it merge-worthy (although it seems like it might be already).. ",
    "ramoshka": "Try adding exception_controller: 'fos_rest.exception.controller:showAction' line to your config\nfos_rest:\n    exception:\n        enabled: true\n        exception_controller: 'fos_rest.exception.controller:showAction'\nIf you do not define exception controller and have TwigBundle enabled fos_rest.exception.twig_controller:showAction will be used`\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/80a41f571250ad4c14f7e36c267eb968575884d8/DependencyInjection/FOSRestExtension.php#L331. ",
    "rsaenen": "Having the same issue with Symfony 4 and Flex.. ",
    "Sharom": "Check your bundles registration order. Try to load FOSRestBundle after the TwigBundle:\nphp\n <?php\n// bundles.php\nreturn [\n    // ...\n    Symfony\\Bundle\\TwigBundle\\TwigBundle::class => ['all' => true],\n    FOS\\RestBundle\\FOSRestBundle::class => ['all' => true],\n];\nIt relates to the compiler pass:\n```php\nnamespace FOS\\RestBundle\\DependencyInjection\\Compiler;\nuse Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\n/\n * Remove the 'fos_rest.exception.twig_controller' service if twig is enabled.\n \n * @internal\n /\nfinal class TwigExceptionPass implements CompilerPassInterface\n{\n    public function process(ContainerBuilder $container)\n    {\n        if (!$container->has('templating.engine.twig')) {\n            $container->removeDefinition('fos_rest.exception.twig_controller');\n        }\n    }\n}\n```\nIf you really need to usefos_rest.exception.twig_controller, than install symfony/templating\nand activate twig engine in the framework configuration:\nframework:\n    templating:\n        engines: twig\n. ",
    "ahundiak": "Given that the templating engine is no longer installed and enabled by default, why not modify the TwigExceptionPass to just check for the twig service instead of templating.engine.twig?  Seem like it should still work.  You lose the old style twig template path support but that should not be a problem.\n. ",
    "tomaszhanc": "FIxed in https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1776. ",
    "juliusstoerrle": "Can this please be merged! . Well got arund to test today. This will be fixed when merging #1776. As its a duplicate to #1775 I'm closing. Are there any services a consumer needs? I do not access the container directly in my code but still get the ServiceNotFound for \"fos_rest.view_handler\". SF4, will try a demo but might take me a day or two. Making a service public is also needed when the bundle itself accesses the container.\nI just had a look at the FosRestController and that might be the culprit. Look at line 34\n$this->viewhandler = $this->container->get('fos_rest.view_handler');\nA workaround would be to use the ControllerTrait and fetch the ViewHandler in my Concrete Controllers constructor - will do some testing and debugging. With Symfony Standard Edition 3.4-RC1 and current master I do not get any error or deprecation notice. I just went back to my SF4 project, and I'm still getting the ViewHandler not found error, but I can workaround that by using the ControllerTrait and a Constructor Argument ViewHandlerInterface.\n. When I deserialize he is missing the fos_rest.decoder.json, setting public=truefor that service in the body_listerner.xml service config, does solve the problem. I guess the same applies to fos_rest.decoder.jsontoform and fos_rest.decoder.xml, but I am not using those two.. When I deserialize he is missing the fos_rest.decoder.json, setting public=truefor that service in the body_listerner.xml service config, does solve the problem. I guess the same applies to fos_rest.decoder.jsontoform and fos_rest.decoder.xml, but I am not using those two.. When throwing exceptions he does not find fos_rest.serializer.exception_normalizer.jms:\n\n(2/2)\u00a0ErrorExceptionWarning: call_user_func() expects parameter 1 to be a valid callback, class 'fos_rest.serializer.exception_normalizer.jms' not found\nin\u00a0GraphNavigator.php\u00a0(line 203)\n\nNot sure how I can  solve that one?. When throwing exceptions he does not find fos_rest.serializer.exception_normalizer.jms:\n\n(2/2)\u00a0ErrorExceptionWarning: call_user_func() expects parameter 1 to be a valid callback, class 'fos_rest.serializer.exception_normalizer.jms' not found\nin\u00a0GraphNavigator.php\u00a0(line 203)\n\nNot sure how I can  solve that one?. Pulled your changes to jms serializer and the bundle, now i got:\n\nServiceNotFoundException\nThe \"fos_rest.serializer.exception_normalizer.jms\" service or alias has been removed or inlined when the container was compiled. You should either make it public, or stop using the container directly and use dependency injection instead.\nin\u00a0Container.php\u00a0(line 252)\n--\nat\u00a0Container->get('fos_rest.serializer.exception_normalizer.jms')in\u00a0getJmsSerializerService.php\u00a0(line 80)\nat\u00a0srcDevDebugProjectContainer->{closure}()in\u00a0ServiceLocator.php\u00a0(line 57)\nat\u00a0ServiceLocator->get('fos_rest.serializer.exception_normalizer.jms')in\u00a0LazyHandlerRegistry.php\u00a0(line 57)\nat\u00a0LazyHandlerRegistry->getHandler(1, 'Exception', 'json')in\u00a0GraphNavigator.php\u00a0(line 202)\nat\u00a0GraphNavigator->accept(object(Exception),\u00a0array('name' => 'Exception', 'params' =>\u00a0array()),\u00a0object(SerializationContext))in\u00a0Serializer.php\u00a0(line 193)\nat\u00a0Serializer->visit(object(JsonSerializationVisitor),\u00a0object(SerializationContext),\u00a0object(Exception), 'json',\u00a0null)in\u00a0Serializer.php\u00a0(line 112)\nat\u00a0Serializer->JMS\\Serializer{closure}(object(JsonSerializationVisitor))\nat\u00a0call_user_func(object(Closure),\u00a0object(JsonSerializationVisitor))in\u00a0Some.php\u00a0(line 89)\nat\u00a0Some->map(object(Closure))in\u00a0Serializer.php\u00a0(line 115)\nat\u00a0Serializer->serialize(object(Exception), 'json',\u00a0object(SerializationContext))in\u00a0JMSSerializerAdapter.php\u00a0(line 59)\nat\u00a0JMSSerializerAdapter->serialize(object(Exception), 'json',\u00a0object(SerializationContext))in\u00a0ViewHandler.php\u00a0(line 453)\nat\u00a0ViewHandler->initResponse(object(View), 'json')in\u00a0ViewHandler.php\u00a0(line 416)\nat\u00a0ViewHandler->createResponse(object(View),\u00a0object(Request), 'json')in\u00a0ViewHandler.php\u00a0(line 300)\nat\u00a0ViewHandler->handle(object(View))in\u00a0ExceptionController.php\u00a0(line 71)\n\nAnything I can do to debug this?\n. Pulled your changes to jms serializer and the bundle, now i got:\n\nServiceNotFoundException\nThe \"fos_rest.serializer.exception_normalizer.jms\" service or alias has been removed or inlined when the container was compiled. You should either make it public, or stop using the container directly and use dependency injection instead.\nin\u00a0Container.php\u00a0(line 252)\n--\nat\u00a0Container->get('fos_rest.serializer.exception_normalizer.jms')in\u00a0getJmsSerializerService.php\u00a0(line 80)\nat\u00a0srcDevDebugProjectContainer->{closure}()in\u00a0ServiceLocator.php\u00a0(line 57)\nat\u00a0ServiceLocator->get('fos_rest.serializer.exception_normalizer.jms')in\u00a0LazyHandlerRegistry.php\u00a0(line 57)\nat\u00a0LazyHandlerRegistry->getHandler(1, 'Exception', 'json')in\u00a0GraphNavigator.php\u00a0(line 202)\nat\u00a0GraphNavigator->accept(object(Exception),\u00a0array('name' => 'Exception', 'params' =>\u00a0array()),\u00a0object(SerializationContext))in\u00a0Serializer.php\u00a0(line 193)\nat\u00a0Serializer->visit(object(JsonSerializationVisitor),\u00a0object(SerializationContext),\u00a0object(Exception), 'json',\u00a0null)in\u00a0Serializer.php\u00a0(line 112)\nat\u00a0Serializer->JMS\\Serializer{closure}(object(JsonSerializationVisitor))\nat\u00a0call_user_func(object(Closure),\u00a0object(JsonSerializationVisitor))in\u00a0Some.php\u00a0(line 89)\nat\u00a0Some->map(object(Closure))in\u00a0Serializer.php\u00a0(line 115)\nat\u00a0Serializer->serialize(object(Exception), 'json',\u00a0object(SerializationContext))in\u00a0JMSSerializerAdapter.php\u00a0(line 59)\nat\u00a0JMSSerializerAdapter->serialize(object(Exception), 'json',\u00a0object(SerializationContext))in\u00a0ViewHandler.php\u00a0(line 453)\nat\u00a0ViewHandler->initResponse(object(View), 'json')in\u00a0ViewHandler.php\u00a0(line 416)\nat\u00a0ViewHandler->createResponse(object(View),\u00a0object(Request), 'json')in\u00a0ViewHandler.php\u00a0(line 300)\nat\u00a0ViewHandler->handle(object(View))in\u00a0ExceptionController.php\u00a0(line 71)\n\nAnything I can do to debug this?\n. see https://github.com/juliusstoerrle/sf4-rest-error.\nMy fos_rest config might be wrong too.. see https://github.com/juliusstoerrle/sf4-rest-error.\nMy fos_rest config might be wrong too.. Just pulled your changes into the example project, and there I'm getting following error: (I guess thats one of those additional issues you reported 2 days ago.)\n\nFatalThrowableError\nType error: Argument 1 passed to FOS\\RestBundle\\Serializer\\JMSHandlerRegistry::__construct() must implement interface JMS\\Serializer\\Handler\\HandlerRegistryInterface, instance of Symfony\\Component\\DependencyInjection\\ServiceLocator given, called in C:\\xampp\\htdocs\\my-project\\var\\cache\\dev\\ContainerGfhFFM6\\getJmsSerializerService.php on line 90\n\nAs stated in my comment in the PR, I do not get any errors in my main project, even through dependencies and config are identical.. Just pulled your changes into the example project, and there I'm getting following error: (I guess thats one of those additional issues you reported 2 days ago.)\n\nFatalThrowableError\nType error: Argument 1 passed to FOS\\RestBundle\\Serializer\\JMSHandlerRegistry::__construct() must implement interface JMS\\Serializer\\Handler\\HandlerRegistryInterface, instance of Symfony\\Component\\DependencyInjection\\ServiceLocator given, called in C:\\xampp\\htdocs\\my-project\\var\\cache\\dev\\ContainerGfhFFM6\\getJmsSerializerService.php on line 90\n\nAs stated in my comment in the PR, I do not get any errors in my main project, even through dependencies and config are identical.. ~Hey, when throwing exceptions I currently get:~\n~>  The \"fos_rest.serializer.exception_normalizer.jms\" service or alias has been removed or inlined when the container was compiled. You should either make it public, or stop using the container directly and use dependency injection instead~\n~See https://github.com/juliusstoerrle/sf4-rest-error for the code~\nBy bad, when changing from SF4 Rcs to the release I also changed the fos rest version which resulted in not pulling the changes #1805 \n. @sanchobouillant Do you mean the issue with the service: fos_rest.serializer.exception_normalizer.jms?\nThat is solved by the PR #1805, but as that one is still open you need to put following version constraint into your composer and run composer update:\n\"friendsofsymfony/rest-bundle\": \"dev-master#dcd5add5153af7e479e97a233efa6fdcd0164879 as 2.3\",\nLet me know if you need something else :). @deniskhmel What version of the bundle are you on and can you please post of UserAddressControllerTest::testPostAddress. @sanchobouillant I think that was solved by https://github.com/schmittjoh/JMSSerializerBundle/pull/618. Are you on the latest Version of JMSSerializerBundle (^2.3 is mine). But I can't recall exactly what I did.. @deniskhmel  I think you might mixed up my last two comments :) \nDoes your Controller extend from FosRestController? \nIf so I worked around the deprecation by creating my own base controller class:\n```\n<?php\ndeclare(strict_types=1);\nnamespace App\\Controller;\nuse FOS\\RestBundle\\Controller\\ControllerTrait;\nuse FOS\\RestBundle\\View\\ViewHandlerInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller as FrameworkController;\nabstract class Controller extends FrameworkController\n{\n    use ControllerTrait;\n/**\n * @param ViewHandlerInterface $handler\n */\npublic function __construct(ViewHandlerInterface $handler)\n{\n    $this->setViewHandler($handler);\n}\n\n}\n```\nThe Problem here is that the FosRestController wants to fetch the view handler service directly from the container, but that does not work from SF4 onward because the Service is registered as private. \n@xabbuh Where you able to track down why the service is private? (Re: https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1790#issuecomment-346330143)\n. @deniskhmel Yes but the test is calling a controller (the one it is supposed to test). It's not the test which is the problem here.. @deniskhmel Thats unexpected, I can not see how that can happen, ViewHandlerInterface is not an optional argument of the constructor.. Maybe related to https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1786. Maybe related to https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1786. @xabbuh Thanks for looking into this. I just pulled your changes and my exceptions get serialized without any problem. I currently can not see any other issues, but I guess I'm using only a small subset off the features of the bundle.. @xabbuh Thanks for looking into this. I just pulled your changes and my exceptions get serialized without any problem. I currently can not see any other issues, but I guess I'm using only a small subset off the features of the bundle.. The same as my last comment: https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1790. For Reference: https://github.com/schmittjoh/JMSSerializerBundle/issues/626. This should be solved by https://github.com/FriendsOfSymfony/FOSRestBundle/pull/1805 (at least it works now on my side) @kbkk maybe you can test that commit so that @xabbuh can get the PR merged \nHere the Composer Version Constraint:\n\"friendsofsymfony/rest-bundle\": \"dev-master#dcd5add5153af7e479e97a233efa6fdcd0164879 as 2.3\",. @kbkk Not sure, maybe @xabbuh wanted more feedback? . Well, I just did some work on this. I was able to resolve the issue but I don't know if its a solution or a workaround, but maybe this helps others. \nI do get the same error on a fresh clone of my project, but not on the development repository I worked on the last weeks. Both of them use the exact same versions of my software and ALL vendors.\nThe bundle wants to serialize to html, because there is no format set on the View object or the Request object. The $request->attributes->get('_format') returns null.\nI was not able to figure out where \nI do not use the format stuff of this bundle, my config:\n```\nfos_rest:\n    routing_loader:\n        default_format: json\n        include_format: false\n    body_listener: true\n   # format_listener:\n   #       rules:\n   #           - { path: '^/', priorities: ['json'], fallback_format: json, prefer_extension: false }\n    param_fetcher_listener: true\n    access_denied_listener:\n        json: true\n    view:\n        view_response_listener: 'force'\n        formats:\n            json: true\n```\nAfter uncommenting the commented lines from the config, it know works again. (I guess that might be the reason why I had them in there initially). This actually surprises me a little because when setting default_format: json and include_format: false I expected it should work without the format listener. Is it this way on purpose?. Do you have any exceptions in your log files?. ",
    "ThomasDupont": "Hello,\nSame issue with type hinting\nphp\n    /**\n     * @Rest\\Get(\n     *     \"v1/sales/list\",\n     *     name=\"list_sales\"\n     * )\n     *\n     * @Rest\\QueryParam(\n     *     name=\"markets\",\n     *     nullable=false,\n     *     map=true,\n     *     requirements=\".{0,2}\",\n     *     strict=true\n     * )\n     *\n     * @Rest\\View()\n     */\n    public function listSalesAction(array $markets): array\n    {\nFatalThrowableError : Type error: Argument 1 passed to Api\\SalesBundle\\Controller\\SalesController::listSalesAction() must be of the type array, null given\nAlternative solution:\nphp\n    /**\n     * @Rest\\Get(\n     *     \"v1/sales/list\",\n     *     name=\"list_sales\"\n     * )\n     *\n     * @Rest\\QueryParam(\n     *     name=\"markets\",\n     *     nullable=false,\n     *     map=true,\n     *     requirements=\".{0,2}\",\n     *     strict=true\n     * )\n     *\n     * @Rest\\View()\n     */\n    public function listSalesAction(?array $markets): array\n    {   \n        if (!$markets) {\n              throw new BadRequestHttpException('markets_not_null');\n        }. Hello,\nSame issue with type hinting\nphp\n    /**\n     * @Rest\\Get(\n     *     \"v1/sales/list\",\n     *     name=\"list_sales\"\n     * )\n     *\n     * @Rest\\QueryParam(\n     *     name=\"markets\",\n     *     nullable=false,\n     *     map=true,\n     *     requirements=\".{0,2}\",\n     *     strict=true\n     * )\n     *\n     * @Rest\\View()\n     */\n    public function listSalesAction(array $markets): array\n    {\nFatalThrowableError : Type error: Argument 1 passed to Api\\SalesBundle\\Controller\\SalesController::listSalesAction() must be of the type array, null given\nAlternative solution:\nphp\n    /**\n     * @Rest\\Get(\n     *     \"v1/sales/list\",\n     *     name=\"list_sales\"\n     * )\n     *\n     * @Rest\\QueryParam(\n     *     name=\"markets\",\n     *     nullable=false,\n     *     map=true,\n     *     requirements=\".{0,2}\",\n     *     strict=true\n     * )\n     *\n     * @Rest\\View()\n     */\n    public function listSalesAction(?array $markets): array\n    {   \n        if (!$markets) {\n              throw new BadRequestHttpException('markets_not_null');\n        }. ",
    "woofiewilly": "I have noticed an additional issue. When adding the Get() annotation for a custom route, it gets placed above the rest of the controller routes in the router.\nExample routes, without Get() annotation:\nget_systems\nnew_system\nget_system\nAfter adding Get() annotation for get_system:\nget_system    <-- This is a problem because it will catch requests intended for new_system\nget_systems\nnew_system\nget_systemget_system    <-- I assume this is due to not having the NoRoute() annotation\nI am thinking this is not intended behavior. Is there a different way to make sure that a route will not catch requests intended for a different route?. ",
    "sanchobouillant": "@juliusstoerrle how did you fix your issue ? I have the same. that's solved my fos_rest.serializer.exception_normalizer.jms problem :D \nDo you have any solution for the HandlerRegistryInterface issue ?. @juliusstoerrle I try with 2.3 and dev-master. Still have the issue.\nI will create a new issue. I try with dev-master and 2.3.. > \"jms/serializer-bundle\": \"dev-master\",\nShould I try a different version ?. Ow, ok. Sorry.\n\njms/metadata                        1.6.0\njms/parser-lib                      1.0.0\njms/serializer                      1.10.0 \njms/serializer-bundle               dev-master 8172469\nfriendsofsymfony/rest-bundle        dev-master dcd5add\nsymfony/framework-bundle            v4.0.2. With the commit #0f85a17149028f38708aca926e7eb8bbd639ca1d I have the error\n\nWarning: ReflectionObject::__construct() expects parameter 1 to be object, null given. I create a small project that reproduce the 2 errors I have.\nhttps://github.com/sanchobouillant/FosRestBundleIssues. ",
    "XWB": "A similar issue is present in FOSCommentBundle:\nThe \"fos_rest.view_handler\" service is private, getting it from the container is deprecated since Symfony 3.2 and will fail in 4.0. You should either make the service public, or stop using the container directly and use dependency injection instead: 23x\n    5x in ApiTest::testReplyToComment from FOS\\CommentBundle\\Tests\\Functional\n    4x in ApiTest::testGetCommentFlatSorted from FOS\\CommentBundle\\Tests\\Functional\n    3x in ApiTest::testAddCommentToThread from FOS\\CommentBundle\\Tests\\Functional\n    2x in ApiTest::testGetThreadFormAndSubmit from FOS\\CommentBundle\\Tests\\Functional\n    2x in ApiTest::testGetEmptyThread from FOS\\CommentBundle\\Tests\\Functional\n    2x in ApiTest::testGetCommentTree from FOS\\CommentBundle\\Tests\\Functional\n    2x in ApiTest::testGetCommentTreeDepth from FOS\\CommentBundle\\Tests\\Functional\n    2x in ApiTest::testGetCommentFlat from FOS\\CommentBundle\\Tests\\Functional\n    1x in ApiTest::testGetThread from FOS\\CommentBundle\\Tests\\Functional. @xabbuh Any clue why the PHP 5.5 test fails?\n\n1) FOS\\RestBundle\\Tests\\Functional\\SerializerErrorTest::testSerializeExceptionJson with data set #1 ('JMSSerializer')\nDoctrine\\Common\\Annotations\\AnnotationException: [Semantical Error] The annotation \"@template\" in class PhpCollection\\AbstractMap was never imported. Did you maybe forget to add a \"use\" statement for this annotation?\n2) FOS\\RestBundle\\Tests\\Functional\\SerializerErrorTest::testSerializeExceptionXml with data set #1 ('JMSSerializer', '<?xml version=\"1.0\" encoding=...sult>\\n')\nDoctrine\\Common\\Annotations\\AnnotationException: [Semantical Error] The annotation \"@template\" in class PhpCollection\\AbstractMap was never imported. Did you maybe forget to add a \"use\" statement for this annotation?\n\nAs far as I can see, sensio/framework-extra-bundle is installed.. @xabbuh Current status:\n\n[ ] PHP 5.5 test fails due to error above. No clue what's going on.\n[x]  PHP 5.6 fixed by increasing memory limit.\n[ ] Symfony LTS 2 tests hangs, reason unknown.\n[x] Symfony LTS 3 fixed by increasing memory limit.\n[x] Symfony 4 stable added.\n[x] Symfony dev test fails. I moved it to allow_failes until somebody else can fix it. . @xabbuh And the Symfony 2 test is broke due to the following error:\n\n\n1) FOS\\RestBundle\\Tests\\Functional\\SerializerErrorTest::testSerializeExceptionJson with data set #1 ('JMSSerializer')\nDoctrine\\Common\\Annotations\\AnnotationException: [Semantical Error] The annotation \"@dataProvider\" in method FOS\\RestBundle\\Tests\\Functional\\SerializerErrorTest::testSerializeExceptionJson() was never imported. Did you maybe forget to add a \"use\" statement for this annotation?. Nice :+1: . @xabbuh Any timeline for a new release?. @HeyIAmBob Next release is almost ready, @xabbuh just needs to add a tag to https://github.com/FriendsOfSymfony/FOSRestBundle/releases :). @xabbuh Reverting #1805 resolves the PHP 5.5 and Symfony 2 tests. Just the Symfony 4 test requires another fix.. :+1: . Nice find @xabbuh \n\nJust one more test needs to be resolved:\n\nFOS\\RestBundle\\Tests\\Functional\\DependencyInjectionTest::testSerializerRelatedServicesAreNotRemovedWhenJmsSerializerBundleIsEnabled\nSymfony\\Component\\DependencyInjection\\Exception\\ServiceNotFoundException: The \"test.jms_serializer.handler_registry\" service or alias has been removed or inlined when the container was compiled. You should either make it public, or stop using the container directly and use dependency injection instead.. All green :tada: . This won't work on older Symfony versions.. I guess there is no easy fix for this one.. That's new to me, I'll have a look.. \n",
    "eloyekunle": "What is the fix for this?. ",
    "romainneutron": "Cool, thanks @xabbuh for this fast answer. ",
    "vincentsommer": "+1 \nSame problem, can't get API versioning to work with Symfony 4.1. Any solution for this?. ",
    "iMac0de": "+1\nI have the same problem.\nIt is specify in the Symfony doc that the version is automatically set to the context of the view returned in the controller (by using View::create() or $this->view()) (https://symfony.com/doc/master/bundles/FOSRestBundle/versioning.html#configure-fosrestbundle-to-use-the-api-versioning).\nI have checking the context and it seems that the value of the version is always null. If I specify the version value manually, it is working. I have the attributes for my newest version and not for the old ones.. +1\nI have the same problem.\nIt is specify in the Symfony doc that the version is automatically set to the context of the view returned in the controller (by using View::create() or $this->view()) (https://symfony.com/doc/master/bundles/FOSRestBundle/versioning.html#configure-fosrestbundle-to-use-the-api-versioning).\nI have checking the context and it seems that the value of the version is always null. If I specify the version value manually, it is working. I have the attributes for my newest version and not for the old ones.. ",
    "kunicmarko20": "@juliusstoerrle I tried with that fix and I had the same problem, as you can see branch was \"friendsofsymfony/rest-bundle\": \"^2.3@dev\". @juliusstoerrle I tried with that fix and I had the same problem, as you can see branch was \"friendsofsymfony/rest-bundle\": \"^2.3@dev\". ",
    "mickeyooo": "Symfony 4.1.1 + rest 2.3.1\nException thrown when handling an exception (Symfony\\Component\\Config\\Exception\\FileLoaderLoadException: The file \"../../src/Controller/Api/Employee\" does not exist (in: /Users/hua/Desktop/integral-mall/src, /Users/hua/Desktop/integral-mall/src/Resources) in ../../src/Controller/Api/Employee (which is being imported from \"/Users/hua/Desktop/integral-mall/config/routes/rest.yaml\"). Make sure there is a loader supporting the \"rest\" type.). ",
    "wibimaster": "+1, same problem with Symfony 3.4 (installed with Symfony Flex).\nInstallation of Twig bundle resolve the problem.\nBut it's ugly to have to install Twig for JSON rendered ;). ",
    "matigda": "Well I can actually make a PR to solve it but the question is how authors would like it to be resolved. Whether add this definition again in some compiler pass in this bundle or just create another listener which would do what should be done or ... some other solution which I haven't thought of ;). ",
    "PierrickMartos": "Same issue here and really difficult to identify it whit current error message. Thanks!. ",
    "jamalelomri": "you should add populateDefaultVars in the view annotation parameters like this :\n/\n\n     * @Rest\\View(populateDefaultVars=false)\n     /. ",
    "kbkk": "@juliusstoerrle it did the trick. Why isn't it merged yet?. ",
    "jeff1985": "Thanks for providing that issue! I also experienced the same. Fixed by switching to the dev version in composer.json:\n\"friendsofsymfony/rest-bundle\": \"2.3.x-dev\"\n\nSo imho the issue here can be closed as the issue is merged allready into master branch.. ",
    "pathmissing": "When I add entries to the routes.yaml to overwrite the routes that the framework extra bundle creates, I am able to use the FOSRestBundle ViewHandler without any issues:\nyaml\napp_client_getclients:\n    path: /clients.{_format}\nI don't know the symfony internals well enough but I am guessing that overwriting the route names somehow allows the FOSRestBundle to handle the route matching instead of the framework extra bundle. Can anyone explain why this works?. @juliusstoerrle That format listener rule seems to solve the problem. Still curious why the automatically generated routes contain a default value for 'media_type' and the manual routes don't. Thanks for your time!. ",
    "niketpathak": "They way I solved it was by Adding a line to config/packages/framework.yaml\nframework:\n    templating: { engines: ['twig'] }\nReference. ",
    "karousn": "This is a general issue of many Symfony Bundle, we have to set any service in any bundle to public because of a discussion to considered the default status private.\nWe have to apply the same change as this or that what is think we must do.. we have to use dev-master or ^2.3@dev to get fixed.. So we should install SensioFrameworkExtraBundle until this PR not merged ?. ",
    "smalot": "@xabbuh Any timeline for a new release?\nThis issue is blocking my current Symfony upgrade to 3.4.4\nMany thanks. This issue is blocking my current Symfony upgrade to 3.4.4. Any news ?. Excellent !\nMany thanks. ",
    "kvdnberg": "This issue also exists for fos_rest.exception.twig_controller. From debug log:\nUser Deprecated: The \"fos_rest.exception.twig_controller\" service is private, getting it from the container is deprecated since Symfony 3.2 and will fail in 4.0. You should either make the service public, or stop using the container directly and use dependency injection instead... ",
    "mgluesenkamp": "I have the same problem in my new Symfony 4 project. I get the error\nWarning: ReflectionObject::__construct() expects parameter 1 to be object, null given\nafter a POST request.\nI'm using the dev-master version of the bundle.\n  . ",
    "codereviewvideos": "``` php\n<?php\n/\n * This file is part of the FOSRestBundle package.\n \n * (c) FriendsOfSymfony http://friendsofsymfony.github.com/\n\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n /\nnamespace FOS\\RestBundle\\Controller\\Annotations;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route as LegacyBaseRoute;\nuse Symfony\\Component\\Routing\\Annotation\\Route as Symfony4BaseRoute;\nif (class_exists(LegacyBaseRoute::class)) {\n    class BaseRoute extends LegacyBaseRoute {}\n} else {\n    class BaseRoute extends Symfony4BaseRoute {}\n}\n/\n * Route annotation class.\n \n * @Annotation\n /\nclass Route extends BaseRoute\n{\n    public function __construct(array $data)\n    {\n        parent::__construct($data);\n    if (!$this->getMethods()) {\n        $this->setMethods((array) $this->getMethod());\n    }\n}\n\n/**\n * @return string|null\n */\npublic function getMethod()\n{\n    return;\n}\n\n}\n```\nNot the most elegant looking thing I've ever seen, but it works (I think). Thoughts on this? . Sorry for the delay. I have submitted a PR with the suggested interim fix. . ",
    "antonisin": "up. ",
    "emulienfou": "Hi @Tobion,\nafter some tests a long time ago, it seems the annotation @Rest\\Prefix(\"/user\") do nothing, however using the @Rest\\Route(\"/user\", host=\"api.%domain%\") add successfully the prefix /user.\nHere is how I load my routes:\n```yaml\nREST API\nrests:\n  resource: ../../src/Rest/\n  type: annotation\n```\nOk, so like you said @Tobion, I do not load the controller routes using rest by by the default Symfony core route loader.\nThe correct code should be:\n```yaml\nREST API\nrests:\n  resource: ProjectHarmony\\Rest\\UserController\n  type: rest\n```\nClosing issue, because is a no understanding from me!. ",
    "muchar": "Shouldn't it be somehow suggested?. ",
    "janvernieuwe": "How did you solve this, i'm getting the same error in my unit tests.. ",
    "vbourdeix": "I had the same, solved it when I added the following configuration under fos_rest : \nyaml\n    format_listener:\n        rules:\n            prefer_extension: false\n            fallback_format: json. ",
    "robinvdvleuten": "I had the same issue on SF 4+ and fixed it by configuring the namespaced path in Twig;\nyml\ntwig:\n    paths:\n        \"%kernel.project_dir%/templates\": FOSRest\n. Hmm it seems that when view is rendered through a template, the form instance is set to a view here. Which cannot be bypassed unfortunately.. ",
    "Seb33300": "If you are encountering the same error: do not open URL from a web brower.\nUse postman or any other REST client.. ",
    "oliverklee": "1878 might be related..",
    "fabienchn": "Tests are fine and there is no reason why they should fail if they didn't just before the update. The only thing that changed on this regard is the FOSRestBundle upgrade... . Does anyone know a nice bundle for RestApis like FOS but that works then ?. @enricog84's answer helped but with a higher priority. \nIt's sad that we have to build a custom ExceptionListener to prevent redirection on requests to the REST API since it's supposed to be the default behavior.... ",
    "enricog84": "@FabulousCo \nI had a similiar issue with the unauthorized_challenge stopped being used and the basic authentication popping up, I think it is related to #1692 .   \nWhat I did was creating an own exception listener and setting its priority to 3 (after FOSRest/AccessDeniedListener and before Symfonys firewall ExceptionListener).    \nExample config:\nacme.api.event_listener.exception_listener:   \n        parent: fos_rest.exception_listener    \n        tags:   \n            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException, priority: 3}\n. ",
    "ushatel": "The handler that installed with the  jms_serializer.subscribing_handler could not handle the type after downloading the latest FOS. When I revert changes to the previous version handle works well on the same code. \nThank you for the attention. . Thank you for the answer. I will prepare the project as I could rise the time quote. . ",
    "naitsirch": "Same problem here. It caused me a lot of headache today. After an update of FosRestBundle, the compiled service container builds the jms_serializer.handler_registry this way:\nphp\nprotected function getJmsSerializer_HandlerRegistryService()\n{\n    return $this->services['jms_serializer.handler_registry'] = new \\FOS\\RestBundle\\Serializer\\JMSHandlerRegistry(\n        new \\JMS\\Serializer\\Handler\\LazyHandlerRegistry($this),\n        array(2 => array(/* some handlers */), 1 => array(/* some handlers */))\n    );\n}\nThe array with the handlers isn't passed to the LazyHandlerRegistry anymore, but to your JMSHandlerRegistry, so that the handler registry does not get any handlers passed.. I have worked around this bug, by registering FOSRestBundle after JMSSerializerBundle in AppKernel\nphp\n// app/AppKernel.php\n    public function registerBundles()\n    {\n        $bundles = array(\n            // ...\n            new JMS\\SerializerBundle\\JMSSerializerBundle(),\n            new FOS\\RestBundle\\FOSRestBundle(), // <-- look here!!\n@xabbuh If possible, throw an exception somewhere to inform users about this. I found this comment in JMSHandlersPass::registerHandlerRegistry:\n\nInlined because {@link JMS\\SerializerBundle\\DependencyInjection\\Compiler\\CustomHandlersPass} must be executed before replacing jms_serializer.handler_registry.\n\nThis made me try to place the serializer bundle before the rest bundle.. ",
    "Kafei59": "I exactly have the same issue, after requiring and setting twig as template engine for fosrest.\nFor informations, I had to require fosrest as dev-master to handle an issue on public services (it was not able to inject view_handler service because of its private state: https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1790) and force the installation of twig for an API skeleton to handle the issue: \nAn instance of Symfony\\Bundle\\FrameworkBundle\\Templating\\EngineInterface must be injected in FOS\\RestBundle\\View\\ViewHandler\nAnd now, I also have this issue on unable to find a template \"\".\nBy the way, it's not possible to used fosrest without requiring twig ? I mean, this project will only serve json responses so it's useless to instantiate the whole twig engine just for that.\nPS: here is my configuration\nconfig/packages/fos_rest.yml\nyaml\nfos_rest:\n    body_listener: true\n    param_fetcher_listener: true\n    routing_loader: true\n    view:\n        view_response_listener: 'force'\n    format_listener:\n        rules:\n            - { path: ^/api, prefer_extension: true, fallback_format: json, priorities: [ json, html ] }\nconfig/packages/framework.yml\n```yaml\nframework:\n    secret: '%env(APP_SECRET)%'\n    session:\n        handler_id: ~\nphp_errors:\n    log: true\n\ntemplating: { engines: ['twig'] }\n\nsensio_framework_extra:\n    view: { annotations: true }\n```. ",
    "BigZ": "I did my own exceptioncontroller. no need for twig anymore there... would be good to get rid of it on the whole view thing is if its not necessary.\nGIST for the working controller: https://gist.github.com/BigZ/4078a1a8e90d88386d8fb16863306fbe. ",
    "EliuTimana": "You can use KnpTimeBundle's DateFormatter service.. ",
    "fidraj": "FOSRest didn't work for POST requests with escaped json body. I had to my own decoder.. ",
    "UweM": "I'm having the same problem right now. It has to do with ::class:\nFOSRestBundle tries to find the first class in a file by tokenizing the file, looking for T_CLASS and using the next T_STRING as class name:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/blob/7219cfba01ec8845bbfd4ace484fc61e1f8e3eef/Routing/Loader/ClassUtils.php#L30-L52\nWell, Entity::class is also T_CLASS and the next T_STRING is the method name, in this case \"find\". \nI use a string with the fully qualified class name as a workaround.. ",
    "MeihdiDjebli": "Hi everyone,\nThanks to @UweM it works for me.\nBut is this a bug ? ClassUtils should be able to handle Trait mecanism ?\nMaybe, can we add something like that ?\n// (...)\nif (T_TRAIT === $token[0])\n{\n    return false;\n}. ",
    "TemirkhanN": "So there is no need in this \"feature\" break?. @xabbuh i mean would it be sudden if I \"setGroups\" behavior change\nto something below?\n```php\nfunction setGroups(array $groups = null)\n{\n    if ($groups === null) {\n        $this->groups = null;\n    return $this;\n}\n\n$this->addGroups($groups);\n\nreturn $this;\n\n}\n```\n@stof thanks! Well, I supposed something like that and that took me to question \"What is the real purpose of unique groups through Context::addGroup?\". Nothing serious. Just wondering.. ",
    "valimero": "\"FooChild\" slightly modifies how Foo works.\nBut I need all Foo features to work with FooChild as well\nand I must not change URI in front.\nIn my controller, I want to treat data differently for Foo and FooChild. ",
    "tomasfejfar": "When is this expected to land in a release, please? . ",
    "aayaresko": "@ThibautAlgrin, indeed, you're totally right about that one. thanks a lot. the issue is resolved.. ",
    "nachocifu": "+1. ",
    "notrix": "\ud83d\udc4d . @mansartesteban make sure you have \"friendsofsymfony/rest-bundle\": \"dev-master\" in your composer.json if you want changes from master branch. Or you can wait till stable version release.. ",
    "Saracevas": "Excellent work everyone, do we know when this will be merged in?. Excellent work everyone, do we know when this will be merged in?. ",
    "mansartesteban": "Hey guys !\nSorry but i don't understand i'm new to github community and the system of issues is new to me (and awesome by the way).\nIf i understand weel, you fixed this issue in commit 35ccb78 and pushed it to the master branch isn't it ?\nSo if the fix is on master and if i \"composer friendsofsymfony/rest-bundle && composer update jms/serializer-bundle\" it should be working no ?\nI still have the same problem and the files JMSHandlerRegistry at me is the same than v2.3 ... and my composer info say that I have the v2.4.\nI don't understand could someone help me plz :D !. Oh ! It works ! Thank you very much <3. ",
    "JustBlackBird": "@GuilhemN Could you please release a new minor version of the bundle with the fix?. @xabbuh could you please release a new version with this fix?. @xabbuh could you please release a new version with this fix?. ",
    "ball00n-": "Added #1906 . ",
    "Vovchikus": "\nI'm wondering why you would want to inject a service into a DTO. That looks like a weird architecture to me.\n\nOtherwise issue exists, class using paramconverter can not autowire service in it. ",
    "caciobanu": "requirements=\"\\d+\" is only for validation so I think that it is the intended behaviour.. ",
    "dnna": "Ping @GuilhemN :) Are there any other issues with this one?. Yes, but the config does not necessarily explicitly set all of these fields in every request. So if a request comes and calls setSerializeNullStrategy(true), but the next request does not explicitly set it to something, you have a different state that gets carried over to the next request. This is the reason kernel.reset tag was added, so execution models like PPM can be supported.. Well, we reset them to the default values of ViewHandler, like they would be at the start of a new request. If there is config to set them to something else it will be called and explicitly set them, otherwise they should be the same as what the class sets as default.. To be more clear, the main difference between PPM and the normal PHP execution model is that objects are not destroyed at the end of the request. Otherwise the normal symfony request-response flow is executed (so if there is config to explicitly set values in the ViewHandler it will be called normally).\nThe problem only arises when the initial state of the object differs from what you would expect at the start of a normal request, as is the case here. So we just need to reset the class to what it would be at the start of a normal PHP request, before it even reaches Symfony.. OK, setSerializeNullStrategy was a bad example and seems to be explicitly set in all cases :)\nBut take for example setExclusionStrategyGroups a few lines above. If $config['serializer']['groups'] is set in one request, but in the next request its empty, then ViewHandler will carry over the exclusionStrategyGroups attribute from the last request that set it, instead of being empty as it should.. The thing is that technically the user can also call the set* methods in a controller, a listener, or other code regardless of the config. It could probably also work if FOSRestExtension explicitly calls all the set* methods of the ViewHandler, regardless if they are empty (I think this is what you suggest?), but in my opinion it makes more sense to reset the object to its original state and call only the setters that are needed in FOSRestExtension.. @GuilhemN its done, I have added the config options as a constructor argument instead of method calls and reset resets them to the original values at construction.. ",
    "mvaljento": "I think I found the reason: I had not installed the extra bundle.. ",
    "blanky0230": "nevermind. :) I found a solution for this by overwriting the jms_serializer.form_error_handler service description here: https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1806.\n. ",
    "mmosta": "Are you trying to map entity Priority whose ID is 1, for this project? If that is the case you need a transformer on the inbound to translate ID 1 into entity of ID 1.\nHere is an example: https://symfony.com/doc/current/form/data_transformers.html#harder-example-transforming-an-issue-number-into-an-issue-entity\n. ",
    "NicolaPez": "thatks, this works. Probably the Symfony upgrade.. ",
    "NickOver": "I use symfony 4, isSubmitted() return true.\nEDIT\nI write FormSerializer:\n```\nstatic function FormSerializer(Form $form)\n    {\n        $errorCollection = array();\n        foreach($form->getErrors() as $error){\n             $errorCollection[$error->getOrigin()->getName()] = $error->getMessage();\n        }\n    return $errorCollection;\n}\n\n```\nAnd he return 1 error about csrf. I turn off csrf and still that same situation, i dont have errors but form dont pass.. ",
    "EliuFlorez": "Hello! I have the same error:\n```\n// Clearing the cache for the dev environment with debug true\nIn FileLoader.php line 168:\n[Semantical Error] Couldn't find constant FOS\\RestBundle\\Util\\Codes::HTTP_OK, method ArcaSolutions\\ApiBundle\\C\n  ontroller\\DefaultController::getHomeAction() in C:\\xampp\\htdocs\\test-symfony\\src\\ArcaSolutions\\ApiBundle/Resou\n  rces/config/routing.yml (which is being imported from \"C:\\xampp\\htdocs\\test-symfony/app/config/routing.yml\").\n  Make sure there is a loader supporting the \"rest\" type.\nIn AnnotationException.php line 54:\n[Semantical Error] Couldn't find constant FOS\\RestBundle\\Util\\Codes::HTTP_OK, method ArcaSolutions\\ApiBundle\\C\n  ontroller\\DefaultController::getHomeAction().\n```\nmy configuration:\nfos_rest:\n    param_fetcher_listener: true\n    body_listener: true\n    format_listener:\n        rules:\n            - { path: ^/api, priorities: ['json', 'html', '*/*'], fallback_format: json, prefer_extension: true }\n            - { path: ^/, stop: true }\n    body_converter:\n        enabled: true\n        validate: true\n    view:\n        view_response_listener: 'force'\n        formats:\n            json: true\n            xml: false\n        templating_formats:\n            html: true\n    exception:\n        codes:\n            'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': 404\n            'Doctrine\\ORM\\OptimisticLockException': HTTP_CONFLICT\n        messages:\n            'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': true\n            'Symfony\\Component\\HttpKernel\\Exception\\HttpException': true\n        enabled: true\n    access_denied_listener:\n        json: true\n    disable_csrf_role: ROLE_API\n\n. Hello! I have the same error:\n```\n// Clearing the cache for the dev environment with debug true\nIn FileLoader.php line 168:\n[Semantical Error] Couldn't find constant FOS\\RestBundle\\Util\\Codes::HTTP_OK, method ArcaSolutions\\ApiBundle\\C\n  ontroller\\DefaultController::getHomeAction() in C:\\xampp\\htdocs\\test-symfony\\src\\ArcaSolutions\\ApiBundle/Resou\n  rces/config/routing.yml (which is being imported from \"C:\\xampp\\htdocs\\test-symfony/app/config/routing.yml\").\n  Make sure there is a loader supporting the \"rest\" type.\nIn AnnotationException.php line 54:\n[Semantical Error] Couldn't find constant FOS\\RestBundle\\Util\\Codes::HTTP_OK, method ArcaSolutions\\ApiBundle\\C\n  ontroller\\DefaultController::getHomeAction().\n```\nmy configuration:\nfos_rest:\n    param_fetcher_listener: true\n    body_listener: true\n    format_listener:\n        rules:\n            - { path: ^/api, priorities: ['json', 'html', '*/*'], fallback_format: json, prefer_extension: true }\n            - { path: ^/, stop: true }\n    body_converter:\n        enabled: true\n        validate: true\n    view:\n        view_response_listener: 'force'\n        formats:\n            json: true\n            xml: false\n        templating_formats:\n            html: true\n    exception:\n        codes:\n            'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': 404\n            'Doctrine\\ORM\\OptimisticLockException': HTTP_CONFLICT\n        messages:\n            'Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException': true\n            'Symfony\\Component\\HttpKernel\\Exception\\HttpException': true\n        enabled: true\n    access_denied_listener:\n        json: true\n    disable_csrf_role: ROLE_API\n\n. > \u00bfPuedes mostrar el c\u00f3digo de tu DefaultControllerclase?\nMy controller's code\n\n. > El error se desencadena por el uso de la @ApiDocanotaci\u00f3n. \u00bfQu\u00e9 versi\u00f3n de FOSRestBundle usas?\n-version\n\"friendsofsymfony/jsrouting-bundle\": \"^2.2\",\n\"friendsofsymfony/oauth-server-bundle\": \"^1.6\",\n\"friendsofsymfony/rest-bundle\": \"^2.4\",\n\"nelmio/api-doc-bundle\": \"^2.13\",. ok ready now I have this error on request: \nFatal error: Uncaught exception 'Symfony\\Component\\DependencyInjection\\Exception\\ServiceNotFoundException' with message 'You have requested a non-existent service \"request\". Did you mean one of these: \"fos_rest.request.param_fetcher\", \"fos_rest.request.param_fetcher.reader\", \"monolog.logger.request\", \"nelmio_api_doc.event_listener.request\", \"request_stack\", \"router.request_context\", \"validate_request_listener\", \"argument_resolver.request\", \"argument_resolver.request_attribute\", \"security.request_matcher.x1icpav\", \"security.request_matcher.zfhj2lw\"?'\nplease help.. ",
    "vkhramtsov": "Looks like this issue already fixed/merged by  #1899. Do you have any plans for creating release?. Looks like this issue already fixed/merged by  #1899. Do you have any plans for creating release?. @xabbuh Looks like #1961 resolved now. How about release? :wink: . @xabbuh Looks like #1961 resolved now. How about release? :wink: . ",
    "konradja100": "Problem is in ManyToOne relations between entities: to solve this you have to add @Exclude annotation from JMS\\Serializer\\Annotation;\nHope that this will help someone.. ",
    "rumours86": "i have same problem. i have same problem. You mean install \ncomposer req friendsofsymfony/rest-bundle \"dev-master\" \n?\n. You mean install \ncomposer req friendsofsymfony/rest-bundle \"dev-master\" \n?\n. composer req friendsofsymfony/rest-bundle \"dev-master\"\nresolved this error. composer req friendsofsymfony/rest-bundle \"dev-master\"\nresolved this error. ",
    "enumag": "Just ran into the same problem when trying to upgrade jms/serializer. Using rest-bundle dev-master indeed fixed the problem. When can we expect a release?. @xabbuh @GuilhemN What is the reason for the delay? I see that master also has compatibility with SF 4.2 solved and CI is running tests against PHP 7.3. So what else is blocking the release? I was unable to find any milestone or issue tracking the progress of the next version so even if someone wanted to help with a PR, right now they can't.. ",
    "asahasrabuddhe": "Please release as soon as possible. Thanks in advance :)\nUsing dev-master in the meanwhile. ",
    "IonBazan": "@enumag I guess it's #1972 that blocks the release. We need to get rid of deprecations with Symfony 4.2 before releasing a new version. \nNote that upcoming release is dropping Symfony < 3.4 and JMS Serializer <1.13.\nUntil the release is out, please either lock your JMS Serializer at 1.13 or use FOSRestBundle dev-master (risky).. @enumag I guess it's #1972 that blocks the release. We need to get rid of deprecations with Symfony 4.2 before releasing a new version. \nNote that upcoming release is dropping Symfony < 3.4 and JMS Serializer <1.13.\nUntil the release is out, please either lock your JMS Serializer at 1.13 or use FOSRestBundle dev-master (risky).. @xabbuh I think it can be closed, thanks to v2.5.0 release: #1976 . @phamuyentri Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController has been introduced in Symfony 3.3. I believe FOSRestBundle is trying to keep compatibility with Symfony 2.7 so I would leave that deprecation instead of breaking BC.\nWe can also think about creating a new AbstractFOSRestController using AbstractController.. @phamuyentri Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController has been introduced in Symfony 3.3. I believe FOSRestBundle is trying to keep compatibility with Symfony 2.7 so I would leave that deprecation instead of breaking BC.\nWe can also think about creating a new AbstractFOSRestController using AbstractController.. I was trying to fix #1961 because FOSRestBundle allows installing jms/serializer <1.12 and triggers an error. Should we drop support for <1.12 by adding it to conflict section?. ",
    "Oviglo": "+1. ",
    "phamuyentri": "@xabbuh I understand your concern, but I have two reasons to fix like that:\n\nAs I checked, the different between AbstractController  and Controller is Abstract has function getSubscribedServices. Abstract has everything in Controller plus function getSubscribedServices.\n\nIMO, if using AbstractController instead of Controller causes a bug; Symfony team should know (and fix) it.. Got it. Thank you, @xabbuh.\nI pushed another fix which introduces new Abstract Controller here, please have a look.\nAgain, many thanks for your explanation.. Should we add `'fos_rest.view_handler' into parent array, like this?\n```\npublic static function getSubscribedServices()\n {\n     $subscribedServices = parent::getSubscribedServices();\n     $subscribedServices['fos_rest.view_handler'] = ViewHandlerInterface::class;\nreturn $subscribedServices;\n }\n```\n\n\n. ",
    "litepl": "For now, I've created a workaround with view redirect to the other controller with the same code and it works.\nI cannot find a place, where FosRestController returns those LFs, but the strange thing I noticed is when I used curl without -L to follow redirect, there where also double LFs returned.\nRegards,\nLukasz. For now, I've created a workaround with view redirect to the other controller with the same code and it works.\nI cannot find a place, where FosRestController returns those LFs, but the strange thing I noticed is when I used curl without -L to follow redirect, there where also double LFs returned.\nRegards,\nLukasz. ",
    "ArminVieweg": "Small fix: It's a static method ;-)\npublic static function getSubscribedServices() : array\n{\n}\nThanks! That was the missing glue.. ",
    "ricardoee": "Apologies, just realised I should be using:\nuse FOS\\RestBundle\\Controller\\AbstractFOSRestController;. ",
    "metalmini": "I am willing to help and maintain the docs, or at least get them to a point that we can all agree on.. I am willing to help and maintain the docs, or at least get them to a point that we can all agree on.. Have not created a PR but first thing that i ran into was deprecation of FOSRestController.. Have not created a PR but first thing that i ran into was deprecation of FOSRestController.. ",
    "Chekote": "Unfortunately I've yet to use Dependency Injection, so I have no idea how to implement it.\nWould you be so kind as to give me some pointers?\n. Thanks. I've read the docs and it makes sense, I'll try and get to it tomorrow.\n. Nope, I'm working on it now. Haven't had that much time to devote to my Symfony stuff lately, but I am working on it!\n. I just moved this code from RestXmlCollectionLoader and RestYamlCollectionLoader. I believe this change is out of the scope of this commit, and should be addressed separately.\n. ",
    "inssein": "should be \"fos_rest\"\n. missing ending semicolon in routing_loader\n. ",
    "dustin10": "No to be nit picking, but I dont think you need to check $configuration again here as it should be fine since the previous if  statement did not pass.\n. Ah yes indeed. My old logic teacher would be upset with me.\n. ",
    "Ocramius": "the xml/yaml mappings can re-use the same classes...\n. ",
    "justinrainbow": "It would also be nice to allow periods to be used.  The YUI library uses callback names that are stored within the global YUI variable - like YUI.Env.JSONP._12345 - http://yuilibrary.com/yui/docs/jsonp/#timing\n. ",
    "naahuc": "i just had a look at the behavior in this part of the code.\n$configuration just holds the values from the annotation which seems alright in the annotation only use case.\nIn case an actual View object gets passed inside the event listener it may hold its own groups, which i suppose should take precedence over anything passed through an annotation as it seems to be the more conscious choice.\nThe intended behavior in this case seems to be a more philosophically oriented question in this case.\nI'd suggest checking for \nphp\nif (!$view->getSerializerGroups && $configuration->getSerializerGroups())\nif this is okay with you.\n. ",
    "baldurrensch": "Opening brace needs to go on next line\n. Opening brace needs to go on next line\n. ",
    "MattKetmo": "@lsmith77 instanceof is a keyword like if, elseif, true, false, null, etc. The CS says keyworks (especially true/false/null) should be in lowercase. Do you often write elseIf ? \n. ",
    "entering": "@lsmith77 do you prefer this code as a method on Param?\nphp\npublic function getRequestName()\n{\n    return $this->requestName ? $this->requestName : $this->name;\n}\n. no good reason, already changed it\n. ",
    "catchamonkey": "is the recommendation for 'composer require' not to leave the version out entirely now?\nbash\ncomposer require friendsofsymfony/rest-bundle\n. :+1: \n. ",
    "bicpi": "@xabbuh Thanks, I reverted this one.\n. ",
    "GrahamCampbell": "Yeh, it's a bug with php-cs-fixer.\n. No, the symfony preset does not. Looks like this repo was run with the recommended preset, not symfony, then symfony commited afterwards...\n. The symfony preset doesn't specify either way.\n. no, it is being used - i'm saying the fixes were applied BEFORE the config was commited\n. ",
    "AltThreeTest": "-- Please reply above this line --\n\nGraham replied, on Sep 15 @ 12:45pm (UTC):\nHi there,\nThis is definitely an issue with php-cs-fixer. Please create an issue\non their repo.\nCheers,\nGraham Campbell\nsupport@alt-three.com\n\nFriendsofsymfony/fosrestbundle sent a message, on Sep 15 @ 12:44pm (UTC):\nIn DependencyInjection/Configuration.php:\n\n@@ -42,7 +42,12 @@ public function getConfigTreeBuilder()\n                 ->arrayNode('access_denied_listener')\n                     ->canBeEnabled()\n                     ->beforeNormalization()\n-                        ->ifArray()->then(function($v)\n  { if (!empty($v) && empty($v['formats'])) { unset($v['enabled']); $v =\n  array('enabled' => true, 'formats' => $v); } return $v; })\n-                        ->ifArray()->then(function ($v)\n  { if (!empty($v) && empty($v['formats'])) {\n-     unset($v['enabled']);\n\nYeh, it's a bug with php-cs-fixer.\nReply to this email directly or view it on GitHub.\n\nPowered by Help Scout:\nhttp://www.helpscout.net/l/main/?utm_campaign=word-of-mouth&utm_medium=email&utm_source=wom&utm_term=Alt%20Three%20Services%20Limited\n. ",
    "dmaicher": "I don't see how this loop could generate something like you mentioned in https://github.com/FriendsOfSymfony/FOSRestBundle/issues/1436\n((<version> or <version>) or <version>)\nCan you explain? :)\n. Ok now I understand :+1:  Thx for the explanation. The old solution with the or is totally wrong indeed. I also fixed that problem in my other PR though:\nhttps://github.com/FriendsOfSymfony/FOSRestBundle/pull/1438\n. Well at this point we are only adding the version condition which was defined in line 295. So I think its actually less confusing like this?\n. I personally prefer to not use yoda style but sure I can change it :+1: \n. Agree with the space after the comma to improve readability. But why the double quotes? Any reason apart from aesthetics? Just curious :)\n. Maybe I can rename $condition in line 319 to $combinedConditions or similar?\n. true could have fixed that :+1: \n. ",
    "boyez-joggin": "Sorry there were one set of parenthesis which came from symfony language auto generation. I corrected the issue.\nThe real result is this:\nrequest.attributes.get('version') == (<version> or <version> or <version>)\nwhich then auto-generates to:\nrequest.attributes.get('version') == ((<version> || <version>) || <version>)\nlike I added to the related issue #1436 \nSo with my fix we get:\nrequest.attributes.get('version') in [<version>, <version>, <version>]\nwhich auto-generates to:\nin_array(request.attributes.get('version'), array(0 => <version>, 1 => <version>, 2 => <version>))\nSorry for the mix, my bad :x\n. ",
    "afurculita": "IMO we can use the validate filter FILTER_VALIDATE_BOOLEAN with the option FILTER_NULL_ON_FAILURE\n. ",
    "tael": "I agree using ViewAnnotation.\nbut View on this document  ( http://symfony.com/doc/current/bundles/FOSRestBundle/view_response_listener.html )\nusing Annotation globally, so I think remains that for consistency.\nwhat do you think about, @Ener-Getick ?\n. ",
    "biganfa": "you mean the space at the end of the line right? Just removed it in the follow-up commit.. ",
    "carusogabriel": "Gonna rollback this changes so :+1: . ",
    "2binfree": "Ok but the line is going to be very long.\nThere MUST NOT be a hard limit on line length; the soft limit MUST be 120\ncharacters; lines SHOULD be 80 characters or less. . ",
    "supersmile2009": "The whole test seemed to be just a copy of VersionListenerTest with tested class changed and was quite useless. I've rewritten the whole thing, so now it checks if version is passed to viewHandler.. fixed. "
}