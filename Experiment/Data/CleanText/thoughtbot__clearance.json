{
    "croaky": "It is best practice to unpack the gem.\n. Already fixed.\n. Only applies to ClearanceMailer's internal tests.\n. This is now invalid with the move to an engine:\nhttps://thoughtbot.lighthouseapp.com/projects/18503/tickets/52-default-tests-that-send-emails-are-failing-in-rails-232\n. Long discussion about this at Lighthouse:\nhttps://thoughtbot.lighthouseapp.com/projects/18503/tickets/24-make-cleareance-i18n-aware\n. I've just added this to master but haven't bumped the gem yet. I based it off Timur Vafin's patch. I'd like to have someone who's using a foreign language try it out before bumping the version. Any volunteers?\n. Bumped the gem. Thanks for everyone's help.\n. I've confirmed that uncommenting that line does not cause a feature to fail.\n. Joshua, \nWe can't pull in that patch because it will cause the load order of routes to be backwards, making it impossible to override Clearance's routes in your app. \nThis should be patched in one way or another, but I don't think the core team has seen a patch they like yet:\nhttps://rails.lighthouseapp.com/projects/8994/tickets/1999-rails-23-rc1-engine-problem-with-load-order-when-used-with-restful_authentication-and-role_requirement\n. I've pulled in the commits that fix the issue.\nI just created a Rails 2.3.2 app with resource_controller as a plugin & clearance 0.6.6 as a gem. The clearance generator then ran correctly.\n. Done. http://github.com/thoughtbot/clearance/commit/1686520c3aedc4b24da21f5bcde9e7b2ab880f12\n. This was a known issue with 0.6.2:\nhttp://github.com/thoughtbot/clearance/blob/master/CHANGELOG.textile\nWas there a blog post or something pointing to that version number?\n. Done.\n. Done.\n. I'm unaware how to do this technically. Is it possible?\n. pulling bobbyw's error message from the mailing list:\n\nAnd a password reset message should be sent to \"email@person.com\"   #\nfeatures/environment_webrat/step_definitions/clearance_steps.rb:60\n     You have a nil object when you didn't expect it!\n     You might have expected an instance of Array.\n     The error occurred while evaluating nil.to (NoMethodError)\n     ./features/environment_webrat//step_definitions/\nclearance_steps.rb:63:in /^a password reset message should be sent to\n\"(.*)\"$/'\n     features/clearance/password_reset.feature:15:inAnd a password\nreset message should be sent to \"email@person.com\"'\n\n. bobbyw,\nWe haven't seen this anywhere else, so I'm closing this issue for now. If you're having the problem again, don't hesitate to open a new issue and we'll try to work through it from scratch again.\n. Applied. Thanks!\n. Okay, thanks. We'll see what we can do to accommodate Edge Rails.\n. Rails 2.3.2.\n. I haven't been able to re-produce this. Can you try the latest version (0.8.1) and see if this is still an issue?\n. All the methods mixed into ApplicationController are starting to piss me off. Might be time to try a Clearance::Session class, which only gets used in current_session. current_user becomes current_session.user. Something like that.\n. can't remember why.\n. Done.\n. done in a branch. will talk it over with the team tomorrow.\n. Done: http://github.com/thoughtbot/clearance/commit/47a4f65136605e38cf76a50d7d8bbdbd88a80489\n. I think we should remove the routing hack and allow developers more control over them.\n. Decided this was better off outside of Clearance. Created the Strong Password gem and knocked off the first two on this list tonight.\n. Can Rack::Auth be used instead of altering Clearance?\nhttp://rack.rubyforge.org/doc/Rack/Auth/Basic.html\nhttp://www.sinatrarb.com/faq.html#auth\nhttps://sinatra.lighthouseapp.com/projects/9779/tickets/16-patch-http-authentication\nIf not, why?\n. We're going to pass on this patch. Thanks for the effort but we don't think it belongs in Clearance. We're comfortable (and prefer the explicitness of) using Rack::Auth for our APIs:\nuse Rack::Auth::Basic do |username, password|\n  username == 'foo' and password == 'bar'\nend\nThanks again.\n. Definitely. I've tagged this issue as 'docs' and will try to get to it in the next few days.\n. Very nice. Well done!\n. We believe the correct cases are covered. If you can generate a failing test/user_test.rb, please let us know. Thanks.\n. This is now the case.\n. This would be the scope of an add-on.\n. Take a look at using this piece of Rack middleware:\nhttp://rack.rubyforge.org/doc/classes/Rack/Auth/OpenID.html\n. All public methods are hidden. Closing.\n. That makes sense. We can pull this in.\n. Pulled it in. Thanks, Matthew!\n. Fixed.\n. This should not be a part of Clearance. It is the Rails developers' responsibility to include the flash in their layout, such as:\nhttp://github.com/thoughtbot/suspenders/blob/master/app/views/shared/_flashes.html.erb\nWon't change.\n. We don't want to dictate where your flash is placed. Our opinion is that every Rails developer should put the flash in their layouts in a way that makes sense for their application. Clearance is \"out of the box with opinions\" (Cucumber, REST, User model, Factory Girl, flash already present).\n. Bit by this in a client demo yesterday. This patch needs to go in. Will see if it still applies against master.\n. Ryan,\nI'm fine with the approach but the commits don't look like they'll merge cleanly according to the Fork Queue.\nIf you wouldn't mind checking them against master, I'll gladly pull them in ASAP.\nIf I haven't said it in the issue thread or mailing list, thanks for this.\n. Pulled in! I'm looking at fixing #62 to smooth out the upgrade path for people, then I'll bump the gem.\nThank you, Ryan. Very much appreciated.\n. I'd like to see more clearance_views generators as you suggested in number 1.\n. When we converted to Diesel, we removed the Formtastic generator and are now leaning on Diesel::Generators::ViewsBase for simple copying of the Erb files into your app.\nWe don't use Haml at thoughtbot so I fear that we won't maintain this. Haml users can still use the html2haml command, I believe.\nClosing as wontfix.\n. This is fixed with:\nhttp://github.com/thoughtbot/clearance/commit/857aaa34ecd7fee2afe0d578a3a52e95a4152a84\n. What version of Rails are you on?\nYour config/routes.rb should also be:\nmap.resource :session, :controller => 'sessions', :only => [:new, :create, :destroy]\n. I'm going to blame the Clearance route hack for this. I want to remove it in the next version.\n. There's nothing about Clearance that stops this from being possible.\n. Yes, it shouldn't be there. Nice catch.\nhttp://github.com/thoughtbot/clearance/commit/442a0dd1528a5f362d6448e2c4723d7cc3988895\n. yes\n. Good catch. Thanks. Fixed.\n. Thanks, this is resolved by:\nhttp://github.com/thoughtbot/clearance/commit/442a0dd1528a5f362d6448e2c4723d7cc3988895\nWe just need to bump the gem.\n. So when the default Rails routes are in place, all app routes are loaded before the clearance routes? I can take a closer look at this later today. In general, I'm wondering whether the route overloading is too much trouble than it's worth... maybe move to a \"use only the routes you need\" philosophy.\n. I think we should remove Clearance's automatic routes-loading.\n. auto-loading routes are being removed.\n. I'm interested in this. I've been using Mongoid, though, which I believe has a compatible API.\n. Cool stuff. I'm interested in pulling attr_accessible out of Clearance, anyway.\nRelated: I've heard it's a good idea to \"always store users in the relational database, especially since passwords are stored there for users and it's easy to get at Mongo's data from the filesystem without db access, and easy to parse it.\"\nThoughts? Maybe store the users in Mongo and Passwords separately in a relational db?\n. This has been resolved by removing attr_accessible from Clearance::User. As long as your Mongo ORM meets a basic ActiveRecord API, it will be fine.\n. This should be fixed as of last week.\n. We're using Clearance successfully with Capybara. I think the step definitions were slightly altered sometime this year to make that happen.\n. Thanks, pulled it in.\n. Done.\n. Looks good. I created a rail3 branch to hold this for now. We'll be watching the release candidates closely and testing this on those. No plans to pull into master until Rails3 is a little more stable and we're sure how we will need to handle backwards compatibility.\nThanks!\n. We considered it originally when writing the plugin but didn't prioritize it highly. We have no motivation to use it internally at thoughtbot, but I think we'd consider a patch. All in the spirit of what Rails is doing, trying to be more agnostic about these kinds of things while providing opinionated defaults.\n. Any patch would have to include an upgrade path for existing Clearance users.\n. Thanks for the submission. I don't think we can accept a patch that completely changes the encryption strategy. However, if there's a configuration option that defaults to the existing SHA1 strategy, I think that would meet the upgrade path requirement.\nhttp://robots.thoughtbot.com/post/344833329/mygem-configure-block\n. Creating a new issue for this because I want it high up on the list and I can't figure out how to re-order in the new Github Issues UI:\nhttps://github.com/thoughtbot/clearance/issues/140\n. So it creates everything else? \nconfig/initializers/clearance.rb\ninclude Clearance::Authentication\n...\nEverything up to the migration?\nhttp://github.com/thoughtbot/clearance/blob/master/generators/clearance/clearance_generator.rb\nDid your database exist before you ran the generator? rake db:create\nDid you have another migration named create_users or update_users? I thought we had renamed those to clearance_create_users or clearance_update_users but it doesn't look like it. That would be a good patch.\n. I've seen the issue where an old version of the gem installed runs that migration instead of the latest version of the gem. I think that's a Rails generator bug, though. It should default to the latest install. That'd be a good Rails patch.\n. What if we got crazy and timestamped the class names of the generated migrations?\nClearanceUpdateUsers1234\n. Went with version number instead of timestamp:\nhttp://github.com/thoughtbot/clearance/commit/61bed1155c8fe3c610fb784a21050331b29f0427\n. You need to uninstall old versions of Clearance. When you run the generator, it's running the old version. As far as I can tell, this is just how Rubygems/user-installed Rails generators operate. Sucks, but an easy fix. (or install as a plugin)\n. Do you have old versions of Clearance installed on your machine? The confirmation_token is included in the update users migration. My hunch is this is the same problem as another recently reported issue where the generator is run from the user's machine off an old gem. As far as I can tell, Rubygems & Rails do not use the latest installed gem when executing generators. I'm sure there's a patch somewhere to be had.\n. That's the only way I can think of that this would happen. The current code wouldn't produce a token column, either:\nhttp://github.com/thoughtbot/clearance/blob/master/generators/clearance/templates/migrations/update_users.rb\nI've updated the docs where I could to say to uninstall Clearance before running the generator.\nSorry for your trouble.\n. This is now done (54,000 deletions!):\nhttps://github.com/thoughtbot/clearance/commit/cbfc249f5c801db59e0ae3db957276376997de93\nWe used http://github.com/thoughtbot/diesel to accomplish it.\n. Clearance::ClearanceMailer does not exist. It should just be ClearanceMailer. What does line 23 of your accounts_controller look like?\n. Glad to help. Is accounts_controller outside the scope of the Clearance features? Have you altered the features or added features to include your work on accounts_controller?\n. Added it to the wiki.\n. I don't understand the problem. Unauthenticated users can still access this page even if you before_filter :authenticate in your ApplicationController. That was the reason for this change.\n. I see what you're saying. We missed :new and :create with that commit. This problem existed before our recent addition, which was intended to fix the problem. Thanks for noticing it. Fixing it now.\n. Committed:\nhttp://github.com/thoughtbot/clearance/commit/61b4f2fdf342a7d4ffa4a1088d0536b3207a19dd\nThanks, Claudio!\n. Nice catch. Pulled it in. Thanks.\n. Done. I made it purple.\n. Potential fix was included in a comment on #21 by Peter Haza. Looking into this now.\n. Committed a fix:\nhttp://github.com/thoughtbot/clearance/commit/bdf679bde6a6b777358ab53cfba4c7533282125d\nPlease give it a whirl and report back!\n. Confirmed. Just fixed with this commit:\nhttp://github.com/thoughtbot/clearance/commit/340f518feea9e9c294ce922b3890b3f54ce44f01\nThanks for the report.\n. Interesting side effect. Why didn't the salt and remember_token columns exist in your application? That migration only creates columns that didn't previously exist.\nI started to make this change:\nhttp://github.com/thoughtbot/clearance/commit/8eca763745dc845c90808107addfbb6d64e8f219\nThen rolled it back. I think the better solution would be to write and run a rake task that goes through your Users and just calls user.send(:initialize_salt); user.send(:encrypt_password).\n. This should now be fixed with this commit:\nhttps://github.com/thoughtbot/clearance/commit/1c4e1a6b457e836ef52ca532e729ab118fff083e\nThe way it works now, your old users just need to go through the \"Forgot password\" flow to sign in.\nThere's nothing you as the developer should do in terms of creating salts, remember tokens, etc. because the user will have to create a password at some point. This way, it's hands-off for you. You just install Clearance and it handles this case.\n. Thanks, fixed.\nhttp://github.com/thoughtbot/clearance/commit/05fb9b5582100329fbff593063b79da54ebf6747\n. How would that look? A Gemfile in Clearance that specifies Rails, Factory Girl, Cucumber, etc?\nhttp://github.com/plataformatec/devise/blob/master/Gemfile\nI'm definitely on board with the idea, but I had a bad week with upgrading some things to Bundler 0.9 from 0.8 last week and wouldn't mind waiting a few more weeks for it to settle down before going for it.\nIf someone else wants to take a stab at it, by all means.\n. So this is only for development? We should try to kill that Mocha dependency. I think it's only used in one place.\n. This is part of our plans over the next few weeks.\n. Added this in:\nhttp://github.com/thoughtbot/clearance/commit/3c22c5a5b345c5b2baae3c199eba16ef6ca3f335\nDidn't take your change because there was other stuff in it and I suck at git. Gave you credit in the commit message and CHANGELOG. Thanks.\n. The new commit looks good to me.\n. Closing this one due to old age. We haven't needed this functionality in any of our apps, so we take that as a sign that this isn't necessary right now.\n. This isn't something we've ever wanted, to my knowledge. Why do you want it?\nI suppose if you're not changing the default behavior and adding a custom hook, we'd be fine with it but I wonder why you think you need it.\nIf you write the patch, please don't use a ternary (style of the library) and try to name the hook something that fits in with other methods in Clearance::User or makes sense for how it's used in the controller. Off the top of my head,\nremember_token_expires_at\n. andhapp, that makes sense\n. I liked the idea of setting the expiration date via the configuration block, and even committed it:\nhttp://github.com/thoughtbot/clearance/commit/1b4f2cb6c93b2e29d5b46103c77deba09da92e6f\nThen, I realized that time will be at the time the app starts. If we can alter that so the remember_token_expires_at takes a value from lib/authentication.rb, I think that'd be the right place for everything.\nGotta run now. If someone wants to take a stab at it, go for it. Otherwise, I'll do it tomorrow.\nThanks, Ron, for pushing for this and the initial implementation. I snagged your cookie test helper and added you to the contributors list.\n. I didn't intend for it to be static, just wasn't thinking clearly at end of the day. :/\nWe should either do your approach of a method that can be overridden in app controller or wrap the time in a lambda & call it from lib/authentication. I still like the idea of as much config as possible moving to the configure block so there's one place for it.\n. Love the idea. Committed it:\nhttp://github.com/thoughtbot/clearance/commit/5fc0a1af488b06c53562150e6810d406256f519c\nAlso renamed the configuration option to be cookie_duration. Shorter and sweeter, I think.\nThanks for all the input, folks. I think this is nice improvement.\n. Re-opened as this doesn't solve Yardboy's issue.\nPhilosophically, I'm still anti-\"remember me\" checkbox, forcing the user to choose. However, I want to cleanly support the programmer's desire to set the cookie expiration to nil, which keeps the user signed in for the session only.\nTo do that, I'm going to implement the lambda as described earlier.\n. I'm not interested in supporting a \"remember me\" checkbox option. I DO want to support Yardboy's use case of having users sign in only for the session, then automatically sign out when they close their window. thoughtbot is starting a medical application were we should do the same thing.\nCommitted:\nhttp://github.com/thoughtbot/clearance/commit/8c37063414bb441a777d88be1fc47b39c438fc1a\n. It doesn't need to do either of those things, it just needs to be a time or an empty lambda.\n. We've removed ActionController::Forbidden so this should not be a problem any more.\n. It sets a flash and shows the reset password page.\nhttps://github.com/thoughtbot/clearance/blob/master/app/controllers/clearance/passwords_controller.rb#L48-49\n. This is something I'm open to, but would want to see an implementation and think it over. It might change Clearance's API and have to be part of Clearance 1.0, which I'm holding off on to match Rails 3.\n. Closing this due to lack of activity for a year.\n. Updated the wiki page.\n. This is saying your users table does not exist. You'll need to run your migrations on Heroku.\nheroku rake db:migrate\n. What does your db/schema.rb look like locally? What is in the clearance migrations that got created? And, what versions of Clearance do you have installed on your machine?\n. Excellent. Happy to hear it!\n. We won't be supporting OAuth or LDAP. Trying to keep the library small. Omniauth is awesome, though, and can be used in harmony with Clearance. We recommend that for OAuth.\n. How do you have Clearance installed? Are you subclassing Clearance::UsersController for this action? We'd suggest adding a normal RESTful edit & update action to this controller to do what you want.\n. Is Clearance installed as a gem? Are you using config.gem in config/environment.rb? Is the gem vendored?\nOr, is Clearance installed as a plugin?\nCheck out the edit and update actions here:\nhttp://articles.sitepoint.com/article/rapid-restful-rails-apps\n. Ellliot, did you ever solve this?\n. Closing this out as no solution. Please re-open if someone is still having this issue on a current version of Clearance.\n. It sounds like you have an old version of Clearance. sudo gem uninstall clearance to remove the old generator.\nThe current version does not have those instructions:\nhttp://github.com/thoughtbot/clearance/blob/master/generators/clearance/templates/README\n. Updated the README instructions. Thanks.\n. Yes, that would be ideal. I'd accept that patch.\n. I've added a section on subdomains here:\nhttps://github.com/thoughtbot/clearance/wiki/Subdomains\nIf there's a better way to handle it, please edit the wiki page or help me out with a patch. It sounds like maybe we could be using a unique code for each app like how Rails generates its own session?\n. Not in the plans for now.\n. Thanks for the report. I don't consider this a bug.\n. Oh man, that is tragic. My apologies. Fixed with this patch:\nhttp://github.com/thoughtbot/clearance/commit/1f1e19d29b6eb2ee9f2e725a7d6c5fd1c1296d0a\n. Hmm, was just looking for this and it looks like we may have lost the UpgradeUsers migration in a commit I just merged in:\nhttps://github.com/thoughtbot/clearance/commit/cbfc249f5c801db59e0ae3db957276376997de93#L29L56\n(warning, 54,000 deletions, takes a while to load... bye-bye test/rails_root)\nWill confirm with Joe tomorrow that was an oversight and if so, will bring back, using VERSION file.\n. Joe and I re-worked the migrations generator yesterday and I'm calling this issue fixed.\n. I've created a wiki page for subdomains:\nhttps://github.com/thoughtbot/clearance/wiki/Subdomains\nPlease edit it if there's a better solution.\n. Is this still an issue? I'd like to address it. Should we be using the new permanent and signed methods, too?\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/middleware/cookies.rb#L188-201\nExplanation:\nhttp://m.onkey.org/signed-and-permanent-cookies-in-rails-3\n. I've done this in a branch:\nhttps://github.com/thoughtbot/clearance/commit/7cb422be12b64804bb27243197b0cfbe920721b3\nI question the original issue, though. I'm able to sign in on staging.myapp.com and beta.myapp.com, which both use Clearance. Are you saying this is specifically when you're additionally overriding :domain on the cookie?\n. That's what I mean: I'm using Clearance on staging.myapp.com and beta.myapp.com and it works fine without this commit.\nI don't think this is an actual issue so I'd rather not have code that doesn't serve any purpose. I'm closing this issue without merging the patch.\n. Marking as won't fix. We haven't run into this and I don't expect we will as we avoid deep-nesting subdomains.\n. I believe this is now fixed (54,000 deletions!):\nhttps://github.com/thoughtbot/clearance/commit/cbfc249f5c801db59e0ae3db957276376997de93\nWe used http://github.com/thoughtbot/diesel to accomplish it. Please re-open if the problem persists.\n. I think we should try to remove the dependency on default_url_options if we can. Is that possible?\n. Mike, do you still want to do anything with this or can I close it?\n. Yes, you should have seen a line in the output after script/generate clearance that says:\nActionMailer::Base.default_url_options = { :host => 'localhost:3000' }\nIt's also in the README.\nGood luck!\n. Thanks. We'll be doing this over the next few weeks. Going to clean up the gem and probably release a 1.0 for Rails 3 with old versions of the gem supporting Rails 2.\n. Do you have Javascript disabled in those browsers?\n. Yes, it does. Do you have Prototype enabled on the page?\n. Sorry, I wasn't thinking clearly. At least in Rails 2.3, the Javascript generated by the :disable_with option is plain Javascript:\nthis.disabled=true;this.value='Please wait...';this.form.submit();\nYou don't need any other js libraries.\n. Check out the routes that Clearance provides by default:\nhttp://github.com/thoughtbot/clearance/blob/master/config/routes.rb\nNote that there are two passwords routes. In your config/routes.rb, try to match up with what Clearance provides and just replace the :controller option with your non-clearance-namespaced controller.\n. The next steps happy text has existed on the generator for a while:\nhttps://github.com/thoughtbot/clearance/blob/master/lib/generators/clearance/install/templates/README\nI'm not sure what else we can do to improve the install experience.\n. There are four failures in the spec suite when run on Ruby 1.9.2. I think this is an actual issue.\n. Awesome, thanks.\n. ActionController::Forbidden has been removed. Setting the 403 status code turned out to be an awful user experience in some browsers such as Chrome on Windows machines.\n. Joe, I went with your flash text as I think it's spot on. I kept the render instead of a redirect though, so that people can actually look at the URL to \"double check\". If they were redirected, they wouldn't be able to compare. Does that make good sense from a user experience perspective?\nhttps://github.com/thoughtbot/clearance/commit/b004f199acb1e11672e78de8a8775b2979c4f958\n. So you think keep it?\n. I believe this was because the Github README was out of sync with the latest gem for a few days. I've bumped the gem to 0.10.2 so the new command \"rails generate clearance:install\" should now work. (it used to be \"rails generate clearance\") Please try it again with the latest gem.\n. Mike, we've been aware of the actual spec/local part sensitivity for a while:\nhttps://github.com/thoughtbot/clearance/wiki/email-case-sensitivity\nI'm feeling like the usability issues pushing us to force the downcasing are going to be more common than the mail server situation you describe. It's a tradeoff, but worth it, I think. Do you agree?\n. Merged Adam's commit:\nhttps://github.com/thoughtbot/clearance/commit/25a32e2fe3d28434fcc5dea82d18ac256ecaa73c\n. I've added the code for forcing email downcasing during sign in:\nhttps://github.com/thoughtbot/clearance/commit/7701328eec5b5fba883616fee9121ef044166815\nAnd updated the wiki page:\nhttps://github.com/thoughtbot/clearance/wiki/Email-case-sensitivity\n. How about a sessions#show action & template that gives them information like you describe in #2?\n. Joe, what do you think of this?\nhttps://github.com/thoughtbot/clearance/commit/abbd2b10d12f3726410e0bf723ce74e4302c586c\n. We talked about this in person. I said I'm make adjustments. Done\nhttps://github.com/thoughtbot/clearance/compare/8e4587f2bf10179e32cb...b2cd87768abbfbc5f825\n. Done here and bumped to 0.11.0:\nhttps://github.com/thoughtbot/clearance/compare/5351cc8fcb...4f8c3fe1e0\nNow updating the wiki page.\n. This is fixed by another patch we're merging tonight.\n. Is this the same problem discussed in this issue?\nhttps://github.com/thoughtbot/clearance/issues#issue/103\nIf so, it seems like a better solution is to do what Rails does now. Maybe we use this?\ncookies.permanent\nhttp://m.onkey.org/signed-and-permanent-cookies-in-rails-3\n. Thanks so much, Joel! Merged:\nhttps://github.com/thoughtbot/clearance/commit/db36f0dc01a93b390fee404694b24c972bbbd1a4\n. Mack,\nThanks for the alert and the patch. We should obviously try to get this in as soon as possible.\nIt looks to me like handle_unverified_request was introduced in Rails 3.0.5? So, this patch would break backwards compatibility for Clearance. I think I'd prefer your reset_session suggestion.\nWhat do you think?\n. More info for my own understanding and anyone else looking for more info:\nhttp://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ruby-on-rails\n. Mack,\nI've merged your work into Clearance master, converted the test to RSpec (the suite was converted a couple of days ago), and switched the method from handle_unverified_request to reset_session to maintain backwards compatibility:\nhttps://github.com/thoughtbot/clearance/commit/9dd8bfdee69eadb16790d8bfcee8bfddbbf05978\nSpecs pass. Can I get someone to review this work before I bump the gem to 10.5?\nThanks,\nDan\n. We wanted to try this on a Rails 3.0.6 before bumping. I've tried to hack the app with Clearance 0.10.4 with no success:\ncurl http://localhost:3000/passwords/new --cookie-jar cookie | grep csrf\ncurl http://localhost:3000/session --data \"authenticity_token=hax0r\"\nI created an articles scaffold with a string attribute and was able to create articles from the command line with bad and missing authenticity tokens:\n[~/dev/csrf] curl http://localhost:3000/articles --data \"article[body]=hackedagain\"                         \n<html><body>You are being <a href=\"http://localhost:3000/articles/6\">redirected</a>.</body></html>%\nI've also tried commenting out Clearance's fix to see what happens but I'm not sure what I should see in terms of failing tests from this patch.\nI guess I'm losing sight of what the issue is, what things can go wrong, and why this should be in Clearance instead of Rails or individual apps.\nMack, you can you help explain a little further?\n. Okay, I'm able to re-create what you're seeing.\nSo what happens is that when I put in a correct email and password but no authenticity token in 10.4, I'm able to create resources. In 10.5 (unreleased), I'm not able to do that because the authenticity token is required.\nIs that right?\nAre you saying you also want to add reset_session to sign_out?\n. Thanks, Mack.\nWe just chatted about it in the thoughtbot office and we're going to go with your original implementation. It will be backwards compatible and it minimizes the effect of the change to just this issue. It's hard to predict how people might use reset_session and it's confusing because Clearance doesn't use short-term sessions, it uses long-term cookies so creating a mental association between reset_session and Clearance seems like something we should avoid.\n. Done:\nhttps://github.com/thoughtbot/clearance/commit/c656d444f336fbdd02c68fee51da1801fa585c1d\nhttp://rubygems.org/gems/clearance\nThanks again!\n. The default routes come from Clearance because it's an engine.\nWhy do you want them disabled?\n. Done:\nhttps://github.com/thoughtbot/clearance/commit/04843b7d21ccc89dd582e276a82bad77fe544700\n. First bid:\nhttps://github.com/thoughtbot/clearance/commit/03368b97d37b2afa6ab067d6c50658d284400dbb\nConsidering whether it makes sense to change the token name now or later. I want to change \"confirmation_token\" to \"reset_password_token\"\n. Decided not to change the confirmation_token name for now. I'm thinking we do all the renaming in one release so the upgrading pains happen at once instead of every time we upgrade.\nPull request: https://github.com/thoughtbot/clearance/pull/141\n. Suggested upgrade path from James on the mailing list:\n0) Code update including the new version of Clearance is rolled out to\nproduction; values of users.encrypted_password in the DB are unchanged\n1) User Foo makes the first attempt to sign in since the roll-out\n2) Clearance sees that @user.encrypted_password matches /^[0-9a-f]\n{40}$/ (i.e. a legacy password), and authenticates Foo with the old\nmethod\n3) If successful, during the same request action, Clearance re-hashes\nthe plaintext (which is still lying around in params) using BCrypt\n4) Normal redirect for successful sign-in occurs\n5) Future sign-in attempts by Foo are authenticated using BCrypt,\nsince @user.encrypted_password is no longer in the legacy format\nI think the big advantages are:\n- Performed in the background during normal operation of the app\n- No need to force a global password reset\n- No throwaway attribute/field on User is needed for tracking which\n  hashing method is being used\nThere are some disadvantages too of course:\n- Unused accounts will never be upgraded; could mitigate this by\n  expiring passwords hashed with the old method, but that's still a bit\n  of a headache\n- User is modified during normal sign-in action; though this may\n  already happen for other reasons (e.g. tracking), it's not quite what\n  one might expect\n. No progress. If you want to get a patch going, we'll take a look at it.\n. Started this here:\nhttps://github.com/thoughtbot/clearance/compare/4b4c25171b...443fbfa960\nThere's more I want to do to clean this up. For instance, I'm thinking the PasswordStrategies API should be #authenticated? and a public #password= method instead of a private #encrypt_password= method.\n. @adabei I chose not to use Rails' SecurePassword module or has_secure_password class method. It's different enough that our own password strategy is cleaner.\n. Some more work:\nhttps://github.com/thoughtbot/clearance/compare/443fbfa9602a8c1a64877337c5ac28dd1c6a28ea...7acfd65f926960131a8eb6456806af56fe5f5ce3\n- Made BCrypt the default password strategy\n- Added a Fake password strategy that just stores the password as plain text, meant for test suites (BCrypt's hashing algorithm will otherwise slow down test suites that create a lot of User records, like most of our suites do\n- Changed the API for password strategies to be 2 public methods: #authenticated? and #password=.\n. Still remaining: a BCryptMigrationFromSHA1 password strategy that handles legacy apps:\n- Code update including the new version of Clearance is rolled out toproduction; values of users.encrypted_password in the DB are unchanged\n- User Foo makes the first attempt to sign in since the roll-out\n- Clearance sees that @user.encrypted_password matches /^[0-9a-f]{40}$/ (i.e. a legacy password), and authenticates Foo with the old method\n- If successful, during the same request action, Clearance re-hashes the plaintext (which is still lying around in params) using BCrypt\n- Normal redirect for successful sign-in occurs\n- Future sign-in attempts by Foo are authenticated using BCrypt, since @user.encrypted_password is no longer in the legacy format\n. Merged, with Joe's advice.\nhttps://github.com/thoughtbot/clearance/commit/4c455ec9f20872838efc5eabb875839d2fd84433\n. Pull request:\nhttps://github.com/thoughtbot/clearance/pull/143\n. Merged.\n. Done.\n. Clearance cannot be currently used with a table other than users and model other than User. Is your class actually called MyUser? I'd be open to reading a patch that allows other names (Person, Human, etc)\n. I'm going to close this issue. If you'd still like this functionality, go for it in a fork and submit a pull request. We haven't needed this ourselves.\n. Work in progress here:\nhttps://github.com/thoughtbot/clearance/commits/test-matchers\nRunning into this error:\nno such file to load -- /Users/lawless/dev/clearance/config/environment (LoadError)\n. Tests now pass on Ruby 1.9 in this branch thanks to Joe. Need to fix test unit add_assertion error for 1.8 users.\n. Done:\nhttps://github.com/thoughtbot/clearance/commit/b2cd87768abbfbc5f825e57f7e4517f7399153e7\n. Sure, here:\nhttp://clearance-demo.heroku.com/\n. Try adding this to the Gemfile in the root directory of your Rails app:\ngem \"clearance\"\nAnd, then:\nbundle install\nInstead of directly installing the gem. Then, does the generator appear for you?\nWhat do you see when you list the generators?\nrails g\nThe way generators have historically worked, it looked in Rails itself, then vendor/plugins, and installed gems on the system. I wonder if since Bundler was introduced if it only looks in your bundle, and not all installed gems on your system.\nAlso, does your Rails app have an .rvmrc file? If so, does the version specified match the Ruby version where you're able to see that clearance is installed?\nruby -v\nOn May 29, 2011, at 7:01 PM, sc932 reply@reply.github.com wrote:\n\nHello I am running rails 3.0.7 with ruby 1.8.7 and have the most recent 0.11.1 clearance gem\nI get the following responses to commands:\n$ sudo gem install clearance\nSuccessfully installed diesel-0.1.4\nSuccessfully installed clearance-0.11.1\n2 gems installed\nInstalling ri documentation for diesel-0.1.4...\nInstalling ri documentation for clearance-0.11.1...\nInstalling RDoc documentation for diesel-0.1.4...\nInstalling RDoc documentation for clearance-0.11.1...\n$ rails g clearance:install\nCould not find generator clearance:install.\n$ gem list clearance\n* LOCAL GEMS *\nclearance (0.11.1)\nI'm running Ubuntu 11.04 if that matters.. Also, I am completely new to RoR so I may have missed a step somewhere..\nThanks!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/thoughtbot/clearance/issues/153\n. @janetchang Yes, clearance:specs is only 1.0.\n. Jeremy,\n\nThat line refers to the case when you need to override the controller and route so it's correct for that case. Is there something else we can do to make the README more clear that you don't have to do that out of the box? Maybe we just link to wiki pages for the customizing use cases.\nDan\n. Made some alterations to the README based on this feedback. Sorry for the confusion and hope you're enjoying Clearance more at this point.\nhttps://github.com/thoughtbot/clearance/commit/4a3de1bce4924ca64059bfde77da62176c6bb673\n. Thanks! Merged. https://github.com/thoughtbot/clearance/commit/098cf04192e4efb53c96db65842ef04ba3666db5\n. Thanks, @sowbug. I think the error-catching should happen in Diesel, so I've opened an issue there:\nhttps://github.com/thoughtbot/diesel/issues/4\nI've improved the instructions in the Clearance README for now:\nhttps://github.com/thoughtbot/clearance/commit/316db9bea8a49a4cf3ef8112a3b6cbf960e5b264\nThanks again for the report. I'm closing this issue and will work on the Diesel change when we're able.\n. Update: it looks like this was being used in a Capybara-style integration test.\n. I've done my best to improve the documentation here:\nhttps://github.com/thoughtbot/clearance/commit/26933c5cfbc3b7f447e35906e937d3cda566e4bd\nHope this helps.\n. Yes, it's assuming you're using Factory Girl for the sign_in method. If you don't want to use FG, the sign_in_as method should work just as fine.\n. My hope is the change to the Rack session will fix this:\nhttps://github.com/thoughtbot/clearance/pull/177\nForrest, give master a chance when you have a moment. If it's not working for you, please re-open another issue. Thanks.\n. Thinking about this more, I don't like the Facebook plain text one. I say scrap it.\nFor the Quora one, we could be more vague about the existence of the email. Right now, we say \"Bad email or password.\" If we appended \"Are you trying to register a new account? Sign up.\", I think that's a good usability bump (\"oops, I was on the sign in form but meant to be on the sign up form\") and a good user acquisition bump (people who are trying to sign up but clicked the wrong thing).\n. Thanks! Merged.\n. In new Rails 3.1 application the asset pipeline is enabled by default.\n. The command seems to be using the right appraisal:\n```\n\n\nBUNDLE_GEMFILE=/Users/croaky/dev/clearance/gemfiles/3.1.0.gemfile bundle exec /Users/croaky/.rvm/gems/ruby-1.9.2-p290/bin/rake spec cucumber\n```\n\n\nAnd the 3.1.0.gemfile does have rails 3.1.0 as a dependency.\n. Ooh, good call Josh. I removed everything from the Appraisal except rails dependency and it seems to be running muy bien.\n. I think maybe why it was failing was that there's this new :assets group in the Gemfile for Rails 3.1 that will be generated automatically. By having sass-rails in the Appraisal, it was putting it in the top-level group, where it doesn't belong.\n. Done: https://github.com/thoughtbot/clearance/commit/90ca670f6830714431ddbf1629970f90baf944d0\n. Were the user agents hitting the site for those errors in Airbrake bots? Maybe the session wasn't getting created?\n. Okay, thanks.\n. I've started this work in this branch:\nhttps://github.com/thoughtbot/clearance/tree/explicit-capybara-steps\nI don't expect to finish tonight but hope to continue with it this week.\n. Finished: https://github.com/thoughtbot/clearance/commit/e01f3666421b10b1a2e18645aaea2d9f153734c9\n. Hey Abel,\nThanks logic is handled here:\nhttps://github.com/thoughtbot/clearance/blob/master/lib/clearance/authentication.rb#L116-120\nAs far as I can tell, the part of the URL after the # is not sent to the server (might be an HTTP thing?). However, Backbone might have some way it can send it. If you can figure out how that is being done, you can piece together a new store_location method to override what Clearance provides by default.\nLet us know what you come up with.\n. Thanks!\n. @iros That's a reasonable use case.\nThe best way currently is to re-define deny_access in your ApplicationController. If you think your re-definition should be in Clearance, we'd be happy to review a patch.\n. Word. Merged. Thanks, Gus.\n. Thanks!\n. Looks good to me. Couple of style questions.\n. Thanks, Jason!\n. This looks ready to merge to me after squashing down into one or two commits (one for action dispatch, one for cookie jar?).\n. Looks good. Merged.\n. Thank you, @qrush. Looks good to me and @joshuaclayton merged.\n. @gabebw Just gave it a shot on my machine with the listed versions of Ruby, Rubygems, Rails, and Clearance. Was not able to re-produce.\n@refurbished Have you restarted your development app server?\n. Gabe, this looks good to me. Thanks for finishing it. I think we should wait to merge this until we release a patch version that fixes this security vulnerability:\nhttp://weblog.rubyonrails.org/2012/6/12/ann-rails-3-2-6-has-been-released/\nhttps://github.com/thoughtbot/clearance/blob/master/lib/clearance/session.rb#L15\n. @mike-burns I was hoping to avoid the dependency. Also, I'm not sure we use dynamic_form on any of our projects? formtastic has some similar functionality.\n. I'd say we remove the flash and don't add a dependency on any particular form helper library. Let the developer use the form helper library they like. However they want provide the error messages, it will probably be more helpful than the current flash of \"Must be a valid email address. Password can't be blank.\"\n. Thinking we can't really have null: false in the \"upgrade existing users table\" migration: can't add null remember_token, email, and encrypted_password columns to existing user rows.\nWill only apply this to the \"new users table\" migration.\n. Sorry, yeah, meant 1.8. Factory Girl has done it. Nice to push things forward. Not a big need for it in Clearance. Could remove a couple of helper methods.\n. Done in 21c3308\n. @gylaz and I talked about this. I think it's fine for now. The mixin for the controller basically provides an interface for controllers (and sometimes views and helpers) that delegates to the Rack middleware. There's not really duplication.\n. Not clear what problem I was reporting here.\n. I believe this warning is generated because <%= csrf_meta_tag %> is not in the layout because the layout is explicitly deleted in a couple of integration tests:\n```\nfeatures/integration_with_test_unit.feature\n7:    And I remove the file \"app/views/layouts/application.html.erb\"\nfeatures/step_definitions/configuration_steps.rb\n15:    And I remove the file \"app/views/layouts/application.html.erb\"\n```\nI don't know why it is necessary to remove them but the tests fail without those lines. I'm not that bothered by the warning. Closing.\n. Thank you @gabebw. You are a gentleman. Merged.\n. Thanks, Ari. Looks great. Merged!\nAre you guys using Clearance for something now?\n. @jnylund Thanks for the bug report. I believe this will fix it:\nhttps://github.com/thoughtbot/clearance/pull/258\n. Is there any other code to show, perhaps in the controller?\nUsually this error occurs when we pass an object instead of a hash to methods like new or update_attributes.\nFor example:\nupdate_attributes(params[:image]) # error\nupdate_attributes(:image => params[:image]) # no error\n. Is the error in the create action? That location: @company looks a little fishy.\nformat.json { render json: @company, status: :created, location: @company }\nMaybe add your controller spec code to this issue, too? What's the line number on the undefined methodstringify_keys' for #User:0xc9a70c0? Have you tried commenting out or altering lines in the backtrace to find exactly where the problem is occurring?\n. I'm unable to reproduce this.\n. Merge!\n. Merged.\n. >  The Travis build failed\n. @edouard Thanks. Merged as f529a1a.\n. I would likebefore_filter :authorizeto stay named as it currently is. I believe it is accurate and descriptive. It is used to authorize an action to users who are signed in and deny access to guests. If your action needs different authorization logic, you can overrideauthorizeinApplicationControlleror the controller you need it in, or add other filters likebefore_filter :authorize_as_admin` or use CanCan or Pundit.\nI see the potential confusion with the authorize method residing in the Authentication module, however, and would be open to suggestions for improving that.\n. @halogenandtoast @jonathanhefner This is being addressed in https://github.com/thoughtbot/clearance/pull/268. Would love your review.\n. Thanks, @aayalur. Squashed into 5a7f23a and merged.\n. I would like us to close the following issues before releasing 1.0:\n- Travis build failing: https://github.com/thoughtbot/clearance/issues/254\n- Edit README to include i18n hierarchy: https://github.com/thoughtbot/clearance/issues/247\n- Fix error in Blowfish, SHA1 password strategies: https://github.com/thoughtbot/clearance/pull/258\n- A small i18n change (but API change): https://github.com/thoughtbot/clearance/issues/248\n- Add clearance/testing to spec/support/clearance.rb (important for our Suspenders, then later add Clearance workflow): https://github.com/thoughtbot/clearance/issues/246\nOnce those are done, I think we should push another release candidate, freeze master, add the release candidate to at least two apps of ours, let them run in production for at least a week, then release 1.0.\n. Of the issues to get us to 1.0, #254 is done, #247 is done, #258 is done, #248 is done. Only #246 remains.\n. All other issues have been closed. I've cut a 1.0.0.rc6 release candidate. I hope it will be the last remaining release candidate before 1.0.0 and the only changes we'll make before the final release is documentation updates like the Upgrading Clearance wiki page to explain the Clearance::Controller and BCrypt changes.\nI'd love to have some folks upgrade their apps and aim for a final release one of the next couple of Fridays.\n. Updated the Updating Clearance wiki page, created 1.0.0 and 1.1.0 milestones in GItHub issues, closing this issue.\n. I went with option 1: fdc6d7e\n. The install generator should:\nruby\ncreate_file 'spec/support/clearance.rb', \"require 'clearance/testing'\"\n@jferris The other change in Clearance was attr_accessible, which we're moving off of toward strong_parameters. What do you think about instead changing the controllers to permit and whatnot?\n. @gylaz and I talked about strong_parameters yesterday and came to the conclusion that we don't need need it right now. We currently only pass the parameters to Clearance controllers that we need. So, if we can avoid adding the dependency, it seems worth holding off on.\n. @gylaz Yeah, I agree about just linking. Done in #267.\n. Fixed in #265.\n. Thanks, Geoff. Merged as ada0433.\n. Great report. Thanks, @mbrictson Yes, I like that copy change a lot and can see that being confusing to a user.\nPull request https://github.com/thoughtbot/clearance/pull/256\n. Thanks, Galen. Merged as 9a3ad60.\n. @jferris The tests are passing for me locally. Creating a separate issue to cover Travis:\nhttps://github.com/thoughtbot/clearance/issues/254\n. Thanks, Galen. Merged as 9b96de4.\n. @agraves Good call. I think you're correct. Here was the original commit downcasing the email: 25a32e2\nWhat do you think about a method like User.find_by_normalized_email that re-uses the same normalize_email method, then does the find?\n. The Travis failure is unrelated. Created a separate issue for it:\nhttps://github.com/thoughtbot/clearance/issues/254\n. @agraves Looks great. Thanks for the work and the follow-up. I deleted a couple of the self.'s that weren't needed, squashed into 028a1cd, and merged. Cheers.\n. Fixed in #264.\n. Sounds like Treetop and using a maybe-not-public interface from Mail gem makes validates_as_email not as clean as I was thinking.\nMy second runner-up in my research was https://github.com/balexand/email_validator. It uses it a regex but has decent specs and is exactly the name I would expect this gem and related class (EmailValidator) to be.\n. Opened PR #266 for this.\n. @jferris Thanks. Agree on splitting the commits. I just split them and will merge like that for future git historians' reading experience.\n. I took kind of an aggressive approach to this in #268. Closing this one and letting discussion happen there.\n. Squashed and merged.\n. Ready to squash and merge.\n. Looks rockin'. Noticed we're using CircleCI now: https://circleci.com/gh/thoughtbot/clearance/128, which is passing. Ready to squash and merge at your discretion.\n. @mjankowsi Do you have an example of a current app where you need to override this? Can you share some code?\n. Is the effect of the Sluggable module that this line in the backdoor can no longer find users?\n. Looks good.\n. @gylaz Actually, when you rebase, can you add a bit to the git message?\n\nThe Travis failures look like maybe a conflict between the sign_out method meant for integration tests and the sign_out method used for controller specs. Example failure:\n\nhttps://travis-ci.org/thoughtbot/clearance/jobs/4730477\n. Are you thinking we close this one without merging in favor of #264?\n. @gylaz Ready to merge.\n. One style comment. After that, ready to squash and merge at your discretion.\n. @gylaz Yeah, good catch. I just saw a couple of other items out of order so made the change, squashed, and merged. Thanks.\n. Thanks, @gylaz. Done and merged.\n. Thanks, @gylaz. Applied your feedback in 9b1cba9.\n. > I think the main issue was that Clearance::Authentication maybe misrepresented what it provided to controllers, but I think the new names go too far in the other direction.\nRight, this was the issue I was trying to address. Also, it's not the entire contents of the Clearance::Authentication that are potentially misrepresented, just authorize in the public API (the private API of store_location, return_to, and clear_return_to might be a worthwhile different conversation).\nI don't feel strongly about this change. I wanted to make the change to see what it looked and felt like and am seeking feedback like yours about whether this causes more trouble than it's worth. I also wanted to do it pre-1.0, which we're only one issue or two away from reaching: https://github.com/thoughtbot/clearance/issues/243\n. @jferris Done. Ready for re-review.\n. @jonathanhefner In that use case, would redirect_to sign_in work better in your else branch?\nauthorize calls unless signed_in?, which you already cover. It then calls deny_access, which stores the current location then calls redirect_to url_after_denied_access_when_signed_out.\nAlternatively, could you use deny_access or redirect_to url_after_denied_access_when_signed_out in the constraint?\n. @jferris Could I get you to re-review this one when you have a moment?\n. Thanks, @jferris. Merged as 91a984c.\n. Looks good.\nOn Wednesday, February 27, 2013, Caleb Thompson wrote:\n\nBecause this test was passing before, but not actually working, I think\nthis also needs some sort of test to see if\nClearance::Session.new(env).signed_in?\nis true, but I don't have time/knowledge about clearance to do that.\nTested this with gem 'clearance', path: '/Users/caleb/code/clearance'\nin an app that was using a working BackDoor, and it passed the specs.\nYou can merge this Pull Request by running\ngit pull https://github.com/thoughtbot/clearance ct-fix-back-door\nOr view, comment on, or merge it at:\nhttps://github.com/thoughtbot/clearance/pull/269\nCommit Summary\n- Use env[:clearance] instead of env[:session]\nFile Changes\n- M lib/clearance/back_door.rbhttps://github.com/thoughtbot/clearance/pull/269/files#diff-0(2)\n- M spec/clearance/back_door_spec.rbhttps://github.com/thoughtbot/clearance/pull/269/files#diff-1(8)\nPatch Links:\n- https://github.com/thoughtbot/clearance/pull/269.patch\n- https://github.com/thoughtbot/clearance/pull/269.diff\n. Thanks, merged.\n. Thanks, Nick. Merged.\n. @topdev Thanks, merged as 831e3ac.\n. Yup, good call. Implementation and tests look good, too. Ready to merge.\n. Looks good.\n. Looks good to me. Will be interesting to see what Travis says.\n. Merged. Thanks, @derekprior.\n. @jason I'm looking into this now. I'm going to use Rails 3.2.13.rc2 with Ruby 2.0 as my understanding is that the Rails 3.2.13.x series is the first to support Ruby 2.0:\n\nhttp://weblog.rubyonrails.org/2013/2/27/Rails-3-2-13-rc1-has-been-released/\n. I just went through the process manually and everything worked as expected:\n```\n[~/dev] ruby -v\nruby 2.0.0p0 (2013-02-24 revision 39474) [x86_64-darwin12.2.0]\n[~/dev] gem list rails                 \n LOCAL GEMS \nrails (3.2.13.rc2)\n[~/dev] rails new clearance_1_ruby_2\n      create\n      ...\n[~/dev/clearance_1_ruby_2] cat Gemfile\nsource 'https://rubygems.org'\ngem 'clearance', '1.0.0.rc6'\ngem 'jquery-rails'\ngem 'rails', '3.2.13.rc2'\ngem 'sqlite3'\n[~/dev/clearance_1_ruby_2] rails g clearance:install\n      create  config/initializers/clearance.rb\n      insert  app/controllers/application_controller.rb\n      create  app/models/user.rb\n      create  db/migrate/20130317191353_create_users.rb\n[~/dev/clearance_1_ruby_2] rake db:migrate\n==  CreateUsers: migrating ====================================================\n-- create_table(:users)\n   -> 0.0016s\n-- add_index(:users, :email)\n   -> 0.0003s\n-- add_index(:users, :remember_token)\n   -> 0.0004s\n==  CreateUsers: migrated (0.0024s) ===========================================\n[~/dev/clearance_1_ruby_2] rails s\n=> Booting WEBrick\n=> Rails 3.2.13.rc2 application starting in development on http://0.0.0.0:3000\nStarted GET \"/sign_up\" for 127.0.0.1 at 2013-03-17 12:17:43 -0700\nProcessing by Clearance::UsersController#new as HTML\n  User Load (0.2ms)  SELECT \"users\". FROM \"users\" WHERE \"users\".\"remember_token\" = 'e2680f79e30253afb0184ac6874dd00dcb599671' LIMIT 1\n  Rendered /Users/croaky/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0/gems/clearance-1.0.0.rc6/app/views/users/_form.html.erb (5.9ms)\n  Rendered /Users/croaky/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0/gems/clearance-1.0.0.rc6/app/views/users/new.html.erb within layouts/application (11.3ms)\nCompiled jquery.js  (3ms)  (pid 59096)\nCompiled jquery_ujs.js  (0ms)  (pid 59096)\nCompiled application.js  (18ms)  (pid 59096)\n  CACHE (0.0ms)  SELECT \"users\". FROM \"users\" WHERE \"users\".\"remember_token\" = 'e2680f79e30253afb0184ac6874dd00dcb599671' LIMIT 1\nCompleted 200 OK in 136ms (Views: 83.7ms | ActiveRecord: 1.2ms)\nStarted POST \"/users\" for 127.0.0.1 at 2013-03-17 12:17:53 -0700\nProcessing by Clearance::UsersController#create as HTML\n  Parameters: {\"utf8\"=>\"\u2713\", \"authenticity_token\"=>\"[FILTERED]\", \"user\"=>{\"email\"=>\"test@example.com\", \"password\"=>\"[FILTERED]\"}, \"commit\"=>\"Sign up\"}\n  User Load (0.2ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"remember_token\" = 'e2680f79e30253afb0184ac6874dd00dcb599671' LIMIT 1\n   (0.1ms)  begin transaction\n  User Exists (0.1ms)  SELECT 1 AS one FROM \"users\" WHERE \"users\".\"email\" = 'test@example.com' LIMIT 1\nBinary data inserted for string type on column encrypted_password\n  SQL (1.0ms)  INSERT INTO \"users\" (\"confirmation_token\", \"created_at\", \"email\", \"encrypted_password\", \"remember_token\", \"updated_at\") VALUES (?, ?, ?, ?, ?, ?)  [[\"confirmation_token\", nil], [\"created_at\", Sun, 17 Mar 2013 19:17:53 UTC +00:00], [\"email\", \"test@example.com\"], [\"encrypted_password\", \"$2a$10$J22Eg4n7859W6AyjfA6ScOsOYi1Xe.gWBV7pvVS9Pyh6PyKFRpA12\"], [\"remember_token\", \"24f7b80badd5996209e9db95e9aa1ee238b13541\"], [\"updated_at\", Sun, 17 Mar 2013 19:17:53 UTC +00:00]]\n   (1.1ms)  commit transaction\nRedirected to http://localhost:3000/\nCompleted 302 Found in 101ms (ActiveRecord: 2.5ms)\n```\nMy two suggestions are:\n- Restart your server.\n- Check your Ruby, Rails, and Clearance versions. We support Ruby 2.0 right now only for Rails 3.2.13.rc2:\nhttps://github.com/thoughtbot/clearance/blob/master/Appraisals\n. Thanks for the report, @magnolia-fan. Can you provide a backtrace and other steps to re-create this? I'm trying this now on those versions of Rails and Clearance and Ruby 2.0 but not able to re-create so far.\n. Awesome, thanks. I'm wondering if unloadable changed in Rails 4 in some way. Will do some research.\nhttp://apidock.com/rails/ActiveSupport/Dependencies/Loadable/unloadable\n. It looks like in your backtrace that the circular dependency is with Users::SessionsController, not Clearance::SessionsController. Is Users::SessionsController a subclass of Clearance::SessionsController?\n. @magnolia-fan Thanks, editing the file and reloading was the key step I was missing on my local app. I'm now able to reproduce.\nI also tried this with WEBrick and Unicorn to make sure it wasn't a Unicorn/Puma/pull issue. It happens with WEBrick as well.\nI've pointed my Gemfile to my local Clearance and will by trying to isolate the issue further.\n. Removing unloadable in the Clearance controllers fixes the issue. Not sure why yet.\n. I'm guessing no. Will look more into it tonight and likely submit a PR with\nan explanation of what changed.\nOn Sunday, March 17, 2013, Gregory Eremin wrote:\n\nWorks for me too. Do these controllers really need to be unloadable?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/thoughtbot/clearance/issues/276#issuecomment-15029936\n.\n. Still not entirely sure why this is causing an issue now (Ruby 2.0 and/or Rails 4.0) and not earlier but opening #277 to address it.\n. Can I get a review of this from a thoughtbot person or two?\n\n/cc @jferris @mike-burns @joshuaclayton @gabebw @sikachu @gylaz @harlow @calebthompson @derekprior @salbertson\n. I think we have to merge this given the issue unloadable is causing on Rails 4 / Ruby 2 apps. The tests are passing on all versions of Ruby / Rails we support and I've tried this locally on a Rails 4 / Ruby 2 app as well as one of our clients' Rails 3.2.13 / Ruby 1.9.3 apps.\nAgree?\n. Thanks, @harlow. Merged.\n. @magnolia-fan 1.0.0.rc7 released with this patch.\n. @jferris What if we added a bundle update to the Rakefile? Idea there that\nwe create a reproducible situation of using the latest available gems that\nBundler can reconcile together, testing against the latest. If regressions\noccur in this scenario, they would be regressions we want to know about.\nOn Monday, March 18, 2013, Joe Ferris wrote:\n\nI'm still opposed to the \"use whatever dependencies are available\"\napproach to development.\nI wrote about this when blogging about appraisal:\nhttp://robots.thoughtbot.com/post/12068553267/appraisal-find-out-what-your-gems-are-worth\nThe two primary issues:\n- Without a Gemfile.lock, the likelihood that a developer pulls and\n  gets a broken setup increases greatly, which in turn greatly decreases the\n  likelihood that developers will participate in a project.\n- Without lockfiles for appraisals, the situations aren't actually\n  reproducible, which means regressions can reappear and a bug that occurs on\n  one machine will be invisible on another.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/thoughtbot/clearance/pull/278#issuecomment-15054035\n.\n. Ready for re-review.\n. Thanks, @edouard. Merged.\n. I'm not sure I understand the use case. I haven't run into a situation where we've wanted to override all of these methods all at once. Can you talk a little more about the app you're working on that you needed to do this?\n\nIt feels a little funny to provide two configuration hooks for each of these methods (one local by overriding the method, one global by overriding the config option).\n. Thanks, @magnolia-fan. I merged this as d9d71c1, with a few slight changes that I explained in the git commit message. Let me know if you have any feedback.\n. @jsuder This makes sense to me. There's a couple of small edits I want to make to this pull and will likely include a link to URL like http://blog.teamtreehouse.com/how-to-create-totally-secure-cookies in the commit message but I expect to get this merged.\nGood call, thanks.\nhttp://guides.rubyonrails.org/action_controller_overview.html\n. Thanks, @jsuder. Merged as eb18df8.\n. @jsuder Yeah, I think that's reasonable. Using the git: option in Bundler in the meantime should work well.\n. @jsuder 1.0.0.rc7 released.\n. Ready to merge.\n. Done in https://github.com/thoughtbot/clearance/pull/289\n. Hi @jarkelen. Sorry for the trouble. Do you have a custom UsersController in your app? Is it subclassed from Clearance::UsersController? What does the output of rake routes | grep user give you?\n. Thanks, @goleksiak. Capybara::DSL is included by RSpec Rails in feature specs. I've attempted to improve the documentation in https://github.com/thoughtbot/clearance/pull/290.\n. One in-line question. Ready to merge at your discretion.\n. Sounds good. Thanks for looking into it.\nOn Sunday, March 31, 2013, Greg Lazarev wrote:\n\n@croaky https://github.com/croaky I'm still narrowing down the failures\nthat are surfacing via Travis, since feature tests are actually being\nexecuted in a proper, sandboxed test environment.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/thoughtbot/clearance/pull/288#issuecomment-15694230\n.\n\n\nDan Croak\n@croaky\nthoughtbot's internal research http://tinyletter.com/thoughtbot/letters\n. Ready to merge. Thanks, @gylaz.\n. Thanks, @gylaz. Merged.\n. Interested in @frechg's opinion on this.\n. We've talked about dropping support for Rails 3.0.x and 3.1.x, moving toward only 3.2.x and 4.0.x. Would that solve your blocker here?\n. Ready to merge.\n. Thanks, @hritchie. Merged as d63f725.\n. Yes, try Clearance 1.0.0.rc7 for use with Rails 4. Read the wiki page on upgrading to 1.0.x here:\nhttps://github.com/thoughtbot/clearance/wiki/upgrading-clearance\n. You will see one SQL SELECT into the users table per HTTP request. You may also see in your logs many requests to assets, especially in development, which is how Rails normally works.\nI believe everything in Clearance and Rails is working as intended. Please provide logs if you're seeing something different.\n. @vikrammishra333 I'm not sure how to avoid the SQL SELECTs or how Devise gets around finding your user for each HTTP request.\nI don't recommend serving assets through your Rails app. Give asset_sync a try.\n. @derekprior Agree.\n. Makes sense. Looks good. Ready to merge. Thanks, @derekprior.\n. @jsteiner I'd like to make Clearance forms easier to use within modal windows, which we've discovered on all of our recent projects that we want as the default interaction:\nhttps://github.com/thoughtbot/clearance/issues/324\nI think your PR here here could help with that as we also always are using Simple Form in our apps.\nI've marked this PR as milestone 1.1. Maybe we talk about this some more at the Summer Summit?\n. Yes, I think you could do something like:\n``` ruby\nClearance.configure do |config|\n  config.cookie_expiration = lambda { nil }\nend\nclass SessionsController < Clearance::SessionsController\n  def create\n    if params[:remember_me]\n      Clearance.cookie_expiration = lambda { 1.year.from_now.utc }\n    end\nsuper\n\nend\nend\nresource :session, controller: 'sessions'\n``\n. This looks good. When you merge, could you add a note aboutgrep'ing forreturn_to` in the developers' app to the Upgrading Clearance wiki page?\n. Thanks, @bigbam505! Merged.\n. Yup, looks great. Thanks, @codesoda. Merged.\n. I definitely agree it's common to hide \"sign up\" feature in apps using Clearance. I've seen it on a lot of projects.\nI'm not sure if the sketched out solution here is less code, though? Also looks like it introduces more conditionals and global state. \n. The global state is probably fine. It's configuration, I guess.\nThe current vs. proposed steps seem like they're both about three steps. I'm open to putting something in if we feel it's clearly simpler or cleaner. I'm ambivalent about the current proposed solution but could be swayed if others feel strongly.\n. Looks good to me.\n. Looks good.\n. @gylaz I'm fine with whatever direction you'd like to go. Your points seem valid and you can make the final call.\n. Looks good to me.\n. @jferris It still tests against multiple Rails versions. See https://travis-ci.org/thoughtbot/clearance/jobs/8549928 as an example. We just don't need to check the generated gemfiles into version control.\n. Ready to squash and merge. Thanks, Greg.\n. Thanks for the pull, Scott. I think I'm going to close this without merging for now. More and more, we've been wanting to show our Clearance forms in a modal, and then close it, changing the interface as necessary without a page reload. There may be library and documentation changes we'll need to make to make that behavior easier to implement and I hope to make it the main focus of Clearance 1.1.\nhttps://github.com/thoughtbot/clearance/issues/324\nI believe that will affect flash messages and make this more clear.\n. Looks great. Thanks for taking this on, Greg. Squash and merge when ready.\n. When you configure Clearance, set the user_model setting:\nruby\nClearance.configure do |config|\n  config.user_model = NotUser\nend\nThen, mix in Clearance::User into your NotUser model:\nruby\nclass NotUser < ActiveRecord::Base\n  Clearance::User\nend\n. A few comments. Thanks for taking this on.\n. @gylaz I'm fine with that.\n. Ready to squash and merge at your discretion.\nOn Thursday, July 11, 2013, Greg Lazarev wrote:\n\n\ndo a few conditional checks for rails 4 structure changes\nmove gems used for developoment and testing to Gemfile ** (to allow\n  using git url, and to try a new strategy of specifying development gems)\n\n\nYou can merge this Pull Request by running\ngit pull https://github.com/thoughtbot/clearance gl-rails4-support\nOr view, comment on, or merge it at:\nhttps://github.com/thoughtbot/clearance/pull/323\nCommit Summary\n- Support for Rails 4\n- Fix tests for rails4\nFile Changes\n- M .gitignorehttps://github.com/thoughtbot/clearance/pull/323/files#diff-0(1)\n- M Appraisalshttps://github.com/thoughtbot/clearance/pull/323/files#diff-1(4)\n- M Gemfilehttps://github.com/thoughtbot/clearance/pull/323/files#diff-2(13)\n- M Gemfile.lockhttps://github.com/thoughtbot/clearance/pull/323/files#diff-3(17)\n- M clearance.gemspechttps://github.com/thoughtbot/clearance/pull/323/files#diff-4(14)\n- M features/step_definitions/configuration_steps.rbhttps://github.com/thoughtbot/clearance/pull/323/files#diff-5(28)\n- M lib/clearance/testing/application.rbhttps://github.com/thoughtbot/clearance/pull/323/files#diff-6(19)\nPatch Links:\n- https://github.com/thoughtbot/clearance/pull/323.patch\n- https://github.com/thoughtbot/clearance/pull/323.diff\n\n\nDan Croak\n. @naps62 That error looks like there's a typo of Activodel instead of ActiveModel somewhere. It's reporting it on line 2 of home/travis/.rvm/gems/ruby-1.9.3-p448/gems/email_validator-1.4.0/lib/email_validator.rb but it does not look like that typo is actually in the file: https://github.com/balexand/email_validator/blob/master/lib/email_validator.rb or has been in the file in the past: https://github.com/balexand/email_validator/commits/master/lib/email_validator.rb\n. This to me is the highest priority for Clearance 1.1.0 /cc @jferris @halogenandtoast @derekprior.\nOut of the box, I'd like Clearance to use modals and Ajax forms to improve the user experience.\n. >  this was done for all the projects in SF\nSlight clarification: it's what we wanted to do on all projects but because it wasn't easy out of the box with Clearance, we punted most of the time.\n\nA user signs in voluntarily (the click a sign in link/button)\n\nYup. Here's how Trello's looks:\n\n\nA user does something that requires sign in.... A modal is a poor fit for the second scenario. What would it be a modal over?\n\nI think it would still redirect to a standalone page in that scenario. Using Trello as an example again, they actually have a poor \"this page doesn't exist, try logging in\" interstitial. When you click \"logging in\", you see:\n\n\nIn that scenario, from a UX perspective this seems mostly like a 'first impression' kind of change and not something that is particularly helpful over the long haul.\n\nYup, that's probably true, but still a nice improvement.\n. Can we leave it to the developer to determine whether to redirect? Or, some clear hook that we default to redirect but that they can change to update portions of the DOM if they'd like.\n. There is not a configuration option to disable global sign out. The background on the conversation can be seen here between @rmm5t and I:\nhttp://groups.google.com/group/thoughtbot-clearance/browse_thread/thread/d071ae84573e40ff\nYou should monkey-patch the sign_out method.\n. Ready for review. /cc @jferris @gylaz @harlow\n. I don't feel strongly about the Gemfile.lock thing. Just removed it from this PR to keep it focused on Ruby support.\n. Good call. Updated the README as my understanding is that Rails 3.2 was the first to support Ruby 1.9.3. Merging so I can cut RC 8.\n. Hey @zamith. Thanks for the note. I definitely like to put all email delivery in background jobs.\nThe way to currently do it is to subclass Clearance::PasswordsController and override deliver_email. Example with Delayed Job:\nruby\nclass PasswordsController < Clearance::PasswordsController\n  def deliver_email(user)\n    ClearanceMailer.delay.change_password(user)\n  end\nend\nHow would you imagine providing it in Clearance? Something like this?\n``` ruby\nClearance.configure do |config|\n  config.deliver_email = lambda { |user| ClearanceMailer.delay.change_password(user) }\nend\nclass Clearance::PasswordsController\n  def deliver_email(user)\n    Clearance.configuration.deliver_email.call(user)\n  end\nend\n```\n. Documenting works for me. Ready for review: https://github.com/thoughtbot/clearance/pull/330\n. Erik, sorry to hear about the bumps in the road. Are you available this\nFriday to come to the thoughtbot SF office to pair with me on upgrading\nClearance to 1.0 on Rubygems? We can feed you at noon and I'm available\nfrom then until 4pm.\nOn Mon, Aug 5, 2013 at 6:55 AM, Derek Prior notifications@github.comwrote:\n\nWe tried to keep it up to date as we went. I've taken projects from\n1.0.0.RC7 through 1.0.0 without issue though each project is different\ngiven the versions of rails and the parts of clearance I end up overriding.\nWhat issues are you seeing?\nHere are the changes from RC7 to 1.0.0https://github.com/thoughtbot/clearance/compare/v1.0.0.rc7...v1.0.0and a summation of all the major\nchanges to 1.0.0https://github.com/thoughtbot/clearance/blob/master/NEWS.md\n.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/thoughtbot/clearance/issues/332#issuecomment-22107408\n.\n\n\nDan Croak\n. @sferik It doesn't look like I'll have time today but @gylaz can do it. Just spoke to him. You're in good hands there. I'll let you two coordinate from here, maybe via GitHub message? He's also his first name @ thoughtbot for email.\n. Couple of comments but otherwise looks good if Travis passes it. Would like another thoughtbot dev to take a look at it as well.\n. Typo in commit: \"sing_in\"\n. Spec for regressions?\n. Ready to squash and merge.\n. Ready to merge.\n. I think I prefer the migration approach to have less logic happening during\nruntime sign ins. Interested in others' opinions.\nOn Monday, August 19, 2013, Greg Lazarev wrote:\n\nThanks for looking at this @jferris https://github.com/jferris !\nWe do generate, and store, a remember_token for \"new\" users on creation.\nThis PR attempts to solve a situation, when there were existing users prior\nto clearance's introduction. Those users will not have a remember_token,\nthus this solution will generate one for them when they sign in.\nThe other solution would be to \"prefill\" existing users with\nremember_tokens upon installation of clearance, via a migration.\nAs for pushing the method into User, I thought about it, but that method\nreally doesn't have context besides it's usage in session.rb. I was\nworried, someone would look at generate_or_reuse_remember_token in Userand wonder whether or not it should be something for them to use. Thus, I\nopted for having it live closer to its usage. Is my thinking flawed here?\nWhat benefits does pushing it into User bring?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/thoughtbot/clearance/pull/343#issuecomment-22909268\n.\n\n\nDan Croak\n. Ah, that's nice. Very simple. Looks ready to merge to me.\n. Thanks for the note. We haven't worked on a Mongoid + Clearance project yet so haven't made it a priority. My guess is it wouldn't take too much effort if the ActiveRecord and Mongoid APIs are still pretty close. If you're working with both, I'd suggest spiking it on your project and reporting back with what you find.\n. Can you share your DatabaseCleaner configuration? Ours typically looks like this:\n``` ruby\nRSpec.configure do |config|\n  config.before(:suite) do\n    DatabaseCleaner.clean_with(:deletion)\n  end\nconfig.before(:each) do\n    DatabaseCleaner.strategy = :transaction\n  end\nconfig.before(:each, js: true) do\n    DatabaseCleaner.strategy = :deletion\n  end\nconfig.before(:each) do\n    DatabaseCleaner.start\n  end\nconfig.after(:each) do\n    DatabaseCleaner.clean\n  end\nend\n```\n. Cool. Looks pretty close to ours. Are your features using JavaScript?\nHave you tried the DatabaseCleaner configuration settings for config.before(:suite), config.before(:each), and config.before(:each, js: true) as shown in my comment?\n. Can we add a test for test+filter@example.com? I hate when sites don't allow me to use that trick, which I do a lot on our staging apps.\n. Overall, looks good. I remember considering strict mode when I added EmailValidator and can't think of the reason why I decided against it.\n. Good to squash and merge. Thanks, @derekprior.\n. clearance-i18n sounds good to me.\n. Are we moving toward RSpec expect syntax in the specs?\n. A handful of small style comments but overall, this looks great. Really important, often-requested feature. Thanks, folks.\nReady to merge at your discretion.\n. This is on purpose. Not the best user experience but is a security best practice to not reveal to bots whether certain emails exist in the system while others don't.\n. Thanks, @localhots. I've merged as c08621b1555ebd667ff2501371690ff1c6eaa401 and released 1.1.0.\n. Thanks, @sgrif. @sferik snagged this as well in 8d3958e. Closing as duplicate.\n. Thanks, @sferik. Merged.\n. @paulcsmith This is in 1.2.0.\n. @korbin Thanks for reporting this and sorry for the trouble. Thanks also for submitting a patch. It looks reasonable but needs a spec in spec/clearance/back_door_spec.rb. Could you provide an example of the POST request you were making and the error you were seeing? When I spike a spec like the following, I'm not getting an empty env['QUERY_STRING']:\n``` diff\n+  it 'accepts POSTs' do\n+    user_id = '123'\n+    user = stub('user')\n+    User.stubs(:find).with(user_id).returns(user)\n+    env = env_for_user_id(user_id, method: :post)\n+    back_door = Clearance::BackDoor.new(mock_app)\n+\n+    result = back_door.call(env)\n+\n+    env[:clearance].should have_received(:sign_in).with(user)\n+    result.should eq mock_app.call(env)\n+  end\n+\n   def env_without_user_id\n     env_for_user_id('')\n   end\n\ndef env_for_user_id(user_id)\ndef env_for_user_id(user_id, options = {})\n     clearance = stub('clearance', sign_in: true)\nRack::MockRequest.env_for(\"/?as=#{user_id}\").merge(clearance: clearance)\nRack::MockRequest.env_for(\"/?as=#{user_id}\", method: options[:method]).merge(clearance: clearance)\n   end\n``\n. Based on my understanding of Rack::Test, I believe thatas: user.idis in the POST body, not in the query string. So, the BackDoor middleware is correctly returning no params for theQUERY_STRING. The next question is: should it find theas` parameter in either the query string or the body? I think it's probably simpler to keep the interface for it restricted to the query string.\n\nThe following should work for your specs:\nruby\npost \"roles?as=#{user.id}\", { role: { name: role.name } }\nI'm going to close this as I believe everything's working as expected, but please re-open if that doesn't work and we can keep debugging together. Cheers.\n. Good to merge. Thanks.\n. Nice. Looks good.\n. Nice naming choice using .new as a factory. Ready to squash and merge at your discretion.\n. Nice. Is there any spec coverage we can add?\n. lgtm\nThe g is for \"great.\"\n. Do we need sdoc at all?\n. Or jbuilder? Could they both be removed?\n. Looks good.\n\nOn Feb 24, 2014, at 8:19 AM, Derek Prior notifications@github.com wrote:\nThese need to be present on the machine when the feature specs bundle after running rails new. An alternative would be to pass --skip-gemfile when doing rails new and then providing our own gemfile which has just the minimum we need to test with.\n\u2014\nReply to this email directly or view it on GitHub.\n. Looks good pending Travis' approval.\n. Looks good to me.... pending Travis!\n. Ready to merge and release at your discretion. Great to see this!\n. While I personally don't mind this change, think it looks better, and don't think it's risky to make the change, it does go against our high level guideline of \"Don't rewrite existing code to follow this guide.\" So, I'm curious whether others have an issue with it.\n\nIf anyone does have an issue with it, I could see restricting the change to just generated code, such as migrations, so that it matches our style in our apps.\n. >  I've worked on apps that took the AuthorizedController approach and in every instance someone forgot to use AuthorizedController where they needed it\nThis has been my experience as well. Usually we catch it during code review or soon thereafter, but it does happen regularly.\n. Hi @gabrieltong. What do your current controllers and views look like? Usually, we'd have a UsersController#edit action and app/views/users/edit.html.haml (or edit.html.erb) file. Can you share your code?\n. We always end up wanting to customize this form so it hasn't seemed worth putting in Clearance where we only provide the ability to change email address.\n. Here's another approach for discussion: https://github.com/thoughtbot/clearance/pull/419\n. When do users want to do this? I can understand the \"remove sign up\" case, but we already have that as config.\n. Here's another approach for discussion: https://github.com/thoughtbot/clearance/pull/419\n. Very nice. I didn't expect to like the configuration approach but this is clean. :sheep: it\n. Good call.\n. This isn't 100% there, but I wanted to show some code to talk it over before polishing it up.\nPros:\n- Simple. Generates the code.\n- Dead simple to override.\nCons:\n- Makes upgrades harder.\n- Existing users upgrading will need to re-install, which isn't 100% idempotent yet.\n- Existing users upgrading will need to remove the two configuration options that are no longer needed.\n. > having difficulty figuring out what problems a modular clearance would solve\nI'm not clear on the advantages of this. The one Clearance extension I'm interested in some day is clearance-two-factor that adds some nice Twilio SMS'ing. The current library's pretty small, though.\n\nthe routes become similar to the views - they're our suggestions, but you are free to do as you please\n\nI feel this way. We almost always override the views and we sometimes override the routes. The stuff that's really a \"library\" are the Clearance::Controller and Clearance::User bits. The migrations, routes, specs, and views seem like they might be better as generators.\n. Looks good.\n. > There should probably be some indication of what's going to happen outside of production.\nThis kind of reminds me of the attr_accessible days of Clearance. The hassle of breakages likely outweighs the opinionated opinion on security. Should we scale back to a warn instead of a raise in the controller?\nWould it make sense to check if config.force_ssl = false is set at Rails boot time and warn then instead of, or in addition to, each request?\n. I could see this code being included in Clearance's app/assets directory, and then a section of the README that says how to add it to your project (depends on Bourbon and Neat). I think that would work well since Clearance is a Rails engine?\n. I would think we'd want the generators to match the current Hound /\nthoughtbot style guide. More likely to be run on new projects.\nOn Fri, Jul 4, 2014 at 10:08 AM, Greg Lazarev notifications@github.com\nwrote:\n\n@georgebrock https://github.com/georgebrock It might be a good question\nto ask in our chat, or even better start a research card. I think there's\nnot a clear decision on what to do on existing projects when style guide\nchanges.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/pull/439#issuecomment-48061404.\n. Looks good to me.\n. I think the issue is one of scope. The deny_access matcher is extended into ActionController::TestCase:\n\nhttps://github.com/thoughtbot/clearance/blob/master/lib/clearance/test_unit.rb\nDoes this work?\n``` ruby\nrequire \"test_helper\"\nclass Admin::PostsControllerTest < ActionController::TestCase\n  context \"a guest user\" do\n    setup { get :index }\nshould deny_access\n\nend\nend\n```\n. I believe the reason is that there isn't conclusive evidence that minimum password lengths improve security. If a client really can't love without it, it's not hard to add to a project but doesn't seem like a good default for Clearance.\n\nOn Aug 8, 2014, at 5:36 PM, \"Jessie A. Young\" notifications@github.com wrote:\nImplemented Clearance on a client project and the client noted, with some concern, that there is no char minimum for Clearance passwords.\nIs there a reason for this? If not, I am happy to implement. Just wanted to check in before putting in the leg work. \n\u2014\nReply to this email directly or view it on GitHub.\n. :+1: \n. This one takes me back! I think I introduced those filters in Feb 2009: https://github.com/thoughtbot/clearance/commit/80a270b129a3c7b4e6948393c8e957b2af39b588\n\nOnly benefit I can think of to have the separate methods is if someone wanted to override the private methods to do something different. It's possible some apps are doing that. Not technically part of the public API https://github.com/thoughtbot/clearance#controllers so should be okay if it breaks.\nLooks good to me but @derekprior's more up to date.\n. :+1:\n. Looks good to me.\n. The goal is to explicitly set the attributes and not use mass-assignment? It seems like passing user_params to .new is unnecessary.\nHow about something like this?\ndef user_from_params\n  Clearance.configuration.user_model.new.tap do |user|\n    user.email = params[:user].try(:delete, :email)\n    user.password = params[:user].try(:delete, :password)\n  end\nend\n. Gotcha, makes sense.\n. Would it be wrong to remove Cucumber altogether? I can't remember many Cucumber-specific pull requests or issues over the years. Not sure how many people actually used them other than us.\n. Single quotes, please.\n. \"unsuccesfully\"\n. \"unsuccesfully\"\n. I think we want parens here based on current style guide?\n. \"successfully\"\n. \"successfully\"\n. Actually, I'm confused about thoughtbot's current parentheses guidelines. The LevelUp one seemed more easily applicable codebase-wide, and it would say this is correct but 20 and 22 should drop parentheses.\n. \"unsuccessfully\"\n. \"unsuccessfully\"\n. -ly suffix on these 3.\n. Can this be create since we mixed in SyntaxMethods?\n. How about just dropping them altogether?\nVisitor signs up\n  with a blank password\n  with an invalid email\n  with valid data\n. You could have separate describes for failure scenarios:\n```\nVisitor signs up\n  with valid data\nVisitor tries to sign up\n  with invalid email\n  with blank password\n``\n. I'd say remove them. Would be nice to not have to maintain anymore.\n. Willuser.password` always be correct here? I feel like it could be nil/blank in some scenarios.\nSince this is only used by the method above, what if we delete the sign_in_as method so developers aren't tempted to use it as a public interface, and define the above method like:\ndef signed_in_user\n  password = 'password'\n  user = create(:user, password: password)\n  sign_in_with user.email, password\nend\n. I've been doing some research on what the best community-provided EmailValidator is and I think I've concluded this one is the nicest:\nhttps://rubygems.org/gems/validate_as_email\nThinking about replacing the email regular expression with that as a dependency.\n. @jferris Are you thinking like a Clearance::SaltGenerator?\n. Delayed Job has a delay.mailer_name.deliver interface. Would it be better to move ::ClearanceMailer.change_password(user) into the private method? I guess we'd want to make user an instance variable, too, if we went that route.\n. Maybe remove \"Door\" in this line or change to \"BackDoor\".\n. Style: newline betweens line 34 and 35:\n\nUse newlines around multi-line blocks.\n. We overrode def self.find on two of the three main objects in our last project, Donation and School. One had a token, one had a slug. +1 would override again.\n. Agreed on keeping it background agnostic. My thought wasn't necessarily DJ-specific but whether we want to pass the mailer around the controller or the user / @user.\n\nIn that example, when we store the Delayed::Job record in the database, would we be serializing an ActionMailer object with a user ActiveRecord object referenced inside it? We have a guideline against doing that:\n\nStore IDs, not ActiveRecord objects for cleaner serialization, then re-find the ActiveRecord object in the perform method.\n\nWe also have some style guidelines:\n\nDefine a PRIORITY constant at the top of delayed job classes.\nDefine two public methods: self.enqueue and perform.\nPut delayed job classes in app/jobs.\n\nSo a likely implementation for a thoughtbot app might be:\n``` ruby\napp/controllers/passwords_controller.rb\nclass PasswordsController < Clearance::PasswordsController\n  private\ndef deliver_email\n    ResetPasswordJob.enqueue(@user)\n  end\nend\napp/jobs/reset_password_job.rb\nclass ResetPasswordJob < Struct.new(:user_id)\n  PRIORITY = 1\ndef self.enqueue(user)\n    Delayed::Job.enqueue(new(user.id), priority: PRIORITY)\n  end\ndef perform\n    ClearanceMailer.change_password(user).deliver\n  end\nprivate\ndef user\n    User.find(user_id)\n  end\nend\n```\nThose looking for something simpler might do:\n``` ruby\napp/controllers/passwords_controller.rb\nclass PasswordsController < Clearance::PasswordsController\n  private\ndef deliver_email\n    ClearanceMailer.delay.change_password(user)\n  end\nend\n```\nI'm curious now about how the delay method in Delayed::Job serializes the mailer and its parameters.\n. @jferris The queue feature has been removed from the master branch of Rails. My understanding is it will not be in Rails 4.0.\nhttps://twitter.com/dhh/status/281421220417781760\nhttps://github.com/rails/rails/blob/master/actionmailer/CHANGELOG.md\n. I like the opening /  closing rename and symmetry. Please order keys alphabetically.\n. @jferris Good idea. Done in 70c3cb2. Ready for re-review.\n. @calebthompson If we make them private methods, we get errors like the following:\nprivate method `signed_in?' called for #<ForgeriesController:0x007f8338c2dc48>\nprivate method `current_user=' called for #<Clearance::SessionsController:0x007f833c8bd848>\n. I'm not sure I know what you mean by a helper module. Are you referring to the helper method?\nhttp://api.rubyonrails.org/classes/AbstractController/Helpers/ClassMethods.html#method-i-helper\nIf the goal is to make current_user, signed_in?, and signed_out? available to view templates, that's handled by line 6. The other methods are intended to be used by controllers.\n. Okay, cool. No worries. Thanks for the comments. Got me wondering whether this stuff was still necessary on current versions of Rails and refreshed my memory on how hide_action and module visibility worked.\n. Single quotes.\n. @gylaz I believe we have to check it in based on how Bundler and Appraisal work. /cc @jferris\n. Gotcha. So git add --patch it away?\n. @joshuaclayton I think we care that they're relatively up-to-date. I just pushed fcc6785 to peg them with a pessimistic operator against two digits of precision. Let me know what you think.\n. Good call. Done in 41ba797.\n. Good call. Done in 41ba797.\n. I ran into this a few hours ago as well while working on Clearance on a plane ride. The reasons are discussed in https://github.com/thoughtbot/shoulda-matchers/pull/262. I don't fully understand it, either, but I adjusted for it by require 'rspec/core' in spec/spec_helper.rb in ef54629.\n. Yeah, those are starting to bug me, too.\n. There was an issue or I thought there was an issue before I switched over to working on Shoulda Matchers the other day. I agree and reverted this change earlier in a local commit, which I've now pushed: ef54629.\n. Actually, that doesn't seem to be solving it on Travis, although it works locally. Pegging the Shoulda Matchers gem to 1.5.1 got a passing build:\nhttps://travis-ci.org/thoughtbot/clearance/builds/5647786\nThat conflicts with the reports in https://github.com/thoughtbot/shoulda-matchers/issues/259, though. \n. I think I now better understand what you and https://github.com/thoughtbot/shoulda-matchers/issues/259 are saying. Going with the flow and adding RSpec as an explicit dependency.\n. I've seen libraries like client_side_validations only support only minor\nrevision in the past (Rails 3.1 while Rails 3.2 is the current stable).\nMaybe we go '~> 3.1'?\nOn Friday, March 22, 2013, Derek Prior wrote:\n\nIn Appraisals:\n\nelse\n-  rails_versions = ['3.0.20', '3.1.11', '3.2.12']\n-  name, version = 'rails.3.support', '~> 3.0'\n\nRails breaks SemVer enough that I could envision this being a problem.\nDon't we need to explicitly test 3.0.x, 3.1.x, and 3.2.x?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/thoughtbot/clearance/pull/278/files#r3490197\n.\n. If we do provide a redirect config hook, I don't think we should override this method. def redirect_to_root is pretty clear to me.\n. Are all the features using this tag? Thoughts on removing the tag to apply the Around block to all features?\n. It's a duplicate of the line from the install's README:\n\nhttps://github.com/thoughtbot/clearance/blob/master/lib/generators/clearance/install/templates/README#L8-L9\n. Do we want to maintain --local?\n. Ruby 1.9 hash syntax.\n. Is there a way to write this spec with state rather than stub? Create a user record with encrypted password? It seems like just about any implementation of User#authenticate would pass it?\n. Will this mean that I can sign into as an user with a blank password if I know their email?\n. Should eager_load be moved into the rails4? block below?\nShould cache_classes and encoding be everything not rails4?\n. Does this test against 8 combinations on Travis? Can we cut this down a bit? Maybe like:\nruby\nif RUBY_VERSION >= '1.9.3'\n  rails_versions = ['~> 3.2.13', '~> 4.0.0']\nelse\n  rails_versions = ['~> 3.0.20', '~> 3.1.12']\nelse\nI doubt there's much difference between Ruby 1.9.2 and 1.9.3 for those Rails 3 versions.\n. bin is now not ignored but no bin files were committed. Was this necessary?\n. No objections.\n. I don't feel strongly.\n. Yup.\n. Maybe break each of these dots onto their own lines or extract another private method for it like user_from_remember_token.\n. This will mean in suites where users existed before Clearance, the developer will need to backfill remember_tokens. Probably worth creating an example migration in the wiki so people know how to do that.\n. Yup. You a syntastic user?\n. Maybe we simplify this further?\n`````\nTo test controller actions that are protected bybefore_filter :authorize`,\nrequire Clearance's test helpers and matchers in your test suite.\nFor example, in spec/spec_helper.rb:\nruby\nrequire 'rspec/rails'\nrequire 'clearance/testing'\n`````\n. I think we can drop this note since we're including it in the code example. Showing rather than telling.\n. The convention in this file is to name the file in the lead-in text rather than as a comment in the code. Examples: config/routes.rb, Gemfile, config/initializers/clearance.rb.\n. What was the actual error you were seeing?NoMethodError: sign_in?\n. Thesign_in_as` is never defined because the matchers and helpers are never included in RSpec because we check that RSpec is defined before automatically configuring:\nhttps://github.com/thoughtbot/clearance/blob/master/lib/clearance/testing.rb#L13\nWe could do what other libraries do and document that the developer manually configures, removing the automatic configuration from Clearance's testing.rb file:\nruby\nRSpec.configure do |config|\n  config.include Clearance::Testing::Matchers\n  config.include Clearance::Testing::Helpers, type: :controller\nend\nLet me know what you think about that idea. The advantage of the RSpec.configure approach is it reduces the chance of this problem. The advantage of the require approach is better encapsulation, allowing us to change that code easier.\nIf you want to stick with the require, I'm thinking we should solve this problem for Test::Unit users, too:\n``````\nrequire Clearance's test helpers and matchers after you've loaded your test framework.\nFor example, in test/test_helper.rb for Test::Unit suites:\nruby\nrequire 'rails/test_help'\nrequire 'clearance/testing'\nOr, in spec/spec_helper.rb for RSpec suites:\nruby\nrequire 'rspec/rails'\nrequire 'clearance/testing'\n``````\nI don't like the feel of the \"NOTE\" line. It uses all caps and bolding, drawing attention to an edge case that should be handled by short, unsensational, clear instructions and visual code examples.\nFor my own understanding, can you say more about where you were previously placing the require 'clearance/testing' line and why you decided to place it where you did?\n. I'd love to find a code-oriented solution that obviates this problem, which\nis one reason why I've been OCD'ing a bit on this little copy change.\nHaven't been able to think of one yet.\nWould the separate files help with load order? If we required an RSpec-only\nfile that doesn't check for RSpec before loading RSpec, wouldn't we be\ntrading NoMethodError for uninitialized constant RSpec?\nOn Wednesday, August 21, 2013, Joe Ferris wrote:\n\nIn README.md:\n\n@@ -386,13 +386,17 @@ Testing authorized controller actions\n\nTo test controller actions that are protected by before_filter :authorize,\n-include Clearance's test helpers and matchers in spec/support/clearance.rb or\n-test/test_helper.rb:\n+require Clearance's test helpers and matchers in your test suite. For example,\n+in spec/spec_helper.rb:\n\nWhat about having separate files to require for rspec and test unit? Then\nyou don't need to check if rspec is defined, and order isn't important.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/thoughtbot/clearance/pull/344/files#r5910785\n.\n\n\nDan Croak\n. Ah ha! Yes, I like that approach the best by far.\nOn Thursday, August 22, 2013, Joe Ferris wrote:\n\nIn README.md:\n\n@@ -386,13 +386,17 @@ Testing authorized controller actions\n\nTo test controller actions that are protected by before_filter :authorize,\n-include Clearance's test helpers and matchers in spec/support/clearance.rb or\n-test/test_helper.rb:\n+require Clearance's test helpers and matchers in your test suite. For example,\n+in spec/spec_helper.rb:\n\nIf you have an rspec-specific file, it can require what it needs (probably\njust require 'rspec').\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/thoughtbot/clearance/pull/344/files#r5924927\n.\n\n\nDan Croak\n. I'm not super-familiar with the current Test::Unit / Minitest distinction. I see require 'test/unit' in the clearance/minitest file. Can you explain here and/or in the commit message?\n. I think I'm fine with this, but just so we're on the same page: the minitest version is never tested and it would be a pain to set up for testing?\n. :sort\n. > Avoid conditional modifiers\nhttps://github.com/thoughtbot/guides/tree/master/style#ruby\n. :sort\n. Newline\n. I'm not totally convinced we need to pull in ActiveRecord objects here and still prefer a SQL approach like:\n``` ruby\nusers = select_all 'SELECT id FROM users where remember_token IS NULL'\nusers.each do |user|\n  update <<-SQL\n    UPDATE users\n    SET remember_token='#{Clearance::Tokens.generate}'\n    WHERE id=#{user['id']]}\n  SQL\nend\n```\nWe also create:\nruby\nmodule Clearance\n  class Tokens\n    def self.generate\n      SecureRandom.hex(20).encode('UTF-8')\n    end\n  end\nend\nAnd refactor Clearance::User to use Clearance::Tokens.generate?\n``` ruby\ndef generate_confirmation_token\n  self.confirmation_token = Clearance::Tokens.generate\nend\ndef generate_remember_token\n  self.remember_token = Clearance::Tokens.generate\nend\n```\nI think something like that addresses @derekprior's concerns while also being consistent with our practices. It is maybe a bit more obvious to the code reader what's happening in their database. I see we're using find_each batching in the current PR implementation, but I generally like the speed of just pulling out the integers. For a library, it might be nice to assume the users table could be very large for some Clearance-using developers.\nInterested to hear folks' thoughts on whether that's the right kind of coupling between collaborators. user.reset_remember_token! is the only existing public interface at the moment.\n. > I've always interpreted that practice to mean to not depend on external objects in a migration.\nYeah, that's the main reason.\n\nClearance::Tokens could go away or it could change such that type in use here is not sufficient for what we're storing. I think making it a public, first class object in the system makes that less likely to be the case though.\n\nAnother idea might be to promote generate_confirmation_token and generate_remember_token to public class methods on Clearance::User and use them in user.reset_remember_token! and other places consistently, including the migration.\nSounds like you have some ideas for tomorrow and whatever you want to go with is fine with me.\n. Typo: clearance/rspec\n. Should we have single quotes around the id? I think the query will still work with Rails' default auto-incrementing integers across different databases (standard SQL) but has the advantage of also working on user records where people have replaced the auto-incrementing integers with a string-based UUID scheme.\n. \"Disable Clearance routes by setting config.routes = false.\"\n. Looks like the rake task is repeated in bin/setup and the docs. Maybe remove it from setup and keep it in the docs?\n. Some history on the forbid / forbidden words: https://robots.thoughtbot.com/forbidden-kisses-http-fluency-in-clearance\nUsed to be a 403 when these things happened.\n. Makes sense.\n. ",
    "marcelgoerner": "Hi Dan,\nadding all the I18n Wrapper with a \"default\" key need no further configuration. If you don't add the default key then you must create a \"en\" locale file for clearance.\nMarcel\n. 1. little typo\n   http://github.com/marcelgoerner/clearance/commit/c9cdc12580224b7a06a169c00a17baccd51256e6\n2. I suggest to use :scope in all messages this would be much more flexible. For example in the password controller I want flash: \"Changed password and signed in.\" not only \"Signed in\".\n   http://github.com/marcelgoerner/clearance/commit/e185b1692d93a024544b0778271661b9969e6fbe\n. ",
    "eugenebolshakov": "I've created a test app to test i18n and it works well. But there're a couple of things:\n- I confirm the typo noticed by Marcel. \n- The \"Bad Email or Password\" message in the sessions controller should also be translated. \n- A possible way to test i18n is to actually put a en.yml file to the app in the test/rails_root dir so that values from the file (instead of default ones) would be used. If it works for English, then it works for other locales. \nI've fixed the above in my fork http://github.com/eugenebolshakov/clearance/tree/strings_in_yml \nOtherwise, great job! Thanks!\n. ",
    "joshuaclayton": "For reference, the correct URL for the monkey patch is here: http://github.com/joshuaclayton/clearance/commit/14676861a24dedee4313f345bb731bd517b55a16\n. Dan,\nFair enough about the patch.  As far as I could tell, there weren't any tests written for it (or, it there were, none that failed even after changing the file name and removing the route hack).\nThe issue is a stack level too deep error that's triggered when resource_controller and clearance are used in the same project and anything is run with rake (due to it loading the environment).  Running the app doesn't trigger the error.\nI've dug through Rails source, Clearance source, and ResourceController source trying to figure out how this is coming up, and I've gotten nowhere.  Removing include Clearance::Authentication and running rake tasks works, and removing the RouteSet hack works as well (but breaks overriding of routes within an app's config/routes.rb.)\nIdeas?\n. Dan,\nTurns out sticking that chunk of routing code inside of a separate file and requiring it works just fine (tried it with my own engine, Watchtower - http://github.com/joshuaclayton/watchtower/blob/2af563631380d5be2348b494194a297411c022aa/lib/watchtower/routes.rb )\nHaven't narrowed down the issue yet, but I did send James Golick (author of RC) a message asking him if he had any ideas either.\nHere are two commits that I've made on a forked copy that of Clearance that resolve the issue - http://github.com/joshuaclayton/clearance/commit/e3e4b1fd91338c135519edb5de78c1e892d0cd65 and http://github.com/joshuaclayton/clearance/commit/87879752d7c7631a89e89fbf33149f76c61fdada\n. @croaky that step definition comes from Aruba. Is there a flag on the rails executable that enables the asset pipeline that we could use?\n. what about removing sass-rails from the appraisal? wouldn't rails handle its deps explicitly? i'm just wondering what things we can remove before going down a rabbit-hole. I understand that rails should have the pipeline on by default, but sass-rails is saying otherwise. I'm not sure who to believe.\n. http://www.youtube.com/watch?v=ahoidh-VmSw\n. There's been some recent discussion at Thoughtbot and we've decided to keep the Gemfile.lock file checked in to our gem repositories. We continue to use the *.gemspec to manage the dependencies themselves and use the gemspec method within Gemfile to ensure dependencies are declared in bundler correctly, but the Gemfile.lock file doesn't affect users of the gem, only developers.\n. You mean 1.8?\n. Looks like it based on #211, whew!\n. Dan,\nThis looks pretty nice. Initial concerns were that it calls a private method to interact with Treetop (not horribly concerned, just hoping that the mail gem follows SemVer since his req in the gemspec is ~> 2) and that it hasn't been updated in more than six months (which is also somewhat bogus because it may be working just fine - there are no PRs or issues).\nOut of curiosity, what other gems were you evaluating and what made them sub-par?\n. :+1:\n. This first put should probably be removed\n. Ah, alright. So the confirmation token gets set to nil when updating the password, thus making it vulnerable to nil being passed in to the subsequent update password request. Makes sense!\n. what about\nruby\n@block = block || lambda {|user| true }\nThat would allow you to change current_user_matches_block? to\nruby\ndef current_user_matches_block?\n  @block.call(current_user)\nend\n. or with the stabby lambda:\nruby\n@block = block || ->(user) { true }\neven nicer!\n. Because, you know, using the null object pattern for blocks is cool.\n. whitespace\n. there should probably be an additional test to make sure that the block returning false actually makes matches? return false - doesn't look like there's a test for that in here.\n. what about current_user_fulfills_additional_requirements?? It sounds weird because you're specifying implementation in the method name where you really want to describe behavior. So, something along the lines of requirements or prerequisites or something would probably be good\n. Is this still an RC for 1.0.0? This seems like it could be a huge breaking change. I understand that pre-1.0.0 is susceptible to anything changing at any time, but Clearance has been around for years and it's got a big enough userbase (I'd think/hope) that this would screw a lot of people over. How about grabbing values from either (while preferring params[:password_reset][:password]) and introducing a deprecation warning if it finds a value in params[:user][:password]?\n. is this used anywhere?\n. Do we not care what each of these gem's version requirements are anymore? Could I use this against shoulda-matchers 1.0 (instead of 1.2.0) and still have a passing suite? What about factory_girl_rails 1.7.0? As far as I can tell, both of these have no dependencies on other dev dependencies and could therefore pass at a significantly lower gem version; is this correct?\n. :thumbsup:\n. @gylaz it looks like it was just reordered alphabetically. We'll want to reconsider this when Rails 4 drops, since bin/rails, bin/rake, and bin/bundle will need to be included in the repo for it to be deployed and running on Heroku (as of right now).\n. \ud83d\udc4d addressed in 5ed663ecc0bafd3e7e53acf7033d254f78e21177. ",
    "andhapp": "A completed scenario should result in success and any other use case variations (like errors and so on) in failure.\n. This should only be the case when a username sort of unique field is used to uniquely identify the users as several apps use e-mail to uniquely identify users. Thoughts?\n. Created a patch for this. Here it is: http://github.com/andhapp/clearance/blob/add_features/refactor-gitHub-issue-27.diff\nPlease review.\n. That's fine. You have the final word. \nBut these erbs are part of the clearance engine. Absence of flash hashes would not allow the cucumber features to pass. If I am not mistaken, Clearance is 'out of the box' rails authentication and as a user I should't have to do anything to make the features pass. Once I have installed the plugin it should all work or may be I am doing something fundamentally wrong. Please enlighten.\n. Arrite. Thanks.\n. I will rebase my haml branch and post patch location. I might look into upgrading the generators for Rails3 whilst I am at it. \n. Here's my attempt:\nhttp://github.com/andhapp/clearance/tree/add_haml\nPlease inspect and comment.\n. @barrettclark - Thanks for your comments. I did it a while ago but it has still not been merged into the master. I tried to do it in the best way I could and I am pleased you found it useful.\n. Here's my attempt:\nhttp://github.com/andhapp/clearance/tree/rails3-generators\nThe new generators now live inside the \"lib\" folder. To test, if the new generators have been picked up run the following:\n\nscript/generate\n\nAlso, the usage is as below:\n\nscript/generate clearance:clearance\nscript/generate clearance:features\nscript/generate clearance:views\n\nPlease have a look and comment. I will be improving them slightly as I learn more about it.\n. @roamy - Are you using clearance's rails3 branch in your application? How are you using the generators?\n. @roamy - Well, they should work but things have changed in the generator code and how you invoke them. Now, instead of running:\n\nscript/generate #to see the list of all the generators \n\nyou have to do:\n\nscript/rails generate\n\nSo, I am guessing it needs another look. I did them back in January when Rails3 was a moving target and it is quite possible that they are broken. \nHowever, clearance itself is not Rails3 compatible yet, so you won't be able to get much far but watch this space for updates.\n. Yeah, sure. Gimme a shout when you are done.\n. @ilikepi - IMHO, any enhancements you make should be least intrusive. This is what I will do, If I were you: \nhttp://gist.github.com/332875\nIt might have issues and its open to discussion.\n. Please carefully consider my suggestion before implementing it. I did it very quickly without really thinking about it a lot.\n. @dan - why did you abandon your work? This seems like a possible use-case. A user can move to Clearance mid-way in the project and this would create a problem. I am not sure about the best way to approach this problem but it is worth pondering upon.\n. Yeah, exactly. I know the API changed from 0.8 to 0.9 massively. I will have a go at it. WIll give you a pointer to my branch.\n. @josephholsten - You are absolutely right! I only meant it for development purpose. \n. Pointer to my branch. Got green on all the tests. Please give comments.\nhttp://github.com/andhapp/clearance/tree/add_bundler\n. @dan - Yeah mocha stubs is used in only one place. I will find an alternate way to do the same and post here.\n. @rnewman - mocha provides a stubs method so anyone who has used mocha knows about it.\n. @dan - I have removed mocha's dependency.\n. Regarding this particular issue, I think something like the session expiration time should live in the configuration file just like HOST. This would mean minimal changes in the library and for the users. What do you say?\n. How about adding the remember_me code in a different module which only gets included if someone has specified it via the config file. The expires_at time can also go in the same config file. Just some food for thought not sure how will this work out exactly but I guess something like:\n\nmodule Clearance\n module RememberMe\n   def self.included(model)\n       # code goes here\n   end\n end\nend\n\nConfig can be something like:\n\nClearance.configure do |config|\n   config.mailer_sender = \"donotreply@noreply.com\"\n   config.remember_me = true\nend\n\nI would like to get Dan's opinion on this, just to see if this is something acceptable (by their standards) and would get merged into Clearance or not.\n. Would this not work? \n\nlambda { params[:session][:remember_me] ? 1.week.from_now : nil }\n\nThis would be called from within lib/authentication.rb. I've just used the code in the first comment.\n. @Dan - I was actually under the impression that the lambda is going to be introduced to support remember_me feature, but that's not the case.\n@rnewman57 - This does not matter now but any request that hits Clearance::SessionsController will have all the methods of ApplicationController since it inherits from it. ApplicationController includes the module Clearance::Authentication so the lambda will be called in the context of an ApplicationController which will have access to params. Please correct me if this seems incorrect. Thanks. You can have a look at lib/authentication.rb as it uses params[:return_to] in one of the methods. \n. @rnewman57 - Hello, it has been a while...what do we gain from the changes that you have made?\n. I will find time to put something together and post it here.\n. @masterkain - Is there a link to the repository? I would like to download it and have a go at it.\n. Thanks. I had an old version of thoughtbot-clearance installed and  I had to uninstall that and 0.8.8 and reinstall 0.8.8 again. Now it seems okay. Never thought that would be a problem but I realise now why that was going wrong. Please close this issue.\n. Try this:\n\n\n      cookies[:remember_token] = {\n        :value   => user.remember_token,\n        :expires => 1.year.from_now.utc,\n        :domain => \".#{request.host}\"\n      }\n\n\nDefine a method called sign_in, just like in authentication.rb and use the code above in it. This will overwrite clearance's sign_in method. \n. Try the code mentioned here:http://github.com/thoughtbot/clearance/issues/#issue/89/comment/371819\n. Try the code mentioned here:\nhttp://github.com/thoughtbot/clearance/issues/#issue/89/comment/371819\n. script/rails generate is for Rails 3.\n. That makes sense. Just to clarify with these changes there will be two methods authenticate and authorize...is that correct?\n. With this approach the application would have to somehow figure out if the user is signing in for the first time after roll-out. Don't want to brcypt the password over again. Correct?\nSign-in action is not the correct place for password-reset. It seems like a code smell to me which has been pointed out under disadvantages above. \n. Thanks for the explanation. I would not prefer a string match every time someone signs in but with this approach the switch over to a new encryption scheme is transparent to the user. There is a trade-off but seems like the best approach.\n. This looks good to me. \nAlthough, I would rename Clearance::PasswordStrategies::BCrypt to Clearance::PasswordStrategy::BCrypt. \n. @croaky: This sounds good and is transparent to the user.\n. ",
    "qrush": "I believe the fix for this was included in 0.6.3. Could you upgrade to that or even the latest release and see if it still happens?\n. Closing this out, clearance doesn't handle confirmation emails anymore.\n. Fixed it, thanks!\n. Fixed a while back.\n. Fixed, thanks!\n. Merged, thanks!\n. Sorry about the delay here, there's not really support for that. Feel free to submit a patch for it :) Closing this in the meantime, open up a pull request if you get around to it.\n. This doesn't seem like a bug with clearance. Closing it out, we have a mailing list for discussion otherwise.\n. Closing this out.\n. This isn't an error with clearance, it's an error in your app. You have to install that plugin!\n. ",
    "vddgil": "OK, thanks a lot, it's working now !\n. ",
    "vita": "I tried add i18n support for views. Look to http://github.com/vita/clearance/tree/master\n. ",
    "lmarburger": "What version of Rails is this running in?\nI spent some time setting up a test project to demonstrate Clearance and went through the start-to-finish process multiple times without having that feature fail on me.\n. Yeah. Rails 2.3.2, Clearance 0.6.6, and Cucumber 0.3.7.\n. ",
    "bobbywilson0": "thanks for the feedback, were you on rails 2.3.2? Also, this should work out of the box right? I don't need any sort of special settings with actionmailer?\n. ",
    "eostrom": "Maybe I'm confused, but my patch doesn't seem to have been applied, at least not to http//github.com/thoughtbot/clearance ... generators/clearance/templates/migrations/update_users.rb still doesn't remove indexes in the downward migration.\n. ",
    "rnewman57": "This does not appear to be fixed in version 0.8.6 .   The generated down migration just says\ndef self.down\n    change_table(:users) do |t|\n      t.remove :encrypted_password,:salt,:confirmation_token,:remember_token,:email_confirmed\n    end\n  end\nwith no calls to remove_index.\n. I actually would have found this useful.  My app layout has a login link if there is no current users, and a logout link if there is.    I wanted the login form to return to the calling page if login is successful, and the logout link to redirect to the current page as well.   So I ended up doing this:\nclass SessionsController < Clearance::SessionsController\n```\nif login or logout has a :return_to parameter, save it\nso that user will return to her previous page before logging in or out\nbefore_filter do |controller| \n  return_to = controller.params[:return_to]\n  controller.session[:return_to] = return_to unless return_to.blank?\nend\nChange the redirect behavior of session destroy (logout)\ndef url_after_destroy\n  session[:return_to] || sign_in_url\nend\n```\nend\n. I committed a fix to this to my fork at\nhttp://github.com/rnewman57/clearance/commit/57bba85dc63ba7f0ae7a138743ab228afb994ac6\n. A new commit that incorporates this fix:\nhttp://github.com/rnewman57/clearance/commit/a4d19ec27479887f978a429130fd10bc74a52268\n. Applying this diff to the current version of Clearance will fix and test this issue (and also #78) :\nhttp://gist.github.com/390853\n. I believe the bug was introduced here, 3 days ago:\nhttp://github.com/thoughtbot/clearance/commit/61bed1155c8fe3c610fb784a21050331b29f0427\n. My application originally had a users table but no authentication at all, and then I added Clearance to it. So Clearance gave me a migration that added these two columns (and others), but did not initialize them to non-nil values in my already existing user records.\nuser.send(:initialize_salt) will not work because new_record? will always return false.   Your proposed change above would fix this, so I think it's a good idea.\n. Thanks.  (Do you think the doc should also tell the customizer to define his own sign_in and sign_out routes?)\n. I am not using Rails 3, but when I first forked Clearance and tried to run the tests, I got an unexplained error about Time.stubs being an undefined method.   Eventually someone on an IRC channel told me that this means I need the 'mocha' gem.  That worked, but I don't understand how they determined this.\nTime.stubs is used in the should \"not generate the same remember token for users with the same password at the same time\" test in test/models/user_test.rb .\n. I committed a fix to this to my fork at\nhttp://github.com/rnewman57/clearance/commit/57bba85dc63ba7f0ae7a138743ab228afb994ac6\n. A new commit that incorporates this fix:\nhttp://github.com/rnewman57/clearance/commit/a4d19ec27479887f978a429130fd10bc74a52268\n. My new commit that fixes this without a hidden form field is here:\nhttp://github.com/rnewman57/clearance/commit/a4d19ec27479887f978a429130fd10bc74a52268\nThis commit also incorporates my previous fixes for issues #77 and #23 .\n. Applying this diff to the current version of Clearance will fix and test this issue (and also #23) :\nhttp://gist.github.com/390853\n. I wanted to have a 'Remember me' checkbox as is commonly found on sites such as Facebook and LiveJournal, and which Clearance used to support until September.  This hook seemed like the easiest way to accomplish that without changing Clearance's current default behavior.\nremember_token_expires_at is a fine name for the hook.\n(Why is a ternery operator a bad thing to use?  That was only in my subclassing example, not in the code I proposed for Clearance itself.)\n. I committed a fix for this at\nhttp://github.com/rnewman57/clearance/commit/47595fd610f3a010cf29fbc1326e7c744f90cb7b\nI called the new hook remember_token_expires_at, as you suggested above.\nThe code change to Clearance itself was simple.   Most of this commit consists of new testing code, including a should_set_cookie Shoulda macro which possibly should be added to the Shoulda project (see http://github.com/thoughtbot/shoulda/issues/86 ).\nRails does not make it easy to test that the expiration date of a cookie is correctly set to what you want.\nThis commit also includes my previous fixes to issues #78, #77, and #23 .\n. but declaring the expiration time as a configuration constant would make it impossible to implement the 'remember me' checkbox.  \nThis is why I implemented the expiration time as a hook in my commit above, so that the application could decide at runtime what expiration time to use (including nil for a session-only cookie).\n. The fix that I already committed above (see March 6 comment) seems a lot simpler than this.\n. Thanks.  I'm happy to see static configuration added, as long as that isn't in place of being able to dynamically select the expiration at runtime, which was the original motivation behind my work here.  I don't see a way to do the dynamic selection in your commit.\nPerhaps we can talk more about this tomorrow, either on IRC or in person?  (I'm local to you.)\n. Instead of putting a Time value such as 3.days.from_now in the configuration, how about putting a duration (e.g. 3.days) instead?    That avoids the problem you mention three comments above this one.\n. Thanks.  But this issue should not be 'closed' until we add the ability to override as well (so that cookie duration can be chosen at runtime and not just statically configured)\n. OK, how does this sound?\nClearance.configuration.cookie_duration is one of:\n- not set => defaults to 1.year (which is current Clearance behavior)\n- a duration in seconds\n- nil, which means a session cookie that expires when the browser exits\n- a lambda (Proc), which takes the SessionsController as an argument and returns either a duration in seconds or nil\nThe lambda needs the SessionsController argument, or else it doesn't have enough context to implement logic such as the 'remember me' checkbox.\n. that works IF the lambda is called in a way so that 'self' is set to the SessionsController .\n. What will the value of 'self' be when this lambda is called?    How will the lambda get access to the SessionController's instance variables or methods (such as 'params') ?\n. But if the lambda can't get to the SessionController to call methods on it, then the lambda doesn't get you anything that you don't get from a static configuration variable.\n. I think that would be true only if you change \n:expires => Clearance.configuration.cookie_expiration.call\nto\n:expires => self.instance_eval(&Clearance.configuration.cookie_expiration)\nin the sign_in method of lib/clearance/authentication.rb \n. I suggest adding at least two more tests:\nset Clearance.configuration.cookie_expiration to a non-default value such as \nlambda {1.week.from_now.utc} and then check should_set_cookie(\"remember_token\", \"old-token\", 1.week.from_now)\nset Clearance.configuration.cookie_expiration to lambda {nil} and then check should_set_cookie(\"remember_token\", \"old-token\", nil)\n. Here are the changes I made to test/controllers/sessions_controller_test.rb to test this new feature:\nhttp://gist.github.com/362511\n. I changed the Clearance.configuration.cookie_expiration lambda call to use instance_eval, as I described on April 11 (3 comments above this comment).  \nI also added a test to ensure that the lambda is now being called in a context where 'self' is the current controller (and has access to 'params').    Both changes are in this diff file:\nhttp://gist.github.com/390230\n. See all the comments above from April 10 -- it allows, for instance,\nClearance.configuration.cookie_expiration  = lambda { params[:session][:remember_me] ? 1.week.from_now : nil }\nto work.\n. What should happen now if a user does this?\n. You need script/generate clearance in there somewhere too.   Is this the same issue as #57?\nEven if you do script/generate cucumber --webrat, 6 of the scenarios will fail if you haven't mapped the root route '/' to go somewhere.\n. Did you edit config/environment.rb to add this line?\nconfig.gem \"clearance\"\n(I don't actually see this step in the README, but it's necessary.)\n. Unfortunately, I think that wiki page is out of date.    Instead of this in config/environment.rb :\nconfig.gem \"thoughtbot-clearance\", \n    :lib     => 'clearance', \n    :source  => 'http://gems.github.com', \n    :version => '0.8.8'\ncan you try changing  to this?\nconfig.gem \"clearance\"\n. Could this be the same problem described here, i.e. not putting your own routes before Clearance's in routes.rb ?\nhttp://groups.google.com/group/thoughtbot-clearance/browse_thread/thread/0bba55785178776b/479ca59b12107d3b?#479ca59b12107d3b\n. How exactly does script/generate find the generator code to call, and what would cause it to call an old version of the gem instead of the current one?   There was a recent bug report on the clearance mailing list with a similar cause, and I think I've seen others here as well.\n. (This comment formerly said: I don't see the README change in the current commit .)\nNever mind, here it is:\nhttp://github.com/thoughtbot/clearance/commit/5843a081f7e13e9c8defc06c1e7da9276db6f3bc\n. In the future, would it make sense for the generator to add these lines automatically to the generated config/environments/cucumber.rb ?\n. Do you have any old versions of clearance (possibly called thoughtbot-clearance) around?    There seem to be a lot of problems reported lately that involve script/generate somehow running code from the wrong version of the clearance gem.\nWhen I do this:\nrails foo\n   cd foo\n   script/generate clearance\nI see \n     Clearance::Routes.draw(map)\nas the second line in config/routes.rb \n. Do you also have an installed gem called thoughtbot-clearance (which is what Clearance used to be called), and if so, did you uninstall that as well?\n. What exactly is not working the way you expect?\n. That's strange, I've never had to do that.    Do you have an app/views/layouts/application.html.erb file?   If so, Clearance should use it just like any other view does.\n. ",
    "jsanders": "sorry I totally messed up that backtrace - I don't really trust trying to do it again so here's the gist of it - \n/Library/Ruby/Gems/1.8/gems/thoughtbot-clearance-0.6.6/lib/clearance/extensions/rescue.rb:1: undefined method `rescue_responses' for ActionController::Base:Class (NoMethodError)\n``\n    from /Library/Ruby/Site/1.8/rubygems/custom_require.rb:31:ingem_original_require'\nfrom /Library/Ruby/Site/1.8/rubygems/custom_require.rb:31:in `require'\n\n```\n. Cool, do you know what the highest version of rails that works is?\n. Well that's pretty recent, thanks :)\n. ",
    "coderifous": "Ran into this today, running rails 3.0.pre.  I believe it has to do with this change in rails:\nrails/rails@11af089cee0a0e744e267d32becfe2c66a586d31\n. +1 Indeed.  Please... won't someone please pull this man's branch?\n. ",
    "phaza": "I fixed it by changing rescue.rb to:\nif defined?(ActionController::Base)\n  ActionDispatch::ShowExceptions.rescue_responses.update('ActionController::Forbidden' => :forbidden)\nend\n. ",
    "yaychris": "Okay, looks like the problem is with the Clearance RouteSet hack. The router uses alias_method_chain around ActiveSupport::Inflector.inflections to reload the routes anytime #inflections is called, and I'm guessing when the reload occurs the routes are loaded in the default order. I haven't yet figured out where/why that happens though.\nI'll continue to investigate.\nChris\n. This patch seems to fix the issue for me:\n--- a/lib/clearance/extensions/routes.rb\n+++ b/lib/clearance/extensions/routes.rb\n@@ -2,9 +2,10 @@ class ActionController::Routing::RouteSet\n   def load_routes_with_clearance!\n     lib_path = File.dirname(__FILE__)\n     clearance_routes = File.join(lib_path, *%w[.. .. .. config clearance_routes.rb])\n-    unless configuration_files.include?(clearance_routes)\n-      add_configuration_file(clearance_routes)\n-    end\n+\n+    configuration_files.delete(clearance_routes)\n+    add_configuration_file(clearance_routes)\n+\n     load_routes_without_clearance!\n   end\nI still haven't figured out where this happens, but the order in which configuration_files is iterated over changes when reload! is called. This patch deletes the clearance_routes.rb file and adds it to the configuration_files array each time load_routes! is called, ensuring it's always at the end.\nA hack so closely tied to Rails internals should really have some tests. I tried to write one for this issue but wasn't able to get it working. Maybe someone with more Router experience can tackle that?\nChris\n. ",
    "Merovex": "@yaychris\nI ran into the same problem you cite. I have an inflection the app cannot live without. I implemented your patch and the system now works. Thank you for posting your solution.\nI ask the Clearance people to implement this patch in the future. Thanks.\n. ",
    "rsanheim": "I also saw this issue in a particularly nasty interaction between Clearance and ActiveMerchant (which adds a couple Inflections under the covers).\n. ",
    "pjammer": "rsanheim!!!! oh my god, your comments is exactly what is happening to me right now.  It's driving me nuts.  I'm going to try that patch. i'll update too.\nI tried this patch and it didn't work with AM and Clearance.  try again in the morning.\n. update: this issue happened to me because I left the AM information outside of the after_initialize method.  if you are having weird redirection issues, check  your after_intialize methods and that you don't have code outside of it, that should be inside.\n. i guess this is something i should fork then? \n. i'm on rails 2.3.4, and i've cut and pasted that route into routes.rb, yet it didn't work.  I left the controller as you see in my first post.\n. yeah, i added like all of my routes, including creates too, and it worked on rails 2.3.4 and clearance 0.8.5.  Mind you  the way the routes are loaded has changed in 0.8.5 from 0.7.0 when i had my issue.  0.8.5 was the first one to fix it.\n. To answer your question, yes, it looks like everything up to the migration.  i have the db created as this project is in production and been around for 6 months.\nif i get time today i'll fork and create, w hile i try and recreate.  i also noticed that script/generate clearance was still pulling 0.7.0's script (with old readme) too, on a brand new test app i created... so i had to delete the old gems (as they are named thoughtbot-clearance), i uninstalled them all.  then it worked on a brand new app.\nThe freeze only happened while updating.\nI do have a clearance_create_users.rb migration from the first run 6 months ago, in my app.\nI was thinking of putting that upgrade script( from wiki) too in the generator, for those of us who have been using it for awhile.\n. Jesus, my bad. i should have changed the copy and paste i did.  it works and you still rock.\nI.e., i should say\nclass ConfirmationsController < Clearance:: ConfirmationsController\nand namespace your routes like:\nmap.resources :users, :only => [:new, :create] do |users|\n  users.resource :confirmation,\n    :controller => 'confirmations',\n    :only       => [:new, :create]\nend\n. for those googling, on rails 3.0.x make sure you have the right rails.js file in your javascript_include_tag.  without this file (and it's a special one if you are using jquery), you don't get access to the delete method in the view.  Rails is using the html5 data-method to simulate DELETE.  I'm sure it's more technical then that but what i've said still stands, even if i'm a bit wrong in my explanation.\n. this works match '/users/:id/confirmation/new' => redirect('/sign_in') and i also appeared to have a resource => :confirmations in my route file, which caused this error. thanks.\n. I'm not sure, Dan.  If it happens again I'll update, but the data i have now has been deleted so i can't see that level.\n. ",
    "abelmartin": "This post REALLY helped me out.  Thanks!\n. Thanks for the quick reply, Dan. :)\nNow that you mention it, it makes sense that the server wouldn't receive the hash since that's traditionally 'in page anchor' locations.  I'm going to explore what can be done.  I did notice that when I use hashbang instead of just hash, my session new url looked like this (following the example):\nhttp://www.foo.com/session/new#!search=github\nMore will be revealed.\n-a\n. ",
    "booch": "+1 This would be a helpful feature to add to Clearance.\n. ",
    "jbattermann": "Yep agreed. Clearance is awesome, but no http auth is a showstopper for most of my customers' projects. +1\n. ",
    "pius": "+1\n. ",
    "karmi": "Hello Dan,\nI think the main reason here is convenience. When it's built-in, we get HTTP-Auth for non-HTML requests automatically, quite transparently, and stupidly easy.\nTo use Rack::Auth::Basic middleware for this in Rails, one has to do (and please correct me if I'm mistaken!!):\n- Add the middleware somewhere in the stack\n- Intercept calls to non-HTML requests, do the ::User.authenticate(login, password) authentication,\n- somehow (?) set the @_current_user variable to be available for controllers\nAgain, correct me if I'm wrong. I haven't tried it, I am just thinking aloud.\nOf course, I completely understand the need to keep Clearance lean. I just think the lack of HTTP-Auth for non-HTML requests is something which puts unneccessary burden on the library users -- and more so, if they're beginners etc.\n(Now, Sinatra is obviously another story. You expect to operate much closer to the metal.)\nKarel\n. Hi, sure, understood! In that case I think some info or short tutorial in Clearance docs about how to concretely implement HTTP based auth in a Clearance application would be great. (The usual use-case is something like \"give me JSON export with recent photos for the authenticated user\", etc)\n. I've packaged HTTP Auth for Clearance as a gem: https://github.com/karmi/clearance_http_auth (It works by setting an env variable in middleware and overloading current_user to read it.)\n. ",
    "dutchrapley": "you're asserting that @user is valid\nassert @user.valid?\nbut your test fails b/c the user is not valid since 'password' is not equal to 'notpassword'\ni believe your test is doing its job\nshouldn't the test assert that @user is not valid?\nassert !@user.valid?\n. ",
    "mkrisher": "sorry, that is a bad test example. The point being that you may want to check that a password field and a confirmed password match, regardless of if the password is a required field, for example when updating a password and encrypted_password already exists.\n. ",
    "tristandunn": "This has been fixed, but is still lacking a test. A simple one would be:\n```\nclass ApplicationControllerTest < ActionController::TestCase\n  tests ApplicationController\n%w(current_user current_user= signed_in? signed_out? sign_in sign_out\n     authenticate deny_access).each do |hide_action|\n    should \"raise on GET to ##{hide_action}\" do\n      assert_raises ActionController::RoutingError do\n        get hide_action\n      end\n    end\n  end\nend\n```\nIf you feel it's worth it I'd say add it, otherwise this can be closed.\n. I tagged and pushed the versions missing.\n. ",
    "matthewford": "http://github.com/matthewford/clearance/commit/b9648326997032306e3774dcea823943222e3d75\n. ",
    "jabley": "--- a/README.textile\n+++ b/README.textile\n@@ -6,7 +6,7 @@ Rails authentication with email & password.\nh2. Suspenders\n-Clearance is included in \"Suspenders\":http://github.com/thoughtbot/suspenders, which thoughtbot uses on all of our apps. We highly recommend you try it. Suspenders is the \"King Gem\" in our ecosystem, representating what we think the cur\n+Clearance is included in \"Suspenders\":http://github.com/thoughtbot/suspenders, which thoughtbot uses on all of our apps. We highly recommend you try it. Suspenders is the \"King Gem\" in our ecosystem, representing what we think the curre\nh2. Installation\n. ",
    "ghost": "+1 on pulling in this patch. We're experiencing the same problems with session ping pong. \nSpecifically, when we have a staging server set up for a project, we often have a single standard user account that developers and the client may be using at the same time, testing out features. This produces the highly-unexpected behavior of being logged out between page requests.\n. A suggested fix would be to do something like this instead\nencrypt(\"--#{Time.now.utc}--#{email}--#{password}--\") as email should be unique\n. It seems like part of our problem was we had done this in our initializers\nTime::DATE_FORMATS[:default] = '%m/%d/%Y'\nbut still like you mentioned timestamp, email, and salt would all be better in terms of security.\n. ActionDispatch::Head is present in rails-api default middleware stack for Rails3, but indeed not in the one used for Rails4.\nPR updated in order to support both middleware stacks with ActionDispatch::ParamsParser . :+1: \n. Cool ! Keep up the good work :)\n. ",
    "rmm5t": "Dan, Let me know if you need help merging/rebasing or if you would like to see some changes to the approach.  I have a client that would benefit from this, so I have some skin in the game.\n. I'm starting on the rebase now.\n. Dan, Rebased and force-pushed to my fixing_ping_pong_sessions branch:\nhttp://github.com/rmm5t/clearance/commits/fixing_ping_pong_sessions\nLooking forward to having this in core.\n. I don't want to re-open this ticket, but the global sign-out portion of this changeset doesn't work as expected (an invalid test snuck in).  I opened a new ticket #70, but I thought you all might be interested.\n. ",
    "mokolabs": "+1 on this. Support for simultaneous sessions on multiple machines is part of the modern web app experience. I'm surprised Clearance doesn't already have this. :)\n. Cool... glad to hear it. :)\n. ",
    "barrettclark": "I just did a similar thing (created HAML versions of the template files), and then checked here after the fact to see this conversation.  Your diff has a little more functionality than mine.  My first thought was to pass in --haml like you can in formtastic, but then I just went the lazy route and added another line for template_strategy and commented out the erb line.  I like your more robust version better.\n. ",
    "acconrad": "@andhapp Looks good. Can you make a pull request so we can integrate the changes?\n. Patch at: https://github.com/acconrad/clearance/commit/116d48f579654c79d29dd9fd293b3e7646e57529\nModify wiki page to reflect changes: http://wiki.github.com/thoughtbot/clearance/email-case-sensitivity\n. I made some comments to your pull request. Unfortunately this is more restrictive, and while it does cover the RFC 2822 standard, it does not cover the RFC 3696 standard. Check out my expanded series of tests and you'll see 5 of them break:\nhttps://github.com/acconrad/clearance/blob/master/test/models/user_test.rb\n. Here's another commit, to re-introduce the more thorough tests for valid emails (rspec version):\nhttps://github.com/acconrad/clearance/commit/3fc94fb344a1985b5a22d4dfe7f9a5162f8c6015\n. Don't close out the ticket because we still want Thoughtbot to push the\nextra RSpec tests I created over the weekend. Have them close it out just to\nbe safe.\nOn Sat, Apr 16, 2011 at 1:41 PM, guilleiguaran \nreply@reply.github.comwrote:\n\n@acconrad Actually this one is identical (or was when I opened the pull\nrequest) to the regular expression used in the master branch of Clearance,\nthis is only a backport to old rails2 branch. Have you tested your test\ncases with master branch?\nI will close this because looks like rails2 branch won't receive updates\nanymore.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/thoughtbot/clearance/pull/130#issuecomment-1014344\n. Make sure you are in the root directory of your application, then run:\n\nbundle update clearance\nbundle install\nThat should give you the latest version. Then try\nrails g clearance:install\nSee if that works.\n. This does not pass all of the tests for the RFC 3696 standard and will be more restrictive than the current validation. Here is a more robust set of tests that should pass validation:\nhttps://github.com/acconrad/clearance/blob/master/test/models/user_test.rb\nhttp://www.rfc-editor.org/errata_search.php?rfc=3696\n. ",
    "mislav": "Users would have to login at the same second, not day\u2026 But yeah, this looks like a security issue. I suggest hashing the timestamp, email and salt\u2014password is not a good choice since it's non-unique.\n. ",
    "OneHQ": "i'm on rails 2.3.4 clearance 0.8.5 and have this issue.  my debugger doesn't step into class SessionsController < Clearance::SessionsController.  i have added above route and have same controller defined in example.  thoughts?\n. i had to remove the clearance routes to resolve.  i guess routes don't override.\n. ",
    "masterkain": "isn't this resolved by http://github.com/thoughtbot/clearance/commit/442a0dd1528a5f362d6448e2c4723d7cc3988895\n. I do before_filter :authenticate in ApplicationController by default.\nClearance::PasswordsController has a 'new' action.\nBy skipping :authenticate only on :edit and :update by default unauthenticated users cannot access the 'new' action for password recovery.\nhttp://github.com/thoughtbot/clearance/commit/087b55b2fbf465b436a2f5750a67f2b5957d4be5#L3R3\n. I'm trying to integrate clearance with oauth/oauth-plugin.\nNamely oauth-plugin wants restful...authentication kind of stuff, so I tried some workaround, but after finishing the implementation I'm stuck because current_user is empty.\nThis is what I have http://pastie.org/private/y7wianfnljy3udaezsiw\nI need to dig a bit more..\n. sorry, no repository online.\nseems like I got it working tho, I had to patch oauth-plugin in application_controller_methods.rb and replace @current_user with @_current_user\n. ",
    "gravis": "Ok, I understand why. Theses routes are loaded before engine routes. I don't think there is a way to avoid this behavior (except copy / paste all routes) :(\n. Exactly. It's clear when I display the whole routing table :\n    [... my app routes here ...]\n    /:controller/:action/:id\n    /:controller/:action/:id(.:format)\n    [then clearance routes] :\n    passwords POST   /passwords(.:format)                                    {:controller=>\"clearance/passwords\", :action=>\"create\"}\n    new_password GET    /passwords/new(.:format)                                {:controller=>\"clearance/passwords\", :action=>\"new\"}\n    new_session GET    /session/new(.:format)                                  {:controller=>\"clearance/sessions\", :action=>\"new\"}\n    session DELETE /session(.:format)                                      {:controller=>\"clearance/sessions\", :action=>\"destroy\"}\n    POST   /session(.:format)                                      {:controller=>\"clearance/sessions\", :action=>\"create\"}\nI don't know if we can call something like \"load_routes_with_clearance!\" somewhere in the routes files. It doesn't sound really engines-compliant.\nThanks !\n. ",
    "chrisvariety": "not too hard to get it to work. the issues i saw: mongomapper doesn't have update_attribute, so that has to be replaced with setting the attributes directly and then calling save. remove the \"attr_accessible\" line and... that's about it. here's a gist of what i have working: http://gist.github.com/263533\n. oh, also, the validations don't support \":unless\", so I had to replace those with their positive versions.\n. ",
    "Hates": "I was able to get clearance working by just going:\ndef self.attr_accessible(*args)end\ninclude Clearance::User\n. ",
    "roamy": "what do you do about the following\nMacintosh-3:sect kenfoust$ rails g clearance\nCould not find generator clearance.\n. I am not yet\nI am stuck because they did not work\nmaybe I don't have the right branch\ndo the generators work??\n. ",
    "technicalpickles": "This probably can be closed, as there are rails3 generators now in 0.9.0.rc1.\n. ",
    "matthutchinson": "Yup, i'd agree, worth considering for inclusion in the plugin\n. i'll have a go at a patch and you can look it over\n. Hi Dan,\nI understand, a lot has piled on my plate lately and I havent had time to start this yet.  If things change and I get a jump on it, i'll fork and repost here.\nRegards,\nMatt\n. It seems upgrading to the latest 1.0.0rc  solved this issue for me, since gem version 0.16.3 didn't have the testing code to extend ActionController::TestCase in lib/clearance/testing.rb\n. ",
    "ilikepi": "I found myself at RailsCampNE this weekend, so I took a shot at this issue.  Of the four commits, 948e3781 is unrelated to this issue.  One of the tests was was failing for me without requiring 'mocha' in test/test_helper.rb.  Here's my branch; all feedback welcome:\nhttp://github.com/ilikepi/clearance/commits/bcrypt_required\n. Understood, when I started working on it I began trying to make the strategy configurable, but I soon decided it would be easier (for me, as a relative n00b) to make the switch required.  I will continue to work on it to try to abstract out the hashing strategy.\n. > With this approach the application would have to somehow figure out if the user is signing in for the first time after roll-out. Don't want to brcypt the password over again. Correct?\nCorrect, that's done in step 2 above.  The output of the SHA1 hash that Clearance currently uses is a 40-character hex string.  The output of BCrypt, according to the example in bcrypt-ruby's README file is a string that looks like this:\n$2a$10$vI8aWBnW3fID.ZQ4/zo1G.q1lRps.9cGLcZEiGDMVr5yUP1KUOYTa\nSo in step 2, I suggest that if the value of the hashed password matches /^[0-9a-f]{40}$/, the app knows it's looking at a legacy SHA1 hash.  Assuming the password is then rehashed with BCrypt and the User object is successfully saved, this check will fail the next time, so authentication can proceed via BCrypt.\nRegarding your second point, the method I detailed would not actually alter the plaintext of the user's password, it would merely re-hash it using BCrypt.  This would still require the User object to be saved, which I agree has a certain smell to it, but I'm suggesting it's not quite the same (at least not from the user's own perspective) as forcing the user to actually change their password.\n. ",
    "mike-burns": "Set it in your config/environments/test.rb to \"localhost\".\nNext time use the Clearance mailing list.\n. I've added the VERSION file back.\n. You can close it.\n. Merged into master. Thanks!\n. We've added a more complex regexp to catch more email issues earlier. Thanks for the pull request!\n. The local part is case-sensitive; it is possible that the mail server treats Croaky@example.com differently from croaky@example.com . GMail doesn't but another, smaller mail server could.\n. I'm tempted to agree but I've been bitten by other email restrictions before---for example, some Web sites don't allow + in email addresses.\nSo long as it's easy to get back to spec then I'm fine with breaking by default.\n. constraints(SignedInConstraint.new {|user| user.admin?}) do\n  root to: 'admins/dashboard#index'\nend\nconstraints(SignedInConstraint.new {|user| !user.admin?}) do\n  root to: 'activity_feed#index'\nend\n. I get a whole bunch of this:\nundefined method `step' for #<Cucumber::Rails::World:0x7fb9360d7108> (NoMethodError)\n./features/step_definitions/engine/clearance_steps.rb:35:in `/^I sign in (?:with|as) \"([^\"]*)\"$/'\nfeatures/engine/visitor_signs_in.feature:8:in `When I sign in as \"unknown.email@example.com\"'\nWhat am I doing wrong? Do we need to bump the version of something in the Gemfile?\n. Hi @denispeplin , I'm confused. You're saying that this does not work on a new Rails 3.2 app, but the tests do pass? Is it possible to make the tests fail?\n. I'd be very interested in seeing a failing test, so we don't hit this regression in the future.\n. I see the opposite: when I just add @javascript to that feature I get a failure in a full rake, but when I take your pull request I still see the failure.\n. I just spent two hours on this and cannot get a passing test. I see why now---it can't find jquery_ujs---but I think the test suite needs to be majorly overhauled to get this passing.\n. Closing this for now. If you can find a way to re-open with a full test, please do.\n. Merged.\n. Merged.\n. It'd be nice to update the NEWS.md with a more detailed description on how to migrate, what to do if you don't want to migrate, and anything else that people are going to ask about.\n. Those README updates are good, and thanks for the NEWS update.\n. @ryw Yes.\n. Merged.\n. Implemented as #205.\n. dynamic_form was removed in commit 04b2363d. @croaky , what was the reasoning behind this, and how do you feel about us adding it back now?\n. We tend to lean simple_form these days instead of formtastic.\nWe also override the flash message for this error, letting formtastic or simple_form handle it instead. Should we mandate a dependency on simple_form now? Or completely remove this error message in the hopes that the developer will take care of it?\n. Updated with Gabe's suggestion and merged.\n. Done in 0c238d83dfc7d20bcb3612d3927036ffc3b17ce0 .\n. http://rubygems.org/gems/clearance/versions/1.0.0.rc1\nDone. I've removed the deprecated methods, since that's what makes it a RC instead of just another version.\n. Merged, thanks!\n. Merged, thank you!\n. Hi @narath , thanks for this!\nI'm all for adding require everywhere (no joke; I love require), but I cannot reproduce the problem you suggest. Is there a particular FS I need, or something else?\n. I still can't repro locally, but it seems that our Travis CI build is failing for the same reason: https://travis-ci.org/thoughtbot/clearance/jobs/3895549\nIs the #sort needed?\n. Merged with slight changes. Thanks for tracking this down, @narath !\n. Thanks for this, @aayalur . Nice initiative.\nIn order for us to pull this it needs a test case.\nThanks!\n. I'm trying to remember why we adding this; sadly the original commit did not come with a test or a detailed explanation.\nWas this an issue with subclasses? If you were to subclass Clearance::PasswordsController, are changes in the subclass reflected without restarting the server?\n. This does not specify a default layout, and as such it forces existing users to modify their config/initializers/clearance.rb.\n. Aha. Excellent.\n. Yes, sorry for the late reply. Please update the README.\n. Looks right.\n. What if Clearance didn't touch the routes by default, and the user had to opt in? More work, but a more clear UX.\n. This should update the README.\n. I'm not totally opposed to this solution. It's certainly simple.\nWe don't need to remove allow_sign_up for this to work, right? We could do the routing change with that conditional still in place, then deprecate the conditional in a future release.\n. If there's something the user can do that makes them susceptible to being attacked by something as simple as Firesheep, we should not make that an option. We simply shouldn't allow that.\n. Yes: remove secure_cookie, 2.0 should only be this security fix, and users who choose not to upgrade are choosing against security.\n. I honestly don't know the current easiest way to run dev and test using TLS. Is there a blog post we can point to when announcing things?\n. I'm surprised at how little was deprecated. Looks great to merge.\n. This makes sense to merge; I'll leave that to @derekprior .\n. This makes sense to me.\n. Does this change the major version?\n. Ah, you're bumping it anyway. Carry on.\n. My thoughts on bumping the major: we have complained every time the minor was bumped but the API changed. Since this method was as documented as many actual API methods, it's part of the API. Therefore, someone will complain.\nI'd like to live in a society where removing a public method causes a major bump.\n. Since this changes the interface for documented template methods (the documentation is about as broad as possible: \"See app/controllers/clearance for the default behavior\"), this means that this will be part of the major version bump. Right?\n. These are beautiful.\n@seanpdoyle this is written using YARD syntax, which rubydoc.info makes use of.\n. As I understand it, the strategy's #authenticated? method (e.g. https://github.com/thoughtbot/clearance/blob/7a63a2a9363729c743693d74f725337b860ee314/lib/clearance/password_strategies/bcrypt.rb#L12 ) needs to take a constant amount of time. So changing all the #authenticated? methods in lib/clearance/password_strategies should do it?\nruby\ndef authenticated?(password)\n  result = ::BCrypt::Password.new(encrypted_password || \"\") == password\n  encrypted_password.present? && result\nend\n. Great catch, and now I see why @derekprior thought it should be an API change.\nI just tried sketching out an API that is resistant to timing attacks but I couldn't do it quickly.\n. I came with the backward compat question, and your answer has convinced me. Nice fix; LGTM.\n. To confirm, the use cases are:\n- I'm signed into the same account in both Firefox and Chromium. When I sign out in Chromium I want to remain signed-in in Firefox.\n- I'm signed into the same account in both desktop Firefox and Mobile Safari. When I sign out in Firefox I want to remain signed-in in Mobile Safari.\n- I'm signed into the same account on my work laptop's Firefox and my home laptop's Firefox. When I sign out at work I want to remain signed in at home.\n?\nI don't think we need to GeoIP anything -- just knowing the IP is sufficient for tracking. OTOH -- do we want IP tracking in a DB? Are there laws around that?\nI'm on board with your original proposal: each sign in adds to the remember_tokens table; each sign out removes. I didn't follow the limitations around that.\n. @Ronak5 what is stored in device_type? When is it stored?\n. @Ronak5 storing it as Web wouldn't solve two of the three use cases I listed here: https://github.com/thoughtbot/clearance/issues/675#issuecomment-216810109\n. cf. https://github.com/jasmine/jasmine/issues/1052\n. Forgot to add, which I discovered later, that this is what causes it to fail when I clone a fresh repo:\n[transfer]\n  fsckObjects = true\n[fetch]\n  fsckObjects = true\n[receive]\n  fsckObjects = true\n. What happens when the user reloads the page?\n. I like this for the GET safety -- some browsers are eager to optimize GET requests, and mail clients certainly do whatever they want. But I'm not sure if the GET safety is relevant in practice.\n. That was in an initializer.\n. What is this, and is it obviously a bug in appraisal?\n. An existing but seldom-raised complaint is that the Clearance user collection must be the User class. Maybe pass this in from the middleware, allowing people to change it as desired.\ncough Elixir cough\n. It's how to trigger the bug, actually. The user has to have updated the password successfully first.\n. Can you pull ::BCrypt::Password.create out into an encrypt method to keep compatibility with the protected (but mixed in) methods defined on SHA1 and Blowfish? This way the user can call encrypt to encrypt strings no matter what the current strategy is.\n. Drop this newline.\n. Likewise with BCrypt, this should implement the same mixin interface as SHA1.\n. This should be Clearance::Constraints::SignedInConstraint. How about changing that to just Clearance::SignedInConstraint?\nAlternatively, include Clearance::Constraints at the top?\n. I feel that the comment clearly explains why it's multiplied by 5.\n(Also, yeah, remove it. Joke's over now.)\n. Tack the gsub onto the end of the prior line. I feel.\n. Move all of the above into a separate method.\n. I vaguely feel like this would be nicer extracted as a separate method.\n. Elsewhere in this file we seem to use expect(...).to ... syntax.\n. http://blog.jonanin.com/2013/11/20/postgresql-char-varchar/\nThis forces a VARCHAR where it could instead be TEXT. +1 to removing the limit.\n. Nice.\n. Yes!\n. What are you rescuing?\n. What's this do?\n. ",
    "labria": "I thinks that's the new default behavior.\n. Well, it does mention it in the routes.rb file.\nBut I do agree that it should be at least documented.\nPS: does it seem to you too that the last version is broken in all the possible places? I've later bumped into the non-loading of the configuration.\n. Thanks!\n. ",
    "sethladd": "then it should be listed in the the README as one of the things you have to manually add. I don't remember seeing it in the readme that prints out after you run the generator.\n. ",
    "mm53bar": "That is really good to know.  I was stumped by that one until I found this.\n. ",
    "QuBiT": "Even if it is not the best way to test rails engines, it works and has helped me to start testing a rails3 engine gem. So thanks for that AND to give you something back:\nMeanwhile (until you have migrated to the new approach) you could optimize your approach by putting this task\n\n\n task :rails_setup do\n      system \"cd test && rails new rails_root --skip\"\n    end\n\n\nto your Rakefile (and chain it between cleanup and clearance task)\nThis allows you to remove all \"unchanged/unnecessary files\" (just keep the Gemfile and everything else you customized inside this app and let rails generate the rest).\nJust my 2c\nCheers\n. ",
    "trisignia": "Hey Dan, thanks for the quick reply.\naccounts_controller.rb line 23 previously looked like:\nClearance::ClearanceMailer.deliver_confirmation(@account.users.first)\nchanging this to \nClearanceMailer.deliver_confirmation(@account.users.first)\nfixed the problem.  Thank you for sorting that out for me.\nAny ideas why the test would pass when I ran the signup feature alone, but it would fail when I ran all of the cucumber features?\n. ",
    "KingOfBrian": "I just got bit with this myself upgrading from 0.7.0.   The remember_token field was null so none of my users could submit.\nUser.find(:all).each {|u| u.reset_remember_token!}\nFixed things.  Seems like that should be added to the migration.   Wasn't rocket science but quite a pain to track down.\n. ",
    "josephholsten": "A Gemfile is useful for development, but for apps that require clearance you'll still need to define runtime dependencies in the .gemspec. That's because bundler isn't going to read your Gemfile. When you say\ngem 'clearance'\nin your Gemfile, bundler gathers the dependencies from the gem and installs them in the application bundle.\nStill, it's a good idea. I can't wait to test it.\n. ",
    "Yardboy": "I need to throw my number in the hat supporting the request that something be done to enable customization of session expiration. I have an application built for education that shows sensitive data about teacher performance. Teachers share computers all the time, and though we preach time and again the importance of logging out, we cannot count on them being savvy enough to always do it. The district does not even want remember_me available, at this point, much less defaulted.\nI realize Clearance is \"opinionated\", and I'm on board with that for most of my apps, but the current opinion leaves sensitive data apps out in the cold. At this point, I have an app-wide before_filter that resets the remember_me cookie, but an option such as rnewman proposes seems much cleaner.\n. ",
    "halogenandtoast": "I was never a big fan of using a \"raise\" in this case. So many users somehow managed to mess this up at my old job and we got tons of Hoptoad errors related to this. Here's a suggested patch with a test to go along with it:\nhttp://github.com/toastyapps/clearance/commit/d618199a83997a2ab1f080d0e7f079000d0ab66e\n. You need to provide :host parameter or set default_url_options[:host].\n. You can set this in your respective environment files via config.action_mailer.default_url_options = { :host =>\n\"example.com\" }\n. While I'm sure the renaming at least removes the possibility of confusion for some users, it fails to address my initial issue. I'm of the mind though that Clearance has decided on it nomenclature and we can agree to disagree. I do think renaming the method now would probably confuse long existing users of the gem.\n. Since the method is still called authorize we have a collision with gems like Pundit. Not reopening but thought it was worth mentioning. This is one of the few reasons I don't use clearance outside of work.\n. I still think this could be pulled out as a separate gem from clearance that could extend its functionality. I think keeping clearance pure is important to allow for easier maintenance and better extensibility.\n. @derekprior @gylaz updated\n. It is not for the n-step login wizards (but it could maybe be used here?). The point of this is to allow developers and gems to not have to override the SessionsController and have better control over what happens to the session. The examples we've discussed are handling email confirmation, disabled accounts, or throttling sign in attempts. I'm sure there are plenty of other use cases.\n. Looks good to me.\n. :+1:\n. Looks good to me.\n. @mike-burns you also can't do BCrypt::Password.new(encrypted_password || \"\") because \"\" is not a valid hash and it will throw BCrypt::Errors::InvalidHash. You could do a cheap hashing implementation BCrypt::Password.create(\"\", cost: 1), but I don't know if a cost of 1 will create a recognizable difference for a timing attack (basically it would now take slightly longer for accounts that don't exist).\n. That would conflict with the root below.\n. You can't have two paths with the same name.\n. That means we'd have the namespace everything inside the test that is under the clearance namespace: SignInStep, SuccessStatus, and FailureStatus. Is that preferable?\n. Clearance tests are using should inside of this file. For consistency with this file what's there is correct, for consistency with how we're now writing our test what's there is wrong. We have to choose which consistency and  then adjust accordingly. If our goal is to use expect than this entire file should be changed.\n. It's not a method so it would seem odd to do that.\n. If I use the class name it could imply that you have to use the class instead of writing your own, but this might be okay.\n. ",
    "tvongaza": "+1\n. ",
    "digitalex": "Ah, right, the script/generate clearance step was done, I just forgot it in this list. It may be the same as #57, not completely sure, but it looks like it is.\n. I've verified this now, it is the same issue as #57. Moreover, I fixed it by using Marc's commit. Probably a good idea to pull this change soon?\n. ",
    "getnashty": "yup, I followed this installation: http://wiki.github.com/thoughtbot/clearance/installation \nseemed more thorough than the readme. \nI even tried with a clean install of rails and came up with the same error.\nI have gotten it to work only 1 way, first cloning the repo, then creating a new rails app on top of it. \n. Excellent thanks guys!\n. thats what I thought - when I ran it earlier, all of the tables were created, except the users table it said,\"\n==  ClearanceUpdateUsersTo088: migrating ======================================\n-- change_table(:users)\n   -> 0.0001s\n==  ClearanceUpdateUsersTo088: migrated (0.0001s) =============================\"\nWhich makes me think its not being created to begin with, so maybe a migration is messed up?\n. here is the db schema locally, clearance version 0.8.8, \nActiveRecord::Schema.define(:version => 20100316025147) do\ncreate_table \"users\", :force => true do |t|\n    t.string   \"email\"\n    t.string   \"encrypted_password\", :limit => 128\n    t.string   \"salt\",               :limit => 128\n    t.string   \"confirmation_token\", :limit => 128\n    t.string   \"remember_token\",     :limit => 128\n    t.boolean  \"email_confirmed\",                   :default => false, :null => false\n    t.datetime \"created_at\"\n    t.datetime \"updated_at\"\n  end\nadd_index \"users\", [\"email\"], :name => \"index_users_on_email\"\n  add_index \"users\", [\"id\", \"confirmation_token\"], :name => \"index_users_on_id_and_confirmation_token\"\n  add_index \"users\", [\"remember_token\"], :name => \"index_users_on_remember_token\"\nend\n\nmigration file:\nclass ClearanceUpdateUsersTo088 < ActiveRecord::Migration\n  def self.up\n    change_table(:users) do |t|\n    end\nend\ndef self.down\n    change_table(:users) do |t|\n    end\n  end\nend\n. For future reference, I restarted everything from scratch, and there was something wrong with the way the db was initially created. Clean version works great so far!\n. I have clearance installed as a sub class I believe, (as I just used the repo) - I'm not really sure I know how to do what you're suggesting without an example?\nThanks!\n-Elliot\n. Clearance is installed as a gem, config.gem is in environment.rb, the gem is vendored.\n. Hi Dan,\nThanks for checking in - I didn't solve it, but I haven't tried again since, as I've been slowly working on other areas of the app, will let you know as soon as I give it another go!\n. ",
    "agoodman": "I tried to fix this by adding the domain to the remember_token cookie assignment in authentication.rb as follows:\ncookies[:remember_token] = {\n  ...\n  :domain => ActionController::Base.session_options[:domain]\n}\nHowever, it had the unfortunate effect of breaking authentication entirely.  In fact, any value I use for :domain in this context also breaks authentication.\n. ",
    "rgoytacaz": "We can maybe, get rails generated cookie name for that app and prepend.\n. The problem is having words like \"voc\u00ea\" in a view.\n. Nothing to do with Clearance..\n. please close\n. ",
    "courtenay": "Note for future searchers; you can send a block to sign_in so you don't need to override the method, just create the cookie with the correct subdomain in a block like\nsign_in(user) { cookies[:remember_token] .... }\nfrom your controller\n. ",
    "kylefox": "I did have a bunch of old versions.  I uninstalled all version and re-installed 0.8.8 but the same problem occurs.\n. I just tried it as a plugin and it seems to have worked okay.  My gems must be screwed up.  I upgraded to Snow Leopard a while ago and assumed everything was working okay, but perhaps that wasn't the case.\n. right, forgot about that one.  I removed it and the clearance 0.8.8 gem worked.  thanks!\n. ",
    "wedtm": "I do have the application.html.erb, however I don't want to use it. I want to use sessions.html.erb. I found it's because of the namespacing, which I think it does on all engines, not just clearance. Since the namespace is Clearance::SessionsController i have to put it in  app\\views\\clearance\\sessions.html.erb for it to be found.\n. ",
    "ludicast": "This is a rails/rack/cucumber issue apparently.\nhttp://weblog.rubyonrails.org/2010/5/25/ruby-on-rails-2-3-8-released/\n. ",
    "mculp": "Same here w/ beta4\n. Thanks, but I'm on OS X w/ normal install. It's also happening to my friend.\n. ",
    "sdebaun": "I actually found this is a rails issue.  If you have your rails install on one drive, and your project on another, you have to use 'mklink' to create a windows symbolic link; link your project to the same path on your rails drive.  e.g. I have:\nc:\\ruby\nd:\\checkout\\my_project\nso I just mklink'd c:\\checkout to d:\\checkout, then ran the command line from c:\\checkout\\my_project.\n. ",
    "cpytel": "You're right.  We were originally going to release this as an actual release, then decided to do an RC.  I've updated the README to make it correct.  Thanks.\n. Yeah, it seems like renaming the old method is fine.\nOn Mar 20, 2011, at 11:34 PM, croaky wrote:\n\nRight now, we have to do this:\nhttps://github.com/thoughtbot/clearance/wiki/Sign-up-sign-in-with-user-name\nWe shouldn't have to override the routes and so much of the controller to make this work.\nWhat if instead we had a method provided by the Clearance::Authentication module that could be overridden like this?\ndef authenticate\n     ::User.authenticate(params[:username], params[:password])\n   end\nThat's the method that would that would be called from sessions#create.\nBut we already have a method called authorize. Hmm. Thinking about it some more, that existing authenticate method really doesn't authenticate, it authorizes:\nhttp://www.duke.edu/~rob/kerberos/authvauth.html\nWe could rename that old method authorize and probably should to more accurately describe what it is doing. That would be a major API breakage but easy to upgrade in old apps.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/thoughtbot/clearance/issues/131\n\n\nChad Pytel, Founder and CEO\nthoughtbot, inc.\nt: 617-482-1300 x113\nf: 866-217-5992\nhttp://www.thoughtbot.com \nhttp://www.twitter.com/thoughtbot\n. You can email support@thoughtbot.com. Thanks.\n. @jacortinas We are discussing the issue with Ben and other affected parties. For security purposes we cannot discuss the issue further in public until a coordinated release can be made, so that the vulnerability is not disclosed before a fix is available, which will hopefully be soon. Thank you for your patience,\n. ",
    "jasonm": "It looks like VERSION was removed in b0ea3a941db3aabd77136b40cf89a598686d0c6d but I don't think it should have been?\n. ",
    "dstrelau": "This path ends up looking for lib/VERSION, whereas the file got put back at {root}/VERSION. Can we fix one or the other?\n. ",
    "valodzka": "As far as I can see it's still can be done only with monkey patching.\nAbout permanent and signed - I don't see any sence why we should use it here.\n. Problems begins when you try to use myapp.com with subdomains (client1.myapp.com) and beta.myapp.com\n. Your case (staging.myapp.com and beta.myapp.com) will work. But next don't.\nYou site is myapp.com and it work on main domain and couple of subdomains (help.myapp.com for example). You use one login for all subdomains and don't want user to login every time for every subdomain. So you setup cookies: cookie[:remember_token] = {:value => 'token', :domain => '.myapp.com'}. It works.\nBut now you decide to test you beta version of you app on beta.myapp.com. You setup cookie[:remember_token] = {:value => 'token2', :domain => '.beta.myapp.com'}. And now you cannot login in both applications because token from main application conflicts with token from beta application\n. ",
    "rupakg": "Thx. I got that after I posted but there was no instruction for older rails versions. So I thought it would be good idea to add it.\n. thanks a lot.\n. ",
    "malev": "hi! no. It's enabled. this option depends on prototype?\n. No I don't I'm gonna try with prototype. But the example does not include it. I guess.\nAnyway, thank you very much for the help\n. Hi!\nI've just tested it with prototyle and it doesn't work either.\nI'm using RAILS_GEM_VERSION = '2.3.5'\nI don't have a clue what could be happening.\n. ",
    "hgmnz": "script/rails generate is the way you invoke generators in Rails 3, which is the version of Rails the readme file is referring to.\n. Hi @forrestgrant! In order to consider this, a patch with a failing test would go a long way\n. Both of these are good for usability, but bad for security. We mainly need to decide what clearance's tone is in regards to both those topics. My opinon:\nQuora: No account found for this email address. To create an account, sign up for Quora. - You are giving a potential attacker the ability to easily figure out whether a user exists by that email address. If the user has a week password (most of the case they do), the attacker is one step closer to entering. I don't think the gain is that high for the user.\nFacebook: Incorrect email / password. Your password will be shown to you in plain text to make input easier. - I think this would be fine as long as there's a way to mask it, maybe with a checkbox, so that a user can toggle it back if they have someone over their shoulder?\n. Cool, I like that.\n. Hi @abelmartin, \nClosing this issue for now. Feel free to reopen if you find anything Clearance should be doing to support your use case and we can take it from there.\nThanks!\n. Looks good to me, useful change\n. ",
    "froderik": "Same problem here. It seems to be related to how Rails 3 is dealing with flash notices. I came further by adding something like \n<%= flash[:notice] %>\n to the (hijacked) web page for new sessions. Investigating more - will let you know my findings.\n. Finally got time to work on this again. Thanks - didn't need all the steps but the last one was really nice to have. (Removed some of the tests since I won't be doin \"sign up\" and \"recover\" for a while if ever.)\n. ",
    "lfborjas": "I have almost the same issue, first, I added the flash to the application layout and managed to make eight more steps pass. Now I'm looking into these weird deprecation warnings:\nDEPRECATION WARNING: f.error_messages was removed from Rails and is now available as a plugin. Please install it withrails plugin install git://github.com/rails/dynamic_form.git. (called from _app_views_passwords_edit_html_erb\nAnd I hope that solving that will make more scenarios pass (the ones that deal with seeing validation errors). If that does it, I think I'll look into the step definitions of \"i should be signed in/out\", as they fail too. Will post again with results.\n. I managed to reduce it to this\n   14 scenarios (5 failed, 9 passed)\n   80 steps (5 failed, 11 skipped, 64 passed)\nI had to create a root path (just a little controller with nothing and the corresponding route) and added to it links to sign in/out (using these helpers: https://github.com/thoughtbot/clearance/blob/master/lib/clearance/authentication.rb ). \nThese are basically the same steps devise needs: have the flash in the layout, add a root path to some controller and show the sign in/out links (the latter is actually optional). Some of the errors I still get I are capybara-related: undefined local variable or methodnode' for # (NameError). This looks like a known bug, so I'll try to check it out.\nand the \"i should see error messages\" ones, as rals 3 has the error_messages deprecated in forms; I guess that by tweaking the step definitions stuff should be alright. Sadly, I have to go back to work now, so I'll keep tweaking this tomorrow. I hope you guys do better :)\n. Done. I commented this line infeatures/support/env.rb:require 'cucumber/rails/capybara_javascript_emulation', as it is a [known bug](https://github.com/jnicklas/capybara/issues/issue/110) in capybara/cucumber. Also, I showed the error messages from the sign_up and reset_password forms iterating over@user.errorsin the same fashion as the [scaffold does](https://gist.github.com/721228) and that was it, remember to use the:delete` action in the link to sign out.\nMaybe the generator should have some \"now the next steps are...\" happy text like the devise one does, 'cause it's actually really easy to get it going, but it's kinda frustrating to be hunting for solutions :/\n. ",
    "proton": "Sorry, it is my fail.\n<%= link_to 'Sign out', sign_out_path, :method => \"delete\" %> is work.\n. ",
    "guilleiguaran": "Please add it in rails2 branch. Thanks!!\n. @acconrad Actually this one is identical (or was when I opened the pull request) to the regular expression used in the master branch of Clearance, this is only a backport to old rails2 branch. Have you tested your test cases with master branch?\nI will close this because looks like rails2 branch won't receive updates anymore.\n. @acconrad I closed this because was about rails2 branch. You can open a new pull request, I think your tests can be merged in master branch. \n. ",
    "jferris": "Are you missing the :host entry for ActionMailer's default_url_options?\n. I fixed the four test failures, but only the tests needed to change. If there's an issue with clearance on Ruby 1.9.2, we don't have adequate tests to discover it.\n. I don't believe they are. In a controller, you can't use the leading . notation. If it's in a view, you could use \".edit\" or whatever and it would prefix it with the controller path.\n. Yeah, I think sticking to a convention for controller flash messages would be good. I've been using things like users.create.success.\n. Yeah, that sounds good to me. We can redirect there from sessions#new if you're already signed in.\n. Do you have a test that reproduces this? All the clearance tests are passing on Rails 3.0.6.\n. This is fixed. I also fixed the references to clearance_views and clearance_features.\n. Thanks for the patch. I had a couple of implementation notes. If you can fix those, I'll take another look at this.\n. I haven't gotten to look at them again yet. I'll try to take a look tomorrow. Thanks for your patience.\n. Hey - I went through the new patch, and there a just two small changes I would make:\n- No reason to expose password_required outside the class. I'd just keep it as an instance variable or make the accessor private.\n- password_required doesn't really express the intent of that flag, and clashes with the already existing password_optional? method. I'd rename it to something like changing_password to more clearly express the intent.\nIf you want to make those changes, that would be great. Otherwise I'll pull this in and refactor it in a few days. Thanks again for the patch.\n. The sign out URL only works via DELETE requests by default. You can add a route that responds to GET requests if you need one.\n. You could use Ajax, or you could just implement a create.html.erb view for passwords#create.\n. Thanks for the patch. This came up for us lately so we are interested in the patch. We do plan on merging #177 pretty soon, so if you can rebase this on top of that it will be easier for us to merge.\n. Looking through this a bit more - it's not possible to accept an object instead of a string? If you set ::User as the default model, it shouldn't resolve as Clearance::User later, right? You may need to just defer setting the default until after the application is initialized so that ::User is available.\n. Seconded.\nSent from an itty, bitty keyboard\nOn Jul 20, 2012 2:52 PM, \"Dan Croak\" \nreply@reply.github.com\nwrote:\n\nI propose the default migration should make email, encrypted_password,\nand remember_token :null => false.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/thoughtbot/clearance/issues/206\n. This commit could use a message explaining why this isn't necessary anymore.\n. Yeah, that task doesn't seem to exist anymore. This may be a regression from removing diesel, as I think diesel provided those tasks.\n. Travis won't accept a wildcard in gemfiles, right? Or evaluate the YML file as ERB or something?\n. Looks good to me.\n. What error are you getting when you try to include Authentication? I think the issue is that it's trying to define helper methods for views.\n\nWithout including that module, you can get access to current_user through env[:clearance]. That will return an instance of Clearance::Session, which has most of the methods you're looking for.\n. I think the migration strategy is already a weird case. It modifies the password when you ask it if the user is authenticated (query method with side effects). I'd say take the pragmatic approach and go with Answer A: call save within authenticated_with_sha1?.\n. This is not as clear cut as it seems. It was renamed because the authorize method actually does perform authorization. Authentication in clearance is performed lazily, whenever you ask who the current user is. Adding before_filter :authorize doesn't add authentication; it adds authorization. That is, it authorizes any user that is authenticated.\n. Can you paste some of the errors and explain your setup a little? I didn't think that you actually needed Git to install or use clearance as a gem, since the gemspec gets converted to YAML.\n. We used to use a glob, but git ls-files is convenient because:\n- It's harder to forget to add a new file, such as a new template in a generator. We ran into bugs several times because we forgot to add a new type of file to the gemspec and it didn't match our glob.\n- It's harder to accidentally add ignored files to the gemspec, since ls-files doesn't know about them.\nAre using bundler's --deployment flag?\n. Yeah, I think that would be a good change. I haven't introduced strong_parameters into an engine yet, but I think we'd want to:\n- Add strong_parameters as a dependency\n- Use permit in controllers\n- Include the attribute protection module in User\n- Maybe skip attribute whitelisting for User?\n. Are there things we can achieve with this that we can't achieve by targeting the body classes?\n. Okay, that makes sense.\n. The changes look good. Looks like CI is failing; not sure whether or not this is related to markup changes, but somebody needs to check it out before merging.\n. The validate_as_email approach does seem brittle. It calls a private method and then digs around internal structures to figure out if the address is valid. It also has a very loose version requirement. I'm pretty sure that will allow ANY version of mail, so the risk that you install a version of mail that doesn't work with validate_as_email seems high.\nI wonder if there's a better way to interact with Mail::Address; I couldn't even find that class in the mail source.\n. email_validator looks good to me.\n. Good to merge.\nThese kinds of changes are much easier to read if you separate the unrelated style changes into a separate commit.  It was hard to pick out what the actual change was from the diff.\n. Good to merge.\n. Looks good to me.\n. Thanks. Squashed and merged.\n. I wrote about this recently on a pull request, but can't find it.\nI consider overriding to_param to return a value that you can't pass to find a bad practice. I'd call this a violation of the Liskov-substitution principle, and the effects you're describing are the downsides of violating it.\nThere's a contract between ActiveRecord::Base and its consumers that to_param provides a useful String value that can be passed to find. Every time you interpolate a model into a URL, you're relying on this behavior.\nIf you override to_param, I recommend that you also override find to accept the values it returns. Otherwise, you'll continually run into issues like this. I don't think we should modify clearance to account for this mistake.\n. The contract isn't in the documentation or explicitly spelled out anywhere. It's a feature that implicitly exists and that every application depends on. If you look through any random Rails application, you'll find that values from to_param are coming into controllers and being passed to find all over the place. Most controllers will have at least one instance of this; nested controllers will frequently have two.\nIf you switch from the default (which works with find), and you need to update every reference to find for that model, that's a red flag. Both APIs are intentionally abstract, so you can easily override the default implementation so that custom values work just fine.\nIt's bad enough to \"fix\" this issue in an application by doing a find and replace; it would be worse to introduce integration code in a library so that an arbitrarily non-standard model can work with a standard API.\nSummary:\n- Overriding find is easy.\n- It's confusing when params[:id] doesn't work with find.\n- We're implicitly relying on this convention everywhere.\n- Because overriding find is easy, there's no reason to stray from the convention.\n. Looks good.\n. I like the information the old names provided. I think the main issue was that Clearance::Authentication maybe misrepresented what it provided to controllers, but I think the new names go too far in the other direction.\nClearance itself has multiple controllers, and they don't descend from Clearance::Controller, which I find a little suprising. The Controller name tells you what it's meant to be mixed into, but not what it provides. Maybe AuthenticatedController or something like that? The module provides helpers related to authentication (with just a sprinkle of authorization) and is meant to be mixed into ApplicationController.\nI think Clearance::User was fine as a name. Was there a specific issue that renaming was designed to fix? The new name doesn't tell you what kind of role the model plays. \"Model\" basically means \"Thing\" and has some vague connotations when it's in a Rails application, whereas \"User\" means something pretty specific in a Rails application.\nIf we do rename classes from the public API, do we want to include deprecated fallbacks under the old names? I know clearance is technically not 1.0 yet, but there are a lot of applications out there that will break if we rename these.\n. My general feelings about the authorize vs authenticate debate:\n- The authorize method performs authorization - it denies access to unauthenticated users. The sessions controller performs authentication, as does Clearance::Session.\n- I've generally assumed that controllers would override authorize for controllers that require specific authentication.\n- It's sort of strange that Clearance::Authentication contains a bunch of authorization logic.\nHow about this?\n- Revert Clearance::Model back to Clearance::User.\n- Split Clearance::Controller into Clearance::Authentication and Clearance::Authorization, both of which get mixed into Clearance::Controller.\n- Mix Clearance::Controller into ApplicationController in the install generator.\nIn order to clarify the authorize vs authenticate debate, we can define the method as authorize_authenticated_users and then just call that from authorize. Not sure if that actually helps, though.\n. This looks good to me.\n. This issue was reproducible only in the development environment when engines were first added to Rails. I don't know if it's still a problem.\nYou needed to mark autoloaded constants in engines as unloadable, or you'd get the error that @derekprior pasted above.\n@sikachu are you familiar at all with ActiveSupport's dependencies?\n. I'm still opposed to the \"use whatever dependencies are available\" approach to development.\nI wrote about this when blogging about appraisal: http://robots.thoughtbot.com/post/12068553267/appraisal-find-out-what-your-gems-are-worth\nThe two primary issues:\n- Without a Gemfile.lock, the likelihood that a developer pulls and gets a broken setup increases greatly, which in turn greatly decreases the likelihood that developers will participate in a project.\n- Without lockfiles for appraisals, the situations aren't actually reproducible, which means regressions can reappear and a bug that occurs on one machine will be invisible on another.\n. root_path in Rails always means /, so it would be confusing to redefine it.\nMaybe rename this to default_redirect_path?\n. @croaky any thoughts on this?\n. I think the other way to solve this is to add turn to Appraisals so that each version of Rails we test is locked to a different version of turn.\n. It's querying for the user even when the user isn't necessary for the request. Some of the above log entries are assets in development, which certainly don't need the current user. I think I introduced this regression when moving logic into Rack middleware.\nThis attempts to add the current user's remember token after each request: https://github.com/thoughtbot/clearance/blob/master/lib/clearance/rack_session.rb#L11\nHowever, it doesn't check to see if the user has already been loaded before setting the cookie: https://github.com/thoughtbot/clearance/blob/master/lib/clearance/session.rb#L10\nI think we could fix this by grabbing the remember token from HTTP_COOKIE when the current user hasn't been loaded yet. The only time HTTP_COOKIE wont' match current_user is when the user has just signed in, so we can override that when sign_in is called.\n. We recently did this in thoughtbot/suspenders#167. Seems like a good idea to do it here, too. Merge away!\n. For these kinds of issues, I propose a two-pass approach:\n- Make it easy to hook this kind of behavior into clearance without specifically adding a remember me sort of option.\n- Create a new gem called clearance-clarence that contains stuff like a remember me plugin.\nThis will hopefully result in a lightweight, extensible authentication framework as well as a collection of useful extensions to that framework when you need them.\n. Thanks for the patch. This looks good to merge to me. @croaky any objections?\n. I think the main advantage to what @harlow is proposing is that it moves the maintenance burden into clearance, a single location, as opposed to every application that uses clearance without a signup page. I've also had to disable signup for many client projects.\nThe conditional code will definitely be uglier in clearance, but it will mean that you can just set the flag as suggested from the application's standpoint. The other advantage is that, once it's stable in clearance, I'll be much more confident that signup is disabled and remains disabled as I update clearance.\nIn two different applications with the current setup, a clearance upgrade has accidentally re-enabled signup because of method/route renames. Implementing a flag, while ugly, would move this feature into the public API, making this regression much less likely.\nI think it's worth thinking about whether or not we can implement this without a ton of conditionals/global state, but I also think it's worth doing either way.\n. > In the 'real world' developers are likely bundling and getting latest versions of stuff unless they have a specific reason not to.\nI don't think that's actually the case. I've only worked on a handful of projects where people regularly run bundle update to get the latest. Most projects are running several versions behind on almost all of their gems. This means that testing your library against the latest version of every gem is actually less realistic than testing against a pinned version. Try running bundle outdated on your projects to see.\n. Does this mean we won't be testing multiple Rails versions on Travis, or do I not get what's changing?\n. Ah, I just found the changes in Rakefile. I'm interested to see how this goes. No objections here.\n. Sounds like something wasn't working without this change. Should there be a test somewhere?\n. It doesn't prevent many attempts to sign in, but the default encryption algorithm is bcrypt, which is slow and difficult to brute force: http://en.wikipedia.org/wiki/Bcrypt\n. This looks good to me. Nice work!\n. @derekprior the issue there is that it's pretty much impossible to hack in, which means you just can't use clearance if you want oauth. This has been a frequent client request for us in the past, and we use it in some of our internal apps. The password_optional? thing we added was the smallest change we could think of to allow people to override this behavior.\n. Looks good.\n. I think you could just use a regular sign out for this, right? Can you clarify the scenario you were using? I think you'd either want to:\n- Explicitly sign out the user by clicking the sign out link\n- OR use a new capybara session to simulate a different user\n. A few of us discussed this in Boston today. We have some follow up questions:\n- Currently, one of the most common ways to end up on a sign in or sign up page is to try and access a page you don't have permission to view. If you do something like click on a link from an email, you may need to sign in first. Do we want to handle that with a modal view? What page would be displayed behind the modal?\n- If we generally have sign up and sign in links trigger a modal dialog, what will happen when you submit the form? Are we hoping to have the sessions#create action update layout elements, etc, without reloading the page?\n- There were some concerns about new dependencies and rigid opinions that could be introduced by this change. For example, we'll now need a way to plug in JavaScript, we'll need jQuery as a dependency, and so on. It's not clear how much of an issue this will be before starting, but we may want to investigate pulling this out to a clearance extension or something similar if it makes it more difficult to implement in pre-existing applications.\nI think there are a couple quick(ish) wins we could pull off:\n- For improving page load times, etc, I think we should try and rely on turbolinks or something similar. I think a good start would be getting that back into suspenders and making sure our general stack works with that out of the box.\n- Having the ability to trigger a sign in or sign up modal would be a good clearance feature, and can probably be implemented easily as an extension without disrupting existing functionality or forcing new dependencies.\nFor SF projects, you said you've wanted to do this on every project this year. Has any of this been implemented already? Is there anything we can extract?\n. I think it would be pretty easy to:\n- Make Clearance's controllers do something intelligent for XHR requests, which would be nice for modals or single page apps.\n- Make signing up or signing in feel closer by using a modal when clicking on the links.\n- Make switching between sign in/sign up stay on the same page.\n- Package something optional that switches the views into this mode. I think you could do this entirely using JavaScript.\nI think it's not reasonable to attempt to re-render the page after you've signed in, because we don't know what else the view changes for signed in vs signed out users. Therefore, after finishing a successful sign up/sign submit in a modal, we probably still want a hard redirect.\n. Yeah, I think we could continue the Template Method trend to make it easy to override the successful response to XHR requests.\n. Yes, that would probably make more sense. Would you like to submit a pull request? If not, we'll take a look at it when we can.\n. Can we assign the remember token when the user is created instead, so that users always have a remember token?\nIf not, can we move this into a method on User, like generate_or_reuse_remember_token?\n. I agree with @croaky, in that a migration is the best overall solution, and removes the need for this logic, in User or elsewhere.\n. @gylaz can you rely on Clearance.configuration.user_model in the migration template but not in the migration itself?\n. Maybe we should just generate a migration with :users in there, and they can change the migration before running it if they're using something else? I think that covers the >99% case and there's a reasonable workaround for the others.\n. This looks good to me. Removing the order-dependent require is a nice win.\n. What about just allowing the user to assign an object that responds to call? Then they can assign a block (or any other callable object). This would eliminate the concern from clearance except for the default case, and it would allow further extension by the user without requiring modifications to clearance.\n. We're working out a good way to have common extensions easily available without overburdening the clearance codebase. In the mean time, I'd rather drop the :all option, and just have a generic block for whatever people want to do beyond the default.\nPassing the Request object is probably best, because that will avoid recomputing things like cookies, while still allowing direct access to the env if necessary.\nWould be interested in @croaky's thoughts here as well.\n. @croaky thoughts on adding a clearance-i18n repo where we keep translations? That way we could give translators commit access.\n. I assumed it would be a gem, similar to rails-i18n.\nhttps://github.com/svenfuchs/rails-i18n/blob/master/lib/rails_i18n/railtie.rb\n. @JulienItard I created a new repository and gave you push/pull rights. I set up an empty config/locales directory where you can add new yml files in the Rails i18n convention. I'll add a railtie and gem to that repository shortly that will make it easy to plug in the new translations.\n. Moved to https://github.com/thoughtbot/clearance-clarance/issues/2.\n. As part of this, we're going to experiment with engine integration.\n. Moved to https://github.com/thoughtbot/clearance-clarance/issues/3.\n. As a result of that discussion, we ended up adding a number of hooks to Clearance, including sign in guards. You can read about them here: https://github.com/thoughtbot/clearance#extending-sign-in\nThis is a very old issue, so I'm going to lock it, but if you're running into issue with sign in guards, please open a new issue.. Moved to https://github.com/thoughtbot/clearance-clarance/issues/1\n. Before merging, I think it's worth considering alternate names for \"steps.\" Steps calls multi-step sign-in to mind, which I think is what confused Gabe. What about \"filters\" or \"guards?\"\n. Ship it (squirrels etc pip pip)\n. That error really looks like the encrypted_password field isn't actually on the people table, or that Person is not an ActiveRecord::Base subclass using that table. The contents of app/models/person.rb or db/schema.rb would be useful for debugging this.\n. I don't think this is a use case we've considered before. We certainly don't have any test coverage for it.\nWe can fix the immediate error by changing ApplicationController to 'ApplicationController' in install_generator.rb. I'm not sure what inject_into_class/inject_into_file will do if the file doesn't exist, though.\n@croaky thoughts?\n. Clearance includes Rack middleware to help sign in during feature tests: https://github.com/thoughtbot/clearance#faster-tests\nAfter including the middleware, you can add an as parameter to any URL to sign in as the given user.\n. We changed the default to BCrypt, but we still support SHA1.\nIf you'd like to migrate to BCrypt, you can use the migration strategy:\nClearance.configure do |config|\n  config.password_strategy = Clearance::PasswordStrategies::BCryptMigrationFromSHA1\nend\nTo continue to use SHA1:\nClearance.configure do |config|\n  config.password_strategy = Clearance::PasswordStrategies::SHA1\nend\nSee the README for more information.\n. You're right - using bundle --binstubs causes issues on Rails 4, and it's no longer our recommended setup. This was an oversight during the Rails 4 transition. I've submitted #388 to correct the README.\nThanks for pointing this out!\n. @edwardloveall the README on GitHub shows configuration options only available on the master branch, including the allow_sign_up flag. We haven't released a version with that feature yet, but you can use it by pointing your Gemfile to the master branch for clearance.\n. Yep, the allow_sign_up feature hasn't been released yet.\nIf you're looking at the README on GitHub, you're always looking at the documentation for master.\nAlthough GitHub READMEs are fine for getting an overview on a project, I strongly recommend using something else, like rubydoc.info for referencing documentation. It will be the latest release by default instead of the unreleased code, and you can even find the documentation for your exact version.\n. The build failures look related to this commit.\n. Instead of working so hard to preserve URLs, what about raising an exception if you try to redirect to an outside domain? I think this makes more sense, because:\n- If you silently redirect to the same path on a different domain than the original URL, it's unlikely to work as expected.\n- If the return_to parameter contains a different hostname, that seems like it's either a bug or an attack.\nAlternatively, we could discard the URL and redirect to the default if the host name is incorrect. This has the behavior of letting users still sign in while not attempting to use invalid return_to values.\n@derekprior thoughts?\n. @derekprior I can see the value there, but it seems unlikely that somebody would attack a site by embedding non-HTTPS URLs to the same site in a return_to parameter. I think enforcing SSL is up to the application developer if that's what they want to do, and there are lots of tools for doing that in a Rails app already. My preference would be to stay simple and just guard against malicious hostname changes.\n. You also need to define clearance_controller? as false in every other controller, or you'd get missing method errors.\nI think it would make more sense to have AuthorizedController as a subclass of ApplicationController, and have everything subclass from that except things that skip authorization. Thoughts?\n. Those concerns sound reasonable, so I withdraw my opinion on the AuthorizedController approach.\n. What about, instead of having the clearance_controller? method, if we just provided Clearance::BaseController and allowed overriding behavior by reopening or configuring that, like:\nruby\nClearance::BaseController.class_eval do\n  layout 'clearance'\n  skip_before_filter :authorize\nend\nIf this is a common pattern, we could provide an API for it, like:\nruby\nClearance.configure do |config|\n  config.extend_clearance_controllers do\n    layout 'clearance'\n  end\nend\n. Could we have a config option? Meaning:\n- Step 1 is as documented: create a subclass in your application.\n- Step 2: Add a line like config.override_controller :users to config/initializers/clearance.rb, so that Clearance knows to route to your controller instead.\n. As an alternative, we could break the Clearance engine into smaller engines, like clearance-signup, clearance-edit-password, and clearance-password-reset. The main clearance engine can load those, so if you just want to get started with everything, you can. If you want to pick and choose, you have an immediate one-level-lower abstraction to use instead of having to define all your own routes.\n. I don't think breaking it up will be a major challenge. Pretty sure having it in one repository with one test suite and one gem will still work fine.\n. Won't we end up deprecating this option if we decide to split up the gem? It seems like we're potentially introducing more future work here. I'd be interested in discussing how hard it would be to split things before adding more code to remove things selectively.\n. @zamith you can give the layout method a symbol and it will call a method by that name to determine the layout.\n``` ruby\nlayout :find_layout\ndef find_layout\n  if clearance_controller?\n    'whatever'\n  else\n    'application'\n  end\nend\n``\n. What if we treat this like views?\n- By default, include all routes as we do now.\n- Merge #416 so that users can disable the routes.\n- Add a generator which will add all our routes toroutes.rb` in the app.\n- The generator could also add config supported by #416 to disable the default routes.\nThis way, applications would use Clearance's routes by default. This gives you a working solution out of the box that's easy to update. If you need customization, the generator is there so that you can edit the routes as you see fit, at the cost of a little extra future maintenance.\n. One idea to make this easier to debug: raise an exception if you try to fetch the current user when 1) the connection is not SSL and 2) Clearance's SSL-only setting is on.\nThat way, if you attempt to use staging/production on an HTTP connection, you'll get a 500 and a clear error in your logs instead of a mysteriously signed out session.\n. I like the idea of renaming this method to be neither authorize or authenticate so that we can avoid having the semantic debate. Something more specific would also be less likely to create a conflict like @jessieay is experiencing.\n@jessieay as a workaround, you should be able to do something like this:\n``` ruby\nclass ApplicationController < ActionController::Base\n  include Clearance::Controller\nalias_method :require_login, :authorize\ninclude Pundit\nend\nclass PostsController < ApplicationController\n  before_filter :require_login, only: [:edit, :update]\ndef edit\n    @post = Post.find(params[:id])\n    authorize @post\n  end\nend\n```\n. What do you think about changing Hound's configuration to match our style guide, so that we can gradually move Clearance over with each pull request?\n. >  I really know nothing about shoulda context and cant explain why this happens or what a workaround could be?\nUsing matchers in shoulda-context happens at the class level, so they need to be extended onto the test case class and not mixed in as instance methods.\n\nTo be honest, I don't think I've ever used this matcher and I'm leaning towards deprecating it.\n\nThis matcher was originally just used internally in Clearance's own specs, but it became part of the public API because the controller method is also public.\nI think it would be worthwhile pare down the authorization logic in Clearance to only explicitly handling situations where authentication is required (redirecting to the sign in page). I think that would include removing this matcher and the deny_access helper.\n. This seems like a good idea to me.\n. Looks good to merge.\n. Session cookies are destroyed when the user closes their browser. The Clearance REMEMBER_TOKEN cookie needs to persist between sessions to remember the user.\n. > If the rails session expire_after configuration is given a value, then the cookie is not destroyed when the user closes their browser.\nThat's true - the user can configure their session to be long-lived. The default is to create a session cookie, which extends the life of the browser session.\nI think there are arguments to be made for using cookies or using the session, but I don't think either is obviously the correct choice. We used a cookie, because we wanted long-lived user sessions in a world where the Rails session is short-lived by default.\nUsing the Rails session would mean that Clearance would work differently depending on the application session setup, which is more confusing for the maintainers if nothing else.\n. Can you do something like:\nruby\nif defined?(:skip_before_action)\n  skip_before_action :require_login\nelse\n  skip_before_filter :require_login\nend\n. Also, it might be worth dropping support for Rails 3 soon (or at least deprecating it). There have been three minor releases (4.0, 4.1, 4.2) since Rails 3, so people have had plenty of time to switch (since June, 2013 according to rubygems.org).\n. > Yes. But I need to do that 6 different times. So I was going to wrap that in a method on Clearance::BaseController\nSounds good to me.\n. These look way better to me, and nothing looks wrong.\nI think some of the it examples within context groups could be safely merged without losing any readability.\n. I had one minor comment, but I think this is good to merge whenever you're ready.\n@derekprior any thoughts?\n. Think it's worth having a test for this? My idea:\n- Make an anonymous controller subclass using rspec-rails.\n- Mix in Clearance::Controller.\n- Make sure there are no routable actions.\n. @derekprior I think \"Contributing\" is more core to open source software, so I left it first. I took a shot at working it into the \"About\" section. Thoughts?\n. If you use bcrypt, the encrypted values would be salted per-value, right? That would also let you leverage some of the existing code used for passwords.\n. We discussed this in person, and I was missing something. Derek is correct, and we need to handle this somewhat differently than we handle passwords.\n. I originally added the middleware. It had to go in a specific place because of how it interacted with  cookies. Rails writes its cookies in the ActionDispatch::Cookies middleware, so Clearance's middleware had to go after or cookies would get clobbered.\nIt looks like this commit moved it from cookies to params parser: https://github.com/thoughtbot/clearance/commit/f2d453648b0ef1204d56dd6fc4d1c0c7bdae4f07\nI'm not sure why that was done. It seems like it makes more sense to pair it with the cookies middleware, since it's dependent on cookie values and not parameters.\n. > This will make it clear what builds are in error.\nIt should also make the builds run in parallel!\n. The hide_action to private conversion makes sense to me.\nIt looks like some other changes were included in this pull request, and I can't figure out how they're related to hide_action being removed. Should those changes be in a separate commit?\n. Okay, that makes sense.\nI think I agree with you about removing without deprecating, but it is a little sticky. Those controller methods are included in the public documentation with no indication that they aren't intended to be called publicly. It seems like an oversight that we didn't make them private to begin with, but....we didn't.\nIt would be a huge pain to deprecate them, though, since the methods aren't deprecated. Just calling them with an explicit receiver is.\n. > We had previously split this out to https://github.com/thoughtbot/clearance-i18n/, but in hindisght I'm not entirely sure that's a great solution.\nI don't feel strongly either way, but one of the reasons we created that repo was so that we could have separate permissions. The idea was to give translators push access to just the translations.\n. This looks good to me. The before_action stuff is unfortunate, but I can't think of anything better.\n. I am in favor of this general idea.\n\nThen I thought that perhaps we should also record a \"last_seen_at\" field, which would tell us when the token was last active. That alone might be sufficient. But then that's a database write on every request. Is that worth it?\n\nIf you use a date instead of a time, it will still provide useful context but only require one database update per day per user.\n. This is a great idea.\n. Generating the header partial with the signed in/signed out logic might be nice. That seems tedious to write out for every application.\nHaving a line in the generator that checks to see if that partial is rendered from the layout might be nice, too, but is probably unnecessary.. When the user clicks \"sign out,\" they're declaring \"I no longer want to be recognized as this user,\" which is not necessarily the same thing as \"I'm not using this computer anymore.\" If this gets merged, it will definitely introduce bugs into applications which assume the session doesn't get blown away in its entirety. Things like coupon codes and shopping carts often use the session, so this would be a breaking change.\nI don't understand this scenario:\n\nbob uses a public computer where attacker has got a valid csrf token from sign up/sign in page\n\nThe risk vector is that somebody would get a CSRF token from a public computer, trick Bob into using that exact computer, and then trick Bob into submitting a form on another site which has that CSRF token embedded?\nHowever, the CSRF token should be invisible to the user, so it seems safe to rotate that as often as we want. Is there any reason to wipe away the entire session and not just the CSRF token when the user logs in and out?. @sonalkr132 I appreciate your patient and polite discussion on this issue. Security is always tricky, as it doesn't feel like many answers are obviously right, and most of us dealing with it are not really experts. It's much easier to work through issues like this when everybody takes a thoughtful approach. Thanks!. For a philosophical reason: a number of us feel pretty strongly that SSL should be enabled everywhere, all the time. We've written this up in our guides. We also have force_ssl set to true in production in our app template.. I restarted the build.. Why not add this default value in Configuration so #password_strategy never returns nil?\n. I haven't seen this before. I think it must be from the gem bundling itself, and should probably be considered a bug in appraisal. I'll see what I can come up with next time I'm working on appraisal.\n. I agree with that change, but I think it should be done separately.\n. There was a minimum length on the token.\n. Is the issue here that you're looking for an HTML fragment and have_content only checks against the text of the document?\nYou can use page.body.should include(fragment) for that situation.\n. This duplication wasn't introduced by your change, but it looks like you had to make the same change twice because of existing duplication. This may be sufficient motivation to refactor out the duplication.\n. I actually didn't notice the duplication in the strategies - I was referring to the duplicate Class.new blocks in the tests here. In both cases, you had to make the same change multiple times, which shows that the duplication is an issue.\nI think Clearance::SaltGenerator sounds like a good approach. The subject of these tests is unnamed, but you could extract a method for that, like fake_model_with_password(Clearance::PasswordStrategies::Blowfish).\n. Related to the Liskov Substitution Principle and the Principle of Least Surprise, I think needing to use User.find_by_slug! is an issue.\nThe contract of ActiveRecord::Base is that values returned from #to_param are valid values to pass to .find. This means that, if you override #to_param in a way that it doesn't work with the default .find, you should also override .find.\nThoughts?\n. For any #to_param value that doesn't start with the primary key, you'll have to override .find.\n. My two cents:\n- Left cent: ActionMailer will be magically delicious and asynchronous in Rails 4: https://github.com/rails/rails/pull/6839\n- Right cent: I think the simplest thing to do now is just extract the whole delivery into a private method, delivery_email(user). It handles every case we have right now and will definitely not cause issues.\n. The empty parenthesis look unrubyish here: anything(). I suggest dropping them.\n. Clearance doesn't actually use those gems, so I think you can safely skip them in the generated app. You can skip almost all the gemfile entries like this: rails new farfola --skip-javascript --skip-sprockets --skip-git. The only two dependencies that generates are rails and sqlite3. If you add these to clearance's development dependencies, you should be able to use --local, which is much faster and prevents versions from jumping around between individual test runs.\n. Looks like you had to make this fix in several places (Duplicated Code). Can we extract this to a new step definition, like \"When I install dependencies?\"\n. Is there a reasonable case for calling sign_in(nil)?\n. Okay; if this is a requirement because of the current API, it would probably be a bad idea to try and jam that change into this commit. Worth thinking about for the future, though.\n. The password_optional? field was intended for alternate forms of authentication (ie oauth), where users would never have passwords. In those cases, signing in with an email/password should always fail. With this change, I think you'd be able to sign in as oauth users by just guessing their email.\n. What about having separate files to require for rspec and test unit? Then\nyou don't need to check if rspec is defined, and order isn't important.\n. If you have an rspec-specific file, it can require what it needs (probably just require 'rspec').\n. Do we want to keep this file to detect and require the correct file with a deprecation warning? Otherwise, updating clearance will break your tests.\n. Thoughts on moving towards requiring things where they're used? I don't see any use of assertion error in this file, and the require is repeated for the test unit configuration.\n. Thoughts on adding a deprecation warning here so that we don't need to maintain this conditional forever?\n. You can have both minitest and rspec suites in the same codebase, so you could add one test written in minitest that requires clearance/test_unit instead of clearance/rspec.\n. Should this be replaced with a different require instead of being removed entirely?\n. Looks like this is copied into spec/support, which is specific to RSpec, so I think you can assume RSpec if they're running rails generate clearance:specs.\n. It does seem a little more intuitive to name this clearance/test_unit.rb, since we require test/unit and don't reference MiniTest anywhere. I know that test/unit actually IS minitest on some versions, but the naming just seems confusing to me.\n. In order to be backwards compatible (following SemVer), we need to continue to try and detect RSpec/TestUnit here until we've had a deprecation warning in place and then release a major version.\n. I think this would be a good conversation on the guides repo. Maybe submit a pull request suggesting one style or another, and see where the conversation goes.\n. Can we wrap this line at 80 characters?\n. Looks like this line is also longer than 80 characters.\n. I think you could improve this context by doing the following:\n- Lose the \"NOTE\" comment\n- Rename this to stub_callable\n- Add a have_been_called method that abstracts have_received(:call)\n. Would it be better if we just replaced the host?\nhttp://www.ruby-doc.org/stdlib-2.1.0/libdoc/uri/rdoc/URI/Generic.html#method-i-host-3D\n. Looks like I introduced it in 2085f03cf41a242cbbe51ddf0fbeadf32cb6bb86.\nOther rack middlewares mutate the environment instead of copying it, and they depend on getting the mutated values back in the response. I think a unit spec for that middleware would probably be better.\n. Does signed_in_user sign in? Maybe have a sign_in method and call that to make it clear that this is doing something?\n. Does Ruby warn about overriding a method from a superclass?\n. Oh, I missed that; that's definitely what it is. You're defining this class every time the test runs. You could use stub_const from RSpec, which will then clean it up after the test.\n. Should you make sure to only update the relevant password attributes here, since we're not sure the others are valid?\n. Right. The only way I know of to do this is with update_columns.\nThis would be a breaking change, but since it seems like the save/validate lifecycle of users/passwords is different, one thing you could do is split out a new table/model to represent authentication tokens and make them belong to a user. That way, you could expire/delete old tokens and create new ones without touching the user/model table and its maze of validations.\n. update_columns will work the same way, but without touching other attributes (including timestamps) or going through validations or callbacks.\nIf you want a way to update a table without messing with the model, update_columns is what you're looking for.\n. I think setting this here as a constant will mean that it won't pick up the change if you change it in something like an initializer, because the Clearance middleware stack will be eagerly loaded. Is that right?\n. Can we remove this constant entirely, or is it considered part of the public API?\n. There are a few other methods later which are related to looking at the Clearance config. What do you think about moving this method down there?\n. FYI, it was originally factory_girl-rails but enough people complained that I renamed it.\n. No, I don't think so. People may be used to the convention enough now that they won't complain.\n. Is this related to the rest of the changes?\n. Do we need the mailer sender? I found the extra information a little confusing.\n. This requires the user model to be an ActiveModel (or have model_name). I think that's reasonable, but is it already a requirement, or would this break backwards compatibility?\n. Is it worth using ensure here so that this always gets reset, even if example.run raises an exception?\n. I actually don't know how this works. If the test raises an exception or fails, does that get caught within example.run or higher up the stack? I was assuming that around errors bubbled up the same way before errors did, and that it would be reasonable to expect example.run to raise an error here.\n. What about storing a hash of the encrypted password? The token would still change with the password without leaking anything.\nI can't think of reason you wouldn't provide a user with their encrypted password, but it makes me nervous anyway.\n. Does it make more sense to do this in clearance_session? Currently, this method is a pretty straightforward delegator. Adding logic here means that you need both this module and the session object to actually sign in.. ",
    "fourcolors": "Thanks :) This helped a lot\n. ",
    "weppos": "I agree.\n. ",
    "MacksMind": "@jferris See https://github.com/thoughtbot/clearance/pull/136\n@croaky I don't think this is the same problem.\n. meh.. Just realized the pull request created a new issue.\n. Could also fix by altering reset_session.\n. Just to be clear, this is a CSRF vulnerability. The Clearance gem should should not be used with Rails >= 3.0.4 until resolved.\n. This is necessary because Rails doesn't raise ActionController::InvalidAuthenticityToken anymore. Instead the thinking appears to be that unverified requests that don't rely on session credentials are harmless. This means any gem that goes outside the built-in session mechanism for authentication needs to add extra steps to either handle_unverified_request or reset_session.\nI think the reset_session route is best. In fact I'd like to see the sign_out functionality moved to reset_session, leaving only a sign_out method that calls reset_session for backward compatibility. I don't see any reason to leave session data intact through the sign_out process.\nI'm not seeing the sign_in step in your test above. Here's what I did to test. Using this script:\ncurl http://localhost:3000/session --data session[email]=mack@agilereasoning.com --data session[password]=foobar --cookie-jar cookie.jar \ncurl http://localhost:3000/articles --data article[body]=hackedagain --cookie cookie.jar --cookie-jar cookie.jar\ncat cookie.jar\n1st run using 0.10.4. New article created even without verify token.\n```\ngaladriel:shiny(master) mack$ ./hackme.sh\nYou are being redirected.\nYou are being redirected.\nNetscape HTTP Cookie File\nhttp://curl.haxx.se/rfc/cookie_spec.html\nThis file was generated by libcurl! Edit at your own risk.\nlocalhost   FALSE   /   FALSE   1334632818  remember_token  ab758435c3413b1796933ee3231df84caca4cf80\nHttpOnly_localhost FALSE   /   FALSE   0   _shiny_session  BAh7ByIPc2Vzc2lvbl9pZCIlNGJlOTI3NmZiMmJhMTRhYjAzM2FjOTUwY2VmMTExMDMiCmZsYXNoSUM6JUFjdGlvbkRpc3BhdGNoOjpGbGFzaDo6Rmxhc2hIYXNoewY6C25vdGljZSImQXJ0aWNsZSB3YXMgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWQuBjoKQHVzZWRvOghTZXQGOgpAaGFzaHsA--4ca1b88442fbd541141e6f1a859c2fb5ab79883e\n```\n2nd run using HEAD (7c5af12). Redirected to sign_in and remember_token deleted.\n```\ngaladriel:shiny(master) mack$ ./hackme.sh\nYou are being redirected.\nYou are being redirected.\nNetscape HTTP Cookie File\nhttp://curl.haxx.se/rfc/cookie_spec.html\nThis file was generated by libcurl! Edit at your own risk.\nlocalhost   FALSE   /   FALSE   1   remember_token  \nHttpOnly_localhost FALSE   /   FALSE   0   _shiny_session  BAh7ByIPc2Vzc2lvbl9pZCIlZjQ2OGMwNzEwYmRhODI5Yzk0YmE1ZDgzY2I2MTljZjgiCmZsYXNoSUM6JUFjdGlvbkRpc3BhdGNoOjpGbGFzaDo6Rmxhc2hIYXNoewY6DGZhaWx1cmUiLllvdSBtdXN0IGJlIHNpZ25lZCBpbiB0byBhY2Nlc3MgdGhpcyBwYWdlBjoKQHVzZWRvOghTZXQGOgpAaGFzaHsA--c61e10bbdab007eaaf0dfe9facfac9152d56fc77\n```\nLooks like a win!\n. Do you need anything else from me before you release this?\n. Yes that's right. Here's a summary:\n10.4, Rails <= 3.0.3, no token = raise exception\n10.4, Rails >= 3.0.4, no token = success because session cookie deleted but not credential cookie\n10.5, Rails >= 3.0.4, no token = failure because both cookies deleted\nSide effect of Rails change is requests that don't rely on preexisting credentials don't get CSRF protection. Whether that's good or bad can be debated elsewhere. Devs can always change handle_unverified_request to suit them.\nThis is semi-OT, but I'm saying sign_out and reset_session should be one and the same based on principle of least surprise.\n. Works for me. Just need to close the CSRF hole.\n. ",
    "janxious": "Bump.\n. I have updated the repo to reflect your requests. \nIn re-exploring the code, I found there is a test file I didn't change I maybe should have. \u2018passwords_controller_test\u2019 should maybe have a new test for this case? I don't know how much it matters to have it since there's a unit test and a cucumber test for it.\n. And thanks for the good and quick response!\n. Any thoughts on the changes I made?\n. Cool. Thanks.\n. Updated to reflect your requests.\n. ",
    "huug": "First the 'sign_in' and 'sign_out' paths are defined twice... and I want them in dutch.\nSecondly I don't think it's a good practice to have routes in the application that are of no use.\n. You can disable them, by bundling the gem to the vendor folder and removing the routes file.\n. ",
    "fbjork": "So there's no way of disabling the default routes?\n. ",
    "schwarz": "What is the status on this? I'm currently working on something and thinking about using clearance, I'm already using has_secure_password in Rails 3.1\nThanks\n. I've looked into this and discovered a few problems.\nSecurePassword:\n-  uses a different column (password_digest vs encrypted_password)\n-  doesn't salt/other fancy stuff\n-  validates confirmation of password\nUpgrading:\n- check on login would slow down, possible fix would be trying to authenticate with bcrypt and only if this fails match the password to see if it is a legacy password\n- A lot of legacy code would remain in the codebase to allow this\n- Do you want to keep using: generate_hash(\"--#{salt}--#{string}--\") ? Bcrypt alone should be safe enough\nIMO the best option is to switch to SecurePassword completely and drop all legacy code, then force a password reset.\nWe shouldn't punish new apps with a huge codebase.\n. ",
    "vandrijevik": "A couple of notes on the problems that @adabei mentioned:\n- ActiveModel::SecurePassword uses bcrypt-ruby, so salting is done automatically as a part of the BCrypt::Password.create call. It does not require a separate database column.\n- validates_confirmation_of only happens if password_confirmation is not nil. Neither views/users/_form.html.erb nor views/passwords/edit.html.erb include that as a form field, so the validation by default will not happen with Clearance.\n. I've taken the first steps towards introducing BCrypt into Clearance by extracting all SHA1-specific code out of the User module here: https://github.com/thoughtbot/clearance/pull/167\nThis allows for the flexibility of introducing something like Clearance::PasswordStrategies::BCrypt and making it the default in the generator (so new Clearance installs get BCrypt), while staying backwards-compatible with existing installations.\nSolving the migration path problem can then be expressed as Clearance::PasswordStrategies::SHA1WithMigration, that can be a standard part of Clearance (and does the work mentioned by @croaky for switching users over in its #authenticated? call), but also allows users who want to take a different approach the freedom to do just that (because they can write their own password strategy and tell Clearance to use it instead).\nWould love to hear your thoughts on this before I proceed with writing BCrypt support, and potentially the migration strategy.\n. @croaky Agreed on the API.\nAlso, if someone really wants to use Rails's SecurePassword, they can always write their own password strategy which wraps it (and sets up alias_attribute, etc.), though I don't think it's worth it.\n. Since #authenticated? receives the cleartext password as a parameter, I think all of the above can be encapsulated in the strategy, and the controller doesn\u2019t need to know anything.\nSomething like this:\n```\nmodule Clearance\n  module PasswordStrategies\n    module BCryptMigrationFromSHA1\n  def authenticated?(password)\n    if legacy_encrypted_password?\n      if authenticates_with_legacy_password?(password)\n        self.encrypted_password = ::BCrypt::Password.create(new_password)\n        true\n      else\n        false\n      end\n    else\n      ::BCrypt::Password.new(encrypted_password) == password\n    end\n  end\n\nprivate\n  def legacy_encrypted_password?\n    encrypted_password =~ /^[0-9a-f]{40}$/\n  end\n\n  def authenticates_with_legacy_password?(password)\n    if RUBY_VERSION >= '1.9'\n      encrypted_password == Digest::SHA1.hexdigest(\"--#{salt}--#{password}--\").encode('UTF-8')\n    else\n      encrypted_password == Digest::SHA1.hexdigest(\"--#{salt}--#{password}--\")\n    end\n  end\nend\n\nend\nend\n```\nThis is just an illustration of the idea, it would probably be better to add class SHA1User and class BCryptUser inside the BCryptMigrationFromSHA1 module, each of which includes the appropriate password strategy, and rely on those in the authenticated? call and to copy over the encrypted_password when necessary, so we rely on the existing password strategies instead of duplicating code here.\n. Could you provide a little more explanation behind that decision for other people interested in developing against the clearance gem, like me? It certainly strikes me as odd.\nCheers!\n. Is there a problem with this pull request, or has no one looked at it yet? I'd like to move forward with a BCrypt implementation if you agree with this direction.\n. That\u2019s a fair point.\nI always go back and forth on whether defaulting of options should happen in the Configuration object, or the place the option gets used.\nAfter reading http://robots.thoughtbot.com/post/9888374844/a-paperclip-refactoring-tale-part-one-dependency I had decided to follow the convention used there ((options[:string_geometry_parser] || Geometry).parse(geometry) instead of options[:string_geometry_parser] ||= Geometry) since this is a thoughtbot project.\n. ",
    "gabebw": "Closing this since #198 deals with it.\n. Closing this issue since #200 is the related pull request.\n. Fixed in #197.\n. Just fixed this. Thanks for pointing it out!\n. Hi,\nUnfortunately, we don't use Devise much -- we prefer Clearance :) -- so I did a quick Google search, but I couldn't find anything useful. If you do end up doing it, a quick guide on the (https://github.com/thoughtbot/clearance/wiki)[Wiki] would be tremendously well-received, I'm sure.\n-- Gabe\n. What version of Rails are you using? If you do rails console, then just type Clearance, does it find the constant, or does it crash?\n. Huh. Can you paste the contents of ApplicationController? I'm not sure why that file wouldn't find Clearance when the constant is clearly being found in the Rails console.\n. @croaky, @mike-burns: Any ideas?\n. @mike-burns: I updated NEWS.md - I think the README updates cover what people will ask about. Do you think it needs more documentation?\n. Updated the README some more.\n. Closing without merging. After taking a look at ActionDispatch::Request#cookie_jar, I don't think there's actually a way to get a nil value into the cookies, short of stubbing.\n. Why?\n. Didn't mean to close.\n. My mistake - Cucumber actually picks up on top-level cucumber.yml files.\nI certainly learned something today.\nClosing.\n. :+1:\n. :+1:\n. :+1: ... after the stuff I mentioned above is fixed :)\n. :+1:\n. The commit message has nothing to do with what it's actually doing - did something go wonky?\n. My bad! :+1:\n. I think the build might have been failing for months, but Travis didn't notice because it had an outdated API key. I updated it a few hours ago and it looks like it's failing on master as well.\nThis branch will be the \"get Travis CI passing\" branch.\n. I'm puzzled. If I leave in before_script: \"bundle exec rake db:migrate\", Travis complains that the db:migrate task doesn't exist.\nIf I remove the before_script, then I get a lot of errors like this:\n1) User \n     Failure/Error: it { should have_db_index(:email) }\n     ActiveRecord::StatementInvalid:\n       Could not find table 'users'\nI can reproduce both errors when running locally.\nThe before_script error can be seen here: https://travis-ci.org/#!/thoughtbot/clearance/builds/2950191\nThe \"no users table\" error can be seen here: https://travis-ci.org/#!/thoughtbot/clearance/jobs/2950181\n. Travis is now passing: https://travis-ci.org/#!/thoughtbot/clearance/builds/2981035\nAny comments?\n. Joe, no it won't.\n. I'd squash these into 1 commit. Otherwise :+1:\n. I have a few comments - but I'm not sold on this PR in general. Why would I use it? Is it for n-step login wizards? Or is it for replacing user.confirmed? && user.cool? && user.not_a_haxxor? in SessionsController with three single-purpose classes, one per condition?\n. Guards is a much less confusing name, and so is stack.\n. I like Joe's solution.\n. Love it. The authorize name always kind of bugged me, since Clearance is an authentication library, not an authorization library.\n. :+1: \n. Typo: firts\n. Oh it's fixed in the actual commit.\n. :+1: \n. Can we write tests for this, or this is inherently untestable?\n. I suppose this is OK then.\n. I am not particularly security minded.\nThat said, this is a Rails default and we don't NEED to turn it off for anything we do. If someone's relying on this, that probably points to a security flaw in their app, right?\n. I'm a big fan. If Clearance weren't stubbing the view SUT, I'd do it, so this is just pure convenience.\n. I don't run this project, but I want you to know that I personally, morally, ethically etc approve these changes.\n. Out of context, I'd say yes, fix it, but I don't know the general coding style on this project (Hound can be out of date) so I defer to @derekprior.\n. :+1: \n. Hey great! :+1: \n. Ooh, nice. I'll do that now.\n. Any ideas on a better name than current_user_matches_block?. The current name feels clunky.\n. I prefer to have a space after the !, thankyouverymuch.\n. Nice. Thanks for pointing out exactly why it felt like a weird name to me.\n. Done!\n. Done!\n. Done!\n. Done!\n. Oh, good catch. I like namespacing the constraints, the same way we did Clearance::PasswordStrategies.\n. Fixed.\n. I think you should expand on this and say something like \"Run the following migration before switching password strategies, or it'll break\".\n. Can you assign a variable called branch instead? The triple-nested conditional is hard to read.\n. Can you just require cucumber/rails instead of cucumber/rails/X,Y,Z?\n. Why is it multiplied by 5? Also, this comment can probably be removed.\n. Is this a magic file that Rails uses? If not, I'd just remove it or put this information in the README.\n. Is this from Diesel? I've never seen inject_into, only inject_into_file.\n. Oh, never mind.\n. I'd keep this as user_table_exists with no arguments, since it's only used once, to check the existence of the :users table.\n. Where is this used?\n. This reads oddly when capitalized. :+1: for better documentation though.\n. Remove this blank line.\n. Remove this blank line.\n. Plus, new_indexes assumes you're dealing with the users table anyway.\n. Maybe a better name is migration_name_without_timestamp?\n. I think that's enough magic to deserve a comment.\n. What about making this if file_does_not_contain, since this is the only place it's used?  .any would then become .none?\n. I think the question mark got lost when this method was renamed.\n. This should probably go in the NEWS file, in case people subclassed PasswordsController and are confused when their app starts breaking when they upgrade.\n. Please remove these blank lines.\n. This should be broken up into >1 line too.\n. Can this just be t(\".introduction_paragraph\")? Do we frown on that? Same for the other t() in this file.\n. Does this work if you just do t(\".sign_out\")? If not, can you change the locales file so it does?\n. Why did you remove these labels etc?\n. Oh, I see, that's covered by the locales file automatically. Neat!\n. I wouldn't capitalize \"Locale\" here.\n. What about putting params[:.....] inside backticks: `\n. Can the quotes here be removed?\n. I think this can just beSpeed up tests, or evenFaster tests`.\n. Okay first of all: Thank you for documenting this. I love it. :sparkles:\nThis paragraph can be shorter:\nClearance includes middleware that avoids wasting time spent visiting,\nrendering, and submitting the sign in form. It instead signs in the designated\nuser directly. The speed increase can be\n[substantial](http://robots.thoughtbot.com/post/37907699673/faster-tests-sign-in-through-the-back-door).\n. @lgrains Please open an issue for any problems you're having.\n. Yeah, I agree with Greg. Let's one-line it.\nAlso, what about changing it to can_sign_up instead?\n. Do -> To\n. Also, how about adding some example uses? E.g. capping users, admin-only systems, ...\n. Nice solution. Very clean.\n. I think there should be parentheses around :all here and below.\n. I think there should be spaces on the inside of the {} - it's only one space here, and two on line 18. Let's do it like line 18 everywhere.\n. I'd like to rename the attr_writer the same thing, so that it's (e.g.) config.sign_up_allowed = true, which reads better than config.sign_up = true to me.\n. Or: config.sign_up_enabled = true, which reads even better.\n. Sure, that works too.\n. G2\n. This is kind of confusing - are you calling call on an array?\n. Why not deprecate now?\n. your email address\n. I kept that so that people don't have to read bin/setup to learn how to run specs after setting up.\n. Oh, I see now. Yeah, I like that.\n. Can we remove this module too, since everything is already loaded by this point?\n. Why not use + instead of \\ so it's just basic string concatenation?\n. Oh, probably. Then I'm evenly split between \"Just remove this and add it when you start adding RDoc\" and \"Might as well leave it in.\"\n. Maybe you want Array<#call>?\n. Does this warning get output when this file is required, or when this module is included? It looks like it's when this file gets required. Given that, perhaps add \"require clearance/testing_controller_helpers rather than clearance/testing/helpers\"?\n. Or! Wrap this warning in included do\n. Whoa, extend is an expression? What does it return? \n. Perhaps type: :view on this line would make it easier to figure out exactly what it's testing?\n. Also, do you want a type: :helper spec to test that it's included in helper specs too?\n. Oh, so this is extending the Class.new? So it's...returning the extended anonymous eigenclass of an anonymously defined class?\n. > I don't expext users to see this deprecation. If they do, it's likely that they'll want to know both what to require instead AND what they should be including once they have done so.\nYes, that was my thought too. Given that they likely won't see this, I don't know how fancy this message needs to be, but I think adding \"require clearance/testing/controller_helpers instead\" would help them.\n. I guess this works then. \n. Eigenclass: http://madebydna.com/all/code/2011/06/24/eigenclasses-demystified.html\n. I'd remove this comma.\n. I'd remove \"already\" here.\n. Maybe Use {Clearance::PasswordStrategies::BCrypt}, i.e. link to the actual module?\n. Same here - what about linking to the module?\n. How about linking to the BCrypt module?\n. I prefer parentheses:\n\nThe BCrypt cost (the measure of how many key expansion iterations BCrypt will perform) is automatically set...\n. \n",
    "dapplebeforedawn": "\" Is your class actually called MyUser\" - yes, close enough\nI'll put together a patch, doesn't seem like it should be too technical, ::User only appears in 3 files.\n. ",
    "ZhangHanDong": "ok, thanks!\n. ",
    "sc932": "More info if needed:\nI'm executing all of this in the main directory of an application that I am writing. The app works fine with all the default gems.\n$ gem env\nRubyGems Environment:\n- RUBYGEMS VERSION: 1.3.7\n- RUBY VERSION: 1.8.7 (2010-08-16 patchlevel 302) [x86_64-linux]\n- INSTALLATION DIRECTORY: /var/lib/gems/1.8\n- RUBY EXECUTABLE: /usr/bin/ruby1.8\n- EXECUTABLE DIRECTORY: /var/lib/gems/1.8/bin\n- RUBYGEMS PLATFORMS:\n  - ruby\n  - x86_64-linux\n- GEM PATHS:\n  - /var/lib/gems/1.8\n  - /home/sc932/.gem/ruby/1.8\n- GEM CONFIGURATION:\n  - :update_sources => true\n  - :verbose => true\n  - :benchmark => false\n  - :backtrace => false\n  - :bulk_threshold => 1000\n- REMOTE SOURCES:\n  - http://rubygems.org/\nCheers,\n Scott\n. OK, figured it out. You need to run\n$ bundle install\nafter adding that line to your gemfile.\nHopefully this helps some other newbies :)\n. ",
    "janetchang": "I got the same error running rails generate clearance:specs. When I run rails g, these are listed:\nClearance:\n  clearance:features\n  clearance:install\n  clearance:views\nIs clearance:specs only in the 1.0 version?\n. ",
    "jeremyolliver": "Yes, I did figure out I didn't actually need this route in my routes file as clearance has it's own defined inside the engine. Checking back on the readme, the code is correct, I was just mislead and thought it was part of the setup instructions while skimreading. Perhaps renaming the example controller in the readme to one that's not named the same e.g. CustomLoginController or something similar.\nSeparating the customisation out to the wiki, and keeping the readme to basic installation instructions also sounds like a pretty good idea.\n. ",
    "sowbug": "Perfect -- thanks! After filing the issue I did see that the wiki included the Cucumber setup step, so an advanced newbie would have figured it out. Thanks for bubbling it up to the README.\n. ",
    "iros": "Thanks for the suggestion. Overwriting deny_access in application controller did not do the trick, it still routed through the original one defined in clearance so I had to change it. I've gone through and changed quite a few things about clearance for my own purposes (that aren't pushed) to use respond_with which has been handy. \nThanks,\n-- Irene\n. ",
    "Mab879": "It is currently passing with or without the change. I don't any error when running the tests.\n. ",
    "highwaybobbery": "odd. I just started seeing the same issue. adding 'Given' and 'And' did fix the issue. I wonder if this is required in newer cucumber?\n. ",
    "danhodge": "Good point, the circular dependency doesn't prevent the user_model from being specified as a constant, as long as it isn't referenced until after the class is defined. I've fixed the code.\n. ",
    "brendankemp": "I did this when I started a new project, and I got a deprecation warning when running the clearance cucumber steps. I see now though that a deprecation warning is preferable to breaking compatibility with people running older versions of capybara.\n. ",
    "MDaubs": "The deprecation was committed in cucumber/cucumber@b8b8533097.  cucumber-rails ~> 1.1.1 should do the trick.\n. ",
    "denispeplin": "I think that tests are passed because Webrat uses test simulation, and it does not work exactly like a browser.\nSelenium can be used to make tests fail, because it will use a real browser.\n. Please look at recent commit.\nIt should work, but it does not work for me as expected.\ncucumber --tags @javascript  is green, and this is from test.log:\nServed asset /defaults.js - 404 Not Found (2ms)\nStarted GET \"/\" for 127.0.0.1 at 2012-01-27 23:25:30 +0400\nThat is exactly what I see in browser: GET request for sign_out.\nThe only thing left is to make cucumber know about this, because for now it still green.\n```\nbundle exec cucumber --tags @javascript\nUsing the default profile...\nDEPRECATION WARNING: The InstanceMethods module inside ActiveSupport::Concern will be no longer included automatically. Please define instance methods directly in User instead. (called from include at /home/den/railsdesk/app/models/user.rb:2)\n@javascript\nFeature: Sign out\nIn order to protect my account from unauthorized access\n  As a signed in user\n  I want to sign out\nScenario: User signs out                      # features/clearance/visitor_signs_out.feature:8\n    Given I am signed up as \"email@example.com\" # features/step_definitions/clearance/clearance_steps.rb:3\n    When I sign in as \"email@example.com\"       # features/step_definitions/clearance/clearance_steps.rb:34\n    Then I should be signed in                  # features/step_definitions/clearance/clearance_steps.rb:114\n    When I sign out                             # features/step_definitions/clearance/clearance_steps.rb:49\n    Then I should be signed out                 # features/step_definitions/clearance/clearance_steps.rb:119\n1 scenario (1 passed)\n5 steps (5 passed)\n0m7.859s\n```\n. ",
    "thoughtpunch": "Thanks!\n. ",
    "mjankowski": "Force pushed with an updated commit msg changing the 2.3.2 to 3.2.3, whoa.\n. Squashed down to two handsomely worded commits, pushed again - will merge in tomorrow AM.\n. Thoughts on clearance defining an override-able or config-set-able method which wraps the finder here, so that apps could override that instead of overriding #find ?\n. > There's a contract between ActiveRecord::Base and its consumers that to_param provides a useful String value that can be passed to find\nI'm not sure that's a safe assumption or a contract that's spelled out anywhere?  I view to_param as \"override this to generate URLs\", and not \"override this to create things which find will consume\"...?\nI could see a case to be made for a rule like \"if you are using to_param to generate things that find cannot consume, you should also add a from_param method to your class\", or something along those lines.\nAnd that's what my clearance proposal would be:\n- Add a :finder_method or similar config option to clearance\n- This defaults either to find, or to from_param (clearance would provide an impl which just wraps find)\n- Apps can set that option or override from_param\n. RE: the \"contract\" point specifically -- the method IS defined in ActiveModel - https://github.com/rails/rails/blob/master/activemodel/lib/active_model/conversion.rb#L64 - but the intent to me seems very much about producing things for actionpack to consume, not for producing things for find to consume.\n. I think this feature idea.\nI'm tempted to call it scope creep and just say to skip it and keep clearance simple ... but I think wanting to do handle sessions like this is a totally reasonable not-extravagant thing to want in our modern era of smart devices and IoT.\nI share your same exact concerns on things like IP/Location tracking, UA-naming, etc ... might be worth looking for prior art in these areas so we can depend on something.  I could also see core clearance doing the simplest version of this which might work (just UA strings and IPs?) and providing nice hooks for people to improve that experience ... maybe even provide a clearance-fancy-sessions package which does some of it?\n. Thanks for this idea! Resolved by https://github.com/thoughtbot/clearance/pull/800. I'm not THE maintainer but I can take a look at this later, thanks for updating!. @dholdren - I updated the other PR with a rebase against master, and also made you the git author of the code changes portion of the PR. The result of that is we get more or less the spec changes from my other PR and more or less the code changes from this PR. I'll plan on merging that and closing both PRs and related issues in the next day or so.. Closing after https://github.com/thoughtbot/clearance/pull/804 merge. Rails 5.1 testing support found it's way in as a side effect of this - https://github.com/thoughtbot/clearance/pull/799\nIf there were more changes here which I missed, can you re-open this?. Thanks for this idea! Resolved by https://github.com/thoughtbot/clearance/pull/800. I didn't see this before I made this - https://github.com/thoughtbot/clearance/pull/798 - but this one is a subset of that one, so alas, here we are.. @soniaprevost can you provide a minimal spec to replicate this behavior (or a minimal sample app)?\nAlternately - does your app override any auth-related methods from clearance? Things like current_user or signed_in? and so on.... I'm going to close this on the assumption that the last comment resolves this issue for you. Please re-open if that's not the case.. I started this as a branch off of your \"2.0\" branch, thinking I'd continue that work ... but part way in realized that this might be fine against master.\nIt makes sense to me that 2.0 would be approximately this collection of versions in terms of support, but I'd also be fine calling this just an improvement in testing (at a minimum, it gets rails 5.1 and 5.2 into the matrix and will spot issues there...). I don't THINK there's anything here yet which would make a new 1.x release from master a problem.. Sort of related ... is it intentional that PRs don't generate travis builds?\nEdit: might just be webhooks catching up.... Sounds good ... I think I might push this in as a 1.x tidying, and then do a once over on open PRs and the 2.0 branch to see how things stand there.. In theory the removal of the rails requirement should just be a silent change that doesn't impact anything ... I guess there could be someone who was unknowingly relying on clearance to pull in part of rails for them or something?\nEither way - thanks for reminder. Yes, I'd like to do a release soon which gets out at least the stuff in master since last release, if not a full 2.0 rc release. Will review soon.. Thanks.. > why not just comment on\nFair point -- if I recall correctly, I started down the path of rebasing the branch from that PR, thinking it was going to be a quick update that I could review/merge once ready. I wound up refactoring/adjusting more things than I felt comfortable just changing over there, so went this route instead.\nAfter your rebase it looks like the code changes in both are nearly identical, and they differ only in the approach to spec coverage.. > I'm not sure on the best way to write a test around this because it requires the user to run the generator twice\nThere is an acceptance spec where we run a full installation, and part of that involves basically just running command line steps. You might want to look there for a start and see if running the generator twice from in there will get you the state you want to verify that this change works.. It'd be good to see a test here - and it might be the case that the changes from https://github.com/thoughtbot/clearance/pull/804 have the side effect of fixing this cookie domain issue as well?. The other changes are merged here - if you want to rebase this to only cover the deletion scenario and add some specs (and confirm it's still an issue).. Is the desired behavior here that instead of just doing a dumb copy of this template - https://github.com/thoughtbot/clearance/blob/master/lib/generators/clearance/install/templates/db/migrate/create_users.rb.erb - you would instead want the clearance-generated migration to run \"through\" the rails migration generation stack, so that options like that were applied?\nThis would be the equivalent of running rails g migration CreateUsers email:string ... instead of doing the copy? (and thus, rails would generate the migration instead of clearance copying a migration). Did you figure this out - or still an issue?\nAre you trying to just do a straight POST request without any previous requests to the site ... or are you running this command after first having requested the \"new\" (sign in) page?\nSeparately - if what you are trying to do is essentially \"API access\" via the command line with curl, you could set up a controller which disables the authenticity token (and optionally has some other requirement like a pre-shared API token). Is this still an issue for you? Can you provide either a minimum app setup to replicate - or give a little more detail about the versions of ruby/rails/etc you are using where this happens?. Thanks for the report.\nCan you provide some (redacted if needed) test code that was working on 1.16.1 and now fails? Alternately, can you provide a failing spec against clearance itself?. Thanks ... and yes, a local git bisect reveals this commit as the first one where your tests fail - https://github.com/thoughtbot/clearance/commit/cf1f03c1fc045048306de84995cd3ed06675ed31\n. Possibly related (or same issue) as https://github.com/thoughtbot/clearance/issues/821\nCan you give sample code of what broke?. Thanks. Does it appear to be setting the cookie but not setting in the session in the req that should have signed in?. I'm having trouble replicating this in local apps. I've got one app which just relies on the clearance controllers directly, and another that subclasses them. Both have test suites which exercise signing in and out, and the suites pass. I've also confirmed manually that I can sign in/out of the running apps locally while using 1.16.2.\nMy suspicions are that there's at least one and maybe two issues related to either:\n\nChanges made around interaction between custom domain settings and how we set cookies\nChanges made to fix a bug that set too many cookies which moved cookie setting into the middleware and out of the controller level\n\nCan you confirm further:\n\nDoes rake middleware include Clearance::RackSession ?\nAre you modifying the domain clearance sets cookies on (or otherwise doing anything interesting with domains in your app, I guess)\nAre you sub-classing clearance controllers, or just using straight up\n\nBeyond that - getting either of a) minimal sample app to reproduce issue, b) clearance fork/branch which adds a failing spec - would be great.\nI will continue to attempt to replicate locally.. It's possible that there are other params set from the form, if user overrode view or something. \nSo the approach is to explicitly set the stuff we know about, and do the best we can to preserve prior behavior for anything else in the params. \nSent from my iPhone\nOn Apr 4, 2012, at 22:36, Dan Croakreply@reply.github.com wrote:\n\n\n@@ -31,4 +31,13 @@ def flash_failure_after_create\n  def url_after_create\n    '/'\n  end\n+\n-  def user_from_params\n-    user_params = params[:user] || Hash.new\n-    email, password = user_params.delete(:email), user_params.delete(:password)\n-    Clearance.configuration.user_model.new(user_params).tap do |user|\n\nThe goal is to explicitly set the attributes and not use mass-assignment? It seems like passing user_params to .new is unnecessary.\nHow about something like this?\ndef user_from_params\n     Clearance.configuration.user_model.new.tap do |user|\n       user.email = params[:user].try(:delete, :email)\n       user.password = params[:user].try(:delete, :password)\n     end\n   end\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/thoughtbot/clearance/pull/188/files#r648700\n. That seems crazy.\n. Is there an adverse effect to just always passing the domain here? If the value is nil ... what happens?. Maybe extract the content check part of this to a separate well named method - user_model_includes_clearance? (or something)?. \n",
    "jacortinas": "What's going on here?\n. ",
    "refurbished": "Sorry about that:\nRails v.3.2.3\nConsole output:\nLoading development environment (Rails 3.2.3)\nirb(main):001:0> Clearance\n=> Clearance\nirb(main):002:0>\n. Contents of app/controllers/application_controller.rb:\nclass ApplicationController < ActionController::Base\n  include Clearance::Authentication\n  protect_from_forgery\nend\n. I blew everything away and reinstalled from scratch.  That seemed to resolve the issue.  Not sure what happened there, but thank you for the responses.\n. ",
    "qtpi": "I had the same issue, I had a minimised terminal running the rails server while I was developing. Just restart the server and the problem should be solved.\n. ",
    "superacidjax": "The solution is simply restarting the server.\n. ",
    "ryw": "I'm starting a new Rails/Backbone project (yes I bought the Thoughtbot book!), and I'd like give Clearance a try - do you expect to merge this pull req in soon? I'd like to use BCrypt over SHA1.\n. ",
    "harlow": "This has been merged into master\n. Translations have been moved to locales file\nhttps://github.com/thoughtbot/clearance/pull/231\n. Hi Joel, sorry for the delayed response. Are you still getting the same error. If so please let me know and I'll try to dive in deeper on the issue.\n. OK thanks for the follow up. Closing the issue.\n. Right, that makes sense. Thanks\n. Hi @aayalur here is a solution to adding a custom sign out url.\nAdd a new route to your routes.rb file. This will route the sign_out_path to your new SessionsController\n``` ruby\nconfig/routes.rb\nmatch '/sign_out' => 'sessions#destroy', as: 'sign_out', via: :delete\n```\nThen in the newly created SessionsController implement the url_after_destroy method which will return the root_url \n``` ruby\napp/controllers/sessions_controller.b\nclass SessionsController < Clearance::SessionsController\n  private\ndef url_after_destroy\n    root_url\n  end\nend\n```\n. For some reason the PR doesn't seem to update when i make changes to the branch. For branch diff look here:\nhttps://github.com/thoughtbot/clearance/compare/master...hrw-generate-specs\n. Has been merged into master\n. this is the output the users sees when the command rails g clearance:install is run. \n. Yes totally. The unloadable makes sense when we're developing locally but not needed for gem itself. I've taken it out of high_voltage. Merge away!\nHarlow\n\nHarlow Ward\n805-450-5522\nOn Mar 25, 2013, at 8:26 PM, Dan Croak notifications@github.com wrote:\n\nI think we have to merge this given the issue unloadable is causing on Rails 4 / Ruby 2 apps. The tests are passing on all versions of Ruby / Rails we support and I've tried this locally on a Rails 4 / Ruby 2 app as well as one of our clients' Rails 3.2.13 / Ruby 1.9.3 apps.\nAgree?\n\u2014\nReply to this email directly or view it on GitHub.\n. I've had the requirement on two of my client projects, and now I'm having to repeat the steps again for the project I'm working on -- I'd say its causing me pain at this point. This may not be the same experience for others though.\n\nThe other side-effect thats nice here about it being a config var in your app is if you start in \"Invite only Private Beta\" and then move to \"Public Registrations\" it should just be a matter of just removing config.allow_registrations = false.\n. @croaky forgive my ignorance here; can you give an example of how the global state could be an issue? Also are there any alternatives?\nI believe it will be less code... but I could be wrong.\nIn my mind here are the steps I'd need to take with current Clearance:\n- Generate the views into my project,  Remove the link to the sign up page\n- Create a Sessions controller that inherits from Clearance controller, Override the action for new\n- Create routes that now point to the new controller\n. Looks good Greg. :thumbsup: \nOne note from our style guide -- I think the thought behind this is we can introduce bugs by doing sweeping changes in code to match the style guide.\n\nDon't rewrite existing code to follow this guide.\n\nhttps://github.com/thoughtbot/guides\n. From what I've read its the convention in Rails for generators\n. this was legacy from Diesel gem. I'll just create a well named token here and remove the comment\n. create_migration('add_clearance_to_users.rb', config) needs a class method called next_migration_number to create the timestamp in the file name\n. Just checked and we don't use this step in the project. Will remove.\n. doesn't seem to work. get errors when only including cucumber/rails\n. I'm tempted to choose another word entirely -- something like fails so the positive/negative scenarios don't visually look so similar.\n. good catch. I'm not sure i've been totally consistant with that so will do a clean sweep\n. I like explicitly stating what we're looking for in the scenario... this way the scenarios and the expectations in the code are aligned. However, your example is very clean and easy to read. Will think about this some more.\nruby\nVisitor signs up\n  with valid data\n  tries with an invalid email\n  tries with a blank password\n. yeah its not super clear: https://github.com/thoughtbot/guides/tree/master/style#formatting. Might be worth adding so we have a policy.\nHere is loosely what I've been following:\n``` ruby\n  # 1 argument\n  say 'hello'\n# 2+ arguments\n  say 'hello', 'goodbye'\n# nested method calls\n  say all_caps('hello')\n# when assigning to a variable\n  message = say('hello')\n# multi line arguments\n  say(\n    'hello',\n    'goodbye',\n    etc\n  )\n``\n. Not sure if I feel strongly either way. Nice to have for cuc users, but seems like we're going in the direction of rspec only so I doubt we'd use them anymore.\n. I did this intentionally so we can do things likesign_in_as create(:user, :admin => true)or other types of users. What are your thoughts, could it be abused as a public interface?\n. Cool, removing\n. Thinking about this some more -- the developer on a project using this could just create their ownsigned_in_adminif they needed that functionality\n. cool, added\n. the:at the end causes the issues. Rails mistakes it as part of the has key name\n. Not sure if there is a better way to do this. When matching the string on an HTML page capabara was looking for the HTML tags too. Used Nokokgiri to remove the HTML from the string.\n. Yes, this probably should have been in its own commit -- its a patch to my last commit. I somehow missed it in the last commit for generators. It is used here: https://github.com/thoughtbot/clearance/blob/master/lib/generators/clearance/views/views_generator.rb#L6-6\n. Cool, will give this a try\n. Totally open to options here. If you think grabbing both vars is a good compromise until the next release I'm cool with that. The only thing that will be weird here is the button will not have the correct text for anyone who wants to use the locales -- so the integration tests won't pass.\n. Feels like this should be moved into the partial, so the whole form is in the _form.html.erb similar to (lib/generators/clearance/templates/simple_form/sessions/_form.html.erb)\n. remove line-break after\n. Extract form into partial for consistency with other _form.html.erb files\n. Any reason that the CSS include isn't here? Maybe move JS tag to bottom\n. Might be clearer to useremember_token.present?so that we're querying for a true/false conditional.\n. is it worth memoizing theremember_tokenmethod? May not be much of win -- not sure what the implementation ofcookiesis.\n. @lgrains is it possible that you have this in yourspec_helper.rb`?\nruby\nRSpec.configure do |config|\n  config.expect_with :rspec do |c|\n    c.syntax = :expect\n  end\nend\nThis would make it so that RSpec doesn't recognize the should method. The Clearance specs should probably be updated to use the expect syntax.\n. ",
    "aripollak": "Closing in favor of pull request #221.\n. s/an/and/, s/by/but/\n. This is a good idea, but doesn't it run the risk of exposing the existing encrypted password since MD5 isn't supposed to be particularly secure? That's a very edgy case, but it could theoretically be exploited in the same way that this PR is fixing? What about using the user's updated_at or a new field that keeps track of the last password reset time?\n. ",
    "rolftimmermans": "Although this is a good idea from a security perspective, the user experience is pretty poor. Users frequently forget which email address they used, and this makes it pretty much impossible to reset their password if they are uncertain about it.\nIs there interest in making this configurable? If so, we can submit a pull request for it.\n. ",
    "derekprior": "I feel pretty strongly thiat this is an important security feature. I think a better way to improve messaging would be to deliver an email to the provided address which says something like \"you tried to reset your password but we don't have a user with this login\"\nThis way we keep the security but have some indication to the user of what happened. \n. I didn't realize that this conversation had continued. I just took a quick stab at allowing the finder method to be injected based on the conversation @calebthompson, @mjankowski and I had. See the diff.\nI tend to agree that we should override find.\n. I'm not familiar with unloadable, but a google search pointed to a blog post from @croaky that says:\n\nIn development, all your classes are constantly reloaded. This makes sense for your app, but not for your engine classes or modules.\nWe added unloadable to our Clearance module to fix this. Again, credit goes to Nick.\nIf you see errors like the following, you might consider a similar approach.\n\nhas been removed from the module tree but is still active \n\n\nSo, that begs the question: are we trading one problem for another with this change?\n. Looks good to me. I have fixes for the shoulda-matcher deprecation warnings. Do you want me to push them here or wait until this lands?\nI understand @jferris' concerns, but on the developer confusion/frustration point I'd counter that developers would be initially confused by the lock files being present/modified because tracking them runs counter to common advice. That said, I don't have nearly as much experience with library development to weigh in heavily on either side.\n. Found an issue when I was working on top of this branch to try out Rails 4 and verified it was introduced with this branch. I can't successfully run bundle exec rake appraisal:rails.3.support. Running a full bundle exec rake works as expected, but running a specific appraisal yields:\n\ncannot load such file -- cucumber/rake/task\n/Users/derek/src/clearance/Rakefile:8:in `require'\n\nI'm perplexed.\n. @croaky, I think what's there is pretty much the best we can do. The only method that would benefit from using the backdoor is signed_in_user:\nruby\ndef signed_in_user\n  password = 'password'\n  user = create(:user, password: password)\n  sign_in_with user.email, password\n  user\nend\nThat could become:\nruby\ndef signed_in_user\n  password = 'password'\n  create(:user, password: password).tap |user|\n    visit url_after_session_create, as: user\n  end\nend\nBut url_after_session_create is impossible to discern via public APIs (url_after_create is a private method on SessionsController). I'd rather see this method removed all together. Thoughts?\n. My preference would be to remove signed_in_user, but it's actually in use in one of the generated feature specs (user signs out). It's hard to replace it with something that uses the backdoor without presuming too much about the application (I need a URL to visit that I can be sure will have a sign out link).\nI would argue that the generation of helpers and feature specs can be removed, though. I may look into that.\nClosing this as there doesn't seem to be anything actionable.\n. Prepending the routes seems like a good solution to me. Unfortunately, as of Rails 4.0 it won't really matter, as Rails will complain about routes with duplicate names.\nI still think this makes sense to do as you should still be able to override the routing for get '/sign_in' without giving it a name (as: nil) or by giving it another name (as: :app_sign_in). I believe we'd want prepending routes in any case.\nThoughts, @croaky \n. thinking some more, I think prepending might break the workaround for rails 4 route collision issues that I've seen used. I've seen, for instance, the sign_in route overridden like this:\nruby\n  get :sign_in, to: 'sessions#new', as: nil\nThis way, any existing code using clearance's sign_in_path still results in a get '/sign_in' but because routes are matched top down, the application-defined route gets hit first and that is used rather than clearance route. A bit of a hack, but I feel like that's the corner Rails 4 backed engine users into...\nIs there a good solution here?\n. I'd be interested to see your routes and specifically what you're having trouble overriding.\n. I'd have to do some significant testing to see how pre-pending the routes works out. I think your use of match as a catch all isn't particularly common and is what is getting in the way of normal operation here. I want to help, but want to be sure we're doing the right thing first and that it works in all supported versions of rails.\n. In 2.0 we're going to provide users with full control over the routes. This is coming along more slowly than I'd like but I suspect progress to accelerate within the next couple of weeks.\nI don't think we'll be addressing any route related issues in 1.x unless we can find a solution that works in all cases.\n. v1.5 now has the ability to disable clearance routes, giving you full control. See the \"Overriding Routes\" section of the README.\n. From what I see in the issue list, this is the only thing I would consider to be blocking 1.0.0 final. Agree @gylaz, @croaky?\nI'm not having much luck with fixing it.\n. Seems like if we want to do this we should only be duplicating the form partials. Also, it seems like the SimpleForm detection should work if even if you don't copy the views to your own application.\n. Going to close this one for now. I like the idea of using simple form if its installed but:\n1. We should only be adding files for what is different, namely the form partials\n2. We should aim for clearance to use simple form if it's installed even when the user does not copy the templates into their own app.\nIf this is something we want to keep an eye on, we should open a new feature issue for it (and we can reference this PR for a start).\n. This is an old issue, but it ranks highly for 'clearance remember me' searches on google, so I thought it was worth an update to clarify. For the approach Dan suggested to work, you actually need to:\n``` ruby\nclass SessionsController < Clearance::SessionsController\n  def create\n    if params[:remember_me]\n      Clearance.configuration.cookie_expiration = lambda { 1.year.from_now.utc }\n    else\n      Clearance.configuration.cookie_expiration = lambda { nil }\n    end\nsuper\n\nend\nend\n```\nThere is only one instance of Clearance.configuration. If you set the expiration lambda for the remember_me users then all future sessions on that server will use that lambda as well, regardless of the remember_me value. Adding the else resets it explicitly.\nI had a need to add this functionality to an app today, and while this works it's not the prettiest. I'll probably pursue a rack middleware solution next week.\n. @lowski , @jhulford : Indeed, changes were made to Clearance (and released with 1.1) that make this an easier process. The cookie expieration can now consider the value of arbitrary cookies. See the commit for more.\n. I may have spoke a bit prematurely about how likely it is that this feature is used. See:\n- https://github.com/thoughtbot/clearance/wiki/usage\n- https://groups.google.com/forum/?fromgroups=#!topic/thoughtbot-clearance/stocBv21A8c\nThis may break some uses, but since the next release is 1.0.0, I think that's ok?\n. @croaky, upon further investigation, this breaks this use case: A login form is present on every page. When the user logs in with it they should be returned to whatever page they logged in from rather than the default path signed in users are delviered to.\nsession[:return_to] is only populated when a request is denied, so the sessions controller will always redirect to url_after_create.\nI think the workaround for this use case is for users to write a before_filter that sets session[:return_to] on each request that has the log-in form. \nThoughts?\n. I'm considering explicitly checking for leading '//' in the parsed return to URL and eliminating it. That would probably be the lowest impact change, but it may devolve into a a game of whack-a-mole if other ways to 'trick' URI#path pop up.\n. After some discussion in Campfire, I decided on the safest approach, which is removing support for the user-supplied return_to value.\n. This is addressed with #368 \n. I don't think there's a perfect answer. What I said before still stands: I defer to those with more experience with library development. That said, here's how I see the pros and cons:\nIn the 'real world' developers are likely bundling and getting latest versions of stuff unless they have a specific reason not to. As gems that we depend on are updated we'll have to remember to manually update them with a bundle update for the appropriate appraisal files or we'll be out of date with what people are doing in production. On the other hand, this is less critical if we can count on semantic versioning of dependencies. \nThe ability to reproduce failing tests is certainly nice, but its not much use if what we're testing with isn't actually what our users are using. If someone is incented enough to clone the repo, update the appraisal gemfiles to be in line with what they were using when they hit a bug, and then submit a failing test case, aren't they equally capable of doing this without the appraisal lock files? For users that just want to report a bug, aren't we still going to want to see their Gemfile.lock?\nWhen it comes to git noise, I guess I'm not overly sensitive to it. If lock files are deemed worth keeping and there are lots of checkins of the lock files in order to keep them up to date, so be it.\n\nThis shouldn't be an issue any longer. Since we're using relative paths.\n\nThis is lost if gemfiles are regenerated. We should see if we can add this to appraisal.\n. This might not actually work, but I just had an idea: What if we had one appraisal file without a checked-in lock file that was only run by Travis (or manually locally, if desired). Would this allow us to catch issues with newer versions of gems while maintaining a clean test suite for gems we know to be good?\n. That's what I was trying to get at, @gylaz \n. :facepunch: \nLooks good from here. I'd be thrilled to have this fixed. Assuming it's merged in, let's cut a final RC?\n. Maybe I'm crazy, but I think I'd rather just remove the password optional behavior. Clearance is supposed to be opinionated username and password authentication, right?\n. I haven't actually tried to do this, so I'm not really certain what all of the problems are or even if it is particularly difficult. @croaky, you mentioned that this was done for all the projects in SF. Can anyone provide some background on what problems were encountered and how they were worked around?\nTo me there are a couple of different sign in scenarios:\n1. A user signs in voluntarily (the click a sign in link/button)\n2. A user does something that requires sign in.\nA modal is a poor fit for the second scenario. What would it be a modal over? In the first instance it does seem that many sites do use the modal or drop down menu approach. It'd be nice to support this if we can easily do it.\nThat said, sessions are valid for a year by default, if you don't sign out. In that scenario, from a UX perspective this seems mostly like a 'first impression' kind of change and not something that is particularly helpful over the long haul. \n. The default js response for sessions#create could include a JavaScript location call to reload or navigate appropriately. If you wanted to take your own route you'd just modify that view or hook into the template methods to prevent that at all.\n. I like the plan Joe has laid out and I think this is on the radar but likely not until post 2.0 (with the hope being that we'd get some intelligent XHR handling in 2.0 itself). I think we can continue the discussion here (or through other channels as well) but since we're not going to act on this in the very near term, I'm going to close this.\n. We tried to keep it up to date as we went. I've taken projects from 1.0.0.RC7 through 1.0.0 without issue though each project is different given the versions of rails and the parts of clearance I end up overriding. What issues are you seeing?\nHere are the changes from RC7 to 1.0.0 and a summation of all the major changes to 1.0.0.\n. @gylaz and I discussed and feel like pursuing a migration solution is the best idea here. Closing this one.\n. We're going to pursue changes similar to this in #349.\n. Closing this to take a different crack at it.\n.  @gylaz, have a look at #393, in which I took a stab at addressing both of these issues.\n. Closed with #393\n. One question, otherwise: :+1:\n. We cannot offer support for ORMs we do not ourselves use.\n. Sign up can be disabled with the changes in #368, currently on master.\nRails 4.0 made route overriding difficult as you can no longer re-use a previously existing route name. However, you are free to use your own route names.\n. the cookie domain is now a configurable parameter. See the sample config from the readme:\nruby\nClearance.configure do |config|\n  config.allow_sign_up = true\n  config.cookie_domain = '.example.com'\n  config.cookie_expiration = lambda { |cookies| 1.year.from_now.utc }\n  config.cookie_path = '/'\n  config.httponly = false\n  config.mailer_sender = 'reply@example.com'\n  config.password_strategy = Clearance::PasswordStrategies::BCrypt\n  config.redirect_url = '/'\n  config.secure_cookie = false\n  config.sign_in_guards = []\n  config.user_model = User\nend\n. It appears a simpler version of this was merged in a few months ago (it uses a static value rather than a callable object).\n. A few questions:\n- If you remove Clearance, does the application start?\n- What happens when you run this locally: RAILS_ENV=production RAILS_GROUPS=assets rake assets:precompile ?\n- Can you reproduce this in an application you can share the source for?\nIt doesn't look like Capistrano has anything to do with the issue here - all it looks to be doing is calling the pre-compile rake task with those variables set.\n. Closing for lack of information.\n. @JESii , is this still an issue? It does appear as though it is an issue with the spec or database cleaner (though the configurations seem similar). If it's still an issue, would you be able to post a reproduction of it somewhere?\n. @croaky @gylaz : mind having a look when you get a couple minutes? Thanks.\n. :+1:\n. I've seen questions about this incorrect documentation a couple of times recently, so I'm going to merge it in. @gylaz, it can be tweaked further if necessary, but we should at least be correct ASAP.\n. This is on the radar for 2.0 and I'm open to pull requests or suggestions. Feel free to comment here, in slack (if you're an thoughtbotter) or chase me down in any other manner.\nThe feature request is noted. Closing the issue.\n. We also need to conditionally diable sign up links in the views. \n. Also needs an entry in NEWS.md\n. @joelq, what's going on here?\n. @JoelQ and I resolved the test failures on Friday (see second commit). Can we get another review before merge?\ncc @gylaz @croaky @jferris \n. I'm also not able to reproduce this. I just created a new app and ran the installer: db/migrate/20140718030819_create_users.rb. Closing. Please re-open if you can reproduce this.\n. Closing as this appears merged.\n. I went in a different, simpler-to-test direction with #395. Closing this.\n. It's worth noting that making it so the only place to change the flash message is in i18n makes it impossible to change the keys used or passed to interpolation. That is, if you want to include a link to some other route than the sign_up_path then you're out of luck unless you override the DefaultSignInGuard. Is this desired?\n. With #394, this will be able to be completely controlled via i18n keys. When the flashes.flash_failure_after_create key is used, it is marked as HTML safe, so you should be able to put whatever link you would please in there.\n. I'm not sure I follow the question here.  It appears from your pasted routes that passwords_path, new_password_path, session_path, user_password_path and edit_user_password_path are all pointed at your versions of the routes (with locale). \n. I have responded to the question on stack overflow. I think we can close this and track it there. From our other issues it does appear that people are successfully using models other than user.\n. Thanks for this. It has been merged into clearance-i18n, which we will be releasing to rubygems soon. For now you can use the gem from it's github source.\n. I don't have much experience with Mountable engines. @farmerworking did you have any luck? \n@JimiJonJimbo, your earlier PR makes me thing you have experience with this. Any input?\n. We have a recent blog post about this: http://robots.thoughtbot.com/using-clearance-with-rails-admin\nI'm going to close this now as it seems possible to do what you'd like.\n. @edwardloveall : I don't believe the documentation in the readme is correct. I'm going to to discuss it with some folks tomorrow. Here's what I think is happening:\nYour application's controllers/clearance/users_controller defines the UserController class as a subclass of Clearance::UsersController. Rails tries to look up Clearance::UsersController and notices your app has a controllers/clearance/users_controller.rb file and assumes that's where Clearance::UsersController is defined. So rails tries to load it... and repeat...\nYou can get around this by moving your UsersController out of the clearance subdirectory, but then you also need to override the routes, which is a pain to do in Rails 4.\nI'll get back to you on this one when my suspicions are confirmed...\n. I've opened #415 to correct our documentation (at minimum) and hopefully find a cleaner solution. In that ticket you'll find an example of how I was able to override the sign_up action.\n. @zamith could you instead implement a user class that implements the user interface used by Clearance, papering over the fact that there are multiple models? For instance, it would implement find_by_id_and_confirmation_token and delegate to your two user models? Alternatively, could you use STI for the different user models?\n. Yes, you would need to iimplement whatever bits of the AR api clearance uses. From a quick glance it looks like that is just:\n- find_by_id_and_confirmation_token\n- find_by_email\n- where\nThat last bit is used in Session like so:\ndef user_from_remember_token(token)\n  Clearance.configuration.user_model.where(remember_token: token).first\nend\nObviously, this isn't a public interface at the moment, so use at your own risk. \nAfter discussion, we're not going to take this PR at this moment. The need for multiple user models isn't something we've needed often in our projects and it's not something we've had a lot of requests for. I think if we were to pursue something I'd rather try to expose a public API that encapsulates the way we search for users rather than directly support an array of user classes, but we'd have to put some thought into that.\n. It may also be worth considering using a single User class that has a polymorphic profile. That brings its own complications, but it'd probably be better than an STI approach.\n. This fixes #348.\ncc: @croaky @gylaz \n. I don't quite understand the problem. Clearance adds only two validations to your user model, both of which are required for clearance to function properly:\n```\nvalidates :email,\n  email: { strict_mode: true },\n  presence: true,\n  uniqueness: { allow_blank: true },\n  unless: :email_optional?\nvalidates :password, presence: true, unless: :skip_password_validation?\n```\nIs the problem that the validations are conditional and thus not automatically being marked as required by SimpleForm? This is very simple to solve at the view layer with required: true on your input call.\n. I'm hesitant to add configuration that could easily allow for clearance to not function correctly. Clearance is for authentication via email and password - both fields are required and we want to ensure that is the case on the user model. There are allowances for password-less or email-less schemes, but that's about it.\nI'm open to the idea of modularizing Clearance::User a bit more, but I don't see us taking optional validations as part of that. Modularizing correctly could at least make the validations more confident, allowing us to drop the conditions on them.\nGiven that we're not likely to make the validations optional, I'm going to close this issue. If you'd like to take a crack at modularizing the user includes a bit more, we'd certainly take a look at that.\n. @croaky: ready for another look\n. There was some discussion about why we didn't go that direction in an outdated diff on this PR: https://github.com/thoughtbot/clearance/pull/398#discussion-diff-9761120\nAdditionally, I am not a crypto expert, but you may want to use gen_random_bytes from pgcrypto instead.. Fixed in #401 \n. @croaky - It looks like there's no explicit coverage for the flash message when the default sign in guard fails. I can try to add that, but I don't think I'd bother testing it with sign up disabled since the guard itself no longer cares.\n@gylaz - nope. Works fine locally. Something about the features not being able to find jbuilder. Really odd...\n. @croaky I added test coverage to DefaultSignInGaurd.\n@gylaz I sorted and formatted the i18n yaml file.\nLooking into why travis is failing. Perhaps it won't this time...\n. On a related note, the jbuilder-trype failures (\"Gem version not available\" messages from travis) are nearly impossible for a developer to catch locally, but will frequently pop up on Travis when new dependency versions are released. This is because the appraisal gemfile.lock files are no longer committed to the repository. \nTravis is re-resolving the entire dependency tree every time it runs tests. With no previously installed gems, Travis has the benefit of getting the latest and greatest every time. Locally, however, I don't pick up the new versions because the versions I already have installed also satisfy the dependencies. This is the case even if I tell appraisal to re-generate the gemfiles. The only way for me to get a similar benefit locally is to use gemsets that I blow away with regularity.\nI understand why we're no longer committing the lock files; it's beneficial that we caught these issues today (shortly after the release of Rails 4.1.rc1), before anyone had to go and bump the appraisal versions. But the errors we end up with from Travis don't always make it immediately obvious how to address the issue. I generally stare cluelessly at things for a bit until I remember that Travis may be using very different versions than I, even after an appraisal gemfile cleanup. \nI don't have any good solutions. I just wanted to note the issue. One thing that might help some is if we could get Travis/appraisal to log the Gemfile.locks its using when it hits failures.\n. These need to be present on the machine when the feature specs bundle after running rails new. An alternative would be to pass --skip-gemfile when doing rails new and then providing our own gemfile which has just the minimum we need to test with.\n. It does not surprise me the those instructions no longer work (I've made a note to go through the wiki and decide what to do with each piece of content), though they do look pretty close to me. I've never had cause to override the field used for authentication. It's possible by 2 or three methods here and there, but it's not a use case we're likely to consider as we release new version of clearance (it says \"...email and password\" on the tin, after all). If your users will be registering with an email, I'd advise you to simply let them log in with that email. One less thing for them to remember.\nNow, if you really still want to authenticate with a username, then the approach in that wiki should come pretty close to working. The error you're is a Mass Assignment error from rails and without a full stack trace I can't be sure where its coming from.\nAfter looking at the code for a couple minutes, here's what I think would work (this is completely untested and unsupported by clearance, specific caveats to follow)\nIn your User (or other, as configured) model:\n``` ruby\nIf you don't intend for your model to have an email field at all\ndef email_optional?\n  true\nend\ndef self.authenticate(username, password)\n  if user = Clearance.configuration.user_model.find_by_username(username)\n    if password.present? && user.authenticated?(password)\n      return user\n    end\n  end\nend\n```\nIn app/controllers/application_controller.rb:\nruby\ndef authenticate(params)\n  Clearance.configuration.user_model.authenticate(\n    params[:session][:username], params[:session][:password]\n  )\nend\nThere's some stuff clearance does for you with email that you're now on your own for with username. Presence validation, uniqueness validation (case insensitive!), finding a user with a matching, case-insensitive email, etc..\n. Would anyone possibly think of this as a breaking change? I think we're in the clear here and should be able to do this in 1.x, but I just thought the question warranted being asked. What do you think @jessieay?\n. I like this for practical reasons. I find myself wanting to use new hash syntax everywhere but then i realize I've introduced differing syntaxes in a given file, which irks me. So I either have to use the old hash syntax in previously existing files or update everything. Additionally, hound fails the build on old hash syntax in new changes.\nThis has been on my list to do for a while and is pretty low impact compared to the other stuff on that list (expect syntax, eliminate before blocks, etc). Thanks, Rich.\nGood to merge.\n. I like @jferris' idea. I'm torn between raising an exception vs redirecting to the default. The exception is certainly helpful in development to let the developer know they did something wrong, but it's not particularly useful to users in production. It could also get noisy in exception logs if there was a targeted phishing attack on your site, but maybe that's actually a good thing.\nHow would you get the host that you are going to compare the return_to url against?\n. Should we also guard against scheme changes? With the current system, you're not only protected against redirecting offsite but also redirecting from https to http.\n. The solution we discussed is better (and works). As it stands, however, the code introduced in 1.2.1 works in just about all cases that I have tested, with the exception that it drops fragments.\nFragments are not sent from client to server so the only time this would ever come up is if the developer was manually setting session[:return_to] to something with a fragment in it and client behavior in that case is seemingly loosely specified (if at all) with varying implementations.\n. What version of Rails are you using? What is the file location of the controller you pasted?\n. I've opened #415 to, at minimum correct our documentation. I'm hopeful we'll be able to find a better solution.\n. Hi @zamith I'll take a look tomorrow during my open source time. Thanks for the contribution.\n. I think this change does make your proposed use case simpler, but I'm not sure that alone justifies adding to the inheritance hierarchy. Is there anything else that would benefit from having a common base class for the Clearance controllers?\n. Additionally, you could brute-force this with something like:\ndef clearance_controller?\n  self.class.to_s.split(\"::\").first==\"Clearance\"\nend\n. > You also need to define clearance_controller? as false in every other controller, or you'd get missing method errors.\nThe snippet I posted was for the application controller. That would cover all controllers that inherited from ApplicationController.\n\nI think it would make more sense to have AuthorizedController as a subclass of ApplicationController, and have everything subclass from that except things that skip authorization. Thoughts?\n\nIn every app I've done I've actually added the before_filter :authorize call directly to ApplicationController. I find that it makes the most sense to authorize by default and opt out when necessary. I've worked on apps that took the AuthorizedController approach and in every instance someone forgot to use AuthorizedController where they needed it, so I switch it over to secure by default. Rails developers are just use to controllers inheriting from ApplicationController so I keep that use case secure.\n. @zamith If you want to make the change Joe suggested (making the base controller empty) then I'd accept this. Your inclination on testing is correct I think? Each controller should be_a Clearance::BaseController.\n. Sorry, one more thing - can you rebase this against master?\n. I squashed this and re-wrote the commit message some to clarify what we ended up doing. Thanks for the contribution!\n. I am personally leaning towards what @mike-burns proposes. For instance, adding clearance to my project has resulted in the following routes:\nGET    /sign_up(.:format)                                  users#new\n               passwords POST   /passwords(.:format)                                clearance/passwords#create\n            new_password GET    /passwords/new(.:format)                            clearance/passwords#new\n                 session POST   /session(.:format)                                  clearance/sessions#create\n           user_password POST   /users/:user_id/password(.:format)                  clearance/passwords#create\n      edit_user_password GET    /users/:user_id/password/edit(.:format)             clearance/passwords#edit\n                         PATCH  /users/:user_id/password(.:format)                  clearance/passwords#update\n                         PUT    /users/:user_id/password(.:format)                  clearance/passwords#update\n                   users POST   /users(.:format)                                    clearance/users#create\n                 sign_in GET    /sign_in(.:format)                                  clearance/sessions#new\n                sign_out DELETE /sign_out(.:format)                                 clearance/sessions#destroy\n                 sign_up GET    /sign_up(.:format)                                  clearance/users#new\nThe /users/:user_id ones are particularly annoying to me because all of my applications user routes are for a singular resource (e.g. /user, /user/reservations).\n. @jferris This is actually my favorite long-term vision for clearance. I'd like to see clearance-core and then several optional engines.\n. More documentation of pain:\nI was able to override the sign_up path to go to my action, but the form still submitted to Clearance::UsersController. I had to edit the form to do this:\nruby\n  <%= form_for @user, url: user_path do |form| %>\nThis was feasible for me because I have that singular user resource. If your app used the pluralized users resource you'd have to add more 'as: nil' overrides.\n. I'd like to address this in a non-breaking way for 1.x users before moving to the meta-gem approach (assuming that continues to make sense as we flesh the idea out some more). Here are things I think we should do in Clearance 1.x to make this better:\n1. Allow overriding controllers by configuration. @jferris solution requires the developer to use the same controller name as Clearance (UsersController). I'd like to see how much more work it would be to allow an arbitrary controller. I suspect it won't take much.\n2. Add a configuration that makes the users routes singular.\n3. Add a configuration to disable all routes. There are routes used by clearance internally that we will need to document so people can add back in what they need.\n. In general, I'm wary of making clearance have a ton of configuration options, but this particular issue does seem to be a problem for people and configuration seems like the quickest way to address it.\n. opened #416 to add a configuration option to disable all routes.\n\nAdd a configuration that makes the users routes singular.\n\nAfter some consideration, I think this is more of a pain than it's worth (views would have to pull URLs from configuration) at this point. I think the use case is fringe enough to be covered by disabling all routes.\n. This will be addressed in 2.0 by changes introduced in #425 and iterated on from there.\n. Indeed. And NEWS. But otherwise?\n. I don't know that we would end up deprecating the option. I think there's always going to be a subset of people who want full control over the routes, no matter how we break them up.\nI further suspect that configuration is going to be one of the things that changes the most if we split the gem up. I was figuring on that being a breaking change anyway.\n. See #415. My use case here was that clearance draws a bunch of routes I don't want. For instance, the app I'm on now has a singular user resource yet clearance adds a plural users resource as well.\nI think the right longer-term move is to explore the path of using several engines and allowing people to customize clearance by requiring various parts of it, if desired. That said, I expect that to be a breaking change and to take quite a bit of time.\nThe question is, is this a use case common enough that it's worth introducing this configuration only to remove it in the next version (hopefully). For this PR, I think the answer is no. At least not until we explore the alternative a bit more.\n. I don't think I'm going to merge this. Closing.\n. I talked to @jferris about this some. I'd love to get to the point where this isn't particularly necessary, but right now I feel like it is. We've seen evidence that people are confused when it comes to overriding controllers because it doesn't work as they would expect.\nI'm in favor of merging this in, but would have a goal for clearance 2.0 to have the need for it to be removed. Is that a bad idea? Addressing the pain now in the best, non-breaking way that I can knowing that I intend to remove (or alter in a possibly breaking way) the feature from the next major version?\n. I prefer to either pursue modularity or to treat the routes as we do the views (as in #419). Closing this.\n. Merge away!\n. I'm torn. \nThis gives the user full control over the routes. We're unlikely to add additional routes or change the existing routes, so I'm not sure that upgrade issues are too bad -- barring Rails overhauling the router again which I suppose isn't out of the question.\nThe competing ideas here are both the configuration-based PR's that are linked and also the idea that a modular Clearance could potentially obviate the need for this type of change, though perhaps clumsily.\nI'd love to talk through the pros and cons of all of these approaches and make one decision on how to proceed so we're not implementing something only to reverse course in our next version. I haven't thought much about Clearance in the last two weeks and I'm currently having difficulty figuring out what problems a modular clearance would solve that putting the routes entirely in the users control would not. At that point, the routes become similar to the views - they're our suggestions, but you are free to do as you please.\n. Yes, I do think all of that is a pretty easy, keeps clearance simple to use, allows for a more pleasant controller override experience, and still gives an out of the box experience that \"just works\" even if you don't have an initializer.\nBefore we go supporting dumping the routes to the app, though, I'd like to figure out if the routes we have are what we want to live with going forward. I contend there might be a couple of changes we want to consider:\n- PasswordsController becomes PasswordResetsController. Or perhaps just the new and create actions move there. To be 100% honest I'm not sure what the use case for all of those actions are there (and that's because I'm pretty sure Password is not the resource we're actually talking about in all cases).\n- UsersController becomes SignUpsController or RegistrationsController. This represents the actions you're taking more closely and also doesn't use the term \"user\" which is something I'm lead to believe people override somewhat often.\nThose changes would push this to a 2.0 change.\n. I ended up taking #425 into the 2.0 branch where I plan to iterate on 2.0 features in the coming weeks.\n. Thanks for the contribution!\n. Had to go digging to figure out where this changed: 9d2f94955b18f9c2d382939245e027972c2aacb0. The change was introduced in version 1.0.0. I agree that having it return the user makes more sense than returning the remember_token from this method, but I'm a bit confused by the use case for the change. I think it's highly unlikely that this change would break anything, but it does technically change the API established in 1.0.\nsign_in takes a user as an argument. Why do you need that argument returned from the method call?\n. > The alternative, if we like this behavior could be to return it from the sign_in test helper:\nYes, I do think sign_in_as should return the user.\n. Looks good. :+1:\n. I'm wondering if the disconnect here between dev/test & production/staging is going to cause confusion.\n. Any idea on how to address this? I could add an explanation to the default initializer, but I'm not sure people will look there.\nI thought about turning it on for all environments but that seemed like it would cause even more issues.\n. @jferris, @BlakeWilliams: Would this error make sense to you?\nraise <<-ERROR.strip_heredoc\n          Clearance has `secure_cookie` enabled in this environment but\n          `current_user` was just accessed during a non-SSL request. Assuming\n          this is a production environment, you probably want to insert the\n          'Rack::SSL' middleware or otherwise force HTTPS connections.\n        ERROR\n. I've updated the pull request to take into account the previous feedback and to attempt to encourage existing users to update their clearance configurations to be more secure. I'll let my latest commit message do the talking here:\n\nIf secure_cookie is accessed having previously been unconfigured, a\nwarning is raised encouraging the developer to enable secure_cookie or\nat least explicitly set it to false, thus opting in to the insecure\nbehavior.\nAdditionally, a descriptive application error is raised if\nsecure_cookie is enabled and yet current_user is accessed in a\nnon-ssl request. This is an indicator that the developer has forgotten\nto enable SSL in this environment. This should help to address the\nconfusion that might arise from the generated initializer applying a\ndifferent configuration between development and production. Without the\napplication error, the end user would simply have a signed out session.\n. Another option would be to simply flip the default for secure_cookie to true in all environments and have the initializer opt-out dev and test. Developers already using SSL in production would have to update or create the clearance initializer to get their dev and test environments working. The generator would do this automatically for new apps.\n\nAnyone using Clearance and not forcing ssl in production would have their application break, so this is likely a 2.0 release which would supersede any in-flight changes already made for 2.0 (those would now be targeted at 3.0).\nIf we pursued that I would remove the warning in configuration and the error raising.\n. > The hassle of breakages likely outweighs the opinionated opinion on security.\nI don't think I'd call this an opinion. We're dealing with an insecure default. I suspect that the majority of Clearance applications in production are susceptible to relatively simple session hijacking. I think we need to address this one way or another.\n. So that's a vote for removing 'secure_cookie' as an option entirely -- or at least ignoring what the user tries to set it to?\nThat'd be a breaking change, so it'd go to 2.0. I think that'd be the only change introduced in 2.0. I think I'd even leave the previously deprecated stuff in just so as many people as possible could upgrade.\nPeople that can't upgrade would be covered by enabling secure_cookie provided that are on at least 1.0.0. Users of older versions would have to upgrade, I think. I'm not positive how cookies were handled in older versions, but the fact that secure_cookie came in 1.0.0 makes me think they are insecure.\n. That would mean you'd need to run SSL in dev and test. Maybe this is actually desired -- you'll be running SSL in production, after all -- but it's not exactly common practice.\nMaybe we default the setting to true and allow it to be overridden explicitly? The generator could still set it to false for dev and test. But then we're back in a situation where there's potentially confusing behavior when you go to prod.\n. Here's the best plan I can come up with so far:\n1. Release Clearance 2.0 which:\n   - defaults secure_cookie to true when not set.\n   - updates the generated initializer to set secure_cookie to false in dev and test.\n   - Raises an error if secure_cookie is true and you call authenticate.\n   - Add a post-install message to the gem telling people they need to enable SSL in non dev/test environments.\n   - Add a similar message to the text you see after running rails generate clearance:install\n2. Blog about this - explain the problem and the difficulties in finding a perfect solution.\n3. Release a CVE for the insecure default in Clearance < 2.0\nThere's going to be some confusion about the disconnect between dev and prod, but I cannot think of a good way to handle this. Updating current_user as I did in this PR is not valid in all scenarios and may cause errors for sites that are perfectly secure, but don't force SSL on all pages. Moving the error to authenticate seems correct to me, though there's always a chance you are using SSL on pages that do authentication but not on the rest of the site.\nI wish it was standard practice to run SSL in dev and test if you are running it in prod, but it's simply not.\n. Some new information after looking at the source of Rack:SSL/ActionDispatch::SSL:\nThat middleware rewrites cookies (all of them) to be secure-only. So if you use clearance and enable site-wide SSL in your environment configurations then it doesn't matter what you have Clearance's secure_cookie set to. The cookie will be set as secure.\nThis means the scope of sites effected by the security issue I call out here is limited to those that do not enable SSL at all or enable it selectively or with something other than the rails/rack middleware. \n. Thanks, Geoff. I'll take a look sometime this week. Much of the wiki documentation is out of date. I've been considering removing it all and adding back only what is accurate and helpful.\n. Hmm. I don't have an app in front of me to test right now, but I'm actually surprised that doesn't work. Can you paste the exception and stack trace as well as your code from ApplicationController?\nI'll have some time to look into this myself tomorrow as well.\n. This actually seems to work for me in my Rails 4.0.4 app. I wonder if it has to do with the fact that your controller controller is namespaced. Does Admin::Passwords controller inherit directly from ApplicationController?\n. @geoffharcourt Have you had any luck with this? I haven't looked into it at all yet, though I was going to try to this weekend.\n. I'm still  not able to reproduce this, even trying with what I think are similar chains of inheritance and namespaced controllers:\n``` ruby\nclass ApplicationController < ActionController::Base\n  include Clearance::Controller\n  protect_from_forgery with: :exception\nprotected\ndef sign_in(user)\n    puts \"SIGN IN #{user.email}\"\n    super\n  end\nend\n```\nruby\nclass BaseController < ApplicationController\n  before_filter :authorize\nend\nruby\nclass Admin::PostsController < BaseController\n  def index\n    render text: 'admin posts controller'\n  end\nend\nruby\nClearance.configure do |config|\n  config.mailer_sender = \"reply@example.com\"\n  config.redirect_url = '/admin/posts'\nend\nThis all works just fine. I even tried it via a feature spec with the backdoor, like so:\nfeature 'user visits admin posts' do\n  scenario 'successfully' do\n    user = User.create(email: 'user@domain.com', password: 'password')\n    visit admin_posts_path(as: user)\n    expect(page).to have_content 'admin posts controller'\n  end\nend\nThis is now Rails 4.1.4, but way earlier I was also unable to reproduce on 4.0.4. Do you see something that I'm doing that you're not? Are you able to produce a minimal reproduction you could share?\n. Yeah, I was thinking about that. I probably won't get a chance to look at\nit until next week.\nOn Wed, Sep 17, 2014 at 12:18 PM, Geoff Harcourt notifications@github.com\nwrote:\n\n@derekprior https://github.com/derekprior, wondering if calling #sign_in\nin the #sign_in_as helper using #send(:sign_in, user) might be the\nsolution, avoiding the restriction on calling a protected method?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/issues/424#issuecomment-55919114\n.\n. I updated the wiki per our conversations in #464 \n. Thanks for this. I like the direction, just need to think about this before merging. While there's nothing here that's a breaking change, I want to be sure we get this move correct. I suspect this will be a Clearance 2.0 feature and that we mayu want to make some related (and several unrelated) breaking changes at that time.\n\nI'll look at this more closely on friday. Right now I'm leaning towards accepting this into a 2.0 branch where can let it bake and iterate on it while making any other breaking changes desired for 2.0.\n. Thanks for the contribution @jacobsimeon.\nI added some tests for the generator and merged this into the newly created 2.0 branch. There will likely be many weeks of iteration (I only really work on this on Fridays) before that branch is ready for even a beta release.\n. Looks good.\n. Clearance has the same internal defaults it always had. If you want control over the views, you run rake generate clearance:views. If you want control over the routes, you run rake generate clearance:routes.\n. Merged\n. Thanks for the contribution!\n. @jstdoit , Can you provide more information? A link to your implementation, perhaps? A specific error? I'm afraid I don't follow what \"will be nil in a very short time\" means.\n. What do you mean by, \"several minutes after I login\"? Does this code work for some requests and not others? Are you sure you have included before_filter :authorize in your controller?\n. I'm sorry, I still don't understand what you mean by \"be valid in a very long period\". current_user is set for the duration of the request. It is set for every request. The length of the individual request should have nothing to do with this. Is this a background job or something?\nWhat is the actual error you are getting? Does the stack trace point to the second line of your create action or somewhere else?\n. Sounds like we're all set here. I don't think there's anything we can do to improve the situation as it's a limitation of mountable engines and I can't think of any conceivable way to prevent the user from running into this if they override the redirect methods.\nI'm going to close this, but if you feel like there's something to be done here, please re-open. Thanks!\n. To be honest, I'm not sure why Clearance has protect_from_forgery in SessionsController rather than relying on whatever the user has (or has not) setup in ApplicationController. I'm further puzzled as to why it'd be skipped in the SessionsController#create action. I'll have to dig through git to see if there's an explanation.\nFor the time being, you could keep ApplicationController::API and either:\n1. Find the appropriate module in Rails that would give you the actual protect_from_forgery method and include that in your ApplicationController.\n2. Define protect_from_forgery as a no-op on your ApplicationController.\n. ruby\ndef protect_from_forgery\nend\n. Assuming you're using the code you posted above, I'm at a loss for why it won't work for you. If you have a minimal reproduction of the issue, I'd gladly take a look.\nI'm also looking into why we need that line in the controller anyway...\n. @JoshSmith Closing this for now. If what @tehPlayer suggests is not working, let us know and we'll have another look.\n. I don't even view what clearance is doing as authorization. I think it's more appropriately authentication, though I can see how one could argue it's a form of authorization.\nThat said, I think we can give the filter a much more intention-revealing name such as require_login. @halogenandtoast and I were discussing this last week and are planning to spike out a major clearance change on Friday.\nDoesn't help you right now, but either way, in 2.0 that filter will be renamed.\n. I don't think there's anything we can do in the short term here other than document the issue and workarounds. This issue is already doing that (it's the number two result on google for 'clearance pundit').\nI already plan on renaming the filter in 2.0 so I'm going to close this for now.\n. I'd hate to add more dependencies to Clearance for this - either explicit or implicit. I'd be willing to assist @frechg in turning clearance-styles into an asset gem of its own though. Having the gem exist on its own would allow it to change irrespective of Clearance which will be handy as well.\nI took a quick ook at the scss, and my lone advice there would be to avoid styling based on #clearance as this is likely to go away in the next version (it makes putting a signin and signup form on the same page invalid, for instance).\n. I think a separate gem is the way to go here. @frechg, let me know if you need help with that. I'm confident I could package that up pretty quickly one Friday.\n. No, not to my knowledge.\n. I like the semantics of this, for sure. I just want to make sure it's simple enough for designers to make this appear however they want (mostly likely as a link, in my experieince).\n. Got the :+1: from designers... or at least no :-1:\n. merged in 03361dc\n. There are currently no plans for this. That's not to say I wouldn't entertain a pull request that made such a thing possible, but since we almost never use a different persistence layer, we don't need such a thing.\nIf you want to add this to Clearance, I'd suggest abstracting an interface that would make swapping in another persistence mechanism possible as a first step. I'd be unlikely to actually maintain any other adapters so they'd have to be available as separate gems.\nI haven't given much thought to how difficult this would be. If you want to work on it and have questions, let me know.\n. @geoffharcourt Thanks for the contribution. Unfortunately, this will make the matcher non-functional for rspec 2. I thought we could just alias it for rspec 2, but it sounds like rspec 3 will complain if the deprecated methods are even defined.  See: https://github.com/thoughtbot/shoulda-matchers/issues/519\nWe may have to conditionally define the methods based on the version of rspec expectations. Yick.\n. If you want to take a stab at implementing this, please do so!\nWe could add some tests with rspec 2 and 3, but it wouldn't be particularly\nsimple. I think we'd have to add it to the appraisals and rerun the entire\nsuite just for that or add a test in the cucumber features which repeatedly\ngenerate new apps - we'd have to have it generate an app with each rspec\ndependency. Might be tricky.\nOn Friday, July 18, 2014, Geoff Harcourt notifications@github.com\n<javascript:_e(%7B%7D,'cvml','notifications@github.com');> wrote:\n\nHi @derekprior https://github.com/derekprior, a couple questions:\n1.\nShould I amend the PR to handle RSpec 2 + 3 support, or is the\n   Clearance team working on a wider effort to fix deprecated matchers that I\n   should avoid disrupting? I'm happy to code this problem (although it will\n   be a few days before I can contribute again).\n    2.\nI'm not super familiar with Appraisal, but is it possible to have the\n   test suite run against different versions of RSpec?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/pull/441#issuecomment-49426649.\n. Good point. I think right now we are only testing against 2.0. This might\nprove difficult to do because to get the suite running in 3.0 we'd have to\nmake changes that break 3.0.\n\nI can think of only two things:\n1. We manually test the marchers against whatever version of rspec we\n   aren't currently testing.\n2. We extract the marchers to their own gem/test suite. Then have clearance\n   depend on that gem.\nI'll see if anyone here has other ideas. Maybe I'm missing something\nsimple.\nOn Friday, July 18, 2014, Geoff Harcourt notifications@github.com wrote:\n\nMaybe in the interest of performance, only execute RSpec 2.0 against one\nversion of Rails? Then you would get notified about RSpec 2 related\nproblems. I'm not sure it's necessary to duplicate every RSpec 2 test over\nevery version of Rails in the matrix.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/pull/441#issuecomment-49433679.\n. Havving read through the current rspec source and some stuff in shoulda matchers, I think this should actually be good so long as we also add failure_message_for_should_not as an alias for failure_message_when_negated. (negative_failure_message is from way back in the RSpec 1 days and we can probably safely leave that behind). I'll push this over the finish line today.\n. Superseded by #460, which I tweaked ever so slightly but left you with authorship on. Assuming that passes travis, I'll get it in.\n. Clearance 1.4.2 is out and should address this.\n\nOn Sat, Sep 13, 2014 at 3:10 PM, Geoff Harcourt notifications@github.com\nwrote:\n\n[image: :+1:] thank you very much for getting this working, I'm looking\nforward to uncommenting deprecation warnings on RSpec 3.x!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/pull/441#issuecomment-55503613.\n. Thank you @releu \n. Interesting. This looks like it depends on env[\"ORIGINAL_FULLPATH\"]. I'm not familiar with how this is set but I'm afraid of what would happen in the case where there's middleware in the stack rewriting requests. I'll have to do some research here.\n. On second thought - the redirected request would be subject to the same rewrites as the original request so that should be all set.\n\n@JimiJonJimbo : Can you update your commit message? \"Use original_fullpath when redirecting\" is a more descriptive commit title and your PR message body would make a good description.\n. Merged in 97c71f0ee2\n. Thanks @JimiJonJimbo!\n. I agree with the sentiment but this is not going to be fun to manage for long. Any change to the generators will have to ignore hound's comments on quotes. That's simple enough for people involved in the project day-to-day to do, but it's confusing to people who just want to contribute.\nI wonder if we can configure hound per-directory...\n. I think that's fine, but I'd almost rather change the quotes everywhere in one go. It's super annoying to write code that conforms to a style in a file or project and get hound warnings about things I didn't even touch.\nFor this PR, I think we're good. Merge away :+1:\n. I like the look of parsley, but I'm hesitant to add this to Clearance as it would mean we'd have to add JS and CSS in order to provide a decent out-of-box experience. It also may not play nicely with whatever clients have planned for the non-login parts of their site.\nThat said, I think it should be possible to write a plugin that could be used to parlsey-ify the clearance forms which could be used on sites that want to use it. The script would need to find the clearance forms and add the correct hooks for parsely to pick up. \n. As mentioned I don't think this should ship with Clearance as a default as it introduces new dependencies. Closing.\n. User will not be responsible for setting this in 2.0. I'd rather not make the change for change's sake in the 1.x branch, so I'm closing this.\n. Thanks very much for the detailed report. With what you provided, I was able to do some sleuthing of my own to find this explanation of the issue from a Microsoft developer: http://blogs.msdn.com/b/ieinternals/archive/2009/07/01/ie-and-the-accept-header.aspx\nWe're actually likely to be expanding Clearance's use of the accept header for content negotiation such that it returns proper responses for API requests. I'm actually surprised I hadn't heard of any issues sooner given that the article above indicates that \"/\" is the more prevalent header for IE8. It likely does also have to do with the outlook version as well. As you elude too, I'm not too jazzed about ichanging course to suit iE8. That said, if there's something we can do about this that isn't too honerous on Clearance, then I'm certainly open to it. I'll do some more digging to see if anyone has handled this gracefully in rails. \n. I did some more reading tonight. Rails will use the accept header for content negotiation only if the format of the request is ambiguous. For instance, if you change your spec to visit '/books/123.html' then it should pass regardless of Accept header value.\nYou could solve your issue by passing format: :html as an option to the links in your mailers. I think you could set this for all helper-generated links in your mailers in one shot with the config.action_mailer.default_url_options configuration.\nThe other workarounds are to either do what you are doing in defaulting the format in routes or to disable Accept header content negotation all-together.\n. We also may be able to change the way we've written the respond_to block to avoid this problem and still give us the behavior we want.\n. Devise handles this (and the issue for which #304 was opened) by having a configuration option for navigational_formats. \"*/*\" is added as a navigational_format by default because people saw this very issue.\nWith our aim to improve the experience for API's, I can see us adding this into 2.0 (at least at some point) but don't think we'll be adding this into 1.x.\nCan you let me know if the URL helper workaround I suggested is able to fix this? Is this preferable to defaulting your routes?\n. I don't know that this is something worth doing anything about at this point, except to be aware of it. I'm going to close this and leave it here for searches. If the workaround aren't sufficient, we can consider addressing in 2.0, but I'd honestly let older browsers/mail clients do what they will.\n. Most of us here are not using MiniTest. Do you know what can be done to fix this?\n. I think the first step is that we need to switch from extend to include like we do with the helpers. From there, I'm not sure what else needs to be done because I'm totally unfamiliar with Test::Unit / MiniTest/ ShouldaContext. I'll play around some, but are you able to help debug at all @davidgf?\n. I played with this a bit today and came away befuddled. What @croaky suggests gives you the error you mention because shoulda/test-unit seems to lose access to the request between the setup block and the should statement. I really know nothing about shoulda context and cant explain why this happens or what a workaround could be?\nI was able to get Test::Unit working with the following change to clearance/test_unit:\n``` ruby\nrequire 'clearance/testing/deny_access_matcher'\nrequire 'clearance/testing/helpers'\nActionController::TestCase.class_eval do\n  include Clearance::Testing::Helpers\n  include Clearance::Testing::Matchers\n  extend Clearance::Testing::Matchers\nend\n```\nBasically, the only change is that I'm both including and extending the matchers. I borrowed that approach from shoulda-matchers.\nThen I can write the following vanilla test unit test:\ndef test_guest_is_denied_access\n    get :index\n    assert deny_access.matches?(@controller)\n  end\nThis works, but is obviously not great. Additionally, I found a number of problems with the matcher in general while investigating:\n1. It will blow up if you are testing a controller that doesn't include Clearance::Controller because it is dependent on signed_in?.\n2. It assumes you want to redirect when denying access. This isn't the case for API requests, for example.\n3. It assumed you have configured clearance to redirect to '/' (the default) for signed in users.\n4. It (obviously) has no tests itself.\nTo be honest, I don't think I've ever used this matcher and I'm leaning towards deprecating it (possibly extracting to a gem) given its problems and the fact that I think it's intent is very easily replicated in straight rspec or minitest and in that way leaves the user in charge of how they want to assert denied access (for the aforementioned API scenario, for example).\n. > Using matchers in shoulda-context happens at the class level, so they need to be extended onto the test case class and not mixed in as instance methods.\nI tried all combinations of extend/include. They all have this issue. When you execute get in setup you don't have access to request in should.\n. @davidgf I'm not in a position to fix this issue and in the year and a half it's been open we haven't had anyone outside of rspec users at thoughtbot else chime in either. I'm going to close this issue for now. I'm still considering deprecating this matcher and removing it from 2.0, but I'll make that decision as I'm working on 2.0.\nIf you found a solution to this issue and want to contribute let me know and I'll re-open.\n. Looks good!\n. It stands to reason (and mathematics) that a randomly generated password of length 8 would be more secure than a randomly generated password of length 4. But it is also true that a complex password of length 6 is more secure than a dictionary word of 8 characters. \nI suspect that a minimum length is just security theater. If you are going to use a weak password of 6 characters but there's a limit of 8 characters you will just use a weak 8 character password instead. \nI'm hesitant to include a minimum length by default simply because I think we'd just pick 8 and then have to add a configuration option. What might be interesting is if we had a password policy object that could be plugged and played just like password strategies... To me that's a lot more interesting a feature than setting a limit even if we only ship with a the same loose policy we have today. \nFood for thought anyway. \n. I would say that the policy is something you configure similar to the password strategy. It would be called before the password change is done.\nI think we could consider this for post 2.0. I'd like to feature freeze 1.x at this point. I'm going to close particular issue and we can discuss the broader password policy idea once a clear direction for Clearance 2.0 is established (very soon)(tm).\n. There are things planned or being discussed for 2.0 that I want to nail down before committing to this in 1.x. Namely, we're considering having no internal routes whatsoever and also changing the default generated routes some.\nI also had planned on not adding new features to 1.x at all at this point. That said, 2.0 is taking me a bit longer (and will probably be longer still) so I'm considering it. I just want to make sure introducing this doesn't impact what we want to do for 2.0.\n. I'm leaning towards taking this into Clearance 1.5. I just need to kick the tires on it a bit.\n. superseded by #470.\n. That's not currently possible. You would need to override the controller and add a before_filter for it.\nIs there a problem caused by this behavior? As far as I can tell it would let you log in as another user without first having to log out, which might actually be nice...\n. I think we'll address this by redirecting signed in users to the same place they go after sign in. This could be considered a breaking change though, so I'm inclined to wait for Clearance 2.0 on this.\nWe're still determining the scope and trajectory for 2.0, so I'll tag this for now and when we're ready to commit to a 2.0 direction (soon) we'll know exactly what change to make here.\n. There's an argument to be made that this is just a bug and should be fixed. I can't think of any use case that this would totally destroy, so I think we should probably just fix it.\n. Closed with #513, which will be in our next 1.x release (likely 1.7.1, possibly 1.8).\n. Fine with ignoring the violations. Merge away! Thanks!\n. Looks good. Thanks so much!\nI had a couple of comments and also would need the hound violations to be cleaned up before merging. Do you want to do that or would you rather I pick it up from here?\n. No rush! Have at it.\nOn Fri, Aug 22, 2014 at 11:41 AM, Rod Jenkins notifications@github.com\nwrote:\n\n@derekprior https://github.com/derekprior Please let me take a quick\ncrack at the line counts. I am newer and need the practice. I will have it\nin an hour or so.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/pull/456#issuecomment-53076801.\n. Looks good. We don't usually break up long lines with \"/\". I'd probably extract variables as I suggested in one case there until things fit on one line\n. Yeah, I have it pinned to use single quotes here (we do use double quotes in generated code). I'd prefer to make any potential quoting changes separate from this PR.\n. These changes are so sweeping and critical (the tests have no tests, afterall) that I'd need some more time to really dig into them.\n\nThere's some style things that I'd still likely change and since this is style-only we might as well get those right.\n. Thanks for powering through @scriptmonkey. I'm going to oull this down and go over it closely. I may make a couple changes for style but you have done a good job here. I appreciate you sticking with it!\n. I made a few small changes, rebased on master, and squashed. This is represented in #468. When this passes and I give it one final once-over, I will merge it.\n. I don't quite understand how you're trying to use recognize_path. Can you provide a sample for that?\nYour proposed solution works but would result in that constraint never being met by the recognize_path call, right? Is this okay?\n. > Your proposed solution works but would result in that constraint never being met by the recognize_path call, right? Is this okay?\nThe try you add just has the effect of short-circuiting the call in the case where @request.env[:clearance] is nil. So the constraint will never be met. It seems like this would result in that link_to helper never getting an active class for those routes, regardless of where you were. Am I missing something here?\n. Opened #461 to address.\n. This is fixe on master and will release with version 1.4.3 later today (see #467).\n. :+1:\n. It doesn't sound like inteded behavior. A quick glance at the code leaves me wondering how this would even happen. The cookie is set internally by calling add_cookie_to_headers from the Rack middleware, and the value of the domain is set directly from configuration if it is present.\nAre you seeing this in tests or while running the app? Both? Are you able to share a minimal reproduction? I don't have any multi-domain apps to test with at the moment and likely won't get a chance to look into this until next week.\n. I don't thin kRails issues a remember me cookie. Are you sure that's not a cookie left over from some other local sites you might be running? Try clearning your cookies for that domain and trying again?\n. Thanks for throwing that up.\nThe duplicate \"remember token\" seems to be a browser implementation detail. I hypothesize that chrome (and perhaps other browsers - only checked chrome) creates a session cookie for the current domain that mirrors the cookie that is set on a root domain.\nFor instance, here are the cookies I see in resources:\n\nYet, here is the response from the server that can be seen in the network tab:\n\nAs you can see, the server is sending only the single set-cookie instructions for the remember_token.\n. Merged in d9d63d36c72d5b3c2ac5198f108988e2a28842e0\n. Thank you!\n. Would making sign_in public and adding a hide_action call be better than allowing tests to send a private/protected method?\n. I'm really not enamored with either solution, but I think the documentation change is probably best. If you simply make your sign_in method public (without adding hide_action) is the action still hidden by the hide_action call in the base controller? Or do you have to repeat it?\n. The original wiki documentation has been updated rather than making these changes. Thanks for working through this with me.\n. > Generating a password reset token without any expiration time opens up a potential security flaw. Not a very easily exploitable one, but an easily preventable one nonetheless.\nI agree. Password resets should expire for the reasons you list. This has been on my radar, but I'll have to think about how best to address this. It's likely a breaking change that will need to go to 2.0.\n. This is in progress in #456, which should land very shortly. Going to close this so I can track it in just the one place.\n. @jessieay I actually don't see any should calls int the generated assertions. Do you have a line number you can point to?\nI see a bunch of helper methods named things like user_should_be_signed_out which could easily be expect_user_to_be_signed_out but those helpers themselves do use expect.\nAt any rate, I'm re-opening this as I feel like we should rename those helpers. But if there are places where we're actually using should syntax, then I don't see them.\n. merged. Thanks @scriptmonkey \n. You most certainly do not want to use *_path in your mailer templates. That will produce a relative path which the user's mail client won't know what to do with.\nYou need to be sure you are configuring your action_mailer.default_url_options. See this post\n. Which versions of Ruby and Rails are you using?\n. It seems that the string that is passed to the database is interpreted as binary data by the database. I'm not quite sure hot to fix this.\nI had been leaning toward deprecating and removing all non-bcrypt strategies. I don't think it's worth the investment in fixing them at this point. If you have a need for the Blowfish encryption strategy and want to fix it, I would gladly accept a pull request and assist in extracting the strategy to a gem that you could maintain when the time for removal comes. \n. Fair warning about an external gem: We're going to keep the password strategy idea in Clearance 2 (as you say, I like people to be able to chose something different), but it will very likely have a slightly different interface (they will not be mixed into User as they are today). So any extracted library would need to be updated to work with Clearance 2.\n. This is resolved in ed2c3df72c78f379b49f950818ed59f57960b740\n. > Processing by Clearance::SessionsController#destroy as HTML\n\nCan't verify CSRF token authenticity\n\nThat's your problem. Did you change the sign out form at all? Did you remove the csrf_meta_tags helper from your layout header?\n. I'm not going to pull this in because my plan is to ship and maintain only a single password strategy moving forward. Would you consider exposing this as gem (`clearance-password-pkcs5, perhaps?).\nI plan on extracting gems for the current strategies today and then providing deprecation notices in clearance 1.6 for them. In 2.0 they will be removed from clearance proper.\n. Cool. I've been working on extracting clearance-sha1 and\nclearance-blowfish, so clearance-pkcs5 would probably be the right name.\nOn Sat, Nov 22, 2014 at 3:53 PM, Chris Dillon notifications@github.com\nwrote:\n\nNo problem. I'll do another gem.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/pull/476#issuecomment-64095031.\n. Awesome. Thanks for this. I'll probably merge this today.\n. Landed in ed2c3df72c78f379b49f950818ed59f57960b740\n\nThank you very much.\n. Setting aside the hound warnings, what's the reason for this change? Is this addressing something that is currently broken or do you feel that this is a better key to use? If it's the later, while I agree, it would be a breaking change and not something we're likely to change in 1.x. It's also of questionable value in 2.x, I think.\n. But that would work if someone were to set that key, which many have. I can't change the key now.\n. I'm not able to reproduce this. Have you added clearance to your gemfile and bundle installed? If so, please post your Gemfile and Gemfile.lock for review. Thanks.\n. If you can provide more information, please do so. Closing for now.\n. @Naxmeify It would also be helpful to see the entirety of your routes file.\n. Are you signed in when you try to view /manager ? If not, that route will not be defined. That's how the constraints work.\n. I'm going to close this for now. Please ping again if this still isn't working @Naxmeify \n. > Calling user_from_params here takes away the possibility for users that\n\noverride the controller to override the user_params method with\nparams.require(:user), which is a very common pattern for rails 4 and up\napplications.\n\nI guess I'm having a hard time seeing why this would be the case? If you did:\nruby\ndef user_params\n  params.require(:user)\nend\nThen user_from_params would work with those parameters.\n. I still don't understand the problem.\nIf you override user_params as you say you want to, then it will raise without the user in params. If you don't want it to raise, don't use require?\n. Thanks @gabebw \n. I havent had an opportunity to investigate. I will likely not have any time\nto do so until Friday at the earliest.\nOn Mon, Dec 15, 2014 at 9:05 AM, Olivier notifications@github.com wrote:\n\nAny idea @derekprior https://github.com/derekprior ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/issues/484#issuecomment-66998008\n.\n. Do you get this every time? Are you using spring? If so, can you disable it and try again?\n. Another thing to try (independent from the spring test, or failing that, together with it), in your configuration:\n\nruby\n config.sign_in_guards = [::EmailConfirmationGuard]\nNote the leading namespace\n. Thanks!\n. Yeah, I too have troubles running clearance specs locally and rely on travis. That's bad news. let's figure this out.\n. Ok, with some tweaks to the bin/setup file @gabebw submitted, I was able to go from \"zero to hero\" on my home mac which hadn't run clearance specs in almost a year. I think if you get latest, run bin/setup then run bundle exec appraisal rake you should be all set. That should put you in a good state.\nIf not, re-open.\n. Okay, In the process of trying to upgrade Clearance to rails 3 I got this to re-occur. Re-opening.\nI think the issue is that the cucumber \"integration_with_rspec.feature\" file generates a new app with rspec-rails as a dependency. Now that I have rspec-rails 3.x on my system the generated application is using this version.\nWhich means that the spec_helper in that generated file needs to have config.infer_spec_type_from_file_location! in an RSpec configuration block. Since that's not default, I don't think we can or should do that, unfortunately.\nSo I think we'll just have to add type: :feature to each feature spec we generate.\n. > So I think we'll just have to add type: :feature to each feature spec we generate.\nThat's obviously not going to work... the feature method is not defined. I still think it has something to do with the generated app's rspec version. Just not sure what to do.\nIf you uninstall all rspec 3+ versions from your current ruby, do the tests pass for you?\n. Had some more time to investigate. This has to do with RSpec 3 generating different helper(s) than rspec 2.\n- If the user is using RSpec 3, we probably want require \"spec_helper\" to be require \"rails_helper\".\n- If the user is using RSpec 3, their generated spec helpers will not automatically require all of the files in the spec/support directory like they did before. We should require what we need. We may need to rethink the factory_girl support file that gets generated to include syntax methods and include them only in the specs we need or call FactoryGirl explicitly.\nI hope to have a PR on this today.\n. Fixed in #488. Thanks for raising this issue - I'd been having this problem myself and just never got around to really digging in. The failure was highlighting an actual issue for our users of RSpec 3.\n. Hmm. Those two things should be entirely unrelated. This is surprising to me...\n. I haven't tried to reproduce this, but it does make sense. If the override is in the initializer then it will not get run if rails reloads the controller class.\nBut if you're editing the controller class which is causing it to be reloaded then could you override the layout in that class instead?\n. Closing. Let me know if the suggested workaround doesn't work for you and I'll re-open.\n. Hah. Me from like 2 hours ago opened #490. Review that and we're done :)\n. Here's some history on those files not being checked in to version control: https://github.com/thoughtbot/clearance/pull/312\nWe went round on that so many times, that I can't remember why no files were included. I think the idea was that we could just as easily have travis do it and then not have to remember to do it every time we update the Gemspec/Gemfile.\nRegardless, thanks for doing this. I'll take a look -- possibly tonight -- and merge.\n. @jessieay This looks good to me. \nBasically the things I want to do with each spec are:\n1. Make sure we're testing the right things.\n2. Make sure the tests are at the right level.\n3. Try to make it so someone that doesn't know all of clearance can understand what we're testing and why.\n3. If not too painful, try to follow our current best practices for testing (avoid let, before. focus on methods in the describe blocks - all the stuff you did here).\n4. Is the test in the right spot? This is silly, kinda, but if you hit :A in vim, does Rails.vim take you to the test. Some of these tests are in the wrong spot and it drives me nuts.\nThese are all nit-picky things I guess, but I feel like they really are a hurdle to getting people familiar with the project and willing to participate. I know that when I step away from clearance for a time and then come back, I stumble over these things.\n. I also think it's fine to do these in chunks as you find yourself in a part of the app trying to understand what's going on. Don't feel like you have to go through the entire thing in one big PR.\n. YES. :+1:\n. @jessieay review tomorrow maybe if you've got time?\n. Yeah, got ahead of myself. I realized I had some more work to do here. Tests passed locally...\n. Ready for review.\n. looks good!\n. This does sound reasonable. I'll have to dive back in before I'm certain.\n. @arthurnn any luck with the tests for this?\n. looks like a really good find, thanks. I'm going to play with this a bit in some test apps to make sure I'm not missing something, but this looks good.\n. merged as 3a1244346524d9610105c2e5411bb759c6c05869. Thanks so much for taking a look at this. I'll be release 1.6.1 with this soon.\n. Thanks for the reminder. I think we can go ahead with the move to require_login and add a deprecation for authorize. Still won't help the conflict until we completely remove authorize but at least it puts the alternative in.\nI think at that point you'd be able to handle the conflict with:\nruby\ninclude Clearance::Controller\nundef :authorize\ninclude Pundit\n. Thanks @jeroenvisser101 \n. This doesn't actually appear to be all the warnings as there seems to be a difference between rspec --warnings (a lot more warnings) and rspec with config.warnings = true. It seems the latter just gives you the warnings once the suite starts, perhaps?\n. Regardless, merged.\n. I don't think it should bump the major version. I can't think of a reason why anyone would be using this this method. It doesn't appear anywhere in the documentation though, to be fair, this Gem has no documentation other than a README. That's actually how I came across it, I opened it up to start adding RDoc.\nI could deprecate it instead, which would be safer, but I just don't think it matters. Thoughts?\n. > Ah, you're bumping it anyway. Carry on.\nEventually. There are still many 1.x releases until 2.0. I plan to deprecate things I consider to be \"actual for real public API\" (basically anything other than this method here).\n. That's fair. I'll deprecate.\n. What kind of things would be easier?\nOne reason I can think of not to do this is that currently clearances\ncookie policy can be different than your rails session cookie.\nOn Wednesday, January 7, 2015, Arthur Nogueira Neves \nnotifications@github.com wrote:\n\nWhy clearance use a separate cookie to save the token? any particular\nreason.\nSaving the current user id on rails session would probably make things\neasier.\nThoughts?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/issues/510.\n. > It's very non-standard to not use the built-in rails sessions,\n\nI'm sorry, but whose standard?\n\nIt would be good to have some documentation about this in the readme \u2014 what the situation is, and what the rationale is.\n\nI think Joe and I provided two decent examples here.\nAre there specific problems you feel this creates?\n. Merged in d372ebd3adbb646dea2822c25d1530da5bc36c5f\n. Thanks @kenyonj. This looks good to me but it looks like it should remain open for some discussion for a bit.\n. merge away!\n. Few minor comments. Thanks for updating the spec as well.\n. LGTM. Assuming travis passes, squash (2 commits looks good here) and merge.\n. Looks good. Rebase and merge.\n. Have you overridden the sessions controller at all? If so, can you share it\nhere?\nOn Wednesday, January 14, 2015, Gabriel notifications@github.com wrote:\n\nHey\nI updated my gem today , clearance update from 1.4 to 1.7 , but I face\nthis redirect problem , can you help me ?\nthanks man !\nStarted GET \"/sign_in\" for 127.0.0.1 at 2015-01-14 15:35:15 +0800\nProcessing by Clearance::SessionsController#new as HTML\nRedirected to http://localhost:4000/sign_in\nFilter chain halted as :authorize rendered or redirected\nCompleted 302 Found in 1ms (ActiveRecord: 0.0ms)\n[DEPRECATION] Clearance's authorize before_filter is deprecated. Use require_login instead. Be sure to update any instances of skip_before_filter :authorize or skip_before_action :authorize as well\nStarted GET \"/sign_in\" for 127.0.0.1 at 2015-01-14 15:35:15 +0800\nProcessing by Clearance::SessionsController#new as HTML\nRedirected to http://localhost:4000/sign_in\nFilter chain halted as :authorize rendered or redirected\nCompleted 302 Found in 1ms (ActiveRecord: 0.0ms)\n[DEPRECATION] Clearance's authorize before_filter is deprecated. Use require_login instead. Be sure to update any instances of skip_before_filter :authorize or skip_before_action :authorize as well\nStarted GET \"/sign_in\" for 127.0.0.1 at 2015-01-14 15:35:15 +0800\nProcessing by Clearance::SessionsController#new as HTML\nRedirected to http://localhost:4000/sign_in\nFilter chain halted as :authorize rendered or redirected\nCompleted 302 Found in 1ms (ActiveRecord: 0.0ms)\n[DEPRECATION] Clearance's authorize before_filter is deprecated. Use require_login instead. Be sure to update any instances of skip_before_filter :authorize or skip_before_action :authorize as well\nStarted GET \"/sign_in\" for 127.0.0.1 at 2015-01-14 15:35:15 +0800\nProcessing by Clearance::SessionsController#new as HTML\nRedirected to http://localhost:4000/sign_in\nFilter chain halted as :authorize rendered or redirected\nCompleted 302 Found in 1ms (ActiveRecord: 0.0ms)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/issues/517.\n. I should probably ease this transition a bit. Thanks for bringing the issue\nto my attention.\n\nOn Wednesday, January 14, 2015, Gabriel notifications@github.com wrote:\n\nno, I doesn't change session controller\nbut it's fixed by replacing authorize by require_login .\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/issues/517#issuecomment-69912260\n.\n. See also #517 \n. I think testing it would be difficult, but not impossible. I'd need to temporarily create an application controller (since that's what the clearance controllers inherit from) that uses the authorize filter then be sure I don't get stuck in a redirect loop.  \n\nNot sure of the best way to do that because I can't easily undo the side effects of before_filter. That is, I can't simply undef a method when I'm done.\n. > Can you do something like:\nYes. But I need to do that 6 different times. So I was going to wrap that in a method on Clearance::BaseController\n. > Also, it might be worth dropping support for Rails 3 soon (or at least deprecating it). There have been three minor releases (4.0, 4.1, 4.2) since Rails 3, so people have had plenty of time to switch (since June, 2013 according to rubygems.org).\nYup. The problem is I'm in the midst of one bunch of deprecations already and I'd like to get those done before bumping the major version. 2.0 will clear those deprecations and also require Ruby 2.1+ and Rails 4.2+\n. 4.2 might be a bit strict. Might have to let in 4.1 or even 4.0\n. I'm not sure we need to do this, actually. The _filter methods are not deprecated they are just no longer documented. The release notes say:\n\nIf your application currently depends on these methods, you should use the replacement *_action methods instead. These methods will be deprecated in the future and will eventually be removed from Rails.\n\nI feel like we should be good until Rails 5, at which point we'll hopefully have a new major version of clearance that supports Rails 4+ (and 5).\n. Closing as I don't think we should do anything yet. We should just switch over to _action in Clearance 2\n. :+1: pending CI.\n. I'm going to merge in the spec improvements but leave the functionality unchanged. @mxie is working on a new password reset mechanism and I think given the problems in implementing this here it's reasonable for this issue to be addressed only there.\n. There's a section of the readme that lists each configuration option. Can you add this there?\n. Looks good to me.\n. Squash and merge (ff-only).\nI can release this as 1.8, though I have to write up the NEWS for a few changes that will be included. I'll probably do that tonight. If there's a pressing need for it to be released now, let me know.\n. 1.8.0 is released.\n. :+1:\n. That makes a lot of sense.\nOn Mon, Feb 2, 2015 at 10:46 AM, Joe Ferris notifications@github.com\nwrote:\n\nThink it's worth having a test for this? My idea:\n- Make an anonymous controller subclass using rspec-rails.\n- Mix in Clearance::Controller.\n- Make sure there are no routable actions.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/pull/530#issuecomment-72479004.\n. Thanks, @pedrosmmoreira \n. Took a quick spin through everything. This is great, thanks so much.\n\nI do think we can do this in a manner that lets us ship this in opt-in fashion for 1.x. Either via a separate controller and/or via service objects like monban. We can look at it Friday.\n. I have not forgotten about this, I've just been out or otherwise engaged on investment days. I'll be out this Friday as well but will try to spend some time playing with this on the plane.\n. Ok, sorry it took me so long to get back to this. I like this a lot. I have a few questions or suggestions. Let me know what you think. I'll take a look at the state of master and decide whether the merge target for this should be master (that is I expect to release 2.0 soonish) or if I want it to go to a 2.0 branch while I deprecate a few more things in 1.x...\n. With Clearance 2.0 progressing, I was finally able to return to this. I made some major changes that are afforded by dropping support for older versions of Rails. We now no longer need the database for password reset tokens, so the resulting PR is simpler, I think.\nSee #682.\n. I tried to shorten it a bit and bias it towards RSpec 3+. Merged in 8141301. Thanks so much for this!\n. :beers: \n. ah yes. I always forget to switch rubies...\n. I don't think we need to specify copyright as a range. Otherwise :+1:\n. Can you show me your existing routes file from before you run step 4?\n. This isn't a problem with the view generator, it's a problem starting the app. The routes were generated locally but the Clearance configuration is not set to disable the internal routes. If you open config/initializers/clearance.rb and add config.routes = false, the view generator will work.\nWe should probably make this happen automatically somehow.\n. > I don't understand what you mean under 'The routes were generated locally', as I have a git repository and I can check if I have changes.\nI mean you ran the routes generator, which copied Clearance's routes to your config/routes file. However, it did not also set your config to disable Clearance's internal routes. So Rails refuses to start because of duplicate routes.\n\nThey say, if one does something according to the documentation and gets an error, then there are at least two reasons for that, as follows:\n1. We have bad documentation.\n2. We found a bug.\n\nThe issue is still open because I intend to address it somehow - likely with a code fix and documentation both. I may not have time to address it for a bit, so if you'd like to take a crack at a fix, feel free.\n. @eleidan Thanks for bringing this to my attention. The issue has been fixed by updating the routes generator. This will likely be released later today.\n. Seems fine. I'd also be okay with this above the \"Contributing\" section if that would help. Also maybe worth adding to the final line of the readme? Something like:\n\nWe are available for hire and 1-on-1 coaching?\n. :+1:\n. Ugh, Spring.\n\nThere isn't a great way to configure a user class without storing a reference to that class. I could perhaps take a lambda instead but config.user_model = -> { User } is a pretty nonsensical configuration that would exist only to solve a problem with pre-loaders.\nI could generate an initializer like you have above but that seems like it would be super confusing to most people. I don't see a good solution here at the moment. What do you think?\n. Hmmm. Wonder if I could change the configuration reader to do something like:\nruby\ndef user_model\n  -> { @user_model }.call\nend\nOr perhaps only do that in the case where we're running with a pre-loader or something?\n. I assume that's still going to have the same problem.\n. I think that means I'd have to hard-code config/initializers/clearance.rb as the file path to reload. It's an option.\n. Fixed in #547. I'm trying to get a release with this change (and a couple others) out today.\n. @pedrosmmoreira This came out of this Stack Overflow question: http://stackoverflow.com/questions/29136246/rails-4-and-thoughtbot-clearance-adding-fields-to-the-user-model/29146029\nConsider a case where you expect to have different parameter rules for the user you construct for the new action and the user you construct in create. Both of these actions call user_from_params with no arugments. That method gets the params from user_params, again with no params. So there's no obvious way for user_params to know if it should be using params for the new action or params for the create action.\nUsing the action key is one way to do it, but I don't think I want to do that. Feels wrong. Not sure what right is though... any other ideas?\n. @j-dexx What breaks completely? Sign up?\n. Cleaned up a bit in #547\n. It's likely Mongoid could be supported (minus migrations) with the right User model. I have no idea about Neo4j. This gem is definitely focused on ActiveRecord. That said, I am currently working on documentation when I get the time, so hopefully soon there will be documentation on what Clearance::User requires.\nI don't want to document support for anything other than active record unless that support is tested and maintained, but better docs on the interfaces required would at least give people a starting point.\n. Documentation is coming along slowly. I don't forsee us ever officially supporting anything other than ActiveRecord so I'm going to close this.\n. Introducing a new key for existing text might be tricky to get right. If your language is set to french, for instance, you don't get the benefit of the default translations we provide. So now your password reset mailer has a link with the text \"link text\". We can't rely on apps using clearance to have configured english as a fallback.\nWe may need to provide a default: Change your password option to the translate call. Thoughts?\n. Updated and merged in 41f06bef59563cad535a339431a1b7f5623c6e44\n. Thank you @farukaydin.\n. > The ActionDispatch::Reloader#to_prepare callbacks are run before each request.\nThat seems to be the context we're in inside that to_prepare block for the Engine.\n. I thought about that too. At that point I'm just guarding against someone deleting the to_prepare block. I wouldn't be testing actual behavior. I'm hopeful people will read documentation or git history for the impacted lines and think that's higher value than this particularl test.\n. It seems my tests for reload_user_model are non-deterministic, so I'll need to spend a bit more time here.\n. Thanks!\n. I don't follow the PR description here as you list the same file twice. I've search the body of the spec you propose deleting and don't see it anywhere.\nThis spec ensures that Clearance::Controller does not leak action methods and was introduced in f518f65973616f3b88c2b55dd02386862ae70682.\nClosing for now, but please continue the conversation if you think this is in error. Thanks.\n. Ahhhhhh yes. I see now.\n. Merged in 754bc8a0afe709150737312a62c799eeac014c02\n. I'd file this as style, rather than syntax, but it bothers me that they aren't consistent as well. We've been transitioning from single to double quotes with changes, though, so if you want to switch those to double quotes, I'll merge this in.\n. merged in cc65610, thanks!\n. Do you have a suggestion for what the flash should say? Unfortunately, I can't think of anything particularly useful that wouldn't then be an impediment for people with different sign up requirements.\nI thin the proper way to handle this is to customize the sign up template to display errors as you would see fit. It's a tough thing for us to do for you because error styling is generally very app-by-app.\nWhat do you think?\n. This is my least favorite part of Clearance to make decisions on... It's hard to get shared UI right at all. I'd be perfectly fine making some of these changes if generating the views into your own app was required and this was just a default option. But it's not required -- you can run with internal views.\nI like the idea of setting the flash and as @jessieay points out, we're already doing that elsewhere. But I'm just not sure what that message should actually say. I don't think I'd consider this a breaking change, though some could argue it is. Clearance already assumes you display and style flashes. If your layout doesn't show them, then you won't get them, if it does, it should be displayed acceptably.\nPresenting errors as @DavidVII mentions makes it obvious how to handle the messaging, but its also something I would consider a breaking change. There's no expectation for your sign up form to have styling to handle that markup in a nice way. That markup is almost exactly what error_messages_for did in Rails 2.3, but it was removed because it pre-supposes too much about how end apps should display errors. Error display is seldom identical across apps, in my experience.\n. I'm leaning towards making this a Clearance 2.0 change, adding errors to the view, and possibly requiring that views be dumped to your app and not served internally.\n. :+1:\n. Thanks!\n. The referenced gem is not live yet, but is available to other thoughtbotters for review at https://github.com/thoughtbot/clearance-deprecated_password_strategies\n. Closing for #554 which is a similar discussion\n. > So I was wondering, if the redirect_request is called only if !signed_in? is true why is this condition being checked again inside redirect_request?\nIt's possible this was used in multiple places before, and even if it never was it's a potentially useful method when integrating with authorization frameworks. You can call redirect_request and have it act as clearance would using the same settings.\n. @samjbmason - this has been corrected. Thanks for bringing it to our attention.\n. Is being redirected the login form not a sufficient enough notification that the user needs to log in?\n. Closed with #597 \n. Hi Aaron,\nThanks for the PR. I haven't had time to look at this yet, as I've been\nbusy with client work lately. I may have some time on Friday, if not, it\nwill be the Friday after that.\nOn Tue, Jun 23, 2015 at 7:19 AM, Aaron Graves notifications@github.com\nwrote:\n\nPing?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/pull/563#issuecomment-114471783.\n. I definitely appreciate the idea here, but I'm not sure we can move forward with this as is and I'm not sure how difficult moving forward with it would be...\n\nFor one, in the comments I pointed out that you may set your allowed domain down to the subdomain and the current code does not allow for this. But if you make the code consider the full host, you might miss the other case where you've got your allowed cookie domain set to \".example.com\"it should match *.example.com but I don't think it would with this code, correct?\nWhat it feels like we would need is an object that, given a cookie_domain setting and a domain determins if it matches, based on the RFC. I wonder if that exists already?\n. Going to close for now. @agraves ping me again if you'd like to move this forward.\n. Good consolidation. Breaking changes are a fine line to walk when it comes to an engine. Almost everything could be considered a breaking change.\nI cant think of a use case where you'd want to handle both of these seperately. I think I'm okay with the consolidation here and okay with doing it in 1.11.\n. I like it. :+1:\n. Not waiting for travis. He seems to be napping...\n. Clearance is intended to be an opinionated engine on these things. It doesn't have a password confirmation field during sign up or do email confirmation of signups (out of the box or even via twiddling config) because we find these things to be more annoying than beneficial.\nThat said, it's certainly possible to do both of these things. For password confirmation, you'd need to:\n1. Make sure you user has the attr_accessor for the confirmation field.\n2. Add the validation for the confirmation on user\n3. Add the confirmation field to your view.\nI think that should do it, even with the default controllers (no need to override).\n. @phil-monroe Are you using Clearance 1.9.0 or newer? We added this change to try to address these issues.\n. Looks good. I'm :+1: on fixing the quoting.\n. merge away!\n. :+1:\n. :+1:\n. Thank you. This certainly seems like more rails-friendly behavior.\n. The individual constraints are documented with thorough examples.\n. @mcmire sorry - missed your comments. Will remedy in follow up commits\n. Can you come up with a way to get the foreign key name programmaticly that would work with this case? Using table_name.singularize might work in this case better than model_name.singular but I'm just not sure it's more reliable overall. \n. I haven't worked in a context where the thing I'm authorizing is namespaced. I'm not against a fix for this so long as we can find one that works for the existing cases and also addresses this, but I can't say I'm going to spend much of my own time on it. I'm going to close this for now, but if you'd like to work on it and ask questions via this issue then I'll re-open.\nThat offer goes for anyone else that might stumble on this issue.\n. There is not currently a built-in option for doing email confirmation. There used to be an option for this a number of years ago, but we've found it to be a cargo-culted practice that doesn't actually give most sites anything of value compared to the hassle it causes users. It's one of the opinions Clearance holds.\nThat said, I have worked on sites where this was a necessity, so we've been improving the story on how to handle this type of functionality yourself. I've also been writing a lot of documentation lately, which may help.\n1. You will need to add two columns to your user model or to a join model: email_confirmation_token and email_confirmed_at (or a boolean if you'd rather).\n2. On registration of a new user, be sure to generate an email_confirmation token and also deliver an email with the confirmation link.\n3. Write the email confirmation controller that marks the user as confirmed and blanks the token.\n4. Write and configure a Sign In Guard that disallows sign in by users that are not confirmed.\n5. For extra credit: handle this process again when the user changes their email addrress.\nWe attempt to provide the controller extension points that might make sending that email possible and the Sign In Guards that allow you to block sign in for any number of reasons.\nI do think that a well done email confirmation process might make for an interesting gem available as an extension to clearance.\n. we do validate emails for proper format, using the email_validator gem. We just don't validate that it's deliverable or that the user owns them.\nYou could potentially monitor bounces for marking a user as having an invalid email. Another approach I took on a project once was to have every single email we ever sent a user contain a confirmation parameter in the links. If the user ever once clicked a link from an email we'd confirm that address using an application controller before_filter. So it was more of a passive email confirmation.\n. Here are some old numbers from a product we ran with email confirmation:\n\nWe have numbers that show you lose customers this way. In one example, we have a consumer app with 9,204 email sign ups, but only 4,607 confirmations.\n\nSource: https://robots.thoughtbot.com/email-and-password-confirmation-bias\nThat source is old and the result anecdotal rather than scientific, but it mirrors my experience. I'm not trying to disuade you in particular from adding this feature to your specific app -- mostly just trying to document the entire conversation since this request comes up somewhat frequently.\n. That was going to be my suggestion but you should be able to do it by\ndefining that method in your user class rather than monkey patching\nclearance.\nOn Friday, September 18, 2015, Ben Livermore notifications@github.com\nwrote:\n\nAfter more study, we realized that we could override the email_optional?\nmethod have it return true and effectively eliminate the validation so we\ncould add our own. So we added the following code in the clearance\ninitializer file right after our configure block.\nmodule Clearance::User::Validations\n  #remove email validation so we can use our own\n  def email_optional?\n    true\n  end\nend\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/issues/590#issuecomment-141551372\n.\n. Thanks for the heads up. We won't beging testing with Rails 5 until at least a beta is released. I don't want to make any changes for it just yet, as we may end up shipping Clearance 2 and requiring that for Rails 5 anyway.\n. Merged in 7a63a2a.\n. Thank you!\n. The clearance specs test the generated specs, and those do not fail. It's likely (though not definite) that the problem exists in your application. I'm happy to help on StackOverflow.\n. Thanks for the PR. \n\nI'd prefer to have the setup inline. This saves typing at the cost of making the specs a tiny bit harder to read as a whole. \nThis is defined in our style guide here: https://github.com/thoughtbot/guides/tree/master/best-practices#testing\n. Clearance has a dependency on Rails, which itself depends on ActiveSupport. It's possible we need a more explicit require statement to be certain we have loaded the parts of ActiveSupport we require.\nWould it be possible for you to post your Gemfile and Gemfile.lock ?\n. @oiojin831 I have cloned your repository and tried to replicate the issue, but I'm not able to. I tried removing the middleman group in the gemfil (and putting those gems in the default group) but I'm still able to start the app just fine.\nCan you point me to a commit in your app where this is broken and give me instructions on how to break it? Does the app refuse to start or do I have to hit a certain path?\n. Closing for lack of activity. If you have any more information, please do not hesitate to add it.\n. Thanks for this @ramirovjr. For the time being we've decided not to accept localization PRs into clearance itself. There are a couple of different reasons for this:\n1. We're not really suited to check if changes to functionality would impact translated text.\n2. If we add new keys for a feature, do we have to wait for all translations in order to ship?\nWe have clearance-i18n which is both a gem that users can opt into and also meant as a starting point for people to extract the translations they may require. We haven't publicized it much because, to be honest, I'm not 100% satisfied with this approach either (versioning compatibility has me worried).\nFor the time being, at least, we will continue this approach. The PT-BR translations do already exist in clearance-i18n. You can open a PR there if there are differences (particularly if the existing ones are incorrect).\nThanks!\n. Good idea. I had some comments, if you want to take a crack at updating so I can merge. Thanks!\n. Merged in 7e7936d4e689fb45db22e56bb39a7b7ca475f294. Thank you so much!\n. Thanks for bringing this to my attention. I have a PR that fixes this in a different way. See #603, which I will merge soon.\n. Ah, I missed that. Fixing separately. Thanks for reminding me!\n. Thanks for the contribution!\n. Yeah, I noticed this when I did a documentation pass. The last call to it was removed in 5e107f6695461baa006cb03ed548255ecddd5a7c. \nI could probably remove it without a problem, but it's another one of those things where this is public API and I can't be sure that someone isn't using it in one of their controller overrides. I think this will have to wait for 2.0 to remove.\nWhat do you think?\n. This was fixed in 23f129a7126190a6e715eb885db854977b5038e4, which is in the 2.0 branch.\n. This is a bit harder to address than I would like due to the fact that many of the forms do not have backing models which to call validate on. I could write those easily but that'd be a breaking change for people who have generated the views.\nWe could do validations in the controllers based on params, but I don't really love that solution. One stop-gap would be to add HTML5 validations to forms. I'll likely kick the tires on this.\n. I agree. Clearance has been around a long while so conventions and tastes have changed. Changing this is a backwards incompatible change so I'll have to think about the right way to approach it.\nEasiest is that we wait for 2.0 and make a breaking change, but we could also allow a configuration for anyone that wants to fix it right now and then remove the configuration in 2.0. Hmmm.\n. This was addressed by https://github.com/thoughtbot/clearance/pull/672, which was just merged to our new 2.0 branch.\n. merged as f7b9dfb7638eb85e71ec73d62ff1508ea8c1b239. Thanks!\n. One of the tests that gets run on a full rake generates a new app, installs clearance and the generated specs, and runs the tests. So that's how this gets tested. Thanks for the patch!\n. merged in 9c7d85e42d38f32f399b2503ee6549eceb30dcdb, thank you!\n. Wow, that's a crazy non-conventional key we're using there.\nNice idea, I'll get this merged.\n. Merged in 463f468. Thanks so much for the contribution!\n. Hello @jrguenther. Sorry it has taken me a long while to get back to you. I have been taking a break from Clearance work, mostly.\nAs I said on the podcast, this type of documentation appeals to me quite a bit, but it's not immediately clear to me where it should live. I think I made my feelings on wikis for documentaiton pretty well known in that episode and this project's wiki is an example of that.\nRight now I'm thinking maybe the best would be a collection of markdown documents in the projects doc directory. This would be similar to how rails guides are maintained -- I even like the idea of guides.\nTo add to what your list, here's what I see for guides:\n- Popular Customizations\n  - Using Strong Params\n  - Adding fields to user registration\n  - Requiring password confirmation\n  - Requiring email confirmation\n  - Suspending users\n  - Sign up by invitation only\n- Security Guide\n  - Securing cookies\n  - How overall site security can impact clearance security\n  - How database security can impact clearance security\nIdeally these guides, particularly the one about customization, would make use of good APIs to enable these customizations (and we would create them where they don't exist) and link to the appropriate API documentation for more information.\nWhat do you think?\n. We can also include the guides as documents that are available with the documentation generated by yardoc.\n. Not actionable right now. Closing.\n. This is an interesting idea. I don't see why we would limit it to the confirmation_token. It seems the remember_token would be even more important to do this with.\nOne option would be to allow the values in the database to be stored as is, but expect that they are signed or encrypted with your app's secret key when passed from a user. This would be mostly backward compatible in that it would just invalidate existing sessions or outstanding password reset links.\nThis would prevent a leak of the database from exposing account access (not passwords - passwords are encrypted, of course). Presently your only recourse in this situation (as an app owner) is to rotate all remember tokens and confirmation tokens. If we made a change like this, you would need two pieces of information to make use of those tokens: the tokens themselves and the key with which they must be signed/encrypted in transit.\nI'd be interested in other thoughts on this.\n. Unless I'm missing something (quite possible), I don't think that would work. We could set their cookie to the the BCrypted value of the token that is stored in the database but anyone with access to the database could do the same thing. It's one more step someone with a database dump of accounts would have to go through, but it's just obscuring the token.\n. Thanks for the contribution.\nIf you have allow_sign_up? set to false then Clearance disables these routes. If you''ve run the routes generator to copy Clearance's routes locally then you have the power to redirect these (or delete these) from your routes file already.\nIs there another use case we're not considering?\n. I've elected not to expand the use of allow_sign_up? at this time. You should be able to implement this in your own application in any number of ways - either by overriding the controller actions (calling super after your check) or perhaps with custom routing constraints and the like.\nAgain, thanks for the contribution it's just not something I'm comfortable incorporating at this point.\n. It sounds like you already figured out how to collect the additional fields on registration? If so, that was probably the hard part! The model is yours to do with what you'd like, but several people have run into some issues when adding new fields to collect at registration because that requires overriding the clearance controllers themselves. There is only API documentation on the various controller methods and that is not yet complete.\nAs for editing or updating users, clearance does not implement this functionality. You will need to add your own routes and controller/controller actions for this and handle it the same as any other action. Clearance only provides users#new and users#create.\n. It doesn't expect a numeric id so much as it expect to be able to use the id field for a query. I think what you have done is the correct solution for now. You also could have implemented find_by_id_and_confirmation_token on your User model to do what you need, but I think I like what you did better.\n. @coryodaniel: Thanks for looking into this. These seems like really large changes and I have to admit I don't fully understand the problem right now. Is there any way you can either:\n1. submit a failing test case, with no code changes, that describes the problem.\n2. provide a link to a minimal reproduction application that I can play with.\nWhen I have the time to do so, I'll probably try the 2nd one myself to better understand this, but that likely won't be for some time.\n. This is not merged. The best way to move forward would be a single failing test case or minimal reproduction sample app. At that point, I'll better understand the issue and hopefully be able to provide some guidance on what I think the best change would be in a way that limits the scope as much as possible.\nThanks.\n. Thanks @teoljungberg \n. The middleware has always been inserted at a set point in the stack ever since we started using middleware. The git history doesn't tell us why. I'd want to do several manual tests before changing it and speak to some people here to see if anyone has context on why it's located where it is.\nAs for any other Rails 5 issues, please open new, focused issues as you find them. This will make tackling, testing, and reviewing these easier.\nI do not currently have the time to review these issues, but may next week.\n. @jferris Rails api default middleware stack (see original report in this thread) does not include ActionDispatch::Cookies either.\nIf I had to guess - and this is only a guess - the change you linked was made because at the time, the rails api project did include params parser and that also conveniently happened to be after ActionDispatch::Cookies in the default rails stack. Like I said, just a guess.\nIt doesn't appear we depend on ActionDispatch::Cookies being present, so the suggestion to put it after whatever rails decides is its middleware stack seems like a good one. \n. > It doesn't appear we depend on ActionDispatch::Cookies being present\nHere I'm only going off of what people in this thread have said and that the linked commit solved the problem in an older version of rails-api.\n. I have merged the middelware position change. I'm slowly working through Rails 5 issues and hope to have something working for folks to test soon.\n. Hi @drale2k, as mentioned there is progress on the master branch and there is more progress in PRs. Clearance does not yet support Rails 5.\n. @JoshSmith What version of Clearance are you using? 1.13.0 was the first version that purported to support Rails 5. The releases page or the NEWS file have more detail.\n. @GCorbel could you rebase this against master? We're now set up to test against Rails 5 on travis (in allowed failures mode) so we should see this improve our failures there.\n. Merged in bac9f28 - Thanks!\n. It seems like we should be able to pass raise: false as an option to skip_before_filter.\n. Closed by 23d93b8\n. Correction - the gemspec says we support 3.1 as well (but we do not test against it, thus my mistake).\n. Merged in 23d93b8 - Thanks!\n. They're related because our test helpers made use of the methods being public. e.g. @controller.sign_in. \nThis raises an interesting point: users could have been relying on the same in their own apps. However, I think of this as a bug we're fixing more than a feature that we're removing. I have doubts people are doing this in their own apps and think we can proceed with this as a 1.x change.\n. I think most people expect controller helpers to be \"private\". I can't imaging an application use case where this would be a problem. I think it's more likely to be a problem in tests, but even then, I suspect updating our own helpers is sufficient.\nThe Rails 5 changes are going to be numerous and will likely require a beta release. So we can test the waters there a bit.\n. We had previously split this out to https://github.com/thoughtbot/clearance-i18n/, but in hindisght I'm not entirely sure that's a great solution. I might want to just merge these in here, though it means there will be some additional overhead or perhaps untranslated values when things change...\n. @alejandropereira What's your experience been with i18n for other engines (if any)? Do they provide translations in the library?\n. For now, let's keep them in clearance-i18n.\nThe reasons for splitting them out originally were:\n1. decouple i18n changes from clearance releases\n2. allow people who know these languages to have commit on the i18n repo themselves (because I can't review Spanish).\nFor Clearance 2.0, I'd like to explore the possibility of using the clearance-i18n repo as a git submodule directly in this repo. That way we could still give people commit there to help with translation without giving them commit to Clearance code.\nI'm not sure about how well that'd work or the security of it, though.\n. @JulienItard Do you want to merge this into clearance-i18n for the time being?\n. I started work on this but ended up with the following direct dependencies:\ns.add_dependency 'railties', '>= 4.2'\n  s.add_dependency 'activerecord', '>= 4.2'\n  s.add_dependency 'actionpack', '>= 4.2'\n  s.add_dependency 'actionmailer', '>= 4.2'\n  s.add_dependency 'activesupport', '>= 4.2'\nThose dependenices themselves depend on all the other parts of rails except for actioncable in Rails 5. The onerous dependency situation has mostly been ironed out and in any event the actioncable gem itself brings no new dependencies. It seems fine to leave the dependency as rails proper.\n. I went ahead and made the suggested change. This has been merged in fbf026e. Thanks for the contribution!\n. To me, the updated tense in the list items looks at first glance like a list of things I'm supposed to do. The previous tense made it clear that something else is doing it for me. At least that's my ipression. @estelleccl, what was your intention with that part of the change?\n. What I meant was - that list (the actuall bulleted list in this PR) could easily be scanned as a list of things I need to do to use this gem, when in reality it's a list of things the gem does for me when I run the install generator.\nThe rest of it I like. I'm just nitpicking of the changes from Installs to Install\n. I liked the bulleted list version, so I went back to that, but the other changes have been merged in a38ef7d. Thank you for the contribution!\n. Thanks!\n. I'm not sure. We're not targeting alternative ORMs. We don't use them regularly enough to support them. I would say that you could take a look at Clearance::User for most of the interface at this point.\n. @jrguenther Do you want to work up a patch?\n. Closed by #643 \n. You could also set the i18n explicitly to an empty string and make sure your flash-rendering code checks present? before displaying the value.\n. I think the two solutions above should do the trick. If they aren't sufficient, let me know.\n. @jrguenther I took a slightly different approach by introducing a method on configuration for this. I'm happy with the testing provided by testing that method and I dont think we need a more end-to-end test. I left you as the commit author. Can you check out https://github.com/thoughtbot/clearance/pull/643 and let me know what you think? If it does the job we can get that merged soon.\n. You are meant to override Clearance::UsersController with your own controller, and update the necessary routes to point to that controller. Then you wouldn't be hacking user_from_params, you'd be overriding it.\n. Fixes #635 \n. Appraisal manages the gemfiles, yes. We need them checked in so we can get separate travis builds for each of them.\n. Addressed by #648 \n. Clearance returns the unauthorized response code to requests that have a js format. Redirecting doesn't make sense here because we're not dealing with a browser client.\nI'm not experienced with TurboLinks. What do you think should happen here?\n. To be clear, require_login isn't failing. It's behaving as it should, as far as I can tell. What does turbolinks expect to be returned in cases where there should be a redirect?\n. Ah yes, I think I see now. Thanks for that. I'll keep an eye on that issue but I think we're good in clearance for now.\n. Good point. Unfortunately, find_by is not supported in Rails < 4. The current construct gives us the greatest compatibility. \nWhen we cut over to 2.0 we can do this but I need to get a Rails 5 release out first. Closing for now. \n. I'd consider using a before_action other than require_login. Something like require_login_or_secret_token:\nruby\ndef require_login_or_secret_token\n  unless params[\"super_secret_security_token\"] == TOKEN\n    require_login\n  else\nend\nThen you'd need to override current_user to return a guest object rather than nil:\nruby\ndef current_user\n  super || Guest.new\nend\nOr something like that. This advice isn't perfect, but that should be enough to get you started.\n. Hello @Copywright. Thanks for preparing this. Argon2 has been on my list of things to investigate for Clearance 2.0, but I haven't had the time to do it. I was excited to see this come across.\nI've given some feedback on the code, but ultimately I don't think I can accept this into clearance directly at the moment. There are a few reasons:\n1. I don't want to add a dependency on argon2 while most users of the library are likely to be using bcrypt.\n2. I prefer, at least for now, to ship a single password strategy that we recommend. We currently have some other password strategies in the repo, but they are deprecated.\n3. I'd actually like to change the implementation of PW strategies for Clearance 2. Right now, they get mixed into your User object directly but I really don't want to to do that anymore if we can help it.\nI like what you've done here, though. What I'd suggest is extracting the work you've done here into a gem, clearance-argon2, that depends on Clearance 1.x. Then you'll be able to use argon2 and we can monitor how it's working for people as we decide how to move forward with strategies in Clearance 2. It's possible that we'll pull this in for 2.0 in some form, but I'm just not sure yet.\nIf you need assistance in how you would go about setting up the stand-alone gem, you can take a peek at clearance-deprecated_password_strategies to see how we pulled out the earlier strategies. If you need more help, let me know.\n. config.user_model = User is the default. You don't need this line here. If you remove this, does it work?\nAre you running the most recent version of clearance?\n. I'm confident there's a work around in load order.\nI also suspect this might have to do with auto-reloading in development,\nbut I'm not certain. That's why I asked for the version you are running; an\nearlier version of clearance made some improvements when reloading the\nconfigured user model in development.\nIt hasn't come up in the years maintaining this gem, so I'm not inclined to\nspend much time looking into it right now. If you'd like to poke around\nmore I'd certainly entertain a patch or dig more into if you can provide a\nminimal reproduction.\nOn Thu, Mar 10, 2016 at 3:33 PM, Jonathan Rochkind <notifications@github.com\n\nwrote:\nclearance 1.12.1, paperclip 4.2.4.\nI see there's a slightly newer clearance, I'll try upgrading... made no\ndifference on clearance 1.13.0. (The slightly old paperclip is required by\none of my dependencies).\nI might be able to get away without config,user_model = User since it's\nthe default, but it seems bad if you can't use another class name that also\nincludes paperclip, yes?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/issues/655#issuecomment-195035018\n.\n. However you want, but a github repo would probably be easiest.\n. Looks good!\n. Thanks. This was merged as 663b039894546df01f841dda10b23625d27a84c1\n. Thanks for this. Closing in favor of #663 which is ready for code review now.\n. Thanks for this!\n. Which helper methods were you thinking, specifically? current_user? I can't say I'm likely to accept making that name dynamic. \n\nIf you want current_account then it can be implemented as a helper method:\n``` ruby\ndef current_account\n  current_user\nend\nhelper_method :current_account\n```\nI can see how having the extra methods would be annoying but I don't think it's worth moving to define_method for.\n. I agree that this should be easier to implement than it currently is. I haven't had the time to really dig into this and review it, but my first thought is that I wonder if we could handle this without a specific feature opt-in. Can we improve current guards and the sign in process to make this work?\nI wonder if instead of sending nil into the stack when we have a valid email but invalid password if we should instead pass in a special Guest or UnauthenticatedUser object or something (haven't thought too much about this clearly) that would have the email address associated with it so you could look up the user if you wanted. Then we'd update sign in code to raise an error if it ever tried to sign in one of these objects.\nI'll try to look at this on Friday if I get the time. It's possible by then I'll think the above idea is crazy.\n. I'm not inclined to merge this now as I think it complicates sign in a bit too much.\nIf I were going to implement this in my current application, I'd consider a couple of options. The first would be overriding authenticate in controllers to something like so:\nruby\ndef authenticate(params)\n  super || log_unsuccessful_attempt\nend\nlog_unsuccessful_attempt would create an unsuccessful_authentication record in a database. Then I'd add a SignInGuard that would disallow sign in if there are a certain number of unsuccessful authentication records with a certain timeframe.\nAlternatively, you could do something similar driven from the SessionsController:\nruby\n    sign_in(@user) do |status|\n      if status.success?\n        redirect_back_or url_after_create\n      else\n        log_unsuccessful_attempt(params)\n        flash.now.notice = status.failure_message\n        render template: \"sessions/new\", status: :unauthorized\n      end\n    end. @jrochkind You can use User#authenticated? which is an instance method on the user. See docs: https://github.com/thoughtbot/clearance/blob/master/lib/clearance/user.rb#L68\nThe method itself is included from the password strategy. It's defined here: https://github.com/thoughtbot/clearance/blob/master/lib/clearance/password_strategies/bcrypt.rb\n. Merged as a7d1da122dda9ceee256f94c661cd9cd4198acc6. Thanks!\n. This is a bug. skip_password_validation? is defined like so:\nruby\n    # True if {#password_optional?} is true or if the user already has an\n    # {#encrypted_password} that is not changing.\n    #\n    # @return [Boolean]\n    def skip_password_validation?\n      password_optional? || (encrypted_password.present? && !password_changing)\n    end\npassword_changing is an attribute on the class that is set by update_password, which is why the validations are kicking in then.\nMy first thought for a fix was to deprecate the attribute and use encrypted_password_changed? but I'll need to dig in to see if this makes sense.\n. I was a bit confused by your description here. After looking at the change, you are basically making sure that the cookie name isn't something like \"custom_token123\" by adding the =. Is this correct?\n. Ahh, I see now. Thanks\n. > Would it make sense to add controller specs making sure the built-in controllers are succesfully enforcing the built-in presence-validator, as i believe they were not before this change?\nI will investigate. I think presence validation was working properly, but not in a directly obvious way. But I will verify this.\n\nWill there be any backwards compat problems with people perhaps using Rails mass assignment to set 'password' to the empty string, trusting that it will be ignored entirely? Say an HTML password input field in a form, that resultantly gets ignored if you leave it blank.\n\nDue to the way password= works, I don't think this would be a problem. Even so, I'd consider this a bug we are fixing.\n. Note the target for this PR is the 2.0 branch...\n. Thanks!\n. Thanks!\n. If we did this, I think what I would opt to do is whatever we can do without additional dependencies. So we'll probably log the ip and user agent and then if you want to make that more usable you can add UA parsing and IP geolocation yourself.\nI'm on the fence about tracking last-seen at. I like the idea of tracking it only once/day but I could be convinced we should do it slightly more often or even not at all.\nI'm leaning towards making this a feature of Clearance 2.0. My only remaining worry is that it's something else applications have to find a place in their UI to link to. But I think it's worth the tradeoff.\n. Thanks for fixing this!\n. Good catch. I'll cut a release with this shortly.\n. Sounds like you sorted this out.\n. Thanks very much! I've been meaning to clean this up myself for a while.\n. Thanks!\n. I expanded on this a tiny bit and merged as abd6f75. Thanks\n. What file does it point at?\n. That line appears in your backtrace because that piece of middleware is enabled in your test environment and thus is active on every request.\nI'm fairly certain we've removed all calls to before_filter in the Rails 5.0 compatible versions of Clearance. Have you tried searching code in your own app to see if before_filter is used there? Is there a full stack trace you can share for this warning?\n. Closed by #693 \n. Thanks for the contribution.\nI don't love the return there, but we also don't use inline conditionals in this code base as a matter of style. I'm also not bothered by the return enough to do something about it myself, but if you want to keep the current structure and change return user to user, I'd merge that, I suppose.\n. It is part of the thoughtbot Ruby style guide.\nPersonally, I prefer to see conditionals in block form as I feel it correctly identifies the complexity involved.  If you have two or three conditional blocks in a method, it looks bad but there's also a correspondingly high complexity to that method. You could make those three conditionals into one liners which would give the impression of a concise three-line method, but would actually hide the complexity in those conditionals.\n. Just wanted to note that I'm not ignoring this, but that I have had zero time for open source work of late. I will get to this, but it likely will not be until later this month. Thanks for understanding.\n. This is a rather unfortunate side effect of password strategies being implemented as mixins to the User class rather than their own classes. \nRenaming encrypt solves this particular problem, but really we shouldn't be mixing in the methods at all. They are not useful to the user's User class. I opened a new PR where inline those methods: https://github.com/thoughtbot/clearance/pull/693\n. I went with the approach in #693 instead, but this is now fixed. Thanks so much to everyone involved in chasing this down.\nI will try to release soon but I have spotty/unreliable wifi for the time being.\n. 1.14.2 is out with this fix. Thanks.\n. The idea was that it would insulate you from clearance changes and also prevents us from having to have configuration options for \"I want this route to exist, but not this other one\" or \"I want the route to this action to be different.\"\nWill clarify further in the doc PR.\n. Thanks for the contribution. I'm not inclined to merge this as I think the warnings it finds are misleading. For instance, the current build has 1 warning for code injection, which sounds really bad. Upon investigation, I see that it's for a nokogiri issue. I do not depend on nokogiri directly in this application. To solve this issue, I can either get everyone else (including Rails) to bump their acceptable version of nokogiri or I can create a false direct dependency on nokogiri.\nI think these services are great for end user applications as the user is in the best place to decide how to mitigate any warnings.\n. Are you loading any of the page via AJAX? Is turbolinks involved? Are there cache headers involved? Do you see this behavior in development only or also in production?\nThere's nothing in Clearance itself that could possibly explain this situation where clicking a link shows a user logged in, but refreshing does not. If you can reproduce this in a sample app, I'm happy to take a look.\n. I'm not able to access the repository, but it's also been quite some time since this issue was opened and I haven't heard of any other issues. It seems like if this were a widespread issue almost every use of Clearance would be broken. I'm going to close for now, but if you have more detail, please add it.. There is a configuration for cookie domain in the README. You should be able to use that. If you are trying to set a cookie for a.com from the site b.com, I'm not sure that's going to work. I doubt browsers will let you do that, but I'm not sure.\n. @krsyoung Your original, unedited post is a honeybadger issue: https://github.com/honeybadger-io/honeybadger-ruby/issues/215\nYou can roll back to pre 3.0 until it is fixed.. It does support Rails 5 and we do test against it. Was there more to your error message than what you pasted?\n. I don't know what \"contains zero-padded file modes\" means and why its a problem? Or why a dangling commit would be a problem? WIthout knowing this it's hard to judge if rewriting history to solve this is appropriate.\n. I don't think this is worth re-writing history for. If someone else has another fix or feels strongly that this should be fixed, please let me know.. There's a good deal of explanation about this change in the issue #664 and the corresponding change in #668. Indeed, someone even raised this concern in the PR, but I dismissed it as a bug. Thinking more on it now, I think it's probably a bigger issue than I had perhaps thought. Still, the old way also seemed like a bug. \nThe fix on an application's end is to strip out blank passwords from the params being passed to user.update. This is more work for you, but thinking objectively it also seems more correct. Previously, you were relying on Clearance ignoring that you were requesting a blank password. Something like: user.update!(password: \"\") could actually succeed while it didn't actually do what it seems I told it to do - set the password to the blank string.\nI think the way it operates now is correct but I'm willing to entertain counter points or alternate solutions.\n. This seems like it's documenting either the contents of the views or how to render them? I'm not sure it needs mention in the README.\nIn fact, I think I'd rather update the install generator to copy views to your app (we currently have the views generator for this), which would make this more readily apparent.. This is being discussed in #702. Closing this issue.. Every time I've added Clearance to a project, I've already had a layout. I don't think it's valuable to include an application layout. The instructions after rails generate clearance:install even include an example snippet of how to set up your existing layout. Further, even if I didn't already have a layout, it's highly unlikely the generated layout would be what I wanted.\nI'm inclined to merge this as is, but I'm curious if there are any other opinions here?. There's nothing for this out of the box, but you can add the password to your form and use User#authenticate (see docs) in the controller before proceeding.\n. Overriding sign_in is a perfectly valid thing to do. You may also use a SignInGuard (see documentation) and place this guard last in the stack.. Did you run rails generate clearance:install? Do you have include Clearance::Controller in your ApplicationController? This is what makes those helpers available in your controller.\n. Think I'm going to go with the session approach after all.\n. I hadn't considered that. It's an interesting idea. The only downside I can think of is that it means the user must use the same device and browser to request and complete the reset. \nThat's not a deal breaker for me but I think it's different enough from other reset mechanisms that it might lead to some confusion. \nAre you aware of major sites or libraries that do that?\n. I have asked for a reset and ultimately completed the reset on my phone, or vice versa. I have also requested a reset from Chrome (a browser I occasionally use for Flash), and completed the reset in Safari (my main browser I have my email open in all the time).\nThose may be edge-casey enough though. This isn't a bad solution, I'm just not sure of its impact usability wise.\n. Interesting note: this approach (vs #706) will continue to be valid in face of #682 which will be in Clearance 2.0. The change in #706 will no longer work with #682.\n. Ok, I'm convinced this is the best approach. Any comments on the code itself?\n. Oh of course. I hadn't considered that. Thanks for pointing it out, @jeroenvisser101.\n. I had not thought of that. Theft via XSS vulnerability would indeed be a problem, but it's just one of many different problems you'd have as a result of XSS.\nOn thing we could do is add a before_action that clears this session key on all actions other than PasswordsController#edit and PasswordsController#update, thus making the session value very short-lived.\nControlling the expiration of the session also decreases the window, but as a library I don't want to enforce the expiration on all uses of session.\n. I've not done this with Clearance, so I won't be of much help. If you do accomplish this and want to write something up in the wiki, I'd appreciate it. We may then be able to make whatever steps were necessary simpler.\nMy hunch is that I would separate the idea of sign in as a user from authenticate via API with a token. I'd build token auth separately, overriding current_user to do super || auth_with_token or something like that.. This was merged as de3233d and will be released in 1.15.1 shortly (there's an open PR for the release).\n. allow_sign_up only impacts clearance's internal routes. If you have dumped the routes to your local routes file you can remove the route from your routes file if you'd like. The documentation states that the allow_sign_up setting is ignored when (clearance internal) routes are disabled.. Are you sure? I looked quickly at the code for EmailValidator, which the validation uses, and enabling strict mode seems to have no impact on the regex used for the domain.\nEmailValidator.regexp(strict_mode: true) =~ \"hugh@sanctuary.computer\" #=> 0\nI also just updated clearance's user_spec.rb locally to add:\nit { is_expected.to allow_value(\"hugh@sanctuary.computer\").for(:email) }\nThis passes. What made you suspect it was something to do with strict mode or even clearance?\n. There is not currently a super clean way to do this. Is there an environment where you'd expect an API client to automatically handle cookies like this but not want to use it? The only thing I can think of is AJAX requests from the browser?\nOne alternative is to inject your own middleware that unsets the cookie when present on, for instance, responses coming from a request to /api/.... I think the existing version of the routes with the resource name on the first line and the options on following lines is more readable and more aesthetically pleasing than the updated version. I feel like it places the emphasis on the resource name which is appropriate. I reverted that change but will merge the others.. If you would like to try to update submit a PR for these, please feel free to do so. However, please keep in mind that Clearance 1.x has support for Rails back to 3.1 so strong params are not an option. Also, the highlighted deprecation cannot be removed in 1.x.. See #732. > calling responds_to modifies the object\nsigh.\nI guess we can call deliver_later, catch a NoMethodError and then call deliver? Or would that not work either?\n. This seems like a Rails bug to me, so I've opened https://github.com/rails/rails/issues/26916\n. @tjshipe I am looking into this but found that I can't reproduce it. We do exercise this code path in our tests (passwords_controller_spec.rb, line 25) and I haven't seen this fail. If, before calling deliver_later, I do something like mail.subject = 'foo' then I trigger the error. Otherwise, delivery appear to happen as you would expect. I tested with Rails 5.0.1, although Rails' own changelogs indicate there are no changes to ActionMailer since 5.0.0, so this shouldn't have been fixed from the Rails side.\nAre you able to reproduce this? I will re-open if so.. Did you run rails generate clearance:install? The install generatror should have generated a migration for an existing users table that populates this field for all users where it is null. It is not a valid state to authenticate users with no remember tokens.\nIf we were to allow blank remember tokens to attempt to log in then any request that contained a blank remember token would be signed in as the first user found in the database with a null remember token. I found the history on this issue by looking at the NEWS file, finding the entry you listed and then clicking on the version number for the full change-log. It pointed to this commit which came from this issue.\n. It's not clear that clicking the version number gives you the full diff.. This doesn't use any bit of Clearance, but rather uses a controller's public interface for changing the layout. You may need to restart your server after making this change?. Which flashes do you expect to see that are not working?\nWe do not have flash messages for non-exceptional cases. For instance, there are no flash messages for when your user is created or you successfully sign in.. Upon some internal discussion we think that as written, this is likely to be a breaking change that may need to be put behind configuration. Resetting the entire session may not be a good idea.\nAlso, there's agreement upon our team that the idea that CSRF tokens should be \"unique per user session\" is troubling due to the overloaded term \"user session\". It can mean either:\n\nThe browser session (for instance, the length of the session cookie).\nThe period of time the user is signed in on the website.\n\nMy interpretation is that it is the former, rather than the latter, though I'm open to an explanation of how this is wrongheaded. Is there an actual vulnerability here as it relates to the CSRF token specifically?\nGiven:\n\nA user signs in to a site using Clearance.\nThe user signs out of that site.\nThe users CSRF token is leaked (possibly via XSS?) to an external site\n\nThen... ?\n\nWhat value is the CSRF token that isn't coupled with an authenticated user session?\nHow is the value of this token increased by the fact that it used to be associated to an authenticated user?\n. > However, the CSRF token should be invisible to the user, so it seems safe to rotate that as often as we want. Is there any reason to wipe away the entire session and not just the CSRF token when the user logs in and out?\n\nThere's no public API for this that I've been able to find. From reading through devise, it seems like we can do something like what they do:\nruby\nwarden.request.session.try(:delete, :_csrf_token)\nI'm guessing that whatever middleware handles this, will see the missing token and regenerate it? We could do this as well (assuming thats how it works), but it does strike me as brittle.. I still don't quite understand the session fixation entirely, but I am sufficiently convinced we should rotate the token on sign in and sign out. I do wish rails gave us public API for this, but I will probably go the route of Devise and just remove the value from the session.\nI think this should still probably be behind a configuration for opt-in (at least in 1.0) as I wouldn't want this to break existing apps. I'm going to work on a new PR for this.. @jjb I can't think of a reason why there's no unique constraint on the indexes for confirmation_token and remember_token, but through normal use those tokens are generated via SecureRandom which is documented as suitable for \"session key in HTTP cookies, etc\". \nI'd still feel better if there were unique constraints though. PR welcome!. I believe the why has been answered sufficiently here. I don't think user id needs to be in the reset link, but changing this now would likely be a breaking change.\nI would accept a PR to the migrations that adds a unique constraint to the database.. @jferris @sonalkr132 - attempt number two.\n. I think it's worth seeing what that looks like but I'm skeptical.\nThe two lines are related strictly to the rails session (distinct from the\nclearance session). It would seem canonical for that code to belong in a\nrails controller which is the scope this gets included in.\nIf we move it to Clearance session, then that code needs to gain the\nability to write to the rails session and to generate the new token, which\nis currently only a method available on controllers (or in views via\nhelper_method).\nOn Monday, January 9, 2017, Joe Ferris notifications@github.com wrote:\n\n@jferris commented on this pull request.\nIn lib/clearance/authentication.rb\nhttps://github.com/thoughtbot/clearance/pull/728#pullrequestreview-15706398\n:\n\n def sign_in(user, &block)\n\n\nclearance_session.sign_in user, &block\nclearance_session.sign_in(user, &block)\n+\nif signed_in? && Clearance.configuration.rotate_csrf_on_sign_in?\n\n\nDoes it make more sense to do this in clearance_session? Currently, this\nmethod is a pretty straightforward delegator. Adding logic here means that\nyou need both this module and the session object to actually sign in.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/thoughtbot/clearance/pull/728#pullrequestreview-15706398,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAJSWJfY2B6YP590jnRwiK8QwuafXRbKks5rQj-VgaJpZM4LdIsk\n.\n. duplicate of #720 . The anchor, or fragment as it is known in RFCs, supplied by a client is not sent to the server. The server isn't dropping this information, it just never received it. Fragment evaluation is handled on the client entirely. \n\n. Ah, I see now that you are explicitly setting the fragment on the server, is that correct? If so then this is indeed a bug. . Clearance doesn't do much custom with the password field. It's mostly just a glorified attr_accessor with a tiny bit of code that tells rails that the encypted_password field changes when someone uses the password= setter. We certainly don't do anything with the two methods you are overriding and I wouldnt recommend doing that.\nIf you want to call the password field soemthing else on the front end, I'd strongly encourage you to limit that difference to the front end, and not propagate it through your system. Use your controller to assign params[:user][:secret] to user.password, for example.. I think the error as it's displayed is actually pretty good. It could be changed by rescuing NoDatabaseError and raising an exception with a better message (run rails db:create first or something) but even this has complications because versions of Rails < 5 would run rake db:create (which will also work on 5+ but may be confusing to people who find the original error confusing).. You should configure your Rails application to use config.force_ssl which will use SSL application wide, cause all cookies to be upgraded to \"secure\", etc. It doesn't require changing any routes or overriding any controllers.\nI think this is beyond the scope of what clearance should do for you, as it's difficult to get right for development. I want to avoid as many situations as possible where something Clearance does causes your site to work in development but fail in production. I also want Clearance to be as secure as possible by default, so this is difficult.\nThere's some earlier discussion of this here: https://github.com/thoughtbot/clearance/pull/423. > The force_ssl feature (in controllers) is not an anti-pattern.\nAnti-pattern or not, there are a number of things to consider when using the controller version of force_ssl that you do not need to consider when using SSL on all requests via the middleware. The middleware helps avoid common mistakes such as forgetting to mark cookies as secure and also sets HSTS headers that ensures future connections from that browser will use HTTPS by default when no protocol is specified. The controller version of force_ssl is a shortcut for a before_action that does a redirect.\n\nI like free performance wherever I can get it.\n\nNot to be a jerk, but nothing is free. Insecure HTTP requests have a real cost. Perhaps their cost (MITM, disclosure of user activity, etc) is one you are willing to accept, but it is not free.\nIf you'd like to use force_ssl in controllers, you can do so by re-opening Clearance::BaseController and adding force_ssl there. That was the purpose of introducing that base class.. Thanks everyone.. I would likely accept a PR that did this.. The was done in #748 . This is being discussed in the related PR #753 . Thanks!. Hi @papilip Do you have a reproduction of this available somewhere I might test?\nAs for the pieces of implementation I see here, I'd suggest leaving User.authenticate unmodified and overriding SessionsController#create to do something like this:\n```ruby\n  def create\n    @user = authenticate(params)\nsign_in(@user) do |status|\n  if status.success?\n    @user.update!(last_connection_at: Time.zone.now)\n    redirect_back_or url_after_create\n  else\n    flash.now.notice = status.failure_message\n    render template: \"sessions/new\", status: :unauthorized\n  end\nend\n\nend\n```\nNote that this (and your implementation above) will only record the last time the user signed in. By default, their session is remembered for a year, so they'll be able to return to the site and not hit the code to update their last visit time. On a previous project, I ended up adding custom rack middleware to record the last time we saw a user, doing this at most once per day.\n```\nclass VisitLogger\n  def initialize(app)\n    @app = app\n  end\ndef call(env)\n    @env = env\n    log_visit\n    app.call(env)\n  end\nprivate\nattr_reader :env, :app\ndef log_visit\n    if loggable?\n      LogVisit.new(user, ip_address, user_agent).call\n    end\n  end\ndef loggable?\n    application_request? && user_not_seen_today?\n  end\ndef application_request?\n    env['PATH_INFO'] !~ %r{^/assets/}\n  end\ndef user_not_seen_today?\n    user.last_seen_on != Date.today\n  end\ndef user\n    env[:clearance].current_user || Guest.new\n  end\ndef ip_address\n    request.ip\n  end\ndef user_agent\n    request.user_agent\n  end\ndef request\n    @request ||= Rack::Request.new(env)\n  end\nend\n```\nNote that this won't work as presented because it relies on some other classes, but it should give you an idea.. Thank you. Simplified and merged as 56443e6. I will release soon (hopefully by Friday at the latest).. Thanks!. I haven't tested this, but I believe the back door should work in request specs as well?. Closing this for now. If you find the backdoor does not work in request specs, please let me know and I'll re-open.. sign_in and sign_in_as are controller spec helpers and not intended to work with request, feature, or system specs. The \"backdoor\" is middleware that intercepts requests and logs users in. To use the backdoor, you pass the as parameter to your path helper, like so:\nget agreements_path(as: user). @abunashir Thanks for the fix and the detailed commit!. 1.16.1 is out with this and other fixes.. Users frequently update these to point to their overridden controllers. This would require them to either:\n\nMove the customized route out of the module block, thus separating it from where it might make more sense when read.\nRe-use the existing controller name by re-opening the clearance controller class and leaving the routes unchanged.\n\nI think I'd prefer the redundancy in the routes. What do you think?. Thanks!. Thanks for this. It\u2019s been a while since I\u2019ve worked in this area of the code so I\u2019ll need to refamiliarize myself. My immediate concern is with removing the cookie from middleware as only setting it on sign in means the expiration won\u2019t be refreshed with each request, correct?. Thanks!. Thanks!. I'm going to leave this one to personal preference. If you want to resubmit the changes to .gitignore I'm happy to take those.. Thanks. This is a good idea!. One thing we need to do is generate the appraisal gemfiles again. I'll give that a try.. Thanks!. What is the full error you get?. > It makes sense to me that 2.0 would be approximately this collection of versions in terms of support, but I'd also be fine calling this just an improvement in testing (at a minimum, it gets rails 5.1 and 5.2 into the matrix and will spot issues there...). I don't THINK there's anything here yet which would make a new 1.x release from master a problem.\nIf you're going for 2.0 I'd probably just jump right to 5.2+, Ruby 2.4+ (maybe 2.5+) only at this point personally, but if you wanna keep 4.2 around that's probably fine too.\nAs is, I do think this would be a fine simplification for 1.x builds.\n\nSort of related ... is it intentional that PRs don't generate travis builds?\n\nDefinitely not. Does it perhaps have to do with this? Those clowns at GitHub are still behind processing webhooks :trollface:. It's also possible something changed on the Travis side or with our config (unintentionally). It's really been a long time since I had done much with this repo.. Clearance routes don't respond to JSON. I'm not even sure what sessions#new would look like for JSON? What would you propose Clearance should do here?. reverted those. Ready to merge once travis signs off again?\n. We can make this '>= 3.2.13' now.\n. 3.2.13\n. When I tried this locally, I picked up the newest version of shoulda-matchers, which seems to require an explicit dependency on rspec, even in the face of a dependency on rspec-rails. I don't really get it, but I couldn't run the tests in this branch without it.\n. Can be addressed separately, but this introduces some deprecations we'll have to deal with.\n. I don't like the way expect syntax reads for one liners with implicit subjects. What was this changed for? Is there a problem with that matcher? rspec maintainers suggest using should even when the syntax is set to expect.\nAnother alternative would be specify { expect(flash[:notice]).to match(/double check the URL/i) } which I'm not sure is much nicer, honestly.\n. Rails breaks SemVer enough that I could envision this being a problem. Don't we need to explicitly test 3.0.x, 3.1.x, and 3.2.x?\n. My problem is that bundler is always going to choose 3.2.latest, so while we can say we support 3.1 (or even 3.0), we won't be actually testing it. Appraisal is meant to address this very issue, isn't it?\n. extract method to be rid of the try?\n. That was going to be my next question. I think we should deprecate and update any default generators to pass the new format.\n. I think we can probably write a single \"CONFIGURATION.md\" file (or wiki entry or something) that details all of the different ways we can configure things. I think we want the readme to cover only the 95% use cases. Thoughts?\n. This is the problem in the Travis failures. Clearance.configuration is nil here for whatever reason. Maybe we can work on this tomorrow, @JoelQ \n. As this is simply documentation, I don't think it matters a whole ton. Users should call these routes whatever they like. Personally, I don't use 'root_path' much anywhere so it wouldn't bother me one way or the other.\n. Yes, probably clearer as that's the name of the gem you need to add/require.\n. I'm trying to do this myself right now. It's difficult because you need to override the routes in the controller spec as well. I'm not sure there's an easy way to do this.\n. We used Kernel.warn elsewhere. What's the right thing to do? Also, a recent commit added the caller to the warning, which helps figure out what is responsible for the warning.  Is this something ActiveSupport warnings are already doing?\n. Yeah, that makes sense.\n. I considered that but I'd rather err on the side of doing something that will work regardless of database provider. The ActiveRecord model used in this migration is defined in this migration so it doesn't have an external dependency.\nAlso, using the actual code from clearance to generate the token means if we ever update how that token is generated, the migration is updated as well.\nI wouldn't want to foist random string generation onto the user for something that guards against someone else stealing your session.\n. At the time this migration is added to your project you haven't actually configured clearance yet. So it'd just spit out user anyway.\nI had a version that defined the table as a single constant at the top of the file so at least you'd only have to change that In this version, the inlined User class set it's table_name attribute so it would be correct. Unfortunately, the generator itself assumes you're using users and thats how it determines which migration, if any, to copy/generate.\nI can think of a few way to solve this (all of which I'd deem outside the purview of this PR):\n1. Prompt the user for input when running the installer to ask what model they'd like to use.\n2. Separate the install process out into generating the initializer in one step, asking them to configure that, and then generating migrations in another.\nI'm not in love with any of these ideas, but I'd love to come up with something.\n. No, but all the other strings were quoted. I can change them all if you'd prefer but I would do that in another commit.\n. I wondered that myself. I think so. The key was treated as HTML safe before. Changing that would be a breaking change if anyone had put HTML content in there.\n. Yes.\nOn Friday, February 21, 2014, Greg Lazarev notifications@github.com wrote:\n\nIn config/locales/clearance.en.yml:\n\nen:\n   clearance_mailer:\n     change_password:\n-      opening:\n-        'Someone, hopefully you, requested we send you a link to change your\n-         password:'\n-      closing:\n-        \"If you didn't request this, ignore this email. Your password has not\n-         been changed.\"\n-      closing: If you didn't request this, ignore this email. Your password\n-        has not been changed.\n-      opening: 'Someone, hopefully you, requested we send you a link to change\n-        your password:'\n\nAre these quotes necessary because of the :?\n\nReply to this email directly or view it on GitHubhttps://github.com/thoughtbot/clearance/pull/401/files#r9965986\n.\n. I don't know why I didn't think of the easy solution: an argument to the generator, defaulting to user. At any rate, that should be a separate PR.\n. > I think something like that addresses @derekprior's concerns\n\nYes. I think I like that approach.\n\nwhile also being consistent with our practices.\n\nI've always interpreted that practice to mean to not depend on external objects in a migration. Doing so could prevent the migration from running if those objects change. However, I can absolutely depend on the state of the database and if the introduction of AR depends only on the state we know to be available at the time of the migration and makes the migration simpler, then I don't see it as a problem, but a benefit.\nThat said, the migration I wrote breaks the rules I just laid out. It's not necessarily the case that Clearance::User will always exist and it's not always the case that the AR interface (or database interface) I have exposed will be enough to satisfy its requirements.\nThe migration @croaky proposes has similar issues - Clearance::Tokens could go away or it could change such that type in use here is not sufficient for what we're storing. I think making it a public, first class object in the system makes that less likely to be the case though.\nIf we could generate sufficiently random tokens in pure SQL, that would be the best solution, but I don't see a way to do that without specifically handling each database backend.\n. I think we'd also have to get rid of scheme in that case. Seemed equally complicated?\n. I think I prefer Joel's as it still uses the URI api and is a bit clearer. Went with that.\n. This spec appears to be a regression spec of some sort, but it's not clear what regression it was testing. This is not the same test. visit followed the redirect and then the spec asserted against the rendered flash, while the get in controller specs will not.\nUsing visit from controller specs has been deprecated.\n. Please remove the blockquote here.\n. It may make more sense to do this on, say, authenticate. I can think of valid reasons where you may have secure_cookie enabled, be on a non-ssl connection, and still call current_user expecting it to return nil or guest in those cases.\nThis is probably not the right place for this error.\n. In cases where it's overridden it should still be calling super otherwise you're on your own anyway.\n. This is generated code, so we are free to change this to behave however we see fit.\n. be_truthy and be_falsey now, I think.\n. be_falsey\n. Is this necessary? Isn't this the default now?\n. I'd probably extract a variable to run the expectation against:\n```\nrequest = request_with_remember_token(user.remember_token)\nexpect(signed_in_constraint.matches?(request)).to be_truthy\n``\n. I would stick to fixing what you changed in this commit. We can correct all other long lines as needed or in a separate change.\n.matches?(request)). ditto here. No space.\n. no space.\n. no space\n. no space\n.constraint_matches = ....`\n. If the line still needs to be broken up, then do so like:\nruby\nconstraint_matches = signed_out_constraint.matches?(\n  request_without_remember_token\n)\nEach argument gets its own line. Closing parent on its own line. Do not indent the arguments. This is our prefered style of breaking up argument lists.\n. no space.\n. Each argument (including the first) should get its own line. The closing paren should also get its own line. Don't line them up (just 1 level of indentation).\n. ditto above.\n. I'd get rid of the previous line and inline it like so:\n`expect(headers).to set_cookie(\n  'remember_token',\n  user.remember_token,\n  remembered_expires\n)\n```\nThe expectation you have hear doesn't read very well.\n. please keep the parens around the regex. Without them, ruby generates a warning because it's not 100% sure to what you would like to pass the regex. It's not worth you going and correcting all the places we're currently getting this warning, but I'd like to avoid introducing more.\n. use the has format for the finder:\n`user = Clearance.configuration.user_model.exists?(email: email)`\n. not to be what? How about `not_to be_present`? I know the previous expectation was `be` but I let's make it read a bit better here.\n. be_present\n. Is this an RSpect 3 change? I though you had to pass a block for things you wanted to check for errors?\n.\ndigestable = \"--#{salt}--#{password}--\"\nsubject.encrypted_password = Digest::SHA1.hexdigest(digestable)\n```\n. No, 2.99 is fine for now. We can do 3.0 in a later commit.\nBut the same question applies. I think you need to pass a block: https://www.relishapp.com/rspec/rspec-expectations/v/2-0/docs/matchers/expect-error\n. I mean that Clearance 2.0 will have no internally defined routes. When you run rails generate clearance:install we will dump the routes for you. But I can probably just lose this entire paragraph.\n. Done. Good call.\n. You were correct earlier. Keep the double quotes. This is generated into projects and I want it to be valid in that context with regards to hound.\n. It's an RSpec 3 thing. Which just so happens to usually co-incide with Rails 4.\n. I think I've had enough and will be removing the hound override so we use double quotes moving forward.\n. Yeah, I always want this in my tests, but some people don't. I wouldn't expect installing clearance specs to make this change to my suite.\n. Yeah, I did that myself. That said the method is checking the rspec-rails version so I feel like it's the right name.\n. Actually, inlining the method seems totally fine to me.\n. I like it, but this is still RSpec 2 (2.99, so we're close. Having trouble with some odd conflict with minitest on my 3.1 branch), so that's not available.\n. Newer versions (maybe just 4.2?) have Rails.gem_version, but this is the most backward-compatible check I could come up with.\n. You should be able to break this up over mutliple lines with x mode: http://stackoverflow.com/a/20524835/301059\n. If you take a look at the Rakefile you'll see that I load the dummy app's rake tasks into a namespace. We used to load them at the root, which made rake -T output confusing. I think prefixing it with a dummy namespace makes it clear you're performing a rake task on the dummy app.\n. I think I'd prefer to see model instance assigned. something like:\nruby\nmodel_instance = fake_model_with_bcrypt_strategy\nThat would let me know right in the spec what model_instance is.\n. It's not immediately clear what encypted_password is and why you would expect what's being asserted here. I think there's just a bit too much indirection here. I'd rather see some more duplication to make it clearer. I think you could inline the methods (even at the cost of repetition or at least inline encrypted_password with something like:\n```\nit \"whatever\" do\n  encrypted_password = dobule(\"Encrypted Password\")\n  stub_bcrypt_password_to_return(encrypted_password)\n# go about it.\nend\n```\nWhat do you think?\n. same suggestion for model_instance here as with bcrypt.\n. do we use these helpers anywhere other than the password strategy specs? If not, do you think we should include them explicitly in those specs rather than everywhere?\n. I'm a bit lost. What's the User it's describing here? lib/clearance/user is just a module, right? Seems like this is testing something that includes this module? I might be missing something really obvious here...\n. I would typically include a location for where this was called from, but because it's (usually) used as a before_filter that would be framework code. I'd have to hook into before_action/before_filter to provide that type of deprecation and I don't think that (cleanly) possible.\n. I couldnt really figure this out. I think it may have to do with this being a \"subject\" which gets continually re-evaluated for each spec.\n. I was thinking it'd be a good place to add any top-level RDoc, but maybe I'm wrong. I've never RDoc'd anything.\n. Updated the deprecation to use concatenation and be more explicit about the potential gotcha with skip_before_filter\n. Can we do this as a before_filter instead? That will make it much simpler to override as you'll just be able to skip_before_filter :redirect_signed_in_users or whatever its called.\n. If this is going to be a separate method, it should probably be named consistently with the other controller methods available for override here.\nBut I think maybe we should just use url_after_create just as if their sign in had already been successful?\n. I'm surprised hound hasn't complained, but we've been using double quotes now.\n. I'd also be cool with \"url_for_users_already_signed_in\" which defaults to url_after_create? Something like that. That gives maximum flexibility.\n. url_for_signed_in_users\n. I'm hesitant to add a configuration option dedicated for this purpose. It's already factored out into a method which can be overridden if desired and is ultimately backed by Clearance.configuration.redirect_url.\nIs there a use case where you would expect these two URLs to be different?\n. I think it's possible we may want to clarify Clearance.configuration.redirect_url in the future, but I don't think it's something we have to do right now.\n\nI think the reason for this PR is to be able to have two different redirect URLs depending on if you are a newly created user, or a user who has already logged in. Oh wait...maybe I'm reading this wrong. My thought was that I want to be able to specify a different redirect URL for a newly created user (taking them to a \"fill out additional profile information\" page). But maybe create in this context means the creation of a new session (i.e. after sign in v.s. visiting sign in page then automatically redirecting if you're signed in).\n\nThis is the sessions controller, not the users controller. The intent of this PR is to prevent already signed in users from reaching the log in page, which might be confusing. Though that raises an interesting question -- do we have this problem on the new user page as well?\n. I didn't know about or had forgotten the block version. Thanks.\n. signed_in? is probably better here. I think this will break if you have a guest user, for instance.\n. I'd get rid of this context and change the order of these two it blocks to say something like:\nit \"renders a form for a new user\"\nit \"renders a form for a user with the query-string-provided email\"\nAs a general rule don't use \"should\" in the it block description.\n. Maybe a better description of the email one is:\nit \"defaults email to value provided in query string\"\n. are the sign_out calls necessary?\n. redirects to the configured clearance redirect url.\n. This was testing that the Clearance::User module was included to a previously-existing user-class (rather than the generator creating a new class). I don't think this tests the same thing without this. Granted, the assertion here is rather magical. Not sure what else to do though.\n. After a bit of thought, yes. I like that it's one line but I'm not sure it's more clear. I had to think through the truth table a bit.\nIt is odd to have the query method valid? being used as a command though. Hmm...\n. I'm happy neough to leave them in just in case someone unfamiliar comes across them and is confused or decides to edit them manually.\n. I'm not concerned with save an in-memory hash lookup when resetting a password. I just want it to be as clear as possible. \nwith regards to blank? or empty?, blank? seems safer. If for whatever reason that's nil, blank? still works as expected while empty? does not.\n. Some quick testing shows that empty? really should be safe though. Even looking for non-existent attributes still returns an empty array.\n. They all need to be updated. To complete the password rotation. I can't\nsplit it into 2 calls to save (one with validate false) in a transaction\nbecause the second save would be subject to the same validation issues we\nhave now.\nBest I can do is to set them before calling valid and checking for errors\non those fields too.\nOn Friday, January 16, 2015, Joe Ferris notifications@github.com wrote:\n\nIn lib/clearance/user.rb\nhttps://github.com/thoughtbot/clearance/pull/521#discussion-diff-23114734\n:\n\nself.confirmation_token = nil\n     generate_remember_token\n-        save(validate: false)\n\nShould you make sure to only update the relevant password attributes here,\nsince we're not sure the others are valid?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/pull/521/files#r23114734.\n. Oh I see what you're saying - be explicit about the columns I'm updating so as not to allow something like:\n\nuser.email = \"\"\nuser.update_password(\"foo\")\n. Can't I call user.update_attributes(password: new_password, confirmation_token: user.confirmation_token, remember_token: user.remember_token). It's odd looking but I think it would work, right?\n\nThis would be a breaking change, but since it seems like the save/validate lifecycle of users/passwords is different, one thing you could do is split out a new table/model to represent authentication tokens and make them belong to a user. That way, you could expire/delete old tokens and create new ones without touching the user/model table and its maze of validations.\n\nThis is already in the plans for addressing #465. The plan for that is:\n1. Extract password reset to a service and make the methods in Clearance::User passthroughs to that service, deprecate direct calls.\n2. Expose a new service that splits out password resets, make this the default for newly installed apps in the initializer.\n3. Deprecate the old service.\n. Oh, no way to add validate: false to update_attributes.\n. Ok, how about using changes to verify only the columns we want are updated. If there are more columns we fall back to save, otherwise save validate: false? \n. > update_columns will work the same way, but without touching other attributes (including timestamps) or going through validations or callbacks.\nI'm not sure I can safely assume they don't want callbacks run or timestamps updated.\n. moving over.\n. This won't execute if the expectation fails. I think for now it's fine to keep with the existing specs and do this with an after.\n. I don't have a problem removing it. I wouldn't consider it a breaking change.\n. avoid_sign_in was never documented as part of the public API. The deprecation is out of abundance of caution. If they override that method, their override will not be called (unless they add the filter), but redirect_signed_in_users does something logical and non-dangerous anyway.\n. Basically, I expect no one to get this deprecation.\n. I'm trying to say it's an array of things that respond to #call. But it doesn't actually seem to work the way I'm lead to believe it works here: http://yardoc.org/types.html\n. Maybe:\nruby\npassword_reset = PasswordReset.create!(user: user)\n. This probably needs to happen in a transaction as well right? What happens if the password change succeeds but the deactivation does not?\n. should we index the expires_at column as well? Maybe change this to a compound index on [:user_id, :expires_at]? Might be too much...\n. good thinking!\n. ignore.\n. There was a conversation in slack in early January about copyright years where it was deemed that we didn't need to include the range. That conversation lead to this change: https://github.com/thoughtbot/clearance/commit/d372ebd3adbb646dea2822c25d1530da5bc36c5f\nhttps://thoughtbot.slack.com/archives/general/p1420728595009700\n. Clearance users are free to configure this to use an environment variable in their initializer, but we have to provide a valid default from the gem.\n. Yes, we basically have to force Ruby to re-look-up the constant, which is what we accomplish with constantize from a string. In an actual application running in development mode, if you make changes to the user class, the reference saved by clearance won't actually be the same class that you get with this constantize dance.\nAs an added benefit (perhaps) this also is more permissive in configuration as users could pass a string or symbol which would still be constantized properly.\n. I wasn't even aware you could have trailing commas in method calls. I tried it out and it does work, but I don't think I've seen that convention outside of arrays and hashes.\n. added.\n. @sanderhahn rubocop can re-write your code according to rules if you'd like: https://github.com/bbatsov/rubocop/blob/master/lib/rubocop/cop/corrector.rb\n. Common convention is that - denotes an extension to whatever precedes it, while _ is the usual word separator. So since this is a clearance extension, it should be clearance- and then follow our usual rules. factory_girl_rails should actually be factory_girl-rails. I agree that it's ugly, but that's the guide. See: http://guides.rubygems.org/name-your-gem/\n. Yeah, I noticed this as well. I thought about it, but the shared place for that method to live would be the PasswordStrategies module which means adding code to present deprecations to parts of the app that are not being deprecated. I think I'm okay with the duplication here since it's never going to change once committed until the files are removed in 2.0.\n. If I'm not mistaken, the choice is between a heredoc and proper indentation? I'd rather have the indentation. Any other options?\nIf I use a heredoc, I think I have to leaves the messages left aligned in the source or I'll actually get those spaces in the terminal output. Is that correct?\n. Would you recommend bucking the convention here?\nOn Mon, May 11, 2015 at 5:12 PM, Joe Ferris notifications@github.com\nwrote:\n\nIn lib/clearance/password_strategies/sha1.rb\nhttps://github.com/thoughtbot/clearance/pull/558#discussion_r30082672:\n\n@@ -3,13 +3,21 @@ module PasswordStrategies\n     module SHA1\n       require 'digest/sha1'\n-      DEPRECATION_MESSAGE = \"[DEPRECATION] The SHA1 password strategy \" \\\n-        \"has been deprecated and will be removed from Clearance 2.0. BCrypt \" \\\n-        \"is the only officially supported strategy, though you are free to \" \\\n-        \"provide your own. To continue using this strategy add \" \\\n-        \"clearance-deprecated_password_strategies to your Gemfile.\"\n\nFYI, it was originally factory_girl-rails but enough people complained\nthat I renamed it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/pull/558/files#r30082672.\n. How about \"Clearance sends them an email.\"\n. SInce we're going to target this for 2.0, I think we should not worry about attr_accessible and use strong params here. What do you think?\n. What do you think about naming this find_password_reset instead? I think it might be a more override-friendly name. For instance, if you add some functionality and need to find the password reset by it as well, this method name would be misleading.\n. I was thinking of a scenario where the password gets updated but then for whatever reason the deactivator errors out. In that case, their password would be changed but their token would still be valid. To get around that, you can:\n\nruby\nActiveRecord::Base.transaction do\n  user.update_password password_reset_params\n  deactivator.run\n  true\nend\nIn that way, if any of those statements fail, the database changes are rolled back.\n. It may make sense to do something like this in the model:\nruby\ndef complete(params)\n  transaction do\n    user.update_password(params)\n    deactivate_user_resets\n    true\n  end\nend\nThen the controller can fire off this complete method and inspect the result to make sure everything worked.\n. would this fit as a validation on password reset instead? validate it's not expired, call valid? as part of the theoretical complete method, perhaps?\n. No. Clearance models are internal to clearance and not generate. User is a template because we expect you already have a user class of some sort.\n. do you know what the significance of the limit is here?\n. @mxie Did you base the default on anything other libraries are doing for this? I'm wondering if it might be a bit too low, but I don't really know. I know that when I have to reset my password, sometimes the email doesn't come immediately and I get distracted doing something else. Maybe 1.hour? I don't feel strongly and can easily be convinced 15 minutes is correct.\n. Nice. Let's go with 20 then. I'm happy to follow OWASP's upper boundry here.\nOn Fri, Jun 5, 2015 at 10:44 AM, Melissa Xie notifications@github.com\nwrote:\n\nIn lib/clearance/configuration.rb\nhttps://github.com/thoughtbot/clearance/pull/532#discussion_r31818157:\n\n@@ -93,6 +98,7 @@ def initialize\n       @cookie_name = \"remember_token\"\n       @httponly = false\n       @mailer_sender = 'reply@example.com'\n-      @password_reset_time_limit = 15.minutes\n\nAccording to the OWASP link from the GH issue (\nhttp://owasp.com/index.php/Forgot_Password_Cheat_Sheet#Step_3.29_Send_a_Token_Over_a_Side-Channel),\nthey\u2019re saying no more than 20. I think I remembered that somehow and kind\nof picked 15 arbitrarily. On June 5, 2015 at 10:39:57 AM, Derek Prior (\nnotifications@github.com) wrote: In lib/clearance/configuration.rb:\n @@ -93,6 +98,7 @@ def initialize @cookie_name = \"remember_token\"\n@httponly = false @mailer_sender = 'reply@example.com' +\n@password_reset_time_limit = 15.minutes\n@mxie https://github.com/mxie Did you base the default on anything\nother libraries are doing for this? I'm wondering if it might be a bit too\nlow, but I don't really know. I know that when I have to reset my password,\nsometimes the email doesn't come immediately and I get distracted doing\nsomething else. Maybe 1.hour? I don't feel strongly and can easily be\nconvinced 15 minutes is correct. \u2014 Reply to this email directly or view it\non GitHub.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/pull/532/files#r31818157.\n. +1 to \"ensure_token_and_user\" or even just \"ensure_user_present\" or something.\n. Any idea what we need to_s for here?\n. What do you think about something like:\n\nruby\nunless find_user_by_id_and_confirmation_token\n  #...\nend\nAnd then moving the empty param check into find_user_by_id_and_confirmation_token itself? Would save us a couple of private methods and is more in line with what we want, I think - basically you shouldn't ever find a user here without them having a cofnirmation token set.\n. Please don't align. I'd rather see routes like this.\n. The extended object.\n. Hmmm. Interesting question.\nThis would get output when the file was required. There were never any instructions to require this file directly, as far as I can tell. The instructions previously were to require clearance/rspec or clearance/test_unit which required and included this file as necessary.\nI don't expext users to see this deprecation. If they do, it's likely that they'll want to know both what to require instead AND what they should be including once they have done so.\n. ... sure.\nOn Fri, Jun 26, 2015 at 9:17 AM, Gabe Berke-Williams \nnotifications@github.com wrote:\n\nIn spec/clearance/testing/view_helpers_spec.rb\nhttps://github.com/thoughtbot/clearance/pull/565#discussion_r33354324:\n\n\nit \"sets the signed in user to the object provided\" do\nuser = double(\"User\")\n  +\nview = test_view_class.new\nview.sign_in_as(user)\n  +\nexpect(view.current_user).to eq user\nend\nend\n  +\ndef test_view_class\nClass.new do\ninclude Clearance::Testing::ViewHelpers\n  +\ndef view\n@view ||= extend Clearance::Testing::ViewHelpers::CurrentUser\n\n\nOh, so this is extending the Class.new? So it's...returning the extended\nanonymous eigenclass of an anonymously defined class?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/pull/565/files#r33354324.\n. Good call.\n. What do you think about moving the array wrapping to the reader in Configuration?\n. or maybe the setter? I guess it depends on how else/where else we are using that configuration\n. What is the scenario where the request domain isn't in our list of allowed domains and yet we still want to set the cookie to whatever the first domain is?\n. What about the need to set cookies based on subdomain? That is: thoughtbot.myapp.com?\n. Heel!\n. every local variable extraction I tried that made sense to me was longer than the current line. So in the interest of keeping the example simple I'm just going with whats here.\n. Yes, this is a template used by the generator specs. It's the pre-existing initializer for this test case.\n. No. I suppose not.\n. I want this here.\n. I thought about that, but documenting aything beyond a contrived example would require a bit more code (including a sample clearance configuration) for a realistic example. In the end, I think the options are documented well enough for now.\n. yardoc.\n\nI'm pretty sure it's not going to generate what I want. Clearance is weird because some methods exposed to ruby as private are part of public API. But other methods that are technically public are private API.\nOnce I've got the documentation written, I'll circle back and make sure the metadata is correct for what I want generated. I just dont want that to get in the way of the documentation effort currently.\n. yes.\n. false. In the rendered docs, this is a link to the documentation for that method, which says:\nruby\n    # Set to `false` to disable Clearance's built-in routes.\n    # Defaults to `true`. When set to false, your app is responsible for all\n    # routes. You can dump a copy of Clearance's default routes with\n    # `rails generate clearance:routes`.\n    # @return [Boolean]\n    attr_writer :routes\n. I prefer the way this reads in our routes file. Recent changes to our guides make this rule obsolete.\n. In this case, we're specifically denying access because there is no signed in user. I don't think \"failure_when_access_denied\" is an appropriate key here because you can actually call deny_access anywhere for any reason. It's a public method.\nWhat about something like, \"failure_when_not_signed_in\" or something?\n. We're updating the style as we go forward. Please make the changes requested by hound.\n. How about, \"Please sign in to continue\"\n. the second create here should be creates.\nAlso, I'm not sure we need the word \"file\" here. The generator output itself makes it pretty clear these are files, I think?\n. This should actuall be \"and remember tokens\". Can you make that change?\n. It was a pre-existing requirement (see user_id_parameter) and I've said many times this gem has a dependency on ActiveRecord and other ORMs are not supported. So I think we're good.\n. It's generated.\n. I assume this is because despite the .rb extension, .erb is actually supported here. I'm fine with this.\n. I can do that. Is there a scenario where an exception not automatically handled by the example itself wouldnt immediately cause the test suite to crash?\n. I added raise Exception to one of the example and added logging of the queue adapter before we run the example and after we reset the adapter. Everything executes as expected. I don't think ensure is necessary here.\n. You'll need to delete this here.\n. require should happen at the top of the file.\n. What do you think about extracting constant for these arrays? \nMINIMAL_COST = [1, 4]\nDEFAULT_COST = [2, 16]\nAdditionally, we do not use ternaries in this code base as we prefer the explicitness of branching conditionals:\nif test_environment?\n  MINIMAL_COST\nelse\n  DEFAULT_COST\nend\n. I'd have to keep the attr_accessor in that case, and I find declaring the accessor that I'm going to immediately override to be more confusing than inlining the equivalent functionality.\n. I'm okay with this.\n. I'm also okay with this.\n. I'm okay with the way I have this broken up here.\n. I'm also okay with this.\n. Maybe encrypted_password shouldn't be part of what we sign here? It allows us to invalidate any tokens as soon as the password is changed but it also means the encrypted password is part of the payload (signed). I dont know that the tradeoff is worth it. Curious for additional thoughts here...\n. The message verifier raises if the message is invalid. I should rescue that specific exception. That's part of why I want to insert a layer between Clearance and MessageVerifier. Rails made some improvements to the API in Rails 5 (it has a valid? method now).\nAt any rate, I will update to catch the right exception.\n. It a change in how rails generates the schema in Rails 4+ that got picked up because this is the first time we've changed the test database schema in a long time!\n. I think it makes me nervous because I'd be providing anyone that can access that email access to their encrypted password. I'll play with it some to see what I can come up with.\nHashing the encrypted password is a decent idea. Complicates the lookup a tiny bit, but it may be worth it.\n. The blowfish password strategy is deprecated. Please do not make any changes to this file. Thanks!\n. The SHA1 password strategy is deprecated. Please do not make any changes to this file. Thanks!\n. As long as the existing tests pass, I'm happy to skip specific unit tests for the private method.\n. I've not seen url_for used with no arguments before and I can't tell from first glance at the documentation what it's supposed to do. It it equivalent to url_for :edit, where :edit is the current action?\n. Yeah, we support back to 1.9.3, so that's not an option here. I don't want to take a dependency for it.. The params are different in each place (params[:password] and params[:password_reset]). I thought about extracting the methods anyway (extracting two of them), as I don't usually like local variables that are easily avoided, but every method I add to a controller essentially becomes \"public api\". . I think extracting a connection method that returns this or raises a descriptive error on NoDatabaseError would be enough here.\nIn fact, even that may prove difficult because in rails 5 and newer the suggested command is rails db:create whereas in earlier version rake db:create should be run.. Should these branches be swapped? As written, if I'm using FG 4.9 (when it's released), then I will get the deprecation warning, correct? I can avoid the deprecation in that case by using FactoryBot.\nThe user would still get the deprecation from the factory definition, which they own and control so will still know to switch to FB.. Can we respond with head :ok here and avoid rendering text at all? Doesn't look like the tests require it.. Is there a reason to use send here? Isn't this method public?. Is this perhaps more accurately authentication_successful?. What do you think about being explicit here and adding an else branch that return BCrypt::Engine.cost?. This assumes knowledge of BCrypt that most people won't have, so I'd think we should explain this value a bit more.\nsuggestion\n  # BCrypt has a `cost` argument which determines how computationally expensive\n  # the hash is to calculate. The higher the cost, the harder it is for\n  # attackers to crack passwords even if they posess a database dump of the\n  # encrypted passwords. Clearance uses the `bcrypt-ruby` default cost except in \n  # the test environment, where it uses the minimum cost value for speed. If you\n  # wish to increase the cost over the default, you can do so by setting a\n  # higher cost in an initializer:. ",
    "jnylund": "Yes, I just changed it to manually gen the salt.\n. It is still an issue for anyone that gets the latest version, I just found a work around... I wouldn't close it, there is a bug here I think.\n. We vendor all gems for production because we are not allowed to dynamically get stuff from production environments. So clearance is vendored in the gems folder.\nWhen you run a command line job, rake db:migrate, or start a server, you see this warning message:\nfatal: Not a git repository (or any of the parent directories): .git\nIt doesn't break anything in terms of the ruby code or server, but causes issues with stuff wrapping these jobs, because it thinks these are errors.\nIn this example (http://yehudakatz.com/2010/04/02/using-gemspecs-as-intended/) Yehuda uses Dir.glob which I think would give you the same result as git ls-files and not create an extra dependency. Its not just clearance adding  this dependency, about 5 other gems we use have the same problem... but I cant figure out why...\nthanks!\n. I did the steps in the first answer here: http://stackoverflow.com/questions/3646847/how-do-i-vendorize-gems-for-rails3-bundler  sounds like now bundle package or bundle install --deployment are preferred? I guess I can try that....\n. ",
    "asishtripathy": "Hi croaky,\nThanks for your quick response. I have updated my issue to include controller code. Please have a look and help me.\nThanks again\n. I have a method in my controller spec to create session\ndef valid_session\n   sign_in\nend\nThe above method is throwing the error\nundefined method stringify_keys' for #User:0xc9a70c0\ndue to which all test fails, because i am checking the session in every test by above method call.\n. ",
    "theycallmeswift": "Awesome.  Thanks for the help\n. ",
    "edouard": "It seems like the easiest way to fix it. I opened a pull request #237 containing a fix and a test. I also tested it on my app and the fix works. Thanks!\n. ",
    "narath": "Hey Mike,  \nNo worries, the error is a little obscure for most of Rails community since we mostly use Macs for development.  \nTddium uses linux for their deployment so it orders the requires differently. If you setup a test app with clearance, with a free tedium account and do a test deploy that should reproduce the error (tddium will break on the clearance specs).  \nThe error can be reproduced on Mac's if you add the .sort to the require line, and test the app (at least it reproduced it with the app we were developing with).  \nHope that helps, let me know if you still can't reproduce it, and I'll try a simple other test app and see if our app was just a \"special case\".\n~Narath\nOn Monday, December 31, 2012 at 9:52 AM, Mike Burns wrote:\n\nHi @narath (https://github.com/narath) , thanks for this!\nI'm all for adding require everywhere (no joke; I love require), but I cannot reproduce the problem you suggest. Is there a particular FS I need, or something else?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/thoughtbot/clearance/pull/238#issuecomment-11778334).\n. Yes, looks like exactly the same error - \"uninitialized constant Integration (NameError)\"\n\nThe sort is not necessary, just the extra require line is. I think the sort just makes the load order fixed as opposed to FS dependent  \n~Narath\nOn Wednesday, January 2, 2013 at 3:46 AM, Mike Burns wrote:\n\nI still can't repro locally, but it seems that our Travis CI build is failing for the same reason: https://travis-ci.org/thoughtbot/clearance/jobs/3895549\nIs the #sort needed?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/thoughtbot/clearance/pull/238#issuecomment-11802250).\n. \n",
    "jonathanhefner": "I absolutely love Clearance, but I agree.  This was the one thing that threw me when I started using it.  I always thought I was missing something--that there was some reason for the method name authorize in a module named Clearance::Authentication, but perhaps it's just oversight.\nIncidentally, if you're using Clearance and CanCan together, anyone not familiar with both will be that much more confused.\n. @jferris  I'm still not sure that I understand.  Perhaps if I understood what the failure case for authorize is based on...?  For instance, a method named authenticate would presumably fail if the user email/password combination was invalid.  And in something like CanCan, authorize_resource fails if the user does not have sufficient permissions to access that resource.\nIn Clearance, what are the failure cases for authorize or before_filter :authorize (besides invalid email/password)?\n. To add a use case to the authorize vs authenticate method debate:\nruby\nrescue_from CanCan::AccessDenied do |exception|\n  if signed_in?\n    raise\n  else\n    # get the user to sign in, since they haven't already done so\n    authorize\n  end\nend\nTo me, the call to authorize makes a lot more sense as authenticate because all you're asking the user to do is  verify they are who they say they are by providing an email/password.  It isn't authorizing them for anything--even if they complete the authorize successfully (i.e. successfully log in), they can still be denied access.\nBut in the end, it's just one line of code in one base controller, and a comment right next to it suffices to resolve any confusion down the road.\n. @croaky Looking at the implementation of authorize and deny_access, I could simply call deny_access directly (because I don't need the extra signed_in? check, as you pointed out).  The effect would be the same though: I'd still add a comment to that method call to note that I'm only getting to the user to sign in, not denying (or authorizing) them for access.  (Semantics, I know. :)\n. ",
    "amrit": "Done! Thanks for the help @mike-burns. \n. I squashed the commits into one as well, using my new knowledge :wink: \n. ",
    "irohiroki": "no... this is not the only patch. rails4 branch should be longer. close for the moment.\n. ",
    "gylaz": "@croaky The install script already copies over the spec/support/clearance.rb, from the templates, which contains:\nruby\nrequire 'clearance/testing'\n. @croaky Do you have a format for this in mind? Seems like having all the translations (keys and values) right there in the README might be a little overwhelming for the reader. What about just linking to the clearance.en.yml file?\n. Yep, closing.\n. Fixes #254, better alternative to #263\n. @croaky Good to merge?\n. Do you think it's also worth it to move clearance_mailer key above flashes?\n. One comment. Looks good.\n. I think this PR has too much stuff in it. It's not just removing .lock files, but also cleaning up some things. This should probably be split up into two.\n. Going to close this. Opened #312 for just the Appraisal related changes.\n. @croaky I'm still narrowing down the failures that are surfacing via Travis, since feature tests are actually being executed in a proper, sandboxed test environment.\n. @croaky Tests are all passing. Squashed, rebased and ready for a final review.\n. Looks good.\n. Good to merge.\n. @jesteracer Thanks for adding this. Can you make sure the tests are all green?\n. Hitting a wall here. Rails 3.1.11 generates a Gemfile with the following line:\nruby\ngem 'turn', '0.8.2', :require => false\nThis pins turn to that version. Rails 3.2.X needs a later version of turn gem, otherwise it gets an error:\nruby\nundefined method `config' for Turn:Module\nUpgrading rails 3.1.11 to 3.1.12 didn't solve this problem either. Thoughts on how to proceed? /cc @croaky @jferris\n. @croaky That certainly would. I would be hesitant on dropping support for older versions just because of this issue, since it only affects the speed of the tests slightly. However, if we just need a final straw to drop the support, then it this could be it :wink:.\n. So close! rails 3.1.11 really seems screwed up. It wants turn 0.8.2 for ruby 1.9.2 and turn ~> 0.8.3 for ruby 1.9.3. I something like that possible with appraisal, @jferris?\n. Thanks @sikachu. Tests are finally green. Ready for final review.\n. Fixed in 9d2f94955b18f9c2d382939245e027972c2aacb0\n. Why are we duplicating a lot of these files? We should only generate what is different when simple_form is installed.\n. @rcarvalho Were you able to resolve this issue? If not, can you post the full stack trace of the error?\n. Also, try the latest gem gem 'clearance', '1.0.0.rc7' as of this posting. Please feel free to re-open if this is an issue.\n. I'd say we need to gauge the commonality of this use case. If it's pretty often, then it may make sense. If it's an edge case, then better not introduce additional complexity that we need to maintain, and handle it based on one-off situations. Optionally, we can write a blog post on how to disable sign ups using clearance.\n. Looks good.\n. I think, I understand the concern of @jferris points int #278 a little more now. And I think I'm leaning towards his arguments of checking in Gemfile.lock and all of the Appraisal gemfiles, plus locks.\nTo address some of the issues @croaky brought up:\n\nThe Gemfile.lock and gemfiles/*.gemfile.lock files were being updated regularly during normally development work, polluting commits and code reviews with irrelevant changes like tzinfo changing from 0.3.35 to 0.3.37.\n\nIf *.gemfile.lock files are source controlled, then they shouldn't be getting updated often. Unless we want to explicitly update them. If they were getting updated often, then that seems like a different problem. I think this would only happen if developers are deleting Gemfile.lock and *.gemfile.lock files. We don't expect Gemfile.lock to get changed often on Rails apps, and this should be no different.\nThere seems to be a mixed amount of popular gems checking in their Gemfile.lock while others don't.\n\nThe pathnames in the appraised .lock files change every time a new developer runs the suite, polluting commits and code reviews.\n\nThis shouldn't be an issue any longer. Since we're using relative paths.\n\nWe needed to manually update patch versions in Appraisal to test against the latest versions, polluting the git history, instead of just triggering a new Travis build. This is the most important combination of dependencies and therefore should be quick and easy to test.\n\nI see this as a valid issue. However, we'd trade stability and consistency of the library, in development, over pollution of the history. It seems like bumping the rails patch version should be a conscious effort. With a little re-factoring we can make it so only the Appraisal's gemfiles get updated, when we choose to run rake appraisal:gemfiles to regenerate them.\nThoughts? /cc @croaky @jferris @derekprior \n. > This is lost if gemfiles are regenerated. We should see if we can add this to appraisal.\nI believe Appraisal uses relative pathing now. It's generating gemspec :path=>\"../\" for me, when i re-create the gemfiles.\n\nWhat if we had one appraisal file without a checked-in lock file that was only run by Travis (or manually locally, if desired). Would this allow us to catch issues with newer versions of gems while maintaining a clean test suite for gems we know to be good?\n\nI am not sure, how this would work. Can you provide an example?\nHere's what might be a vialbe option: Check-in Gemfile.lock. Thus all development is done against the same versions. However, we rely on Travis to notify us of any failures against the latest gems, and update as errors are encountered. This is assuming that when  appraisal:install runs, it fetches latest gems from index, and not from local available gems, which would be locked and installed through bundler and Gemfile.lock.\nIf the above option seems sane, then lets try it and see what pain points we encounter.\n. This is ready for re-review. If no objections, I'd like to give this setup a try. /cc @jferris @derekprior @croaky \n. Good idea @jferris.\n. Can I get a re-review? @jferris @croaky \n. Thanks for the PR @simonbnrd. I've looked at rails-api and it seems that there is no ActionDispatch::Head middleware by default. Can you confirm? It seems that ActionDispatch::ParamsParser might be a good candidate.\n. Thanks @simonbnrd. Squashed and Merged.\n. @jferris Thoughts on this PR?\n. Ready for re-review @croaky \n. Ready for re-review @jferris @derekprior @croaky.\n. @croaky What do you think about dropping support for rails 3.0.x for 1.0 release?\n. @naps62 try building against the latest master branch of clearance, if you still see a problem, please file an issue.\n. I believe @sgrif recently used clearance with a sing-in modal on locus_control. He's still out for a wedding, but I'd be curious to see if he had any issues with that set-up.\n. I'm +1 on dropping support for 1.9.2. As for gitignoring Gemfile.lock, I think @jferris had some concerns about using the exact same environment when developing. Joe, can you weigh in on that?\n. Are we dropping support for 3.1.x? If so, then let's update the README. If not, we should test it against 1.9.3.\n. It might be sufficient to just document this in the README\n. Looking good!\n. Good to merge.\n. @sferik new_session_url should be sing_in_url, since we cleaned up duplicated path/url helpers. We can figure out the remeber_token issue together, if you'd like.\n. @sferik I've got a pull request with upgrade of clearance (version 1.0.1 with remember_token fix) here: https://github.com/rubygems/rubygems.org/pull/590\nI'm going to close this issue in favor of that PR.\n. @croaky Ready for re-review.\n. Looks good to me.\n. Thanks @kohgpat\n. Thanks for looking at this @jferris !\nWe do generate, and store, a remember_token for \"new\" users on creation. This PR attempts to solve a situation, when there were existing users prior to clearance's introduction. Those users will not have a remember_token, thus this solution will generate one for them when they sign in.\nThe other solution would be to \"prefill\" existing users with remember_tokens upon installation of clearance, via a migration.\nAs for pushing the method into User, I thought about it, but that method really doesn't have context besides it's usage in session.rb. I was worried, someone would look at generate_or_reuse_remember_token in User and wonder whether or not it should be something for them to use. Thus, I opted for having it live closer to its usage. Is my thinking flawed here? What benefits does pushing it into User bring?\n. @croaky @jferris I don't see a good solution via a generated migration. How do I infer the table that I need to modify without relying on Clearance.configuration.user_model?\n. @jferris The problem I'm referring to is inserting Clearance.configuration.user_model into user's migrations. When they remove clearance at some point down the road they would have to modify one of their past migrations to take that out (or worse they forget and their migrations won't run for a new setup).\n. On that note, we expect a :user factory, which may be problematic if the user chooses another model name.\n. Let's make this backwards compatible and print out a deprecation warning.\n. @croaky @jferris @derekprior This is ready for a re-review.\n. Thanks @JESii. Merged in 94db124c9d8f834e6ec76b4d42fe1aceea75bc02.\n. Going to close this for now. Re-open, or make a new issue if you still experience problems.\n. Typo in the commit message: if multiple rates ...\n. :+1: \n. Looks good.\n. @zamith thanks for the PR. Could you please explain what problem you are trying to solve by having multiple configurable user models?\nGiven this implementation, only the first model that matches the query params will be fetched. Which, I think, defeats the purpose of having multiple user models.\n. Looks good.\n. Good to merge.\n. Any idea why TravisCI is failing?\n. @georgebrock It might be a good question to ask in our chat, or even better start a research card. I think there's not a clear decision on what to do on existing projects when style guide changes.\n. I ran into a similar issue. To solve it, I had to check if the user was not signed in and let another guard (in this case Clearance's DefaultSignInGuard) handle the failure.\nSomething like this:\nrb\nclass ActiveUserGuard < Clearance::SignInGuard\n  def call\n    if !signed_in?\n      next_guard\n    elseif current_user.active?\n      next_guard\n    else\n      fail(\"Some message.\")\n    end\n  end\nend\n. Consider rewording to ...with easy to override defaults.\n. Space before (\n. Does this need to change?\nruby\ncopy_file 'model.rb', 'app/models/user.rb'\n. Nevermind, i think this is copying the user.rb template file.\n. Could we be more explicit here and use should be true or should == true?\n. Same as above, can help with understanding the api.\n. should eq false?\n. I think we should avoid checking this in. It updates the path for me locally as well, but we'll just keep overwriting each other.\n. I didn't mean the *gemfile.lock. I just meant the path change.\n. That would work.\nI noticed that in gemfiles/3.0.20.gemfile the path we provide is '../'. We might be able to explicitly set remote: ../ in these files to avoid this problem in the future.\n. @derekprior Can you try what I suggested above to see if Travis build still passes. I know that editing .lock files is a bad idea, but in this case it might provide a small win. @jferris @mike-burns thoughts?\n. Is this step no longer needed?\n. Unfortunately, I don't think we can. The test app that gets generated requires gems like jquery-rails, coffee-rails, etc. We can't guarantee the machine will have those gems installed locally (which is what I'm seeing in travis-ci failures).\n. Thanks @jferris. Made the suggested changes in this #292.\n. Why did we add bin/ to this? For binstubs? Others could not be using binstubs, or install them to another directory. This should go into a global gitignore on per user basis.\n. I agree with @derekprior that we probably want to test against the minor versions of Rails 3.x (i.e. 3.0.x, 3.1.x, 3.2.x), or just explicitly decide that we are supporting only the latest 3.x release. As this PR stands, Travis will only run against the latest 3.2.x.\nIf we want to support the minor versions of Rails 3, then we should specify each of the three versions in Appraisal file. Would be best if we can use the pessimistic operator for each minor versions. @jferris is that possible in Appraisal?\n. I don't think I understand the logic behind this original method. Why is password considered optional if encrypted_password is set, but the virtual attribute password is blank? /cc @croaky\n. Checking if something is not nil like this is a very common ruby idiom. remember_token.present? might be useful if we want to make sure remember_token is not an empty string. However, I was no trying to modify the original logic, simply removed the extra variable.\n. cookies[REMEMBER_TOKEN_COOKIE] boils down to a hash lookup, so the performance gain would be negligible at the cost of managing an extra @remember_token variable, which would have to be reset when we delete cookies[REMEMBER_TOKEN_COOKIE] when user signs out. More code could be written to make this more seamless, but I don't think there is a problem to solve in this case.\n. Figured it out. Going to reply to myself for future reference :smile:\nIf encrypted_password is set, that means it's been at some point stored in the db successfully. If password is blank that means it's not being set in this particular instance, and if password_changing is blank it means that password isn't being changed. Thus the password validation should be skipped.\n. Yes. This is the side-effect of the ability to allow your users not to set passwords right away.\n. Tried to see if this would work. Unfortunately, we modify the @user object in the before block, and authenticate will create its own instance of user (fetched from db), and our modification of password_optional? gets lost.\n. There's already a method called remember_token here that grabs the token from the cookies. Introduction a NullUser object feels like a bigger re-factor. I'm going to leave it as is for now, and I'll keep it in mind that maybe introducing a NullUser object might be a good future re-factor.\n. IIRC, I made this change because a test was failing. Perhaps, it would be better to update the test. However, user is usually a result of User.find_by email: 'blah' or a similar call, that can return nil.\n. Looking further into this, the testing helpers were incorrectly signing out. I've fixed that in 95646a57783f1da38a17c82cd5043b724634d200 and removed try from here.\n. I think this is a good idea. Especially, if we're going to move towards deprecating older versions of rails. I'll make this change if no-one objects.\n. It wasn't necessary. But neither is gitignoring bin. So, I went with the approach of removing it. Let me know if you feel strongly about reverting this.\n. Since, this is testing specific, and tests pass for all versions, I would rather not complicate things with more conditionals. Any objections?\n. This was the key change.\n. Just out of curiosity, is the \\n here necessary? Does is generate class User < ActiveRecord::Baseinclude Clearance::User without it?\n. Haha! I'm trying it out.\n. Not sure if this is really necessary, but I added this to match the db constraint.\nIf we leave this in: Is this something that needs to be generated during clearance install, if the users table exists?\n. I'm going to remove this line from this PR and open a new PR that addresses the issue.\n. What if we mention in this sentence that require 'clearance/testing' must come after require 'rspec/rails', or require 'rails/test_help'? That way this, plus the example below should be good enough.\nAnother approach would be to insert our require automatically during install, but we can't guarantee they'll have their test suite setup at that time.\n. :+1:\n. I think this is not quite per our style guide. I would either one line it, or use parenthesis.\n. describe is generally used with a method name, and context is used for condition.\nHow about something like:\nruby\n  describe '#sign_up?' do\n    context 'when sign_up is configured as false' do\n      it 'returns false' do\n. @JoelQ Yep, i thought that was probably why. However, clearance's code base is pretty old, and I think we should start using our newer Best Practices where we can, and update the code as we go forward.\n. We should try to write new code (especially the one that we own) with our current best practices in mind. When we touch older code, we can convert that form the older style to new.\n. I like it, as it communicates the intent a little better than sing_up?. Consider allow_sign_up? for a shorter alternative.\n. 1 point for the G-man! (I mean myself, of course, Gabe :tongue:)\n. Use def with parentheses when there are arguments. from our style section is close, since you're defining a block here.\n. Thoughts on leaving this as just root?\n. using a sign in step reads weirdly. Sorry, can't come up with an alternative, as I don't really understand this sentence :blush:.\n. I wonder if sign in needs to be quoted, or grouped somehow? Still reads strange here and on 373.\n. What do you think about killing the extra nesting and turning this into:\nruby\ndescribe Clearance::SignInStep do\n. expect(...).to eq ... for consistency?\n. Oops, missed that. Does it make sense to make the logged in version be the root and maybe the logged out be guest_root? I feel like during coding we'll be using signed in root the most.\n. Generally, we prefer not to write tests for private methods. Isntead, could you write a controller (regression) test that demonstrates the bug/failure that you found, and passes with this new fix?\n. Would it be better to specify factory_girl gem in the message instead of just FactoryGirl?\n. I like that better! Thanks for pointing it out.\n. We generally recommend against using AR in migrations. Thoughts on something like this in raw SQL?\nruby\nexecute <<-SQL\n  UPDATE users\n  SET remember_token = md5(random()::text)\n  WHERE remember_token IS NULL\nSQL\n. This is for PostgreSQL, but at least this way we'll set the stage for the right pattern -- and let the end user figure out the right random string generation technique for their db.\n. Thoughts on not assuming User and using Clearance.configuration.user_model instead?\n. Your point makes sense. A second opinion from @jferris  or @croaky?\n. Do we still need html_safe if we're not using any html in the message anymore?\n. I don't think you need quotes around the string in yaml config.\n. Are these quotes necessary because of the :?\n. What should Configuration#routes= be set to in the case of opting-out? false, [], something else?\n. ",
    "b-murphy": "@croaky is this still a case?\n. ",
    "frechg": "@jferris, yes. The primary problem is that with out generating the clearance views and adding a wrapping element we can't create a \"bounding box\" around the form, unless you have a \"content-wrapper\" or something in your layout and happen to be able to use it. It's not about css targeting, but visual presentation.\nWithout a wrapping element:\n\nWith a wrapping element:\n\nWe typically always end up presenting the form in the later style. A wrapping element in the clearance views would make it much easier to achieve this.\n. ",
    "agraves": "I noticed that the Travis build is failing -- I'm unable to reproduce the failure locally, and I see other builds failing with the same error message as mine.\nFor now, given what I know, I'll assume the error is not on my branch.\n. @croaky Great point...that should help avoid similar bugs in the future.\nI've made an effort in my fixes to stay as close to your suggestions and the local coding style as possible, but don't hesitate to request changes.\n. Ping\n. Ping?\n. Cool thanks @derekprior no rush\n. ",
    "salbertson": "I wasn't sure, so I went with the simple approach.\n. :+1: \n. I like the idea of keeping this background library agnostic. No matter what method of backgrounding you are using, if any, then overriding a \"deliver_email\" method that takes in an email thing should make sense.\nSomething like this would work with delayed_job:\ndef deliver_email(email)\n  mailer_job = MailerJob.new(email)\n  Delayed::Job.enqueue(mailer_job)\nend\nDoes that make sense?\n. ",
    "calebthompson": "I'm not sure what the best bit of code to show you is, but here is the concern for the models which aren't looked up by find.\n``` ruby\nmodule Sluggable\n  extend ActiveSupport::Concern\nincluded do\n    validates :name, presence: true, uniqueness: { case_sensitive: false }\n    validates :slug, presence: true, uniqueness: { case_sensitive: false }\nbefore_validation :update_slug\n\nend\ndef to_param\n    slug\n  end\nprivate\ndef update_slug\n    if name.present?\n      self.slug = name.parameterize\n    end\n  end\nend\n```\nIn all of the controllers, they are looked up with Model.find_by_slug!('some-name'). There are currently three Sluggable models.\n. Yes, User is a Sluggable, so when we pass as: user to the path helpers, the param looks like \"user-name\", which is not something that find is able to resolve into a user.\n. ActiveRecord actually has an example of exactly what we're doing for to_param/find:\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/integration.rb#L27-L37\n``` ruby\n    # You can override +to_param+ in your model to make +user_path+ construct\n    # a path using the user's name instead of the user's id:\n    #\n       class User < ActiveRecord::Base\n         def to_param  # overridden\n           name\n         end\n       end\n   user = User.find_by_name('Phusion')\n   user_path(user)  # => \"/users/Phusion\"\n\n```\n. lgtm\n. [I haven't a haiku for this, sorry]\n. :+1: \n. This looks good to me.\n. lgtm once you can make Travis pass.\n. :ship: \n. I noticed this a while ago and started work on a fix, but didn't finish: https://gist.github.com/calebthompson/9213022\n. I rather like the exception - much clearer and less surprising.\n. I am now realizing that this specific solution doesn't work in the 90% case (redirecting to a path not a url), and that it won't lend itself well to a nicer solution.\nIf we do want to solve this problem rather than raising an exception, a fresh approach is probably in order.\n. With , as: nil are we still pointing to a clearance controller with sign_up_*?\n. I like Mike's, but it's a backward incompatible change so we'd need to release a major version (not that big a deal probably).\n. I'm not sure this is a good idea. If we're working on a new major version, we shouldn't be adding new features to the previous one - with the limited time we have to work on this we should focus on the bigger win (2.0).\nThere's an argument over whether this is a feature of course - it's confusing to people, and it addresses a bug introduced by the 4.0 syntax. I think a better approach than making a big change like this is to add a section to the README on how to fix the problem (, as: nil) and move on.\n. This is in line with the button/link guideline, so :+1:.\n. He'll be fine with that. cc @derekprior \n. This looks fine to me, but unless it's urgent you should probably wait for real derek.\n. :+1: \n. :+1: \n. Never used appraisals - is the gemfile generated?\n. :+1: \n. This isn't a concern everywhere, but we ended up having to change this line to User.find_by_slug! since we aren't using ids as the to_param for our User model. For something widely used like Clearance, supporting alternate finders may be useful.\n. I am intrigued by your words and will investigate.\n. I've looked into it.\nAR:B::find find things when the param is =~ /^\\d+/ Things that work for ::find:\n- 3\n- 3-caleb-thompson\nHowever, if I had my guess very few applications which override to_param are prefixing the params with ids. It makes for urls that are less user-friendly (github.com/<user</repo>> is super nice).\n. Seems risky, but I guess we could try this.\n. If we just make these methods private, they don't need to be hidden.\n. Ah, that makes sense. Why aren't these in a helper module?\nOn Sun, Mar 3, 2013 at 7:31 PM, Dan Croak notifications@github.com\nwrote:\n\n\n@@ -4,8 +4,14 @@ module Authentication\nincluded do\n   helper_method :current_user, :signed_in?, :signed_out?\n-      hide_action :authorize, :current_user, :current_user=, :deny_access,\n-        :sign_in, :sign_out, :signed_in?, :signed_out?\n-      hide_action(\n  @calebthompson If we make them private methods, we get errors like the following:\nprivate method `signed_in?' called for #<ForgeriesController:0x007f8338c2dc48>\nprivate method `current_user=' called for #<Clearance::SessionsController:0x007f833c8bd848>\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/thoughtbot/clearance/pull/268/files#r3219887\n. Ah, that's clear now. Never mind, I should have paid more attention to what the hidden actions were.\n\n\nOn Sun, Mar 3, 2013 at 8:04 PM, Dan Croak notifications@github.com\nwrote:\n\n\n@@ -4,8 +4,14 @@ module Authentication\nincluded do\n   helper_method :current_user, :signed_in?, :signed_out?\n-      hide_action :authorize, :current_user, :current_user=, :deny_access,\n-        :sign_in, :sign_out, :signed_in?, :signed_out?\n-      hide_action(\n  I'm not sure I know what you mean by a helper module. Are you referring to the helper method?\n  http://api.rubyonrails.org/classes/AbstractController/Helpers/ClassMethods.html#method-i-helper\n  If the goal is to make current_user, signed_in?, and signed_out? available to view templates, that's handled by line 6. The other methods are intended to be used by controllers.\n\nReply to this email directly or view it on GitHub:\n  https://github.com/thoughtbot/clearance/pull/268/files#r3219972\n. This seems fine to me - we've introduced the model and the columns being dealt with here so I have no problem using them.\n\n\nIt would be a big pain to make the execute approach work everywhere.\n. We tend to push pretty hard toward using our conventions, and User is one of them. Since this is a generator, I agree that just using User is the best course here.\n. What if...\n```\nuri = URI(\"http://foo.com/posts?id=30&limit=5#time=1305298413\")\nuri.to_s.split(uri.host).last\n=> \"/posts?id=30&limit=5#time=1305298413\"\n```\n. That's fine, but I do want to point out that my solution saves the fragment as well. That's a little less surprising and as long as we're adding parts back in sort of makes sense to me.\nI don't feel that strongly, but wanted to mention it.\n. defaulted to or default is.\n. current_user also seems like a likely candidate for a method that's been overridden.\nI'm not sure there's much to be done about that in any case with Clearance's setup, but possibly pushing this to be more internal would help.\n. We're targeting a major version right? That's breaking.\n. It's a breaking change, I mean.\n. I suppose that's true, since the helper method is also defined in generated code. Nevermind.\n. validate is available in newer versions of Rails. Just a bit of trivia that isn't useful to you here.\n. It's less a command than you're letting on, though. If this is valid?, there's no reason to check that errors[:password].blank? (would empty? make more sense here?)\n. I'm in support of anything getting engine-specific stuff out of my User.\nIf we don't go that route, I just wanted to note that update_columns won't touch update_at, which is a good or bad thing depending on how you look at it.\n. Naw, update_attributes calls assign_attributes and save, so any pre-existing assignments would have also been committed.\n. require \"clearance/rspec\"\n. ",
    "jason": "Attaching local & instance variables from BetterErrors\nhttp://nap.kn/d/qSp21K\n. ",
    "localhots": "Sure, here is the full trace\nRuntimeError (Circular dependency detected while autoloading constant Users::SessionsController):\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/dependencies.rb:460:in `load_missing_constant'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/dependencies.rb:183:in `const_missing'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/inflector/methods.rb:241:in `const_get'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/inflector/methods.rb:241:in `block in constantize'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/inflector/methods.rb:224:in `each'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/inflector/methods.rb:224:in `inject'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/inflector/methods.rb:224:in `constantize'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/dependencies.rb:534:in `get'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/dependencies.rb:565:in `constantize'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/routing/route_set.rb:74:in `controller_reference'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/routing/route_set.rb:64:in `controller'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/routing/route_set.rb:42:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/journey/router.rb:69:in `block in call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/journey/router.rb:57:in `each'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/journey/router.rb:57:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/routing/route_set.rb:651:in `call'\nvendor/gems/ruby/2.0.0/gems/newrelic_rpm-3.5.8.72/lib/new_relic/rack/agent_hooks.rb:14:in `call'\nvendor/gems/ruby/2.0.0/gems/newrelic_rpm-3.5.8.72/lib/new_relic/rack/browser_monitoring.rb:12:in `call'\nvendor/gems/ruby/2.0.0/gems/newrelic_rpm-3.5.8.72/lib/new_relic/rack/developer_mode.rb:24:in `call'\nvendor/gems/ruby/2.0.0/bundler/gems/mongoid-124627a60020/lib/rack/mongoid/middleware/identity_map.rb:34:in `block in call'\nvendor/gems/ruby/2.0.0/bundler/gems/mongoid-124627a60020/lib/mongoid/unit_of_work.rb:39:in `unit_of_work'\nvendor/gems/ruby/2.0.0/bundler/gems/mongoid-124627a60020/lib/rack/mongoid/middleware/identity_map.rb:34:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/etag.rb:23:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/conditionalget.rb:25:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/head.rb:11:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/params_parser.rb:27:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/flash.rb:241:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/session/abstract/id.rb:225:in `context'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/session/abstract/id.rb:220:in `call'\nvendor/gems/ruby/2.0.0/gems/clearance-1.0.0.rc6/lib/clearance/rack_session.rb:10:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/cookies.rb:452:in `call'\nvendor/gems/ruby/2.0.0/gems/activerecord-4.0.0.beta1/lib/active_record/query_cache.rb:36:in `call'\nvendor/gems/ruby/2.0.0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/abstract/connection_pool.rb:632:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/callbacks.rb:373:in `_run__404976410754846199__call__callbacks'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/callbacks.rb:78:in `run_callbacks'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/callbacks.rb:27:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/reloader.rb:64:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/remote_ip.rb:76:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'\nvendor/gems/ruby/2.0.0/gems/railties-4.0.0.beta1/lib/rails/rack/logger.rb:38:in `call_app'\nvendor/gems/ruby/2.0.0/gems/railties-4.0.0.beta1/lib/rails/rack/logger.rb:23:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/request_id.rb:21:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/methodoverride.rb:21:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/runtime.rb:17:in `call'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/cache/strategy/local_cache.rb:72:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/lock.rb:17:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/static.rb:64:in `call'\nvendor/gems/ruby/2.0.0/gems/railties-4.0.0.beta1/lib/rails/engine.rb:510:in `call'\nvendor/gems/ruby/2.0.0/gems/railties-4.0.0.beta1/lib/rails/application.rb:96:in `call'\nvendor/gems/ruby/2.0.0/gems/railties-4.0.0.beta1/lib/rails/railtie/configurable.rb:30:in `method_missing'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/lint.rb:49:in `_call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/lint.rb:37:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/showexceptions.rb:24:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/commonlogger.rb:33:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/chunked.rb:43:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/content_length.rb:14:in `call'\nvendor/gems/ruby/2.0.0/gems/unicorn-4.6.2/lib/unicorn/http_server.rb:552:in `process_client'\nvendor/gems/ruby/2.0.0/gems/unicorn-4.6.2/lib/unicorn/http_server.rb:632:in `worker_loop'\nvendor/gems/ruby/2.0.0/gems/unicorn-4.6.2/lib/unicorn/http_server.rb:500:in `spawn_missing_workers'\nvendor/gems/ruby/2.0.0/gems/unicorn-4.6.2/lib/unicorn/http_server.rb:142:in `start'\nvendor/gems/ruby/2.0.0/gems/unicorn-4.6.2/bin/unicorn:126:in `<top (required)>'\nvendor/gems/ruby/2.0.0/bin/unicorn:23:in `load'\nvendor/gems/ruby/2.0.0/bin/unicorn:23:in `<main>'\n. It's just a blank inheritance for /users/sign_in\nruby\nmodule Users\n  class SessionsController < Clearance::SessionsController\n  end\nend\nAnother trace, for /sign_in\nRuntimeError (Circular dependency detected while autoloading constant Clearance::SessionsController):\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/dependencies.rb:460:in `load_missing_constant'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/dependencies.rb:183:in `const_missing'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/inflector/methods.rb:241:in `const_get'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/inflector/methods.rb:241:in `block in constantize'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/inflector/methods.rb:224:in `each'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/inflector/methods.rb:224:in `inject'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/inflector/methods.rb:224:in `constantize'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/dependencies.rb:534:in `get'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/dependencies.rb:565:in `constantize'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/routing/route_set.rb:74:in `controller_reference'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/routing/route_set.rb:64:in `controller'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/routing/route_set.rb:42:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/journey/router.rb:69:in `block in call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/journey/router.rb:57:in `each'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/journey/router.rb:57:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/routing/route_set.rb:651:in `call'\nvendor/gems/ruby/2.0.0/gems/newrelic_rpm-3.5.8.72/lib/new_relic/rack/agent_hooks.rb:14:in `call'\nvendor/gems/ruby/2.0.0/gems/newrelic_rpm-3.5.8.72/lib/new_relic/rack/browser_monitoring.rb:12:in `call'\nvendor/gems/ruby/2.0.0/gems/newrelic_rpm-3.5.8.72/lib/new_relic/rack/developer_mode.rb:24:in `call'\nvendor/gems/ruby/2.0.0/bundler/gems/mongoid-124627a60020/lib/rack/mongoid/middleware/identity_map.rb:34:in `block in call'\nvendor/gems/ruby/2.0.0/bundler/gems/mongoid-124627a60020/lib/mongoid/unit_of_work.rb:39:in `unit_of_work'\nvendor/gems/ruby/2.0.0/bundler/gems/mongoid-124627a60020/lib/rack/mongoid/middleware/identity_map.rb:34:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/etag.rb:23:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/conditionalget.rb:25:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/head.rb:11:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/params_parser.rb:27:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/flash.rb:241:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/session/abstract/id.rb:225:in `context'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/session/abstract/id.rb:220:in `call'\nvendor/gems/ruby/2.0.0/gems/clearance-1.0.0.rc6/lib/clearance/rack_session.rb:10:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/cookies.rb:452:in `call'\nvendor/gems/ruby/2.0.0/gems/activerecord-4.0.0.beta1/lib/active_record/query_cache.rb:36:in `call'\nvendor/gems/ruby/2.0.0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/abstract/connection_pool.rb:632:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/callbacks.rb:373:in `_run__404976410754846199__call__callbacks'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/callbacks.rb:78:in `run_callbacks'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/callbacks.rb:27:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/reloader.rb:64:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/remote_ip.rb:76:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'\nvendor/gems/ruby/2.0.0/gems/railties-4.0.0.beta1/lib/rails/rack/logger.rb:38:in `call_app'\nvendor/gems/ruby/2.0.0/gems/railties-4.0.0.beta1/lib/rails/rack/logger.rb:23:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/request_id.rb:21:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/methodoverride.rb:21:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/runtime.rb:17:in `call'\nvendor/gems/ruby/2.0.0/gems/activesupport-4.0.0.beta1/lib/active_support/cache/strategy/local_cache.rb:72:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/lock.rb:17:in `call'\nvendor/gems/ruby/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/static.rb:64:in `call'\nvendor/gems/ruby/2.0.0/gems/railties-4.0.0.beta1/lib/rails/engine.rb:510:in `call'\nvendor/gems/ruby/2.0.0/gems/railties-4.0.0.beta1/lib/rails/application.rb:96:in `call'\nvendor/gems/ruby/2.0.0/gems/railties-4.0.0.beta1/lib/rails/railtie/configurable.rb:30:in `method_missing'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/lint.rb:49:in `_call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/lint.rb:37:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/showexceptions.rb:24:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/commonlogger.rb:33:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/chunked.rb:43:in `call'\nvendor/gems/ruby/2.0.0/gems/rack-1.5.2/lib/rack/content_length.rb:14:in `call'\nvendor/gems/ruby/2.0.0/gems/unicorn-4.6.2/lib/unicorn/http_server.rb:552:in `process_client'\nvendor/gems/ruby/2.0.0/gems/unicorn-4.6.2/lib/unicorn/http_server.rb:632:in `worker_loop'\nvendor/gems/ruby/2.0.0/gems/unicorn-4.6.2/lib/unicorn/http_server.rb:500:in `spawn_missing_workers'\nvendor/gems/ruby/2.0.0/gems/unicorn-4.6.2/lib/unicorn/http_server.rb:142:in `start'\nvendor/gems/ruby/2.0.0/gems/unicorn-4.6.2/bin/unicorn:126:in `<top (required)>'\nvendor/gems/ruby/2.0.0/bin/unicorn:23:in `load'\nvendor/gems/ruby/2.0.0/bin/unicorn:23:in `<main>'\n. I'll try to provide a demo app for this issue.\n. Demo app: https://github.com/magnolia-fan/clearance_bug_demo\nSimple steps to reproduce this issue:\n1) Start application in development environment\n2) Go to http://localhost:3000/sign_in\n3) Add a blank line to app/models/user.rb and save\n4) Refresh\n. Works for me too. Do these controllers really need to be unloadable?\n. Thanks!\n. :shipit: \n. With rails 4 in development it works perfect now.\n. Great! Could you please release a new gem version with this patch?\n. Thanks!\n. Ok. Anything else?\n. My particular application consists of several parts: promo site, clients area and some others. So, for example, when user is already signed in and visits sign up page application should redirect him back to client area, not the root path where promo pages are.\nAlso, with this option there will be no need to override sessions and passwords controllers.\n. I was trying to overload the /sign_in path defined inside Clearance\nruby\nget '/sign_in' => 'clearance/sessions#new', :as => 'sign_in'\nwith my own route\nruby\nget '/sign_in' => 'sessions#new', as: :sign_in\nbut failed. Using this branch fixes the issue, please merge it when possible.\n. /cc @croaky @salbertson \n. Anything else I can do?\n. @mike-burns done\n. This method is called when user is already logged in and visits sign up page. This is the only place the method is called. Maybe we should just rename this method to avoid confusion?\n. Okay\n. ",
    "mackuba": "Thanks. Could you make a new gem release this week?\n. Thanks!\n. Clearance? Hmm...\n\n;)\n. ",
    "dandehavilland": "This issue is still causing problems for me. I'm using a wildcard matcher in my routes.rb in order to get prettier URLs on my front-end, but that ends up catching any requests that would otherwise hit clearance. I'm using Rails 4.1 and this alternative branch (using prepend instead of draw) solves the problem. Any chance of a merge?\n. Sure, here they are:\n```\nMyApp::Application.routes.draw do\n    namespace :admin do\n        resources :pages, shallow: true do\n            resources :parts\n        end\n    end\nresource  :session, controller: 'sessions'\n\n# catch-all\nmatch \"/*uri\", to: \"pages#show\", via: :get\n\nroot to: \"pages#show\", uri: \"/about-us\"\n\nend\n```\nWith Clearance using ...routes.draw, my page URLs work but /sign_in routes to PagesController#show whereas altering the Clearance routes.rb to use ...routes.prepend results in /sign_in correctly hitting the Sessions controller.\nIt's also clear in the order of the output from rake routes that the catch-all is gobbling up anything that could hit the Clearance controllers.\nGET    /*uri(.:format)                           pages#show\n        sign_in GET    /sign_in(.:format)                        clearance/sessions#new\nI've had a look around for other solutions, including dynamically generating routes for each and every page URL at runtime, or setting the :exclude param on my catch-all to match the Clearance routes (e.g. exclude: /^users|sign|session|password/) but, as solutions to this problem, they feel like hacks. \nIs there any technical reason why Clearance can't use prepend instead of draw? \nAny other suggestions are welcome.\n[edit: added my :session resource]\n. Thanks for getting back to me Derek. \nI did a little playing around, trying to put a pull request together using Clearance::Engine.routes.draw and mount Clearance::Engine => \"/\", but I haven't yet got all of the specs passing. I can spend some time with this if you haven't got the capacity at the moment?\n. ",
    "jarkelen": "Hi, I have indeed a custom UsersController, which is subclassed from ApplicationController:\n``` ruby\nclass UsersController < ApplicationController\n  before_filter :authorize\n  load_and_authorize_resource\ndef index\n    @users = User.all\n  end\ndef show\n    @user = User.find(params[:id])\n  end\ndef team\n    @selections = current_user.selections\n  end\nend\n```\nBut I found what was wrong: in my routes.rb I had a route like this:\nruby\nresources :users\nThis resulted in 2 routes to the users#create action:\nruby\nPOST   /users(.:format)                        users#create\nPOST   /users(.:format)                        clearance/users#create\nWhen I changed the route to:\nruby\nresources :users, only: [:index, :show, :team]\neverything was fine again! Sorry for troubling you and thanks for this awesome gem!\n. My mistake, it has to do with another gem which needs another version of Rails. It has nothing to do with Clearance. I will close this issue.\n. ",
    "jesteracer": "Now my local tests pass. So, rspec and cucumber are green, but rake complains that  \nruby\nundefined method `configure' for Clearance:Module\nIt happens because the testing application is namespaced with Clearance:Testing. And so it uses Clearance module, instead of Clearance gem. \nSo now I am a confused :\\  Need help, if in any way this contribution is useful.\n. The default behavior in rails it to fallback to default layout, when there is\nruby\nlayout nil\nin the controller. So the existing code does not have to change.\n. Closing this..\nIf you do not want to override clearance controllers, but need to pass a custom layout to be rendered you can add\nruby\nClearance::SessionsController.layout \"clearance\"\ninto your initalizers.\n. Nothing fancy. I use it inside a helper. Much like current_page? to check if url is pointing to my current controller (to add some css to a link_to helper).\n. The constarint will be not met if there is no current_user, and adding a try just helps not to blow up. And my guess is that when i call recognize_path the env[:clearance] is always nil. But I am really not sure. \n. ",
    "sikachu": "@gylaz you can check for RUBY_VERSION in the Appraisal file, but I would not recommend it as your Gemfile.lock won't be consistent.\nInstead, I suggest add a step to comment out turn in the generated Gemfile. Rails 4 already not including turn in the default Gemfile, so I don't think we need to have a hax to make it works.\n. @croaky see my commit message for detail, but this is passing and I think can be merged.\n. I am +1 on a separate repo for translation. Not sure how 'versioning' will works for that repo, if you are releasing it as a gem though. Unless you have a script to pull i18n locales from GitHub?\nOn Fri, Sep 13, 2013 at 9:43 AM, Joe Ferris notifications@github.com\nwrote:\n\n@croaky thoughts on adding a clearance-i18n repo where we keep translations? That way we could give translators commit access.\nReply to this email directly or view it on GitHub:\nhttps://github.com/thoughtbot/clearance/issues/358#issuecomment-24395162\n. @croaky sdoc and jbuilder are in rails new default gemfile ... and Bundler will complain if you try to run bundle install --local without these gem installed.\n. :copyright: \n. :shipit: \n. Not sure if it matters, but what about using the hash version?\n\nruby\nUser.where(remember_token: nil).find_each do |user|\n. If example raise an exception, there's a chance that line 11 won't get run, right? How about using the block version of chdir?\n. Not sure if it matters much though, but I assume that your CWD will leak to the next run.\n. \"site that still using\"?\nFeel free to leave it if that's already grammatically correct.\n. What happen if they define #avoid_sign_in? Does it still work?\n. I see. So that's not a breaking change. :+1: \n. ",
    "bkspace": "In your gemset, clearance-0.16.3, config, routes - change the 'match' to 'get' (note: these are the clearance routes, not your own). I also needed to delete the email validation line in user.rb (we have our own one anyway). Not sure if I've misunderstood your problem!\nedit: obviously didn't check the latest version of clearance, it's been fixed :+1: \n. ",
    "jethrokuan": "that should be about right! i'll check that out and see how it goes. thanks!\nOn Mon, Apr 8, 2013 at 11:51 PM, Sammy Isseyegh notifications@github.comwrote:\n\nIn your gemset, clearance-0.16.3, config, routes - change the 'match' to\n'get'. I also needed to delete the email validation line in user.rb (we\nhave our own one anyway). Not sure if I've misunderstood your problem!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/thoughtbot/clearance/issues/294#issuecomment-16058715\n.\n. \n",
    "vikrammishra333": "Hi Croaky,\nThanks for your response. Unlike clearance, in devise gem we do not see the SQL SELECT into the users table.Please see the log below. \n``\n       Started GET \"/assets/application.css?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\n    Served asset /application.css - 304 Not Modified (14ms)\n      \u001b[1m\u001b[35mUser Load (0.1ms)\u001b[0m  SELECTusers.* FROMusersWHEREusers.remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\nStarted GET \"/assets/colorbox.css?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /colorbox.css - 304 Not Modified (3ms)\n  \u001b[1m\u001b[36mUser Load (7.0ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/dataTables/jquery.dataTables.css?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /dataTables/jquery.dataTables.css - 304 Not Modified (125ms)\n  \u001b[1m\u001b[35mUser Load (0.1ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/jquery.ui.core.css?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /jquery.ui.core.css - 304 Not Modified (13ms)\n  \u001b[1m\u001b[36mUser Load (0.1ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/jquery.ui.theme.css?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /jquery.ui.theme.css - 304 Not Modified (10ms)\n  \u001b[1m\u001b[35mUser Load (0.1ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/bootstrap_and_overrides.css?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /bootstrap_and_overrides.css - 304 Not Modified (4ms)\n  \u001b[1m\u001b[36mUser Load (0.1ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/jquery.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /jquery.js - 304 Not Modified (11ms)\n  \u001b[1m\u001b[35mUser Load (0.1ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/jquery_ujs.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /jquery_ujs.js - 304 Not Modified (8ms)\n  \u001b[1m\u001b[36mUser Load (0.2ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/bootstrap.css?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /bootstrap.css - 304 Not Modified (3ms)\n  \u001b[1m\u001b[35mUser Load (0.2ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/jquery.ui.datepicker.css?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /jquery.ui.datepicker.css - 304 Not Modified (43ms)\n  \u001b[1m\u001b[36mUser Load (0.1ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/jquery.ui.core.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /jquery.ui.core.js - 304 Not Modified (12ms)\n  \u001b[1m\u001b[35mUser Load (0.2ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/jquery.ui.widget.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /jquery.ui.widget.js - 304 Not Modified (15ms)\n  \u001b[1m\u001b[36mUser Load (0.1ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/jquery.ui.mouse.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /jquery.ui.mouse.js - 304 Not Modified (14ms)\n  \u001b[1m\u001b[35mUser Load (0.1ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/jquery.ui.slider.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /jquery.ui.slider.js - 304 Not Modified (27ms)\n  \u001b[1m\u001b[36mUser Load (2.0ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/dataTables/jquery.dataTables.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /dataTables/jquery.dataTables.js - 304 Not Modified (6ms)\n  \u001b[1m\u001b[35mUser Load (0.2ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/testDividend.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /testDividend.js - 200 OK (2ms)\n  \u001b[1m\u001b[36mUser Load (0.2ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/jquery.ui.datepicker.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /jquery.ui.datepicker.js - 304 Not Modified (109ms)\n  \u001b[1m\u001b[35mUser Load (0.7ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/colorbox.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /colorbox.js - 304 Not Modified (3ms)\n  \u001b[1m\u001b[36mUser Load (0.1ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/common.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /common.js - 304 Not Modified (2ms)\n  \u001b[1m\u001b[35mUser Load (0.1ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/companyDataTable.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /companyDataTable.js - 304 Not Modified (2ms)\n  \u001b[1m\u001b[36mUser Load (0.1ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/investorDataTable.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /investorDataTable.js - 304 Not Modified (2ms)\n  \u001b[1m\u001b[35mUser Load (0.1ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/bootstrap-transition.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /bootstrap-transition.js - 304 Not Modified (9ms)\n  \u001b[1m\u001b[36mUser Load (0.1ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/bootstrap-alert.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /bootstrap-alert.js - 304 Not Modified (32ms)\n  \u001b[1m\u001b[35mUser Load (0.4ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/bootstrap-button.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /bootstrap-button.js - 304 Not Modified (20ms)\n  \u001b[1m\u001b[36mUser Load (0.1ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/bootstrap-carousel.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /bootstrap-carousel.js - 304 Not Modified (8ms)\n  \u001b[1m\u001b[35mUser Load (0.1ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/bootstrap-dropdown.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:35 +0530\nServed asset /bootstrap-dropdown.js - 304 Not Modified (32ms)\n  \u001b[1m\u001b[36mUser Load (7.3ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/bootstrap-collapse.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:36 +0530\nServed asset /bootstrap-collapse.js - 304 Not Modified (8ms)\n  \u001b[1m\u001b[35mUser Load (0.1ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/bootstrap-modal.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:36 +0530\nServed asset /bootstrap-modal.js - 304 Not Modified (9ms)\n  \u001b[1m\u001b[36mUser Load (0.1ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/bootstrap-scrollspy.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:36 +0530\nServed asset /bootstrap-scrollspy.js - 304 Not Modified (18ms)\n  \u001b[1m\u001b[35mUser Load (0.1ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/bootstrap-tab.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:36 +0530\nServed asset /bootstrap-tab.js - 304 Not Modified (17ms)\n  \u001b[1m\u001b[36mUser Load (0.1ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/bootstrap-tooltip.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:36 +0530\nServed asset /bootstrap-tooltip.js - 304 Not Modified (13ms)\n  \u001b[1m\u001b[35mUser Load (1.0ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/bootstrap-popover.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:36 +0530\nServed asset /bootstrap-popover.js - 304 Not Modified (19ms)\n  \u001b[1m\u001b[36mUser Load (0.2ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/bootstrap-typeahead.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:36 +0530\nServed asset /bootstrap-typeahead.js - 304 Not Modified (11ms)\n  \u001b[1m\u001b[35mUser Load (0.1ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/bootstrap.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:36 +0530\nServed asset /bootstrap.js - 304 Not Modified (52ms)\n  \u001b[1m\u001b[36mUser Load (6.7ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/application.js?body=1\" for 127.0.0.1 at 2012-11-26 12:36:36 +0530\nServed asset /application.js - 304 Not Modified (152ms)\n  \u001b[1m\u001b[35mUser Load (0.2ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/bootstrap_and_overrides.css?body=1\" for 127.0.0.1 at 2012-11-26 12:36:37 +0530\nServed asset /bootstrap_and_overrides.css - 304 Not Modified (1ms)\n  \u001b[1m\u001b[36mUser Load (0.2ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\n\n\nStarted GET \"/assets/dataTables/sort_asc.png\" for 127.0.0.1 at 2012-11-26 12:36:37 +0530\nServed asset /dataTables/sort_asc.png - 304 Not Modified (34ms)\n  \u001b[1m\u001b[35mUser Load (0.3ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n\nStarted GET \"/assets/dataTables/sort_both.png\" for 127.0.0.1 at 2012-11-26 12:36:37 +0530\nServed asset /dataTables/sort_both.png - 304 Not Modified (3ms)\n  \u001b[1m\u001b[36mUser Load (0.1ms)\u001b[0m  \u001b[1mSELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\u001b[0m\nConnecting to database specified by database.yml\n\n\nStarted GET \"/blog/feed.rss\" for 127.0.0.1 at 2012-11-26 12:49:07 +0530\n  \u001b[1m\u001b[35mUser Load (0.1ms)\u001b[0m  SELECT `users`.* FROM `users` WHERE `users`.`remember_token` = 'e1624ab80ed6b42dad4bebe4568ca2f58186751b' LIMIT 1\n\n```\nThanks\n. ",
    "hareramr": "We have override the clearance gem user module using the below code\n\nClearance::User::Validations.module_eval do\n  included do\n    validates :email, uniqueness: { scope: :company_id, case_sensitive: false }\n    validates_presence_of :password, :unless => :password_optional?\n  end\nend\n\nNow it is working for us.\n. ",
    "aratak": "Okay. Here is dirty hack which allow us to leave with it in rails 4.\n```\nmodule ClearanceRewriteValidationDirtyHack\n  extend ActiveSupport::Concern\nincluded do\n    v = _validators[:email].find { |v| v.is_a?(ActiveRecord::Validations::UniquenessValidator) }\n    _validators.reject!{ |key, val| key == :email && val == v  }\n    _validate_callbacks.instance_variable_get(:@chain).reject! do |callback|\n      callback.filter == v\n    end\nvalidates :email,\n          email: { strict_mode: true },\n          presence: true,\n          uniqueness: { scope: :company_id, allow_blank: true },\n          unless: :email_optional?\n\nend\nend\nend of dirty hack\n```\n. ",
    "jsteiner": "Sounds good @croaky. Hopefully I'll have some time to clean this up a little before then.\n. My goal was to use this within a test, where we want to get a new signed in user, but don't care who that user is.  Saved an extra line from doing:\nruby\nuser = create(:user)\nsign_in user\nThe alternative, if we like this behavior could be to return it from the sign_in test helper:    https://github.com/thoughtbot/clearance/blob/master/lib/clearance/testing/helpers.rb#L9-L19\n. Modified the commit to return user from sign_in_as instead of sign_in in Session. Thoughts?\n. ",
    "jhulford": "Posting this to the closed issue because this issue is still high on searches for how to make Remember Me work w/ Clearance.\n@derekprior \nYour approach kind of falls over as well since every single request now has the cookie written back (rack_session.rb line 11).  What I ended up doing in my Rails app was setting my own permanent \"remember_me\" cookie if the user clicked \"Remember Me\" when logging in and then looking for the cookie in the cookie_expiration lambda to decide how long the \"remember_token\" cookie should stick around for.\nala:\n``` ruby\nclass SessionsController < Clearance::SessionsController\n  def create\n    if params[:remember_me]\n      cookies.permanent[:remember_me] = \"\"\n    else\n      cookies.delete(:remember_me)\n    end\n    super\n  end\ndef destroy\n    cookies.delete(:remember_me)\n    super\n  end\nend\n```\nand my cookie_expiration lambda is:\nruby\nlambda {|cookies| cookies[:remember_me] ? 20.years.from_now : nil }\n. @lowski, since Clearance is installed as rack middleware, every request to your web app is funnelled through the rack_session.rb code.  So, looking at the code I pointed out, you can see that on every request, after doing the current_user setting stuff, it's calling through to your app and then calling code to set the 'remember_token' cookie after your app does its stuff.  That cookie call, in turn, will call through to the cookie_expiration lambda every time to find out how long the cookie should stick around for - which, when using @derekprior's approach will end up being whatever the last user who logged in chose - since it updates the global Clearance configuration.\nMy approach (which I still consider a hack) stores the user's remember me choice from when they logged in on their browser so you end up being able to tell if the user wants to stay logged in via the cookies param sent to the expiration lamba every time its called.  This avoids having to update any global Clearance state when the user logs in.  Also, @derekprior's approach is not at all threadsafe, if that's a concern to you - while mine shouldn't have any issue with that.\nAs an easy way to demonstrate the problem, open two browser sessions in your dev env. to your app, login with your first user using the remember me option, then check the 'remember_token' and check its expiration date - it should be 1 year from now.  Log in using a different browser not using the remember me option, check the cookie and it should be a session cookie.  Now, reload a page in your first browser session and the cookie that should expire in a year will have been modified to be a session cookie.\n. Thanks for the link, @derekprior.  Just wanted to make sure a new workaround was posted back here since it's still generally the highest pertinent search result for making Clearance work w/ a remember me function and it no longer functions correctly w/ the current release - found out the hard way.\n. ",
    "lowski": "@jhulford could you explain what do you mean be \"every single request now has the cookie written back\". I used @derekprior's approach in one of my application and I didn't noticed this problem but I also didn't go that deep (rack).\n. ",
    "notrab": "I am using this now and find it a great help. I would vote to put it into the PR.\n. ",
    "cheezy2022": ":thumbsup: I would definitely use it!!\n. ",
    "ajb": "Eh, you're probably right -- I should just change the way my tests are nested, or click the sign out link. Thanks for the sanity check.\n. ",
    "naps62": "I'm currently building a gem that depends on clearance, and when testing against Rails 4, i get this error:\nuninitialized constant Activodel (NameError)\n/home/travis/.rvm/gems/ruby-1.9.3-p448/gems/email_validator-1.4.0/lib/email_validator.rb:2:in `<top (required)>'\n/home/travis/.rvm/gems/ruby-1.9.3-p448/gems/clearance-1.0.0.rc7/lib/clearance/user.rb:2:in `require'\n/home/travis/.rvm/gems/ruby-1.9.3-p448/gems/clearance-1.0.0.rc7/lib/clearance/user.rb:2:in `<top (required)>'\n/home/travis/.rvm/gems/ruby-1.9.3-p448/gems/clearance-1.0.0.rc7/lib/clearance.rb:6:in `require'\n/home/travis/.rvm/gems/ruby-1.9.3-p448/gems/clearance-1.0.0.rc7/lib/clearance.rb:6:in `<top (required)>'\nwill this PR fix this? or it it something else?\nAlso, does this last commit make the gem fail with Rails 3.0.x or is it just a matter of not supporting it officially?\n. @croaky i noticed that too, and also went to search the actual source code, but couldn't find anything either, including on my own code\nYou can see the full build details here: https://travis-ci.org/naps62/auther/builds/9070961\nThis error occurs on all builds using Rails 4.0.0 or master branch\nAlso, i never specifically mention ActiveModel in my own code. The stack traces indicates it fails on the require 'clearance' line\nThis can also be due to the combustion gem i'm using\n. ",
    "ldamon": "I just had a client request this particular layout - a sign in/sign up modal.\nIt would be awesome to have the behavior built into clearance.\n. ",
    "sgrif": "Just realized I had never chimed in on this. I didn't have any particular problems, since we still use session based auth. I did have to define a custom create method, to get the JSON response structured correctly. Switching to respond_with could go a long way towards simplifying that. Registering a new user was trickier, since we have a lot of custom behavior (moving analytics data from the guest over to the newly created user, etc) so I wouldn't expect clearance to handle that. I'm with Joe that having a reasonable default response for JSON would go a long way.\n. :+1: \n. There should probably be some indication of what's going to happen outside of production. It's a poor UX to receive a 500 inexplicably when pushing to production. Especially considering this is an environment where you have to cat the logs to actually see the error. I'm not sure what the right solution is for that, however.\n. I think a better solution would be to have the generator default to true in\nthe config, and raise in any environment at boot if the config option is\nnot set.\nOn Jul 22, 2014 9:31 PM, \"Derek Prior\" notifications@github.com wrote:\n\nThe hassle of breakages likely outweighs the opinionated opinion on\nsecurity.\nI don't think I'd call this an opinion. We're dealing with an insecure\ndefault. I suspect that the majority of Clearance applications in\nproduction are susceptible to relatively simple session hijacking. I think\nwe need to address this one way or another.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/pull/423#issuecomment-49829253.\n. You shouldn't use require if you're using the same params hash in new. You should call params.fetch(:user, {}).permit(whatever) in your code.\n. Lgtm\n. :+1: If I had to guess, someone was hitting this with JavaScript and forgot to or didn't know how to send the CSRF token along. By skipping it here, we open ourselves up to potential XSS vulnerabilities and/or clickjacking attacks.\n. You could always just use some random valid bcrypt hash instead of \"\" there.\n. Lol\n. Is it worth suggesting that users extract that to a method or local variable when they're adding additional stuff?\n. \n",
    "zamith": "@croaky Thanks for the answer. It seems pretty straight forward to do, if documented. Still, if using resque, for instance, you'd need to do:\nclass PasswordsController < Clearance::PasswordsController\n  def deliver_email(user)\n    Resque.enqueue(...)\n  end\nend\nand then have a class with the perform. This varies from one background jobs system to another, if there was a pluggable way of choosing your backend, like in (devise-async)[https://github.com/mhfs/devise-async/tree/master/lib/devise/async/backend] it would be much easier to swap in and out the backend you use. Moreover, one would not need to keep reimplementing this.\nOne other thing is that for now you only have the change password email, when more notifications are added moving then to only one place would also be nice. So I don't have to override more than one controller.\nThis are just some random ideas, it is pretty simple to use right now, so thanks for that. ;)\n. It is fixed on github, but not on the 1.1.0 release.\n. @gylaz The problem is that I have more than one model that are a duck type for a user. So, I want to be able to use one or the other interchangeably.\nAs I said, I wanted it to be backward compatible, so what I did was to loop over each of the user model classes for all the finds, but use the first one for creations. This can be overridden in the main application if need be.\nIt is true that only the first one will be fetched, since I'm assuming the emails will be unique across the models. I could return an array of matches or a single match, if you think it makes more sense.\nI moved from devise to clearance not too long ago, and this is a feature devise has that clearance doesn't, even though they make the difference explicit by having a current_userand a current_x. I prefer it this way, and so far it is working great for me.\n. @derekprior I've tried STI as a first approach, but it didn't make a lot of sense for me.\nAs far as having a delegator, I would have to do the same for the authenticate method and the where that searches for the remember_token, right?\n. Got it. Thanks anyway.\nOn Friday, February 7, 2014, Derek Prior notifications@github.com wrote:\n\nIt may also be worth considering using a single User class that has a\npolymorphic profile. That brings its own complications, but it'd probably\nbe better than an STI approach.\n\nReply to this email directly or view it on GitHubhttps://github.com/thoughtbot/clearance/pull/392#issuecomment-34498403\n.\n\n\nCumprimentos,\n Lu\u00eds Ferreira\n. Hey guys, any news on this? Do you want this feature?\nThanks.\n. @derekprior The base controller class was my main concern with this change. Right now I can't think of anything else that needs to be shared between controllers.\nWe can also go with the devise approach, which is to have a Helpers module and put it there: https://github.com/plataformatec/devise/blob/master/lib/devise/controllers/helpers.rb#L81\nI can of course brute force it, but since this is something that I face in every project where I use clearance and cancan (which are a lot), I was going for a more permanent solution.\nA completely different approach would be to have a pluggable authorization adapter, such as active admin, but only with a skip authorization method (or lambda), since we always want to allow access to clearance controllers.\nDoes it make sense?\n@jferris Yes, you would have to, which I don't like very much, but felt cleaner than the brute force approach.\n. @derekprior My comment on #417 provides another use case for a base controller, I believe. It's an easy way to change the layout for all controllers.\nObviously, being able to simply swap in a controller would also do the trick.\n. @jferris Seems fine by me. As long as there is a way to more easily change the behavior of the controllers I'm ok with it.\nI'm not sure how to test this though. Do I need to test that each controller inherits from base?\n. @derekprior Done.\n. @derekprior Had to force push it, but it is done.\n. @derekprior I just found myself wanting to do this again, and @jferris comment seems like a good way to go about it. Should this be documented somewhere?\n. @derekprior Actually @jferris' solution had an issue in development, since the changes were applied in an initializer, once some classes were reloaded, they would stop working. I was able to solve it like this:\n``` ruby\ndef set_up_clearance_base_controller\n  Clearance::BaseController.class_eval do\n    layout 'clearance'\n    skip_before_filter :authorize\n  end\nend\nif Rails.configuration.cache_classes\n  set_up_clearance_base_controller\nelse\n  ActionDispatch::Reloader.to_prepare do\n    set_up_clearance_base_controller\n  end\nend\n```\n. I have also felt this problem and had to resort to a similar solution.\n. :+1: Nice one.\n. @calebthompson @derekprior I have also hit a problem while trying to override the layout for Clearance controllers. In this case:\nclass SessionsController < Clearance::SessionsController\n  layout \"whatever\"\nend\nwon't work. Trying to find a way around it, but it is definitely a pain.\n. I go it working with a before filter:\n```\nclass ApplicationController < ActionController::Base\n  before_filter :set_layout\nprivate\n  def set_layout\n    if clearance_controller?\n      self.class.layout \"whatever\"\n    end\n  end\nend\n```\nWhich takes advantage of the clearance_controller? method in my pull request.\n. @jferris Yes, you're right. It is cleaner. \nBut does this make sense as an argument in favor of having the clearance_controller? mehod?\n. Even though this will mean a bigger routes file, and therefore more code to maintain for the user, I like it. Overriding routes has always been a pain in Clearance.\n. Actually, when calling the UserController's new action I get:\nActionController::ParameterMissing:\n       param not found: user\nYou are setting the user_params to Hash.new when there is no user in the params hash, but you cannot do that with require, because it throws and error instead of returning nil, as params[:user] does. \nI'm using rails 4.0.0 with clearance 1.5.0\n. I would like to be able to override user_params to use require without overriding the new action. Right now that is not possible.\n\nOn 01 Dec 2014, at 17:21, Derek Prior notifications@github.com wrote:\nI still don't understand the problem.\nIf you override user_params as you say you want to, then it will raise without the user in params. If you don't want it to raise, don't use require?\n\u2014\nReply to this email directly or view it on GitHub.\n. Ok, that makes sense.\n\nI just wanted to stress that this happened because clearance uses the user_params in the new action, through user_from_params. If that's a non issue for you, then we can just close this pr.\n\nOn 01 Dec 2014, at 17:40, Sean Griffin notifications@github.com wrote:\nYou shouldn't use require if you're using the same params hash in new. You should call params.fetch(:user, {}).permit(whatever) in your code.\n\u2014\nReply to this email directly or view it on GitHub.\n. Ok, so that we can get some closure in this issue, here's the problem and proposed solution in my understanding.\n\nThere original problem was that when using clearance you can't do this:\n``` ruby\nclass UsersController < Clearance::UsersController\n  def update\n    ...\n    current_user.update(user_params)\n    ...\n  end\nprivate\n  def user_params\n    params.require(:user).permit(:email, :password, :name, :avatar)\n  end\nend\n```\nThere are two possible solutions, to override new as well as user_params, or the solution proposed by @sgrif, which is to use fetch instead of require, and thus getting:\n``` ruby\nclass UsersController < Clearance::UsersController\n  def update\n    ...\n    current_user.update(user_params)\n    ...\n  end\nprivate\n  def user_params\n    params.fetch(:user,{}).permit(:email, :password, :name, :avatar)\n  end\nend\n```\nIt's not the exact same thing, but should be close enough in most cases, so I'm closing the issue.\n. Oh, I didn't know it was not supported in Rails 3. Sorry about that.\n. ",
    "sferik": "@derekprior Here are the errors I\u2019m seeing when I run the tests after upgrading from clearance 1.0.0.rc7 to 1.0.0: https://gist.github.com/225f3f3188179f8509e9. (Before upgrading, the tests are all green.)\n@croaky Thanks for the offer. I\u2019m actually living in Berlin these days (just moved here a month ago) but I\u2019d be happy to pair remotely on rubygems.org, starting at noon Pacific on Friday. That\u2019s 9 PM Central European Time, so I might collapse before 4 PM PDT (1 AM CET). Hopefully, it won\u2019t take that long to get fixed.\n. @croaky Are we going to do this thing today or not?\n. @gylaz Thanks!\n. ",
    "JoelQ": "Looks good to me :+1: \n. :+1: \n. Most people are probably fine with the routes as they are so it probably makes sense to leave them on by default. However, it would be nice to have a config option that disables the routes so that we can write our own.\nruby\nClearance.configure do |config|\n  config.routes = false\nend\n. Down with date ranges! Next step, specify all the years individually like gnu.org :wink: \n\n. LGTM :+1: Nice work!\n. Conditionally updating based on \"last_seen_at\" means that on each request you are adding one SELECT query as well as a potential UPDATE query. Does it make sense to only persist the date that the session was created, not the last time it was used?\n. > For the index view to be useful to users, each token would have to be associated to something which might give them some hope of identifying the session. How do you think we should handle this?\nIs it possible to detect the device name? I want to say my bank shows me something fairly identifiable in it's session names.\nAlternatively, thoughts on allowing users to name their session when the log in for the first time? (probably pre-filling it with a default)\nIs a browser/OS combination good enough when it comes to naming sessions?\n. @gylaz I wrote it this way to be consistent with the way attr_accessor was written below\n@gabebw I think I prefer config.sign_up = false to config.can_sign_up = false. Was there a particular reason that you preferred adding can_ ?\n. Do we have a style guideline for that?\n. Good point. I wasn't sure if it needed its own section\n. @gylaz These specs were written to keep a consistent format with the rest of the file. Do you think I should just change the new specs? Change the whole file? Leave as is?\n. Good catch\n. Thoughts @gylaz @derekprior \n. @gabebw @gylaz Thoughts on allow_sign_up vs sign_up_enabled? I'm on the fence here, leaning slightly towards allow_sign_up.\n. Could we get rid of the tap and conditional? If no query parameters are passed then we end up with an empty string. How about:\nruby\nuri.path << \"?#{uri.query}\".chomp('?')\n. What does \"automatically expose its routes\" mean in this context? That we don't have to manually load them in the routes file?\n. ",
    "brittballard": "Looks good.\n. ",
    "adarsh": "@derekprior awesome! Glad this won't get lost.\n. Good one. I think the order note is important to call out (took me 30min to diagnose a few days ago).\nHow about 18d5f70?\n. Noted. Moved back in 3c9d752\n. The note is the purpose of this PR. If it's not informative, I'll close the request.\nI've definitely run into this myself previously as well.\nThe error suggests RSpec is looking for the Clearance helper in the wrong place:\nFailure/Error: sign_in_as(user)\n  NoMethodError:\n    undefined method `sign_in_as' for #<RSpec::Core::ExampleGroup::Nested_1:0x007ffec67f1238>\n. Took a stab at this here in 04e824c. Feedback welcome.\n. It was untested previously - unclear why.\nI'd be happy to add tests for it but it feels out of scope for this PR.\nWelcome input from @jferris and Team Airplane\n. Looks like minitest bundled with Ruby 1.9.x, not Test::Unit (link to test-unit replacement gem docs)\nrequire 'test/unit' uses a compatibility layer to allow a seamless transition (background):\n\nWith Ruby 1.9, however, MiniTest entered the standard library. require 'test/unit' still works in Ruby 1.9 but it's provided through a compatibility layer on top of MiniTest, so if you're using require 'test/unit' in Ruby 1.9, you're really using MiniTest under the hood. \n. Good question - since this is set by the generator, it seems like the RSpec/MiniTest check still would have to happen, then require the appropriate file.\n\nThat could be done either in the generator or in this file dynamically (prob the former).\nIs that still a win since we can't get rid of the check logic?\n. Nice. Added in d6f220f\n. Nice. Added in d6f220f\n. ",
    "ekremkaraca": "@croaky What about state of issue, will it be possible to combine clearance with mongoid?\n. ",
    "shevaun": "+1 \nSince upgrading to Rails 4 I can no longer override the named routes defined by clearance.\n. ",
    "sled": "+1 \nI ran into the same issue when implementing an invitation based sign up. I don't want the sign up form to be shown unless a valid invitation code is present.\nI added this to the clearance.rb initializer:\n```\nmodule RequiresInviteCode\n  extend ActiveSupport::Concern\nincluded do\n    before_filter :find_invite, only: [:new, :create]\n  end\nprivate\ndef find_invite\n    invite_code = params[:invite_code]\n    @invite = Invite.find_redeemable(invite_code)\n    if @invite.blank?\n      flash[:notice] = \"Sorry, that invite code is not redeemable\"\n      redirect_to sign_in_path\n    end\n  end\nend\nClearance::UsersController.send(:include, RequiresInviteCode)\n```\n. ",
    "sumitngupta": "+1 \n. ",
    "aaronrenner": "I like the call idea. Do you think it should call the block with env or  a Rack::Request? I also like the idea of having the option to assign :all for cookie_domain, so it would match the domain: :all option you pass to your cookie store in config/initializers/session_store.rb to handle multiple domains. I think it is a pretty common use case to have authentication carry over to all subdomains. Let me know what you think, and I'll make the changes.\n. @jferris Just checked in the changes to use a callable object for configuration.\n. ",
    "JESii": "Sure... here's what I have now in spec/spec_helper.rb:\nrequire 'database_cleaner'\nRSpec.configure do |config|\n  config.include FactoryGirl::Syntax::Methods\n  config.before(:suite) do\n    DatabaseCleaner.strategy = :truncation\n    DatabaseCleaner.clean_with(:truncation)\n  end\nconfig.before(:each) do\n    DatabaseCleaner.start\n  end\nconfig.after(:each) do\n    DatabaseCleaner.clean\n  end\nI switched from transaction strategy to truncation a short while back in an effort to resolve the problem, and finally just added a DatabaseCleaner.clean to the spec that was giving me problems.\n...jon\nOn Tue, 10 Sep 2013 13:20:58 -0700\nDan Croak notifications@github.com wrote:\n\nCan you share your DatabaseCleaner configuration? Ours typically looks like this:\n``` ruby\nRSpec.configure do |config|\n  config.before(:suite) do\n    DatabaseCleaner.clean_with(:deletion)\n  end\nconfig.before(:each) do\n    DatabaseCleaner.strategy = :transaction\n  end\nconfig.before(:each, js: true) do\n    DatabaseCleaner.strategy = :deletion\n  end\nconfig.before(:each) do\n    DatabaseCleaner.start\n  end\nconfig.after(:each) do\n    DatabaseCleaner.clean\n  end\nend\n```\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/thoughtbot/clearance/issues/356#issuecomment-24191115\n. No JavaScript. In fact, the features I was having problems with were the ones included from Clearance.\n\nI'll give those a whirl tomorrow; thanks...jon\nOn Tue, 10 Sep 2013 16:26:13 -0700\nDan Croak notifications@github.com wrote:\n\nCool. Looks pretty close to ours. Are your features using JavaScript?\nHave you tried the DatabaseCleaner configuration settings for config.before(:suite), config.before(:each), and config.before(:each, js: true) as shown in my comment?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/thoughtbot/clearance/issues/356#issuecomment-24202747\n. Just tried it with your DatabaseCleaner configuration settings and still have the problem. When I run\n\nbash\nrspec ./spec/features/clearance/visitor_signs_up_spec.rb\nthe \"with valid email and password\" spec fails due to email already exists, whereas if I run that spec individually, it passes.\n. Don\u2019t know, Derek, but I\u2019ll try to check back in on it. Just starting my new assignment so time is short at the moment.\ncheers\u2026jn\nJon Seidel, CMC\u00ae\nEDP Consulting, Inc. / www.edpci.com / www.4mypasswords.com\nEffective Decisions... Priceless!\nLinkedIn Profile\nTechnology that means Business - Since 1979\nphone: 510-530-6314\nfax: 510-531-1522\nResults that Make the Difference! The Certified Management Consultant (CMC) mark is awarded to consultants who meet the strict standards defined by the Institute of Management Consultants USA (an ISO/IEC 17024:2003 Certifying Body), including examination by their peers, client evaluations, and a written examination evidencing their understanding of the IMC USA's Code of Ethics. The CMC is the only consulting certification that has been ISO-accredited and recognized by the insurance industry as reducing risk.\nCheck out IMC USA for more information.\nOn Feb 4, 2014, at 8:16 PM, Derek Prior notifications@github.com wrote:\n\n@JESii , is this still an issue? It does appear as though it is an issue with the spec or database cleaner (though the configurations seem similar). If it's still an issue, would you be able to post a reproduction of it somewhere?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "JulienItard": "Maybe could you create a repo like Thoughtbot-i18n with a folder for each thoughtbot gems and locale files in it?\n. Okay, when do you create this new repo ?\n. Any news about it ? I added clearance-i18n on rubygem. Is it useless or ?\nIMO, we should keep translations files inside main repo, here.\nJulien\n. ",
    "BerkhanBerkdemir": "Is there any progress on that Issue, @jferris?\n. There is a few issue with this, this and this one. I think this PR needs a quick look for Rails 3.2. Also, the PR has written like a poet.. ",
    "jessieay": "Here is a post that describes how to do this with Devise, might be a good thing to look at as we decide on an approach for building this feature: http://natashatherobot.com/devise-rails-sign-in/\n. I'm gonna take a crack at this - thanks for the gist, @calebthompson \n. I can't think of a situation in which I would be depending on the password reset mechanism to validate a user record.\n. Tried adding something to the README, but it got to be too long. Closing this issue, since the solution is pretty google-able.\n. @jdedels thank you! This worked for me. And I really appreciate the explanation about Rails Engines.\nOne small edit: I included this module inside config/initializers/clearance.rb and did not need to extend ActiveSupport::Concern in order for it to work.\n. @derekprior I'd be interested in working on a password policy object. How would you recommend a policy object work for the end user? (aka - developer using Clearance)\n. @derekprior sounds good - thanks Derek!\n. Going to ignore these hound violations because of https://github.com/thoughtbot/clearance/commit/deb08058f1e1c696d38d417ed1657f41a023808a#diff-d41d8cd98f00b204e9800998ecf8427e\nThoughts @derekprior ?\n. @calebthompson Removal of unused variables is always urgent :stuck_out_tongue_winking_eye: \n. Weird! I'm on clearance 1.4.0 and there were definitely some specs with should syntax when I generated them with rails generate rspec:install - perhaps this issue has been addressed in a more recent release?\n. @Naxmeify can you give more information on what is not working? Are signed in users being taken somewhere else? If so, can you please let us know where and give a full paste or gist of your routes file.\nWorth noting that the order of routes in routes.rb does matter:\n\nRails routes are matched in the order they are specified, so if you have a resources :photos above a get 'photos/poll' the show action's route for the resources line will be matched before the get line. To fix this, move the get line above the resources line so that it is matched first.\n\nsource: http://guides.rubyonrails.org/routing.html\n. Thanks for the PR! Merged at 3b101b08da31a5bad1a6bc5e807cf46be2f4153e :tada: \n. LGTM!\n. One question on whether we should use class doubles instead - otherwise, LGTM!\n. @derekprior OMG 1 mind, 2  bodies. Will close :)\n. @derekprior found the issue, needed to include clearance in features/support/env.rb - that was being included before when we had Bundler.require so when that was removed Clearance::Controller was not being found in lib/clearance/testing/app/controllers/application_controller.rb.\nAlso added the gemfiles to version control, because even after I fixed that issue I was getting some failures due to be appraisal gemfiles still using old version of RSpec. Checking those gemfiles into version control is also the advice at https://github.com/thoughtbot/appraisal#version-control\n. @derekprior I think the Travis argument makes sense, but it's really easy to forget to update the gemfiles locally, which breaks tests (locally) and can lead to unnecessary time lost trying to debug something that is really just an issue with the gemfiles not being up to date. \nSince it is the recommended practice to version control the gemfiles, I would vote for going that route. Thanks for the links!\n. @derekprior I will do the rest after I get feedback on this one - don't want to convert all before figuring out what the best strategy is for converting (eg: is this refactor too much / too little)\n. @derekprior happy to review, but looks like Travis is failing so perhaps I should wait until that is fixed? I have meetings tomorrow before lunch but I am free after lunch to review!\n. Looks good to me! Good change, I've had to look at the dummy a few times and it always takes me a bit to remember where it is :santa: :christmas_tree: \n. Cool - does this mean rubygems uses Clearance!? :heart: \n. @farukaydin awesome, thanks for the update! This looks good to me. I will let @tute have the final say on this before merging.\n. And by @tute, I mean @derekprior :space_invader: forgot which library we were in here! :)\n. I usually see people create a place for flash messages in Rails view layouts, as @derekprior mentioned. \nLooks like we are setting the flash message in the sign in form like @iamarmanjon mentioned. (reference: https://github.com/thoughtbot/clearance/blob/master/app/controllers/clearance/sessions_controller.rb#L13) - I think it makes sense to do the same in the UsersController so that the error messages display in the same way during sign up. \nOne challenge with this is that we are using a single default failure message when a sign in fails. For a sign up form where a user record is being created, failure messages are usually determined by ActiveRecord validations. There are validations here: https://github.com/thoughtbot/clearance/blob/aefdc076fe92ed5168bbc1984dec66f8475d0654/lib/clearance/user.rb#L42 - but I would have to think a little bit about how to use them in the controller template because we'd have to make sure to include any additional validations on the class that is using clearance.\n. I agree that we don't need to include the file contents in the README, but I do think this note is important. Mostly because Adarsh and I spent a good 45 minutes wondering why the sign_in method didn't work for us. I've also had this problem in the past and just given up on using it. \n. Yeah, it uses capybara to click the sign in link. I will either create a new method or rename the existing one since it is kind if off given that it doesn't return a user \u00a0\u2014\nSent from my phone\nOn Tue, Aug 19, 2014 at 6:26 AM, Joe Ferris notifications@github.com\nwrote:\n\n\n@@ -2,7 +2,7 @@\nfeature \"User signs out\" do\n   scenario \"signs out\" do\n-    user = signed_in_user\n  Does signed_in_user sign in? Maybe have a sign_in method and call that to make it clear that this is doing something?\n\nReply to this email directly or view it on GitHub:\n  https://github.com/thoughtbot/clearance/pull/454/files#r16413687\n. Renamed to sign_in in 47b14b5dbbbf4f1f9c61bc7ec6bb31d458f703bf\n. note: it did return a user before, but that user wasn't being used by the tests, so I removed the returned user from the method and renamed\n. what is breaking? Travis seems fine...\n. is it? Derek above (aka: you) : \"This is generated code, so we are free to change this to behave however we see fit.\"\n. this is awesome! DREAM COME TRUE :cloud: \n. this is a little confusing - do you mean that Clearance 2.0 will inject routes into my routes.rb file or include them some other way? Isn't that what Clearance 1.0 already does (includes default set on install)\n. what he said ^^\n. woah this is cool!\n. would it make sense to also include tests for when routes are enabled? Seems like there are tests for signup disabled and all disabled in this file, but not for the base case of all enabled\n. it appears the rest of this file uses double quoted strings, so keeping as-is\n. I thought rails_helper was a Rails 4 thing, not a Rails 3 thing?\n. I wouldn't mind this being included as part of ClearanceHelpers but I can see why you'd want to remove it\n. saweeet\n. ahh yes, read this as rails_version not rspec_version - maybe change method name?\n. thoughts on using a class double instead? https://relishapp.com/rspec/rspec-mocks/docs/verifying-doubles/using-a-class-double\n. huh - didn't know this was a thing!\n. will be nice when we don't need this whole file anymore (after move to capybara)!\n. fix hash syntax while we're here?\n. typo in features\n. oh interesting - how is this working? I've only ever seen rake db:reset and rake db:test:prepare - didn't know you could prepend with another app name / environment (is that how this is working?)\n. maybe we should make this localhost::dummy or something just so it can't be confused with development? :santa: \n. should this go above per :capital_abcd: or does it need to be below the other configs?\n. good one! Fixed in fa52b81816b81ef5ffb3b826e96effeac080190a\n. Done 99b79b21e9342a1aab1246454686897ffbc8d7c0\n. good call - fixed in 4b3dd05095b366fe8c1e0fe5c1fd59e8d219c4a9\n. spec/support/clearance.rb - updated descriptions to make it clearer! :rainbow: \n. > You can change the time limit by passing in an ActiveSupport::Duration to config.password_reset_time_limit\n. ENV var for this?\n. you could make 15 the env var and then do ENV[\"PASSWORD_RESET_TIME_IN_MINUTES\"].to_i.minutes \n\n\nI am not 100% sure it makes sense here, but my general rule in a regular rails app is that time-related variables should be ENV vars in case they need to be changed on the fly. For example, on my current project, we have a time_to_refresh var that is 15 minutes on staging and prod for performance reasons, but sometimes we want to move it down to 1 minute of we are testing something on staging.\nYour call if you want to go that route here, though!\n. ```\n\n::User.to_s.constantize\n=> User (call 'User.connection' to establish a connection)\n::User\n=> User (call 'User.connection' to establish a connection)\n```\n\nsince these return the same value, do we need to to_s and constantize?\n. we doing trailing commas in this library?\n. The comment in the commit msg about this happening only on startup in non-development environments was interesting / informative. Should we include that info here as well?\n. Can we use a locale for this text? (the rest of the email text is from I18n so that seems like it would be good to stay consistent)\n. let's use I18n in the expectation when the template is updated\n. Thanks for the explanation.\n. My current client uses Rubocop in their codebase and the conventions they have enforce trailing commas in hashes, arrays, and method args. But to each his own! \n. this seems like almost an exact dupe of the message in blowfish.rb - is there somewhere you can put this constant where the two can share it?\n. this is a little thing, but is there a reason why this gem has dashes and underscores in the name? Seems unusual.\n. ",
    "rwilcox": ":+1:\n. ",
    "arunagw": "merged! thanks for checking out.\n. ",
    "rbishop": "I couldn't reproduce this using Clearance with Rails 4. What version of Rails are you using? This should eventually call down into ActiveRecord::Migration.next_migration_number, which determines whether to use timestamps or not.\n. ",
    "nimdraugsael": ":+1: \n. ",
    "paulspringett": "@croaky any idea when this will be part of a gem release?\n. @croaky @paulcsmith thank you :)\n. ",
    "paulcsmith": "I think that comment was for @paulspringett :)\n. Looks good, Derek!\n. So the idea is you customize the routes and also the generated HTML instead of having Clearance do it for you? Just making sure I understand\n. Ok, that makes sense. The code looks good then. I kind of like an easy way to disallow signup, but I definitely see the value in keeping things simple, so lgtm\n. Looks good. This will be so much nicer!\n. This also looks good to me!\n. Yeah, that's awesome. Nice job Derek and Jo\u00ebl\n. What do you think about naming this sign_up_allowed?\n. I'm leaning toward allow_sign_up as well\n. ",
    "r00k": "I had one comment. Once that's addressed I'm fine with merging this.\n. What about an around block here instead? https://www.relishapp.com/rspec/rspec-core/v/2-0/docs/hooks/around-hooks\n. ",
    "keilmillerjr": "@keilmillerjr\n. Bueller?\n. ",
    "korbin": "This was the exact spec (rpsec, rails 4) I was using in my application when I encountered the error.\nI debugged the actual back_door.rb middleware and found that ENV['QUERY_STRING'] was empty for POST requests, but not for GET requests.\nThe query parameters were somewhere else in env, and, without digging into the Rack middleware class, I don't know how it's smoothing over the GET vs POST inconsistency.\nI'll dig into it a bit later when I have some free time, but, here's the spec that back_door.rb was choking on-\n``` ruby\n  describe \"POST roles\" do\n    it \"creates new role\" do\n      role = FactoryGirl.build(:role)\n      user = FactoryGirl.create(:user, :admin)\n  post 'roles', {role: {name: role.name}, as: user.id}\n\n  assert_response 201\nend\n\nend\n```\n. Ah, yes, that would make sense.\nI didn't know if keeping the calling convention consistent (get URI, params) across REST request types was intended functionality.\nThanks for the help.\n. ",
    "JimiJonJimbo": "@derekprior, I was just trying to use clearance with rails_admin. I really don't know much about engines either.\n. No problem, @derekprior!\n. ",
    "ACPK": "@derekprior  - When I followed the instructions, I get \"Did you mean? _current_user\".. @anhari Thanks!\n. @magikid @tadp  - What is your recommended solution for this as of right now?\n. @derekprior - I apologize for the delay and thanks for taking the time to reply. I've added you to the sample repo, and turbolinks as well as caching is not set up in the test application using clearance.\n. @wenweih - What did you end up doing? . ",
    "kwerle": "Mighty annoying.  Is there an expected release date?\n. ",
    "jstdoit": "Finally, I recognized that clearance 1.1.0 use bcrypt as default password strategy, but 0.16.x used sha1 default.\n. @taylorbrooks Sorry, I was so late...Happy to know you solved the problem.\n. @derekprior thanks for your reply. I didnot change the default cookie_expiration configuration, and I used current_user as follows in the snapshot:\n\nAnd several minutes after I login, rails raises the current_user is nil error, and I have no any idea for this. \n. @derekprior Also I add an attr_accessor in my JyLicense model, and assign it with current_user in my controller. as follows:\n\n\nis there any possibility that the GC released the current_user?\n. @derekprior I've included :authorize, and I expected the current_user will be valid in a very long period, but it appears to be nil in a very short time and redirected me to login page.\n. @derekprior thanks, I'm checking my code. I update clearance from v1.1.0 to v1.3.0, things look ok now.\n. ",
    "taylorbrooks": "@jstdoit Does this mean you forced users to reset their passwords?\nI'm facing a similar situation...\n. @jferris Oh nice. Thanks!\n. ",
    "ricardogpsf": "@jferris Veeery thanks!\n. ",
    "edwardloveall": "I created a sample repo where you can see the error here: https://github.com/edwardloveall/clearance-example\nI am able to boot the server, visit http://localhost:3000/sign_up and get the error.\n. Thanks Derek. I will try that!\n. ",
    "nixpulvis": "I think the issue lies more at the level of code clarity, and logical placement of logic. I personally would like to have the option to pass to Clearance either a no validate option, or a block of validations for the password and email field from the model.\nI think having all validations set from the same place in the code helps make code more readable and easier to maintain.\n. ",
    "jjb": "i recently had to do this very thing, didn't know about this migration, and rolled my own. my initial implementation was very similar to what's in this PR, and it took many minutes for my 200+k users. Then I switched to the approach below, which takes about 10 seconds.\nruby\nActiveRecord::Base.connection.execute <<-SQL\n  update users set remember_token = md5(random()::text);\nSQL\nJust noting it here in case someone reading this PR in the future will find it useful.. It's very non-standard to not use the built-in rails sessions, which also gives access to all the conventions and libraries that one might be accustomed to. It would be good to have some documentation about this in the readme \u2014 what the situation is, and what the rationale is. If that could be expressed here, I could put together a PR for the readme (and/or wiki documentation).\n. HI @derekprior, thanks for your quick response. Sorry if I sounded too complainy :)\n\nwhose standard?\n\nYes, \"standard\" is perhaps an imprecise term. I meant to say:\n- in my experience (using rails since 2007), it's uncommon for a library which is only used in rails and which needs to persist identity based on web browser instance to not use the built-in session management capabilities of rails.\n- the benefits of using the built-in rails session management are:\n  - confidence in the security model\n  - familiarity with the configuration (e.g. configure rails session domain, https-only)\n  - familiarity with the behavior (e.g. clearing rails session signs out the user)\n  - ability to leverage other libraries (e.g. db-persisted sessions)\n\ncurrently clearances cookie policy can be different than your rails session cookie\n\nI've never encountered a need for this but I suppose you and others have, so okay that's interesting. I see it as a drawback though, especially since clearance does use the rails session for some things. So one can't just turn off rails sessions entirely in order to simplify the configuration.\n\nSession cookies are destroyed when the user closes their browser. The Clearance REMEMBER_TOKEN cookie needs to persist between sessions to remember the user.\n\nIf the rails session expire_after configuration is given a value, then the cookie is not destroyed when the user closes their browser. I imagine @jferris is well aware of this though, so I'm not sure what he's referring to here.\n. > Are there specific problems you feel this creates?\nGood question :) When debugging something I was confused about how things worked, which lead me here. The drawbacks listed above are some of the problems, but they aren't dealbreakers. I think a larger problem is that clearance does a lot of the work in a custom way very early in a middleware, which makes it less configurable, so I can't solve problems like this one: https://github.com/thoughtbot/clearance/issues/713\n(But I've only recently begun to think about this problem so I'm not proposing that there is a particular better way that it should be\u2026 my original comment was only saying that i think there should be better documentation to warn developers about possibly unexpected design).\n. Perhaps features like last seen tracking, ip address tracking, and geolocation could be provided by sign-in guards, either first- or third-party.\nSo, they can be left out in the initial incarnation of the feature.. gotcha!\nokay, made a PR\n. HI \u2014 thanks! Yes that's exactly what I'm talking about. I was mostly wondering about having to set @user=User.new (and anything else i was forgetting) in a controller. After I submitted the ticket I realized/remembered that I only need :user for the new form (haven't worked on a rails app in a while).\nI'll put together a PR for the readme.\n. @derekprior here's the approach I took https://github.com/thoughtbot/clearance/wiki/API-Authentication. (since everything is done deep in the bowels of a rack middleware I'm guessing there aren't a lot of options here without hacky monkeypatching and route pattern matching)\n. >  Is there an environment where you'd expect an API client to automatically handle cookies like this but not want to use it?\nwe have a notion of a user having multiple Devices. the Devices send a secret token as authentication. on the server side we use sign_in when we detect a valid token.\nif a Device record is deleted on the server side, the device itself might still try to make requests while sending both the cookie and the token. the server will authenticate the user based on the cookie (which we don't want).\nthis was all designed with the assumption that non-browser clients don't persist and send cookies, which in my career i've never encountered until recently, apparently this is standard in macos/ios. we could actually redesign the system to not use tokens at all and rely on cookies.\n(bit of a discussion tangent there)\nokay so thanks @derekprior for your response, i'll close this ticket. . Hi @derekprior, thanks for your response. I see I could have been more thorough before submitting my issue -- I will next time!. Okay, I seem to have fixed the behavior like so. is this the correct approach to writing a guard? Is it the guard's responsibility to check for the presence of current_user? Is it possible to write a guard that doesn't need a current_user?\nruby\nclass FooGuard < Clearance::SignInGuard\n  def call\n    return next_guard unless session.signed_in? # adding this line fixed things\n    if current_user.foo\n      next_guard\n    else\n      failure(\"Sorry: foo.\")\n    end\n  end\nend\nAfter I get an answer back I'll put in a PR with clarification in the docs. Thanks!\nJohn\n. Okay, I just realized that the example does indeed check signed_in?, not sure how I missed that before. Too much eggnog \ud83c\udf84 . clearance by default requires user_id for looking up the user\nhttps://github.com/thoughtbot/clearance/blob/master/app/controllers/clearance/passwords_controller.rb#L79\nthere's nothing in the clearance user model or migration that makes confirmation token guaranteed to be unique, so this is in fact necessary.\nyes, i'm easily overriding the controller action for my needs.\n```ruby\n  def edit\n    @user = find_user_for_edit\nif params[:token]\n  session[:password_reset_token] = params[:token]\n  redirect_to url_for(user_id: params[:user_id])\nelse\n  render template: 'passwords/edit'\nend\n\nend\n```\nthe addition is (user_id: params[:user_id])\nwhat clearance proper can possibly do to accommodate my need and other future scenarios (e.g. analytics params) is strip token from GET params and add then into the redirect. . \ud83d\ude22 . j/k, i get it\nhaving used Vagrant for several years i do find it wild that people are still managing different ruby versions and environments on one OS. \ud83c\udd92 . Thanks. So my question was, will the log line show deliver_now when the job worker works on it. Everything I'm seeing suggests that that is the case. Maybe this is more of a rails question than a clearance question :) I'll close this.. \ud83c\udd92 . ",
    "richrines": "That was more or less the inspiration for the change, in every app I find myself re-writing the generated code. I'm fine with restricting it only generated files if thats the popular sentiment.\n. No worries, I couldn't agree more. Go team :+1: \n. ",
    "m1entus": "It was rails 4.0.4, i already solve my problem with overriding routes and i'm not using inheritace anymore, but i was trying to locate my controller in default path: app/controllers/sessions_controller.rb or in app/controllers/clearance/sessions_controller but it wasn't working.\n. ",
    "gabrieltong": "Hi @croaky , I think i can resolve this problem , I just wonder why clearance doesn't have this feature , it's a very useful .\nthank you .\n. no, I doesn't change session controller \nbut it's fixed by replacing authorize by require_login . \n. ",
    "jacobsimeon": "I'ved submitted #425 as another approach\n. Cool, I figured I would just toss this out there. I know that I could definitely use this on a couple of projects, but I can handle updating my fork until it gets merged in some form.\n. ",
    "BlakeWilliams": "My first thought was the confusion that dev/test and production/staging behaving differently with little to no warning could cause.\n. It might also be a good idea to toss a notice in the generator similar to how Ember-Rails has done in the past with warn and add something in the readme.\n. LGTM\n. ",
    "geoffharcourt": "@derekprior Is there a preferred way of doing a sign-in hook in Rails 4?\n. Here's the ApplicationController code. I have the exact same code in a Rails 3.2.17 app and it works fine:\n``` ruby\n\nBase controller for application.\n\nclass ApplicationController < ActionController::Base\n  include Clearance::Controller\n# Prevent CSRF attacks by raising an exception.\n  # For APIs, you may want to use :null_session instead.\n  protect_from_forgery with: :exception\nprivate\ndef default_serializer_options\n    {root: false}\n  end\nprotected\ndef sign_in(user)\n    # store current time to display \"last signed in at\" message\n    user.update_attribute(:last_signed_in_at, Time.now)\n    super user\n  end\nend\n```\nStacktrace (this is from a test step where I use Clearance::BackDoor, but it's causing a failure in every previously working step where I used #sign_in_as):\n```\nFailures:\n1) Admin::PasswordsController PUT update when the old password matches\n     Failure/Error: sign_in_as(user)\n     NoMethodError:\n       protected method sign_in' called for #<Admin::PasswordsController:0x007fe51f248068>\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/clearance-1.3.0/lib/clearance/testing/helpers.rb:22:insign_in_as'\n     # ./spec/controllers/admin/passwords_controller_spec.rb:9:in block (4 levels) in <top (required)>'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:237:ininstance_eval'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:237:in instance_eval'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/hooks.rb:21:inrun'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/hooks.rb:85:in block in run'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/hooks.rb:85:ineach'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/hooks.rb:85:in run'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/hooks.rb:446:inrun_hook'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:345:in run_before_each_hooks'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:294:inrun_before_each'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:113:in block in run'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/extensions/instance_eval_with_args.rb:16:ininstance_exec'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/extensions/instance_eval_with_args.rb:16:in instance_eval_with_args'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:247:ininstance_eval_with_args'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/hooks.rb:106:in block (2 levels) in run'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:179:incall'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:179:in run'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/extensions/instance_eval_with_args.rb:16:ininstance_exec'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/extensions/instance_eval_with_args.rb:16:in instance_eval_with_args'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:247:ininstance_eval_with_args'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/hooks.rb:106:in block (2 levels) in run'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/hooks.rb:108:incall'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/hooks.rb:108:in run'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/hooks.rb:446:inrun_hook'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:340:in run_around_each_hooks'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:256:inwith_around_each_hooks'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:111:in run'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:390:inblock in run_examples'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:386:in map'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:386:inrun_examples'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:371:in run'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:372:inblock in run'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:372:in map'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:372:inrun'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:372:in block in run'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:372:inmap'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:372:in run'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/command_line.rb:28:inblock (2 levels) in run'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/command_line.rb:28:in map'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/command_line.rb:28:inblock in run'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/reporter.rb:58:in report'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/command_line.rb:25:inrun'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/runner.rb:80:in run'\n     # /Users/geoff/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/runner.rb:17:inblock in autorun'\n``\n. No, it inherits from a subclass of ApplicationController whose function is to require login.\n. No, I haven't. My initial attempt wasn't successful, so if you have the time I'd go ahead.\n. @derekprior, thanks for taking a look at this. I'm working on a project over the weekend that's due on Monday, but I'll try to build a minimal reproduction to help demonstrate the problem outside of my private app after the weekend.\n. @derekprior, I just built a simple app with a Posts controller that inherits from a controller that requires authorization (BaseController) that in turn inherits fromApplicationController`, and can't reproduce the problem on a small app, but it is still occurring in my big production Rails 4.1.6 app. \nStack trace isn't very useful:\n``\n32) DashboardController GET index\n     Failure/Error: sign_in_as(user)\n     NoMethodError:\n       protected methodsign_in' called for #\n     # /Users/geoff/.rbenv/versions/2.1.2/lib/ruby/gems/2.1.0/gems/clearance-1.4.2/lib/clearance/testing/helpers.rb:22:in sign_in_as'\n     # ./spec/controllers/dashboard_controller_spec.rb:22:inblock (2 levels) in '\n... (rspec gem backtrace) ...\n```\nThe only thing I can think of is that in my tests I'm not using the backdoor, but rather the sign_in_as helper:\n``` ruby\n  before do\n    Timecop.freeze(Time.utc(2014, 5, 21, 12))\n    create(:building_user, building: building, user: user)\nsign_in_as(user)\n\nend\ndescribe \"GET index\" do\n    before { get :index }\nit { should respond_with(:redirect) }\nit { should redirect_to(today_dashboard_path(building)) }\n\nend\n```\nIf I make #sign_in a public method in ApplicationController, the tests pass. It's only as soon as I move the method into protected or private scope that I get an error.\nI should note that this only produces an error in my app during testing (I had previously abandoned this approach when the test failed). If I sign in to the development environment with an overridden #sign_in method on ApplicationController (in the protected scope), it updates my user record with the last logged in time and the app. The failures only occur in controller tests, all my request and integration specs (all of which use the Clearance \"backdoor\") pass.\n. @derekprior, wondering if calling #sign_in in the #sign_in_as helper using #send(:sign_in, user) might be the solution, avoiding the restriction on calling a protected method?\n. No prob, just wanted to jot that down before I forgot.\n. @derekprior I was able to reproduce this in a Clearance spec, and resolved it by using #send to access the controller's #sign_in method despite being in protected scope.\n. Hi @derekprior, a couple questions:\n1. Should I amend the PR to handle RSpec 2 + 3 support, or is the Clearance team working on a wider effort to fix deprecated matchers that I should avoid disrupting? I'm happy to code this problem (although it will be a few days before I can contribute again).\n2. I'm not super familiar with Appraisal, but is it possible to have the test suite run against different versions of RSpec?\n. Maybe in the interest of performance, only execute RSpec 2.0 against one version of Rails? Then you would get notified about RSpec 2 related problems. I'm not sure it's necessary to duplicate every RSpec 2 test over every version of Rails in the matrix.\n. Approach 2 sounds like more work up front but also like a more reliable solution going forward. I don't think that RSpec 2 is going to go away any time soon. Curious to hear about what the team thinks.\n. :+1: thank you very much for getting this working, I'm looking forward to uncommenting deprecation warnings on RSpec 3.x!\n. I don't think that solves the issue, since the original reason I started experiencing a problem was that the helper does call a protected method in application code if your #sign_in method is protected.  I tried not using #send, and without it my application still raises NoMethodError due to the sign-in helper calling a protected method on a controller. (I'm sorry I'm not able to reproduce this problem in a smaller app.)\n. @derekprior, I was finally able to reproduce this problem in a small demonstration application (I'm not sure why I had so much trouble before):\nhttps://github.com/geoffharcourt/clearance_issue_424\n- ApplicationController is for public pages, so it include Clearance::Controller, but does not require authorization\n- BaseController is for private pages, it is a subclass of ApplicationController, and calls #authorize for all actions. It has a protected #sign_in method that does nothing but call #super.\n- PostsController is a subclass of BaseController, and is where I have the failing test that calls sign_in_as.\n. After taking a quick dive into the code, it looks like the original definition of Clearance::Controller#sign_in isn't protected, but the use described in the hook documentation that kicked off #424 and our long discussion here advocates for overrides to #sign_in to be in the protected scope.\nIf the preferred approach for overrides is to make overrides to #sign_in public but then apply hide_action to them, then I think that solution works without the use of #send to call #sign_in. If that's the case though, then I think we should document that you should always use hide_action when you override.\nI'm wondering if this issue only surfaced after Clearance::Controller was extracted earlier this year.\nApologies for the many messages in reply here, but I keep discovering some other relevant detail after reading further. Let me know if you'd rather resolve through documentation (so I guess I'll write a PR for the wiki to resolve the original documentation issue #424) or through a test that ensures that the protected method gets called and doesn't raise an exception.\n(@derekprior, thanks for the help with this as well!)\n. @derekprior, sounds totally reasonable. Thanks for your time on the issue.\n. I had to implement expiring reset tokens in Clearance on a project last week. Very excited to see this become something upstream (and to remove dependency on the database).\n. I think it would be a good idea to offload that logic elsewhere. One thing to think about if/when you do that is that there is logic that strips out whitespace and fixes capitalization from submitted email addresses, and it would be important to ensure that the validation still takes place at the same step in the sequence. I had trouble simulating some of the regex attacks that the Rails 4 regex rules are meant to protect against because of the string cleanup that Clearance performs outside of validation.\n. ",
    "jdedels": "Mounted engines do not have direct access to the Engine's url_helpers inside Application. You need to use the rails_admin helper created when you mounted the engine (I.e. RailsAdmin::Engine => '/admin', as: 'rails_admin') or the main_app helper which gives you access to the application's routes.\nI ran into the same issue. I solved it by overriding the url_after_denied_access_when_signed_out method. I placed the code inside an initializer. See code below:\n```\nmodule Clearance::Authorization\n  extend ActiveSupport::Concern\nprotected\ndef url_after_denied_access_when_signed_out\n    main_app.sign_in_url\n  end    \nend\n```\nhttp://edgeapi.rubyonrails.org/classes/Rails/Engine.html#class-Rails::Engine-label-Using+Engine%27s+routes+outside+Engine\n. @jessieay glad it worked for you. \nYou're right, extending ActiveSupport::Concern is not needed. \nI've since moved my module inside config/initializers/clearance.rb. Thanks for the tip!\n. ",
    "Dorian": "For future googlers who arrive here like me, I was having the same kind of error:\nNo route matches {...} missing required keys: []\nIt was happening inside a redirect helper on routes from an engine (authenticate! from Devise).\nSo I need to add main_app. to my path to make it work.\nThanks a lot @jdedels \n. ",
    "joshsmith": "I was inheriting my ApplicationController from ActionController::API; changing to ActionController::Base fixes this issue, but is not ideal behavior.\nAny thoughts?\n. @derekprior I thought I had tried to no-op it, but I'll try again. I don't need protect_from_forgery since I'm doing OAuth on the authorization side. So I'm also not sure why Clearance should require it anyway, since its job sounds like it should be more authentication.\nI'll try no-oping again and see what happens.\n. No idea what the problem was before, so ignore me.\n. Can you post your class here?\nOn Wed, Jun 11, 2014 at 12:52 AM, Nii Amon Dsane notifications@github.com\nwrote:\n\nAh got it now. Thanks!\nI've tried that and got this as a response:\n/app/app/controllers/application_controller.rb:16:in class:ApplicationController':\nundefined local variable or method\n' for ApplicationController:Class (NameError)\nI suppose it's complaining because the method is blank? Or does it have\nanything to do with teh fact that I defined the method as a private method?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/issues/435#issuecomment-45711937\n.\n\n\nJoshua G. Smith\nCO, OCS Class 56, CAARNG\n2/223rd RTI, CSLO\nEmail: joshdotsmith@gmail.com\nMobile: 415-706-4899\n. Try\n```\nclass ApplicationController < ActionController::API\ndef protect_from_forgery\n  end\nend\n```\n. This issue is cropping up again, even with the no-op. It seems to be really finicky.\nWhen inheriting ApplicationController from ActionController::API I get ActionController::RoutingError (undefined method 'protect_from_forgery' for Clearance::SessionsController:Class).\nAgain fixed with ::Base.\n. Bump.\n. @derekprior any further thoughts on this?\n. @derekprior we came upon this issue just recently and used @GCorbel's fix. Is there somewhere to track progress on this since this particular issue is closed?\n. @derekprior I'm on 1.14.1 right now.\n. ",
    "niiamon": "Hi guys,\nI am having this same exact problem and I am wondering how to no-op the protect_from_forgery in ApplicationController. @JoshSmith how did you do that?\n. Ah got it now. Thanks!\nI've tried that and got this as a response:\n/app/app/controllers/application_controller.rb:16:in <class:ApplicationController>': undefined local variable or method\n' for ApplicationController:Class (NameError)\nI suppose it's complaining because the method is blank? Or does it have anything to do with teh fact that I defined the method as a private method?\n. ```\nclass ApplicationController < ActionController::API\n  protect_from_forgery\nprivate\n  def  protect_from_forgery\n  end\nend\n```\nThat's what I have. Looks innocent enough, eh?\n. ",
    "tehPlayer": "protect_from_forgery is a class method included in ActionController::RequestForgeryProtection\nIf you want to keep ActionController::API then add just after class ApplicationController > ActionController::API:\ninclude ActionController::RequestForgeryProtection\nAlso, this will allow you to set CSRF token with method form_authenticity_token.\nHope this helps!\n. ",
    "jessicard": "Just ran into this as well. @tehPlayer's suggestion works for me for removing the error (thanks!), but I'm working on a Rails app in API-only mode. My understanding is that folks general disable protect_from_forgery for API actions, so I'd like to not have to include this module in my app if possible.\nThanks for your work on this! \ud83d\ude47\u200d\u2640\ufe0f . ",
    "chug2k": "i'm late to the party here, but did a separate gem ever get made? hopefully on a Friday sometime last year?\n. ",
    "georgebrock": "Single quotes is consistent with the surrounding code. Do we want to switch to double quotes here to follow the updated style guide, or use single quotes to be consistent with the surrounding code?\n. @croaky Agreed, but I think we should merge this as-is and I'll update all of the generated code to follow the style guide in another PR.\n. Regarding @houndci's many complaints about this PR: I think it's better for the generated code to pass the default hound checks, not clearance's custom checks.\n. It looks like hound only supports per-repo configuration right now (see: https://github.com/thoughtbot/hound/blob/master/app/models/pull_request.rb#L35)\n. Thanks, merging.\n. > I like this for the GET safety -- some browsers are eager to optimize GET requests, and mail clients certainly do whatever they want. But I'm not sure if the GET safety is relevant in practice.\nI think it is relevant in practice:\n1. There are some reports of links only shared via email being visited in some situations, e.g. https://www.stonetemple.com/does-google-sniff-gmail-for-urls/ indicates some of the links they created for testing were visited by (non-Google) bots after they were shared by email.\n2. According to the HTTP spec, there's no reason for a mail client not to start visiting links in emails any time it wanted to.\n. The code looks good to me.\n. ",
    "releu": "Done\n. ",
    "jnettome": ":+1:\nIt's not obvious ;)\n. ",
    "davidgf": "@croaky that doesn't work for me either. In this case, the error is NoMethodError: undefined method 'env' for nil:NilClass and the exception in raised in should deny_access.\n@derekprior I can give you a hand indeed, just let me know what I can help you.\n. ",
    "jm90m": "Hey @derekprior, are you still considering a password policy object as a future feature for this? Thanks!\n. ",
    "gabrielecirulli": "I agree. The general consensus on the web is to \"bounce\" back users that are already signed in if they try to visit a page that is reserved for signed-out users. This issue is not necessarily a bug (it doesn't cause any problems), but it can definitely cause confusion and make an application not feel very solid to the user.\n. ",
    "chadwilken": "Apparently you HAVE to require 'clearance/rspec' if you want to do TDD **even** if you aren't using any of the providedrspec` additions.\n. ",
    "scriptmonkey": "@derekprior Please let me take a quick crack at the line counts.  I am newer and need the practice.  I will have it in an hour or so.\n. @derekprior, I am not sure I fixed the lines being too long in the way thougbot would want them fixed.  I am open to guidance on the \"proper\" way to fix them.  There are a couple I did not fix given they are only one character over.  I also removed the \"c.syntax = :expect\".\nI am open to learning.  If you see something I should have done differently, please let me know.\n. @derekprior Iam so sorry.  I had a personal version that I used to play with removing the singe quotes.  I thought the that style guide said to use double quotes, but I see hound is saying differently.  Now, I have to get back to my last version.\n. @tute  So, what is the correct style?  According to hound, its single quotes.  According to https://github.com/thoughtbot/guides/tree/master/style , it says to use double quotes? \n. Please bear with me while I reset and see where I am at.  I am going to reset back, check it in to find the lines over 80, then hopefully a final commit.  I apologize for flooding your email.\n. @derekprior Is there anything else that I need to do for this?\n. @derekprior Thank you for your guidance and patience.  I had not taken on something like this before.  I learned a lot. I enjoyed doing this.  If there is other things I can help out on, I am willing.  I just need to know what needs to be done.\n. I will investigate further.\n. I added that to make sure that it forced the expect syntax.  What started this little sleigh ride was I was using suspenders which has this in the rspect config.  Then when I added clearance, I had many failures because clearance used should.  While expect is the new default, I thought it would be nice to mimic suspenders.  This could be taken out.\n. Not sure the best approach for this one, either.\n. Wasn't sure what to do here either.\n. duh, hanging head in shame.......  One more question:  When I run rubocop, it complains about double quotes are preferred.  Would thougtbot want all of those changed?\n. But you would be ok with me changing all of them, right?\n. I am out of town next week.  I will try to get to them while I am away.  Thanks for the guidance,\n. I did not take this to RSpect 3.  I took it to 2.99.  Did you want me to take it to the latest level?\nI am back from my business trip so I can start working on this again.\n. Understood.  I will go through these this weekend.  Thanks!\n. @derekprior I think I fixed all the lines you commented on.  I am not sure why it is saying there is a line that is too long in spec/clearance/session_spec.rb.  I do not see one that is too long.\n. ",
    "tute": "@scriptmonkey I may have ill advised you, sorry about that. Thankfully it's in its own commit, easy to remove! \n. It's the project's configuration (single quotes). That was the source of my confusion.\n. Looks good to me!\n. LGTM. \ud83d\ude80 \n. This also fixes https://github.com/thoughtbot/clearance/issues/612. Thank you!\n. ruby\nheaders.should set_cookie('remember_token',\n                          user.remember_token,\n                          remembered_expires)\n. If it's lines we are changing, yes, preferred to follow the guidelines. So all green lines with that comment apply. :)\n. I think both work well, but I'd probably write this as ActiveRecord::VERSION::MAJOR >= 5.\n. ",
    "stravid": "I discovered this issue while debugging an acceptance test but verified that it also happens in development.\nI will try to create a simple test case!\n. @derekprior Sorry for the late reply.\nLooking at this the offending entry is line two. But I guess since there is no expiry date but instead \"Session\" this means Rails itself is adding this. So I guess this is not an clearance issue. \n\n. This does not help, you can try it yourself: https://github.com/stravid/clearance-subdomain-testcase\nThe seeds file provides an existing user, start the server and visit http://subdomain.lvh.me:3000/\nIf you log in with the existing user you can observe this behaviour yourself. \n. ",
    "dashingspidy": "Rails version 4.1.4\n. ",
    "squarism": "Hi.  I'm the one that originally contributed the Blowfish strategy.  I like Blowfish because it's really fast.  But I don't think it's safe anymore (2 years have passed).  I'm not a security researcher but Bruce Schneier (the creator of Blowfish) doesn't like Blowfish anymore, he recommends Twofish.\nI've been working on an AES strategy to contribute as I've been thinking that the Blowfish strategy is outdated.  I agree that bcrypt is a great default.  I simply contributed Blowfish because I liked having another option ship with Clearance just in case people have rules/policy/etc.  Since then (iirc), the Readme has more documentation about how to roll your own anyway.\nI will work on a gem for legacy projects that you could refer people to.\n. Thank you for the heads up.  I think I'll start by making one that's compatible now and then thinking about a tagging/versioning convention for the move to Clearance 2.  Maybe something like 1.x works with Clearance 1.x and 2.x works with Clearance 2.x.\n. No problem.  I'll do another gem.\n. Comment mistake.\n. ",
    "stevenbarragan": "ruby\nedit_user_password_path(@user, :token => @user.confirmation_token.html_safe)\nI got it! :smile: \n. ",
    "eignerchris": "Yup. That was it. Somehow while juggling a couple diff layout rewrites I killed the csrf_meta_tags. Thanks!\n. ",
    "bradpsheehan": "Hi @derekprior thanks for the response. Unless I am missing something, the mailer subject is not pointed at anything in clearance.en.yml essentially giving the user of this gem no way to customize the subject line...it seems to always resolve to the default value set in clearance_mailer.rb (\"Change your password\").  As it stands now, the mailer subject localization points to I18n.t('clearance.models.clearance_mailer.change_password') which does not work.  Please let me know if you agree and/or if I am missing something and the README just needs to be updated.\n. @thoughtbot @croaky I see this automated comment about preferring double quoted strings, but the rest of the spec uses single quotes. I was trying to match the way the rest of the spec is written. What would you prefer I do? Change all to double quotes? Also, for learning purposes, why use double instead of single quotes? I thought there was a performance advantage to single quotes...\n. Same question re: single vs double quoted strings.\n. ",
    "naxmefy": "routes.rb\n```\nRails.application.routes.draw do\nnamespace :manager do\n    constraints Clearance::Constraints::SignedIn.new do\n      root :to => 'dashboard#index'\n    end\n  end\nroot 'application#index'\nend\n```\nApp startsup - all is well\nBut if i try to view /manager\ni get this error:\n``\nActionController::RoutingError (No route matches [GET] \"/manager\"):\n  actionpack (4.1.6) lib/action_dispatch/middleware/debug_exceptions.rb:21:incall'\n  actionpack (4.1.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in call'\n  railties (4.1.6) lib/rails/rack/logger.rb:38:incall_app'\n  railties (4.1.6) lib/rails/rack/logger.rb:20:in block in call'\n  activesupport (4.1.6) lib/active_support/tagged_logging.rb:68:inblock in tagged'\n  activesupport (4.1.6) lib/active_support/tagged_logging.rb:26:in tagged'\n  activesupport (4.1.6) lib/active_support/tagged_logging.rb:68:intagged'\n  railties (4.1.6) lib/rails/rack/logger.rb:20:in call'\n  actionpack (4.1.6) lib/action_dispatch/middleware/request_id.rb:21:incall'\n  rack (1.5.2) lib/rack/methodoverride.rb:21:in call'\n  rack (1.5.2) lib/rack/runtime.rb:17:incall'\n  activesupport (4.1.6) lib/active_support/cache/strategy/local_cache_middleware.rb:26:in call'\n  rack (1.5.2) lib/rack/lock.rb:17:incall'\n  actionpack (4.1.6) lib/action_dispatch/middleware/static.rb:64:in call'\n  rack (1.5.2) lib/rack/sendfile.rb:112:incall'\n  railties (4.1.6) lib/rails/engine.rb:514:in call'\n  railties (4.1.6) lib/rails/application.rb:144:incall'\n  rack (1.5.2) lib/rack/lock.rb:17:in call'\n  rack (1.5.2) lib/rack/content_length.rb:14:incall'\n  rack (1.5.2) lib/rack/handler/webrick.rb:60:in service'\n  /usr/local/rvm/rubies/ruby-2.0.0-p594/lib/ruby/2.0.0/webrick/httpserver.rb:138:inservice'\n  /usr/local/rvm/rubies/ruby-2.0.0-p594/lib/ruby/2.0.0/webrick/httpserver.rb:94:in run'\n  /usr/local/rvm/rubies/ruby-2.0.0-p594/lib/ruby/2.0.0/webrick/server.rb:295:inblock in start_thread'\nRendered /usr/local/rvm/gems/ruby-2.0.0-p594@bico/gems/actionpack-4.1.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.0ms)\n  Rendered /usr/local/rvm/gems/ruby-2.0.0-p594@bico/gems/actionpack-4.1.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (1.6ms)\n  Rendered /usr/local/rvm/gems/ruby-2.0.0-p594@bico/gems/actionpack-4.1.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (11.4ms)\n  Rendered /usr/local/rvm/gems/ruby-2.0.0-p594@bico/gems/actionpack-4.1.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (50.7ms)\n```\nFollow Routes are shown by rails:\nmanager_root_path   GET     /manager(.:format)  manager/dashboard#index\nroot_path   GET     /   application#index\npasswords_path  POST    /passwords(.:format)    clearance/passwords#create\nnew_password_path   GET     /passwords/new(.:format)    clearance/passwords#new\nsession_path    POST    /session(.:format)  clearance/sessions#create\nuser_password_path  POST    /users/:user_id/password(.:format)  clearance/passwords#create\nedit_user_password_path     \n* GET   /users/:user_id/password/edit(.:format)     clearance/passwords#edit\n* PATCH     /users/:user_id/password(.:format)  clearance/passwords#update\n* PUT   /users/:user_id/password(.:format)  clearance/passwords#update\nusers_path  POST    /users(.:format)    clearance/users#create\nsign_in_path    GET     /sign_in(.:format)  clearance/sessions#new\nsign_out_path   DELETE  /sign_out(.:format)     clearance/sessions#destroy\nsign_up_path    GET     /sign_up(.:format)  clearance/users#new\n. ",
    "anthonynavarre": ":+1: \n. ",
    "olimart": "Any idea @derekprior ?\n. Ok thanks Derek\n. Working fine with a brand new 4.2.0.rc3 app. Not sure what happened last time (no access to the code at the moment). Spring enabled.\nClosing for now since...it works. Thanks fro your help @derekprior \n. ",
    "lenart": "This happened to me before (on a different project) but I thought I was doing something wrong. I'll see if I can recreate this and provide some more details as to when this happens. My stack:\n- pow 0.5.0 (with powder)\n- ruby 2.1.3\n- rails 4.1.7\nSo position of layout overrides in the initializer file should not cause this, right?\n. I think I got it and it is somehow related to rails auto reloading. Here are the steps I took with Chrome in incognito:\n- access protected page (/admin/pages) - correct (overriden) layout is used\n- open any file in app/models, make a change and save it\n- refresh /sign_in page and the default layout will be used\nEven the position (which was my initial assumption) does not solve this. Can you reproduce this using steps above?\nIn case some other gem could be causing this here's my list:\n```\nsource 'https://rubygems.org'\nruby '2.1.3'\ngem 'acts_as_list'\ngem 'bourbon'\ngem 'clearance'\ngem 'codemirror-rails'\ngem 'coffee-rails', '~> 4.0.0'\ngem 'flutie'\ngem 'foundation-rails'\ngem 'jquery-rails'\ngem 'haml-rails'\ngem 'high_voltage'\ngem 'paperclip'\ngem 'pg'\ngem 'rails', '4.1.7'\ngem 'sass-rails', '~> 4.0.3'\ngem 'simple_form'\ngem 'shortcode'\ngem 'turbolinks'\ngem 'uglifier', '>= 1.3.0'\ngroup :development do\n  gem 'better_errors'\n  gem 'binding_of_caller'\n  gem 'spring'\n  gem 'quiet_assets'\nend\ngroup :development, :test do\n  gem 'dotenv-rails'\n  gem 'pry-rails'\n  gem 'pry-remote'\nend\ngroup :production do\n  gem 'heroku-deflater'\n  gem 'newrelic_rpm'\n  gem 'rails_12factor'\n  gem 'unicorn'\nend\n```\n. @sanderhahn's last commit solves the problem with reloading User class with spring. Nice work!\n. ",
    "matoakley": "I am having the same problem as above but I have not overridden the Clearance controllers, therefore cannot set my layout in the controller. I can create a class to set the layout as a workaround but it's not an ideal solution.\n. ",
    "fagiani": "This problem still happens today. I've been able to work around it by issuing: bin/spring stop, and even it will say Spring is not running it fixed for me.\nHope it helps!. ",
    "damienbrz": "I had the same issue and moving\nClearance::UsersController.layout \"public\"\nBefore the block \nClearance.configure\nsolved my problem\nNo idea why though.... ",
    "pbrisbin": "That was fast. LGTM\n. This is included via RSpec.configure further down, why here too?\n. ",
    "arthurnn": "@derekprior sorry for not adding a test, working on it right now, wanted to make sure you were good with the approach, but anyhow I will make tests work locally and write a regression test for it.\n. sorry man.. will work onthose in the next hours\n. @derekprior I actually found out that the spec to ensure this behaviour was there already, but the expectation on it was not right. So I just fixed, proving the point. (You can read the comment on commit 7779b12 to understand better what I mean)\n. thats awesome. this will solve a long time issue in rubygems.org.. \n:heart: thanks a lot for improving the commit message too.. looks great.\n. LGTM\n. ",
    "andrewhavens": "Ah, sorry, I should have searched first. This question was answered in issue #436. It sounds like the plan is to rename this method in the next major version of Clearance. In the mean time, you can alias the method to something else in your ApplicationController:\n``` ruby\nclass ApplicationController < ActionController::Base\n  include Clearance::Controller\nalias_method :require_login, :authorize\ninclude Pundit\nend\nclass PostsController < ApplicationController\n  before_filter :require_login, only: [:edit, :update]\ndef edit\n    @post = Post.find(params[:id])\n    authorize @post\n  end\nend\n``\n. :+1: \n. Would it be possible to make this a configuration value likeurl_after_createdoes? Now that there are multiple types of redirects, seems likeClearance.configuration.redirect_urlshould be renamed to something likeClearance.configuration.after_create_redirect_urland add aClearance.configuration.after_sign_in_redirect_url. This is the line that made me think about the configuration values. When a user is signed in, it should not go to theurl_after_createbut theurl_for_signed_in_users. They happen to be the same value in this case since the defaults are the same. But the expectation should read that it redirects to the \"already signed in\" URL.\n.url_for_signed_in_usersmakes sense to redirect to theClearance.configuration.redirect_url. I think that is the most common configuration behavior. However, I think the reason for this PR is to be able to have two different redirect URLs depending on if you are a newly created user, or a user who has already logged in. Oh wait...maybe I'm reading this wrong. My thought was that I want to be able to specify a different redirect URL for a newly created user (taking them to a \"fill out additional profile information\" page). But maybecreatein this context means the creation of a new session (i.e. after sign in v.s. visiting sign in page then automatically redirecting if you're signed in).\n. Looks like there is already a [UsersController#url_after_create`](https://github.com/thoughtbot/clearance/blob/master/app/controllers/clearance/users_controller.rb#L27). My mistake! Sorry about that.\n. ",
    "jeroenvisser101": "Thanks for being so super quick!\n. Just wanted to note that this is not just for links, but also for externally hosted images and CSS/JS. That means that an image host, CDN or advertisement could possibly hijack this as well. I feel this might increase the attack vector a bit. \ud83d\udc4d for fixing!\n. @o-hudson that's correct. We might want to add expiration timestamp on the session (to decrease the chance of it being usable when stolen).\n. > Controller the expiration of the session also decreases the window, but as a library I don't want to enforce the expiration on all uses of session.\n@derekprior For expiration, I'd say we could do this without expiring the session itself (say we'd add session[:password_reset_token_expires_at] or something)\n\nbut in that regard it's just one of many different problems you'd have as a result of XSS.\n\nI agree, XSS should be avoided to begin with. (or any way to steal a session)\n. ",
    "hl": ":+1: \n. ",
    "iwz": ":+1: \n. ",
    "rogercampos": "Clearance does the right thing using an independent cookie. The meaning of session depends on the application, and authentication is not always tied to session. Ej: an ecommerce site may use the session to store checkout related data, and a user needs to be able to make two consecutive orders while staying authenticated.. Hi @derekprior thanks for taking a look at this. Sorry I don't know how other auth libs handle this, but if they use the rails session I guess they just avoid the problem altogether. If they don't manage cookies explicitly and instead rely on session, the application has also access to manage the session, and then it's possible for the app to avoid returning the session cookie on publicly cached endpoints (it's the app responsibility after all).\nThe problem with clearance is that it manages cookies explicitly and there's no way for the app to change this behavior per-endpoint.\n(btw, I think clearance should manage its own cookie and not use session: https://github.com/thoughtbot/clearance/issues/510). @rezart what you're describing seems to directly correlate to the issue fixed there. Check if you're using public http caching in any of your app endpoints, and perform tests issuing requests as an authenticated user. If you receive from your app any response with \"cache-control\" public and \"set-cookie\", that's bad.. I didn't know if you wanted to expand the public api of Session, if you're +1 to that I'll make it public instead. yes, no need for that indeed, will change. ",
    "gfontenot": "oh god yes can we do this everywhere?\n. ",
    "MattMSumner": "couple of comments otherwise LGTM\n. \n. This seems like a good change. \ud83d\udc4d \n. I know this is generated, is it worth removing comments?\n. could you use if valid? || errors[:password].blank??\n. that's more what I was thinking. If valid? is true there's no need to check errors.\n. Ruby 2.3 introduces the dig method that could be used here. I'm guessing clearance supports older versions of ruby though.\nThere is a gem that adds the method to older versions but I think this is fine as is.. How would you feel about making this a method to use in both places? Maybe password_params or email_from_params?. ",
    "mxie": "These look good to me too.\n. @mike-burns Yes, you are correct.\n. @derekprior Not a problem. I've been working on a bunch of other stuff in the meantime anyway. I actually haven't gotten to making this feature an opt-in one yet, so no rush.\n. @derekprior Thanks for taking another look! I made a bunch of changes based on your comments and suggestions. There are some parts that might still require some brainstorming though.\nIf there are a few other things you'd like to fix, I think a 2.0 branch makes the most sense. I don't think there's a huge urgency for this feature at the moment anyway.\n. @derekprior Whenever you get a chance, could you take a look at this again? I think it's pretty much all set to go. The only thing I might add is an \"Upgrade Guide\" of sorts. That could be done separately though.\n. There seems to be a test failure on Travis CI:\n1) Clearance::RackSession injects a clearance session into the environment\n    Failure/Error: expect(Clearance::Session).to have_received(:new).with(env)\n      `have_received(...).with(...)` cannot be used when received message args have later been mutated. You can use a normal message expectation (`expect(...).to receive(...).with(...)`) instead.\nChanges look fine to me otherwise though\n. @croaky Yeah, I definitely considered the fact that it'd break for anyone who was overriding those private methods. However, the fact that they're not part of the public API (as you said) and we're considering this as part of the 2.0 release, I think breakage/non-backwards-compatibility is acceptable.\n. Thanks for the feedback, @drapergeek @croaky and @derekprior. I've pushed up some changes - ready for re-review.\n. Looks good to me too.\n. I think we care more about valid? as a command here than its actual return value, so I'm going to side with Derek on keeping these separate. I do, however, think that it makes more sense to use empty? instead of blank?.\n. It looks like for ActiveModel::Errors, empty? is just aliased as blank?, so it makes no difference.\n. We could either ignore this or rename this generator. I have no particular preference.\n. It's been a while since I've Rails'ed, but there's a better way to do this, right? It's a one-way association, i.e. there's only a belongs_to association in PasswordReset, no has_many from User.\n. I don't know if this is excessive. It feels right since the responsibility is separated, but the run call is really only calling PasswordReset.active_for(user).deactivate_all, which could be easily used here instead.\n. Yeah, I had something like that originally, but Rails 3.2 doesn't seem to like it because of mass-assignments. =\\ I guess I could at least extract the reset-building as a private method in here.\n. Hmm...we wouldn't want the resets to successfully deactivate if the password update failed, right? We could check for successful runs for both via:\nruby\nif user.update_password \"whatever\" && deactivator.run\n...or something like that.\nWas there some other flow you were thinking of?\n. Did something like this instead: f2ee26c.\n. Sounds good to me. Done in 8f0f9a8.\n. Should this be a template instead of in app/models, like https://github.com/thoughtbot/clearance/blob/master/lib/generators/clearance/install/templates/user.rb?\n. @jessieay - I don't think I understand why this should be an ENV var. I also don't think it'll work as one either since the environment wouldn't understand 15.minutes. Can you further elaborate?\n. Thanks! Changed in b101536.\n. Hm, I don't think we want to use strong params here. IIRC, this was done so that we could associate the password reset with a user. I don't recall why I went for a block here instead of just PasswordReset.create!(user: user) though...so I'll just go ahead and simplify it to that.\n. I agree! I think I was just trying to follow the same naming convention as it was previously.\n. According to the OWASP link from the GH issue (http://owasp.com/index.php/Forgot_Password_Cheat_Sheet#Step_3.29_Send_a_Token_Over_a_Side-Channel), they\u2019re saying no more than 20. I think I remembered that somehow and kind of picked 15 arbitrarily.\n. I believe this limit was set for the confirmation_token previously. I don\u2019t know what the rationale behind it was though. It\u2019s also interesting because we\u2019re limiting the token to a length of 20 bytes, so they don\u2019t seem to match up. Thoughts on removing the limit?\n. Great idea! I've actually never used ActiveRecord Transactions before, and this totally makes sense. I'll give it a go.\n. Done in df5083e.\n. Done in 948a4f7\n. Done in 48a3a4c\n. Done in 789933b\n. I did some crazy stuff in https://github.com/thoughtbot/clearance/commit/49ae7ac3d029b2250d37be8ded3b94c5d89a11cb. Let me know what your thoughts are.\nI'm finding that validating that the password update is valid kind of hard when wrapped in a transaction...might need some more brainstorming here where we can use ActiveRecord::Base.transaction but still be able to fetch useful error messages from either the user or the password reset objects.\n. That's a great point! I suspect that the token check was initially put in place to kind of short-circuit the checks or something.\n. ",
    "tabfugnic": "@derekprior All taken care of. What's procedure for getting this merged in? \n. Not hugely important, but it is for a specific upcase feature\n. I noticed this project uses primarily single quotes, are you slowly moving this over to double quotes or should I leave this?\n. That's a good question, should this then be thrown into the initializer?\n. ",
    "mcmire": "I am not a YARD expert, I just use a few of the features, but other than the comment above, everything seems to look good here.\n. Two suggestions, but otherwise LGTM\n. I guess in all the times that I used Clearance, it never really dawned on me that it's not really designed to be used more than once. This is obviously a shame, but nothing is really wrong here.. This code sample might not render correctly, you might have to indent this by four spaces to do so.\n. What does Array #call mean here? (Just curious)\n. I don't know if there are any other warnings in this project, but would it be a good idea to use a heredoc and wrap this at 72 or 80 characters?\n. Would it be a good idea to extract all of these warnings to some kind of warn utility method which would take care of prepending the message with the caller?\n. successfull -> successful\n. Do you want to use @return false, indicating that the sign in was unsuccessful. or does that work? (I can't remember how YARD works off-hand)\n. ",
    "pedrosmmoreira": "@txdavidtx, the error you are seeing is due to requiring clearance/rspec in your spec_helper file. From the backtrace, you see the actual error is due to ActiveSupport not being initialized. Since you are using RSpec 3, the require should be place in your spec/rails_helper, which loads the Rails env.\nAlso, in order to use the BackDoor middleware, you just need to add it to your config/environments/test.rb, as indicated in the README. Requiring clearance/rspec is only necessary for use of convenience methods in controller tests.\nI've submitted a PR to update the instructions https://github.com/thoughtbot/clearance/pull/534\n. I'd like to help with this, but I'm not sure if I understand the full extent of the issue.\nWould it suffice to make user_params check the action key and then call out to different methods? This would at least be quick and backward compatible.\n. Ah, I see. Whenever I've had to deal with this, I've used the same mechanism that is in place: deleting the param from the hash and assigning it to a local var that can get used in the block. For adding a couple of attrs, that doesn't get too bad.\nIf I am customizing beyond a couple of attrs, I resort to a form object, since at that point it is quite likely I am not pushing everything onto the user anyway. \nI do agree that checking the key is \"smelly\", but other than some kind of 'Registration' object, I'd go with documenting that 'user_from_params' is the place to extend behaviour. I could also see the initializer as a place for whitelisting, in order to keep compatibility.\n. @derekprior, apologies for lack of clarity in the PR description. In 'spec/clearance/controllers' there is a 'contoller_spec' file that duplicates the contents of 'controller_spec' (found in the same dir). This PR proposes removing 'contoller_spec' and keeping 'controller_spec'.\nHope this makes it clearer :)\n. Hi @jjb, if I understand the issue correctly, you just want to render the the sign in/sign up form anywhere.\nI would say the \"established\" way of doing this would be:\n1) You can copy the views from clearance over to your application by running rails generate clearance:views. This will allow you to easily reference the form partials for rendering in your application.\n2) You can wrap the form partials from Clearance with your own form builder, for instance:\nFor sign in:\n<%= form_for :session, url: session_path do |form_builder| %>\n  <%= render \"sessions/form\", form: form_builder %>\n  <%= form_builder.submit %>\n<% end %>\nFor sign up:\n<%= form_for :user, url: users_path do |form_builder| %>\n  <%= render \"users/form\", form: form_builder %>\n  <%= form_builder.submit %>\n<% end %>\nHope this helps!\n. I think the issue to address here is if Clearance should even generate an application.html.erb file. I am thinking this was added as a convenience to help you get started, but since the suggested/necessary additions to layout are printed to STDOUT on install, it would be better to not touch the layout file.\nI'll open a PR with a change in order to gather some opinions.\n. I am happy to add @jferris suggestions and repush. I agree with @derekprior, I really can't see a scenario where the layout isnt there. Thanks for the review and suggestions!. ",
    "eleidan": "Let me know if additional information is needed.\n. @derekprior actually, I desribed all the steps to get the same state, but here you are:\n``` ruby\nRails.application.routes.draw do\n  resources :passwords, controller: 'clearance/passwords', only: [:create, :new]\n  resource :session, controller: 'clearance/sessions', only: [:create]\nresources :users, controller: 'clearance/users', only: [:create] do\n    resource :password,\n      controller: 'clearance/passwords',\n      only: [:create, :edit, :update]\n  end\nget '/sign_in' => 'clearance/sessions#new', as: 'sign_in'\n  delete '/sign_out' => 'clearance/sessions#destroy', as: 'sign_out'\n  get '/sign_up' => 'clearance/users#new', as: 'sign_up'\nend\n```\n. And here is the info about the gem I am using:\n```\n$ gem list clearance\n LOCAL GEMS \nclearance (1.8.1)\n``\n. After addingconfig.routes = falseto myconfig/initializers/clearance.rbI managed to generate views withrails g clearance:views.\nI don't understand what you mean under 'The routes were generated locally', as I have a git repository and I can check if I have changes. So, therails g clearance:views` command failed with exception (error), and generated no views :smiley: \nWhat can I say about it. They say, if one does something according to the documentation and gets an error, then there are at least two reasons for that, as follows:\n1. We have bad documentation.\n2. We found a bug.\nI see no problem in such a behavior of generators. I think this should be documented properly, maybe right in the README. But of course it's up to you, guys, to decide how to solve it better.\nStay cool!\n. ",
    "sanderhahn": "Maybe its possible to add a Railtie to_prepare callback inside clearance for Rails.env.development? to relookup the user class constant when it is defined? That might fix it without adjusting the configuration api.\n. How about adding to lib/clearance/configuration.rb:\nruby\n  # Relookup user_model on Rails restart\n  class MyRailtie < Rails::Railtie\n    config.to_prepare do\n      Clearance.configuration.user_model = Clearance.configuration.user_model.to_s.constantize\n    end\n  end\n. Sorry about all the references, my proposed solution also doesn't seem to work when i run the tests. Will see if i can fix it...\n. Thanks :)\n. Sorry this was not a good solution...\n. Nice! :)\nNitpicking: Rails::Railtie::Configuration#to_prepare defines generic callbacks to run before #after_initialize (not necessarily on every request). The ActionDispatch::Reloader#to_prepare callbacks are run before each request.\n. You are calling the config.to_prepare in a class extending the Railtie::Engine. That would be: http://api.rubyonrails.org/classes/Rails/Railtie/Configuration.html#method-i-to_prepare. When i was experimenting i found that the reload triggered on every model class change but not necessarily on every request.\n. Was not sure how to test if reloading was working and looked over the engine. This spec tests if the callback has been configured, which might be enough if you can rely on Rails to properly call them:\nruby\n  describe \"#reload_user_model\" do\n    it \"expect reload_user_model to be called on framework reload\" do\n      expect(Clearance::Engine.config.to_prepare_blocks).to include(&:reload_user_model)\n    end\n  end\n. Would be nice to see a pretty printer/formatter for ruby that makes your code formatted in the one true way according to a certain style guide ;-)\n. Great, didn't know that thanks :) Will try it out!\n. ",
    "j-dexx": "@derekprior Using rails 5 this breaks completely for me with a forbidden attributes error.\n. @derekprior Sorry, that was a pretty unhelpful comment.  I can't find where I had an issue and having created a simple app to try and replicate it I can't.\n. Rails 4 has the following middleware in production\nuse Rack::Sendfile\nuse Rack::Lock\nuse #<ActiveSupport::Cache::Strategy::LocalCache::Middleware:0x000000033a60f8>\nuse Rack::Runtime\nuse Rack::MethodOverride\nuse ActionDispatch::RequestId\nuse RequestStore::Middleware\nuse Rails::Rack::Logger\nuse ActionDispatch::ShowExceptions\nuse ActionDispatch::DebugExceptions\nuse ActionDispatch::RemoteIp\nuse ActionDispatch::Callbacks\nuse ActiveRecord::ConnectionAdapters::ConnectionManagement\nuse ActiveRecord::QueryCache\nuse ActionDispatch::Cookies\nuse ActionDispatch::Session::CookieStore\nuse ActionDispatch::Flash\nuse ActionDispatch::ParamsParser\nuse Rack::Head\nuse Rack::ConditionalGet\nuse Rack::ETag\nSo maybe after ActiveRecord::QueryCache?\n. Not that I can see, but the maintainers might want it in a specific place.\nThere are other things that need to be addressed for rails 5 though, for example rails/rails#18336 removes hide_action which means authorization.rb and authentication.rb will need changing\n. Makes sense to me, will do.  I echo GCorbel - no rush, enjoy Christmas.\n. @derekprior Yes, that works nicely and is also fine with rails 4.\n. ",
    "DavidVII": "@j-dexx I just ran into the forbidden attributes error as well. Happened when I tried to add a name field to the users/form partial. I got around it by adding a user_params method in my own users_controller. I kept getting the error until I remembered to update the routes file to use my own users controller rather than the clearance/users_controller.\n. Ya, you pretty much summed up my approach. I overwrote the user params and the create action (I needed to do a few extra things). Here's some code.\n```ruby\nclass UsersController < Clearance::UsersController\ndef create\n    @user = user_from_params\nif @user.save\n  sign_in @user\n\n  # unique tasks I needed done went in here\n\n  redirect_to new_order_path\nelse\n  render template: \"users/new\"\nend\n\nend\nprivate\ndef user_params\n    params[:user].permit(:email, :password, :name, :phone_number)\n  end\nend\n```. I posted a similar issue today with #559. I agree that perhaps there should be a default error. Even the \"Bad email or password.\" would be good. That being said, this feels more like a form validation issue. Adding form errors in the sign up form makes some sense to me. Thoughts?\n. @jessieay would it make sense to include form errors within the sign up form?\nSomething like...\nerb\n<% if object.errors.any? %>\n  <h3>Please fix the following errors:</h3>\n  <ul>\n    <% object.errors.full_messages.each do |msg| %>\n      <li>\n        <%= msg %>\n      </li>\n    <% end %>\n  </ul>\n<% end %>\nThat should allow us to display validation errors directly in the form instead of displaying a general flash message. Thoughts?\n. Good points, @derekprior. I definitely think this requires some more thought.\nIMO, the user flow is off when using internal views or even default controllers. Clearance has user validations in place, yet we're not showing their errors by default. Not showing these error messages when a user signs up adds a hurdle to the user experience. I feel like presenting errors as I described above makes it clear why there was an interruption. Given, my idea may not be the best solution, but I definitely feel like we need something. Thoughts?\n. +1 on requiring the views\n. ",
    "krsyoung": "@DavidVII (one year later) I'm hitting the same thing.  Any chance you can (remember and) share the code you used?  I take it you subclassed your users_controller and inherited from clearance/users_controller?  Then made sure to not clobber the new and create methods but did define a custom user_params that makes use of strong parameters?. Beautiful, that's the winner.  Thanks so much @DavidVII!  \ud83d\udc4d . Scratch my previous mess ... for the record this is working well for me with Rails 5 (foregoing the test helpers):\n```\nconfig/environments/test.rb\nRails.application.configure do\n  ....\n  # https://github.com/thoughtbot/clearance#fast-feature-specs\n  config.middleware.use Clearance::BackDoor\nend\n```\n```\ntest/controllers/some_controller.rb\n...\n  test \"should get new\" do\n    get new_request_url(as: @user)\n    assert_response :success\n  end\ntest \"should create request\" do\n    assert_difference('Request.count') do\n      post requests_url(as: @user), params: { request: { description: @borrow.description, distance: @borrow.distance, price: @borrow.price } }\n    end\nassert_redirected_to request_url(Request.last)\n\nend\n...\n```. Thanks @derekprior! I think had also exceeded my brain quota while I was debugging which wasn't helping the issue :-) \nI'm still mulling through making use of the backdoor (which works) vs the approach @zachahn had used (and the approach suggested by the Rails guides) which has some benefits (and drawbacks) in terms of supporting the geolocation I'm using.. ",
    "farukaydin": "@jessieay updated pr to use i18n.\nyes rubygems uses clearance :sparkles: \n. @derekprior you're right, default option looks good :+1: \n. ",
    "kenyonj": "LGTM ... other than the failing CI\n. ok, I was not sure if another method was needed since it was somewhat incorrect about what the url was actually for\n. oh it has been... but the whole file was already in single quotes so I thought that is what the project was using... I will change all to double now.\n. @derekprior I have reorganized the spec file. It seemed to be using contexts in some places and not others. \n. There are several methods that point to Clearance.configuration.redirect_url and in this instance I think we actually want to redirect to the same place that users get redirected to after the session is created. This can always be overridden in the controller.\n. no problem. yes, this is for signing in, so in this context create just means that the user is signing in.\n. We are asserting that the user should be redirected to the redirect_url regardless of what the methods in the controller are set to. This is the default and we want this test to fail if the code is changed that implements this fix.\n. no they are not... they were brought over from the previous before blocks... I will remove them\n. new hash syntax?\n. ",
    "iamajvillalobos": "Hi Derek,\nYou are right. I did use Devise before trying out Clearance, and in Devise\nI think there is a default error message. For me I would like have a\ndefault error message where we could customize to our liking. It's not\nreally important just a little thing that I observed.\nOn Fri, May 8, 2015 at 10:51 PM, Derek Prior notifications@github.com\nwrote:\n\nDo you have a suggestion for what the flash should say? Unfortunately, I\ncan't think of anything particularly useful that wouldn't then be an\nimpediment for people with different sign up requirements.\nI thin the proper way to handle this is to customize the sign up template\nto display errors as you would see fit. It's a tough thing for us to do for\nyou because error styling is generally very app-by-app.\nWhat do you think?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/issues/554#issuecomment-100260451\n.\n. \n",
    "anhari": "Hi all! For some reason when I was using clearance my Active Record validations were not showing error messages when they were being validated. I ended modifying the create action in my own UsersController so that it always shows at least one of the errors:\n``` ruby\n  def create\n    @user = user_from_params\nif @user.save\n  sign_in @user\n  redirect_back_or url_after_create\nelse\n  flash.now[:error] = @user.errors.full_messages[0]\n  render template: \"users/new\"\nend\n\nend\n```\nHopefully this applies to this discussion!\n. ",
    "sandals": "Be sure to restart your server if it's already running while generating the routes! DUH. :laughing: \n. ",
    "steverob": ":+1: And just taking this little off topic...\nIm new to this project and was going through the code. I found this part interesting - the application#url_after_denied_access_when_signed_in & application#url_after_denied_access_when_signed_out.\nThis is being used here - \n``` ruby\nmodule Clearance\n  module Authorization\n    ...\n    ...\n   protected\n def redirect_request(flash_message)\n   ...\n   if signed_in?\n     redirect_to url_after_denied_access_when_signed_in\n   else\n     redirect_to url_after_denied_access_when_signed_out\n   end\n end\n\nend\nend\n```\nAnd redirect_request is called from deny_access which in called by require_login in the first place - \nruby\ndef require_login\n  unless signed_in?\n    deny_access\n  end \nend\nSo I was wondering, if the redirect_request is called only if !signed_in? is true why is this condition being checked again inside redirect_request?\nJust asking this for educational purposes :) @derekprior Thanks!!\nBtw enjoying reading through this lovely code.\n. Thanks a a lot @derekprior. Was able to solve this with your tips :+1: :heart: the BikeShed btw! Thanks!\n. ",
    "rodrigodealer": "I think it's a good idea. I'll make a PR and then you guys can evaluate it.\n. @derekprior Thank you for your answer. I added some commits. Please, review it. :)\n. I was following the coding style in all other tests.\n. ",
    "calleerlandsson": "I'm in favor of this change.\n. Thanks @gabebw!\nDo you think I should do what @houndci tells me to do? I know we've said that we shouldn't go back and fix old style violations, but at the same time, that's exactly what this PR does.\n. I've fixed the quoting in 68741fd. Should I merge this?\n. Thanks @derekprior! Merging.\n. ",
    "nickcoyne": "Thanks. I get that Clearance has an opinion (which I appreciate). I was just wondering about the reasoning behind this specific opinion. I know some of our users expect a confirmation field to mitigate password typos. \nIn other words I'm trying to weigh up whether I stick with the defaults (and possibly have to explain to clients why we don't have such a field), or make the changes as you suggested above.\nThanks again.\n. ",
    "phil-monroe": "And just for anyone that is interested, I'm currently working around the problem by using this monkeypatch that should be removed when the problem is fixed. If you use it, be sure to hardcode the proper class for your \"user\" model.\n``` ruby\nconfing/initializers/clearance.rb\nTODO: remove this monkeypatch when clearance is fixed\nhttps://github.com/thoughtbot/clearance/issues/568\nmodule Clearance\n  class Configuration\n    def user_model\n      ::User\n    end\n  end\nend\nClearance.configure do |config|\n...\nend\n```\n. Yup. Was using 1.8.0. Thanks!\n. ",
    "seanpdoyle": "Could we provide a thorough commit message documenting the changes?\n. Do these comments hook into HTML documentation generation? \n. Should we provide an example of what it would look like to use one of these options?\n. ",
    "graysonwright": "Looks good! Nice to have all the extra documentation!\n. Small question, but looks good to me!\n. Looks good!\n. Only thought - it might be useful to include sample usage. Thoughts?\n. Is this RDoc syntax?\n. ",
    "zavan": "I think this is more of a routing related problem, than a model or table related one. It seems that the model or table name means nothing to the route param name, what defines it is the resource name in the route, so:\nruby\nresources :users, controller: 'clearance/users', only: [:create] do\n  resource :password, controller: 'clearance/passwords', only: [:create, :edit, :update]\nend\nGenerates:\nPOST   /users/:user_id/password(.:format)\nGET    /users/:user_id/password/edit(.:format)\nPATCH  /users/:user_id/password(.:format)\nPUT    /users/:user_id/password(.:format)\nPOST   /users(.:format)\nBut if you change from :users to :admin_users, but change nothing in the model or table name:\nruby\nresources :admin_users, controller: 'clearance/users', only: [:create] do\n  resource :password, controller: 'clearance/passwords', only: [:create, :edit, :update]\nend\nIt generates:\nPOST   /admin_users/:admin_user_id/password(.:format)\nGET    /admin_users/:admin_user_id/password/edit(.:format)\nPATCH  /admin_users/:admin_user_id/password(.:format)\nPUT    /admin_users/:admin_user_id/password(.:format)\nPOST   /admin_users(.:format)\nBut I don't think we can easily programatically get this route resource name...\nI think our best option is to default to model_name.singular but let the user configure it:\nruby\nClearance.configure do |config|\n  config.user_id_parameter = :admin_user_id\nend\n. ",
    "GCorbel": "Thanks @derekprior for your help. I think it may cause a security issue because we have to check if email addresses are real. I will check if I create a gem.\n. Thanks for suggestions. I think the simplest is to have a confirmation email. It's pretty common and, I think, users are accustomed.\n. I fixed it but I had to do this : \n```\nclass ApplicationController < ActionController::API\n  def self.helper_method(args)\n  end\n  def self.hide_action(args)\n  end\ninclude Clearance::Controller\nend\n```\nI can do another PR to fix the issue if you're interested.\n. I think we will dependent of the existing middlewares. Is there a reason to not place it at the end?\n. @j-dexx , I agree. I monkey patched some parts. I will check to do a PR for rails 5 later.\n. I agree with you @derekprior . No problem for the delay, happy Christmas time !\n. Done!\n. ",
    "benlivermore": "After more study, we realized that we could override the email_optional? method have it return true and effectively eliminate the validation so we could add our own.  So we added the following code in the clearance initializer file right after our configure block. \nmodule Clearance::User::Validations\n      #remove email validation so we can use our own\n      def email_optional?\n        true\n      end\n    end\n. ",
    "mycargus": "Help would be great, thank you!\n. ",
    "tdreyno": "@derekprior Middleman also has a dependency on ActiveSupport, so it's definitely going to be available. I think it is just adding an explicit require for what you're using rather than expecting Rails to preload that file.\n. ",
    "oiojin831": "@derekprior Sure.\nHere is my Gemfile,\nand my Gemfile.lock.\n. ",
    "duleorlovic": "OK. Just to note that there are other places in this pull request that\nneeds proper indent.\nOn Thu, Nov 5, 2015 at 2:38 AM, Derek Prior notifications@github.com\nwrote:\n\nClosed #598 https://github.com/thoughtbot/clearance/pull/598.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/thoughtbot/clearance/pull/598#event-455229700.\n. \n",
    "manuelmeurer": "But if someone overrides the method in their own controller inheriting from Clearance::PasswordsController, they would have to call it themselves from that controller, since it's not called from Clearance::PasswordsController anymore, right? In that case, removing the method in Clearance::PasswordsController should not break it. Am I thinking correctly? \nBut maybe let's wait for v2.0 anyways, better safe than sorry! :smile:\n. Yeah I think introducing a model and validations would be overkill. But logically, looking at the controller, I would expect a check that params[:password][:email] is present somewhere before this line:\nhttps://github.com/thoughtbot/clearance/blob/781e9a9fd99bad27b45fa10e1c3b019b8caa31a5/app/controllers/clearance/passwords_controller.rb#L66\n. Awesome, thanks!\n. Can you check if redirect_to url_for(subdomain: request.subdomain) works for you?\n. AFAICS subdomain is the only case that is not handled by url_for.\nI think url_for is the best option here, compared to making this a config option, since it should work in all cases. Subclassing the controller is of course still possible if one wants completely different behaviour. \ud83d\ude04 \nBut the maintainers have the final say in this of course.\n. Yeah, url_for without arguments uses the controller, action and ID (if present) from the current request (but not the params!) to generate a new URL - so basically the current URL without the query part.\nhttps://github.com/rails/rails/blob/v4.2.7.1/actionpack/lib/action_dispatch/routing/url_for.rb#L153\n. ",
    "jankeesvw": "I just had the same issue, had a green \"Bad email or password.\" notice in my project. \ud83d\ude0a. ",
    "imtayadeway": "@derekprior strange, I couldn't get it to fail when running the rake task, though I did have some pains in getting myself set up (particularly because I vendorize my gems by default - addressed in appraisal here - https://github.com/thoughtbot/appraisal/commit/91eb5d63fdbc7237c6e1715b5569ac85a727a5d6 - and because my railsrc was interfering. I'll see if I can address some of those issues in a follow up PR(s)). Thanks!\n. Looks like I missed that this would cause an issue with Ruby 1.9.3. Was this why appraisal was restricted to version 1?\n. @thiagoa funny seeing you here! :grin: Thanks for the info! I haven't had time to look into the failure but will try to soon.\n. :heart:\n. ",
    "jeffreyguenther": "I think what you've described sounds like a great starting place. If other topics come up, we can keep a list in this thread and tackle them as we have time.\nI think using docs as a place to store the copy is a great idea. It keeps the docs in the repo and at the ready. If we want to get fancy down the road, we can eventually transition the docs folder into github pages, or maybe both. Using markdown will make that easy.\n. Definitely. I forgot about those.\n. Another question to add to the list: How do I user a model other than User as my user model?\n. Using Clearance.configuration.user_model.name.parameterize.to_sym as the key will solve the problem.\n. Yes, I will.\n. @derekprior  Ok, I'm part of the way into the patch. How do I create a new migration and apply it for the test runner? [bundle exec] rake db:migrate is not working.\nI need to be able to create a Person object instead of a user. I've added the Person model to dummy/app/models. When I run the tests, it's tell me that I am missing a table.\n. ",
    "monfresh": "I have come across a couple of projects that provide encryption and decryption of attributes:\nhttps://github.com/attr-encrypted/attr_encrypted\nhttp://rocketjob.github.io/symmetric-encryption/index.html\nThoughts on any of those?\n. ",
    "cjfinc": "Hi.\nYeah, I have a copy of routes.\nMy scenario are following:\nAs a site owner I want to on/off registration on site\nso that I have an ability to open registration for limited time\nAnd config option \"config.allow_sign_up\" is pretty handy for this.\nBut for local routes copy it requires my fix.\n. ",
    "nickmjones": "Hey @derekprior, thanks very much for your gracious response! You've pointed me in the right direction, and I have a light version of what I need running now. Thanks again for the response. I'll continue to poke around and try to learn more. Who knows, maybe I can even contribute some documentation at some point.\n. ",
    "coneybeare": "If thoughtbot decides not to address this, I fixed it by subclassing the PasswordsController and overriding the find_user_by_id_and_confirmation_token method to look like this:\n```\n  private\ndef find_user_by_id_and_confirmation_token\n    user_param = Clearance.configuration.user_id_parameter\n    Clearance.configuration.user_model.where(confirmation_token: params[:token].to_s).friendly.find(params[user_param])\n  end\n``\n. This merge is causing me problems in my app. I have my admin and public facing sides living int he same app, but all admin routes have a specific subdomain. When my user requests the change in password, my email forms correctly send them to theedit_user_password_url`\nedit_user_password GET    /users/:user_id/password/edit(.:format)     admin/clearance/passwords#edit {:subdomain=>\"MYSUBDOMAIN\"}\nbut the url_for in this method does not look at subdomains at all, and redirects the user to the same path but without the subdomain, where they now encounter a routing error as it correctly should without the subdomain.\n. It does, and this is how I've done it in my controller subclass' override, but is subdomain really the only edge-case here? When dealing with url's, shouldn't we stick to the pattern already established by this library? That is, configurable either by subclass-overridden method or within Clearance.configuration\n. It must have been a driver issue, because when I switched to a headless_chrome setup from your capybara-webkit driver, it became a non-issue.. I'm seeing this on 1.16.2 as well. Where standard login is not setting anything in the session, and thus we get\nFilter chain halted as :require_login rendered or redirected\nA downgrade to 1.16.1 immediately resolved the issue.. 1.6.2\n\n1.6.1\n\nAfter upgrading to 1.6.2 and logging in, I can see a successful login and redirect to url_after_create, but a render_login failure. At this point, there is not a remember_me_token cookie in the store, only the session cookie. Doing the same thing on 1.6.1 creates the remember_me_token properly, which I assume is what is being used to log in the user on subsequent requests.. ",
    "coryodaniel": "For the failing tests, a lot of the tests are written around a method #add_cookie_to_headers which is called in the middleware Clearance::RackSession. \nThis isn't actually required as rails writes the Set-Cookie header for anything in the cookies collection and is what causes the double remember token cookie being sent in the event a domain cookie is used:\nThis will cause rails to write the cookie and this writes an additional cookie. When you arent using domain cookies no problem, when you are using them the first time the cookie is set, its set without the domain portion being present and that is were the second (standard) cookie comes from.\nIf you apply the PR everything works fine, but a ton of tests fail because they are written just working at the rack layer and using the #add_cookie_to_headers method to set the cookies.\nI'm going to remove all those tests, and put equivalent tests in the sessions controller spec to simulate rails setting them.\nLMK if this is crazy talk and Im missing something.\n. I have added the specs to my branch to cover this issue.\nAlso created PR #617 against master. I didnt see a branch for 1.8x\n. Feature or a request spec test should trigger it. We have actually started to move off of clearance so I never got around to the test case. Sorry! :(\nSent from my iPhone\n\nOn Jun 21, 2016, at 2:55 PM, nzgrover notifications@github.com wrote:\n@coryodaniel We have encountered this issue as well and found that your branch fixed the issue. I'd like to create \"a failing test case, with no code changes, that describes the problem\" as requested by @derekprior on your pull request, but are unsure on how to do so. Would this need to be a feature spec to hit both the rack and rails code that creates the cookies? Have you looked into this?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @derekprior Hey I should be able to jump on this in a weekend or two. You can take a vanilla generated rails app and use the current version of clearance or 1.8.1 and the issue will occur. Its pretty much just turning on cookie domains. After that you'll see the cookie sent twice, given you are on 'www.example.com' you'll get a remember token for \"www.example.com\" and \"example.com\"\n. Forgot all about this. Was it merged?\n. \n",
    "nzgrover": "@coryodaniel We have encountered this issue as well and found that your branch fixed the issue. I'd like to create \"a failing test case, with no code changes, that describes the problem\" as requested by @derekprior on your pull request, but are unsure on how to do so. Would this need to be a feature spec to hit both the rack and rails code that creates the cookies? Have you looked into this?\n. ",
    "MSchmidt": "I've created a minimal example application to showcase the issue: https://github.com/MSchmidt/clearance-cookie-example\nHope this helps.. Seems like this was closed but not merged? Not sure. Maybe @derekprior knows. Clearance 1.15.1 has same issue though.\n. I've posted a reproduction sample app to #616. Hope this helps.. Thanks for looking at this and sorry for the half baked description. I'll try to explain this a little better.\nI'm setting return_to on the server to force a specific redirect after sign in.\nruby\nclass SessionsController < Clearance::SessionsController\n  def new\n    session['return_to'] = params[:return_to]\n    super\n  end\nend\nAt some places on the website I have sign in buttons with links like this: /account/sign_in? return_to=/raffles#raffle-form. So users don't end up on their account pages after sign in (which is the default for regular sign ins). The redirect itself works fine, but the #raffle-form gets lost. It is stored in session['return_to']  correctly though.. ",
    "dholdren": "for anyone still following this issue, I put up a PR here: https://github.com/thoughtbot/clearance/pull/767. I now have a fix here: https://github.com/thoughtbot/clearance/pull/767. good point, I didn't think about that when I did this. I guess there's no existing spec that tests that behaviour?\nI'll try to get that working and add a spec.. I added a spec (token_expiration_spec.rb) and removed the cookie setting from Session#sign_in and restored it in RackSession#call so it's still set only once per request, but is set on every request.\n. (a few of the travis jobs need to be restarted). are you able to take another look at this?. Can someone restart the build?. @mjankowski looks like you're the current maintainer?\nI've rebased this, fixed the spec issues and resolved all the Hound violations. @mjankowski have you had a chance to review?. why not just comment on #767 with a suggestion to rebase and address whatever concerns you had?. ",
    "rtymchyk": "A little insane that this issue is still open and PRs have not been driven forward. Here is a hack to get it working based on the PRs put up by @coryodaniel and @dholdren:\n```ruby\nClearance::Session.class_eval do\n   def sign_in(user, &block)\n    @current_user = user\n    status = run_sign_in_stack\nif status.success?\n  # MODIFIED CODE START\n  # ORIGINAL: cookies[remember_token_cookie] = user && user.remember_token\n  cookies[remember_token_cookie] = cookie_value.merge(value: user && user.remember_token)\n  # MODIFIED CODE END\nelse\n  @current_user = nil\nend\n\nif block_given?\n  block.call(status)\nend\n\nend\ndef sign_out\n    if signed_in?\n      current_user.reset_remember_token!\n    end\n@current_user = nil\n# MODIFIED CODE START\n# ORIGINAL: cookies.delete remember_token_cookie\nif Clearance.configuration.cookie_domain.present?\n  cookies.delete remember_token_cookie, domain: Clearance.configuration.cookie_domain\nelse\n  cookies.delete remember_token_cookie\nend\n# MODIFIED CODE END\n\nend\nend\n```. This is surfacing in frustrating ways, such as both cookies not being cleared on logout. Is there any hope for this PR?. @mjankowski Yes, I believe your changes will fix the issue of duplicate cookies being written! But unfortunately it does not address the piece necessary to properly delete those cookies on sign out. I suppose the mixture of our changes would actually fix all issues here.\nI'll be working on some specs during free time.. This merge ensures that we are maintaining the custom domain configuration that may have been passed when the user logs in. Without this merge, sign_in and add_cookie_to_headers end up creating 2 different cookies, one with the custom domain, and one without.. The API states that when you want to delete a cookie with a custom domain, you must pass that same domain option to it, otherwise it's a NOOP.. That's a good point, I'll investigate.. ",
    "zernie": "Here's the relevant commit: https://github.com/rails/rails/commit/a1ced8b52ce60d0634e65aa36cb89f015f9f543d\n\ndo not instantiate a param parser middleware\nwe don't actually need a param parser middleware instance since the\nrequest object will take care of parsing parameters for us.  For now,\nwe'll just configure the parameter parsers on the request in this class.\n. \n",
    "drale2k": "I am having the same issue with Rails 5 beta 2 and Clearance 1.12.1\n/Users/drale2k/.rvm/gems/ruby-2.2.4/gems/actionpack-5.0.0.beta2/lib/action_dispatch/middleware/stack.rb:108:in \"assert_index\": No such middleware to insert after: ActionDispatch::ParamsParser\n. Hi @derekprior. Because of this post i thought it was fixed\n\nI have merged the middelware position change. I'm slowly working through Rails 5 issues and hope to have something working for folks to test soon.\n\nThe issue seems to be fixed in the dp-rails5-deprecations branch but i will continue implementing clearance in my project later and see if there are other issues left (i guess there are since you're saying it does not support Rails 5 yet)\n. ",
    "srt32": "I am working on a Rails 5 API app and the workaround in https://github.com/thoughtbot/clearance/issues/619#issuecomment-166772517 got me around the first error I saw but when I went to /sign_in I got just a white screen (the html page was empty). I imagine it has something to do with missing middleware (as opposed to it being Rails 5) since it's an API only app. Anyone else using an API app with clearance run into this issue? Thanks!. ",
    "kamal-github": "Thanks! @derekprior \n. ",
    "magikid": ":+1:  I like having the commands there in the README so that I can copy/paste them with ease.  What do you think @derekprior?\n. User#authenticate would also need to be updated in order to make it to the #authenticated? method.\n. When you say you want to disable the flash message, do you mean that you want to replace it with your own message or remove the flash altogether?\nIf you want to replace the message, you can set your own in the I18n file in your application.\nIf you'd like to remove the flash completely, I'd suggest writing your before_action method that checks the user is signed in. \n. I don't think this is a good solution.  One of the reasons that the encrypt method is there is so that you can swap BCrypt out for a different password strategy.\n. That's a good point @theharq.  I guess I should have read the comments a little better.\nBecause it's private api, I think a simple fix would be to just change the encrypt method name to something like bcrypt_encrypt (and changing it in the few spots that call encrypt).  Do you think that would be a decent solution?\n. @acpk I believe the solution is to rename the encrypt method like this PR does. \n. I believe the main reason behind that suggestion is so that if the gem's routes and URL design are changed, your website's URL design won't be affected when you update the gem.\n. I think this looks good.\n. As far as I can tell, the only problem with zero-padded files is that if you have two identical files one with zero-padded file modes and one without, they will have different SHAs.\nI don't think this is worth rewriting the whole repo for.. I like including some code to make it easy to get started. \nWhat about moving the header div into a partial and adding a little blurb at installation to include it in your application.html.erb?\n. Are you using the default routes provided by Clearance or have you added the routes to your own config/routes.rb file?\n. How were you thinking of handling it?. @Ralphkay would you mind closing this issue since the problem has been resolved?. I think the preferred way for modifying that behavior is to override the SessionsController. That would give you much finer control over the behavior on failed login. Check out Overriding Clearance for more details . Could you change this line and the next to Insert (instead of Inserts)?\n. Sorry to seem pedantic but could you please also change Creates to Create on this line and the next?\n. Since password_reset_params could return nil, would calling @user.update_password(nil) result in a user's password being set to nil?. ",
    "estelleccl": "Hi @derekprior, I'm a web developer bootcamp mentor. Majority of my students are new developers and clearance is the first gem they will be using.\nI know it seem like a list of things they supposed to do but as for them everything is new. \nSo I was wondering, having the commands there in the README so that they can understand the steps with ease and also good for beginner as well.\n. @derekprior, you are right, it looks much better in a paragraph instead of the bulleted list. I have made the changes. Let me know if it is ok.\n. @magikid thanks. :) Have made the changes.\n. OK. done :) It is my pleasure.\n. ",
    "okliv": "I have, looks like, successfully implemented clearance plugin for sequel:\n```ruby\nmodule Sequel\n  module Plugins\n    module Clearance\n  def self.apply(model, opts = {})\n\n    # disable unused methods, i don't like this part but...\n    %i(validates before_validation before_create).each do |m|\n      model.send(:define_singleton_method, m) { |*args| }\n    end\n\n    model.send(:include, ::Clearance::User)\n  end\n\n  module ClassMethods\n\n    def find_by_normalized_email(email)\n      find(email: normalize_email(email))\n    end\n\n    def find_by_id_and_confirmation_token(id, token)\n      find(id: id, confirmation_token: token)\n    end\n\n  end\n\n  module InstanceMethods\n\n    def encrypted_password_will_change!\n      will_change_column(:encrypted_password)\n    end\n\n    def validate\n      super\n      unless email_optional?\n        validates_not_null :email\n        validates_unique :email\n        validates_format EmailValidator.regexp, :email\n      end\n\n      validates_presence :password unless skip_password_validation?\n    end\n\n    def before_validation\n      normalize_email\n      super\n    end\n\n    def before_create\n      generate_remember_token\n      super\n    end\n\n    private\n\n    def skip_password_validation?\n      password_optional? ||\n          (encrypted_password.present? && !column_changed?(:encrypted_password))\n    end\n\n  end\n\nend\n\nend\nend\n```\nto use it, save it as lib/sequel/plugins/clearance.rb\nand use it for yours User (or any) model like usual sequel plugin (instead of Clearance::User inclusion)\nruby\nclass User < Sequel::Model\n   plugin :clearance\n   # instead of \n   # include Clearance::User\nend\nnote: this is only a 'proof of concept' solution, not a complete/tested one. at least because you still need to make migrations (db changes) manually (existing migration predictably will fail with sequel model). ",
    "Copywright": "Thanks @okliv! \nYears later, ran into the same issue :). Not sure if this is due to my edit:\n>> BUNDLE_GEMFILE=/Users/herbertjoseph/Webdev/open_source/clearance/gemfiles/rails50.gemfile bundle exec rake\nrake aborted!\nNoMethodError: undefined methodlast_comment' for #\n/Users/herbertjoseph/.rvm/gems/ruby-2.3.0/gems/rspec-core-3.5.0.beta1/lib/rspec/core/rake_task.rb:91:in define'\n/Users/herbertjoseph/.rvm/gems/ruby-2.3.0/gems/rspec-core-3.5.0.beta1/lib/rspec/core/rake_task.rb:71:ininitialize'\n/Users/herbertjoseph/Webdev/open_source/clearance/Rakefile:14:in new'\n/Users/herbertjoseph/Webdev/open_source/clearance/Rakefile:14:in'\n/Users/herbertjoseph/.rvm/gems/ruby-2.3.0/bin/ruby_executable_hooks:15:in eval'\n/Users/herbertjoseph/.rvm/gems/ruby-2.3.0/bin/ruby_executable_hooks:15:in`\n. @derekprior I understand, I'll do just that and make a gem abstraction\n. ",
    "blakeperdue": "Still not able to get this working. Anyone have any ideas? \n. I tried completely disabling all my settings in Clearance.rb but still seeing the same issue.\n. If anyone else comes across this, here's what was going on:\nI imported the users tablet from our old Rails app that used devise. So, the remember_token column was empty for all users. \nClearance will not successfully keep you logged in if there is not a remember_token value stored for the user. \n. ",
    "janjiss": "There is an option of just doing the dry run of encryption if the condition fails. Meaning that in terms of time comparison of encrypted string with Password.new(\"encrypted_string\") == \"password\" is roughly the same as doing Password.create(\"password\")\nHere are some benchmarks to prove it:\n``` ruby\nn = 1000\nBenchmark.bm do |x|\n  x.report { n.times { BCrypt::Password.create(\"Hello\") } }\n  x.report { n.times { BCrypt::Password.new(\"$2a$10$fELdjGQGJU23naA9lon9FO8jPlrFiDwFcyU2BcnEtg9NfTzfEhmVW\") == \"Hello\" } }\nend\n```\nResult:\nuser     system      total        real\n  65.270000   0.150000  65.420000 ( 65.590176)\n  65.800000   0.130000  65.930000 ( 66.031897)\nSo what I am getting at here is that it might be good to have authenticated method that looks like this:\nruby\ndef authenticated?(password)\n  if encrypted_password.present?\n    ::BCrypt::Password.new(encrypted_password) == password\n  else\n    ::BCrypt::Password.create(password)\n    false\n  end\nend\nIn any case encryption is happening on the same input and that should yield same result in terms of time. Please note that I am not a security expert and my assumptions might not be correct. :)\n. ",
    "dakotalightning": "Thanks :)\n. ^ \nI've expreince the same thing, after the status.success? check during the session::sign_in the cookie isn't being set. I've checked current_user after the redirect, and it is nil. My assumption is that before_action :require_login fails even if sign_in is a success. \nhttps://github.com/thoughtbot/clearance/blob/master/lib/clearance/authentication.rb#L94\nI hope that helps.\nI'm using a basic config.\n```ruby\nClearance.configure do |config|\nconfig.routes = false\n  config.mailer_sender = 'noreply@site.com'\n  config.redirect_url = '/dashboard'\n  config.cookie_expiration = lambda { |cookies| 2.weeks.from_now.utc }\n  config.secure_cookie = true\n  config.rotate_csrf_on_sign_in = true\nend\n``. I can confirm bothrake middleware` and I am not modifying the domain.\nHere is my SessionsController.\n```ruby\nclass SessionsController < Clearance::SessionsController\nlayout \"minimal\"\ndef create\n    @user = authenticate(params)\nsign_in(@user) do |status|\n  if status.success?\n    redirect_back_or url_after_create\n  else\n    flash.now.notice = status.failure_message\n    render template: \"sessions/new\", status: :unauthorized\n  end\nend\n\nend\nprivate\ndef url_after_destroy\n    root_path\n  end\ndef url_after_create\n    dashboard_root_path\n  end\nend\n```\nI can also confirm it fails on ruby 2.5.3 and rails 5.2.2\nHere are my clearance specs that fail if it helps.\nrspec ./spec/features/clearance/user_signs_out_spec.rb:5 # User signs out sign in and out\nrspec ./spec/features/clearance/visitor_signs_in_spec.rb:5 # Visitor signs in with valid email and password\nrspec ./spec/features/clearance/visitor_signs_in_spec.rb:12 # Visitor signs in with valid mixed-case email and password \nrspec ./spec/features/clearance/visitor_signs_up_spec.rb:22 # Visitor signs up with valid email and password\nrspec ./spec/features/clearance/visitor_updates_password_spec.rb:5 # Visitor updates password with valid password\nrspec ./spec/features/clearance/visitor_updates_password_spec.rb:12 # Visitor updates password signs in with new password. ",
    "petermumford": "Hi @derekprior, I was meant to say I've reported a bug on Rails and they seem to be aware of it already: rails/rails#24035\nI hope this helps you?\n. Yes I am and thank you.\n. ",
    "jrochkind": "clearance 1.12.1, paperclip 4.2.4. \nI see there's a slightly newer clearance, I'll try upgrading... made no difference on clearance 1.13.0. (The slightly old paperclip is required by one of my dependencies). \nI might be able to get away without config.user_model = User since it's the default, but it seems bad if you can't use another class name that also includes paperclip, yes?\n. A manual:\nextend Paperclip::ClassMethods\nIn my User class also solves the problem. But this seems a bad workaround, that could have other unforeseen consequences (double-extending of the class methods in some cases?) and may be using not meant to be public Paperclip API.  It doesn't seem a good solution. \n. Okay, what's the best way to provide a minimal reproduction? Zipped up Rails app?\nI will provide the minimal reproduction with a class named something other than User, non-default, to make it clear why it matters. \n. Okay, in trying to make a repro, I seem to have solved it by putting gem 'paperclip' in my Gemfile before gem 'clearance'. \nOddly, in a very simple minimal reproduction this is not neccesary.  It's got something to do with some of my other dependencies, perhaps react-rails, although that doesn't make a lot of sense either, removing react-rails from my Gemfile also solved the problem. \nAnd I can't figure out why Gemfile order would matter -- all the Gem requires should happen before any initialization, and manually adding a require 'paperclip' didn't fix things. \nSo it doesn't make a lot of sense. But re-ordering my Gemfile to put paperclip at the top seems to solve things, crossing fingers. \n. Anyway, okay, I guess that's that. Makes not a lot of sense, but that seems to have solved it. Thanks for your quick response. Guess this closed issue can maybe help someone else who runs into it and tries searching issues.\n. I'm actually finding it a bit confusing to even let the user change their password without re-entered old password confirmation!\n. thanks! \n. Ah, encrypted_password_changed? might make a lot of sense and make things transparent. \nI've been tripped up to this in my own code, not sure the 'right' way to change a password in your own code in Clearance, if there are ways that violate Clearance's contract or not. My own code wasn't tripping the validation, so I dove into Clearance's own code, and learned about update_password and  password_changing, which made me wonder: \"Does Clearance require that you only ever change the password with update_password\", but then I noticed that Clearance's own controller did not do so -- and indeed did not trip the validation. \nIf there's a way to make it transparent Just Work, that would be great -- otherwise it needs some docs on 'right' ways to change a password with Clearance. \n. Would it make sense to add controller specs making sure the built-in controllers are succesfully enforcing the built-in presence-validator, as i believe they were not before this change? \n. Will there be any backwards compat problems with people perhaps using Rails mass assignment to set 'password' to the empty string, trusting that it will be ignored entirely?  Say an HTML password input field in a form, that resultantly gets ignored if you leave it blank. \n. ",
    "thiagoa": "@derekprior I agree, changing the sign in process is generally a better idea. I was a bit conservative with this kind of change because I did not know whether it was desired, so I did this as an opt-in. Also, it would be a bit of a breaking change.\nThis kind of change would have to go into a major version, right? I like your implementation idea, but with the following changes:\n1. The User#authenticate method would always return a SignInUser object, unless the user can not be found in the database. SignInUser would be a SimpleDelegator to a user \u2013 it would store the incoming password param and would respond to a signed_in? method, which would verify the password validity. This would guarantee the sign in guards to always receive a user object if the user email exists.\n2. DefaultSignInGuard would call current_user.signed_in? to decide on the response: SuccessStatus or FailureStatus.\n3. If a SignInUser gets past the sign in guards with an invalid password, Clearance::Session would throw an exception, which would point out for an implementation error.\nWhat do you think?\n. @derekprior I forgot to say, given this change the User#authenticate method name would probably make no sense anymore. We could change this to something else.\n. @imtayadeway I've had this same error with my build, looks like it was already on master.\n. @imtayadeway Yep, sorry for the out of the blue intervention. Actually, I saw a notification and thought my comment had something to add :)\n. ",
    "abunashir": "Custom_token is the name of the cookie. By adding =.+ I wanted to make sure custom_token is being added as a key (\"custom_token=[token]\") in the header.\nExisting spec was not testing the cookie_name configuration. I've updated the spec to make sure it checks cookie_name is being added to the header properly.\nNote: I've edited this comment.\n. I just updated the commit to make the test less confusing :)\nClearance.configuration.cookie_name=\"custom_cookie_name\" instead of custom_token\n. It looks like a bug to me; There was no existing test to check if the generator was including the Clearance::User correctly or not.\nI've submitted a pull request; It includes the necessary test to check the generator is inserting the content correctly, this should also fix this issue.\nThanks.\n. The first build was passing on all version but Rails 5.0.0\nWhy:\nTest helper provide_existing_user_class  using a template that inherits from ActiveRecord::Base all the time. In Rails 5.0 it should have created the User Class that inherits from  ApplicationRecord but it was not, and that was causing the suite to fail for version 5.0.\nSolution:\nI've added helper method versionize_template which can be used to get a version specific template when necessary. It will look for the template in the version-specific subdirectory.\nAny suggestion?\n. Cool, I'm trying to manage some time to contribute every day, so If there is anything I can do to help, please let me know.\n. There was a details discussion regarding this change, but let me quote a part from that PR\n\nThe password reset token is included in the URL emailed to users who request a password reset. When the user clicks the link, they are brought to the password reset form. If instead of completing the form the user clicks a link to another HTTPS resource that may be in the site navigation, then the password reset token will be leaked to that external site via HTTP referer (sic).\n\nYou can follow the details - PR #707 \nI do not exactly know your use case scenario, but I am trying to understand the problem. The first thing came into my mind is when we have a unique token that can retrieve that particular user then why we would need to pass the user_id as params?\nBut if that's the customization you need then you can easily override that action as described here. @derekprior I was going through the implementation for the password reset feature, and couple of things came in my mind. The first one is adding the user_id in the password reset link. I don't have a very good reason why not to use it but I was considering\n\nIt's the only place we are exposing internal user_id that we used to store that specific user\nIt might give a rough estimation about the user base for an application (how? Maybe create a new account then try to reset the password and there is the last id )\n\nAnd the another one is related to the token,  I completely agree with you, the possibility for a duplicated token is virtually zero. And we are also removing each confirmation_token as soon as a user resets their password, So I wouldn't worry about it, but if that make us feel better then sure we can do that too :). This stackoverflow thread might be helpful.\nI am not totally sure if we need to consider those factor or not, but if that's the case we can do something similar to\n\n\nGenerate a unique confirmation_token (I'm happy with the existing way it is, but just in case we want to be 100% sure and can accept the debt of performing couple of database query to verify it's uniqueness)\n\n\nChange the Password Reset Link structure to /password/edit?token=[token] or /passwords/[token]/edit and use the token to identify the user.\n\n\nBased on the url structure, we can adjust the edit / update action.\n\n\nThanks for taking the time, Please let me know your thoughts, and if it's desirable, then I would be more than happy to put those together in a PR.\nInspiration:\n\nDevise Implementaiton\nDevise's token generation\n. @eostrom, @gduquesnay: I have created a PR with your suggestion and that should fix the issue, but in the meantime, you can also override the password controller with the following code to fix the issue\n\n```ruby\nclass PasswordsController < Clearance::PasswordsController\n  private\ndef find_user_by_id_and_confirmation_token\n    user_param = Clearance.configuration.user_id_parameter\n    token = params[:token] || session[:password_reset_token]\nClearance.configuration.user_model.\n  find_by_id_and_confirmation_token params[user_param], token.to_s\n\nend\nend\n``. Hi @jjb, Unless you override the password controller or it's an earlier rails version then the password reset should use thedeliver_later` - passwords_controller.rb#L60 - reset mail source.\nBut for the actual mail devliery it would also be dependent on the adapter, for exmample the default inline adapter will  execute any job immediately. Thanks!. we are testing cookie_name configuration, but this was setting up cookie_domain configuration.\n. ",
    "ledermann": "@derekprior Are there any plans to release 2.0? I would like to use the fixed flashes, but it seems they are stuck in the (stale?) 2.0 branch.... ",
    "bdewater": "I think updating once per day might not be precise enough to determine whether a session was recently active or not. How about writing an update if the last_seen_at field is > 1 minute ago? Or 5?\n. > Conditionally updating based on \"last_seen_at\" means that on each request you are adding one SELECT query as well as a potential UPDATE query.\nI am not sure I understand where that additional SELECT would come from - I assumed last_seen_at is a column on a remember_token row that you're already querying for every request, so that leaves only a potential UPDATE?\n. Tracking last_seen_at once per day would not provide enough information for the smart device and IoT use cases mentioned in this issue IMO. I'd very much like precision down to the minute in the following cases:\n- I've used RandomService today and I just discovered that my device was stolen, did the attacker use my account? (perhaps I've forgotten to lock the screen)\n- I've uploaded new firmware on SmartDeviceX, did it successfully apply the update and reconnect to the server?\nPerhaps it could be configurable with a lambda like cookie_expiration currently is for those having performance concerns: have it return true if the field should be updated.\n. Agree, avoid MD5 for any new code and use SHA256 instead. \nI'm wondering why this PR is only using signed messages and not encrypted and signed ones. An example of the latter is JSON Web Tokens (https://jwt.io/) that can take JSON Web Encryption data. Their usecases are similar to this one.\n. ",
    "Ronak5": "Mutli device login is want in our modern era of smart devices is must to have feature.\nClearance can internally handle it using another model which should consists of :-\n- user_id\n- remember_token\n- device_type\n- device_token\nwhen i am logged in from android & web , want to logout from web then only that required would be archived.So remember_token for web wont work & give unauthorized \n. @mike-burns , we can pass new param at the time of login,its the device type like android , iOS or web.Can prove usefull when we want to send push notifications.\nExample like when update is using android app, we have to send push notification to iOS(if logged in) only to maintain consistency of data.And when update is done from web , we have to send push notification to both android & iOS.\n. @mike-burns it can sort if you pass different device-token something unique to browser, like combination for browser & ip address\n. ",
    "codener": "Thanks, great!\n. ",
    "kcville": "I found a way to do it by only overriding\nPasswordsController#find_user_for_update\nAfter I get the user record I can set the password_confirmation field before returning it\n. ",
    "robinvdvleuten": "Is there still any effort to get this into Clearance?. ",
    "sonalkr132": "This line: https://github.com/rubygems/rubygems.org/blob/master/lib/clearance_backdoor.rb#L9\n. It was coming from doorkeeper. I had just one line of stack trace:\nDEPRECATION WARNING: before_filter is deprecated and will be removed in Rails 5.1. Use before_action instead. (called from call at /home/user/rubygems.org/lib/clearance_backdoor.rb:10)\nSorry, I couldn't tell. Had to put caller right in ActiveSupport::Deprecation to find out.\nThank you for your time, anyway. :blue_heart: \n. Found another one here.\nRuby\ndef password_reset_params\n    if params.has_key? :user\n      ActiveSupport::Deprecation.warn %{Since locales functionality was added, accessing params[:user] is no longer supported.}\n      params[:user][:password]\n    else\n      params[:password_reset][:password]  <- here\n    end\n  end\nIt gets called from Clearance::PasswordsController#update. Would you be accepting PR for this?\nI think find_user_for_create could use a fix like b8a51add395c3374c54d4e47c0f013f786edff8b and password_reset_params can use strong param. Also, can this depreciation be removed? \n. I would suggest that session should be reset on login as well. Consider following test case:\n```Ruby\nsetup do\n  ActionController::Base.allow_forgery_protection = true\n  @user = create(:user, handle: \"bob\", password: \"lovesunicorns\")\nend\ntest \"authenticity token is reset on authentication\" do\n    get sign_in_path\n    guest_csrf = request.session[:_csrf_token]\n# bob signs in\npost session_path(\n  session: { who: \"bob\", password: \"lovesunicorns\" },\n  authenticity_token: request.session[:_csrf_token]\n)\n\n# this will pass (consider a scenrio where bob uses a public computer where attacker\n# has got a valid csrf token from sign up/sign in page)\npatch \"/profile\", user: { handle: \"bobistheworst\"}, authenticity_token: guest_csrf\nassert_equal \"bobistheworst\", @user.handle\n\n# this will fail\nassert_raise ActionController::InvalidAuthenticityToken do\n  patch \"/profile\", user: { handle: \"alice\" }, authenticity_token: guest_csrf\nend\n\nend\n```\nHere is devise implementation and test, and sorcery implementation for protection against the same.  . Hi guys, I wish could provide satisfactory explanation to your queries like a security expert but sadly I can't. Hopefully @derekprior will forgive my repetitive arguments when I quote sources.\n\nThe risk vector is that somebody would get a CSRF token from a public computer, trick Bob into using that exact computer, and then trick Bob into submitting a form on another site which has that CSRF token embedded?\n\nYes. I understand it is benign. I guess it is one half of session fixation attack.  This blog describes the scope as:\n\nThe attack can only be exploited if the attacker can set the target session, either by subdomain cookies (similar to described here) or by fixation over the same Wi-Fi network. If the user knows the CSRF token, cross-site forgery requests can be made. More information can be found here.. > What value is the CSRF token that isn't coupled with an authenticated user session?\n\nI apologize that in my mail to Derek I started my description with logout when login/authentication step is more important. In my defense, thats how it was report to us and at that moment I had a very basic understanding of CSRF protection or session management. That's not to say I am an expert now :sweat_smile:\nIf your question had been What value is the CSRF token in authenticated session that isn't coupled with a guest session? I would say, if csrf_token is reset on authentication, attacker trying a session fixation will only have control over session id and hence won't be able to forge requests.\n\n\nThe browser session (for instance, the length of the session cookie).\nThe period of time the user is signed in on the website.\nMy interpretation is that it is the former, rather than the latter\n\n\nOWASP page I used to quote that csrf token should be unqiue per user session describes csrf generation using Synchronizer (CSRF) Tokens as:\n\nIn general, developers need only generate this token once for the current session. After initial generation of this token, the value is stored in the session and is utilized for each subsequent request until the session expires.\n\nUnfortunately they didn't explicitly mention when the token is generated, however if you read further below whether they describe Double Submit Cookie as alternative, it describes the same as:\n\nWhen a user authenticates to a site, the site should generate a (cryptographically strong) pseudorandom value and set it as a cookie on the user's machine separate from the session id.\n\nI would say they mean authenticated user session while describing Synchronizer (CSRF) Tokens approach as well. Also, it describes CSRF in context of authenticated user not browser session:\n\nCross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. . This looks good :+1: Thanks @derekprior!. > I'm not even sure what sessions#new would look like for JSON? \n\nI am not looking for implementation of json format, I am only hoping that my app doesn't crash when an unsupported format is requested. I tried Clearance.configure { |config|  config.routes = false } and constraints format: :html { <clearance routes> }, however, it doesn't seem to work. App still ends up requesting json format and crash.\nRight now, clearance only has html templates. IMHO, for every other format it should return 404.. ",
    "tadp": "Steps to reproduce:\n1. add gem 'attr_encrypted' to the Gemfile (notice the underscore)\n2. add \n   include Clearance::User\n       extend AttrEncrypted\n       attr_encrypted :token to your user.rb\n3. user.update(token: 'test') (as above)\nNotice this error:\nArgumentError: wrong number of arguments (given 2, expected 1)\nfrom /Users/USER/.rvm/gems/ruby-2.3.1/gems/clearance-1.14.1/lib/clearance/password_strategies/bcrypt.rb:29:in `encrypt'\n. Thanks for tackling this.\nI noticed this PR has no assignees but is in need of review. Maybe @derekprior can assign someone?\n. @ACPK I like the renaming that @theharq suggested and that @we138 implemented in the latest commit.\n_ is commonly used in other languages to imply a private method and it is unlikely to be exposed by other gems\nOne thing I do see that this PR needs is a test to prevent this sort of thing from happening again by someone accidentally renaming the funny looking method back.\nThanks @we138 for doing this! WDYT about:\n- [x] adding this drop-in test to your PR that tests the method naming. It can be placed in rspec spec/password_strategies/bcrypt_spec.rb:72. I tried it out on your branch and it works:\n```\n  describe \"#_encrypt\" do\n    it \"reserves #encrypt to prevent name conflicts with other gems\" do\n      model_instance = fake_model_with_bcrypt_strategy\n  expect(model_instance.respond_to?(:encrypt, true)).to eq(false)\nend\n\nit \"responds to #_encrypt\" do\n  model_instance = fake_model_with_bcrypt_strategy\n\n  expect(model_instance.respond_to?(:_encrypt, true)).to eq(true)\nend\n\nit \"ensures that #_encrypt is a private method as its name implies\" do\n  model_instance = fake_model_with_bcrypt_strategy\n\n  expect(model_instance.respond_to?(:_encrypt)).to eq(false)\nend\n\nend\n```\n- [ ] Multiline commit message that explains the issue squashed into a single commit. This would make this really easy to revert or track down later.\nI think with those two things this would be good for @derekprior to review.\n. @we138 I think this is great. This PR is following the contributing guidelines well. However, I did not check off as completed \"multiline commit message\" in my previous comment because the commit message is still one line.\nMaybe on the second line of the commit message it can say the WHY and HOW of the change?  It fixes incompatibility how?  It may be easy for us to see how it does now, but if someone does a git blame on the project months from now there is not much context on what is going on.\nHere is the thoughtbot styleguide on this. A short explaination should be fine.\n. Yeah sounds great.  Thanks @derekprior!! \ud83d\udcaf \nAnd @we138 for the first pass, @theharq for bringing it up and the eyes of @magikid, @mackuba @ACPK.\n. ",
    "we138": "@derekprior ok, I remove inline conditional, but I'm curious why you are not using them?\nps\nmy question not for flame, I really wonder.\n. @derekprior thanx, it is reasonable. By the way, I was remove inline conditional from my pr.\n. hey @derekprior! I was changed pull request :muscle:\n. @magikid Hi Chris, you absolutely right, I didn't noticed it. What do you think, how can fix it issue?\n. @theharq @magikid  hi guys, I have been renamed encrypt methods in whole strategies and updated my pr\n. @tadp yo Tad, your task is done!\n. ",
    "theharq": "Hello! and thank you for doing this first attempt to fix this method name collision. \ud83d\udc9a \nMaybe I'm missing something but the method encrypt is not part of the public api of the module.\nAs the documentation says:\n\n# You can supply your own password strategy by implementing a module that\n  # responds to the proper interface methods. Once this module is configured as\n  # your password strategy, Clearance will mix it into your Clearance User\n  # class. Thus, your module can access any methods or attributes on User.\n  #\n  # Password strategies need to respond to authenticated?(password) and\n  # password=(new_password). For an example of how to implement these methods,\n  # see {Clearance::PasswordStrategies::BCrypt}.\nhttps://github.com/theharq/clearance/blob/master/lib/clearance/password_strategies.rb\n\nSo in our custom module as long we respond to authenticated?(password) and password=(new_password) and set this module in the configuration block.\nClearance.configure do |config|\n  config.password_strategy = Clearance::PasswordStrategies::Custom\nend\nWe could swap the default PasswordStrategies::BCrypt\nThis change may not be necessary for the other modules because all clearance-provided password strategies other than BCrypt have been deprecated.\nMaybe we could update the fake_model_with_password_strategy.rb to include the encrypt method so we make sure all the tests pass.. but I don't think the maintainers will want this.\nMaybe there is another option to add a failing test for this edge case.\nThank you again, for taking the time to propose a solution \ud83d\udc4d \n. @magikid yeah that will be a good solution having a strategy_encrypt or encrypt_password method will do the trick, but still is up to the project maintainers and their plans for clearance 2.0\n. ",
    "vasinov": "@derekprior, yes, some dependencies are transitive and are not used in a gem directly. Those can be marked as false positives. Do you think there is still value in continuous security monitoring for non-transitive dependencies in this gem?\n. ",
    "ianagne": "Hi @zachahn.  I don't work at Thoughtbot, but I just ran into this as well.  You are correct that the deprecation of controller tests is the source of these errors.\nThe generators in Rails 5 create controller tests that inherit from ActionDispatch::IntegrationTest instead of ActionController:TestCase.  In essence, your application no longer has any controller tests.  All \"controller\" tests generated by your application are integration tests.\nThis was done because the Rails team was able to considerably speed up integration tests, as explained by DHH here.  If you want to know how they did it, Eileen Uchitelle gave an awesome talk explaining the process.\nIf you'd like your controller-scoped tests to follow the Rails 5 convention and inherit from ActionDispatch::IntegrationTest, you should use the Clearance::Backdoor middleware for easy sign-in.\nIf you'd like to use true controller tests and inherit from ActionController::TestCase, you need to manually switch them over.  Then, the controller sign_in helpers should work as expected.  If you choose this option, be aware that ActionController::TestCase is slated to be extracted from Rails into a gem in Rails 5.1.\n. ",
    "rodrigo-puente": "Hi @ianagne. I had the same problem as @zachahn, and I tried to follow your solution using Clearance, but I'm still getting undefined method 'sign_in'. I'm new to testing and I'm using Minitest, which doesn't seem like the standard testing framework here.\nBy any chance did integrated Clearance testing helpers with Minitest? If so, could you share an example please, as I've been googling many many hours by now and couldn't find any documentation with Clearance and Minitest.\n. ",
    "zachahn": "In my test/test_helper.rb file, I wrote this following code.\nruby\nclass ActionDispatch::IntegrationTest\n  def manual_sign_in_as(user)\n    post session_url, params: {\n      session: {\n        email: user.email,\n        password: user.password\n      }\n    }\n  end\nend\nThis lets me do the following in my tests\nruby\nclass PostsControllerTest < ActionDispatch::IntegrationTest\n  test \"user visits index page while logged in\"\n    user = User.create!(email: \"example@example.com\", password: \"letmein\")\n    manual_sign_in_as(user)\n    get links_url\n  end\nend\nHowever, I just tried setting up what @ianagne suggested and it seems to work.\nRails 5 subclasses controller tests from ActionDispatch::IntegrationTest by default, so I only had to follow the instructions on the readme that was linked.\nMy tests can now read like the following\nruby\nclass PostsControllerTest < ActionDispatch::IntegrationTest\n  test \"user visits index page while logged in\"\n    user = User.create!(email: \"example@example.com\", password: \"letmein\")\n    get links_url(as: user)\n    # and\n    post links_url(as: user), params: { post: { title: \"hi\" } }\n  end\nend\nAs @ianagne mentioned, his option should be faster. Thanks for pointing me in that direction! I originally thought backdoor wasn't working, either.\n. ",
    "Mrjaco12": "Thanks for the explanation and links @derekprior. I think I agree with you about the approach. So we can close this issue. It might be a good idea to document the intentions a bit somewhere cuz I hunted through a few issues but I must have skipped over the right one to look at.\n. ",
    "wenweih": "@ACPK user.authenticated?(password)\nwe can see it in the lib/clearance/user.rb#L137. ",
    "jessmartin": "I have the same question. Surprised there's not a better way to do this.\nFor me, I'd like to track every sign-in in our analytics platform.\nI'm also interested in tracking sign ups, sign outs, and password changes.. Ok, I found a way to accomplish this @jrochkind. It's not a one-liner by any means.\nRather than overriding sign_in in ApplicationController, override the SessionsController and use an after_action filter.\nHere's some rough code:\nCreate the file app/controllers/sessions_controller.rb:\n```ruby\nclass SessionsController < Clearance::SessionsController\n  after_action :track_sign_in, only: :create\nprivate\ndef track_sign_in\n    analytics.track(:sign_in_create)\n  end\nend\n```\nAlso, you have to update routes.rb to point to this new controller:\nruby\n  resource :session, controller: \"sessions\", only: [:create]\nYou're right that someone could still hit request.env[:clearance].sign_in directly and bypass this, but for me, every sign-in takes place from a web form, so I'm cool with it.\nHope that's helpful.. ",
    "exalted": "Hi @derekprior I listened to the podcast episodes back then, and just finished reading the blog post about this issue. It was a nice conversation, and I am glad you came up with a solution. \ud83d\udc4f \nI wonder whether you considered a CSRF-like approach, in which when the user requests to reset their password, the website issues a request validation token and store it in user's cookies. When the user clicks on the link contained in the e-mail, however, the password reset form submit action is accepted  only if validation token is valid (or maybe they don't even get to see the form page).\nSince the validation token would only be in user's browser, I think it wouldn't be possible for a malicious party to exploit possibly leaking Referer.\nWhat do you think?\n. Not really, no. However, in my own usage, I have ever noticed anybody use the reset mechanism to open the web page from a different device/browser.\nI think it is reasonably safe to assume that the actual password reset will happen in a minute or so (you usually need the password right now, else why are you asking for a reset anyway?):\n1. ask for a reset\n2. click on the link in the email\n3. a new tab in the same default (same?) browser will open (even possibly the exact same page could reload)\n4. fill the form and submit\nI think we both agree that \"security by obscurity\" (that what most password resets do) is the real problem here. So a same-origin-like validation token could help a bunch.\n. ~~Not entirely sure, but I have a feeling that Django does check for the token.~~ I may have misread all that, just ignore, please. \ud83d\ude1e \n. > I have asked for a reset and ultimately completed the reset on my phone, or vice versa. I have also requested a reset from Chrome (a browser I occasionally use for Flash), and completed the reset in Safari (my main browser I have my email open in all the time).\nHaha, that is very interesting, and definitely is something that has never occurred to me.\n\nThose may be edge-casey enough though. This isn't a bad solution, I'm just not sure of its impact usability wise.\n\nFair enough. The solution that I was suggesting has the upside of being \"secure\" at the cost of edge-casey bad UX issues.\nThe currently implemented solution of invalidating reset token as soon as the user clicks on the link has the upside of being cautious not using the same token twice; but the downside is, although very unlikely, the first person to hit that URL may not be the user themselves. Essentially it's \"first-come, first-served\". That's bad UX as well.\nI don't have any data to backup however which of the edge cases are more unlikely to happen. \ud83d\ude1e \n\nHere's another idea: why not asking for the user's email address again in the final password reset page? If the link with the reset token is leaked, chances are, only the user knows their own email, and not the third-parties.\n. ",
    "o-hudson": "A downside of this approach is that the token persists in the session if the user doesn't complete the form and navigates to other pages on the site. If the session is then stolen (perhaps through cross-site scripting) the password can be reset by a malicious user. \n. ",
    "sairam": "I was listening to the older podcast and thought of a different solution for the same problem.\nThis approach may solve it without usage of session or data store.\nkey = hash(global_secret, password_token)\nhttp://example.com/reset?token=#{password-reset-token}&key=#{key} # url to send\n\nuser who clicks the link will come to the website. \nthe key is validated against the token\nif valid, user is redirected to url without key param\nif key invalid or not present, remove the token from the url.\n\nthis way usage of session can be avoided, but requires a global_secret to be part of the configuration/environment variable.\n. ",
    "hhff": "Oh!  It may be a collision with a different lib in that case...  I'll keep looking!  Thanks @derekprior !\n. ",
    "jvanbaarsen": "Yay! I figured out what the problem is.\nI forgot to add remember_token: <%= Clearance::Token.new %> to the users.yml fixture file.\nSo for the next person to run into this issue, a fixture should at least look like this:\nyml\nuser:\n  email: user@example.com\n  encrypted_password: <%= BCrypt::Password.create('password') %>\n  remember_token: <%= Clearance::Token.new %>\n. @joshuajansen / @michiels I think I found the solution. Instead of putting it in an initialiser you should put it in config/application.rb, then wrap it inside a config.to_prepare do block.\nThis is my config/application.rb:\n```ruby\nmodule MyApp\n  class Application < Rails::Application\n    config.load_defaults 5.1\nconfig.to_prepare do\n  Clearance::PasswordsController.layout \"login\"\n  Clearance::SessionsController.layout \"login\"\n  Clearance::UsersController.layout \"login\"\nend\n\nend\nend\n```\nI created a PR to update the README.. ",
    "joshuajansen": "Ah right, that makes sense. Not sure why this is not being picked up for my app then. Closing this, thanks!. @michiels I'm not 100% sure anymore, but I think it had something to do with the way I set up template inheritance. If I remember correctly, this was solved by not prepending the view path when the current controller is a Clearance controller.. ",
    "michiels": "@joshuajansen Nice to see you here ;) Did you figure this out? Can't make it work myself.. @joshuajansen ah ok thanks! Not doing template inheritance or view path modifying here. So maybe it's something else.. ",
    "danielnolan": "FWIW the build seems to be failing on ruby version 1.9.3. It looks like capybara has addressable as a dependency, but it allows any version >= 0. The most recent version of addressable requires ruby 2.0 or greater. Locking addressable to version < 2.5 should fix this. I can open a separate pull request for that if you would like me to. . ",
    "josephan": "The issue seems to be with rails\n. Oh I didn't know that. Then everything must be working as intended. Thank you.. ",
    "molfar": "I also notices this trouble. And I think it is irremissible.. ",
    "raidiant": "Looks like the issue was with Honeybadger not picking up some of the methods within Clearance, why I don't know... But removing Honeybadger and running bundle fixed the issue.. ",
    "coreyward": "That makes a handful of assumptions that, though right for many apps, are not right for the types I frequently build. Suffice to say that 99.5% of traffic to this site will be from non-users who never have an opportunity to share so much as an email address. Clearance sessions are only for admin users, of whom there will be maybe 5 total.\nWhile I can't say that Clearance should/should-not do any particular thing for me, I do think that a Rails-integrated authentication library would be wise to not make using the options Rails provides out-of-the-box a chore. The force_ssl feature (in controllers) is not an anti-pattern.\nThe reason against upgrading all requests is that it has a measureable impact on page-rendering times, especially when a dozen or more assets across 3\u20135 hosts have to get upgraded to SSL. I like free performance wherever I can get it. . Thank you for the additional information, @derekprior. \nI certainly agree that it's a smart default, and that a majority of applications benefit from it. For those applications that don't, judicious use of force_ssl with secure cookies (fairly easy to do if you configure the session store appropriately) works well. \nI appreciate you calling out the solution using Clearance::BaseController. . ",
    "lollar": "I don't believe that this is an issue with Clearance but instead with one of the dependencies of Rails.  You can reference this issue filed on the Rails repo: https://github.com/rails/rails/issues/27229\nThe end solution was to specify Thor to an older version. Try adding this to your Gemfile: gem 'thor', '~> 0.19.1'\nHopefully that works for you!. ",
    "Ralphkay": "Thanks for the help. I realized it had to do with some compatibility in the versions. I uninstalled everything and used the rails-installer and everything works perfectly fine. Thanks again for the help.. ",
    "davidferril": "thanks @magikid, that worked out well!. ",
    "mbaird": "I think this is needed to get the full benefit of customising views/routes. It's trivial with generate routes/views to move everything into an Admin:: namespace, but with the controller using absolute paths for views, I'd need to override controller actions to completely isolate Clearance within the admin namespace.\nThis looks like a pretty clean solution, nice added benefit with i18n too.\nEdit: For now I've managed to solve it with prepend_view_path\nruby\nclass Admin::SessionsController < Clearance::SessionsController\n  prepend_view_path 'app/views/admin'\nend\nStill think this could be useful for those without this exact use case.. ",
    "gduquesnay": "This is happening on our app also.  Waiting on this issue to be fixed so we can update clearance.  I'm assuming \ntoken = params[:token] || session[:password_reset_token]\nmentioned above is something to be changed inside clearance code.  Is there a workaround that we can use in the meantime while we wait for this to get patched by clearance?\n. ",
    "dwightwatson": "It doesn't appear to work in request specs. I've got the Clearance::BackDoor middleware registered in my test.rb environment file, and I've required clearance/rspec in my rails_helper.rb file. The helpers work fine in controller tests, but the methods aren't available for request specs - including sign_in and sign_in_as.\n```rb\n  1) Agreements user access GET #new returns a successful response\n     Failure/Error: before { sign_in_as user }\n NoMethodError:\n   undefined method `sign_in_as' for #<RSpec::ExampleGroups::Agreements::UserAccess::GETNew:0x00007fcd67f60158>\n # ./spec/requests/agreements_spec.rb:28:in `block (3 levels) in <top (required)>'\n\n```\nHope this provides enough information, happy to provide more if helpful. Thanks for your response.\n. Hey @derekprior any update on this one? You didn't re-open the issue so I assume you might not have seen the earlier comment.\nIt might be worth considering adding a backdoor for system specs as well now they're available in Rails 5.1 and RSpec 3.7.. Ah, of course. Thank you for your help!. ",
    "joshmfrankel": "Same issue here @IzumiSy. Were you able to solve it? \n/home/josh/.asdf/installs/ruby/2.4.2/lib/ruby/gems/2.4.0/gems/thread_safe-0.3.5/lib/thread_safe/cache.rb:155: warning: constant ::Fixnum is deprecated\n/home/josh/.asdf/installs/ruby/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-4.2.7.1/lib/active_support/core_ext/numeric/conversions.rb:121: warning: constant ::Fixnum is deprecated\n/home/josh/.asdf/installs/ruby/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-4.2.7.1/lib/active_support/core_ext/numeric/conversions.rb:121: warning: constant ::Bignum is deprecated\nrake aborted!\nSystemStackError: stack level too deep\n/home/josh/Development/projects/forks/clearance/spec/dummy/application.rb:50:in `initialize!'\n/home/josh/Development/projects/forks/clearance/spec/dummy/application.rb:45:in `require_environment!'\n/home/josh/.asdf/installs/ruby/2.4.2/bin/bundle:23:in `load'\n/home/josh/.asdf/installs/ruby/2.4.2/bin/bundle:23:in `<main>'\nTasks: TOP => dummy:db:reset => dummy:environment. > @joshmfrankel I finally managed to solve that with Ruby 2.4.1. That might be the latest Ruby version which works with clearance,.\nThanks! I'll give that a shot\nUpdate Tried 2.4.1, no go as produces the same issue. ",
    "IzumiSy": "@joshmfrankel I finally managed to solve that with Ruby 2.4.1. That might be the latest Ruby version which works with clearance.. Clearance supports Ruby 1.9.3 which does not support %i style syntax. Ignore this.. Clearance supports Ruby 1.9.3 which does not support %i style syntax. Ignore this.. ",
    "Spone": "FYI this other PR seems to target the same goal: #776 . Please let me know if I can help with this somehow. I'd like to use Clearance with Rails 5.1. ",
    "joemasilotti": "This is a simple change to the README. CI failed for one of the platforms because bundler couldn't load. Can we kick this off again?. ",
    "oleg-kiviljov": "Also interested in how to implement this. I have same use case as AlphaB.. ",
    "carlesjove": "I tried this too and couldn't found a way that didn't imply duplicating and overriding a lot of code, so got to the conclusion that this is discouraged by design.\nWith Clearance as it is, I've found the best way is to simply use the same model and add an admin? method, be it with a boolean or with a more complex logic behind it. Then, simply create an admin namespace and its own set of routes within a Clearance constraint:\nruby\nconstraints Clearance::Constraints::SignedIn.new { |user| user.admin? } do\n  get \"/admin\", to: \"admin#index\"\n  namespace :admin do\n    resources :posts\n  end\nend\nand finally group some login for all admin controllers in a concern:\n```ruby\nmodule AdminPanel\n  extend ActiveSupport::Concern\nincluded do\n    layout \"admin\"\n    before_action :require_login\n  end\nprivate\n# This is the only method to override\n  def require_login\n    deny_access(\"Only admins here\") unless signed_in? && current_user.admin?\n  end\nend\nclass Admin::Posts < ApplicationController\n  include AdminPanel\nend\n```\nNow only admins will be able to access /admin routes, while all others will get 500 errors, and also has the benefit that you'll be able to use the application as a regular user would, which I think is great after all.\nSo well, not really a solution to the specific issue but, again, I have the feeling that they've made this decision by design. Of course, I might be wrong :-) \n. ",
    "ChrisCPO": "@justrudd I'm seeing a similar issue. However locally, I have not tried on Semaphore. \nWhat is happening for me is 1st route visited in specs works then when a link is clicked that also requires authentication they are redirected to SessionController#new. I put a binding.pry in the require_login method and check for a current user. On 2nd request the current_user is missing.\n\"chromedriver-helper\", \"~> 1.2.0\"\n\"selenium-webdriver\", \"~> 3.13.0\"\n\"rails\", \"5.2.1\"\n\"clearance\", \"~> 1.16.1\"\n. ",
    "emptyflask": "@Spone Clearance works with Rails 5.1 / 5.2. This PR only affects the Clearance test suite.. Merge this PR, please. I'd like to be able to use a column other than \"id\" for my user routes.\nEdit: Actually, this doesn't quite do what I was looking for -- I'd actually like to name the user_id_parameter. @derekprior I'm sure you're busy with other stuff, but would you mind taking a look at this PR? (assuming you're still the primary maintainer of Clearance). Sorry for all the commits. I can squash if necessary.. ",
    "garshyn": "Here's what it is useful for:\nhttps://github.com/thoughtbot/clearance-i18n/pull/25/commits/b7066468dd5b4257c5d4c4d250fe6b8c8cbe5bd9. ",
    "rezart": "Thinking it could be related to #753\ncc @rogercampos were you able to make progress on it?\n. This issue is still persisting for a number of my users (ie. they are logged in as themselves and after some time they notice to be logged in as someone else). I have disabled cacheing completely from Cloudflare and have confirmed that all my server responses are returning 'cache-control: no-cache' or 'cache-control: max-age=0, private, must-revalidate'. Is there something else I may be missing?\n. ",
    "lethan": "$ rails s\n=> Booting Puma\n=> Rails 5.2.0 application starting in development \n=> Run `rails server -h` for more startup options\nExiting\nTraceback (most recent call last):\n    104: from bin/rails:3:in `<main>'\n    103: from bin/rails:3:in `load'\n    102: from /Users/lethan/Development/Homepages/clearance_test/bin/spring:15:in `<top (required)>'\n    101: from /Users/lethan/Development/Homepages/clearance_test/bin/spring:15:in `require'\n    100: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/spring-2.0.2/lib/spring/binstub.rb:31:in `<top (required)>'\n     99: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/spring-2.0.2/lib/spring/binstub.rb:31:in `load'\n     98: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/spring-2.0.2/bin/spring:49:in `<top (required)>'\n     97: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/spring-2.0.2/lib/spring/client.rb:30:in `run'\n     96: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/spring-2.0.2/lib/spring/client/command.rb:7:in `call'\n     95: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/spring-2.0.2/lib/spring/client/rails.rb:28:in `call'\n     94: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/spring-2.0.2/lib/spring/client/rails.rb:28:in `load'\n     93: from /Users/lethan/Development/Homepages/clearance_test/bin/rails:9:in `<top (required)>'\n     92: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:283:in `require'\n     91: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:249:in `load_dependency'\n     90: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:283:in `block in require'\n     89: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:29:in `require'\n     88: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:20:in `require_with_bootsnap_lfi'\n     87: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/loaded_features_index.rb:65:in `register'\n     86: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:21:in `block in require_with_bootsnap_lfi'\n     85: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:21:in `require'\n     84: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/commands.rb:18:in `<main>'\n     83: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/command.rb:46:in `invoke'\n     82: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/command/base.rb:65:in `perform'\n     81: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/thor-0.20.0/lib/thor.rb:387:in `dispatch'\n     80: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/thor-0.20.0/lib/thor/invocation.rb:126:in `invoke_command'\n     79: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/thor-0.20.0/lib/thor/command.rb:27:in `run'\n     78: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/commands/server/server_command.rb:142:in `perform'\n     77: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/commands/server/server_command.rb:142:in `tap'\n     76: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/commands/server/server_command.rb:147:in `block in perform'\n     75: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/commands/server/server_command.rb:51:in `start'\n     74: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/commands/server/server_command.rb:89:in `log_to_stdout'\n     73: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/rack-2.0.5/lib/rack/server.rb:354:in `wrapped_app'\n     72: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/commands/server/server_command.rb:27:in `app'\n     71: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/rack-2.0.5/lib/rack/server.rb:219:in `app'\n     70: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/rack-2.0.5/lib/rack/server.rb:319:in `build_app_and_options_from_config'\n     69: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/rack-2.0.5/lib/rack/builder.rb:40:in `parse_file'\n     68: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/rack-2.0.5/lib/rack/builder.rb:49:in `new_from_string'\n     67: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/rack-2.0.5/lib/rack/builder.rb:49:in `eval'\n     66: from config.ru:in `<main>'\n     65: from config.ru:in `new'\n     64: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/rack-2.0.5/lib/rack/builder.rb:55:in `initialize'\n     63: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/rack-2.0.5/lib/rack/builder.rb:55:in `instance_eval'\n     62: from config.ru:3:in `block in <main>'\n     61: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:44:in `require_relative'\n     60: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:283:in `require'\n     59: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:249:in `load_dependency'\n     58: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:283:in `block in require'\n     57: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:29:in `require'\n     56: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:20:in `require_with_bootsnap_lfi'\n     55: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/loaded_features_index.rb:65:in `register'\n     54: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:21:in `block in require_with_bootsnap_lfi'\n     53: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:21:in `require'\n     52: from /Users/lethan/Development/Homepages/clearance_test/config/environment.rb:5:in `<main>'\n     51: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/application.rb:361:in `initialize!'\n     50: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/initializable.rb:60:in `run_initializers'\n     49: from /Users/lethan/.rvm/rubies/ruby-2.5.1/lib/ruby/2.5.0/tsort.rb:205:in `tsort_each'\n     48: from /Users/lethan/.rvm/rubies/ruby-2.5.1/lib/ruby/2.5.0/tsort.rb:226:in `tsort_each'\n     47: from /Users/lethan/.rvm/rubies/ruby-2.5.1/lib/ruby/2.5.0/tsort.rb:347:in `each_strongly_connected_component'\n     46: from /Users/lethan/.rvm/rubies/ruby-2.5.1/lib/ruby/2.5.0/tsort.rb:347:in `call'\n     45: from /Users/lethan/.rvm/rubies/ruby-2.5.1/lib/ruby/2.5.0/tsort.rb:347:in `each'\n     44: from /Users/lethan/.rvm/rubies/ruby-2.5.1/lib/ruby/2.5.0/tsort.rb:349:in `block in each_strongly_connected_component'\n     43: from /Users/lethan/.rvm/rubies/ruby-2.5.1/lib/ruby/2.5.0/tsort.rb:415:in `each_strongly_connected_component_from'\n     42: from /Users/lethan/.rvm/rubies/ruby-2.5.1/lib/ruby/2.5.0/tsort.rb:415:in `call'\n     41: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/initializable.rb:50:in `tsort_each_child'\n     40: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/initializable.rb:50:in `each'\n     39: from /Users/lethan/.rvm/rubies/ruby-2.5.1/lib/ruby/2.5.0/tsort.rb:421:in `block in each_strongly_connected_component_from'\n     38: from /Users/lethan/.rvm/rubies/ruby-2.5.1/lib/ruby/2.5.0/tsort.rb:431:in `each_strongly_connected_component_from'\n     37: from /Users/lethan/.rvm/rubies/ruby-2.5.1/lib/ruby/2.5.0/tsort.rb:422:in `block (2 levels) in each_strongly_connected_component_from'\n     36: from /Users/lethan/.rvm/rubies/ruby-2.5.1/lib/ruby/2.5.0/tsort.rb:350:in `block (2 levels) in each_strongly_connected_component'\n     35: from /Users/lethan/.rvm/rubies/ruby-2.5.1/lib/ruby/2.5.0/tsort.rb:228:in `block in tsort_each'\n     34: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/initializable.rb:61:in `block in run_initializers'\n     33: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/initializable.rb:32:in `run'\n     32: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/initializable.rb:32:in `instance_exec'\n     31: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/engine.rb:613:in `block in <class:Engine>'\n     30: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/engine.rb:613:in `each'\n     29: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/engine.rb:614:in `block (2 levels) in <class:Engine>'\n     28: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/engine.rb:656:in `load_config_initializer'\n     27: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/notifications.rb:170:in `instrument'\n     26: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/railties-5.2.0/lib/rails/engine.rb:657:in `block in load_config_initializer'\n     25: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:277:in `load'\n     24: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:249:in `load_dependency'\n     23: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:277:in `block in load'\n     22: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:50:in `load'\n     21: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:50:in `load'\n     20: from /Users/lethan/Development/Homepages/clearance_test/config/initializers/clearance.rb:1:in `<main>'\n     19: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/clearance-1.16.1/lib/clearance/configuration.rb:202:in `configure'\n     18: from /Users/lethan/Development/Homepages/clearance_test/config/initializers/clearance.rb:4:in `block in <main>'\n     17: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:193:in `const_missing'\n     16: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/active_support.rb:43:in `load_missing_constant'\n     15: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:502:in `load_missing_constant'\n     14: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:348:in `require_or_load'\n     13: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:37:in `load_interlock'\n     12: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies/interlock.rb:13:in `loading'\n     11: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/concurrency/share_lock.rb:151:in `exclusive'\n     10: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies/interlock.rb:14:in `block in loading'\n      9: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:37:in `block in load_interlock'\n      8: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:365:in `block in require_or_load'\n      7: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:467:in `load_file'\n      6: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:653:in `new_constants_in'\n      5: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:468:in `block in load_file'\n      4: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:100:in `load'\n      3: from /Users/lethan/.rvm/gems/ruby-2.5.1/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:100:in `load'\n      2: from /Users/lethan/Development/Homepages/clearance_test/app/models/member.rb:1:in `<main>'\n      1: from /Users/lethan/Development/Homepages/clearance_test/app/models/member.rb:3:in `<class:Member>'\n/Users/lethan/.rvm/gems/ruby-2.5.1/gems/activerecord-5.2.0/lib/active_record/dynamic_matchers.rb:22:in `method_missing': undefined method `has_one_attached' for Member (call 'Member.connection' to establish a connection):Class (NoMethodError). It was a bug in Active Storage, that now has been fixed.. ",
    "airblade": "@lethan I'm getting this error with Rails 5.2.2.1 and Clearance 1.16.2.  Please could you link to the ActiveStorage commit that fixes this?. ",
    "chukitow": "@soniaprevost could you provide more information? Like Rails/Ruby version? \nI created a project from scratch using ruby-2.3.1 and rails 5.1.6 and I wasn't able to reproduce the issue that you are reporting.. ",
    "soniaprevost": "Hello @chukitow ! \nSorry for the so late answer and thanks for having a look at it.\nWe are using ruby-2.4.2 and rails 5.1.3.. Hello @mjankowski and @mrjonesbot !\nThis could be a very good line of inquiry.\nThank you very much for this insight, I'm going to look into it !\n. ",
    "mrjonesbot": "@soniaprevost I was experiencing the same behavior (current_user returning nil), until I realized I had included a separate authentication based gem in the same controller where I had included Clearance.\n```ruby\nmodule Admin\n  class ApplicationController < Administrate::ApplicationController\n    include Clearance::Controller\n    include LpTokenAuth::Controller\nbefore_action :require_login\n# before_action :authenticate_admin\n\n# def authenticate_admin\n#   # TODO Add authentication logic here.\n# end\n\n# Override this value to specify the number of elements to display at a time\n# on index pages. Defaults to 20.\n# def records_per_page\n#   params[:per_page] || 20\n# end\n\nend\nend\n```\nThis resulted in current_user being overridden and returning nil.\nBy removing LpTokenAuth::Controller, Clearance was able to successfully set current_user.\nThe context of my example is different, but hopefully validates checking any overlaps between gems.. ",
    "emilford": "Hi @monicao,\nDid you override the url_after_create method definition on the correct controller? Changing where the user is redirected to after signing up is handled in users_controller.rb, but you linked to the url_after_create method definition in sessions_controller.rb.\nOtherwise, redirect_back_or url_after_create looks correct. It will redirect to the url returned by url_after_create unless there is a return_to url set in the session.\nHope this helps.. Hi @monicao,\nAh, I see the issue. Clearance's default routes route sign in requests to clearance/sessions#create. In your sample app, you can see this if you run bundle exec rake routes.\nSo while you've created a SessionsController, and have correctly inherited from Clearance::SessionsController and overridden the def url_after_create method, the controller is never reached.\nIf you update your routes to override the sign in action to instead route to the SessionsController, your test passes and you have your desired behavior. resource :session, controller: \"sessions\", only: [:create]\nThis isn't entirely obvious from the documentation. I'm sure thoughtbot would welcome a PR that updates the documentation to clarify this for future users.. ",
    "monicao": "Hi @emilford,\nThanks for your response! \nOoops, I mistyped. I meant to say \"I am trying to override where the user is redirected after logging in.\"\nMy understanding is that if you define a method called url_after_create in the sessions_controller, it will change where the user is redirected after logging in.\nThis doesn't seem to work in version 1.16.1. \nPlease see this sample app and the sessions controller test case: https://github.com/monicao/clearance_test. ",
    "nipe0324": "Maybe It could not be possible and easy now. Because clearance authentication depends on Clearance.configuration.user_model set in here https://github.com/thoughtbot/clearance/blob/master/lib/clearance/configuration.rb#L108-L110\nAnd Clearance.configuration.user_model is used some places as below.\nhttps://github.com/thoughtbot/clearance/blob/master/lib/clearance/authentication.rb#L27-L31\nhttps://github.com/thoughtbot/clearance/blob/master/app/controllers/clearance/passwords_controller.rb#L87-L90\nhttps://github.com/thoughtbot/clearance/blob/master/app/controllers/clearance/users_controller.rb#L52-L56\nIf you want to use multiple user types, you should use devise.\n```ruby\nBuyer\nrails generate devise Buyer # create buyer model with devise\nauthenticate_buyer! # authenticate signed in as buyer?\ncurrent_buyer #=> Buyer instance or nil\nSeller\nrails generate devise Seller # create seller model with devise\nauthenticate_seller! # authenticate signed in as seller?\ncurrent_seller #=> Seller instance or nil\n```. ",
    "Immortalin": "Currently I am using User model with enums and additional columns for each additional role. I will consider this solved for now. Enums and additional columns are not perfect as it requires very tricky code to deal with relations. \nEnums is optional. You only need additional columns as keys. I am using enums for convenience.\nhttps://stackoverflow.com/questions/5294775/same-model-for-two-belongs-to-associations. ",
    "sidonath": "Hi @mjankowski! Are there any plans to build a new release with this change?\nI see the work on 2.0 is underway, any chance of rolling out 1.6.2 before that? This shouldn't affect backwards compatibility, right?. ",
    "mario10king": "I'm sorry I'm new to this. Can you expand on that? Do you mean writing yard doc for the user_model method?. ",
    "nickcharlton": "That's a great idea, and I'd love to see it!\nWe're currently unlikely to do something like that any time in the near future, but we'd love to see some one pick up that baton.. ",
    "navied": "@mjankowski thanks for the response. \nIn the process of trying to recreate the issue I believe I have honed in on the exact problem. In 1.16.1 when you explicitly set config.cookie_domain it did not effect the test environment but with 1.16.2 unless the cookie domain is set to \"example.com\" for the test env the follow_redirect! fails. \nYou can see it fail here: https://github.com/navied/clearance_test\nTo make it pass all you have to do is reduce the clearance version to 1.16.1.. ",
    "ignatiusreza": "btw, rubocop is complaining quite a lot even for existing codes.. so i'm a little bit confused as to which style/guideline to follow?. ",
    "lgrains": "def page_should_display_sign_in_error\n    page.body.should include(\n      I18n.t('flashes.failure_after_create', :sign_up_path => sign_up_path)\n    )\n  end\nis giving an error:  \n1) Visitor signs in tries with invalid email\n     Failure/Error: page.body.should include(\n     NoMethodError:\n       undefined method `should' for #String:0x007fa5301fad88\n. ",
    "jayroh": "If you're considering this class as something akin to a base class would a name like BaseStep be better. I see SignInStep and it comes across as a more specific, targeted use and not an inheritable class.\n. ",
    "houndci-bot": "Line is too long. [84/80]\n. Line is too long. [86/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [84/80]\n. Line is too long. [92/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [84/80]\n. Line is too long. [92/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Missing space after #.Line is too long. [119/80]\n. Missing space after #.Line is too long. [119/80]\n. Line is too long. [92/80]\n. Line is too long. [92/80]\n. Line is too long. [92/80]\n. Line is too long. [92/80]\n. Line is too long. [92/80]\n. Line is too long. [85/80]\n. Line is too long. [92/80]\n. Line is too long. [93/80]\n. Line is too long. [85/80]\n. Line is too long. [93/80]\n. Line is too long. [93/80]\n. Line is too long. [95/80]\n. Line is too long. [93/80]\n. Line is too long. [98/80]\n. Line is too long. [95/80]\n. Line is too long. [92/80]\n. Line is too long. [98/80]\n. Line is too long. [81/80]\n. Line is too long. [92/80]\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Line is too long. [81/80]\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Avoid using {...} for multi-line blocks.\n. Line is too long. [81/80]\n. Trailing whitespace detected.\n. Line is too long. [81/80]\n. Trailing whitespace detected.\n. Line is too long. [94/80]\n. Use 2 (not 3) spaces for indentation.\n. Line is too long. [88/80]\n. Line is too long. [81/80]\n. Line is too long. [94/80]\n. Use 2 (not 3) spaces for indentation.\n. Line is too long. [88/80]\n. Line is too long. [81/80]\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Align the parameters of a method call if they span more than one line.Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Align the parameters of a method call if they span more than one line.Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Align the parameters of a method call if they span more than one line.Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Align the parameters of a method call if they span more than one line.Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. unexpected token tIDENTIFIER\n. unexpected token tIDENTIFIERunexpected token tSTRING\n. unexpected token tIDENTIFIER\n. unexpected token tIDENTIFIER\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Line is too long. [102/80]Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Line is too long. [89/80]Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Align the parameters of a method call if they span more than one line.Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Line is too long. [82/80]Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Line is too long. [81/80]Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Align the parameters of a method call if they span more than one line.Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Align the parameters of a method call if they span more than one line.Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Align the parameters of a method call if they span more than one line.Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Align the parameters of a method call if they span more than one line.Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. unexpected token tIDENTIFIER\n. unexpected token tIDENTIFIERunexpected token tSTRING\n. unexpected token tIDENTIFIER\n. unexpected token tIDENTIFIER\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Line is too long. [102/80]Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Line is too long. [89/80]Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Align the parameters of a method call if they span more than one line.Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Line is too long. [82/80]Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Line is too long. [81/80]Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Unused block argument - signed_in_user. You can omit the argument if you don't care about it.\n. Unused block argument - signed_in_user. You can omit the argument if you don't care about it.\n. Line is too long. [94/80]\n. Line is too long. [88/80]\n. Line is too long. [81/80]\n. unexpected token tLSHFT\n. unexpected token tEQQ\n. unexpected token tRSHFT\n. unexpected token tLSHFT\n. unexpected token tEQQ\n. unexpected token tRSHFT\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Line is too long. [133/80]\n. Line is too long. [83/80]\n. Keep a blank line before and after protected.\n. Extra empty line detected at body end.\n. Redundant self detected.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Use the new Ruby 1.9 hash syntax.\n. Use the new Ruby 1.9 hash syntax.\n. Use the new Ruby 1.9 hash syntax.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Align the parameters of a method call if they span more than one line.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [82/80]Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer single-quoted strings when you don't need string interpolation or special symbols.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [89/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Unused method argument - args. If it's necessary, use _ or _args as an argument name to indicate that it won't be used. You can also write as before_validation(*) if you want the method to accept any arguments but don't care about them.\n. Unused method argument - args. If it's necessary, use _ or _args as an argument name to indicate that it won't be used. You can also write as before_create(*) if you want the method to accept any arguments but don't care about them.\n. Unused method argument - record. If it's necessary, use _ or _record as an argument name to indicate that it won't be used. You can also write as validate(*) if you want the method to accept any arguments but don't care about them.\n. Line is too long. [84/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Avoid using {...} for multi-line blocks.\n. Line is too long. [81/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Extra empty line detected at body beginning.\n. Redundant self detected.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [84/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [90/80]\n. Line is too long. [87/80]\n. Line is too long. [87/80]\n. Line is too long. [84/80]\n. Line is too long. [85/80]\n. Line is too long. [87/80]\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Line is too long. [90/80]\n. Line is too long. [86/80]\n. Line is too long. [86/80]\n. Extra empty line detected at body end.\n. Line is too long. [85/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Place the . on the previous line, together with the method call receiver.\n. Place the . on the previous line, together with the method call receiver.\n. Align the operands of an expression in an assignment spanning multiple lines.\n. Align the operands of an expression in an assignment spanning multiple lines.\n. Pass &:deactivate! as an argument to each instead of a block.\n. Align the operands of an expression in an assignment spanning multiple lines.\n. Align the operands of an expression in an assignment spanning multiple lines.\n. Align the operands of an expression in an assignment spanning multiple lines.\n. Align the operands of an expression in an assignment spanning multiple lines.\n. Line is too long. [94/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [104/80]\n. Prefer detect over find.\n. Prefer detect over find.\n. Line is too long. [81/80]\n. Line is too long. [84/80]\n. Line is too long. [83/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [86/80]\n. Line is too long. [90/80]Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Space missing to the left of {.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Redundant self detected.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Align the parameters of a method call if they span more than one line.Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Align the parameters of a method call if they span more than one line.\n. Put a comma after the last parameter of a multiline method call.\n. Line is too long. [99/80]\n. Put a comma after the last parameter of a multiline method call.\n. Line is too long. [104/80]\n. Put a comma after the last parameter of a multiline method call.\n. Line is too long. [84/80]\n. Put a comma after the last parameter of a multiline method call.\n. Unused block argument - config. You can omit the argument if you don't care about it.\n. Expression at 20, 57 should be on its own line.\n. Line is too long. [81/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Trailing whitespace detected.\n. Trailing whitespace detected.\n. Inconsistent indentation detected.\n. Inconsistent indentation detected.\n. Inconsistent indentation detected.\n. Inconsistent indentation detected.\n. Inconsistent indentation detected.\n. Align the parameters of a method call if they span more than one line.\n. Redundant curly braces around a hash parameter.\n. Put a comma after the last parameter of a multiline method call.\n. Align the parameters of a method call if they span more than one line.\n. Put a comma after the last parameter of a multiline method call.\n. Remove debugger entry point byebug.\n. Extra empty line detected at method body end.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Space missing after comma.\n. Avoid using {...} for multi-line blocks.\n. Avoid using {...} for multi-line blocks.\n. Avoid using {...} for multi-line blocks.\n. Avoid using {...} for multi-line blocks.\n. Avoid using {...} for multi-line blocks.\n. Avoid using {...} for multi-line blocks.\n. Line is too long. [92/80]\n. Line is too long. [108/80]\n. Line is too long. [82/80]\n. Line is too long. [87/80]\n. Line is too long. [106/80]\n. Line is too long. [85/80]\n. Line is too long. [82/80]\n. Line is too long. [85/80]\n. Line is too long. [85/80]\n. Put a comma after the last item of a multiline hash.\n. Put a comma after the last item of a multiline hash.\n. Put a comma after the last item of a multiline hash.\n. Put a comma after the last item of a multiline hash.\n. Put a comma after the last item of a multiline hash.\n. Put a comma after the last item of a multiline hash.\n. Put a comma after the last item of a multiline hash.\n. Put a comma after the last item of a multiline hash.\n. Unused block argument - cookies. If it's necessary, use _ or _cookies as an argument name to indicate that it won't be used. Also consider using a proc without arguments instead of a lambda if you want it to accept any arguments but don't care about them.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Put a comma after the last item of a multiline hash.\n. Line is too long. [91/80]\n. Line is too long. [89/80]\n. Line is too long. [82/80]\n. Line is too long. [84/80]\n. Line is too long. [88/80]\n. Align the operands of an expression spanning multiple lines.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Align the parameters of a method call if they span more than one line.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Unnecessary spacing detected.\n. Line is too long. [85/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Surrounding space missing in default value assignment.\n. Surrounding space missing in default value assignment.\n. Surrounding space missing in default value assignment.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. unterminated string meets end of file\n(Using Ruby 2.3 parser; configure using TargetRubyVersion parameter, under AllCops)\n. Put a comma after the last parameter of a multiline method call.\n. Freeze mutable objects assigned to constants.\n. Trailing whitespace detected.\n. Put a comma after the last parameter of a multiline method call.\n. Put a comma after the last parameter of a multiline method call.\n. Put a comma after the last parameter of a multiline method call.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Remove debugger entry point binding.pry.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Put a comma after the last parameter of a multiline method call.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [96/80]\n. Line is too long. [96/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Put a comma after the last parameter of a multiline method call.\n. Put a comma after the last parameter of a multiline method call.\n. Put a comma after the last parameter of a multiline method call.\n. Put a comma after the last parameter of a multiline method call.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. unexpected token tLT\n(Using Ruby 2.3 parser; configure using TargetRubyVersion parameter, under AllCops)unterminated string meets end of file\n(Using Ruby 2.3 parser; configure using TargetRubyVersion parameter, under AllCops)\n. Put a comma after the last parameter of a multiline method call.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Convert if nested inside else to elsif.\n. Put a comma after the last parameter of a multiline method call.\n. Line is too long. [84/80]\n. Indent the right bracket the same as the first position after the preceding left parenthesis.\n. Use 2 spaces for indentation in an array, relative to the first position after the preceding left parenthesis.\n. Put a comma after the last parameter of a multiline method call.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Redundant curly braces around a hash parameter.\n. private (on line 20) does not make singleton methods private. Use private_class_method or private inside a class << self block instead.\n. unexpected token tCONSTANT\n(Using Ruby 2.3 parser; configure using TargetRubyVersion parameter, under AllCops)unterminated string meets end of file\n(Using Ruby 2.3 parser; configure using TargetRubyVersion parameter, under AllCops)\n. Put a comma after the last parameter of a multiline method call.\n. Indent the right bracket the same as the first position after the preceding left parenthesis.\n. Use 2 spaces for indentation in an array, relative to the first position after the preceding left parenthesis.\n. Put a comma after the last item of a multiline array.\n. Indent the right bracket the same as the first position after the preceding left parenthesis.\n. Use 2 spaces for indentation in an array, relative to the first position after the preceding left parenthesis.\n. Line is too long. [87/80]\n. Useless assignment to variable - encrypted_password.\n. Trailing whitespace detected.\n. Put a comma after the last parameter of a multiline method call.\n. Use 2 (not -5) spaces for indentation.\n. Align else with if.\n. end at 26, 10 is not aligned with if at 22, 17.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Line is too long. [94/80]. Prefer single-quoted strings when you don't need string interpolation or special symbols.. Prefer single-quoted strings when you don't need string interpolation or special symbols.. Prefer single-quoted strings when you don't need string interpolation or special symbols.. Prefer single-quoted strings when you don't need string interpolation or special symbols.. Prefer single-quoted strings when you don't need string interpolation or special symbols.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Surrounding space missing in default value assignment.. Surrounding space missing in default value assignment.. Surrounding space missing in default value assignment.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Surrounding space missing in default value assignment.. Surrounding space missing in default value assignment.. Surrounding space missing in default value assignment.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.Line is too long. [81/80]. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Line is too long. [81/80]. Put a comma after the last parameter of a multiline method call.. Use %i or %I for an array of symbols.Line is too long. [81/80]. Use %i or %I for an array of symbols.. Align the elements of a hash literal if they span more than one line.Use %i or %I for an array of symbols.. Trailing whitespace detected.. Line is too long. [124/80]. Trailing whitespace detected.. Space missing to the left of {.Space between { and | missing.Line is too long. [102/80]Space missing inside }.. Trailing whitespace detected.. Trailing whitespace detected.. Trailing whitespace detected.. Line is too long. [124/80]. Trailing whitespace detected.. Space missing to the left of {.Space between { and | missing.Line is too long. [102/80]Space missing inside }.. Trailing whitespace detected.. Trailing whitespace detected.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.Line is too long. [82/80]. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.Line is too long. [91/80]. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.Line is too long. [81/80]. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.Line is too long. [82/80]. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.Line is too long. [98/80]. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.Line is too long. [95/80]. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.Line is too long. [93/80]. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.Line is too long. [82/80]. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.Line is too long. [81/80]. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Use empty lines between method definitions.Line is too long. [88/80]. Put a comma after the last item of a multiline hash.. Extra empty line detected at block body end.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.Line is too long. [82/80]. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.Line is too long. [91/80]. Line is too long. [81/80]. Line is too long. [82/80]. Line is too long. [98/80]. Line is too long. [95/80]. Line is too long. [93/80]. Line is too long. [82/80]. Line is too long. [81/80]. Line is too long. [91/80]. Use safe navigation (&.) instead of checking if an object exists before calling the method.. Prefer Date or Time over DateTime.. Space missing to the left of {.Space between { and | missing.Space missing inside }.. Line is too long. [88/80]. Line is too long. [86/80]. Line is too long. [102/80]. Line is too long. [87/80]. Space missing to the left of {.Space between { and | missing.Line is too long. [107/80]Space missing inside }.. Space missing to the left of {.Space between { and | missing.Line is too long. [106/80]Space missing inside }.. Surrounding space missing for operator -.Line is too long. [95/80]. Space missing to the left of {.Space between { and | missing.Line is too long. [100/80]Space missing inside }.. Put a comma after the last parameter of a multiline method call.. Use safe navigation (&.) instead of checking if an object exists before calling the method.. Line is too long. [110/80]. Line is too long. [109/80]. Line is too long. [97/80]. Line is too long. [103/80]. Line is too long. [105/80]. Line is too long. [105/80]. Line is too long. [105/80]. Line is too long. [105/80]. Line is too long. [105/80]. Line is too long. [105/80]. Line is too long. [83/80]. Surrounding space missing in default value assignment.. Surrounding space missing in default value assignment.. Surrounding space missing in default value assignment.. Use %i or %I for an array of symbols.. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Line is too long. [82/80]. Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.. Metrics/LineLength: Line is too long. [93/80]. Lint/DuplicateMethods: Method Clearance::Configuration#parent_controller is defined at both lib/clearance/configuration.rb:96 and lib/clearance/configuration.rb:117.. Metrics/LineLength: Line is too long. [81/80]. Metrics/LineLength: Line is too long. [85/80]. Layout/TrailingWhitespace: Trailing whitespace detected.. Metrics/LineLength: Line is too long. [98/80]. Style/TrailingCommaInArguments: Put a comma after the last parameter of a multiline method call.. Lint/UselessAssignment: Useless assignment to variable - result.. Layout/TrailingWhitespace: Trailing whitespace detected.. Metrics/LineLength: Line is too long. [98/80]. Style/TrailingCommaInArguments: Put a comma after the last parameter of a multiline method call.. Lint/UselessAssignment: Useless assignment to variable - result.. Metrics/LineLength: Line is too long. [83/80]. Metrics/LineLength: Line is too long. [83/80]. Style/SymbolArray: Use %i or %I for an array of symbols.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Metrics/LineLength: Line is too long. [85/80]. Metrics/LineLength: Line is too long. [85/80]. Metrics/LineLength: Line is too long. [86/80]. Layout/EmptyLines: Extra blank line detected.. Metrics/LineLength: Line is too long. [89/80]. Metrics/LineLength: Line is too long. [89/80]. Metrics/LineLength: Line is too long. [89/80]. Metrics/LineLength: Line is too long. [91/80]. Metrics/LineLength: Line is too long. [89/80]. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Layout/CommentIndentation: Incorrect indentation detected (column 2 instead of 4).Layout/TrailingWhitespace: Trailing whitespace detected.. Layout/TrailingWhitespace: Trailing whitespace detected.Metrics/LineLength: Line is too long. [81/80]. Layout/CommentIndentation: Incorrect indentation detected (column 4 instead of 2).. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/TrailingCommaInArguments: Put a comma after the last parameter of a multiline method call.. Style/TrailingCommaInArguments: Put a comma after the last parameter of a multiline method call.. Style/SafeNavigation: Use safe navigation (&.) instead of checking if an object exists before calling the method.. Metrics/LineLength: Line is too long. [96/80]. Layout/MultilineOperationIndentation: Use 4 (not 3) spaces for indenting a condition in an if statement spanning multiple lines.Style/RedundantParentheses: Don't use parentheses around a method call.Metrics/LineLength: Line is too long. [92/80]. Layout/DotPosition: Place the . on the previous line, together with the method call receiver.Layout/MultilineMethodCallIndentation: Use 4 (not 2) spaces for indenting a condition in an if statement spanning multiple lines.. Layout/DotPosition: Place the . on the previous line, together with the method call receiver.Layout/MultilineMethodCallIndentation: Use 4 (not 2) spaces for indenting a condition in an if statement spanning multiple lines.. Layout/MultilineOperationIndentation: Use 4 (not 15) spaces for indenting a condition in an if statement spanning multiple lines.. Layout/DotPosition: Place the . on the previous line, together with the method call receiver.Layout/MultilineMethodCallIndentation: Use 2 (not 17) spaces for indenting an expression spanning multiple lines.. Layout/DotPosition: Place the . on the previous line, together with the method call receiver.Layout/MultilineMethodCallIndentation: Use 2 (not 17) spaces for indenting an expression spanning multiple lines.. Layout/DotPosition: Place the . on the previous line, together with the method call receiver.Layout/MultilineMethodCallIndentation: Use 2 (not 11) spaces for indenting an expression spanning multiple lines.. Layout/DotPosition: Place the . on the previous line, together with the method call receiver.Layout/MultilineMethodCallIndentation: Use 2 (not 11) spaces for indenting an expression spanning multiple lines.. Metrics/LineLength: Line is too long. [91/80]. Metrics/LineLength: Line is too long. [97/80]. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Layout/SpaceBeforeBlockBraces: Space missing to the left of {.. Style/DateTime: Prefer Date or Time over DateTime.. Metrics/LineLength: Line is too long. [88/80]. Metrics/LineLength: Line is too long. [86/80]. Metrics/LineLength: Line is too long. [102/80]. Metrics/LineLength: Line is too long. [87/80]. Metrics/LineLength: Line is too long. [110/80]. Metrics/LineLength: Line is too long. [109/80]. Metrics/LineLength: Line is too long. [97/80]. Metrics/LineLength: Line is too long. [103/80]. Metrics/LineLength: Line is too long. [124/80]. Metrics/LineLength: Line is too long. [105/80]. Metrics/LineLength: Line is too long. [124/80]. Metrics/LineLength: Line is too long. [105/80]. Style/TrailingCommaInArguments: Put a comma after the last parameter of a multiline method call.. Style/SafeNavigation: Use safe navigation (&.) instead of checking if an object exists before calling the method.. Style/TrailingCommaInArguments: Put a comma after the last parameter of a multiline method call.. Layout/DotPosition: Place the . on the previous line, together with the method call receiver.. Layout/DotPosition: Place the . on the previous line, together with the method call receiver.. Layout/DotPosition: Place the . on the previous line, together with the method call receiver.. Layout/DotPosition: Place the . on the previous line, together with the method call receiver.. Style/TrailingCommaInArguments: Put a comma after the last parameter of a multiline method call.. Layout/DotPosition: Place the . on the previous line, together with the method call receiver.. Layout/DotPosition: Place the . on the previous line, together with the method call receiver.. Layout/DotPosition: Place the . on the previous line, together with the method call receiver.. Layout/DotPosition: Place the . on the previous line, together with the method call receiver.. Layout/DotPosition: Place the . on the previous line, together with the method call receiver.. Layout/DotPosition: Place the . on the previous line, together with the method call receiver.. Metrics/LineLength: Line is too long. [89/80]. Metrics/LineLength: Line is too long. [89/80]. Metrics/LineLength: Line is too long. [91/80]. Metrics/LineLength: Line is too long. [91/80]. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/SymbolArray: Use %i or %I for an array of symbols.Metrics/LineLength: Line is too long. [88/80]. Style/SymbolArray: Use %i or %I for an array of symbols.. Style/SymbolArray: Use %i or %I for an array of symbols.. Style/SymbolArray: Use %i or %I for an array of symbols.. Style/SymbolArray: Use %i or %I for an array of symbols.Metrics/LineLength: Line is too long. [82/80]. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/TrailingCommaInArguments: Put a comma after the last parameter of a multiline method call.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Metrics/LineLength: Line is too long. [81/80]. Metrics/LineLength: Line is too long. [83/80]. Metrics/LineLength: Line is too long. [99/80]. Metrics/LineLength: Line is too long. [87/80]. Style/ExpandPathArguments: Use expand_path('templates', dir) instead of expand_path('../templates', FILE).. Style/RedundantBegin: Redundant begin block detected.. Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.. Naming/MemoizedInstanceVariableName: Memoized variable @user does not match method name find_user_by_password_reset_token. Use @find_user_by_password_reset_token instead.. ",
    "drapergeek": "What do you think about ensure_token_and_user?\nCurrently, none of these actions are really forbidden access so the name feels a bit weird.\n. ",
    "teoljungberg": "Could this be replaced by a call to super instead?\n. Right, good point.\n. This seems like a bug... I wonder if Hound would be pleased by:\nruby\nClearance.configuration.message_verifier.generate(\n  [\n    user.id,\n    # ....\n   ],\n)\n. ",
    "mwenger1": "Extra space between words is  false. ",
    "composerinteralia": "2.2 has been EOL for about 1 year now. Thoughts on bumping this to 2.3?. "
}