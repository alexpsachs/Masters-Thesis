{
    "SimonWaldherr": "that was fast ;-) thx\n. - the code is really great, more comments would be better, but it's good enough. \n- I connected the 'touchcancel' with the same code 'touchend' is used with, to prevent errors on special cases (e.g. notifications). I don't think it's necessary to make anything special in this cases.\n- a better mobile demo (with qr code) for a fast test would be great.  Also the inclusion in ratchet will bring more users ;-)\nMore data-attributes can't be wrong, but i like the clean code and don't think that jQuery will improve that.\nThat's for now, i will think about it and tell you more tomorrow.\n. you can combine both\n- if a user comes on mobile, just redirect to the mobile demo\n- else show a qr-code (on mobile projects i always search for a qr code to test it)\ntomorrow i will play a little bit with snap.js and PullToRefresh, but i don't think, that there will be any incompatibilities.\n. ",
    "jakiestfu": "Good fixes, thank you for taking the time, Simon!\nI have a few questions if you don't mind answering them.\n- Is the code legible to you, or is it confusing at any point?\n- What could 'touchcancel' be used for?\n- What do you feel could be better about this code to enhance adoption rate?\nI was thinking about including more data-attributes like data-snap-ignore, maybe the following:\n- data-snap-toggle-left\n- data-snap-toggle-right\n- data-snap-open-left\n- data-snap-open-right\n- data-snap-close\nAlso, I've been thinking about adding support for jQuery (for noobs), and possible building of additional styles for drawers, so at the end of the day, the user just needs to add the proper HTML. Thoughts?\n. Thank you very much. I was thinking about just redirecting users to the mobile version if they're mobile so that way they don't have to think about it. Appreciate your feedback@\n. Did you not see the lk k directly above the demo viewport that says view on iPhone? It opens it In its own window. I thi k I may redo the entire demo page though\n. I am going to redo the entire demo page, especially since this got a lot of exposure lately. I will close this issue when that is done, thanks!\n. Updated the demos!\n. The diff file looks a little muddled. I am actually gearing up to push more features and fixes to this anyways, so all you did was just initialize with the simpleStates object defaults?\n. Dope, thanks, I will include this in the release in the next couple hours!\n. I have a push I was going to make later this week, it has a few things added:\n- Full CSS3 Support for multiple browsers\n- Trimmed Code\n- destroy method (which I will probably use disable and enable now, I see the advantages of re-enabling.\nAlso, I haven't tested it yet, but I'm fairly certain I can disable elasticity altogether by entering 0 for resistance. If that does not work, I am going to create a disable elasticity option, and I will also provide some custom easing modes in an additional CSS file if people want to get creative.\nThanks for the push! I will use your code, but I will not merge with the repo. I will update you when it's live!\n. Actually, I might as well merge. Doy.\nEdit: Thanks for the kind words! I appreciate it! Check out some of my other repos, maybe you'll find them interesting as well!;)\n. Thanks! 81eb6fdbdf3326cb5039eacfda34add3c505a12c\n. Thanks for the heads up. I will also be doing CSS3 prefixes as well\n. Fixed: 57e94a2ebce58a9b90d4f93274f8cc1034149921\n. This is meant for touch devices. Did you intend to use it on a regular website?\n. @voodoo6 I'll look into it, thanks!\n. Silently fails in IE now (no IE support yet, though): 57e94a2ebce58a9b90d4f93274f8cc1034149921\n. Thanks! This is in the next release that will include various new features and better browser support. If you're looking to fix it for the time being, put this line of code after line 304 and it will disable that link issue.\njavascript\nutils.events.preventDefaultEvent(e);\nAs for styling the content area (50% black, etc), you can use your own CSS classes. For instance, when the left pane is open, a class is added to the body called snapjs-left or snapjs-right, giving you the ability to add any additional styles based on it's state;)\n. Fixed: 57e94a2ebce58a9b90d4f93274f8cc1034149921\n. Snap supports state information.\njavascript\nsnapper.state() // returns details information about the panes state\nFrom there, you can get the percentage that the pane is open, and apply CSS accordingly. I will test performance of this and if it's looking cool, I will write a demo for multiple animations. Going to push these in a couple hours\n. ``` javascript\nvar snapper = new Snap({\n    element: document.getElementById('content')\n}),\nleftDrawer = document.getElementById('left-drawer'),\napplyOtherCSS = function(){\n    var percentage = snapper.state().info.translation.percentage;\n    if(percentage<=100){\n        leftDrawer.style.opacity = percentage*0.01;\n    }\n};\nsnapper.on('drag', applyOtherCSS);\nsnapper.on('animating', applyOtherCSS);\nsnapper.on('animated', applyOtherCSS);\n```\nTake this code for example: Every time the pane moves, our function applyOtherCSS is fired.\nThat function retrieves the percentage that the pane is open, multiplies it by 0.01, and sets the left drawers opacity to that.\nThis works, but a fundamental attribute of Snap.js is flawed: Updating states. Currently, the state object that is returned from calling snapper.state() is updated sporadically throughout the script as opposed to being abstracted away. This not only makes snap.js larger, but makes it more annoying to update the state.\nBringing this all around, this animates beautifully, but when a user releases their finger and CSS3 takes the stage in terms of animating, I cannot update the state of the pane unless I were to query it's CSS data every X milliseconds.\nTechnically, what is flawed is snapper.on('animating', fn), so for the time being, until I can figure out a nicer solution, this idea will have to take backseat.\n. Will look into better way to handle this. Expect it in 2.0 possibly\n. I just pushed and included exposing as part of the API, that's probably the newest addition. Plus better browser support\n. Hello! Open as many issues as you'd like, good sir!\nThat is because that button is strictly an open button, but you can make a toggle button like this: https://github.com/jakiestfu/Snap.js#toggles\n. You're correct. Will look into this fix ASAP, thanks!\n. Fixed: 6b676e895cb7725f892da4c0295f1a8cbd78e90e\n. Will look into these, thanks!\n. Should be fixed. Let me know if you're still having problems!\n. The menu button is strictly an open button. Look into using a toggle button instead in the docs.\n. I actually did this, I just haven't pushed to the demo pages yet. This is what solved the problem: https://github.com/jakiestfu/Snap.js/blob/master/snap.js#L318\n. Er, that's on the demo already. You're still having these problems? The ratchet demo does not follow links...\n. Dope!\n. Nice, been thinking about this for a while now, thanks!\n. Really, the mouse support was mostly so people can demo the code on their computer. Though I feel mouse support is important, is it really necessary to support the mouse still if the device is touch capable?\n. I've thought about this and I've decided that supporting both touch and mouse events at the same time does not coincide with the nature of this script. If you provide some solid use cases where mouse support would be needed alongside touch support, we can reopen this issue.\n. This was a stupid error on my part. Shouldn't have pushed last night, thanks for the heads up! 09eb964a2ec47a2caa55b673e8fbe128e4b98b19\n. @Rias500 minPosition and maxPosition would best be used to change the width of your drawers. disable should do it's job, appropriately. I'll look into this fix and let you know\n. @teuneboon What do you mean disabling drag their entirely? Do you mean disabling the hyperextending drawer? I.E. your drawer width is 266px, you drag it out to 270px and there is resistance. Are you talking about having it stop completely at 266px?\n. @teuneboon Ah. Again, minPosition and maxPosition should be used to change the size of your drawers, not disable them. I will come out with a fix for your original issue and let you know when this is resolved. Should be a couple hours;)\n. Fixed! The demo reflects the latest version. 297b048a71fd2006973ad5845f2096952ccb318f\n. :+1: Thanks!\n. I see nothing wrong with that! Do you think there is a better way to check for that?\n. Fixed. Got rid of the single check for e because there is always an event object passed with event functions.\ne41e068cd0d468659957fd4a98f53d9cdb9accbb\nThanks!\n. @pgherveou Thanks, fixed in 1.7.1 fe2aed12221a7525e1eab6a424cf7b434b63d219\n. Good on ya! 21d6315eaba71f29a360c5d0c662fe20c78a0355\n. Thanks for taking the time to write this up, dude! I was going to make a push later today with a new public method called settings.\n``` javascript\nvar snapper = new Snap();\n// Later...\nsnapper.settings({\n    disable: 'right'\n});\n```\nThat way you can update more settings than just the disabled one. Thoughts?\n. Ah, that way it'd prevent adding listeners twice?\n. Oh, I understand what you're saying. I have that check on line 357 with settings.touchToDrag.\nI will update the repo in a couple hours with the new method, thanks!\n. Added in 1.7.0: e41e068cd0d468659957fd4a98f53d9cdb9accbb\nUsage:\njavascript\nsnapper.settings({\n    disable: 'right'\n});\nThis will change the settings and disable the right for you. To revert, use \njavascript\nsnapper.settings({\n    disable: 'none'\n});\n. Couldn't you do something like this? Or do they get replaced?\njavascript\nsnapper.on('drag', myFunc);\nsnapper.on('drag', anotherFunc);\nIf the drag function does get replaced, I want to keep the weight of this library down as much as possible because it's goal is rather small, (open the menu. that's it, hehe), so I don't want to bloat the library.\nWhat about doing something like this?\njavascript\nsnapper.on('drag', function(){\n    myFunc.call();\n    anotherFunc.call();\n});\nThoughts?\n. I think I am going to leave it the way it is for now, it's current state should allow you to do what you need to. You'd just need to check in your code if your view actually needs to be disposed, and if it has been, you can do the following:\n``` javascript\nvar view = {\n    dispose: function(e){\n        if(needsToDispose){\n            snapper.off('animated');\n            // Dispose shiet\n        }\n    }\n};\nsnapper.on('animated', view.dispose);\n``\n. Why would you have the content element's display set toinline`?\nCheck out Ratchet's template: http://jakiestfu.github.io/Snap.js/demo/apps/ratchet/template.html\n. I understand your issue now, though I have not tested it. Ignore my Ratchet comment, it doesn't apply. When you said inline styles, I assumed you meant inline display, but you mean actual inline styles.\nWhat browsers are you using to reproduce the error?\n. Hmm, I cannot recreate it. If you look at the ratchet template, the content area has a child toolbar whos position is set to fixed. Then when you set the content's transform to all 0's, it is still fixed and not absolute...\n. What I'm saying is it doesn't even behave as if it is absolute VS fixed. The ratchet template's toolbar stays fixed, with translate3d vals set to 0, and content overflowing.\nCould you provide a quick JSFiddle or demo of this error?\n. If you provide an online demo, I can help you out!\n. jakie8 [at] gmail [dot] com, it is my pleasure to help out, I certainly don't mind. If not, I will keep this issue open for a while to keep it in the back of my head \n. @Lordnibbler :beers: Damn, must have been bothering you. Good hunting, and thanks for updating this issue with that link\n. @jonscottclark You might want to reference @Lordnibbler, I have yet to see this problem in action... \n. @jaywolters I'm not entirely sure about the fixes headers used in ratchet, but if you want a fixed header that moves with the content, then it needs to be absolute.\nI'd almost recommend never using fixed headers with a mobile web app.\n. You can have that if you make the header, content, and footer sibling elements instead of having the header and footer within the content area. It's just more pragmatic CSS than anything\n. I don't believe Ratchet works on Android devices, does it? Does Ratchet work in Jelly Bean by itself without Snap.js?\n. Excuse my simplistic questions. Are you using the demo provided in the repo? Do you know what kind of errors are happening if any?\n. @Zoidberrg Bump\n. No evidence or support has been provided regarding this issue.\n. Rad!\n. Well thanks for contributing!\n. @cayasso Hell yah man, thanks!\n. @sibbl I do not have a Windows Phone 8. Do you figure that if I make it work in IE10 it'd work on the phone as well?\n. @KevinTCoughlin I will solve this today, thanks\n. @KevinTCoughlin @sibbl @alexander-o Fixed in 1.7.3: f1de01cc3ab8fec68ccb95466f059c1365cbd114\n. @webchun Thanks man, updated!\n. @T145 Thanks for taking what I'm sure was a nice amount of time to rewrite a bunch of the code to this, but I have a few concerns about some of it, and I think a lot of it boils down to personal preference.\n- Indentation has changed throughout entire file, not that important\n- Why define all variables first instead of just chaining them with the commas like it currently is?\n- Does removing the this. declarations retain the Constructor logic? Is this. implied with variables defined within that scope?...\nThere are now conflicts with this merge, but I added various things from you in 1.7.2 751ed75bc7fe63ff809f5b4f7443a65f3a6dee8e\n. This has been fixed in 1.7.1: fe2aed12221a7525e1eab6a424cf7b434b63d219\nIt has to do with fault checking to see if specific variables exist.\n. @T145 I sincerely appreciate you taking the time to reorganize Snap.js, but for the time being, I am the main contributor, and I'd prefer the library to retain it's current formatting of syntax. I have and will continue to utilize some of the code patterns you have put forth in your version, thanks again\n. How can I do this, do you know?\n. @racorbit data-snap-ignore-children is not a bad thought. Really, I want that to be implied with data-snap-ignore\nI am going to look into adding live events so the listener works even on DOM reconstruction, and that would be the opportune time to look into better support for data-snap-ignore. Lets leave this issue open for a bit\n. @t0rpedo I have a different solution.\nEverytime you click an element, I just traverse upwards in the DOM in a loop until I find an element with my target attribute. If such an element exists, it will return it, but if not, it will return null, so this works, but I don't know how efficient it is. This will work for future elements, too, but again, imagine you have some deep seeded elements that have a parent a zillion nodes up, it may degrade performance. Thoughts? @racorbit \nCheck out the following code here: http://jsfiddle.net/BWnx9/\n``` javascript\nfunction parentsUntil(el, attr) {\n    while (el.parentNode) {\n        if (el.getAttribute && el.getAttribute(attr)){\n            return el;\n        }\n        el = el.parentNode;\n    }\n    return null;\n}\nvar startDrag = function(e){\nvar src = e.target ? e.target : e.srcElement,\n    ignoreParent = parentsUntil(src, 'data-snap-ignore');\n\nif (ignoreParent) {\n    return;\n}\nalert('Clicked');\n\n};\ndocument.addEventListener('click', startDrag);\n. Fixed in 1.7.8, thanks for your help guys! 05dfa0bc629e22a61288bc7ba3760ef8d3984d3e\n. @grigio @prud I've gotten snap working on 2.3.5 (no overflow), but I do not know at which version overflow support begins\n. @prud Thanks for the advice. I will go ahead and mention that in the Readme, and as for the other initial problem opened by @grigio, please reference issue #32 in regards to fixing the ignored elements. It is not fixed yet but will be soon\n. You have to re-bind events to your buttons/content area once you push data. I will be working on an update to this soon where you do not have to keep rebinding events\n. javascript\nvar doSnap = function(){\n    window.snapper = new Snap({\n        element: document.getElementById('content')\n    });\n};\nwindow.addEventListener('push', doSnap);\n```\nLive events will be included in the next major update of Snap.js\n. @lmartins This actually might be a better approach, see if this works as well:\n``` javascript\nvar doSnap = function(){\n    if(window.snapper){\n        window.snapper.enable(); // Snap.js already exists, we just need to bind events\n    } else {\n        window.snapper = new Snap({\n            element: document.getElementById('content')\n        });\n    } \n};\nwindow.addEventListener('push', doSnap);\n``\n. @racorbit @lmartins I have already gotten Snap.js to work with a touch slider, and that has a lot to do withdata-snap-ignore` and intent, but referencing Issue #32, this problem will probably be fixed. That being said, with the next major release, I will include a FAQ page in the Wiki or Readme that explains how to target specific elements as your drag handle (such as the title bar). Let this issue cross over to #32 and we will solve it there.\n. There are conflicts with this now since I merged before accepting your pull request, but this is fixed in 1.7.5 anyways. Thanks for submitting this issue, and you're right, it will help with peoples performance. Thanks again dude!\nFixed: 406e314cc26d0336f75e85de8c61ec87633940d6\n. @smokingbarrel @KevinTCoughlin @t0rpedo Just so you guys know, I've reclarified toggles a little bit in the new FAQ section on the readme.\nThat being said, @smokingbarrel and his problem still apply, not being able to tapToClose with touchToDrag disabled. I will look into this\n. @smokingbarrel I have been thinking about that, and that demo was not actually to serve as toggles but examples of programmatic opening/closing. I'll think about my wording\n. This is fixed in 1.7.4: 1b3589e223b5e7dcb2ceb427b8366a6ae5e60c42\n. What version? There was a definite problem between 1.6.3 and 1.7.8 where you could scroll vertically which would define user intent, but the pane could still be slid open. Try upgrading to 1.7.8 and tell me if this fixes your problem, mate\n. I am fairly certain the problem you're describing is what I think it is, and that issue is now fixed. Let me know if you're still having problems, @alexander-o \n. @alexander-o thanks for the kind words!\n. Haha no apologies necessary. I will look into this today, I will say that the only support I can provide for IE 8/9 (possibly even lower) will only open/close the pane, and it will have to use the left/right properties instead of translate3d. I'll look into this today and I'll keep you updated dude\n. @voodoo6 I almost have full support for IE9 (minus transitions), but dragging the pane works (using the left property). I'll keep you posted!\n. I've got tested support down to IE7, reference the readme here, you can view the commit here: b1f8718e44f9f89724530fc86f5f01845cc7f4eb\n. If you want to provide a link to it's use in production, I would love to add it to the readme!\n. Awesome! I like how you're not using the default 266px for it. There have been some great contributions lately, so I look forward to merging them and updating the code. I had to take a breather from developing this, I made it in like, 5 days, haha I am frazzled!\n. You're the man!\n. @justindarc Bouncing, you mean the top/bottom elasticity when you're done scrolling? Dude, if you could prevent that, you'd be a god, that's be so awesome! I am adding legacy support for shit like IE right now so the codebase may change.\n. @justindarc I used this code but I am afraid I saw no difference in any scrolling behaviors. Do you think you can make a small demo?\n. @456Q I will see if there is anything notable in the code, but I would need to acquire a Windows Phone to actually test, something I don't have:/\n. Thanks dude, updated this. Will push later tonight!\n. Merge conflicts, lots of changes. This is fixed, and will be in the next release of Snap.js later tonight, thanks for contributing, mate!\n. Something like this would work but you'd have to do a lot more coding. Why would you want this functionality, out of curiosity?\n``` javascript\nvar snapCookie = //getCookie();\nif(snapCookie){\n    // Open Droor?\n}\nvar snapper = new Snap([...]);\nsnapper.on('animated', function(){\nvar snapState = snapper.state();\n\nif(snapState.state==\"closed\"){\n    // Remove cookie\n} else {\n    // Set Cookie, snapState.state == \"left\" or \"right\"\n}\n\n});\n```\n. Sick request. I will merge tomorrow and update the script, thanks dude!! :beers: \n. This has been done differently than the way you provided for one reason:\nWhen the pane is slid all the way open, say your dragElement goes out of view. At that point, the only thing the user can drag is the pane. I still apply all events to the dragging pane, but if a dragElement is set, it will trickle down the DOM and catch it and use it as the handle. I have provided a demo and will release this functionality later tonight. Thanks!\n. Travis CI will be supported in v2 of Snap.js and will run tests to ensure the libraries working properly.\n. @davidjohnson91 Thank you for the kind words!\nWith the way that the elements are positioned, affecting the left attribute of the sliding pane will not move it away from the left, rather, it will \"squish\" the element because the right attribute is set to 0 as well. Here is some CSS to convey what I am talking about:\n``` css\ncontent{\nposition: absolute;\ntop: 0;\nbottom: 0;\nleft: 0;\nright: 0;\n\n}\n```\nNormally, the pane is moved with translate3d, but IE does not support that, so I translate the pane with the left property. To avoide \"squishing\" the content, I assign the width to the element so it retains it's proportions. I hope this makes sense, and if you have a better solution to retain the elements size rather than assign it the size of the window's width, let me know!\nRegards,\nJacob\n. Does adding the following CSS to your content container help?\ncss\n-moz-transform-origin: 0% 0%;\n-moz-transform: scale(1);\n. Thanks!\n. As @t0rpedo states, there is enough logic to hook into Snap.js to create the functionality you're looking for, @smokingbarrel \n. No, this is not a bug, this is just a feature of the demo. You can add two separate lists, look at the Ratchet demo for a two-list example.\n. This has been accounted for. Will be included in the next release tonight, thanks!\n. You can progromatically close your snap instance by calling the following:\njavascript\nsnap.close();\n. It's not. Add this to your code to close the pane once you've loaded data:\njavascript\nwindow.addEventListener('push', function(){\n    snapper.close();\n});\n. @matmac @davgothic I'm a little confused. I think @paulbarroso was talking about left and right swiping issue, not scrolling below snapped elements.\nDoes this repo help any of the issues described above? https://github.com/jakiestfu/AppScroll.js\n. Try setting your body or container element to have overflow-x: hidden;\n. I believe tapping the top to scroll up only works on the body/html elements. The iPhone would have no way of knowing what the scrollable content area is if done in a different element.\n. Thanks for providing good detail and imagery.\nThere are three main styles to pull out the menu/drawer: \n- Reveal (which Snap.js currently uses) \n- Push (which pushes content away at the same time menu slides out)\n- Over, which is exactly what you describe above. The menu will slide out over the content as it does in many android apps.\nAs soon as I have more free time to focus on Snap.js again, I intend to include all three of these styles and it will be as easy as setting a single parameter to utilize them.\n. @prud Performance is a huge impact on Snap.js, especially when it means firing a custom event everytime the user drags the screen x amount of pixels. Adding a parallax I fear may degrade the quality and efficiency of this code, but it will be something I'd like to experiment with\n. Merge conflicts, many other updates, fixes, and features. This will be included in the next release of Snap.js, thanks for contributing dude!\n. Just a thought, you've changed a lot of code to allow for this. Why wouldn't you do something like set the min/maxPosition in the init method if an object is passed? That way no other code needs to change and there is only about two lines of code that'd need to be added for this logic. Thoughts?\n. Do you think something like snapper.refresh() would serve a purpose then? it will fire all init methods (excluding binding of events)?\n. @hexdesign Percentages were something that I was trying to incorporate into Snap.js right at it's inception, but I never got around to it. there is actually a lot that goes into this request.\nYou could always use snapper.settings() to update your min/max position based on your screen size, that might be the only option you can go with for now.\n. Thanks dude!\n. This support has been added with Drag Handle. A user could create a handle on the left or right side of the screen and have dragging activated that way.\nIf you're talking more about pulling the pane out, please reference issue #65 (Hey, you opened that one!) Correct me if I didn't answer your question. Thanks!\n. @t0rpedo He probably did something like this. Directly within your content element, add an element like this:\nhtml\n<div id=\"right-bezel\"></div>\n\n``` css\nright-bezel{\nposition: absolute;\ntop: 0;\nbottom: 0;\nright: 0;\nwidth: 15px;\n\n}\n```\n\njavascript\nvar snapper = new Snap({\n  element: document.getElementById('content'),\n  dragger: document.getElementById('right-bezel')\n});\nAgain, @t0rpedo, mind you, this is only truly accomplishable by having issue #65 is implemented...\n. The API already supports creating flows like this.\njavascript\najax.get(url, function(data){\n    snapper.expand('right');\n    setTimeout(function(){\n        document.getElementById('content').innerHTML = data.html;\n        snapper.close();\n    }, 300);\n});\n. Thanks for this dude, I will take a look into this!\n. I just discovered this. Annoyingly, this has been a feature on chrome as well. Any idea on preventing that default behavior?\n. How is it more convenient than data-snap-ignore=\"true\"?\nOn Saturday, June 15, 2013, Johannes Rudolph wrote:\n\nHi,\nI think this would be easy enough to add, but I'd appreciate if we could\nhave a css class (e.g. .no-snap) as an alternative to\ndata-snap-ignore=\"true\".\nIf you take a look at e.g. the Facebook mobile site, they allow swiping\neverywhere except on elements that provide swiping themself (e.g. picture\ngaleries). I'd intend to so the same with my App where I display a lot of\ngraphs etc. to which I'm applying the same css anyway, so it would be\nconvenient to do it that way.\nWhat do you think?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jakiestfu/Snap.js/issues/78\n.\n. Would you guys mind providing a quick demo?\n. @DatoCape @tommykolkman Is this not a matter of creating the proper layout than Snap.js being broken?\n\nNormally, in a web app, even a responsive app, I have the following:\n```\nheader-toolbar.static\ncontent.scrollable\nfooter-toolbar.static\n```\nVS the layout you're proposing (if I'm not mistaken)\n```\ncontent.scrollable\n#header-toolbar.fixed\n#footer-toolbar.fixed\n\n```\nThe proposed layouts for Snap.js adhere to the top set of styles. Personally, i think it should be done that way so you don't need any fixed elements which mobile devices can have a hard time with...\nThoughts?\n. Thanks, merged into my local branch. Will thank you in the release notes!\n. javascript\nfunction applySnap(){\n    var width = window.innerWidth;\n    if(width<800){\n        if(window.snap){\n            window.snap.enable();\n        } else {\n            window.snap = new Snap({\n                element: document.getElementById('W')\n            });\n        }    \n    } else {\n        if(window.snap){\n            window.snap.disable();\n        }\n    }\n}\nwindow.onresize = applySnap;\napplySnap();\n. How many nodes are we talking here? Are we talking. About ~ 100 child nodes? 1,000? Each with links, maybe an image, text, etc?\n. Definitely interested in looking into this. Thanks for the heads up (and\nkind words!)\nOn Wednesday, June 26, 2013, pixelpie wrote:\n\nYes it starts with about 30 + list elements width percentage width (don't\nknow if would be recalculating widths every time), each element with an\nimage, different links, icons etc.. It's definitely not the ideal content\nfor the browser to drag. Other pages with common content work flawlessly.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jakiestfu/Snap.js/issues/84#issuecomment-20098011\n.\n. At first glance, I don't imagine this would be the easiest fix. Is there a reason you need the drag handle to be fixed? Most web-app layouts that I'd recommend using with Snap.js only use absolute elements on the content area and back panes, everything else (i.e. toolbars, footers, content area) do not need to have any absolute/fixed positioning\n. Why use a drag handle at all? Snap.js is designed to work by allowing the user to drag the content area, the actual pane that is draggable.\n\nIf you were to remove the settings.dragger option, it may work as you desired. If you specifically want the toolbar to be draggable, you might need to create some invisible inner element that will act as the drag handle.\nDoes this help? Are you really using this for Nordstrom!? :+1: \n. @brendajin Do you have an online demo that I could poke around with?\n. @jonscottclark Thanks for taking the time to look into this issue for me. I would like to test this out myself as well, but Overthrow looks pretty slick, and I will most likely put it in the readme in place of iScrolls part. Thanks again, dude! :beers: \n. Reference the toggle button in the faq here: https://github.com/jakiestfu/Snap.js#--how-do-i-make-a-toggle-button\n. Paste the code you're using to initialize Snap\n. Do you have an element with id=\"content\"?\n. Can you send me a live link to view?\n. Send me an email at jakie8 (at) gmail (dot) com\n. The way it works is like so: You have two background drawers, a left and a right one with .snap-drawer-left and .snap-drawer-right classes respectively. If you slide the pane to the left, Snap.js will add a .snapjs-right class to the body which through the CSS listed here, will hide the left drawer, and reveal the right, and vice versa.\n. Look at the ratchet example. It's very simple, the .snapjs-right and .snapjs-left classes dictate which drawer is open. From there, you can trickle down and show the appropriate content, so:\n``` css\n.snap-drawer-right,\n.snap-drawer-left{\n    display: none;\n}\n.snapjs-right .snap-drawer-right,\n.snapjs-left .snap-drawer-left {\n    display: block;\n}\n```\nThis shows the right and left drawers, respectively when the user drags them open.\n. Are you sure? Open is here and close is here...\n. Merged into my local branch, will give you thanks in a release statement!\n. Try\ncss\nbody{\n    overflow-x: hidden;\n}\n. Have you guys debugged what element is the wide one? Either setting the correct width of absolute elements or setting full positions (top:0, left:0, top: 0, bottom: 0) in conjunction with overflow-x should work. Let me know if you have any more information regarding this matter.\n. @jayd3e I've been wanting to work on it but I haven't got the time. Maybe we can do a hackathon this weekend;)\n. The only thing I can think of is this: https://github.com/jakiestfu/Snap.js/blob/master/snap.js#L207-L209\n. I'm pretty sure this is the lovely work of @voodoo6. It's simple responsive queries, if I'm not mistaken.\n. This is a lot of work, thanks! So if I understand correctly, this animates the pane in IE8/IE9?\n. Do you think you were calling state().state before it was done animating?\n. @jaywolters Hahaha you got it Jay!\n. Does it have to do with the fact that there is a lot of content being translated?\n. @takrishna @prud \nI have a ton of things planned for 2.0 of Snap.js and it will be great. Performance boosts, different slide modes (push, over, and more). I think the first point you mentioned is a great imporovement. Could you please elaborate on point #2?\n. @takrishna Correct, there is a scroll where there shouldn't be. I do not know why this happens, but further testing could be relevant to this topic to determine whether this is a Snap.js layout bug or a webkit rendering issue.\n. @takrishna I just coded up what will eventually be called \"layers\". It makes it simple to select the content to be displayed. Instead if stacking like you said, it uses display block/none. It increases performance as well\n. Thanks!\n. @frjoha Incredible find. The next version of Snap.js will be focused solely on performance, and this is a great find. There are also additional things throughout the issues list that point to performance issues, so I will create a new issue soon and reference all of the main performance issues. Thanks!\n. @jtrussell If you'll excuse my naivety, I'd include semver tags if only I knew what they were. Care to explain? ;P\n. Think about the layout that Snap.js represents, something deeper than just the surface pane. Think \"layers\". You have a content layer, and a snap drawer layer. They interact independently from one another, yet they lay above one another. This calls for both layers to be positioned absolutely, and everything within one or the other.\nThat being said, your top layer (the content layer), can have the fixed elements you describe within them if I'm not mistaken. If I am mistaken, and fixed elements will not translate when their absolute parent does, then why not set your toolbar, footer bar, and content area to three absolute elements as well? Problem solved?\n. @messyp With those three absolute elements, the only one that allows scrolling is the content one. Why scroll entire body element with fixed navs if that's counter-productive to an app-like layout? The only things that should scroll are the direct elements you want to be scrolled.\n. Updated to use your code in 1.9.3, thanks!\n. Translating things via CSS obviously has performance benefits, but here is the main reason why:\nUsing translate3d forces hardware acceleration in Webkit browsers.\n. This is not how the disable method works. The disable method is used for killing events on the touch events. There will be more clarity in the v2.0 version of Snap.js, thanks\n. This happens because when you move your mouse out of the bounds of the browser, events are lost. This happens with iFrames, too, and I don't believe there is a fix for this without wasting resources like you described.\n. Would you like to send a pull request?\n. @skeggse This will DEFINITELY make the v2.0 release of Snap.js, expect it soon, thanks for your help!\n. This is still under development, not actively though. My apologies, I have so much on my plate right now that I cannot reallocate time to this project at the time.\n. This plugin is (for the time being) under active development until a stable v2.0 has been published, then I might slither away again. Thanks!\n. Snap.js v2.0 will support responsive layouts, thanks!\n. Snap.js does not rely on jQuery. Fortunately, though, this is a great issue to still solve. This will most likely be included in the v2.0 of Snap.js, thanks!\n. I will be looking into adding velocity support for the v2.0 version of Snap.js without the use of Hammer.js, thanks!\n. It doesn't quite sound like this is an issue with Snap.js. I'm closing for now, correct me if I'm wrong. Hope you found your solution\n. A similar feature will be available in the v2.0 API of Snap.js, thanks!\n. I believe this has nothing to do with hyperextensibility, but the fact that you're trying to move the pane while it is animating. Will look closer into this, thanks.\n. There is no planned vertical support at the moment but it is certainly a possibility. Trying to get a hold on performance and layout issues.\n. Snap.js v2.0 will have support for richer layouts with minimal effort. Stay tuned for it!\n. This is a matter of writing your own custom CSS as you would any library. The new version of Snap.js will support richer layouts with minimal effort on your part.\n. This will be solved in issue #174 \n. This is added in v2.0, thanks\n. @jayd3e This is not the approach we'd want to take but this would be a good feature. We'd simply set the content's \"pointer-events\" property to \"none\", that way events don't register. Saving this for v2.0\n. Sure. If you're using a link that has an href attribute set to \"#\", it will cause this jump. Simply call e.preventDefault() on your click event. Snap.js v2.0 will add support for easier ways to toggle things.\n. Snap.js currently does not have any other methods for revealing content other than the \"reveal\" approach. The \"push\" approach and \"overlay\" approach would be great additions, but are not planned in a release at the moment, thanks.\n. @frankie-loves-jesus @chellem @kennethkalmer Sorry, fellas. Here we go:\n``` bash\n$ bower info snapjs\n...\nAvailable versions:\n  - 2.0.0-rc1\n  - 1.9.3\n```\n. I would be open to the idea. I've opened a project before to another collaborator and it went in a different direction. I'd be willing to do this if the collaborators provided a roadmap of what they'd like to accomplish with the library over time.\nThank you a lot for opening this discussion, @sandstrom \ud83d\ude4f\n. ",
    "jasondavis": "sweet I was just thinking of playing with Snap.js and PullToRefresh,\n. IE on mobile....whaaaaaaaat?\n. @T145 I think you fail to see what the Minified file is meant for.  It not not meant to be highly readable.  Notice how there is a Snap.js and a Snap.min.js...he didn't just get bored and make 2 versions for fun, one is minified as mentioned to increase performance by smaller file size to download.\n. This will be a great addition!  Thanks for sharing\nOn Thursday, May 2, 2013, justindarc wrote:\n\nAlso, I should mention that the code above uses event delegation to attach\nitself which may be overkill if you aren't creating new drawers, etc.\ndynamically.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jakiestfu/Snap.js/pull/40#issuecomment-17361280\n.\n. @voodoo6 Initially I pitched the idea for Snap.js for mobile apps but after seeing your site, I can see this being really useful on a desktop site ass well.  I am currently doing a Webhosting Control panel, similar to CPanel that has a sidebar like that and currently I display: none; it on smaller screens but this gives me the idea to use Snap.js for it, very cool idea\n. Travis seems like overkill for this project but not my call\n. Yeah good work, this thing has really taken off since day 1, thanks\n. \n",
    "Prinzhorn": "Now I see it. But it doesn't look like a link at all.\n. Great. Keep up the good work.\n. ",
    "jschilli": "ouch, apologies for that - yes, just changed the initializer\n. ",
    "jrussell-ivantage": "Just saw this as well. In FF e.target should be used.\n. ",
    "voodoo6": "I use javascript to conditionally load snap.js for smaller screen sizes on a responsive site - so for most cases, the fact that it meant for touch devices allows it to work as expected. However, I suppose it would be good if the toggle worked onClick in IE8+ as it does in other browsers just for the few times an IE user may have a narrow browser window..\nAdmittedly a fairly edge case but if its an easy fix then I'd vote for it!\n. Perfect, thanks!\nLooking forward to the new version.\n. I think its these type of details that separate the good from the great.. roll on 2.0!\nCheers for looking into it, look forward to seing what you come up with (if you do ;)\n. Sorry! missed that in the docs.. no more issues tonight I promise ;)\n. Open and close is all thats needed!\nMuch appreciated\n. Great work Jake, looks good on initial test :)\nI'll let you know how it goes, apologies again for having to get your hands dirtIE !\n. Hi Jake, you mentioned that you would like to see how we got snap working in our site. We're a small start-up company who recently redesigned to produce a responsive site.\nIts a work in progress of course but shows you how we got it working (snap kicks in a <980px screen widths)\nhttps://www.hellou.com/Offer/Featured/Leeds\nSnap looks to be working great so far - really appreciate your help finding something to try out. It'll be interesting to get feedback from users to see what they think. One thing I've noticed already is that it seems as soon as some people are in a mobile web app they don't expect to be able to do things like swipe to open. I think this will of course change over time as more web apps use the new design patterns that are emerging for responsive sites.\nIt could also just be a case of communicating the ability to swipe to users, like having an icon or notice that shows that swiping is possible to open the menus.\nAnyhow, just a few thoughts.. thanks again, I look forward to seeing how snap develops!\n. It's been fun watching it come together, you deserve a breather :) \n. We do something similar to this using snap in a responsive site by just keeping the menu visible (or open) at larger screen sizes with media queries.\nhttps://hellou.com/Offer/Featured/Leeds\nResize the screen down to see when snap kicks in < 980px. Its something of a work in progress (as always!) but this method keeps the menu open as you suggest.\n. ",
    "devmondo": "thanks for replies, i know it is for Mobile Devices but as Voodoo6 mentioned, we work on responsive sites and it will really help a lot\n. ",
    "bstmedia": "Let me add that it does work in IE10 in Metro and Desktop mode without any issue.  When having ms-touch-actions added .\n//just one example\nbody {\n        -ms-touch-action: pan-y;\n        }\nI like to submit a small fix to make it a kind of compatible with IE9. I don\u2019t expect much touch enabled devices running IE9 anyway. But maybe one older small screen device that should be able to at least toggle the menu. \n// I add a ID identify to right drawer div\n\n// and some lines to the easeTo function.\nif (typeof cache.vendor=='undefined'){\nvar jRDindex = document.getElementById('rd').style.zIndex\nif (jRDindex == '99') {document.getElementById('rd').style.zIndex = 1;}\nelse {document.getElementById('rd').style.zIndex = 99;}\n}\nAs you can see. I just toggle the z-index which is good enough for my case. I\u2019m sure you guys can make it much nicer than I\u2019m capable todo :)\nThanks for you awesome work! \n. Found something. cache.dragWatchers.current is never \"0\" using touch input. So the tap to close sections is never used. \n. Got something that works for me using IE10 touch (Desktop and Metro) :)  Please take a look. I hope this will help you. \n// Tap Close\n                    if (translated >= settings.minPosition + settings.minDragDistance && translated <= settings.maxPosition - settings.minDragDistance) {}\n                    else\n                    {\n                        if (translated >= settings.minPosition - settings.flickThreshold && translated <= settings.maxPosition + settings.flickThreshold) {\n                            utils.events.prevent(e);\n                            action.translate.easeTo(0);\n                            cache.isDragging = false;\n                            cache.startDragX = 0;\n                            return;\n                        }\n                    }\n. ",
    "ebradbury": "Hey @jakiestfu,\nThe on('animating') issue seems to still be present. One option would be switching from CSS transitions to animations and using the animationiteration event to update the snapper status.\nhttps://developer.mozilla.org/en-US/docs/Web/Events/animationiteration\nThoughts?\n. @jakiestfu I looked into this and animationiteration actually only fires at the end of an animation loop. Not for each step along the way. Not going to work. Sorry for the noise.\n. ",
    "grigio": "Yes, your fix work, but now 2 (probably related bugs) are out.\n- \"no drag area\" drags\n- The dark side menu isn't scrollable\n. I see, so I suggest to explicitly say \"Partial support for Android WebKit 2.3.X+\" in the readme\n. ",
    "nikolaiwarner": "Haha, awesome. +1\nI haven't updated to 1.6.0 yet. I'll let you know if there's trouble.\n. ",
    "Rias500": "I solved this by putting minPosition (or maxPosition depending on which side you disabled) at 0 in the settings, this way the side bounces back nicely.\n. ",
    "teuneboon": "@Rias500 Seems to solve most of the issue, thanks. Do you know of a way to disable being able to drag there entirely? (so the snap back wouldn't even be needed)\n. @jakiestfu I think it's related to the disable thing your already looking into. But:\nWhat I mean is that when I have 'right' disabled and the minPosition set I can still drag my drawer so that it shows the background on the right, even though it snaps back correctly. I attached a screenshot to illustrate what I mean: the part I surrounded with red can be seen even when I have right disabled and minPosition on 0.\n\n. ",
    "racorbit": "I guess your right, maybe just add e.touches.length just in case touches doesn't exist.\ncache.startDragX = utils.hasTouch && e && e.touches.length && e.touches[0] ? e.touches[0].pageX : e.pageX;\n. Not the most elegant solution, but for the time being I just find all child elements and add the data attribute before initializing snapper. \u00a0A possibly more elegant solution would be to add an option for ignoring child elements of any element with the ignore attribute and then Apply the rule to the tree. \u00a0I need to investigate to find the best performing approach.\n\u2014\nRick\nOn Mon, Apr 29, 2013 at 7:31 PM, Jacob Kelley notifications@github.com\nwrote:\n\nHow can I do this, do you know?\nReply to this email directly or view it on GitHub:\nhttps://github.com/jakiestfu/Snap.js/issues/32#issuecomment-17201213\n. Yeah that's my thought exactly as I think it's somewhat of an edge case. \u00a0i am also nervous that it probably will be complained about though and thought of another option - to have two attributes, data-snap-ignore and data-snap-ignore-children or a more clever name that eludes me at the moment:)\n\u2014\nRick\n\nOn Tue, Apr 30, 2013 at 12:50 PM, t0rpedo notifications@github.com\nwrote:\n\nAfter some pondering yesterday it seems like the best way to go about this would be, as racorbit noted, to indeed add a stop mechanism to the event listener assignments. This would cause that when a node is found with the no-drag parameter, the assignment iterator would skip to the next sibling without processing the marked node or it's children. \nThe only negative aspect I could imagine at the moment would be the need for an additional function to re-add the events to the no-drag elements if you have interaction requirements, but that seems like an edge-case scenario. (However, now-a-days it seems like most edge-case situations become the norm fairly quickly.)\nI would love to hear other options, but the above mentioned seems like it has the most potential.\nReply to this email directly or view it on GitHub:\nhttps://github.com/jakiestfu/Snap.js/issues/32#issuecomment-17239285\n. That's the way I went.\n\u2014\nRick\n\nOn Tue, Apr 30, 2013 at 7:10 AM, Luis Martins notifications@github.com\nwrote:\n\nIs there any way to prevent Snap.js normal behaviour when the user is trying to drag a slider interface inside the main content?\nOne option viable in my case would to only allow Snap.js dragging on the title bar.\nThanks.\nReply to this email directly or view it on GitHub:\nhttps://github.com/jakiestfu/Snap.js/issues/35\n. Sorry about that I thought you were looming for a better way. \u00a0I just add the data-ignore-snap=true attribute to every element I don't want snap to listen for swipes, before I call snap on the content area. \u00a0Make sure you put ignore and all the child elements too, which is why I do it in js and just html.\n\nThat's how I do it for now, but will eventually modify snap so it accepts an option for ignoring child elements, for a more elegant solution.\n\u2014\nRick\nOn Tue, Apr 30, 2013 at 8:02 AM, Luis Martins notifications@github.com\nwrote:\n\n@racorbit Could you share how you did it?\nThanks!\nReply to this email directly or view it on GitHub:\nhttps://github.com/jakiestfu/Snap.js/issues/35#issuecomment-17223043\n. \n",
    "pgherveou": "@jakiestfu I think you forgot this one as well \nhttps://github.com/jakiestfu/Snap.js/blob/master/snap.js#L367\n. yep, that should work\nalso I think you should at least verify that you are not enabling dragging in the enable  method\nthis.enable = function(side) {\n            if (settings.touchstart) {\n                action.drag.listen();\n            }\n        };\nI found this shortcuts useful but I can live without it if you expose the settings with a settings method\n. sorry, maybe its just my use case...\nI initialise snap.js with dragging option only on mobile\nI still want to be able to enable or disable the drawers depending of the context of my app later on\n. i am listening on the animated event to hide/show left or right drawer\nbut in some scenario I also need to know when the event animated is fired to replace or destroy the content of the drawer. so I do something like that in my updated version\njs\nsnapper.once('animated', function() {view.dispose();});\nnice thing with component.js is that dependencies are shared, thus not impacting global file size\nbut I understand not everybody is using it ;-) and that you don't want to add dependencies to Snap.js\n. ",
    "joaopgrassi": "What about disable both sides? Just pass two disable options?\n. ",
    "seven-hong": "I tried passing \"left right\" to the options, it failed on both sides, meant both sides were enabled unfortunately.\n. Thanks for your work:) I tried this fix, the drawer showed up which it didn't previously in IE 9, however it couldn't be hidden after opened, help pls...\n. ",
    "Lordnibbler": "@jakiestfu I didn't mention anything about an element's display being set to inline. I was referencing the css -transform you set as an inline style, ie <div style=\"-webkit-transform:\"> \nI have submitted a pull request that fixes this issue for me.\nI wil look into Ratchet's template -- what are the noteworthy differences here?\n. Chrome Version 28.0.1485.0 dev \nSafari 6.0.4\n. It doesn't actually change the position:fixed, but the behavior of the fixed element behaves like a static or relatively positioned element.\n. If that's the case it's likely something on my end.  I am also having a weird white \"flicker\" when beginning to click or drag the Snap element.  Very confused.\n. It's a quite complex site, hard to break it down into a jsfiddle as of now :(\n. email sent!\n. I found out what's causing this: https://code.google.com/p/chromium/issues/detail?id=20574\nSo, you can't have a position:fixed element that has a CSS transform applied to it in Chrome/Safari right now.\n. I also fixed the flicker that not having the -transform CSS causes using -webkit-backface-visibility: hidden;\nHope this helps ya and anyone else experiencing these issues.\n. @jonscottclark in my case, the position:fixed not working was a webkit only issue, so for chrome/safari I had to set -webkit-backface-visibility:hidden on the element that refused to stay fixed.\n. @schmolzp I designed my site's main layout around this demo: http://jakiestfu.github.io/Snap.js/demo/apps/ratchet/template.html\nIf you still have issues, I'd suggest applying the css I mentioned in my previous comment to the elements that are refusing to stay fixed.\n. ",
    "jonscottclark": "Just jumping in here and have a quick question: is this why when I set position: fixed on #toolbar it won't stay fixed? Because #content has the transform rule in order to let it slide over?\n. Hey all, I seem to have solved the issue, and I'm pretty sure I was barking up the wrong tree here thinking my shit wasn't working because of a browser bug. I had some markup issues that I fixed by checking over the demos again. Sorry y'all. Thanks for the great script, @jakiestfu\n. @schmolzp This might not help, but just ensure that you follow the markup example that @jakiestfu posts in the readme (https://github.com/jakiestfu/Snap.js/#layout). I had an issue with some extra divs that completely threw off the desired positioning.\n. Hey @Prakashup, just took a look at my implementation. Can't guarantee that this will work for you, but try putting the overthrow class on the .content div/section that's a child of .snap-content.\nHere's the associated HTML structure that I used:\nhtml\n<div class=\"snap-drawers\">\n  <div class=\"snap-drawer snap-drawer-left overthrow\"> ... </div>\n</div>\n<div class=\"snap-content\">\n  <div id=\"toolbar\"> ... </div>\n  <div class=\"content overthrow\"> ... </div>\n</div>\n. Hey all, check out the discussion in https://github.com/jakiestfu/Snap.js/issues/87\n. ",
    "schmolzp": "@Lordnibbler my problem is that when I open the menu, my fixed navigation seems to become unfixed and goes back to being relative, any ideas? Thanks for any help you can provide.\n. @Lordnibbler @jonscottclark Thanks, I'll see if I can figure it out\n. It's the -webkit-overflow-scrolling:touch that disables the scroll to top\nThis might help: http://stackoverflow.com/questions/8970740/ios-safari-scroll-to-top-does-not-work-on-certain-pages-why\n. ",
    "jaywolters": "If :fixed cannot be applied to the anything within -webkit-transform how is it that Ratchet is able to get their \"bar-*\" to be fixed?\nI have looked at this over and over again and I am perplexed. I am not using Ratchet on my project but I am facing this issue of creating a fixed title bar that will move with the snap-content container.\n. I would tend to agree with you however Facebook, LinkedIn, Twitter, Gmail (ios), Pandora, and so many others I cant even list all have a static header at the top while content flows. I am looking to use Snap in a UIWebView for a native iOS application where there will not be any other controls.  Im going to take another look at Ratchet and perhaps stop reinventing the wheel. Thanks for Snap.Js  Jake!\n. this is so very frustrating  - sorry for the alarm. somehow this is evalutating to Left now and my toggle is working.\nIts still puzzles me how it got jacked up.\nPlease disregard this issue - and i will try to provide more insight about the problem before posting again.\n. I was doing all this in the console trying to figure out why it wouldn't close when I clicked the toggle button.\nI would open it, close it and check snapper.state().state each time to see what was going on. it kept saying \"closed\" when I would do it. I doubt that it was happening before the animation finished - but I suppose its possible. I swore at the screen and went to get coffee. After working on some other features for my project I noticed that the toggle was working again and I chalked it up to \"aliens\".  I cant reproduced it now and everything seems fine.\nSorry about the false alarm.\nThanks Jake!\n. ",
    "smokingbarrel": "@jakiestfu \nStruggling with this issue as well. Translate3d creates it's own system of coordinates that affects fixed and absolute positions. The only work around this problem would be adding an event listener that would fire a reverse translate3d animation for the fixed child object. The portion of code that triggers translate3d for the content is way to intense for me and I wonder if Jake can help out?\n. Hey Kevin,\nMy code is as supplied. The only difference is that I changed touchToDrag variable from true to false. I was assuming that this change would just simply disable the drag, leaving the rest of functionality intact.\nI'll wait and see if Jacob will do the fix.\nNote for Jacob: I've noticed that in the toggles example, a toggle only opens the drawer but if you click it again it doesn't close it. Would be cool if each toggle was responsible for opening and closing the corresponding drawer\nMany thanks\n. @takrishna I've tried positioning the div outside of the snap.js-related divs and it just sits there on top of the drawer... The whole point is having that div inside of the content container which would act like a curtain when the drawer is open.\nThat being said, I think that second solution (just hiding) may not work as I intended because the whole wipe effect will be missing.\nJust to make it clearer, I'd like to achieve similar masking effect as this page does when you scroll http://www.scootmedia.nl/\n. I guess I can try to figure out the negative translate for that div once it's placed into the content container.\nThe z-index solution sounds more attractive though. The only problem is that the drawer sits under the content, once I change its z-index to the same z-index as content or above, the drawer just becomes a fixed side bar.\nIs there a trick to have drawer's z-index to be higher than the content's while retaining all the functionality?\n. Here are 2 sets of screenshots:\nSet 1: \ncontent > z-index:2; \n.snap-drawer-left > z-index:1;\nred logo > z-index:3; position:absolute; (located outside of snap.js container)\ngold logo > lives inside of the left drawer\nClosed drawer (red logo sits in a proper position):\n\nOpen drawer (same position as the above because the stacking is off):\n\nSet 2:\ncontent > z-index:2; \n.snap-drawer-left > z-index:4;\nred logo > z-index:3; position:absolute; (located outside of snap.js container)\ngold logo > lives inside of the left drawer\nOpen drawer (now red logo is behind the drawer):\n\nClosed drawer (the content and toggle button goes behind the drawer, unable to collapse the drawer)\n\nReally appreciate your help Krishna\n. ",
    "mahavirnahata": "I fixed it by using this code : \nfirst i added this css to snap.css file at bottom so that it will override default transform behaviour: \n.no-translate\n{\n    -webkit-transform: none;\n    -moz-transform: none;\n    -ms-transform: none;\n    -o-transform: none;\n    transform: none;\n}\nand in js after initializing Snap, i used this code.\nsnapper.on('animated', function(){\n      if(snapper.state().state==\"closed\")\n      {\n        $(\".snap-content\").addClass(\"no-translate\");\n      }\n    });\nHope that work-around will help.\n. ",
    "novium": "Ratchet works on Android,\nRatchet + Snap,js dosent\n. I switched to bootstrap with a lot of custom css (to remove bootstrap feeling) ;)\n. ",
    "stefreak": "I can confirm that Snap.js is broken on Android + Ratchet (tested on Nexus 4 + Phonegap). The problem is, that the content and header bar does not get pushed to left or right by the menu bar.\nIt seems that translate3d has no effect on fixed positioned elements on the android browser and Ratchet uses position:fixed for almost anything.\nI simply replaced any occurrence of position:fixed with position:absolute in ratchet.css and it works fine for me. I don't know if this has any undesired side effects.\n. You're welcome! :)\n. ",
    "nolandubeau": "I have encountered the same issue but the css change did not appear to fix my issue.  i'm just getting familiar with the android emulator/sdk's and using phonegap to build for android. it may very well be an issue with my setup.\n. Correction.  My find and replace didn't work.  The above CSS did resolve the issue.  Thank you!\n. ",
    "cayasso": "Wow that was fast!! Thank you!\n. FYI. I just added Snap.js to web components list https://github.com/component/component/wiki/Components#wiki-ui it should now show up under component.io or as soon as it refreshes.\nBest,\nJB\n. @lmartins In your component project do:\n$ component install jakiestfu/Snap.js\nthen you should be able to do form your index.js (or your js file):\nvar Snap = require('Snap.js');\n   var snapper = new Snap({...});\nNotice that you have to use \"Snap.js\" instead of \"jakiestfu/Snap.js\".\nRemember also to run make or component build in your project before trying require.\n. Are you trying in an actually component project file or just in a regular\njs global file?\nCheck this component example structure\nhttps://github.com/cayasso/pull-to-refresh\nOn Fri, May 10, 2013 at 1:55 PM, Luis Martins notifications@github.comwrote:\n\nFor some reason I have to namespace components, for example, I must call\ncomponent-tip and not only tip.\nWith this i've tried both approaches and with both I get the \"failed to\nrequire\" message.\nI've already ran the commands you've mention.\nIm gonna look further into this, if I come to any conclusion i'll post it\nhere.\nThanks\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jakiestfu/Snap.js/pull/27#issuecomment-17741058\n.\n\n\nJ.B.\n. ",
    "lmartins": "@cayasso Could you provide some instructions on how to install it using component?\ntried with:\n             var Snap = require('jakiestfu/Snap.js');\n            var snapper = new Snap({\n              element: document.getElementById('content')\n            });\nbut it always return:\n     Uncaught Error: failed to require \"jakiestfu/Snap.js\" from \"root\"\n. For some reason I have to namespace components, for example, I must call component-tip and not only tip.\nWith this i've tried both approaches and with both I get the \"failed to require\" message.\nI've already ran the commands you've mention.\nIm gonna look further into this, if I come to any conclusion i'll post it here.\nThanks\n. This would very useful indeed. Having to replicate the  data-snap-ignore is really not convenient.\n. Thanks @jakiestfu, i'll try that\n. That did the trick, thank you Jacob\n. Yep, it works great. Thanks again Jacob :)\n. @racorbit Could you share how you did it?\nThanks!\n. Thanks Rick, i'll try that.\nDirect targeting the element to control de slide would be awesome though. That way we could have only the title-bar watching for drag events related to the drawers.\nCheers.\n. ",
    "sibbl": "Also not working on mobile IE10 on Windows Phone 8.\n. ",
    "KevinTCoughlin": "@jakiestfu It should, Windows Phone 8 uses IE10 to render HTML content\n. Hey @smokingbarrel can you post your code? I was able to create a toggle button with my snapper's touchToDrag property set to false and using the following click handler code:\ndocument.getElementById(\"toggleSnapBtn\").addEventListener('click', function(){\n            if( snapper.state().state==\"left\" ){\n                snapper.close();\n            } else {\n                snapper.open('left');\n            }\n        });\n. ",
    "webchun": "You probably want to update your demo page too because It still doesn't work with IE (IE8-9-10) while the latest version is (1.7.8) ok ;)\n. ",
    "alexander-o": "Great it's fixed. Awesome mate! Thanks for updating. :dancers: \n. Awesome! Thanks Jakie! Love the update. :dancer: Your plugin has thus far been the best!\n. Btw I forgot to note, it's happening from your live demo.\n. ",
    "techker": "hey guys great project!works good on mobile but in IE10 still the issue with the scroll back...but all the other browser's it works great.\n. ",
    "T145": "1) The editor I use and the GitHub online editor both use the same indentation format, and sometimes GitHub has trouble displaying code indented in particular ways, which is why that was changed. :P \n2) Organizing the variables at the very beginning helps have one place that both the interpreter and a human author can concentrate and manage off of for a better environment: It's very useful for variable management in larger programs, too. Doing this also conserves memory slightly.\n3) Yes. The main reason I remove the \"this.\" declarations (apart from personal preference and memory management) in the instance of JavaScript is because some JavaScript compilers can make mistakes interpreting \"this.\" statements, and rather convey them as \"thistory\" statements.\nIf you can, please inform me of any conflicts! I always make sure my code is conflict-free!\n. Ah ok. I'll make the necessary adjustment and push a commit :P\n. No problem! If the indentation is really that big of a deal, I can always just alter it back w/ a different editor!\n. ",
    "edwardsdl": "@T145 The original minified file is ~8.4 kb while this one is ~14.6 kb. Your version is almost 74% larger.\n. ",
    "t0rpedo": "After some pondering yesterday it seems like the best way to go about this would be, as racorbit noted, to indeed add a stop mechanism to the event listener assignments. This would cause that when a node is found with the no-drag parameter, the assignment iterator would skip to the next sibling without processing the marked node or it's children. \nThe only negative aspect I could imagine at the moment would be the need for an additional function to re-add the events to the no-drag elements if you have interaction requirements, but that seems like an edge-case scenario. (However, now-a-days it seems like most edge-case situations become the norm fairly quickly.)\nI would love to hear other options, but the above mentioned seems like it has the most potential.\nEDIT: I just read the message thread for the referenced issue above. (#35) The idea of only targeting specific elements for the slide event has some potential!\n. Here is a temporary quick fix for the current issue. Sorry it took me a while to post. My raw js skills aren't what they should be. JQuery has made me weak. (Yet so strong... :muscle:) Seeing as how snap.js was raw I intended for the solution to be so as well.\nJust call the function cascadeDragIgnore() and children under any element with the data-snap-ignore attribute will also inherit it inline. \n:warning: Be sure to call it after any plugins that manipulate the DOM. Otherwise you may end up with children that don't have the attribute. Any dynamically generated elements stuff will also be neglected and will need to be dealt with upon creation. Like I said: Quick Fix\n```\nfunction cascadeDragIgnore() {\n  // Default vars for snap.js\n  var attribute = 'data-snap-ignore';\n  var value = 'true';\n// Initial Vars\n  var nodes = [];\n  var allElements = document.getElementsByTagName('*');\n// Get all elements with 'data-snap-ignore' = true\n  for (var i = 0; i < allElements.length; i++) {\n    if (allElements[i].getAttribute(attribute) == value) {\n      // Element exists with attribute. Add to array.\n      nodes.push(allElements[i]);\n    }\n  }\n// For each parent\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].nodeType === 1) {\n        recurseAndChange(nodes[i]);\n    }\n  }\n}\nfunction recurseAndChange(n){\n    // start with the first\n    n.setAttribute('data-snap-ignore', 'true');\n// Check for children\nif (n.hasChildNodes()) {\n  // Start with first child       \n  var child = n.firstChild;\n  // Make sure we have a child       \n  while(child){\n    // Double check node type         \n    if (child.nodeType === 1) {           \n      recurseAndChange(child);         \n    }\n    // Move to sibling\n    child = child.nextSibling;\n  }\n}\n\n}\n```\n. Thanks @KevinTCoughlin - Snagging that little snippet.\n. Thanks I'll give that a try!\n. Check this FAQ entry for more info on toggle buttons:\nhttps://github.com/jakiestfu/Snap.js#--how-do-i-make-a-toggle-button\nYou could add handlers for the 'check' and 'uncheck' actions of the box to toggle the slide. For modifying the checkbox state, you could use some of the event hooks: \nhttps://github.com/jakiestfu/Snap.js#on-adds-an-event-hook\n(i.e. After the 'stop' event you could check the state of the slider:\nhttps://github.com/jakiestfu/Snap.js#state-returns-detailed-information-about-the-state-of-the-pane\nand modify the checkbox accordingly)\n. I agree that this would expand the overall appeal of snap.js. +1 for these options!\n. @prud,\nIf possible, could you explain a bit more on what you did to configure the handle to mimic the drag from bezel behavior? \nThanks!\n. An apple a day... This is going to be a hassle on smaller ios devices. iPads aren't too much of a problem, but those fat thumbs on small screens are going to be an issue...\n. ",
    "prud": "It might be a bit of an overkill to actually add a dependency just for the sake of the demo menu being scrollable.\nJust have a note somewhere saying that the demos use overflow-scrolling which is not supported on older mobile browsers (both iOS and Android) and that JS scrolling (e.g. iScroll) is compatible with Snap.js.\n. In my opinion it doesn't matter at which version overflow scrolling starts, because it is not a required feature Snap.is.    Developers can decide on their own whether they want to use overflow scrolling or implement it with a JS plugin .. Just make sure to include the minimum required OS version for the particular functionality of your script (dragging, snapping, using all the options, ..).\nWhat you might want to do is adding a hint that the demos use overflow scroll which might not be supported on all browsers that support Snap.is itself. Then link to your preferred JS scrolling frameworks.\n. The drawer just uses CSS overflow scrolling, which should work on iOS5 and above:\ncss\noverflow: auto;\n-webkit-overflow-scrolling: touch;\nThe only issue I'm seeing on the iPad is that sometimes the whole page is scrolling with that iOS overscroll effect. Try to add the following line to your JS to prevent this:\njavascript\ndocument.body.addEventListener('touchmove', function(e) { e.preventDefault(); }, false);\n. +1 that would be useful\n. +1 I'd like to see this option as well.\nI have been experimenting around with the 3 lines of code you pasted above. The content area is not dragged further than maxPosition, which is great, however trying to drag it again after completely opening it seems buggy. \n. While it would certainly be helpful to have this included in one of the examples / demos, I'm really not sure whether this should be part of the plugin's core functionality. @jakiestfu It might really make sense to have seperate demos for some of those \"extended requirements\" (e.g. url support, iscroll implementation, ..) in the future. - sent via Hojoki\n. Another suggestion for a reveal mode would be a different kind of 'Reveal', lets say 'DynamicReveal, which slightly translates the background drawer on the x-axis while dragging. Its used on iOS7 as illustrated here: \n\nHowever, just a feature suggestion, no high priority!\n. Like I said, just an idea I was playing around with and not very important after all. Stay focused on the performance stuff and keep this for future reference or a possible plugin. - sent via Hojoki\n. Oops, didn't wanted to have the second commit in here as well. Anyway, it fixes a flicker when previous drag ended exactly at minPosition, maxPosition or 0.\n. The second commit fixes another flicker that happens when one side is disabled and you drag exactly to destination\nReproduce: \n1. go to http://jakiestfu.github.io/Snap.js/demo/apps/rightDisabled.html\n2. open the drawer\n3. drag the drawer completely to the left to close it right at the destination (left pixel 0)\n4. start dragging the drawer again <-- flicker\n. I'll re-submit this in a new pull request later on.\n. I tried to be as dynamic as possible with this in case the drawer width changes throughout the life-span of the Snap object. Valid cases are mobile devices after orientation changes or desktop usage when changing the viewport size.\n. I thought a bit more about the issue and came up with a solution that seems to work fine for now (without any snap.js code changes):\n```\n$(window).on('resize', function() {\n    // refresh snapper with new drawer width\n    snapper.settings({\n        maxPosition: $('#myElement').width()\n    });\n// refresh snapper position in case it's currently open\nif (isOpened) { snapper.open('left'); }\n\n});\n```\nThis will nicely refresh the drawer whether it's already opened or not.\nYou can close this request for now, I'll delete it later on.\n. I submitted a pull request earlier today that makes it possible to use a DOM element as maxPosition and always take its current width, which should work for your use case: https://github.com/jakiestfu/Snap.js/pull/\nAfter the pull request is merged or after you implemented it on your own, you could do something like this:\nvar snapper = new Snap({\n    element: document.getElementById('content'),\n    maxPosition: document.getElementById('snap-drawer-left')\n});\n. In case you're using jQuery, you could do something like this when initializing your snapper:\nvar snapper = new Snap({\n  element: $('#content'),\n  maxPosition: $('#drawer').width(),\n});\nThis will probably break when you resize the screen, because your drawer width is based on the browser width. Therefore you need to refresh the snapper on every resize event:\n```\njQuery(window).on('resize', function() {\n  if (snapper) {\n    var state = snapper.state();\n// refresh drawer width setting\nsnapper.settings({\n  maxPosition: $('#drawer').width()\n});\n\n// refresh snapper in case it is opened right now\nif (state && state.state === 'left') { snapper.open('left'); }\n\n}\n});\n```\n. You're right, this is possible through a drag handle. Thanks for clearing this up!\n. To be honest I didn't actually implement this, it was just a suggestion :)\n. What it actually does is going back and forth in history, not switching between tabs (like Chrome on Android does it..). On both (Safari iOS7 & Chrome Android), I haven't experienced any major bugs with Snap.js. The tab switching on Chrome for Android seems to prevent all dragging events to reach the DOM, no issues here. Safari on iOS7 tends to open the drawer slightly to the left/right when starting the drag, however if the user will go forward/back in history, the snap.js instance won't matter anyway.\nI don't think this is much of an issue for Snap.js itself. Maybe have an option to prevent dragging from near the edges, but you'd really only need that in some cases.\n. Agree, listen for 'animated' event and check the state afterwards.\n. Might be related to #73 \n. Could you set this up as a minimal example on jsfiddle (or similiar), so I can reproduce?\n. Could you try to set \"addBodyClasses: false\" in the options and see if this might give you a performance boost during dragging? - sent via Hojoki\n. @jakiestfu any ETA on that? I could actually do with just the performance boosts and keep the slide modes for later, hehe ;)\n. This is already implemented and mentioned in the documentation:\nvar snapper = new Snap({\n  element: document.getElementById('content'), // change to your element\n  minPosition: 100, // maximum size of the right pane\n});\n. ",
    "Extracreative": "in ratchet template.html what do you change in the script to the above? & does this also close the menu? \n. where is snap.close(); placed in the script\n```\n    var \n// Helper\n$ = function(id){\n    return document.getElementById(id);\n},\n\n// Instance\nsnapper = new Snap({\n    element: document.getElementById('content')\n}),\n\n// \nUpdateDrawers = function(){\n    var state = snapper.state(),\n        towards = state.info.towards,\n        opening = state.info.opening;\n    if(opening=='right' && towards=='left'){\n        $('right-drawer').classList.add('active-drawer');\n        $('left-drawer').classList.remove('active-drawer');\n    } else if(opening=='left' && towards=='right') {\n        $('right-drawer').classList.remove('active-drawer');\n        $('left-drawer').classList.add('active-drawer');\n    }\n};\n\nsnapper.on('drag', UpdateDrawers);\nsnapper.on('animating', UpdateDrawers);\nsnapper.on('animated', UpdateDrawers);\n\n$('toggle-left').addEventListener('click', function(){\n    snapper.open('left');\n});\n\n$('toggle-right').addEventListener('click', function(){\n    snapper.open('right');\n});\n\n```\n. ",
    "Joseanmola": "Hi @voodoo6 I saw your website with the snap and I would like to contact you, because I would like to do something like you. The menu still opened until the screen goes smaller..\n. ",
    "justindarc": "Haha. Thanks! I have another fix I'll probably check in later today to prevent Mobile Safari from \"bouncing\" when you scroll when you're already at the extent of the scrolling area. By the way, THANK YOU for creating this awesome little library! I had to start a project about two weeks ago and was going to attempt to make something to do the sliding drawers, but then I found this. It worked perfectly for what I needed!\n. Yep. That's exactly what I'm talking about. I have it working in the app I'm working on. I'll extract it out and send another PR later when I get back home.\n. @jakiestfu Here's the code I'm using to prevent the elastic bouncing when you start scrolling past the extremities on iOS. I was gonna try and put it right into snap.js, but wasn't sure how you wanted to implement it:\n``` javascript\nif (!!('ontouchstart' in window)) {\n    window.addEventListener('touchstart', function(evt) {\n        var element = evt.target;\n    while (element) {\n        if (element.classList.contains('snap-drawer') ||\n            element.classList.contains('snap-content')) {\n            var scrollHeight = element.scrollHeight;\n            var offsetHeight = element.offsetHeight;\n            var scrollTop    = element.scrollTop;\n            var maxScrollTop = scrollHeight - offsetHeight;\n\n            if (scrollTop <= 0) element.scrollTop = 1;\n            if (scrollTop >= maxScrollTop) element.scrollTop = maxScrollTop - 1;\n            return;\n        }\n\n        else {\n            element = element.parentNode;\n        }\n    }\n});\n\n}\n```\n. Also, I should mention that the code above uses event delegation to attach itself which may be overkill if you aren't creating new drawers, etc. dynamically.\n. @jakiestfu I'll try and throw a demo together today. When I was testing it on the default.html page, unfortunately since the main content area doesn't overflow, the elasticity can't be stopped. However, the drawer content does overflow and it correctly prevented the elastic bounce (where the entire Mobile Safari toolbar and all bounces offscreen) inside those areas. I'm still investigating how to handle the case where there is not enough content to overflow and scroll (such as the main content area in the demos) and I have a few ideas that might work.\n. ",
    "webbudesign": "I found a solution after update 1.9.3\nChange line 50;\nto\n. ",
    "saramgsilva": "i am using the snap.min.js version 1.9.2 and it not works, and i have hasTouch: (doc.ontouchstart === null), .... \n. i tried to used this version and it don\u00b4t solve the left slide show/hide in IE10 or IE11 :( in my case in Windows Phone 8.0 and Windows Phone 8.1\n. i have the same issue.... someone solved it?\n. ",
    "jbest84": "Rolling this pull request into  https://github.com/jakiestfu/Snap.js/pull/48\n. No problem!\n. Our QA found an issue where changing the device orientation when the snap.js menu was open would cause the body css classes to remain even though the menu closed. Added a fix for this as well.\n. Found the root cause of the issue (un-did my previous commit). utils.klass.remove no longer relies on ordering. The class name is removed, and the remaining string is trimmed.\n. @kingofslowmo My pull request does not update the minified version. Our app uses the un-minified version (we have our own build process).\n. @kingofslowmo Sure - you are free to grab the changes if you want. Just keep in mind the owner if this project may or may not accept my pull request.\n. ",
    "drantunes": "Thanks!\nThe Snap.js is very robust and could easily be applied to any responsive web project. As screen resolutions on desktops are ever increasing (unlike mobiles), keep the menu opened (in some cases) could help in the usability and flexibility (especially in transitions and reload of the pages).\n. ",
    "paulbarroso": "toolbar {\nposition: absolute;\ntop: 0;\nright: 0;\nleft: 0;\nwidth: auto;\nheight: 50px;\n\n}\ncontent {\nposition: absolute;\ntop: 0;\nright: 0;\nleft: 0;\nbottom: 0;\n\n```\nmargin-top: 51px;\nwidth: 100%;\noverflow-y: auto;\noverflow-x: hidden;\n-webkit-overflow-scrolling: touch;\n```\n}\n. ",
    "interactivellama": "I originally had my toolbar within .snap-content (the way that the demo is setup), then it drags/slides with the content, but that caused it to not be locked to the viewport, only locked within the scrollable .snap-content. To have a fixed toolbar you need to place the toolbar outside of .snap-content in the code and apply position: fixed to it. \nThen you will have a fixed toolbar, but it won't animate/drag then. If you don't plan on using the drag functionality and only start SnapJS on button click, then animate the toolbar to slide (css transform) for the event hook, ex.- .on('start').\n. ",
    "ppoisson": "Easy fix, simply add another instance of the Snap object, for example:\njavascript\n    var snapper = new Snap({\n        element: document.getElementById('content')\n    });\n    var snapper2 = new Snap({\n        element: document.getElementById('snap_head')\n    });\n. ",
    "ipalaus": "Please merge! Thanks :+1: \n. ",
    "igorlima": "I don't think so. My intention is gradually putting tests in the library. There are a lot of tools for behaviour test as: jasmine, cucumber, rspec with capybara and so forth...\nI don't know exactly which tool would be better for our case. But I'm still studying to contribute with that. At first, I would like to see a continuous integration in this awesome library.\n. ",
    "danielgatis": "yep! same here with ipad\n. ",
    "matmac": "Same thing here, if you have an object with scroll capabilities below the \"snapped\" element, when you try to scroll those elements the whole screen can be moved, like paulbarroso y think it has something to do with the overflow.\n. davgpothic, you're right, it happens only when the left sidebar has scrollable content.\n. It was a typo in some other function, sorry...\n. ",
    "davgothic": "I can confirm this is an issue with both iPhone and iPad. Android devices appear to be unaffected.\n. @jakiestfu I believe I've got the same issue as @paulbarroso. You can see it on your demo on an iPad/iPhone.\nIf you open the sidebar and then put your finger down on the sidebar and pull left it'll peek off the screen by maybe 20 or so pixels, on the app I'm working on it goes right off screen and messes up future open/close positions of the sidebar.\nI've only managed to get your demo to scroll the whole side menu offscreen once and am not sure how to reproduce the issue on the demo over and over.\nAlso this only appears to happen on a left sidebar.\n. I'm not certain but this seems to only happen when the left sidebar has enough vertical content to scroll.\n. ",
    "mederic38": "Same problem here, the entire page is scrollable when the menu is open and we scroll left inside the menu. I tried to fix with overflow-x:hidden in my css but I still got the same behaviour. It mess up the all screen. Any way to fix this ?\n. Still have the problem, it occurs mostly when the vertical content is bigger than the screen. I already set overflow-x : hidden and tried a lot of things but it still not work.\nAnyone managed to fix this ?\n. ",
    "andreaslindahl": "I have the same problem. Any suggestions on how to fix this?\n. ",
    "rehmondo": "@andreaslindahl I've managed to avoid it by adding https://github.com/jakiestfu/AppScroll.js/ - I wanted to have a fixed header in my app anyways - but you can nicely scroll the main content vertically, slide the menu etc no problems with the entire page being dragged.\nI did discover on my own page part of the horizontal scrolling occurred because of a < li > width that was inherited as 100% which I had also added a margin-left to. \nA good way to test if your horizontal scrolling is caused by a similar problem is to open up your page on a computer and reduce the window size (to min mobile dimensions) - I used chrome > dev tools to hover over each element and once the dev tool highlighted it (complete element inc it's width is highlighted) I was able to determine where the fault lay on my page.\n. ",
    "scottgallant": "I'm having this issue, but it only happens some of the time.   It seems to happen when I swipe right, while the menu is open, then when I swipe left (on the menu, not the content).  See images.\n\n\n\n. Thanks for the suggestion, but it doesn't help unfortunately.  See a video of it here: http://www.youtube.com/watch?v=gaKZB7Z6vyc&feature=youtu.be \n. When I first open the menu, I can't drag it away from the left edge of the view finder (no horizontal \"website dragging\").    Eventually I can drag it horizontally away from the left edge of the view finder and that's when the problem starts happening. \n. My solution for this was to add an empty div over the content area while the tray is open.  When the div is clicked, it hides itself and closes the menu.\nHTML\nhtml\n<div class=\"drawers\">\n    <div class=\"left-drawer\"></div>\n    ...stuff\n</div>\n<div id=\"content\">\n    <div class=\"prevent-click\"></div>\n    ...stuff\n</div>\nJS\njavascript\n// create snapper, adds a class to body when open and closes when tapped\nvar snapper = new Snap({\n    element: document.getElementById('content'),\n    addBodyClasses: true,\n    tapToClose: true\n});\nCSS\n``` css\n/ Empty div to prevent interaction with content /\ndiv.prevent-click {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background: transparent;\n    z-index: 10;\n    overflow: hidden;\n    display: none;\n}\n/ Show the empty div when the tray is open (only using left tray in this example) /\nbody.snapjs-left div.prevent-click {\n    display: block;\n}\n```\nJS\njavascript\n// hide empty div when clicked\n$('.prevent-click').live( \"click\", function() {\n    $(\".prevent-click\").hide()\n});\n. pointer-events: none; is a more elegant solution but isn't well supported (>= IE9). Which is why I had to use the the empty div method above.\nhttp://css-tricks.com/almanac/properties/p/pointer-events/\n. ",
    "tschleuss": "Use overflow-x: hidden; in .snap-drawers css selector\n.snap-drawers {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: auto;\n  height: auto;\n  overflow-x: hidden;\n}\n. Yes, i want to know to.\n. ",
    "KoenJacobs": "Anny working fixes on this one yet?\nI'm having the same issue on my android device:\n- If you open the sidebar and then put your finger down on the sidebar and pull left it'll peek off the screen by maybe 20 or so pixels.\n- This only happens to the left sidebar\n- This only happens when you open the left sidebar by dragging, it doesn't happen when you open the sidebar using the button\n- None of the above fixes have worked for me so far\nSnap.js works like a charm if this little bug can be fixed :)\n. I would love to see an answer on this one to. I tried something like this:\n$(window).resize(function () {\n    if ($(window).width() < 1024) {\n        snapper.enable();\n    } else {\n        snapper.disable();\n    }\n});\nBut that doesn't seem to work. I think it has something to do with the event handler, because i added a toggle button wich works like this:\naddEvent(document.getElementById('open-right'), 'click', function(){\n    if( snapper.state().state==\"right\" ){\n       snapper.close('right');\n    }else {\n        snapper.open('right');\n    }\n});\nI can\u00b4t seem to find anny documentation on how to use the enable and disable functions.\nI also opened a question on stackoverflow: http://stackoverflow.com/questions/21890876/how-can-i-dynamically-enable-and-disable-snap-js-by-jakiestfu\nThanks in advance!\n. ",
    "tomasbedrich": "I fixed this bug by clipping the content using JavaScript. Then the browser doesn't have a chance at all to draw the overflowing content badly.\nsnapper.on('animated', function() {\n    if ( snapper.state().state == 'left')\n        $('#content').css('clip', 'rect(0px, ' + (window.innerWidth - $('#side-menu').outerWidth()) + 'px, auto, 0px)');\n});\nsnapper.on('start', function() {\n    $('#content').css('clip', '');\n});\n. ",
    "DimoStoyanov": "This has been fixed pretty easy.\n\"So setting overflow: hidden on the drawer and content elements does the trick. You can also achieve roughly the same thing by setting position: fixed on both elements, then just having the content inside of each element scroll. \"\n. I love you @jayd3e!\n. ",
    "imandic": "I'm having this 20px problem for days. I'm working on PhoneGap application, simple one, left is menu with few dynamically generated points, right is content. No fixed toolbars, no fancy animation. \nSometimes I can put finger on menu and move whole menu AND content to the right. And when I try to take it back on left, the gap appears on right side (it's almost the width of menu, on some devices it's black, on some is white)\nI have tried everything, positon:fixed, overflow:hidden, but without success. Tried 2.0rc1, iScroll, clipping content...Tried on 6 different android devices.\nBUT, if I disable left drawer and put menu in right, everything working great. No \"20px\" scroll, no sliding content when I swipe left or right in menu. \nSomeone with more JS knowledge should examine snap.js, I'm not to good in coding but there's should be something wrong when left menu is bad but right one working great?\n. ",
    "jtrussell": "+1\nI'd love to be able to specify semver tags over here!\n. That's a pretty awesome list of updates!\n@jakiestfu Would you be up for getting semver tags on this repo just before + after the v2.0 branch gets merged in? The bower folks would be eternally grateful :)\n. @jakiestfu Absolutely.\nSemver is short for semantic versioning - there's a pretty short but informative spec here but at a high level it's a versioning scheme that lets the third parties which depend on your package know when things change that they'll have care/worry about. So whenever you publish new changes and update the version number we can compare the new version to the old and know:\n- Major version bump --> changes break backward compatibility\n- Minor version bump --> changes add new features\n- Path bump --> changes fix a bug issue but don't alter public facing api\nBower (and other package managers) key in on your package's published versions when resolving dependencies. \"Adding semver tags\" just means git taging your repo to match its package version. For example angular-snap has Snap.js as a dependency - and here's a snapshot of its tagged versions:\n\nI'd like to be able to tell bower that e.g. version 1.0.0 of angular-snap is compatible with all versions of Snap.js that match 1.x but it requires that the Snap.js repo actually be git taged to expose those version numbers.\nHope that helps - also, I don't believe there's a way non-committers can tag a repo (i.e. it's not something one could send a pull request for). \n. ",
    "ngryman": ":+1: \n. ",
    "jkatzer": "yes please.\n. ",
    "sviatco": "I agree with @schmolzp \nHere is another stackoverflow thread, which refers to this issue. Hopefully it will get fixed in iOS7.\nYou should probably close this issue.\n. ",
    "vinhtq": "I have the same problem! But i think Apple will not fix that soon!\nI try to change the code in snap.css like this:\n.snap-content {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: auto;\n  height: auto;\n  z-index: 2;\n  /overflow: auto;/\n  -webkit-overflow-scrolling: touch;\n  -webkit-transform: translate3d(0, 0, 0);\n     -moz-transform: translate3d(0, 0, 0);\n      -ms-transform: translate3d(0, 0, 0);\n       -o-transform: translate3d(0, 0, 0);\n          transform: translate3d(0, 0, 0);\n}\n.snap-drawer {\n  position: absolute;\n  top: 0;\n  right: auto;\n  bottom: 0;\n  left: auto;\n  width: 265px;\n  height: auto;\n  overflow: auto;\n  /-webkit-overflow-scrolling: touch;/\n  -webkit-transition: width 0.3s ease;\n     -moz-transition: width 0.3s ease;\n      -ms-transition: width 0.3s ease;\n       -o-transition: width 0.3s ease;\n          transition: width 0.3s ease;\n}\nIt will fix the problem, but i have another problem is when you scroll down the left panel page you will have extra space down it!\n. Me too!\n. I have the same problem!\n. ",
    "adyz": "Hi\nThe -webkit-overflow-scrolling: touch works now is iOS7, but since the content has the absolute position, the top bar tap is still now working. Din anybody found any solution for this\n. ",
    "vanderlin": "Any word on this bug - I am still having it.\n. ",
    "yumyo": "that's great! +1\n. simply ... Gr8!!! ; )\n. ",
    "Dindaleon": "Hi there, I see the topic is very old and you have not implemented the suggested styles. It would be very nice to have the 'over' style.\n. ",
    "rttmax": "would be great +1\n. ",
    "hkirsman": "+1 for over style\n. ",
    "giuliolastra": "+1 for over style\n. ",
    "nhh": "yeah - \"move\" as option would be pretty nice!\n. ",
    "hexdesign": "Hi \nThanks for your help guys... I figured it might be a tricky request. Be really sick if I can get it working though.\n@prud... Not sure if my JS is good enough to implement that to be honest!\n@jakiestfu... Do you know how I would go about doing that? No worries if it's super complex...\n. ",
    "koraresu": "``` javascript\nvar snapper = new Snap({\n    element: document.getElementById('content')\n  });\n  snap(snapper,75);\n  $(window).resize(function(){\n    snap(snapper,75);\n  });\nfunction snap(snapper,percentage){\n  var w  = ($(window).width()percentage)/100;\n  var mw = w(-1);\n  snapper.settings({\n    //disable: 'right',\n    tapToClose: true,\n    touchToDrag : false,\n    maxPosition: w,\n    minPosition: mw\n    });\n}\n```\n. ",
    "takrishna": "Hi  jakiestfu ,\nThanks a lot for Snap.js, Can you please help me with any working example that you may have for this features (right-bezel drawer/dragger)\nAlso strangely the demo gives me flicks and stranded animation in my phone - HTC Sensation - has dual core processor and ICS running. Facebook/Gmail app slide menu is far richer. Actually when I swipe, the content movement starts and immediately it halts for a second before it resumes the smoothness. Please suggest if there is any performance thread already present Or I would like to start one on it.\n. Please post your code so that we could test in our test box and try to replicate to understand your problem\n. Opened and closed will definitely help.\nThough temporarily solution can be:\nI think you can use the drawer state to get the opened/closed events. \nTry something like snapper.on('open')\n{\ncheck the state of drawer - if done opening\n}\n. No.. the content is simply empty\nCan you have a look at \nhttp://stackoverflow.com/questions/18637603/on-touching-uppermost-div-selects-contents-of-div-under-it-z-index-property?noredirect=1#comment27439097_18637603\nThe above question deals with content and snap-drawer-right divs.\nWhen I touch the content div I see the contents of snap-drawer-right highlighted.\nIdeally the snap-drawer-right behind the content div right ?\nI have a screen shot attached in the question at stackoverflow.\n. @jakiestfu  @prud I tried making that change It fixed the performance issue - lesser flick !! THANKS A LOT - but not yet.\nIt resulted in another issue - I have both left and right swipe activated - I see the right side superimposed over the left now :( \nShould somebody please help me there.\nCan you have a look at the stackoverflow question in my previous post.. I have mentioned another problem. The touch I make in the \"content\" div is selecting/touching the content in \"snap-drawer-right\"/\"snap-drawer-left\" div. \nThis must be some CSS fix or something.. \nlike say.. \n1. make both the div invisible when the content in focus\n2. make the only visible div - either right/left be visible at a time - when one side is swiped.\n?? \n. @jakiestfu @prud \nI have found TWO MAJOR REASONS\n1. When I trigger the snapper.on('drag', ), the slider starts to flicker. Every pixel moved is triggering the snapper.on('drag') function and cpu goes sluggish. Causing the flick.\n2. When there is nothing in the content div - since dragger-left and dragger-right are one over the other, the contents of the dragger-left/dragger-right are highlighted - the slide function get triggered only after the highlight.\nCan you help me with if i could slide the left/right content out instead of superpose the content div over the left/right drawer ?\nPLEASE HELP\n. @jakiestfu  For understanding, if you set all the divs with translucent background. you can see through the content div to view the snap-drawer-left/snap-drawer-right divs. When there is nothing in the content div or ther are empty areas and you simply swipe down the content div, I see the contents of the snap-drawer-left/snap-drawer-right div getting scrolled. Ideally no content of snap-drawer-left/snap-drawer-right should scroll when i swipe/when i am in content div right ?\nThis could very well be a feature of webkit/chrome engine on mobile phones. When i scroll using mouse on desktops there is no scroll. This however is very apparent in mobile phones. I have tested in Sensation XE, Samsung Phones.\nThis is how the div screen shots would look after getting the divs to translucent\n\n. Well, if we keep the layers behind the content div invisible/display:none,\nI think it should solve the issue ?? So the script must be tweaked such\nthat the divs are NOT STACKED one over other. except when in left/right\nopen states.. ie When only content is displayed the other two divs must be\ndisplay:none/invisible.\nRegards,\nKrishna\nOn Mon, Sep 23, 2013 at 10:12 PM, Jacob Kelley notifications@github.comwrote:\n\n@takrishna https://github.com/takrishna Correct, there is a scroll\nwhere there shouldn't be. I do not know why this happens, but further\ntesting could be relevant to this topic to determine whether this is a\nSnap.js layout bug or a webkit rendering issue.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jakiestfu/Snap.js/issues/115#issuecomment-24934087\n.\n. great.. my email is takrishna@gmail.com.. :) can you send me the entire\nproject ? I will test it.. i have myself done some tweaking in the draggy\nside transistion (point 1 above) I think i can try to integrate both of\nthem and we can have a good performing script.\n\nRegards,\nKrishna\nOn Tue, Sep 24, 2013 at 12:14 PM, Jacob Kelley notifications@github.comwrote:\n\n@takrishna https://github.com/takrishna I just coded up what will\neventually be called \"layers\". It makes it simple to select the content to\nbe displayed. Instead if stacking like you said, it uses display\nblock/none. It increases performance as well\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jakiestfu/Snap.js/issues/115#issuecomment-24978137\n.\n. @jakiestfu Can you please share the file with the changes you have made \n. 1. Try to position the fixed div on the entire page and not in content div\n2. You may want to explore the snapper.on('open', function() function to hide the fixed div(set the css property inside the function) when the swipe event is triggered.\n. @smokingbarrel\nTo fix the second step you may club with drawer status/state \"animated\" on the snapper.on function/state and then hide using css so the wipe effect persists.\n\nMay be for the positioning you can try to experiment with z-index and get the snapper above the content/fixed content, so that you have achieved the wipe effect ? if the z-index experiments work may be you do not require the second step at all\n. @jakiestfu  any help here ?\nu have a screen shot or something ?\nRegards,\nKrishna\nOn Tue, Sep 10, 2013 at 11:50 AM, smokingbarrel notifications@github.comwrote:\n\nI guess I can try to figure out the negative translate for that div once\nit's placed into the content container.\nThe z-index solution sounds more attractive though. The only problem is\nthat the drawer sits under the content, once I change its z-index to the\nsame z-index as content or above, the drawer just becomes a fixed side bar.\nIs there a trick to have drawer's z-index to be higher than the content's\nwhile retaining all the functionality?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jakiestfu/Snap.js/issues/121#issuecomment-24136525\n.\n. \n",
    "douson24": "Can i use a few drag elements?\n. ",
    "whitneyland": "Great!  I did look through the demos, but I know every permutation can't be kept there.  I've going to give it try.  Thanks -\n. ",
    "chrizzio1": "I found this issue too. \nI added\njavascript\nclearInterval(cache.animatingInterval);\ndirectly after Line 209. \nNow it should work.\n. ",
    "themadcelt": "I simply removed the interval altogether so that the 'animating' gets called only once. I'm using the 'tap to close' setting and I'm doing some other tom-foolery that requires me to know when the content is actually moving. Since the 'start', 'end', and 'animated' events get called every time the screen is touched, this is my last hope.\nAlso - great work on the component! \n. ",
    "alexcroox": "I guess if you can find out the distance from the edges it catches the touchstarts and then make sure Snap.js doesn't attempt to handle touch movements that close to the edge. As for disabling it entirely, wouldn't be suprised if its handled at OS level.\n. ",
    "ghost": "fyi: This issue appears only on mobile. Apparently the dragging method gets called on a click event as well.\n. \u0412\u043e\u043e\u0431\u0449\u0435 \u0430\u0445\u0443\u0435\u043b\u0438, \u0447\u0435\u043b\u0443 \u043d\u0435 \u043f\u043e\u043c\u043e\u0433\u043b\u0438 \u0434\u0430\u0436\u0435...\n. Please merge this! \n. ",
    "codletech": "Solution: apply stop propogation when your button's \"ontouchstart\" called.\nWorked for me, good luck :)\n. ",
    "JohannesRudolph": "Ah damn, you're actually right (been coding too long today...) It'd only\nhelp if I could apply something to that css class that'd allow me to\nachieve that behavior. What I basically want is a central place to control\nthat e.g. all divs that have a chart apply data-snap-ignore=true. I'll\nmaybe have to write my own angular.js directive or something to enforce\nthis consistently.\nOn Sat, Jun 15, 2013 at 9:30 PM, Jacob Kelley notifications@github.comwrote:\n\nHow is it more convenient than data-snap-ignore=\"true\"?\nOn Saturday, June 15, 2013, Johannes Rudolph wrote:\n\nHi,\nI think this would be easy enough to add, but I'd appreciate if we could\nhave a css class (e.g. .no-snap) as an alternative to\ndata-snap-ignore=\"true\".\nIf you take a look at e.g. the Facebook mobile site, they allow swiping\neverywhere except on elements that provide swiping themself (e.g.\npicture\ngaleries). I'd intend to so the same with my App where I display a lot\nof\ngraphs etc. to which I'm applying the same css anyway, so it would be\nconvenient to do it that way.\nWhat do you think?\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/jakiestfu/Snap.js/issues/78>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jakiestfu/Snap.js/issues/78#issuecomment-19502036\n.\n. \n",
    "TommyKolkman": "I've got this problem too, it has something to do with the overflow:auto. The overflow:auto kills all jQuery scroll functionality as well. I made a fixed navigation bar that followed your scroll position, basically, and now that's broken. Any ideas?\n. I've got a demo setup at http://elephant.elephantlabs.nl/snap_test/over_ons.html\nSnap.js is working here, as you can see, and the included script jquery.theme.js provides the scroll logic. The bar #SubMenu should stay fixed when the browser reaches its offset.\nIs this demo sufficient for you?\n. @jakiestfu You are right that the static header should probably be outside of the #content.scrollable. However, at some point, it should stick, something I detect via using $(window).scroll();. \nThis, however, is not working anymore. I do understand the scope has changed because I'm scrolling inside of #content.scrollable now. $('#content.scrollable').scroll(); is not firing though, that's my big problem... Any thoughts on that?\n. ",
    "RobertsNeil24": "Hi Jacob,\nI have put together a very rough demo.\nhttp://codepen.io/anon/pen/wFiGg\nI can't seem to link to your snap.js file, but the code is all there so you can get the general idea.\nThanks.\n. On the one hand I agree that fixed elements are not the best for mobile devices, however on the other I think that a fixed header on a desktop layout is great for good UI and UX design principles as the navigation is always displayed for the user.\nI have even tried to implement snap.js for only mobile layouts by detecting screen resolution... however by using this plugin, it prevents the desktop layout from implementing a fixed header as well? Perhaps you may have a better solution?\nThanks.\n. ",
    "TimMeade": "was this every addressed?   Hitting with bootstrap 3 navbar-fixed-top.   Seems to be same issue.\n. ",
    "j5uh": "@TimMeade I'm with you in the same boat. I'm using bootstrap 3 and ever fixed element is not working. :/\n. The workaround I came up with was moving the header/nav out of the absolute containers. You can see what I did here: \nhttp://www.blinds.com/mobile\n. ",
    "ericpeters0n": "Ditto, bootstrap navbars break. Suggested css workarounds to achieve desired behavior (i.e. fixed navbar and footers in snap-content)?\nWhile not consistent with the canonical Facebook drawer example or most other apps (where the navbars and footers slide as well), @jakiestfu's suggested refactoring of the layout above does work in bootstrap3... It just means your drawers get less real estate.\n. ",
    "ebuildy": "This is a very old chronium bug:\nChrome cannot render position:fixed on elements under a transformation (http://code.google.com/p/chromium/issues/detail?id=20574)\n. I believe you need to use the iScroll Javascript plugin, to emulate webkit-scroll-overflow property missing.\n. This is because snap set the main content position to absolute, top and bottom = 0. So the view port is actually \"little\".\nThis bug appears on all iOS (w/o Ratchet).\nSet position to relative will cause other bugs (drawer blink when animating, drawer will stay at top so if you  scroll down you will not see the menu etc...).\nWhere can we test your solution?\nThanks\n. I believe this bug \"Snap disable the navigation bar to be hidden when user scroll down\", in iOs ans Android is just killing the UX like you said.\nYour fix works Like a charm on m'y Android 4.4 Google chrome browser, but definitively we need a very clean solution, maybe wrap all the Snap stuff with a relative DIV\n. ",
    "dyba": ":watch:\n. ",
    "ms88privat": "you dont need a fixed position nav-bar. position it absolute within the snap content. \nThen add another wrapper in the snap content with:\nwrapper {\nposition:absolute; \nz-index:1;\ntop: {{height of nav-bar}} px; left:0;\nwidth:100%;\noverflow:auto;\n\n}\nand apply something like iScroll.js to the wrapper for scrolling the content inside the wrapper ONLY. This way the nav-bar will allways stay visible and will slide away with the content if the drawer opens.\n. ",
    "OliverKK": "@ms88privat \nDo u have a example for your thoughts?\n. This issue is reproducable by open the demo http://jakiestfu.github.io/Snap.js/demo/apps/default.html with any Windows Phone 8.0.\nSame problem here.\n@jakiestfu Are u still maintaining this project?\n. ",
    "pcompassion": "I'm having the same problem... \n. same issue here, it's a real deal breaker. They should have stated it in the doc about this.\nI found removing snap-content { overflow: auto } does the job, but it has other side-effects...\n. ",
    "roymj88": "@jakiestfu : You are correct in your own ways regarding the structure of DOM. But consider a single page application where you need to envelope the entire thing inside a container. Take a list view for example, which is inside snap content. I need to get the scroll event of the list. This will not work as the the DOM no longer recognizes the scroll, position properties any more.\n$(window).on('scroll', function(){\nalert('This doesnt get called.\");\n});\nKindly do address this as many of the users are having the same issue and its currently been over-looked. What you've created is an awesome plugin and it would be a shame if we cannot find a way around this.\nCheers\nRoy\n. Hi, I am having the same issue. After lot of debugging, i found that the position:absolute for  the following css style is causing default scrollTop to fail. \nsnap-drawer, [snap:drawer], [snap-drawer], [data-snap-drawer], [x-snap-drawer], .snap-drawer, .x-snap-drawer, .snap-drawer{\n    position: absolute; \n}\nIf we comment out this part, scrollTop works perfectly. \n. ",
    "frankie-loves-jesus": "Check out jQuery Mobile fixed headers with iScroll:\nhttp://jsfiddle.net/frank_o/jd2du1ga/\n. Hello! I think the new iScroll 5 is superior to Overthrow. Please let me know if you disagree. Here's a quick demo:\nhttp://jsfiddle.net/frank_o/as8P4/10/\n. @kennethkalmer could you make sure it's available via http://bower.io/search/?q=snap? That way I can add it to https://rails-assets.org/components/new.\n. @kennethkalmer I just regged kennethkalmer-snapjs. Hopefully it should be searchable via http://bower.io/ soon.\nTried adding it to https://rails-assets.org/components/new but getting kennethkalmer-snapjs has no versions defined. Please create an issue in component's repository. -- maybe you need to set a semver-compatible version ie. 2.0.0-rc.1?\n. Anytime @kennethkalmer. Looking forward to your update.\n. @kennethkalmer any news? @jakiestfu we need you man!\n. Yo! Welcome back! Thank you so much man, I really appreciate it.\n. Turns out I just had to move .snap-drawers outside the jQuery Mobile page.\nMany thanks to @nitishdhar.\n. https://github.com/jakiestfu/Snap.js/blob/develop/demo/apps/rightDisabled.html\n. Could you please close this issue?\n. Could you set up a testcase using http://jsfiddle.net or similar?\n. ### Reduced test case required\nAll bug reports and problem issues require a reduced test case. See http://css-tricks.com/reduced-test-cases/ on why they \"are the absolute, ... number one way to troubleshoot bugs.\"\n- A reduced test case is an isolated example that demonstrates the bug or issue.\n- It contains the bare minimum HTML, CSS, and JavaScript required to demonstrate the bug. No extra functionality or styling.\n- A link to your site is not a reduced test case.\n. > Why would one want to duplicate the content on both sides\n- Swiping from left to right to open menu is the defacto standard on all mobile devices\n- However, it's easier for users (the majority of which are right-handed) to swipe from right to left due to the placement of their thumb and the way they hold their mobile devices\n- Overall navigation is also simplified by encouraging a single menu as opposed to two\n\nand nod have different content on every side ? I was struggling to achieve this, but it seems impossible. \n\nJust fill out <div class=\"snap-drawer snap-drawer-right\">. By leaving it empty, the menu will be duplicated on both sides.\nHaving said that, you need to provide us with a test case. Please see CSS Tricks - Reduced Test Cases on why they \"are the absolute, ... number one way to troubleshoot bugs.\"\n- A reduced test case is an isolated example that demonstrates the bug or issue.\n- It contains the bare minimum HTML, CSS, and JavaScript required to demonstrate the bug. No extra functionality or styling.\n- A link to your site is not a reduced test case.\n. Could you close this @enr00ted?\n. https://github.com/adobe-webplatform/Snap.svg/issues/299\n. Thanks @Palestinian !\n. Note that @Palestinian has come up with a temp solution:\nhttp://stackoverflow.com/questions/26288666/add-destroy-method-to-snap-js-mobile-panel-plugin\nNicely done!\n. Hi! How would we know? You need to provide a live testcase:\nhttp://css-tricks.com/reduced-test-cases/\n. Hi! Nice work, but using a mobile menu for desktop sounds pretty pointless to me.\n. @ihabovich please read http://css-tricks.com/reduced-test-cases/. Thanks!\n. ",
    "heyaustinwood": "Any other solutions besides utilizing @frankie-loves-jesus iScroll option?\n. +3\n. ",
    "andre989": "+1\n. up\n. +1\n. ",
    "wdac-davy": "Position: sticky seems to work on 'fixed' navigation inside the snap area, but it is not supported by any IE browser so it's probably not a viable solution. This really needs to be looked at, though. It looks very odd if the navbar doesn't slide over.. ",
    "wcoppens": "Thanks!, i've been searching for hours to find the correct way to do this. Does anyone know when it will be in the master branch?\n. ",
    "jamuhl": "just a small change i needed....the thanks goes to you for providing this.\n. ",
    "felipefermin": "Same issue here.\nDarn address won't hide now. \n. ",
    "hugoborjesson": "I have a \"sort of\" working solution, with a modification of the script Nate Smith (https://gist.github.com/nateps/1172490) suggested. \nOnly tested on iPhone, and it flickers a bit. Maybe someone can come up with something better?\n\n            // Modified version of https://gist.github.com/nateps/1172490\n            var page = document.getElementById('pageWrapper'),\n                ua = navigator.userAgent,\n                iphone = ~ua.indexOf('iPhone') || ~ua.indexOf('iPod'),\n                ipad = ~ua.indexOf('iPad'),\n                ios = iphone || ipad,\n                // Detect if this is running as a fullscreen app from the homescreen\n                fullscreen = window.navigator.standalone,\n                android = ~ua.indexOf('Android'),\n                lastWidth = 0;\n            setPageHeight();\n            setTimeout(function() { window.scrollTo(0, 0); }, 8000);\n\n            $('#contentWrapper').scroll(function (event) {\n                var y = parseFloat($('#contentWrapper').scrollTop());\n                if (y<-15) {\n                    resetPageHeight();\n                } else if (y>60) {\n                    setPageHeight();\n                    setTimeout(function() { window.scrollTo(0, 0); }, 1);\n                }\n            });\n\n            $(window).resize(function(){\n                var pageWidth = page.offsetWidth;\n                // Android doesn't support orientation change, so check for when the width\n                // changes to figure out when the orientation changes\n                if (lastWidth == pageWidth) return;\n                lastWidth = pageWidth;\n                setPageHeight();\n                setTimeout(function() { window.scrollTo(0, 0); }, 1);\n            });\n\n            function setPageHeight() {\n                if (ios) {\n                    if (iphone && !fullscreen) {\n                        page.style.height = (document.documentElement.clientHeight + 60) + 'px';\n                    } \n                } else if (android) {\n                    page.style.height = (window.innerHeight + 56) + 'px'\n                }\n            };\n\n            function resetPageHeight() {\n                if (ios) {\n                    if (iphone && !fullscreen) {\n                        page.style.height = document.documentElement.clientHeight + 'px';\n                    } \n                } else if (android) {\n                    page.style.height = window.innerHeight + 'px'\n                }\n            };\n\n        \n. ```\n        // Modified version of https://gist.github.com/nateps/1172490\n        var page = document.getElementById('pageWrapper'),\n            ua = navigator.userAgent,\n            iphone = ~ua.indexOf('iPhone') || ~ua.indexOf('iPod'),\n            ipad = ~ua.indexOf('iPad'),\n            ios = iphone || ipad,\n            // Detect if this is running as a fullscreen app from the homescreen\n            fullscreen = window.navigator.standalone,\n            android = ~ua.indexOf('Android'),\n            lastWidth = 0;\n    setPageHeight();\n    setTimeout(function() { window.scrollTo(0, 0); }, 8000);\n\n    $('#contentWrapper').scroll(function (event) {\n        var y = parseFloat($('#contentWrapper').scrollTop());\n        if (y<-15) {\n            resetPageHeight();\n        } else if (y>60) {\n            setPageHeight();\n            setTimeout(function() { window.scrollTo(0, 0); }, 1);\n        }\n    });\n\n    $(window).resize(function(){\n        var pageWidth = page.offsetWidth;\n        // Android doesn't support orientation change, so check for when the width\n        // changes to figure out when the orientation changes\n        if (lastWidth == pageWidth) return;\n        lastWidth = pageWidth;\n        setPageHeight();\n        setTimeout(function() { window.scrollTo(0, 0); }, 1);\n    });\n\n    function setPageHeight() {\n        if (ios) {\n            if (iphone && !fullscreen) {\n                page.style.height = (document.documentElement.clientHeight + 60) + 'px';\n            } \n        } else if (android) {\n            page.style.height = (window.innerHeight + 56) + 'px'\n        }\n    };\n\n    function resetPageHeight() {\n        if (ios) {\n            if (iphone && !fullscreen) {\n                page.style.height = document.documentElement.clientHeight + 'px';\n            } \n        } else if (android) {\n            page.style.height = window.innerHeight + 'px'\n        }\n    };\n\n```\n. The original script would always hide the address bar. The changes I made was to make the address bar appear again if the user scrolls 15px above the top (elastic scroll) and then disappear again when scrolling down again (60px down)\n. ",
    "Christo44": "On the demo's included, my address bar is fixed to the top, and does not hide when I scroll down. Is there a way to override that  so the address bar does disappear ?\n. ",
    "jstxx": "Easy CSS fix is to set your body's min-height to at least that of the page along with using the \n       setTimeout(function(){\n        window.scrollTo(0, 1);\n    }, 0);\nmethod.  Setting it to 500px does the trick for iphone haven't tested with android.\n. ",
    "penafo": "up! anyone managed to fix this?\n. @hugoborjesson On the solution you propose how are #pageWrapper and #contentWrapper related?\nthe screen real estate of the URL address bar is very much needed ... can you give me a help here http://douro.ga ? I alreadyy tried everytging. I sure need some help here ...\n. ",
    "ax2000": "Yes it starts with about 30 + list elements width percentage width (don't know if would be recalculating widths every time),  each element with an  image, different links, icons etc.. It's definitely not the ideal content for the browser to drag. Other pages with common content work flawlessly.\n. Nice!\nThank you for your great work!\n. ",
    "imjoeybrennan": "This is exactly what this and other plugins like this need. Just like this example, but with all your functionality:\nhttp://jsfiddle.net/vishl/wzPSF/\nHope this gets added!\nThanks!\nJoey\n. This can be accomplished not ideally by making the parent element fixed. Then have a child element, say a top bar, fixed with a set desired height and a separate child element, the content, fixed with 100% height. Set the parent element your container element in Snap. Here is a site I accomplished this on www.crosstek.net.\n. Scroll down past the slideshow to see the fixed element effect. This is less then ideal because making everything fixed doesn't seem awesome, so being able to just set 2 container elements in Snap would be really great. \n. Here is an example of setting multiple container elements with a simple panel menu like Snap http://jsfiddle.net/vishl/wzPSF/. Sorry for multiple comments, on my phone.\n. @andreatorre the first example, www.crosstek.net, does use snap and accomplishes a fixed element, the header, which to see you must have your window at a width less than 768px and be scrolled down past the slideshow. However, it accomplishes this in a less then ideal method by making the parent fixed, the header fixed and the content fixed. I did figured this out by scoping out the code in this example, http://jakiestfu.github.io/Snap.js/demo/apps/ratchet/template.html. The second, fiddle example, http://jsfiddle.net/vishl/wzPSF/, is to show @jakiestfu that we can accomplish ideal fixed elements if we could set multiple Snap elements, Issue #85 \n. @jstxx, sorry, I meant multiple Snap container elements. That way multiple containers will shift over when a panel is opened.\n. ",
    "knynkwl": "@andreatorre \nSo there's probably a better way of doing this, but here it is on multiple items.\nhttp://codepen.io/knynkwl/full/gvCpn/\n. +1 for this (multiple element), but i think this should go back under issue #85\n. ",
    "3zzy": "@knynkwl its good for that particular use case only. What @imjoeybrennan showed is required in snap.js. \n. ",
    "brendajin": "Hi @jakiestfu, thanks for the quick response. \nThe use case is a navigation bar similar to the attached images. This would be in lieu of something like a fixed position header, but is user-friendly in that the \"drag\" element seems to be attached to the drawers, like a handle.\nWhat's your opinion on the best place to start adjusting the methods to accommodate this functionality?\n\n\n. Non power users need more visual cues for hidden elements. \nNope, Nordstrom already has this figured out in their native iOS app, and I was thinking about how to implement this functionality for a web web app.\nHmm, I tried removing the settings.dragger snippet, but that didn't seem to work. I had also played with that earlier to see if I could change how parent nodes were identified.\nAbsolute positioning seems to be pretty integral to how this works :)\n. @jakiestfu because so much would have needed to be restructured, I ended up starting a little microlibrary that has somewhat different functionality. It only does left-hand fixed drawer navigation.\nRight now, I'm writing some tests on it and cleaning up some bugs.\nIf you have hints for making touch interaction and acceleration faster, I'd be very open to it!\nhttp://brendajin.github.io/cyberswipe.js/\n. ",
    "byroncorrales": "@jonscottclark Thanks for your solution , I also tried with iScroll and you was right, I could not make it work. So I use your solution with Overthrow and now the scrolling is working, tested on Android 2.3.3. Thanks for your suggestion.\n. ",
    "jordanisip": "@jonscottclark +1 for Overthrow. Thanks!\n. ",
    "Prakashup": "hi  i am using snap.js for left scroll menu, i am facing issue with overflow: auto on my android HTC incredible S device  version : 4.0.4 (hdpi device)  i have checked on other hdpi devices same issue is coming but for Xhdpi devices working fine for me. I used overthrow.js for the issue but it does't solve my problem. \nerror : when i am using overflow :auto for  .snap-content (snap.js main container) the left drawer is working fine but while scrolling to the main container i.e .snap-content  after scrolling to some extent all the element in the .snap-content  are getting disappear.\noverthrow Implementation : \nI have used all the required js for overthrow\n \n\n\n\nand have included css too\n.overthrow-enabled .overthrow {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n}\n. ",
    "alessandrolopopolo": "i resolved with this code : in my js :\n``` javascript\napp.tabMenuAction: function(element){\n    if ($(element).attr('class')==\"open\") {\n        snapper.open('left');\n        $('#tab-menu-left').addClass(\"close\");\n        $('#tab-menu-left').removeClass(\"open\"); \n    }\nelse if ($(element).attr('class')==\"close\") {\n    snapper.close();\n    $('#tab-menu-left').addClass(\"open\");\n    $('#tab-menu-left').removeClass(\"close\");\n}\n\n}\n```\nand in my html : \nhtml\n\"tab-menu-left\" class=\"open\" onclick=\"app.tabMenuAction(this);\n. ",
    "erictaylor": "Same issue.\n\"Unable to get value of the property 'match': object is null or undefined\"\nMSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; NOKIA; Lumia 800\nThis error occurs after one successful open and closing of the panel, the next attempt at using the toggle button fails.\n. This users commit fixes the issue:\nhttps://github.com/rap1ds/Snap.js/commit/17790dcdba8187b2c3b27e222e086dcf537b589f\n. ",
    "baoagency": "Even with this commit, I'm still getting the issue @Psiablo described on IE9. \nI'm also seeing the same error on the demo page for the plugin: http://jakiestfu.github.io/Snap.js/demo/apps/default.html\n. ",
    "duyhung85": "Please, anybody experiencing this bug and have a solution? or js me?\nHungnd\n. ",
    "KatelynL": "I noticed the same issue while trying to add classes to the body while animating.  After using a console.log I noticed that when you close the sidebar 'animated' is triggered but then 'animating' is re-triggered well after the animation has stopped.  I would say this is a bug.\n. ",
    "emmx": "Fixed? I'm having the same problem! In what version was it fixed?\nI'm using a gem (https://github.com/breckenedge/snap_js-rails) which is v1.9.2 (same version as the code in this repository it seems).\nThanks,\nMatt\n. ",
    "tomdowning82": "Has this been fixed on 1.9.2? I'm having the same issue. When you scroll down on an IOS device and before it's finished animating, when you touch again it jumps to the previous position.\n. ",
    "franciscosurf": "I've updated to 1.9.2 but I have the same issue.\n. Thanks for all your efforts.\nI was no able to fix it with snap 1.9.2 and your tips...\nBut after update to iOS 7 all its working perfectly.\nThanks again to jackiestfu and the community.\n. ",
    "shawnphoffman": "Just to add to this. I've noticed that on mine; if you scroll and as it is still scrolling you touch down again and don't move it returns to the origin of the scroll but as soon as you move it jumps back down with the inertia reset. You're not able to perform that continued touch scrolling that is common among native apps. \nAs @franciscomolina said, disabling -webkit-overflow-scrolling:touch fixes the issue but then it breaks scrolling momentum scrolling altogether.\nI'm using 1.9.2\n. I was able to stop this behavior by making the following changes:\n- Remove overflow:auto from .snap-content\n- Change position:absolute to position:fixed for .snap-drawers\n.snap-content {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: auto;\n  height: auto;\n  z-index: 2;\n  //overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  -webkit-transform: translate3d(0, 0, 0);\n     -moz-transform: translate3d(0, 0, 0);\n      -ms-transform: translate3d(0, 0, 0);\n       -o-transform: translate3d(0, 0, 0);\n          transform: translate3d(0, 0, 0);\n}```\n.snap-drawers {\n  //position: absolute;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: auto;\n  height: auto;\n}```\nI'm not positive if this has introduced any new behaviors but I will test it out and report back.\n@jakiestfu - Feel free to correct any of this if any of it is blatantly wrong.\n. ",
    "ilucky": "I still have the same issue with iOS 7. Its not fixed.\n. ",
    "nielk": "I have the same issue on iOS 6.1.3. I followed the shawnphoffman's solution but it doesn't work... I also try some other solutions I found in other issue... But nothing works.\nIs anybody find a workaround ?\nThanks,\nAlexandre\n. ",
    "fpetitit": "I add the same problem with IE9 on Windows Seven, and your fix resolved it.\nThanks!\n. ",
    "Xananax": "win7+IE8, same problem, and this fixed it.\n. ",
    "kingofslowmo": "So we just redowload the .js file and thats the updated version?\n. I'm just using the file snap.js. If that has anything to do with what your talking about, @jbest84 \n. The error seems to occur on\ncanTransform: function(){\n                return typeof settings.element.style[cache.vendor+'Transform'] !== 'undefined';\n            },\n. ``` javascript\n        var snapper = new Snap({\n            element: document.getElementById('content')\n        });\n    var addEvent = function addEvent(element, eventName, func) {\nif (element.addEventListener) {\n    return element.addEventListener(eventName, func, false);\n} else if (element.attachEvent) {\n    return element.attachEvent(\"on\" + eventName, func);\n}\n\n};\naddEvent(document.getElementById('slider'), 'click', function () {\n    if (snapper.state().state == \"left\") {\n        snapper.close();\n    } else {\n        snapper.open('left');\n    }\n});\n```\n. Yes, its my main content page.. \nWhat I do is include \"settingmenu.php\" into the main file (settingmenu.php contains the above code and some html).\n. In firefox console, I get settings.element is null\n. Uh, not that I'd be safe in showing you, no..\nIf you have skype or something like that, I can show you over that?\n. I can send you the source code of the page, if you'd like?\n. ",
    "baerkins": "I am also having this issue. Was there a solution?\nConsole error:\nUncaught TypeError: Cannot read property 'style' of null\n  utils.canTransform\n  action.translate.get.matrix \n  state\n  (anonymous function)\n  x.event.dispatch\n  v.handle\nError occurs on line 96 in snap.js:\ncanTransform: function(){\n  return typeof settings.element.style[cache.vendor+'Transform'] !== 'undefined';\n},\nI use grunt to concatenate into a dev file. Site runs on  WP. I can provide a link if needed.\n. ",
    "barsv": "i had this issue and the cause was that i was initializing the snap.js before all DOM elements were loaded into a ui-view by angularjs. i moved my initialization code to the right controller and it started to work.\n. ",
    "adaptabi": "If you would have any content in the right pane it never gets displayed in your demo page because of this:\n``` css\n/ Hide the actual \"Right\" drawer in the demo /\n.snapjs-right .snap-drawer-right {\n    display: none;\n}\n``\n. I can confirm this too. It doesn't work onIE8/IE9desktop either.\nSeems thatcanTransformreturnstruealthough it should befalse`.\nI think you should use Modernizer.csstransforms3d instead of your test for a realistic test.\n. ",
    "Frexuz": "Not there in 1.9.0, or something weird happened, but I'll update :) Thanks.\n. ",
    "troygoode": "@headwebmonkey you can get access to the snapper via this feature of angular-snap:\nhttps://github.com/jtrussell/angular-snap.js#snapremotegetsnappersnapid\n. any updates on this?\n. ",
    "ftorre104": "+1\n. You can do snapper.on(animated) and then check if the state is open. Thats what i ended up using. It checks at the end of the animation whether it is open \u00a0or not.\u00a0\n```\nCheers,\n\u2014\n```\nSent from Mailbox for iPhone\nOn Tue, Sep 10, 2013 at 6:04 AM, Andre Meyering notifications@github.com\nwrote:\n\nWell, the open event is not fired if the user drags the content. Only if a button is pressed. :)\nReply to this email directly or view it on GitHub:\nhttps://github.com/jakiestfu/Snap.js/issues/104#issuecomment-24151649\n. *** the state will be \"closed\" \"left\" or \"right\" -- not open \u00a0if i remember correctly.\u00a0\n\n\u2014\nSent from Mailbox for iPhone\nOn Tue, Sep 10, 2013 at 6:04 AM, Andre Meyering notifications@github.com\nwrote:\n\nWell, the open event is not fired if the user drags the content. Only if a button is pressed. :)\nReply to this email directly or view it on GitHub:\nhttps://github.com/jakiestfu/Snap.js/issues/104#issuecomment-24151649\n. \n",
    "bugwelle": "Well, the open event is not fired if the user drags the content. Only if a button is pressed. :)\n. Thanks,\nI hadn't tried that. It works :)\n. ",
    "ifightcrime": "Listening for 'animated' isn't ideal because it also gets fired when touching the panel, even if the menu is already closed. If I'm checking to see if the state is closed in the animated callback and the menu is already closed it will return true, when what I really want to know is that the menu was OPEN and it became closed. I can add an extra boolean to keep my own state of whether or not the menu is already open, but that seems overly complex just to avoid adding an opened/closed event.\n. ",
    "ecurtis": "I see that you say it is merged but Version 2 of this repo is 3 commits behind and I do not see this fix in there. Am I missing something?\n. How can I access version 2? When I switch branches the files are 3 months old....\n. ",
    "rap1ds": "Wow, today I learned that anyone can make pull requests from any public repository, even if they don't own the repo or have commit rights \ud83d\ude00 Well, anyway, thanks @SalahStudios for opening the PR (and sorry for me being too lazy to do it).\n. ",
    "plusownented": "+1\n. ",
    "dcolin": "Does not for me into Phonegap App running on Android. I got the same problem with your demo (http://jakiestfu.github.io/Snap.js/demo/apps/default.html) on mobile browser when swipe quickly only left panel... An idea?\n. Indeed position: fixed on both elements does the trick ! Thx guys\n. ",
    "jayd3e": "This is also happening for me.  Happening both in my own app and in the demo.  This needs to be reopened.\n. So setting overflow: hidden on the drawer and content elements does the trick.  You can also achieve roughly the same thing by setting position: fixed on both elements, then just having the content inside of each element scroll.  The main reason I called for this to be reopened, is b/c the demo page is actually experiencing this bug, as shown below.\n\nI'm interested in getting this library back up to speed brah.  Maybe we can have a little hackathon this weekend?\n. Sounds good!\n. I would say that Snap.js shouldn't make this an option, it just need to be the native behavior.  The gesture we are going for is a single finger swipe to the left or right, no?  So if that's the gesture that is supported, we need to stick with that.  If we allow a multi-finger swipe, then we need to account for that.  I just don't see this as something that should get turned on/off.\n. ",
    "th0th": "I love you @jayd3e!\n. I solved my problem re-instantiating a new snapper with the new active page when the page is changed.\n. ",
    "mcneela86": "This works for me:\n.snap-content, .snap-drawers, .snap-drawer {\n    overflow: hidden;\n}\nposition: fixed; by itself didn't work.\nThanks guys\n. mine worked with 'minPosition: 0'. that is asuming you didnt want to use the right menu.\n. ",
    "jasonhr13": "I have tried all of things mentioned here and still have the issue. It doesnt happen everytime, only sometimes. I can see that the body is being extended well past the width of the screen. The drawers are still only the width of the screen, but the body (white color) extends much further, almost 3/4 of the screen width past the initial size.\n. ",
    "thiago-negri": "Thanks, @jayd3e.\nSetting position: fixed solved it.\n. ",
    "axul": "I know the issue is old but I didn't find a full working answer to it in any open issue. Its not necessary to set position: fixed in any element. just by adding overflow: hidden; positon: relativein the body and overflow-x: hidden in .snap-drawer the problem was fixed in both iOS and Android\n. ",
    "Cdvalencia": "Thanks, @jayd3e.\nposition: fixed. ",
    "leoDreamer": "Is there have problem of memory leak ? I meet the trouble in IE 11 .\n. ",
    "activelogic": "I changed from fixed positioning to absolute and it fixed it.  This only occurred on my Android device using Phonegap.  It worked fine on my desktop, so was unable to reproduce in a jsfiddle.\n. ",
    "dbaq": "I can confirm, I am facing the same issue right now.\nIf you use phonegap on your android, you can copy/paste that template : http://jakiestfu.github.io/Snap.js/demo/apps/ratchet/template.html \nand you will be able to reproduce it.  (only with phonegap and android, it's working fine with phonegap and ios devices)\nI tried your fix @meandnotyou, it works. Thanks.\n. ",
    "tariq86": "The pane actually wouldn't open at all (for me) on <= IE9; including on older Windows Phone devices.\nI just tried this out, and it works well on my HTC Titan running WP7.5, and desktop IE10 running in IE8 mode.\nThank you!\n. ",
    "benjaminalevy": "I found this error occurred when I was working on a retina macbook and then when I resized the browser from full screen to something smaller, it fixed the problem.\n. ",
    "aaronstaves": "Realize I'm about 8 months late to the party, but figured I would comment and save someone the 30 mins I just spent debugging this.  \nI can reproduce this on chrome 34 under OS X by zooming in (cmd+shift+'+') and toggling the menu.  Setting the screen size back to normal (cmd+0) fixes it.  This might explain why this was intermittent for @jaywolters above.  Maybe he was possibly zoomed in on a page, forgot about it, then the problem later cleared itself when he reset the zoom level.\nNot sure if this is a bug so much as a user issue.  Either way, maybe this will help someone else.\n. ",
    "benlinton": "Thanks @aaronstaves, you're a life saver.  I ran into the same issue.  \nWhen zoomed in snap.state().state returns \"closed\" even when zoomed in only once (using chrome version 36.0.1985.125).\n. In my experience, when I zoom in once (with cmd+'+') - the page looks\nslightly larger, the  'open' drawer is entirely visible in the viewport,\nand snapper.state().state returns \"closed\".\nOn Wed, Jul 30, 2014 at 4:35 PM, Sander Laarhoven notifications@github.com\nwrote:\n\nNot sure if this is a bug. After all, the 'open' drawer isn't visible in\nthe viewport while zoomed in like that.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jakiestfu/Snap.js/issues/223#issuecomment-50683534.\n. I encounter the issue even after reloading the page, for example:\n- If I start with default zoom by hitting cmd+0\n- Then zoom in once by hitting cmd+'+'\n- Reload the page\n- Open the snap drawer\n- Wait for the animation to finish\n- Then snapper.state().stage will consistently return \"closed\"\n\nOn Thu, Jul 31, 2014 at 2:04 AM, Sander Laarhoven notifications@github.com\nwrote:\n\nAh, well I think that's because Snap.js doesn't redraw to window size\nchanges live. It's documented (somewhere, can't remember). Reloading the\npage with the custom window size should solve your problem.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jakiestfu/Snap.js/issues/223#issuecomment-50722077.\n. \n",
    "dziulius": "I seem to be able to reproduce this on chrome 43 when using devices emulator. When emulating iPhone 6 it works just fine, but when emulating iPhone 6 plus - state always returns closed.\n. ",
    "brandonellis": "I am experiencing something similar.   The menu button to slide in works extremely smooth.  The close toggle I have enabled is also smooth.  It is only the sliding events (aka. The drag of the finger) that seems to be a little bit slow or glitchy.  Do we have any clues as to why this might be happening only for the touch slide events?\n. ",
    "sknepal": "Hi, is there any workaround to this? I am facing the same thing. When the content is empty, the swipe is smooth. But, it lags when there's any content.  Using 'addBodyClasses:false' stacks over the right drawer's content next to the left drawer's although it does fix the lag.\n. ",
    "rafasashi": "Try to implement Momentum Scrolling on iOS Overflow Elements \nhttps://css-tricks.com/snippets/css/momentum-scrolling-on-ios-overflow-elements/\nand also translate3d declaration\nhttp://stackoverflow.com/questions/6481894/proper-way-to-optimize-css-3-animations-for-ios-mobile-safari\n. ",
    "mvhecke": "I've fixed this by adding style=\"display: none\" to the snap-drawer and settings the snap-drawer back to display: block; in you css file. Not the best solution, but it does the trick for me.\n. Is there a solution already for this problem @jakiestfu?\n. I guess the problem is that translate3d is used for the entire page, what do you think that might cause this @Rob-Che?\n. I forgot adding the class scrollable and although scrolling seems to go a bit smoother, it doesn't solve the entire page repaint problem.\n. @ashishsajwan Thanks for the tip, but I already created something that better suits my needs.\n. @ashishsajwan It's AngularJS based, so I'm not sure if you can do something with it.\n. @ashishsajwan Yes, you are right.\n. I was experiencing the same problems and while testing I found out the following lines cause massive impact on the performance in fps.\nhttps://github.com/jakiestfu/Snap.js/blob/v2.0/snap.js#L207;L209;\njavascript\n                        cache.animatingInterval = setInterval(function() {\n                            utils.dispatchEvent('animating');\n                        }, 1);\nAlthough I'm not sure what it exactly does but it's called well over 2000 times. I have to point out there are still repaints of the entire page, I'm still searching what might cause this.\n. ",
    "andrewnleon": "It looks like its the overflow:auto on the drawers. Do you know why this makes elements look like they are floating instead of being still?\n. ",
    "scooterlord": "Actually it's the overflow setting along with it being on an absolute element. I managed to fix this by changing the overflown element to relative, adjusting the z-index to be in the correct depth and then I re-issue the overflow using jquery using a hook to fix the scroll lock.\n. so, anyone found a solution for this? :)\n. ",
    "andreatorre": "Same issue here: https://github.com/jakiestfu/Snap.js/issues/85\n. @imjoeybrennan the example does not include snap. So, what's your point?\n. ",
    "ashishsajwan": "+1\n. watch this\nhttps://www.youtube.com/watch?v=z0_jD8nO5Zw\n. can you plz share your solution... @Gamemaniak \n. @Gamemaniak are you saying that you have moved on to something (based on AngularJS) which gives you similar functionality as snapjs\nand you are not using snapjs any more..\n. :+1: \n. follow this : \nhttp://jakiestfu.github.io/Snap.js/demo/apps/ratchet/template.html\n. @jakiestfu.. can you help with this ??\n. doesn't works..\nopen event not firing when we swipes finger across device width. \nif we swipe starting from left edge & leaving anywhere before right edge then open event is fired.\nbut if we swipe across the device to open the sidenav then side nav will appear but event is not fired..\n. ",
    "robhadfield": "Is the reason that you lose the smooth scroll in iOS? When scrolling you can't 'flick' the page up as you normally can, it stops as soon as you lift off.\nI'll open a new issue if you don't think it's related.\nThanks\n. It's the inertia scroll that seems to stick rather than roll after you release your finger.\nThe site I'm developing is thankfully not that long so it isn't a major issue. It's such a great script though, thanks @jakiestfu - I hope I can contribute in the future.\n. Here's a link to my dev site if you want to give it a go : http://jb.robhadfield.co.uk/blog/\n. Aiming for a resolve on the V2 Roadmap @Gamemaniak \n. hm, I'll check that @jonleverrier - not been working on it for a while. I'll report back.\n. I'm testing some new layouts at the moment to see if I can avoid the repaint issues so if I find a way I'll post here. I'm sure there must be a css solution to that.\nI'll happily test any alpha/beta versions, give give me shout.\nGood luck and thanks!\n. ",
    "frjoha": "@Rob-Che Could be, repainting is a pretty heavy process. I mostly noticed the problem on slower android devices but it's a heavy process for all devices and platforms. Some can handle it, some can't\n. ",
    "jonleverrier": "@Rob-Che Just checking - have you added https://github.com/jakiestfu/Snap.js#independent-scrolling to your CSS and applied the class \"scrollable\" to your content DIV? \nI was experiencing the same problem as you, but this fixed the problem.\n. @Rob-Che After adding the CSS to your stylesheet, the example markup would look something like this:\n<div id=\"content\" class=\"snap-content scrollable\">\n. ",
    "TorchMan": "Try this one ;-)\nhttp://jsfiddle.net/TorchMan/MexXY/\n. ",
    "lesander": "Compatibility with The Bootstrap framework would be awesome too.\n. Just make a loop to wait for the esc keypress and put the snap.close() inside. That shouldn't be a feature, it's just a way to use the api. Not that hard to code :wink: \n. Not sure if this is a bug. After all, the 'open' drawer isn't visible in the viewport while zoomed in like that. \n. Ah, well I think that's because Snap.js doesn't redraw to window size changes live. It's documented (somewhere, can't remember). Reloading the page with the custom window size should solve your problem, however I'm not sure if that's also the case while zoomed in. \n. Note that http://maker.github.io/ratchet/ is still broken (404). Don't you mean http://goratchet.com ?\n. :+1: \n. :+1:\n. ",
    "cloud1250x4": "so hm.. is there any eta on snap.js v2? ><'\n. Well, yes it mostly work great, except in the anime page.. I've tested with a phonegap app and on chrome.. my device is a HTC one running on miui.\nMaybe I should update phonegap.. I'm currently testing with phonegap 2.5.\n. okay nvm all, I've fixed my performance problem now ;) thanks to this issue : \nhttps://github.com/jakiestfu/Snap.js/issues/115\nI updated my page in my firt post so anyone can see the source.\n. Hello, well it gives back a bit of performance but not much so I gave about snap.js ahah I think a removed the option about adding tag to specific drawer\nSantiago Ezcurra notifications@github.com wrote:\nHi There !\n@cloud1250000, could you help me understand what you did specifically to overcome your performance issue ?\nThanks !\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/jakiestfu/Snap.js/issues/160#issuecomment-32891183\n. ",
    "vishalsood": "To echo @lesander any plans to supporting Bootstrap 3.0 as well? (http://getbootstrap.com/)\n. ",
    "gercheq": "@jakiestfu any estimation on when this version will be released? \n. Ditch jQueryMobile and use Snap.js with Bootstrap and Backbone.\nOn Wednesday, April 9, 2014, H.G\u00f6khan Sar\u0131 notifications@github.com wrote:\n\nI am trying to use Snap.js in my project that is built with jQuery Mobile.\nFor those who are not familiar with jQuery mobile's HTML structure, jQuery\nmobile body tag consists of multiple pages (defined by data-role=\"page\"\nattribute) in a single file and switching from one page to another page is\ndone by simple linking (like Something <#14548f8213cd817f_page-main>).\nThe problem is, if i attach snapper to one of the pages it doesn't appear\nwhen I navigate to other pages. Wrapping all pages by another element is\nnot an option since it messes with jQuery mobile options.\nI am thinking that, hooking a function to jQuery Mobile's 'pagechange'\nevent, and re-initiating snapper every time page is changed. But this\ndoesn't seem to be the best solution. Do you have any suggestions?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jakiestfu/Snap.js/issues/188\n.\n\n\n-- Ger\u00e7ek\n. ",
    "ravikiran438": "@jakiestfu I have a request, can atleast some of the finished issues be released since its been a while...\n. ",
    "messyp": "The problem is that when you scroll the page, the fixed footer/navbar scroll with the document and do not stay fixed when positioned absolutely. I have not been able to find away around this. This is contrary to the behaviour of say facebook etc, i notice in your demos that the nav always scrolls as opposed to the common fixed nav behaviour used with this kind of menu\n. ",
    "raido": "snap.min.js not updated to 1.9.3.\n. ",
    "rafaelfaria": "I would like that too! :+1: \n. ",
    "dylansong": "\u4e00\u4e00\n\u2014\nSent from Mailbox for iPad\nOn Thu, Aug 21, 2014 at 8:47 PM, Patrick Rudolph notifications@github.com\nwrote:\n\nThis is already implemented and mentioned in the documentation:\n    var snapper = new Snap({\n      element: document.getElementById('content'), // change to your element\n      minPosition: 100, // maximum size of the right pane\n});\nReply to this email directly or view it on GitHub:\nhttps://github.com/jakiestfu/Snap.js/issues/129#issuecomment-52914583\n. \n",
    "OscarGodson": "Thats a lot of white space changes ;)\n. ",
    "shaialon": ":+1: Yeah my editor hates unnecessary spaces :) \n. ",
    "johanson": "Just read the snapper's state? \nsnapper.state().state\n. ",
    "syredeye": "yes. IE8 and IE10 too.\nso i modified some code in snap.js for IE\ni dont know how to edit the github code T.T\nanyway! can see the some code near line 234.\nbut some problem. can't remove  window resize event .\ni dont know why. T.T\nhere code.\n``` JavaScript\n       action = {\n            translate: {\n                .....................................\n                x: function(n) {\n                    .................................\n                if( cache.canTransform ){\n                    var theTranslate = 'translate3d(' + n + 'px, 0,0)';\n                    settings.element.style[cache.vendor+'Transform'] = theTranslate;\n                } else {  //here for none transform like IE\n                    //settings.element.style.width = (win.innerWidth || doc.documentElement.clientWidth)+'px';\n\n                    //settings.element.style.left = n+'px';\n                    //settings.element.style.right = '';\n\n                    if (n == 0) { //for close. just reset the style.\n                        settings.element.style.width = 'auto'; //default css reset\n                        settings.element.style.left = ''; //default css reset\n                        utils.events.removeEvent(window, \"resize\"); //remove event\n                    } else { //for open\n                        settings.element.style.width = (win.innerWidth || doc.documentElement.clientWidth) + 'px'; //fix the width when open\n                        settings.element.style.left = n + 'px'; //movie when oepn\n                        utils.events.addEvent(window, \"resize\", action.translate.resize); //add event when open and resize!!!\n                    }\n                    settings.element.style.right = '';\n                }\n            }\n        },\n        //here add! for resize when open!\n            resize: function () {\n                settings.element.style.width = (win.innerWidth || doc.documentElement.clientWidth) + 'px';\n            }\n\n```\n. me too!\n                                var matrixValue = parseFloat(matrix[index]);\n                                return matrixValue < 0 ?  Math.floor(matrix[index]) :  parseInt(matrix[index], 10);\nu something better!\n. ",
    "serenekhaos": "Hi,\nThe following CSS modifications worked for me on a couple of projects but may depend on your setup.\nbody \n{\n    height: auto;\n    position: relative;\n}\ncontent of .snap-content\n{\n    position: relative; /* instead of position: absolute as defined in snap.css */\n}\nGood luck,\nKelvin\n. ",
    "jdmiller82": "Thanks Kelvin, these modifications helped.\n. ",
    "Mackaber": "Apparently was a Chrome issue, fixed in version 31.0.1650.57\n. ",
    "WonderPanda": "Was my silly mistake. Adding a background color to the snap-content area fixed the issue.\n. ",
    "wesleycho": "Would <3 for this fix to be merged!\n. ",
    "christianboyle": "This fixed the issue for me, although the toggle button isn't working clicking on the #content body does close the drawer. Good enough for IE9.\n. ",
    "skeggse": "You already have an event listener for mousemove, no? The following seems to work when added to the beginning of the dragging function:\n``` js\ndragging: function(e) {\n    if (cache.isDragging && settings.touchToDrag) {\n    if ('which' in e ? e.which === 0 : e.button === 0) {\n        return action.drag.endDrag(e);\n    }\n\n    // ...\n}\n\n}\n```\nThis wouldn't handle the case of the mouse moving on anything but the snap-content, but that's a lost cause anyway.\n. @jakiestfu I've tested it a bunch, and it seems fine. I don't know about Internet Explorer, but it should work.\n. @jakiestfu have you checked out the pull request?\n. Bump\n. Heheh what's the news on snap.js v2.0?. ",
    "arippberger": "+1\n. ",
    "cevatkerim": "+1\n. what is the use case for this? You can already programmatically open the menu.\n. ",
    "rascojet": "Is working\n. ",
    "TYRONEMICHAEL": "Also on 3GS 4.3.3. I suspect it is a bug with the operating systems and having a 100% height on body and the content element positioned absolutely inside. Anyone have a solution for this?\n. ",
    "seoplay": "Yea, I ran into a problem on an old galaxy s1 running 4.0.4, stock browser (not chrome), works fine on Jelly Bean. If the snap-drawer menu is overflow:auto; it interferes with the #content overlay from scrolling.\n. ",
    "LucAwater": "Never mind, found it in 'snap.js' at line 218-245: px to %\n. ",
    "Echelpoel": "Sorry to ask but did you already take a look at it? I'm having the same issue as described by thomas.\n. ",
    "niknetniko": "On what device and browser are you testing? If you wait until the page has loaded, the menu works fine, without delay at all on my phone.\n. ",
    "sonoman": "Hi There !\n@cloud1250000, could you help me understand what you did specifically to overcome your performance issue ?\nThanks !\n. ",
    "joshsilverman": "Sadly the solution has become quite ugly, and only works well in iOS 7. I think I'm gonna rollback to something simpler. \nFor now, you can check out http://wisr.com/feeds/18 where the above solution is currently implemented.\n. Actually, I've just disabled touchToDrag and am now satisfied with iOS 6 performance.\nLet me explain some of the insanity up above. As you are probably already aware, there is a webkit issue where z-index doesn't work properly for touch. Although, it visually renders correctly, the touch/drag functionality ignores the z-index and grabs the drawer. Therefore, I am dynamically making the drawer absolute when not visible.\nRegarding the setInterval usage: this is one of the uglier browser hacks I've done. Unfortunately, addClass/removeClass doesn't work consistently with iOS7. It seems that the previous style class gets reloaded from memory or something periodically. Therefore, I had to continuously set it to absolute by removing the show class -- very very strange! Even setting the class with raw javascript and then immediately reading the class still showed the wrong class. As ugly as this fix is, it has been performant in my testing.\nFinal hack: when manually closing the drawer via drag, I found often it would be off by one on the transformZ. Therefore, I also hide the drawer when the z coordinate isn't completely reset. This may be irrelevant given that I disabled touchToDrag (because of the flickering), however I left it in in case I want to restore dragging.\nAnyway, I am (possibly) satisfied with the UX for now -- I'll continue testing. That said, I really can't wait to delete this code when webkit gets fixed.\n. Please let me know of other examples of decent Snap.js UX on both iOS 6 + 7. Seems to be pretty broken at the moment.\n. @Silverws -- were my snipits not clear? They were in scss and coffesscript, but you can transpile both pretty quickly (http://js2coffee.org/ & http://sassmeister.com/).\n. ",
    "Silverws": "how to add them??? I want to try- \n. ",
    "MirceaDeliu": "Dear Snap.js developer,\nI'm also having issue with using Snap.js on IE11 on Windows 8.1 and also with Windows Phone 8 (also uses IE11 engine).\nThe Drag in working just partially and goes \"crazy\" after the first interaction.\nCan you help?\nAre you going to support Windows 8.1 and Windows Phone?\nThanks,\nMircea\n. ",
    "zechner": "Try revert to version 1.9.0 ;)\n. ",
    "bradcurnow": "Okay thanks mate :)\n. ",
    "Snowbell92": "@AzzyDude24601 did you find the solution? I am having the same problem. \n. @AzzyDude24601 oh! Would you mind telling me which library you used, if you remember it? \n. you make two divs, the first one is the drawer, and the second one is the content. put bootstrap markup inside the content div, including bootstrap's container. I am following this layout and haven't had problem yet. \n. ",
    "AzzyDude24601": "@Snowbell92 It was some time ago so I can't remember specific details, but if I recall correctly I could not fix the problem and decided to use a different library. \n. @Snowbell92 I started using Angular and then Angular Materials . Things like Angular's ngAnimate made this stuff very easy. \n. ",
    "alexdabast": "Could you please provide a sample on how to disable mouse and only keep touch feature ?\nThanks\n. ",
    "jakubweber": "\"clickToDrag: false\" should work\n. ",
    "teltploek": "I've submitted a pull-request, that I believe should fix this issue. Feel free to try it out for yourselves:\nhttps://github.com/jakiestfu/Snap.js/pull/221\n. You're right. I'm trying something else now. Will submit a new PR if I'll be able to fix it.\nOld PR closed.\n. Doesn't work. I'm trying another fix at the moment. Will submit new PR if it succeeds.\n. ",
    "lethek": "I'm also having the same issue on Windows Phone 8 (lumia 920), and also a very similar issue on my Android phone.\n@teltploek I tried your pull-request but unfortunately it had no effect for me.\n. ",
    "cburgdorf": "This one was harmful, sorry. \n. That's why I made it the default because I agree that a single finger swipe is what we aim for. I made it an option because I didn't know if people may rely on multi-touch swipes as that's the current behavior. \n. ",
    "aaronjgreenberg": "Not sure why touchstart wasn't working, but I avoided it altogether by using fastclick.js.\n. ",
    "draklane": "I had the same problem so I returned in version 1.9.2. And it's ok.\n. Hi\nThank you. I'm sorry but it doesn't work for me.\n. ",
    "comanche": "I noticed adding an absolute position to the html and body style fixed this rotation issue.\ncss\nhtml, body {\n    position: absolute;\n}\nSafari probably calculates the width of the page by considering the overflow.\n. ",
    "mica16": "Hi,\nI tried your solutions (both). \nHowever, it is broken when we drag the snap-content while the snap-drawer is opened (instead of just clicking on the toggle button).\nIndeed, the snap-drawer hides and the snap-content appears but the snap-content is still non-clickable. \nDragging does not reset the trick, like if the .snapjs-left class was still present on the body, thus preventing any use of the app. \nAre you aware of this? Any way to fix this?\n. ",
    "m4bwav": "Seems weird this issue isn't solved yet.. ",
    "jpsear": "I'm going to close this, as I have found a solution. I just ask Snap to close the draw straight after a link in the drawer is clicked. Here is the snippet for anyone else (I'm using Zepto, so you'll have to re-write for vanilla JS):\n``` JavaScript\n  var doSnap = function() {\n    // If Snap is already initiated\n    if (window.snapper) {\n    window.snapper.enable();\n// Find all links in the snap drawers\nvar snapLink = $('.snap-link');\n\n\n// When they're clicked, close her up\nsnapLink.on('touchend', function() {\n  snapper.close();\n});\n\n}\nelse { ...\n\n```\n. ",
    "shamoons": "I'm still not able to use the keyboard with this. ",
    "XaviAlsina": "Since snap.js provided you a Demo, it shouldn't be a issue wich styles adds.\n. ",
    "jay8t6": "Can it be removed from the html, body level? It overrides the application level font styling.\n. ",
    "munmay": "I was hoping for the same here.\n. ",
    "Tomino2112": "check this out https://github.com/jakiestfu/Snap.js/issues/240\n. Ok, so in the end for the sake of getting the functionality I did update the script quickly. Please see it here: https://github.com/Tomino2112/Snap.js/blob/develop/snap.js It is just a very quick work, doesn't support right snapper, but it is beginning :)\n. Well of course I am not using it as a menu, but I have a list of the item that slides from left. I am using it in a web app. So you have from left sliding list of items, and on the right detail about the item you select from the left (very simplified)\n. ",
    "chadreed-intl": "Any change this get merged in? This is a real issue if its going to be used by more people. Good work @freiric, hope your changes are added to this great library.\n. ",
    "hthetiot": "+1\nOn Friday, May 22, 2015, Chad Reed notifications@github.com wrote:\n\nAny change this get merged in? This is a real issue if its going to be\nused by more people. Good work @freiric https://github.com/freiric,\nhope your changes are added to this great library.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jakiestfu/Snap.js/issues/187#issuecomment-104769365.\n\n\nHarold Th\u00e9tiot.\n. ",
    "frankydp": "Typo\n. ",
    "TimothyAhong": "Ya Im running into the same issue. It appears as though there are several cases where the side menus are closed but the 'close' event isn't dispatched :S\nHeres a temp fix that I'm using until a PR comes through. Go through snap.js and wherever you see\n\naction.translate.easeTo(0);\n\nReplace it with\n\naction.translate.easeTo(0);\nutils.dispatchEvent('close');\n\nIt might emit the close event twice but it worked for my purposes so it might work for you\n. ",
    "kennethkalmer": "Wait wait, will have to redo this properly to support component.io & bower at the same time...\n. bower install --save kennethkalmer/snapjs#v2.0\nThat should work, but the directory name will be Snap.js. Alternatively you could use snapjs=kennethkalmer/snapjs#v2.0 to have it saved to snapjs.\n. @frankie-loves-jesus thanks for the feedback, will clean this up a bit more\n. ",
    "chellem": "I can't download it from bower tho.  Is there a problem with the name?\n. perfect :+1: \n. ",
    "rvanbaalen": "I had to look up the bower install instructions in this thread so I've added it to the README as well now :+1: \n. ",
    "0Neji": "You can ignore this - I fixed it by setting the transitionSpeed to 0.\n. ",
    "iyasayariyan": "put top navigation into outside of snap content\n. ",
    "benpptung": "Hi iyasayariyan,\nThank you for reply :)\nI am sorry my question is unclear. I hope the fixed navigation bar is also snapped when I click the toggle button like the demo on your website. In the current demo, the navigation bar will be out of the viewport if scroll down. \n. ",
    "sinsunsan": "I think it' related to this problem \nhttps://github.com/jakiestfu/Snap.js/issues/24\nhttp://stackoverflow.com/questions/15194313/webkit-css-transform3d-position-fixed-issue\nhttp://meyerweb.com/eric/thoughts/2011/09/12/un-fixing-fixed-elements-with-css-transforms/\nUnfortunaltely, I have not seen any solution for using both fixed positioning and snap.js. \nIt's a rather common cases no ? \nSo what to do ?\n. ",
    "goloroden": "+1\n. ",
    "EnSabanNur": "+2\n. ",
    "diogo15": "+4\ni made it fixed, but it looks kind of weird cause it doesnt move to the right, but looking at \"mmenu\" as reference, their approach is really buggy.\n. Please someone!, i also need to add infinite scrolling\n. ",
    "dimention": "just commited a feature for fixed navbars in my forked repo: https://github.com/dimention/Snap.js\nUsage:\nPut your fixed navbar outside of your snap content div and add it as a elementMirror property, something like this:\njavascript\nvar snapper = new Snap({\n   element:       document.getElementById('content'),\n   elementMirror: document.getElementById('navbar'),\n});\nnavbar will stay at fixed top position and will be snaped with your snap content as you'd expect :)\n. ",
    "hemedani": "how can add elementMirror in angular-snap.js ??\n. ",
    "Polymathronic": "+1\n. ",
    "jordan112": "+1\n. ",
    "jamesholcomb": "+1\n. ",
    "RainLaurent": "+1\n. ",
    "nitishdhar": "@frankie-loves-jesus - thanks for the mention. For others reference here's how I suggested to use Snap.js with jQuery Mobile - http://stackoverflow.com/questions/23875815/jquery-mobile-and-snap-js-as-panel-replacement/23876216#23876216\n. ",
    "nicolasbonnici": "Try something like this:\n```\n                document.getElementById('yourid').addEventListener(\n                        'click', function() {\n                        if (snapper.state().state == \"left\") {\n                            snapper.close();\n                        } else {\n                            snapper.open('left');\n                        }\n\n                    });\n\n```\nJust switch 'yourid' with the correct id name.\n. ",
    "travisfisher": "I am also having this issue\n. ",
    "EvHaus": "+1\nA workaround I'm using now is the 'animate' event:\nsnapper.on('animated', () => {\n    let snapState = snapper.state().state;\n    if (snapState.left || snapState.right) console.log('open')\n});\n. ",
    "trofimovm": "Tnx!\n. ",
    "ronmichael": "I ran into this too. Although I went with a different solution: around like 511 I replaced\nif (cache.hasIntent === false || cache.hasIntent === null)\nwith\nif (!cache.intentChecked)\n. ",
    "inDream": "Both solution work, but I think it's better to set an init value for reference.\n. You can get the latest version in v2.0.0-rc1 branch.\nhttps://github.com/jakiestfu/Snap.js/tree/v2.0.0-rc1\n. ",
    "lifeisfoo": "Please publish this release since this behaviour is hidden in the current version, and slow down mobile apps that use it.\n. ",
    "Ninos": "The solution in v2.0.0-rc1 is to remove the animating action hook? Does a hook exists which I can trigger just while the menu is opened?\n. Think @devben's solution is not really good. If you scroll down then acticate the menu, the body content jumps to top again. I solved it with following js-snippet:\n``` javascript\nthis.snapper.on('animated', function() {\n    if( jQuery('body').hasClass('snapjs-left') || jQuery('body').hasClass('snapjs-right') ) {\n        jQuery('body').css({\n            position: 'fixed',\n            top: jQuery(window).scrollTop() * -1\n        });\n    }\n    else if( jQuery('body').css('position') == 'fixed' ) {\n        var top = parseFloat( jQuery('body').css('top') ) * -1;\n            jQuery('body').css({\n            position: '',\n            top: 0\n        });\n    if( top != 0 ) {\n        jQuery(window).scrollTop( top );\n    }\n}\n\n});\n```\nThe only problem here is, that on android the page seems to get rendered again, so you have a blank page for some ms (1-10ms). Not very nice, but better than the other solution.\nIf someone has a better idea, just let me know :P\n. ",
    "sineus": "check => david.gaspardmacelin.com/portfolio thanks !\n. ",
    "hickscorp": "Feedback?\n. ",
    "xpepermint": "ok\n. ",
    "johnmn3": "It is also returning \"closed\" while in landscape mode on an android phone.\n. ",
    "chrilith": "+1 on this please!\n. ",
    "StanleyGoldman": "+1\n. ",
    "attila": "Just realised that #144 tries to achieve the same, hope this covers that issue as well.\n. Not much is happening to this project I reckon so I'm closing this as part of my personal cleanup process.. ",
    "kench928": "To supplement:\nI have same problem on Android Chrome 38.0.2125.102 and Android Firefox 33.0.\n. ",
    "brutto": "Confirm that bug. Its not only Android issue, but can be repeatable on decktop with touchscreen with Chrome 38+  8( You can repeat this behaviour on expample page just open left-side menu and than touch menu in any point and swipe it to right... =\\ \n. ",
    "HalloTobi": "We're encountering a similar behaviour on iOS 7+8, too. :cry: \n. ",
    "devben": "I was also experiencing this and the following css appears to have resolved the issue\n.snapjs-right,\n.snapjs-left {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    overflow: hidden;\n}\n. ",
    "AlexioVay": "Any new solution to this? . For me it's the best solution to create a hamburger menu out there, even if it's outdated. Nowhere else I found this smooth-swiping experience like this. It feels like an native app then. There is only one bug I discovered which affects Android devices, but there is a solution here in the forums.. ",
    "CoachGodzup": "Issue solved.\nJust I've to read carefully the documentation. In my case I've wrapped the toolbar inside a container like this:\n< div id=\"toolbarContainer\" data-spy=\"affix\" data-target=\".snap-content\" data-offset-top=\"100\">\n   [...]\n< /div>\nSame question on Bootstrap 3, closed \nhttps://github.com/twbs/bootstrap/issues/14932\n. ",
    "brandonjmckay": "We are also using ember, so I'm not sure if it has something to do with all the content within the .snap-content section being loaded/changed asynchronously.\n. ",
    "LavaRiddle": "Quite a while later after this issue was opened. Casting your mind back @brandonjmckay did you get manage to resolve this issue. Experiencing the same thing here on iOS devices only.. ",
    "celsom3": "Now that Meteor opened up to using NPM packages, you could use:\nhttps://www.npmjs.com/package/snapjs\nI myself could use a little help on making it work with Meteor/React. Any helpful resources would be much appreciated.\n. ",
    "quangdung285": "ohm, tks u so much. \n. ",
    "meocongacon": "ratchet is error.\n$ = function(id){return document.getElementById(id);}\nif use it, all script jquery another is error\nplease fix it\n. ",
    "franktroia": "So removing the overflow properties from html, body, and .snap-content allows mobile browsers to automatically scroll to the touched input.\n``` css\nhtml, body {\n  font-family: sans-serif;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: 100%;\n  /overflow: hidden;/\n}\n.snap-content {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: auto;\n  height: auto;\n  z-index: 2;\n  /overflow: auto;/\n  -webkit-overflow-scrolling: touch;\n  -webkit-transform: translate3d(0, 0, 0);\n     -moz-transform: translate3d(0, 0, 0);\n      -ms-transform: translate3d(0, 0, 0);\n       -o-transform: translate3d(0, 0, 0);\n          transform: translate3d(0, 0, 0);\n}\n```\nOf course, that causes an issue with the drawers not stretching to the bottom of the .snap-content. I haven't been able to figure that out yet.\n. ",
    "mialmoga": "in next link the toogle button works fine...\n```\n        / Get reference to toggle button, the html element with ID \"open-left\" /\n        var myToggleButton = document.getElementById('open-left')\n    /* Add event listener to our toggle button */\n    myToggleButton.addEventListener('click', function() {\n\n        if (snapper.state().state == \"left\") {\n            snapper.close();\n        } else {\n            snapper.open('left');\n        }\n\n    });\n\n```\nhttp://runnable.com/Uoqf6mc0AHx3AAAh/how-to-create-a-toggle-button-for-a-snap-js-mobile-shelf-for-javascript\n. ",
    "eyalkatz": "Turns out it was not snap.js's fault.. but my hammer.js settings:\nThis is what finally solved the problem, along with simplifying properties, etc.:\nHammer.defaults.stop_browser_behavior.touchAction = 'pan-y';\nIt was an issue with the hammer.js plugin with touchAction property. This affects some browsers - and apparently also Android 5 (but doesn't affect Android 4.* when using PhoneGap).\nNot as simple as it seems, more details here: https://github.com/hammerjs/hammer.js/wiki/How-to-fix-Chrome-35--and-IE10--scrolling-(touch-action)\n. ",
    "codeur4": "snapsvg ?\n. ",
    "anvk": "snapsvg description\nSVG is an excellent way to create interactive, resolution-independent vector graphics that will look great on any size screen.\nsnap.js description\nA Library for creating beautiful mobile shelfs in Javascript\n@codeur4  how are they even similar ?\n. Closing this issue since NPM module works like a charm.\n. ",
    "nnur": "There's this:\nhttps://www.npmjs.com/package/snapjs\n. ",
    "Creativenauts": "looks like you switched to mmenu.\n. ",
    "wle8300": "I'm thinking this probably has something to do with my code (not yours) cuz your demo works totally fine in Chrome's device emulator.\nClosing. \n. ",
    "ReadmeCritic": "Hm sorry will correct \n. @lesander fixed\n. ",
    "dt1973": "No way! @jakiestfu is back??\n. ",
    "rickydazla": "\ud83e\udd14 . ",
    "vitroz": "Did you find out how?\nYou just need to create an instance of the component in your script area, and then call the open function.\nvar snapper = new Snap({\n      element: document.getElementById('content')\n    });\nand then:\nsnapper.open('right');\nor\nsnapper.open('left');\n. ",
    "Blockattester": "Hi;\nI worked around it by defining html dir=\"ltr\";\nthen individual div dir=\"\"rtl \n. ",
    "techsin": "got it working with this:\nelement.on('touchstart touchmove click scroll', function(e){\n  e.stopPropagation();  \n});. ",
    "redpik": "Same questions.. ",
    "AdityaAnand1": "Yeah but still, the author @jakiestfu seems pretty active but for some reason has been ignoring this repo for four years.\nAt the very least ownership should be transferred to someone else.. ",
    "mttmccb": "That would covered in #278 @AdityaAnand1, looks like no one has come forward.. ",
    "elharony": "I solved it by checking on it, then initializing it in my desired width only, check that snippet:\nif ($(window).width() < 768) {\n   // Initialize snap.js here and write all your settings...\n}\nThat's a very simple solution, I think it should be another way directly from the option, but anyway I solved it, hope you find it useful!. "
}