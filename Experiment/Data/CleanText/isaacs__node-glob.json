{
    "isaacs": "fixed on head, or npm install glob\n. I'm not familiar with ndistro.  Wanna submit a patch to make it work?  What's involved?\nnode-glob works fine with npm.\n. NetBSD has an implementation that's BSD-licensed.  So that'd work.\n. Implemented in v2.0.0\n. implemented in 2.0.0.  require('glob').glob has the GLOB_ constants, and require('glob').fnmatch has the FNMATCH_ constants.\n. Whoops!  Thanks.\n. Closed by f3e2da0ea0e0989e0d337bd487e8d246405704ff Add strlcpy if not defined\n. thanks :)\n. Fixed on version 2.0.4\n. Yep :)\nJust have to figure out how to make it build on Solaris, now.\n. What's uname -a say?\n. Should work on linux now.  Just published the fixes.\n. dachev: Can you pull the latest source from github and run node-waf configure build on it?\n. If it works with what's in git HEAD right now, then that's fantastic. I still need to get it to build properly on Solaris, and then I'll npm publish again and update this issue so you all get emailed about it.\n. Ok, try 2.0.4, just published.  Should build and run properly on Mac, Linux, and Solaris.\n. Will be solved by #23\n. That was supposed to be for #48, whoops.\n. Could it be that npm isn't re-building the bundles?  What version of npm are you using?\n. If you do npm bundle rebuild glob then does it work?  What's the output of npm when you install the package with the bundled glob in it?\n. Great!  The good news is that I just checked, and this is already\nfixed in 1.0.  Since you've got a workaround, I'm gonna go ahead and\nnot bother investigating whatever is broken in 0.3.15 :)\n. 1. what version of glob are you using?\n2. what operating system?\n3. what version of node?\n4. I'm pretty sure */.js is not going to match anything.  Sure you didn't mean *.js?\n. Ok, cool.  See if the problem goes away by upgrading node to 0.4.5 (it might).\nI'm going to port glob to be just in js soon.  It won't be quite as fast, but it will be way more stable and portable that way.\n. You could maybe do path.resolve(\"./**/*.js\") then, in the meantime.\nIf you could run it in gdb, I'd love a stack trace.  Otherwise closing this for now.\n. ```\necho 'require(\"glob\").glob(\"./*/.js\", function (er, paths) { console.error(er, paths) })' > g.js\ngdb node\nin gdb:\nset args g.js\nrun\n```\nThe \"help\" command is helpful :)\n. Ah, right, so, at that point, do this:\n(gdb) backtrace\nI can repro this on my linux box (was missing something obvious before).  Here's what I'm seeing:\n```\n0  0x00007fffd1f9a4d1 in g_lstat (fn=0x0, sb=0x0, pglob=0x0) at ../deps/glob/glob.c:1156\n1  0x00007fffd1f998e8 in glob3 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e8e, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae9a, restpattern=0x7ffff7e1aea2,\npglobstar=0x7ffff7e1aea2, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:827\n\n2  0x00007fffd1f99652 in glob2 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e8e, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae9a, pglob=0xc16490,\nlimit=0x7ffff7e1ef60) at ../deps/glob/glob.c:766\n\n3  0x00007fffd1f9983f in glob3 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e8e, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, restpattern=0x7ffff7e1ae98,\npglobstar=0x7ffff7e1ae94, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:821\n\n4  0x00007fffd1f99652 in glob2 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e8e, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, pglob=0xc16490,\nlimit=0x7ffff7e1ef60) at ../deps/glob/glob.c:766\n\n5  0x00007fffd1f99d26 in glob3 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e7c, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, restpattern=0x7ffff7e1ae98,\npglobstar=0x7ffff7e1ae94, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:931\n\n6  0x00007fffd1f99652 in glob2 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e7c, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, pglob=0xc16490,\nlimit=0x7ffff7e1ef60) at ../deps/glob/glob.c:766\n\n7  0x00007fffd1f99d26 in glob3 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e74, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, restpattern=0x7ffff7e1ae98,\npglobstar=0x7ffff7e1ae94, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:931\n\n8  0x00007fffd1f99652 in glob2 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e74, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, pglob=0xc16490,\nlimit=0x7ffff7e1ef60) at ../deps/glob/glob.c:766\n\n9  0x00007fffd1f99d26 in glob3 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e64, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, restpattern=0x7ffff7e1ae98,\npglobstar=0x7ffff7e1ae94, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:931\n\n10 0x00007fffd1f99652 in glob2 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e64, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, pglob=0xc16490,\nlimit=0x7ffff7e1ef60) at ../deps/glob/glob.c:766\n\n11 0x00007fffd1f99d26 in glob3 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e58, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, restpattern=0x7ffff7e1ae98,\npglobstar=0x7ffff7e1ae94, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:931\n\n12 0x00007fffd1f99652 in glob2 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e58, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, pglob=0xc16490,\nlimit=0x7ffff7e1ef60) at ../deps/glob/glob.c:766\n\n13 0x00007fffd1f99d26 in glob3 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e44, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, restpattern=0x7ffff7e1ae98,\npglobstar=0x7ffff7e1ae94, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:931\n\n14 0x00007fffd1f99652 in glob2 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e44, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, pglob=0xc16490,\nlimit=0x7ffff7e1ef60) at ../deps/glob/glob.c:766\n\n15 0x00007fffd1f991ea in glob1 (pattern=0x7ffff7e1ae90, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:670\n16 0x00007fffd1f99063 in glob0 (pattern=0x7ffff7e1cf50, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:616\n17 0x00007fffd1f98697 in globexp1 (pattern=0x7ffff7e1cf50, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:333\n18 0x00007fffd1f985aa in myglob (pattern=0xbe46c8 \"./*/.js\", flags=33920, errfunc=0, pglob=0xc16490) at ../deps/glob/glob.c:306\n19 0x00007fffd1f97269 in EIO_Glob (req=0xc164f0) at ../src/glob.cc:86\n20 0x0000000000542890 in eio_execute (thr_arg=) at ../deps/libeio/eio.c:1826\n21 etp_proc (thr_arg=) at ../deps/libeio/eio.c:1635\n22 0x00007ffff683aa04 in start_thread () from /lib/libpthread.so.0\n23 0x00007ffff65a3d4d in clone () from /lib/libc.so.6\n24 0x0000000000000000 in ?? ()\n```\n. Yeah, solution is just to write this in JS.\n. Will be solved by #23\n. D'oh.  npm bug that'd been hanging out there for a while, apparently.  Hopefully not too many people published binary packages!  Thanks for the heads-up.\n. Those are fine.\n. Will be solved by #23\n. If at all possible, it's best to use npm 1.0, especially if you prefer the \"bundle\" approach to dependency management.\nThis is a known issue with npm 0.x when bundling packages that have build steps, and will not be fixed.\n. The fix will be to port it to use my js implementation.  I've got most of the parts already, just need to assemble them behind the same API that glob has.\n. Does it work using node stable (v0.4.11)?\n. I'm going to port this to a pure JavaScript version.  Keeping this portable is too annoying.\n. Use node stable, v0.4\n. Has nothing to do with lion.  It doesn't work with node 0.5\n. Check out minimatch.  It's what I've been using in npm to parse globs.\n. mimimatch is this: https://github.com/isaacs/minimatch or npm install minimatch\n. No, the plan is to use minimatch's matching, but add file system traversal, so that it's the same API.\nI'm not interested in porting bsdglob.c.\n. Yes, that is the plan.\nOn Fri, Nov 18, 2011 at 16:08, August Lilleaas\nreply@reply.github.com\nwrote:\n\nSo the plan is to update the glob module by depending on minimatch and using the fs module to traverse the file system?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/isaacs/node-glob/issues/23#issuecomment-2796183\n. Done.\n. No longer a C program.  Should work fine now.\n. The scons build system is going away, so this is at best a stop gap measure.  But it seems like a pretty reasonable stop-gap, so why not?\n\nLanded on master, published as 2.1.0\n. This should work well on Windows using recent versions of node 0.6.  Please comment here with more details and I'll reopen the issue if it's still a problem.\n. d'oh.  Thanks!\nMerged into master and --force published to npm.\n. What for?  https://github.com/isaacs/node-glob/commit/d344c63cd0a802d6f9c30d2886a77173fa8ac88c\n. Sorry, @TooTallNate beat you to this one.\n. Nice find.  I'm a bit ashamed I missed that, it's so obvious.  Fix coming very soon.\n. Yeah, it's a bug.  Haven't had a chance to fix it yet.\nThe solution is to detect whether each pattern in the set is absolute or not, and only strip the cwd from each result if it was not an absolute pattern.\nAlso, weird though it may be, there were previous cases where {/foo,/foo} would return the same thing more than once, so each match needs to be tied to a given glob in the set.  That's the ultimate solution, though @TooTallNate's workaround is ok for the short-term.\n. Fixed on master, published as glob 3.1\n. Yeah, that's a bug.\n. Can you please try with the latest push to master?  Also published as glob@3.1.0.\n. Could you explain a little bit what \"not working for me at all now\" means?\nIs it throwing an error?  Hanging?  Doesn't install?\n. Aha.  It's getting confused when the cwd isn't process.cwd.\n. v3.1.3 should have what you need.  Thanks!\n. root is used when you want patterns starting with / to be interpreted as being in some specific directory.\nSeems like that's broken atm too, though.\n. Say you have this structure:\na\n+-- b\n|    `-- c\n+-- c\nThen glob('/c', {root: 'a', cwd: 'a/b'}) would match a/c but not a/b/c.  If you drop the slash, then you see that glob('c', {root:'a',cwd:'a/b'}) would match the a/b/c file, but not the a/c file.\nWhat's not immediately clear is how best to express this in the results.  I'm thinking that any and all patterns that start with / should show up in the results as a full absolute path, with the root config pre-pended.\nAnother option would be to resolve everything against the cwd, but that breaks the symmetry with how it works by default, when cwd is process.cwd(), and root is /.  The \"evil owl\" pattern {*,/*} returns /etc, /usr, /home, etc... for the \"absolute\" part, but foo, bar, baz, ... for the \"relative\" part.\nSetting a root is important for handling situations like ignore files.  /foo.txt in a .gitignore will prevent ./foo.txt from being included, but not ./bar/foo.txt.\nWhen building a tarball or something, though, you probably don't want to get the full path, since that'll result in adding a bunch of noise into your tarball, so this will have to be configurable, with the default perhaps being to prepend the root, and an option to disable, akin to rsync's '--no-implied-dirs' option.\n. Because the default root is /, not the cwd.  The evil owl {/*,*} needs to return everything in / as well as everything in ..  So, by default, yes it is prefixed.\nIf you want to disable this, set { nomount: true } in the options object.\n. The glob tests are a little tricky right now.  You have go have bash4 installed, and turn on extglob and globstar in your shell.\nIt'd be nice to bundle a standalone bsdglob or something for reference, but I haven't done that yet.\n. Yes that is a bug.\nOn Monday, February 6, 2012, Johan Nordberg \nreply@reply.github.com\nwrote:\n\nYep, installed bash4 and all tests pass. However i still can't get\nnegating patterns to work\nbash\n~/Development/node-glob\n$ ls\nREADME.md    examples     glob.js      negate.js    node_modules\npackage.json test\n~/Development/node-glob\n$ ls *.!(js)\nREADME.md    package.json\n~/Development/node-glob\n$ node -e \"require('./')('*.!(js)', console.log)\"\nnull []\nAm i missing something?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/isaacs/node-glob/issues/33#issuecomment-3836490\n. ** is only magical when it's the only thing in a path portion.  Try **/*.txt.  See the documentation in the minimatch readme file.\n\nTHe stray console.error is removed on 3.1.2.\n. Use node 0.6.\n. Nevertheless, fixed in glob 3.1.6 :)\n. I don't know what you're actually asking for.  What change would have to be made in node-glob?\n. I see.  Yes, supporting an array of glob patterns is planned for ignorefile support, but it'll probably be a different module.  Something like this:\njavascript\nvar mg = new MultiGlob(['a/b/c', 'd/e', '!test'], options)\nmg.on('match', doSomething)\nIf it turns out to not be much of a change, or too difficult to do externally, I might fold this into node-glob directly, and just have Glob take an array or a single pattern. Would this API satisfy your use-case?\n. Turns out this is complicated and hard, and I ended up doing IgnoreFile as its own module.\n. e8f420866ebf4aed0f2e043dcda2dbb23a650889\n. Oh, also, 83939fc8bcbc330d2baff92936e2ce589d2c71c2\n. Landed on 7246f640be49401845d7935f9ec2f07137c39a5d, published as 3.1.7, thanks!\n. Doing gitignore handling is a much more involved process, since it requires the ability to pause and resume the walk at any arbitrary point.\nI write https://github.com/isaacs/fstream-ignore to do this.  It's very extensible.  I'm using it in https://github.com/isaacs/fstream-npm.  However, if you just want the list of matches, it's a bit heavy, since it stats and reads every file.\nIf you want to add this functionality to glob, it should be a separate module.  This is strictly an implementation of glob(3) in javascript.\n. Fixed in the latest release.\n. Confirmed.  That is a bug.\n. Working on latest release.\n. Yep.  That's the bug, alright.  Thanks.\n. I'm gonna call that a wontfix.  If you have a patch that does this in some elegant way, then fine, but otherwise just normal paths work with glob.\n. Landed on 3.1.14.  Thanks!\n. > it appears that graceful-fs is causing hanging write operations.\nWhat does this mean?  Can you provide a test-case that reproduces what you're talking about?\n. Fixed on isaacs/node-graceful-fs@3f391309b97e5c61bb8cf633911d0a02f095b024\nThanks!\n. +1. Patch welcome.\n. Fixed by 1b0c060, put the wrong issue number in it.\n. Interesting. So the directory filtering is failing.\n. Yeah, definitely a bug.  Patch welcome.\n. Works properly on Unix.\n. Seems like it works properly on Windows as well:\n```\nC:\\globtest\\node-glob\\test>cat g.js\nvar glob = require('glob');\nvar path = require('path');\nglob(__dirname + '/*/', function (err, matches) {\n console.log(matches); // matches is ok\n});\nC:\\globtest\\node-glob\\test>node g.js\n[ 'C:\\globtest\\node-glob\\test/00-setup.js',\n  'C:\\globtest\\node-glob\\test/bash-comparison.js',\n  'C:\\globtest\\node-glob\\test/bash-results.json',\n  'C:\\globtest\\node-glob\\test/cwd-test.js',\n  'C:\\globtest\\node-glob\\test/g.js',\n  'C:\\globtest\\node-glob\\test/mark.js',\n  'C:\\globtest\\node-glob\\test/pause-resume.js',\n  'C:\\globtest\\node-glob\\test/root-nomount.js',\n  'C:\\globtest\\node-glob\\test/root.js',\n  'C:\\globtest\\node-glob\\test/zz-cleanup.js' ]\n```\n. This is using glob 3.1.17, btw.\n. I installed the msysutil suite with git, but it's normal cmd otherwise.  I just don't know most of the windows equivalents.\nWhat is the actual output?\n. That is, what is the output if glob(__dirname + '/**/*') vs the output of glob('**/*')?\n. Also, what is node -v?\n. Type Alt-Space, E, K, then select with your mouse, then press Enter.  This copies the output to your clipboard, and you can paste it into a code block with . Put a `/` in front of `'test'`.  Echo out the actual path that you're globbing, you'll see the problem right away, I'm sure.  (`__dirname` doesn't end in a slash.)\n. diff\n-glob(__dirname + 'test//*', function (err, matches) {\n+glob(__dirname + '/test//*', function (err, matches) {\n```\n. Aha!  Ok, reproducing now:\n``` javascript\nvar glob = require('glob');\nvar p1 = 'test/*/';\nglob(p1, function (err, matches) {\n    console.log(p1, matches);\n});\nvar p2 = __dirname + '/' + p1;\nglob(p2, function (er, matches) {\n    console.log(p2, matches);\n});\n```\nOutput:\nc:\\globtest\\Helena>node test.js\nc:\\globtest\\Helena/test/**/* []\ntest/**/* [ 'test/asdasd.txt',\n  'test/dir',\n  'test/dir/a.txt',\n  'test/dir/b.txt',\n  'test/dsadsa.txt' ]\nFolder structure:\ntest/\ntest/asdasd.txt\ntest/dir/\ntest/dir/a.txt\ntest/dir/b.txt\ntest/dsadsa.txt\n. Now I'm confused about why it's working sometimes, but not in this specific case...  Very strange.\n. @satazor Separate issue.  Please file a separate bug with a reproduction case.\n. I see this.  Can you please try with 3.1.19?  Should be fixed now.\n. Debug messages are fixed by #55\n. Hm, I can't seem to reproduce.\n```\nc:\\globtest\\node-glob>node g.js\nc:\\globtest\\node-glob\\ [ 'c:/globtest/node-glob/' ]\nc:\\globtest\\node-glob [ 'c:/globtest/node-glob/' ]\nc:\\globtest\\node-glob>cd test\nc:\\globtest\\node-glob\\test>node ../g.js\nc:\\globtest\\node-glob\\ [ 'c:/globtest/node-glob/' ]\nc:\\globtest\\node-glob [ 'c:/globtest/node-glob/' ]\nc:\\globtest\\node-glob\\test>cp ../g.js ./g.js\nc:\\globtest\\node-glob\\test>node g.js\nc:\\globtest\\node-glob\\test\\ [ 'c:/globtest/node-glob/test/' ]\nc:\\globtest\\node-glob\\test [ 'c:/globtest/node-glob/test/' ]\nc:\\globtest\\node-glob\\test>cd ..\nc:\\globtest\\node-glob>cd ..\nc:\\globtest>cd ..\nc:>node c:\\globtest\\node-glob\\test\\g.js\nc:\\globtest\\node-glob\\test\\ [ 'c:/globtest/node-glob/test/' ]\nc:\\globtest\\node-glob\\test [ 'c:/globtest/node-glob/test/' ]\nc:>z:\nZ:>node c:\\globtest\\node-glob\\test\\g.js\nc:\\globtest\\node-glob\\test\\ [ 'c:/globtest/node-glob/test/' ]\nc:\\globtest\\node-glob\\test [ 'c:/globtest/node-glob/test/' ]\n```\nIs it possible that you were using a different version of glob or something?\n. Any chance to try to repro this?\n. Actually, this seems to work for me.\n``` javascript\n// t.js\nvar glob = require('glob');\nvar assert = require('assert');\nglob(__dirname + '\\', { mark: true }, function (err, matches) {\n    // Should contain the dirname with / on the end\n    console.log(matches);\n    console.log(\"glob version %s\", require('glob/package.json').version);\n    console.log(\"node version %s\", process.version);\n    assert.equal(matches[0], __dirname.replace(/\\+/g, '/') + '/');\n    console.log('ok');\n});\n```\nC:\\globtest\\x>C:\\node-v0.10.12\\Release\\node.exe t.js\n[ 'C:/globtest/x/' ]\nglob version 3.1.14\nnode version v0.10.12\nok\nAre you sure you're using the latest version of glob?\n. Note, a \"fresh install of windows\" doesn't matter if you're using an old install of node and glob.  Do npm ls glob to see which version you're using, and npm install glob@latest to make sure to install the latest one.\n. Ha!  I was the one using an outdated glob!  Apparently this was fixed in 3.1.14, but regressed in 3.2.\n```\nC:\\globtest\\x>C:\\node-v0.10.12\\Release\\node.exe t.js\n[ 'C:/globtest/x' ]\nglob version 3.2.1\nnode version v0.10.12\nassert.js:92\n  throw new assert.AssertionError({\n        ^\nAssertionError: \"C:/globtest/x\" == \"C:/globtest/x/\"\n    at C:\\globtest\\x\\t.js:9:12\n    at Glob. (C:\\globtest\\node_modules\\glob\\glob.js:90:7)\n    at Glob.EventEmitter.emit (events.js:95:17)\n    at Glob._processEmitQueue (C:\\globtest\\node_modules\\glob\\glob.js:294:10)\n    at Glob.emitMatch (C:\\globtest\\node_modules\\glob\\glob.js:271:10)\n    at Glob._finish (C:\\globtest\\node_modules\\glob\\glob.js:232:8)\n    at Glob. (C:\\globtest\\node_modules\\glob\\glob.js:173:27)\n    at Glob.cb (C:\\globtest\\node_modules\\glob\\glob.js:315:11)\n    at Glob. (C:\\globtest\\node_modules\\glob\\glob.js:355:16)\n    at Glob._afterStat (C:\\globtest\\node_modules\\glob\\glob.js:561:6)\n``\n. Yes, I'm emulating windows 7 in VMWare.  I don't have a \"real\" bare-metal windows machine.\n. Fixed on latest release.  Issue was thatpath.resolve()removes trailing slashes.\n. Whoops!  Sorry, thought i'd removed those already.  Landed on master.\n. done on 3.2\n. landed in master, thanks.\n. Very tricksy!  The reason is that, if you don't have any magic in the pattern, glob \"shortcuts\" and just checks for the exact string you gave it.  Since it's a case-sensitive file system, that means that it will only find that one exact thing, regardless of thenocase` flag.\nIt would be nice if there were a way to detect a case-sensitive file system, but afaik, there is no such way.  I think perhaps we just need to treat nocase patterns as if they had magic at all levels, even if they don't.  Consider this:\n```\nmkdir /tMp\ntouch /tmp/foo\ntouch /tmp/fOo\ntouch /tMp/Foo\ntouch /tMp/foO\nglob.sync('/tmp/foo', {nocase: true})\n// expect all 4, so we need to test every part of the pattern!\n```\nA test would be awesome.  The only way I can see to test this would be to mock out the fs object, which is tedious, but not super hard.  You've messed around with glob a lot, wanna try writing a patch?  Probably just a matter of changing some check somewhere to assume that patterns are always magical if nocase is set.\n. I think it's just in minimatch, iirc.  Search for hasMagic.  It should\ndefault to true if nocase is set.  I think it currently defaults to\nfalse, then gets set to true if there are any magic chars.  If there's no\nmagic, then it returns a string instead of a regexp.\nOn Thu, Feb 21, 2013 at 7:45 AM, Ben Alman notifications@github.com wrote:\n\nIs this entirely handled in minimatch, or is it in glob as well? I'm\nfinding it difficult to puzzle through this one.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/isaacs/node-glob/issues/59#issuecomment-13895393.\n. Patch welcome\n. Landed in 3.2.1\n. Yep, this is a bug.\n. It's not property respecting the this.minimatch.negate flag, which should flip all the comparisons.\n. Patch welcome.\n. I'm not familiar with glob-whatev.  But this module should behave 100% the way that the documentation says it does.  If you find a case where it doesn't, then that's a bug.\n\nBy default, it supports everything under \"Pattern Matching\" in man bash, except for Tilde Expansion, and adds \"negation\" as well (like in .gitignore file patterns).  You can turn off any options you want.\n. Er, turn off any options you don't want, I guess ;)\n. Issues on this repo are for bugs in this repo.  It's not an effective way to post a question to users of node-glob, since most of them never see this page.\nIt'd be better to post to the nodejs mailing list, probably.\n. Right, I see why this is happening.\nLet's say you have a tree like this:\n.\n\u2514\u2500\u2500 y/\n \u00a0\u00a0 \u251c\u2500\u2500 d/\n \u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 e.c\n \u00a0\u00a0 \u251c\u2500\u2500 a\n \u00a0\u00a0 \u251c\u2500\u2500 a.c\n \u00a0\u00a0 \u251c\u2500\u2500 b\n \u00a0\u00a0 \u2514\u2500\u2500 b.c\nand you search for the glob pattern: **/*.c.  You want to find these things:\ny/a.c\ny/b.c\ny/d/e.c\nWhen it has a globstar, that can match 0 or more path segments.  So, the way that it does that is to read the dir, then test each child as if they were below the globstar, and if they replace the globstar.\nSo, you have a pattern like [**, *.c].  So, you read the cwd, and get [x, y].  For each child, test if it matches without the globstar, if the child replaces the globstar (to find its grandchildren) and also below the globstar (for further descendants).  This results in the following patterns:\n[ *.c ]\n[ y, *.c ]\n[ y, **, *.c ]\nWe then process each of those.\nThe first matches nothing.\nThe children of y are [a a.c b b.c d].  For the first pattern, this is simple, and then for the next, we do the same special globstar approach.\n[ *.c ] --> [] (no matches)\n[ y, *.c ] --> [ y/a.c, y/b.c ]\n[ y, **, *.c ] -->\n  [ y, *.c ] (without the globstar, note the duplicate!)\n  [ y, a.c, *.c ]\n  [ y, a.c, **, *.c ]\n  [ y, b.c, *.c ]\n  [ y, a, *.c ]\n  [ y, a, **, *.c ]\n  [ y, b, *.c ]\n  [ y, b, **, *.c ]\n  [ y, d, *.c ]\n  [ y, d, **, *.c ]\nI'm not sure just how much of a problem this really is.  After all, if you listen on the 'end' event (or just use the top-level function instead of the object) then you'll get the deduped list.  Solving this problem without breaking the other trickier examples would be pretty tough.\n. This is exactly a duplicate of #64 (posted by @chbrown).  Apparently it was a mistake to close that one, since more people are clearly affected by it :)\nThere's an explanation in #64 about why this is happening.  The trivial fix breaks a bunch of tests, but this is indeed a bug.\n. > Ouch. The issue immediately before this one...\nHaha, no worries.  I guess it just shows that more people are affected by this than I'd thought, that's all.\n\nhow do the post-processing methods de-dupe?\n\nYes, it's using Object keys, as long as you don't set nounique:true in the options.  That flag is important if you want brace-expanded portions to behave exactly like Bash (where dupes will show in that case).\nI think the right solution is not to dedupe along the way, but rather to find an algorithm for globstar that doesn't suffer from this shortcoming.\n. Actually, whatever, just dedupe the patterns that globstar resolves to.\n. The reason is that it's aggressively caching stat results to save syscalls.  Each of those is an object, and with a whole lot of them, it gets considerable.\nIt'd probably be possible to replace the simple object caches with a LRU or something using the https://github.com/isaacs/node-lru-cache module\n. I suspect that this is no longer an issue, as this module has been heavily refactored and slimmed down since then.  Closing for now, but please do pipe up if it's still a problem in the latest release.\n. Expected behavior.\nYou're looking for c/**/f.json, right?  Well, glob does a readdir on a dir like c/w, and gets f.json, w.js as results.  At that point, it doesn't know whether the items returned are directories or files.  And, it doesn't care: c/w/f.json is a match, but if f.json is a dir, then c/w/f.json/f.json would also be a match, and c/w/f.json/a/b/c/d/e/f/g/f.json would be a match as well.  So, it does a readdir on c/w/f.json, which tells it two things: (1) Is f.json a dir? and (2) if it's a dir, what's inside it?  The ENOTDIR tells is that it's not a directory, and it moves on.\nThe fact that it's calling stat at all is a bit odd in this case.  Can you please provide an actual test script in JavaScript, with a real folder structure?\n. In general it seems fine, and won't break anything on the Unix side.  Can you add a test that specifically addresses the problem in #61?\nAlso, I prefer to do package.json changes myself, but I can rebase that out.  You can point your package.json dependency at your github fork while waiting for this to be merged.\n. Landed on f3105a3cfc12d3c6e0a2c931d8cf7f1a6a1ff49a.  Thanks!\n. Maybe someday, but not likely any time soon.\n. I'd accept a PR to add a glob.Stream class that is a readable stream.  But I'd rather not change the glob.Glob class itself.  Just have glob.Stream wrap a glob.Glob object internally, and inherit from stream.Readable.\n. Rather than land this in this module, here's a quick wrapper that anyone can use\njavascript\n// copyright Isaac Z. Schlueter. Public Domain.\nvar glob = require('glob')\nvar Readable = require('stream').Readable\nvar util = require('util')\nutil.inherits(GlobStream, Readable)\nfunction GlobStream (pattern, options) {\n  Readable.call(this, options)\n  var self = this\n  this.glob = glob(pattern, options)\n  this.glob.on('match', function (m) {\n    self.push(m)\n  })\n  this.glob.on('end', function () {\n    self.push(null)\n  })\n  this.glob.on('abort', function () {\n    self.push(null)\n  })\n  this.glob.on('error', function (er) {\n    self.emit('error', er)\n  })\n})\n. Already fixed on https://github.com/isaacs/node-glob/commit/1bf9d36cc8bb3081ed2c2978eb74dbc33bcdedf1 ;)\n. is this still an issue?  Tests seem to be passing, as far as I can tell.\n. Yeah, this isn't a bug.  Just an annoying thing.\n. Sorry for the delay, I've been meaning to get to this, and hoped that I would over the thanksgiving holiday, but it slipped.\nI'll try to land this week.  Thanks for your patience.\n. Don't worry about rebasing on master, I think the patch should land pretty cleanly, and it's relatively simple, so it shouldn't be too hard for me to pull forward if necessary.\n. @stefanpenner et al: See #146. I need a test that passes with the patch, and doesn't pass without the patch.\nNothing can be landed in this library with a valid test.  I'm sorry for being so strict about this, but it's the only thing that makes maintenance of this module even remotely possible.\n. Yes, the test needs to run on Unix (mostly so I don't inadvertently destroy it some day, which I probably will otherwise).\nWindows CI would be awesome, and I'd greatly appreciate getting this module running somewhere.  But it's not a replacement for a test that runs on Unix.\n. Yes, plus one, would merge.  I suggest hijacking or mocking whatever is necessary to make the patch in #146 testable on unix.  That's actually all that's missing from getting to UNC support; appveyor is optional.\n. There isn't a working fix to merge, or else I would have done so by now.  What you're waiting for is not \"this fix to land\", but rather \"a fix to exist\".\nHere's what's needed for a valid solution, to this or any defect in any code I maintain:\n1. Code that fixes the problem.\n2. Tests that fail without the patch, and pass with the patch.\n3. Those tests have to run on Unix systems (mock everything, I don't care, but the test has to actually run)\nWithout (2), it's not clear that the code actually works.  Without (3), the tests will start failing some day and no one will notice.  These aren't weird desert island requirements or unrealistic doom and gloom predictions.  They're just what happens.\nI haven't had time to dig into this particular issue.  @stefanpenner made a courageous attempt, but then seems to have faded away with an ominous last message about a Pandora's Box.\nI understand that this is important to you all.  That importance does not change the fact that I cannot accept changes that are going to reduce test quality.  Maybe if one of you work at a company that benefits from having a glob implementation in JavaScript, and is affected by this Windows-specific issue, you can try to convince your boss to let you spend a few days working on it.\n. Yeah, I think it'd be ok to add a feature to let you pass in a JavaScript sort function (of the kind passed to Array.sort), but the default built in sorting will remain as it currently is.\n. Fixed in 4.1.\nreaddir called with args { '0': 'test', '1': [Function] }\nreaddir called with args { '0': 'test/a', '1': [Function] }\nreaddir called with args { '0': 'test/a/abcdef', '1': [Function] }\nreaddir called with args { '0': 'test/a/abcfed', '1': [Function] }\nreaddir called with args { '0': 'test/a/b', '1': [Function] }\nreaddir called with args { '0': 'test/a/bc', '1': [Function] }\nreaddir called with args { '0': 'test/a/c', '1': [Function] }\nreaddir called with args { '0': 'test/a/cb', '1': [Function] }\nreaddir called with args { '0': 'test/a/symlink', '1': [Function] }\nreaddir called with args { '0': 'test/a/abcdef/g', '1': [Function] }\nreaddir called with args { '0': 'test/a/abcfed/g', '1': [Function] }\nreaddir called with args { '0': 'test/a/b/c', '1': [Function] }\nreaddir called with args { '0': 'test/a/bc/e', '1': [Function] }\nreaddir called with args { '0': 'test/a/c/d', '1': [Function] }\nreaddir called with args { '0': 'test/a/cb/e', '1': [Function] }\nreaddir called with args { '0': 'test/a/symlink/a', '1': [Function] }\nreaddir called with args { '0': 'test/a/c/d/c', '1': [Function] }\nreaddir called with args { '0': 'test/a/symlink/a/b', '1': [Function] }\n. Hm.  Seems like it'd be better to just make this work.\n. Why doesn't broccoli use glob.sync then?  It's a command-line builder-type app, right? (Or am I missing the point of it...?)\nExcept in extremely rare scenarios, async fs I/O will always be strictly slower than sync fs I/O.  If you don't need to be doing many things in parallel, there is no benefit.\nThis is my primary objection to saying \"Just add await!\" or other coro-style approaches to making code \"look sync\".  How it looks is the smallest downside of asynchronous code!  If you need to run lots of stuff in parallel, and responding consistently is worth a bit of a slowdown across the board, and a huge percentage of your time is spent in a waiting sleep mode, then async I/O is great.\nThis describes most web servers, but not most command-line programs, which typically do a small number of things at a time, and care more about just blasting through it all as fast as possible.\n. Oh, ok.  Then yeah, it's just slow.  I've done a lot of combing through it to remove unnecessary syscalls, but haven't profiled the JS itself.  Would love patches to make it faster.\n. Ok!  Initial investigation suggests that the biggest source of the delay is reliance on node's fs.readdir to determine both directory-ness and contents.  Since this uses a file descriptor, it's getting wrapped by graceful-fs which is explicitly designed to trade speed in favor of managed resource utilization.  So that sucks.\nAdditionally, there's some just plain shoddy JavaScript that's accreted over time in the readdir callback handling that V8 is having trouble optimizing.  I think that whole area needs a thorough refactoring to remove a few steps, and especially since glob matching is being used in some very time-sensitive applications, all of the .bind() and .call() usage needs to be eliminated.  Wrapping callbacks to do stuff at the end, tons of anonymous closures being defined inside of methods, it's kind of a giant mess.  I have enlisted the help of The Dark Pony Zalgo to have a single code path that is used for both sync and async behavior.  I thought that I could preserve sanity if His Dark Tendrils were buried deep enough below the API layer.  I was wrong.\nLastly, in the globstar case specifically, both bash 4.3 and the next version of node-glob have to do an lstat on all directories encountered in the crawl, since symlinks to directories should not be crawled.  So, the Node statSync and readdirSync timing benchmark test is not quite an apples-to-apples comparison.  It should probably lstatSync each directory as well as readdiring it.  It's still a LOT faster than the node-glob tests, but falls a bit more behind the bash/zsh test cases, as one would expect.\nI've got the bash43 style globstar behavior implemented properly on a branch now, but it's even slower.  I'd like to refactor and optimize it to get the speed up before merging into master, which will make this much better.\n. On the splitsync branch, I added another 10x to the benchmark script, and got these numbers:\nBash timing: real   3m26.991s\nZsh timing: real    1m56.420s\nNode statSync and readdirSync timing: real  2m0.762s\nNode readdirSync error-catching timing: real    1m52.183s\nNode glob.sync timing: real 3m43.829s\nNode glob async timing:\nFATAL ERROR: CALL_AND_RETRY_2 Allocation failed - process out of memory\nbenchmark.sh: line 70: 52477 Abort trap: 6           node -e '\n  var glob=require(\"../\");\n  glob(\"**/*.txt\", function (er, files) {\n    console.log(files.length)\n  })'\nglob.sync is comparable to Bash 4.3 on a huge dataset, and the master async glob runs out of memory.\nWith the 100000 file set, it's this:\nBash timing: real   0m5.656s\nZsh timing: real    0m3.711s\nNode statSync and readdirSync timing: real  0m3.291s\nNode glob.sync timing: real 0m12.116s\nNode glob async timing: real    0m39.727s\nThe sync approach is about 2.5 times Bash 4.3, 4x zsh and the naive node sync approach.\nNext step is to refactor the async approach similarly, and then it's profile time.\n. Currently, glob.sync is about 1.5 to 2x the time of bash 4.3, and glob is about 4-5x the bash time.  Zsh is a little bit faster, but that's because its globstar still crawls symlinked dirs, so it gets away with saving an extra lstat call.\nCalling this mission accomplished!  Look for massive speed improvements on glob 4.1.\n. @bpasero Even if you do the file actions asynchronously, there is usually a limit to just how async the fs can be, and there is a hard limit to how many threads node will use to perform async fs operations.  (Once upon a time that was 4, but I recall it being increased, maybe there's a cleverer heuristic involved since last I saw that code, which was a few years ago.  It might not be as \"hard\", but there is still definitely a limit.)\nSo, if you are parallelizing more fs ops than node allocates threads, it's going to back up, and be effectively serialized anyway.  (Of course, \"serialized\" with multiple parallel tracks, as each thread finishes what it's doing and then takes on a new job.)\nHowever, all of this is ultimately limited by the file system itself!  Spinning disks can only be in one position, so if you're trying to read 2 files in parallel, the fs will either thrash (making both operations slower than they would've been), or make one operation wait for the other.\nStat and readdir calls are less thrashy and more cacheable by the fs, since they're only dealing with the file link table (at least, on most Unixy systems).  But in fact, if every bit of data is available in the operating system's fs cache, they'll be very fast, and adding the async thread management overhead will be relevant.\n\"Parallelizing\" operations on a single machine (whether that's a single cpu or a single disk) is more like \"multitasking\" than \"teamwork\".  When you parallelize things across a network, of course, it's a whole different story, which is why things like Hadoop are so great for massively big data problems, compared with writing a simpler program for a single machine.  But when you parallelize a bunch of operations that are effectively throttled by a single bit of hardware, as a general rule, you're almost certainly not going to make things faster.\nLots of qualifiers there.  It's highly dependent on a lot of factors, like what specific type of disk is involved, the operating system, the file system type, as well as just whatever else the machine happens to be doing at the time.\nIf you are doing many things in parallel (for example, it's a web server, where you don't want to pause in replying to one user's HTTP request while you read a file for another user), then async is absolutely the way to go.  Node makes this the \"default\" path because it's designed for building network programs, where this usually matters.\nIf you're a web server, then providing users with a consistently fast connection pick-up, and a predictable first-byte time, is all that really matters.  The \"average file read time\" is 100% worthless as a metric, if you lost business because some unlucky user had to wait 2s for a web page to load, and decided to hit the back button.\nBut if you're a cli utility, especially one that doesn't make network requests, then the situation is completely reversed.  The better approach is to avoid thrashing the disk, and since you have exactly one user who is going to wait for every single task to be completed, reducing the average task time is the way to go, so sync isn't just easier, it's also better.\n. > If all you do is just walking through the file system, I would not expect sync to be much slower than async.\nWhat I'm saying is that your expectation is wrong. You should expect sync to be faster than async.  Async is always slower, it just has less of an effect on slowing down other things (servers etc.)\n. Thanks, @joliss \n. I think this is not such a great idea.  But I'd be happy to accept a pull request that made it throw when no cb is provided and sync is not set to true, since I agree that's almost always going to be a mistake.\nYou can also use glob.sync(...), by the way.\n. Yeah, I guess that's getting added after the 'match' event is emitted.\nThis is a bug.  Patch welcome.\n. Works for me in latest releases of 0.8, 0.10, and 0.11.\n```\n$ cat g.js\nvar glob = require('glob')\nglob('**', {mark:true}, function(er, c) {\n  console.error('cb', er, c)\n}).on('match', function(m) {\n  console.error('match', m)\n}).on('end', function(c) {\n  console.error('end', c)\n})\n$ node g.js\nmatch deep/\nmatch g.js\nmatch deep/deep.txt\nmatch deep/deeper/\nmatch deep/deeper/deeper.txt\nmatch deep/deeper/deepest/\nmatch deep/deeper/deepest/deepest.txt\ncb null [ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt',\n  'g.js' ]\nend [ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt',\n  'g.js' ]\n$ find .\n.\n./.g.js.swp\n./deep\n./deep/deep.txt\n./deep/deeper\n./deep/deeper/deeper.txt\n./deep/deeper/deepest\n./deep/deeper/deepest/deepest.txt\n./g.js\n```\nPlease share your standalone script that's behaving incorrectly.\n. Works for me:\n```\n$ find .\n.\n./deep\n./deep/deep.txt\n./deep/deeper\n./deep/deeper/deeper.txt\n./deep/deeper/deepest\n./deep/deeper/deepest/deepest.txt\n./g.js\n$ cat g.js\nvar glob = require('glob');\nvar g = glob.Glob('d*/', {mark: true}, function(err, result) {\n  console.log(result);\n});\ng.on('match', function(filepath) {\n  console.log('match: %s', filepath);\n});\n$ node g.js\nmatch: deep/deep.txt\nmatch: deep/deeper/\nmatch: deep/deeper/deeper.txt\nmatch: deep/deeper/deepest/\nmatch: deep/\nmatch: deep/deeper/deepest/deepest.txt\n[ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\n$ node -v\nv0.8.26\n```\nWhat operating system?\n. Still works for me.  10000 times it works for me.  ??\n```\n$ cat g.js\nvar glob = require('glob');\nvar assert = require('assert');\nvar endEmitted = false;\nvar g = glob.Glob('d*/', {mark: true}, function(err, result) {\n  endEmitted = true;\n  console.log('cb', result);\n});\ng.on('match', function(filepath) {\n  assert(!endEmitted);\n  console.log('match: %s', filepath);\n});\ng.on('end', function(result) {\n  endEmitted = true;\n  console.log('end', result);\n});\n$ for i in $(seq 1 10000); do node g.js >/dev/null || break; done\n$ echo $?\n0\n``\n. Sorry, I'd be happy to fix this, but I need a reproducible standalone test.  Can you reproduce this outside of globule?  What do you get when you run the g.js above?\n. The one with the asserts, I mean.\n. Found it.\n. Ugh, I can reproduce it occasionally in a standalone script, but not in a test that immediately writes the files and then verifies them.\n. I suspect that there's a timing issue at play here.\n. Yep, slowing down the _stat call makes it fail.\n. I will open a new one.  I've got a failing test and a theory about how to fix it.\n. I don't want to add multi-glob functionality, per se, but I do think it's reasonable to add anexclusions` set, as a better way to do negative globs.\n. See: https://github.com/isaacs/node-glob/issues/115#issuecomment-67589715\n. Yes, that is definitely a bug.\n. Works for me.\n```\n$ ls -laF foo\ntotal 8\ndrwxr-xr-x+  3 isaacs  staff  102 Oct 14 14:22 ./\ndrwxrwxrwx+ 15 isaacs  staff  510 Oct 14 14:21 ../\nlrwxr-xr-x   1 isaacs  staff    6 Oct 14 14:22 bar@ -> ../bar\n$ ls -laF bar\ntotal 8\ndrwxr-xr-x+  3 isaacs  staff  102 Oct 14 14:22 ./\ndrwxrwxrwx+ 15 isaacs  staff  510 Oct 14 14:21 ../\nlrwxr-xr-x   1 isaacs  staff    6 Oct 14 14:22 foo@ -> ../foo\n$ ls -laF bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo\nlrwxr-xr-x  1 isaacs  staff  6 Oct 14 14:22 bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo@ -> ../foo\n$ echo $NODE_PATH\n$ export NODE_PATH=$PWD\n$ node -e \"console.log(require('glob').sync('foo/**'))\"\n[ 'foo',\n  'foo/bar',\n  'foo/bar/foo',\n  'foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar' ]\n$ node -e \"require('glob')('foo/**', console.log)\"\nnull [ 'foo',\n  'foo/bar',\n  'foo/bar/foo',\n  'foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar' ]\n```\nDo you have a test case?\n. Hm.  So, shell globbing doesn't \"only give you unique files\", nor does it \"not follow symlinks\".\nExample:\n```\n$ tree\n.\n\u251c\u2500\u2500 bar/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 baz -> ../baz/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 foo -> ../foo/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 barfile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 lnsrcfile\n\u251c\u2500\u2500 baz/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bar -> ../bar/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 foo -> ../foo/\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 bazfile\n\u2514\u2500\u2500 foo/\n    \u251c\u2500\u2500 bar -> ../bar/\n    \u251c\u2500\u2500 baz -> ../baz/\n    \u251c\u2500\u2500 dir/\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 a/\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 b/\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 c/\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 d/\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 foolink -> ../../../../../../bar/foo/bar/foo/\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 recurselink -> ../../../../../../\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 weirdlink -> ../../../../../../bar/foo/bar/\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 deepfile\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 dirfile\n    \u251c\u2500\u2500 foofile\n    \u2514\u2500\u2500 lnfile -> ../bar/lnsrcfile\n17 directories, 7 files\n$ shopt -s extglob; shopt -s globstar\n$ for i in +(foo|bar|baz)/*/file; do echo $i; done\nbar/barfile\nbar/baz/bazfile\nbar/foo/foofile\nbar/foo/lnfile\nbar/lnsrcfile\nbaz/bar/barfile\nbaz/bar/lnsrcfile\nbaz/bazfile\nbaz/foo/foofile\nbaz/foo/lnfile\nfoo/bar/barfile\nfoo/bar/lnsrcfile\nfoo/baz/bazfile\nfoo/dir/a/b/c/d/deepfile\nfoo/dir/a/b/c/d/foolink/foofile\nfoo/dir/a/b/c/d/foolink/lnfile\nfoo/dir/a/b/c/d/weirdlink/barfile\nfoo/dir/a/b/c/d/weirdlink/lnsrcfile\nfoo/dir/dirfile\nfoo/foofile\nfoo/lnfile\n```\nNote that symbolic links ARE being followed by **, and the \"same\" files DO appear multiple times (eg bar/foo/lnfile, baz/foo/lnfile).\nIt seems, however, that it does not explore symbolic links that reference a path portion of the current path to the symbolic link itself.  So, even though foo/bar/foo/foofile would match, it detects that foo/bar/foo refers to the foo/ part of itself, so it doesn't explore that bit.\nFurthermore, this ** behavior appears to have changed between Bash 4.1 and Bash 4.3!  Probably because it is unwieldy to deal with a gigantic mess of results when there are recursive symbolic links.\nThe crash that you're seeing is happening because there are a large number of recursive symbolic links, rather than a particularly deep set of them, so you're hitting the memory limit before hitting the ECYCLE error from the fs.  Updating to Bash 4.3-style behavior would fix the problem.\n. Your test is interesting, but non-authoritative.  The reference implementation that node-glob targets is bash 4's globstar and extglob behavior.  The example I posted above does show that Bash 4.1 and Bash 4.3 have different behavior, and it seems that Bash 4.3's globstar behavior is superior, so that's what we should target.\nIt doesn't matter what zsh or tab-completion do, ultimately, though this is one example of a use-case where the more \"conservative\" results are much more useful.\n. No, I don't have bash 4.1 installed any longer (upgraded due to shellshock some time ago).\nBut if I re-generate the test fixtures with bash 4.3, I see different results.  So, yeah, we're doing the wrong thing now (but only because \"the right thing\" changed!)\n. Here's the diff in the test fixture results from bash 4.1 (used to generate them originally) and bash 4.3 (which I have now) https://gist.github.com/isaacs/f748618f744f61756f55\n. So, it seems like the behavior can be summed up as: \"While expanding matches for a ** section, do not explore any directories already part of that particular ** expansion\".\nThis, of course, is after consecutive ** segments are collapsed.\n. Landed in 4.0, made MUCH faster in 4.1.\n. Landed, but using the once module instead of juggling event handlers.  Since presumably the glob object is going to be disposed of shortly in the event of an error callback, removing the handler is unnecessary, provided there is a hard guarantee that the cb is not fired again (which once provides).\n. minimatch is more like fnmatch, not an exact corrollary to glob.\nGlob is doing brace expansion, which is a shell-ism, rather than a glob-ism, per se.  On the shell, when you do echo *.{a,b,c} you are literally doing the exact same thing as echo *.a *.b *.c.  Check it out:\n$ node -p process.argv *.{a,b,c}\n[ 'node', '*.a', '*.b', '*.c' ]\nI'd be happy to accept a doc patch that clarifies that brace expansion happens before anything else, just like with the shell.\n. Function declarations are hoisted in JavaScript, and JSLint has kind of a bad attitude.\nNo thanks.\n. Well, it may not be unreasonable, but it is incorrect.\n```\n$ echo {}\n{}\n$ echo {*,}\nLICENSE README.md examples glob.js node_modules package.json test\n```\n. https://github.com/isaacs/node-glob/pull/96\n. I would accept a patch to do something like this.  If it's expensive in terms of performance then it should be optional.\n. https://github.com/isaacs/node-glob/pull/96\n. I bumped the major version for this.\nSeriously, though, people, you have to update your npm versions.  It has been almost a year since ^ support was added, and a few months since it's been the default.  You're getting left behind if you don't upgrade.\nDo this, everywhere:\nnpm install npm -g\n. You'll have to upgrade your version of Node to the latest 0.10 to build this package.\n. Aww, how sweet! Thanks!\n. The issue isn't with Node v0.8.  The issue is with npm 1.2.\nhttps://github.com/joyent/node/pull/7669\n. Fixed by 0414fb0\n. Something in your tree is depending on glob 4.x.  Probably it's doing either a \"glob\":\"*\" or \"glob\":\">= <something>\".  Neither of these are safe or advisable options.\nThe bug isn't in node-glob, the bug is in whatever is depending on it too loosely.\nTry doing npm ls glob in your project after a fresh npm install, and you'll see all the places where glob is getting installed.\n. Here's the culprit:\n```\n[https://github.com/stormpath/stormpath-sdk-node/master]isaacs@urdva:~/dev/js/x/stormpath-sdk-node v0.10.28\n\ud83d\ude3b  npm ls glob\nstormpath@0.1.2 /Users/isaacs/dev/js/x/stormpath-sdk-node\n\u251c\u2500\u252c grunt@0.4.5\n\u2502 \u251c\u2500\u252c findup-sync@0.1.3\n\u2502 \u2502 \u2514\u2500\u2500 glob@3.2.11\n\u2502 \u2514\u2500\u2500 glob@3.1.21\n\u251c\u2500\u252c grunt-cli@0.1.13\n\u2502 \u2514\u2500\u252c findup-sync@0.1.3\n\u2502   \u2514\u2500\u2500 glob@3.2.11\n\u251c\u2500\u252c grunt-contrib-jshint@0.7.2\n\u2502 \u2514\u2500\u252c jshint@2.3.0\n\u2502   \u2514\u2500\u252c cli@0.4.5\n\u2502     \u2514\u2500\u2500 glob@4.0.2\n\u251c\u2500\u252c grunt-contrib-nodeunit@0.2.2\n\u2502 \u2514\u2500\u252c nodeunit@0.8.8\n\u2502   \u2514\u2500\u252c tap@0.4.9\n\u2502     \u2514\u2500\u2500 glob@3.2.11\n\u251c\u2500\u252c grunt-contrib-watch@0.5.3\n\u2502 \u2514\u2500\u252c gaze@0.4.3\n\u2502   \u2514\u2500\u252c globule@0.1.0\n\u2502     \u2514\u2500\u2500 glob@3.1.21\n\u251c\u2500\u252c grunt-mocha-test@0.10.2\n\u2502 \u2514\u2500\u252c mocha@1.18.2\n\u2502   \u2514\u2500\u2500 glob@3.2.3\n\u251c\u2500\u252c istanbul@0.2.10\n\u2502 \u2514\u2500\u252c fileset@0.1.5\n\u2502   \u2514\u2500\u2500 glob@3.2.11\n\u251c\u2500\u252c load-grunt-tasks@0.2.1\n\u2502 \u251c\u2500\u252c findup-sync@0.1.3\n\u2502 \u2502 \u2514\u2500\u2500 glob@3.2.11\n\u2502 \u2514\u2500\u252c globule@0.1.0\n\u2502   \u2514\u2500\u2500 glob@3.1.21\n\u2514\u2500\u252c mocha@1.17.1\n  \u2514\u2500\u2500 glob@3.2.3\n[https://github.com/stormpath/stormpath-sdk-node/master]isaacs@urdva:~/dev/js/x/stormpath-sdk-node v0.10.28\n\ud83d\ude3b  npm ls cli dependencies.glob\nstormpath@0.1.2 /Users/isaacs/dev/js/x/stormpath-sdk-node\n\u2514\u2500\u252c grunt-contrib-jshint@0.7.2\n  \u2514\u2500\u252c jshint@2.3.0\n    \u2514\u2500\u2500 cli@0.4.5\n[https://github.com/stormpath/stormpath-sdk-node/master]isaacs@urdva:~/dev/js/x/stormpath-sdk-node v0.10.28\n\ud83d\ude3b  npm view cli dependencies.glob\n\n= 3.1.4\n```\n\nReported to author: https://github.com/chriso/cli/issues/50\n. In the short-run, you can avoid this by having a dependency at the top level on \"glob\":\"3\" it looks like.\n. What's happened is that you installed both browserify and glob.  Since browserify's glob dep was satisfied by the fact that you already had a glob 3.x there, it didn't install a second copy.  However, when you then installed glob 4.x, that clobbered the glob that browserify was depending on.\nnpm i browserify will fix the situation.\n. @mreinstein YES! this is something I'm sorta working on part-time, whenever I'm slacking from my CEO duties.  It's part of the \"refactor install to not be so dumb\" project.\n. This does seem to be a bug, yes.\n. Wait a minute... how are you passing an array to glob?  This module doesn't support that, last I checked.\n. Yeah... it looks like negation is just broken?  I'm not sure what it would do...\nThis seems to work fine:\n``` javascript\nvar glob = require('./glob');\nglob('!(node_modules)/**', {nonegate:true}, function (err, files) {\n    console.log(files);\n});\n```\n. Thanks, but I'm going to pass on this for now.  It's easy enough to wrap a callback-taking function in a promise, and this is not the best place to be doing that.\n. 03daf204c935fa04e90fb605f4e3c6cde07c2d43 thanks!\n. Landed and pushed. Thanks!\n. Fixed by 5f9bc8391924aa9ecf20814bc1ca431abd5acd74.  Thanks.\n. Bumped minimatch to 1.0.0, and glob to 4.0.5.\n. It always uses \"/\".  Doc patch welcome.\n. Landed on globstar43 branch.  Will be in master soon.  Probably this weekend.\n. already fixed.\n. I like how this approach at an API is more explicit than the weirdness around negated globs today.\nPatch welcome, but it'll have to have lots of tests and some very clear docs.  Note that it'll have to be implemented for both sync and async approaches separately.  (That is, glob.js and sync.js are similar logic, implemented in parallel.)\n. The latest version of graceful-fs is safe to drop in. We should just make\nit a proper dep.\nPatch welcome.\nOn Monday, September 8, 2014, Peter Braden notifications@github.com wrote:\n\nOf course, after looking at the code, graceful-fs is an optional\ndependency...\nWithout knowing any of the context behind this, I assume that graceful-fs\ncan't be seamlessly dropped in (hence the optionalDep).\nIs there any way to get glob to open less files?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/isaacs/node-glob/issues/116#issuecomment-54834611.\n. landed on master\n. Not by default. Set sort:true in the options object. \n. Files are sorted alphabetically.  So, this is \"correct\".\n\nYou could name files with a image-01 instead of image-1, or write your own sorting function.\n. Really?\n```\n$ du -h *\n4.0K    LICENSE\n 12K    README.md\n8.0K    examples\n 20K    glob.js\n500K    oh-my-glob.gif\n4.0K    package.json\n104K    test\n$ du -h package\n8.0K    package/examples\n100K    package/test\n656K    package\n```\n656k is not significant bloat.  How many copies of glob do you have in your project?\n. I don't understand the question.\nWhat is a \"flat file\"?\n. So you mean, you want to know if it has any special characters in the glob pattern?\n. Well, technically speaking, any pattern might expand to 0 files.  But it's not hard to add a function that just returns true or false if the glob has any pattern segments in it.\n. The fact that you say \"one more more\" files is confusing to me.  I'm going to add a hasMagic function since it's pretty easy and would be very useful, and I think it meets your needs, but I'm going to need more detail if not.\nThanks.\n. Ok, great. Use glob.hasMagic on 4.2.\nOn Friday, November 21, 2014, Dieter Oberkofler notifications@github.com\nwrote:\n\nMaybe I best explain it based on my actual use case:\nWe use glob as part of our Gulp based build system and typically there are\ntwo kind of uses.\nEither we process one single file or we process a group of files.\nIn the case that one specific file needs to be processed, we assume that\nthe file must exist and if it does not most likely something changed or is\nwrong (typically the file was renamed, is missing or was misspelled) in the\nbuild environment itself.\nWe would therefore like to identify a glob pattern as:\na) one that can only expand to exactly one file (or none if something is\nwrong)\nb) one that can expand to 0 or many files (if there are any wildcards in\nit)\nIn the case of a and if the glob pattern does not expand to exactly one\nfile, we would simply throw an error and alter the user that something must\nbe wrong.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/isaacs/node-glob/issues/120#issuecomment-63960649.\n. Done on globstar43 branch already.  That'll be merged into master once the perf is a bit better.\n. Sorry, I'm not interested in maintaining two metadata files.\n. Can you please provide a standalone glob test that does not involve gulp?\n. The negation semantics are really odd, actually, and I've thought a lot about ripping them out.  It shouldn't have anything to do with symlinks, though.\n. @impinball Yeah, totally.  It's just weird when it involves ** stuff, and also it still only is limited to whatever non-globby prefix you provide, since this library takes a TON of shortcuts to avoid unnecessary directory walking.\n\nSo, for example, the pattern !b*/c will match anything named c that is not in the directories starting with b.  !b/* will not return anything.  !b*/** will match anything at any depth under any directory other than those that match b*.\nThis is clearly all wrong.\nWhat I think you usually want is more like ** but not anything matching the pattern.\nFor example, if my pattern is !app/* then it should match any file in the cwd, but not anything in the app dir.  But should it match app/x/y?  That isn't matched by app/*, so it seems like perhaps it should be matched by !app/*?  But that means that ! will always imply a massive ** walk, and you might be very surprised for it to go more than one level deep.\nDo you see what I'm getting at?  I'm a bit hesitant to change the negation behavior unless the change is to (a) completely remove it, or (b) first define what would be sensible.\n. If you are interested in making it sensible, please go weigh in at https://gist.github.com/isaacs/fc635c852c64ffabf2fd\nFor the time being, unfortunately, this issue will not be addressed, because any change will make things worse.\n. I'm going to leave in test, though the test fixture is already ignored (because that is generated by the test scripts anyway).\nThe gif is already excluded on the globstar43 branch, which will be merged in as soon as I can get the performance a bit better (or before getting the performance improved, if it ends up taking too long.)\n. This repo hasn't used travis-ci for about a year now, so that link is out of date and irrelevant.\nI'm curious about the two unit tests that fail locally.  I cloned your gist and tested it locally, and there is a bug in it.  You are setting sync:true in your options, but providing a callback.  That's not ever going to work.\n4.1.2 will contain a check for this, to throw a TypeError if you do that.\nWhat system are you running this on?  Do you have Bash 4.3?  Have you regenerated the test cases?\n. 4.1.2 published.\n. If you git reset --hard then it'll reset to the tests generated on my system with Bash 4.3, and it should pass.\nAlso!  I highly recommend getting Bash 4.3 so you can use globstar in your day to day command line globbing :) http://savannah.gnu.org/git/?group=bash\n. @ekweible Can you please gist the entire test output?  I can't begin to debug this without knowing which pattern is failing.  Thanks.\nClosing until further details provided.  Will re-open if root-cause requires any changes.\n. Tests are included on purpose.\n. makes it easier for people to run the tests in strange environments.  But I suppose I could put a small test script that just tells you to download the git repo to run them.\n. Where are you using glob that it is too large?  The tarball is tiny, and not that much tinier with this patch.  Even over cheap internet, you're going to spend almost as much on HTTP headers as you do with this thing.\nIf you had truly limited disk space, or just a hella slow disk, such that the cost of unpacking these files was high, I could maybe see it.  But even then, what are you doing using glob?  It's a bit of a memory hog and really only can be used on a server FS in the first place.\nA few people just told me that they support your right to publish micro packages, but they are grumpy when tests are not included, thus requiring an extra step to run them.\n. Yeah, re-enabled it last night :)\n. Thanks!  Added a test, but yes, this is a bug, not an intentional API change.\n. Symlinked directories are no longer explored.  This is the same behavior as Bash 4.3.  If you find a case where it doesn't behave the same as Bash 4.3, then please let me know.  Otherwise yes, this is by design.  See the discussion in https://github.com/isaacs/node-glob/issues/86\n. If you rely on this behavior you should pin your glob dependency version at 3.x.  This change was introduced in 4.0.\n. Indeed, you've found a discrepancy between bash 4.3 and node-glob!  This is a bug!  Posted as https://github.com/isaacs/node-glob/issues/135\nThe solution is not \"follow symlinked dirs\" as suggested in the OP here.  The correct behavior is \"stop following symlinked dirs as part of a globstar match, but still resolve their contents against subsequent parts of pattern\".\n. @clintwood Yes, in the latest release you can do {follow: true} in the options, and it'll happily go along until it gets an ELOOP error from the fs.\n. @nathanjessup @seanmwalker Can you try pulling the GH-135 branch and see if that fixes things for you?  You can do npm i isaacs/node-glob#GH-135 to install it in your project directly from GitHub.\n. Sweet.  It is closer to bash 4.3 behavior on this branch, and doesn't break any other tests, so I'm gonna go ahead and merge.\n. Landed and published as 4.1.6.\n. @seanmwalker \nThe intent wiht node-glob v4 is to match the behavior of Bash 4.3.  This is a breaking change, hence the bumped major version number.\nSo, with this structure:\n~/my-module\n~/my-module/lib\n~/my-module/lib/aSymlinkedFolder -> ~/symDir\n~/my-module/lib/localFolder\n~/my-module/lib/localFolder/aScriptFile.js\n~/my-module/package.json\n~/my-module/server.js\n~/symDir\n~/symDir/bar\n~/symDir/bar/anotherThing.js\n~/symDir/foo\n~/symDir/foo/deeper\n~/symDir/foo/deeper/more.js\n~/symDir/foo/something.js\nBash 4.3 returns this:\n```\n$ echo $BASH_VERSION\n4.3.30(6)-release\n$ for i in ~/my-module/lib/*/; do echo $i; done\n/Users/isaacs/my-module/lib/aSymlinkedFolder\n/Users/isaacs/my-module/lib/aSymlinkedFolder/bar\n/Users/isaacs/my-module/lib/aSymlinkedFolder/foo\n/Users/isaacs/my-module/lib/localFolder\n/Users/isaacs/my-module/lib/localFolder/aScriptFile.js\n```\nBash 3.2 does this:\n```\n$ echo $BASH_VERSION\n3.2.48(1)-release\n$ for i in ~/my-module/lib/*/; do echo $i; done\n/Users/isaacs/my-module/lib/aSymlinkedFolder/bar\n/Users/isaacs/my-module/lib/aSymlinkedFolder/foo\n/Users/isaacs/my-module/lib/localFolder/aScriptFile.js\n```\nNode-glob does this:\n$ node -p 'require(\"glob\").sync(process.env.HOME + \"/my-module/lib/**/*\").join(\"\\n\")'\n/Users/isaacs/my-module/lib/aSymlinkedFolder\n/Users/isaacs/my-module/lib/aSymlinkedFolder/bar\n/Users/isaacs/my-module/lib/aSymlinkedFolder/foo\n/Users/isaacs/my-module/lib/localFolder\n/Users/isaacs/my-module/lib/localFolder/aScriptFile.js\nwhich is identical to Bash 4.3, working as designed.\n. I am open to a \"Follow all symlinks forever\" option.  Maybe follow:true?  Please open a new issue requesting the feature, and if I don't get to it, maybe someone else will.  The patch to the code would be just a few lines in glob.js and sync.js to skip over the lstat stuff, but it'll need plenty of tests.\n. I don't usually delete branches. You can ignore them.\n. This project's goal is to match the behavior of Bash 4.3.  Any changes that bring it closer to the matching semantics of Bash 4.3 are considered bugfixes and bump the patch version.\nOpt-in features that provide alternative behavior are considered additive changes, and bump the minor version.  Minor versions may also include bugfixes.\nRemoval of opt-in features, or changes to the API surface, are considered breaking changes, and bump the major version.  Major versions may also include bugfixes and additive changes.\nIf you are a depending on a bug, then a bugfix will break your system.\nI'm happy to include a changelog, but I'd rather use a tool to generate it manually, as this is quite tedious.  Do you have any recommendations?\n. From #135 \n\nI am open to a \"Follow all symlinks forever\" option. Maybe follow:true? Please open a new issue requesting the feature, and if I don't get to it, maybe someone else will. The patch to the code would be just a few lines in glob.js and sync.js to skip over the lstat stuff, but it'll need plenty of tests.\n. Patch welcome.  Make sure to add tests for both sync and async behavior.  The option should be realpath:true (to better match stat:true behavior).\n. Make sure to take advantage of the cache option to fs.realpath, so that it can avoid statting the same paths multiple times.\n. I see, so gulp is responding to match events rather than the list of all results which is sorted at the end.\n\nGlob no longer uses graceful-fs, so that would be why the change happened.\n. @contra @heikki I'm sorry to be the bearer of bad news.\nIt turns out that sorting the readdir results isn't actually enough of a fix, and in fact, it can't be reliably fixed in the general case without some truly awful things.\nConsider this:\na\n\u251c\u2500\u2500 b/\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 z/\n\u2514\u2500\u2500 c/\n    \u2514\u2500\u2500 z/\nIf you glob for a/*/z then it does the first readdir on the a/ dir.  Some platforms this returns ['b','c'] and others, ['c','b'].  So, we sort it.\nThen, for each of those two dirs, in parallel, it does a readdir to see if there's a z inside.  They'll both hit the thread pool at effectively the same time, just a few ns off.  But sometimes, readdir('a/c') will return before readdir('a/b'), so even though we sort every readdir, we still get a/c/z before a/b/z.\nTo truly fix this, we'd have to somehow sort the readdir responses and also sort the return processing from each child branch to manage the order that they return in.  That's way beyond my threshold for complexity.  A simpler approach would be to serialize the processing of each child dir, but then we'll be leaving a lot of performance on the table (like, 4x in some cases).\nWith that in mind, I'm going to revert this \"fix\", because it adds complexity and CPU cycles for no benefit.\nYou'll just have to handle out-of-order results.  They are sorted in the final tally, though, so you can either have them sooner (and maybe out of order), or all at once (and sorted).  Trade-off appropriately for your use case, I guess.\n. Thanks!\n. This will be fixed soon. It's a regression in minimatch. Sorry for the hassle. \n. Fixed in Glob 4.3.1\n. @StoneCypher The basic for most modules is npm install first to install deps, and then npm test to run tests.  If you find that is too much typing, then npm i and npm t also work.\nIn this case, it's because of a change in a dependency of a dependency, so tracking down the culprit can be a bit tricky and require human brain power.\n. Needs a test that fails without this patch, and passes with this patch.\n. Awesome, thanks.\nMy concern is that it's only running the test on Windows, and since most of the development (and ci) is running on unix, this won't catch it if I later break this functionality.  But now, since the tests pass on your windows system, at least I believe that it works ;)\nA better approach might be to mock out the parts of the system so that the functionality can be tested on a Unix system as well.  The general pattern would be something like:\n``` javascript\n// pretend to be windows\nprocess.platform = 'win32'\n// load glob before we muck around with fs's guts\nvar glob = require('../')\n// mock out whatever we need to\nvar originalStat = fs.stat\nfs.stat = function (path, cb) {\n  // do whatever we want, based on the path\n}\nvar originalReaddir = fs.readdir\nfs.readdir = function (path, cb) {\n  // whatever\n}\ntest('wildcards in unc path', function (t) {\n  glob('\\\\whatever\\*', function (er, results) {\n    // make sure this is what we expect\n    t.end()\n  })\n})\n``\n. It looks like this is confusingoptions.realpathandoptions.follow`.\noptions.realpath should make it return the realpath rather than the symlink.  But, it should not change the symlink-following behavior.\noptions.follow should make it follow symlinks until it hits ELOOP, like glob 3.x did.  But it should not cause it to realpath the results.\nThese should be two separate patches, each with separate tests and docs.\n. This should be a separate utility module. It is not glob's place to change the EE semantics. \n. @vegetableman The tests are thorough, and it looks like you've got the API pretty much perfect and working.  Good job!\nHowever, there's a lot of stuff in this patch that is not relevant to the change.  I started commenting on it, but gave up after a while.\n1. Single quotes have been changed to double.  Including in words like isn't in comments, even.  Don't do that.  This project uses single-quotes exclusively for strings, as of 82b8568.\n2. The if/else formatting has been changed in many places.  There are two ways that this project does if blocks.  If it is a single-line, it should not use braces.  If it is a multi-line, it should use braces of the form of } else { all on one line.\n3. Spacing around conditionals and function calls.  There should be spaces between the if and the opening ( of the conditional.  Function definitions should have a space between the name and the opening (.\n4. Many unnecessary setImmediate calls are added, I'm not sure why.  They aren't relevant to this feature.  If you are finding cases with strange timing errors, please provide example code and post a new issue about that.\nThese things make it much harder than necessary to review the change.\nIn general, a commit for a feature should be as small as possible, and no smaller; it should do exactly the feature that is being added, and nothing else; it should match the style of the surrounding code so well that no one can tell that the original author didn't write it themselves.\n. Oh, also, semicolons added to line endings in many places.\n. Note: Travis error is spurious, fixed on aaffe249119c4640ed71e186d40516aa8e7e2d4e.\n\nIs it supposed to behave differently?. right now, fetching foo/** and foo/**/**/** return the same number of results.\n\nNo, it's supposed to behave the same, but the issue is that you're doing special treatment for things that end in /**, and stripping it off.  Why not .replace(/(\\/\\*\\*)+$/, '') instead, to strip off all trailing /** segments?\n. Just another thought, if you have this structure:\na\n\u251c\u2500\u2500 b/\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 bc/\n\u2514\u2500\u2500 c/\n    \u2514\u2500\u2500 bc/\nAnd you glob for a/**/b* with an ignore of a/b.\nWithout any ignore, you get three matches:\n```\n\ng.sync(\"a/*/b\")\n[ 'a/b', 'a/b/bc', 'a/c/bc' ]\n```\n\nBut with it, I'd think that only the explicit a/b match should be ignored.  Instead, I get:\n```\n\ng.sync(\"a/*/b\",{ignore: [\"a/b\"]})\n[ 'a/c/bc' ]\n```\n\nThat seems like a bug to me.  Since there are no magic chars in the ignore (eg, it's not ignoring a/b/** or a/b/* then only the explicit a/b match should be omitted.\n. @vegetableman I pulled in 4c71eaebe0e09e69d59d5a95bc9c58c882e0fdec\n```\n\ng.sync('a//b*')\n[ 'a/b', 'a/b/bc', 'a/c/bc' ]\ng.sync('a//b*', {ignore:'a/b'})\n[ 'a/c/bc' ]   <--- Expect: [ 'a/b/bc', 'a/c/bc' ]\n.\n$ git lg -n5\n*   ddf2c1c vegetableman (HEAD, vegetableman/fix-ignore-branch) Merge remote-tracking branch 'origin/master' into fix-ignore-branch (6 seconds ago)\n|\\\n| * aaffe24 isaacs (origin/master, master) make readdir-order test deterministic (48 minutes ago)\n* | 4c71eae vegetableman New: Added ignore option (fixes #115) (7 hours ago)\n|/\n* 82b8568 isaacs Settle on single quotes (4 days ago)\n* 941d53c isaacs (tag: v4.3.2, vegetableman/master) v4.3.2 (3 weeks ago)\n```\n. Still slightly incorrect.\n\n```\n\ng.sync('a//b')\n[ 'a/b', 'a/b/bc', 'a/c/bc' ]\ng.sync('a/b/')\n[ 'a/b/bc' ]\ng.sync('a//b', {ignore:'a/b/'})\n[ 'a/c/bc' ]\n```\n\nIf you're ignoring a/b/*, then that should only exclude files that are matched by a/b/*.  Since a/b isn't matched by a/b/*, it should not be excluded.\nAlso:\n```\n\ng.sync('a//b*', {ignore:'a/b/**'})\n[]\n```\n\nI think all the \"ends with star\" or \"ends with globstar\" bits need to be ripped out.  It's a premature optimization.\n. The principle has to be this:\nThe result of glob(pattern, {ignore:set}) is equal to to the complete subset of glob(pattern) not found in the union of the glob expansions of every pattern in the ignore set.\n. Sorry, I was unclear.  I'm not saying that the optimization is not a requirement for release of this feature.\nI'm saying it's premature in advance of correct behavior.\nThe first step should be to implement the contract correctly, and provide a mountain of tests for every conceivable edge case. Then add optimizations, each time also adding more tests to guarantee that the optimization's new edge cases don't break the contracts.\nI'll review again tomorrow and see if I can poke any new holes in it ;)\n. @vegetableman Thanks for your patience on this, btw.  I know it's frustrating when you make a contribution and the author puts you through the ringer, but since this module is used by many high-profile fs libs, it's important to be really careful about anything that can introduce surprising edge cases.  In the worst case, they end up depending on those bugs, and then when we fix them, it causes problems.\n. I don't think \"negative ignores\" is a good idea.  Maybe we should just throw in that case.  If you want something to not be ignored, then put it in the pattern.  It opens the door for folks to do crazy stuff like glob('**', {ignore:['!thing-i-want', '!other-thing-i-want']}) so now we're into double-negative territory.  If that's a worthwhile use-case, then let's just add multi-glob support with some sensible API surface.\nAdded one minor comment, will review in more detail later.\n. Let's discuss multi-glob and streaming in other issues, plz.\n. @vegetableman Getting closer, but logic's still not quite right.\n```\n\ng.sync('test/a/c/')\n[ 'test/a/c',\n  'test/a/c/d',\n  'test/a/c/d/c',\n  'test/a/c/d/c/b' ]\ng.sync('test/a/c/*')\n[ 'test/a/c/d' ]\ng.sync('test/a/c/', {ignore:'test/a/c/*'})\n[]\n```\n\nIn this case, it should only ignore patterns that would be matched by test/a/c/*, that is, test/a/c/d.\nHowever, as you can see, it's failing to even explore the child directories in test/a/c, because of the star handling logic.  The expected value here would be:\n```\n\ng.sync('test/a/c/**').filter(function(p) { return p !== 'test/a/c/d' })\n[ 'test/a/c',\n  'test/a/c/d/c',\n  'test/a/c/d/c/b' ]\n```\n. Ok!  Landed this on master.\n\n@vegetableman I had a few other suggestions, which were mostly pretty minor, and I went ahead and just made the changes myself.  Since we've gone back and forth a bunch on this, and you seemed to be getting something out of the process, I want to share the reasoning behind both:\n1. The two tests were merged into a single test that just lists cases and has less repeated code.  This makes it a lot easier to add new tests, and reduces the likelihood that one day we'll add a new ignore test, and forget to update the sync test as well, etc.\n2. I split up the isIgnored function into isIgnored and childrenIgnored, in order to remove the boolean argument.  In general, a boolean argument is often an indication that you probably are putting two different functions in the same place, and it'd be better to just have them go ahead and be two separate functions.\n3. I de-inlined the argument to ignore.map(), since it doesn't actually need access to the closure state.\nWill release with a bumped minor later today.  Might try to get a few other PRs in there as well.\n. Yeah, I'm going to deprecate comments and negation in the next major release, coming up soon.\n. [ is a magic char in globs, just like regexps.  It'd be looking for:\nC:\\Build\\7D - refonte\\Myproject\\\nC:\\Build\\7e - refonte\\Myproject\\\nC:\\Build\\7v - refonte\\Myproject\\\nEscape the [ with a \\ char, like \"C:\\\\Build\\\\7\\\\[Dev\\\\] - refonte\\\\\\Myproject\\\\\" in js.\n. *.(xxx|yyy) isn't a valid glob pattern.  (xxx|yyy) is a regexp, which is equivalent to the @(xxx|yyy) glob pattern.\n. You'd want to do *.@(xxx|yyy)\n. Compare to Bash 4.3\n```\n$ echo *.@(xxx|yyy)\nfoo.xxx foo.yyy\n$ echo *.(xxx|yyy)\nbash: syntax error near unexpected token `('\n$ node -p \"require('../glob').sync('*.(xxx|yyy)')\"\n[]\n$ node -p \"require('../glob').sync('*.@(xxx|yyy)')\"\n[ 'foo.xxx', 'foo.yyy' ]\n```\n. Try this:\njavascript\nvar Glob = require('glob').Glob\nvar g = new Glob(somePattern, { stat: true })\ng.on('stat', function (file, stat) {\n  // do your stuff here\n})\n. That definitely looks like a bug to me.  It should never match a file with a trailing /.\n. Thanks for getting this started!\nBefore this can be accepted, though, there are two things that need to be done.\nFirst, it needs a test added (something that fails before the patch, and passes with the patch).  You can either modify an existing test to add the new case, or add a new one.   (Note that if you do add a new test, you'll have to run npm run test-regen on a Mac or Linux box to re-generate the bash comparison test cases.)\nSecond, I'm pretty sure that all of these glob.sync errors are also errors in the async case.  If you look through the code, you'll see that they follow one another pretty closely.  So, each of these changes in the sync flow have to have the corresponding change made in the async flow.\nLet me know if you are/aren't interested in doing these bits, or if you need any help with them.  Eventually, I'm sure I or someone else will get to it if you don't find the time, but it might take a bit longer to get to.\n. Fixed by 0b729c83f15c3d78f5235f893c1ed912e6386eb7.  Thanks!\n. Well, as you say, glob is working fine.\nI am not the maintainer of Grunt, and have no idea exactly what it's doing with glob internally.  node-glob-whatev is over 2 years old, and LOTS of bugs have been fixed since then, both on Windows and Unix.\nI'd try posting the bug over on grunt's issue tracker.  If it turns out glob is doing the wrong thing, then we can take a look at it.\n. Just end the pattern in a /.  Example:\nglob('**/', function (er, dirs) {\n  if (er) throw er // or handle or whatever\n  console.log('all dirs:', dirs)\n})\nglob('*/', function (er, dirs) {\n  if (er) throw er // or handle or whatever\n  console.log('first-level dirs:', dirs)\n})\n. Pass an ignore: ... option in. \n. Try this:\njavascript\nglob('**', { ignore: [ 'index.html', 'js/main.js' ], nodir: true }, console.log)\nNegative extglob patterns like !(foo) cannot contain slashes.  So, another approach might be to do something like one of these, depending on how many other files are in there that youer' trying to exclude.\n``` javascript\n\nglob.sync('!(*.html)/!(main.js)', { nonegate: true })\n[ 'js/lib.js' ]\nglob.sync('js/!(main.js)', { nonegate: true })\n[ 'js/lib.js' ]\nglob.sync('js/!(main.js)')\n[ 'js/lib.js' ]\n```\n\n(Note that the nonegate is required for now to interpret the first part as a negative extglob section rather than a fully negated pattern.  The next major release will deprecate using negated patterns, in favor of using ignores instead.)\n. @iLanbiala yes it does. \n. So, lemme make sure I get this right.  You're saying that the test case in the original post here should return an empty array, and as far as I can tell, it does:\n```\n$ tree fixtures/\nfixtures/\n\u251c\u2500\u2500 .swag\n\u2514\u2500\u2500 test.coffee\n0 directories, 2 files\n$ node -e 'require(\"./glob.js\")(\"./fixtures/swag\", { ignore: \"./fixtures/*\", dot: true }, console.log)'\nnull []\n```\nIs there a simple case you can provide where that doesn't work as expected?\n. Aha!  This is two bugs, then!\nThe gstarmatcher thing is broken in this case, also:\n$ node -e 'require(\"./glob.js\")(\"./fixtures/.*\", { ignore: \"./fixtures/**\" }, console.log)'\nnull []\nIn that case, I'd expect it to only be ignoring things matched by ./fixtures/**, ie ./fixtures/test.coffee.\nIt seems reasonable to me that the options provided to the top-level matching should also be passed to the ignore matcher, so this patch gets a tentative +1 from me, once I get a chance to review in a bit more detail.\nRegarding the other issue, I'm not sure the best approach... dropping the optimization for ** in an ignore seems like it's going to be problematic, since it means we have to potentially walk a huge directory tree for no reason.  On the other hand, detecting the case where this might be a problem (when dot isn't set and the matching pattern contains some explicit dot-portion which falls somewhere within the globstar section) is potentially tricky.  (Or maybe what I just wrote in the previous sentence is an adequate heuristic and we can go with that?)\nWill think on this a little bit and set a reminder to take a look at this again very soon.\n. Can you try with the patch in #227 and see if that is less surprising?\n. I'll upgrade the error message to provide clearer instructions here.\n. Spaces are a valid char to have in a filename, so no, that would mean a different thing.\nIf you're suggesting that we auto-trim the braced sections, that would be a breaking change and a departure from Bash behavior, so that's not going to happen.\n. What version of glob are you using?  When I set up a test to raise EACCES, it just acts as if the files aren't there, because the stats and readdirs fail.\n. What is g.continue()?  Are you sure you're using this module, and not something else?\n. Yeah, it should probably be doing an lstat to figure out existence, and then just try to readdir to see if it's a directory if it shows up as either a dir or symlink.\nGood find!  This is indeed a bug.\n. I suspect that this is causing isaacs/rimraf#65 and ember-cli/ember-cli#3413.\n. Yes, this was on purpose.\nrimraf version 2.3.0 depends on glob@^4.4.1, which has a bug that is not present in glob@4.4.2.\nBecause rimraf is so widely used, this caused a major problem for many users.\n. Discussion in https://github.com/isaacs/node-glob/pull/130\nIf you want to run tests and benchmarks, check out the git repo.\n. I would be open to a change to support back-slashes on windows machines.  Probably the best solution would be to, on windows, replace all back-slashes with forward-slashes, and then swap back to back-slashes in the result.\nPart of the blocker to doing stuff for windows is that I don't have a windows environment for CI tests, and it's quite tedious to run tests in Windows since I develop in a unix environment.  Do you have any tips on this?\n. No, I mean, at the very start, we replace \\ with /, so that the logic all works as it is.  Then, before emitting a match event or calling the cb with the results, we swap back to \\ so that you get paths that match the system.  (Of course, this is a bit complicated, because UNC paths in windows have to remain with / chars.)\nSuch a change would have to come with tests, and I'd want to run those tests regularly to make sure they don't break.\n. Looks like this is a regression in the cwd handling.  @nikku, I can't reproduce your test case without setting a cwd option, and only in sync mode, is that what you're seeing as well?\n```\n$ tree test\ntest\n\u2514\u2500\u2500 posts/\n    \u251c\u2500\u2500 folder/\n    \u251c\u2500\u2500 a.md\n    \u251c\u2500\u2500 b.md\n    \u2514\u2500\u2500 c.md\n2 directories, 3 files\n$ cd test\n$ node -e 'require(\"glob\")(\"*/\", {nodir:true}, console.log)'\nnull [ 'posts/a.md', 'posts/b.md', 'posts/c.md' ]\n$ node -p 'require(\"glob\").sync(\"*/\", {nodir:true})'\n[ 'posts/a.md', 'posts/b.md', 'posts/c.md' ]\n$ cd ..\n$ node -e 'require(\"glob\")(\"*/\", {cwd:\"test\",nodir:true}, console.log)'\nnull [ 'posts/a.md', 'posts/b.md', 'posts/c.md' ]\n$ node -p 'require(\"glob\").sync(\"*/\", {cwd:\"test\",nodir:true})'\n[ 'posts',\n  'posts/a.md',\n  'posts/b.md',\n  'posts/c.md',\n  'posts/folder' ]\n```\nWill investigate and publish a 4.5.1 and 5.0.1 with the fix.\n. Same with non-globstar as well:\n```\n$ cd test\n$ node -e 'require(\"glob\")(\"/\", {nodir:true}, console.log)'\nnull [ 'posts/a.md', 'posts/b.md', 'posts/c.md' ]\n$ node -p 'require(\"glob\").sync(\"/\", {nodir:true})'\n[ 'posts/a.md', 'posts/b.md', 'posts/c.md' ]\n$ cd ..\n$ node -e 'require(\"glob\")(\"/\", {cwd:\"test\",nodir:true}, console.log)'\nnull [ 'posts/a.md', 'posts/b.md', 'posts/c.md' ]\n$ node -p 'require(\"glob\").sync(\"/\", {cwd:\"test\",nodir:true})'\n[ 'posts/a.md', 'posts/b.md', 'posts/c.md', 'posts/folder' ]\n```\n. No problem at all, @nikku.  Thanks for confirming.\nFixed on 4.5.1 and 5.0.1.\n. @dzire187 Can you clarify exactly what you mean by \"this issue\"?  Are you using exactly the same pattern and folder structure as presented in the original post, or do you have a different test case that is failing in a similar way? \n. You want minimatch, not this module. \n. Good patch, good test.  Thanks!  <3\n. Use the \"ignore\" feature.\nglob('**/*.js', { ignore: '{c,d}/**' }, cb)\n. The issue here is that you can't put slashes inside of extglob patterns.  They can only refer to path portions.\n. Yep, that's a bug.  Good find!\n. updated travis to match my other projects.\n. Doc patch welcome.\nThe match event is the specific thing that matched, as matches are found.  It is not deduplicated in the normal case, and is not yet resolved to a realpath.  If we had to move the fs.realpath call up earlier in the process, then this would require some inconvenient refactoring.\n. Landed on master, thanks!\n. Fixed already by another PR.\n. Landed on master.  Thanks!\n. landed, thanks!\n. This is tricky.\nThe idea for ignores is \"exclude all potential matches which would be returned by a search for any of the ignore patterns\".  It's not \"exclude all potential matches which refer to files that would be found by any of the ignore patterns\".\nSo, for example, /a/b/c doesn't return a/b/c as a match, even if that file exists.\n```\n\nmatches = glob.sync('tmp/x/y/z', { cwd: '/' })\n[ 'tmp/x/y/z' ]\nignore = glob.sync('/tmp/x/y/z', { cwd: '/' })\n[ '/tmp/x/y/z' ]\nrequire('array-intersection')(matches, ignore)\n[]\n```\n\nIf we tell it to give us the realpath value, then it'll do the right thing:\n```\n\nreal = glob.sync('tmp/x/y/z', { cwd: '/', ignore: '/private/tmp/x/y/z', realpath: true })\n[]\n```\n\nThat's because the real option makes it so that you only get absolute paths.\nIn order to satisfy the test in #190, we'd have to add a path.resolve and double-check any non-absolute results.  And I'm not sure it's really the ideal semantics, but it's worth discussing the trade-offs.  At least, it's a breaking change.\nRegarding feross/standard#116, it's worth noting that glob('**', { ignore: gitignoreLines }) is not quite what an ignore file does, anyway.  The patterns and the file names all need to be mounted on the directory where the ignore file lives.  You could check out https://github.com/npm/fstream-ignore if you want to use the same file selection logic that npm uses for ignore files in packages.\n. In JavaScript, you must always double-up your back-slashes because backslash is the escape character.  So, for example, a\\nx is the string {0x61 0x0a 0x78} (a, LF, x), but 'a\\\\nx is the string {0x61 0x5c 0x6e 0x78} (a, slash, n, x).\nGlob has some difficulties with UNC paths.  I'm guessing this is a duplicate of #74.\n. This is pretty close!\nI inadvertently optimized away your minimatch change, but then I fixed it on 2.0.7.\nI am still running into a bit of a weird issue with the test, because the path-is-absolute module is rather insistent on using process.platform, and it's also used throughout the codebase a bit.  I was able to get this specific test to work, but only because isAbsolute('/baz') is the same on Windows and Posix.\nI think the right approach here, though it's more lines changed, is to pass the platform as an option to Glob, and then load all the appropriate separator/absolute/etc stuff onto the glob object, so it never has to look at process.platform or path.sep or whatever.\nI'm thinking something like this in the setopts function in common.js:\njavascript\nself.platform = opts.platform || process.platform\nself.isAbsolute = isAbsolute[self.platform] || isAbsolute;\nself.resolve = path[self.platform].resolve || path.resolve;\nself.sep = path[self.platform].sep || path.sep;\nAnd then, throughout glob.js and sync.js, make sure to always call the methods off of this rather than path.<whatever>() or process.platform.\nThis also means that, if at some point we need to change just one of these fields, or use AOP to debug those function calls, we can either make those fields configurable, or instantiate an object and just change the relevant bits.\nOf course, this can lead to glob doing something weird in some cases, but it'd make it so that we can test other windows irregularities in the future more easily, with a lot less module cache tinkering.\nWhat do you think?\n. I'm totally ok with involved changes that improve testability, windows support, and make the code easier to follow (including fewer hacky workarounds in tests).\nOf course, bigger PR size tends to make for more back and forth in the review process, but I think we're pretty aligned on what needs to happen for this.\n. UGGHHHH that's right.\nI'd say just skip that test in node <= 0.10.  The code should still work fine, and since this is really just a matter of string juggling stuff, it should be fine to run the tests in only later versions.\n. I'd throw something like this in there:\n``` javascript\nvar skip = false\nif (/^v0.(10|[0-9])./.test(process.version)) {\n  skip = 'Does not work on Node < 0.12'\n}\ntest('some test name', { skip: skip }, function (t) { ...\n```\n. If you wanna just leave the tests failing in 0.10, that's fine, too.  I can work it out when I merge it in.  If it's passing in 0.12 and io.js, then I can take it from there :)\n. Ok, just reviewed.  The test looks perfect, and nothing in the code jumps out at me as problematic.\nIf you think this is ready to go, I can merge and release this weekend or early next week.\n. It looks like the issue is that the WinPath stuff in the setopts function in common.js is messing with root and path in a weird way, such that glob(process.cwd()) can't return anything, because it ends up having a root setting of c: and a pattern of /path/to/cwd.\nThe mocking and testing stuff looks pretty good.  I think it's the right approach.\nOn master right now, all the tests pass on Windows.  I'd recommend rebasing, and then applying the changes one by one and making sure that tests pass at each commit.\n. True story: I saw the title of the email and for a second I was scared this issue was a C&D from Williams St for copyright violation.\n. (or I guess it'd be Frederator? I'm not sure who owns AT.)\n. @mik01aj You should use ignore: ['**/*-integration-test.js'].  As you've written it, it'll only ignore *-integration-test.js files that are not in a sub-directory.\n. Patch welcome for this.  Probably just need to find the bits where match is emitted and call isIgnored like @mlmorg is doing in the workaround.  I'll get to it soon-ish if no one else does.  (Note that patches require a test!)\n. I've noticed that with this module, and a few others, about half the time I say \"patch welcome\" I end up just writing it later that afternoon...\n. Thanks for the report!  fixed on 5.0.7\n. Landed #222 instead, thanks.\n. I don't see the error you're describing.  How are you getting this?\n. That's totally fine in ECMAScript strict mode.  Function expressions may be in conditionals, just not function declarations.\nFor example, this would throw:\n```\n'use strict'\nif (true) {\n  function foo() { return 1 }\n}\n```\nBut this is totally fine:\n```\n'use strict'\nif (true) {\n  var foo = function foo() { return 1 }\n}\n```\n. You are getting confused about the difference between \"function declaration\" and \"function expression\".\nA function used as a callback like fs.readdir(dir, function (er, entries) { ... }) is not a function declaration.  It is a function expression.\nFurthermore, the issue in V8's strict mode where it says \"functions can only be declared at top level or immediately within another function\", is in fact not compliant with the ES6 specification.  The actual rule is that function declarations inside of blocks in strict mode are local to the block.  Io.js and future versions of Node have newer versions of V8 which observe the ES6 specification in this regard.  Observe: https://gist.github.com/isaacs/ea2b667d7336b64843e1\nNo, I will not be changing node glob.  It functions properly in strict mode, both in old (incorrect) versions of V8 as well as new (correct) versions of V8.  The error you cite is not applicable in either case, because these are function expressions, not function declarations.\n. @jvoccia Right, but L:/05**/*.dwg ought to match the same things as L:/05*/*.dwg.  I gather that's the bug.\n. @jmorrisIII What's the L: drive in this case?  Network share or something?  Does it work in C:?\n. You're providing a callback to the sync glob function. That's not allowed. The error message tells you where to fix it in your code. \n. Yeah, I wonder if there are any other cases where ENOTSUP might be raised by readdir other than \"this is a regular file\".\nOne approach might be to stat the file when we get an ENOTSUP just to make sure it is a real file that exists?\n. Meh. Adding stat is a pita.  Just gonna treat ENOTSUP the same as ENOTDIR.  It already was shown on a previous readdir call, so it's probably there.\n. I'd rather not.\nMost promise libs have easy shorthands for promise-ifying a callback-taking function.  I'd rather let node-glob focus on globbing, and stick to the simplest possible API pattern for asynchrony: a function.\n. The ignore option is a glob pattern string.  To replicate the RegExp you're providing, it'd be \"*wfl.d.ts\"\ndoc patch welcome.\n. What version of glob are you using?  There was a very recent change to how ENOTSUP is handled.\n. Weird... I just added a test that exercises that bit of the code, and it works fine.\nCan you please provide a full reproducible test case, and the exact error you see when running it?\n. That's strange.  Getting an ENOTSUP on a readdir call should be exactly the same as getting ENOTDIR.\nAre you quite sure that it's glob@5.0.13 that's reporting this?  Can you run npm ls glob to see if there are any other versions in use?\n. Ohhh... are you using glob.sync or glob?\n. Oh, sorry, I'm dumb, apparently.\n* c47d451 isaacs (HEAD -> master, tag: v5.0.14, origin/master) v5.0.14 (12 seconds ago)\n* 821fac8 isaacs Handle ENOTSUP for sync glob as well as async (4 minutes ago)\n* 9625618 isaacs Test for when readdir raises ENOTSUP (25 hours ago)\n* 0a2b519 isaacs Generate fixtures more effectively, with -O instead of eval (9 days ago)\n* f96190b isaacs Use js for benchmark cleanup (12 days ago)\n* 957fd93 isaacs Fix some 'use strict' errors (12 days ago)\n* bf3381e isaacs Treat ENOTSUP like ENOTDIR in readdir (12 days ago)\n* 507733d isaacs (tag: v5.0.13) v5.0.13 (12 days ago)\nNotice anything interesting?  I never released the ENOTSUP fix.  That explains it!\nThe good news is that I never released half the ENOTSUP fix, so it now works on 5.0.14 for both sync and async glob.  Can you re-install and let me know?\nSorry for not catching that!\n. Can you provide a simple test script that demonstrates what you're seeing?\nExplaining in english < explaining in JavaScript ;)\n. I've put off adding ~ support until Node has cross-platform passwd functions (coming to io.js soon, I believe?)  Then we can do stuff like ~root/foo and ~bob/bar and have it expand with the home dir of the specified user.\n. @fenwick67 Is there any way to get the home directory of someone other than the current user?  (Ie, resolve something like ~root/foo to /root/foo and resolve ~user/foo to /home/user/foo, etc?)\n. fixed on latest release\n. find(1) is not the model that this module matches, but rather the globbing pattern-matching behavior in Bash 4.3.\n$ mkdir -p dir/subdir/subsub\n$ for i in dir/**; do echo $i; done\ndir/\ndir/subdir\ndir/subdir/subsub\n. Bash 3 didn't have globstar support, so of course it would not do anything special with **; it'd be the same as dir/*/*.  (You can emulate this behavior by setting { noglobstar: true } in the options object.)\nI'm not super familiar with zsh, so I can't speak to how that works.\n. @UltCombo It's not doing globstar matching at all, that's why.  You're getting the same results as dir/*/*.\nYou can observe this if you do mkdir -p dir/a/b/c/d/e/f/g and see what it matches.\n. Wild!  Yeah, that's totally different.  What does dir/**/ match?\n\nAlso, if dir/**/* was treated the same as dir/*/*, it would not match dir/subdir in the comment above, right?\n\nAh, good point.\nAnyway, zsh's globbing is not the reference implementation that this module targets :)\n. Not a node-glob issue.\n. Different versions of V8.\nIn 0.12:\n```\n$ node -p '\"abc\".localeCompare(\"XYZ\")'\n-1\n$ node -v\nv0.12.7\n```\ncompare to v0.10 (and io.js)\n```\n$ node -p '\"abc\".localeCompare(\"XYZ\")'\n9\n$ node -v\nv0.10.40\n```\nand io.js:\n```\n$ node -p '\"abc\".localeCompare(\"XYZ\")'\n9\n$ node -v\nv2.2.1\n```\nLooks like there was a bug in 0.12 that then got fixed in later versions of V8?\n. Can you share the program that's raising this error?  It doesn't look like node-glob is anywhere in that stack trace.\n. A) How would you like the API to look?  (Note that this may involve some trade-offs that turn out to not be too costly.)\nB) How does that differ from just using {,,,} to break up your patterns?  Eg, instead of doing glob([pattern1, pattern2], cb) you could do glob('{' + pattern1 + ',' + pattern2 + '}', cb).  I guess it's different if the patterns have , chars in them?  Is there any other reason why this workaround is objectionable?\n. Especially: if a file matches more than one pattern, should it be included in the results more than once?  And, do you need to know which pattern a file matched?\n. I took a look at globby.  It seems like it just extends node-glob to take an array of patterns, and uses a Promise for the async API rather than a callback.\nUnless this feature gets a champion willing to do the work, I'm not super excited to do it myself, especially since globby already exists.  There are some interesting optimizations that could maybe be taken advantage of (like having the multiple different glob instances share cache objects, for example), but no one's complaining about the speed of globby right now.\n. This is incorrect.  In glob patterns, ? matches exactly 1 character.\n```\n$ touch fo foo fob\n$ echo fo?\nfob foo\n$ node -p 'require(\"./\").sync(\"fo?\")'\n[ 'fob', 'foo' ]\n$ echo fo*\nfo fob foo\n$ node -p 'require(\"./\").sync(\"fo*\")'\n[ 'fo', 'fob', 'foo' ]\n```\n. I'm seeing files in there:\n$ npm view glob dist.tarball | xargs curl -s | tar ztv\n-rw-r--r--  0 501    20        985 Jul 14 18:34 package/package.json\n-rw-r--r--  0 501    20      15445 Jun 18 15:23 package/README.md\n-rw-r--r--  0 501    20        765 Jul 28  2014 package/LICENSE\n-rw-r--r--  0 501    20       6155 May 21 09:44 package/common.js\n-rw-r--r--  0 501    20      18625 Jul 14 18:26 package/glob.js\n-rw-r--r--  0 501    20      11461 Jul 14 18:26 package/sync.js\nMaybe run npm cache clean and try again?\n. Correct shasum, too:\n```\n$ npm cache clean\n$ npm cache add glob\n$ npm cache ls\n~/.npm\n~/.npm/glob/\n~/.npm/glob/5.0.14/\n~/.npm/glob/5.0.14/package.tgz\n~/.npm/glob/5.0.14/package/\n~/.npm/glob/5.0.14/package/package.json\n~/.npm/registry.npmjs.org/\n~/.npm/registry.npmjs.org/glob/\n~/.npm/registry.npmjs.org/glob/.cache.json\n$ shasum ~/.npm/glob/5.0.14/package.tgz\na811d507acb605441edd6cd2622a3c6f06cc00e1  /Users/isaacs/.npm/glob/5.0.14/package.tgz\n$ npm view glob dist.shasum\na811d507acb605441edd6cd2622a3c6f06cc00e1\n``\n. Aha! Turns out there was a minor operational issue this morning that resulted in a small percentage of zero-byte tarballs being served.  I should probably commitda39a3ee5e6b4b0d3255bfef95601890afd80709` to memory, because that shasum always indicates a problem ;)\nEven though it was a very small percentage, if you were one of the (un)lucky few to get it, it would be cached by the CDN, and keep serving a zero-byte response until our ops folk flushed the caches.  All should be resolved now.\n. Fixed on 7.0.2.  Thanks for finding the bug!\n. This is a bit more complicated of a situation than it might appear.  (More conversation at https://github.com/isaacs/node-glob/pull/166 that might be interesting to review.)\nI'd like to see a lot more testing and thought around the cases here:\n1. dot: false, search for a/**, ignore a/x/**, file at a/x/.y/z exists.  Should a/x/.y/z be included in matches?\n2. dot: true, search for a/**, ignore a/x/**, file at a/x/.y/z exists.  Should a/x/.y/z be included in matches?\n3. dot: false, search for a/**, ignore a/**/z, file at a/x/.y/z exists.  Should a/x/.y/z be included in matches?\n4. dot: true, search for a/**, ignore a/**/z, file at a/x/.y/z exists.  Should a/x/.y/z be included in matches?\nIf the answer to (1) is \"no\", then we should set dot: true for the gsmatcher always.  If the answer is \"yes\", then this patch seems appropriate, but then the optimization around ignoring ** needs to be removed, which will make things a lot more complicated.\nThe answer to (2) and (4) seems to be \"no\" always, so this patch looks correct from that pov.\nThe really tricky bit is (3), and I'm not sure I have a good answer here.  People seem to be confused either way.  It might be acceptable to just say, look, for ignore patterns, they match dot files, that's just how it is, as long as that's documented clearly.  Another approach might be to say that it follows the same dot setting as the overall pattern, which is what this patch does.\nTo be honest, I've been procrastinating making a decision on this because I'm not sure what the right call is, and it's probably a breaking change either way.\nWhat're your thoughts on this, as a person using glob in your program?\n. Other cases:\n- dot: false, search for a/**/.y/z, ignore a/x/**\n- dot: true, search for a/**/.y/z, ignore a/x/**\nReally, we need a comprehensive matrix of test cases and a clear decision on each one.\n. Another interesting case:\ndot: false, search for a/**/.y, ignore a/x/**.  Files at a/x/.y and a/z/.y both exist.  What gets returned?  Does it ignore a/x/.y, or not?  (Note that a/x/.y does not match a/x/** if dot is false, but it does match a/**/.y, because of the explicit dot.)\nThe more I think about this, the more I think that dot:true should be set for ignore patterns always.  It should be documented that way and just take the major version hit.\n. Feel free to mess around with the patch in #227 and let me know if it is more or less surprising in practice. \n. Let's simplify this a bit by looking only at the first braced group section.  Clearly it's not the second part of the pattern that's matching, since it doesn't end in bower_components.\n**/node_modules/!(grunt*) will match node_modules/grunt/node_modules/foo because the ** matches node_modules/grunt/node_modules and then foo is not grunt*, so there you go.  The pattern will match any thing containing node_modules that doesn't end in grunt*, so this will match most of grunt's deps.\nI think what you probably want is to drop the **, and just use this: node_modules/!(grunt*), or combined with the bower_components, {node_modules/!(grunt*),**/bower_components}.\n. Landed on master, thanks.\n. If anyone wants to weigh in on the substantial change here, take a look at these test cases: https://github.com/isaacs/node-glob/blob/dot-ignore/test/ignore.js#L34-L39\nThe relevant file structure looks like this:\n```\n$ tree a/{x,z}\na/x\n\u2514\u2500\u2500 .y/\n    \u2514\u2500\u2500 b\na/z\n\u2514\u2500\u2500 .y/\n    \u2514\u2500\u2500 b\n2 directories, 2 files\n```\nThe linked test cases go [pattern, ignore, results].  So, eg, a pattern of a/**/.y/b, with an ignore set to a/x/** will prevent a/x/.y/b from matching, even though the ** would not normally match the .y path portion.\n. Alright, the requisite time for objection and testing has passed, and it seems to make everyone's use cases better.  I'm gonna go ahead and land this.  It's a SemVer-major bump, because of the change in behavior, but it's the right change, I believe.\n. @UltCombo I don't understand the question.\nI think experience thus far has shown that having ignore patterns not match dot files is always more confusing than the alternative, even when the main pattern doesn't have dot: true.\n. Not really that interested.  Passing in a function works fine, and you can wrap it in a promise if you really need to.\n. I decided to just <code> them all with backticks. Thanks for the nudge :)\n. @thirdcreed Only the \"negate the whole pattern by prefixing with a !\" has been deprecated.  This kind of negation should still work.\n@dangreen what does your file tree look like?  What gets returned?\n. As far as I can tell, this is behaving exactly like bash 4.3\n```\n[gh:node-glob/master]isaacs@urdva:~/dev/js/glob/a node@v4.0.0\n$ tree\n.\n\u251c\u2500\u2500 b/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 c/\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 bar.dyn.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 foo.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bar.dyn.css\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 foo.css\n\u251c\u2500\u2500 bar.dyn.css\n\u2514\u2500\u2500 foo.css\n2 directories, 6 files\n[gh:node-glob/master]isaacs@urdva:~/dev/js/glob/a node@v4.0.0\n$ for i in ./*/!(.dyn).css ; do echo $i; done\n./b/bar.dyn.css\n./b/c/bar.dyn.css\n./b/c/foo.css\n./b/foo.css\n./bar.dyn.css\n./foo.css\n[gh:node-glob/master]isaacs@urdva:~/dev/js/glob/a node@v4.0.0\n$ node -p 'require(\"../\").sync(\"./*/!(.dyn).css\")'\n[ './b/bar.dyn.css',\n  './b/c/bar.dyn.css',\n  './b/c/foo.css',\n  './b/foo.css',\n  './bar.dyn.css',\n  './foo.css' ]\n```\nWhat's happening here is that if you have a file like foo.dyn.css, then the * matches fo, and then o.dyn is not equal to .dyn, and then the .css matches .css.\n. If you do use an ignore pattern like @thirdcreed suggests, then it works as you probably want:\n$ node -p 'require(\"../\").sync(\"./**/*.css\",{ignore:\"./**/*.dyn.css\"})'\n[ './b/c/foo.css', './b/foo.css', './foo.css' ]\n. Indeed!  Fixed on 7.0.1.\n. It looks like the only difference is the sorting.  Can you provide the script you're using to generate this output?\nNote that if you set nosort: true in the options, then it won't be sorted.  Also, match events fire in whatever order they're encountered, which is different on different file systems.\n. Yeah, I see the same results on both.\nMy only guess is that readdir is implemented differently on one of your systems, or you're using different versions of glob.  Try calling result.sort() if you need a consistent ordering.\n. Without seeing the code, I have no way to know what might need to change.\nBut the path.basename() function probably will do what you want.\n. Fixed on master.  Had to bump the major, since this is raising a new error, and so it might cause a currently-working program to break.\nTough call, since it feels like a \"bugfix\" rather than a breaking change, but I've learned to err on the side of being overly cautious when it comes to raising errors for things that were previously allowed, even if they were incorrectly allowed.\n. No idea, sorry.  Looks like you're using glob right.\nDo you have a test that doesn't use mocha?  I'm not very familiar with it.\n. Interesting.\nIf you use tap then it supports throws in async tests.  Just sayin ;)\n. If the file system is case insensitive, then this module will be case insensitive. There's not much to be done about that, since all the fs functions will play along with the \"wrong\" case. \n. It is only case preserving in some cases.  In this case, node-glob and bash do the same thing:\n$ mkdir -p A/B/C\n$ echo a/**\na/ a/B a/B/C\n$ node -p 'require(\"./\").sync(\"a/**\")'\n[ 'a', 'a/B', 'a/B/C' ]\nHowever, there IS a discrepancy here:\n$ echo readme.*\nREADME.md\n$ node -p 'require(\"./\").sync(\"readme.*\")'\n[]\nGonna open a new bug for this.  Thanks for helping to find it :)\n. Also, maybe related, but maybe a separate issue, note the difference:\n```\n$ echo A/**\nA/ A/B A/B/C\n$ echo A/*\nA A/B A/B/C\n$ node -p 'require(\"./\").sync(\"A/**\")'\n[ 'A', 'A/B', 'A/B/C' ]\n$ node -p 'require(\"./\").sync(\"A/*\")'\n[ 'A', 'A/B', 'A/B/C' ]\n```\nThe A*/** doesn't preserve the / on A/, but A/** does preserve the /.  Technically they're both correct results, but the difference is a minor bug.\n. Indeed!  Landed this with a comment so that I don't go breaking it again.  Thanks for the patch.\n. I have no idea what to do about this.  I don't manage the webjars repo at all, and that version range syntax is not one I'm familiar with.\n. Sorry for the delay responding to this.\nUnfortunately, there's a bug here.  Instead of removing the test fixture and replacing it with something else, just add the new one.  Apply this diff:\npatch\ndiff --git a/test/00-setup.js b/test/00-setup.js\nindex 541e4a1..e48e2cc 100644\n--- a/test/00-setup.js\n+++ b/test/00-setup.js\n@@ -102,6 +102,7 @@ var globs =\n   ,\"{./*/*,/tmp/glob-test/*}\"\n   ,\"{/tmp/glob-test/*,*}\" // evil owl face!  how you taunt me!\n   ,\"a/!(symlink)/**\"\n+  ,\"a/symlink/a/**/*\"\n   ,\"a/symlink/a/**\"\n   ]\n var bashOutput = {}\ndiff --git a/test/bash-results.json b/test/bash-results.json\nindex b4a1ffc..aafd3e9 100644\n--- a/test/bash-results.json\n+++ b/test/bash-results.json\n@@ -132,6 +132,11 @@\n     \"a/x\",\n     \"a/z\"\n   ],\n+  \"a/symlink/a/**/*\": [\n+    \"a/symlink/a/b\",\n+    \"a/symlink/a/b/c\",\n+    \"a/symlink/a/b/c/a\"\n+  ],\n   \"a/symlink/a/**\": [\n     \"a/symlink/a\",\n     \"a/symlink/a/b\",\n(You can also get this by just editing the 00-setup.js and running npm run test-regen.)\nWith that, there's a failing test:\n```\n$ tap test/bash-comparison.js\ntest/bash-comparison.js ........................... 584/586\n  a/symlink/a//*\n  not ok a/symlink/a//*\n    +++ found\n    --- wanted\n     [\n       \"a/symlink/a/b\"\n       \"a/symlink/a/b/c\"\n    -  \"a/symlink/a/b/c/a\"\n     ]\n    at:\n      line: 50\n      column: 9\n      file: test/bash-comparison.js\n    stack: |\n      test/bash-comparison.js:50:9\n      f (node_modules/once/once.js:17:25)\n      Glob. (glob.js:146:7)\n      Glob.finish (glob.js:185:8)\n      done (glob.js:172:12)\n      Glob._processGlobStar2 (glob.js:625:12)\n      glob.js:614:10\n      RES (node_modules/inflight/inflight.js:23:14)\n      f (node_modules/once/once.js:17:25)\n      lstatcb (glob.js:509:9)\n      RES (node_modules/inflight/inflight.js:23:14)\n      f (node_modules/once/once.js:17:25)\n      FSReqWrap.oncomplete (fs.js:82:15)\na/symlink/a/*/ sync\n  not ok should match shell (sync)\n    +++ found\n    --- wanted\n     [\n       \"a/symlink/a/b\"\n       \"a/symlink/a/b/c\"\n    -  \"a/symlink/a/b/c/a\"\n     ]\n    at:\n      line: 61\n      column: 7\n      file: test/bash-comparison.js\n    stack: |\n      test/bash-comparison.js:61:7\n      test/bash-comparison.js:54:9\n      f (node_modules/once/once.js:17:25)\n      Glob. (glob.js:146:7)\n      Glob.finish (glob.js:185:8)\n      done (glob.js:172:12)\n      Glob._processGlobStar2 (glob.js:625:12)\n      glob.js:614:10\n      RES (node_modules/inflight/inflight.js:23:14)\n      f (node_modules/once/once.js:17:25)\n      lstatcb (glob.js:509:9)\n      RES (node_modules/inflight/inflight.js:23:14)\n      f (node_modules/once/once.js:17:25)\n      FSReqWrap.oncomplete (fs.js:82:15)\ntotal ............................................. 584/586\n584 passing (733.131ms)\n  2 failing\n```\nIf I can work out what's going wrong in the little while this evening, I'll fix and land this.  If you've got any ideas, that's welcome too :)\n. Ah, I see the problem.\n\nThis PR fixes async and sync behaviour, adds tests for both in the specific eslint use case and deals with a bash oddity: whilst * doesn't follow a symlink / will. This may be an edge-case bug in the bash implementation too - but I don't want to follow this rabbit-hole any deeper right now.\n\nUnfortunately, you'll find that this module exists at the bottom of a rather deep rabbit hole :)\nBy definition, from the point of view of this module, Bash 4.3's glob behavior is correct.  That's the reference implementation that this module intends to follow 100%, even when that behavior is arguably \"weird\".\nBy default, each of the optional flags are either true, or default behavior.  So, follow: false doesn't mean \"never follow symbolic links\".  It means, \"only follow symbolic links in the cases where Bash 4.3 follows symbolic links.\"  follow: true, on the other hand, means \"follow all symbolic links always\" (which, incidentally is how Bash 4.1 handled symlinks encountered in globstar traversals, and how this module used to do it until Bash 4.3 changed its behavior, and I locked the reference implementation version that this module targets in JavaScript.)\nTo deviate from Bash 4.3 behavior, we'd have to add a flag which is off by default, but we've already got a lot of flags, and adding a nofollow: true reminds me of spammy email opt-in/out checkboxes (\"don't not uncheck this box unless you don't want to stay unsubscribed to our newsletter\").  Plus, what do you do with {follow:true,nofollow:true}?\nWe could conceivably say that follow:false means \"no symlinks ever\", and follow: true means \"follow all symlinks\", and follow: null/undefined means \"do what Bash 4.3 does\".  I don't love that either, because now if you just try to un-set a config by setting globOpt.follow = false, you can end up deviating from Bash behavior.  In my experience, the true/false/null option always just ends up getting confusing, and it's best to just keep it to 2 options with a boolean cast.\nSo, any of these are going to be breaking changes, and additional complexity.\nI'm sorry for what probably seems like unnecessarily pedantic adherence to an arbitrary code contract.  Because a lot of popular command line tools rely on this module, I've learned to be very careful about any semantic changes.\n. > But you could use globOpt.follow = null\nYes, that is what one would have to do.  But that is still a very subtle breaking change.\nIt's fine to say that this is \"unexpected behavior\", but it's behaving exactly like the reference implementation it's intending to emulate.  So... unexpected by whom?  If false and null start having different effects on a field that looks like a boolean flag, then that's also pretty unexpected.\nMaybe the answer is a --no-glob option for eslint?\nOverloading the follow flag is not the right call here.\n. Glob never had a \"do not follow any symlinks\" option. follow was added to force it to follow symlinks in globstar traversals, unlike bash. \nEsliny could have an option to just not use glob at all. Then you wouldn't have to worry about following symbolic links. But maybe that won't work either?\nI'm not sure the best answer for your use case. I know that deviating from bash behavior in this module is a bad idea, though, and pseudo-boolean-three-state option flags are flaky and error prone. \nYou could also turn on realpath:true in the glob options for eslint. Then you'll always get the full real path, and there will never be duplicates that refer to the same actual file. \n. I'm not opposed to this in principle, however:\n1. This should be a standalone module that can promisify a thing given an EventEmitter and a \"resolution\" event (with \"error\" considered the \"rejected\" event, of course).  Flow-control boilerplate doesn't belong in this module.\n2. That module should work on Nodes less than 0.12 (I'm told Bluebird is the thing all the cool kids use these days for their cross-platform promises.)  That's what's breaking the Travis-CI test.\n3. It seems like this isn't matching the Promises/A+ spec, which says that .catch() should behave quite a bit differently from how it's implemented here.\nAnother approach would be, rather than tacking .then() and .catch() onto the Glob prototype, just create a glob.promise(pattern, [options]) => Promise method, since that's really what you'd probably want to use anyway, and that's pretty trivial.  Might look something like this:\njavascript\nglob.promise = function (pattern, options) {\n  return new Promise(function (resolve, reject) {\n    var g = new Glob(pattern, options)\n    g.once('end', resolve)\n    g.once('error', reject)\n  })\n}\n. Another route is just to promise up the (lower case) glob() function of a callback isn't provided, but if that returns a Glob instance today, it'd be a breaking change. \n. What do you get when you call fs.statSync('deleteMe.txt')?  Or run the glob with glob.sync('deleteMe.txt', { stat: true })?\n. Hm.  Ok, that seems kinda like a bug to me.  It should be handling EPERM from readdir calls as an indication that the thing is either not a directory or not traversable, but an EPERM on a file seems like it should be an error.\nI'll have to review the code to be sure there isn't some method to this madness, but I agree that it seems like an oversight somewhere, and I'll try to figure out what bash does.  On Unix, there's no combination of permissions that will prevent you from being able to stat a file, so this is probably just a windows-ism that I didn't think to account for.\n. Anyone affected by this error, please try the following:\nnpm install isaacs/node-glob#fix-245\nAnd let me know if the problem goes away.\n. @schnittstabil Do you think it should return an error if { stat: true } is used?\n. Right, sorry, when I said \"return an error\", I meant throw from sync or first arg to cb from async.\nIt's an interesting edge case.  I could see someone thinking that if they do stat: true, then that means that the stat call should be required to succeed.  It'd be easy enough to make it work that way.\n. @schnittstabil I can't reproduce that.  What error is thrown?  Can you provide a test program and the output of the crash?  Thanks.\n. @schnittstabil When you say \"it throws an error\", what does that mean, exactly?  Being a JavaScripter, I'd assume it means something like what happens when you do throw new Error('oops')\n. @schnittstabil Oh, I see, so if the fs.readdir call gets an error, then that fails.\nWhat it's saying is \"this is a very strange error, and probably you want to know about it, but the glob process can continue.\"  If you pass silent: true in as an option, then it is quiet about it.\nI don't know why it's warning in async and throwing in sync, though, that's strange.  It looks like readdir failures need to be cleaned up a little bit as well.  That's definitely a separate issue (though related cause.)\n. I'm not sure what this question is about, but it doesn't seem like it's about this module.\nDid you post this issue to the right repo?\n. You're almost there.\njavascript\nglob.sync('./routes/**/*.js').forEach(function (file) {\n  var f = file.replace(/^\\.\\/routes/, '').replace(/(index)?\\.js$/, '')\n  app.use(f, require(file))\n})\nMaybe also relevant: https://nodejs.org/api/path.html#path_path_basename_p_ext\n. > do you think it's a good pratice expose the routes automatically like this?\nI have no opinion on the matter. It's your program, do as you like :)\n. Probably what you're looking for is minimatch\n. Hm. Yeah, that seems like a bug for sure.  /build/goat.png would match c:/build/goat.png on win32 systems, so that ignore pattern should prevent c:/build/goat.png from being returned in the results.\n. Sorry, I don't know what --no-instrument-glob means.\nWhat program are you running?  Does it use this module?\n. Here's the problem: without using inflight, this module can end up doing a lot more syscalls.\nDo you have a reduced test case that shows how glob leaks callbacks when a callback throws?\n. @phated Ah, this is the glob bug you were talking about!  Thanks.\nYes, this should be fixed with the latest inflight release.\n. Interesting!  It looks like you'e running it in a working directory in the G: drive.  Works for me on C:, but it looks like I need to make that test not be drive-specific.\n. Should be fixed on 68f2509d237babec64cf03adf72531127fd80339\n. How is this different from follow: true?\nCan you explain the use case in more detail?  And, is there a way to phrase the option so that it doesn't default to true?  Most of the other flags default to false, and I'd prefer to stick to that model.\n. So, you want to follow symbolic links, but not symbolic links that have already been traversed, is that correct?\nIf I'm understanding the use-case properly, you can do get almost this behavior today by setting realpath: true in the options.  (Then you're guaranteed to only get each path once.)\n```\n\nrequire('./').sync('test/fixtures/a/symlink/')\n[ 'test/fixtures/a/symlink',\n  'test/fixtures/a/symlink/a',\n  'test/fixtures/a/symlink/a/b',\n  'test/fixtures/a/symlink/a/b/c' ]\nrequire('./').sync('test/fixtures/a/symlink/', { follow: true }).length\n100\nrequire('./').sync('test/fixtures/a/symlink/**', { follow: true, realpath: true })\n[ '/Users/isaacs/dev/js/glob/test/fixtures/a/symlink',\n  '/Users/isaacs/dev/js/glob/test/fixtures/a/symlink/a',\n  '/Users/isaacs/dev/js/glob/test/fixtures/a/symlink/a/b' ]\n```\n\nOf course, the issue is that setting { follow: true, realpath: true } is filling up with duplicate symbolic links and then filtering them down at the very end.  It'd be much better for performance to call fs.realpath along the way instead, and avoid traversing directories multiple times if realpath: true is set, since they won't end up in the result set anyway.  (This would also fix the weird issue that realpath: true glob objects still emit match events with the non-realpath paths, which would be a breaking change, but an improvement, imo.)\nIf you want output that lists the symbolic links, but and want to follow those symbolic links, and don't want them to be realpath'ed in the result set, then that's going to have to be a different option.  But I think there's a cheaper way to do that than calling fs.realpath.\n\nstrict option being true by default\n\nHistorical accident :)  Once upon a time, it was false by default.\n. Note that, if you don't traverse any directories that have been seen already (or worse, resolve them to a realpath along the way), then you can run into weird situations.\nFor example, if you have foo/a/b/c and bar @-> foo, then the pattern {foo/a,bar/*/b/*} would match on foo/a and then would have to know that it SHOULD traverse bar (and re-traverse bar/a) to find bar/a/b/c, because that path doesn't match the pattern if we're calling bar by its realpath name, foo.\n. javascript\nglob('**/*.js', { exclude: '**/*.exclude.js' }, cb)\n. Oh, sorry, I skimmed past that, I guess. Seems like it'd be good if that library let you pass options to glob somehow, then. \n. Am I correct in thinking this has no functional impact?\nThis way is fine, of course, but I usually don't accept patches that don't make some kind of measurable change.\n. @phated Thanks!\n. Fixed by falling back to the old implementation of fs.realpath on Node 6 when new errors are thrown from the realpath syscall.  Using http://npm.im/fs.realpath module.\n. Wow, didn't notice that uv has realpath now. \nSomeone should confirm that it's not using the realpath(3) UNIX function, since that's notoriously insecure. (That's why node had a realpath in JS in the first place.)\nIf it is, then it's better for glob to refuse to use realpath in those versions of node. \n. @TheAlphaNerd I haven't followed the conversation in depth, but I see the some ^Lift folks got involved.  If @jlamendo is happy with where node 6 lands on this, then I'm happy supporting it.\n. Digging into this more, it's almost impossible to fix without either (a) making a significant breaking change to glob, or (b) porting the pre-node6 fs.realpath into a standalone module and using that instead.  Both options are nontrivial.\nThe tests are breaking because Node broke behavior.  fs.realpath no longer works like it used to, and any module that exposed any kind of realpath API surface is almost certainly failing tests as well (provided that their test coverage was sufficient to detect it.)\nThe patch here simply ignores ELOOP errors that are raised by the fs.realpath call.  That does work in the one case where a test is failing, but digging in a bit deeper, I'm not convinced that it's the correct solution in every case.  In Node 6, node-glob simply cannot do what it used to be able to do.  I am concerned that ignoring ELOOP will violate its contract.  (Also, what about ENAMETOOLONG?  It's purely lucky happenstance that the test is not raising that instead.)\nIt's going to take some time to fix issues like this.  In the meantime, in my opinion, people should either know that they're using a not-ready-for-prime-time version of the platform (and thus, expect test failures), or avoid Node 6 until it and the ecosystem have had time to get stable.  This new work lands on the laps of many part-time maintainers who weren't planning for it.  I have no idea when I'll even get to it, but it's not at the top of my list.  I've already spent several hours debugging new issues that Node 6 raised.\nBreaking changes  break stuff.  This is what it looks like when a platform is unstable.  It's costly.\n. Already fixed, looks like?\n. The minimatch dep is already updated on latest, and hopefully 1728df825b1401351c326e04b905192debf862fb fixes the appveyor issue.  (Seems to work properly on my local Windows vm.)\n. The CI failures are because one of tap's deps added a dependency on a version of request that doesn't exist.\nIt's fixed, and also, I already bumped the minimatch version to ^3.0.2 before seeing this, so it's fine now.\nThanks.\n. Can you provide any more details?  Like, the depth of paths, pattern being used, etc?\nI'm sure it's something that could probably be addressed, but a reproducible test case would be the first step.\n. Yes. Pass nodir: true in the options object.  From the readme:\n\n\nnodir Do not match directories, only files. (Note: to match only directories, simply put a / at the end of the pattern.)\n. I don't know what glob-all is, but this is working for me.\n\n\n```\n$ tree\n.\n\u251c\u2500\u2500 css/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 one.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 one.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 two.css\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 two.txt\n\u2514\u2500\u2500 js/\n    \u251c\u2500\u2500 one.js\n    \u251c\u2500\u2500 one.txt\n    \u251c\u2500\u2500 two.js\n    \u2514\u2500\u2500 two.txt\n2 directories, 8 files\n$ for i in /.!(css|js); do echo $i; done\ncss/one.txt\ncss/two.txt\njs/one.txt\njs/two.txt\n$ node -p 'require(\"glob\").sync(\"/.!(css|js)\")'\n[ 'css/one.txt', 'css/two.txt', 'js/one.txt', 'js/two.txt' ]\n```\n. @jrbenito Doesn't make a different in this case.\n```\n$ node -p 'require(\"glob\").sync(\"/.!(css|js)\")'\n[ 'css/one.txt', 'css/two.txt', 'js/one.txt', 'js/two.txt' ]\n$ node -p 'require(\"glob\").sync(\"*/.!(css|js)\")'\n[ 'css/one.txt', 'css/two.txt', 'js/one.txt', 'js/two.txt' ]\n```\nWhat version of node-glob are you using?  Run npm ls glob.\n. Ah, you've got a filename with multiple parts.  I missed that!  So yes, you'll have to use that more complicated pattern, then.\nWhat *.!(js|css) says is \"some characters, followed by a dot, followed by something that isn't js or css, followed by the end of the string\".  So, if you have multi.part.js then you have multi (some characters) followed by ., followed by part.js (which isn't js or css).\nWhat *.!(*(*.)js|*(*.)css) says is \"some characters, followed by a dot, followed by something that is not zero or more instances of (character followed by dot) and then js or zero or more (characters followed by a dot) and then css\".\nIf you were comfortable getting file entries that don't have dots in them (which will mostly be folders, but you can avoid by using the nodir option passed to glob) you can use the somewhat simpler pattern **/!(*.css|*.js), which says \"something that isn't *.js or *.css.\nThis matches bash's pattern matching logic:\n```\n$ for i in */.!(css|js); do echo $i; done\ncss/multi.part.css\ncss/multi.part.js\ncss/multi.part.txt\ncss/one.txt\ncss/two.txt\njs/multi.part.css\njs/multi.part.js\njs/multi.part.txt\njs/one.txt\njs/two.txt\n$ for i in /.!((.)css|(*.)js); do echo $i; done\ncss/multi.part.txt\ncss/one.txt\ncss/two.txt\njs/multi.part.txt\njs/one.txt\njs/two.txt\n$ for i in /!(.css|.js); do echo $i; done\ncss\ncss/multi.part.txt\ncss/one.txt\ncss/two.txt\njs\njs/multi.part.txt\njs/one.txt\njs/two.txt\n``\n. It is correct that slashes do not work inside of extglob patterns such as!(a|b).  Those can only be used to indicate path parts, not entire paths.  This is how Bash works as well.  In that case, the pattern is read as a file namedb)inside of a folder named!(a`, which is weird, but not impossible.\nThat being said, you have found a bug here, because it should not throw if you use a pattern like that.\n. You can take a look at how fstream-ignore does it.  That's what npm uses for .npmignore files.  https://github.com/npm/fstream-ignore\n. This is a result of passing an empty string to hasMagic.\nIt's fixed in the latest release.\n. Note: You should probably investigate why you're calling rimraf('') though.  That seems like a bug that will result in attempting to recursively delete the current working directory.  Are you sure that's what you want to do?\n. Well, this is weird.  Glob can't very well give you a list of files if it can't list the files in a directory.  I'm not sure how I'd even go about addressing that.\n. I'd still call this a bug.  c:\\\\* should be functionally equivalent to /* on Windows.\n. Something like this?\n``` js\n// gs.js\nvar Readable = require('stream').Readable\nvar util = require('util')\nvar glob = require('./')\nmodule.exports = GlobStream\nutil.inherits(GlobStream, Readable)\nfunction GlobStream (pattern, options) {\n  Readable.call(this, { objectMode: true })\n  this._glob = new glob.Glob(pattern, options)\n  this._glob.on('match', function (filename) {\n    if (!this.push(filename)) {\n      this._glob.pause()\n    }\n  }.bind(this))\n  this._glob.on('end', function () {\n    this.push(null)\n  }.bind(this))\n}\nGlobStream.prototype._read = function () {\n  this._glob.resume()\n}\n```\nUsage:\njs\nvar GS = require('./gs.js')\nvar gs = new GS('**/*.js')\ngs.on('data', function (filename) {\n  console.log('%j', filename)\n})\ngs.on('end', function () {\n  console.log('END')\n})\n. Anyway, yes, you can pause() whenever, and you should get no match events while paused.  But if your goal is to push it into a stream, then the stream can handle a few pushes while it's buffering.\n. I would accept a PR to add something like this, yes.  Maybe just absolute: true as an option.\n. I think you could basically just this.emit('match', this._absolute ? abs : e) in that function, and set this._absolute = !!options.absolute in the ctor.  Then tests and docs, and you're done :)\n. Published as 7.1.0.  Thanks!\n. Thanks! this'll go out in the next release.  I also wanna fix the thing with the stat errors on Windows, in #245.\n. The object is not filled up synchronously, even on a non-network drive it'll be empty.\nTry this:\njs\nvar g = new glob.Glob(pattern, options)\ng.on('end', function (matches) {\n  if (g.found.length > 0) { ... whatever ... }\n})\nOr, perhaps simpler:\nvar g = new glob.Glob(pattern, options, function (error, matches) {\n  if (error) { ... handle error ... }\n  if (g.found.length > 0) { ... whatever ... }\n})\n. I'm not interested in maintaining version, description, and dependency information in more than one place.\nYou are welcome to float this patch on your own branch, and use that with bower.\n. You don't have to do anything special to clean up the memory.  Just remove references to it.\nIf you put the glob object in a list, you can kill whatever it's currently doing by calling myGlob.abort().  You can see its results by listening for the end event.  If you just want to check on it some time later, you can do something like:\n```js\nvar myGlob = new Glob(somePattern)\nmyGlob.on('end', function () {\n  this.done = true\n})\n// some time later...\nif (myGlob.done) {\n  console.log('it is done', myGlob.matches)\n} else {\n  console.log('still working')\n}\n```. Thanks!. Probably the command-line specific stuff shouldn't be in this library.  A lot of cli stuff does use node-glob to parse path options, especially since the shell doesn't do that for you on windows.\nWhat would you want to add here?. > Is there a minimum Node version supported by node-glob?\nYes, but it's 0.10 :)\nIf I had to guess, what's happening is that some module is requiring glob, but isn't listing it as a dependency or peer dependency.  But, since some other module in your tree requires glob, it \"works by accident\" in npm version 3 and above, because of tree-flattening.\nRun npm i glob -S in your project and see if that fixes it.\n. You're installing an outdated version of glob, then.  Upgrade to the latest and greatest.. Yeah, what @bitstrider said.\nGlobs are not regular expressions.  Type man bash in your terminal, and look for the section on Pattern Matching.. https://github.com/isaacs/node-glob/commit/057569cbcde510173a79b2d668e808023c09bb01. fixed on head, or npm install glob\n. I'm not familiar with ndistro.  Wanna submit a patch to make it work?  What's involved?\nnode-glob works fine with npm.\n. NetBSD has an implementation that's BSD-licensed.  So that'd work.\n. Implemented in v2.0.0\n. implemented in 2.0.0.  require('glob').glob has the GLOB_ constants, and require('glob').fnmatch has the FNMATCH_ constants.\n. Whoops!  Thanks.\n. Closed by f3e2da0ea0e0989e0d337bd487e8d246405704ff Add strlcpy if not defined\n. thanks :)\n. Fixed on version 2.0.4\n. Yep :)\nJust have to figure out how to make it build on Solaris, now.\n. What's uname -a say?\n. Should work on linux now.  Just published the fixes.\n. dachev: Can you pull the latest source from github and run node-waf configure build on it?\n. If it works with what's in git HEAD right now, then that's fantastic. I still need to get it to build properly on Solaris, and then I'll npm publish again and update this issue so you all get emailed about it.\n. Ok, try 2.0.4, just published.  Should build and run properly on Mac, Linux, and Solaris.\n. Will be solved by #23\n. That was supposed to be for #48, whoops.\n. Could it be that npm isn't re-building the bundles?  What version of npm are you using?\n. If you do npm bundle rebuild glob then does it work?  What's the output of npm when you install the package with the bundled glob in it?\n. Great!  The good news is that I just checked, and this is already\nfixed in 1.0.  Since you've got a workaround, I'm gonna go ahead and\nnot bother investigating whatever is broken in 0.3.15 :)\n. 1. what version of glob are you using?\n2. what operating system?\n3. what version of node?\n4. I'm pretty sure */.js is not going to match anything.  Sure you didn't mean *.js?\n. Ok, cool.  See if the problem goes away by upgrading node to 0.4.5 (it might).\nI'm going to port glob to be just in js soon.  It won't be quite as fast, but it will be way more stable and portable that way.\n. You could maybe do path.resolve(\"./**/*.js\") then, in the meantime.\nIf you could run it in gdb, I'd love a stack trace.  Otherwise closing this for now.\n. ```\necho 'require(\"glob\").glob(\"./*/.js\", function (er, paths) { console.error(er, paths) })' > g.js\ngdb node\nin gdb:\nset args g.js\nrun\n```\nThe \"help\" command is helpful :)\n. Ah, right, so, at that point, do this:\n(gdb) backtrace\nI can repro this on my linux box (was missing something obvious before).  Here's what I'm seeing:\n```\n0  0x00007fffd1f9a4d1 in g_lstat (fn=0x0, sb=0x0, pglob=0x0) at ../deps/glob/glob.c:1156\n1  0x00007fffd1f998e8 in glob3 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e8e, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae9a, restpattern=0x7ffff7e1aea2,\npglobstar=0x7ffff7e1aea2, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:827\n\n2  0x00007fffd1f99652 in glob2 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e8e, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae9a, pglob=0xc16490,\nlimit=0x7ffff7e1ef60) at ../deps/glob/glob.c:766\n\n3  0x00007fffd1f9983f in glob3 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e8e, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, restpattern=0x7ffff7e1ae98,\npglobstar=0x7ffff7e1ae94, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:821\n\n4  0x00007fffd1f99652 in glob2 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e8e, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, pglob=0xc16490,\nlimit=0x7ffff7e1ef60) at ../deps/glob/glob.c:766\n\n5  0x00007fffd1f99d26 in glob3 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e7c, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, restpattern=0x7ffff7e1ae98,\npglobstar=0x7ffff7e1ae94, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:931\n\n6  0x00007fffd1f99652 in glob2 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e7c, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, pglob=0xc16490,\nlimit=0x7ffff7e1ef60) at ../deps/glob/glob.c:766\n\n7  0x00007fffd1f99d26 in glob3 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e74, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, restpattern=0x7ffff7e1ae98,\npglobstar=0x7ffff7e1ae94, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:931\n\n8  0x00007fffd1f99652 in glob2 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e74, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, pglob=0xc16490,\nlimit=0x7ffff7e1ef60) at ../deps/glob/glob.c:766\n\n9  0x00007fffd1f99d26 in glob3 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e64, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, restpattern=0x7ffff7e1ae98,\npglobstar=0x7ffff7e1ae94, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:931\n\n10 0x00007fffd1f99652 in glob2 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e64, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, pglob=0xc16490,\nlimit=0x7ffff7e1ef60) at ../deps/glob/glob.c:766\n\n11 0x00007fffd1f99d26 in glob3 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e58, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, restpattern=0x7ffff7e1ae98,\npglobstar=0x7ffff7e1ae94, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:931\n\n12 0x00007fffd1f99652 in glob2 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e58, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, pglob=0xc16490,\nlimit=0x7ffff7e1ef60) at ../deps/glob/glob.c:766\n\n13 0x00007fffd1f99d26 in glob3 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e44, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, restpattern=0x7ffff7e1ae98,\npglobstar=0x7ffff7e1ae94, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:931\n\n14 0x00007fffd1f99652 in glob2 (pathbuf=0x7ffff7e18e40, pathend=0x7ffff7e18e44, pathlim=0x7ffff7e1ae40, pattern=0x7ffff7e1ae94, pglob=0xc16490,\nlimit=0x7ffff7e1ef60) at ../deps/glob/glob.c:766\n\n15 0x00007fffd1f991ea in glob1 (pattern=0x7ffff7e1ae90, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:670\n16 0x00007fffd1f99063 in glob0 (pattern=0x7ffff7e1cf50, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:616\n17 0x00007fffd1f98697 in globexp1 (pattern=0x7ffff7e1cf50, pglob=0xc16490, limit=0x7ffff7e1ef60) at ../deps/glob/glob.c:333\n18 0x00007fffd1f985aa in myglob (pattern=0xbe46c8 \"./*/.js\", flags=33920, errfunc=0, pglob=0xc16490) at ../deps/glob/glob.c:306\n19 0x00007fffd1f97269 in EIO_Glob (req=0xc164f0) at ../src/glob.cc:86\n20 0x0000000000542890 in eio_execute (thr_arg=) at ../deps/libeio/eio.c:1826\n21 etp_proc (thr_arg=) at ../deps/libeio/eio.c:1635\n22 0x00007ffff683aa04 in start_thread () from /lib/libpthread.so.0\n23 0x00007ffff65a3d4d in clone () from /lib/libc.so.6\n24 0x0000000000000000 in ?? ()\n```\n. Yeah, solution is just to write this in JS.\n. Will be solved by #23\n. D'oh.  npm bug that'd been hanging out there for a while, apparently.  Hopefully not too many people published binary packages!  Thanks for the heads-up.\n. Those are fine.\n. Will be solved by #23\n. If at all possible, it's best to use npm 1.0, especially if you prefer the \"bundle\" approach to dependency management.\nThis is a known issue with npm 0.x when bundling packages that have build steps, and will not be fixed.\n. The fix will be to port it to use my js implementation.  I've got most of the parts already, just need to assemble them behind the same API that glob has.\n. Does it work using node stable (v0.4.11)?\n. I'm going to port this to a pure JavaScript version.  Keeping this portable is too annoying.\n. Use node stable, v0.4\n. Has nothing to do with lion.  It doesn't work with node 0.5\n. Check out minimatch.  It's what I've been using in npm to parse globs.\n. mimimatch is this: https://github.com/isaacs/minimatch or npm install minimatch\n. No, the plan is to use minimatch's matching, but add file system traversal, so that it's the same API.\nI'm not interested in porting bsdglob.c.\n. Yes, that is the plan.\nOn Fri, Nov 18, 2011 at 16:08, August Lilleaas\nreply@reply.github.com\nwrote:\n\nSo the plan is to update the glob module by depending on minimatch and using the fs module to traverse the file system?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/isaacs/node-glob/issues/23#issuecomment-2796183\n. Done.\n. No longer a C program.  Should work fine now.\n. The scons build system is going away, so this is at best a stop gap measure.  But it seems like a pretty reasonable stop-gap, so why not?\n\nLanded on master, published as 2.1.0\n. This should work well on Windows using recent versions of node 0.6.  Please comment here with more details and I'll reopen the issue if it's still a problem.\n. d'oh.  Thanks!\nMerged into master and --force published to npm.\n. What for?  https://github.com/isaacs/node-glob/commit/d344c63cd0a802d6f9c30d2886a77173fa8ac88c\n. Sorry, @TooTallNate beat you to this one.\n. Nice find.  I'm a bit ashamed I missed that, it's so obvious.  Fix coming very soon.\n. Yeah, it's a bug.  Haven't had a chance to fix it yet.\nThe solution is to detect whether each pattern in the set is absolute or not, and only strip the cwd from each result if it was not an absolute pattern.\nAlso, weird though it may be, there were previous cases where {/foo,/foo} would return the same thing more than once, so each match needs to be tied to a given glob in the set.  That's the ultimate solution, though @TooTallNate's workaround is ok for the short-term.\n. Fixed on master, published as glob 3.1\n. Yeah, that's a bug.\n. Can you please try with the latest push to master?  Also published as glob@3.1.0.\n. Could you explain a little bit what \"not working for me at all now\" means?\nIs it throwing an error?  Hanging?  Doesn't install?\n. Aha.  It's getting confused when the cwd isn't process.cwd.\n. v3.1.3 should have what you need.  Thanks!\n. root is used when you want patterns starting with / to be interpreted as being in some specific directory.\nSeems like that's broken atm too, though.\n. Say you have this structure:\na\n+-- b\n|    `-- c\n+-- c\nThen glob('/c', {root: 'a', cwd: 'a/b'}) would match a/c but not a/b/c.  If you drop the slash, then you see that glob('c', {root:'a',cwd:'a/b'}) would match the a/b/c file, but not the a/c file.\nWhat's not immediately clear is how best to express this in the results.  I'm thinking that any and all patterns that start with / should show up in the results as a full absolute path, with the root config pre-pended.\nAnother option would be to resolve everything against the cwd, but that breaks the symmetry with how it works by default, when cwd is process.cwd(), and root is /.  The \"evil owl\" pattern {*,/*} returns /etc, /usr, /home, etc... for the \"absolute\" part, but foo, bar, baz, ... for the \"relative\" part.\nSetting a root is important for handling situations like ignore files.  /foo.txt in a .gitignore will prevent ./foo.txt from being included, but not ./bar/foo.txt.\nWhen building a tarball or something, though, you probably don't want to get the full path, since that'll result in adding a bunch of noise into your tarball, so this will have to be configurable, with the default perhaps being to prepend the root, and an option to disable, akin to rsync's '--no-implied-dirs' option.\n. Because the default root is /, not the cwd.  The evil owl {/*,*} needs to return everything in / as well as everything in ..  So, by default, yes it is prefixed.\nIf you want to disable this, set { nomount: true } in the options object.\n. The glob tests are a little tricky right now.  You have go have bash4 installed, and turn on extglob and globstar in your shell.\nIt'd be nice to bundle a standalone bsdglob or something for reference, but I haven't done that yet.\n. Yes that is a bug.\nOn Monday, February 6, 2012, Johan Nordberg \nreply@reply.github.com\nwrote:\n\nYep, installed bash4 and all tests pass. However i still can't get\nnegating patterns to work\nbash\n~/Development/node-glob\n$ ls\nREADME.md    examples     glob.js      negate.js    node_modules\npackage.json test\n~/Development/node-glob\n$ ls *.!(js)\nREADME.md    package.json\n~/Development/node-glob\n$ node -e \"require('./')('*.!(js)', console.log)\"\nnull []\nAm i missing something?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/isaacs/node-glob/issues/33#issuecomment-3836490\n. ** is only magical when it's the only thing in a path portion.  Try **/*.txt.  See the documentation in the minimatch readme file.\n\nTHe stray console.error is removed on 3.1.2.\n. Use node 0.6.\n. Nevertheless, fixed in glob 3.1.6 :)\n. I don't know what you're actually asking for.  What change would have to be made in node-glob?\n. I see.  Yes, supporting an array of glob patterns is planned for ignorefile support, but it'll probably be a different module.  Something like this:\njavascript\nvar mg = new MultiGlob(['a/b/c', 'd/e', '!test'], options)\nmg.on('match', doSomething)\nIf it turns out to not be much of a change, or too difficult to do externally, I might fold this into node-glob directly, and just have Glob take an array or a single pattern. Would this API satisfy your use-case?\n. Turns out this is complicated and hard, and I ended up doing IgnoreFile as its own module.\n. e8f420866ebf4aed0f2e043dcda2dbb23a650889\n. Oh, also, 83939fc8bcbc330d2baff92936e2ce589d2c71c2\n. Landed on 7246f640be49401845d7935f9ec2f07137c39a5d, published as 3.1.7, thanks!\n. Doing gitignore handling is a much more involved process, since it requires the ability to pause and resume the walk at any arbitrary point.\nI write https://github.com/isaacs/fstream-ignore to do this.  It's very extensible.  I'm using it in https://github.com/isaacs/fstream-npm.  However, if you just want the list of matches, it's a bit heavy, since it stats and reads every file.\nIf you want to add this functionality to glob, it should be a separate module.  This is strictly an implementation of glob(3) in javascript.\n. Fixed in the latest release.\n. Confirmed.  That is a bug.\n. Working on latest release.\n. Yep.  That's the bug, alright.  Thanks.\n. I'm gonna call that a wontfix.  If you have a patch that does this in some elegant way, then fine, but otherwise just normal paths work with glob.\n. Landed on 3.1.14.  Thanks!\n. > it appears that graceful-fs is causing hanging write operations.\nWhat does this mean?  Can you provide a test-case that reproduces what you're talking about?\n. Fixed on isaacs/node-graceful-fs@3f391309b97e5c61bb8cf633911d0a02f095b024\nThanks!\n. +1. Patch welcome.\n. Fixed by 1b0c060, put the wrong issue number in it.\n. Interesting. So the directory filtering is failing.\n. Yeah, definitely a bug.  Patch welcome.\n. Works properly on Unix.\n. Seems like it works properly on Windows as well:\n```\nC:\\globtest\\node-glob\\test>cat g.js\nvar glob = require('glob');\nvar path = require('path');\nglob(__dirname + '/*/', function (err, matches) {\n console.log(matches); // matches is ok\n});\nC:\\globtest\\node-glob\\test>node g.js\n[ 'C:\\globtest\\node-glob\\test/00-setup.js',\n  'C:\\globtest\\node-glob\\test/bash-comparison.js',\n  'C:\\globtest\\node-glob\\test/bash-results.json',\n  'C:\\globtest\\node-glob\\test/cwd-test.js',\n  'C:\\globtest\\node-glob\\test/g.js',\n  'C:\\globtest\\node-glob\\test/mark.js',\n  'C:\\globtest\\node-glob\\test/pause-resume.js',\n  'C:\\globtest\\node-glob\\test/root-nomount.js',\n  'C:\\globtest\\node-glob\\test/root.js',\n  'C:\\globtest\\node-glob\\test/zz-cleanup.js' ]\n```\n. This is using glob 3.1.17, btw.\n. I installed the msysutil suite with git, but it's normal cmd otherwise.  I just don't know most of the windows equivalents.\nWhat is the actual output?\n. That is, what is the output if glob(__dirname + '/**/*') vs the output of glob('**/*')?\n. Also, what is node -v?\n. Type Alt-Space, E, K, then select with your mouse, then press Enter.  This copies the output to your clipboard, and you can paste it into a code block with . Put a `/` in front of `'test'`.  Echo out the actual path that you're globbing, you'll see the problem right away, I'm sure.  (`__dirname` doesn't end in a slash.)\n. diff\n-glob(__dirname + 'test//*', function (err, matches) {\n+glob(__dirname + '/test//*', function (err, matches) {\n```\n. Aha!  Ok, reproducing now:\n``` javascript\nvar glob = require('glob');\nvar p1 = 'test/*/';\nglob(p1, function (err, matches) {\n    console.log(p1, matches);\n});\nvar p2 = __dirname + '/' + p1;\nglob(p2, function (er, matches) {\n    console.log(p2, matches);\n});\n```\nOutput:\nc:\\globtest\\Helena>node test.js\nc:\\globtest\\Helena/test/**/* []\ntest/**/* [ 'test/asdasd.txt',\n  'test/dir',\n  'test/dir/a.txt',\n  'test/dir/b.txt',\n  'test/dsadsa.txt' ]\nFolder structure:\ntest/\ntest/asdasd.txt\ntest/dir/\ntest/dir/a.txt\ntest/dir/b.txt\ntest/dsadsa.txt\n. Now I'm confused about why it's working sometimes, but not in this specific case...  Very strange.\n. @satazor Separate issue.  Please file a separate bug with a reproduction case.\n. I see this.  Can you please try with 3.1.19?  Should be fixed now.\n. Debug messages are fixed by #55\n. Hm, I can't seem to reproduce.\n```\nc:\\globtest\\node-glob>node g.js\nc:\\globtest\\node-glob\\ [ 'c:/globtest/node-glob/' ]\nc:\\globtest\\node-glob [ 'c:/globtest/node-glob/' ]\nc:\\globtest\\node-glob>cd test\nc:\\globtest\\node-glob\\test>node ../g.js\nc:\\globtest\\node-glob\\ [ 'c:/globtest/node-glob/' ]\nc:\\globtest\\node-glob [ 'c:/globtest/node-glob/' ]\nc:\\globtest\\node-glob\\test>cp ../g.js ./g.js\nc:\\globtest\\node-glob\\test>node g.js\nc:\\globtest\\node-glob\\test\\ [ 'c:/globtest/node-glob/test/' ]\nc:\\globtest\\node-glob\\test [ 'c:/globtest/node-glob/test/' ]\nc:\\globtest\\node-glob\\test>cd ..\nc:\\globtest\\node-glob>cd ..\nc:\\globtest>cd ..\nc:>node c:\\globtest\\node-glob\\test\\g.js\nc:\\globtest\\node-glob\\test\\ [ 'c:/globtest/node-glob/test/' ]\nc:\\globtest\\node-glob\\test [ 'c:/globtest/node-glob/test/' ]\nc:>z:\nZ:>node c:\\globtest\\node-glob\\test\\g.js\nc:\\globtest\\node-glob\\test\\ [ 'c:/globtest/node-glob/test/' ]\nc:\\globtest\\node-glob\\test [ 'c:/globtest/node-glob/test/' ]\n```\nIs it possible that you were using a different version of glob or something?\n. Any chance to try to repro this?\n. Actually, this seems to work for me.\n``` javascript\n// t.js\nvar glob = require('glob');\nvar assert = require('assert');\nglob(__dirname + '\\', { mark: true }, function (err, matches) {\n    // Should contain the dirname with / on the end\n    console.log(matches);\n    console.log(\"glob version %s\", require('glob/package.json').version);\n    console.log(\"node version %s\", process.version);\n    assert.equal(matches[0], __dirname.replace(/\\+/g, '/') + '/');\n    console.log('ok');\n});\n```\nC:\\globtest\\x>C:\\node-v0.10.12\\Release\\node.exe t.js\n[ 'C:/globtest/x/' ]\nglob version 3.1.14\nnode version v0.10.12\nok\nAre you sure you're using the latest version of glob?\n. Note, a \"fresh install of windows\" doesn't matter if you're using an old install of node and glob.  Do npm ls glob to see which version you're using, and npm install glob@latest to make sure to install the latest one.\n. Ha!  I was the one using an outdated glob!  Apparently this was fixed in 3.1.14, but regressed in 3.2.\n```\nC:\\globtest\\x>C:\\node-v0.10.12\\Release\\node.exe t.js\n[ 'C:/globtest/x' ]\nglob version 3.2.1\nnode version v0.10.12\nassert.js:92\n  throw new assert.AssertionError({\n        ^\nAssertionError: \"C:/globtest/x\" == \"C:/globtest/x/\"\n    at C:\\globtest\\x\\t.js:9:12\n    at Glob. (C:\\globtest\\node_modules\\glob\\glob.js:90:7)\n    at Glob.EventEmitter.emit (events.js:95:17)\n    at Glob._processEmitQueue (C:\\globtest\\node_modules\\glob\\glob.js:294:10)\n    at Glob.emitMatch (C:\\globtest\\node_modules\\glob\\glob.js:271:10)\n    at Glob._finish (C:\\globtest\\node_modules\\glob\\glob.js:232:8)\n    at Glob. (C:\\globtest\\node_modules\\glob\\glob.js:173:27)\n    at Glob.cb (C:\\globtest\\node_modules\\glob\\glob.js:315:11)\n    at Glob. (C:\\globtest\\node_modules\\glob\\glob.js:355:16)\n    at Glob._afterStat (C:\\globtest\\node_modules\\glob\\glob.js:561:6)\n``\n. Yes, I'm emulating windows 7 in VMWare.  I don't have a \"real\" bare-metal windows machine.\n. Fixed on latest release.  Issue was thatpath.resolve()removes trailing slashes.\n. Whoops!  Sorry, thought i'd removed those already.  Landed on master.\n. done on 3.2\n. landed in master, thanks.\n. Very tricksy!  The reason is that, if you don't have any magic in the pattern, glob \"shortcuts\" and just checks for the exact string you gave it.  Since it's a case-sensitive file system, that means that it will only find that one exact thing, regardless of thenocase` flag.\nIt would be nice if there were a way to detect a case-sensitive file system, but afaik, there is no such way.  I think perhaps we just need to treat nocase patterns as if they had magic at all levels, even if they don't.  Consider this:\n```\nmkdir /tMp\ntouch /tmp/foo\ntouch /tmp/fOo\ntouch /tMp/Foo\ntouch /tMp/foO\nglob.sync('/tmp/foo', {nocase: true})\n// expect all 4, so we need to test every part of the pattern!\n```\nA test would be awesome.  The only way I can see to test this would be to mock out the fs object, which is tedious, but not super hard.  You've messed around with glob a lot, wanna try writing a patch?  Probably just a matter of changing some check somewhere to assume that patterns are always magical if nocase is set.\n. I think it's just in minimatch, iirc.  Search for hasMagic.  It should\ndefault to true if nocase is set.  I think it currently defaults to\nfalse, then gets set to true if there are any magic chars.  If there's no\nmagic, then it returns a string instead of a regexp.\nOn Thu, Feb 21, 2013 at 7:45 AM, Ben Alman notifications@github.com wrote:\n\nIs this entirely handled in minimatch, or is it in glob as well? I'm\nfinding it difficult to puzzle through this one.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/isaacs/node-glob/issues/59#issuecomment-13895393.\n. Patch welcome\n. Landed in 3.2.1\n. Yep, this is a bug.\n. It's not property respecting the this.minimatch.negate flag, which should flip all the comparisons.\n. Patch welcome.\n. I'm not familiar with glob-whatev.  But this module should behave 100% the way that the documentation says it does.  If you find a case where it doesn't, then that's a bug.\n\nBy default, it supports everything under \"Pattern Matching\" in man bash, except for Tilde Expansion, and adds \"negation\" as well (like in .gitignore file patterns).  You can turn off any options you want.\n. Er, turn off any options you don't want, I guess ;)\n. Issues on this repo are for bugs in this repo.  It's not an effective way to post a question to users of node-glob, since most of them never see this page.\nIt'd be better to post to the nodejs mailing list, probably.\n. Right, I see why this is happening.\nLet's say you have a tree like this:\n.\n\u2514\u2500\u2500 y/\n \u00a0\u00a0 \u251c\u2500\u2500 d/\n \u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 e.c\n \u00a0\u00a0 \u251c\u2500\u2500 a\n \u00a0\u00a0 \u251c\u2500\u2500 a.c\n \u00a0\u00a0 \u251c\u2500\u2500 b\n \u00a0\u00a0 \u2514\u2500\u2500 b.c\nand you search for the glob pattern: **/*.c.  You want to find these things:\ny/a.c\ny/b.c\ny/d/e.c\nWhen it has a globstar, that can match 0 or more path segments.  So, the way that it does that is to read the dir, then test each child as if they were below the globstar, and if they replace the globstar.\nSo, you have a pattern like [**, *.c].  So, you read the cwd, and get [x, y].  For each child, test if it matches without the globstar, if the child replaces the globstar (to find its grandchildren) and also below the globstar (for further descendants).  This results in the following patterns:\n[ *.c ]\n[ y, *.c ]\n[ y, **, *.c ]\nWe then process each of those.\nThe first matches nothing.\nThe children of y are [a a.c b b.c d].  For the first pattern, this is simple, and then for the next, we do the same special globstar approach.\n[ *.c ] --> [] (no matches)\n[ y, *.c ] --> [ y/a.c, y/b.c ]\n[ y, **, *.c ] -->\n  [ y, *.c ] (without the globstar, note the duplicate!)\n  [ y, a.c, *.c ]\n  [ y, a.c, **, *.c ]\n  [ y, b.c, *.c ]\n  [ y, a, *.c ]\n  [ y, a, **, *.c ]\n  [ y, b, *.c ]\n  [ y, b, **, *.c ]\n  [ y, d, *.c ]\n  [ y, d, **, *.c ]\nI'm not sure just how much of a problem this really is.  After all, if you listen on the 'end' event (or just use the top-level function instead of the object) then you'll get the deduped list.  Solving this problem without breaking the other trickier examples would be pretty tough.\n. This is exactly a duplicate of #64 (posted by @chbrown).  Apparently it was a mistake to close that one, since more people are clearly affected by it :)\nThere's an explanation in #64 about why this is happening.  The trivial fix breaks a bunch of tests, but this is indeed a bug.\n. > Ouch. The issue immediately before this one...\nHaha, no worries.  I guess it just shows that more people are affected by this than I'd thought, that's all.\n\nhow do the post-processing methods de-dupe?\n\nYes, it's using Object keys, as long as you don't set nounique:true in the options.  That flag is important if you want brace-expanded portions to behave exactly like Bash (where dupes will show in that case).\nI think the right solution is not to dedupe along the way, but rather to find an algorithm for globstar that doesn't suffer from this shortcoming.\n. Actually, whatever, just dedupe the patterns that globstar resolves to.\n. The reason is that it's aggressively caching stat results to save syscalls.  Each of those is an object, and with a whole lot of them, it gets considerable.\nIt'd probably be possible to replace the simple object caches with a LRU or something using the https://github.com/isaacs/node-lru-cache module\n. I suspect that this is no longer an issue, as this module has been heavily refactored and slimmed down since then.  Closing for now, but please do pipe up if it's still a problem in the latest release.\n. Expected behavior.\nYou're looking for c/**/f.json, right?  Well, glob does a readdir on a dir like c/w, and gets f.json, w.js as results.  At that point, it doesn't know whether the items returned are directories or files.  And, it doesn't care: c/w/f.json is a match, but if f.json is a dir, then c/w/f.json/f.json would also be a match, and c/w/f.json/a/b/c/d/e/f/g/f.json would be a match as well.  So, it does a readdir on c/w/f.json, which tells it two things: (1) Is f.json a dir? and (2) if it's a dir, what's inside it?  The ENOTDIR tells is that it's not a directory, and it moves on.\nThe fact that it's calling stat at all is a bit odd in this case.  Can you please provide an actual test script in JavaScript, with a real folder structure?\n. In general it seems fine, and won't break anything on the Unix side.  Can you add a test that specifically addresses the problem in #61?\nAlso, I prefer to do package.json changes myself, but I can rebase that out.  You can point your package.json dependency at your github fork while waiting for this to be merged.\n. Landed on f3105a3cfc12d3c6e0a2c931d8cf7f1a6a1ff49a.  Thanks!\n. Maybe someday, but not likely any time soon.\n. I'd accept a PR to add a glob.Stream class that is a readable stream.  But I'd rather not change the glob.Glob class itself.  Just have glob.Stream wrap a glob.Glob object internally, and inherit from stream.Readable.\n. Rather than land this in this module, here's a quick wrapper that anyone can use\njavascript\n// copyright Isaac Z. Schlueter. Public Domain.\nvar glob = require('glob')\nvar Readable = require('stream').Readable\nvar util = require('util')\nutil.inherits(GlobStream, Readable)\nfunction GlobStream (pattern, options) {\n  Readable.call(this, options)\n  var self = this\n  this.glob = glob(pattern, options)\n  this.glob.on('match', function (m) {\n    self.push(m)\n  })\n  this.glob.on('end', function () {\n    self.push(null)\n  })\n  this.glob.on('abort', function () {\n    self.push(null)\n  })\n  this.glob.on('error', function (er) {\n    self.emit('error', er)\n  })\n})\n. Already fixed on https://github.com/isaacs/node-glob/commit/1bf9d36cc8bb3081ed2c2978eb74dbc33bcdedf1 ;)\n. is this still an issue?  Tests seem to be passing, as far as I can tell.\n. Yeah, this isn't a bug.  Just an annoying thing.\n. Sorry for the delay, I've been meaning to get to this, and hoped that I would over the thanksgiving holiday, but it slipped.\nI'll try to land this week.  Thanks for your patience.\n. Don't worry about rebasing on master, I think the patch should land pretty cleanly, and it's relatively simple, so it shouldn't be too hard for me to pull forward if necessary.\n. @stefanpenner et al: See #146. I need a test that passes with the patch, and doesn't pass without the patch.\nNothing can be landed in this library with a valid test.  I'm sorry for being so strict about this, but it's the only thing that makes maintenance of this module even remotely possible.\n. Yes, the test needs to run on Unix (mostly so I don't inadvertently destroy it some day, which I probably will otherwise).\nWindows CI would be awesome, and I'd greatly appreciate getting this module running somewhere.  But it's not a replacement for a test that runs on Unix.\n. Yes, plus one, would merge.  I suggest hijacking or mocking whatever is necessary to make the patch in #146 testable on unix.  That's actually all that's missing from getting to UNC support; appveyor is optional.\n. There isn't a working fix to merge, or else I would have done so by now.  What you're waiting for is not \"this fix to land\", but rather \"a fix to exist\".\nHere's what's needed for a valid solution, to this or any defect in any code I maintain:\n1. Code that fixes the problem.\n2. Tests that fail without the patch, and pass with the patch.\n3. Those tests have to run on Unix systems (mock everything, I don't care, but the test has to actually run)\nWithout (2), it's not clear that the code actually works.  Without (3), the tests will start failing some day and no one will notice.  These aren't weird desert island requirements or unrealistic doom and gloom predictions.  They're just what happens.\nI haven't had time to dig into this particular issue.  @stefanpenner made a courageous attempt, but then seems to have faded away with an ominous last message about a Pandora's Box.\nI understand that this is important to you all.  That importance does not change the fact that I cannot accept changes that are going to reduce test quality.  Maybe if one of you work at a company that benefits from having a glob implementation in JavaScript, and is affected by this Windows-specific issue, you can try to convince your boss to let you spend a few days working on it.\n. Yeah, I think it'd be ok to add a feature to let you pass in a JavaScript sort function (of the kind passed to Array.sort), but the default built in sorting will remain as it currently is.\n. Fixed in 4.1.\nreaddir called with args { '0': 'test', '1': [Function] }\nreaddir called with args { '0': 'test/a', '1': [Function] }\nreaddir called with args { '0': 'test/a/abcdef', '1': [Function] }\nreaddir called with args { '0': 'test/a/abcfed', '1': [Function] }\nreaddir called with args { '0': 'test/a/b', '1': [Function] }\nreaddir called with args { '0': 'test/a/bc', '1': [Function] }\nreaddir called with args { '0': 'test/a/c', '1': [Function] }\nreaddir called with args { '0': 'test/a/cb', '1': [Function] }\nreaddir called with args { '0': 'test/a/symlink', '1': [Function] }\nreaddir called with args { '0': 'test/a/abcdef/g', '1': [Function] }\nreaddir called with args { '0': 'test/a/abcfed/g', '1': [Function] }\nreaddir called with args { '0': 'test/a/b/c', '1': [Function] }\nreaddir called with args { '0': 'test/a/bc/e', '1': [Function] }\nreaddir called with args { '0': 'test/a/c/d', '1': [Function] }\nreaddir called with args { '0': 'test/a/cb/e', '1': [Function] }\nreaddir called with args { '0': 'test/a/symlink/a', '1': [Function] }\nreaddir called with args { '0': 'test/a/c/d/c', '1': [Function] }\nreaddir called with args { '0': 'test/a/symlink/a/b', '1': [Function] }\n. Hm.  Seems like it'd be better to just make this work.\n. Why doesn't broccoli use glob.sync then?  It's a command-line builder-type app, right? (Or am I missing the point of it...?)\nExcept in extremely rare scenarios, async fs I/O will always be strictly slower than sync fs I/O.  If you don't need to be doing many things in parallel, there is no benefit.\nThis is my primary objection to saying \"Just add await!\" or other coro-style approaches to making code \"look sync\".  How it looks is the smallest downside of asynchronous code!  If you need to run lots of stuff in parallel, and responding consistently is worth a bit of a slowdown across the board, and a huge percentage of your time is spent in a waiting sleep mode, then async I/O is great.\nThis describes most web servers, but not most command-line programs, which typically do a small number of things at a time, and care more about just blasting through it all as fast as possible.\n. Oh, ok.  Then yeah, it's just slow.  I've done a lot of combing through it to remove unnecessary syscalls, but haven't profiled the JS itself.  Would love patches to make it faster.\n. Ok!  Initial investigation suggests that the biggest source of the delay is reliance on node's fs.readdir to determine both directory-ness and contents.  Since this uses a file descriptor, it's getting wrapped by graceful-fs which is explicitly designed to trade speed in favor of managed resource utilization.  So that sucks.\nAdditionally, there's some just plain shoddy JavaScript that's accreted over time in the readdir callback handling that V8 is having trouble optimizing.  I think that whole area needs a thorough refactoring to remove a few steps, and especially since glob matching is being used in some very time-sensitive applications, all of the .bind() and .call() usage needs to be eliminated.  Wrapping callbacks to do stuff at the end, tons of anonymous closures being defined inside of methods, it's kind of a giant mess.  I have enlisted the help of The Dark Pony Zalgo to have a single code path that is used for both sync and async behavior.  I thought that I could preserve sanity if His Dark Tendrils were buried deep enough below the API layer.  I was wrong.\nLastly, in the globstar case specifically, both bash 4.3 and the next version of node-glob have to do an lstat on all directories encountered in the crawl, since symlinks to directories should not be crawled.  So, the Node statSync and readdirSync timing benchmark test is not quite an apples-to-apples comparison.  It should probably lstatSync each directory as well as readdiring it.  It's still a LOT faster than the node-glob tests, but falls a bit more behind the bash/zsh test cases, as one would expect.\nI've got the bash43 style globstar behavior implemented properly on a branch now, but it's even slower.  I'd like to refactor and optimize it to get the speed up before merging into master, which will make this much better.\n. On the splitsync branch, I added another 10x to the benchmark script, and got these numbers:\nBash timing: real   3m26.991s\nZsh timing: real    1m56.420s\nNode statSync and readdirSync timing: real  2m0.762s\nNode readdirSync error-catching timing: real    1m52.183s\nNode glob.sync timing: real 3m43.829s\nNode glob async timing:\nFATAL ERROR: CALL_AND_RETRY_2 Allocation failed - process out of memory\nbenchmark.sh: line 70: 52477 Abort trap: 6           node -e '\n  var glob=require(\"../\");\n  glob(\"**/*.txt\", function (er, files) {\n    console.log(files.length)\n  })'\nglob.sync is comparable to Bash 4.3 on a huge dataset, and the master async glob runs out of memory.\nWith the 100000 file set, it's this:\nBash timing: real   0m5.656s\nZsh timing: real    0m3.711s\nNode statSync and readdirSync timing: real  0m3.291s\nNode glob.sync timing: real 0m12.116s\nNode glob async timing: real    0m39.727s\nThe sync approach is about 2.5 times Bash 4.3, 4x zsh and the naive node sync approach.\nNext step is to refactor the async approach similarly, and then it's profile time.\n. Currently, glob.sync is about 1.5 to 2x the time of bash 4.3, and glob is about 4-5x the bash time.  Zsh is a little bit faster, but that's because its globstar still crawls symlinked dirs, so it gets away with saving an extra lstat call.\nCalling this mission accomplished!  Look for massive speed improvements on glob 4.1.\n. @bpasero Even if you do the file actions asynchronously, there is usually a limit to just how async the fs can be, and there is a hard limit to how many threads node will use to perform async fs operations.  (Once upon a time that was 4, but I recall it being increased, maybe there's a cleverer heuristic involved since last I saw that code, which was a few years ago.  It might not be as \"hard\", but there is still definitely a limit.)\nSo, if you are parallelizing more fs ops than node allocates threads, it's going to back up, and be effectively serialized anyway.  (Of course, \"serialized\" with multiple parallel tracks, as each thread finishes what it's doing and then takes on a new job.)\nHowever, all of this is ultimately limited by the file system itself!  Spinning disks can only be in one position, so if you're trying to read 2 files in parallel, the fs will either thrash (making both operations slower than they would've been), or make one operation wait for the other.\nStat and readdir calls are less thrashy and more cacheable by the fs, since they're only dealing with the file link table (at least, on most Unixy systems).  But in fact, if every bit of data is available in the operating system's fs cache, they'll be very fast, and adding the async thread management overhead will be relevant.\n\"Parallelizing\" operations on a single machine (whether that's a single cpu or a single disk) is more like \"multitasking\" than \"teamwork\".  When you parallelize things across a network, of course, it's a whole different story, which is why things like Hadoop are so great for massively big data problems, compared with writing a simpler program for a single machine.  But when you parallelize a bunch of operations that are effectively throttled by a single bit of hardware, as a general rule, you're almost certainly not going to make things faster.\nLots of qualifiers there.  It's highly dependent on a lot of factors, like what specific type of disk is involved, the operating system, the file system type, as well as just whatever else the machine happens to be doing at the time.\nIf you are doing many things in parallel (for example, it's a web server, where you don't want to pause in replying to one user's HTTP request while you read a file for another user), then async is absolutely the way to go.  Node makes this the \"default\" path because it's designed for building network programs, where this usually matters.\nIf you're a web server, then providing users with a consistently fast connection pick-up, and a predictable first-byte time, is all that really matters.  The \"average file read time\" is 100% worthless as a metric, if you lost business because some unlucky user had to wait 2s for a web page to load, and decided to hit the back button.\nBut if you're a cli utility, especially one that doesn't make network requests, then the situation is completely reversed.  The better approach is to avoid thrashing the disk, and since you have exactly one user who is going to wait for every single task to be completed, reducing the average task time is the way to go, so sync isn't just easier, it's also better.\n. > If all you do is just walking through the file system, I would not expect sync to be much slower than async.\nWhat I'm saying is that your expectation is wrong. You should expect sync to be faster than async.  Async is always slower, it just has less of an effect on slowing down other things (servers etc.)\n. Thanks, @joliss \n. I think this is not such a great idea.  But I'd be happy to accept a pull request that made it throw when no cb is provided and sync is not set to true, since I agree that's almost always going to be a mistake.\nYou can also use glob.sync(...), by the way.\n. Yeah, I guess that's getting added after the 'match' event is emitted.\nThis is a bug.  Patch welcome.\n. Works for me in latest releases of 0.8, 0.10, and 0.11.\n```\n$ cat g.js\nvar glob = require('glob')\nglob('**', {mark:true}, function(er, c) {\n  console.error('cb', er, c)\n}).on('match', function(m) {\n  console.error('match', m)\n}).on('end', function(c) {\n  console.error('end', c)\n})\n$ node g.js\nmatch deep/\nmatch g.js\nmatch deep/deep.txt\nmatch deep/deeper/\nmatch deep/deeper/deeper.txt\nmatch deep/deeper/deepest/\nmatch deep/deeper/deepest/deepest.txt\ncb null [ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt',\n  'g.js' ]\nend [ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt',\n  'g.js' ]\n$ find .\n.\n./.g.js.swp\n./deep\n./deep/deep.txt\n./deep/deeper\n./deep/deeper/deeper.txt\n./deep/deeper/deepest\n./deep/deeper/deepest/deepest.txt\n./g.js\n```\nPlease share your standalone script that's behaving incorrectly.\n. Works for me:\n```\n$ find .\n.\n./deep\n./deep/deep.txt\n./deep/deeper\n./deep/deeper/deeper.txt\n./deep/deeper/deepest\n./deep/deeper/deepest/deepest.txt\n./g.js\n$ cat g.js\nvar glob = require('glob');\nvar g = glob.Glob('d*/', {mark: true}, function(err, result) {\n  console.log(result);\n});\ng.on('match', function(filepath) {\n  console.log('match: %s', filepath);\n});\n$ node g.js\nmatch: deep/deep.txt\nmatch: deep/deeper/\nmatch: deep/deeper/deeper.txt\nmatch: deep/deeper/deepest/\nmatch: deep/\nmatch: deep/deeper/deepest/deepest.txt\n[ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\n$ node -v\nv0.8.26\n```\nWhat operating system?\n. Still works for me.  10000 times it works for me.  ??\n```\n$ cat g.js\nvar glob = require('glob');\nvar assert = require('assert');\nvar endEmitted = false;\nvar g = glob.Glob('d*/', {mark: true}, function(err, result) {\n  endEmitted = true;\n  console.log('cb', result);\n});\ng.on('match', function(filepath) {\n  assert(!endEmitted);\n  console.log('match: %s', filepath);\n});\ng.on('end', function(result) {\n  endEmitted = true;\n  console.log('end', result);\n});\n$ for i in $(seq 1 10000); do node g.js >/dev/null || break; done\n$ echo $?\n0\n``\n. Sorry, I'd be happy to fix this, but I need a reproducible standalone test.  Can you reproduce this outside of globule?  What do you get when you run the g.js above?\n. The one with the asserts, I mean.\n. Found it.\n. Ugh, I can reproduce it occasionally in a standalone script, but not in a test that immediately writes the files and then verifies them.\n. I suspect that there's a timing issue at play here.\n. Yep, slowing down the _stat call makes it fail.\n. I will open a new one.  I've got a failing test and a theory about how to fix it.\n. I don't want to add multi-glob functionality, per se, but I do think it's reasonable to add anexclusions` set, as a better way to do negative globs.\n. See: https://github.com/isaacs/node-glob/issues/115#issuecomment-67589715\n. Yes, that is definitely a bug.\n. Works for me.\n```\n$ ls -laF foo\ntotal 8\ndrwxr-xr-x+  3 isaacs  staff  102 Oct 14 14:22 ./\ndrwxrwxrwx+ 15 isaacs  staff  510 Oct 14 14:21 ../\nlrwxr-xr-x   1 isaacs  staff    6 Oct 14 14:22 bar@ -> ../bar\n$ ls -laF bar\ntotal 8\ndrwxr-xr-x+  3 isaacs  staff  102 Oct 14 14:22 ./\ndrwxrwxrwx+ 15 isaacs  staff  510 Oct 14 14:21 ../\nlrwxr-xr-x   1 isaacs  staff    6 Oct 14 14:22 foo@ -> ../foo\n$ ls -laF bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo\nlrwxr-xr-x  1 isaacs  staff  6 Oct 14 14:22 bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo@ -> ../foo\n$ echo $NODE_PATH\n$ export NODE_PATH=$PWD\n$ node -e \"console.log(require('glob').sync('foo/**'))\"\n[ 'foo',\n  'foo/bar',\n  'foo/bar/foo',\n  'foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar' ]\n$ node -e \"require('glob')('foo/**', console.log)\"\nnull [ 'foo',\n  'foo/bar',\n  'foo/bar/foo',\n  'foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo',\n  'foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar' ]\n```\nDo you have a test case?\n. Hm.  So, shell globbing doesn't \"only give you unique files\", nor does it \"not follow symlinks\".\nExample:\n```\n$ tree\n.\n\u251c\u2500\u2500 bar/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 baz -> ../baz/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 foo -> ../foo/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 barfile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 lnsrcfile\n\u251c\u2500\u2500 baz/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bar -> ../bar/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 foo -> ../foo/\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 bazfile\n\u2514\u2500\u2500 foo/\n    \u251c\u2500\u2500 bar -> ../bar/\n    \u251c\u2500\u2500 baz -> ../baz/\n    \u251c\u2500\u2500 dir/\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 a/\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 b/\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 c/\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 d/\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 foolink -> ../../../../../../bar/foo/bar/foo/\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 recurselink -> ../../../../../../\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u251c\u2500\u2500 weirdlink -> ../../../../../../bar/foo/bar/\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 deepfile\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 dirfile\n    \u251c\u2500\u2500 foofile\n    \u2514\u2500\u2500 lnfile -> ../bar/lnsrcfile\n17 directories, 7 files\n$ shopt -s extglob; shopt -s globstar\n$ for i in +(foo|bar|baz)/*/file; do echo $i; done\nbar/barfile\nbar/baz/bazfile\nbar/foo/foofile\nbar/foo/lnfile\nbar/lnsrcfile\nbaz/bar/barfile\nbaz/bar/lnsrcfile\nbaz/bazfile\nbaz/foo/foofile\nbaz/foo/lnfile\nfoo/bar/barfile\nfoo/bar/lnsrcfile\nfoo/baz/bazfile\nfoo/dir/a/b/c/d/deepfile\nfoo/dir/a/b/c/d/foolink/foofile\nfoo/dir/a/b/c/d/foolink/lnfile\nfoo/dir/a/b/c/d/weirdlink/barfile\nfoo/dir/a/b/c/d/weirdlink/lnsrcfile\nfoo/dir/dirfile\nfoo/foofile\nfoo/lnfile\n```\nNote that symbolic links ARE being followed by **, and the \"same\" files DO appear multiple times (eg bar/foo/lnfile, baz/foo/lnfile).\nIt seems, however, that it does not explore symbolic links that reference a path portion of the current path to the symbolic link itself.  So, even though foo/bar/foo/foofile would match, it detects that foo/bar/foo refers to the foo/ part of itself, so it doesn't explore that bit.\nFurthermore, this ** behavior appears to have changed between Bash 4.1 and Bash 4.3!  Probably because it is unwieldy to deal with a gigantic mess of results when there are recursive symbolic links.\nThe crash that you're seeing is happening because there are a large number of recursive symbolic links, rather than a particularly deep set of them, so you're hitting the memory limit before hitting the ECYCLE error from the fs.  Updating to Bash 4.3-style behavior would fix the problem.\n. Your test is interesting, but non-authoritative.  The reference implementation that node-glob targets is bash 4's globstar and extglob behavior.  The example I posted above does show that Bash 4.1 and Bash 4.3 have different behavior, and it seems that Bash 4.3's globstar behavior is superior, so that's what we should target.\nIt doesn't matter what zsh or tab-completion do, ultimately, though this is one example of a use-case where the more \"conservative\" results are much more useful.\n. No, I don't have bash 4.1 installed any longer (upgraded due to shellshock some time ago).\nBut if I re-generate the test fixtures with bash 4.3, I see different results.  So, yeah, we're doing the wrong thing now (but only because \"the right thing\" changed!)\n. Here's the diff in the test fixture results from bash 4.1 (used to generate them originally) and bash 4.3 (which I have now) https://gist.github.com/isaacs/f748618f744f61756f55\n. So, it seems like the behavior can be summed up as: \"While expanding matches for a ** section, do not explore any directories already part of that particular ** expansion\".\nThis, of course, is after consecutive ** segments are collapsed.\n. Landed in 4.0, made MUCH faster in 4.1.\n. Landed, but using the once module instead of juggling event handlers.  Since presumably the glob object is going to be disposed of shortly in the event of an error callback, removing the handler is unnecessary, provided there is a hard guarantee that the cb is not fired again (which once provides).\n. minimatch is more like fnmatch, not an exact corrollary to glob.\nGlob is doing brace expansion, which is a shell-ism, rather than a glob-ism, per se.  On the shell, when you do echo *.{a,b,c} you are literally doing the exact same thing as echo *.a *.b *.c.  Check it out:\n$ node -p process.argv *.{a,b,c}\n[ 'node', '*.a', '*.b', '*.c' ]\nI'd be happy to accept a doc patch that clarifies that brace expansion happens before anything else, just like with the shell.\n. Function declarations are hoisted in JavaScript, and JSLint has kind of a bad attitude.\nNo thanks.\n. Well, it may not be unreasonable, but it is incorrect.\n```\n$ echo {}\n{}\n$ echo {*,}\nLICENSE README.md examples glob.js node_modules package.json test\n```\n. https://github.com/isaacs/node-glob/pull/96\n. I would accept a patch to do something like this.  If it's expensive in terms of performance then it should be optional.\n. https://github.com/isaacs/node-glob/pull/96\n. I bumped the major version for this.\nSeriously, though, people, you have to update your npm versions.  It has been almost a year since ^ support was added, and a few months since it's been the default.  You're getting left behind if you don't upgrade.\nDo this, everywhere:\nnpm install npm -g\n. You'll have to upgrade your version of Node to the latest 0.10 to build this package.\n. Aww, how sweet! Thanks!\n. The issue isn't with Node v0.8.  The issue is with npm 1.2.\nhttps://github.com/joyent/node/pull/7669\n. Fixed by 0414fb0\n. Something in your tree is depending on glob 4.x.  Probably it's doing either a \"glob\":\"*\" or \"glob\":\">= <something>\".  Neither of these are safe or advisable options.\nThe bug isn't in node-glob, the bug is in whatever is depending on it too loosely.\nTry doing npm ls glob in your project after a fresh npm install, and you'll see all the places where glob is getting installed.\n. Here's the culprit:\n```\n[https://github.com/stormpath/stormpath-sdk-node/master]isaacs@urdva:~/dev/js/x/stormpath-sdk-node v0.10.28\n\ud83d\ude3b  npm ls glob\nstormpath@0.1.2 /Users/isaacs/dev/js/x/stormpath-sdk-node\n\u251c\u2500\u252c grunt@0.4.5\n\u2502 \u251c\u2500\u252c findup-sync@0.1.3\n\u2502 \u2502 \u2514\u2500\u2500 glob@3.2.11\n\u2502 \u2514\u2500\u2500 glob@3.1.21\n\u251c\u2500\u252c grunt-cli@0.1.13\n\u2502 \u2514\u2500\u252c findup-sync@0.1.3\n\u2502   \u2514\u2500\u2500 glob@3.2.11\n\u251c\u2500\u252c grunt-contrib-jshint@0.7.2\n\u2502 \u2514\u2500\u252c jshint@2.3.0\n\u2502   \u2514\u2500\u252c cli@0.4.5\n\u2502     \u2514\u2500\u2500 glob@4.0.2\n\u251c\u2500\u252c grunt-contrib-nodeunit@0.2.2\n\u2502 \u2514\u2500\u252c nodeunit@0.8.8\n\u2502   \u2514\u2500\u252c tap@0.4.9\n\u2502     \u2514\u2500\u2500 glob@3.2.11\n\u251c\u2500\u252c grunt-contrib-watch@0.5.3\n\u2502 \u2514\u2500\u252c gaze@0.4.3\n\u2502   \u2514\u2500\u252c globule@0.1.0\n\u2502     \u2514\u2500\u2500 glob@3.1.21\n\u251c\u2500\u252c grunt-mocha-test@0.10.2\n\u2502 \u2514\u2500\u252c mocha@1.18.2\n\u2502   \u2514\u2500\u2500 glob@3.2.3\n\u251c\u2500\u252c istanbul@0.2.10\n\u2502 \u2514\u2500\u252c fileset@0.1.5\n\u2502   \u2514\u2500\u2500 glob@3.2.11\n\u251c\u2500\u252c load-grunt-tasks@0.2.1\n\u2502 \u251c\u2500\u252c findup-sync@0.1.3\n\u2502 \u2502 \u2514\u2500\u2500 glob@3.2.11\n\u2502 \u2514\u2500\u252c globule@0.1.0\n\u2502   \u2514\u2500\u2500 glob@3.1.21\n\u2514\u2500\u252c mocha@1.17.1\n  \u2514\u2500\u2500 glob@3.2.3\n[https://github.com/stormpath/stormpath-sdk-node/master]isaacs@urdva:~/dev/js/x/stormpath-sdk-node v0.10.28\n\ud83d\ude3b  npm ls cli dependencies.glob\nstormpath@0.1.2 /Users/isaacs/dev/js/x/stormpath-sdk-node\n\u2514\u2500\u252c grunt-contrib-jshint@0.7.2\n  \u2514\u2500\u252c jshint@2.3.0\n    \u2514\u2500\u2500 cli@0.4.5\n[https://github.com/stormpath/stormpath-sdk-node/master]isaacs@urdva:~/dev/js/x/stormpath-sdk-node v0.10.28\n\ud83d\ude3b  npm view cli dependencies.glob\n\n= 3.1.4\n```\n\nReported to author: https://github.com/chriso/cli/issues/50\n. In the short-run, you can avoid this by having a dependency at the top level on \"glob\":\"3\" it looks like.\n. What's happened is that you installed both browserify and glob.  Since browserify's glob dep was satisfied by the fact that you already had a glob 3.x there, it didn't install a second copy.  However, when you then installed glob 4.x, that clobbered the glob that browserify was depending on.\nnpm i browserify will fix the situation.\n. @mreinstein YES! this is something I'm sorta working on part-time, whenever I'm slacking from my CEO duties.  It's part of the \"refactor install to not be so dumb\" project.\n. This does seem to be a bug, yes.\n. Wait a minute... how are you passing an array to glob?  This module doesn't support that, last I checked.\n. Yeah... it looks like negation is just broken?  I'm not sure what it would do...\nThis seems to work fine:\n``` javascript\nvar glob = require('./glob');\nglob('!(node_modules)/**', {nonegate:true}, function (err, files) {\n    console.log(files);\n});\n```\n. Thanks, but I'm going to pass on this for now.  It's easy enough to wrap a callback-taking function in a promise, and this is not the best place to be doing that.\n. 03daf204c935fa04e90fb605f4e3c6cde07c2d43 thanks!\n. Landed and pushed. Thanks!\n. Fixed by 5f9bc8391924aa9ecf20814bc1ca431abd5acd74.  Thanks.\n. Bumped minimatch to 1.0.0, and glob to 4.0.5.\n. It always uses \"/\".  Doc patch welcome.\n. Landed on globstar43 branch.  Will be in master soon.  Probably this weekend.\n. already fixed.\n. I like how this approach at an API is more explicit than the weirdness around negated globs today.\nPatch welcome, but it'll have to have lots of tests and some very clear docs.  Note that it'll have to be implemented for both sync and async approaches separately.  (That is, glob.js and sync.js are similar logic, implemented in parallel.)\n. The latest version of graceful-fs is safe to drop in. We should just make\nit a proper dep.\nPatch welcome.\nOn Monday, September 8, 2014, Peter Braden notifications@github.com wrote:\n\nOf course, after looking at the code, graceful-fs is an optional\ndependency...\nWithout knowing any of the context behind this, I assume that graceful-fs\ncan't be seamlessly dropped in (hence the optionalDep).\nIs there any way to get glob to open less files?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/isaacs/node-glob/issues/116#issuecomment-54834611.\n. landed on master\n. Not by default. Set sort:true in the options object. \n. Files are sorted alphabetically.  So, this is \"correct\".\n\nYou could name files with a image-01 instead of image-1, or write your own sorting function.\n. Really?\n```\n$ du -h *\n4.0K    LICENSE\n 12K    README.md\n8.0K    examples\n 20K    glob.js\n500K    oh-my-glob.gif\n4.0K    package.json\n104K    test\n$ du -h package\n8.0K    package/examples\n100K    package/test\n656K    package\n```\n656k is not significant bloat.  How many copies of glob do you have in your project?\n. I don't understand the question.\nWhat is a \"flat file\"?\n. So you mean, you want to know if it has any special characters in the glob pattern?\n. Well, technically speaking, any pattern might expand to 0 files.  But it's not hard to add a function that just returns true or false if the glob has any pattern segments in it.\n. The fact that you say \"one more more\" files is confusing to me.  I'm going to add a hasMagic function since it's pretty easy and would be very useful, and I think it meets your needs, but I'm going to need more detail if not.\nThanks.\n. Ok, great. Use glob.hasMagic on 4.2.\nOn Friday, November 21, 2014, Dieter Oberkofler notifications@github.com\nwrote:\n\nMaybe I best explain it based on my actual use case:\nWe use glob as part of our Gulp based build system and typically there are\ntwo kind of uses.\nEither we process one single file or we process a group of files.\nIn the case that one specific file needs to be processed, we assume that\nthe file must exist and if it does not most likely something changed or is\nwrong (typically the file was renamed, is missing or was misspelled) in the\nbuild environment itself.\nWe would therefore like to identify a glob pattern as:\na) one that can only expand to exactly one file (or none if something is\nwrong)\nb) one that can expand to 0 or many files (if there are any wildcards in\nit)\nIn the case of a and if the glob pattern does not expand to exactly one\nfile, we would simply throw an error and alter the user that something must\nbe wrong.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/isaacs/node-glob/issues/120#issuecomment-63960649.\n. Done on globstar43 branch already.  That'll be merged into master once the perf is a bit better.\n. Sorry, I'm not interested in maintaining two metadata files.\n. Can you please provide a standalone glob test that does not involve gulp?\n. The negation semantics are really odd, actually, and I've thought a lot about ripping them out.  It shouldn't have anything to do with symlinks, though.\n. @impinball Yeah, totally.  It's just weird when it involves ** stuff, and also it still only is limited to whatever non-globby prefix you provide, since this library takes a TON of shortcuts to avoid unnecessary directory walking.\n\nSo, for example, the pattern !b*/c will match anything named c that is not in the directories starting with b.  !b/* will not return anything.  !b*/** will match anything at any depth under any directory other than those that match b*.\nThis is clearly all wrong.\nWhat I think you usually want is more like ** but not anything matching the pattern.\nFor example, if my pattern is !app/* then it should match any file in the cwd, but not anything in the app dir.  But should it match app/x/y?  That isn't matched by app/*, so it seems like perhaps it should be matched by !app/*?  But that means that ! will always imply a massive ** walk, and you might be very surprised for it to go more than one level deep.\nDo you see what I'm getting at?  I'm a bit hesitant to change the negation behavior unless the change is to (a) completely remove it, or (b) first define what would be sensible.\n. If you are interested in making it sensible, please go weigh in at https://gist.github.com/isaacs/fc635c852c64ffabf2fd\nFor the time being, unfortunately, this issue will not be addressed, because any change will make things worse.\n. I'm going to leave in test, though the test fixture is already ignored (because that is generated by the test scripts anyway).\nThe gif is already excluded on the globstar43 branch, which will be merged in as soon as I can get the performance a bit better (or before getting the performance improved, if it ends up taking too long.)\n. This repo hasn't used travis-ci for about a year now, so that link is out of date and irrelevant.\nI'm curious about the two unit tests that fail locally.  I cloned your gist and tested it locally, and there is a bug in it.  You are setting sync:true in your options, but providing a callback.  That's not ever going to work.\n4.1.2 will contain a check for this, to throw a TypeError if you do that.\nWhat system are you running this on?  Do you have Bash 4.3?  Have you regenerated the test cases?\n. 4.1.2 published.\n. If you git reset --hard then it'll reset to the tests generated on my system with Bash 4.3, and it should pass.\nAlso!  I highly recommend getting Bash 4.3 so you can use globstar in your day to day command line globbing :) http://savannah.gnu.org/git/?group=bash\n. @ekweible Can you please gist the entire test output?  I can't begin to debug this without knowing which pattern is failing.  Thanks.\nClosing until further details provided.  Will re-open if root-cause requires any changes.\n. Tests are included on purpose.\n. makes it easier for people to run the tests in strange environments.  But I suppose I could put a small test script that just tells you to download the git repo to run them.\n. Where are you using glob that it is too large?  The tarball is tiny, and not that much tinier with this patch.  Even over cheap internet, you're going to spend almost as much on HTTP headers as you do with this thing.\nIf you had truly limited disk space, or just a hella slow disk, such that the cost of unpacking these files was high, I could maybe see it.  But even then, what are you doing using glob?  It's a bit of a memory hog and really only can be used on a server FS in the first place.\nA few people just told me that they support your right to publish micro packages, but they are grumpy when tests are not included, thus requiring an extra step to run them.\n. Yeah, re-enabled it last night :)\n. Thanks!  Added a test, but yes, this is a bug, not an intentional API change.\n. Symlinked directories are no longer explored.  This is the same behavior as Bash 4.3.  If you find a case where it doesn't behave the same as Bash 4.3, then please let me know.  Otherwise yes, this is by design.  See the discussion in https://github.com/isaacs/node-glob/issues/86\n. If you rely on this behavior you should pin your glob dependency version at 3.x.  This change was introduced in 4.0.\n. Indeed, you've found a discrepancy between bash 4.3 and node-glob!  This is a bug!  Posted as https://github.com/isaacs/node-glob/issues/135\nThe solution is not \"follow symlinked dirs\" as suggested in the OP here.  The correct behavior is \"stop following symlinked dirs as part of a globstar match, but still resolve their contents against subsequent parts of pattern\".\n. @clintwood Yes, in the latest release you can do {follow: true} in the options, and it'll happily go along until it gets an ELOOP error from the fs.\n. @nathanjessup @seanmwalker Can you try pulling the GH-135 branch and see if that fixes things for you?  You can do npm i isaacs/node-glob#GH-135 to install it in your project directly from GitHub.\n. Sweet.  It is closer to bash 4.3 behavior on this branch, and doesn't break any other tests, so I'm gonna go ahead and merge.\n. Landed and published as 4.1.6.\n. @seanmwalker \nThe intent wiht node-glob v4 is to match the behavior of Bash 4.3.  This is a breaking change, hence the bumped major version number.\nSo, with this structure:\n~/my-module\n~/my-module/lib\n~/my-module/lib/aSymlinkedFolder -> ~/symDir\n~/my-module/lib/localFolder\n~/my-module/lib/localFolder/aScriptFile.js\n~/my-module/package.json\n~/my-module/server.js\n~/symDir\n~/symDir/bar\n~/symDir/bar/anotherThing.js\n~/symDir/foo\n~/symDir/foo/deeper\n~/symDir/foo/deeper/more.js\n~/symDir/foo/something.js\nBash 4.3 returns this:\n```\n$ echo $BASH_VERSION\n4.3.30(6)-release\n$ for i in ~/my-module/lib/*/; do echo $i; done\n/Users/isaacs/my-module/lib/aSymlinkedFolder\n/Users/isaacs/my-module/lib/aSymlinkedFolder/bar\n/Users/isaacs/my-module/lib/aSymlinkedFolder/foo\n/Users/isaacs/my-module/lib/localFolder\n/Users/isaacs/my-module/lib/localFolder/aScriptFile.js\n```\nBash 3.2 does this:\n```\n$ echo $BASH_VERSION\n3.2.48(1)-release\n$ for i in ~/my-module/lib/*/; do echo $i; done\n/Users/isaacs/my-module/lib/aSymlinkedFolder/bar\n/Users/isaacs/my-module/lib/aSymlinkedFolder/foo\n/Users/isaacs/my-module/lib/localFolder/aScriptFile.js\n```\nNode-glob does this:\n$ node -p 'require(\"glob\").sync(process.env.HOME + \"/my-module/lib/**/*\").join(\"\\n\")'\n/Users/isaacs/my-module/lib/aSymlinkedFolder\n/Users/isaacs/my-module/lib/aSymlinkedFolder/bar\n/Users/isaacs/my-module/lib/aSymlinkedFolder/foo\n/Users/isaacs/my-module/lib/localFolder\n/Users/isaacs/my-module/lib/localFolder/aScriptFile.js\nwhich is identical to Bash 4.3, working as designed.\n. I am open to a \"Follow all symlinks forever\" option.  Maybe follow:true?  Please open a new issue requesting the feature, and if I don't get to it, maybe someone else will.  The patch to the code would be just a few lines in glob.js and sync.js to skip over the lstat stuff, but it'll need plenty of tests.\n. I don't usually delete branches. You can ignore them.\n. This project's goal is to match the behavior of Bash 4.3.  Any changes that bring it closer to the matching semantics of Bash 4.3 are considered bugfixes and bump the patch version.\nOpt-in features that provide alternative behavior are considered additive changes, and bump the minor version.  Minor versions may also include bugfixes.\nRemoval of opt-in features, or changes to the API surface, are considered breaking changes, and bump the major version.  Major versions may also include bugfixes and additive changes.\nIf you are a depending on a bug, then a bugfix will break your system.\nI'm happy to include a changelog, but I'd rather use a tool to generate it manually, as this is quite tedious.  Do you have any recommendations?\n. From #135 \n\nI am open to a \"Follow all symlinks forever\" option. Maybe follow:true? Please open a new issue requesting the feature, and if I don't get to it, maybe someone else will. The patch to the code would be just a few lines in glob.js and sync.js to skip over the lstat stuff, but it'll need plenty of tests.\n. Patch welcome.  Make sure to add tests for both sync and async behavior.  The option should be realpath:true (to better match stat:true behavior).\n. Make sure to take advantage of the cache option to fs.realpath, so that it can avoid statting the same paths multiple times.\n. I see, so gulp is responding to match events rather than the list of all results which is sorted at the end.\n\nGlob no longer uses graceful-fs, so that would be why the change happened.\n. @contra @heikki I'm sorry to be the bearer of bad news.\nIt turns out that sorting the readdir results isn't actually enough of a fix, and in fact, it can't be reliably fixed in the general case without some truly awful things.\nConsider this:\na\n\u251c\u2500\u2500 b/\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 z/\n\u2514\u2500\u2500 c/\n    \u2514\u2500\u2500 z/\nIf you glob for a/*/z then it does the first readdir on the a/ dir.  Some platforms this returns ['b','c'] and others, ['c','b'].  So, we sort it.\nThen, for each of those two dirs, in parallel, it does a readdir to see if there's a z inside.  They'll both hit the thread pool at effectively the same time, just a few ns off.  But sometimes, readdir('a/c') will return before readdir('a/b'), so even though we sort every readdir, we still get a/c/z before a/b/z.\nTo truly fix this, we'd have to somehow sort the readdir responses and also sort the return processing from each child branch to manage the order that they return in.  That's way beyond my threshold for complexity.  A simpler approach would be to serialize the processing of each child dir, but then we'll be leaving a lot of performance on the table (like, 4x in some cases).\nWith that in mind, I'm going to revert this \"fix\", because it adds complexity and CPU cycles for no benefit.\nYou'll just have to handle out-of-order results.  They are sorted in the final tally, though, so you can either have them sooner (and maybe out of order), or all at once (and sorted).  Trade-off appropriately for your use case, I guess.\n. Thanks!\n. This will be fixed soon. It's a regression in minimatch. Sorry for the hassle. \n. Fixed in Glob 4.3.1\n. @StoneCypher The basic for most modules is npm install first to install deps, and then npm test to run tests.  If you find that is too much typing, then npm i and npm t also work.\nIn this case, it's because of a change in a dependency of a dependency, so tracking down the culprit can be a bit tricky and require human brain power.\n. Needs a test that fails without this patch, and passes with this patch.\n. Awesome, thanks.\nMy concern is that it's only running the test on Windows, and since most of the development (and ci) is running on unix, this won't catch it if I later break this functionality.  But now, since the tests pass on your windows system, at least I believe that it works ;)\nA better approach might be to mock out the parts of the system so that the functionality can be tested on a Unix system as well.  The general pattern would be something like:\n``` javascript\n// pretend to be windows\nprocess.platform = 'win32'\n// load glob before we muck around with fs's guts\nvar glob = require('../')\n// mock out whatever we need to\nvar originalStat = fs.stat\nfs.stat = function (path, cb) {\n  // do whatever we want, based on the path\n}\nvar originalReaddir = fs.readdir\nfs.readdir = function (path, cb) {\n  // whatever\n}\ntest('wildcards in unc path', function (t) {\n  glob('\\\\whatever\\*', function (er, results) {\n    // make sure this is what we expect\n    t.end()\n  })\n})\n``\n. It looks like this is confusingoptions.realpathandoptions.follow`.\noptions.realpath should make it return the realpath rather than the symlink.  But, it should not change the symlink-following behavior.\noptions.follow should make it follow symlinks until it hits ELOOP, like glob 3.x did.  But it should not cause it to realpath the results.\nThese should be two separate patches, each with separate tests and docs.\n. This should be a separate utility module. It is not glob's place to change the EE semantics. \n. @vegetableman The tests are thorough, and it looks like you've got the API pretty much perfect and working.  Good job!\nHowever, there's a lot of stuff in this patch that is not relevant to the change.  I started commenting on it, but gave up after a while.\n1. Single quotes have been changed to double.  Including in words like isn't in comments, even.  Don't do that.  This project uses single-quotes exclusively for strings, as of 82b8568.\n2. The if/else formatting has been changed in many places.  There are two ways that this project does if blocks.  If it is a single-line, it should not use braces.  If it is a multi-line, it should use braces of the form of } else { all on one line.\n3. Spacing around conditionals and function calls.  There should be spaces between the if and the opening ( of the conditional.  Function definitions should have a space between the name and the opening (.\n4. Many unnecessary setImmediate calls are added, I'm not sure why.  They aren't relevant to this feature.  If you are finding cases with strange timing errors, please provide example code and post a new issue about that.\nThese things make it much harder than necessary to review the change.\nIn general, a commit for a feature should be as small as possible, and no smaller; it should do exactly the feature that is being added, and nothing else; it should match the style of the surrounding code so well that no one can tell that the original author didn't write it themselves.\n. Oh, also, semicolons added to line endings in many places.\n. Note: Travis error is spurious, fixed on aaffe249119c4640ed71e186d40516aa8e7e2d4e.\n\nIs it supposed to behave differently?. right now, fetching foo/** and foo/**/**/** return the same number of results.\n\nNo, it's supposed to behave the same, but the issue is that you're doing special treatment for things that end in /**, and stripping it off.  Why not .replace(/(\\/\\*\\*)+$/, '') instead, to strip off all trailing /** segments?\n. Just another thought, if you have this structure:\na\n\u251c\u2500\u2500 b/\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 bc/\n\u2514\u2500\u2500 c/\n    \u2514\u2500\u2500 bc/\nAnd you glob for a/**/b* with an ignore of a/b.\nWithout any ignore, you get three matches:\n```\n\ng.sync(\"a/*/b\")\n[ 'a/b', 'a/b/bc', 'a/c/bc' ]\n```\n\nBut with it, I'd think that only the explicit a/b match should be ignored.  Instead, I get:\n```\n\ng.sync(\"a/*/b\",{ignore: [\"a/b\"]})\n[ 'a/c/bc' ]\n```\n\nThat seems like a bug to me.  Since there are no magic chars in the ignore (eg, it's not ignoring a/b/** or a/b/* then only the explicit a/b match should be omitted.\n. @vegetableman I pulled in 4c71eaebe0e09e69d59d5a95bc9c58c882e0fdec\n```\n\ng.sync('a//b*')\n[ 'a/b', 'a/b/bc', 'a/c/bc' ]\ng.sync('a//b*', {ignore:'a/b'})\n[ 'a/c/bc' ]   <--- Expect: [ 'a/b/bc', 'a/c/bc' ]\n.\n$ git lg -n5\n*   ddf2c1c vegetableman (HEAD, vegetableman/fix-ignore-branch) Merge remote-tracking branch 'origin/master' into fix-ignore-branch (6 seconds ago)\n|\\\n| * aaffe24 isaacs (origin/master, master) make readdir-order test deterministic (48 minutes ago)\n* | 4c71eae vegetableman New: Added ignore option (fixes #115) (7 hours ago)\n|/\n* 82b8568 isaacs Settle on single quotes (4 days ago)\n* 941d53c isaacs (tag: v4.3.2, vegetableman/master) v4.3.2 (3 weeks ago)\n```\n. Still slightly incorrect.\n\n```\n\ng.sync('a//b')\n[ 'a/b', 'a/b/bc', 'a/c/bc' ]\ng.sync('a/b/')\n[ 'a/b/bc' ]\ng.sync('a//b', {ignore:'a/b/'})\n[ 'a/c/bc' ]\n```\n\nIf you're ignoring a/b/*, then that should only exclude files that are matched by a/b/*.  Since a/b isn't matched by a/b/*, it should not be excluded.\nAlso:\n```\n\ng.sync('a//b*', {ignore:'a/b/**'})\n[]\n```\n\nI think all the \"ends with star\" or \"ends with globstar\" bits need to be ripped out.  It's a premature optimization.\n. The principle has to be this:\nThe result of glob(pattern, {ignore:set}) is equal to to the complete subset of glob(pattern) not found in the union of the glob expansions of every pattern in the ignore set.\n. Sorry, I was unclear.  I'm not saying that the optimization is not a requirement for release of this feature.\nI'm saying it's premature in advance of correct behavior.\nThe first step should be to implement the contract correctly, and provide a mountain of tests for every conceivable edge case. Then add optimizations, each time also adding more tests to guarantee that the optimization's new edge cases don't break the contracts.\nI'll review again tomorrow and see if I can poke any new holes in it ;)\n. @vegetableman Thanks for your patience on this, btw.  I know it's frustrating when you make a contribution and the author puts you through the ringer, but since this module is used by many high-profile fs libs, it's important to be really careful about anything that can introduce surprising edge cases.  In the worst case, they end up depending on those bugs, and then when we fix them, it causes problems.\n. I don't think \"negative ignores\" is a good idea.  Maybe we should just throw in that case.  If you want something to not be ignored, then put it in the pattern.  It opens the door for folks to do crazy stuff like glob('**', {ignore:['!thing-i-want', '!other-thing-i-want']}) so now we're into double-negative territory.  If that's a worthwhile use-case, then let's just add multi-glob support with some sensible API surface.\nAdded one minor comment, will review in more detail later.\n. Let's discuss multi-glob and streaming in other issues, plz.\n. @vegetableman Getting closer, but logic's still not quite right.\n```\n\ng.sync('test/a/c/')\n[ 'test/a/c',\n  'test/a/c/d',\n  'test/a/c/d/c',\n  'test/a/c/d/c/b' ]\ng.sync('test/a/c/*')\n[ 'test/a/c/d' ]\ng.sync('test/a/c/', {ignore:'test/a/c/*'})\n[]\n```\n\nIn this case, it should only ignore patterns that would be matched by test/a/c/*, that is, test/a/c/d.\nHowever, as you can see, it's failing to even explore the child directories in test/a/c, because of the star handling logic.  The expected value here would be:\n```\n\ng.sync('test/a/c/**').filter(function(p) { return p !== 'test/a/c/d' })\n[ 'test/a/c',\n  'test/a/c/d/c',\n  'test/a/c/d/c/b' ]\n```\n. Ok!  Landed this on master.\n\n@vegetableman I had a few other suggestions, which were mostly pretty minor, and I went ahead and just made the changes myself.  Since we've gone back and forth a bunch on this, and you seemed to be getting something out of the process, I want to share the reasoning behind both:\n1. The two tests were merged into a single test that just lists cases and has less repeated code.  This makes it a lot easier to add new tests, and reduces the likelihood that one day we'll add a new ignore test, and forget to update the sync test as well, etc.\n2. I split up the isIgnored function into isIgnored and childrenIgnored, in order to remove the boolean argument.  In general, a boolean argument is often an indication that you probably are putting two different functions in the same place, and it'd be better to just have them go ahead and be two separate functions.\n3. I de-inlined the argument to ignore.map(), since it doesn't actually need access to the closure state.\nWill release with a bumped minor later today.  Might try to get a few other PRs in there as well.\n. Yeah, I'm going to deprecate comments and negation in the next major release, coming up soon.\n. [ is a magic char in globs, just like regexps.  It'd be looking for:\nC:\\Build\\7D - refonte\\Myproject\\\nC:\\Build\\7e - refonte\\Myproject\\\nC:\\Build\\7v - refonte\\Myproject\\\nEscape the [ with a \\ char, like \"C:\\\\Build\\\\7\\\\[Dev\\\\] - refonte\\\\\\Myproject\\\\\" in js.\n. *.(xxx|yyy) isn't a valid glob pattern.  (xxx|yyy) is a regexp, which is equivalent to the @(xxx|yyy) glob pattern.\n. You'd want to do *.@(xxx|yyy)\n. Compare to Bash 4.3\n```\n$ echo *.@(xxx|yyy)\nfoo.xxx foo.yyy\n$ echo *.(xxx|yyy)\nbash: syntax error near unexpected token `('\n$ node -p \"require('../glob').sync('*.(xxx|yyy)')\"\n[]\n$ node -p \"require('../glob').sync('*.@(xxx|yyy)')\"\n[ 'foo.xxx', 'foo.yyy' ]\n```\n. Try this:\njavascript\nvar Glob = require('glob').Glob\nvar g = new Glob(somePattern, { stat: true })\ng.on('stat', function (file, stat) {\n  // do your stuff here\n})\n. That definitely looks like a bug to me.  It should never match a file with a trailing /.\n. Thanks for getting this started!\nBefore this can be accepted, though, there are two things that need to be done.\nFirst, it needs a test added (something that fails before the patch, and passes with the patch).  You can either modify an existing test to add the new case, or add a new one.   (Note that if you do add a new test, you'll have to run npm run test-regen on a Mac or Linux box to re-generate the bash comparison test cases.)\nSecond, I'm pretty sure that all of these glob.sync errors are also errors in the async case.  If you look through the code, you'll see that they follow one another pretty closely.  So, each of these changes in the sync flow have to have the corresponding change made in the async flow.\nLet me know if you are/aren't interested in doing these bits, or if you need any help with them.  Eventually, I'm sure I or someone else will get to it if you don't find the time, but it might take a bit longer to get to.\n. Fixed by 0b729c83f15c3d78f5235f893c1ed912e6386eb7.  Thanks!\n. Well, as you say, glob is working fine.\nI am not the maintainer of Grunt, and have no idea exactly what it's doing with glob internally.  node-glob-whatev is over 2 years old, and LOTS of bugs have been fixed since then, both on Windows and Unix.\nI'd try posting the bug over on grunt's issue tracker.  If it turns out glob is doing the wrong thing, then we can take a look at it.\n. Just end the pattern in a /.  Example:\nglob('**/', function (er, dirs) {\n  if (er) throw er // or handle or whatever\n  console.log('all dirs:', dirs)\n})\nglob('*/', function (er, dirs) {\n  if (er) throw er // or handle or whatever\n  console.log('first-level dirs:', dirs)\n})\n. Pass an ignore: ... option in. \n. Try this:\njavascript\nglob('**', { ignore: [ 'index.html', 'js/main.js' ], nodir: true }, console.log)\nNegative extglob patterns like !(foo) cannot contain slashes.  So, another approach might be to do something like one of these, depending on how many other files are in there that youer' trying to exclude.\n``` javascript\n\nglob.sync('!(*.html)/!(main.js)', { nonegate: true })\n[ 'js/lib.js' ]\nglob.sync('js/!(main.js)', { nonegate: true })\n[ 'js/lib.js' ]\nglob.sync('js/!(main.js)')\n[ 'js/lib.js' ]\n```\n\n(Note that the nonegate is required for now to interpret the first part as a negative extglob section rather than a fully negated pattern.  The next major release will deprecate using negated patterns, in favor of using ignores instead.)\n. @iLanbiala yes it does. \n. So, lemme make sure I get this right.  You're saying that the test case in the original post here should return an empty array, and as far as I can tell, it does:\n```\n$ tree fixtures/\nfixtures/\n\u251c\u2500\u2500 .swag\n\u2514\u2500\u2500 test.coffee\n0 directories, 2 files\n$ node -e 'require(\"./glob.js\")(\"./fixtures/swag\", { ignore: \"./fixtures/*\", dot: true }, console.log)'\nnull []\n```\nIs there a simple case you can provide where that doesn't work as expected?\n. Aha!  This is two bugs, then!\nThe gstarmatcher thing is broken in this case, also:\n$ node -e 'require(\"./glob.js\")(\"./fixtures/.*\", { ignore: \"./fixtures/**\" }, console.log)'\nnull []\nIn that case, I'd expect it to only be ignoring things matched by ./fixtures/**, ie ./fixtures/test.coffee.\nIt seems reasonable to me that the options provided to the top-level matching should also be passed to the ignore matcher, so this patch gets a tentative +1 from me, once I get a chance to review in a bit more detail.\nRegarding the other issue, I'm not sure the best approach... dropping the optimization for ** in an ignore seems like it's going to be problematic, since it means we have to potentially walk a huge directory tree for no reason.  On the other hand, detecting the case where this might be a problem (when dot isn't set and the matching pattern contains some explicit dot-portion which falls somewhere within the globstar section) is potentially tricky.  (Or maybe what I just wrote in the previous sentence is an adequate heuristic and we can go with that?)\nWill think on this a little bit and set a reminder to take a look at this again very soon.\n. Can you try with the patch in #227 and see if that is less surprising?\n. I'll upgrade the error message to provide clearer instructions here.\n. Spaces are a valid char to have in a filename, so no, that would mean a different thing.\nIf you're suggesting that we auto-trim the braced sections, that would be a breaking change and a departure from Bash behavior, so that's not going to happen.\n. What version of glob are you using?  When I set up a test to raise EACCES, it just acts as if the files aren't there, because the stats and readdirs fail.\n. What is g.continue()?  Are you sure you're using this module, and not something else?\n. Yeah, it should probably be doing an lstat to figure out existence, and then just try to readdir to see if it's a directory if it shows up as either a dir or symlink.\nGood find!  This is indeed a bug.\n. I suspect that this is causing isaacs/rimraf#65 and ember-cli/ember-cli#3413.\n. Yes, this was on purpose.\nrimraf version 2.3.0 depends on glob@^4.4.1, which has a bug that is not present in glob@4.4.2.\nBecause rimraf is so widely used, this caused a major problem for many users.\n. Discussion in https://github.com/isaacs/node-glob/pull/130\nIf you want to run tests and benchmarks, check out the git repo.\n. I would be open to a change to support back-slashes on windows machines.  Probably the best solution would be to, on windows, replace all back-slashes with forward-slashes, and then swap back to back-slashes in the result.\nPart of the blocker to doing stuff for windows is that I don't have a windows environment for CI tests, and it's quite tedious to run tests in Windows since I develop in a unix environment.  Do you have any tips on this?\n. No, I mean, at the very start, we replace \\ with /, so that the logic all works as it is.  Then, before emitting a match event or calling the cb with the results, we swap back to \\ so that you get paths that match the system.  (Of course, this is a bit complicated, because UNC paths in windows have to remain with / chars.)\nSuch a change would have to come with tests, and I'd want to run those tests regularly to make sure they don't break.\n. Looks like this is a regression in the cwd handling.  @nikku, I can't reproduce your test case without setting a cwd option, and only in sync mode, is that what you're seeing as well?\n```\n$ tree test\ntest\n\u2514\u2500\u2500 posts/\n    \u251c\u2500\u2500 folder/\n    \u251c\u2500\u2500 a.md\n    \u251c\u2500\u2500 b.md\n    \u2514\u2500\u2500 c.md\n2 directories, 3 files\n$ cd test\n$ node -e 'require(\"glob\")(\"*/\", {nodir:true}, console.log)'\nnull [ 'posts/a.md', 'posts/b.md', 'posts/c.md' ]\n$ node -p 'require(\"glob\").sync(\"*/\", {nodir:true})'\n[ 'posts/a.md', 'posts/b.md', 'posts/c.md' ]\n$ cd ..\n$ node -e 'require(\"glob\")(\"*/\", {cwd:\"test\",nodir:true}, console.log)'\nnull [ 'posts/a.md', 'posts/b.md', 'posts/c.md' ]\n$ node -p 'require(\"glob\").sync(\"*/\", {cwd:\"test\",nodir:true})'\n[ 'posts',\n  'posts/a.md',\n  'posts/b.md',\n  'posts/c.md',\n  'posts/folder' ]\n```\nWill investigate and publish a 4.5.1 and 5.0.1 with the fix.\n. Same with non-globstar as well:\n```\n$ cd test\n$ node -e 'require(\"glob\")(\"/\", {nodir:true}, console.log)'\nnull [ 'posts/a.md', 'posts/b.md', 'posts/c.md' ]\n$ node -p 'require(\"glob\").sync(\"/\", {nodir:true})'\n[ 'posts/a.md', 'posts/b.md', 'posts/c.md' ]\n$ cd ..\n$ node -e 'require(\"glob\")(\"/\", {cwd:\"test\",nodir:true}, console.log)'\nnull [ 'posts/a.md', 'posts/b.md', 'posts/c.md' ]\n$ node -p 'require(\"glob\").sync(\"/\", {cwd:\"test\",nodir:true})'\n[ 'posts/a.md', 'posts/b.md', 'posts/c.md', 'posts/folder' ]\n```\n. No problem at all, @nikku.  Thanks for confirming.\nFixed on 4.5.1 and 5.0.1.\n. @dzire187 Can you clarify exactly what you mean by \"this issue\"?  Are you using exactly the same pattern and folder structure as presented in the original post, or do you have a different test case that is failing in a similar way? \n. You want minimatch, not this module. \n. Good patch, good test.  Thanks!  <3\n. Use the \"ignore\" feature.\nglob('**/*.js', { ignore: '{c,d}/**' }, cb)\n. The issue here is that you can't put slashes inside of extglob patterns.  They can only refer to path portions.\n. Yep, that's a bug.  Good find!\n. updated travis to match my other projects.\n. Doc patch welcome.\nThe match event is the specific thing that matched, as matches are found.  It is not deduplicated in the normal case, and is not yet resolved to a realpath.  If we had to move the fs.realpath call up earlier in the process, then this would require some inconvenient refactoring.\n. Landed on master, thanks!\n. Fixed already by another PR.\n. Landed on master.  Thanks!\n. landed, thanks!\n. This is tricky.\nThe idea for ignores is \"exclude all potential matches which would be returned by a search for any of the ignore patterns\".  It's not \"exclude all potential matches which refer to files that would be found by any of the ignore patterns\".\nSo, for example, /a/b/c doesn't return a/b/c as a match, even if that file exists.\n```\n\nmatches = glob.sync('tmp/x/y/z', { cwd: '/' })\n[ 'tmp/x/y/z' ]\nignore = glob.sync('/tmp/x/y/z', { cwd: '/' })\n[ '/tmp/x/y/z' ]\nrequire('array-intersection')(matches, ignore)\n[]\n```\n\nIf we tell it to give us the realpath value, then it'll do the right thing:\n```\n\nreal = glob.sync('tmp/x/y/z', { cwd: '/', ignore: '/private/tmp/x/y/z', realpath: true })\n[]\n```\n\nThat's because the real option makes it so that you only get absolute paths.\nIn order to satisfy the test in #190, we'd have to add a path.resolve and double-check any non-absolute results.  And I'm not sure it's really the ideal semantics, but it's worth discussing the trade-offs.  At least, it's a breaking change.\nRegarding feross/standard#116, it's worth noting that glob('**', { ignore: gitignoreLines }) is not quite what an ignore file does, anyway.  The patterns and the file names all need to be mounted on the directory where the ignore file lives.  You could check out https://github.com/npm/fstream-ignore if you want to use the same file selection logic that npm uses for ignore files in packages.\n. In JavaScript, you must always double-up your back-slashes because backslash is the escape character.  So, for example, a\\nx is the string {0x61 0x0a 0x78} (a, LF, x), but 'a\\\\nx is the string {0x61 0x5c 0x6e 0x78} (a, slash, n, x).\nGlob has some difficulties with UNC paths.  I'm guessing this is a duplicate of #74.\n. This is pretty close!\nI inadvertently optimized away your minimatch change, but then I fixed it on 2.0.7.\nI am still running into a bit of a weird issue with the test, because the path-is-absolute module is rather insistent on using process.platform, and it's also used throughout the codebase a bit.  I was able to get this specific test to work, but only because isAbsolute('/baz') is the same on Windows and Posix.\nI think the right approach here, though it's more lines changed, is to pass the platform as an option to Glob, and then load all the appropriate separator/absolute/etc stuff onto the glob object, so it never has to look at process.platform or path.sep or whatever.\nI'm thinking something like this in the setopts function in common.js:\njavascript\nself.platform = opts.platform || process.platform\nself.isAbsolute = isAbsolute[self.platform] || isAbsolute;\nself.resolve = path[self.platform].resolve || path.resolve;\nself.sep = path[self.platform].sep || path.sep;\nAnd then, throughout glob.js and sync.js, make sure to always call the methods off of this rather than path.<whatever>() or process.platform.\nThis also means that, if at some point we need to change just one of these fields, or use AOP to debug those function calls, we can either make those fields configurable, or instantiate an object and just change the relevant bits.\nOf course, this can lead to glob doing something weird in some cases, but it'd make it so that we can test other windows irregularities in the future more easily, with a lot less module cache tinkering.\nWhat do you think?\n. I'm totally ok with involved changes that improve testability, windows support, and make the code easier to follow (including fewer hacky workarounds in tests).\nOf course, bigger PR size tends to make for more back and forth in the review process, but I think we're pretty aligned on what needs to happen for this.\n. UGGHHHH that's right.\nI'd say just skip that test in node <= 0.10.  The code should still work fine, and since this is really just a matter of string juggling stuff, it should be fine to run the tests in only later versions.\n. I'd throw something like this in there:\n``` javascript\nvar skip = false\nif (/^v0.(10|[0-9])./.test(process.version)) {\n  skip = 'Does not work on Node < 0.12'\n}\ntest('some test name', { skip: skip }, function (t) { ...\n```\n. If you wanna just leave the tests failing in 0.10, that's fine, too.  I can work it out when I merge it in.  If it's passing in 0.12 and io.js, then I can take it from there :)\n. Ok, just reviewed.  The test looks perfect, and nothing in the code jumps out at me as problematic.\nIf you think this is ready to go, I can merge and release this weekend or early next week.\n. It looks like the issue is that the WinPath stuff in the setopts function in common.js is messing with root and path in a weird way, such that glob(process.cwd()) can't return anything, because it ends up having a root setting of c: and a pattern of /path/to/cwd.\nThe mocking and testing stuff looks pretty good.  I think it's the right approach.\nOn master right now, all the tests pass on Windows.  I'd recommend rebasing, and then applying the changes one by one and making sure that tests pass at each commit.\n. True story: I saw the title of the email and for a second I was scared this issue was a C&D from Williams St for copyright violation.\n. (or I guess it'd be Frederator? I'm not sure who owns AT.)\n. @mik01aj You should use ignore: ['**/*-integration-test.js'].  As you've written it, it'll only ignore *-integration-test.js files that are not in a sub-directory.\n. Patch welcome for this.  Probably just need to find the bits where match is emitted and call isIgnored like @mlmorg is doing in the workaround.  I'll get to it soon-ish if no one else does.  (Note that patches require a test!)\n. I've noticed that with this module, and a few others, about half the time I say \"patch welcome\" I end up just writing it later that afternoon...\n. Thanks for the report!  fixed on 5.0.7\n. Landed #222 instead, thanks.\n. I don't see the error you're describing.  How are you getting this?\n. That's totally fine in ECMAScript strict mode.  Function expressions may be in conditionals, just not function declarations.\nFor example, this would throw:\n```\n'use strict'\nif (true) {\n  function foo() { return 1 }\n}\n```\nBut this is totally fine:\n```\n'use strict'\nif (true) {\n  var foo = function foo() { return 1 }\n}\n```\n. You are getting confused about the difference between \"function declaration\" and \"function expression\".\nA function used as a callback like fs.readdir(dir, function (er, entries) { ... }) is not a function declaration.  It is a function expression.\nFurthermore, the issue in V8's strict mode where it says \"functions can only be declared at top level or immediately within another function\", is in fact not compliant with the ES6 specification.  The actual rule is that function declarations inside of blocks in strict mode are local to the block.  Io.js and future versions of Node have newer versions of V8 which observe the ES6 specification in this regard.  Observe: https://gist.github.com/isaacs/ea2b667d7336b64843e1\nNo, I will not be changing node glob.  It functions properly in strict mode, both in old (incorrect) versions of V8 as well as new (correct) versions of V8.  The error you cite is not applicable in either case, because these are function expressions, not function declarations.\n. @jvoccia Right, but L:/05**/*.dwg ought to match the same things as L:/05*/*.dwg.  I gather that's the bug.\n. @jmorrisIII What's the L: drive in this case?  Network share or something?  Does it work in C:?\n. You're providing a callback to the sync glob function. That's not allowed. The error message tells you where to fix it in your code. \n. Yeah, I wonder if there are any other cases where ENOTSUP might be raised by readdir other than \"this is a regular file\".\nOne approach might be to stat the file when we get an ENOTSUP just to make sure it is a real file that exists?\n. Meh. Adding stat is a pita.  Just gonna treat ENOTSUP the same as ENOTDIR.  It already was shown on a previous readdir call, so it's probably there.\n. I'd rather not.\nMost promise libs have easy shorthands for promise-ifying a callback-taking function.  I'd rather let node-glob focus on globbing, and stick to the simplest possible API pattern for asynchrony: a function.\n. The ignore option is a glob pattern string.  To replicate the RegExp you're providing, it'd be \"*wfl.d.ts\"\ndoc patch welcome.\n. What version of glob are you using?  There was a very recent change to how ENOTSUP is handled.\n. Weird... I just added a test that exercises that bit of the code, and it works fine.\nCan you please provide a full reproducible test case, and the exact error you see when running it?\n. That's strange.  Getting an ENOTSUP on a readdir call should be exactly the same as getting ENOTDIR.\nAre you quite sure that it's glob@5.0.13 that's reporting this?  Can you run npm ls glob to see if there are any other versions in use?\n. Ohhh... are you using glob.sync or glob?\n. Oh, sorry, I'm dumb, apparently.\n* c47d451 isaacs (HEAD -> master, tag: v5.0.14, origin/master) v5.0.14 (12 seconds ago)\n* 821fac8 isaacs Handle ENOTSUP for sync glob as well as async (4 minutes ago)\n* 9625618 isaacs Test for when readdir raises ENOTSUP (25 hours ago)\n* 0a2b519 isaacs Generate fixtures more effectively, with -O instead of eval (9 days ago)\n* f96190b isaacs Use js for benchmark cleanup (12 days ago)\n* 957fd93 isaacs Fix some 'use strict' errors (12 days ago)\n* bf3381e isaacs Treat ENOTSUP like ENOTDIR in readdir (12 days ago)\n* 507733d isaacs (tag: v5.0.13) v5.0.13 (12 days ago)\nNotice anything interesting?  I never released the ENOTSUP fix.  That explains it!\nThe good news is that I never released half the ENOTSUP fix, so it now works on 5.0.14 for both sync and async glob.  Can you re-install and let me know?\nSorry for not catching that!\n. Can you provide a simple test script that demonstrates what you're seeing?\nExplaining in english < explaining in JavaScript ;)\n. I've put off adding ~ support until Node has cross-platform passwd functions (coming to io.js soon, I believe?)  Then we can do stuff like ~root/foo and ~bob/bar and have it expand with the home dir of the specified user.\n. @fenwick67 Is there any way to get the home directory of someone other than the current user?  (Ie, resolve something like ~root/foo to /root/foo and resolve ~user/foo to /home/user/foo, etc?)\n. fixed on latest release\n. find(1) is not the model that this module matches, but rather the globbing pattern-matching behavior in Bash 4.3.\n$ mkdir -p dir/subdir/subsub\n$ for i in dir/**; do echo $i; done\ndir/\ndir/subdir\ndir/subdir/subsub\n. Bash 3 didn't have globstar support, so of course it would not do anything special with **; it'd be the same as dir/*/*.  (You can emulate this behavior by setting { noglobstar: true } in the options object.)\nI'm not super familiar with zsh, so I can't speak to how that works.\n. @UltCombo It's not doing globstar matching at all, that's why.  You're getting the same results as dir/*/*.\nYou can observe this if you do mkdir -p dir/a/b/c/d/e/f/g and see what it matches.\n. Wild!  Yeah, that's totally different.  What does dir/**/ match?\n\nAlso, if dir/**/* was treated the same as dir/*/*, it would not match dir/subdir in the comment above, right?\n\nAh, good point.\nAnyway, zsh's globbing is not the reference implementation that this module targets :)\n. Not a node-glob issue.\n. Different versions of V8.\nIn 0.12:\n```\n$ node -p '\"abc\".localeCompare(\"XYZ\")'\n-1\n$ node -v\nv0.12.7\n```\ncompare to v0.10 (and io.js)\n```\n$ node -p '\"abc\".localeCompare(\"XYZ\")'\n9\n$ node -v\nv0.10.40\n```\nand io.js:\n```\n$ node -p '\"abc\".localeCompare(\"XYZ\")'\n9\n$ node -v\nv2.2.1\n```\nLooks like there was a bug in 0.12 that then got fixed in later versions of V8?\n. Can you share the program that's raising this error?  It doesn't look like node-glob is anywhere in that stack trace.\n. A) How would you like the API to look?  (Note that this may involve some trade-offs that turn out to not be too costly.)\nB) How does that differ from just using {,,,} to break up your patterns?  Eg, instead of doing glob([pattern1, pattern2], cb) you could do glob('{' + pattern1 + ',' + pattern2 + '}', cb).  I guess it's different if the patterns have , chars in them?  Is there any other reason why this workaround is objectionable?\n. Especially: if a file matches more than one pattern, should it be included in the results more than once?  And, do you need to know which pattern a file matched?\n. I took a look at globby.  It seems like it just extends node-glob to take an array of patterns, and uses a Promise for the async API rather than a callback.\nUnless this feature gets a champion willing to do the work, I'm not super excited to do it myself, especially since globby already exists.  There are some interesting optimizations that could maybe be taken advantage of (like having the multiple different glob instances share cache objects, for example), but no one's complaining about the speed of globby right now.\n. This is incorrect.  In glob patterns, ? matches exactly 1 character.\n```\n$ touch fo foo fob\n$ echo fo?\nfob foo\n$ node -p 'require(\"./\").sync(\"fo?\")'\n[ 'fob', 'foo' ]\n$ echo fo*\nfo fob foo\n$ node -p 'require(\"./\").sync(\"fo*\")'\n[ 'fo', 'fob', 'foo' ]\n```\n. I'm seeing files in there:\n$ npm view glob dist.tarball | xargs curl -s | tar ztv\n-rw-r--r--  0 501    20        985 Jul 14 18:34 package/package.json\n-rw-r--r--  0 501    20      15445 Jun 18 15:23 package/README.md\n-rw-r--r--  0 501    20        765 Jul 28  2014 package/LICENSE\n-rw-r--r--  0 501    20       6155 May 21 09:44 package/common.js\n-rw-r--r--  0 501    20      18625 Jul 14 18:26 package/glob.js\n-rw-r--r--  0 501    20      11461 Jul 14 18:26 package/sync.js\nMaybe run npm cache clean and try again?\n. Correct shasum, too:\n```\n$ npm cache clean\n$ npm cache add glob\n$ npm cache ls\n~/.npm\n~/.npm/glob/\n~/.npm/glob/5.0.14/\n~/.npm/glob/5.0.14/package.tgz\n~/.npm/glob/5.0.14/package/\n~/.npm/glob/5.0.14/package/package.json\n~/.npm/registry.npmjs.org/\n~/.npm/registry.npmjs.org/glob/\n~/.npm/registry.npmjs.org/glob/.cache.json\n$ shasum ~/.npm/glob/5.0.14/package.tgz\na811d507acb605441edd6cd2622a3c6f06cc00e1  /Users/isaacs/.npm/glob/5.0.14/package.tgz\n$ npm view glob dist.shasum\na811d507acb605441edd6cd2622a3c6f06cc00e1\n``\n. Aha! Turns out there was a minor operational issue this morning that resulted in a small percentage of zero-byte tarballs being served.  I should probably commitda39a3ee5e6b4b0d3255bfef95601890afd80709` to memory, because that shasum always indicates a problem ;)\nEven though it was a very small percentage, if you were one of the (un)lucky few to get it, it would be cached by the CDN, and keep serving a zero-byte response until our ops folk flushed the caches.  All should be resolved now.\n. Fixed on 7.0.2.  Thanks for finding the bug!\n. This is a bit more complicated of a situation than it might appear.  (More conversation at https://github.com/isaacs/node-glob/pull/166 that might be interesting to review.)\nI'd like to see a lot more testing and thought around the cases here:\n1. dot: false, search for a/**, ignore a/x/**, file at a/x/.y/z exists.  Should a/x/.y/z be included in matches?\n2. dot: true, search for a/**, ignore a/x/**, file at a/x/.y/z exists.  Should a/x/.y/z be included in matches?\n3. dot: false, search for a/**, ignore a/**/z, file at a/x/.y/z exists.  Should a/x/.y/z be included in matches?\n4. dot: true, search for a/**, ignore a/**/z, file at a/x/.y/z exists.  Should a/x/.y/z be included in matches?\nIf the answer to (1) is \"no\", then we should set dot: true for the gsmatcher always.  If the answer is \"yes\", then this patch seems appropriate, but then the optimization around ignoring ** needs to be removed, which will make things a lot more complicated.\nThe answer to (2) and (4) seems to be \"no\" always, so this patch looks correct from that pov.\nThe really tricky bit is (3), and I'm not sure I have a good answer here.  People seem to be confused either way.  It might be acceptable to just say, look, for ignore patterns, they match dot files, that's just how it is, as long as that's documented clearly.  Another approach might be to say that it follows the same dot setting as the overall pattern, which is what this patch does.\nTo be honest, I've been procrastinating making a decision on this because I'm not sure what the right call is, and it's probably a breaking change either way.\nWhat're your thoughts on this, as a person using glob in your program?\n. Other cases:\n- dot: false, search for a/**/.y/z, ignore a/x/**\n- dot: true, search for a/**/.y/z, ignore a/x/**\nReally, we need a comprehensive matrix of test cases and a clear decision on each one.\n. Another interesting case:\ndot: false, search for a/**/.y, ignore a/x/**.  Files at a/x/.y and a/z/.y both exist.  What gets returned?  Does it ignore a/x/.y, or not?  (Note that a/x/.y does not match a/x/** if dot is false, but it does match a/**/.y, because of the explicit dot.)\nThe more I think about this, the more I think that dot:true should be set for ignore patterns always.  It should be documented that way and just take the major version hit.\n. Feel free to mess around with the patch in #227 and let me know if it is more or less surprising in practice. \n. Let's simplify this a bit by looking only at the first braced group section.  Clearly it's not the second part of the pattern that's matching, since it doesn't end in bower_components.\n**/node_modules/!(grunt*) will match node_modules/grunt/node_modules/foo because the ** matches node_modules/grunt/node_modules and then foo is not grunt*, so there you go.  The pattern will match any thing containing node_modules that doesn't end in grunt*, so this will match most of grunt's deps.\nI think what you probably want is to drop the **, and just use this: node_modules/!(grunt*), or combined with the bower_components, {node_modules/!(grunt*),**/bower_components}.\n. Landed on master, thanks.\n. If anyone wants to weigh in on the substantial change here, take a look at these test cases: https://github.com/isaacs/node-glob/blob/dot-ignore/test/ignore.js#L34-L39\nThe relevant file structure looks like this:\n```\n$ tree a/{x,z}\na/x\n\u2514\u2500\u2500 .y/\n    \u2514\u2500\u2500 b\na/z\n\u2514\u2500\u2500 .y/\n    \u2514\u2500\u2500 b\n2 directories, 2 files\n```\nThe linked test cases go [pattern, ignore, results].  So, eg, a pattern of a/**/.y/b, with an ignore set to a/x/** will prevent a/x/.y/b from matching, even though the ** would not normally match the .y path portion.\n. Alright, the requisite time for objection and testing has passed, and it seems to make everyone's use cases better.  I'm gonna go ahead and land this.  It's a SemVer-major bump, because of the change in behavior, but it's the right change, I believe.\n. @UltCombo I don't understand the question.\nI think experience thus far has shown that having ignore patterns not match dot files is always more confusing than the alternative, even when the main pattern doesn't have dot: true.\n. Not really that interested.  Passing in a function works fine, and you can wrap it in a promise if you really need to.\n. I decided to just <code> them all with backticks. Thanks for the nudge :)\n. @thirdcreed Only the \"negate the whole pattern by prefixing with a !\" has been deprecated.  This kind of negation should still work.\n@dangreen what does your file tree look like?  What gets returned?\n. As far as I can tell, this is behaving exactly like bash 4.3\n```\n[gh:node-glob/master]isaacs@urdva:~/dev/js/glob/a node@v4.0.0\n$ tree\n.\n\u251c\u2500\u2500 b/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 c/\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 bar.dyn.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 foo.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bar.dyn.css\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 foo.css\n\u251c\u2500\u2500 bar.dyn.css\n\u2514\u2500\u2500 foo.css\n2 directories, 6 files\n[gh:node-glob/master]isaacs@urdva:~/dev/js/glob/a node@v4.0.0\n$ for i in ./*/!(.dyn).css ; do echo $i; done\n./b/bar.dyn.css\n./b/c/bar.dyn.css\n./b/c/foo.css\n./b/foo.css\n./bar.dyn.css\n./foo.css\n[gh:node-glob/master]isaacs@urdva:~/dev/js/glob/a node@v4.0.0\n$ node -p 'require(\"../\").sync(\"./*/!(.dyn).css\")'\n[ './b/bar.dyn.css',\n  './b/c/bar.dyn.css',\n  './b/c/foo.css',\n  './b/foo.css',\n  './bar.dyn.css',\n  './foo.css' ]\n```\nWhat's happening here is that if you have a file like foo.dyn.css, then the * matches fo, and then o.dyn is not equal to .dyn, and then the .css matches .css.\n. If you do use an ignore pattern like @thirdcreed suggests, then it works as you probably want:\n$ node -p 'require(\"../\").sync(\"./**/*.css\",{ignore:\"./**/*.dyn.css\"})'\n[ './b/c/foo.css', './b/foo.css', './foo.css' ]\n. Indeed!  Fixed on 7.0.1.\n. It looks like the only difference is the sorting.  Can you provide the script you're using to generate this output?\nNote that if you set nosort: true in the options, then it won't be sorted.  Also, match events fire in whatever order they're encountered, which is different on different file systems.\n. Yeah, I see the same results on both.\nMy only guess is that readdir is implemented differently on one of your systems, or you're using different versions of glob.  Try calling result.sort() if you need a consistent ordering.\n. Without seeing the code, I have no way to know what might need to change.\nBut the path.basename() function probably will do what you want.\n. Fixed on master.  Had to bump the major, since this is raising a new error, and so it might cause a currently-working program to break.\nTough call, since it feels like a \"bugfix\" rather than a breaking change, but I've learned to err on the side of being overly cautious when it comes to raising errors for things that were previously allowed, even if they were incorrectly allowed.\n. No idea, sorry.  Looks like you're using glob right.\nDo you have a test that doesn't use mocha?  I'm not very familiar with it.\n. Interesting.\nIf you use tap then it supports throws in async tests.  Just sayin ;)\n. If the file system is case insensitive, then this module will be case insensitive. There's not much to be done about that, since all the fs functions will play along with the \"wrong\" case. \n. It is only case preserving in some cases.  In this case, node-glob and bash do the same thing:\n$ mkdir -p A/B/C\n$ echo a/**\na/ a/B a/B/C\n$ node -p 'require(\"./\").sync(\"a/**\")'\n[ 'a', 'a/B', 'a/B/C' ]\nHowever, there IS a discrepancy here:\n$ echo readme.*\nREADME.md\n$ node -p 'require(\"./\").sync(\"readme.*\")'\n[]\nGonna open a new bug for this.  Thanks for helping to find it :)\n. Also, maybe related, but maybe a separate issue, note the difference:\n```\n$ echo A/**\nA/ A/B A/B/C\n$ echo A/*\nA A/B A/B/C\n$ node -p 'require(\"./\").sync(\"A/**\")'\n[ 'A', 'A/B', 'A/B/C' ]\n$ node -p 'require(\"./\").sync(\"A/*\")'\n[ 'A', 'A/B', 'A/B/C' ]\n```\nThe A*/** doesn't preserve the / on A/, but A/** does preserve the /.  Technically they're both correct results, but the difference is a minor bug.\n. Indeed!  Landed this with a comment so that I don't go breaking it again.  Thanks for the patch.\n. I have no idea what to do about this.  I don't manage the webjars repo at all, and that version range syntax is not one I'm familiar with.\n. Sorry for the delay responding to this.\nUnfortunately, there's a bug here.  Instead of removing the test fixture and replacing it with something else, just add the new one.  Apply this diff:\npatch\ndiff --git a/test/00-setup.js b/test/00-setup.js\nindex 541e4a1..e48e2cc 100644\n--- a/test/00-setup.js\n+++ b/test/00-setup.js\n@@ -102,6 +102,7 @@ var globs =\n   ,\"{./*/*,/tmp/glob-test/*}\"\n   ,\"{/tmp/glob-test/*,*}\" // evil owl face!  how you taunt me!\n   ,\"a/!(symlink)/**\"\n+  ,\"a/symlink/a/**/*\"\n   ,\"a/symlink/a/**\"\n   ]\n var bashOutput = {}\ndiff --git a/test/bash-results.json b/test/bash-results.json\nindex b4a1ffc..aafd3e9 100644\n--- a/test/bash-results.json\n+++ b/test/bash-results.json\n@@ -132,6 +132,11 @@\n     \"a/x\",\n     \"a/z\"\n   ],\n+  \"a/symlink/a/**/*\": [\n+    \"a/symlink/a/b\",\n+    \"a/symlink/a/b/c\",\n+    \"a/symlink/a/b/c/a\"\n+  ],\n   \"a/symlink/a/**\": [\n     \"a/symlink/a\",\n     \"a/symlink/a/b\",\n(You can also get this by just editing the 00-setup.js and running npm run test-regen.)\nWith that, there's a failing test:\n```\n$ tap test/bash-comparison.js\ntest/bash-comparison.js ........................... 584/586\n  a/symlink/a//*\n  not ok a/symlink/a//*\n    +++ found\n    --- wanted\n     [\n       \"a/symlink/a/b\"\n       \"a/symlink/a/b/c\"\n    -  \"a/symlink/a/b/c/a\"\n     ]\n    at:\n      line: 50\n      column: 9\n      file: test/bash-comparison.js\n    stack: |\n      test/bash-comparison.js:50:9\n      f (node_modules/once/once.js:17:25)\n      Glob. (glob.js:146:7)\n      Glob.finish (glob.js:185:8)\n      done (glob.js:172:12)\n      Glob._processGlobStar2 (glob.js:625:12)\n      glob.js:614:10\n      RES (node_modules/inflight/inflight.js:23:14)\n      f (node_modules/once/once.js:17:25)\n      lstatcb (glob.js:509:9)\n      RES (node_modules/inflight/inflight.js:23:14)\n      f (node_modules/once/once.js:17:25)\n      FSReqWrap.oncomplete (fs.js:82:15)\na/symlink/a/*/ sync\n  not ok should match shell (sync)\n    +++ found\n    --- wanted\n     [\n       \"a/symlink/a/b\"\n       \"a/symlink/a/b/c\"\n    -  \"a/symlink/a/b/c/a\"\n     ]\n    at:\n      line: 61\n      column: 7\n      file: test/bash-comparison.js\n    stack: |\n      test/bash-comparison.js:61:7\n      test/bash-comparison.js:54:9\n      f (node_modules/once/once.js:17:25)\n      Glob. (glob.js:146:7)\n      Glob.finish (glob.js:185:8)\n      done (glob.js:172:12)\n      Glob._processGlobStar2 (glob.js:625:12)\n      glob.js:614:10\n      RES (node_modules/inflight/inflight.js:23:14)\n      f (node_modules/once/once.js:17:25)\n      lstatcb (glob.js:509:9)\n      RES (node_modules/inflight/inflight.js:23:14)\n      f (node_modules/once/once.js:17:25)\n      FSReqWrap.oncomplete (fs.js:82:15)\ntotal ............................................. 584/586\n584 passing (733.131ms)\n  2 failing\n```\nIf I can work out what's going wrong in the little while this evening, I'll fix and land this.  If you've got any ideas, that's welcome too :)\n. Ah, I see the problem.\n\nThis PR fixes async and sync behaviour, adds tests for both in the specific eslint use case and deals with a bash oddity: whilst * doesn't follow a symlink / will. This may be an edge-case bug in the bash implementation too - but I don't want to follow this rabbit-hole any deeper right now.\n\nUnfortunately, you'll find that this module exists at the bottom of a rather deep rabbit hole :)\nBy definition, from the point of view of this module, Bash 4.3's glob behavior is correct.  That's the reference implementation that this module intends to follow 100%, even when that behavior is arguably \"weird\".\nBy default, each of the optional flags are either true, or default behavior.  So, follow: false doesn't mean \"never follow symbolic links\".  It means, \"only follow symbolic links in the cases where Bash 4.3 follows symbolic links.\"  follow: true, on the other hand, means \"follow all symbolic links always\" (which, incidentally is how Bash 4.1 handled symlinks encountered in globstar traversals, and how this module used to do it until Bash 4.3 changed its behavior, and I locked the reference implementation version that this module targets in JavaScript.)\nTo deviate from Bash 4.3 behavior, we'd have to add a flag which is off by default, but we've already got a lot of flags, and adding a nofollow: true reminds me of spammy email opt-in/out checkboxes (\"don't not uncheck this box unless you don't want to stay unsubscribed to our newsletter\").  Plus, what do you do with {follow:true,nofollow:true}?\nWe could conceivably say that follow:false means \"no symlinks ever\", and follow: true means \"follow all symlinks\", and follow: null/undefined means \"do what Bash 4.3 does\".  I don't love that either, because now if you just try to un-set a config by setting globOpt.follow = false, you can end up deviating from Bash behavior.  In my experience, the true/false/null option always just ends up getting confusing, and it's best to just keep it to 2 options with a boolean cast.\nSo, any of these are going to be breaking changes, and additional complexity.\nI'm sorry for what probably seems like unnecessarily pedantic adherence to an arbitrary code contract.  Because a lot of popular command line tools rely on this module, I've learned to be very careful about any semantic changes.\n. > But you could use globOpt.follow = null\nYes, that is what one would have to do.  But that is still a very subtle breaking change.\nIt's fine to say that this is \"unexpected behavior\", but it's behaving exactly like the reference implementation it's intending to emulate.  So... unexpected by whom?  If false and null start having different effects on a field that looks like a boolean flag, then that's also pretty unexpected.\nMaybe the answer is a --no-glob option for eslint?\nOverloading the follow flag is not the right call here.\n. Glob never had a \"do not follow any symlinks\" option. follow was added to force it to follow symlinks in globstar traversals, unlike bash. \nEsliny could have an option to just not use glob at all. Then you wouldn't have to worry about following symbolic links. But maybe that won't work either?\nI'm not sure the best answer for your use case. I know that deviating from bash behavior in this module is a bad idea, though, and pseudo-boolean-three-state option flags are flaky and error prone. \nYou could also turn on realpath:true in the glob options for eslint. Then you'll always get the full real path, and there will never be duplicates that refer to the same actual file. \n. I'm not opposed to this in principle, however:\n1. This should be a standalone module that can promisify a thing given an EventEmitter and a \"resolution\" event (with \"error\" considered the \"rejected\" event, of course).  Flow-control boilerplate doesn't belong in this module.\n2. That module should work on Nodes less than 0.12 (I'm told Bluebird is the thing all the cool kids use these days for their cross-platform promises.)  That's what's breaking the Travis-CI test.\n3. It seems like this isn't matching the Promises/A+ spec, which says that .catch() should behave quite a bit differently from how it's implemented here.\nAnother approach would be, rather than tacking .then() and .catch() onto the Glob prototype, just create a glob.promise(pattern, [options]) => Promise method, since that's really what you'd probably want to use anyway, and that's pretty trivial.  Might look something like this:\njavascript\nglob.promise = function (pattern, options) {\n  return new Promise(function (resolve, reject) {\n    var g = new Glob(pattern, options)\n    g.once('end', resolve)\n    g.once('error', reject)\n  })\n}\n. Another route is just to promise up the (lower case) glob() function of a callback isn't provided, but if that returns a Glob instance today, it'd be a breaking change. \n. What do you get when you call fs.statSync('deleteMe.txt')?  Or run the glob with glob.sync('deleteMe.txt', { stat: true })?\n. Hm.  Ok, that seems kinda like a bug to me.  It should be handling EPERM from readdir calls as an indication that the thing is either not a directory or not traversable, but an EPERM on a file seems like it should be an error.\nI'll have to review the code to be sure there isn't some method to this madness, but I agree that it seems like an oversight somewhere, and I'll try to figure out what bash does.  On Unix, there's no combination of permissions that will prevent you from being able to stat a file, so this is probably just a windows-ism that I didn't think to account for.\n. Anyone affected by this error, please try the following:\nnpm install isaacs/node-glob#fix-245\nAnd let me know if the problem goes away.\n. @schnittstabil Do you think it should return an error if { stat: true } is used?\n. Right, sorry, when I said \"return an error\", I meant throw from sync or first arg to cb from async.\nIt's an interesting edge case.  I could see someone thinking that if they do stat: true, then that means that the stat call should be required to succeed.  It'd be easy enough to make it work that way.\n. @schnittstabil I can't reproduce that.  What error is thrown?  Can you provide a test program and the output of the crash?  Thanks.\n. @schnittstabil When you say \"it throws an error\", what does that mean, exactly?  Being a JavaScripter, I'd assume it means something like what happens when you do throw new Error('oops')\n. @schnittstabil Oh, I see, so if the fs.readdir call gets an error, then that fails.\nWhat it's saying is \"this is a very strange error, and probably you want to know about it, but the glob process can continue.\"  If you pass silent: true in as an option, then it is quiet about it.\nI don't know why it's warning in async and throwing in sync, though, that's strange.  It looks like readdir failures need to be cleaned up a little bit as well.  That's definitely a separate issue (though related cause.)\n. I'm not sure what this question is about, but it doesn't seem like it's about this module.\nDid you post this issue to the right repo?\n. You're almost there.\njavascript\nglob.sync('./routes/**/*.js').forEach(function (file) {\n  var f = file.replace(/^\\.\\/routes/, '').replace(/(index)?\\.js$/, '')\n  app.use(f, require(file))\n})\nMaybe also relevant: https://nodejs.org/api/path.html#path_path_basename_p_ext\n. > do you think it's a good pratice expose the routes automatically like this?\nI have no opinion on the matter. It's your program, do as you like :)\n. Probably what you're looking for is minimatch\n. Hm. Yeah, that seems like a bug for sure.  /build/goat.png would match c:/build/goat.png on win32 systems, so that ignore pattern should prevent c:/build/goat.png from being returned in the results.\n. Sorry, I don't know what --no-instrument-glob means.\nWhat program are you running?  Does it use this module?\n. Here's the problem: without using inflight, this module can end up doing a lot more syscalls.\nDo you have a reduced test case that shows how glob leaks callbacks when a callback throws?\n. @phated Ah, this is the glob bug you were talking about!  Thanks.\nYes, this should be fixed with the latest inflight release.\n. Interesting!  It looks like you'e running it in a working directory in the G: drive.  Works for me on C:, but it looks like I need to make that test not be drive-specific.\n. Should be fixed on 68f2509d237babec64cf03adf72531127fd80339\n. How is this different from follow: true?\nCan you explain the use case in more detail?  And, is there a way to phrase the option so that it doesn't default to true?  Most of the other flags default to false, and I'd prefer to stick to that model.\n. So, you want to follow symbolic links, but not symbolic links that have already been traversed, is that correct?\nIf I'm understanding the use-case properly, you can do get almost this behavior today by setting realpath: true in the options.  (Then you're guaranteed to only get each path once.)\n```\n\nrequire('./').sync('test/fixtures/a/symlink/')\n[ 'test/fixtures/a/symlink',\n  'test/fixtures/a/symlink/a',\n  'test/fixtures/a/symlink/a/b',\n  'test/fixtures/a/symlink/a/b/c' ]\nrequire('./').sync('test/fixtures/a/symlink/', { follow: true }).length\n100\nrequire('./').sync('test/fixtures/a/symlink/**', { follow: true, realpath: true })\n[ '/Users/isaacs/dev/js/glob/test/fixtures/a/symlink',\n  '/Users/isaacs/dev/js/glob/test/fixtures/a/symlink/a',\n  '/Users/isaacs/dev/js/glob/test/fixtures/a/symlink/a/b' ]\n```\n\nOf course, the issue is that setting { follow: true, realpath: true } is filling up with duplicate symbolic links and then filtering them down at the very end.  It'd be much better for performance to call fs.realpath along the way instead, and avoid traversing directories multiple times if realpath: true is set, since they won't end up in the result set anyway.  (This would also fix the weird issue that realpath: true glob objects still emit match events with the non-realpath paths, which would be a breaking change, but an improvement, imo.)\nIf you want output that lists the symbolic links, but and want to follow those symbolic links, and don't want them to be realpath'ed in the result set, then that's going to have to be a different option.  But I think there's a cheaper way to do that than calling fs.realpath.\n\nstrict option being true by default\n\nHistorical accident :)  Once upon a time, it was false by default.\n. Note that, if you don't traverse any directories that have been seen already (or worse, resolve them to a realpath along the way), then you can run into weird situations.\nFor example, if you have foo/a/b/c and bar @-> foo, then the pattern {foo/a,bar/*/b/*} would match on foo/a and then would have to know that it SHOULD traverse bar (and re-traverse bar/a) to find bar/a/b/c, because that path doesn't match the pattern if we're calling bar by its realpath name, foo.\n. javascript\nglob('**/*.js', { exclude: '**/*.exclude.js' }, cb)\n. Oh, sorry, I skimmed past that, I guess. Seems like it'd be good if that library let you pass options to glob somehow, then. \n. Am I correct in thinking this has no functional impact?\nThis way is fine, of course, but I usually don't accept patches that don't make some kind of measurable change.\n. @phated Thanks!\n. Fixed by falling back to the old implementation of fs.realpath on Node 6 when new errors are thrown from the realpath syscall.  Using http://npm.im/fs.realpath module.\n. Wow, didn't notice that uv has realpath now. \nSomeone should confirm that it's not using the realpath(3) UNIX function, since that's notoriously insecure. (That's why node had a realpath in JS in the first place.)\nIf it is, then it's better for glob to refuse to use realpath in those versions of node. \n. @TheAlphaNerd I haven't followed the conversation in depth, but I see the some ^Lift folks got involved.  If @jlamendo is happy with where node 6 lands on this, then I'm happy supporting it.\n. Digging into this more, it's almost impossible to fix without either (a) making a significant breaking change to glob, or (b) porting the pre-node6 fs.realpath into a standalone module and using that instead.  Both options are nontrivial.\nThe tests are breaking because Node broke behavior.  fs.realpath no longer works like it used to, and any module that exposed any kind of realpath API surface is almost certainly failing tests as well (provided that their test coverage was sufficient to detect it.)\nThe patch here simply ignores ELOOP errors that are raised by the fs.realpath call.  That does work in the one case where a test is failing, but digging in a bit deeper, I'm not convinced that it's the correct solution in every case.  In Node 6, node-glob simply cannot do what it used to be able to do.  I am concerned that ignoring ELOOP will violate its contract.  (Also, what about ENAMETOOLONG?  It's purely lucky happenstance that the test is not raising that instead.)\nIt's going to take some time to fix issues like this.  In the meantime, in my opinion, people should either know that they're using a not-ready-for-prime-time version of the platform (and thus, expect test failures), or avoid Node 6 until it and the ecosystem have had time to get stable.  This new work lands on the laps of many part-time maintainers who weren't planning for it.  I have no idea when I'll even get to it, but it's not at the top of my list.  I've already spent several hours debugging new issues that Node 6 raised.\nBreaking changes  break stuff.  This is what it looks like when a platform is unstable.  It's costly.\n. Already fixed, looks like?\n. The minimatch dep is already updated on latest, and hopefully 1728df825b1401351c326e04b905192debf862fb fixes the appveyor issue.  (Seems to work properly on my local Windows vm.)\n. The CI failures are because one of tap's deps added a dependency on a version of request that doesn't exist.\nIt's fixed, and also, I already bumped the minimatch version to ^3.0.2 before seeing this, so it's fine now.\nThanks.\n. Can you provide any more details?  Like, the depth of paths, pattern being used, etc?\nI'm sure it's something that could probably be addressed, but a reproducible test case would be the first step.\n. Yes. Pass nodir: true in the options object.  From the readme:\n\n\nnodir Do not match directories, only files. (Note: to match only directories, simply put a / at the end of the pattern.)\n. I don't know what glob-all is, but this is working for me.\n\n\n```\n$ tree\n.\n\u251c\u2500\u2500 css/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 one.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 one.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 two.css\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 two.txt\n\u2514\u2500\u2500 js/\n    \u251c\u2500\u2500 one.js\n    \u251c\u2500\u2500 one.txt\n    \u251c\u2500\u2500 two.js\n    \u2514\u2500\u2500 two.txt\n2 directories, 8 files\n$ for i in /.!(css|js); do echo $i; done\ncss/one.txt\ncss/two.txt\njs/one.txt\njs/two.txt\n$ node -p 'require(\"glob\").sync(\"/.!(css|js)\")'\n[ 'css/one.txt', 'css/two.txt', 'js/one.txt', 'js/two.txt' ]\n```\n. @jrbenito Doesn't make a different in this case.\n```\n$ node -p 'require(\"glob\").sync(\"/.!(css|js)\")'\n[ 'css/one.txt', 'css/two.txt', 'js/one.txt', 'js/two.txt' ]\n$ node -p 'require(\"glob\").sync(\"*/.!(css|js)\")'\n[ 'css/one.txt', 'css/two.txt', 'js/one.txt', 'js/two.txt' ]\n```\nWhat version of node-glob are you using?  Run npm ls glob.\n. Ah, you've got a filename with multiple parts.  I missed that!  So yes, you'll have to use that more complicated pattern, then.\nWhat *.!(js|css) says is \"some characters, followed by a dot, followed by something that isn't js or css, followed by the end of the string\".  So, if you have multi.part.js then you have multi (some characters) followed by ., followed by part.js (which isn't js or css).\nWhat *.!(*(*.)js|*(*.)css) says is \"some characters, followed by a dot, followed by something that is not zero or more instances of (character followed by dot) and then js or zero or more (characters followed by a dot) and then css\".\nIf you were comfortable getting file entries that don't have dots in them (which will mostly be folders, but you can avoid by using the nodir option passed to glob) you can use the somewhat simpler pattern **/!(*.css|*.js), which says \"something that isn't *.js or *.css.\nThis matches bash's pattern matching logic:\n```\n$ for i in */.!(css|js); do echo $i; done\ncss/multi.part.css\ncss/multi.part.js\ncss/multi.part.txt\ncss/one.txt\ncss/two.txt\njs/multi.part.css\njs/multi.part.js\njs/multi.part.txt\njs/one.txt\njs/two.txt\n$ for i in /.!((.)css|(*.)js); do echo $i; done\ncss/multi.part.txt\ncss/one.txt\ncss/two.txt\njs/multi.part.txt\njs/one.txt\njs/two.txt\n$ for i in /!(.css|.js); do echo $i; done\ncss\ncss/multi.part.txt\ncss/one.txt\ncss/two.txt\njs\njs/multi.part.txt\njs/one.txt\njs/two.txt\n``\n. It is correct that slashes do not work inside of extglob patterns such as!(a|b).  Those can only be used to indicate path parts, not entire paths.  This is how Bash works as well.  In that case, the pattern is read as a file namedb)inside of a folder named!(a`, which is weird, but not impossible.\nThat being said, you have found a bug here, because it should not throw if you use a pattern like that.\n. You can take a look at how fstream-ignore does it.  That's what npm uses for .npmignore files.  https://github.com/npm/fstream-ignore\n. This is a result of passing an empty string to hasMagic.\nIt's fixed in the latest release.\n. Note: You should probably investigate why you're calling rimraf('') though.  That seems like a bug that will result in attempting to recursively delete the current working directory.  Are you sure that's what you want to do?\n. Well, this is weird.  Glob can't very well give you a list of files if it can't list the files in a directory.  I'm not sure how I'd even go about addressing that.\n. I'd still call this a bug.  c:\\\\* should be functionally equivalent to /* on Windows.\n. Something like this?\n``` js\n// gs.js\nvar Readable = require('stream').Readable\nvar util = require('util')\nvar glob = require('./')\nmodule.exports = GlobStream\nutil.inherits(GlobStream, Readable)\nfunction GlobStream (pattern, options) {\n  Readable.call(this, { objectMode: true })\n  this._glob = new glob.Glob(pattern, options)\n  this._glob.on('match', function (filename) {\n    if (!this.push(filename)) {\n      this._glob.pause()\n    }\n  }.bind(this))\n  this._glob.on('end', function () {\n    this.push(null)\n  }.bind(this))\n}\nGlobStream.prototype._read = function () {\n  this._glob.resume()\n}\n```\nUsage:\njs\nvar GS = require('./gs.js')\nvar gs = new GS('**/*.js')\ngs.on('data', function (filename) {\n  console.log('%j', filename)\n})\ngs.on('end', function () {\n  console.log('END')\n})\n. Anyway, yes, you can pause() whenever, and you should get no match events while paused.  But if your goal is to push it into a stream, then the stream can handle a few pushes while it's buffering.\n. I would accept a PR to add something like this, yes.  Maybe just absolute: true as an option.\n. I think you could basically just this.emit('match', this._absolute ? abs : e) in that function, and set this._absolute = !!options.absolute in the ctor.  Then tests and docs, and you're done :)\n. Published as 7.1.0.  Thanks!\n. Thanks! this'll go out in the next release.  I also wanna fix the thing with the stat errors on Windows, in #245.\n. The object is not filled up synchronously, even on a non-network drive it'll be empty.\nTry this:\njs\nvar g = new glob.Glob(pattern, options)\ng.on('end', function (matches) {\n  if (g.found.length > 0) { ... whatever ... }\n})\nOr, perhaps simpler:\nvar g = new glob.Glob(pattern, options, function (error, matches) {\n  if (error) { ... handle error ... }\n  if (g.found.length > 0) { ... whatever ... }\n})\n. I'm not interested in maintaining version, description, and dependency information in more than one place.\nYou are welcome to float this patch on your own branch, and use that with bower.\n. You don't have to do anything special to clean up the memory.  Just remove references to it.\nIf you put the glob object in a list, you can kill whatever it's currently doing by calling myGlob.abort().  You can see its results by listening for the end event.  If you just want to check on it some time later, you can do something like:\n```js\nvar myGlob = new Glob(somePattern)\nmyGlob.on('end', function () {\n  this.done = true\n})\n// some time later...\nif (myGlob.done) {\n  console.log('it is done', myGlob.matches)\n} else {\n  console.log('still working')\n}\n```. Thanks!. Probably the command-line specific stuff shouldn't be in this library.  A lot of cli stuff does use node-glob to parse path options, especially since the shell doesn't do that for you on windows.\nWhat would you want to add here?. > Is there a minimum Node version supported by node-glob?\nYes, but it's 0.10 :)\nIf I had to guess, what's happening is that some module is requiring glob, but isn't listing it as a dependency or peer dependency.  But, since some other module in your tree requires glob, it \"works by accident\" in npm version 3 and above, because of tree-flattening.\nRun npm i glob -S in your project and see if that fixes it.\n. You're installing an outdated version of glob, then.  Upgrade to the latest and greatest.. Yeah, what @bitstrider said.\nGlobs are not regular expressions.  Type man bash in your terminal, and look for the section on Pattern Matching.. https://github.com/isaacs/node-glob/commit/057569cbcde510173a79b2d668e808023c09bb01. ",
    "papandreou": "I know I'm not exactly helping out by saying this, but: +1\n:)\n. Just tried 624a9b1 on Ubuntu 10.10, and yay, it doesn't segfault anymore :). Thanks!\nBest regards,\nPapandreou\n. @dunkfordyce: You're right, everything works as expected for me when I supply glob.GLOB_DEFAULT & ~glob.GLOB_LIMIT as the second argument for glob. Thanks a lot for figuring that out and sharing!\n+1 for not having that as the default.\n. Thanks for merging :)\n. Ah, I hadn't noticed that it was on purpose. Good thing I wasn't really relying on that feature of glob < 3.0.0\n. Looks like this has already been merged in -- thanks! Closing.\n. I know I'm not exactly helping out by saying this, but: +1\n:)\n. Just tried 624a9b1 on Ubuntu 10.10, and yay, it doesn't segfault anymore :). Thanks!\nBest regards,\nPapandreou\n. @dunkfordyce: You're right, everything works as expected for me when I supply glob.GLOB_DEFAULT & ~glob.GLOB_LIMIT as the second argument for glob. Thanks a lot for figuring that out and sharing!\n+1 for not having that as the default.\n. Thanks for merging :)\n. Ah, I hadn't noticed that it was on purpose. Good thing I wasn't really relying on that feature of glob < 3.0.0\n. Looks like this has already been merged in -- thanks! Closing.\n. ",
    "aflatter": "I got to thank for the fast fix ;-)\n. I got to thank for the fast fix ;-)\n. ",
    "dachev": "Same problem here: Linux desktop 2.6.32-27-generic #49-Ubuntu SMP Thu Dec 2 00:51:09 UTC 2010 x86_64 GNU/Linux.\nDidn't have this problem on OS X.\n. [2/4] cxx: deps/fnmatch/fnmatch.c -> build/default/deps/fnmatch/fnmatch_2.o\nIn file included from ../deps/fnmatch/fnmatch.c:66:\n/usr/include/assert.h:73: error: expected initializer before \u2018__THROW\u2019\n/usr/include/assert.h:79: error: expected initializer before \u2018__THROW\u2019\n/usr/include/assert.h:85: error: expected initializer before \u2018__THROW\u2019\nIn file included from ../deps/fnmatch/fnmatch.c:67:\n/usr/include/ctype.h:82: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:84: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:86: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:102: error: expected constructor, destructor, or type conversion before \u2018extern\u2019\n/usr/include/ctype.h:103: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:104: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:105: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:106: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:107: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:108: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:109: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:110: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:111: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:112: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:116: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:119: error: expected initializer before \u2018__THROW\u2019\n- a few hundred more lines \n. this worked\n. 1.1.0 is the latest npm version that installs without errors. BTW I'm using node v0.4.2-pre\n. Awesome. Thanks.\n. Successfully built on OS X and Ubuntu.\n. Same problem here: Linux desktop 2.6.32-27-generic #49-Ubuntu SMP Thu Dec 2 00:51:09 UTC 2010 x86_64 GNU/Linux.\nDidn't have this problem on OS X.\n. [2/4] cxx: deps/fnmatch/fnmatch.c -> build/default/deps/fnmatch/fnmatch_2.o\nIn file included from ../deps/fnmatch/fnmatch.c:66:\n/usr/include/assert.h:73: error: expected initializer before \u2018__THROW\u2019\n/usr/include/assert.h:79: error: expected initializer before \u2018__THROW\u2019\n/usr/include/assert.h:85: error: expected initializer before \u2018__THROW\u2019\nIn file included from ../deps/fnmatch/fnmatch.c:67:\n/usr/include/ctype.h:82: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:84: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:86: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:102: error: expected constructor, destructor, or type conversion before \u2018extern\u2019\n/usr/include/ctype.h:103: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:104: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:105: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:106: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:107: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:108: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:109: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:110: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:111: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:112: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:116: error: expected initializer before \u2018__THROW\u2019\n/usr/include/ctype.h:119: error: expected initializer before \u2018__THROW\u2019\n- a few hundred more lines \n. this worked\n. 1.1.0 is the latest npm version that installs without errors. BTW I'm using node v0.4.2-pre\n. Awesome. Thanks.\n. Successfully built on OS X and Ubuntu.\n. ",
    "cschram": "Same as dachev, I'm running Ubuntu 10.10 x64.\n. Same as dachev, I'm running Ubuntu 10.10 x64.\n. ",
    "timjb": "I get the same error on Fedora 14 regardless of the number of entries.\n. Btw, on my new installation of Fedora 14 it's working fine.\n. I get the same error on Fedora 14 regardless of the number of entries.\n. Btw, on my new installation of Fedora 14 it's working fine.\n. ",
    "dunkfordyce": "this is biting me too - any progress/fix for this?\n. of course now i read the docs i see GLOB_LIMIT should not be set and everything works as expected. Personally id say this flag shouldnt be set by default - or a big fat warning should be in the docs.\n. this is biting me too - any progress/fix for this?\n. of course now i read the docs i see GLOB_LIMIT should not be set and everything works as expected. Personally id say this flag shouldnt be set by default - or a big fat warning should be in the docs.\n. ",
    "weepy": "actually it seems that this error occurs not with a simple 'node app.js', but when it's run via cluster. clust(\"./app.js\")\n. version 0.3.15\n. i don't think it's the lack of re-building. \n. that seemed to work ! nice one\nOn Sat, Mar 12, 2011 at 5:32 PM, isaacs \nreply@reply.github.comwrote:\n\nIf you do npm bundle rebuild glob then does it work?  What's the output\nof npm when you install the package with the bundled glob in it?\nhttps://github.com/isaacs/node-glob/issues/12#comment_863974\n. ^^_^^\n. actually it seems that this error occurs not with a simple 'node app.js', but when it's run via cluster. clust(\"./app.js\")\n. version 0.3.15\n. i don't think it's the lack of re-building. \n. that seemed to work ! nice one\n\nOn Sat, Mar 12, 2011 at 5:32 PM, isaacs \nreply@reply.github.comwrote:\n\nIf you do npm bundle rebuild glob then does it work?  What's the output\nof npm when you install the package with the bundled glob in it?\nhttps://github.com/isaacs/node-glob/issues/12#comment_863974\n. ^^_^^\n. \n",
    "cjohansen": ":facepalm: Sorry for the noob bug report.\n1. 2.0.6\n2. Linux Mint (Ubuntu 10.10)\n3. 0.4.0\n4. Hmm, think Github mangled my pattern. */.js is meaningless, and it doesn't trigger the segfault. The pattern I tried was **/*.js\n. Still have the problem on node 0.4.5. It's interesting; it really doesn't want that pattern - glob(\"./**/*.js\") also segfaults, while somedir/**/*.js does not.\nPorting to JavaScript: +1 :)\n. If you want to tell a gdb noob how, and I'd love to help :)\nInterestingly, the path.resolve approach also segfaults. Maybe it just hates my directory? :)\n. Heh, seems this bug report is here to make me look bad... Sorry.\nReading symbols from /home/christian/local/bin/node...done.\n(gdb) set args g.js\n(gdb) run\nStarting program: /home/christian/local/bin/node g.js\n[Thread debugging using libthread_db enabled]\n[New Thread 0x7fffd1f42700 (LWP 8183)]\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7fffd1f42700 (LWP 8183)]\n0x00007fffd1f4a16b in g_lstat (fn=0x0, sb=0x0, pglob=0x0) at ../deps/glob/glob.c:1156\n1156    {\n. Cool. Thanks for being so helpful!\n. :facepalm: Sorry for the noob bug report.\n1. 2.0.6\n2. Linux Mint (Ubuntu 10.10)\n3. 0.4.0\n4. Hmm, think Github mangled my pattern. */.js is meaningless, and it doesn't trigger the segfault. The pattern I tried was **/*.js\n. Still have the problem on node 0.4.5. It's interesting; it really doesn't want that pattern - glob(\"./**/*.js\") also segfaults, while somedir/**/*.js does not.\nPorting to JavaScript: +1 :)\n. If you want to tell a gdb noob how, and I'd love to help :)\nInterestingly, the path.resolve approach also segfaults. Maybe it just hates my directory? :)\n. Heh, seems this bug report is here to make me look bad... Sorry.\nReading symbols from /home/christian/local/bin/node...done.\n(gdb) set args g.js\n(gdb) run\nStarting program: /home/christian/local/bin/node g.js\n[Thread debugging using libthread_db enabled]\n[New Thread 0x7fffd1f42700 (LWP 8183)]\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7fffd1f42700 (LWP 8183)]\n0x00007fffd1f4a16b in g_lstat (fn=0x0, sb=0x0, pglob=0x0) at ../deps/glob/glob.c:1156\n1156    {\n. Cool. Thanks for being so helpful!\n. ",
    "Sharpie": "+1\n. +1\n. ",
    "gbelote": "Ah, thanks! Upgrading fixed the issue :-)\n. Ah, thanks! Upgrading fixed the issue :-)\n. ",
    "theblackunknown": "I had some warning (still about casting) but everything seem to work so far. Thanks !\nShould I stay on node v0.4.11 or can i do anything to make node-glob work on later version ?\n. I would like to help you or doing it myself but I'm still learning javascript.\nWell, let see if I can make a pull request about this in the future :)\n. I had some warning (still about casting) but everything seem to work so far. Thanks !\nShould I stay on node v0.4.11 or can i do anything to make node-glob work on later version ?\n. I would like to help you or doing it myself but I'm still learning javascript.\nWell, let see if I can make a pull request about this in the future :)\n. ",
    "gildo": "Output with clang:\nIn file included from ../deps/glob/glob.c:85:==============================>                                                               ][0.031s]\n../deps/glob/glob.h:73:32: warning: declaration of 'struct stat' will not be visible outside of this function\n        int (_gl_lstat)(const char , __gl_stat_t );\n                                      ^\n../deps/glob/glob.h:53:28: note: instantiated from:\nIn file included from ../deps/glob/glob.c:85:\ndefine __gl_stat_t     struct stat\n                           ^\n\n../deps/glob/glob.h:73:32../deps/glob/glob.h:74:31: warning: : warning: declaration of 'struct stat' will not be visible outside of this function\ndeclaration of 'struct stat' will not be visible outside of this function\n        int (gl_lstat)(const char , __gl_stat_t );        int (_gl_stat)(const char , __gl_stat_t *);\n                                     ^\n^\n../deps/glob/glob.h:53:28:../deps/glob/glob.h:53:28: note: instantiated from:\n note: instantiated from:\ndefine __gl_stat_t     struct stat\n                           ^\n\ndefine __gl_stat_t     struct stat\n                           ^\n\n../deps/glob/glob.h:74:31: warning: declaration of 'struct stat' will not be visible outside of this function\n        int (_gl_stat)(const char , __gl_stat_t );\n                                     ^\n../deps/glob/glob.h:53:28: note: instantiated from:\ndefine __gl_stat_t     struct stat\n                           ^\n\n../deps/glob/glob.c:1166:36: warning: incompatible pointer types passing 'struct stat ' to parameter of type 'struct stat '\n    return (pglob->gl_lstat)(buf, sb);\n                                   ^~\n../deps/glob/glob.c:1182:35: warning: incompatible pointer types passing 'struct stat ' to parameter of type 'struct stat '\n    return (pglob->gl_stat)(buf, sb);\n                                  ^~\n../deps/glob/glob.c:1166:36: warning: incompatible pointer types passing 'struct stat ' to parameter of type 'struct stat '\n    return (pglob->gl_lstat)(buf, sb);\n                                   ^~\n../deps/glob/glob.c:1182:35: warning: incompatible pointer types passing 'struct stat ' to parameter of type 'struct stat '\n    return (pglob->gl_stat)(buf, sb);\n                                  ^~\n../src/glob.cc:15:17: warning: using directive refers to implicitly-defined namespace 'std'\nusing namespace std;\n                ^\n../src/glob.cc:55:1: warning: control reaches end of non-void function [-Wreturn-type]\n}\n^\n../src/glob.cc:150:21: error: no matching function for call to 'eio_custom'\n  eio_req* eioret = eio_custom(EIO_Glob, EIO_PRI_DEFAULT, EIO_GlobAfter, gr);\n                    ^~~~~~~~~~\nIn file included from ../src/glob.cc:7:\nIn file included from ../src/glob_constants.h:4:\nIn file included from /usr/include/node/node.h:42:\n/usr/include/node/eio.h:334:10: note: candidate function not viable: no known conversion from 'int (eio_req )' to 'void ()(eio_req )' for 1st\n      argument\neio_req eio_custom    (void (_execute)(eio_req ), int pri, eio_cb cb, void data);\n         ^\n2 warnings and 1 error generated.\n4 warnings generated.\n4 warnings generated.\nWaf: Leaving directory `/home/gildo/pub/node-glob/build'\nBuild failed:  -> task failed (err #1): \n    {task: cxx glob.cc -> glob_3.o}\n. Output with clang:\nIn file included from ../deps/glob/glob.c:85:==============================>                                                               ][0.031s]\n../deps/glob/glob.h:73:32: warning: declaration of 'struct stat' will not be visible outside of this function\n        int (_gl_lstat)(const char , __gl_stat_t );\n                                      ^\n../deps/glob/glob.h:53:28: note: instantiated from:\nIn file included from ../deps/glob/glob.c:85:\ndefine __gl_stat_t     struct stat\n                           ^\n\n../deps/glob/glob.h:73:32../deps/glob/glob.h:74:31: warning: : warning: declaration of 'struct stat' will not be visible outside of this function\ndeclaration of 'struct stat' will not be visible outside of this function\n        int (gl_lstat)(const char , __gl_stat_t );        int (_gl_stat)(const char , __gl_stat_t *);\n                                     ^\n^\n../deps/glob/glob.h:53:28:../deps/glob/glob.h:53:28: note: instantiated from:\n note: instantiated from:\ndefine __gl_stat_t     struct stat\n                           ^\n\ndefine __gl_stat_t     struct stat\n                           ^\n\n../deps/glob/glob.h:74:31: warning: declaration of 'struct stat' will not be visible outside of this function\n        int (_gl_stat)(const char , __gl_stat_t );\n                                     ^\n../deps/glob/glob.h:53:28: note: instantiated from:\ndefine __gl_stat_t     struct stat\n                           ^\n\n../deps/glob/glob.c:1166:36: warning: incompatible pointer types passing 'struct stat ' to parameter of type 'struct stat '\n    return (pglob->gl_lstat)(buf, sb);\n                                   ^~\n../deps/glob/glob.c:1182:35: warning: incompatible pointer types passing 'struct stat ' to parameter of type 'struct stat '\n    return (pglob->gl_stat)(buf, sb);\n                                  ^~\n../deps/glob/glob.c:1166:36: warning: incompatible pointer types passing 'struct stat ' to parameter of type 'struct stat '\n    return (pglob->gl_lstat)(buf, sb);\n                                   ^~\n../deps/glob/glob.c:1182:35: warning: incompatible pointer types passing 'struct stat ' to parameter of type 'struct stat '\n    return (pglob->gl_stat)(buf, sb);\n                                  ^~\n../src/glob.cc:15:17: warning: using directive refers to implicitly-defined namespace 'std'\nusing namespace std;\n                ^\n../src/glob.cc:55:1: warning: control reaches end of non-void function [-Wreturn-type]\n}\n^\n../src/glob.cc:150:21: error: no matching function for call to 'eio_custom'\n  eio_req* eioret = eio_custom(EIO_Glob, EIO_PRI_DEFAULT, EIO_GlobAfter, gr);\n                    ^~~~~~~~~~\nIn file included from ../src/glob.cc:7:\nIn file included from ../src/glob_constants.h:4:\nIn file included from /usr/include/node/node.h:42:\n/usr/include/node/eio.h:334:10: note: candidate function not viable: no known conversion from 'int (eio_req )' to 'void ()(eio_req )' for 1st\n      argument\neio_req eio_custom    (void (_execute)(eio_req ), int pri, eio_cb cb, void data);\n         ^\n2 warnings and 1 error generated.\n4 warnings generated.\n4 warnings generated.\nWaf: Leaving directory `/home/gildo/pub/node-glob/build'\nBuild failed:  -> task failed (err #1): \n    {task: cxx glob.cc -> glob_3.o}\n. ",
    "julesfern": "Ah - my apologies. I'll have to rig a JS version in the meantime then. Thanks for responding.\n. Thanks! You're an officer and a gentleman.\n. Ah - my apologies. I'll have to rig a JS version in the meantime then. Thanks for responding.\n. Thanks! You're an officer and a gentleman.\n. ",
    "augustl": "The minimatch library has a different API and does not implement file system traversal. Perhaps it's a god idea to keep node-glob alive in order to not break all projects that depend on node-glob?\n. So the plan is to update the glob module by depending on minimatch and using the fs module to traverse the file system?\n. The minimatch library has a different API and does not implement file system traversal. Perhaps it's a god idea to keep node-glob alive in order to not break all projects that depend on node-glob?\n. So the plan is to update the glob module by depending on minimatch and using the fs module to traverse the file system?\n. ",
    "kuno": "See 'eio_custom' in here\n. See 'eio_custom' in here\n. ",
    "airhorns": "Would be awesome if this could get some attention.\n. Would be awesome if this could get some attention.\n. ",
    "isaacsanders": "Doesn't work in 0.7.0.pre.\n. Doesn't work in 0.7.0.pre.\n. ",
    "wdavidw": "Do you know by any chance a place where new package recommendations, libuv usage or other documentation are at least partially described? I couldn't find anything on node wiki/api/blog websites\n. Sorry, i forgot to thank you for pushing this new version: )\n. Do you know by any chance a place where new package recommendations, libuv usage or other documentation are at least partially described? I couldn't find anything on node wiki/api/blog websites\n. Sorry, i forgot to thank you for pushing this new version: )\n. ",
    "domenic": "Are there alternative packages or modules that do?\n. Are there alternative packages or modules that do?\n. ",
    "adrai": "Probably this will be better with node v0.8.x?\n. Probably this will be better with node v0.8.x?\n. ",
    "TooTallNate": "Nice! Confirmed it works now :)\nOn Tue, Jan 17, 2012 at 6:45 PM, Isaac Z. Schlueter\nreply@reply.github.com\nwrote:\n\nd'oh. \u00a0Thanks!\nMerged into master and --force published to npm.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/isaacs/node-glob/pull/27#issuecomment-3540046\n. I think you need to git push.\n. @isaacs This was an unexpected change for me as well. What's the deal?\n. We're having to do something ghetto like this after the glob result to \"normalize\":\n\n`` js\nvar cwd = process.cwd();\nfunction fix (f) {\n  if (f[0] === '/') {\n    // Good\n    return f;\n  } else {\n    //glob` stripped CWD...\n    return path.join(cwd, f);\n  }\n}\nresult = result.map(fix);\n```\n. Nice! Confirmed it works now :)\nOn Tue, Jan 17, 2012 at 6:45 PM, Isaac Z. Schlueter\nreply@reply.github.com\nwrote:\n\nd'oh. \u00a0Thanks!\nMerged into master and --force published to npm.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/isaacs/node-glob/pull/27#issuecomment-3540046\n. I think you need to git push.\n. @isaacs This was an unexpected change for me as well. What's the deal?\n. We're having to do something ghetto like this after the glob result to \"normalize\":\n\n`` js\nvar cwd = process.cwd();\nfunction fix (f) {\n  if (f[0] === '/') {\n    // Good\n    return f;\n  } else {\n    //glob` stripped CWD...\n    return path.join(cwd, f);\n  }\n}\nresult = result.map(fix);\n```\n. ",
    "kilianc": "damn! :)\n. damn! :)\n. ",
    "cadorn": "Cannot tell because glob is not working for me at all now. Seems to be a regression. Locked to 3.0.x for now. No time to look further ATM.\n. No error. Exact same input, now no output.\nCode: https://github.com/sourcemint/bundler-js/blob/fa9e5a02e25e189b1d6efe6f53d6f399552798b7/lib/bundler.js#L176-196\nBroad test case: https://github.com/sourcemint/platform-nodejs (npm test)\nThings should fail.\nI'll try and narrow things down when I have time if you don't beat me to it.\n. Ah, that would explain it. What is the exat difference between the cwd and root options?\n. I thought that is what cwd is for. Can you explain the difference?\n. Why not default root to cwd which defaults to process.cwd() and always return relative path from root in result.\nPrefixing root to result paths requires me to strip it again in most cases (I need relative paths from a given root). Also, if you pass in root it is trivial for you to map the result array after and prefix root if you need to.\nSo result paths always start with / so you can do PATH.existsSync(root + result[x]) where root may be /etc and result[x] = /hosts.\n. v3.1.4 works now. Thanks.\n. Cannot tell because glob is not working for me at all now. Seems to be a regression. Locked to 3.0.x for now. No time to look further ATM.\n. No error. Exact same input, now no output.\nCode: https://github.com/sourcemint/bundler-js/blob/fa9e5a02e25e189b1d6efe6f53d6f399552798b7/lib/bundler.js#L176-196\nBroad test case: https://github.com/sourcemint/platform-nodejs (npm test)\nThings should fail.\nI'll try and narrow things down when I have time if you don't beat me to it.\n. Ah, that would explain it. What is the exat difference between the cwd and root options?\n. I thought that is what cwd is for. Can you explain the difference?\n. Why not default root to cwd which defaults to process.cwd() and always return relative path from root in result.\nPrefixing root to result paths requires me to strip it again in most cases (I need relative paths from a given root). Also, if you pass in root it is trivial for you to map the result array after and prefix root if you need to.\nSo result paths always start with / so you can do PATH.existsSync(root + result[x]) where root may be /etc and result[x] = /hosts.\n. v3.1.4 works now. Thanks.\n. ",
    "jnordberg": "Yep, installed bash4 and all tests pass. However i still can't get negating patterns to work\nbash\n~/Development/node-glob\n$ ls\nREADME.md    examples     glob.js      negate.js    node_modules package.json test\n~/Development/node-glob\n$ ls *.!(js)\nREADME.md    package.json\n~/Development/node-glob\n$ node -e \"require('./')('*.!(js)', console.log)\"\nnull []\nAm i missing something?\n. Ok, seems like it comes from minimatch, i'll open an issue there.\n. Yep, installed bash4 and all tests pass. However i still can't get negating patterns to work\nbash\n~/Development/node-glob\n$ ls\nREADME.md    examples     glob.js      negate.js    node_modules package.json test\n~/Development/node-glob\n$ ls *.!(js)\nREADME.md    package.json\n~/Development/node-glob\n$ node -e \"require('./')('*.!(js)', console.log)\"\nnull []\nAm i missing something?\n. Ok, seems like it comes from minimatch, i'll open an issue there.\n. ",
    "panta": "On Mon, Mar 12, 2012 at 7:06 PM, Isaac Z. Schlueter <\nreply@reply.github.com\n\nwrote:\nNevertheless, fixed in glob 3.1.6 :)\n\ncool, thanks :-) but I took this as a chance to upgrade node :-)\nCheers,\nMarco\n\nMarco Pantaleoni\n. On Mon, Mar 12, 2012 at 7:06 PM, Isaac Z. Schlueter <\nreply@reply.github.com\n\nwrote:\nNevertheless, fixed in glob 3.1.6 :)\n\ncool, thanks :-) but I took this as a chance to upgrade node :-)\nCheers,\nMarco\n\nMarco Pantaleoni\n. ",
    "eldargab": "``` javascript\nvar glob = new Glob\nglob.include('a/b/c')\nglob.include('d/e')\nglob.exclude('test')\nglob.on('match', doSomeThing)\n. It should satisfy.\n. javascript\nvar glob = new Glob\nglob.include('a/b/c')\nglob.include('d/e')\nglob.exclude('test')\nglob.on('match', doSomeThing)\n```\n. It should satisfy.\n. ",
    "callumlocke": "@isaacs can you clarify, where is IgnoreFile?\n. @isaacs can you clarify, where is IgnoreFile?\n. ",
    "contra": "Trying to do this currently, did anyone ever figure out anything to solve the problem?\n. Every implementation right now just globs everything and then checks the negations afterwards. When dealing with something like this ['**/*.js', '!node_modules/**'] the performance is awful because node-glob is still traversing the node_modules folder and finding results. This needs to be solved in node-glob itself otherwise the perf is going to stay bad. I think we can get a sizable bounty on this if somebody wants to dig in and make a PR for adding this.\n. I'm willing to personally put up $500 for a fix for this - not sure if I should do a bountysource or whatever to make that official\n. I've put up some stuff on bountysource for this and a few other issues on node-glob if anyone is interested\n. @joakimbeng Yeah in glob-stream we do some unspeakable things to get multi-glob support with negations working. We do a glob on each of the positive globs then pass them through all of the negative globs after the fact, which is horrible for perf but was a quick way to get that working. It will actually recurse node_modules still :(\n. @UltCombo Yeah this would solve our problem\n. @isaacs Have a minute to explain the reasoning? I'm just trying to make it easier for people in developing nations/trains/planes/cheap internet to use npm.\n. @isaacs gulp has a few dependencies that depend on glob, sometimes different versions. with glob being ~500k each install of gulp has about 1.5-2mb of the glob module. personally this isn't a huge deal for me, but I have had users raise the issue and I figured i would relay it for them to the appropriate modules\n. @isaacs Yep, this lets us start processing files as soon as they are found vs. waiting for the whole glob to be finished. Thanks for the quick fix!\n. Any thoughts on this @isaacs ?\n. @UltCombo thanks for taking the time to benchmark it :+1: \nSo I put $100 on bountysource for this but it was on the other issue #, not sure how to move it over here but I'll contact them about that.\n. multi-glob support and a streaming API would completely solve our issues and perf bottlenecks in gulp and I'm sure in a lot of other projects\n. Oooooooohhhhhhh!\nWaiting on a PR for glob-stream now to incorporate this. Thanks @isaacs \n:balloon: \n. @vegetableman Sent - thanks!\n. Any progress on this?\n. Trying to do this currently, did anyone ever figure out anything to solve the problem?\n. Every implementation right now just globs everything and then checks the negations afterwards. When dealing with something like this ['**/*.js', '!node_modules/**'] the performance is awful because node-glob is still traversing the node_modules folder and finding results. This needs to be solved in node-glob itself otherwise the perf is going to stay bad. I think we can get a sizable bounty on this if somebody wants to dig in and make a PR for adding this.\n. I'm willing to personally put up $500 for a fix for this - not sure if I should do a bountysource or whatever to make that official\n. I've put up some stuff on bountysource for this and a few other issues on node-glob if anyone is interested\n. @joakimbeng Yeah in glob-stream we do some unspeakable things to get multi-glob support with negations working. We do a glob on each of the positive globs then pass them through all of the negative globs after the fact, which is horrible for perf but was a quick way to get that working. It will actually recurse node_modules still :(\n. @UltCombo Yeah this would solve our problem\n. @isaacs Have a minute to explain the reasoning? I'm just trying to make it easier for people in developing nations/trains/planes/cheap internet to use npm.\n. @isaacs gulp has a few dependencies that depend on glob, sometimes different versions. with glob being ~500k each install of gulp has about 1.5-2mb of the glob module. personally this isn't a huge deal for me, but I have had users raise the issue and I figured i would relay it for them to the appropriate modules\n. @isaacs Yep, this lets us start processing files as soon as they are found vs. waiting for the whole glob to be finished. Thanks for the quick fix!\n. Any thoughts on this @isaacs ?\n. @UltCombo thanks for taking the time to benchmark it :+1: \nSo I put $100 on bountysource for this but it was on the other issue #, not sure how to move it over here but I'll contact them about that.\n. multi-glob support and a streaming API would completely solve our issues and perf bottlenecks in gulp and I'm sure in a lot of other projects\n. Oooooooohhhhhhh!\nWaiting on a PR for glob-stream now to incorporate this. Thanks @isaacs \n:balloon: \n. @vegetableman Sent - thanks!\n. Any progress on this?\n. ",
    "kapouer": "thank you.\n. thank you.\n. ",
    "joewhite": "When I try this, I do get results, although they're a bit odd.\n```\n\nglob.sync('/temp/*.txt')\n[ '\\temp/1.txt' ]\n```\n\nThe initial / is unexpectedly replaced with a \\, but I do get results. Using glob@3.1.9 with Node v0.6.12 on Windows 7 64-bit.\n. When I try this, I do get results, although they're a bit odd.\n```\n\nglob.sync('/temp/*.txt')\n[ '\\temp/1.txt' ]\n```\n\nThe initial / is unexpectedly replaced with a \\, but I do get results. Using glob@3.1.9 with Node v0.6.12 on Windows 7 64-bit.\n. ",
    "unknownbrackets": "The issue here is that this line:\nread = prefix = path.join(\"/\", prefix)\nOn windows turns into:\nread = prefix = \"\\\"\nWhich it then prepends onto things here:\nif (prefix !== \"/\") e = prefix + \"/\" + e\nThe same line is causing issues for drive letters in issue 42.\n-[Unknown]\n. The basic problem seems to be here:\nread = prefix = path.join(\"/\", prefix)\nEssentially this turns it into /c:/temp/ which ain't right.\nIf I skip that for win32 (basically ignoring UNC, drives, etc.), and just use the else branch, it works fine.  That said, I'm not really interested in all the other features (like mounting) that this might possibly break, so probably nothing patch quality...\nThis is somewhat related to issue 40.\nActually, there's also another issue.  Using e.g. c:/* splits into:\nc:\n*\nWhich of course has a different meaning on Windows.  c:* means current directory, c:* means root of c:.  This could affect any drive letter.  I was able to work around this with basically this in the default case:\nif (process.platform == \"win32\" && prefix.length === 2 && prefix[1] === \":\")\nThough I'm not sure if this is a complete fix either.\n-[Unknown]\n. The issue here is that this line:\nread = prefix = path.join(\"/\", prefix)\nOn windows turns into:\nread = prefix = \"\\\"\nWhich it then prepends onto things here:\nif (prefix !== \"/\") e = prefix + \"/\" + e\nThe same line is causing issues for drive letters in issue 42.\n-[Unknown]\n. The basic problem seems to be here:\nread = prefix = path.join(\"/\", prefix)\nEssentially this turns it into /c:/temp/ which ain't right.\nIf I skip that for win32 (basically ignoring UNC, drives, etc.), and just use the else branch, it works fine.  That said, I'm not really interested in all the other features (like mounting) that this might possibly break, so probably nothing patch quality...\nThis is somewhat related to issue 40.\nActually, there's also another issue.  Using e.g. c:/* splits into:\nc:\n*\nWhich of course has a different meaning on Windows.  c:* means current directory, c:* means root of c:.  This could affect any drive letter.  I was able to work around this with basically this in the default case:\nif (process.platform == \"win32\" && prefix.length === 2 && prefix[1] === \":\")\nThough I'm not sure if this is a complete fix either.\n-[Unknown]\n. ",
    "springmeyer": "I just hit this as well. I worked around it by passing in the absolute path for the cwd option, and then a relative path for the actual search term.\n. I just hit this as well. I worked around it by passing in the absolute path for the cwd option, and then a relative path for the actual search term.\n. ",
    "kylealanhale": "I had thought this was a minimatch problem, so I left a comment there outlining the inconsistencies: https://github.com/isaacs/minimatch/pull/11#issuecomment-9188506.\nFor now I am doing pretty much what @springmeyer suggested, with a normalization step following to clean up the weird path separators.\n. I had thought this was a minimatch problem, so I left a comment there outlining the inconsistencies: https://github.com/isaacs/minimatch/pull/11#issuecomment-9188506.\nFor now I am doing pretty much what @springmeyer suggested, with a normalization step following to clean up the weird path separators.\n. ",
    "Filirom1": "Oh yes you're right, it's more complex than I thought :/\nProgrammatically it's easier to call glob(\"**/*.js\", \"**/*.coffee\", options, cb) than glob(\"**/*.(js|coffee)\", options, cb), but if the sugar syntax change the behaviour it's not good.\n. Oh yes you're right, it's more complex than I thought :/\nProgrammatically it's easier to call glob(\"**/*.js\", \"**/*.coffee\", options, cb) than glob(\"**/*.(js|coffee)\", options, cb), but if the sugar syntax change the behaviour it's not good.\n. ",
    "cowboy": "Any thoughts on this issue?\n. I'm still seeing this behavior in v3.1.11. What's the point of the nonull setting if it doesn't return the originally-specified pattern in the array when files aren't matched?\nPer the readme:\n\nnonull Set to never return an empty set, instead returning a set containing the pattern itself. This is the default in glob(3).\n. Awesome.\n. In case this helps in any way, when I use the mark option, matched directories have trailing slashes, although the files list still contains non-directories when it shouldn't\n\nOS X (this works as-expected):\n```\n$ node -pe \"require('glob').sync('d/', {mark: true})\"\n[ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\n$ node -pe \"require('glob').sync('d//', {mark: true})\"\n[ 'deep/', 'deep/deeper/', 'deep/deeper/deepest/' ]\n```\nWindows (the trailing mark slashes are correct, but non-directories should be removed from the result set in the 2nd example):\n```\nC:\\test>node -pe \"require('glob').sync('d/', {mark: true})\"\n[ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\nC:\\test>node -pe \"require('glob').sync('d//', {mark: true})\"\n[ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\n```\n. Is this entirely handled in minimatch, or is it in glob as well? I'm finding it difficult to puzzle through this one.\n. Testing with the latest minimatch, I get this:\njs\nvar mm = require(\"minimatch\");\nmm.match([\"foo.txt\", \"Foo.txt\"], \"Foo.txt\", {}) // [ 'Foo.txt' ]\nmm.match([\"foo.txt\", \"Foo.txt\"], \"Foo.txt\", {nocase: true}) // [ 'foo.txt', 'Foo.txt' ]\nSo I'm guessing the problem isn't in minimatch at all.\n. Could it be as simple as, if nocase is set, just iterating over pattern and entries and calling .toLowerCase() before any comparison is done?\nhttps://github.com/isaacs/node-glob/blob/master/glob.js#L413-L429\nFWIW, I can barely debug my own code, let alone someone else's. This is probably about as far as I'll be able to go with this.\n. I seems like this chunk of code shouldn't be done in _finish but should instead be done as matches are found:\nhttps://github.com/isaacs/node-glob/blob/e0d4fb09f39285cc79b2d6a7a38cc727d67def87/glob.js#L217-L232\n. Thanks so much @isaacs and @isaacbw, works great here!\n. Actually, I hate to say it, but I think this fix has caused a regression.\nGiven the same script, glob@3.2.8 in Node.js 0.8.26 yields this output:\nmatch: deep/deep.txt\nmatch: deep/deeper/\nmatch: deep/deeper/deeper.txt\nmatch: deep/deeper/deepest/\nmatch: deep/deeper/deepest/deepest.txt\n[ 'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\nmatch: deep/\nglob@3.2.7 in Node.js 0.8.26 yields this output:\nmatch: deep/deep.txt\nmatch: deep/deeper\nmatch: deep/deeper/deeper.txt\nmatch: deep/deeper/deepest\nmatch: deep/deeper/deepest/deepest.txt\nmatch: deep\n[ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\n. It's the same script as in the OP.\n. Glob pattern '**' seems to work fine, but pattern '**d*/**' fails intermittently. I added an \"end\" listener to the script:\n``` js\nvar glob = require('glob');\nvar g = glob.Glob('d*/', {mark: true}, function(err, result) {\n  console.log('cb', result);\n});\ng.on('match', function(filepath) {\n  console.log('match: %s', filepath);\n});\ng.on('end', function(result) {\n  console.log('end', result);\n});\n```\nResult (WTF)\n```\n$ node sample.js\nmatch: deep/deep.txt\nmatch: deep/deeper/\nmatch: deep/deeper/deeper.txt\nmatch: deep/deeper/deepest/\nmatch: deep/deeper/deepest/deepest.txt\ncb [ 'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\nend [ 'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\nmatch: deep/\n$ node sample.js\nmatch: deep/deep.txt\nmatch: deep/deeper/\nmatch: deep/deeper/deeper.txt\nmatch: deep/deeper/deepest/\nmatch: deep/\nmatch: deep/deeper/deepest/deepest.txt\ncb [ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\nend [ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\n```\n. OS X 10.8.5, Node v0.8.26.\n. FWIW, the script appears to work 100% of the time with glob@3.2.7 but fails randomly with glob@3.2.8. I'm switching back and forth between the two glob versions here.\n. And it definitely failed when I ran a test that used the mark option in Travis-CI:\nhttps://travis-ci.org/cowboy/node-globule/jobs/16657629\n. Dude, I have no idea. I wish you could SSH into my laptop to see this.\n. Yeah, trying yours now.\n. Maybe it's because I have other files in there. I didn't think about that. Can you replicate this dir structure?\n```\n$ cat g.js\nvar glob = require('glob');\nvar assert = require('assert');\nvar endEmitted = false;\nvar g = glob.Glob('d*/', {mark: true}, function(err, result) {\n  endEmitted = true;\n  console.log('cb', result);\n});\ng.on('match', function(filepath) {\n  assert(!endEmitted);\n  console.log('match: %s', filepath);\n});\ng.on('end', function(result) {\n  endEmitted = true;\n  console.log('end', result);\n});\n$ tree\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 baz.css\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 qux.css\n\u251c\u2500\u2500 deep\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 deep.txt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 deeper\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 deeper.txt\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 deepest\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 deepest.txt\n\u251c\u2500\u2500 g.js\n\u2514\u2500\u2500 js\n    \u251c\u2500\u2500 bar.js\n    \u2514\u2500\u2500 foo.js\n5 directories, 9 files\n$ for i in $(seq 1 10000); do node g.js >/dev/null || break; done\nassert.js:102\n  throw new assert.AssertionError({\n        ^\nAssertionError: false == true\n    at Glob. (/Users/cowboy/repos/cowboy/node-globule/test/fixtures/expand/g.js:11:3)\n    at Glob.EventEmitter.emit (events.js:96:17)\n    at Glob._processEmitQueue (/Users/cowboy/repos/cowboy/node-globule/node_modules/glob/glob.js:313:10)\n    at Glob._pushMatch (/Users/cowboy/repos/cowboy/node-globule/node_modules/glob/glob.js:287:8)\n    at Glob.emitMatch (/Users/cowboy/repos/cowboy/node-globule/node_modules/glob/glob.js:296:14)\n    at process.startup.processNextTick.process._tickCallback (node.js:245:9)\n``\n. NICE\n. You may want to reopen this issue. Or did you open another one?\n. Linking this to #81 for tracking purposes.\n. And FWIW,minimatch@0.2.14` returns the pattern itself, which is different:\njs\nvar minimatch = require(\"minimatch\");\nminimatch.match([], \"*.{a,b,c}\", {nonull: true}) // [ '*.{a,b,c}' ]\n. Any thoughts on this issue?\n. I'm still seeing this behavior in v3.1.11. What's the point of the nonull setting if it doesn't return the originally-specified pattern in the array when files aren't matched?\nPer the readme:\n\nnonull Set to never return an empty set, instead returning a set containing the pattern itself. This is the default in glob(3).\n. Awesome.\n. In case this helps in any way, when I use the mark option, matched directories have trailing slashes, although the files list still contains non-directories when it shouldn't\n\nOS X (this works as-expected):\n```\n$ node -pe \"require('glob').sync('d/', {mark: true})\"\n[ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\n$ node -pe \"require('glob').sync('d//', {mark: true})\"\n[ 'deep/', 'deep/deeper/', 'deep/deeper/deepest/' ]\n```\nWindows (the trailing mark slashes are correct, but non-directories should be removed from the result set in the 2nd example):\n```\nC:\\test>node -pe \"require('glob').sync('d/', {mark: true})\"\n[ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\nC:\\test>node -pe \"require('glob').sync('d//', {mark: true})\"\n[ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\n```\n. Is this entirely handled in minimatch, or is it in glob as well? I'm finding it difficult to puzzle through this one.\n. Testing with the latest minimatch, I get this:\njs\nvar mm = require(\"minimatch\");\nmm.match([\"foo.txt\", \"Foo.txt\"], \"Foo.txt\", {}) // [ 'Foo.txt' ]\nmm.match([\"foo.txt\", \"Foo.txt\"], \"Foo.txt\", {nocase: true}) // [ 'foo.txt', 'Foo.txt' ]\nSo I'm guessing the problem isn't in minimatch at all.\n. Could it be as simple as, if nocase is set, just iterating over pattern and entries and calling .toLowerCase() before any comparison is done?\nhttps://github.com/isaacs/node-glob/blob/master/glob.js#L413-L429\nFWIW, I can barely debug my own code, let alone someone else's. This is probably about as far as I'll be able to go with this.\n. I seems like this chunk of code shouldn't be done in _finish but should instead be done as matches are found:\nhttps://github.com/isaacs/node-glob/blob/e0d4fb09f39285cc79b2d6a7a38cc727d67def87/glob.js#L217-L232\n. Thanks so much @isaacs and @isaacbw, works great here!\n. Actually, I hate to say it, but I think this fix has caused a regression.\nGiven the same script, glob@3.2.8 in Node.js 0.8.26 yields this output:\nmatch: deep/deep.txt\nmatch: deep/deeper/\nmatch: deep/deeper/deeper.txt\nmatch: deep/deeper/deepest/\nmatch: deep/deeper/deepest/deepest.txt\n[ 'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\nmatch: deep/\nglob@3.2.7 in Node.js 0.8.26 yields this output:\nmatch: deep/deep.txt\nmatch: deep/deeper\nmatch: deep/deeper/deeper.txt\nmatch: deep/deeper/deepest\nmatch: deep/deeper/deepest/deepest.txt\nmatch: deep\n[ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\n. It's the same script as in the OP.\n. Glob pattern '**' seems to work fine, but pattern '**d*/**' fails intermittently. I added an \"end\" listener to the script:\n``` js\nvar glob = require('glob');\nvar g = glob.Glob('d*/', {mark: true}, function(err, result) {\n  console.log('cb', result);\n});\ng.on('match', function(filepath) {\n  console.log('match: %s', filepath);\n});\ng.on('end', function(result) {\n  console.log('end', result);\n});\n```\nResult (WTF)\n```\n$ node sample.js\nmatch: deep/deep.txt\nmatch: deep/deeper/\nmatch: deep/deeper/deeper.txt\nmatch: deep/deeper/deepest/\nmatch: deep/deeper/deepest/deepest.txt\ncb [ 'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\nend [ 'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\nmatch: deep/\n$ node sample.js\nmatch: deep/deep.txt\nmatch: deep/deeper/\nmatch: deep/deeper/deeper.txt\nmatch: deep/deeper/deepest/\nmatch: deep/\nmatch: deep/deeper/deepest/deepest.txt\ncb [ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\nend [ 'deep/',\n  'deep/deep.txt',\n  'deep/deeper/',\n  'deep/deeper/deeper.txt',\n  'deep/deeper/deepest/',\n  'deep/deeper/deepest/deepest.txt' ]\n```\n. OS X 10.8.5, Node v0.8.26.\n. FWIW, the script appears to work 100% of the time with glob@3.2.7 but fails randomly with glob@3.2.8. I'm switching back and forth between the two glob versions here.\n. And it definitely failed when I ran a test that used the mark option in Travis-CI:\nhttps://travis-ci.org/cowboy/node-globule/jobs/16657629\n. Dude, I have no idea. I wish you could SSH into my laptop to see this.\n. Yeah, trying yours now.\n. Maybe it's because I have other files in there. I didn't think about that. Can you replicate this dir structure?\n```\n$ cat g.js\nvar glob = require('glob');\nvar assert = require('assert');\nvar endEmitted = false;\nvar g = glob.Glob('d*/', {mark: true}, function(err, result) {\n  endEmitted = true;\n  console.log('cb', result);\n});\ng.on('match', function(filepath) {\n  assert(!endEmitted);\n  console.log('match: %s', filepath);\n});\ng.on('end', function(result) {\n  endEmitted = true;\n  console.log('end', result);\n});\n$ tree\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 baz.css\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 qux.css\n\u251c\u2500\u2500 deep\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 deep.txt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 deeper\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 deeper.txt\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 deepest\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 deepest.txt\n\u251c\u2500\u2500 g.js\n\u2514\u2500\u2500 js\n    \u251c\u2500\u2500 bar.js\n    \u2514\u2500\u2500 foo.js\n5 directories, 9 files\n$ for i in $(seq 1 10000); do node g.js >/dev/null || break; done\nassert.js:102\n  throw new assert.AssertionError({\n        ^\nAssertionError: false == true\n    at Glob. (/Users/cowboy/repos/cowboy/node-globule/test/fixtures/expand/g.js:11:3)\n    at Glob.EventEmitter.emit (events.js:96:17)\n    at Glob._processEmitQueue (/Users/cowboy/repos/cowboy/node-globule/node_modules/glob/glob.js:313:10)\n    at Glob._pushMatch (/Users/cowboy/repos/cowboy/node-globule/node_modules/glob/glob.js:287:8)\n    at Glob.emitMatch (/Users/cowboy/repos/cowboy/node-globule/node_modules/glob/glob.js:296:14)\n    at process.startup.processNextTick.process._tickCallback (node.js:245:9)\n``\n. NICE\n. You may want to reopen this issue. Or did you open another one?\n. Linking this to #81 for tracking purposes.\n. And FWIW,minimatch@0.2.14` returns the pattern itself, which is different:\njs\nvar minimatch = require(\"minimatch\");\nminimatch.match([], \"*.{a,b,c}\", {nonull: true}) // [ '*.{a,b,c}' ]\n. ",
    "benatkin": "On this line: https://github.com/isaacs/node-glob/blob/master/glob.js#L181\ns/nou/all/\nIf that's the only bug causing this behavior it ought to fix it.\n. On this line: https://github.com/isaacs/node-glob/blob/master/glob.js#L181\ns/nou/all/\nIf that's the only bug causing this behavior it ought to fix it.\n. ",
    "taichi": "@isaacs Why doesn't it merge?\n. thanks for your time.\n. @isaacs Why doesn't it merge?\n. thanks for your time.\n. ",
    "mojit0": "https://github.com/isaacs/node-graceful-fs/pull/8 appears to resolve the issue.\n. https://github.com/isaacs/node-graceful-fs/pull/8 appears to resolve the issue.\n. ",
    "dignifiedquire": "I'll have a look at it tomorrow.\n. Well I actually did that, but I never got around to fix anything. The first big problem is that basically nothing of the test suite is working on windows.\n1. isaacs/node-tap#57 results that one needs to specify every single file in the test cmd if you want to run it.\n2. All the bash tests don't work because, well there is no bash on Windows.\nAside from that I did some digging into the code to find out what was going wrong but I couldn't really figure out what was happening without a unix machine to compare. As soon as I get my Windows VM up and running I'll take another look. \n. I'll have a look at it tomorrow.\n. Well I actually did that, but I never got around to fix anything. The first big problem is that basically nothing of the test suite is working on windows.\n1. isaacs/node-tap#57 results that one needs to specify every single file in the test cmd if you want to run it.\n2. All the bash tests don't work because, well there is no bash on Windows.\nAside from that I did some digging into the code to find out what was going wrong but I couldn't really figure out what was happening without a unix machine to compare. As soon as I get my Windows VM up and running I'll take another look. \n. ",
    "satazor": "It seems that I was using an older version of glob. It seems fixed.\n. @isaacs thats really strange because the same gives me an empty array.\nI've tested this in two windows 7 machines with the same result. I noticed that you did cat in the command line, which is not available. Are you running that in cygwin or similar? I'm running the same tests in a normal cmd.exe.\nI'm using glob@3.1.17. If I install glob@3.1.14 everything works fine.\n. Version glob@3.1.15 is also fine, but glob@3.1.16 has the issue. Something after it is the culprit.\n. v.0.8.16, going to add some screenshots.\n. The test folder has one file called dsadsa.txt.\nRunning:\n``` js\nvar glob = require('glob');\nglob('test/*/', function (err, matches) {\n    console.log(matches);\n});\n```\n\nRunning:\n``` js\nvar glob = require('glob');\nglob(__dirname + '/test/*/', function (err, matches) {\n    console.log(matches);\n});\n```\n\n. @isaacs it was a typo typing the comment, the actual file contains the /\n. ``` js\nvar glob = require('glob');\nvar pattern = __dirname + '/test/*/';\nconsole.log('pattern is:', pattern);\nglob(pattern, function (err, matches) {\n    console.log(matches);\n});\n```\n\n. Also tried path.normalize before passing the pattern, same issue.\nMaybe the issue is related to the fact that the pattern contains backslahes?\n. Seems not.\n``` js\nvar glob = require('glob');\nvar pattern = (__dirname + '/test/*/').replace(/\\/g, '/');\nconsole.log('pattern is:', pattern);\nglob(pattern, function (err, matches) {\n    console.log(matches);\n});\n```\n..didn't fixed the issue.\nany thoughts?\n. I'm glad that you reproduced it. Looking forward for a new release that fixes this. Going to truncate glob on 3.1.15 for now.\n. @isaacs It now expands correctly but using mark: true does not mark directories with / or \\ at the end.\n. Please note that there's also some debug messages being printed:\nJOIN 5 / /Users/xxx/Work/test\nJOIN 6 / /Users/xxx/Work/test\nJOIN 0 / /Users/xxx/Work/test\nJOIN 1 / /Users/xxx/Work/test\n. Hmm not really but I will try it again later with my windows machine (I switched to MacOSX few weeks ago).\n. Still reproducible.\nRunning:\n``` js\nvar glob = require('glob');\nglob(__dirname + '\\', { mark: true }, function (err, matches) {\n    console.log(matches); // Contains the __dirname without the \\ or / added to the end\n});\n```\nOutputs:\n```\nC:\\Work\\test>node -v\nv0.10.4\nC:\\Work\\test>node test\n[ 'C:/Work/test' ]\nC:\\Work\\test>\n```\nFresh installed windows 7 x64 (virtual machine).\n. @isaacs can you reopen the issue?\n. I still have the same issue..\n```\nC:\\test>node -v\nv0.10.12\nC:\\test>node test.js\n[ 'C:/test' ]\n```\nUsing glob@3.2.1.\nAre you emulating windows by any chance?\n. That's fine, I'm using that too.\n. It seems that I was using an older version of glob. It seems fixed.\n. @isaacs thats really strange because the same gives me an empty array.\nI've tested this in two windows 7 machines with the same result. I noticed that you did cat in the command line, which is not available. Are you running that in cygwin or similar? I'm running the same tests in a normal cmd.exe.\nI'm using glob@3.1.17. If I install glob@3.1.14 everything works fine.\n. Version glob@3.1.15 is also fine, but glob@3.1.16 has the issue. Something after it is the culprit.\n. v.0.8.16, going to add some screenshots.\n. The test folder has one file called dsadsa.txt.\nRunning:\n``` js\nvar glob = require('glob');\nglob('test/*/', function (err, matches) {\n    console.log(matches);\n});\n```\n\nRunning:\n``` js\nvar glob = require('glob');\nglob(__dirname + '/test/*/', function (err, matches) {\n    console.log(matches);\n});\n```\n\n. @isaacs it was a typo typing the comment, the actual file contains the /\n. ``` js\nvar glob = require('glob');\nvar pattern = __dirname + '/test/*/';\nconsole.log('pattern is:', pattern);\nglob(pattern, function (err, matches) {\n    console.log(matches);\n});\n```\n\n. Also tried path.normalize before passing the pattern, same issue.\nMaybe the issue is related to the fact that the pattern contains backslahes?\n. Seems not.\n``` js\nvar glob = require('glob');\nvar pattern = (__dirname + '/test/*/').replace(/\\/g, '/');\nconsole.log('pattern is:', pattern);\nglob(pattern, function (err, matches) {\n    console.log(matches);\n});\n```\n..didn't fixed the issue.\nany thoughts?\n. I'm glad that you reproduced it. Looking forward for a new release that fixes this. Going to truncate glob on 3.1.15 for now.\n. @isaacs It now expands correctly but using mark: true does not mark directories with / or \\ at the end.\n. Please note that there's also some debug messages being printed:\nJOIN 5 / /Users/xxx/Work/test\nJOIN 6 / /Users/xxx/Work/test\nJOIN 0 / /Users/xxx/Work/test\nJOIN 1 / /Users/xxx/Work/test\n. Hmm not really but I will try it again later with my windows machine (I switched to MacOSX few weeks ago).\n. Still reproducible.\nRunning:\n``` js\nvar glob = require('glob');\nglob(__dirname + '\\', { mark: true }, function (err, matches) {\n    console.log(matches); // Contains the __dirname without the \\ or / added to the end\n});\n```\nOutputs:\n```\nC:\\Work\\test>node -v\nv0.10.4\nC:\\Work\\test>node test\n[ 'C:/Work/test' ]\nC:\\Work\\test>\n```\nFresh installed windows 7 x64 (virtual machine).\n. @isaacs can you reopen the issue?\n. I still have the same issue..\n```\nC:\\test>node -v\nv0.10.12\nC:\\test>node test.js\n[ 'C:/test' ]\n```\nUsing glob@3.2.1.\nAre you emulating windows by any chance?\n. That's fine, I'm using that too.\n. ",
    "kimjoar": "Thanks for the fast fix @isaacs. It works great for me now!\n. Btw, the fix in 9b4155a includes console.logs which I did not see in my tests on Windows, e.g. https://github.com/testacular/testacular/issues/336\n. Thanks for the fast fix @isaacs. It works great for me now!\n. Btw, the fix in 9b4155a includes console.logs which I did not see in my tests on Windows, e.g. https://github.com/testacular/testacular/issues/336\n. ",
    "caseywebdev": ":+1: \n. :+1: \n. ",
    "drewfish": "Ah, I see it's fixed already by 01671e3.\n. Ah, I see it's fixed already by 01671e3.\n. ",
    "kschzt": "is this the same issue? the absolute alternative below returns nothing:\n```\nvar g = require('glob')\nconsole.log(process.cwd())\ng('folder/*/.js', { cwd: process.cwd(), root: process.cwd() }, function(e, ps) {\n    console.log('non-absolute', ps)\n})\ng('/folder/*/.js', { cwd: process.cwd(), root: process.cwd() }, function(e, ps) {\n    console.log('absolute', ps)\n})\n``\n. @isaacs something like!(node_modules)should also list the entire tree, except for node_modules. This case is being incorrectly switched to https://github.com/isaacs/node-glob/blob/master/glob.js#L335 .. It then tries to stat'(node_modules)'`, which doesn't exist, and returns nothing. Easy to catch via https://github.com/isaacs/node-glob/blob/master/test/00-setup.js#L103\n. is this the same issue? the absolute alternative below returns nothing:\n```\nvar g = require('glob')\nconsole.log(process.cwd())\ng('folder/*/.js', { cwd: process.cwd(), root: process.cwd() }, function(e, ps) {\n    console.log('non-absolute', ps)\n})\ng('/folder/*/.js', { cwd: process.cwd(), root: process.cwd() }, function(e, ps) {\n    console.log('absolute', ps)\n})\n``\n. @isaacs something like!(node_modules)should also list the entire tree, except for node_modules. This case is being incorrectly switched to https://github.com/isaacs/node-glob/blob/master/glob.js#L335 .. It then tries to stat'(node_modules)'`, which doesn't exist, and returns nothing. Easy to catch via https://github.com/isaacs/node-glob/blob/master/test/00-setup.js#L103\n. ",
    "sakari": "I had a peek at this but the tests in master do not pass on windows 8 which makes it somewhat harder to start digging this.\n. righto, I'll put a new commit in\nwhat do you think in general? Does it look functionally correct?\n. @isaacs, as far as I can tell test/root.js tests this and it fails on windows when I remove ef4dfc1\nthe package.json change was just to get our side to take this into use as we foolishly set our dependencies to point to this branch. I hope you do not merge it :)\n. I had a peek at this but the tests in master do not pass on windows 8 which makes it somewhat harder to start digging this.\n. righto, I'll put a new commit in\nwhat do you think in general? Does it look functionally correct?\n. @isaacs, as far as I can tell test/root.js tests this and it fails on windows when I remove ef4dfc1\nthe package.json change was just to get our side to take this into use as we foolishly set our dependencies to point to this branch. I hope you do not merge it :)\n. ",
    "sindresorhus": ":+1: \n. :+1: \n. Check out globby\nglobs doesn't work correctly as it doesn't handle negates ['*', '!cake'] or filter out duplicates.\nI still think this should be built into node-glob though.\n. https://www.bountysource.com/issues/2761164-add-multi-glob-functionality-for-inclusion-exclusion\n. I'm getting the same test failures locally on master too. Might have something to do with needing to regenerate test fixtures, but running npm run test-regen fails for me:\n``\nnpm ERR! Darwin 14.1.0\nnpm ERR! argv \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"run\" \"test-regen\"\nnpm ERR! node v0.12.2\nnpm ERR! npm  v2.7.4\nnpm ERR! code ELIFECYCLE\nnpm ERR! glob@5.0.3 test-regen:npm run profclean && TEST_REGEN=1 node test/00-setup.js`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the glob@5.0.3 test-regen script 'npm run profclean && TEST_REGEN=1 node test/00-setup.js'.\nnpm ERR! This is most likely a problem with the glob package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     npm run profclean && TEST_REGEN=1 node test/00-setup.js\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls glob\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/sindresorhus/dev/node-glob/npm-debug.log\n```\n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. Check out globby\nglobs doesn't work correctly as it doesn't handle negates ['*', '!cake'] or filter out duplicates.\nI still think this should be built into node-glob though.\n. https://www.bountysource.com/issues/2761164-add-multi-glob-functionality-for-inclusion-exclusion\n. I'm getting the same test failures locally on master too. Might have something to do with needing to regenerate test fixtures, but running npm run test-regen fails for me:\n``\nnpm ERR! Darwin 14.1.0\nnpm ERR! argv \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"run\" \"test-regen\"\nnpm ERR! node v0.12.2\nnpm ERR! npm  v2.7.4\nnpm ERR! code ELIFECYCLE\nnpm ERR! glob@5.0.3 test-regen:npm run profclean && TEST_REGEN=1 node test/00-setup.js`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the glob@5.0.3 test-regen script 'npm run profclean && TEST_REGEN=1 node test/00-setup.js'.\nnpm ERR! This is most likely a problem with the glob package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     npm run profclean && TEST_REGEN=1 node test/00-setup.js\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls glob\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/sindresorhus/dev/node-glob/npm-debug.log\n```\n. :+1: \n. :+1: \n. ",
    "passy": ":+1:\n. :+1:\n. ",
    "SBoudrias": ":+1: \n. :+1: \n. ",
    "sheerun": "So what about it?\n. So what about it?\n. ",
    "bcardarella": "@isaacs I believe I have found the cause of the issue but need guidance on how best to fix.\nhttps://github.com/isaacs/minimatch/blob/master/minimatch.js#L237-L242\nIn minimatch: for any pattern that does not begin with a \"!\" the for loop is never run so the pattern is never marked as \"negated\". During the parse function the pattern is iterated over for any !s and will stringSub ^ to negate that pattern: https://github.com/isaacs/minimatch/blob/master/minimatch.js#L553\nparse never uses the negate flag to flip the pattern. This is why ./(!whatever) works but !(whatever) doesn't.\nThere could be two solutions:\n1. The easiest is to just remove parseNegate all together. This might be ideal as the parse function seems to be better about where to negate. the makeRe function doesn't seem to be used, but it does respect the negate flag: https://github.com/isaacs/minimatch/blob/master/minimatch.js#L806. So makeRe could be removed\n2. Refactor parse to use makeRe and respect the negate flag.\nThoughts on how to approach? I can work on the fix either way.\n. @isaacs I'm going to try to implement options 2 as the README seems to imply that makeRe is supposed to be used anyway.\n. Although now I'm confused. Upon further inspection this commit: https://github.com/isaacs/minimatch/commit/b458f5ddc281a07ca51de994f64e477191787b2a is from 2 and half years ago is when makeRe was removed from use in favor of parse. The commit message only mentions a \"rewrite\". Not really sure which is the best path to take. It seems that parse and makeRe are duplicating effort\n. @isaacs there were other failing tests in the bash-comparison.js test file\n. @isaacs I believe I have found the cause of the issue but need guidance on how best to fix.\nhttps://github.com/isaacs/minimatch/blob/master/minimatch.js#L237-L242\nIn minimatch: for any pattern that does not begin with a \"!\" the for loop is never run so the pattern is never marked as \"negated\". During the parse function the pattern is iterated over for any !s and will stringSub ^ to negate that pattern: https://github.com/isaacs/minimatch/blob/master/minimatch.js#L553\nparse never uses the negate flag to flip the pattern. This is why ./(!whatever) works but !(whatever) doesn't.\nThere could be two solutions:\n1. The easiest is to just remove parseNegate all together. This might be ideal as the parse function seems to be better about where to negate. the makeRe function doesn't seem to be used, but it does respect the negate flag: https://github.com/isaacs/minimatch/blob/master/minimatch.js#L806. So makeRe could be removed\n2. Refactor parse to use makeRe and respect the negate flag.\nThoughts on how to approach? I can work on the fix either way.\n. @isaacs I'm going to try to implement options 2 as the README seems to imply that makeRe is supposed to be used anyway.\n. Although now I'm confused. Upon further inspection this commit: https://github.com/isaacs/minimatch/commit/b458f5ddc281a07ca51de994f64e477191787b2a is from 2 and half years ago is when makeRe was removed from use in favor of parse. The commit message only mentions a \"rewrite\". Not really sure which is the best path to take. It seems that parse and makeRe are duplicating effort\n. @isaacs there were other failing tests in the bash-comparison.js test file\n. ",
    "kmiklas": "Thanks for your response, but I was looking for comments from those who had upgraded from the previous version (glob-whatev).\nWould you kindly re-open this issue for a few days?\nFor example, glob-whatev seems to default to synchronous operation, whereas glob defaults to async. To keep the behavior consistent, one must use\nvar glob = require('glob');\nglob.sync( ...stuff...)\n. Thanks for your response, but I was looking for comments from those who had upgraded from the previous version (glob-whatev).\nWould you kindly re-open this issue for a few days?\nFor example, glob-whatev seems to default to synchronous operation, whereas glob defaults to async. To keep the behavior consistent, one must use\nvar glob = require('glob');\nglob.sync( ...stuff...)\n. ",
    "qubyte": "Ouch. The issue immediately before this one... To be honest this isn't a deal-breaker for me. I could either go with the 'end' event and forEach the result (probably this one) or just let the duplicates in. It's all getting fed to mocha which seems to de-dupe internally anyway. I'll leave it open for now, and I'll see if there's anything I can contribute to the code in my next free time bin.\n. Nice! Thanks again. :)\n. Ouch. The issue immediately before this one... To be honest this isn't a deal-breaker for me. I could either go with the 'end' event and forEach the result (probably this one) or just let the duplicates in. It's all getting fed to mocha which seems to de-dupe internally anyway. I'll leave it open for now, and I'll see if there's anything I can contribute to the code in my next free time bin.\n. Nice! Thanks again. :)\n. ",
    "chbrown": "I haven't read the glob source; how do the post-processing methods (like the 'end' event or a naked glob()) de-dupe? If it's by using object keys as a set data structure, couldn't the same be applied in the streaming scenario?\n. Thanks, @isaacs!\n. I haven't read the glob source; how do the post-processing methods (like the 'end' event or a naked glob()) de-dupe? If it's by using object keys as a set data structure, couldn't the same be applied in the streaming scenario?\n. Thanks, @isaacs!\n. ",
    "danielgindi": "Still an issue. Globbing a folder with a depth of 1 subfolder, and total of 1.5 million files - takes up 12GB of memory. While it should be about 100MB.. Still an issue. Globbing a folder with a depth of 1 subfolder, and total of 1.5 million files - takes up 12GB of memory. While it should be about 100MB.. ",
    "bajtos": "I can confirm that npm test fails on Windows with the version 3.2.1 and passes in the branch rocketpack:fix-absolute-paths-on-windows\nI am using glob to get full paths of files under a given folder:\nglob(\n   '/**/*.js',\n   { root: 'c:\\path\\to\\folder' },\n   callback\n);\nThis does not work on Windows with the version 3.2.1 but works with the branch rocketpack:fix-absolute-paths-on-windows.\n. :clap: \n. :+1: \n. Related: #139\n. Thanks. I don't have time to work on this right now, but perhaps one of Node Inspector users will be willing to contribute the patch.\n. I can confirm that npm test fails on Windows with the version 3.2.1 and passes in the branch rocketpack:fix-absolute-paths-on-windows\nI am using glob to get full paths of files under a given folder:\nglob(\n   '/**/*.js',\n   { root: 'c:\\path\\to\\folder' },\n   callback\n);\nThis does not work on Windows with the version 3.2.1 but works with the branch rocketpack:fix-absolute-paths-on-windows.\n. :clap: \n. :+1: \n. Related: #139\n. Thanks. I don't have time to work on this right now, but perhaps one of Node Inspector users will be willing to contribute the patch.\n. ",
    "bretkikehara": "I can also confirm that the patch works.\nSystem specs\nWindows 8 64 bit\nnode version 0.10.13 64 bit\nFixing C drive assumption\nI have added a pull request for fixing the assumption that the tests will be run on the C drive.\nhttps://github.com/rocketpack/node-glob/pull/1\nFixing glob is not found error message\nAt first I had some trouble running the code since glob was not found. It seems that the tap module needs glob.\nOpen the terminal inside the tap module (whether this is in global or the local modules). Install glob inside of this module, then drop a copy of the glob source into tap's glob module folder.\n\ngit clone https://github.com/rocketpack/node-glob.git\nnpm install .\ncd node_modules/tap\nnpm install glob\nxcopy .\\glob.js node_modules\\tap\\node_modules\\glob\\ /Y\n. I can also confirm that the patch works.\n\nSystem specs\nWindows 8 64 bit\nnode version 0.10.13 64 bit\nFixing C drive assumption\nI have added a pull request for fixing the assumption that the tests will be run on the C drive.\nhttps://github.com/rocketpack/node-glob/pull/1\nFixing glob is not found error message\nAt first I had some trouble running the code since glob was not found. It seems that the tap module needs glob.\nOpen the terminal inside the tap module (whether this is in global or the local modules). Install glob inside of this module, then drop a copy of the glob source into tap's glob module folder.\n\ngit clone https://github.com/rocketpack/node-glob.git\nnpm install .\ncd node_modules/tap\nnpm install glob\nxcopy .\\glob.js node_modules\\tap\\node_modules\\glob\\ /Y\n. \n",
    "ilanbiala": "What effect would this have usage-wise?\n. @isaacs looks like something got fixed :) I think you can close this, no?\n. A changelog would be great. @isaacs do you mean a tool to generate it automatically? I know that some open-source projects use an automated changelog creator, but their commits are phrased a certain way like with AngularJS.\n. @isaacs does ignore accept glob syntax as well?\n. What effect would this have usage-wise?\n. @isaacs looks like something got fixed :) I think you can close this, no?\n. A changelog would be great. @isaacs do you mean a tool to generate it automatically? I know that some open-source projects use an automated changelog creator, but their commits are phrased a certain way like with AngularJS.\n. @isaacs does ignore accept glob syntax as well?\n. ",
    "jessejlt": "Note, on new installations of jshint 2.1.4, which uses glob >= 3.1.4, jshint is unable to run due to the unmet dependency. \n. Note, on new installations of jshint 2.1.4, which uses glob >= 3.1.4, jshint is unable to run due to the unmet dependency. \n. ",
    "kruppel": "@isaacs I know you mentioned this was fixed, https://twitter.com/izs/status/359711279264444416, but, just a heads up, there're still failing tests in v3.2.5.\n. @isaacs I know you mentioned this was fixed, https://twitter.com/izs/status/359711279264444416, but, just a heads up, there're still failing tests in v3.2.5.\n. ",
    "jasonkuhrt": "The problem was that I was installing using --dev instead of --save-dev.\n@isaacs Still, this may be a bug so leaving open for you to close or resolve.\n. The problem was that I was installing using --dev instead of --save-dev.\n@isaacs Still, this may be a bug so leaving open for you to close or resolve.\n. ",
    "treet": "Yes, I've run into this problem too. The readme states to only use forward slashes on Windows, but I'm wondering what the reasoning behind that restriction is.\nIs there any fundamental problem that prevents implementing support for UNC paths?\n. Yes, I've run into this problem too. The readme states to only use forward slashes on Windows, but I'm wondering what the reasoning behind that restriction is.\nIs there any fundamental problem that prevents implementing support for UNC paths?\n. ",
    "gotdibbs": "@treet To be honest, I haven't had time to ramp up on node-globs code base to take a look at how support for this would work just yet. However, FYI this came up for me because Azure seems to use only UNC paths.\n. @treet To be honest, I haven't had time to ramp up on node-globs code base to take a look at how support for this would work just yet. However, FYI this came up for me because Azure seems to use only UNC paths.\n. ",
    "tuxracer": "As a workaround I've used:\njavascript\npath = require('path');\nglob.sync(filename).map(function (item) {\n  return path.resolve(item);\n});\nExample: https://github.com/tuxracer/stylus-import-tree/blob/master/src/index.coffee\n. As a workaround I've used:\njavascript\npath = require('path');\nglob.sync(filename).map(function (item) {\n  return path.resolve(item);\n});\nExample: https://github.com/tuxracer/stylus-import-tree/blob/master/src/index.coffee\n. ",
    "s-trooper": "i have the same problem.\ni use plain js and the workaround don't help me.\n. i have the same problem.\ni use plain js and the workaround don't help me.\n. ",
    "staticshock": "Have a look at this pull request, which purports to implement decent UNC path handling. \\\\host\\dirname is basically treated as if they were a drive letter, like C:, so wildcards don't work on that portion of the path, just like *: wouldn't have worked for a drive letter.\nThat can probably be improved, but, alas, I couldn't figure out a quick way to do it, because path.resolve(\"\\\\\\\\host\") gets treated as a relative path and resolves to $PWD\\host, so \\\\host can't be used as a valid root.\n. I looked into it a bit more, and found another reason why \\\\host\\dirname should probably remain as the root: fs.readdirSync(\"\\\\\\\\host\") doesn't work anyway:\n```\n\nfs.readdirSync(\"\\\\vboxsvr\")\nError: ENOENT, no such file or directory 'C:\\vboxsvr'\n    at Object.fs.readdirSync (evalmachine.:654:18)\n    at repl:1:5\n    at REPLServer.self.eval (repl.js:110:21)\n    at Interface. (repl.js:239:12)\n    at Interface.EventEmitter.emit (events.js:95:17)\n    at Interface._onLine (readline.js:202:10)\n    at Interface._line (readline.js:531:8)\n    at Interface._ttyWrite (readline.js:760:14)\n    at ReadStream.onkeypress (readline.js:99:10)\n    at ReadStream.EventEmitter.emit (events.js:98:17)\nfs.readdirSync(\"\\\\vboxsvr\\test\")\n[ 'child1',\n  'child2' ]\n``\n. Updated the PR to work with v4.2. I can change it further if youthrow Feedback()at me.\n. No problem. I was thinking a bit about #123, though, and I realized that they have roughly the same solution, so here's a modified pull request that should fix the other issue as well (basically I just replacedisUncwithisAbsolute.)\n. I've already submitted a test case that works on Windows, and haven't really had any time to look at it since then. So if you tackle this, make sure your approach meets @isaacs's \"must run on linux\" criterion.\n. Why not just expand the glob and check.length?\n. Superseded by #140\n. The root cause is that minimatch might return a regex forpattern[0]`, which glob.js isn't ready for:\n\n``` javascript\n// Good minimatch pattern (nocase === false):\npattern = [\n  \"C:\",\n  \"Temp\",\n  /^(?!.)(?=.)[^/]*?.txt$/\n]\nprefix = \"C:/Temp\"\n// Bad minimatch pattern (nocase === true):\npattern = [\n  /^(?=.)C:$/,\n  /^(?=.)Temp$/,\n  /^(?!.)(?=.)[^/]?.txt$/\n]\nprefix = null  // ...fails to match ./C:/Temp/.txt\n```\n. See pull request #146 for a fix\n. Superseded by #146\n. Yep, here you go. I'm not really good at node.js stuff, so let me know if this is on the right track. I have no idea if it's possible to create network shares without launching a subprocess, for instance. Also, no idea if global-leakage.js is going haywire here. Right now I'm seeing this on OS X, and I don't know what it means:\n```\nassert.js:93\n  throw new assert.AssertionError({\n        ^\nAssertionError: \"ArrayBuffer:Buffer:DTRACE_HTTP_CLIENT_REQUEST:DTRACE_HTTP_CLIENT_RESPONSE:DTRACE_HTTP_SERVER_REQUEST:DTRACE_HTTP_SERVER_RESPONS == \"ArrayBuffer:Buffer:DTRACE_HTTP_CLIENT_REQUEST:DTRACE_HTTP_CLIENT_RESPONSE:DTRACE_HTTP_SERVER_REQUEST:DTRACE_HTTP_SERVER_RESPONS\n    at process. (/Users/abacker/Dropbox/Projects/node-glob/test/global-leakage.js:10:10)\n    at process.emit (events.js:95:17)\nnot ok test/unc-paths.js ................................ 0/1\n    Command: \"/usr/local/Cellar/node/0.10.36/bin/node unc-paths.js\"\n    TAP version 13\n    not ok 1 test/unc-paths.js\n      ---\n        exit:    8\n        stderr:  |\n          assert.js:93\n            throw new assert.AssertionError({\n                  ^\n          AssertionError: \"ArrayBuffer:Buffer:DTRACE_HTTP_CLIENT_REQUEST:DTRACE_HTTP_CLIENT_RESPONSE:DTRACE_HTTP_SERVER_REQUEST:DTRACE_HTTP_SERVER_RESPONS == \"ArrayBuffer:Buffer:DTRACE_HTTP_CLIENT_REQUEST:DTRACE_HTTP_CLIENT_RESPONSE:DTRACE_HTTP_SERVER_REQUEST:DTRACE_HTTP_SERVER_RESPONS\n              at process. (/Users/abacker/Dropbox/Projects/node-glob/test/global-leakage.js:10:10)\n              at process.emit (events.js:95:17)\n        command: \"/usr/local/Cellar/node/0.10.36/bin/node unc-paths.js\"\n      ...\n1..1\n# tests 1\n# fail  1\n\n``\n. Ah, I guess global-leakage.js was testing for the presence 'TAP_Global_Harness'. Fixed in the new version.\n. I worry that I might mock something inexactly, and the tests would pass on unix and somehow still fail on Windows anyway. For instance, how should I simulate a case-insensitive stat call on a potentially case sensitive file system?\n. @isaacs, I explored your suggestion briefly, and I don't think mocking thefscalls plays nicely with the current implementation. Specifically, I ran into a problem mockingpath.resolve, and haven't figured out a solution yet. I have a separate [\"work in progress\" branch](https://github.com/staticshock/node-glob/commits/unc-path-tests) that demonstrates the attempt, and it doesn't really work on Windows or Linux.\n. Have a look at this pull request, which purports to implement decent UNC path handling.\\host\\dirnameis basically treated as if they were a drive letter, likeC:, so wildcards don't work on that portion of the path, just like*:` wouldn't have worked for a drive letter.\nThat can probably be improved, but, alas, I couldn't figure out a quick way to do it, because path.resolve(\"\\\\\\\\host\") gets treated as a relative path and resolves to $PWD\\host, so \\\\host can't be used as a valid root.\n. I looked into it a bit more, and found another reason why \\\\host\\dirname should probably remain as the root: fs.readdirSync(\"\\\\\\\\host\") doesn't work anyway:\n```\n\nfs.readdirSync(\"\\\\vboxsvr\")\nError: ENOENT, no such file or directory 'C:\\vboxsvr'\n    at Object.fs.readdirSync (evalmachine.:654:18)\n    at repl:1:5\n    at REPLServer.self.eval (repl.js:110:21)\n    at Interface. (repl.js:239:12)\n    at Interface.EventEmitter.emit (events.js:95:17)\n    at Interface._onLine (readline.js:202:10)\n    at Interface._line (readline.js:531:8)\n    at Interface._ttyWrite (readline.js:760:14)\n    at ReadStream.onkeypress (readline.js:99:10)\n    at ReadStream.EventEmitter.emit (events.js:98:17)\nfs.readdirSync(\"\\\\vboxsvr\\test\")\n[ 'child1',\n  'child2' ]\n``\n. Updated the PR to work with v4.2. I can change it further if youthrow Feedback()at me.\n. No problem. I was thinking a bit about #123, though, and I realized that they have roughly the same solution, so here's a modified pull request that should fix the other issue as well (basically I just replacedisUncwithisAbsolute.)\n. I've already submitted a test case that works on Windows, and haven't really had any time to look at it since then. So if you tackle this, make sure your approach meets @isaacs's \"must run on linux\" criterion.\n. Why not just expand the glob and check.length?\n. Superseded by #140\n. The root cause is that minimatch might return a regex forpattern[0]`, which glob.js isn't ready for:\n\n``` javascript\n// Good minimatch pattern (nocase === false):\npattern = [\n  \"C:\",\n  \"Temp\",\n  /^(?!.)(?=.)[^/]*?.txt$/\n]\nprefix = \"C:/Temp\"\n// Bad minimatch pattern (nocase === true):\npattern = [\n  /^(?=.)C:$/,\n  /^(?=.)Temp$/,\n  /^(?!.)(?=.)[^/]?.txt$/\n]\nprefix = null  // ...fails to match ./C:/Temp/.txt\n```\n. See pull request #146 for a fix\n. Superseded by #146\n. Yep, here you go. I'm not really good at node.js stuff, so let me know if this is on the right track. I have no idea if it's possible to create network shares without launching a subprocess, for instance. Also, no idea if global-leakage.js is going haywire here. Right now I'm seeing this on OS X, and I don't know what it means:\n```\nassert.js:93\n  throw new assert.AssertionError({\n        ^\nAssertionError: \"ArrayBuffer:Buffer:DTRACE_HTTP_CLIENT_REQUEST:DTRACE_HTTP_CLIENT_RESPONSE:DTRACE_HTTP_SERVER_REQUEST:DTRACE_HTTP_SERVER_RESPONS == \"ArrayBuffer:Buffer:DTRACE_HTTP_CLIENT_REQUEST:DTRACE_HTTP_CLIENT_RESPONSE:DTRACE_HTTP_SERVER_REQUEST:DTRACE_HTTP_SERVER_RESPONS\n    at process. (/Users/abacker/Dropbox/Projects/node-glob/test/global-leakage.js:10:10)\n    at process.emit (events.js:95:17)\nnot ok test/unc-paths.js ................................ 0/1\n    Command: \"/usr/local/Cellar/node/0.10.36/bin/node unc-paths.js\"\n    TAP version 13\n    not ok 1 test/unc-paths.js\n      ---\n        exit:    8\n        stderr:  |\n          assert.js:93\n            throw new assert.AssertionError({\n                  ^\n          AssertionError: \"ArrayBuffer:Buffer:DTRACE_HTTP_CLIENT_REQUEST:DTRACE_HTTP_CLIENT_RESPONSE:DTRACE_HTTP_SERVER_REQUEST:DTRACE_HTTP_SERVER_RESPONS == \"ArrayBuffer:Buffer:DTRACE_HTTP_CLIENT_REQUEST:DTRACE_HTTP_CLIENT_RESPONSE:DTRACE_HTTP_SERVER_REQUEST:DTRACE_HTTP_SERVER_RESPONS\n              at process. (/Users/abacker/Dropbox/Projects/node-glob/test/global-leakage.js:10:10)\n              at process.emit (events.js:95:17)\n        command: \"/usr/local/Cellar/node/0.10.36/bin/node unc-paths.js\"\n      ...\n1..1\n# tests 1\n# fail  1\n\n``\n. Ah, I guess global-leakage.js was testing for the presence 'TAP_Global_Harness'. Fixed in the new version.\n. I worry that I might mock something inexactly, and the tests would pass on unix and somehow still fail on Windows anyway. For instance, how should I simulate a case-insensitive stat call on a potentially case sensitive file system?\n. @isaacs, I explored your suggestion briefly, and I don't think mocking thefscalls plays nicely with the current implementation. Specifically, I ran into a problem mockingpath.resolve`, and haven't figured out a solution yet. I have a separate \"work in progress\" branch that demonstrates the attempt, and it doesn't really work on Windows or Linux.\n. ",
    "tomwayson": "This is keeping me from being able to use grunt-contrib-config to copy files from a network file share w/o first having to map the drive in Windows.\n. This is keeping me from being able to use grunt-contrib-config to copy files from a network file share w/o first having to map the drive in Windows.\n. ",
    "stefanpenner": "Ah, just ran into this one as well. I can confirm that @staticshock's fix appears to work.\n@isaacs just a friendly reminder in-case this one has falling off your radar.\n. > Nothing can be landed in this library with a valid test. I'm sorry for being so strict about this, but it's the only thing that makes maintenance of this module even remotely possible.\nI absolutely agree, good coverage is paramount.\nI was sending the ping, not to merge, but to make sure you had not forgotten the issue in the first place. As there may have been a small chance you have time to address your own concerns. I suspect based on the comment you do not.\nAlthough I have a work-around, I would prefer to not have to play wack-a-mole going forward. So let me see if I can nail down that test case for you this afternoon.\n. @isaacs ah, it seems like this library should actually be run on a windows CI as well. What are your thoughts on this? I will gladly do the work to make it run on appveyor. \nBut, If it must provide \"full coverage\" on *nix, I can also dig in. Although doing it elegantly might require some more refactoring.\n. > Windows CI would be awesome, and I'd greatly appreciate getting this module running somewhere. But it's not a replacement for a test that runs on Unix.\nproposed resolution:\n- get this project working running / testing on appveyor\n- ensure @staticshock's scenario is also testable in some way on nix\nc/d ?\n. > Yes, plus one, would merge. I suggest hijacking or mocking whatever is necessary to make the patch in #146 testable on unix. That's actually all that's missing from getting to UNC support; appveyor is optional.\nAlright, I will look into this later this afternoon. I refuse to play wack-a-mole, so I am down for doing the leg work to @staticshock's fix in.\n. > I haven't had time to dig into this particular issue. @stefanpenner made a courageous attempt, but then seems to have faded away with an ominous last message about a Pandora's Box.\nI also forgot about it after a vacation. Adding it to my calendar, will revive this weekend.\n. If memory serves a mixture of UNC and cwd was the pandoras box I noticed. Basically if cwd was a UNC path, fun things would happen.\nMy PR (although some more massaging needed)  even without the cwd support, would be a really good step in the correct direction. Fixing all the scenarios I could come across, except if a user changed the cwd to a UNC path. I suspect the cwd stuff could also be tackled, but maybe at a later time.\n@isaacs would you be alright with improved UNC support being merged, but leaving some scenarios related to cwd also being on a UNC path for a future PR ?\nAlthough not ideal, it would likely fix most users problems, without introducing any known regressions.\n. @staticshock  & @isaacs I believe this is ready for review. I'll gladly make changes, so keep me posted.\n. ~~the faking code needs more work actually, although the final code works in windows. The test fails, investigating further.~~ that specific test passes in windows now, but many other unrelated failures exist.\n. > What do you think?\nI'm on-board with passing platform in. In-fact it was something I considered but opting out of merely to avoid a more controversial PR. So if you are +1, I'll make it so.\nJust a heads-up I'll likely have time again tomorrow to work on this. That being said, with more drastic changes I will likely want to get all the windows tests working. So the changes will likely be a-bit more involved. Is that ok?\n. > Of course, bigger PR size tends to make for more back and forth in the review process, but I think we're pretty aligned on what needs to happen for this.\nYa I'm fine with thorough back + forth, as this module had 11,577,444 downloads in the last month quality and compatibility should be of upmost priority.\n. @isaacs sorry for the delay, been under the weather. Anyways, this is ready for another review.\nOne question (and the last failing test), is path in node 0.10.x doesn't have path[platform]...\n- should I polyfil it ?\n- am i missing something more obvious ?\n. @isaacs whats the ideal way to detect node 10? Something like https://www.npmjs.com/package/nversion ? Or a funky regexp\n. > If you wanna just leave the tests failing in 0.10, that's fine, too. I can work it out when I merge it in. If it's passing in 0.12 and io.js, then I can take it from there :)\nI'll add the skip :package: \n\nOk, just reviewed. The test looks perfect, and nothing in the code jumps out at me as problematic.\n\n:+1: \n\nIf you think this is ready to go, I can merge and release this weekend or early next week.\n\nMy use-cases work correct, I tried several ways to break it and couldn't find anything. I am fairly confident. But full disclosure, my windows-foo is weak.\nAlso, I will be on vacation new week. So if you release I wont be able to deal with fall-out, it will be on you. If you wait a week, I can help out with any fall out.\nYour call sir.\n. sorry, i am unclear why the skip isn't working as expected :(\n. lets actually hold off, I may have noticed other scenarios... such pandora's box.\n. rebased, going to fire up the old windows gaming rig after breakfast and see whats next.\n. Tests should now correctly run, even on old versions of node. Switching to windows now, lets see whats left on this side of things.\n. @isaacs i have added the appveyor configuration, is it possible for you to set up the appveyor.com side of things? I would doit, but then node-glob would end-up stefanpenner/node-glob on appveyor.\nIt should be as simple as singing up for the free tier, and adding this repository. As for making the tests pass on windows, I have put together a short triage list, and will work on them this afternoon. If I run into any blockers, I will report back.\n. Ah, just ran into this one as well. I can confirm that @staticshock's fix appears to work.\n@isaacs just a friendly reminder in-case this one has falling off your radar.\n. > Nothing can be landed in this library with a valid test. I'm sorry for being so strict about this, but it's the only thing that makes maintenance of this module even remotely possible.\nI absolutely agree, good coverage is paramount.\nI was sending the ping, not to merge, but to make sure you had not forgotten the issue in the first place. As there may have been a small chance you have time to address your own concerns. I suspect based on the comment you do not.\nAlthough I have a work-around, I would prefer to not have to play wack-a-mole going forward. So let me see if I can nail down that test case for you this afternoon.\n. @isaacs ah, it seems like this library should actually be run on a windows CI as well. What are your thoughts on this? I will gladly do the work to make it run on appveyor. \nBut, If it must provide \"full coverage\" on *nix, I can also dig in. Although doing it elegantly might require some more refactoring.\n. > Windows CI would be awesome, and I'd greatly appreciate getting this module running somewhere. But it's not a replacement for a test that runs on Unix.\nproposed resolution:\n- get this project working running / testing on appveyor\n- ensure @staticshock's scenario is also testable in some way on nix\nc/d ?\n. > Yes, plus one, would merge. I suggest hijacking or mocking whatever is necessary to make the patch in #146 testable on unix. That's actually all that's missing from getting to UNC support; appveyor is optional.\nAlright, I will look into this later this afternoon. I refuse to play wack-a-mole, so I am down for doing the leg work to @staticshock's fix in.\n. > I haven't had time to dig into this particular issue. @stefanpenner made a courageous attempt, but then seems to have faded away with an ominous last message about a Pandora's Box.\nI also forgot about it after a vacation. Adding it to my calendar, will revive this weekend.\n. If memory serves a mixture of UNC and cwd was the pandoras box I noticed. Basically if cwd was a UNC path, fun things would happen.\nMy PR (although some more massaging needed)  even without the cwd support, would be a really good step in the correct direction. Fixing all the scenarios I could come across, except if a user changed the cwd to a UNC path. I suspect the cwd stuff could also be tackled, but maybe at a later time.\n@isaacs would you be alright with improved UNC support being merged, but leaving some scenarios related to cwd also being on a UNC path for a future PR ?\nAlthough not ideal, it would likely fix most users problems, without introducing any known regressions.\n. @staticshock  & @isaacs I believe this is ready for review. I'll gladly make changes, so keep me posted.\n. ~~the faking code needs more work actually, although the final code works in windows. The test fails, investigating further.~~ that specific test passes in windows now, but many other unrelated failures exist.\n. > What do you think?\nI'm on-board with passing platform in. In-fact it was something I considered but opting out of merely to avoid a more controversial PR. So if you are +1, I'll make it so.\nJust a heads-up I'll likely have time again tomorrow to work on this. That being said, with more drastic changes I will likely want to get all the windows tests working. So the changes will likely be a-bit more involved. Is that ok?\n. > Of course, bigger PR size tends to make for more back and forth in the review process, but I think we're pretty aligned on what needs to happen for this.\nYa I'm fine with thorough back + forth, as this module had 11,577,444 downloads in the last month quality and compatibility should be of upmost priority.\n. @isaacs sorry for the delay, been under the weather. Anyways, this is ready for another review.\nOne question (and the last failing test), is path in node 0.10.x doesn't have path[platform]...\n- should I polyfil it ?\n- am i missing something more obvious ?\n. @isaacs whats the ideal way to detect node 10? Something like https://www.npmjs.com/package/nversion ? Or a funky regexp\n. > If you wanna just leave the tests failing in 0.10, that's fine, too. I can work it out when I merge it in. If it's passing in 0.12 and io.js, then I can take it from there :)\nI'll add the skip :package: \n\nOk, just reviewed. The test looks perfect, and nothing in the code jumps out at me as problematic.\n\n:+1: \n\nIf you think this is ready to go, I can merge and release this weekend or early next week.\n\nMy use-cases work correct, I tried several ways to break it and couldn't find anything. I am fairly confident. But full disclosure, my windows-foo is weak.\nAlso, I will be on vacation new week. So if you release I wont be able to deal with fall-out, it will be on you. If you wait a week, I can help out with any fall out.\nYour call sir.\n. sorry, i am unclear why the skip isn't working as expected :(\n. lets actually hold off, I may have noticed other scenarios... such pandora's box.\n. rebased, going to fire up the old windows gaming rig after breakfast and see whats next.\n. Tests should now correctly run, even on old versions of node. Switching to windows now, lets see whats left on this side of things.\n. @isaacs i have added the appveyor configuration, is it possible for you to set up the appveyor.com side of things? I would doit, but then node-glob would end-up stefanpenner/node-glob on appveyor.\nIt should be as simple as singing up for the free tier, and adding this repository. As for making the tests pass on windows, I have put together a short triage list, and will work on them this afternoon. If I run into any blockers, I will report back.\n. ",
    "QbProg": "When this will be merged? I'm using 5.0.15 and still have this issue\n. @isaacs thank you for the explanation, I totally agree with your criteria. \nIn case I find some free time to implement a fix, I see a difficulty in writing the tests since unc paths are relative to a local network resource which of course will not be available for other users. \nDo you have any suggestion? \nTest could be written for the parser part of course... \n. When this will be merged? I'm using 5.0.15 and still have this issue\n. @isaacs thank you for the explanation, I totally agree with your criteria. \nIn case I find some free time to implement a fix, I see a difficulty in writing the tests since unc paths are relative to a local network resource which of course will not be available for other users. \nDo you have any suggestion? \nTest could be written for the parser part of course... \n. ",
    "gercheq": "Hi! I'm waiting for a fix as well. Could you please kindly let me know when this fix will be merged? Thanks!\n. Hi! I'm waiting for a fix as well. Could you please kindly let me know when this fix will be merged? Thanks!\n. ",
    "cmawhorter": "has anyone explored require('path').normalize?  from looking at the path.js source it looks like a lot of cross-platform work has been done and it supports UNC.  i'm doing glob() { if (IS_WIN) path.normalize } in my workaround to fix my specific issue.\nand there is cygwin paths which might be worth exploring?\n. has anyone explored require('path').normalize?  from looking at the path.js source it looks like a lot of cross-platform work has been done and it supports UNC.  i'm doing glob() { if (IS_WIN) path.normalize } in my workaround to fix my specific issue.\nand there is cygwin paths which might be worth exploring?\n. ",
    "riteshatsencha": "Any updates on this issue? Facing the same issue. Thx.. Any updates on this issue? Facing the same issue. Thx.. ",
    "designerx2": "Another user stung by the UNC issue. Is there a temporary work around for this issue? Any assistance is greatly appreciated. Thank you. . Another user stung by the UNC issue. Is there a temporary work around for this issue? Any assistance is greatly appreciated. Thank you. . ",
    "michaeldewayneharris": "Any updates on this issue? Facing the same issue. Thx.. Any updates on this issue? Facing the same issue. Thx.. ",
    "Nepoxx": "Is this \"simply\" a case of passing the right path to the OS or is it more complicated in that you need some NFS specific code for node's fs?. Is this \"simply\" a case of passing the right path to the OS or is it more complicated in that you need some NFS specific code for node's fs?. ",
    "mpaland": "Late to this party... Having this issue on a Win10 node trying to access/scan a NAS like '\\\\host\\my_media\\\\*'.\n@isaacs @stefanpenner Is there a mergable PR to fix this long standing UNC issue on Windows?\nWould be very appreciated!. Late to this party... Having this issue on a Win10 node trying to access/scan a NAS like '\\\\host\\my_media\\\\*'.\n@isaacs @stefanpenner Is there a mergable PR to fix this long standing UNC issue on Windows?\nWould be very appreciated!. ",
    "nlwillia": "It would be useful to be able to pass a generic sort function as an option.\n. It would be useful to be able to pass a generic sort function as an option.\n. ",
    "jokeyrhyme": "I have an example of an algorithm that can be used to achieve the desired sort: http://cdpn.io/tKLsI\n. I have an example of an algorithm that can be used to achieve the desired sort: http://cdpn.io/tKLsI\n. ",
    "tunnckoCore": "omg, and why this should be in the core? lol. In any way you get the result so you can do it what you want. Just pass nosort to disable internal sorting.\n. omg, and why this should be in the core? lol. In any way you get the result so you can do it what you want. Just pass nosort to disable internal sorting.\n. ",
    "joliss": "Great, thanks! :)\n. https://github.com/joyent/node/issues/6662 seems related, but it's looking like node-glob is losing another order of magnitude over the pure stat performance. (Curiously, it seems like Bash's own glob matching might also spend a decent chunk of CPU time on things that are not stat and readdir.)\n. This continues to be a real problem in Broccoli: glob takes 100 ms to match 1000 files. So unless we want to go without globbing in the API, we're spending nearly 50%(!) of our rebuild time on globbing alone.\nAs for a solution, Node's path functions turn out to be rather slow (see also https://github.com/joyent/node/commit/b9bec20), and glob uses them extensively. A good first approach might be attempting to replace them with primitive string manipulation. (Avoiding path.join made a big difference in a directory-walking function that I used in place of glob('**') in my library.) Update: Isaac points out that there's also \"regexps and other monkey business\". Monkey business is definitely bad for performance too.\n. Mentioning by request: @trevnorris\n. Oh, yes yes, agree 100% - I'm using glob.sync in Broccoli too. (I was just mentioning the async performance for completeness in the original report, and my complaining on Twitter today is rather unrelated to this issue.)\nThe reason I opened this issue is not the async performance, but the sync performance: It still takes >100ms to match 1000 files. Running a sample build with Broccoli on 1000 files, a single glob.sync call took up over over 50% of the entire build time.\n. Yay! Thanks @isaacs :)\n. I just tested it - it works for me.\n``` js\nvar glob = require(\"glob\")\n// options is optional\nglob(\"/*.js\", {}, function (er, files) {\n  // files is an array of filenames.\n  // If the nonull option is set, and nothing\n  // was found, then files is [\"/*.js\"]\n  // er is an error object or null.\n  console.error(files)\n})\n``\n. Great, thanks! :)\n. https://github.com/joyent/node/issues/6662 seems related, but it's looking like node-glob is losing _another_ order of magnitude over the pure stat performance. (Curiously, it seems like Bash's own glob matching might also spend a decent chunk of CPU time on things that are notstatandreaddir.)\n. This continues to be a real problem in [Broccoli](https://github.com/joliss/broccoli):glob` takes 100 ms to match 1000 files. So unless we want to go without globbing in the API, we're spending nearly 50%(!) of our rebuild time on globbing alone.\nAs for a solution, Node's path functions turn out to be rather slow (see also https://github.com/joyent/node/commit/b9bec20), and glob uses them extensively. A good first approach might be attempting to replace them with primitive string manipulation. (Avoiding path.join made a big difference in a directory-walking function that I used in place of glob('**') in my library.) Update: Isaac points out that there's also \"regexps and other monkey business\". Monkey business is definitely bad for performance too.\n. Mentioning by request: @trevnorris\n. Oh, yes yes, agree 100% - I'm using glob.sync in Broccoli too. (I was just mentioning the async performance for completeness in the original report, and my complaining on Twitter today is rather unrelated to this issue.)\nThe reason I opened this issue is not the async performance, but the sync performance: It still takes >100ms to match 1000 files. Running a sample build with Broccoli on 1000 files, a single glob.sync call took up over over 50% of the entire build time.\n. Yay! Thanks @isaacs :)\n. I just tested it - it works for me.\n``` js\nvar glob = require(\"glob\")\n// options is optional\nglob(\"/*.js\", {}, function (er, files) {\n  // files is an array of filenames.\n  // If the nonull option is set, and nothing\n  // was found, then files is [\"/*.js\"]\n  // er is an error object or null.\n  console.error(files)\n})\n```\n. ",
    "bpasero": "This is some good reading how to implement fast file traversal in node.\n@isaacs you wrote:\n\nExcept in extremely rare scenarios, async fs I/O will always be strictly slower than sync fs I/O. If you don't need to be doing many things in parallel, there is no benefit.\n\nI am not sure I follow, isn't async always faster because you can process directories in parallel which is happening a lot when recursing down a file system structure? Using sync APIs might be faster per method call but will always pay the penalty of sequential processing.\n. Yes, I also think it depends on the scenario and especially depends on what kind of complexity the code has that runs for each file node that is traversed. If all you do is just walking through the file system, I would not expect sync to be much slower than async. However, if for each node, there is some task happening that eats CPU cycles, being able to \"offload\" further traversing to other threads has a high performance impact.\nI would assume node-glob would perform faster with async fs operations because for each path it needs to run its \"glob\" logic that potentially slows down the next fs call when done in sync. \n. @isaacs well that is not what I see when I give it a try. \n- node v4.2.3\n- MBP 10.11\n- test folder: https://github.com/Microsoft/TypeScript.git\ntraverse-async.js\n``` javascript\nvar fs = require('fs');\nvar path = require('path');\nvar walk = function (dir, done) {\n    var results = [];\n    fs.readdir(dir, function (err, list) {\n        if (err) return done(err);\n        var pending = list.length;\n        if (!pending) return done(null, results);\n        list.forEach(function (file) {\n            file = path.resolve(dir, file);\n            fs.stat(file, function (err, stat) {\n                if (stat && stat.isDirectory()) {\n                    walk(file, function (err, res) {\n                        results = results.concat(res);\n                        if (!--pending) done(null, results);\n                    });\n                } else {\n                    results.push(file);\n                    if (!--pending) done(null, results);\n                }\n            });\n        });\n    });\n};\nwalk('/Users/bpasero/Development/Microsoft/typescript', function (err, results) {\n    if (err) throw err;\n    console.log(results.length);\n});\n```\ntraverse-sync.js\n``` javascript\nvar fs = require('fs');\nvar path = require('path');\nvar walk = function (dir, done) {\n    var results = [];\n    var list = fs.readdirSync(dir);\n    var pending = list.length;\n    if (!pending) return done(null, results);\n    list.forEach(function (file) {\n        file = path.resolve(dir, file);\n        var stat = fs.statSync(file);\n        if (stat && stat.isDirectory()) {\n            walk(file, function (err, res) {\n                results = results.concat(res);\n                if (!--pending) done(null, results);\n            });\n        } else {\n            results.push(file);\n            if (!--pending) done(null, results);\n        }\n    });\n};\nwalk('/Users/bpasero/Development/Microsoft/typescript', function (err, results) {\n    if (err) throw err;\n    console.log(results.length);\n});\n```\nResults after a fresh OS restart:\n```\n~/Desktop/traverse-fs> time node traverse-async.js \n29868\nreal    0m0.653s\nuser    0m0.401s\nsys 0m0.790s\n~/Desktop/traverse-fs> time node traverse-sync.js \n29868\nreal    0m1.176s\nuser    0m0.340s\nsys 0m0.505s\n```\n. Right, I have seen varying results even after restarts too.\nI do like the statement that using async fs methods will prevent blocking code from executing if there are computational things happening per node. That is my reason for sticking with async for now.\nBtw I find it interesting that Python seems to care about file traversal performance enough that they added a function for it (os.scandir): https://www.python.org/dev/peps/pep-0471/\n. This is some good reading how to implement fast file traversal in node.\n@isaacs you wrote:\n\nExcept in extremely rare scenarios, async fs I/O will always be strictly slower than sync fs I/O. If you don't need to be doing many things in parallel, there is no benefit.\n\nI am not sure I follow, isn't async always faster because you can process directories in parallel which is happening a lot when recursing down a file system structure? Using sync APIs might be faster per method call but will always pay the penalty of sequential processing.\n. Yes, I also think it depends on the scenario and especially depends on what kind of complexity the code has that runs for each file node that is traversed. If all you do is just walking through the file system, I would not expect sync to be much slower than async. However, if for each node, there is some task happening that eats CPU cycles, being able to \"offload\" further traversing to other threads has a high performance impact.\nI would assume node-glob would perform faster with async fs operations because for each path it needs to run its \"glob\" logic that potentially slows down the next fs call when done in sync. \n. @isaacs well that is not what I see when I give it a try. \n- node v4.2.3\n- MBP 10.11\n- test folder: https://github.com/Microsoft/TypeScript.git\ntraverse-async.js\n``` javascript\nvar fs = require('fs');\nvar path = require('path');\nvar walk = function (dir, done) {\n    var results = [];\n    fs.readdir(dir, function (err, list) {\n        if (err) return done(err);\n        var pending = list.length;\n        if (!pending) return done(null, results);\n        list.forEach(function (file) {\n            file = path.resolve(dir, file);\n            fs.stat(file, function (err, stat) {\n                if (stat && stat.isDirectory()) {\n                    walk(file, function (err, res) {\n                        results = results.concat(res);\n                        if (!--pending) done(null, results);\n                    });\n                } else {\n                    results.push(file);\n                    if (!--pending) done(null, results);\n                }\n            });\n        });\n    });\n};\nwalk('/Users/bpasero/Development/Microsoft/typescript', function (err, results) {\n    if (err) throw err;\n    console.log(results.length);\n});\n```\ntraverse-sync.js\n``` javascript\nvar fs = require('fs');\nvar path = require('path');\nvar walk = function (dir, done) {\n    var results = [];\n    var list = fs.readdirSync(dir);\n    var pending = list.length;\n    if (!pending) return done(null, results);\n    list.forEach(function (file) {\n        file = path.resolve(dir, file);\n        var stat = fs.statSync(file);\n        if (stat && stat.isDirectory()) {\n            walk(file, function (err, res) {\n                results = results.concat(res);\n                if (!--pending) done(null, results);\n            });\n        } else {\n            results.push(file);\n            if (!--pending) done(null, results);\n        }\n    });\n};\nwalk('/Users/bpasero/Development/Microsoft/typescript', function (err, results) {\n    if (err) throw err;\n    console.log(results.length);\n});\n```\nResults after a fresh OS restart:\n```\n~/Desktop/traverse-fs> time node traverse-async.js \n29868\nreal    0m0.653s\nuser    0m0.401s\nsys 0m0.790s\n~/Desktop/traverse-fs> time node traverse-sync.js \n29868\nreal    0m1.176s\nuser    0m0.340s\nsys 0m0.505s\n```\n. Right, I have seen varying results even after restarts too.\nI do like the statement that using async fs methods will prevent blocking code from executing if there are computational things happening per node. That is my reason for sticking with async for now.\nBtw I find it interesting that Python seems to care about file traversal performance enough that they added a function for it (os.scandir): https://www.python.org/dev/peps/pep-0471/\n. ",
    "trevnorris": "@bpasero These tests are hard to do well. Think like type of hardware (platter or ssd), has your OS cached the paths, etc. can give drastically different results. For example, here are my results using your scripts:\n```\ntrevnorris:node (throw-mc-fix) $ \\time ./out/node-latest /tmp/walk-sync.js\n212765\n3.36user 1.22system 0:04.55elapsed 100%CPU (0avgtext+0avgdata 111380maxresident)k\ntrevnorris:node (throw-mc-fix) $ \\time ./out/node-latest /tmp/walk-async.js\n212765\n9.04user 3.06system 0:08.26elapsed 146%CPU (0avgtext+0avgdata 514980maxresident)k\n```\nAs you can see, much different than yours.\n. @bpasero These tests are hard to do well. Think like type of hardware (platter or ssd), has your OS cached the paths, etc. can give drastically different results. For example, here are my results using your scripts:\n```\ntrevnorris:node (throw-mc-fix) $ \\time ./out/node-latest /tmp/walk-sync.js\n212765\n3.36user 1.22system 0:04.55elapsed 100%CPU (0avgtext+0avgdata 111380maxresident)k\ntrevnorris:node (throw-mc-fix) $ \\time ./out/node-latest /tmp/walk-async.js\n212765\n9.04user 3.06system 0:08.26elapsed 146%CPU (0avgtext+0avgdata 514980maxresident)k\n```\nAs you can see, much different than yours.\n. ",
    "diceman39": "Thanks\n. True\n. Thanks\n. True\n. ",
    "NickHeiner": "@iamleppert when pointing out that something is broken, it's nice to give as much information as possible about what's going wrong - stack traces, repro steps, environment settings etc.\n. Fair enough - thanks.\n. @iamleppert when pointing out that something is broken, it's nice to give as much information as possible about what's going wrong - stack traces, repro steps, environment settings etc.\n. Fair enough - thanks.\n. ",
    "ghost": "The only problem with this solution is that the work of adding the trailing slash is duplicated, once before the 'match' event is fired, and once before the callback is called with the results array.\n. Oops, forget something pretty important. Should be fixed.\n. The only problem with this solution is that the work of adding the trailing slash is duplicated, once before the 'match' event is fired, and once before the callback is called with the results array.\n. Oops, forget something pretty important. Should be fixed.\n. ",
    "jonathanrdelgado": "Dupe of #36 \n. @contra in #36, it was stated this would not be added to the package.\nUse https://github.com/sindresorhus/globby, keep your $500 and buy yourself a beer.\n. Dupe of #36 \n. @contra in #36, it was stated this would not be added to the package.\nUse https://github.com/sindresorhus/globby, keep your $500 and buy yourself a beer.\n. ",
    "shellscape": ":+1: to getting this into node-glob\n. :+1: to getting this into node-glob\n. ",
    "intervalia": "This is what I did to get a temporary version to work:\n``` javascript\nfunction globArray(patterns, options) {\n  var i, list = [];\n  if (!Array.isArray(patterns)) {\n    patterns = [patterns];\n  }\npatterns.forEach(function (pattern) {\n    if (pattern[0] === \"!\") {\n      i = list.length-1;\n      while( i > -1) {\n        if (!minimatch(list[i], pattern)) {\n          list.splice(i,1);\n        }\n        i--;\n      }\n}\nelse {\n  var newList = glob.sync(pattern, options);\n  newList.forEach(function(item){\n    if (list.indexOf(item)===-1) {\n      list.push(item);\n    }\n  });\n}\n\n});\nreturn list;\n}\n```\nMaybe you could do something similar initially, just to get some level of support.\n. This is what I did to get a temporary version to work:\n``` javascript\nfunction globArray(patterns, options) {\n  var i, list = [];\n  if (!Array.isArray(patterns)) {\n    patterns = [patterns];\n  }\npatterns.forEach(function (pattern) {\n    if (pattern[0] === \"!\") {\n      i = list.length-1;\n      while( i > -1) {\n        if (!minimatch(list[i], pattern)) {\n          list.splice(i,1);\n        }\n        i--;\n      }\n}\nelse {\n  var newList = glob.sync(pattern, options);\n  newList.forEach(function(item){\n    if (list.indexOf(item)===-1) {\n      list.push(item);\n    }\n  });\n}\n\n});\nreturn list;\n}\n```\nMaybe you could do something similar initially, just to get some level of support.\n. ",
    "evilebottnawi": "need :+1: \n. @isaacs \ndeps of paths is 0, all images in one directory (500k images).\npattern - u/**/*.{png,jpg,jpeg,gif,svg,webp}.\nnode - 6.2.2, globby - lastest (use \"glob\": \"^7.0.3\").\n``` javascript\nglobby(input, { // input = 'u/*/.{png,jpg,jpeg,gif,svg,webp}'\n        cwd: opts.cwd,\n        nodir: true\n    })\n        .then((paths) => paths.map((filepath) => {\n            // The error occurs before getting here\n            const realFilepath = path.resolve(path.join(opts.cwd, filepath));\n            const total = paths.length;\n        return handleFile(realFilepath, opts)\n            .then(\n                () => {\n                    counter++;\n\n                    if (!options.quite) {\n                        spinner.text = `Done minifying image \"${filepath}\" (${counter} of ${total})`;\n                    }\n\n                    return filepath;\n                }\n            );\n    }))\n\n```\nI try use node-glob directly and i get same error. Trouble is not in globby.\n. need :+1: \n. @isaacs \ndeps of paths is 0, all images in one directory (500k images).\npattern - u/**/*.{png,jpg,jpeg,gif,svg,webp}.\nnode - 6.2.2, globby - lastest (use \"glob\": \"^7.0.3\").\n``` javascript\nglobby(input, { // input = 'u/*/.{png,jpg,jpeg,gif,svg,webp}'\n        cwd: opts.cwd,\n        nodir: true\n    })\n        .then((paths) => paths.map((filepath) => {\n            // The error occurs before getting here\n            const realFilepath = path.resolve(path.join(opts.cwd, filepath));\n            const total = paths.length;\n        return handleFile(realFilepath, opts)\n            .then(\n                () => {\n                    counter++;\n\n                    if (!options.quite) {\n                        spinner.text = `Done minifying image \"${filepath}\" (${counter} of ${total})`;\n                    }\n\n                    return filepath;\n                }\n            );\n    }))\n\n```\nI try use node-glob directly and i get same error. Trouble is not in globby.\n. ",
    "UltCombo": "@jonathandelgado globby has inherent perf issues as @contra has already stated.\n\nin #36, it was stated this would not be added to the package.\n\nAs far as I can see, @isaacs has only stated that it was \"complicated and hard\", not that he would never accept a PR nor change his mind in 2 years.\n. Although this does not directly cover the ['*.js', '!b*.js', 'bad.js'] use case, we get the perf boost we need and then, in glob-stream's individual positive glob streams we can pass the negativeGlobs (with leading ! stripped out) to node-glob's ignore option. This can solve gulp's perf issue while still allowing ordered globs in glob-stream.\n//cc @contra \n. Odd how the only failing test is due to 2 paths out of order in Node 0.11 only.\nNice work, I'll start experimenting with this tomorrow hopefully.\n//cc @contra @sindresorhus\n. Sorry, hadn't had time to test it throughout. I just pushed a new branch to globby using node-glob's ignore option in the async API.\nIgnoring some files in a directory through the ignore option is about two times slower than globby, looks like it is because you're calling the minimatch function inside a loop which parses the pattern again in each iteration. Ideally, only a single Minimatch class instance should be created for each ignore pattern. See how globby handles it currently.\nIgnoring a whole dir (dir/**) is throwing a RangeError: Maximum call stack size exceeded, this might be a problem with the benchmark though.\n. Nice!\nBtw, so far I've only updated the async API to use the ignore option, so you can ignore the sync results for now.\n. Oh, I was about to start working on that, thank you very much!\nMind sending a PR to globby's glob-ignore branch later?\n. Thanks, no hurry. Sending a quick fix plus the Matcha fix is okay, @sindresorhus and I can clean it up afterwards. =]\n. > Have sent fix for sync. Matcha fix? Do you mean the setImmediate fix? It's part of node-glob.\nSeeing as this seems to be a Matcha issue (as you've linked previously), I believe it would make sense to workaround the issue in the benchmark tests instead of the lib core.\nThat is, add setImmediate to call the benchmark test's callback instead of polluting the node-glob core with it.\n. > If that's a worthwhile use-case, then let's just add multi-glob support with some sensible API surface.\nnode-glob's lack of multi-glob support is the sole reason globby exists.\nAlso worth noting that glob-stream implements the very same logic as globby as well (albeit it consumes node-glob's EventEmitter API instead of the callback/sync ones). Multi-glob support + a streaming API (#70) should make glob-stream obsolete as well.\n. cc @vegetableman \n. @isaacs does this approach look ok?\n. @vegetableman my bad, I don't particularly care about negated patterns in ignore patterns, the leading ! was a copypaste error. Though, from my understanding, the concept behind ignore is that anything matched by an ignore pattern should not be present in the result set, so standard syntax such as negated patterns should apply to them still I believe.\n. I believe negated patterns are a rare enough use case (even more so for ignore patterns), but perhaps it may be useful in some use cases.\nAnyway, this PR addresses mainly the dot option (and other options that may be passed in), so that ignore patterns follow the same rules as the main pattern.\n@isaacs do you think there would be any problem passing node-glob's options argument directly to the Minimatch constructor as this PR does?\n. @isaacs my bad, try with a single star instead of the globstar in the ignore pattern:\n$ node -e 'require(\"./glob.js\")(\"./fixtures/*swag\", { ignore: \"./fixtures/*\", dot: true }, console.log)'\n. Oh, I didn't know globstar does not match dot files by default until now.\nAnd this is more complicated than I thought. :/\n. Makes sense, thanks for the explanation. :smile:\nThat behavior seems rather counterintuitive imho, but it is compliant to the bash standard after all.\nThe output is different when I test your sample in bash 3.2 and in zsh, and I also noticed there are discrepancies regarding dir/**/*. I wish there was a real standard for globbing.\n. Thanks for the info.\nFWIW, testing on Zsh 5.0.5, dir/** seems to match the same as Bash 3, but dir/**/* will do deep matching as expected:\n$ mkdir -p dir/subdir/subsub\n$ for i in dir/**; do echo $i; done\ndir/subdir\n$ for i in dir/**/*; do echo $i; done\ndir/subdir\ndir/subdir/subsub\n. @isaacs nope, Zsh seems to have its own glob variation:\n$ mkdir -p dir/a/b/c/d/e/f/g\n$ for i in dir/**; do echo $i; done\ndir/a\n$ for i in dir/**/*; do echo $i; done\ndir/a\ndir/a/b\ndir/a/b/c\ndir/a/b/c/d\ndir/a/b/c/d/e\ndir/a/b/c/d/e/f\ndir/a/b/c/d/e/f/g\nAlso, if dir/**/* was treated the same as dir/*/*, it would not match dir/subdir in the comment above, right?\n. Oh yes, that was just a side note that ended up diverging the topic a bit too much.\nI'll update my Bash so I can properly test the globbing before reporting issues.\nThanks for the help and explanations. :smile:\n. Oh sorry, I missed your question:\n\nWild! Yeah, that's totally different. What does dir/**/ match?\n\nIt matches all directories including the parent (dir), exactly like node-glob.\n. @iulo That's the expected behavior, I believe. Isaac explained it above.\n. This does fix a bunch of issues and is indeed less surprising.\nThough, I don't understand why the other rules for the ignore patterns wouldn't match the main matching pattern's rules? (#166)\nPerhaps it is better to keep this simple, but having different rules for the matching and ignore patterns will likely lead to unexpected/counter-intuitive behavior.\n. @isaacs I agree that ignore patterns being always dot: true makes sense. I was talking about the other Minimatch options, such as nocase, noglobstar, matchBase. Shouldn't the Minimatch instances for the ignore patterns have these options set to the same value as the matching glob pattern?\n. @jonathandelgado globby has inherent perf issues as @contra has already stated.\n\nin #36, it was stated this would not be added to the package.\n\nAs far as I can see, @isaacs has only stated that it was \"complicated and hard\", not that he would never accept a PR nor change his mind in 2 years.\n. Although this does not directly cover the ['*.js', '!b*.js', 'bad.js'] use case, we get the perf boost we need and then, in glob-stream's individual positive glob streams we can pass the negativeGlobs (with leading ! stripped out) to node-glob's ignore option. This can solve gulp's perf issue while still allowing ordered globs in glob-stream.\n//cc @contra \n. Odd how the only failing test is due to 2 paths out of order in Node 0.11 only.\nNice work, I'll start experimenting with this tomorrow hopefully.\n//cc @contra @sindresorhus\n. Sorry, hadn't had time to test it throughout. I just pushed a new branch to globby using node-glob's ignore option in the async API.\nIgnoring some files in a directory through the ignore option is about two times slower than globby, looks like it is because you're calling the minimatch function inside a loop which parses the pattern again in each iteration. Ideally, only a single Minimatch class instance should be created for each ignore pattern. See how globby handles it currently.\nIgnoring a whole dir (dir/**) is throwing a RangeError: Maximum call stack size exceeded, this might be a problem with the benchmark though.\n. Nice!\nBtw, so far I've only updated the async API to use the ignore option, so you can ignore the sync results for now.\n. Oh, I was about to start working on that, thank you very much!\nMind sending a PR to globby's glob-ignore branch later?\n. Thanks, no hurry. Sending a quick fix plus the Matcha fix is okay, @sindresorhus and I can clean it up afterwards. =]\n. > Have sent fix for sync. Matcha fix? Do you mean the setImmediate fix? It's part of node-glob.\nSeeing as this seems to be a Matcha issue (as you've linked previously), I believe it would make sense to workaround the issue in the benchmark tests instead of the lib core.\nThat is, add setImmediate to call the benchmark test's callback instead of polluting the node-glob core with it.\n. > If that's a worthwhile use-case, then let's just add multi-glob support with some sensible API surface.\nnode-glob's lack of multi-glob support is the sole reason globby exists.\nAlso worth noting that glob-stream implements the very same logic as globby as well (albeit it consumes node-glob's EventEmitter API instead of the callback/sync ones). Multi-glob support + a streaming API (#70) should make glob-stream obsolete as well.\n. cc @vegetableman \n. @isaacs does this approach look ok?\n. @vegetableman my bad, I don't particularly care about negated patterns in ignore patterns, the leading ! was a copypaste error. Though, from my understanding, the concept behind ignore is that anything matched by an ignore pattern should not be present in the result set, so standard syntax such as negated patterns should apply to them still I believe.\n. I believe negated patterns are a rare enough use case (even more so for ignore patterns), but perhaps it may be useful in some use cases.\nAnyway, this PR addresses mainly the dot option (and other options that may be passed in), so that ignore patterns follow the same rules as the main pattern.\n@isaacs do you think there would be any problem passing node-glob's options argument directly to the Minimatch constructor as this PR does?\n. @isaacs my bad, try with a single star instead of the globstar in the ignore pattern:\n$ node -e 'require(\"./glob.js\")(\"./fixtures/*swag\", { ignore: \"./fixtures/*\", dot: true }, console.log)'\n. Oh, I didn't know globstar does not match dot files by default until now.\nAnd this is more complicated than I thought. :/\n. Makes sense, thanks for the explanation. :smile:\nThat behavior seems rather counterintuitive imho, but it is compliant to the bash standard after all.\nThe output is different when I test your sample in bash 3.2 and in zsh, and I also noticed there are discrepancies regarding dir/**/*. I wish there was a real standard for globbing.\n. Thanks for the info.\nFWIW, testing on Zsh 5.0.5, dir/** seems to match the same as Bash 3, but dir/**/* will do deep matching as expected:\n$ mkdir -p dir/subdir/subsub\n$ for i in dir/**; do echo $i; done\ndir/subdir\n$ for i in dir/**/*; do echo $i; done\ndir/subdir\ndir/subdir/subsub\n. @isaacs nope, Zsh seems to have its own glob variation:\n$ mkdir -p dir/a/b/c/d/e/f/g\n$ for i in dir/**; do echo $i; done\ndir/a\n$ for i in dir/**/*; do echo $i; done\ndir/a\ndir/a/b\ndir/a/b/c\ndir/a/b/c/d\ndir/a/b/c/d/e\ndir/a/b/c/d/e/f\ndir/a/b/c/d/e/f/g\nAlso, if dir/**/* was treated the same as dir/*/*, it would not match dir/subdir in the comment above, right?\n. Oh yes, that was just a side note that ended up diverging the topic a bit too much.\nI'll update my Bash so I can properly test the globbing before reporting issues.\nThanks for the help and explanations. :smile:\n. Oh sorry, I missed your question:\n\nWild! Yeah, that's totally different. What does dir/**/ match?\n\nIt matches all directories including the parent (dir), exactly like node-glob.\n. @iulo That's the expected behavior, I believe. Isaac explained it above.\n. This does fix a bunch of issues and is indeed less surprising.\nThough, I don't understand why the other rules for the ignore patterns wouldn't match the main matching pattern's rules? (#166)\nPerhaps it is better to keep this simple, but having different rules for the matching and ignore patterns will likely lead to unexpected/counter-intuitive behavior.\n. @isaacs I agree that ignore patterns being always dot: true makes sense. I was talking about the other Minimatch options, such as nocase, noglobstar, matchBase. Shouldn't the Minimatch instances for the ignore patterns have these options set to the same value as the matching glob pattern?\n. ",
    "despairblue": ":+1: \n. Any puppet module with tests, for example https://github.com/kietsy/kietsy-tinc\nIn that repo after initializing the test infrastructure\n- bundle install --path vendor/bundle\n- bundle exec rake spec_prep\n  issuing node -e \"console.log(require('glob').sync('spec/**/*spec.rb'))\" > results will result in a 5.6mb big results file. Doing this for a puppet module with like 5 dependencies will crash node after it consumed almost 2 gig of ram: \nnode -e \"console.log(require('glob').sync('spec/**/*_spec.rb'))\" > result\nFATAL ERROR: JS Allocation failed - process out of memory\n[1]    14906 abort (core dumped)  node -e \"console.log(require('glob').sync('spec/**/*_spec.rb'))\" > result\nSo the problem is not an infinite loop, but rather that node-glob should stop at foo/bar, just like the shell globbing works (which only gives you unique files). Another solution would be to be able to tell node-glob not to follow symlinks at all.\n. It's actually crashing because of the large set of redundant results. There is just one symlink.\n$ ll spec/fixtures/modules\ntotal 4.0K\ndrwxr-xr-x 7 despairblue users 4.0K Oct 15 00:44 stdlib\nlrwxrwxrwx 1 despairblue users   37 Oct 15 00:44 tinc -> /home/despairblue/vcs/git/kietsy-tinc\nI used this script\n```\n/usr/bin/bash\necho $*\n```\nand the tab completion of either bash or zsh as a reference and compared it to node-globs behaviour. This gist illustrates two cases, yours above and mine for a puppet module with one dependency. As one can see, the current shell globbing outputs each file only once, if there is another path to the same file it's omitted in the results. Don't know if it's always been like this, I can only test it with zsh 5.0.7 and bash 4.3.030 (oh and I just noticed that the script does not work with bash since tab globbing does not seem to be supported for bash, it just replaces the spec/**/*_spec.rb with the first match, instead of all matches, but tree works as expected and won't follow the symlink)\n. You're right, I didn't grasp everything in your comment at first. Adopting the bash4.3 globstar behavior would fix this (and would actually matches the one from zsh). Just to be sure, the command for i in +(foo|bar|baz)/**/*file; do echo $i; done in your example illustrates the bash4.3 behavior, right? And if so, what was the bash4.1 behavior? I simply don't see two different outputs for the same command, but your comment suggests that you demonstrated both behaviors.\n. :+1: Yep, if adopting bash's new behavior is OK for you that would be great. It would suffice my use case and probably the other two's referenced above as well.\n. :+1: \n. Any puppet module with tests, for example https://github.com/kietsy/kietsy-tinc\nIn that repo after initializing the test infrastructure\n- bundle install --path vendor/bundle\n- bundle exec rake spec_prep\n  issuing node -e \"console.log(require('glob').sync('spec/**/*spec.rb'))\" > results will result in a 5.6mb big results file. Doing this for a puppet module with like 5 dependencies will crash node after it consumed almost 2 gig of ram: \nnode -e \"console.log(require('glob').sync('spec/**/*_spec.rb'))\" > result\nFATAL ERROR: JS Allocation failed - process out of memory\n[1]    14906 abort (core dumped)  node -e \"console.log(require('glob').sync('spec/**/*_spec.rb'))\" > result\nSo the problem is not an infinite loop, but rather that node-glob should stop at foo/bar, just like the shell globbing works (which only gives you unique files). Another solution would be to be able to tell node-glob not to follow symlinks at all.\n. It's actually crashing because of the large set of redundant results. There is just one symlink.\n$ ll spec/fixtures/modules\ntotal 4.0K\ndrwxr-xr-x 7 despairblue users 4.0K Oct 15 00:44 stdlib\nlrwxrwxrwx 1 despairblue users   37 Oct 15 00:44 tinc -> /home/despairblue/vcs/git/kietsy-tinc\nI used this script\n```\n/usr/bin/bash\necho $*\n```\nand the tab completion of either bash or zsh as a reference and compared it to node-globs behaviour. This gist illustrates two cases, yours above and mine for a puppet module with one dependency. As one can see, the current shell globbing outputs each file only once, if there is another path to the same file it's omitted in the results. Don't know if it's always been like this, I can only test it with zsh 5.0.7 and bash 4.3.030 (oh and I just noticed that the script does not work with bash since tab globbing does not seem to be supported for bash, it just replaces the spec/**/*_spec.rb with the first match, instead of all matches, but tree works as expected and won't follow the symlink)\n. You're right, I didn't grasp everything in your comment at first. Adopting the bash4.3 globstar behavior would fix this (and would actually matches the one from zsh). Just to be sure, the command for i in +(foo|bar|baz)/**/*file; do echo $i; done in your example illustrates the bash4.3 behavior, right? And if so, what was the bash4.1 behavior? I simply don't see two different outputs for the same command, but your comment suggests that you demonstrated both behaviors.\n. :+1: Yep, if adopting bash's new behavior is OK for you that would be great. It would suffice my use case and probably the other two's referenced above as well.\n. ",
    "maxg": "Thanks for the fix - and now I know about once.\n. Awesome, thanks for the fix.\n. Thanks for the fix - and now I know about once.\n. Awesome, thanks for the fix.\n. ",
    "KenanY": "Huh?\n. Huh?\n. ",
    "jdalton": "~~Turns out it's Travis-CI y'all.\nSee https://github.com/jashkenas/underscore/commit/4de07c008e53f2d4d8411fc315662496e80a8ea1#commitcomment-6380365~~\n. I ran into this issue too (Node 9.1.0)\nIt causes an error to be thrown when using the realpath: true option as well\n(since the path doesn't exist).. ~~Turns out it's Travis-CI y'all.\nSee https://github.com/jashkenas/underscore/commit/4de07c008e53f2d4d8411fc315662496e80a8ea1#commitcomment-6380365~~\n. I ran into this issue too (Node 9.1.0)\nIt causes an error to be thrown when using the realpath: true option as well\n(since the path doesn't exist).. ",
    "dougwilson": "Thanks, @jdalton, but see my comment on your commit, Travis CI hasn't changed at all. My main point is that it doesn't work out-of-the-box with the bundled npm version of node.js 0.8, or even the bundled version of npm with older version of node.js 0.10.\n:(\n. The reason is that you need npm >= 1.3.13 for the ^-style versions to work.\n. Thanks, @jdalton, but see my comment on your commit, Travis CI hasn't changed at all. My main point is that it doesn't work out-of-the-box with the bundled npm version of node.js 0.8, or even the bundled version of npm with older version of node.js 0.10.\n:(\n. The reason is that you need npm >= 1.3.13 for the ^-style versions to work.\n. ",
    "jfarabaugh": "+1 \nupgrading node or npm is not easy for everyone to just go and do. \n. +1 \nupgrading node or npm is not easy for everyone to just go and do. \n. +1 \nupgrading node or npm is not easy for everyone to just go and do. \n. +1 \nupgrading node or npm is not easy for everyone to just go and do. \n. +1 \nupgrading node or npm is not easy for everyone to just go and do. \n. +1 \nupgrading node or npm is not easy for everyone to just go and do. \n. ",
    "elliotf": "see PR #96 \n. There is a fix attached to #96 \n. see PR #96 \n. There is a fix attached to #96 \n. ",
    "why-jay": "I find little motivation to do this now, closing.\n. I find little motivation to do this now, closing.\n. ",
    "akania": "3.2.9 works fine, 3.2.10 doesn't\n. 3.2.9 works fine, 3.2.10 doesn't\n. ",
    "nickburns2006": "I'm having the same issue. It appears that ^0.3.0 isn't evaluating as expected, I think. Might be an npm issue, since their docs [https://www.npmjs.org/doc/misc/semver.html] say that ^0.3.0 should be good for >=0.3.0 < 0.4.0... But it may be a \".0\" evaluation.\nSo for now, I'd recommend a \"~0.3.0\" for the minimatch.\n. I'm having the same issue. It appears that ^0.3.0 isn't evaluating as expected, I think. Might be an npm issue, since their docs [https://www.npmjs.org/doc/misc/semver.html] say that ^0.3.0 should be good for >=0.3.0 < 0.4.0... But it may be a \".0\" evaluation.\nSo for now, I'd recommend a \"~0.3.0\" for the minimatch.\n. ",
    "matteofigus": "+1\n. +1\n. ",
    "ArnoldZokas": "+1\n. +1\n. ",
    "ssetem": "+1\n. +1\n. ",
    "samsalisbury": "+1\n. +1\n. ",
    "jvivs": "+1\n. +1\n. ",
    "emcpadden": "That did the trick!  I was running node v0.10.12, upgrading to 0.10.28 allowed me to npm install this module. \nThanks so much Issac for your very quick response, this was a huge help.\nI wish you the very best of success with NPM INC!\n. That did the trick!  I was running node v0.10.12, upgrading to 0.10.28 allowed me to npm install this module. \nThanks so much Issac for your very quick response, this was a huge help.\nI wish you the very best of success with NPM INC!\n. ",
    "paymand": "I get this error when installing on mac. No errors when installing on ubuntu though.\n. Never mind. Looks like I needed to upgrade to latest node.\n. I get this error when installing on mac. No errors when installing on ubuntu though.\n. Never mind. Looks like I needed to upgrade to latest node.\n. ",
    "valorkin": "Nope, it didn't fixed an issue\nhttps://travis-ci.org/stormpath/stormpath-sdk-node/jobs/26558525#L653\n. You made my day!\nThank you so much!\n. Nope, it didn't fixed an issue\nhttps://travis-ci.org/stormpath/stormpath-sdk-node/jobs/26558525#L653\n. You made my day!\nThank you so much!\n. ",
    "mreinstein": "not sure if it matters but I'm running npm@1.4.13\n. ah, derp I see what you mean now. re-installing browserify forces npm to re-evaluate it's dependencies and add the missing ones. Thanks, and sorry for the issue clutter!\n. @isaacs would it make sense to open an issue for having npm walk the dependency tree after running npm remove/install and handle these deps getting re-installed automatically?\n. not sure if it matters but I'm running npm@1.4.13\n. ah, derp I see what you mean now. re-installing browserify forces npm to re-evaluate it's dependencies and add the missing ones. Thanks, and sorry for the issue clutter!\n. @isaacs would it make sense to open an issue for having npm walk the dependency tree after running npm remove/install and handle these deps getting re-installed automatically?\n. ",
    "joakimbeng": "@isaacs sorry, my bad. I was a bit too quick when posting this. The problem may be related to the glob-stream module instead.. Have to investigate it further. Closing.. :)\n. Almost, changing it to '!(node_modules){,/**}' with options {dot: true, nonegate: true} did the trick! Thanks!\n. @isaacs sorry, my bad. I was a bit too quick when posting this. The problem may be related to the glob-stream module instead.. Have to investigate it further. Closing.. :)\n. Almost, changing it to '!(node_modules){,/**}' with options {dot: true, nonegate: true} did the trick! Thanks!\n. ",
    "PeterDaveHello": "Any update?\n. Any update?\n. ",
    "gyandeeps": "@isaacs Any plans for the above request.\nAs what I am working on also need the above functionality.\nIf the answer is yes, then i will ready to work n send a PR.\n. @isaacs Any plans for the above request.\nAs what I am working on also need the above functionality.\nIf the answer is yes, then i will ready to work n send a PR.\n. ",
    "iTonyYo": "@golyshevd Hope to get some advises from you about node-find-folder module.\n. @golyshevd Hope to get some advises from you about node-find-folder module.\n. ",
    "vegetableman": "Quite done with the changes. tests and readme needs to be updated. will push by tomorrow.\n. @UltCombo had those failed cases randomly thrown on my local as well but they may be due to race conditions mentioned in the README?. Travis is clear now.\n. @UltCombo did u get a chance to test it?\n. @UltCombo Thanks for the benchmarks.\n\nyou're calling the minimatch function inside a loop which parses the pattern again in each iteration.Ideally, only a single Minimatch class instance should be created for each ignore pattern. See how globby handles it currently.\n\nCreating only one instance now.\n\nIgnoring a whole dir (dir/**) is throwing a RangeError: Maximum call stack size exceeded,\n\nUsing setImmediate to return the callback has fixed the issue. Ref:- https://github.com/logicalparadox/matcha/issues/9\nAlthough there may be minor diffs, but following are the results from the existing globby benchmarks :+1: :\n```\nmatcha bench\n                  negative globs (some files inside dir)\n         229 op/s \u00bb globby async (working directory)\n         223 op/s \u00bb globby async (upstream/master)\n         241 op/s \u00bb globby sync (working directory)\n         226 op/s \u00bb globby sync (upstream/master)\n          59 op/s \u00bb glob-stream\n\n                  negative globs (whole dir)\n      10,075 op/s \u00bb globby async (working directory)\n         368 op/s \u00bb globby async (upstream/master)\n         236 op/s \u00bb globby sync (working directory)\n         235 op/s \u00bb globby sync (upstream/master)\n          66 op/s \u00bb glob-stream\n\n                  multiple positive globs\n          86 op/s \u00bb globby async (working directory)\n          89 op/s \u00bb globby async (upstream/master)\n          77 op/s \u00bb globby sync (working directory)\n          74 op/s \u00bb globby sync (upstream/master)\n          36 op/s \u00bb glob-stream\n\nSuites:  3\n  Benches: 15\n  Elapsed: 26,361.82 ms\n```\n. Updated benchmarks on fixing globby sync:-\n```\nmatcha bench\n                  negative globs (some files inside dir)\n         223 op/s \u00bb globby async (working directory)\n         222 op/s \u00bb globby async (upstream/master)\n         432 op/s \u00bb globby sync (working directory)\n         254 op/s \u00bb globby sync (upstream/master)\n          68 op/s \u00bb glob-stream\n\n                  negative globs (whole dir)\n      11,760 op/s \u00bb globby async (working directory)\n         409 op/s \u00bb globby async (upstream/master)\n      18,977 op/s \u00bb globby sync (working directory)\n         244 op/s \u00bb globby sync (upstream/master)\n          73 op/s \u00bb glob-stream\n\n                  multiple positive globs\n          98 op/s \u00bb globby async (working directory)\n          96 op/s \u00bb globby async (upstream/master)\n         516 op/s \u00bb globby sync (working directory)\n          81 op/s \u00bb globby sync (upstream/master)\n          37 op/s \u00bb glob-stream\n\nSuites:  3\n  Benches: 15\n  Elapsed: 23,045.84 ms\n``\n. Sure. made a quick fix for now. updating it.\n. Have sent fix for sync. Matcha fix? Do you mean the setImmediate fix? It's part of node-glob.\n. @isaacs Thanks for reviewing it. Have fixed the formatting and quote issues. Sorry for that. RemovedsetImmediate` calls which were added to fix call stack errors on globby benchmarks/test issues. \n\nWhat if the pattern ends with multiple `/parts? Eg,foo///is functionally equivalent tofoo/**``\n\nIs it supposed to behave differently?. right now, fetching foo/** and foo/**/**/** return the same number of results.\n. > No, it's supposed to behave the same, but the issue is that you're doing special treatment for things that end in /, and stripping it off. Why not .replace(/(\\/)+$/, '') instead, to strip off all trailing /** segments?\nIt's fixed already. Have added a test case as well. Misunderstood you before.\n\nThat seems like a bug to me. Since there are no magic chars in the ignore (eg, it's not ignoring a/b/** or a/b/* then only the explicit a/b match should be omitted.\n\nDid you pull my latest changes?. Tried your scenario, it works. \n``` js\n\ng.sync(\"a/*/b\",{ignore: [\"a/b\"]})\n[ 'a/b/bc', 'a/c/bc']\n```\n. Merged in master.\n. yep. got it. sending a fix. \n. Fixed and added tests. Was messing about on the test directory which somehow returned correct results. \n. @isaacs Thanks for testing. Took another crack at it, have fixed the pattern matching issues, i believe once and for all. All the above issues has been addressed.\n\nWould be great if you consider/test these changes once, before I revert back.\n\nIt's a premature optimization.\n\nI don't think so. It's important because let's say i ignore node_modules folder using node_modules/**, then the folder won't be read at all saving huge processing time. Please refer the above benchmark results. \nWith the change:-\nnegative globs (whole dir)\n           7,233 op/s \u00bb globby async (working directory) // with the change\n             409 op/s \u00bb globby async (upstream/master)\n          16,077 op/s \u00bb globby sync (working directory) // with the change\n             246 op/s \u00bb globby sync (upstream/master)\n              71 op/s \u00bb glob-stream\nwithout it:-\nnegative globs (whole dir)\n             231 op/s \u00bb globby async (working directory) // without the change\n             379 op/s \u00bb globby async (upstream/master)\n             428 op/s \u00bb globby sync (working directory)  // without the change\n             247 op/s \u00bb globby sync (upstream/master)\n              73 op/s \u00bb glob-stream\n. Thanks @isaacs for your patience as well. You are awesome :+1: .\n. Added more tests including tests for negation and brace-expansion to accelerate this PR.\n. Agreed. It's kind of awkward and the current functionality simply reverses an ignore and excludes other non-matching files. May be we could go the globby way of supporting multi-globs. Something like\njs\nglob(['a/b', 'b/c'])\nIt's worth noting that globby supports an interesting way of handling multi-globs and corresponding ignore list. Refer:- https://github.com/sindresorhus/globby/pull/6.\nAlso, pushed the replace fix.\n. Thanks @isaacs  for finding the bug. Great catch :+1: . \nPushed fixes with test cases. Have removed the single star check causing the problem. Also, missed catching it before, since, I was passing absolute paths ( which was enabled on passing the  cwd option), now only relative paths are passed.\nAlso, an exception is thrown now in case of negation in an ignore.\n. @isaacs The star handing logic has been simplified with support only for globstar, that is, ignore traversing if globstar, and minimatch check for the rest. I think this could be merged.\n. Thanks for the refactor @isaacs . Makes sense and is much more comprehensible.\n. @contra Have sent a bounty request. Waiting for you to accept it. :money_with_wings: \n. @UltCombo The use case of supporting negates ! on ignore is debatable. See https://github.com/isaacs/node-glob/pull/151#issuecomment-69977736. Using a negated pattern on ignore option would mean adding support for \"ignoring an ignore\".  In case of above test case, ignore: '!./fixtures/**' should return all matches for the pattern and not ignore them.\nWith regards to your fix, one way to support ignore  with dot without supporting negate, is to change the line:\njs\nreturn ignoreMap(pattern, options)\nto \njs\nignoreMap(pattern, Object.create(options, {nonegate: {value: true}}))\n. Fair enough.\n. Quite done with the changes. tests and readme needs to be updated. will push by tomorrow.\n. @UltCombo had those failed cases randomly thrown on my local as well but they may be due to race conditions mentioned in the README?. Travis is clear now.\n. @UltCombo did u get a chance to test it?\n. @UltCombo Thanks for the benchmarks.\n\nyou're calling the minimatch function inside a loop which parses the pattern again in each iteration.Ideally, only a single Minimatch class instance should be created for each ignore pattern. See how globby handles it currently.\n\nCreating only one instance now.\n\nIgnoring a whole dir (dir/**) is throwing a RangeError: Maximum call stack size exceeded,\n\nUsing setImmediate to return the callback has fixed the issue. Ref:- https://github.com/logicalparadox/matcha/issues/9\nAlthough there may be minor diffs, but following are the results from the existing globby benchmarks :+1: :\n```\nmatcha bench\n                  negative globs (some files inside dir)\n         229 op/s \u00bb globby async (working directory)\n         223 op/s \u00bb globby async (upstream/master)\n         241 op/s \u00bb globby sync (working directory)\n         226 op/s \u00bb globby sync (upstream/master)\n          59 op/s \u00bb glob-stream\n\n                  negative globs (whole dir)\n      10,075 op/s \u00bb globby async (working directory)\n         368 op/s \u00bb globby async (upstream/master)\n         236 op/s \u00bb globby sync (working directory)\n         235 op/s \u00bb globby sync (upstream/master)\n          66 op/s \u00bb glob-stream\n\n                  multiple positive globs\n          86 op/s \u00bb globby async (working directory)\n          89 op/s \u00bb globby async (upstream/master)\n          77 op/s \u00bb globby sync (working directory)\n          74 op/s \u00bb globby sync (upstream/master)\n          36 op/s \u00bb glob-stream\n\nSuites:  3\n  Benches: 15\n  Elapsed: 26,361.82 ms\n```\n. Updated benchmarks on fixing globby sync:-\n```\nmatcha bench\n                  negative globs (some files inside dir)\n         223 op/s \u00bb globby async (working directory)\n         222 op/s \u00bb globby async (upstream/master)\n         432 op/s \u00bb globby sync (working directory)\n         254 op/s \u00bb globby sync (upstream/master)\n          68 op/s \u00bb glob-stream\n\n                  negative globs (whole dir)\n      11,760 op/s \u00bb globby async (working directory)\n         409 op/s \u00bb globby async (upstream/master)\n      18,977 op/s \u00bb globby sync (working directory)\n         244 op/s \u00bb globby sync (upstream/master)\n          73 op/s \u00bb glob-stream\n\n                  multiple positive globs\n          98 op/s \u00bb globby async (working directory)\n          96 op/s \u00bb globby async (upstream/master)\n         516 op/s \u00bb globby sync (working directory)\n          81 op/s \u00bb globby sync (upstream/master)\n          37 op/s \u00bb glob-stream\n\nSuites:  3\n  Benches: 15\n  Elapsed: 23,045.84 ms\n``\n. Sure. made a quick fix for now. updating it.\n. Have sent fix for sync. Matcha fix? Do you mean the setImmediate fix? It's part of node-glob.\n. @isaacs Thanks for reviewing it. Have fixed the formatting and quote issues. Sorry for that. RemovedsetImmediate` calls which were added to fix call stack errors on globby benchmarks/test issues. \n\nWhat if the pattern ends with multiple `/parts? Eg,foo///is functionally equivalent tofoo/**``\n\nIs it supposed to behave differently?. right now, fetching foo/** and foo/**/**/** return the same number of results.\n. > No, it's supposed to behave the same, but the issue is that you're doing special treatment for things that end in /, and stripping it off. Why not .replace(/(\\/)+$/, '') instead, to strip off all trailing /** segments?\nIt's fixed already. Have added a test case as well. Misunderstood you before.\n\nThat seems like a bug to me. Since there are no magic chars in the ignore (eg, it's not ignoring a/b/** or a/b/* then only the explicit a/b match should be omitted.\n\nDid you pull my latest changes?. Tried your scenario, it works. \n``` js\n\ng.sync(\"a/*/b\",{ignore: [\"a/b\"]})\n[ 'a/b/bc', 'a/c/bc']\n```\n. Merged in master.\n. yep. got it. sending a fix. \n. Fixed and added tests. Was messing about on the test directory which somehow returned correct results. \n. @isaacs Thanks for testing. Took another crack at it, have fixed the pattern matching issues, i believe once and for all. All the above issues has been addressed.\n\nWould be great if you consider/test these changes once, before I revert back.\n\nIt's a premature optimization.\n\nI don't think so. It's important because let's say i ignore node_modules folder using node_modules/**, then the folder won't be read at all saving huge processing time. Please refer the above benchmark results. \nWith the change:-\nnegative globs (whole dir)\n           7,233 op/s \u00bb globby async (working directory) // with the change\n             409 op/s \u00bb globby async (upstream/master)\n          16,077 op/s \u00bb globby sync (working directory) // with the change\n             246 op/s \u00bb globby sync (upstream/master)\n              71 op/s \u00bb glob-stream\nwithout it:-\nnegative globs (whole dir)\n             231 op/s \u00bb globby async (working directory) // without the change\n             379 op/s \u00bb globby async (upstream/master)\n             428 op/s \u00bb globby sync (working directory)  // without the change\n             247 op/s \u00bb globby sync (upstream/master)\n              73 op/s \u00bb glob-stream\n. Thanks @isaacs for your patience as well. You are awesome :+1: .\n. Added more tests including tests for negation and brace-expansion to accelerate this PR.\n. Agreed. It's kind of awkward and the current functionality simply reverses an ignore and excludes other non-matching files. May be we could go the globby way of supporting multi-globs. Something like\njs\nglob(['a/b', 'b/c'])\nIt's worth noting that globby supports an interesting way of handling multi-globs and corresponding ignore list. Refer:- https://github.com/sindresorhus/globby/pull/6.\nAlso, pushed the replace fix.\n. Thanks @isaacs  for finding the bug. Great catch :+1: . \nPushed fixes with test cases. Have removed the single star check causing the problem. Also, missed catching it before, since, I was passing absolute paths ( which was enabled on passing the  cwd option), now only relative paths are passed.\nAlso, an exception is thrown now in case of negation in an ignore.\n. @isaacs The star handing logic has been simplified with support only for globstar, that is, ignore traversing if globstar, and minimatch check for the rest. I think this could be merged.\n. Thanks for the refactor @isaacs . Makes sense and is much more comprehensible.\n. @contra Have sent a bounty request. Waiting for you to accept it. :money_with_wings: \n. @UltCombo The use case of supporting negates ! on ignore is debatable. See https://github.com/isaacs/node-glob/pull/151#issuecomment-69977736. Using a negated pattern on ignore option would mean adding support for \"ignoring an ignore\".  In case of above test case, ignore: '!./fixtures/**' should return all matches for the pattern and not ignore them.\nWith regards to your fix, one way to support ignore  with dot without supporting negate, is to change the line:\njs\nreturn ignoreMap(pattern, options)\nto \njs\nignoreMap(pattern, Object.create(options, {nonegate: {value: true}}))\n. Fair enough.\n. ",
    "peterbraden": "Of course, after looking at the code, graceful-fs is an optional dependency...\nWithout knowing any of the context behind this, I assume that graceful-fs can't be seamlessly dropped in (hence the optionalDep).\nIs there any way to get glob to open less files?\n. I'll make you a patch.\n. Of course, after looking at the code, graceful-fs is an optional dependency...\nWithout knowing any of the context behind this, I assume that graceful-fs can't be seamlessly dropped in (hence the optionalDep).\nIs there any way to get glob to open less files?\n. I'll make you a patch.\n. ",
    "cletusw": "These issues are back due to #71\n. These issues are back due to #71\n. ",
    "DJviolin": "var glob = require('glob');\nglob('*.jpg', { cwd: 'public/portfolio/weddings/', sort: true }, function (err, files) {\n  console.log('GLOB RESULT: ' + files);\n});\nIf I have a filename pattern of image-1.jpg, image-2.jpg, image-3.jpg, ..., image-10.jpg, than it will return GLOB RESULT: image-1.jpg,image-10.jpg,image-11.jpg, ...\nHow can I return the correct order?\n. var glob = require('glob');\nglob('*.jpg', { cwd: 'public/portfolio/weddings/', sort: true }, function (err, files) {\n  console.log('GLOB RESULT: ' + files);\n});\nIf I have a filename pattern of image-1.jpg, image-2.jpg, image-3.jpg, ..., image-10.jpg, than it will return GLOB RESULT: image-1.jpg,image-10.jpg,image-11.jpg, ...\nHow can I return the correct order?\n. ",
    "doberkofler": "Sorry for the unclear question. With flat file as was referring to a physical file that actually exists in the files system in contrast to a pattern that will be expanded to no, one or multiple files.\n. Yes, but generally speaking, I would like to know if the pattern is for one specic file of might expand to 0 to n files.\n. Maybe I best explain it based on my actual use case:\nWe use glob as part of our Gulp based build system and typically there are two kind of uses.\nEither we process one single file or we process a group of files.\nIn the case that one specific file needs to be processed, we assume that the file must exist and if it does not most likely something changed or is wrong (typically the file was renamed, is missing or was misspelled) in the build environment itself.\nWe would therefore like to identify a glob pattern as:\na) one that can only expand to exactly one file (or none if something is wrong)\nb) one that can expand to 0 or many files (if there are any wildcards in it)\nIn the case of a and if the glob pattern does not expand to exactly one file, we would simply throw an error and alter the user that something must be wrong.\nBasically we would need a method that allows us to differentiate between a glob pattern a or b before we execute it.\n. Sorry for the unclear question. With flat file as was referring to a physical file that actually exists in the files system in contrast to a pattern that will be expanded to no, one or multiple files.\n. Yes, but generally speaking, I would like to know if the pattern is for one specic file of might expand to 0 to n files.\n. Maybe I best explain it based on my actual use case:\nWe use glob as part of our Gulp based build system and typically there are two kind of uses.\nEither we process one single file or we process a group of files.\nIn the case that one specific file needs to be processed, we assume that the file must exist and if it does not most likely something changed or is wrong (typically the file was renamed, is missing or was misspelled) in the build environment itself.\nWe would therefore like to identify a glob pattern as:\na) one that can only expand to exactly one file (or none if something is wrong)\nb) one that can expand to 0 or many files (if there are any wildcards in it)\nIn the case of a and if the glob pattern does not expand to exactly one file, we would simply throw an error and alter the user that something must be wrong.\nBasically we would need a method that allows us to differentiate between a glob pattern a or b before we execute it.\n. ",
    "augbog": ":+1: Would like this option.\n. :+1: Would like this option.\n. ",
    "whitetrefoil": "If I move the JS file to somewhere in C:, and remove C: from the pattern\njavascript\nglob('/Temp/*.txt',...\nthen run it again, it will output the correct:\nC:\\tmp>node glob-test.js\ncase\n[ 'C:/Temp/t.txt', 'C:/Temp/t2.txt' ]\nnocase\n[ 'C:/Temp/t.txt', 'C:/Temp/t2.txt' ]\n. If I move the JS file to somewhere in C:, and remove C: from the pattern\njavascript\nglob('/Temp/*.txt',...\nthen run it again, it will output the correct:\nC:\\tmp>node glob-test.js\ncase\n[ 'C:/Temp/t.txt', 'C:/Temp/t2.txt' ]\nnocase\n[ 'C:/Temp/t.txt', 'C:/Temp/t2.txt' ]\n. ",
    "jamesdbloom": "I have registered my forked version for now (but with your name).  Once you have merged this pull request let me know and I'll unregister the version pointing to my forked repo so the registration can point to the main repo.\n. I have registered my forked version for now (but with your name).  Once you have merged this pull request let me know and I'll unregister the version pointing to my forked repo so the registration can point to the main repo.\n. ",
    "isiahmeadows": "@isaacs Although I don't exactly have access to a computer where I can at the moment, I will note that the negation syntax is awesome for filtering out stuff without a complicated mess.\n. Failing test appears unrelated.\n. @isaacs Although I don't exactly have access to a computer where I can at the moment, I will note that the negation syntax is awesome for filtering out stuff without a complicated mess.\n. Failing test appears unrelated.\n. ",
    "popomore": "@isaacs ping\n. Maybe you can use  https://github.com/node-modules/mz-modules. Maybe you can use  https://github.com/node-modules/mz-modules. @isaacs ping\n. Maybe you can use  https://github.com/node-modules/mz-modules. Maybe you can use  https://github.com/node-modules/mz-modules. ",
    "ekweible": "I regenerated and reran the tests, only one failing test this time:\nnot ok 41 glob matches should be the same as bash results\nBut, I'm using bash 3.2 on Mac OS X Yosemite, so that's probably not an issue.\nYou're right though, we were using glob incorrectly with sync:true. I guess we didn't notice before because that usage was still functioning correctly in 4.0.6.\nThat TypeError will be useful in the future, thanks for adding that and looking into this!\n. I regenerated and reran the tests, only one failing test this time:\nnot ok 41 glob matches should be the same as bash results\nBut, I'm using bash 3.2 on Mac OS X Yosemite, so that's probably not an issue.\nYou're right though, we were using glob incorrectly with sync:true. I guess we didn't notice before because that usage was still functioning correctly in 4.0.6.\nThat TypeError will be useful in the future, thanks for adding that and looking into this!\n. ",
    "brianjmiller": "Appear to be having the same issue, likewise on Yosemite 10.10 with bash 3.2.x. See gist:\nhttps://gist.github.com/brianjmiller/4bda35fd333645060ccb\nMatches what is failing in Travis. (Couldn't tell if above comment meant Travis isn't intended to be used, should remove the indicator from the README?)\n. Appear to be having the same issue, likewise on Yosemite 10.10 with bash 3.2.x. See gist:\nhttps://gist.github.com/brianjmiller/4bda35fd333645060ccb\nMatches what is failing in Travis. (Couldn't tell if above comment meant Travis isn't intended to be used, should remove the indicator from the README?)\n. ",
    "nathanjessup": "I'm also having trouble with this change, and I don't believe it matches the behavior of bash 4.3 either. How did you test against Bash's behavior? Below is a quick example of how globstar functions for me in bash 4.3.30.\nPastebin with a demo of how bash 4.3 is handling symlinks: http://pastebin.com/YAq8wQyK\n. @isaacs @diffsky @seanmwalker  I'll third their opinions on **/ recursively walking all its children directories, even if it is via an option. \n. I'm also having trouble with this change, and I don't believe it matches the behavior of bash 4.3 either. How did you test against Bash's behavior? Below is a quick example of how globstar functions for me in bash 4.3.30.\nPastebin with a demo of how bash 4.3 is handling symlinks: http://pastebin.com/YAq8wQyK\n. @isaacs @diffsky @seanmwalker  I'll third their opinions on **/ recursively walking all its children directories, even if it is via an option. \n. ",
    "clintwood": "@isaacs so the follow option in the readme is incorrect?\nFeature Request: It would be really great to be able to override the Bash 4.3 compliance of not following globstar symlinks!  The option is there and it looks like a simple test for that option here could turn this back on!  Is this a possibility?\n. Ahh, great, thank you!\n. @isaacs so the follow option in the readme is incorrect?\nFeature Request: It would be really great to be able to override the Bash 4.3 compliance of not following globstar symlinks!  The option is there and it looks like a simple test for that option here could turn this back on!  Is this a possibility?\n. Ahh, great, thank you!\n. ",
    "matthewhadley": "In case it's useful info, we were also hit by this change in behaviour in not following symlinks. We were using glob on paths with symlinks in (as part of a gulp task). Things worked in glob@4.0.4, broke in 4.0.6 and are working for us again in isaacs/node-glob#GH-135\n. Confirmed the published version is working! Thanks for the quick work :)\n. For my case the symlinked directory didn't have child directories so things worked again. My gut expectation, though, would be for any child directories to be walked via a single **/\n. In case it's useful info, we were also hit by this change in behaviour in not following symlinks. We were using glob on paths with symlinks in (as part of a gulp task). Things worked in glob@4.0.4, broke in 4.0.6 and are working for us again in isaacs/node-glob#GH-135\n. Confirmed the published version is working! Thanks for the quick work :)\n. For my case the symlinked directory didn't have child directories so things worked again. My gut expectation, though, would be for any child directories to be walked via a single **/\n. ",
    "beck": "Question, if there is content in the symDir, say:\nyo/\n\u251c\u2500\u2500 normalDir\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 normFile.txt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 symDir -> ../symDir\n\u2514\u2500\u2500 symDir\n    \u251c\u2500\u2500 symDirContent\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 target.txt\n    \u2514\u2500\u2500 symFile.txt\nAnd I wanted to get all the text files, including target.txt, an additional **/ should be used?\nnode -p 'require(\"glob\").sync(\"yo/normalDir/**/*.txt\").join(\"\\n\")'\nyo/normalDir/normFile.txt\nyo/normalDir/symDir/symFile.txt\n$ # target.txt is missing\n$ node -p 'require(\"glob\").sync(\"yo/normalDir/**/**/*.txt\").join(\"\\n\")'\nyo/normalDir/normFile.txt\nyo/normalDir/symDir/symDirContent/target.txt\nyo/normalDir/symDir/symFile.txt\n$ # THERE IT IS!\nIs there is a better way to implement other than adding **/ for every symlink?\n. Question, if there is content in the symDir, say:\nyo/\n\u251c\u2500\u2500 normalDir\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 normFile.txt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 symDir -> ../symDir\n\u2514\u2500\u2500 symDir\n    \u251c\u2500\u2500 symDirContent\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 target.txt\n    \u2514\u2500\u2500 symFile.txt\nAnd I wanted to get all the text files, including target.txt, an additional **/ should be used?\nnode -p 'require(\"glob\").sync(\"yo/normalDir/**/*.txt\").join(\"\\n\")'\nyo/normalDir/normFile.txt\nyo/normalDir/symDir/symFile.txt\n$ # target.txt is missing\n$ node -p 'require(\"glob\").sync(\"yo/normalDir/**/**/*.txt\").join(\"\\n\")'\nyo/normalDir/normFile.txt\nyo/normalDir/symDir/symDirContent/target.txt\nyo/normalDir/symDir/symFile.txt\n$ # THERE IT IS!\nIs there is a better way to implement other than adding **/ for every symlink?\n. ",
    "seanmwalker": "@isaacs thanks for looking into this. \nI looked at it tonight and see that we are now getting the first level of files from within a symlink. In our case the symlink is a directory which holds both files, and folders that contain files. We're not yet seeing all of the 'next levels' of the tree.\nSince the minimatch was '~/my-module/lib/*/' we thought that it would recurse through all children, even child folders found within a folder referenced by a symlink. \nFor instance if we had a project like this:\n~/my-module\n~/my-module/package.json\n~/my-module/server.js\n~/my-module/lib\n~/my-module/lib/localFolder/aScriptFile.js\n~/my-module/lib/aSymlinkedFolder -> ~/symDir\nAnd the symlink pointed to this:\n~/symDir\n~/symDir/foo/something.js\n~/symDir/foo/deeper/more.js\n~/symDir/bar/anotherThing.js\nWhen we call glob('~/my-module/lib/*/', function(err, files) {\n  console.log(files.join('\\n'));\n});\nWe used to get the results of:\n~/my-module/lib/localFolder\n~/my-module/lib/localFolder/aScriptFile.js\n~/my-module/lib/aSymlinkedFolder\n~/my-module/lib/aSymlinkedFolder/foo/something.js\n~/my-module/lib/aSymlinkedFolder/foo/deeper/more.js\n~/my-module/lib/aSymlinkedFolder/bar/anotherThing.js\nWould that be your expected output as well, or are we possibly missing something with how it is intended to work?\n. @isaacs is there anything more for this item that I can provide to help?\n. @isaacs thanks for looking into this. \nI looked at it tonight and see that we are now getting the first level of files from within a symlink. In our case the symlink is a directory which holds both files, and folders that contain files. We're not yet seeing all of the 'next levels' of the tree.\nSince the minimatch was '~/my-module/lib/*/' we thought that it would recurse through all children, even child folders found within a folder referenced by a symlink. \nFor instance if we had a project like this:\n~/my-module\n~/my-module/package.json\n~/my-module/server.js\n~/my-module/lib\n~/my-module/lib/localFolder/aScriptFile.js\n~/my-module/lib/aSymlinkedFolder -> ~/symDir\nAnd the symlink pointed to this:\n~/symDir\n~/symDir/foo/something.js\n~/symDir/foo/deeper/more.js\n~/symDir/bar/anotherThing.js\nWhen we call glob('~/my-module/lib/*/', function(err, files) {\n  console.log(files.join('\\n'));\n});\nWe used to get the results of:\n~/my-module/lib/localFolder\n~/my-module/lib/localFolder/aScriptFile.js\n~/my-module/lib/aSymlinkedFolder\n~/my-module/lib/aSymlinkedFolder/foo/something.js\n~/my-module/lib/aSymlinkedFolder/foo/deeper/more.js\n~/my-module/lib/aSymlinkedFolder/bar/anotherThing.js\nWould that be your expected output as well, or are we possibly missing something with how it is intended to work?\n. @isaacs is there anything more for this item that I can provide to help?\n. ",
    "heikki": "@isaacs Ok, thanks for info. Have to figure out alternative.\n. Most of the glob-stream tests are currently broken on windows. All pass when using glob 4.2.2.\n. https://github.com/isaacs/minimatch/commit/66681f49cfbb692c4a4f40aa72b628bd773d5819\n. Tests pass again in gulp & glob-stream. :+1: \n. @isaacs There's appveyor if you want to run tests on windows too.\n- http://www.appveyor.com/docs/lang/nodejs-iojs\n- https://github.com/paulmillr/chokidar/blob/master/appveyor.yml\n. What does /Users/codydaig/Documents/Projects/rmsara.org/util.js:25:4 look like i.e. are you using callback with sync glob?\n. Looks like the behaviour has changed. This should do the same without callback:\njs\nvar files = glob.sync(globPatterns);\nif (removeRoot) {\n    files = files.map(function(file) {\n        return file.replace(removeRoot, '');\n    });\n}\noutput = _.union(output, files);\nhttps://github.com/isaacs/node-glob#globsyncpattern-options\n. https://docs.npmjs.com/files/package.json#files\n\nThe \"files\" field is an array of files to include in your project\n\nhttps://github.com/isaacs/node-glob/blob/abdad4c2e6b0ff22850401ff746194183b950da1/package.json#L11-L15\n. @isaacs Ok, thanks for info. Have to figure out alternative.\n. Most of the glob-stream tests are currently broken on windows. All pass when using glob 4.2.2.\n. https://github.com/isaacs/minimatch/commit/66681f49cfbb692c4a4f40aa72b628bd773d5819\n. Tests pass again in gulp & glob-stream. :+1: \n. @isaacs There's appveyor if you want to run tests on windows too.\n- http://www.appveyor.com/docs/lang/nodejs-iojs\n- https://github.com/paulmillr/chokidar/blob/master/appveyor.yml\n. What does /Users/codydaig/Documents/Projects/rmsara.org/util.js:25:4 look like i.e. are you using callback with sync glob?\n. Looks like the behaviour has changed. This should do the same without callback:\njs\nvar files = glob.sync(globPatterns);\nif (removeRoot) {\n    files = files.map(function(file) {\n        return file.replace(removeRoot, '');\n    });\n}\noutput = _.union(output, files);\nhttps://github.com/isaacs/node-glob#globsyncpattern-options\n. https://docs.npmjs.com/files/package.json#files\n\nThe \"files\" field is an array of files to include in your project\n\nhttps://github.com/isaacs/node-glob/blob/abdad4c2e6b0ff22850401ff746194183b950da1/package.json#L11-L15\n. ",
    "vkichline": "Hello, this is my first pull request.  I've been a software professional for years, but am trying to become social.\nI was reading your excellent docs, and noticed some small but distracting typos.  I've tried to submit this as a simple, isolated, documented fix.  If I am not doing this correctly, please let me know how I could improve.  And thanks; love node-glob.\n. Sorry, should NOT have pressed 'Close and Comment.'\n. Hello, this is my first pull request.  I've been a software professional for years, but am trying to become social.\nI was reading your excellent docs, and noticed some small but distracting typos.  I've tried to submit this as a simple, isolated, documented fix.  If I am not doing this correctly, please let me know how I could improve.  And thanks; love node-glob.\n. Sorry, should NOT have pressed 'Close and Comment.'\n. ",
    "everbuild": "+1\n. +1\n. ",
    "Namek": "\nAfter some fighting, I tried pinning glob at the top level to 4.2.2, after which point the problem vanished.\n\n@StoneCypher so you made it working? I tried to npm install glob@4.2.2 in my project but didn't get any results. Also tried to change the version in all modules and submodules inside the project. No effect.\n. Probably I did something wrong but deleting everyting worked, thanks!\n. > After some fighting, I tried pinning glob at the top level to 4.2.2, after which point the problem vanished.\n@StoneCypher so you made it working? I tried to npm install glob@4.2.2 in my project but didn't get any results. Also tried to change the version in all modules and submodules inside the project. No effect.\n. Probably I did something wrong but deleting everyting worked, thanks!\n. ",
    "sbialy": "Adding glob 4.2.2 to devDependencies and deleting node_modules did the trick for me (it wasn't working without deleting node_modules)\n. @StuartMorris0 @ChristopherHackett \nnpm install glob@4.2.2 --save-dev\nModify package.json afterwards and remove caret from glob's version\n. Adding glob 4.2.2 to devDependencies and deleting node_modules did the trick for me (it wasn't working without deleting node_modules)\n. @StuartMorris0 @ChristopherHackett \nnpm install glob@4.2.2 --save-dev\nModify package.json afterwards and remove caret from glob's version\n. ",
    "antoinepourriot": "@sbialy. that worked for me, i had also to [npm cache clean]\n. @sbialy. that worked for me, i had also to [npm cache clean]\n. ",
    "koistya": "+1\n. +1\n. ",
    "sochka": "+1\n. Why does it?\n. +1\n. Why does it?\n. ",
    "AlexVBr": "Same here. Fixed by addind glob@4.2.2 as a top-level dependency of the app.\n. Same here. Fixed by addind glob@4.2.2 as a top-level dependency of the app.\n. ",
    "vbourgeois": "Same issue here. The work-around worked for me too, thx.\n. Same issue here. The work-around worked for me too, thx.\n. ",
    "ChristopherHackett": "Sorry, how does one pin version 4.2.2 when installing a package using npm? \n. Sorry, how does one pin version 4.2.2 when installing a package using npm? \n. ",
    "Pabloader": "It happens because file path became like 'C:projectapp' after glob instead of 'C:\\project\\app'.\nnode-glob just wipes backslashes out.\n. It happens because file path became like 'C:projectapp' after glob instead of 'C:\\project\\app'.\nnode-glob just wipes backslashes out.\n. ",
    "StuartMorris0": "So how does one, pin version 4.2.2 or add glob@4.2.2 as a top level dependency? \nCan someone confirm the changes to the package.json file for a project please?\n. @sbialy Thanks, that did the trick for me.\n. So how does one, pin version 4.2.2 or add glob@4.2.2 as a top level dependency? \nCan someone confirm the changes to the package.json file for a project please?\n. @sbialy Thanks, that did the trick for me.\n. ",
    "Fabryprog": "+1\n. +1\n. ",
    "StoneCypher": "@isaacs If you'll point me at a node testing 101 document, I'll write some tests to prevent this in the future\n. @isaacs So if I wrote a set of, say, vows test cases that you felt covered this, and were good enough, you'd accept something in that style?\n. @isaacs If you'll point me at a node testing 101 document, I'll write some tests to prevent this in the future\n. @isaacs So if I wrote a set of, say, vows test cases that you felt covered this, and were good enough, you'd accept something in that style?\n. ",
    "flynx": "Just noticed that I was doing the same thing twice in the code above, here is a more generic version:\n``` javascript\nfunction guaranteeEvents(names, emitter){\n    names = typeof(names) == typeof('str') ? names.split(/\\s+/g) : names\nnames.forEach(function(name){\n    var seen = []\n    emitter\n        // remember each event emitted...\n        .on(name, function(){\n            seen.push([].slice.apply(arguments))\n        })\n        // call the handler with the it events missed...\n        .on('newListener', function(evt, func){\n            if(evt == name && seen.length > 0){\n                var that = this\n                seen.forEach(function(args){\n                    func.apply(that, args)\n                })\n            }\n        })\n})\n\nreturn emitter\n\n}\nfunction guaranteeGlobEvents(glob){\n    return guaranteeEvents('match end', glob)\n}\n```\n. Yep, when I made the generic implementation above, I thought the same thing ;)\nThough the ability to miss a match or two or even an end event in some conditions, still does not sit well with me -- this is that spot where a mix of Promise/Deferred state semantics with EventEmitter's multiple different events, would come in handy...\nUPDATE: just in case it might be useful, this is now here: https://www.npmjs.com/package/guarantee-events\n. Just noticed that I was doing the same thing twice in the code above, here is a more generic version:\n``` javascript\nfunction guaranteeEvents(names, emitter){\n    names = typeof(names) == typeof('str') ? names.split(/\\s+/g) : names\nnames.forEach(function(name){\n    var seen = []\n    emitter\n        // remember each event emitted...\n        .on(name, function(){\n            seen.push([].slice.apply(arguments))\n        })\n        // call the handler with the it events missed...\n        .on('newListener', function(evt, func){\n            if(evt == name && seen.length > 0){\n                var that = this\n                seen.forEach(function(args){\n                    func.apply(that, args)\n                })\n            }\n        })\n})\n\nreturn emitter\n\n}\nfunction guaranteeGlobEvents(glob){\n    return guaranteeEvents('match end', glob)\n}\n```\n. Yep, when I made the generic implementation above, I thought the same thing ;)\nThough the ability to miss a match or two or even an end event in some conditions, still does not sit well with me -- this is that spot where a mix of Promise/Deferred state semantics with EventEmitter's multiple different events, would come in handy...\nUPDATE: just in case it might be useful, this is now here: https://www.npmjs.com/package/guarantee-events\n. ",
    "sinedied": "@isaacs Escaping does not work for me :/\nI used the regexp in https://github.com/isaacs/node-glob/issues/277 and checked that the path is escaped properly, but it still tries to match it.\nI'm on OSX BTW.\nSorry the issue seems to be related to mem-fs-editor which is using your lib, but no on your side, my bad.. @hhamilto I have a similar issue, except that the [ and ] character are part of the filename. I tried escaping with a backslash using your regexp, but it still doesn't work. Any ideas?. @isaacs Escaping does not work for me :/\nI used the regexp in https://github.com/isaacs/node-glob/issues/277 and checked that the path is escaped properly, but it still tries to match it.\nI'm on OSX BTW.\nSorry the issue seems to be related to mem-fs-editor which is using your lib, but no on your side, my bad.. @hhamilto I have a similar issue, except that the [ and ] character are part of the filename. I tried escaping with a backslash using your regexp, but it still doesn't work. Any ideas?. ",
    "redben": "Thanks !\n. Thanks !\n. ",
    "YurySolovyov": "Isn't it worth documenting?\n. something like https://github.com/rvagg/changelog-maker ?\n. Isn't it worth documenting?\n. something like https://github.com/rvagg/changelog-maker ?\n. ",
    "13087322222": "\u5f88\u6709\u7528\n. \u5f88\u6709\u7528\n. \u5f88\u6709\u7528\n. \u5f88\u6709\u7528\n. ",
    "meyer": "Hmm. I\u2019ve done some more digging. That thing about the subfolder pattern being the issue ended up being a bunch of baloney. Looks like this bug has something to do with options.cwd being set, but not being equal to pwd.\nHere\u2019s the test code:\n``` coffee\nglob = require \"glob\"\nglobtions = sync: true\nprocess.chdir \"/Users/meyer/glob-test\"\nconsole.log \"PWD: #{process.cwd()}\"\nconsole.log \"globtions.cwd: #{globtions.cwd}\"\nconsole.log \"Matches:\", glob(\"*/\", globtions), \"\\n\"\nglobtions.cwd = \"/Users/meyer/glob-test\"\nconsole.log \"PWD: #{process.cwd()}\"\nconsole.log \"globtions.cwd: #{globtions.cwd}\"\nconsole.log \"Matches:\", glob(\"*/\", globtions), \"\\n\"\nprocess.chdir \"../\"\nconsole.log \"PWD: #{process.cwd()}\"\nconsole.log \"globtions.cwd: #{globtions.cwd}\"\nconsole.log \"Matches:\", glob(\"*/\", globtions), \"\\n\"\n```\nHere\u2019s the output:\n\nContents of ~/glob-test:\n\u276f ls -la ~/glob-test\ntotal 16\ndrwxr-xr-x   5 meyer  staff   170 Feb  4 20:17 .\ndrwxr-xr-x+ 77 meyer  staff  2618 Feb  4 22:23 ..\n-rw-r--r--@  1 meyer  staff  6148 Feb  4 20:17 .DS_Store\n-rw-r--r--   1 meyer  staff     0 Feb  4 20:14 this is a file.txt\ndrwxr-xr-x   2 meyer  staff    68 Feb  4 20:14 this is a folder\nStill digging\u2026\n. I found the issue. It\u2019s a multilevel thing. Kind of a cascading bug situation. Pretty simple to fix. I\u2019ll submit a PR with some questions later on today.\n. Hmm. I\u2019ve done some more digging. That thing about the subfolder pattern being the issue ended up being a bunch of baloney. Looks like this bug has something to do with options.cwd being set, but not being equal to pwd.\nHere\u2019s the test code:\n``` coffee\nglob = require \"glob\"\nglobtions = sync: true\nprocess.chdir \"/Users/meyer/glob-test\"\nconsole.log \"PWD: #{process.cwd()}\"\nconsole.log \"globtions.cwd: #{globtions.cwd}\"\nconsole.log \"Matches:\", glob(\"*/\", globtions), \"\\n\"\nglobtions.cwd = \"/Users/meyer/glob-test\"\nconsole.log \"PWD: #{process.cwd()}\"\nconsole.log \"globtions.cwd: #{globtions.cwd}\"\nconsole.log \"Matches:\", glob(\"*/\", globtions), \"\\n\"\nprocess.chdir \"../\"\nconsole.log \"PWD: #{process.cwd()}\"\nconsole.log \"globtions.cwd: #{globtions.cwd}\"\nconsole.log \"Matches:\", glob(\"*/\", globtions), \"\\n\"\n```\nHere\u2019s the output:\n\nContents of ~/glob-test:\n\u276f ls -la ~/glob-test\ntotal 16\ndrwxr-xr-x   5 meyer  staff   170 Feb  4 20:17 .\ndrwxr-xr-x+ 77 meyer  staff  2618 Feb  4 22:23 ..\n-rw-r--r--@  1 meyer  staff  6148 Feb  4 20:17 .DS_Store\n-rw-r--r--   1 meyer  staff     0 Feb  4 20:14 this is a file.txt\ndrwxr-xr-x   2 meyer  staff    68 Feb  4 20:14 this is a folder\nStill digging\u2026\n. I found the issue. It\u2019s a multilevel thing. Kind of a cascading bug situation. Pretty simple to fix. I\u2019ll submit a PR with some questions later on today.\n. ",
    "alexeyten": "Possible duplicate of #123 \n. Possible duplicate of #123 \n. ",
    "bilalakil": "Just wanted to raise that I'm having this issue too, and have been able to distill it to a more easily reproducible issue. It's been sitting in StackOverflow for a while: http://stackoverflow.com/q/29447637/1406230\nI've had the problem on a Mac or two, across various OSes (considering the time I first posted that question), now on the latest, with glob v7.1.1.\n. Just wanted to raise that I'm having this issue too, and have been able to distill it to a more easily reproducible issue. It's been sitting in StackOverflow for a while: http://stackoverflow.com/q/29447637/1406230\nI've had the problem on a Mac or two, across various OSes (considering the time I first posted that question), now on the latest, with glob v7.1.1.\n. ",
    "boneskull": "Actually, I think this is related to this?  I'll close this; I didn't realize it was an npm bug--thought it was the intended behavior.\n. Actually, I think this is related to this?  I'll close this; I didn't realize it was an npm bug--thought it was the intended behavior.\n. ",
    "bannostookaylo": "BRILLIANT!!! Thank you so much! :+1: \n. BRILLIANT!!! Thank you so much! :+1: \n. ",
    "codydaig": "Yes I am. Is that no longer supported?\nmodule.exports.getGlobbedFiles = function(globPatterns, removeRoot) {\n    // Initiate the output array\n    var output = [];\n```\n// For context switching\nvar _this = this;\n// URL paths regex\nvar urlRegex = new RegExp('^(?:[a-z]+:)?\\/\\/', 'i');\n// If glob pattern is array so we use each pattern in a recursive way, otherwise we use glob\nif (.isArray(globPatterns)) {\n    globPatterns.forEach(function(globPattern) {\n        output = .union(output, this.getGlobbedFiles(globPattern, removeRoot));\n    });\n} else if (.isString(globPatterns)) {\n    if (urlRegex.test(globPatterns)) {\n        output.push(globPatterns);\n    } else {\n        glob(globPatterns, { sync: true }, function(err, files) {\n            if (removeRoot) {\n                files = files.map(function(file) {\n                    return file.replace(removeRoot, '');\n                });\n            }\n            output = _.union(output, files);\n        });\n    }\n}\n// return the array of globbed files\nreturn output;\n```\n}\n. This open source projects uses it: https://github.com/meanjs/mean/blob/master/config/config.js\nI've taken that project and reworked it to fit my needs. But when I take that same project and upgrade to 4.4.0 I have the same issue that I am having.\n. @heikki Thanks a bunch! That worked perfectly!!\n. Yes I am. Is that no longer supported?\nmodule.exports.getGlobbedFiles = function(globPatterns, removeRoot) {\n    // Initiate the output array\n    var output = [];\n```\n// For context switching\nvar _this = this;\n// URL paths regex\nvar urlRegex = new RegExp('^(?:[a-z]+:)?\\/\\/', 'i');\n// If glob pattern is array so we use each pattern in a recursive way, otherwise we use glob\nif (.isArray(globPatterns)) {\n    globPatterns.forEach(function(globPattern) {\n        output = .union(output, this.getGlobbedFiles(globPattern, removeRoot));\n    });\n} else if (.isString(globPatterns)) {\n    if (urlRegex.test(globPatterns)) {\n        output.push(globPatterns);\n    } else {\n        glob(globPatterns, { sync: true }, function(err, files) {\n            if (removeRoot) {\n                files = files.map(function(file) {\n                    return file.replace(removeRoot, '');\n                });\n            }\n            output = _.union(output, files);\n        });\n    }\n}\n// return the array of globbed files\nreturn output;\n```\n}\n. This open source projects uses it: https://github.com/meanjs/mean/blob/master/config/config.js\nI've taken that project and reworked it to fit my needs. But when I take that same project and upgrade to 4.4.0 I have the same issue that I am having.\n. @heikki Thanks a bunch! That worked perfectly!!\n. ",
    "tyagiakhilesh": "Works like a charm. Thanks guys.\n. Works like a charm. Thanks guys.\n. ",
    "sielay": "I used latest from NPM. But then I figured out I can handle it with g.continue();. So you can close this issue. Maybe doc could be more clear on handling crawl errors.\n. Now I am confused, as I use it ;) (here https://github.com/sielay/roadmarks/blob/master/src/RoadMarks.js#L138) But maybe my test is wrong and it jumps over it. Anyhow I see you have g.resume which does the same.\n. I used latest from NPM. But then I figured out I can handle it with g.continue();. So you can close this issue. Maybe doc could be more clear on handling crawl errors.\n. Now I am confused, as I use it ;) (here https://github.com/sielay/roadmarks/blob/master/src/RoadMarks.js#L138) But maybe my test is wrong and it jumps over it. Anyhow I see you have g.resume which does the same.\n. ",
    "fourcube": "https://github.com/isaacs/node-glob/blob/master/glob.js#L642\n``` js\nGlob.prototype._stat2 = function (f, abs, er, stat, cb) {\n  if (er) {\n    this.statCache[abs] = false\n    return cb()\n  }\nthis.statCache[abs] = stat\nif (abs.slice(-1) === '/' && !stat.isDirectory())\n    return cb(null, false, stat)\nvar c = stat.isDirectory() ? 'DIR' : 'FILE'\n  this.cache[f] = this.cache[f] || c\n  return cb(null, c, stat)\n}\n```\nWhen a broken symlink is encountered, er will be ENOENT. Should the error and path be returned when nonull:true?\n. @isaacs I stumbled over this while running broccoli serve with a dependency tree like plugin->less-processor->rimraf->glob. Since ember-cli's build pipeline is also based on broccoli, ember-cli/ember-cli#3413 might also be fixed by solving this one.\nWhat happens during broccoli serve is this:\n1. A symlink is set on a temporary directory by X\n2. Processing works as normal\n3. ... \n4. Temporay directory is deleted\n5. The symlink still exists, but is reported as absent by glob\n6. rimraf does not delete the link\n7. X tries to create the link again -> EEXIST\n. Thank you for fixing this issue so quickly!\n. https://github.com/isaacs/node-glob/blob/master/glob.js#L642\n``` js\nGlob.prototype._stat2 = function (f, abs, er, stat, cb) {\n  if (er) {\n    this.statCache[abs] = false\n    return cb()\n  }\nthis.statCache[abs] = stat\nif (abs.slice(-1) === '/' && !stat.isDirectory())\n    return cb(null, false, stat)\nvar c = stat.isDirectory() ? 'DIR' : 'FILE'\n  this.cache[f] = this.cache[f] || c\n  return cb(null, c, stat)\n}\n```\nWhen a broken symlink is encountered, er will be ENOENT. Should the error and path be returned when nonull:true?\n. @isaacs I stumbled over this while running broccoli serve with a dependency tree like plugin->less-processor->rimraf->glob. Since ember-cli's build pipeline is also based on broccoli, ember-cli/ember-cli#3413 might also be fixed by solving this one.\nWhat happens during broccoli serve is this:\n1. A symlink is set on a temporary directory by X\n2. Processing works as normal\n3. ... \n4. Temporay directory is deleted\n5. The symlink still exists, but is reported as absent by glob\n6. rimraf does not delete the link\n7. X tries to create the link again -> EEXIST\n. Thank you for fixing this issue so quickly!\n. ",
    "binarykitchen": "Ah, thanks @isaacs, makes sense.\nNo idea how npm deals with these situations but is there a chance npm could print a warning/hint on removed versions?\nLike that we wouldn't have to wonder why a deployment or build fails and save some minutes.\n. Ah, thanks @isaacs, makes sense.\nNo idea how npm deals with these situations but is there a chance npm could print a warning/hint on removed versions?\nLike that we wouldn't have to wonder why a deployment or build fails and save some minutes.\n. ",
    "rentalhost": "I did not understand this part:\n\nreplace all back-slashes with forward-slashes, and then swap back to back-slashes in the result.\n\nYou mean, on unit test, you will replace \\ to / to match with result, is that? If yes, is a good idea.\nI opened a topic on SO to listen someone about test unit in all systems: http://stackoverflow.com/questions/28918855/running-node-tests-in-all-systems-without-have-it\n. I did not understand this part:\n\nreplace all back-slashes with forward-slashes, and then swap back to back-slashes in the result.\n\nYou mean, on unit test, you will replace \\ to / to match with result, is that? If yes, is a good idea.\nI opened a topic on SO to listen someone about test unit in all systems: http://stackoverflow.com/questions/28918855/running-node-tests-in-all-systems-without-have-it\n. ",
    "schnittstabil": "Also works in 4.4.0 as expected, but fails also in 5.0.0 :-(\nMy test:\nsh\nmkdir -p test/deep\nnode -e \"console.log( require('glob').sync('**/*', {cwd: 'test', nodir: true}) )\"\n[ 'deep' ]\n. @nikku I can't reproduce your results with the async call - It seems to me, that it's only a glob.sync issue.\n. Wow, that was fast! Thanks a lot!\n. The async behavior also changed some commits later: 5a40b67 (that's also between v4.0.6 and v4.1.0):\nsh\n$ node -e \" require('glob')('xyz', {nonull: true}, function(e, f) { console.log(f) } ); \"\n[]\n. 1. fs.statSync('deleteMe.txt')\nError: EPERM: operation not permitted, stat 'C:\\Dokumente und Einstellungen\\Administrator\\Eigene Dateien\\deleteMe.txt'\n   at Error (native)\n   at Object.fs.statSync (fs.js:892:18)\n   at Object.<anonymous> (C:\\Dokumente und Einstellungen\\Administrator\\Eigene Dateien\\test.js:6:31)\n   at Module._compile (module.js:413:34)\n   at Object.Module._extensions..js (module.js:422:10)\n   at Module.load (module.js:357:32)\n   at Function.Module._load (module.js:314:12)\n   at Function.Module.runMain (module.js:447:10)\n   at startup (node.js:139:18)\n   at node.js:999:3\n2. glob.sync('deleteMe.txt', { stat: true }) returns [] w/o error\n3. But fs.readdirSync('.') returns ['deleteMe.txt', \u2026]\n. > Do you think it should return an error if { stat: true } is used?\nUm, no, I think glob.sync('deleteMe.txt', { stat: true }) should return filenames, not errors!? :wink: \u2013 dunno if it should throw an error\u2026\nI've only mentioned it for the sake of completeness\u2026\n. @isaacs Thanks a lot, works as expected on my VM.\nBtw, executing glob('d/**') on a directory d without permission entries works too, it throws an error \u2013 similar to dir d.\n\n\nif they do stat: true, then that means that the stat call should be required to succeed.\n\nIMO it only means that stat is called on all results. However, one may expect appropriate statCache entries, thus glob(\u2026 {stat: true}) should set some error entries.\n. > Btw, executing glob('d/**') on a directory d without permission entries works too, it throws an error \u2013 similar to dir d.\n@isaacs Thus, no crash, works as expected.\n. Sorry, for the misunderstanding. To be more clear:\n1. I've created a directory d\n2. and removed all permission entries (Windows Explorer) of d\n\nAs expected:\njs\nconsole.log(glob.sync('d/**'));\nC:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test>node index.js\nError: EPERM: operation not permitted, scandir 'C:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test\\d'\n    at Error (native)\n    at Object.fs.readdirSync (fs.js:808:18)\n    at GlobSync._readdir (C:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test\\node_modules\\glob\\sync.js:288:41)\n    at GlobSync._processGlobStar (C:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test\\node_modules\\glob\\sync.js:350:22)\n    at GlobSync._process (C:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test\\node_modules\\glob\\sync.js:130:10)\n    at new GlobSync (C:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test\\node_modules\\glob\\sync.js:48:10)\n    at Function.globSync [as sync] (C:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test\\node_modules\\glob\\sync.js:26:10)\n    at Object.<anonymous> (C:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test\\index.js:3:18)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n\nHowever, I don't know if this is intended, but I don't understand why the following error gets printed:\njs\ntry {\n    glob('d/**', function (err, files) {});\n} catch (err) {\n}\njs\nC:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test>node index.js\nglob error { [Error: EPERM: operation not permitted, scandir 'C:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test\\d']\n  errno: -4048,\n  code: 'EPERM',\n  syscall: 'scandir',\n  path: 'C:\\\\Dokumente und Einstellungen\\\\Administrator\\\\Desktop\\\\glob-test\\\\d'\n}\n. Just for the sake of completeness, errSync and errAsync are essential the same 'EPERM' error:\n``` js\ntry {\n    glob.sync('d/**');\n} catch (errSync) {}\nglob('d/**', errAsync => {});\n```\nThe additional glob error {\u2026}, which only happens in async, has puzzled me a bit\u2026\n. > I don't know why it's warning in async and throwing in sync, though, that's strange. \nFound it:\nsync.js#L336-L342:\njs\n    default: // some unusual error.  Treat as failure.\n      this.cache[this._makeAbs(f)] = false\n      if (this.strict)\n        throw er\n      if (!this.silent)\n        console.error('glob error', er)\n      break\nIn glob.js#L609-L619:\njs\n    default: // some unusual error.  Treat as failure.\n      this.cache[this._makeAbs(f)] = false\n      if (this.strict) {\n        this.emit('error', er)\n        // If the error is handled, then we abort\n        // if not, we threw out of here\n        this.abort()\n      }\n      if (!this.silent)\n        console.error('glob error', er)\n      break\n. Also works in 4.4.0 as expected, but fails also in 5.0.0 :-(\nMy test:\nsh\nmkdir -p test/deep\nnode -e \"console.log( require('glob').sync('**/*', {cwd: 'test', nodir: true}) )\"\n[ 'deep' ]\n. @nikku I can't reproduce your results with the async call - It seems to me, that it's only a glob.sync issue.\n. Wow, that was fast! Thanks a lot!\n. The async behavior also changed some commits later: 5a40b67 (that's also between v4.0.6 and v4.1.0):\nsh\n$ node -e \" require('glob')('xyz', {nonull: true}, function(e, f) { console.log(f) } ); \"\n[]\n. 1. fs.statSync('deleteMe.txt')\nError: EPERM: operation not permitted, stat 'C:\\Dokumente und Einstellungen\\Administrator\\Eigene Dateien\\deleteMe.txt'\n   at Error (native)\n   at Object.fs.statSync (fs.js:892:18)\n   at Object.<anonymous> (C:\\Dokumente und Einstellungen\\Administrator\\Eigene Dateien\\test.js:6:31)\n   at Module._compile (module.js:413:34)\n   at Object.Module._extensions..js (module.js:422:10)\n   at Module.load (module.js:357:32)\n   at Function.Module._load (module.js:314:12)\n   at Function.Module.runMain (module.js:447:10)\n   at startup (node.js:139:18)\n   at node.js:999:3\n2. glob.sync('deleteMe.txt', { stat: true }) returns [] w/o error\n3. But fs.readdirSync('.') returns ['deleteMe.txt', \u2026]\n. > Do you think it should return an error if { stat: true } is used?\nUm, no, I think glob.sync('deleteMe.txt', { stat: true }) should return filenames, not errors!? :wink: \u2013 dunno if it should throw an error\u2026\nI've only mentioned it for the sake of completeness\u2026\n. @isaacs Thanks a lot, works as expected on my VM.\nBtw, executing glob('d/**') on a directory d without permission entries works too, it throws an error \u2013 similar to dir d.\n\n\nif they do stat: true, then that means that the stat call should be required to succeed.\n\nIMO it only means that stat is called on all results. However, one may expect appropriate statCache entries, thus glob(\u2026 {stat: true}) should set some error entries.\n. > Btw, executing glob('d/**') on a directory d without permission entries works too, it throws an error \u2013 similar to dir d.\n@isaacs Thus, no crash, works as expected.\n. Sorry, for the misunderstanding. To be more clear:\n1. I've created a directory d\n2. and removed all permission entries (Windows Explorer) of d\n\nAs expected:\njs\nconsole.log(glob.sync('d/**'));\nC:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test>node index.js\nError: EPERM: operation not permitted, scandir 'C:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test\\d'\n    at Error (native)\n    at Object.fs.readdirSync (fs.js:808:18)\n    at GlobSync._readdir (C:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test\\node_modules\\glob\\sync.js:288:41)\n    at GlobSync._processGlobStar (C:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test\\node_modules\\glob\\sync.js:350:22)\n    at GlobSync._process (C:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test\\node_modules\\glob\\sync.js:130:10)\n    at new GlobSync (C:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test\\node_modules\\glob\\sync.js:48:10)\n    at Function.globSync [as sync] (C:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test\\node_modules\\glob\\sync.js:26:10)\n    at Object.<anonymous> (C:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test\\index.js:3:18)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n\nHowever, I don't know if this is intended, but I don't understand why the following error gets printed:\njs\ntry {\n    glob('d/**', function (err, files) {});\n} catch (err) {\n}\njs\nC:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test>node index.js\nglob error { [Error: EPERM: operation not permitted, scandir 'C:\\Dokumente und Einstellungen\\Administrator\\Desktop\\glob-test\\d']\n  errno: -4048,\n  code: 'EPERM',\n  syscall: 'scandir',\n  path: 'C:\\\\Dokumente und Einstellungen\\\\Administrator\\\\Desktop\\\\glob-test\\\\d'\n}\n. Just for the sake of completeness, errSync and errAsync are essential the same 'EPERM' error:\n``` js\ntry {\n    glob.sync('d/**');\n} catch (errSync) {}\nglob('d/**', errAsync => {});\n```\nThe additional glob error {\u2026}, which only happens in async, has puzzled me a bit\u2026\n. > I don't know why it's warning in async and throwing in sync, though, that's strange. \nFound it:\nsync.js#L336-L342:\njs\n    default: // some unusual error.  Treat as failure.\n      this.cache[this._makeAbs(f)] = false\n      if (this.strict)\n        throw er\n      if (!this.silent)\n        console.error('glob error', er)\n      break\nIn glob.js#L609-L619:\njs\n    default: // some unusual error.  Treat as failure.\n      this.cache[this._makeAbs(f)] = false\n      if (this.strict) {\n        this.emit('error', er)\n        // If the error is handled, then we abort\n        // if not, we threw out of here\n        this.abort()\n      }\n      if (!this.silent)\n        console.error('glob error', er)\n      break\n. ",
    "nikku": "Yes, sorry for the sloppy bug report. I am using sync + cwd, too.\n. Yes, sorry for the sloppy bug report. I am using sync + cwd, too.\n. ",
    "binarybro": "We're still running into this issue when using options \"cwd\" and \"nodir\".\nnode-glob: 5.0.10\nWindows: 10.0.10.130\n. We're still running into this issue when using options \"cwd\" and \"nodir\".\nnode-glob: 5.0.10\nWindows: 10.0.10.130\n. ",
    "eddiemonge": "Would you be open to having a commit message format for every commit?\n. Would you be open to having a commit message format for every commit?\n. ",
    "jimf": "\n\"But I don't want to write one by hand.\"\n\nWrite or maintain?\n. > \"But I don't want to write one by hand.\"\nWrite or maintain?\n. ",
    "charlierudolph": "If you want to have a script that does it automatically, you need have each commit in a specific format. \nIf you don't want to do that, what I've done in other projects is before each release look through the commits since the last release and determine which you should let users know about (interface changes, bug fixes, new features). You could use the following command to get the commits since the last release: git log <last-version-tag>..master.\nKeeping a changelog is very useful for users who would otherwise need to look through the commits and changes since the last release. A maintainer should be able to determine the relevant changes much more easily.\nI doubt backfilling the changelog to the initial version is all that useful anyway, so just starting one now and adding to it with each new release would be greatly appreciated.\n. If you want to have a script that does it automatically, you need have each commit in a specific format. \nIf you don't want to do that, what I've done in other projects is before each release look through the commits since the last release and determine which you should let users know about (interface changes, bug fixes, new features). You could use the following command to get the commits since the last release: git log <last-version-tag>..master.\nKeeping a changelog is very useful for users who would otherwise need to look through the commits and changes since the last release. A maintainer should be able to determine the relevant changes much more easily.\nI doubt backfilling the changelog to the initial version is all that useful anyway, so just starting one now and adding to it with each new release would be greatly appreciated.\n. ",
    "lfender6445": "ahh just found ignore, let me try that\n. thank you so much for the quick response!\n. ahh just found ignore, let me try that\n. thank you so much for the quick response!\n. ",
    "shinnn": "Fixed in https://github.com/isaacs/node-glob/commit/b185987e1c8d6d192b538b194be768d0f844f40e\n. Oh, \"Test on io.js and Node 0.12\" is included in https://github.com/isaacs/node-glob/pull/188 and that has been merged :clap: . I'll remove it from this PR to resolve merge conflicts.\n. Updated.\n. Related official blog post: http://blog.travis-ci.com/2014-12-17-faster-builds-with-container-based-infrastructure/\n. Currently Travis CI shows this message on non-container based builds.\nhttps://travis-ci.org/isaacs/node-glob/jobs/71010066\n\n\nlegacy infrastructure\n\nIt seems that the service strongly recommends using container-based infrastructure.\n. What is blocking this from being merged?\n. Fixed in https://github.com/isaacs/node-glob/commit/b185987e1c8d6d192b538b194be768d0f844f40e\n. @Qix- I recommend checking whether the same PR already exists or not before creating a new PR. https://github.com/isaacs/node-glob/pull/186\n. Fixed in https://github.com/isaacs/node-glob/commit/b185987e1c8d6d192b538b194be768d0f844f40e\n. Oh, \"Test on io.js and Node 0.12\" is included in https://github.com/isaacs/node-glob/pull/188 and that has been merged :clap: . I'll remove it from this PR to resolve merge conflicts.\n. Updated.\n. Related official blog post: http://blog.travis-ci.com/2014-12-17-faster-builds-with-container-based-infrastructure/\n. Currently Travis CI shows this message on non-container based builds.\nhttps://travis-ci.org/isaacs/node-glob/jobs/71010066\n\n\nlegacy infrastructure\n\nIt seems that the service strongly recommends using container-based infrastructure.\n. What is blocking this from being merged?\n. Fixed in https://github.com/isaacs/node-glob/commit/b185987e1c8d6d192b538b194be768d0f844f40e\n. @Qix- I recommend checking whether the same PR already exists or not before creating a new PR. https://github.com/isaacs/node-glob/pull/186\n. ",
    "jldec": "posted small PR #185 for the readme.\nthe node-inspector issue i was working on doesn't require streaming matches from glob a.t.m - but probably as more modules adopt streaming this will resurface.\nthanks for implementing the realpath and follow options!\n. posted small PR #185 for the readme.\nthe node-inspector issue i was working on doesn't require streaming matches from glob a.t.m - but probably as more modules adopt streaming this will resurface.\nthanks for implementing the realpath and follow options!\n. ",
    "feross": "Here's a PR with a failing test: https://github.com/isaacs/node-glob/pull/190\n. UPDATE: Nevemind. Ignore\u00a0this comment. The correct pattern for the user to use is **/node_modules/** if they want nested node_modules folders to be ignore.\n\nI had a user report the same issue on standard: https://github.com/feross/standard/issues/746\nThey have an absolutely insane number of node_modules/ folders. We're calling:\njs\nglob('**/*.js', {\n        ignore: [\n          '**/*.min.js',\n          '**/bundle.js',\n          'coverage/**',\n          'node_modules/**',\n          'vendor/**'\n        ],\n        nodir: true\n      }, callback)\nAnd it seems like every single *.js file is discovered first (and this user has a TON of them, including tons in node_modules/). I see Glob.prototype._process is called for tons of files with paths like cerebral/debugger/function-tree-debugger/node_modules/sanitize-filename.\nFinally, the process crashes before the ignoring/filtering can happen.\nIs there any way we could make ignoring node_modules/ happen sooner in the process?. Here's a PR with a failing test: https://github.com/isaacs/node-glob/pull/190\n. UPDATE: Nevemind. Ignore\u00a0this comment. The correct pattern for the user to use is **/node_modules/** if they want nested node_modules folders to be ignore.\n\nI had a user report the same issue on standard: https://github.com/feross/standard/issues/746\nThey have an absolutely insane number of node_modules/ folders. We're calling:\njs\nglob('**/*.js', {\n        ignore: [\n          '**/*.min.js',\n          '**/bundle.js',\n          'coverage/**',\n          'node_modules/**',\n          'vendor/**'\n        ],\n        nodir: true\n      }, callback)\nAnd it seems like every single *.js file is discovered first (and this user has a TON of them, including tons in node_modules/). I see Glob.prototype._process is called for tons of files with paths like cerebral/debugger/function-tree-debugger/node_modules/sanitize-filename.\nFinally, the process crashes before the ignoring/filtering can happen.\nIs there any way we could make ignoring node_modules/ happen sooner in the process?. ",
    "DilipK01": "Upon submitting this issue I noticed that all my double-backslashes are converted to single-backslashes. For example, four backslashes are converted to two backslashes, and two backslashes are converted to single backslashes. (I might have some typo also) But I think you get the point.\n. Upon submitting this issue I noticed that all my double-backslashes are converted to single-backslashes. For example, four backslashes are converted to two backslashes, and two backslashes are converted to single backslashes. (I might have some typo also) But I think you get the point.\n. ",
    "rhubarbselleven": "Haha :D\n. Haha :D\n. ",
    "mlmorg": "+1\nYou can get around this today by doing something like:\n``` js\nvar glob = require('glob');\nvar isIgnored = require('glob/common').isIgnored;\nvar globber = new glob.Glob('*/.js', {ignore: ['foo.js']});\nglobber.on('match', function onMatch(match) {\n  if (isIgnored(globber, match)) {\n    return;\n  }\n  // Do something will paths that are not ignored...\n});\n```\n. Thanks @isaacs. Sorry, I was going to take a look at it later tonight but glad you got to it first!\n. +1\nYou can get around this today by doing something like:\n``` js\nvar glob = require('glob');\nvar isIgnored = require('glob/common').isIgnored;\nvar globber = new glob.Glob('*/.js', {ignore: ['foo.js']});\nglobber.on('match', function onMatch(match) {\n  if (isIgnored(globber, match)) {\n    return;\n  }\n  // Do something will paths that are not ignored...\n});\n```\n. Thanks @isaacs. Sorry, I was going to take a look at it later tonight but glad you got to it first!\n. ",
    "jmm": "@mlmorg Unfortunately that's no help for my situation: using gulp.src(), which uses this under the hood. With that all you can do is pass in pattern and options and it implements a match handler. However, they special-case negated patterns (!whatever), so I'm relying on that for now, although it feels pretty hokey since gulp.src() is documented as accepting the same pattern and options input as node-glob\n. Awesome, thanks!\n. If only you could sense when you were going to say patch welcome a few weeks in advance...\n. @mlmorg Unfortunately that's no help for my situation: using gulp.src(), which uses this under the hood. With that all you can do is pass in pattern and options and it implements a match handler. However, they special-case negated patterns (!whatever), so I'm relying on that for now, although it feels pretty hokey since gulp.src() is documented as accepting the same pattern and options input as node-glob\n. Awesome, thanks!\n. If only you could sense when you were going to say patch welcome a few weeks in advance...\n. ",
    "mik01aj": "+1.\nI do glob.sync('**/*-test.js', {cwd: '../api', ignore: ['*-integration-test.js']}) and get:\n[ '__tests__/Mapper-test.js',\n  '__tests__/authorization-integration-test.js', <--- WTF?\n(...)\n  'services/__tests__/s3service-test.js' ]\n. +1.\nI do glob.sync('**/*-test.js', {cwd: '../api', ignore: ['*-integration-test.js']}) and get:\n[ '__tests__/Mapper-test.js',\n  '__tests__/authorization-integration-test.js', <--- WTF?\n(...)\n  'services/__tests__/s3service-test.js' ]\n. ",
    "basarat": "This is still incomplete. A better fix : https://github.com/isaacs/node-glob/pull/222\n. This is still incomplete. A better fix : https://github.com/isaacs/node-glob/pull/222\n. ",
    "Qix-": "@shinnn I swear I did. Oh well.\n. @shinnn I swear I did. Oh well.\n. ",
    "jcrben": "The documentation suggests to use the ignore option:\nIt is better to use the ignore option to set a pattern or set of patterns \nto exclude from matches. If you want the \"everything except x\" type of behavior, \nyou can use ** as the main pattern, and set an ignore for the things to exclude.\n. The documentation suggests to use the ignore option:\nIt is better to use the ignore option to set a pattern or set of patterns \nto exclude from matches. If you want the \"everything except x\" type of behavior, \nyou can use ** as the main pattern, and set an ignore for the things to exclude.\n. ",
    "obastemur": "Sorry, don't remember the module depending on node-glob. Honestly, I don't even remember which project was that. We had to manually edit glob.js and move function definitions on top. \nfor example;\n```\nGlob.prototype.stat = function (f, cb) {\n  var abs = this._makeAbs(f)\n  ...\n  ...\n  var self = this\n  var statcb = inflight('stat\\0' + abs, lstatcb)\n  if (statcb)\n    fs.lstat(abs, statcb)\nfunction lstatcb_ (er, lstat) {\n    if (lstat && lstat.isSymbolicLink()) {\n      // If it's a symlink, then treat it as the target, unless\n      // the target does not exist, then treat it as a file.\n      return fs.stat(abs, function (er, stat) {\n        if (er)\n          self._stat2(f, abs, null, lstat, cb)\n        else\n          self._stat2(f, abs, er, stat, cb)\n      })\n    } else {\n      self._stat2(f, abs, er, lstat, cb)\n    }\n  }\n}\n```\nThe way lstatcb defined is not ECMA friendly. The scope issue becoming even more stricter with ES6 classes. Hopefully not but if putting up a sample code that throws an error is the only way for a change, I will try to find some space for it.\n. Although conditional scope is yet another issue, the piece of code Ive shared (from glob.js) exactly samples the problem you have shared.\nThat's the reason I had opened this issue. So, are you planning to apply it to glob or carry the functions to top?\n. scope discussion aside, once again hit to same problem. I've just realized that the issue is no longer the case on master or latest glob on npm. The problem looks like happening on older version.\nHere is the sample code to reproduce:\nsave into test.js\nrequire('jasmine');\nnpm install jasmine\nrun:\nnode --use-strict test.js\nresult\nnode_modules/jasmine/node_modules/glob/glob.js:323\n    function next(exists, isDir) {\n    ^^^^^^^^\nSyntaxError: In strict mode code, functions can only be declared at top level or immediately within another function.\nnode version: 0.12.6\nsolution:\nupdate the glob under jasmine to latest. \nI will be opening this issue on it's place (jasmine). \nThanks for the details and discussion.\n. Sorry, don't remember the module depending on node-glob. Honestly, I don't even remember which project was that. We had to manually edit glob.js and move function definitions on top. \nfor example;\n```\nGlob.prototype.stat = function (f, cb) {\n  var abs = this._makeAbs(f)\n  ...\n  ...\n  var self = this\n  var statcb = inflight('stat\\0' + abs, lstatcb)\n  if (statcb)\n    fs.lstat(abs, statcb)\nfunction lstatcb_ (er, lstat) {\n    if (lstat && lstat.isSymbolicLink()) {\n      // If it's a symlink, then treat it as the target, unless\n      // the target does not exist, then treat it as a file.\n      return fs.stat(abs, function (er, stat) {\n        if (er)\n          self._stat2(f, abs, null, lstat, cb)\n        else\n          self._stat2(f, abs, er, stat, cb)\n      })\n    } else {\n      self._stat2(f, abs, er, lstat, cb)\n    }\n  }\n}\n```\nThe way lstatcb defined is not ECMA friendly. The scope issue becoming even more stricter with ES6 classes. Hopefully not but if putting up a sample code that throws an error is the only way for a change, I will try to find some space for it.\n. Although conditional scope is yet another issue, the piece of code Ive shared (from glob.js) exactly samples the problem you have shared.\nThat's the reason I had opened this issue. So, are you planning to apply it to glob or carry the functions to top?\n. scope discussion aside, once again hit to same problem. I've just realized that the issue is no longer the case on master or latest glob on npm. The problem looks like happening on older version.\nHere is the sample code to reproduce:\nsave into test.js\nrequire('jasmine');\nnpm install jasmine\nrun:\nnode --use-strict test.js\nresult\nnode_modules/jasmine/node_modules/glob/glob.js:323\n    function next(exists, isDir) {\n    ^^^^^^^^\nSyntaxError: In strict mode code, functions can only be declared at top level or immediately within another function.\nnode version: 0.12.6\nsolution:\nupdate the glob under jasmine to latest. \nI will be opening this issue on it's place (jasmine). \nThanks for the details and discussion.\n. ",
    "jvoccia": "You probably should be using: \nL:/05*/*.dwg\nnot:\nL:/05**/*.dwg\nA \"globstar\" (**) should be used alone in a path Like: yyyy/**/*.dwg\n. Hey thanks for the quick response.  I can just keep back porting the change until grunt catches up (eventually).\n. You probably should be using: \nL:/05*/*.dwg\nnot:\nL:/05**/*.dwg\nA \"globstar\" (**) should be used alone in a path Like: yyyy/**/*.dwg\n. Hey thanks for the quick response.  I can just keep back porting the change until grunt catches up (eventually).\n. ",
    "jmorrisIII": "@isaacs the L: drive is a network drive. I also tried the L:/05*/*.dwg pattern on my C: drive with the following pattern C:/globtest/05*/*.dwg and it does work locally.\n. @isaacs the L: drive is a network drive. I also tried the L:/05*/*.dwg pattern on my C: drive with the following pattern C:/globtest/05*/*.dwg and it does work locally.\n. ",
    "bruce": "FWIW, I'm seeing what I think is similar behavior -- or at least cross-drive issues with globbing.\n``` javascript\n\nglob.sync('E:/B56F007A.BIN')\n[ 'E:/B56F007A.BIN' ]\nglob.sync('E:/B56F007*.BIN')\n[]\n```\n\nE: is an attached mass-storage device.\n. FWIW, I'm seeing what I think is similar behavior -- or at least cross-drive issues with globbing.\n``` javascript\n\nglob.sync('E:/B56F007A.BIN')\n[ 'E:/B56F007A.BIN' ]\nglob.sync('E:/B56F007*.BIN')\n[]\n```\n\nE: is an attached mass-storage device.\n. ",
    "joshvito": "I have also noticed the same behavior.\nI would expect to get matches from \"pre_*.xls\", but reverted to matching\"*.xls\" and transforming the returned array instead. \n. I have also noticed the same behavior.\nI would expect to get matches from \"pre_*.xls\", but reverted to matching\"*.xls\" and transforming the returned array instead. \n. ",
    "reyou": "I am having this issue while pushing on Azure. Is there any update on this?\n* Grunt :: An error occurred. *\n\n\u001b[31mAborted due to warnings.\u001b[39m\nRunning \"clean:dev\" (clean) task\u001b[24m\n\u001b[33mWarning: ENOTSUP: operation not supported on socket, scandir 'D:\\home\\site\\wwwroot.tmp\\public\\concat\\production.css'\u0007 \u001b[39m\nLooks like a Grunt error occurred--\nPlease fix it, then restart Sails to continue running tasks (e.g. watching for changes in assets)\nOr if you're stuck, check out the troubleshooting tips below.\n\u001b[4mTroubleshooting tips:\u001b[24m\n*-> Are \"grunt\" and related grunt task modules installed locally?  Run npm install if you're not sure.\n*-> You might have a malformed LESS, SASS, CoffeeScript file, etc.\n*-> Or maybe you don't have permissions to access the .tmp directory?\n     e.g., D:\\home\\site\\wwwroot\\.tmp ?\nIf you think this might be the case, try running:\n sudo chown -R YOUR_COMPUTER_USER_NAME D:\\home\\site\\wwwroot\\.tmp\nError: The hook grunt is taking too long to load.\nMake sure it is triggering its initialize() callback, or else set sails.config.grunt._hookTimeout to a higher value (currently 90000)\n    at tooLong [as _onTimeout] (D:\\home\\site\\wwwroot\\node_modules\\sails\\lib\\app\\private\\loadHooks.js:85:21)\n    at Timer.listOnTimeout (timers.js:92:15) { [Error: The hookgruntis taking too long to load.\nMake sure it is triggering itsinitialize()callback, or else setsails.config.grunt._hookTimeout to a higher value (currently 90000)] code: 'E_HOOK_TIMEOUT' }\n. I am having this issue while pushing on Azure. Is there any update on this?\n* Grunt :: An error occurred. *\n\n\u001b[31mAborted due to warnings.\u001b[39m\nRunning \"clean:dev\" (clean) task\u001b[24m\n\u001b[33mWarning: ENOTSUP: operation not supported on socket, scandir 'D:\\home\\site\\wwwroot.tmp\\public\\concat\\production.css'\u0007 \u001b[39m\nLooks like a Grunt error occurred--\nPlease fix it, then restart Sails to continue running tasks (e.g. watching for changes in assets)\nOr if you're stuck, check out the troubleshooting tips below.\n\u001b[4mTroubleshooting tips:\u001b[24m\n*-> Are \"grunt\" and related grunt task modules installed locally?  Run npm install if you're not sure.\n*-> You might have a malformed LESS, SASS, CoffeeScript file, etc.\n*-> Or maybe you don't have permissions to access the .tmp directory?\n     e.g., D:\\home\\site\\wwwroot\\.tmp ?\nIf you think this might be the case, try running:\n sudo chown -R YOUR_COMPUTER_USER_NAME D:\\home\\site\\wwwroot\\.tmp\nError: The hook grunt is taking too long to load.\nMake sure it is triggering its initialize() callback, or else set sails.config.grunt._hookTimeout to a higher value (currently 90000)\n    at tooLong [as _onTimeout] (D:\\home\\site\\wwwroot\\node_modules\\sails\\lib\\app\\private\\loadHooks.js:85:21)\n    at Timer.listOnTimeout (timers.js:92:15) { [Error: The hookgruntis taking too long to load.\nMake sure it is triggering itsinitialize()callback, or else setsails.config.grunt._hookTimeout to a higher value (currently 90000)] code: 'E_HOOK_TIMEOUT' }\n. ",
    "capaj": "I had this when Azure was deploying my node.js app. NPM install triggered these errors:\n```\nNode.js versions available on the platform are: 0.6.20, 0.8.2, 0.8.19, 0.8.26, 0.8.27, 0.8.28, 0.10.5, 0.10.18, 0.10.21, 0.10.24, 0.10.26, 0.10.28, 0.10.29, 0.10.31, 0.10.32, 0.10.40, 0.12.0, 0.12.2, 0.12.3, 0.12.6, 4.0.0, 4.1.0, 4.1.2, 4.2.1, 4.2.2, 4.2.3, 4.2.4, 4.3.0, 4.3.2, 4.4.0, 4.4.1, 5.0.0, 5.1.1, 5.3.0, 5.4.0, 5.5.0, 5.6.0, 5.7.0, 5.7.1, 5.8.0, 5.9.1.\nSelected node.js version 5.9.1. Use package.json file to choose a different version.\nSelected npm version 3.7.3\nUpdating iisnode.yml at D:\\home\\site\\wwwroot\\bin\\iisnode.yml\nInstalling Node 4.0 RC1\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n  4 12.3M    4  519k    0     0   437k      0  0:00:28  0:00:01  0:00:27  437k\n 20 12.3M   20 2563k    0     0  1180k      0  0:00:10  0:00:02  0:00:08 1180k\n 36 12.3M   36 4621k    0     0  1456k      0  0:00:08  0:00:03  0:00:05 1456k\n 57 12.3M   57 7307k    0     0  1751k      0  0:00:07  0:00:04  0:00:03 1751k\n 71 12.3M   71 9019k    0     0  1738k      0  0:00:07  0:00:05  0:00:02 1798k\n 83 12.3M   83 10.3M    0     0  1715k      0  0:00:07  0:00:06  0:00:01 2019k\n 98 12.3M   98 12.1M    0     0  1737k      0  0:00:07  0:00:07 --:--:-- 1979k\n100 12.3M  100 12.3M    0     0  1751k      0  0:00:07  0:00:07 --:--:-- 1979k\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n100   987    0   987    0     0   1170      0 --:--:-- --:--:-- --:--:--  1170\n100  609k    0  609k    0     0   519k      0 --:--:--  0:00:01 --:--:--  519k\nnpm WARN package.json fs@0.0.2 fs is also the name of a node core module.\nnpm WARN package.json fs@0.0.2 No description\nnpm WARN package.json fs@0.0.2 No repository field.\nnpm WARN package.json fs@0.0.2 No README data\nnpm WARN package.json https@1.0.0 https is also the name of a node core module.\nnpm WARN package.json https@1.0.0 No repository field.\nnpm WARN package.json https@1.0.0 No README data\nnpm WARN package.json querystring@0.2.0 querystring is also the name of a node core module.\nnpm WARN package.json stream@0.0.2 stream is also the name of a node core module.\nnpm WARN package.json util@0.10.3 util is also the name of a node core module.\nnpm WARN package.json url@0.10.3 url is also the name of a node core module.\nglob error { [Error: ENOTSUP: operation not supported on socket, scandir 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\man\\man1\\sshpk-sign.1']\n  errno: -4049,\n  code: 'ENOTSUP',\n  syscall: 'scandir',\n  path: 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\man\\man1\\sshpk-sign.1' }\nglob error { [Error: ENOTSUP: operation not supported on socket, scandir 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\man\\man1\\sshpk-conv.1']\n  errno: -4049,\n  code: 'ENOTSUP',\n  syscall: 'scandir',\n  path: 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\man\\man1\\sshpk-conv.1' }\nglob error { [Error: ENOTSUP: operation not supported on socket, scandir 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\man\\man1\\sshpk-verify.1']\n  errno: -4049,\n  code: 'ENOTSUP',\n  syscall: 'scandir',\n  path: 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\man\\man1\\sshpk-verify.1' }\nglob error { [Error: ENOTSUP: operation not supported on socket, scandir 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\bin\\sshpk-conv']\n  errno: -4049,\n  code: 'ENOTSUP',\n  syscall: 'scandir',\n  path: 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\bin\\sshpk-conv' }\nglob error { [Error: ENOTSUP: operation not supported on socket, scandir 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\bin\\sshpk-verify']\n  errno: -4049,\n  code: 'ENOTSUP',\n  syscall: 'scandir',\n  path: 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\bin\\sshpk-verify' }\nglob error { [Error: ENOTSUP: operation not supported on socket, scandir 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\bin\\sshpk-sign']\n  errno: -4049,\n  code: 'ENOTSUP',\n  syscall: 'scandir',\n  path: 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\bin\\sshpk-sign' }\nnpm ERR! nospc ENOTSUP: operation not supported on socket, scandir 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\man\\man1\\sshpk-sign.1'\nnpm ERR! nospc This is most likely not a problem with npm itself\nnpm ERR! nospc and is related to insufficient space on your system.\nnpm ERR! System Windows_NT 6.2.9200\nnpm ERR! command \"d:\\Program Files (x86)\\nodejs\\5.9.1\\node.exe\" \"D:\\Program Files (x86)\\npm\\1.4.28\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"--production\"\nnpm ERR! cwd d:\\home\\site\\wwwroot\nnpm ERR! node -v v5.9.1\nnpm ERR! npm -v 1.4.28\nnpm ERR! path d:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\man\\man1\\sshpk-sign.1\nnpm ERR! syscall scandir\nnpm ERR! code ENOTSUP\nnpm ERR! errno -4049\nnpm ERR! not ok code 0\n```\n. I had this when Azure was deploying my node.js app. NPM install triggered these errors:\n```\nNode.js versions available on the platform are: 0.6.20, 0.8.2, 0.8.19, 0.8.26, 0.8.27, 0.8.28, 0.10.5, 0.10.18, 0.10.21, 0.10.24, 0.10.26, 0.10.28, 0.10.29, 0.10.31, 0.10.32, 0.10.40, 0.12.0, 0.12.2, 0.12.3, 0.12.6, 4.0.0, 4.1.0, 4.1.2, 4.2.1, 4.2.2, 4.2.3, 4.2.4, 4.3.0, 4.3.2, 4.4.0, 4.4.1, 5.0.0, 5.1.1, 5.3.0, 5.4.0, 5.5.0, 5.6.0, 5.7.0, 5.7.1, 5.8.0, 5.9.1.\nSelected node.js version 5.9.1. Use package.json file to choose a different version.\nSelected npm version 3.7.3\nUpdating iisnode.yml at D:\\home\\site\\wwwroot\\bin\\iisnode.yml\nInstalling Node 4.0 RC1\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n  4 12.3M    4  519k    0     0   437k      0  0:00:28  0:00:01  0:00:27  437k\n 20 12.3M   20 2563k    0     0  1180k      0  0:00:10  0:00:02  0:00:08 1180k\n 36 12.3M   36 4621k    0     0  1456k      0  0:00:08  0:00:03  0:00:05 1456k\n 57 12.3M   57 7307k    0     0  1751k      0  0:00:07  0:00:04  0:00:03 1751k\n 71 12.3M   71 9019k    0     0  1738k      0  0:00:07  0:00:05  0:00:02 1798k\n 83 12.3M   83 10.3M    0     0  1715k      0  0:00:07  0:00:06  0:00:01 2019k\n 98 12.3M   98 12.1M    0     0  1737k      0  0:00:07  0:00:07 --:--:-- 1979k\n100 12.3M  100 12.3M    0     0  1751k      0  0:00:07  0:00:07 --:--:-- 1979k\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n100   987    0   987    0     0   1170      0 --:--:-- --:--:-- --:--:--  1170\n100  609k    0  609k    0     0   519k      0 --:--:--  0:00:01 --:--:--  519k\nnpm WARN package.json fs@0.0.2 fs is also the name of a node core module.\nnpm WARN package.json fs@0.0.2 No description\nnpm WARN package.json fs@0.0.2 No repository field.\nnpm WARN package.json fs@0.0.2 No README data\nnpm WARN package.json https@1.0.0 https is also the name of a node core module.\nnpm WARN package.json https@1.0.0 No repository field.\nnpm WARN package.json https@1.0.0 No README data\nnpm WARN package.json querystring@0.2.0 querystring is also the name of a node core module.\nnpm WARN package.json stream@0.0.2 stream is also the name of a node core module.\nnpm WARN package.json util@0.10.3 util is also the name of a node core module.\nnpm WARN package.json url@0.10.3 url is also the name of a node core module.\nglob error { [Error: ENOTSUP: operation not supported on socket, scandir 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\man\\man1\\sshpk-sign.1']\n  errno: -4049,\n  code: 'ENOTSUP',\n  syscall: 'scandir',\n  path: 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\man\\man1\\sshpk-sign.1' }\nglob error { [Error: ENOTSUP: operation not supported on socket, scandir 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\man\\man1\\sshpk-conv.1']\n  errno: -4049,\n  code: 'ENOTSUP',\n  syscall: 'scandir',\n  path: 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\man\\man1\\sshpk-conv.1' }\nglob error { [Error: ENOTSUP: operation not supported on socket, scandir 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\man\\man1\\sshpk-verify.1']\n  errno: -4049,\n  code: 'ENOTSUP',\n  syscall: 'scandir',\n  path: 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\man\\man1\\sshpk-verify.1' }\nglob error { [Error: ENOTSUP: operation not supported on socket, scandir 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\bin\\sshpk-conv']\n  errno: -4049,\n  code: 'ENOTSUP',\n  syscall: 'scandir',\n  path: 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\bin\\sshpk-conv' }\nglob error { [Error: ENOTSUP: operation not supported on socket, scandir 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\bin\\sshpk-verify']\n  errno: -4049,\n  code: 'ENOTSUP',\n  syscall: 'scandir',\n  path: 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\bin\\sshpk-verify' }\nglob error { [Error: ENOTSUP: operation not supported on socket, scandir 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\bin\\sshpk-sign']\n  errno: -4049,\n  code: 'ENOTSUP',\n  syscall: 'scandir',\n  path: 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\bin\\sshpk-sign' }\nnpm ERR! nospc ENOTSUP: operation not supported on socket, scandir 'd:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\man\\man1\\sshpk-sign.1'\nnpm ERR! nospc This is most likely not a problem with npm itself\nnpm ERR! nospc and is related to insufficient space on your system.\nnpm ERR! System Windows_NT 6.2.9200\nnpm ERR! command \"d:\\Program Files (x86)\\nodejs\\5.9.1\\node.exe\" \"D:\\Program Files (x86)\\npm\\1.4.28\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"--production\"\nnpm ERR! cwd d:\\home\\site\\wwwroot\nnpm ERR! node -v v5.9.1\nnpm ERR! npm -v 1.4.28\nnpm ERR! path d:\\home\\site\\wwwroot\\node_modules\\azure-storage\\node_modules\\request\\node_modules\\http-signature\\node_modules\\sshpk\\man\\man1\\sshpk-sign.1\nnpm ERR! syscall scandir\nnpm ERR! code ENOTSUP\nnpm ERR! errno -4049\nnpm ERR! not ok code 0\n```\n. ",
    "Moonlighter": "hi,\nYesterday i try to install angularjs-cli on SharFolder between a host (Windows10) and \u00e0 VM on VMware 12(Workstation, with Ubuntu 14.04 LTS)\n[In my Ubuntu.vmx]\nsharedFolder0.present = \"TRUE\"\nsharedFolder0.enabled = \"TRUE\"\nsharedFolder0.readAccess = \"TRUE\"\nsharedFolder0.writeAccess = \"TRUE\"\nsharedFolder0.hostPath = \"C:\\wamp\\www\"\nsharedFolder0.guestName = \"www\"\nsharedFolder0.expiration = \"session\"\nsharedFolder0.followSymlinks = \"TRUE\"\nI access to my ShareFolder on my VM here /mnt/hgfs/www/\nSo after i try to install i receive this issues:\nEACCES: permission denied, symlink '../semver/bin/semver' -> '/mnt/hgfs/www/ang20/my-demo/node_modules/agent-base/node_modules/.bin/semver'\nError: EACCES: permission denied, symlink '../semver/bin/semver' -> '/mnt/hgfs/www/ang20/my-demo/node_modules/agent-base/node_modules/.bin/semver'\n    at Error (native)\nSomebody have an idea? Thank's! \n. hi,\nYesterday i try to install angularjs-cli on SharFolder between a host (Windows10) and \u00e0 VM on VMware 12(Workstation, with Ubuntu 14.04 LTS)\n[In my Ubuntu.vmx]\nsharedFolder0.present = \"TRUE\"\nsharedFolder0.enabled = \"TRUE\"\nsharedFolder0.readAccess = \"TRUE\"\nsharedFolder0.writeAccess = \"TRUE\"\nsharedFolder0.hostPath = \"C:\\wamp\\www\"\nsharedFolder0.guestName = \"www\"\nsharedFolder0.expiration = \"session\"\nsharedFolder0.followSymlinks = \"TRUE\"\nI access to my ShareFolder on my VM here /mnt/hgfs/www/\nSo after i try to install i receive this issues:\nEACCES: permission denied, symlink '../semver/bin/semver' -> '/mnt/hgfs/www/ang20/my-demo/node_modules/agent-base/node_modules/.bin/semver'\nError: EACCES: permission denied, symlink '../semver/bin/semver' -> '/mnt/hgfs/www/ang20/my-demo/node_modules/agent-base/node_modules/.bin/semver'\n    at Error (native)\nSomebody have an idea? Thank's! \n. ",
    "TuckerWhitehouse": "Understandable, thanks for the great library.\n. Understandable, thanks for the great library.\n. ",
    "SergioMorchon": "It looks like \"ignore\" option must be a string, and not a RegExp object. I think it would be fine if would be able to work with RegExp objects, as they are more readables and flexibles.\nOr update the README.md specifying tha ignore must be string typed.\n. Oh, sorry. I misunderstood the explanation. When I saw \"pattern\" I inmediatly thinked of RegExp, not glob... Sounds stupid.\nSorry!\nYou can destroy this issue with greek fire if you wanna to.\n. It looks like \"ignore\" option must be a string, and not a RegExp object. I think it would be fine if would be able to work with RegExp objects, as they are more readables and flexibles.\nOr update the README.md specifying tha ignore must be string typed.\n. Oh, sorry. I misunderstood the explanation. When I saw \"pattern\" I inmediatly thinked of RegExp, not glob... Sounds stupid.\nSorry!\nYou can destroy this issue with greek fire if you wanna to.\n. ",
    "oncletom": "Got stuck too while to exclude node_modules as well. I first tried with /node_modules/ and figured out with @isaacs comment I had to type 'node_modules/**'.\nThanks folks!\n. :+1: \n. Got stuck too while to exclude node_modules as well. I first tried with /node_modules/ and figured out with @isaacs comment I had to type 'node_modules/**'.\nThanks folks!\n. :+1: \n. ",
    "paulovictorv": "Hi, I'm using the latest release. \n\"glob\": \"5.0.13\"\n. Sure.\nMy folder structure is like this:\nZ:\\DPT1\\CLIP\\DPT1-CLIP-01\\CORRECTED\\**\\*.pdf\nThe part where I have the double stars can contain folders/files. Thumbs.db happens to occur on the double star part of the path.\nThis is the error message as printed by the code.\n{ [Error: ENOTSUP, scandir 'Z:\\DPT1\\CLIP\\DPT1\\CLIP\\DPT1-CLIP-01\\CORRECTED\\Thumbs.db']\nerrno: -4049,\ncode: 'ENOTSUP',\npath: 'Z:\\\\DPT1\\\\CLIP\\\\DPT1\\\\CLIP\\\\DPT1-CLIP-01\\\\CORRECTED\\\\Thumbs.db' }\nAs a reminder, Z is a network drive.\nLet me know if you need more information! Thanks\n. It reported glob@5.0.13 sadly :/\nJust to be certain, I cleaned my node_modules dir, npm install it, but still got the same error.\nAlso, I was doing some tests, and glob seems to fail with some files (in this case it was a pdf). So the error might not be tied only to  Thumbs.db. The error code is the same as before mentioned.\n. Well, I've managed to get around this error by using {strict: false} as an option, after looking at the source code and seeing the guard around the abort.\nIt's still weird that this error happens anyways.\n. I'm using glob, as the examples in the readme shows. I don't know which one I'm using\n. Hurray! Now it works, thanks for the help man :)\n. Hi, I'm using the latest release. \n\"glob\": \"5.0.13\"\n. Sure.\nMy folder structure is like this:\nZ:\\DPT1\\CLIP\\DPT1-CLIP-01\\CORRECTED\\**\\*.pdf\nThe part where I have the double stars can contain folders/files. Thumbs.db happens to occur on the double star part of the path.\nThis is the error message as printed by the code.\n{ [Error: ENOTSUP, scandir 'Z:\\DPT1\\CLIP\\DPT1\\CLIP\\DPT1-CLIP-01\\CORRECTED\\Thumbs.db']\nerrno: -4049,\ncode: 'ENOTSUP',\npath: 'Z:\\\\DPT1\\\\CLIP\\\\DPT1\\\\CLIP\\\\DPT1-CLIP-01\\\\CORRECTED\\\\Thumbs.db' }\nAs a reminder, Z is a network drive.\nLet me know if you need more information! Thanks\n. It reported glob@5.0.13 sadly :/\nJust to be certain, I cleaned my node_modules dir, npm install it, but still got the same error.\nAlso, I was doing some tests, and glob seems to fail with some files (in this case it was a pdf). So the error might not be tied only to  Thumbs.db. The error code is the same as before mentioned.\n. Well, I've managed to get around this error by using {strict: false} as an option, after looking at the source code and seeing the guard around the abort.\nIt's still weird that this error happens anyways.\n. I'm using glob, as the examples in the readme shows. I don't know which one I'm using\n. Hurray! Now it works, thanks for the help man :)\n. ",
    "jacobdr": "Sounds good. Thanks for the response. You might want to consider adding a\nnote of future (but not present) support into the README. I have seen some\npackage developers try to use it before -- incorrectly -- thinking they\nhave full shell support. Such a line might stop a few from a careless\nmistake.\nOn Tue, Jul 21, 2015 at 12:44 PM, isaacs notifications@github.com wrote:\n\nI've put off adding ~ support until Node has cross-platform passwd\nfunctions (coming to io.js soon, I believe?) Then we can do stuff like\n~root/foo and ~bob/bar and have it expand with the home dir of the\nspecified user.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/isaacs/node-glob/issues/210#issuecomment-123397893.\n. Sounds good. Thanks for the response. You might want to consider adding a\nnote of future (but not present) support into the README. I have seen some\npackage developers try to use it before -- incorrectly -- thinking they\nhave full shell support. Such a line might stop a few from a careless\nmistake.\n\nOn Tue, Jul 21, 2015 at 12:44 PM, isaacs notifications@github.com wrote:\n\nI've put off adding ~ support until Node has cross-platform passwd\nfunctions (coming to io.js soon, I believe?) Then we can do stuff like\n~root/foo and ~bob/bar and have it expand with the home dir of the\nspecified user.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/isaacs/node-glob/issues/210#issuecomment-123397893.\n. \n",
    "fenwick67": "Node now supports os.homedir() as of v2.3 according to the docs.  Would you accept a PR to add this?\n. Node now supports os.homedir() as of v2.3 according to the docs.  Would you accept a PR to add this?\n. ",
    "hhamilto": "As of node v6.0.0 we have os.userInfo([options]). That method returns an object that includes the user's homedir.\nIs there a minimum version of node that node-glob targets support for?\n@fenwick67 are you still interested in doing the PR?\n. Update: My mistake: os.userInfo still only returns the home directory of the current effective user.\n. > how can I escape [ and ]\nHow about with back slashes like this:\ncurrentdirPath.replace(/[[\\]]/g,'\\\\$&')\nThat replaces [ with \\[ and ] with \\], which causes them to be treated as literal opening and closing bracket characters.\nI imagine that there are other edge cases that should be taken care of when your path might contain special characters, but I'm not sure about how to handle all cases off the top of my head.\n. I was looking through the documentation just now and found a better solution to your problem, rather than escaping currentdirPath. \nYou should pass in the cwd property as currentdirPath on the options object when calling glob. eg:\nglob('*.mp3', {cwd: currentdirPath})\n. As of node v6.0.0 we have os.userInfo([options]). That method returns an object that includes the user's homedir.\nIs there a minimum version of node that node-glob targets support for?\n@fenwick67 are you still interested in doing the PR?\n. Update: My mistake: os.userInfo still only returns the home directory of the current effective user.\n. > how can I escape [ and ]\nHow about with back slashes like this:\ncurrentdirPath.replace(/[[\\]]/g,'\\\\$&')\nThat replaces [ with \\[ and ] with \\], which causes them to be treated as literal opening and closing bracket characters.\nI imagine that there are other edge cases that should be taken care of when your path might contain special characters, but I'm not sure about how to handle all cases off the top of my head.\n. I was looking through the documentation just now and found a better solution to your problem, rather than escaping currentdirPath. \nYou should pass in the cwd property as currentdirPath on the options object when calling glob. eg:\nglob('*.mp3', {cwd: currentdirPath})\n. ",
    "yortus": "Related: https://github.com/isaacs/minimatch/issues/64\n. Related: https://github.com/isaacs/minimatch/issues/64\n. ",
    "erikkemperman": "@isaacs This inconsistency between node-glob and minimatch on Windows is quite annoying... Escaping seems impossible in minimatch currently.\nPeople have submitted issues about it for some time, and there's a PR that seems eminently reasonable. \nAlthough having said that, I personally would probably prefer a major bump in minimatch adopting the same attitude as node-glob (forward slashes as path separators, backslashes as escape char, on all platforms).\nAnyway, this has been going on for a while now. I don't mean to sound impatient, but is there anything that can be done to move this forward? Or do you not agree this is a problem?. That would be exactly what I was looking for! Currently vinyl-fs is being updated to split off a module for use by other vinyl adapters, vinyl-prepare. With any luck it'll be in Gulp 4.\nIt would be great if implementers of custom vinyl adapters, such as purely in-memory ones, would not have to do their own globbing (or disallow glob patterns completely) -- but instead just provide the needed subset of fs calls as an option.\nAt this time, our call to glob can't be transplanted to vinyl-prepare because of its file system access, but I think it should be.\n@isaacs I'd be willing to spend some time on a PR, unless of course you don't like the idea to begin with?\n. ~~Come to think of it, maybe folks would like to use graceful-fs, that would also be easy with something like the above in place.~~\nEDIT Scratch that last bit, I just found #71.\n. @Auxolust I've submitted a PR that would address my use case... And yours, I believe?\nSorry about the repeated references above, I cleaned up the accompanying test a little bit and force-pushed to override the previous commit. But since it already had the issue number in there, this happened.\n. Maybe point out the obvious: I haven't considered changes for the sync case yet. Also, it just occurred to me I've just assumed custom adapters would support cache argument to realpath but probably shouldn't.\n. I've added the synchronous counterpart, and tentatively simplified to pre-empt realpath calls entirely when a custom fs option is provided. Underestimated the implications of Node 6 slightly there.\nWill leave this as it is for now, until you get a chance to look at it (or decide it's a bad idea). Apologies for having submitted this a bit prematurely!\n. Rebased onto latest master. \n. Rebased again. Noticed failing test on Appveyor, have submitted a separate PR which I believe addresses that.\n@isaacs I appreciate you must be quite busy, but if possible I would be grateful for any quick feedback you might have here -- even if it's just that you don't like this idea... Thanks!\n. @raygervais All due respect to the maintainer, but it looks like he doesn't get around to handling issues/PRs very often. Kind of troubling, if you think about the very many packages depending on this.. https://github.com/isaacs/node-glob/pull/303. @isaacs This inconsistency between node-glob and minimatch on Windows is quite annoying... Escaping seems impossible in minimatch currently.\nPeople have submitted issues about it for some time, and there's a PR that seems eminently reasonable. \nAlthough having said that, I personally would probably prefer a major bump in minimatch adopting the same attitude as node-glob (forward slashes as path separators, backslashes as escape char, on all platforms).\nAnyway, this has been going on for a while now. I don't mean to sound impatient, but is there anything that can be done to move this forward? Or do you not agree this is a problem?. That would be exactly what I was looking for! Currently vinyl-fs is being updated to split off a module for use by other vinyl adapters, vinyl-prepare. With any luck it'll be in Gulp 4.\nIt would be great if implementers of custom vinyl adapters, such as purely in-memory ones, would not have to do their own globbing (or disallow glob patterns completely) -- but instead just provide the needed subset of fs calls as an option.\nAt this time, our call to glob can't be transplanted to vinyl-prepare because of its file system access, but I think it should be.\n@isaacs I'd be willing to spend some time on a PR, unless of course you don't like the idea to begin with?\n. ~~Come to think of it, maybe folks would like to use graceful-fs, that would also be easy with something like the above in place.~~\nEDIT Scratch that last bit, I just found #71.\n. @Auxolust I've submitted a PR that would address my use case... And yours, I believe?\nSorry about the repeated references above, I cleaned up the accompanying test a little bit and force-pushed to override the previous commit. But since it already had the issue number in there, this happened.\n. Maybe point out the obvious: I haven't considered changes for the sync case yet. Also, it just occurred to me I've just assumed custom adapters would support cache argument to realpath but probably shouldn't.\n. I've added the synchronous counterpart, and tentatively simplified to pre-empt realpath calls entirely when a custom fs option is provided. Underestimated the implications of Node 6 slightly there.\nWill leave this as it is for now, until you get a chance to look at it (or decide it's a bad idea). Apologies for having submitted this a bit prematurely!\n. Rebased onto latest master. \n. Rebased again. Noticed failing test on Appveyor, have submitted a separate PR which I believe addresses that.\n@isaacs I appreciate you must be quite busy, but if possible I would be grateful for any quick feedback you might have here -- even if it's just that you don't like this idea... Thanks!\n. @raygervais All due respect to the maintainer, but it looks like he doesn't get around to handling issues/PRs very often. Kind of troubling, if you think about the very many packages depending on this.. https://github.com/isaacs/node-glob/pull/303. ",
    "iulo": "what about windows ?  seems like dir/** also matches the parent directory\n. what about windows ?  seems like dir/** also matches the parent directory\n. ",
    "sondreb": "You need to run additional transforms on the browserify instance. You only need the 'bulkify' transform, and you can see example of it here:\nhttps://github.com/jakemmarsh/angularjs-gulp-browserify-boilerplate/blob/master/gulp/tasks/browserify.js\n. You need to run additional transforms on the browserify instance. You only need the 'bulkify' transform, and you can see example of it here:\nhttps://github.com/jakemmarsh/angularjs-gulp-browserify-boilerplate/blob/master/gulp/tasks/browserify.js\n. ",
    "juliancantillo": "@sondreb going to take a look, thanks.\n. @sondreb going to take a look, thanks.\n. ",
    "gajus": "First of all, I was not aware that glob package does support multiple paths.\nRegarding the different between using {,,,} and an array of patterns is that:\n- you do not need to worry about escaping when providing an array of patterns\n- easier to debug\nHowever, I'd like to suggest that @sindresorhus is made a contributor to this library. You could join the forces and I am sure @sindresorhus would be happy to share his insights given that he is maintaining a very popular branch of your package that supports array syntax.\n. First of all, I was not aware that glob package does support multiple paths.\nRegarding the different between using {,,,} and an array of patterns is that:\n- you do not need to worry about escaping when providing an array of patterns\n- easier to debug\nHowever, I'd like to suggest that @sindresorhus is made a contributor to this library. You could join the forces and I am sure @sindresorhus would be happy to share his insights given that he is maintaining a very popular branch of your package that supports array syntax.\n. ",
    "JPeer264": "How about adding the following in Glob():\njs\nif (Object.prototype.toString.call(pattern) === '[object Array]') {\n    pattern = `{${pattern.join(',')}}`;\n}\nWouldn't this solve this issue?. How about adding the following in Glob():\njs\nif (Object.prototype.toString.call(pattern) === '[object Array]') {\n    pattern = `{${pattern.join(',')}}`;\n}\nWouldn't this solve this issue?. ",
    "stevenvachon": "This would be partially solved by #332.\nI'd think that redundant paths should be ignored via memoization.. @isaacs I'd like to PR this today.. @isaacs hello?. This would be partially solved by #332.\nI'd think that redundant paths should be ignored via memoization.. @isaacs I'd like to PR this today.. @isaacs hello?. ",
    "wzup": "@isaacs \n\ndo you need to know which pattern a file matched?\n\nYes, this would be a good advantage. Is it possible to have a result as an object pattern: match?\nSuppose a pattern is:\n'?(index|commons|vendors).*.js'\nSo, currently the match is:\n[\"commons.6018ac96ba9a08ad3719.js\",\"index.b0f8a1ea8725f3d65633.js\"]\nA preferred match would be:\n{\n    'index/*.*.js': \"index.b0f8a1ea8725f3d65633.js\",\n    'commons/*.*.js': \"commons.6018ac96ba9a08ad3719.js\",\n}\nAnd it would be great if the plugin could generate the latter map from this combined pattern:\n'?(index|commons|vendors).*.js'\nOr does this functionality (a match is returned as a map) exist already? I just start testing the plugin and don't know it yet.. @isaacs \n\ndo you need to know which pattern a file matched?\n\nYes, this would be a good advantage. Is it possible to have a result as an object pattern: match?\nSuppose a pattern is:\n'?(index|commons|vendors).*.js'\nSo, currently the match is:\n[\"commons.6018ac96ba9a08ad3719.js\",\"index.b0f8a1ea8725f3d65633.js\"]\nA preferred match would be:\n{\n    'index/*.*.js': \"index.b0f8a1ea8725f3d65633.js\",\n    'commons/*.*.js': \"commons.6018ac96ba9a08ad3719.js\",\n}\nAnd it would be great if the plugin could generate the latter map from this combined pattern:\n'?(index|commons|vendors).*.js'\nOr does this functionality (a match is returned as a map) exist already? I just start testing the plugin and don't know it yet.. ",
    "kaishuu0123": "Probably registry.npmjs.org issue.\nbut registry all operational.\nhttp://status.npmjs.org/?__hstc=72727564.b3f48442937fad95a45c622742c2078b.1427243672248.1427243672248.1442408107695.2&__hssc=72727564.1.1442408107695&__hsfp=2214759445\n. Thank you for your comment.\n. Probably registry.npmjs.org issue.\nbut registry all operational.\nhttp://status.npmjs.org/?__hstc=72727564.b3f48442937fad95a45c622742c2078b.1427243672248.1427243672248.1442408107695.2&__hssc=72727564.1.1442408107695&__hsfp=2214759445\n. Thank you for your comment.\n. ",
    "lostthetrail": "The test below is a variation of your \"a\" test. With nodir added and the wanted reduced to what I would expect, just files.\n```\nt.test('a nodir', function (t) {\n  var g = glob('/b/*', { root: path.resolve('a'), nodir: true }, function (er, matches) {\n    t.ifError(er)\n    var wanted = [\n        '/b/c/d', '/bc/e/f'\n      ].map(function (m) {\n        return path.join(path.resolve('a'), m).replace(/\\/g, '/')\n      })\nt.like(matches, wanted)\ncacheCheck(g, t)\nt.end()\n\n})\n})\n```\n. The test below is a variation of your \"a\" test. With nodir added and the wanted reduced to what I would expect, just files.\n```\nt.test('a nodir', function (t) {\n  var g = glob('/b/*', { root: path.resolve('a'), nodir: true }, function (er, matches) {\n    t.ifError(er)\n    var wanted = [\n        '/b/c/d', '/bc/e/f'\n      ].map(function (m) {\n        return path.join(path.resolve('a'), m).replace(/\\/g, '/')\n      })\nt.like(matches, wanted)\ncacheCheck(g, t)\nt.end()\n\n})\n})\n```\n. ",
    "unional": "I have the same problem with cwd + nodir.\n. I have the same problem with cwd + nodir.\n. ",
    "mascardoso": "glob('**/*.png', {\n  cwd: path.resolve(__dirname, 'assets/img'),\n  nodir: true\n}, (er, files) => {\n  console.log(files)\n})\n^ this still returns dir/filename.png instead of just filename.png. glob('**/*.png', {\n  cwd: path.resolve(__dirname, 'assets/img'),\n  nodir: true\n}, (er, files) => {\n  console.log(files)\n})\n^ this still returns dir/filename.png instead of just filename.png. ",
    "gaboesquivel": "IMO dot should be an overall pattern.. it's easier to reason about this if we do so.\nYou explicitly tell to node-glob to ignore dotfiles or not through the dot option.\nAnd if you set dot=true, you are able to ignore dotfiles through the ignore option \nbased on this case 3 would be always no, since dot=false\nI'll work on a more comprehensive matrix of tests\n. Thanks @isaacs. It seems that always dot=true in ignores is the way to go. \nIt solves the problem we're trying to tackle in mem-fs-editor.\nI'm closing this in favor of #227 \n. :+1: \n. IMO dot should be an overall pattern.. it's easier to reason about this if we do so.\nYou explicitly tell to node-glob to ignore dotfiles or not through the dot option.\nAnd if you set dot=true, you are able to ignore dotfiles through the ignore option \nbased on this case 3 would be always no, since dot=false\nI'll work on a more comprehensive matrix of tests\n. Thanks @isaacs. It seems that always dot=true in ignores is the way to go. \nIt solves the problem we're trying to tackle in mem-fs-editor.\nI'm closing this in favor of #227 \n. :+1: \n. ",
    "sieira": "Ok, this was it:\n{node_modules/!(grunt*),!(node_modules)/**/node_modules/,**/bower_components}\nit can surely be improved, because I only need the higher level node_modules on each sub directory,and only keep grunt modules on the highest, but I will leave a TODO and think about it another day.\nI know this was not the best place to ask this kind of question. Thank you for your kind answer.\n. Ok, this was it:\n{node_modules/!(grunt*),!(node_modules)/**/node_modules/,**/bower_components}\nit can surely be improved, because I only need the higher level node_modules on each sub directory,and only keep grunt modules on the highest, but I will leave a TODO and think about it another day.\nI know this was not the best place to ask this kind of question. Thank you for your kind answer.\n. ",
    "aredridel": "This sure seems like simpler behavior\n. This sure seems like simpler behavior\n. ",
    "thirdcreed": "node -p 'require(\"glob\").sync(\"/home/thirdcreed/Projects/glob-stream/test/fixtures/*swag\",{ignore:[\"/home/thirdcreed/Projects/glob-stream/test/fixtures/**\"],dot:true,cwd: \"/home/thirdcreed/Projects/glob-stream/test\",cwdbase:false,nonull:false})'\nThis works for me in milliseconds, but this code times out  on  only one of the tests, with identical  parameters.  An end event is never emitted.\nAny insight you can give me into what I might be doing wrong would be much appreciated.\n. I think that negation has been fully deprecated.  Use the ignore option instead.\nUPDATE:\nI'm wrong. Read on.\n. Then somehow this emits \njavascript\nrequire(\"glob\").Glob(\"**/home/thirdcreed/Projects/glob-stream/test/fixtures/*swag**\", {\n  ignore:[\n    \"**/home/thirdcreed/Projects/glob-stream/test/fixtures/*swag**\"\n  ],\n  dot:true,\n  cwd: \"/home/thirdcreed/Projects/glob-stream/test\",\n  cwdbase:false,\n  nonull:false\n}).on(\"end\",function(x){\n  console.log(\"end stream emitted\",x);\n})\nAny insight from anyone would be much appreciated, this is really confusing me.\n. It's a race condition.  The glob object isn't instantiated when the event is emitted.  The event isn't registered because there's no listeners attached.\n. node -p 'require(\"glob\").sync(\"/home/thirdcreed/Projects/glob-stream/test/fixtures/*swag\",{ignore:[\"/home/thirdcreed/Projects/glob-stream/test/fixtures/**\"],dot:true,cwd: \"/home/thirdcreed/Projects/glob-stream/test\",cwdbase:false,nonull:false})'\nThis works for me in milliseconds, but this code times out  on  only one of the tests, with identical  parameters.  An end event is never emitted.\nAny insight you can give me into what I might be doing wrong would be much appreciated.\n. I think that negation has been fully deprecated.  Use the ignore option instead.\nUPDATE:\nI'm wrong. Read on.\n. Then somehow this emits \njavascript\nrequire(\"glob\").Glob(\"**/home/thirdcreed/Projects/glob-stream/test/fixtures/*swag**\", {\n  ignore:[\n    \"**/home/thirdcreed/Projects/glob-stream/test/fixtures/*swag**\"\n  ],\n  dot:true,\n  cwd: \"/home/thirdcreed/Projects/glob-stream/test\",\n  cwdbase:false,\n  nonull:false\n}).on(\"end\",function(x){\n  console.log(\"end stream emitted\",x);\n})\nAny insight from anyone would be much appreciated, this is really confusing me.\n. It's a race condition.  The glob object isn't instantiated when the event is emitted.  The event isn't registered because there's no listeners attached.\n. ",
    "a-x-": "ooh...\ni have my own promise wrapper:\njs\nmodule.exports = (globPattern, onFile) => {\n    const occurences = []\n    return new Promise((res, rej) =>\n        glob(globPattern, file => {\n            const result = onFile(file)\n            result !== undefined && occurences.push(result)\n        })\n        .end(() => res(occurences))\n}\nI want to make npm package\nbut maybe anybody already has one?\n. i forget\n. ooh...\ni have my own promise wrapper:\njs\nmodule.exports = (globPattern, onFile) => {\n    const occurences = []\n    return new Promise((res, rej) =>\n        glob(globPattern, file => {\n            const result = onFile(file)\n            result !== undefined && occurences.push(result)\n        })\n        .end(() => res(occurences))\n}\nI want to make npm package\nbut maybe anybody already has one?\n. i forget\n. ",
    "milewski": "@a-x-  why do u result !== undefined ?\n. @a-x-  why do u result !== undefined ?\n. ",
    "syuilo": "Promises is better than callbacks. Promises is better than callbacks. ",
    "zzarcon": "Hi @isaacs thanks for the library!\nDo you think we can re-open this? I think its worth it to add Promise support as first class citizen :). Hi @isaacs thanks for the library!\nDo you think we can re-open this? I think its worth it to add Promise support as first class citizen :). ",
    "Wandalen": "Sure.\n```\n  var globOptions =\n  {\n    cwd : options.path,\n  }\nvar result = Glob.sync( options.pattern,globOptions );\n```\n. I use my own implementation of glob. The implementation sorts result. @rquadling good luck with your problem. . File system on OSX is case sensitive by default. Ok it is case preserving.\nStill it decreases area of application if function cant act predictable on most platforms.\nAnyway thank you for your contribution into open source. It's great deal.\n. Sure.\n```\n  var globOptions =\n  {\n    cwd : options.path,\n  }\nvar result = Glob.sync( options.pattern,globOptions );\n```\n. I use my own implementation of glob. The implementation sorts result. @rquadling good luck with your problem. . File system on OSX is case sensitive by default. Ok it is case preserving.\nStill it decreases area of application if function cant act predictable on most platforms.\nAnyway thank you for your contribution into open source. It's great deal.\n. ",
    "rquadling": "Sorry to open up this issue, but I'm experiencing the same issue when using the same code and versions in grunt for an Ubuntu Docker container on an MacOS host.\nI have a set ...\n```javascript\n    var commonJsSourcesEnd = [\n        // Add the compiled default language\n        'temp/js/en.js',\n    // Now add all of our other code - events, controllers, models, resources, services, etc.\n    // Include directives, filters, and reusable code from main EPOS\n    'src/js/controllers/**/*.js',\n    'src/js/directives/**/*.js',\n    'src/js/events/**/*.js',\n    'src/js/filters/**/*.js',\n    'src/js/libraries/**/*.js',\n    'src/js/models/**/*.js',\n    'src/js/resources/**/*.js',\n    'src/js/services/**/*.js',\n\n    // Prepare the angular environment and get the angular-caches prepared with our StorageImplementation.\n    'src/js/3-configure.js',\n\n    // Include the common logic for running the app\n    'src/js/run-common.js',\n];\n\n```\nI need the files in that order. The issue is that when the ordering of the files in the wildcarded directories.\nI'm not experienced enough to know how to force the ordering on each of the individual paths.\nAnything you could offer on this would be really appreciated.\nThe consequence we have from the lack of consistent ordering is significant noise in the git changelog where content is seemingly being moved around randomly.. The following seems to work for me.\n```javascript\n    var commonJsSourcesEnd = []\n        .concat(\n            // Add the compiled default language\n            ['temp/js/en.js'],\n        // Now add all of our other code - events, controllers, models, resources, services, etc.\n        // Include directives, filters, and reusable code from main EPOS\n        Glob.sync('src/js/controllers/**/*.js', {nocase: true}),\n        Glob.sync('src/js/directives/**/*.js', {nocase: true}),\n        Glob.sync('src/js/events/**/*.js', {nocase: true}),\n        Glob.sync('src/js/filters/**/*.js', {nocase: true}),\n        Glob.sync('src/js/libraries/**/*.js', {nocase: true}),\n        Glob.sync('src/js/models/**/*.js', {nocase: true}),\n        Glob.sync('src/js/resources/**/*.js', {nocase: true}),\n        Glob.sync('src/js/services/**/*.js', {nocase: true}),\n\n        // Prepare the angular environment and get the angular-caches prepared with our StorageImplementation.\n        // Include the common logic for running the app\n        ['src/js/3-configure.js', 'src/js/run-common.js']\n    );\n\n```\nTested this in MacOS and in Docker hosted on MacOS. With {nocase:false} (or no nocase), the ordering is different. Now, both environments are the same for me. And seems a relatively easy fix.\n. Sorry to open up this issue, but I'm experiencing the same issue when using the same code and versions in grunt for an Ubuntu Docker container on an MacOS host.\nI have a set ...\n```javascript\n    var commonJsSourcesEnd = [\n        // Add the compiled default language\n        'temp/js/en.js',\n    // Now add all of our other code - events, controllers, models, resources, services, etc.\n    // Include directives, filters, and reusable code from main EPOS\n    'src/js/controllers/**/*.js',\n    'src/js/directives/**/*.js',\n    'src/js/events/**/*.js',\n    'src/js/filters/**/*.js',\n    'src/js/libraries/**/*.js',\n    'src/js/models/**/*.js',\n    'src/js/resources/**/*.js',\n    'src/js/services/**/*.js',\n\n    // Prepare the angular environment and get the angular-caches prepared with our StorageImplementation.\n    'src/js/3-configure.js',\n\n    // Include the common logic for running the app\n    'src/js/run-common.js',\n];\n\n```\nI need the files in that order. The issue is that when the ordering of the files in the wildcarded directories.\nI'm not experienced enough to know how to force the ordering on each of the individual paths.\nAnything you could offer on this would be really appreciated.\nThe consequence we have from the lack of consistent ordering is significant noise in the git changelog where content is seemingly being moved around randomly.. The following seems to work for me.\n```javascript\n    var commonJsSourcesEnd = []\n        .concat(\n            // Add the compiled default language\n            ['temp/js/en.js'],\n        // Now add all of our other code - events, controllers, models, resources, services, etc.\n        // Include directives, filters, and reusable code from main EPOS\n        Glob.sync('src/js/controllers/**/*.js', {nocase: true}),\n        Glob.sync('src/js/directives/**/*.js', {nocase: true}),\n        Glob.sync('src/js/events/**/*.js', {nocase: true}),\n        Glob.sync('src/js/filters/**/*.js', {nocase: true}),\n        Glob.sync('src/js/libraries/**/*.js', {nocase: true}),\n        Glob.sync('src/js/models/**/*.js', {nocase: true}),\n        Glob.sync('src/js/resources/**/*.js', {nocase: true}),\n        Glob.sync('src/js/services/**/*.js', {nocase: true}),\n\n        // Prepare the angular environment and get the angular-caches prepared with our StorageImplementation.\n        // Include the common logic for running the app\n        ['src/js/3-configure.js', 'src/js/run-common.js']\n    );\n\n```\nTested this in MacOS and in Docker hosted on MacOS. With {nocase:false} (or no nocase), the ordering is different. Now, both environments are the same for me. And seems a relatively easy fix.\n. ",
    "matt212": "var drivepath=\"E\";\nvar myPath= \"\"+drivepath+\":/older/*/.jpg\";\nglob(myPath, function (er, files) {\nconsole.log(files) is below\n //['E:/older/a.jpg','E:/older/a.jpg']\n //  i want output to be \n//['a.jpg','a.jpg']\n});\n. var drivepath=\"E\";\nvar myPath= \"\"+drivepath+\":/older/*/.jpg\";\nglob(myPath, function (er, files) {\nconsole.log(files) is below\n //['E:/older/a.jpg','E:/older/a.jpg']\n //  i want output to be \n//['a.jpg','a.jpg']\n});\n. ",
    "dwbruhn": "Thanks for your quick response! Actually, I think I'm using mocha wrong - my code is throwing an assert exception in an asynchronous callback, which mocha can't reliably catch. Instead, I should catch the assert exception myself and pass it to done():\ntry {\n    assert(0, 'Forced assert exception'); // if this is commented out, the 2nd test runs fine\n} catch (e) {\n    return done(e);\n}\nI guess I've just gotten lucky until now!\nInterestingly, when I tried the same improper assert handling with tap, it gave me a more informative error:\nTest Glob > Should return list of files 2\n  not ok test unfinished: Should return list of files 2\n. Thanks for your quick response! Actually, I think I'm using mocha wrong - my code is throwing an assert exception in an asynchronous callback, which mocha can't reliably catch. Instead, I should catch the assert exception myself and pass it to done():\ntry {\n    assert(0, 'Forced assert exception'); // if this is commented out, the 2nd test runs fine\n} catch (e) {\n    return done(e);\n}\nI guess I've just gotten lucky until now!\nInterestingly, when I tried the same improper assert handling with tap, it gave me a more informative error:\nTest Glob > Should return list of files 2\n  not ok test unfinished: Should return list of files 2\n. ",
    "denis-sokolov": "Confirmed breakage. minimatch documentation on the nonegate flag:\n\nThis is perhaps relevant if you wish to start the pattern with a negative extglob pattern like !(a|B)\n\nThis is exactly the case for me, the simplified pattern is !(node_modules|typings)/**/*.ts\n. You could add a test so that you don\u2019t go breaking it again!\n. Confirmed breakage. minimatch documentation on the nonegate flag:\n\nThis is perhaps relevant if you wish to start the pattern with a negative extglob pattern like !(a|B)\n\nThis is exactly the case for me, the simplified pattern is !(node_modules|typings)/**/*.ts\n. You could add a test so that you don\u2019t go breaking it again!\n. ",
    "medains": "@isaacs : I assume that this is not so controversial, since there's been no comment on it.  Happy for this to be included in the next version?\n. @julienw : The issue is what happens when follow: false is set\n. Thanks for going over this issue - I'll put something in for eslint around realpath:true\n. @isaacs : I assume that this is not so controversial, since there's been no comment on it.  Happy for this to be included in the next version?\n. @julienw : The issue is what happens when follow: false is set\n. Thanks for going over this issue - I'll put something in for eslint around realpath:true\n. ",
    "julienw": "** actually follows symlinks for me when I use follow: true...\n. OK thanks. sorry for the noise :)\n. >  I don't love that either, because now if you just try to un-set a config by setting globOpt.follow = false\nBut you could use globOpt.follow = null or even delete globOpt.follow in that case ? The latter is the closest to \"unsetting a config\" :)\nFor context and rationale, I think @medains is ultimately trying to change a behavior in eslint (see the link at the top of this PR).\n. > Maybe the answer is a --no-glob option for eslint?\nI don't follow you :) How could eslint have a different behavior if the support is not in node-glob  (except reimplementing this -- which it did in the past IIRC) ?\n. ** actually follows symlinks for me when I use follow: true...\n. OK thanks. sorry for the noise :)\n. >  I don't love that either, because now if you just try to un-set a config by setting globOpt.follow = false\nBut you could use globOpt.follow = null or even delete globOpt.follow in that case ? The latter is the closest to \"unsetting a config\" :)\nFor context and rationale, I think @medains is ultimately trying to change a behavior in eslint (see the link at the top of this PR).\n. > Maybe the answer is a --no-glob option for eslint?\nI don't follow you :) How could eslint have a different behavior if the support is not in node-glob  (except reimplementing this -- which it did in the past IIRC) ?\n. ",
    "thaggie": "The glob.promise route is a little tedious (for consumers) but probably the cleanest one (not hacking a class to duck type to a Promise).\nPersonally I prefer things not to drag in dependencies and so I'd prefer that when you use a system without promises you just don't get promises - this is the way I implemented the original but not for the tests as I had naively assumed the CI would be just using a modern system.\nevent-to-promise uses any-event which detects whatever promise library the system has installed and uses that.\nWith regards to the non-conformance to the A+ spec - must admit I didn't look at it till now - just looked at the MDN description - I can't see any mention of catch.\n. The glob.promise route is a little tedious (for consumers) but probably the cleanest one (not hacking a class to duck type to a Promise).\nPersonally I prefer things not to drag in dependencies and so I'd prefer that when you use a system without promises you just don't get promises - this is the way I implemented the original but not for the tests as I had naively assumed the CI would be just using a modern system.\nevent-to-promise uses any-event which detects whatever promise library the system has installed and uses that.\nWith regards to the non-conformance to the A+ spec - must admit I didn't look at it till now - just looked at the MDN description - I can't see any mention of catch.\n. ",
    "mspace": "I came across the same issue: https://github.com/sindresorhus/del/issues/50. Also @schnittstabil  pointer that this is a glob issue.\n. I came across the same issue: https://github.com/sindresorhus/del/issues/50. Also @schnittstabil  pointer that this is a glob issue.\n. ",
    "antonioaltamura": "I think so, I would avoid an explicit list of all the routes like I posted, I just want to iterate over the routes directory and execute an app.use() over all the files, I guess I just need the filename without extension to accomplish that.\nSomething simple as that\n```\nglob.sync( './routes/*/.js' ).forEach( function( file ) {\n  app.use('/FILENAME_NOEXT', require(path.resolve( file ) ));\n});\n```\nshould I roughly cut the extension or there is a safe glob way?\n. very thanks! you even take care of the index question :+1: \ndo you think it's a good pratice expose the routes automatically like this?\n. I think so, I would avoid an explicit list of all the routes like I posted, I just want to iterate over the routes directory and execute an app.use() over all the files, I guess I just need the filename without extension to accomplish that.\nSomething simple as that\n```\nglob.sync( './routes/*/.js' ).forEach( function( file ) {\n  app.use('/FILENAME_NOEXT', require(path.resolve( file ) ));\n});\n```\nshould I roughly cut the extension or there is a safe glob way?\n. very thanks! you even take care of the index question :+1: \ndo you think it's a good pratice expose the routes automatically like this?\n. ",
    "r4j4h": "Ah mess, I meant to post this under a different project! :x This has nothing to do with node-glob, I accidentally posted here because the example parameter has glob in it. :3\nTo answer your question, it's an arbitrary parameter that's poorly named. A better example would have been --no-colors to indicate not inserting terminal color characters. Instead of no-colors true, it comes as colors: false. Which is fine, but just unexpected. I believe I meant to post this to substack's minimist.\nSorry for the bother!\n. Well, I was going to post and update this with the link but it looks like it's already been discussed as being undocumented but hasn't been merged yet https://github.com/substack/minimist/pull/60 and https://github.com/substack/minimist/issues/54 .\nAgain, sorry to bother!\n. Ah mess, I meant to post this under a different project! :x This has nothing to do with node-glob, I accidentally posted here because the example parameter has glob in it. :3\nTo answer your question, it's an arbitrary parameter that's poorly named. A better example would have been --no-colors to indicate not inserting terminal color characters. Instead of no-colors true, it comes as colors: false. Which is fine, but just unexpected. I believe I meant to post this to substack's minimist.\nSorry for the bother!\n. Well, I was going to post and update this with the link but it looks like it's already been discussed as being undocumented but hasn't been merged yet https://github.com/substack/minimist/pull/60 and https://github.com/substack/minimist/issues/54 .\nAgain, sorry to bother!\n. ",
    "alexk-z": "All Glob tests are passing as well on Ubuntu after 'inflight' use is removed.\nShould I prepare pull request with options parameter, which makes 'inflight' optional? Will it be accepted?\n. These are with mocha. First test will hang glob callback for the path '/test/test1*'. Two others will timeout after 2 seconds (standard mocha timeout).\n```\nvar glob = require(\"glob\");\nvar assert = require(\"assert\");\ndescribe(\"GlobInflightMinRepro\", function() {\nit(\"1\", function (done) {\n    glob(\"/test/test1*\", function(err, fileNames) {\n        if (err) {\n            done(err);\n            return;\n        }\n\n        assert.equal(fileNames.length, 1, \"Unexpected number of files found.\");\n\n        done();\n    });\n});\n\nit(\"2\", function (done) {\n\n    glob(\"/test/test1*\", function(err, fileNames) {\n        if (err) {\n            done(err);\n            return;\n        }\n\n        assert.equal(fileNames.length, 1, \"Unexpected number of files found.\");\n\n        done();\n    });\n});\n\nit(\"3\", function (done) {\n    glob(\"/test/test1*\", function(err, fileNames) {\n        if (err) {\n            done(err);\n            return;\n        }\n\n        assert.equal(fileNames.length, 1, \"Unexpected number of files found.\");\n\n        done();\n    });\n});\n\n});\n```\n. What is the verdict? Should I create PR for providing option to avoid using 'inflight'?\n. Different failures on my box:\ntest/nocase-nomagic.js ................................ 1/5 2s\n  nocase, nomagic\n  not ok should be equivalent\n    +++ found\n    --- wanted\n     [\n    -  \"g:/TMP/A\"\n    -  \"g:/TMP/a\"\n    -  \"g:/tMP/A\"\n    -  \"g:/tMP/a\"\n    -  \"g:/tMp/A\"\n    -  \"g:/tMp/a\"\n    -  \"g:/tmp/A\"\n    -  \"g:/tmp/a\"\n    +  \"G:/TMP/A\"\n    +  \"G:/TMP/a\"\n    +  \"G:/tMP/A\"\n    +  \"G:/tMP/a\"\n    +  \"G:/tMp/A\"\n    +  \"G:/tMp/a\"\n    +  \"G:/tmp/A\"\n    +  \"G:/tmp/a\"\n     ]\n    at:\n      line: 98\n      column: 7\n      file: test/nocase-nomagic.js\n    stack: |\n      test/nocase-nomagic.js:98:7\n      f (node_modules/once/once.js:17:25)\n      Glob. (glob.js:9:6041)\n      Glob._finish (glob.js:9:8600)\n      done (glob.js:9:7740)\n      Glob._processReaddir2 (glob.js:9:21305)\n      glob.js:9:17744\n      RES (node_modules/inflight/inflight.js:23:14)\n      f (node_modules/once/once.js:17:25)\n      Glob._readdirEntries (glob.js:9:29460)\n      glob.js:9:28301\n      test/nocase-nomagic.js:62:9\n    source: |\n      t.same(res.sort(), want)\nnocase, nomagic\n  not ok should be equivalent\n    +++ found\n    --- wanted\n     [\n    -  \"g:/TMP/A\"\n    -  \"g:/TMP/a\"\n    -  \"g:/tMP/A\"\n    -  \"g:/tMP/a\"\n    -  \"g:/tMp/A\"\n    -  \"g:/tMp/a\"\n    -  \"g:/tmp/A\"\n    -  \"g:/tmp/a\"\n    +  \"G:/TMP/A\"\n    +  \"G:/TMP/a\"\n    +  \"G:/tMP/A\"\n    +  \"G:/tMP/a\"\n    +  \"G:/tMp/A\"\n    +  \"G:/tMp/a\"\n    +  \"G:/tmp/A\"\n    +  \"G:/tmp/a\"\n     ]\n    at:\n      line: 108\n      column: 7\n      file: test/nocase-nomagic.js\n    stack: |\n      test/nocase-nomagic.js:108:7\n      f (node_modules/once/once.js:17:25)\n      Glob. (glob.js:9:6041)\n      Glob._finish (glob.js:9:8600)\n      done (glob.js:9:7740)\n      Glob._processReaddir2 (glob.js:9:21305)\n      glob.js:9:17744\n      RES (node_modules/inflight/inflight.js:23:14)\n      f (node_modules/once/once.js:17:25)\n      Glob._readdirEntries (glob.js:9:29460)\n      glob.js:9:28301\n      test/nocase-nomagic.js:62:9\n    source: |\n      t.same(res.sort(), want)\nnocase, with some magic\n  not ok should be equivalent\n    +++ found\n    --- wanted\n     [\n    -  \"g:/TMP/A\"\n    -  \"g:/TMP/a\"\n    -  \"g:/tMP/A\"\n    -  \"g:/tMP/a\"\n    -  \"g:/tMp/A\"\n    -  \"g:/tMp/a\"\n    -  \"g:/tmp/A\"\n    -  \"g:/tmp/a\"\n    +  \"G:/TMP/A\"\n    +  \"G:/TMP/a\"\n    +  \"G:/tMP/A\"\n    +  \"G:/tMP/a\"\n    +  \"G:/tMp/A\"\n    +  \"G:/tMp/a\"\n    +  \"G:/tmp/A\"\n    +  \"G:/tmp/a\"\n     ]\n    at:\n      line: 134\n      column: 7\n      file: test/nocase-nomagic.js\n    stack: |\n      test/nocase-nomagic.js:134:7\n      f (node_modules/once/once.js:17:25)\n      Glob. (glob.js:9:6041)\n      Glob._finish (glob.js:9:8600)\n      done (glob.js:9:7740)\n      Glob._processReaddir2 (glob.js:9:21305)\n      glob.js:9:17744\n      RES (node_modules/inflight/inflight.js:23:14)\n      f (node_modules/once/once.js:17:25)\n      Glob._readdirEntries (glob.js:9:29460)\n      glob.js:9:28301\n      test/nocase-nomagic.js:62:9\n    source: |\n      t.same(res.sort(), want)\nnocase, with some magic\n  not ok should be equivalent\n    +++ found\n    --- wanted\n     [\n    -  \"g:/TMP/A\"\n    -  \"g:/TMP/a\"\n    -  \"g:/tMP/A\"\n    -  \"g:/tMP/a\"\n    -  \"g:/tMp/A\"\n    -  \"g:/tMp/a\"\n    -  \"g:/tmp/A\"\n    -  \"g:/tmp/a\"\n    +  \"G:/TMP/A\"\n    +  \"G:/TMP/a\"\n    +  \"G:/tMP/A\"\n    +  \"G:/tMP/a\"\n    +  \"G:/tMp/A\"\n    +  \"G:/tMp/a\"\n    +  \"G:/tmp/A\"\n    +  \"G:/tmp/a\"\n     ]\n    at:\n      line: 141\n      column: 7\n      file: test/nocase-nomagic.js\n    stack: |\n      test/nocase-nomagic.js:141:7\n      f (node_modules/once/once.js:17:25)\n      Glob. (glob.js:9:6041)\n      Glob._finish (glob.js:9:8600)\n      done (glob.js:9:7740)\n      Glob._processReaddir2 (glob.js:9:21305)\n      glob.js:9:17744\n      RES (node_modules/inflight/inflight.js:23:14)\n      f (node_modules/once/once.js:17:25)\n      Glob._readdirEntries (glob.js:9:29460)\n      glob.js:9:28301\n      test/nocase-nomagic.js:62:9\n    source: |\n      t.same(res.sort(), want)\n. All Glob tests are passing as well on Ubuntu after 'inflight' use is removed.\nShould I prepare pull request with options parameter, which makes 'inflight' optional? Will it be accepted?\n. These are with mocha. First test will hang glob callback for the path '/test/test1*'. Two others will timeout after 2 seconds (standard mocha timeout).\n```\nvar glob = require(\"glob\");\nvar assert = require(\"assert\");\ndescribe(\"GlobInflightMinRepro\", function() {\nit(\"1\", function (done) {\n    glob(\"/test/test1*\", function(err, fileNames) {\n        if (err) {\n            done(err);\n            return;\n        }\n\n        assert.equal(fileNames.length, 1, \"Unexpected number of files found.\");\n\n        done();\n    });\n});\n\nit(\"2\", function (done) {\n\n    glob(\"/test/test1*\", function(err, fileNames) {\n        if (err) {\n            done(err);\n            return;\n        }\n\n        assert.equal(fileNames.length, 1, \"Unexpected number of files found.\");\n\n        done();\n    });\n});\n\nit(\"3\", function (done) {\n    glob(\"/test/test1*\", function(err, fileNames) {\n        if (err) {\n            done(err);\n            return;\n        }\n\n        assert.equal(fileNames.length, 1, \"Unexpected number of files found.\");\n\n        done();\n    });\n});\n\n});\n```\n. What is the verdict? Should I create PR for providing option to avoid using 'inflight'?\n. Different failures on my box:\ntest/nocase-nomagic.js ................................ 1/5 2s\n  nocase, nomagic\n  not ok should be equivalent\n    +++ found\n    --- wanted\n     [\n    -  \"g:/TMP/A\"\n    -  \"g:/TMP/a\"\n    -  \"g:/tMP/A\"\n    -  \"g:/tMP/a\"\n    -  \"g:/tMp/A\"\n    -  \"g:/tMp/a\"\n    -  \"g:/tmp/A\"\n    -  \"g:/tmp/a\"\n    +  \"G:/TMP/A\"\n    +  \"G:/TMP/a\"\n    +  \"G:/tMP/A\"\n    +  \"G:/tMP/a\"\n    +  \"G:/tMp/A\"\n    +  \"G:/tMp/a\"\n    +  \"G:/tmp/A\"\n    +  \"G:/tmp/a\"\n     ]\n    at:\n      line: 98\n      column: 7\n      file: test/nocase-nomagic.js\n    stack: |\n      test/nocase-nomagic.js:98:7\n      f (node_modules/once/once.js:17:25)\n      Glob. (glob.js:9:6041)\n      Glob._finish (glob.js:9:8600)\n      done (glob.js:9:7740)\n      Glob._processReaddir2 (glob.js:9:21305)\n      glob.js:9:17744\n      RES (node_modules/inflight/inflight.js:23:14)\n      f (node_modules/once/once.js:17:25)\n      Glob._readdirEntries (glob.js:9:29460)\n      glob.js:9:28301\n      test/nocase-nomagic.js:62:9\n    source: |\n      t.same(res.sort(), want)\nnocase, nomagic\n  not ok should be equivalent\n    +++ found\n    --- wanted\n     [\n    -  \"g:/TMP/A\"\n    -  \"g:/TMP/a\"\n    -  \"g:/tMP/A\"\n    -  \"g:/tMP/a\"\n    -  \"g:/tMp/A\"\n    -  \"g:/tMp/a\"\n    -  \"g:/tmp/A\"\n    -  \"g:/tmp/a\"\n    +  \"G:/TMP/A\"\n    +  \"G:/TMP/a\"\n    +  \"G:/tMP/A\"\n    +  \"G:/tMP/a\"\n    +  \"G:/tMp/A\"\n    +  \"G:/tMp/a\"\n    +  \"G:/tmp/A\"\n    +  \"G:/tmp/a\"\n     ]\n    at:\n      line: 108\n      column: 7\n      file: test/nocase-nomagic.js\n    stack: |\n      test/nocase-nomagic.js:108:7\n      f (node_modules/once/once.js:17:25)\n      Glob. (glob.js:9:6041)\n      Glob._finish (glob.js:9:8600)\n      done (glob.js:9:7740)\n      Glob._processReaddir2 (glob.js:9:21305)\n      glob.js:9:17744\n      RES (node_modules/inflight/inflight.js:23:14)\n      f (node_modules/once/once.js:17:25)\n      Glob._readdirEntries (glob.js:9:29460)\n      glob.js:9:28301\n      test/nocase-nomagic.js:62:9\n    source: |\n      t.same(res.sort(), want)\nnocase, with some magic\n  not ok should be equivalent\n    +++ found\n    --- wanted\n     [\n    -  \"g:/TMP/A\"\n    -  \"g:/TMP/a\"\n    -  \"g:/tMP/A\"\n    -  \"g:/tMP/a\"\n    -  \"g:/tMp/A\"\n    -  \"g:/tMp/a\"\n    -  \"g:/tmp/A\"\n    -  \"g:/tmp/a\"\n    +  \"G:/TMP/A\"\n    +  \"G:/TMP/a\"\n    +  \"G:/tMP/A\"\n    +  \"G:/tMP/a\"\n    +  \"G:/tMp/A\"\n    +  \"G:/tMp/a\"\n    +  \"G:/tmp/A\"\n    +  \"G:/tmp/a\"\n     ]\n    at:\n      line: 134\n      column: 7\n      file: test/nocase-nomagic.js\n    stack: |\n      test/nocase-nomagic.js:134:7\n      f (node_modules/once/once.js:17:25)\n      Glob. (glob.js:9:6041)\n      Glob._finish (glob.js:9:8600)\n      done (glob.js:9:7740)\n      Glob._processReaddir2 (glob.js:9:21305)\n      glob.js:9:17744\n      RES (node_modules/inflight/inflight.js:23:14)\n      f (node_modules/once/once.js:17:25)\n      Glob._readdirEntries (glob.js:9:29460)\n      glob.js:9:28301\n      test/nocase-nomagic.js:62:9\n    source: |\n      t.same(res.sort(), want)\nnocase, with some magic\n  not ok should be equivalent\n    +++ found\n    --- wanted\n     [\n    -  \"g:/TMP/A\"\n    -  \"g:/TMP/a\"\n    -  \"g:/tMP/A\"\n    -  \"g:/tMP/a\"\n    -  \"g:/tMp/A\"\n    -  \"g:/tMp/a\"\n    -  \"g:/tmp/A\"\n    -  \"g:/tmp/a\"\n    +  \"G:/TMP/A\"\n    +  \"G:/TMP/a\"\n    +  \"G:/tMP/A\"\n    +  \"G:/tMP/a\"\n    +  \"G:/tMp/A\"\n    +  \"G:/tMp/a\"\n    +  \"G:/tmp/A\"\n    +  \"G:/tmp/a\"\n     ]\n    at:\n      line: 141\n      column: 7\n      file: test/nocase-nomagic.js\n    stack: |\n      test/nocase-nomagic.js:141:7\n      f (node_modules/once/once.js:17:25)\n      Glob. (glob.js:9:6041)\n      Glob._finish (glob.js:9:8600)\n      done (glob.js:9:7740)\n      Glob._processReaddir2 (glob.js:9:21305)\n      glob.js:9:17744\n      RES (node_modules/inflight/inflight.js:23:14)\n      f (node_modules/once/once.js:17:25)\n      Glob._readdirEntries (glob.js:9:29460)\n      glob.js:9:28301\n      test/nocase-nomagic.js:62:9\n    source: |\n      t.same(res.sort(), want)\n. ",
    "phated": "@isaacs I believe this is fixed with the inflight patch from yesterday\n. This seems to no longer be valid.\n. You probably want to use https://github.com/sindresorhus/globby which does exactly what you are looking for.\n. root is already an option that is resolved to C:\\\\ on Windows.  You are supposed to use globs that look like unix paths.  So you'd use / always (even on Windows).\n. @isaacs awesome!  thanks!\n. Excellent.  I'll dig into it\n. If there is anything else you'd like me to tackle as part of this, just let me know.\n. Awesome!  Glad I could help find issues in sync too\n. Interesting that this passes on Windows.  That's extra confusing for me.\n. I think I have a partial solution (separate commit) but found another problem and added a failing test.\n. I think this actually might a symptom of a deeper problem with makeAbs because it seems _emitMatch is always receiving matches as absolute when the root option is set and caching results based on something like /Users/phated/node-glob/test/fixtures/a/Users/phated/node-glob/test/fixtures/a/b which seems to be wrong.\n. Rebased with possible fixes.  I have a TODO comment because I don't know the answer to:\n\nis an absolute cwd supposed to be resolved against root?\ne.g. { cwd: '/test', root: __dirname } === path.join(__dirname, '/test')\n. Hmm, broke something else on Windows.\n. Yay, passing tests!  I'm not sure if everything I did to get these tests passing is kosher or even that the tests are written correctly, but it seems to be doing the right thing in the few narrow cases I came up with.\n\nCan you think of a better way to write the cacheCheck tests to verify the paths being cached actually exist and isn't suffering from this joining of 2 absolute paths?\n. @isaacs sorry to ping again but I'd like to get this resolved in some way so I can land the usage in glob-stream\n. It looks like the appveyor failure started back at https://ci.appveyor.com/project/isaacs/node-glob/build/98 and isn't related to this PR.\n. @isaacs any thoughts about this?\n. Sorry to be a pest.  Is there anything I can do to push this along?  I'm currently blocked on a glob-stream change by this and have to point to my fork.\n. @isaacs I believe this is fixed with the inflight patch from yesterday\n. This seems to no longer be valid.\n. You probably want to use https://github.com/sindresorhus/globby which does exactly what you are looking for.\n. root is already an option that is resolved to C:\\\\ on Windows.  You are supposed to use globs that look like unix paths.  So you'd use / always (even on Windows).\n. @isaacs awesome!  thanks!\n. Excellent.  I'll dig into it\n. If there is anything else you'd like me to tackle as part of this, just let me know.\n. Awesome!  Glad I could help find issues in sync too\n. Interesting that this passes on Windows.  That's extra confusing for me.\n. I think I have a partial solution (separate commit) but found another problem and added a failing test.\n. I think this actually might a symptom of a deeper problem with makeAbs because it seems _emitMatch is always receiving matches as absolute when the root option is set and caching results based on something like /Users/phated/node-glob/test/fixtures/a/Users/phated/node-glob/test/fixtures/a/b which seems to be wrong.\n. Rebased with possible fixes.  I have a TODO comment because I don't know the answer to:\n\nis an absolute cwd supposed to be resolved against root?\ne.g. { cwd: '/test', root: __dirname } === path.join(__dirname, '/test')\n. Hmm, broke something else on Windows.\n. Yay, passing tests!  I'm not sure if everything I did to get these tests passing is kosher or even that the tests are written correctly, but it seems to be doing the right thing in the few narrow cases I came up with.\n\nCan you think of a better way to write the cacheCheck tests to verify the paths being cached actually exist and isn't suffering from this joining of 2 absolute paths?\n. @isaacs sorry to ping again but I'd like to get this resolved in some way so I can land the usage in glob-stream\n. It looks like the appveyor failure started back at https://ci.appveyor.com/project/isaacs/node-glob/build/98 and isn't related to this PR.\n. @isaacs any thoughts about this?\n. Sorry to be a pest.  Is there anything I can do to push this along?  I'm currently blocked on a glob-stream change by this and have to point to my fork.\n. ",
    "Y--": "Hi @isaacs, thanks for having a look at this PR and sorry I should indeed have included more details.\nfollow : true will follow the cycles indefinitely with the **/* pattern until eventually an error occurs such as the path is too large, or an \"ELOOP\" error is thrown.\nConsider the following snippet, that would run in a test script at the root of the glob project, with the fixtures generated by the tests :\n```\nvar Glob    = require('./glob').Glob;\nvar pattern = 'test/fixtures/a/*/';\nvar options = {\n  follow : true,\n  nodir  : true,\n  sync   : true\n};\nconsole.time('With followsymlinkscyles = true (default)');\nvar mg = new Glob(pattern, options)\nconsole.timeEnd('With followsymlinkscyles = true (default)');\nconsole.time('With followsymlinkscyles = false');\noptions.followsymlinkscyles = false;\nvar mg = new Glob(pattern, options)\nconsole.timeEnd('With followsymlinkscyles = false');\n```\nOn my side I get something like : \nWith followsymlinkscyles = true (default): 37.691ms\nWith followsymlinkscyles = false: 5.951ms\nIn the first case, the recursion stops because of the Error :\nError: ELOOP: too many symbolic links encountered, stat 'test/fixtures/a/symlink/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c'\nBut this can take a lot of time before this error is thrown.\nIn the real-world scenario I use, (within the Karma framework), since I have a lot of nested links between my repositories, the program run for several minutes before it eventually crashes with an out of memory error.\nThis option followsymlinkscyles stops the recursion when we already traversed one time entierly down the loop.\nThe fix might very well be naive and I'm totally open to discuss an other solution, but that was the first one that came to me.\nOf course I'm totally open regarding the name. \nI thought that the name was more explicit this way and I saw the strict option being true by default so I assumed it was ok :\nhttps://github.com/isaacs/node-glob/blob/5a40b676a16fbf6a8799977dc86fbc61e40c739f/common.js#L60\nWould dontfollowsymlinkscycles work for you? (it looks a bit long though...)\nCheers,\nYves\n. Sorry for the late reply, I didn't get any time to work on this lately.\nI've tried the \"realpath\" option and since as you pointed it, it does traverse all the symlink before filtering them at the end, this solution isn't viable. \nWhen I use it on my karma tests, it ends with nice messages like :\n```\n<--- Last few GCs --->\n119806 ms: Scavenge 1396.7 (1456.2) -> 1396.7 (1456.2) MB, 0.3 / 0 ms (+ 103.5 ms in 1 steps since last GC) [allocation failure] [incremental marking delaying mark-sweep].\n  120805 ms: Mark-sweep 1396.7 (1456.2) -> 1396.7 (1456.2) MB, 999.4 / 0 ms (+ 192.6 ms in 11 steps since start of marking, biggest step 103.5 ms) [last resort gc].\n  121820 ms: Mark-sweep 1396.7 (1456.2) -> 1396.7 (1456.2) MB, 1014.7 / 0 ms [last resort gc].\n<--- JS stacktrace --->\n==== JS stack trace =========================================\nSecurity context: 0x1c27036e3ac1 \n    1: _stat [node-glob/sync.js:479] [pc=0x14ef96c5c1a7] (this=0x1c27036fd551 ,f=0x3e43b5004101 <String[621]\nFATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory\n```\nAlso I do agree with you that this option might lead to weird situations, but I'm not sure what would be a better solution to solve my issue then?\n. Hi @isaacs, thanks for having a look at this PR and sorry I should indeed have included more details.\nfollow : true will follow the cycles indefinitely with the **/* pattern until eventually an error occurs such as the path is too large, or an \"ELOOP\" error is thrown.\nConsider the following snippet, that would run in a test script at the root of the glob project, with the fixtures generated by the tests :\n```\nvar Glob    = require('./glob').Glob;\nvar pattern = 'test/fixtures/a/*/';\nvar options = {\n  follow : true,\n  nodir  : true,\n  sync   : true\n};\nconsole.time('With followsymlinkscyles = true (default)');\nvar mg = new Glob(pattern, options)\nconsole.timeEnd('With followsymlinkscyles = true (default)');\nconsole.time('With followsymlinkscyles = false');\noptions.followsymlinkscyles = false;\nvar mg = new Glob(pattern, options)\nconsole.timeEnd('With followsymlinkscyles = false');\n```\nOn my side I get something like : \nWith followsymlinkscyles = true (default): 37.691ms\nWith followsymlinkscyles = false: 5.951ms\nIn the first case, the recursion stops because of the Error :\nError: ELOOP: too many symbolic links encountered, stat 'test/fixtures/a/symlink/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c'\nBut this can take a lot of time before this error is thrown.\nIn the real-world scenario I use, (within the Karma framework), since I have a lot of nested links between my repositories, the program run for several minutes before it eventually crashes with an out of memory error.\nThis option followsymlinkscyles stops the recursion when we already traversed one time entierly down the loop.\nThe fix might very well be naive and I'm totally open to discuss an other solution, but that was the first one that came to me.\nOf course I'm totally open regarding the name. \nI thought that the name was more explicit this way and I saw the strict option being true by default so I assumed it was ok :\nhttps://github.com/isaacs/node-glob/blob/5a40b676a16fbf6a8799977dc86fbc61e40c739f/common.js#L60\nWould dontfollowsymlinkscycles work for you? (it looks a bit long though...)\nCheers,\nYves\n. Sorry for the late reply, I didn't get any time to work on this lately.\nI've tried the \"realpath\" option and since as you pointed it, it does traverse all the symlink before filtering them at the end, this solution isn't viable. \nWhen I use it on my karma tests, it ends with nice messages like :\n```\n<--- Last few GCs --->\n119806 ms: Scavenge 1396.7 (1456.2) -> 1396.7 (1456.2) MB, 0.3 / 0 ms (+ 103.5 ms in 1 steps since last GC) [allocation failure] [incremental marking delaying mark-sweep].\n  120805 ms: Mark-sweep 1396.7 (1456.2) -> 1396.7 (1456.2) MB, 999.4 / 0 ms (+ 192.6 ms in 11 steps since start of marking, biggest step 103.5 ms) [last resort gc].\n  121820 ms: Mark-sweep 1396.7 (1456.2) -> 1396.7 (1456.2) MB, 1014.7 / 0 ms [last resort gc].\n<--- JS stacktrace --->\n==== JS stack trace =========================================\nSecurity context: 0x1c27036e3ac1 \n    1: _stat [node-glob/sync.js:479] [pc=0x14ef96c5c1a7] (this=0x1c27036fd551 ,f=0x3e43b5004101 <String[621]\nFATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory\n```\nAlso I do agree with you that this option might lead to weird situations, but I'm not sure what would be a better solution to solve my issue then?\n. ",
    "floribon": "+1, running out of memory using symlinks in my packages\n. +1, running out of memory using symlinks in my packages\n. ",
    "boutils": "+1 for @Y-- , can we please merge this PR?\n. +1 for @Y-- , can we please merge this PR?\n. ",
    "inf3rno": "Hmm AND(a, NOT(b)) can be written as NOT(OR(NOT(a), b)). I tried with some/folder/**/!(!(*.js)|(*.exclude.js)), but this does not work, the result is empty. :-(\n. I was able to do this in a simpler way: some/folder/**/!(*.exclude).js\n. @isaacs  \n\nI am using a library that uses glob for pattern matching, but does not provide any ignore option.\n. Hmm AND(a, NOT(b)) can be written as NOT(OR(NOT(a), b)). I tried with some/folder/**/!(!(*.js)|(*.exclude.js)), but this does not work, the result is empty. :-(\n. I was able to do this in a simpler way: some/folder/**/!(*.exclude).js\n. @isaacs  \nI am using a library that uses glob for pattern matching, but does not provide any ignore option.\n. \n",
    "mina86": "O_o\nI guess increased readability is indeed not a measurable change. But here are some measurable changes:\n- code is now four lines shorter,\n- Object.keys creates array for no reason,\n- Object.keys is ECMAScript 5.1.\n. O_o\nI guess increased readability is indeed not a measurable change. But here are some measurable changes:\n- code is now four lines shorter,\n- Object.keys creates array for no reason,\n- Object.keys is ECMAScript 5.1.\n. ",
    "filipesilva": "I forgot to mention: I am running Windows 10, using gitbash. \nAs far as I can tell, this doesn't happen in OSX/Linux.\n. As per https://github.com/eslint/eslint/issues/5796#issuecomment-206717297, the issue is completely unrelated to glob but rather a quirk of cmd, and npm scripts use cmd.\nFor npm scripts to correctly pass arguments to node binaries, double quotes (\") must be used instead of single quotes (').\nThe above example works perfectly well with double quotes:\n```\nfilipe.silva@DESKTOP-7ND6T3R MINGW64 /E/sandbox/glob-test\n$ ./node_modules/.bin/glob-cli-test \"*/.ts\"\n[ 'file.ts' ]\nfilipe.silva@DESKTOP-7ND6T3R MINGW64 /E/sandbox/glob-test\n$ npm run glob\n\n@ glob E:\\sandbox\\glob-test\nglob-cli-test \"*/.ts\"\n\n[ 'file.ts' ]\n```\n. I forgot to mention: I am running Windows 10, using gitbash. \nAs far as I can tell, this doesn't happen in OSX/Linux.\n. As per https://github.com/eslint/eslint/issues/5796#issuecomment-206717297, the issue is completely unrelated to glob but rather a quirk of cmd, and npm scripts use cmd.\nFor npm scripts to correctly pass arguments to node binaries, double quotes (\") must be used instead of single quotes (').\nThe above example works perfectly well with double quotes:\n```\nfilipe.silva@DESKTOP-7ND6T3R MINGW64 /E/sandbox/glob-test\n$ ./node_modules/.bin/glob-cli-test \"*/.ts\"\n[ 'file.ts' ]\nfilipe.silva@DESKTOP-7ND6T3R MINGW64 /E/sandbox/glob-test\n$ npm run glob\n\n@ glob E:\\sandbox\\glob-test\nglob-cli-test \"*/.ts\"\n\n[ 'file.ts' ]\n```\n. ",
    "MylesBorins": "It looks like the breakage has been caused by https://github.com/nodejs/node/commit/b488b19eaf2b2e7a3ca5eccd2445e245847a5f76\nNode is now relying on a native implementation of realpath that is provided by libuv\nOne of the changes is the removal of the cache, which is used by glob -- >https://github.com/isaacs/node-glob/blob/master/glob.js#L235\nThis does not seem to be causing the problem, as running tests with the cache removed is still throwing the same errors. @jasnell is digging into libuv to see if it is an implementation bug\n. thanks for taking the time to find a userland solution that works for now, I'll remove node-glob from the flaky list on citgm\nI will also be following up internally to help figure out a way to fix this in node proper\n. Here's a citgm run of the latest publish of node-glob using master of node\nhttps://ci.nodejs.org/view/Node.js-citgm/job/citgm-smoker/308/\n. /cc @jasnell who did all the dirty work in solving this one.\n. @isaacs it is using realpath(3). I see you've joined the discussion in https://github.com/nodejs/node/issues/2680#issuecomment-213368900\nI'll keep this thread updated with what happens in the Node project\n. @isaacs if we update the version of libuv in node to include the fix for realpath(3) would you be opposed to this landing in node-glob?\n. the changes to libuv landed in v6.2. Any system that does not have PATH_MAX will have an error thrown during compilation\n@jlamendo can you elaborate on what you meant by encoding in the cache?\n. ping @jlamendo \n@isaacs this is still breaking CI for most flavors of linux for catching cycles\n. It looks like the breakage has been caused by https://github.com/nodejs/node/commit/b488b19eaf2b2e7a3ca5eccd2445e245847a5f76\nNode is now relying on a native implementation of realpath that is provided by libuv\nOne of the changes is the removal of the cache, which is used by glob -- >https://github.com/isaacs/node-glob/blob/master/glob.js#L235\nThis does not seem to be causing the problem, as running tests with the cache removed is still throwing the same errors. @jasnell is digging into libuv to see if it is an implementation bug\n. thanks for taking the time to find a userland solution that works for now, I'll remove node-glob from the flaky list on citgm\nI will also be following up internally to help figure out a way to fix this in node proper\n. Here's a citgm run of the latest publish of node-glob using master of node\nhttps://ci.nodejs.org/view/Node.js-citgm/job/citgm-smoker/308/\n. /cc @jasnell who did all the dirty work in solving this one.\n. @isaacs it is using realpath(3). I see you've joined the discussion in https://github.com/nodejs/node/issues/2680#issuecomment-213368900\nI'll keep this thread updated with what happens in the Node project\n. @isaacs if we update the version of libuv in node to include the fix for realpath(3) would you be opposed to this landing in node-glob?\n. the changes to libuv landed in v6.2. Any system that does not have PATH_MAX will have an error thrown during compilation\n@jlamendo can you elaborate on what you meant by encoding in the cache?\n. ping @jlamendo \n@isaacs this is still breaking CI for most flavors of linux for catching cycles\n. ",
    "jasnell": "Turns out to be fairly straight forward.. fs.realpath and fs.realpathSync now defer to libuv for the implementation which now throw errors that the previous implementation did not. Specifically, when the sym link depth reaches a certain point, both fs.readdir and fs.realpath both start complaining. While glob swallows the readdir throw, it doesn't swallow the realpath throw, causing the problem.\nNow, we aren't seeing this happen on OSX or other platforms because on those platforms, readdir complains about the symlink depth earlier than realpath, and since glob swallows that error and uses it as an exit criteria (by returning null for the readdir check), the code never gets to the depth that causes realpath to throw. \nThe fix is fairly simple. In sync.js and glob.js, in the error handling for fs.realpath, check for er.code === 'ELOOP' and set[real] = true.\nThere is also a secondary issue with glob's use of fs.realpath. In the new implementation, the cache argument has been removed and was replaced with an options argument. This options argument does not have the same semantics as cache. It allows for a single encoding parameter that specifies the character encoding of the returned path. Right now the cache object passed in by glob is ignored completely, but if that object happened to have an encoding parameter on it, it wouldn't be good. It's probably ok to continue passing the cache argument along (it would be treated as if it were an options object in v6) for backwards compatibility. But it's something to keep an eye on.\n. Turns out to be fairly straight forward.. fs.realpath and fs.realpathSync now defer to libuv for the implementation which now throw errors that the previous implementation did not. Specifically, when the sym link depth reaches a certain point, both fs.readdir and fs.realpath both start complaining. While glob swallows the readdir throw, it doesn't swallow the realpath throw, causing the problem.\nNow, we aren't seeing this happen on OSX or other platforms because on those platforms, readdir complains about the symlink depth earlier than realpath, and since glob swallows that error and uses it as an exit criteria (by returning null for the readdir check), the code never gets to the depth that causes realpath to throw. \nThe fix is fairly simple. In sync.js and glob.js, in the error handling for fs.realpath, check for er.code === 'ELOOP' and set[real] = true.\nThere is also a secondary issue with glob's use of fs.realpath. In the new implementation, the cache argument has been removed and was replaced with an options argument. This options argument does not have the same semantics as cache. It allows for a single encoding parameter that specifies the character encoding of the returned path. Right now the cache object passed in by glob is ignored completely, but if that object happened to have an encoding parameter on it, it wouldn't be good. It's probably ok to continue passing the cache argument along (it would be treated as if it were an options object in v6) for backwards compatibility. But it's something to keep an eye on.\n. ",
    "mscdex": "s/ev_fs_realpath/uv_fs_realpath/\n. s/ev_fs_realpath/uv_fs_realpath/\n. ",
    "jlamendo": "@TheAlphaNerd From my understanding, node 6 is landing on throwing an error when PATH_MAX is undefined.\nIf that's correct, I'm ok with that solution.  While I don't want to break anyone's build, it's better to do that than deal with a compromised machine. There seems to be a few conflicting threads on that, so I'm not sure what the actual accepted solution was.\nThat said, I do have a concern with the comment about encoding being in the cache. Unfortunately I didn't have time to root this out on my own today, so hopefully you know, but are there any controls in place to prevent that from happening, and are such controls possible? If it does happen, what is the impact?\n. @TheAlphaNerd \nI was referring to the statement you made - 'As long as the cache doesn't include a value called \"encoding\" everything will be fine.'\nWhat is the impact if it is included in the cache, and are there any mechanisms in place to detect that before it causes problems or prevent it from being there in the first place? \nIt may be a minor issue, and I suspect that it is the case, but I wanted to be sure.\n. @TheAlphaNerd From my understanding, node 6 is landing on throwing an error when PATH_MAX is undefined.\nIf that's correct, I'm ok with that solution.  While I don't want to break anyone's build, it's better to do that than deal with a compromised machine. There seems to be a few conflicting threads on that, so I'm not sure what the actual accepted solution was.\nThat said, I do have a concern with the comment about encoding being in the cache. Unfortunately I didn't have time to root this out on my own today, so hopefully you know, but are there any controls in place to prevent that from happening, and are such controls possible? If it does happen, what is the impact?\n. @TheAlphaNerd \nI was referring to the statement you made - 'As long as the cache doesn't include a value called \"encoding\" everything will be fine.'\nWhat is the impact if it is included in the cache, and are there any mechanisms in place to detect that before it causes problems or prevent it from being there in the first place? \nIt may be a minor issue, and I suspect that it is the case, but I wanted to be sure.\n. ",
    "gronke": "This draft removed the minmatch syntax for demonstration purposes. If we consider gitignore syntax I suggest we add an option to switch between minmatch and gitignore style (that for compatibility reasons defaults to minmatch).\n. This draft removed the minmatch syntax for demonstration purposes. If we consider gitignore syntax I suggest we add an option to switch between minmatch and gitignore style (that for compatibility reasons defaults to minmatch).\n. ",
    "kaelzhang": "If it is ok to do this, I can help with pr.\n. @isaacs May I have any suggestions?\n. If it is ok to do this, I can help with pr.\n. @isaacs May I have any suggestions?\n. ",
    "zhaozhiming": "It seems use glob('**/*', {dot: true}, function(er, files) {} ) is ok.\n. It seems use glob('**/*', {dot: true}, function(er, files) {} ) is ok.\n. ",
    "addisonj": "This isn't a fix for https://github.com/isaacs/node-glob/issues/173 but does at least document it...\n. This isn't a fix for https://github.com/isaacs/node-glob/issues/173 but does at least document it...\n. ",
    "akoutmos": "Just verified that this is indeed fixed. Thanks!\n. Just verified that this is indeed fixed. Thanks!\n. ",
    "AccaliaDeElementia": "hmm.... this looks like it might just be a case where the test needs to be updated?\ndigging through the appveyor log for the failed build it looks like the drive letter got lowercased, which isn't a problem as drive letters under windows are not case sensitive.\n[snip logs]\n found:\n            - 'C:/TMP/A'\n            - 'C:/TMP/a'\n            - 'C:/tMP/A'\n            - 'C:/tMP/a'\n            - 'C:/tMp/A'\n            - 'C:/tMp/a'\n            - 'C:/tmp/A'\n            - 'C:/tmp/a'\n          wanted:\n            - 'c:/TMP/A'\n            - 'c:/TMP/a'\n            - 'c:/tMP/A'\n            - 'c:/tMP/a'\n            - 'c:/tMp/A'\n            - 'c:/tMp/a'\n            - 'c:/tmp/A'\n            - 'c:/tmp/a'\n[snip more logs]\n. hmm.... this looks like it might just be a case where the test needs to be updated?\ndigging through the appveyor log for the failed build it looks like the drive letter got lowercased, which isn't a problem as drive letters under windows are not case sensitive.\n[snip logs]\n found:\n            - 'C:/TMP/A'\n            - 'C:/TMP/a'\n            - 'C:/tMP/A'\n            - 'C:/tMP/a'\n            - 'C:/tMp/A'\n            - 'C:/tMp/a'\n            - 'C:/tmp/A'\n            - 'C:/tmp/a'\n          wanted:\n            - 'c:/TMP/A'\n            - 'c:/TMP/a'\n            - 'c:/tMP/A'\n            - 'c:/tMP/a'\n            - 'c:/tMp/A'\n            - 'c:/tMp/a'\n            - 'c:/tmp/A'\n            - 'c:/tmp/a'\n[snip more logs]\n. ",
    "super-cache-money": "Figured to just use minimatch\n. Figured to just use minimatch\n. ",
    "tamzinblake": "Fixed in v7.0.5 - this should be closed\n. Those Travis failures sure are confusing\n. @isaacs Any help on this one? Everyone is confused.\n. Fixed in v7.0.5 - this should be closed\n. Those Travis failures sure are confusing\n. @isaacs Any help on this one? Everyone is confused.\n. ",
    "TDA": "@thomblake I agree, no idea where requests@2.69.1 came in from :(\nEDIT: does this have anything to do with codecov.io??\n. @thomblake I agree, no idea where requests@2.69.1 came in from :(\nEDIT: does this have anything to do with codecov.io??\n. ",
    "DomVinyard": "I am also butting up against that. Would it be possible to stream the files directly from POSIX (as per https://www.npmjs.com/package/native-readdir) rather than rely on fs.readdir?. I am also butting up against that. Would it be possible to stream the files directly from POSIX (as per https://www.npmjs.com/package/native-readdir) rather than rely on fs.readdir?. ",
    "ohjames": "Sorry, my mistake.\n. Sorry, my mistake.\n. ",
    "jrbenito": "@isaacs \nShall it be */*.(css|js) instead of **/*.(css|js)?\n. Hi @isaacs \nActually it matters, with only one * I got somewhat right answer (no .js or .css files) however, only for current directory -  not recursive. However, with two * (**/*.!(css|js)), I get the wrong answer again.\n$ node -p 'require(\"glob\").sync(\"**/*.!(css|js)\")'\n[...]\n'assets/js/script-i4qo6jx6jji9fg0dftpya6ivemizsbow4fhow76d8dwpm7m1wbvi378ssumx.min.js'\nbut, the answer provided at stackoverflow.com, while more complicate, works:\n$ node -p 'require(\"glob\").sync(\"**/*.!(*(*.)js|*(*.)css)\")'\nThe explanation provided in the answer seems reasonable. Do you agree?\nFor the records:\n$ npm ls -g glob\n/home/ME/.nvm/versions/node/v4.4.3/lib\n\u251c\u2500\u252c glob-all@3.0.3\n\u2502 \u2514\u2500\u2500 glob@4.5.3\n\u251c\u2500\u252c grunt@1.0.1\n\u2502 \u251c\u2500\u252c findup-sync@0.3.0\n\u2502 \u2502 \u2514\u2500\u2500 glob@5.0.15\n\u2502 \u2514\u2500\u2500 glob@7.0.5\n\u251c\u2500\u252c grunt-cli@1.2.0\n\u2502 \u2514\u2500\u252c findup-sync@0.3.0\n\u2502   \u2514\u2500\u2500 glob@5.0.15\n\u251c\u2500\u252c hexo-cli@1.0.1\n\u2502 \u2514\u2500\u252c hexo-log@0.1.2\n\u2502   \u2514\u2500\u252c bunyan@1.8.1\n\u2502     \u2514\u2500\u252c mv@2.1.1\n\u2502       \u2514\u2500\u252c rimraf@2.4.5\n\u2502         \u2514\u2500\u2500 glob@6.0.4\n\u2514\u2500\u252c npm@3.10.2\n  \u251c\u2500\u2500 glob@7.0.4\n  \u251c\u2500\u252c init-package-json@1.9.4\n  \u2502 \u2514\u2500\u2500 glob@6.0.4\n  \u251c\u2500\u252c node-gyp@3.3.1\n  \u2502 \u2514\u2500\u2500 glob@4.5.3\n  \u2514\u2500\u252c read-package-json@2.0.4\n    \u2514\u2500\u2500 glob@6.0.4\nAs per tree above, my tries with glob-all package was using glob@4.5.3 however, my grunt tasks (where I first saw issues) are using glob@7.0.5.\nthanks again. If you agree we can close this.\nBR\n. @isaacs \nShall it be */*.(css|js) instead of **/*.(css|js)?\n. Hi @isaacs \nActually it matters, with only one * I got somewhat right answer (no .js or .css files) however, only for current directory -  not recursive. However, with two * (**/*.!(css|js)), I get the wrong answer again.\n$ node -p 'require(\"glob\").sync(\"**/*.!(css|js)\")'\n[...]\n'assets/js/script-i4qo6jx6jji9fg0dftpya6ivemizsbow4fhow76d8dwpm7m1wbvi378ssumx.min.js'\nbut, the answer provided at stackoverflow.com, while more complicate, works:\n$ node -p 'require(\"glob\").sync(\"**/*.!(*(*.)js|*(*.)css)\")'\nThe explanation provided in the answer seems reasonable. Do you agree?\nFor the records:\n$ npm ls -g glob\n/home/ME/.nvm/versions/node/v4.4.3/lib\n\u251c\u2500\u252c glob-all@3.0.3\n\u2502 \u2514\u2500\u2500 glob@4.5.3\n\u251c\u2500\u252c grunt@1.0.1\n\u2502 \u251c\u2500\u252c findup-sync@0.3.0\n\u2502 \u2502 \u2514\u2500\u2500 glob@5.0.15\n\u2502 \u2514\u2500\u2500 glob@7.0.5\n\u251c\u2500\u252c grunt-cli@1.2.0\n\u2502 \u2514\u2500\u252c findup-sync@0.3.0\n\u2502   \u2514\u2500\u2500 glob@5.0.15\n\u251c\u2500\u252c hexo-cli@1.0.1\n\u2502 \u2514\u2500\u252c hexo-log@0.1.2\n\u2502   \u2514\u2500\u252c bunyan@1.8.1\n\u2502     \u2514\u2500\u252c mv@2.1.1\n\u2502       \u2514\u2500\u252c rimraf@2.4.5\n\u2502         \u2514\u2500\u2500 glob@6.0.4\n\u2514\u2500\u252c npm@3.10.2\n  \u251c\u2500\u2500 glob@7.0.4\n  \u251c\u2500\u252c init-package-json@1.9.4\n  \u2502 \u2514\u2500\u2500 glob@6.0.4\n  \u251c\u2500\u252c node-gyp@3.3.1\n  \u2502 \u2514\u2500\u2500 glob@4.5.3\n  \u2514\u2500\u252c read-package-json@2.0.4\n    \u2514\u2500\u2500 glob@6.0.4\nAs per tree above, my tries with glob-all package was using glob@4.5.3 however, my grunt tasks (where I first saw issues) are using glob@7.0.5.\nthanks again. If you agree we can close this.\nBR\n. ",
    "coveralls": "\nCoverage remained the same at 92.199% when pulling cf0d90dfadcd1b9ae494b06ed196c78d31596792 on greenkeeper-update-all into 1728df825b1401351c326e04b905192debf862fb on master.\n. \nCoverage increased (+0.05%) to 93.833% when pulling 004ec946af3fc31c7baf1609e6debf982cc1764a on fix-245 into 12be3fc9d95b2665fffd90869cd6b9fae187ac31 on master.\n. \nCoverage increased (+0.05%) to 93.833% when pulling c635c9e1e3bd49d9b8cb3db4df51ab8bb88fb243 on fix-245 into 12be3fc9d95b2665fffd90869cd6b9fae187ac31 on master.\n. \nCoverage increased (+0.05%) to 93.727% when pulling 1849bf7bccbd8438901408e346315674282026be on fix-245 into cea11fea473f18c565a515b0c61c8f194fc23aaa on master.\n. \nCoverage increased (+0.05%) to 93.727% when pulling 1849bf7bccbd8438901408e346315674282026be on fix-245 into cea11fea473f18c565a515b0c61c8f194fc23aaa on master.\n. \nCoverage remained the same at 92.199% when pulling cf0d90dfadcd1b9ae494b06ed196c78d31596792 on greenkeeper-update-all into 1728df825b1401351c326e04b905192debf862fb on master.\n. \nCoverage increased (+0.05%) to 93.833% when pulling 004ec946af3fc31c7baf1609e6debf982cc1764a on fix-245 into 12be3fc9d95b2665fffd90869cd6b9fae187ac31 on master.\n. \nCoverage increased (+0.05%) to 93.833% when pulling c635c9e1e3bd49d9b8cb3db4df51ab8bb88fb243 on fix-245 into 12be3fc9d95b2665fffd90869cd6b9fae187ac31 on master.\n. \nCoverage increased (+0.05%) to 93.727% when pulling 1849bf7bccbd8438901408e346315674282026be on fix-245 into cea11fea473f18c565a515b0c61c8f194fc23aaa on master.\n. \nCoverage increased (+0.05%) to 93.727% when pulling 1849bf7bccbd8438901408e346315674282026be on fix-245 into cea11fea473f18c565a515b0c61c8f194fc23aaa on master.\n. ",
    "ntrrgc": "I was trying to implement something like gitignore, with a set of filtered patterns. Isn't there a way to do that with node-glob?\n. On 08/04/2016 01:40 AM, isaacs wrote:\n\nYou can take a look at how fstream-ignore does it. That's what npm \nuses for .npmignore files. https://github.com/npm/fstream-ignore\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub \nhttps://github.com/isaacs/node-glob/issues/278#issuecomment-237408556, \nor mute the thread \nhttps://github.com/notifications/unsubscribe-auth/AA9LxIf7fqV4wdRuBi0GP33H2moRfBMWks5qcSbWgaJpZM4JZ6hM.\nThanks for the tip. I couldn't find something like that the last time I \nsearched.\n. I was trying to implement something like gitignore, with a set of filtered patterns. Isn't there a way to do that with node-glob?\n. On 08/04/2016 01:40 AM, isaacs wrote:\nYou can take a look at how fstream-ignore does it. That's what npm \nuses for .npmignore files. https://github.com/npm/fstream-ignore\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub \nhttps://github.com/isaacs/node-glob/issues/278#issuecomment-237408556, \nor mute the thread \nhttps://github.com/notifications/unsubscribe-auth/AA9LxIf7fqV4wdRuBi0GP33H2moRfBMWks5qcSbWgaJpZM4JZ6hM.\nThanks for the tip. I couldn't find something like that the last time I \nsearched.\n. \n",
    "Akkuma": "No, I don't want to use Globby, because my implementation knows that the first match is the only possible match and I don't need to keep looking through each file.\n. No, I don't want to use Globby, because my implementation knows that the first match is the only possible match and I don't need to keep looking through each file.\n. ",
    "blond": "\nCome to think of it, maybe folks would like to use graceful-fs, that would also be easy with something like the above in place.\n\n@erikkemperman there are reasons to use graceful-fs: #299 \n. > Come to think of it, maybe folks would like to use graceful-fs, that would also be easy with something like the above in place.\n@erikkemperman there are reasons to use graceful-fs: #299 \n. ",
    "robzolkos": "@aristidesfl just debugging the same issue.  Only started happening today in CI.\n. var set = g.minimatch.set is the line that seems to be the issue.  \nset ends up being []\n. @jeppeolesen mine was Codeship.   So weird.\n. Yes, mine is failing local dev env too.  I first noticed it failing in CI.\n. @vbence86 webpack\n. Builds are passing in CI now.  Didn't change anything.  God bless computers.  Will try locally.\n. @aristidesfl just debugging the same issue.  Only started happening today in CI.\n. var set = g.minimatch.set is the line that seems to be the issue.  \nset ends up being []\n. @jeppeolesen mine was Codeship.   So weird.\n. Yes, mine is failing local dev env too.  I first noticed it failing in CI.\n. @vbence86 webpack\n. Builds are passing in CI now.  Didn't change anything.  God bless computers.  Will try locally.\n. ",
    "franciscolourenco": "\npatern is /var/folders/b_/0n4t_6s17rj85tsxyncd3q6r0000gp/T/karma-69206038\nobject_ is undefined\n. - patern is /var/folders/b_/0n4t_6s17rj85tsxyncd3q6r0000gp/T/karma-69206038\nobject_ is undefined\n. \n",
    "eyala-stratoscale": "@robzolkos @aristidesfl  Seems to be a problem in minimatch itself since this package hasn't been updated in a year\n. Builds still fail for me. Anyone with any findings ? what about minimatch being updated 12 days ago ? \n. npm cache clean and reinstall worked.\nstill someone changed something somewhere... pretty terrifying no one is able to find out what. \n. @robzolkos @aristidesfl  Seems to be a problem in minimatch itself since this package hasn't been updated in a year\n. Builds still fail for me. Anyone with any findings ? what about minimatch being updated 12 days ago ? \n. npm cache clean and reinstall worked.\nstill someone changed something somewhere... pretty terrifying no one is able to find out what. \n. ",
    "mr-beerkiss": "We're also getting this error in our code.  Stack track is slight different.\nAs @robzolkos mentions the set array is empty.  \n```\n/my-code/node_modules/rimraf/node_modules/glob/glob.js:110\n    for (var j = 0; j < set[0].length; j++) {\n                              ^\nTypeError: Cannot read property 'length' of undefined\n    at Function.glob.hasMagic (/my-code/node_modules/rimraf/node_modules/glob/glob.js:110:31)\n    at rimraf (/my-code/node_modules/rimraf/rimraf.js:64:36)\n    at ExecBuffer.cleanup (/my-code/node_modules/exec-buffer/index.js:126:2)\n    at ExecBuffer. (/my-code/node_modules/exec-buffer/index.js:103:10)\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:380:3)\n```\n. We're not running in CI at all and the error is occurring in the local dev environment.  Issue seems limited to *nix though as it is not happening in Windows.\n. Seem to have narrowed it down to a concurrency issue between webpack and imagemin.  When I run them separately they both work but when I try run them in parallel with gulp I get the error.\n. We're also getting this error in our code.  Stack track is slight different.\nAs @robzolkos mentions the set array is empty.  \n```\n/my-code/node_modules/rimraf/node_modules/glob/glob.js:110\n    for (var j = 0; j < set[0].length; j++) {\n                              ^\nTypeError: Cannot read property 'length' of undefined\n    at Function.glob.hasMagic (/my-code/node_modules/rimraf/node_modules/glob/glob.js:110:31)\n    at rimraf (/my-code/node_modules/rimraf/rimraf.js:64:36)\n    at ExecBuffer.cleanup (/my-code/node_modules/exec-buffer/index.js:126:2)\n    at ExecBuffer. (/my-code/node_modules/exec-buffer/index.js:103:10)\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:380:3)\n```\n. We're not running in CI at all and the error is occurring in the local dev environment.  Issue seems limited to *nix though as it is not happening in Windows.\n. Seem to have narrowed it down to a concurrency issue between webpack and imagemin.  When I run them separately they both work but when I try run them in parallel with gulp I get the error.\n. ",
    "jeppeolesen": "@robzolkos Is it Travis CI you're struggling with? I've been trying to figure out a similar bug for a few hours on there, and it just started passing now, without any changes.\n. @robzolkos Is it Travis CI you're struggling with? I've been trying to figure out a similar bug for a few hours on there, and it just started passing now, without any changes.\n. ",
    "vbence86": "@robzolkos Are you using webpack or imagemin?\n. The issue magically disappeared after we'd run npm install again (for the umpteen times). \n. Can you try to devalidate your local npm cache and then run npm install again?\n. @robzolkos Are you using webpack or imagemin?\n. The issue magically disappeared after we'd run npm install again (for the umpteen times). \n. Can you try to devalidate your local npm cache and then run npm install again?\n. ",
    "phillipj": "Also started seeing this as of today, in an inhouse Jenkins setup. Also using webpack, no imagemin involved tho as mentioned above.\n. > Builds still fail for me. Anyone with any findings ? what about minimatch being updated 12 days ago ?\nStill failing here as well. Tried to force using the previous minimatch version (3.0.2) by using a shrinkwrap, still fails :(\n. As mentioned in https://github.com/sindresorhus/del/issues/58#issuecomment-241606403 it seemed the issue was in math-expression-evaluator, and fixed in https://github.com/redhivesoftware/math-expression-evaluator/pull/2.\nIn my setup, math-expression-evaluator got installed as a nested dependency of the webpack css-loader. Ensuring v1.2.13 of math-expression-evaluator got installed fixed my builds :fireworks:\n. Also started seeing this as of today, in an inhouse Jenkins setup. Also using webpack, no imagemin involved tho as mentioned above.\n. > Builds still fail for me. Anyone with any findings ? what about minimatch being updated 12 days ago ?\nStill failing here as well. Tried to force using the previous minimatch version (3.0.2) by using a shrinkwrap, still fails :(\n. As mentioned in https://github.com/sindresorhus/del/issues/58#issuecomment-241606403 it seemed the issue was in math-expression-evaluator, and fixed in https://github.com/redhivesoftware/math-expression-evaluator/pull/2.\nIn my setup, math-expression-evaluator got installed as a nested dependency of the webpack css-loader. Ensuring v1.2.13 of math-expression-evaluator got installed fixed my builds :fireworks:\n. ",
    "hamishtaplin": "I'm getting this too in Travis but unable to recreate locally, although my colleague can. Which is pretty weird, frankly.\n[13:14:57] Requiring external module babel-register\n[13:14:59] Using gulpfile ~/my_code/gulpfile.babel.js\n[13:14:59] Starting 'clean:dist'...\n[13:14:59] 'clean:dist' errored after 4.77 ms\n[13:14:59] TypeError: Cannot read property 'length' of undefined\n   at Function.glob.hasMagic (my_code/node_modules/rimraf/node_modules/glob/glob.js:106:29)\n   at Function.rimrafSync [as sync] (my_code/node_modules/rimraf/rimraf.js:272:36)\n   at my_code/node_modules/del/index.js:74:10\n   at Array.forEach (native)\n   at Function.module.exports.sync (my_code/node_modules/del/index.js:67:30)\n   at Gulp.<anonymous> (gulpfile.babel.js:40:7)\n   at module.exports (my_code/node_modules/orchestrator/lib/runTask.js:34:7)\n   at Gulp.Orchestrator._runTask (my_code/node_modules/orchestrator/index.js:273:3)\n   at Gulp.Orchestrator._runStep (my_code/node_modules/orchestrator/index.js:214:10)\n   at Gulp.Orchestrator.start (my_code/node_modules/orchestrator/index.js:134:8)\n   at /usr/local/lib/node_modules/gulp-cli/lib/versioned/^3.7.0/index.js:46:20\n   at nextTickCallbackWith0Args (node.js:452:9)\n   at process._tickCallback (node.js:381:13)\n   at Function.Module.runMain (module.js:449:11)\n   at startup (node.js:139:18)\n   at node.js:999:3\n. I'm getting this too in Travis but unable to recreate locally, although my colleague can. Which is pretty weird, frankly.\n[13:14:57] Requiring external module babel-register\n[13:14:59] Using gulpfile ~/my_code/gulpfile.babel.js\n[13:14:59] Starting 'clean:dist'...\n[13:14:59] 'clean:dist' errored after 4.77 ms\n[13:14:59] TypeError: Cannot read property 'length' of undefined\n   at Function.glob.hasMagic (my_code/node_modules/rimraf/node_modules/glob/glob.js:106:29)\n   at Function.rimrafSync [as sync] (my_code/node_modules/rimraf/rimraf.js:272:36)\n   at my_code/node_modules/del/index.js:74:10\n   at Array.forEach (native)\n   at Function.module.exports.sync (my_code/node_modules/del/index.js:67:30)\n   at Gulp.<anonymous> (gulpfile.babel.js:40:7)\n   at module.exports (my_code/node_modules/orchestrator/lib/runTask.js:34:7)\n   at Gulp.Orchestrator._runTask (my_code/node_modules/orchestrator/index.js:273:3)\n   at Gulp.Orchestrator._runStep (my_code/node_modules/orchestrator/index.js:214:10)\n   at Gulp.Orchestrator.start (my_code/node_modules/orchestrator/index.js:134:8)\n   at /usr/local/lib/node_modules/gulp-cli/lib/versioned/^3.7.0/index.js:46:20\n   at nextTickCallbackWith0Args (node.js:452:9)\n   at process._tickCallback (node.js:381:13)\n   at Function.Module.runMain (module.js:449:11)\n   at startup (node.js:139:18)\n   at node.js:999:3\n. ",
    "kociolekt": "Since this commit\nmaybe version 2.0.10 is working?\n. rm -rf node_modules/\nnpm cache clean\nworked for me\ndidn't changed anything else\n. Since this commit\nmaybe version 2.0.10 is working?\n. rm -rf node_modules/\nnpm cache clean\nworked for me\ndidn't changed anything else\n. ",
    "helit": "Had the same issue, resolved itself after the third time running my deployscript in Envoyer. Still clueless why this happened...\nCommands run in Envoyer:\ncd {{ release }}\nnpm install\nnpm run production\nError Message:\n/releases/20160822100143/node_modules/glob/glob.js:106\n    for (var j = 0; j < set[0].length; j++) {\n                              ^\nTypeError: Cannot read property 'length' of undefined\nFound this closed issue as well adressering this: https://github.com/isaacs/node-glob/issues/152\n. Had the same issue, resolved itself after the third time running my deployscript in Envoyer. Still clueless why this happened...\nCommands run in Envoyer:\ncd {{ release }}\nnpm install\nnpm run production\nError Message:\n/releases/20160822100143/node_modules/glob/glob.js:106\n    for (var j = 0; j < set[0].length; j++) {\n                              ^\nTypeError: Cannot read property 'length' of undefined\nFound this closed issue as well adressering this: https://github.com/isaacs/node-glob/issues/152\n. ",
    "oyvindeh": "Also seems to happen using the current latest official node docker images (Node 6.4, both regular and slim), but not when using the latest NodeSource docker image (Node 6.3 on Wheezy).\n. @Luftzig I think I found some image that solved my initial problem and where this was not an issue.. Also seems to happen using the current latest official node docker images (Node 6.4, both regular and slim), but not when using the latest NodeSource docker image (Node 6.3 on Wheezy).\n. @Luftzig I think I found some image that solved my initial problem and where this was not an issue.. ",
    "Luftzig": "@oyvindeh have you managed to work around the issue? I have the same problem and I'm quite clueless.. @oyvindeh have you managed to work around the issue? I have the same problem and I'm quite clueless.. ",
    "spemmons": "i also am having the problem... in my case there seems to be a locked TMP file in a directory under the scan that is inaccessible... perhaps it is being treated like a directory? my pattern is /* so it is recursive. since EPERM means the operation is \"not permitted\" why not just say \"oh, well\" and skip to the next item? why fail?. i created a fork and modified the sync.js to treat EPERM errors the same as ENOENT and was able to continue successfully... this would seem to be the same situation (in my case) a trying to do a recursive list of files where you don't have permission for some nested subdirectories... perhaps one could argue that handling for this could be based on an option, but i'm not sure that's really necessary... is this an active project that i could submit a pull request to? it unfortunately looks pretty stale.... It's not ideal, but apparently this repository is no longer being maintained, so i have published another NPM module qiot-glob that has this fix. Cheers!. i also am having the problem... in my case there seems to be a locked TMP file in a directory under the scan that is inaccessible... perhaps it is being treated like a directory? my pattern is /* so it is recursive. since EPERM means the operation is \"not permitted\" why not just say \"oh, well\" and skip to the next item? why fail?. i created a fork and modified the sync.js to treat EPERM errors the same as ENOENT and was able to continue successfully... this would seem to be the same situation (in my case) a trying to do a recursive list of files where you don't have permission for some nested subdirectories... perhaps one could argue that handling for this could be based on an option, but i'm not sure that's really necessary... is this an active project that i could submit a pull request to? it unfortunately looks pretty stale.... It's not ideal, but apparently this repository is no longer being maintained, so i have published another NPM module qiot-glob that has this fix. Cheers!. ",
    "jfstephe": "I've got the same issue running an Ubuntu docker image on windows 10 (VirtualBox host). @oyvindeh - what image was it that fixed this for you? @isaacs, is it worth @spemmons raising that PR?. @spemmons thanks!. I've got the same issue running an Ubuntu docker image on windows 10 (VirtualBox host). @oyvindeh - what image was it that fixed this for you? @isaacs, is it worth @spemmons raising that PR?. @spemmons thanks!. ",
    "megamindbrian": "Is there a \"continue on error\"?  strict: false worked for me.\n. @meatballhat Can travis run tests suites against multiple platforms?\n. Is there a \"continue on error\"?  strict: false worked for me.\n. @meatballhat Can travis run tests suites against multiple platforms?\n. ",
    "tx4x": "yeah, realized this. sorry & thanks\n. yup, it is because currently i am forced to set root and add it to the result which can be quite error-prone\n. yeah, realized this. sorry & thanks\n. yup, it is because currently i am forced to set root and add it to the result which can be quite error-prone\n. ",
    "nigurr": "This also fails if I am giving pattern like\nC:\\\\Test\\\\Test.txt and some C:\\\\Test\\\\Test*.txt and I am executing from different drive.\nI debugged and found that https://github.com/isaacs/node-glob/blob/master/sync.js#L95 this looks problematic. It passes wrong prefix and there by searching on the wrong folder\n. This also fails if I am giving pattern like\nC:\\\\Test\\\\Test.txt and some C:\\\\Test\\\\Test*.txt and I am executing from different drive.\nI debugged and found that https://github.com/isaacs/node-glob/blob/master/sync.js#L95 this looks problematic. It passes wrong prefix and there by searching on the wrong folder\n. ",
    "sdetweil": "thanks.. \n. if I put the glob object on a list to process later, is there a way to \n\nfind the current glob object from the callback\n\ndetermine if the glob is still active (callback not yet done), from a timer type process working to close the items on the list.. . thanks.. \n. if I put the glob object on a list to process later, is there a way to \n\n\nfind the current glob object from the callback\n\ndetermine if the glob is still active (callback not yet done), from a timer type process working to close the items on the list.. . \n",
    "pajtai": "Okay, got it, will leave answer here in case anyone trying to do something similar:\nglob(\"**/package.json\", {ignore: ['**/node_modules/**']}, (err, files) => {\n        console.log('globe error', err);\n        console.log('files', files);\n});\n. Okay, got it, will leave answer here in case anyone trying to do something similar:\nglob(\"**/package.json\", {ignore: ['**/node_modules/**']}, (err, files) => {\n        console.log('globe error', err);\n        console.log('files', files);\n});\n. ",
    "raygervais": "With this fix, I believe many of the PRs of recent will pass the tests now. Hopefully you get merged sooner than later. \n. @shinnn, thank you for the catch. I'm impressed that my editor did not warn me about it. Regardless, fixed. . @shinnn, when you get a moment could you look over the PR again? It would be advantageous to your module to have keywords which help make the package discoverable. . With this fix, I believe many of the PRs of recent will pass the tests now. Hopefully you get merged sooner than later. \n. @shinnn, thank you for the catch. I'm impressed that my editor did not warn me about it. Regardless, fixed. . @shinnn, when you get a moment could you look over the PR again? It would be advantageous to your module to have keywords which help make the package discoverable. . ",
    "beverts312": "I believe this is the same issue I am experiencing. To clearify the problem a bit here is what I am seeing.\nWhen I have:\nglob.sync(someDir + '/**/*', { dot: true, ignore:  someDir + '/.vscode/launch.json' })\nThe file launch.json is not ignored, however if I rename it to .launch.json and run:\nglob.sync(someDir + '/**/*', { dot: true, ignore:  someDir + '/.vscode/.launch.json' }) \nThe file .launch.json is properly ignored (unfortunately thats not what I want to name my file).  \nI see in the docs:\n\ndot Include .dot files in normal matches and globstar matches. Note that an explicit dot in a portion of the pattern will always match dot files.  \n\nIs the Note section of that describing that this is the desired behavior? If not I will take a look at the code base and see if I can identify the issue. I believe this is the same issue I am experiencing. To clearify the problem a bit here is what I am seeing.\nWhen I have:\nglob.sync(someDir + '/**/*', { dot: true, ignore:  someDir + '/.vscode/launch.json' })\nThe file launch.json is not ignored, however if I rename it to .launch.json and run:\nglob.sync(someDir + '/**/*', { dot: true, ignore:  someDir + '/.vscode/.launch.json' }) \nThe file .launch.json is properly ignored (unfortunately thats not what I want to name my file).  \nI see in the docs:\n\ndot Include .dot files in normal matches and globstar matches. Note that an explicit dot in a portion of the pattern will always match dot files.  \n\nIs the Note section of that describing that this is the desired behavior? If not I will take a look at the code base and see if I can identify the issue. ",
    "jthegedus": "https://github.com/prettier/prettier/ uses this package and I keep running into this issue https://github.com/prettier/prettier/issues/2110. Are there any plans to support this? I'm set in my was of prefixing dirs with ./ is all :stuck_out_tongue: \n. https://github.com/prettier/prettier/ uses this package and I keep running into this issue https://github.com/prettier/prettier/issues/2110. Are there any plans to support this? I'm set in my was of prefixing dirs with ./ is all :stuck_out_tongue: \n. ",
    "Chiru13": "After doing some research I found out that I will need to give Node.JS the permission but I cannot find tutorials on how to do this (but I am not 100% sure if this is the cause of the problem either), I tried giving CMD and Git Bash Admin permissions this doesn't solve the problem tho.. After doing some research I found out that I will need to give Node.JS the permission but I cannot find tutorials on how to do this (but I am not 100% sure if this is the cause of the problem either), I tried giving CMD and Git Bash Admin permissions this doesn't solve the problem tho.. ",
    "danelkhen": "+1\nIs there no option to 'try/catch' / ignore errors / skip errors in glob?. +1\nIs there no option to 'try/catch' / ignore errors / skip errors in glob?. ",
    "s0m3on3": "The same thing happens using nodir = true\n~~~javascript\ncreateDirectories(5, 1, hello);\nconst g = new glob.Glob(path.join(\"hello\", \"*\", \"\"), { root: __dirname, nodir: true });\n~~~\n~~~\nhello/0/0\nhello/0/1\nhello/0/2\nhello/0/3\nhello/0/4\nhello/1/0\nhello/1/1\nhello/1/2\nhello/1/3\nhello/1/4\nhello/2/0\nhello/2/1\nhello/2/2\nhello/2/3\nhello/2/4\nhello/3/0\npause 16\nend 16\nhello/3/1\nhello/3/2\nhello/3/3\nhello/3/4\nhello/4/0\nhello/4/1\nhello/4/2\nhello/4/3\nhello/4/4\n~~~. The same thing happens using nodir = true\n~~~javascript\ncreateDirectories(5, 1, hello);\nconst g = new glob.Glob(path.join(\"hello\", \"*\", \"\"), { root: __dirname, nodir: true });\n~~~\n~~~\nhello/0/0\nhello/0/1\nhello/0/2\nhello/0/3\nhello/0/4\nhello/1/0\nhello/1/1\nhello/1/2\nhello/1/3\nhello/1/4\nhello/2/0\nhello/2/1\nhello/2/2\nhello/2/3\nhello/2/4\nhello/3/0\npause 16\nend 16\nhello/3/1\nhello/3/2\nhello/3/3\nhello/3/4\nhello/4/0\nhello/4/1\nhello/4/2\nhello/4/3\nhello/4/4\n~~~. ",
    "nruhe": "@isaacs What I'm hoping for is a way to use it to generate my file lists so I can pipe them to other commands inside of my package.json npm run scripts. Doing that here would require adding the bin property inside of package.json and writing an additional interface file, just like how ESLint does it (check their package.json and bin folder). Then it would be possible to do things like: scripts: { my_npm_run_script: 'glob \"**/*.js\" | a_command' }, or use it directly on the command line if it's installed globally by NPM. Thoughts?\nI'd be willing to take this on over the weekend as I'm going to need it either way.\n\nEdit: Well, now I feel kind of silly that I just tried explaining how to do it to one of the core founders of NPM. XD \nIf you have another recommendation rather than adding command support to do what I want to do, I'm all ears. My alternative is to just write a wrapper library if you don't want to support it officially here.. @isaacs What I'm hoping for is a way to use it to generate my file lists so I can pipe them to other commands inside of my package.json npm run scripts. Doing that here would require adding the bin property inside of package.json and writing an additional interface file, just like how ESLint does it (check their package.json and bin folder). Then it would be possible to do things like: scripts: { my_npm_run_script: 'glob \"**/*.js\" | a_command' }, or use it directly on the command line if it's installed globally by NPM. Thoughts?\nI'd be willing to take this on over the weekend as I'm going to need it either way.\n\nEdit: Well, now I feel kind of silly that I just tried explaining how to do it to one of the core founders of NPM. XD \nIf you have another recommendation rather than adding command support to do what I want to do, I'm all ears. My alternative is to just write a wrapper library if you don't want to support it officially here.. ",
    "igalic": "so, i just hit this exact wall \u2014 trying to run scripts thru npm on different (CI) platforms, and, na\u00efvely assumed that:\njson\n  \"scripts\": {\n    \"mdlint\": \"markdownlint *.md apps/*/*.md\"\n  }\nwould already resolve correctly (for windows).\nbut apparently our wrapper needs a wrapper \ud83d\ude05 . so, i just hit this exact wall \u2014 trying to run scripts thru npm on different (CI) platforms, and, na\u00efvely assumed that:\njson\n  \"scripts\": {\n    \"mdlint\": \"markdownlint *.md apps/*/*.md\"\n  }\nwould already resolve correctly (for windows).\nbut apparently our wrapper needs a wrapper \ud83d\ude05 . ",
    "JoshuaKGoldberg": "Cool, thanks for the fast response! It's a dev-dependency and I must have forgotten to -D. \ud83d\ude04 . Cool, thanks for the fast response! It's a dev-dependency and I must have forgotten to -D. \ud83d\ude04 . ",
    "json2d": "This seems to happen sometimes with certain configurations and directory structures.  I'm currently working on a PR with a test case for this bug, will post soon.. Standard regex patterns are not supported currently, so the quantifiers you're using (e.g. n+, n*, n{3,5}) will not work as you expected.\nHowever, there is support for the range pattern [...], which works similar to the one in regex.\nTo match your numeric file extensions, you can use: *.[0-9][0-9][0-9]. Duplicate of #303, closing. This seems to happen sometimes with certain configurations and directory structures.  I'm currently working on a PR with a test case for this bug, will post soon.. Standard regex patterns are not supported currently, so the quantifiers you're using (e.g. n+, n*, n{3,5}) will not work as you expected.\nHowever, there is support for the range pattern [...], which works similar to the one in regex.\nTo match your numeric file extensions, you can use: *.[0-9][0-9][0-9]. Duplicate of #303, closing. ",
    "cscalfani": "There is an option absolute that should be defaulted to false but it doesn't work.. There is an option absolute that should be defaulted to false but it doesn't work.. ",
    "motss": "Should have fixed. Should have fixed. ",
    "vjpr": "('**/node_modules, {ignore: '**/node_modules/**/*'}\nThe ignore doesn't prevent it from searching inside node_modules dirs though. You can check this by passing in cache and reading it afterwards.. This is also discussed here: https://github.com/isaacs/node-glob/issues/213#issuecomment-126047563. @isaacs After a lot of testing It seems there is no way to achieve this.\n('**/node_modules, {ignore: '**/node_modules/**/*'}) - returns node_modules folders (what we want), but ends up searching every file in the tree because the ignore pattern doesn't finish in **.\n('**/node_modules, {ignore: '**/node_modules/**'}) - doesn't return any node_modules dirs, but also doesn't search inside them (what we want).\nI feel like the addition of an option to not match the parent dir of a globstar expression would help solve this.\nUse case: Excluding node_modules folders from indexing in a text editor when using a mono-repo or a repo with many projects inside it.. ('**/node_modules, {ignore: '**/node_modules/*/**'}) comes a bit closer.\nWill search all node_modules and their direct children, but not further nested node_modules.\nBut if you have 100s of packages in your node_modules in multiple projects you are going to see a huge slow down.. @whitecolor Its a shame though because you can get very, very close to a simple elegant glob solution, but then this limitation makes it unfeasible and you have to write your own.\nI ended up writing my own recursive directory walker. But I am trying to integrate with chokidar for file watching, which also uses globbing. So its a pain that globs don't work.\nIn both glob and chokidar, there should be two ignore options, one for searching, and one for returning results.. ('**/node_modules, {ignore: '**/node_modules/**/*'}\nThe ignore doesn't prevent it from searching inside node_modules dirs though. You can check this by passing in cache and reading it afterwards.. This is also discussed here: https://github.com/isaacs/node-glob/issues/213#issuecomment-126047563. @isaacs After a lot of testing It seems there is no way to achieve this.\n('**/node_modules, {ignore: '**/node_modules/**/*'}) - returns node_modules folders (what we want), but ends up searching every file in the tree because the ignore pattern doesn't finish in **.\n('**/node_modules, {ignore: '**/node_modules/**'}) - doesn't return any node_modules dirs, but also doesn't search inside them (what we want).\nI feel like the addition of an option to not match the parent dir of a globstar expression would help solve this.\nUse case: Excluding node_modules folders from indexing in a text editor when using a mono-repo or a repo with many projects inside it.. ('**/node_modules, {ignore: '**/node_modules/*/**'}) comes a bit closer.\nWill search all node_modules and their direct children, but not further nested node_modules.\nBut if you have 100s of packages in your node_modules in multiple projects you are going to see a huge slow down.. @whitecolor Its a shame though because you can get very, very close to a simple elegant glob solution, but then this limitation makes it unfeasible and you have to write your own.\nI ended up writing my own recursive directory walker. But I am trying to integrate with chokidar for file watching, which also uses globbing. So its a pain that globs don't work.\nIn both glob and chokidar, there should be two ignore options, one for searching, and one for returning results.. ",
    "whitecolor": "Yes I see that glob is not actually right solution for this case, actually I had some other problems with glob returning strange results (at least on alpine-node container), so I use it with caution =). Yes I see that glob is not actually right solution for this case, actually I had some other problems with glob returning strange results (at least on alpine-node container), so I use it with caution =). ",
    "ngyikp": "Fixed at https://github.com/isaacs/node-glob/commit/057569cbcde510173a79b2d668e808023c09bb01. Fixed at https://github.com/isaacs/node-glob/commit/057569cbcde510173a79b2d668e808023c09bb01. ",
    "erayalakese": "This pull request is important. Because : https://snyk.io/vuln/npm:minimatch:20160620. This pull request is important. Because : https://snyk.io/vuln/npm:minimatch:20160620. ",
    "gr2m": "also tested with Node v6.9.5 and npm v5.0.2, same error. deleting the ~/.npm folder fixed the problem for me. npm cache verify seems to be the proper way to fix this: https://github.com/npm/npm/issues/16677#issuecomment-305357667. also tested with Node v6.9.5 and npm v5.0.2, same error. deleting the ~/.npm folder fixed the problem for me. npm cache verify seems to be the proper way to fix this: https://github.com/npm/npm/issues/16677#issuecomment-305357667. ",
    "zyj1314": "no  you are not distrion to say what this is ??. no  you are not distrion to say what this is ??. ",
    "qbolec": "I assume, that you want to know what distribution I use:\n$ uname -a\nDarwin Jakubs-MacBook-Pro.local 16.6.0 Darwin Kernel Version 16.6.0: Fri Apr 14 16:21:16 PDT 2017; root:xnu-3789.60.24~6/RELEASE_X86_64 x86_64. I assume, that you want to know what distribution I use:\n$ uname -a\nDarwin Jakubs-MacBook-Pro.local 16.6.0 Darwin Kernel Version 16.6.0: Fri Apr 14 16:21:16 PDT 2017; root:xnu-3789.60.24~6/RELEASE_X86_64 x86_64. ",
    "charmander": "\nshouldn't nodir expand all directories to their contents\n\nThat\u2019s what it does.\njs\nglob(\"**/*\", {nodir: true}, (error, files) => {\n    console.log(files);\n});\n[ 'node_modules/balanced-match/index.js',\n  'node_modules/balanced-match/LICENSE.md',\n  'node_modules/balanced-match/package.json',\n  'node_modules/balanced-match/README.md',\n  'node_modules/brace-expansion/index.js',\n  'node_modules/brace-expansion/package.json',\n  'node_modules/brace-expansion/README.md',\n  'node_modules/concat-map/example/map.js',\n  'node_modules/concat-map/index.js',\n  'node_modules/concat-map/LICENSE',\n  'node_modules/concat-map/package.json',\n  'node_modules/concat-map/README.markdown',\n  'node_modules/concat-map/test/map.js',\n  'node_modules/fs.realpath/index.js',\n  'node_modules/fs.realpath/LICENSE',\n  'node_modules/fs.realpath/old.js',\n  'node_modules/fs.realpath/package.json',\n  'node_modules/fs.realpath/README.md',\n  'node_modules/glob/changelog.md',\n  'node_modules/glob/common.js',\n  'node_modules/glob/glob.js',\n  'node_modules/glob/LICENSE',\n  'node_modules/glob/package.json',\n  'node_modules/glob/README.md',\n  'node_modules/glob/sync.js',\n  'node_modules/inflight/inflight.js',\n  'node_modules/inflight/LICENSE',\n  'node_modules/inflight/package.json',\n  'node_modules/inflight/README.md',\n  'node_modules/inherits/inherits_browser.js',\n  'node_modules/inherits/inherits.js',\n  'node_modules/inherits/LICENSE',\n  'node_modules/inherits/package.json',\n  'node_modules/inherits/README.md',\n  'node_modules/minimatch/LICENSE',\n  'node_modules/minimatch/minimatch.js',\n  'node_modules/minimatch/package.json',\n  'node_modules/minimatch/README.md',\n  'node_modules/once/LICENSE',\n  'node_modules/once/once.js',\n  'node_modules/once/package.json',\n  'node_modules/once/README.md',\n  'node_modules/path-is-absolute/index.js',\n  'node_modules/path-is-absolute/license',\n  'node_modules/path-is-absolute/package.json',\n  'node_modules/path-is-absolute/readme.md',\n  'node_modules/wrappy/LICENSE',\n  'node_modules/wrappy/package.json',\n  'node_modules/wrappy/README.md',\n  'node_modules/wrappy/wrappy.js' ]. > shouldn't nodir expand all directories to their contents\nThat\u2019s what it does.\njs\nglob(\"**/*\", {nodir: true}, (error, files) => {\n    console.log(files);\n});\n[ 'node_modules/balanced-match/index.js',\n  'node_modules/balanced-match/LICENSE.md',\n  'node_modules/balanced-match/package.json',\n  'node_modules/balanced-match/README.md',\n  'node_modules/brace-expansion/index.js',\n  'node_modules/brace-expansion/package.json',\n  'node_modules/brace-expansion/README.md',\n  'node_modules/concat-map/example/map.js',\n  'node_modules/concat-map/index.js',\n  'node_modules/concat-map/LICENSE',\n  'node_modules/concat-map/package.json',\n  'node_modules/concat-map/README.markdown',\n  'node_modules/concat-map/test/map.js',\n  'node_modules/fs.realpath/index.js',\n  'node_modules/fs.realpath/LICENSE',\n  'node_modules/fs.realpath/old.js',\n  'node_modules/fs.realpath/package.json',\n  'node_modules/fs.realpath/README.md',\n  'node_modules/glob/changelog.md',\n  'node_modules/glob/common.js',\n  'node_modules/glob/glob.js',\n  'node_modules/glob/LICENSE',\n  'node_modules/glob/package.json',\n  'node_modules/glob/README.md',\n  'node_modules/glob/sync.js',\n  'node_modules/inflight/inflight.js',\n  'node_modules/inflight/LICENSE',\n  'node_modules/inflight/package.json',\n  'node_modules/inflight/README.md',\n  'node_modules/inherits/inherits_browser.js',\n  'node_modules/inherits/inherits.js',\n  'node_modules/inherits/LICENSE',\n  'node_modules/inherits/package.json',\n  'node_modules/inherits/README.md',\n  'node_modules/minimatch/LICENSE',\n  'node_modules/minimatch/minimatch.js',\n  'node_modules/minimatch/package.json',\n  'node_modules/minimatch/README.md',\n  'node_modules/once/LICENSE',\n  'node_modules/once/once.js',\n  'node_modules/once/package.json',\n  'node_modules/once/README.md',\n  'node_modules/path-is-absolute/index.js',\n  'node_modules/path-is-absolute/license',\n  'node_modules/path-is-absolute/package.json',\n  'node_modules/path-is-absolute/readme.md',\n  'node_modules/wrappy/LICENSE',\n  'node_modules/wrappy/package.json',\n  'node_modules/wrappy/README.md',\n  'node_modules/wrappy/wrappy.js' ]. ",
    "leram84": "Just to add on to this, This does not only affect linked directories, I have local files and directories in my root that are not showing up in the folder tree as well. Is this a windows only thing? I don't understand how people are working around this issue. If there is a better way to manage directories, please lmk, im totally willing to rework my library structure around the requirement here if there's something i can do beyond waiting for a fix. Thanks!. Just to add on to this, This does not only affect linked directories, I have local files and directories in my root that are not showing up in the folder tree as well. Is this a windows only thing? I don't understand how people are working around this issue. If there is a better way to manage directories, please lmk, im totally willing to rework my library structure around the requirement here if there's something i can do beyond waiting for a fix. Thanks!. ",
    "narayananramu": "Hi,\nI faced the same error when I was playing with Vueify + Browserify and Gulp, here was my workaround\nInstead of \nvar glob = require('node-glob');\nI used glob\nvar glob = require('glob');\nTry this\nnew glob('/my/dir/**/*.js', (err, results) => console.log(results))\nThis workaround worked for me on macos 10.12.6 and node v8.5.0 . Hi,\nI faced the same error when I was playing with Vueify + Browserify and Gulp, here was my workaround\nInstead of \nvar glob = require('node-glob');\nI used glob\nvar glob = require('glob');\nTry this\nnew glob('/my/dir/**/*.js', (err, results) => console.log(results))\nThis workaround worked for me on macos 10.12.6 and node v8.5.0 . ",
    "mitchhentges": "I didn't add an additional test for this because:\n* npm run test-regen is failing locally\n* Tests are failing in CI\nSo, it sounds like there's existing test issues. I didn't add an additional test for this because:\n* npm run test-regen is failing locally\n* Tests are failing in CI\nSo, it sounds like there's existing test issues. "
}