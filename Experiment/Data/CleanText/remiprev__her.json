{
    "remiprev": "Thank you for this pull request \u2014 but I don't think this kind of functionality belongs in Her. Ordering, filtering and stuff like that have to be handled by the API, in order for all related things to keep working (pagination, namely).\nUsually, the API would support some sort of sorting mechanism through its requests, something like GET /users?sort_by=name&sort_order=DESC. The good news is that Her already supports that by passing additional querystring parameters to .all:\nruby\n@users = User.all(:sort_by => :name, :sort_order => :DESC)\nAs long as your API handles these parameters, the @users variable should now contain a collection of resources in the order you want.\n. Awesome pull request. I'll merge it in master, and add the same functionality for belongs_to (which should basically behave the same way as has_one) and push it.\nThanks Jeff!\n. You\u2019re welcome!\n. Cool, I didn't know you could do that.\nBut I think using middleware is necessary, because the user doesn\u2019t have access to the Fadaray object. Using request and response middleware, it can add application logic to Her, without touching the lower level code.\n. That\u2019s a good point actually. If I want Her users to be able to use Faraday at its full potential, the adapter should be publicly available. I\u2019ll look into it.\nThank you for your feedback Rick! Keep up the good work :smile:\n. FYI, I went with your way of inserting middleware into Her connections (see this section in README). It\u2019s much more simple and powerful to expose the builder object. Thanks again!\n. Hi Rafael,\nIs there a specific reason why you choose to use yajl/multi_json instead of json?\n. Fair enough, it\u2019s merged! :smile: Thanks!\n. You\u2019re right, thanks!\n. Done! See the examples directory.\n. Great pull request, thanks!\n. You\u2019re right, builder.use does not work for that case. I\u2019ll update the documentation. But I agree that builder.insert(0, MyAuthentication) is not pretty. However, I submitted this pull request for Faraday a few hours ago. We\u2019ll see how it will play.\nThe simplest solution would be for Her to not include any default middleware. When setting up Her::API, the user would have to include all the needed middleware:\nruby\nHer::API.setup :base_uri => \"https://api.example.com\" do |builder|\n  builder.use FaradayMiddle::OAuth\n  builder.use Her::Middleware::FirstLevelParseJSON\n  builder.use Faraday::Request::UrlEncoded\n  builder.use Faraday::Adapter::NetHttp\nend\nIt would require more work for developers, but it would give them more control. What do you think?\n. I decided to drop all default middleware and to let the user define the entire stack. I\u2019m closing the issue as the documentation is now accurate :) Thanks!\n. Cool, let me know when you have something working.\nAt first I thought it would be a pain to require the entire stack each time you need to initialize the API, but for the developer it\u2019s a one-time thing. The block is in config/initializers/her.rb or something similar and is never touched again.\n. I merged it and added a few examples in the specs. Thanks for the fix!\n. You\u2019re right, I should have been paying more attention to the branch. I\u2019ve rebased it against master and pushed it to feature-submodel-support. Could you guys check if everything is still making sense for you?\nI\u2019ve updated the specs since I have refactored a bunch of them since the pull request was created, and they still all pass.\nThanks a lot!\n/cc @tysontate @mcoms\n. I just merged the feature-submodel-support branch and pushed her-0.3.1 which now supports models in submodules.\nYay!\n. Thank you @tysontate for putting that together!\n. I just added support for Faraday\u2019s connection options in ec9699c421508a39e3d57a60eac4adf72e11dfb6.\nThis should be in her-0.2.6.\nThanks!\n. I merged it and changed the \"setter\" part of method missing so that if @data doesn\u2019t exist, we set its first item. Thanks!\n. I was able to add a non-passing example and fix it with code based on your diff \u2014 thank you!\n. Well that's actually a bit more complicated than I thought (since you can only interact with the session in a controller, but here\u2019s how I would do it. I haven\u2019t tested it in Rails though, it\u2019s just \n[redacted]\nSee https://github.com/remiprev/her#authentication for a better example\nHope that helps!\n. I\u2019m going to close this issue since it wasn\u2019t active in the last month. Hopefully you found a solution that fit your needs!\n. Indeed, this is not thread safe. A better solution would be to use Thread.current (or something like this) to store the current user, like the audited gem does.\n. @incorvia I added a thread-safe example in README.md. I\u2019m going to remove the non-thread-safe example above :)\n. There\u2019s a non documented feature in Her that removes any parameters matching /^_/. I added a new line in the main HTTP request wrapper that allows you to pass a custom _headers variable in all HTTP/ORM methods, like so:\nruby\nUser.all(:type => \"regular\", :_headers => { \"X-Page\" => 2 })\nThis will call GET /users?type=regular with a X-Page: 2 HTTP header. Is this something you\u2019d like to see in the library? I plan on adding it in 0.2.6.\nThanks for the request!\n. Unfortunately, there's currently no way for an instance of a model to access the response data, other than the actual resource data.\nCurrently, the parser middleware must return a hash with three keys (example), data, metadata and errors \u2014 but only the data one is used by the constructor (because of lines like these that are present in a few places).\nIn the meantime, you could create your own parser middleware (they're very simple, check out the default SecondLevelParseJSON and FirstLevelParseJSON) that store the value env[:headers][\"X-Total-Items\"] in a variable that you could access later from your model.\nHandling the metadata and errors keys is in the works though, I just have to come up with a backward compatible way of using them easily.\nThanks!\n. Alright, I'll look into it. Thank you for your help! :)\n. > Currently the default JSON parse middleware doesn't set the 'Accept' header in the request to 'application/json'. It comes out as '/' this was easy to change with small bit of middleware but it would be a nice to have as a default set by the parser.\nActually, I thought about it and this is the kind of thing that Faraday lets you do through middleware:\n``` ruby\nclass Foo < Faraday::Middleware\n  def call(env)\n    env[:request_headers][\"Accept\"] = \"application/json\"\n    @app.call(env)\n  end\nend\nHer::API.setup :url => \"https://api.example.com\" do |connection|\n  connection.use Foo\n  connection.use Faraday::Request::UrlEncoded\n  connection.use Her::Middleware::FirstLevelParseJSON\n  connection.use Faraday::Adapter::NetHttp\nend\n```\n. @jsmestad Have you looked at the OAuth example in the readme? That, in combination with something like this should solve your problem.\nHope that helps!\n. > If you are working with multiple users per request, this probably would not work sharing a single connection?\nYou can create a middleware that execute code to send a different token per request. This is what I did in this example. Each time Her makes a request, MyApp.current_user.token is checked and sent as an HTTP header if it\u2019s present.\nIf you\u2019re looking for a different connection per model, you can look into the uses_api class method, documented here.\n. I\u2019m going to close this issue since it had no development for the last months.\n. This is a useful method, thanks for adding it. I merged it in e8542c9078f47a255742a868eb3cbf0a7ec20fd9.\n. Merged in d9644e8b03c34aa128bbc5c913d32176a4e1a67c, thanks!\n. Hi Blake! This pull request looks great, but I was wondering if you could rebase it from master since a few things changed in lib/her/model/orm.rb since your commits. Sorry about the delay!\n. I rebased and merged it, thanks!\n. Thanks Blake! I merged it in 93816f7.\n. > Did some nasty things with class unloading to make this work.\nCan you share this particular solution? I just want to be sure of what you\u2019re talking about.\n. I\u2019m gonna close this issue now for lack of activity. If you guys want to submit a pull request for this feature, you\u2019re more than welcome!\n. You\u2019re on fire man, keep it going! :smile:\n. Good catch! Just merged it.\n. Neat-o! I added some tests and merge it. Thanks!\n. Nitfy! Merges as d1f443a46ba2cda01380fc476e2096ddd8cb3e7b.\n. You\u2019re right, blocks should be optional. Merged in b66110ca05f0af80e5f3dedd51acb880bbb6fd5b. Thanks!\n. That\u2019s great, thanks again! :)\n. Coolio! Merged as c1c2a2545057f0ef222b01535b7cf7e5eaa0d158.\n. > I would expect something like Group.find(15).put(:approve) but that itsn't working. Could someone indicate if is possible?\nUnfortunately, Her is not as flexible as ActiveModel (it makes requests right away) so .find will always return a resource and is not (yet) chainable.\nYou should be able to achieve what you want with Group.put(\"15/approve\"). Hope that helps!\n. There was an error in the README \u2014 the middleware #initialize method should be\u00a0:\nruby\ndef initialize(app, options={})\n  @app = app\n  @options = options\nend\nand not\nruby\ndef initialize(app, options={})\n  @options = options\nend\nSo the @app variable is defined. Sorry about that!\n. Just pushed 711bde3 which fixes this issue! Thanks for the suggestion, and sorry for the delay\u2026\n. I merged the branch into master. Tests pass, but could you guys check if everything is still working in your applications? Thanks!\n. > fwiw, I've been running this code in production for a month or so, no problems.\nSweet. Just curious, can you tell me on what app/project you\u2019re using Her? :smile:\n. Wow, this is awesome. So glad to hear other people are using it for real :grinning:\n. You\u2019re right, thanks for the fix!\n. This is a good suggestion, I\u2019ll add it to my todo list. Thank you!\n. I\u2019m gonna close this issue now and make pull request #86 the \u201cofficial\u201d issue for custom primary keys.\n. No, Her is not relying on this functionality. Parameters are just stored in Her::API and I was passing them to Faraday.new because it contains the url required parameter.\nI just pushed ca548f1470c1254298a70f75d16d40fb91d77ede to make sure Her will run fine in future Faraday versions (at least in legacy mode for now). I\u2019ll look into the new callbacks/middleware structure later.\nThanks for the notice!\n. Yeah, it doesn\u2019t work because this \"standard\" Rails controller (my guess, based from the log output) expects params[:user] to contain the user data (eg. params[:user][:full_name]). In your backend, you currently seem to have something like this:\nruby\ndef create\n  @user = User.create(params[:user])\nend\nI suggest you modify it with something like:\n``` ruby\ndef create\n  @user = User.create(user_params)\nend\nprotected\ndef user_params\n  params.slice(:full_name, :email, :foo, :bar)\nend\n```\nThis will make sure only allowed attributes are used and there won\u2019t be a need to wrap the POST data in a user key.\nHope that helps!\n. > Nice to see you supporting Strong Parameters already. :-)\nWell, it doesn\u2019t really have anything to with Her :)\n. @luxflux Yes, sorry, I haven\u2019t had the time to check it yet. I too think inverse_of would be a better option name. I\u2019ll merge it after the change :smile: Thanks!\n. Merge in 67a0684ad9f093a13fea2c58b8a511d846b04ee2, sorry about the delay!\n. You can do that in a response middleware (extending Faraday::Response::Middleware). You can check this section for an example of how to handle the env variable.\n. Merged in d17d3d0da7a7461f5a8ccafa1d5339036e7d5eb9, sorry about the delay!\n. It\u2019s just some non-Rails specific sample code :) The X-API-Token is an arbitrary value. If you want to send the specified header, you can use this:\nruby\ndef call(env)\n  env[:request_headers][\"HTTP_AUTHORIZATION\"] = \"Token: token=\\\"#{@options[:token]}\\\"\" if @options.include?(:token)\n  @app.call(env)\nend\nIt should work!\n. I\u2019m not sure what you mean by that. Do you have any example of that kind of data?\n. Sorry, I completely forgot about this issue. If you want to create a new middleware that handles application/hal+json response I would gladly add it!\n. I\u2019m going to close this issue since there\u2019s no more activity here.\n. It is currently impossible to know, in a middleware, from which model the request was sent. This is something that is on my todo list for Her, since that option looks like a popular one in Rails.\n. Finally got the time to do this feature! You can read the documentation here. It should be part of the next release.\n. @ceicke I have not been able to reproduce the error\u2026 Did you find a fix for it or are you still experiencing the issue?\n. @teamon Do you know why?\nIf I run the following code:\n``` ruby\ndef stub_api_for(klass)\n  klass.uses_api (api = Her::API.new)\n# Here, you would customize this for your own API (URL, middleware, etc)\n  # like you have done in your application\u2019s initializer\n  api.setup :url => \"https://api.example.com\" do |connection|\n    connection.use Her::Middleware::DefaultParseJSON\n    connection.adapter(:test) { |s| yield(s) }\n  end\nend\nmodule A\n  module B\n  end\nend\nclass A::B::C\n  include Her::Model\nend\nstub_api_for(A::B::C) do |stub|\n  stub.get(\"/cs/1\") do |env|\n    [200, {}, { :id => 1, :foo => \"bar\"}.to_json]\n  end\nend\np A::B::C.find(1)\n```\nI get this output:\n``` ruby\n\n```\n. OK great! Waiting for that PR :)\n. Merged! Thanks a lot!\nP.S. \u2014 Merci, si on peut se parler en tant que francophones :)\n. I merged a few pull requests since yours and I was wondering if it was possible for you to rebase it against master since you know its changes better than I do :) Thanks!\n. I think if we want to keep a certain level of constancy, we\u2019ll need all save methods to return a boolean value.\n. Oh yeah, that\u2019s right, it should return the resource. Sorry about that!\n. Yes, that\u2019s exactly how I test them. Do you think it\u2019s a natural way to do it or do you have something in mind that would work better for you?\n. And her-0.3.6 appeared! Thanks for the reminder :)\n. I also updated the README.md with new contributors hint, hint! :smile:\n. Just pushed her-0.3.7!\n. Yes, I think it\u2019s something that could be great to have, much like after_initialize in ActiveRecord. I\u2019ll look forward to your pull request! :smile:\n. Closing this since after_find is now a valid hook in her-0.3.8. Thanks again!\n. Well this is a good start, but :id is still used in lots of places in the codebase.\n. I\u2019m going to close this pull request since it\u2019s just providing a way to define a primary key for a model but it\u2019s not using it.\n. I actually like having errors returning an Array since I consider errors more as a list than a key+value store. I\u2019m curious, why do you think a Hash would be better in this case? Thanks!\n. Hi @guiferrpereira, I recently refactored the caching example in README.md to use memcached so I\u2019m going to close this pull request \u2014 thanks for the suggestion!\n. Thanks for the quick fix to the test for 1.8.7. I\u2019m not sure how long we\u2019ll keep supporting it though.\nMerged!\n. @joanniclaborde I\u2019m thinking this merged pull request solves your problem, doesn\u2019t it?\nhttps://github.com/remiprev/her/pull/81\n. Alright, I\u2019m gonna close this pull request then.\n. I merged it and updated the docs. Thank you!\n(Sorry for the delay!)\n. It looks like ActiveRecord conflicts with Her. You probably shouldn\u2019t mix those two because they both have the same method names (eg. find, belongs_to, destroy, etc.).\n. @rafaelgonzalez The problem is in your API stubbing process. You have to make the GET /rate_limit request return a valid Rack response (with status and headers), not just the body.\nI refactored your spec/models/basic_spec file. Now the GET /rate_limit request returns a valid Rack response along with a JSON encoded body that depends on the example context. I didn\u2019t like stubbing the respond_to? method, it\u2019s too general :smile:\n``` ruby\nrequire \"spec_helper\"\ndescribe Basic do\n  before do\n    stub_api_for(Basic) do |stub|\n      stub.get(\"/rate_limit\") do |env|\n        [200, {}, json_body.to_json]\n      end\n    end\n  end\ndescribe \"::rate_limit\" do\n    before(:each) { @rate = Basic.rate_limit }\n    let(:json_body) { { rate: { limit: 60, remaining: 60 } } }\ncontext \"API return value is malformed\" do\n  let(:json_body) { { error: true } }\n\n  it 'should return specific hash' do\n    @rate[:limit].should eql 'unknown'\n    @rate[:remaining].should eql 0\n  end\nend\n\nit 'should return correct values in hash' do\n  @rate[:limit].should eql 60\n  @rate[:remaining].should eql 60\nend\n\nend\nend\n```\nHope that helps!\n. Hi @wingrunr21,\nI just released her-0.3.8 which removes the whitelisting of the options. You\u2019ll be able to use the :timeout in the my_api.setup call.\nThank you!\n. Thanks for answering issues on my own project @markmcconachie, very much appreciated :smile:\nI\u2019m going to close this issue.\n. Yes, this is on my roadmap for 1.0, a big rewrite using ActiveModel (let it handle callbacks, validations, dirty attributes, etc.).\nThanks for the suggestion!\n. I\u2019m going to close this issue since it\u2019s coming :smile:\n. Could you paste the code you're using? The Her model definition and the actual line that triggers the exception? Thank you!\n. Thanks! I refactored the code a bit but it was great! :smile:\n. I agree with @pencil. Actually, I don\u2019t see the point to change the primary key in a model if it\u2019s just going to overwrite the id key.\nDo you have any idea how we could introduce the notion of an alternate primary key without it?\n. I\u2019m gonna close this issue now and make pull request #86 the \u201cofficial\u201d issue for custom primary keys.\n. I\u2019m going to close this issue now since it hasn\u2019t been updated for a few months.\n. I understand why Her isn\u2019t handling this properly. It\u2019s because it sticks to the include_root_in_json convention in ActiveRecord::Serialization.\nWhen handling a collection of resources, Her expects an Array. If parse_root_in_json is enabled, it expects the array to look like this:\njson\n[ { \"video\": { \"id\": 0, \"url\": \"http\" } } , { \"video\": { \"id\": 1, \"url\": \"http\"} } , \u2026 ]\nThere\u2019s currently no way of handling collection data comes from a Hash. I\u2019m going to add this to my todolist.\n. Thanks @jipiboily!\nI\u2019m going to close this issue since there\u2019s now a solution :smile:\n. I'm in the process of making Her compatible with ActiveModel (see the activemodel branch). I might add active_attr in it too!\n. Hey guys, I just released her-0.5(.1) which adds an attributes method to model classes. With it, you can actually use ActiveModel::Validations and ActiveModel::Dirty modules (that are now included in all models):\n``` ruby\nclass User\n  include Her::Model\nattributes :fullname, :email\n  validates :fullname, :presence => true\n  validates :email, :presence => true\nend\n@user = User.new(:fullname => \"Tobias F\u00fcnke\")\n@user.fullname_changed? # => true\n@user.changes # => { :fullname => [nil, \"Tobias F\u00fcnke\"] }\n@user.valid? # => false\n@user.errors.full_messages # => [\"Email can't be blank\"]\n@user.save\nPOST /users&fullname=Tobias+F\u00fcnke will still be called, even if the user is not valid\n```\nI\u2019m not a big fan of validating data on the client (since the API always has the last word before creating/updating resources) but it can be nice to manually validate the data before calling the API.\n. I\u2019m gonna close this issue now since there\u2019s now a way to add a schema to models (with the attributes method).\n. Merged! Sorry about the delay you guys!\n. Thank you!\n. Thank you Nils!\n. Merged! Thank you for this fix!\n. Actually, that comment is not accurate anymore.\nIf your model data has a metadata key, it\u2019s going to be parsed by the detault middleware (here) and passed to the initializer through the :_metadata special key (here). The initializer is going to keep it in the resource\u2019s metadata accessor (here). Same thing goes for the errors key, which is stored in the response_errors accessor.\nThere was a typo in the find method though, so that currently only works in the master branch.\nHope that helps!\n. I\u2019m gonna close this issue now and hope that my last comment helped you solve it!\n. Yes, you should be able to do it with the current API:\n``` ruby\nclass Project\n  include Her::Model\nend\nclass User\n  include Her::Model\n  has_many :projects\nend\nuser = User.find(1)\n=> GET /users/1\nuser.projects(page: 2, per_page: 10)\n=> GET /users/1/projects?page=2&per_page=10\n``\n. I just pushed 71cc41d01c59caead3c5a09308a91b929c77aca1 which should fix the problem. Tell me if it still doesn\u2019t work!\n. I\u2019d put it in thenot-implemented-but-welcome-to-writesection :smile:\n. @mwotton do you have any interest on writing this feature? I think that would be pretty cool.\n. Like I said on #93, I\u2019m thinking about refactoring all the associations behavior. I\u2019m gonna close this issue.\n. I rebased it (I had made a few changes inorm.rb` this morning) and merged it.\nThank you very much for this \u2014 this is a feature a lot of users have been asking for :smile:\n. Does you User model has a company_id attribute?\n. Ah I see. Her is indeed calling the request path for each User resource.\nIn your actual use case, what URL would be called if you call the #save method on a user? PUT /users/:id (because the URL can\u2019t depend on the parent since a user can belong to many parents)? In that case, you\u2019d have to use the resource_path method:\nruby\nclass User\n  collection_path \"/companies/:company_id/users\"\n  resource_path \"/users/:id\"\nend\n. I think we could just catch any exceptions when calling request_path here.\n``` ruby\nclass User\n  collection_path \"/companies/:company_id/users\"\nend\nuser1 = User.find(1) # { \"id\": 1, \"name\": \"Tobias F\u00fcnke\", \"company_id\": 2 }\nuser1.inspect # => #\nuser2 = User.find(2) # { \"id\": 2, \"name\": \"Maeby F\u00fcnke\" }\nuser2.inspect # => #) name=\"Maeby F\u00fcnke\">\n```\nThat makes sense, right?\n. This commit should fix it. If I take my previous example again:\n``` ruby\nclass User\n  collection_path \"/companies/:company_id/users\"\nend\nuser1 = User.find(1) # { \"id\": 1, \"name\": \"Tobias F\u00fcnke\", \"company_id\": 2 }\nuser1.inspect # => #\nuser2 = User.find(2) # { \"id\": 2, \"name\": \"Maeby F\u00fcnke\" }\nuser2.inspect # => #company_id>) name=\"Maeby F\u00fcnke\">\n``\n. @lucaspiller You should not be experiencing the issue with newer versions ofher(0.6+). Please upgrade, test again and close this issue :smile: Thanks!\n. Do allPostgresBackupTargetresources have apostgres_backup_serverattribute? Her needs it to build the resource path back.\n. Actually, I got the same issue on a personal project last week. I\u2019m gonna add a note in the **Associations** section of the README :smile:\n. What is the response sent back from the API? The only way you could get this error is if the response body would betrue`:\nruby\njson = MultiJson.load('true')\njson.delete(:errors) # raises NoMethodError: undefined method `delete' for true:TrueClass\nI actually wanted to implement some kind of check for this over the weekend to make sure this error doesn\u2019t happen because I thought that only objects or arrays could be sent back from MultiJson.load. But it looks like simple values like true or \"foo\" are actually valid JSON data.\nAnyway, making the endpoint called by #destroy return something like {} for now should do the trick for now. But I\u2019ll come up with something better soon.\n. FWIW, I just pushed a commit in master (30584da191e3f6e4125b187157d44643bf56c96c) that should provide a better error message when encountering this problem. Will be part of the next release.\n. By default, if the server returns an empty hash ({} or { \"model_name\": {} }, depending on whether you\u2019re using the parse_root_in_json setting), it will keep the model attributes intact and just mark it as destroyed (calling #destroyed? on it will return true).\nIn my opinion, a good practice would be to return an empty response and send it using the 204 No Content HTTP header. Her will behave the same way as described above.\n. I\u2019m going to close this issue now. Please let me know if you have further questions!\n. Since the routing logic might change depending on the application, wouldn\u2019t it be better to implement it in the class?\n``` ruby\nclass User\n  include Her::Model\n  belongs_to :organization\n  belongs_to :other_parent\ndef to_param\n    { :id => self.id, :organization_id => self.organization_id }\n  end\nend\n``\n. No, unfortunately settingcollection_path(\"/configurations/:configuration_id/publish_sets\")` is the right way to do it.\nI\u2019ll check if there\u2019s a way we could add support for intersting path parameters back into the fetched resource\u2019s attributes when her initializes it.\n. I think your implementation is great but I don\u2019t see this feature being part of Her, since in this case the problem resides in the API you\u2019re connecting to. I think Her\u2019s codebase should stick to the REST principles.\nWhat you could do is write a simple Faraday request middleware that swaps the HTTP method when it\u2019s set to POST or PUT. That seems reasonable to me :smile:\n. OK, you convinced me with your custom URLs analogy.\nI\u2019d be willing to merge it if you add support for other methods that use implicit HTTP methods (like find and destroy). Also, please make sure that method_for inherits its settings from the parent class (like this method).\nIf you could also rebase the branch, that would be great!\nThanks!\n. I refactored the method_for method a bit (a2ff4f6e345a61c384662670681561eff18ad91a) and merged the branch. Thanks!\n. I actually have big plans for refactoring the associations. Basically, calling Post#comments\u00a0would return a Relation instance that would hold all the details (post_id, relation type, etc.)\nIf we call build or create on it, it would return a resource. If we call any other method, it would fetch the data (like it currently does, via @attributes or an HTTP request), initialize a Her::Collection instance and call that method on it.\nI\u2019m gonna close this pull request and keep you updated!\n. Yes, there\u2019s a similar problem when defining other options as well, like include_root_in_json and parse_root_in_json. I\u2019m going to fix it.\n. I just pushed this commit which I hope will fix your problem.\nAll class settings (primary_key, collection_path, parse_root_in_json, etc.) should work on classes that inherit from a class that includes Her::Model.\nLet me know if it works!\n. This feature now lives here.\n. Could you paste the output of this?\nruby\nputs @citizen.inspect\nThanks!\n. Oh yeah, that\u2019s it! This feature has been added by a contributor so I didn\u2019t think about updating the README. Will do it now!\nI\u2019m going to close this now since your issue seems fixed. Thanks!\n. Are you using the latest version of master or the latest gem release? Because most inheritance issues have been fixed in master in the last couple of days.\n. Can you give it a try using the latest version of master and report back here?\n. In fact, you shoud be able to upgrade to the newest version of her (which is 0.6.2) and it shoud work.\n. In your example, you\u2019d need to SpecialPerson to inherit from the Person class, right? Because otherwise calling save or destroy on the resource would trigger an error.\nThis seems like a useful, transparent feature though. However, there\u2019s a few other places where we would need to use class_for_data, like most methods in Her::Model::ORM that use new.\n. Here\u2019s two things that we would need in order to merge the branch:\n1. Have the feature work through a transparent class method (like parse_root_in_json or root_element) not via a def self. class_for_data overloaded method.\n2. Rebase the branch against the current master.\n. Did you try installing the faraday_middleware gem and use FaradayMiddleware::EncodeJson in your Her::API.setup block instead of Faraday::Request::UrlEncoded?\n. You\u2019re right, this only encodes the request body. I don\u2019t know a middleware that would fit your needs though \u2014 I think you\u2019d have to write a custom one. You\u2019d have to get the value of env[:url].query and convert it to JSON.\n. Here\u2019s a very simple, non-tested middleware example. It takes the query string, convert it back to a Hash, encode it as JSON and assign it to the json_data query parameter.\n``` ruby\nclass EncodeJSONQuery < Faraday::Middleware\n  def call(env)\n    original_query = Rack::Utils.parse_nested_query(env[:url].query)\n    json_query = JSON.dump(original_query)\n    env[:url].query = \"json_data=#{Rack::Utils.escape(json_query)}\"\n@app.call(env)\n\nend\nend\n```\nHopefully that will help you build your own!\n. I\u2019m going to close this issue now since there\u2019s a few options :)\n. Did you try the middleware I added here?\n. I believe your query string is malformed. First you set x[][y] to true but then you set x[][y][] to 1, which can\u2019t work because x[][y] is a string.\nSo Rack::Utils.parse_nested_query is right for throwing a TypeError here. It fails with any Rack app, trying calling your favorite Rack/Rails app with http://example.com/?x[][y]=true&x[][z]=false&x[][y][]=1 :smile:\n. Actually, I think I\u2019m gonna change store_errors to store_response_errors, which makes more sense, since we\u2019re overriding the response_errors accessor, not errors.\n. No pull request is too small! Thanks!\n. Good catch! I rebased it and merged it as 9bb406b4497deca52b8bc3911cdf046ab923f9ad. Thanks!\n. Merged! Thanks!\n. I refactored the test a bit (to test have(n).items) and merged the branch. Thank you Alex!\n. I hope to release 0.6.3 after this pull request has been reviewed and merged.\n. 0.6.3 is now released!\n. I merged your branch but added this commit to put back the return self bit to avoid creating a new object if the data hasn\u2019t been fetched yet.\nThanks!\n. You\u2019re right, this is a bug. The document? method is not called because it\u2019s defined later by Her when calling document.\nI'll fix that.\n. Just pushed this commit to fix the issue. So now your code should be able to run on master. Let me know if it works!\n. FYI, I wrote this test to fix the issue.\n. Thank you for reporting the issue. Also, neat first name! :smile:\n. I just fixed it in this commit, let me know if it works for you!\n. > is ok with gem 'her', git: \"xxxxx\" during Gemfile, I need use her during my own gem,so need wait it release to rubygem.org.\nI just released her-0.6.6 so you can stop using git: \"\u2026\" in your Gemfile.\n\nI can not use parse_root_in_json when server just return a hash,like {a: \"a\",b: \"b\", data: {x: \"x\"}},I need to return special hash sometimes.\n\nFor that, I think you\u2019re going to need to write a custom parsing middleware.\n. I'm gonna close this issue now. Feel free to reopen it if you have further comments.\n. Can you give more details about the failing partial? Is there an exception? Can you paste the backtrace?\nIt should work without the to_a because whatever method Rails is calling on the collection, it should be delegated to the array.\n. Can you PM with more details? I too looked into action_view for possible incompatibilities and found nothing. Thanks!\n. Looks like this is a popular feature request :smile:\n@prognostikos I\u2019d be very grateful if you could tackle this as I\u2019m gonna be busy in the next days. However, we need to make sure that the current parse_root_in_json and include_root_in_json methods keep working the way they do. Maybe they could take an option for the format, something like:\nruby\nclass User\n  include Her::Model\n  parse_root_in_json true, :format => :active_model_serializers\n  # parse_root_in_json true, :format => :rails_legacy\nend\nThanks!\n. Oh, excellent. I\u2019m going to close the issue now. Thanks!\n. I like the general approach :smile:\nFor the failing custom_get spec, I think it might be because of these lines that are there to handle both single resources and resources collections. We need to refactor those lines to take the parsing options into account.\n. Is this pull request still active? I too got into a \u201clife got in the way\u201d situation so I don\u2019t have a lot of time to put into this project, but support for JSON API would be really cool.\nKeep up the great work @prognostikos :smiley::exclamation:\n. Good job @prognostikos! Thanks a lot!\n. I just added this commit to make those errors go away. Merged!\n. There\u2019s currently no way to do that. If you want to write a pull request for the feature, you\u2019re more than welcome :smile:.\nOne way you could achieve it now is this:\n``` ruby\nclass User\n  include Her::Model\ndef mypost(params = {})\n    self.class.post(\"#{self.id}/mypost\", params)\n  end\nend\nUser.find(123).mypost(:color => :orange)\nPOST to \"/users/123/mypost\" with color=orange\n``\n. You might want to check the issue #74. I\u2019m not really familiar with Typhoeus though.\n. I\u2019m gonna close this issue now since I think #74 will provide you better information.\n. Hmm\u2026 can you show us the content of theHer::Middleware::Mashifyclass? :smile:\n. Why are you using this middleware? Her expectsenv[:body]to be a Hash parsed from a JSON response body.\n. It\u2019s not clear to me why you are converting the response body to a newHashie::Mash\u2026\n. Can you give me an example? Doesn\u2019t Her already map attributes to methods?\n. In your test, you\u2019re stubbingGET /users, right? Is it always returning the same response?\n. I think I fixed the bug [here](https://github.com/remiprev/her/commit/8a3b99ddc1fa6b557cc7d9eea19a5981f15a69cf). Using#blank?was wrong, since it was caching relations that had been fetched but that returned an empty array. We only want to cache them when the data isnil` (which means it hasn\u2019t been fetched yet).\nLet me know if that works for you!\n. This is a great idea!\nI\u2019m a bit busier than usual so I don\u2019t have a lot of time to work on Her\u2026 do anyone of you guys would be willing to implement the feature?\n. Awesome pull request, thank you!\n. I created this test and it passes on my end. Can you confirm that it\u2019s either failing on your end or that your code is different in a way? Thanks!\n. I used your file and I got the error. I think this commit fixes it. At least it did with the simple file.\nCan you tell me if that fixes your original issue?\n. Alright, gonna the issue now!\n. It\u2019s possible to do with Her\u2019s current code. You can rewrite the to_params and parse methods of a class.\n``` ruby\nclass User\n  include Her::Model\n# It expects GET /users/1 to return something like\n  # { \"foo\": { \"bar\": { \"id\": 1, \"name\": \"Lindsay\" } }\n  def parse(data)\n    data[:foo][:bar]\n  end\n# For example, User.create(name: 'Tobias') will call:\n  # POST /users with foo[bar][name]=Tobias\n  def to_params\n    { foo: { bar: attributes.dup.symbolize_keys } }\n  end\nend\n```\nI hope this is helpful to you!\n. > and it still doesn't call the association from the API when calling just client.document_cap. However, client.document_cap.fetch will force it to do the call.\nYeah, client.document_cap will just return a Her::Model::Relation instance. Calling any method on this instance (eg. #inspect or #each for a collection) will fetch the data and call the method on the data.\n. You\u2019re right, the documentation doesn\u2019t reflect the current behavior. I\u2019ll update it. Thanks!\n. @luxflux I was not able to reproduce this bug. There\u2019s a test for that and it\u2019s currently passing:\nruby\nlet(:user) { Foo::User.find(1) }\nit \"has no changes\" do\n  user.changes.should be_empty\n  user.should_not be_changed\nend\nI finally got the time to finalize this pull request and I\u2019m planning on merging it soon since all tests pass now. Do you have the time to take a look at it again?\n. Yeah! :grinning:\n. Just released her 0.6.7. Thanks for the reminder!\n. Hi Luca,\nSorry for taking so long to address this issue. Can you provide a quick example of how to break an association?\nWhen I introduced this change, it wasn\u2019t suppose to change the default behavior. Calling a missing method on the association should call fetch then the requested method. But I guess there might be some cases where I\u2019ll have to manually implement the methods.\nThank you!\n. There\u2019s this pending pull request that attempts to do this. I\u2019ll look into it.\n. I\u2019m going to close this issue now though and keep everything related to this serialization format in the other pull request.\n. Validations in Her are built with ActiveModel::Validations so it\u2019s pretty much the same thing as ActiveRecord (or any other ActiveModel-powered ORM):\n``` ruby\nclass User\n  include Her::Model\n# Attributes (we have to declare them before defining validations on them)\n  attributes :name\n# Validations\n  validates :name, presence: true\nend\nuser = User.new\nuser.valid? # => false\nuser.errors.full_messages # => [\"Name can't be blank\"]\n```\nHope that helped!\n. It\u2019s because the errors returned from the server (stored in errors, as you specified with store_response_errors) are actually just a plain Hash (since it\u2019s returned via JSON) \u2014 it\u2019s not an ActiveModel::Errors object.\nI\u2019d gladly accept a pull request that converts the server errors to an ActiveModel::Errors instance :smile:\n. I think I just fixed this bug with this commit. Can you test your code with the latest master version and report back? Thank you!\n. You\u2019re welcome!\n. Neat, thanks!\n. But what about nested attributes? In the case of a has_one\u00a0or has_many association, it\u2019s something we might want to do:\n``` ruby\nclass User\n  include Her::Model\n  has_one :profile\nend\nclass Profile\n  include Her::Model\n  belongs_to :user\nend\nUser.create(profile_attributes: { full_name: \"John Smith\" })\n```\n. Have you tried using associations?\n``` ruby\nclass Node\n  include Her::Model\n  collection_path \"/v2/nodes\"\n  has_many :facts\nend\nNode.find('foo.bar.com').facts\nGET /v2/nodes/foo.bar.com/facts\n``\n. It\u2019s normal thatNode.find('foo.bar.com').factscallsGET /v2/nodes/foo.bar.com(because of thefind) but it should also callGET /v2/nodes/foo.bar.com/facts` because of the association.\nCan you try Node.find('foo.bar.com').facts.inspect which will certainly fetch the data (because calling #facts doesn\u2019t actually fetch the data, it just returns a relation that will be called if you call a method on it (like #each, #inspect or #to_a).\n. Looks good to me! Thank you!\n. Thank you @yozlet!\n. This looks good. Could you remove the changed lines in .gitignore and version.rb so I can merge it? Thank you!\n. It\u2019s failing on ruby 1.8.7, we\u2019ll have to use lambda instead of ->.\n. Still failing on 1.8.7 because of the new hash syntax.\n. Thanks for your help!\n. I\u2019m going to close this pull request since I just merged #188.\n. @andyt I agree that this should be more documented.\nHowever, we\u2019re not redefining a kernel method per se \u2014 we\u2019re just implementing the respond_to_missing? method that Ruby calls :smile:\nEdit: Oh, my bad. We\u2019re actually redefining respond_to?. Yeah, we shouldn\u2019t do that.\n. @pencil Shouldn\u2019t we just drop our respond_to? method and let respond_to_missing? handle everything?\n. Empty response should be sent with a 204 code. I think Spree should fix that in their API.\nHowever, if you don\u2019t want to rescue the exception, you should be able to write a custom middleware that convert empty responses so they\u2019re treated as 204 responses (and not parsed by Her) with something like this:\nruby\nclass FixEmptyResponseStatus < Faraday::Middleware\n  # @private\n  def call(env)\n    env[:status] = 204 if env[:body].blank?\n    @app.call(env)\n  end\nend\n(I have totally not tested this, but you should get the picture)\nAnd use it before your parsing middleware:\n``` ruby\nHer::API.setup url: \"https://api.example.com\" do |c|\n  # Request\n  c.use Faraday::Request::UrlEncoded\n# Response\n  c.use FixEmptyResponseStatus\n  c.use Her::Middleware::DefaultParseJSON\n# Adapter\n  c.use Faraday::Adapter::NetHttp\nend\n``\n. I\u2019ve thought about this a lot when implementing support forActiveModel::Validations`.\nI think since Her is an ORM that connects to a RESTful API and since the canonical source of validness for a record is the API, we shouldn\u2019t prevent calling save even if the record is invalid (well, locally invalid). Because it might be valid when it\u2019s being processed by the API (since validation rules on the API should overrule model validations, IMO).\n@pencil, what do you think?\n. I\u2019m gonna close this pull request now.\n. I also think that we shouldn't mix local and remote errors.\nValidations defined through ActiveModel::Validations go into #errors (like any ActiveModel-like object) and errors returned by the response go into #response_errors (this is the behavior added by Her).\n. Awesome, thanks for fixing your code. Merging!\n. Looks good to me! :+1:\n. You mean the Accept\u00a0header set to application/json? There\u2019s the Her::Middleware::AcceptJSON middleware for that.\nruby\nHer::API.setup url: \"https://api.example.com\" do |c|\n  c.use Her::Middleware::AcceptJSON\nend\nDoes that solve your problem?\n. Oh yeah sorry, there\u2019s no builtin middleware for that. You could implement your own, like this one:\n``` ruby\nmodule Her\n  module Middleware\n    # This middleware adds a \"Content-Type: application/json\" HTTP header\n    class JSONContentType < Faraday::Middleware\n      # @private\n      def add_header(headers)\n        headers.merge! \"Content-Type\" => \"application/json\"\n      end\n  # @private\n  def call(env)\n    add_header(env[:request_headers])\n    @app.call(env)\n  end\nend\n\nend\nend\n```\nAnd use it like any other middleware:\nruby\nHer::API.setup url: \"https://api.example.com\" do |c|\n  c.use Her::Middleware::JSONContentType\nend\n. You\u2019re welcome! Lots of cool stuff can be done with middleware :smile:\n. They are additive. For example, if you look at the example in README.md:\n``` ruby\nconfig/initializers/her.rb\nHer::API.setup url: \"https://api.example.com\" do |c|\n  c.use Faraday::Request::UrlEncoded\n  c.use Her::Middleware::DefaultParseJSON\n  c.use Faraday::Adapter::NetHttp\nend\n```\nFaraday::Request::UrlEncoded encodes the response body with application/www-form-urlencoded, Her::Middleware::DefaultParseJSON tells Her to use its default JSON parser and Faraday::Adapter::NetHttp uses Ruby\u2019s Net:HTTP to make HTTP requests.\nIn your case, you could use:\n``` ruby\nHer::API.setup url: \"https://api.example.com\" do |c|\n  # Request\n  c.use Faraday::Request::UrlEncoded\n  c.use Her::Middleware::JSONContentType\n# Response\n  c.use Her::Middleware::DefaultParseJSON\n# Adapter\n  c.use Faraday::Adapter::NetHttp\nend\n``\n. Looks good to me!\n. That\u2019s actually pretty cool. Thanks!\n. This is excellent! We didn\u2019t need the refactor forinclude_root_in_jsonnorrequest_new_object_on_buildsince they don\u2019t take any options, but it\u2019s good to keep the code consistent. Thanks!\n. What is your middleware stack? Can you paste yourHer::API.setup` code?\n. I think I know where the problem is. The model constructor expects to be called with an attributes hash as its single argument.\nSince the data returned by the endpoint is an array of strings (instead of an array of hashes), it tries to build an array of Factname objects by passing the string as the argument (eg. Factname.new(\"apache.config.ok\")).\nSince Her is built to deal with attributes hash, what I suggest you do is overwrite the initialize method for the model and do something like this:\n``` ruby\nclass Factname\n  include Her::Model\n  collection_path '/v3/fact-names'\ndef initialize(fact)\n    super(fact: fact)\n  end\nend\n```\nCalling Factname.all will now return an array of Factname objects with a single fact attribute.\n``` ruby\nFactname.all\n=> [#, #, \u2026]\n```\nLet me know if that works for you!\n. :+1: \n. This is great! Thank you!\n. OK\n. @dturnerTS This looks good. I\u2019d really appreciate some tests with your changes though.\n. You\u2019re right, I will release 0.7 soon!\n. I\u2019m going to close this issue now since I\u2019ve released 0.7, 0.7.1 and 0.7.2 :smile: \n. Actually, since this is an option for the parse_root_in_json method, I think we could merge this.\n@miguelsan Would you mind rebasing your branch against the current master (sorry, there has been a few modifications since your pull request) so I can merge the branch as soon as possible?\nThank you!\n. Oops sorry, I meant to mention @jpbarela!\n. @jpbarela Nevermind, I kind of need this in Her soon so I\u2019m gonna work from your branch and merge in master :smile:\nI\u2019m going to close this issue now.\n. This is something that would be really useful. This involves rewriting the associations code to make it compatible with the Her::Model::Relation system.\nLet me know if this something you\u2019d like to work on! :smile: \n. I agree with that. Besides, if you really want all your URLs to be <url>.json,  you can always do it with a Faraday requet middleware.\n. Faraday provides a middleware that logs requests:\n``` ruby\nHer::API.setup url: 'http://example.com' do |c|\n  # Response\n  c.use Faraday::Response::Logger, ActiveSupport::Logger.new(STDOUT) if Rails.env.development?\n# Adapter\n  c.use Faraday::Adapter::NetHttp\nend\n```\n. Sure, you can do that by creating your own response middleware and inserting it before the JSON parsing middleware:\n``` ruby\nlib/response_body_logger.rb\nclass ResponseBodyLogger < Faraday::Response::Middleware\n  def initialize(app, logger = nil)\n    super(app)\n    @logger = logger || begin\n      require 'logger'\n      ::Logger.new(STDOUT)\n    end\n  end\ndef on_complete(env)\n    @logger.info('Response body') { env.body }\n  end\nend\nconfig/initializers/her.rb\nHer::API.setup url: 'http://example.com' do |c|\n  # Response\n  c.use ResponseBodyLogger, ActiveSupport::Logger.new(STDOUT) if Rails.env.development?\n  c.use Her::Middleware::DefaultParseJSON # Make sure that this middleware is the last response middleware\n# Adapter\n  c.use Faraday::Adapter::NetHttp\nend\n``\n. Sorry,master` was broken for a while.\n. There\u2019s not simple way to do this. However, this works pretty well:\n``` ruby\nclass AgreementStatus\n  include Her::Model\n  resource_path \"/agreement_status\"\ndef self.singleton\n    @singleton ||= find('')\n  end\nend\nputs AgreementStatus.singleton.inspect\n```\nHope that helps! I\u2019m going to close the issue \u2014 feel free to re-open it if you have further questions!\n. Can you print what HTTP request is sent to the API with the find code and with the where code?\n. I\u2019m going to close this issue since I don\u2019t think there are any more issues when bundle installing from the master branch. Feel free to re-open it or leave a comment if you still have problems.\n. I think this is now handled with this test case. It was fixed in her-0.7.\nI\u2019m going to close this issue. Feel free to re-open it if you have further questions.\n. @mtwentyman @pencil I just fixed the issues with Rails 4.0 and 4.1 in master. I\u2019m going to close this issue, wait for Travis to pass and then release her-0.7! :grinning: \n. Have you tried looking into accepts_nested_attributes_for?\n. I\u2019ve written a test based on your example code and it does not fail.\nI\u2019m going to close this pull request assuming this has been fixed. Feel free to re-open it if you have more information. Thank you!\n. @pencil You\u2019re right, these lines (1, 2) are causing the problem. We need to cache the results in the object without using @parent.attributes.\n. This is the line.\n. Yes, this is something I\u2019ve tried to fix with #131 \u2014 I\u2019ll try to get on it as soon as possible!\n. This is the right way to do it.\n1. Are you including the middleware properly in the Her::API.setup block?\n2. Is the header actually sent in the request with a wrong value or isn\u2019t the header sent at all?\n. You need to customize the URL for your Branch model:\nruby\nclass Branch\n  include Her::Model\n  resource_path 'shop/:shop_id/branch/:id'\nend\n. > So, you are saying i remove the associations, handle each Model separately? and use the resource_path. Is this is a temporary fix or the right way to go about with HER\nThis is indeed the right way to do it. By default, Her assumes resources are located at the root of the base URL. We have to do it this way because users can specify multiple belong_to associations in their model:\nruby\nclass Branch\n  include Her::Model\n  belongs_to :shop\n  belongs_to :user\nend\nThere we cannot assume that the path will be /shops/:shop_id/branches/:id or /users/:user_id/branches/:id. That\u2019s why users have to specify the path manually if they want to customize the default one.\nI\u2019m going to close the issue \u2014 feel free to re-open it if you have further questions.\n. :+1: what @pencil said!\n. @DiscreteObject do you have a more complete backtrace for the failing test?\n. > Parsing a date based on it's field name seems a bit fragile. I would not recommend merging that. Instead one could write custom setters where required and do the date magic there.\nMay I recommend writing a custom Faraday middleware to do this? I also think it\u2019s not necessary to include this in our ParseJSON middleware.\n. Yes, you can use the built-in Her::Middleware::AcceptJSON middleware.\n. :+1: :grinning: \n. @pencil I\u2019m gonna let you merge this if you think it\u2019s ready!\n. @haozeng Well the pull request has been submitted since we\u2019re talking about it here, so that\u2019s done :smile: \nHowever, I think the feature you added is already implemented at the middleware level by the default JSON parsing middleware. If you need the behavior you added, you are either:\n1. using the SecondLevelParseJSON middleware and it\u2019s currently not implementing this feature, or\n2. using a custom parsing middleware.\nIf you\u2019re using SecondLevelParseJSON, I would gladly merge a pull request that adds the behavior to the middleware.\nIf you\u2019re using a custom parsing middleware, I think you should add the behavior in it, not at the ORM level.\nLet me know you if you have any questions!\n. This looks good to me. @pencil?\n. @minktom Could you rebase the branch?\n. A specific build is failing but I\u2019ll fix it in master.\n. Fixed! her-rb.org now redirects to www.her-rb.org :smile: \n. @hubert I sent you an email about a week ago regarding this and still no reply. Are you sure you\u2019re still interested?\n. @hubert I sent the first email to hhuang@practicefusion.com but I just sent it again. Hopefully you\u2019ll get it. Otherwise email me at my public email address :smile: \n. I also released her-0.7.4.\nThank you!\n. One last thing, instead of testing the class, I\u2019d test if @_her_use_api responds to #call.\nThat\u2019s it :smile:\n. ActiveRecord does the opposite for new records though.\n``` ruby\nclass User < ActiveRecord::Base\nend\nuser = User.new(email: 'foo@example.com')\nuser.changed? # => true\nuser.changes # => {\"email\"=>[\"\", \"foo@example.com\"]}\n```\nI think we should try to emulate what ActiveRecord does.\n. ",
    "EtienneLem": "Oh, fair enough!\nI had that case scenario in mind where an API would be half-assed, but then I guess re-ordering is pretty much straightforward and one could simply do it w/ hooks (once they're done :wink:) if said case happens.\nI shall not be this weak again.\n. ",
    "technoweenie": "Fair enough.  Faraday was designed specifically so you could get\naccess to it.  I never liked how ActiveResource hid all that away,\nmaking it really difficult to debug.\nWith access to the Faraday adapter, I could inject some basic Faraday\nlogger middleware to get a dump, without worrying about using a Her\nlogger middleware.\nJust some friendly feedback.  I'm hoping to get Faraday to 1.0 this\nyear.  It's our last push to change things internally before\nstabilizing the library (for instance, I'd love to support streaming\nrequests/responses).  I look forward to your feedback if you ever run\ninto Faraday issues.\n. ",
    "nesquena": "I know that yajl is significantly faster and has much better support for international characters. A lot of people encouraged me to add multi_json into rabl for that reason and I think it was the right approach.\n. Yeah I am a convert I use yajl in my projects whenever possible now. Performance speaks for itself: http://www.allenwei.cn/faster-json-parser-using-yajl-ruby/ Also one to watch https://github.com/ohler55/oj\n. ",
    "rafaelss": "thank you @nesquena :)\nyeah, it's basically performance. I do lots of json parsing and yajl proved to be the best option.\n. cool! :smile:\n. ",
    "tysonmote": "FWIW, I think there's still use in allowing sensible defaults instead of requiring the stack to be configured every time. When I get some more time, I'm going to play around with it and hopefully come up with something that makes it easy to configure the stack without engineering something crazy.\n. Odd that it passes for me.\nFinished in 0.38309 seconds\n108 examples, 0 failures\nEdit: Ah, found the issue.\n. ",
    "travisbot": "This pull request fails (merged 52c622f2 into 25d5d5fc).\n. This pull request fails (merged 206b2879 into 50cc3cdd).\n. This pull request passes (merged 155659f2 into 50cc3cdd).\n. This pull request passes (merged d8ff99b5 into c4108fa3).\n. This pull request fails (merged dbb70a38 into eb714a9b).\n. This pull request fails (merged 847cd628 into 98eacd62).\n. This pull request passes (merged f4aca27a into 98eacd62).\n. This pull request passes (merged e9ca5960 into 98eacd62).\n. This pull request passes (merged 4a45bfdd into 3ff17757).\n. This pull request fails (merged a92e5e9a into 98eacd62).\n. This pull request passes (merged f9a2043d into 98eacd62).\n. This pull request passes (merged 94e007c0 into 3ff17757).\n. This pull request passes (merged 468cd960 into 98eacd62).\n. This pull request passes (merged 3ff17757 into acf3fc1a).\n. This pull request passes (merged 5cfee625 into 3ff17757).\n. This pull request passes (merged 35d09697 into 3ff17757).\n. This pull request passes (merged ffc72adf into 3ff17757).\n. This pull request passes (merged 3ffd2cd2 into 3ff17757).\n. This pull request passes (merged 67c4a4eb into 3ff17757).\n. This pull request passes (merged 017a91f3 into 67c4a4eb).\n. This pull request passes (merged f5df58ea into 67c4a4eb).\n. This pull request passes (merged f807c64b into e33489b0).\n. This pull request passes (merged e1f5782c into e33489b0).\n. ",
    "mcoms": "Would be excited to see this one merged, at the moment, classes in the global scope are creating very messy code.  Just one module wrap would be enough!\n. ",
    "pencil": "When can we expect a new version of the gem which includes this feature?\n. Nice! Thank you! :)\n. Ran into a similar problem when we wanted to use the same model with two different endpoints (depending on a user selection). Did some nasty things with class unloading to make this work. It would be nice to have an official solution.\n. I have something like this in my Rails controller:\n``` ruby\nbefore_filter :initialize_foo_models\n...\nFooPlugin.setup does the Her::API.new and .setup(...) things\ndef initialize_foo_models\n  if foo?\n    FooPlugin.setup configs[:foo]\n    reload_foo_model_classes\n  elsif bar?\n    FooPlugin.setup configs[:bar]\n    reload_foo_model_classes\n  end\nend\ndef reload_foo_model_classes\n  foo_lib_path = Gem::Specification.find_by_name('foo_plugin').gem_dir + '/lib/foo_plugin'\n  [:User, :Address].each do |class_name|\n    if FooPlugin.const_defined?(class_name)\n      FooPlugin.send(:remove_const, class_name)\n      load \"#{foo_lib_path}/#{class_name.downcase}.rb\"\n    end\n  end\nend\n``\n. As a workaround you could use the newly introducedProcsupport ofuse_api` (#166)\n. @alfonsocora You would want to have some kind of class attribute on the model or a global variable. In your Proc you would check this to decide what API to use. It's an ugly workaround, but it could work :grin:\n. Kindly ask for a new release :smile: \n. Yay, thank you!\n. The previous default was a Hash and that's what Rails expects it to be. Rails' form_for does not work, if it is an Array instead of a Hash.\nIn the Rails world, errors is typically something like:\n{ field_name: ['not a number', 'should not be foobar'] }\nIn a simple array, you would not have the link to the field that is causing the problem.\n. @flop, you are right. Please submit a new PR to fix it, as this one has been merged already.\n. Maybe we can use .inspect? Seems to return reasonable values for both, Array and Hash.\n. This is a neat trick. But overwriting the id method doesn't seem right to me: Too much magic and not transparent.\n. Validation should be done by the API and not by the application using the API as this would lead code duplication.\n. I think something like\nruby\nc.use Her::Middleware::DefaultParseJSON, content_type: 'application/json'\nwould be nice. Other suggestions?\n. My bad... Redirection works. But her tries to parse an empty body (Status: 204 No Content). Will open a separate issue for this.\n. It was me who broke the compatibility... Didn't test #79 with Ruby 1.8.7, sorry!\n. Cannot reproduce with latest master. Please reopen if this is still an issue.\n. @teamon did you ever implement something based on \"Faraday Http Cache\"? If so, could you please provide a simple example so we can add it to the documentation?\n. Thank you, @teamon! Think we should change the documentation as this middleware seems to be superior to the one suggested by the README. @remiprev, what do you think?\n. :+1: :shipit: \n. :+1: :shipit: \n. This has been implemented in PR #151.\n. Could you please provide some example code?\n. Is this still an issue? I could not reproduce #97.\n. A custom method for the creation should be possible. See PR #92 for details.\n. You can set this options through Her::API.setup:\n```\nHer::API.setup url: \"https://api.example.com/\" do |c|\n  c.use Faraday::Request::UrlEncoded\n  c.use Her::Middleware::DefaultParseJSON\n  c.use Faraday::Adapter::NetHttp\nc.options[:open_timeout] = 60 # Number of seconds to wait for the connection to open.\n  c.options[:timeout] = 120 # Number of seconds to wait for one block to be read (via one read(2) call).\nend\n``\n. :+1: \n. Neat! :+1: \n. In this case, I would suggest to use two separate layers instead of one bloated layer.\nAdding support for Virtus is currently not planned.\n. Closed in favour of PR #131\n. Couldn't have said it better! :+1: :shipit: \n. Closed in favour of #178\n. Currently fails with Ruby 1.8.7: https://travis-ci.org/remiprev/her/jobs/8093161\n. Could you please add some code demonstrating the actual issue you are facing?\n. This is the expected behaviour: In the case ofu.payment_instruments, the path is built following the RESTful approach, which leads to/user/621f6a9b-c763-4c9e-9954-c7725eb64081/payment_instruments.collection_pathis only used when calling methods on the model directly.\n. I think parallel requests would work too. As long as the interface is easy to use. But it's not in the current scope of the project so I'll close this issue for now. Feel free to fire up a pull requests though.\n. Could we get a better explanation of the actual issue besides the stack trace you posted? When does this happen? Example code?\n. I would prefer a solution which tackles the root cause and not just the symptoms of this problem: The actual solution would be to make sure the her models are loaded only once. Why are the her models loaded twice in your setup? Does this happen because of a bug in her or is it something on your side?\n. Accessing the data usingresponse[:'foo/users']feels a bit rough. I would prefer a solution like the one described in #143.\n. I'll close this for the reason given: the API just doesn't seem easy enough.\n. No, I don't think so. Maybe you can use some Faraday middleware to achieve this.\n. Duplicate of #25\n.use_apinow supports aProc. See https://github.com/remiprev/her/pull/166 for details.\n. @remiprev Yes, we may want to sendprofile_attributesincluding some JSON-encoded hash to the server. But we definitely don't want to send aprofileincluding some magic string coming fromto_son the model to the API.\nThis PR only removes theprofile/to_spart. It does not affect the givenprofile_attributes`.\nSending the associated profile \"automagically\" as profile_attributes is a different story.\n. @calmyournerves could you please rebase this PR? Can't be merged automatically it seems.\n. #157 only fixes the problem with send_only_modified_attributes set to true. Your PR covers also the case where the option mentioned is set to false.\n. Since #157 has been merged, this can be closed. Please feel free to close your issues once you submited a PR for it.\n. :+1: \n. I think empty answers should always be accepted. Error detection should be done using the HTTP status code.\n. I agree :+1:\n. Yes, the documentation is somehow misleading here. The data is fetched not before it is actually needed (for example when you start iterating over User.all). You can also manually call fetch to force the GET request.\n. :shipit: \n. :+1: \n. Dup of #99?\n. Closed in favour of #99 \n. If @remiprev wants to continue Ruby 1.8.x support, this should be merge. But since Ruby 1.8.x is no longer (officially) maintained / retired, I would suggest to plan dropping the support for it (maybe something for Her 1.0?). Ruby 1.8 support is regularly causing problems in PRs (new hash syntax became very popular, ->, ...)\nBut I think this discussion is out-of-scope here :grin: \n. Thank's for your submission.\nIt's very hard to handle such a huge pull request. Would be nice if you could open up a separate pull request for each change / feature.\nSince you already have the changes already in separate commits, it would be kind of easy to achieve this: Start from current master, create a new branch and cherry pick the commits belonging to the first change and open a pull request for this branch. Then go back to master, create a new branch, cherry pick the commits belonging to the next change, open a pull request for this newly created branch etc.\n. Do you have an example of such \"unexpected behaviour\"?\n. Just had a look at the current implementation of the respond_to? method and I have to agree with you. It should be changed to only return true for methods actually handled in method_missing. Maybe an even better approach would be to actually create the methods we are handling in method_missing through define_method.\n. How comes I didn't know about respond_to_missing?? :flushed: Looks like the perfect solution!\n. I agree with you, @remiprev. The client-side can't really know, if an entity is valid. I think it should be possible to save a resource even when it's locally invalid.\n. For the reasons mentioned in #181, I don't think that this should be configurable \u2013 we should stick with the REST convention here.\nAnyone willing to open a PR to fix this bug?\n. I'm not sure if we should mix the local validation messages with the remote validation messages... @remiprev, your thoughts on this one?\n. Guess you are right. But we can't be sure, that the errors from the server are always a Hash. What if they are just a simple Array. Or even worse: A String?\n. I'm sorry, but it doesn't work that way. We can not rely on something because \"it would make sense\". her is designed to work with as many APIs as possible and we can therefore not enforce such strong policies.\n. The suggested solution is only compatible with how Rails encodes the errors. Other APIs may use other formats and I can't think of an easy way to tackle this without having a confusing programming API.\nAs initially mentioned by me and @remiprev, mixing local and remote validation messages will open Pandora's box. Not only because of the issues we discussed so far. It would probably also be quite confusing for the programmers.\nI think using custom code to handle this in your application as needed is the right approach.\n. > This PR also includes commits from #178.\nCould you please separate this two PRs and squash the remaining commits afterwards?\n. \n. No. The raw data is not kept in memory after the parsing. What is the use case you are facing?\n. You can do this by implementing your own Farady middleware.\nSome code for you:\n``` ruby\nclass DebugMiddleware < ::Faraday::Middleware\n  def call(env)\n    puts \"REQUEST #{env[:method]} #{env[:url]}: #{env[:body]}\"\n    @app.call(env).on_complete do\n      puts \"RESPONSE #{env[:url]} #{env[:status]}: #{env[:body]}\"\n    end\n  end\nend\nHer::API.setup url: \"https://api.example.com\" do |c|\n  c.use DebugMiddleware\n  c.use Faraday::Request::UrlEncoded\n  c.use Her::Middleware::DefaultParseJSON\n  c.use Faraday::Adapter::NetHttp\nend\n```\n. Be sure to include this as the firs middleware (as in the example).\n. her is designed for RESTful APIs. I don't think we should break with this and add the complexity to deal with non-RESTful APIs.\n. Yes, currently you probably have the behaviour you are looking for. But only because of the bug described by #176. This is not by design and will (hopefully) change in the future :smile: \nYou could fallback to post_raw, put_raw, ... to achieve the behaviour you are looking for. Doing so in a global base model all other models inherit from would probably be the cleanest solution.\nClosing this for now as there are no plans to make her compatible with non-RESTful APIs.\n. :+1: \n. Ok, thanks for the review! :smile: \n. That's by design. The request is made as you access the actual data:\nruby\nusers = Users.all\nusers.each do |u| # request will be performed here\n  puts u.name\nend\n. The recommended way is to actually use faraday_middleware's FollowRedirects. No need to duplicate their code:\nruby\nHer.setup url: 'http://example.com' do |c|\n  c.use Faraday::Request::UrlEncoded\n  c.use Her::Middleware::DefaultParseJSON\n  c.use Faraday::Adapter::NetHttp\n  c.use FaradayMiddleware::FollowRedirects\nend\n. > You can't google it.\nGoogle for \"ruby gem her\", \"her rest api\", \u2026\n\nYou can't mention it in a sentence without explaining what you're talking about.\n\nNot sure what the difference is between referencing \"the her gem\" vs. \"the foo-bar-rest gem\".\n\nYou have to put it in quotes when talking about it or else it sounds like you're talking bad about a female.\n\nGlad you provided the solution for this problem at the beginning of that sentence :smile: \n\nUngoogleable names are an anti-pattern & will cause support headaches for years to come.\n\nChanging the name at this point would cause headaches too (think about all the Gemfiles referencing her etc.). Rebranding a Gem is not just some simple sed commands followed by a gem push.\nIf we were at the beginning of this project and were looking for a name, these would probably be the things to consider. But the \"problems\" do not justify a name change at this point.\n. Agree with this. Sadly I don't have the permissions to do this. Will try to get in touch with @remiprev.\n. I don't think this is a common use case; it's currently not in the focus of this project to support such URLs.\n. Sorry, didn't find the time to look into this earlier.\nThis only adds support for reading from an API using the JSON API standard. Updating support as described here (\"Updating a Document\") is missing from what I can see. I don't think we should add partial JSON API support.\n. Most (all?) APIs respect the HTTP Accept header. Can you help me understand a use case for this PR?\n. The format path is more of a workaround to allow requesting a format that differs from the Accept header. As her allows setting the Accept header, I don't see the need to support format URLs.\n. Linking https://github.com/remiprev/her/issues/180 here, just for reference.\n. Thanks!\n. Thank you!\n. Seems to be a duplicate of #216.\n. Seems to be a duplicate of #216.\n. > Is there a better way to get true/false when saving?\nruby\n!!user.save\n. What version of activesupport ships with ActiveSupport::ProxyObject?\n. If it works with 4.1, I'd just go ahead and remove the upper bound or use something like '< 4.2' or even '< 5.0'. It would be cool if you could add a new Gemfile for Travis (gemfiles/Gemfile.activemodel-4.1).\nCheers :beers: \n. @monkey.attributes for a single entity, @monkeys.collect(&:attributes) for a collection.\nCheers :beers:\n. @remiprev I think this might be a bug indeed. AFAIK at one point her cached associated objects in memory. Was this changed on purpose?\n. @remiprev What approach would you suggest to fix this? Could we just cache the data on the instance itself?\n. You should add it as the first middleware.\n. Not quite sure what your trying to achieve. What does branch_params look like? What is the expected behaviour? Where is @branch coming from?\n\nalso If i try to do save on @branch then i calls PUT the url www.example.com/branch/1 instead of www.example.com/shop/1/branch/1\n\nProbably related to #238?\n. You can already do that using the RaiseError middleware and a rescue block.\n. First of all: never bump the gem version in a PR, that's always handled by the maintainer of the gem. :beers:\nParsing a date based on it's field name seems a bit fragile. I would not recommend merging that. Instead one could write custom setters where required and do the date magic there.\n. > May I recommend writing a custom Faraday middleware to do this?\nAgree. Probably the simplest solution.\n. Sorry, missed that one. I think it's ready! :shipit: \n. Can't be merged unless it is rebased.\n. Maybe we should remove this line now?\n. This breaks if you are not using the default API. Instead, you should check the send_only_modified_attributes flag on this model's API.\n. ",
    "calmyournerves": "Yay!\n. Cheers!\n. :+1: \n. I guess the problem is here:\nruby\nconnection.use Faraday::BasicAuthentication.basic_auth(\"user\",\"pass\")\nCan you try using it like this?\n``` ruby\nconfig/initializers/her.rb\nHer::API.setup :url => \"http://127.0.0.1:3003/api/v1/\" do |connection|\n  connection.use Faraday::Request::BasicAuthentication \"user\", \"pass\"\n  connection.use Faraday::Request::UrlEncoded\n  connection.use Her::Middleware::DefaultParseJSON\n  connection.use Faraday::Adapter::NetHttp\nend\n```\n. Yay!\n. Thanks!\n. Can you describe what you exactly mean? \nNormally, the API which Her connects to defines the schema/models and interacts with a database.\n. We had the same problem. Our current solution (even if not optimal) is to make an API call via Her to get an empty object with all attributes where needed (mostly form building). This prevents us from defining attributes in every app that uses Her models.\n. Wohoo! \n. Have you tried setting the collection_path? (See Custom Paths)\n. :+1:  :shipit:\n. :shipit: \n. @luxflux: Can you please test Remi's code? Thanks bro!\n. :+1: \n. I guess this isn't needed anymore as https://github.com/remiprev/her/pull/157 has been merged.\nWhat do you think?\n. :shipit: :+1: \n. Great stuff! :shipit: \n. :shipit: \n. ",
    "evansj": "Great - thanks!\n. ",
    "incorvia": "@remiprev, just a quick question about the solution you provided.  Is that thread safe?  if the class MyApp is long lived and someone else comes in and sets the current_user before the FaradayMiddleware has access to it.. wouldn't that be bad?  I ask because I don't know.\n. Thank you @remiprev a very good example and a great resource for future use.\n. ",
    "mbell697": "Awesome! Thank you for the fast response!  \nThis is perfect for my needs on the request side, is there any way to access the response headers?  The only thing missing with this change in place is a way to pull something like X-Total-Items: 500 out of the response.\nCheers!\n. Gotcha, I'll come up with a way to pass that data around, thank you for the great info.\nOne small side problem I ran into today that perhaps should be a separate issue:\nCurrently the default JSON parse middleware doesn't set the 'Accept' header in the request to 'application/json'.  It comes out as '*/*' this was easy to change with small bit of middleware but it would be a nice to have as a default set by the parser.\nCheers!\n. That is exactly what I did to get around it.  I guess i was expecting to be\nset by default by the JSON middleware as the JSON middleware is expecting\nJSON so to me it would make sense that it would set the accept header as\nsuch.\nOn Tue, Jun 26, 2012 at 6:55 PM, R\u00e9mi Pr\u00e9vost <\nreply@reply.github.com\n\nwrote:\n\nCurrently the default JSON parse middleware doesn't set the 'Accept'\nheader in the request to 'application/json'. It comes out as '/' this was\neasy to change with small bit of middleware but it would be a nice to have\nas a default set by the parser.\n\nActually, I thought about it and this is the kind of thing that Faraday\nlets you do through middleware:\n``` ruby\nclass Foo < Faraday::Middleware\n def call(env)\n   env[:request_headers][\"Accept\"] = \"application/json\"\n   @app.call(env)\n end\nend\nHer::API.setup :url => \"https://api.example.com\" do |connection|\n connection.use Foo\n connection.use Faraday::Request::UrlEncoded\n connection.use Her::Middleware::FirstLevelParseJSON\n connection.use Faraday::Adapter::NetHttp\nend\n```\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/remiprev/her/issues/16#issuecomment-6590265\n. I believe faraday ~> 0.8 is a requirement but its looks like your on 0.7.6.  I'd start with upping to Her 0.2.6 and making sure faraday ~> 0.8 gets pulled in. \n. I think it was just an issue with the early 0.2 gems, they didn't have a version dependency set for faraday, the newer gems do.\n. \n",
    "jsmestad": "Actually a better question here is how would you use Her against an API that required you to use authorization headers or parameters to verify resource ownership. For example, something that uses OAuth2 expiring keys\n. If you are working with multiple users per request, this probably would not work sharing a single connection? \n\nFor more context, check out the issue I opened over at applicake/doorkeeper#115 , I think Her would be a great solution for consuming doorkeeper-based API's\n. ",
    "chewi": "I was thinking the same thing. Why was this closed?\n. Duplicate of #135.\n. I'm not sure that this is such a good idea. Having an association doesn't necessarily mean that the parent path should be prepended like this. It really depends on the API. You can work around it by explicitly defining the collection_path but you may have noticed that this doesn't work for nested associations. I have fixed this in #318.\nOn the other hand, if you need to access a model directly as well as through an association then setting collection_path won't help. This is a tricky one. Maybe we need to be able to explicitly state the path that is used for direct access, if there is one, as well as the path used for each association. These paths could all be the same in some cases or they could all differ.\n. @edtjones, if you're looking at this one, I'd really appreciate having a chat with you about it.\n. I was hoping this would work for custom_get (which are kinda like server-side scopes) but it doesn't because of this bit of evilness in the scope method.\nruby\n          # Add the scope method to the Relation class\n          Relation.instance_eval do\n            define_method(name) { |*args| instance_exec(*args, &code) }\n          end\n@remiprev, is this really necessary? Can't the relation fall back to the model's class methods in method_missing? I know ActiveRecord does this, though admittedly it is a bit messy when deciding whether methods like find should go to the collection or the model class.\n. @edtjones, if you're looking at this one, I'd really appreciate having a chat with you about it.\n. I'd like it to work more like it does in Active Record, where you can call any class method through an association. The code I quoted above highlights the difference between Her and Active Record. I'm a little hazy on the details after all this time but Active Record is very mature now and I think we should strive to use the same approaches wherever possible as they have clearly served it well.\n. belongs_to in this case is the AR belongs_to. It has no knowledge of Her. You could probably do this instead.\n``` ruby\nclass Book < ActiveRecord::Base\n  def author\n    Author.find author_id\n  end\ndef author=(a)\n    self.author_id = a.id\n  end\nend\n```\nBut more work would be needed to add extra magic like caching.\n. This happens for singular records returned from an association too.\n. @paulvt, did you see my fix in #298? It should handle all cases.\n. Just rebased this for your convenience. Please merge! :smiley_cat: \n. Rebased again!\n. Hmmm. This newest fix only works with Rails 4.2+. I therefore made it optional by checking for the presence of a method but I assumed that the specs would always use the latest version. I forgot that Travis also checks older ones.\n. Sorry, this fell beneath the pile. I have rebased this, fixed the specs as requested, and changed the second commit to not require AR 4.2+. I believe assigning directly to the attributes hash should be safe here.\nI see that #411 hasn't been merged yet. They deal with the same issue but I think this solution handles more cases.. Okay @zacharywelch, I've made a change to how primary keys are handled that I believe makes things cleaner and deals with the issue we were seeing above. I've also changed the handling of @changed_attributes as you suggested.\nI forgot to mention in the last commit message that ActiveRecord also allows id= to change the primary key rather than treating it as a separate attribute.. Hmm looks like this approach needs adjusting for Rails 3.2. It's also not quite right for subclasses either. Bear with me.. I've put in a restriction to avoid the subclass and Rails 3.2 issues. Haven't had time to fully test this yet but I thought I'd push it up anyway because my break next week. Maybe I'll test it out at home if I get a chance.. Okay, I've tried this against our own test suite and it all looks good.. Thanks. Do you mean the cannot change primary key to :id if ancestors use other name exception? Is there an issue with it? I thought this was extremely unlikely to be encountered in practise. I did find that it perhaps didn't matter if the attribute aliases were not undone, meaning the exception could potentially be avoided, but I took what I felt was the safer route.. Rebased.\n. I've rebased this, refactored it slightly, and added a much-needed caching feature. I was surprised it didn't do that already.. By caching, I mean that it sets the associated record using the setter method and by extension the @_her_association_foo instance variable that is already used for caching. Calling bar = foo.bars.build followed by bar.foo should not result in the foo record being fetched over HTTP again. ActiveRecord does not refetch from the database when you do the equivalent there, at least not when you use :inverse_of. I made it work even without :inverse_of here because the fetcher already does the same.. I've realised that my understanding was a little off before. @_her_association_foo is not used to cache the resource itself but the proxy. The fact that associations do not currently define a foo= method was throwing me off. I believe this change is still more or less valid but it won't work properly until I've made some further improvements elsewhere. Stay tuned.. I just about had things working nicely until I realised it breaks with request_new_object_on_build true. I am repeatedly being bitten by the fact that Her stores association data in the attributes hash. Except, of course, when it stores it in @cached_result. Why is this data stored in two places and what benefit is there in storing it in the attributes hash? It screws up things like change tracking and request parameters. ActiveRecord does not do it either.\nI have wanted to write my own version of Her for a long while now but I will never have time to do that so I'm trying to make the best of what we have. Can we please discuss some of the questionable design decisions like this one?. Since writing that, I've realised that Her::Model::ORM#build creates the request parameters directly from the given attributes hash rather than creating a new resource instance first so this problem is slightly different and I'll need to give it some more thought. This is what I want to do:\nruby\nservice = Service.find(1)\ncustomer = service.customers.build\ncustomer.service # This should not refetch the service.\nI made this work by defining service= and allowing service to be assigned rather than just service_id. The problem is that when request_new_object_on_build true, the attributes hash includes service so you end up with a URL like /services/1/customers/new?service=%23%3CService:0x00000006f7ddb0%3E, which obviously isn't good. I could assign service_id first and then service afterwards but it is useful to have the cached service available when the resource is instantiated for callbacks and such.\nMy point above still stands though. I would like to just use @cached_result. When I try to take associations out of the attributes, tests like \"Her::Model::Associations handling associations without details includes belongs_to relationship in params by default\" start failing. It's not clear to me when associated data should or not should appear in request parameters. If associated data is included in a response, I don't think that should automatically mean that the data is included in a subsequent request. I was hoping you could shed some light on this.. Yes, I do use send_only_modified_attributes already but I don't think that matters? Modifying the associated data should not control whether it is included in the parent request or not. The API may not even support that. Using the above example:\n```ruby\nclass Service\n  has_many :customers\nend\nclass Customer\n  belongs_to :service\nend\nservice = Service.find(1)\ncustomer = service.customers.build\ncustomer.service.name = \"bar\"\ncustomer.save # I wouldn't expect this to touch service. AR wouldn't in this case.\ncustomer = Customer.find(1) # { name: \"Bob\", service: { name: \"foo\" } }\ncustomer.service.name = \"bar\"\ncustomer.save # I wouldn't expect this to touch service either.\n```. Separate endpoints in my case but I'm trying to consider the bigger picture here. I want to make Her work better for everyone.. I think I've finally got something workable now. I decided to exclude association data from build requests when the foreign key is present, e.g. if service_id is present then the service parameter will be excluded. It doesn't make much sense to send up association data for existing resources in a build request, even if it is modified.\nThere is further scope to include new associations in a build request but this would need data_key remappings as well as conversions via to_params. I don't need this so someone else can pick that up.\nI'll give this stuff a bit more testing tomorrow before I push it up.. Okay, here it is. This goes quite a but further than the original pull request but the changes are at least loosely related and submitting them separately would have been far more hassle. Obviously there are a lot of changes here so it might be easier to focus on the specs to better understand why they are necessary.. IIRC this will conflict with the second commit of #298. This side should win but I can fix the conflict myself once you merge one of these.. I've made some relatively small tweaks to this but I'll give them a bit more testing before I push up again.. Small tweaks ballooned into bigger changes.\nWith the build requests working as I intended, some parameters used to build the path started appearing in the query string so I had to adjust build_request_path to optionally remove the parameters that were used.\nInternal _ prefixed parameters found in nested resources were also leaking through so I had to ensure those were stripped out recursively rather than just at the top level.\nThe biggest change is the new \"autosave\" option. I had previously put hacks into my own gem to work around the fact that Her would nest associated resources in save requests, seemingly at random. This option now gives you control over this behaviour. I called it autosave because it is similar to the option found in ActiveRecord, where true always saves, false never saves, and nil only saves new records. I admit the name could be better though as people may think this saves associated resources in separate requests so I'm open to a different name. ActiveRecord defaults to nil but I have made true the default here to preserve existing behaviour. I have added a boat load of tests to make sure I got this right.\nThe Travis failures are expected because #298 now needs to be merged first.. Drat, after months of no issues and heavy use in production, my colleague ran into an infinite loop involving to_json. It looks very much like the earlier problem with inspect. Investigating.... It's not that. The new code does a better job of caching associated resources so you can easily end up with loops, hence why I had to fix this for inspect. This doesn't happen with to_json in ActiveRecord because it doesn't store associated records as regular attributes and doesn't otherwise traverse associations unless you explicitly include them.\nI have since realised that it is my own code including the ActiveModel::Serialization::JSON module and I thought the problem might go away if I remove this. However, it actually makes the problem worse, causing both to_json and as_json to blow up. I'll see if I can make it behave more like ActiveRecord.. Fixed it by implementing something similar to what ActiveRecord has. I'll push it up tomorrow when we've tried it a bit more.. Bah, the existing include_root_in_json stuff is colliding with ActiveModel's include_root_in_json stuff. I'll try to work it out but I don't even use that.. I've resolved that by removing the Her getter/setter method in favour of ActiveModel's class attribute. The class attribute does not combine the getter/setter like Her does so I had to add a compatibility fix, though maybe we could change the API to make it consistent. This would be self.include_root_in_json = true instead of include_root_in_json true.\nI haven't verified it but while working on this, I noticed that other similar variables like request_new_object_on_build may have a bug. It should only check the value for a parent class when the value for the current class is unset, not falsey. Using a class attribute would fix this and make it simpler but won't work for variables that have options like parse_root_in_json.\nruby\ndef request_new_object_on_build?\n  @_her_request_new_object_on_build || (superclass.respond_to?(:request_new_object_on_build?) && superclass.request_new_object_on_build?)\nend. I had barrels of fun rebasing this one following #491 but got there in the end. My concerns above about request_new_object_on_build and friends were actually addressed in #488 but this PR has now revealed that my compatibility fix is ineffective for subclasses. Still trying to figure out why but now it's the weekend. See you next week!. Rebased and dealt with the compatibility fix. It's quite nasty but it has to be because of how class_attribute works. I've tried very hard but you're welcome to come up with something better. I have tried to preserve existing behaviour in general but with the amount of change going on, it may be safer to do a major new release with a mention of possible breakage. Then we could simply drop the old syntax.\nI had undo the \"chop\" change from #495 because it broke one of the tests. I believe this was actually a mistake as the method name will not always end with ? or =. In the test, _user_id was chopped down to _user_i.. I've run into this but I'm not sure about this change as I think attribute_changed_in_place? is meant to detect changes to mutable objects that would not be visible in the changes hash. We don't have a raw database representation of the attributes to compare against like ActiveRecord does though so maybe this is the best we can do. A newer ActiveModel would be good but I guess that means Rails 5?. Rebased.. Rebased again.. And again!. Having thought about this some more, I'm wondering why we're caching these at all. I expected to find that respond_to? is relatively fast and that any small benefit this might have had would be lost following this change. This is a somewhat unscientific test but my results show that respond_to? is faster, even without this change.\n```ruby\nrequire 'benchmark'\nrequire 'set'\ntimes = 10_000_000\narray = [:foo, :bar]\nmethod = :first\nmethods = array.methods.to_set\nBenchmark.bm(20) do |bm|\n  bm.report('Set#include?') { times.times { methods.include?(method) } }\n  bm.report('Object#respond_to?') { times.times { array.respond_to?(method) } }\nend\n```\nuser     system      total        real\nSet#include?           0.980000   0.000000   0.980000 (  0.980424)\nObject#respond_to?     0.810000   0.000000   0.810000 (  0.810658). Aha. That was with Ruby 2.4. With 2.3, the results are reversed but there's still not much in it.\nuser     system      total        real\nSet#include?           0.890000   0.000000   0.890000 (  0.892254)\nObject#respond_to?     1.030000   0.000000   1.030000 (  1.036518)\nWith JRuby 9.1.13.0, respond_to? wins by a bigger margin.\nuser     system      total        real\nSet#include?           1.620000   0.000000   1.620000 (  1.102858)\nObject#respond_to?     0.690000   0.000000   0.690000 (  0.562755)\nI'm going to open an alternative pull request to remove the cache entirely.. Okay, I now see why respond_to? isn't used. Because of respond_to_missing?, it returns true for any method ending in =. Unfortunately calling methods on every iteration is proving very expensive and that explains why the cache was added. I guess this needs a rethink.... I have two ideas.\n\nUse a fibre-local variable to make respond_to_missing? return false while doing these checks. This feels a little ugly but otherwise has no downsides.\nCheck whether model.method(:foo=).source_location returns nil or raises a NoMethodError. The problem with this is that source_location also returns nil for native code.\n\nI much prefer the first one. They're both slower than the earlier approaches but much faster than calling methods repeatedly. The first one gets a small boost if you reset the variable to false rather than nil, presumably because nil deletes the variable, requiring it to be recreated next time. On a side note, passing a string to respond_to? is significantly slower than passing a symbol.\n```ruby\nrequire 'benchmark'\nrequire 'set'\nclass Foo\n  def bar=(value)\n  end\ndef respond_to_missing?(method, include_private = false)\n    !!Thread.current[:her_respond_to_missing]\n  end\ndef respond_to_without_missing_nil?(method, include_private = false)\n    Thread.current[:her_respond_to_missing] = true\n    respond_to?(method, include_private)\n  ensure\n    Thread.current[:her_respond_to_missing] = nil\n  end\ndef respond_to_without_missing_false?(method, include_private = false)\n    Thread.current[:her_respond_to_missing] = true\n    respond_to?(method, include_private)\n  ensure\n    Thread.current[:her_respond_to_missing] = false\n  end\nend\ntimes = 10_000_000\nfoo = Foo.new\nmethod = 'bar='\nBenchmark.bm(33) do |bm|\n  bm.report('Set#include?') { methods = Foo.instance_methods.map(&:to_s).to_set; times.times { methods.include?(method) } }\n  bm.report('Object#respond_to?') { times.times { foo.respond_to?(method) } }\n  bm.report('respond_to_without_missing_nil?') { times.times { foo.respond_to_without_missing_nil?(method) } }\n  bm.report('respond_to_without_missing_false?') { times.times { foo.respond_to_without_missing_false?(method) } }\n  bm.report('Object#method') { times.times { (foo.method(method) rescue nil)&.source_location } }\nend\n```\nMRI 2.4\nuser     system      total        real\nSet#include?                        1.470000   0.000000   1.470000 (  1.476836)\nObject#respond_to?                  1.410000   0.000000   1.410000 (  1.413980)\nrespond_to_without_missing_nil?     3.440000   0.000000   3.440000 (  3.447178)\nrespond_to_without_missing_false?   3.410000   0.000000   3.410000 (  3.407693)\nObject#method                       3.610000   0.010000   3.620000 (  3.626111)\nJRuby 9.1.13.0\nuser     system      total        real\nSet#include?                        1.800000   0.000000   1.800000 (  1.253027)\nObject#respond_to?                  1.470000   0.020000   1.490000 (  1.303870)\nrespond_to_without_missing_nil?     2.720000   0.010000   2.730000 (  2.513326)\nrespond_to_without_missing_false?   2.600000   0.000000   2.600000 (  2.390742)\nObject#method                       3.650000   0.010000   3.660000 (  3.214350)\nI'll file another pull request now.. Rebased. I think this one is particularly important and it stands alone from my other remaining changes.. I'm leaving the company soon and I'd like to get some (or all!) of these merged before I go. This one seems like a good start.. One week to go. :stuck_out_tongue: . This addresses the changes requested. I changed your suggested code slightly.\n\nNo dup is necessary.\nMore efficient to to_sym on insertion than symbolize_keys afterwards.\nNeed to symbolize_keys the serializable_hash if you want to keep everything symbolized.\nMy other branch indirectly includes ActiveModel::Serialization in Her::Model and others may do this already so I've used a case statement to avoid calling serializable_hash on Her::Model instances.. Well spotted. About to head out the door. I think this may miss some cases but I have an idea that I will try on Monday. Thanks!. I've tried to make this work but regardless of which approach I use, the id parameter is ignored here. I haven't figured out why yet and I'm very busy this week but hopefully I'll get time on Friday.. Found the reason. In use_setter_methods, both id and the actual primary key name are treated as reserved so assignment methods are not created for them when the record is instantiated. They end up in the unset_attributes hash in the assign_attributes method and simply get merged into the @attributes hash. This means that no change tracking is applied. If you directly assign new values using setter methods afterwards then change tracking does work because method_missing is invoked, which creates attribute methods without checking a reserved list first.\n\nIf I change use_setter_methods to not treat these as reserved then the above works but it breaks the handles new resource with custom primary key test. I need to find a way for the id method to not be redefined without blocking the creation of an id= method.. Although I think this should work and it does pass in the context of this branch, I'm getting 3 failures when merged with my other branches. Investigating.. Never mind, turned out I'd resolved a conflict the wrong way.. ",
    "mustela": ":+1: to have this feature\n. ",
    "giedriusr": "Nice idea.\n. True\n. @bitops I am not sure if I correctly understood your question. How about others? Would you like to rewrite your question?\n. Tenant in this case is a record from the database? Because Her supports multi API per model, you can find it in the documentation. Multi API per DB record, I doubt it. Try to poke maintainers of this gem.\n. Indeed. Please have a look at it.\n. Glad to see that things are moving :+1: \n. @sambao21 good catch!\n. I totally agree. \n. awesome \ud83d\udc4d \n. Such a great gem, sad to see it's inactiveness and lack of maintainers.\n. @mtwentyman I saw that post, but it's quite inactive. Hopefully her will find new home.\n. @tustar thanks. I don't think you correctly understood the initial issue.\n@model.custom_action #(GET or POST) is an instance not a class. I am aware that there is custom_get and custom_post, but it is valid only on class level, not an instance :/\n. @bf4 I am not complaining either :-) I agree that things change and life goes on.\n. :+1: \n. Yes\n. @siassaj  Gem is not maintained anymore.\n. > See #324, (no).\n\nWho has the best fork then?\n\nThere is no one best fork. I guess everyone uses it's own.\n. ",
    "d3vkit": "Thanks for the help, that was the problem. Might be a good thing to note in the docs (but I do seem to be the only one that didn't do it right :P)\n. Geez, I can't believe I didn't even try just adding it in the initialize method. Thanks very much for the quick (and kind!) response.\n. I've since changed this to a non-polymorphic relationship, and it still doesn't call the association from the API when calling just client.document_cap. However, client.document_cap.fetch will force it to do the call. I didn't see this in the docs; is it intentional?\n. Ah okay, I was confused because the docs read:\nruby\n  # If there\u2019s no association data in the resource, Her makes a HTTP request to retrieve the data.\n  # has_one association:\n  @user.role\n  # GET \"/users/1/role\"\n  # => #<Role id=1>\nWhich I thought meant it was going to call right then for it.\n. Cool, thanks for the (as always) quick and courteous responses!\n. I was just about to open an issue about this very thing. So far I have tried sending the pagination info as the meta key, but then my collection being returned is just an array and not easily manipulated without a lot of work. I have been able to add pagination headers from my Server that is sending back the collection, but I am not sure how to access those from Her (I believe it would be in a Faraday on_complete middleware) - I just can not get this to work no matter what I do! Hopefully someone else can answer this, sorry I don't have more info myself!\n. I believe I have figured this out. I wrote a pretty detailed explanation on stackoverflow (where I had asked about this before). Let me know if there is anything confusing or missing!\nhttp://stackoverflow.com/a/16701588/398696\n. Oh this is a lot better. This helps me understand Faraday middleware a bit more. Thanks!\n. ",
    "zymtx5g79k": "The same error for faraday 0.9.1\nvendor/bundle/ruby/2.2.0/gems/faraday-0.9.1/lib/faraday/adapter/net_http.rb:82:in perform_request'\nvendor/bundle/ruby/2.2.0/gems/faraday-0.9.1/lib/faraday/adapter/net_http.rb:40:inblock in call'\nvendor/bundle/ruby/2.2.0/gems/faraday-0.9.1/lib/faraday/adapter/net_http.rb:87:in with_net_http_connection'\nvendor/bundle/ruby/2.2.0/gems/faraday-0.9.1/lib/faraday/adapter/net_http.rb:32:incall'\nvendor/bundle/ruby/2.2.0/gems/faraday-0.9.1/lib/faraday/rack_builder.rb:139:in build_response'\nvendor/bundle/ruby/2.2.0/gems/faraday-0.9.1/lib/faraday/connection.rb:377:inrun_request'\nvendor/bundle/ruby/2.2.0/gems/elasticsearch-transport-1.0.6/lib/elasticsearch/transport/transport/http/faraday.rb:21:in block in perform_request'\nvendor/bundle/ruby/2.2.0/gems/elasticsearch-transport-1.0.6/lib/elasticsearch/transport/transport/base.rb:187:incall'\n...\nI'm using in rake application. In Rails all right.\n. ",
    "sethbro": "+1 (assuming introspection tests are made to pass). My API resides at http://something.com/api & I've been tearing my hair out wondering why Her omitted the api segment despite its presence in API.setup. This seems like the intuitive default. One should not have to specify collection_path for every model.\n. ",
    "jmlacroix": "Thanks for reminding me to fix this. I had problems with the tests a while back and wrongly assumed it was the same error. Should have read it more carefully.\n. That's fine with me, but what's the alternative to access the errors through the Model?\n. ",
    "alfius": "I'm in the need of something like this now. I would like to be able to do:\n``` ruby\nadmin_api = Her::API.new do |c|\n  c.use FaradayMiddleware::OAuth2, @admin_token\nend\nuser_api = Her::API.new do |c|\n  c.use FaradayMiddleware::OAuth2, @user_token\nend\nUser.scoped_api(admin_api).all.first  # uses the admin token\nUser.scoped_api(user_api).all.first  # uses the user token\nit should also support relationships:\nUser.scoped_api(user_api).find(1).profiles.first  # /profiles should be retrieved using the scoped api\n```\nI've been trying to make this change in Her but apparently this might require a major refactor that separates the models from the apis. Are there any plans to add this feature?\n. Another option might be to introduce the idea of a Connection, untying the Faraday options from the Api object. A Connection could then be specified on the same way as my previous comment. Note that this will require an important refactor as well.\n. @pencil thanks! That helps, although the app I'm dealing with makes the two types of requests (admin and current user) and I can't find a way to send that information down to the proc :\\\n. I created a PR that adds an option so that Her only sends the modified attributes on update/create: https://github.com/remiprev/her/pull/157\n. Added fix so it works on ruby 1.8.7 too.\n. @pencil Thanks for the feedback! I updated the PR, so now we're using her_api instead of going directly to default_api.\n. Thanks for the review!\nRemoving that line would break the scenarios where the option is not set and the body is nil.\nI added this as an option so the current behavior didn't change but maybe always accepting empty responses sounds reasonable?\n. Agreed. I'll change that in the morning and create a new PR. Thanks! \n. @pencil PR updated!\n. ",
    "m3talsmith": "That's almost the precise example for using a proc - the need to\ndynamically choose an API for use_api.\nOn Aug 17, 2013 2:28 AM, \"Nils Caspar\" notifications@github.com wrote:\n\n@alfonsocora https://github.com/alfonsocora You would want to have some\nkind of class attribute on the model or a global variable. In your Proc you\nwould check this to decide what API to use. It's an ugly workaround, but it\ncould work [image: :grin:]\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/remiprev/her/issues/25#issuecomment-22808610\n.\n. Done. Sorry about that.\n. Changed that.\n. Sorry. I missed that bit.\n. Any comments on this?\n. There is a slight legacy issue between 1.9.2 and 1.9.3 as well @pencil : mainly due to activemodel and active support depending on a minimum of 1.9.3 for version >= 4.0.x - that was really the main purpose for writing this. There's no easy way to differentiate between the two in bundler as a platform. Having 1.8.x support was just a bonus :smiley_cat: \n. Great idea :)\n. \n",
    "mollrow": "Looks like this isn't fixed? When I do a #all or use scopes with where statements I get the values filled into the path and added to query params.\n. ",
    "coveralls": "\nChanges Unknown when pulling f5df58ea8eb3becd4224359fc7390b25baa94108 on thomsbg:feature-class-inheritable-hooks into * on remiprev:master*.\n. \nChanges Unknown when pulling c62cab296e9baa43028c0828ef39977b1b322fe3 on fix-dirty-and-dynamic-attributes into * on master*.\n. \nChanges Unknown when pulling e224b315d52683d4ea8da3c61567fdc73fb66d7c on alfonsocora:accept_empty_responses into * on remiprev:master*.\n. \nChanges Unknown when pulling 8a3f5789a65958d41072c372cff77c4bbe5d7bad on mmell:master into * on remiprev:master*.\n. ",
    "jewilmeer": "Tnx, that will work for now!\n. ",
    "espen": "Not sure to open a new issue or not for this. But shouldn't Group.put(\"15/approve\") call /groups/15/approve? In my code this calls /15/approve. I have to specify Group.put(\"groups/15/approve\").\nBtw would be awesome to be able to do this: custom_member_post :approve and then group.approve.\n. Any way to force a request when using an API that doesn't specify caching? Basically I want the resource to expire when doing an update or be able to invalidate it manually. I am using faraday middleware for caching. I tried using faraday-http-cache but could not get it to cache anything at all but I assume it would have the same issue if it worked.\n. This is very confusing for someone expecting AR-like methods and probably breaks some poorly tested apps. Any reason not to alias new to new_record ?\n. Can confirm this works. Thanks for the quick fix @zacharywelch \ud83c\udf89. ",
    "7h3kk1d": "I also notice that I have to manually specify /groups\n. In regards to singular resources. According to http://jsonapi.org/format/#document-structure-individual-resource-representations singular resources don't need ot be wrapped in an array. AMS using json_api format can also sends it this way.\n. I realize this is an old issue but is this supposed to allow you to iterate through the paginated collection transparently?\n. I wrote a pager that I'm going to move into a mixin that allows me to handle my paginated resources. It requires a page scope on the model.\n``` diff\ndiff --git a/lib/her/model/relation.rb b/lib/her/model/relation.rb\nindex 2daa80b..0e9595d 100644\n--- a/lib/her/model/relation.rb\n+++ b/lib/her/model/relation.rb\n@@ -73,6 +73,10 @@ module Her\n         end\n       end\n\ndef paged\nPager.new self\nend\n+\n       # Fetch specific resource(s) by their ID\n       #\n       # @example\n@@ -159,6 +163,31 @@ module Her\n       def clear_fetch_cache!\n         instance_variable_set(:@_fetch, nil)\n       end\n+\n+\nclass Pager < Struct.new(:collection)\ninclude Enumerable\n+\ndef each\nfetch(1) do |item|\nyield item\nend\nend\n+\nprivate\n+\ndef fetch(page_number, &block)\nresponse = collection.page(page_number)\n+\nresponse.each do |item|\nyield item\nend\n+\nif response.count > 0\nfetch(page_number + 1, &block)\nend\nend\nend\n     end\n   end\n end\n```\n. :+1: \n. Does this fix https://github.com/remiprev/her/pull/266?\n. It was an issue when testing. It could have been a problem in production though. Basically we were assuming the method would work because in test data it was.\n. \n",
    "luxflux": "Any news on this one? Would be interested too. Would you accept pull request which change this behaviour?\n. Cool! Thank you!\n. Yep, this could be. @remiprev what do you think? Are you even interested in this PR?\n. Okay, finally got the time to rename :)\n. No problem. Thank you for your work!\n. Added some tests for the code of @pencil. Also discovered that it has been assigned twice in the initializer of Her::Collection (1ee17acc7a8aa77b52b37d9482a004dcd7918e70).\n. Erm, this build passes! There was something wrong with travis!\n. @remiprev What do you think?\n. Any news on this one? Would like to see this merged. :+1: \n. I totally missed this issue, sorry!\nI tested it now and there is now a strange behaviour:\nruby\nrecord = User.find(1)\nrecord.changes # => {\"username\"=>[nil, \"blubb\"], \"password\"=>[nil, \"yolo90\"]}\nIt seems like there is now already a change detected when the attribute is initially set.\n. Yeah! This is so true! :thumbsup: \n. YEAH!\n. ",
    "wingrunr21": "I'd like to see this merged. We have some large objects being pulled in via JSON and it is proving to be expensive to build all of them.  Profiling reveals writer_method_defined? is responsible for a good chunk of it.\n. My app is also looking solid\n. I work for CustomInk. We are moving off of ActiveResource for consuming data from our catalog management system.\n. Excellent thanks.\n. In the current API (v0.4.1) query parameters do not get appended for me when used with relations. They do work properly when used from top-level finders.\n```\nuser = User.find(1, foobar: true)\n=> GET /users/1?foobar=true\nuser.projects(foobar: true)\n=> GET /users/1/projects\n```\nI've created a gist that illustrates the problem:\nhttps://gist.github.com/wingrunr21/5111857\n. ",
    "thomsbg": "fwiw, I've been running this code in production for a month or so, no problems.\n. I work for Vox Media, where we're using Her to consume an internal API that powers the games data on Polygon, and the Products data on The Verge\n. I think :inverse_of would be the more ActiveRecord-y name for this option.\n. ",
    "cored": "I just happend to see this comment in here and tried the code above, but the cattr_accessor seems not work inside an Included block, don't know if the problems is due to the fact that we are trying to add that behaviour to a module instead of a class. I created some code explicit it defined the code. But I don't think that the tests I made stress the entire thing. Check it out and tell me what you think, here is the pull request. \nPull Request\n. @remiprev So you suggest to make the changes and start using this instead of :id ? I just want to know to be in the same page as you.\n. ",
    "natebird": "Yep. That was the issue. Nice to see you supporting Strong Parameters already. :-)\n. Ahh. Of course it is that easy. Thanks for the quick response.\n. Thanks for the explanation. I'll try that out.\n. ",
    "simonc": "I think there should be a way to add this option to Her because otherwise it prevents from interacting with an existing Rails app.\nFor instance, I'm playing with an app using ActiveAdmin, I'd like to not modify the controller behavior to handle Her calls.\nI'll open a PR to add some kind of option to allow wrapping data, it should be pretty simple I think :)\n. And done ! :)\n. De rien  :)\nPar contre je pense qu'au niveau du projet il est pr\u00e9f\u00e9rable de causer en anglais ;)\n. Here is the patch I'm thinking about:\n``` ruby\nmodule Her\n  module Model\n    module ORM\n  def has_key?(attribute_name)\n    respond_to?(attribute_name)\n  end\n\n  def [](attribute_name)\n    attribute_name = attribute_name.to_sym\n\n    if !@data.has_key?(attribute_name) && respond_to?(attribute_name)\n      public_send(attribute_name)\n    else\n      @data[attribute_name]\n    end\n  end\n\nend\n\nend\nend\n```\nThe !@data.has_key?(attribute_name) is not mandatory but it avoids a method call if the value is already present.\nDo you think it could be ok that way ? I already tried the code and it works just fine.\n. Hmm, I have a small issue with the tests.\nThe feature concerns Orm for the @data part but concerns Relationships for the relation part.\nWhat is your advice in this case ? Here are the options that come to my mind:\nWrite the tests in orm_spec.rb\n- Pro: it doesn't make the code too complex since everything stays in Orm\n- Con: it makes the Orm tests aware of relationships\n- Con: it doesn't respect SRP\nWrite the tests in relationships_spec.rb\n- Pro: it's cleaner regarding to SRP\n- Pro: it makes usage of [] and has_key? in other modules doable\n- Pro/Con: Relationships should implement [] and has_key?\n- Con: Model cannot implement [] and has_key? and super would raise an error if no module responds\n- Con: Orm and Relationship must call super to allow call bubbling\n- Con: Model would need to include Relationships and extend a Relationships::ClassMethods module\nWrite the tests in model_spec.rb\n- Pro: it respects SRP\n- Pro: Orm is not aware of relationships\n- Pro/Con: Relationships implements get_relationship and has_relationship?\n- Pro/Con: Model implements [] and calls get_data or get_relationship\n- Pro/Con: Model implements has_key? and calls has_data? or has_relationship?\n- Pro/Con: Orm#[] and Orm#has_key? are renamed to Orm#get_data and Orm#has_data?\nIMHO I would go for the third since the only con is changing the Orm api but it's not a serious one since the Model api doesn't change.\n. Yup ;) I do that.\n. Done ;)\n. Ok, very sorry for the noise. I just found the Faraday::Response::RaiseError middleware.\nFor the record:\nruby\nHer::API.setup url: 'http://api.example.com' do |co|\n  co.use Faraday::Request::UrlEncoded\n  co.use Her::Middleware::DefaultParseJSON\n  co.use Faraday::Adapter::NetHttp\n  co.use Faraday::Response::RaiseError\nend\n. After putting some thoughts to it, maybe just doing the following is enough:\n``` ruby\nclass User\n  include Her::Model\ndef to_params\n    { user: super }\n  end\nend\n```\nNo syntactic sugar here be it's pretty short and clear :)\n. ",
    "mattiassvedhem": "Of course.\nHAL is a hypermedia type built on top of JSON and XML. It adds semantics for specifying links and embedded data to represent a resource in a HATEOAS way. The resource should be a representation of the current state of the application and provide the client with actions to progress the state.\nRoar has built in parsing support for application/hal+json & application/hal+xml although I don't think they are following Mike Kelly's spec 100%. We're using it to create a Hypermedia driven API for our application. The benefits as I see it is that it creates a more loose coupling between client and server as you don't need to construct the urls on the client.\nSo basically it would boil down to creating a parser middleware for application/hal+json. Then you might consider to include it in the library. I'll see what I can come up with.\nIf you are curious about Hypermedia API's you might want to check out Steve's book or his talks on the subject.\n. I haven't really grasped the whole library yet, but maybe we could have some configuration for turning on \"automatic data root from model name\". And then a method on the model for customizing the root name per model? \n. Awesome @remiprev, Will check it out!\n. After testing several models this way it does seem to work pretty well.\n. ",
    "ekampp": "@remiprev I'm in the position that I'd love to use Her for a project. The backend delivers HAL JSON, so I need to develop a middleware to parse the JSON. \nHAL formats the JSON like this:\njson\n{\n  \"_embedded\": {\n    \"users\": [\n      {\n        \"id\": 1,\n        ...\n      },\n      ...\n    ]\n  }\nCan you guide me to where in the Her project I should map the name of the class calling the endpoint, and the nesting in the JSON? \nUpdate\nI have managed to parse the JSON, but I need to change the key, with which the associations are bound to the object, e.g. User.find(1).articles should look in the JSON key [:_embedded][:articles], not just [:articles].\nUpdate\nI have been able to pinpoint where associated collection are being parsed. Adding this bit of code seems to allow me to pass the [:_embedded] to the new_collection method. \nruby\nelsif parsed_data[:data].is_a?(Hash) && hal_format?\n  new_collection(parsed_data)\nAnd adding this bit of code to the attributes allows me to correctly pull out the association in the [:_embedded] part of the HAL JSON. \nif request_data[:data].is_a?(Hash) && hal_format?\n  request_data[:data][:_embedded][root_element]\nI'm defining the hal_format? like this, right now, in an initializer, simply to get going. This will be moved somewhere more appropriate at some point. \n``` ruby\nmodule Her\n  module Model\n    module HTTP\n      module ClassMethods\n        def hal_format?\n          true\n        end\n      end\n    end\n  end\nend\nmodule Her\n  module Model\n    module Parse\n      module ClassMethods\n        def hal_format?\n          true\n        end\n      end\n    end\n  end\nend\n```\nThe issue is now, that I'm getting a stack level to deep. This is \u2013 as you know \u2013 notoriously hard to debug, so any help here is appreciated.\nInspecting the generated collection via new_collection(parsed_data).tap { |c| puts c.inspect } gives me a (seemingly) correct array of objects. But does this trigger another run at the get_raw method that I enhanced at the very beginning? \n```\n=> [#, ...]\n```\nWhat is the upstream caller of the get method, when accessing an association? E.i. User.find(1).articles.all, the one using the aforementioned collection.\nThanks in advance. \n. @hubert Added a spec :+1: \n. ",
    "AwakenTheJaken": "I hate to dig up an old thread, but in my search for a solution to this I stumbled across it and I wanted to share what I learned. What I did was create a Faraday Response Middleware and parsed the data like this:\nclass Akeneo::Parser < Faraday::Response::Middleware\n  def on_complete(env)\n    json = MultiJson.load(env[:body])\n      env[:body] = {\n        data: json['_links'].blank? ? json : json['_embedded']['items'],\n        errors: json[:errors]\n      }\n  end\nend\nIt isn't the most robust solution as it is only checking if the response contains ['_links'] but it works for my needs. I hope this will help someone else with a similar issue or even lead to a better solution!. ",
    "ceicke": "No, that wasn't the problem. I even tried it out without any authentication in there hoping to run in a 403. \n. I wasn't able to resolve the problem and have therefore moved on to implementing the REST interface that I connect to with pure HTTP calls. I think you can close this issue and wait if it comes up again. I was implementing \"her\" in a really complicated project, so maybe there were some side effects from other Gems etc.\n. ",
    "teamon": "I have the same issue, and I know why.\n``` ruby\nclass A::B::C\n  include Her::Model\nend\nC.find(1) produces path like \"a::b::c/1\"\n. I was referencing older version of her (0.2.x), 0.4.1 resolved that issue (not sure if exactly 0.4.1, but 0.4.1 works for me)\n. Take a look at https://github.com/plataformatec/faraday-http-cache/\n. Actually I did :) On Her side this is as simple as adding `c.user :http_cache` to faraday connection middleware. In fact Her does not care (nor it should) about cache at all, it is all done at the faraday's level by using standard HTTP headers based cache. So on client side this is really just a oneliner. On server side take a look at stuff like `expires_in` \n. Meh, I read my post again - please forget it. I'll prepare something serious for docs :)\n. ruby\napi = Her::API.new\napi.setup :url => \"http://some.api.com\" do |c|\n  ...\n  c.use :http_cache, Rails.cache, :logger => Rails.logger # from faraday-http-cache gem\n  c.adapter Faraday.default_adapter\nend\nclass Post\n  include Her::Model\n  uses_api api\nend\n```\nSomething like this should be fine\n. It is not really releated to primary_key but to the presence of primary key value at all. Looks like if I want nested object to be properly initialized I need to have both user hash and user_uid property. \n. @remiprev pretty please please\n. ",
    "brissmyr": "I got the same error but eventually got it working. It turned out that I was missing a \"http://\" in Her::API.setup(url: \"http://mysite.com/api\")\n. +1\n. ",
    "billc": "I received the same error and determine from the source I needed to call the header method to set user, pass.\nc.use Faraday::Request::BasicAuthentication.header user, password\n. I am having a similar issue with attempting to destroy_existing on a nested resource. Has any progress been made to address this issue?\n. @joshblour Do you have a gist of how you used delete_raw as a work around?\n. Actually, I have a need for just the functionality being called out. Although I agree its not the expected functionality, but I would like a way to influence including the id in the URL for a post.\n. I am wishing to output the serialized request prior to submitting to the server.\n. Much appreciated.\n. On further implementation, the puts Request is outputting the body of the response and not the body of the request sent. Is it possible Faraday is overriding the body with the response body before the puts?\n. Doing some added research, I found Issue 176 that exhibits the desired behavior for example 2 above. For example 1, I am testing using the collection_path but my obstacle is it only should apply to the POST operation.\nI agree with your comment @pencil. Although, I don't want to introduce non-resource oriented APIs I've gone so far with Her. I am just checking to see if there are options to work around that I have not seen yet. \n. If I understand correctly Accept indicates what the client will accept in response. I am looking to set Content-Type to application/json to indicate what the client is sending,\n. Excellent. Learning more and more. Thanks for your elaborate response.\n. Just to be clear though....is this additive or should I replace \nc.use Her::Middleware::DefaultParseJSON\n. Super kewl!\n. Through some experimentation I found if I set the id of the model and perform a create, Her will invoke a PUT with the full resource url.\n. @SirRawlins I did not find an elegant solution and have since moved on to a different project. My hack is below. Its at least functional. Hope it helps.\nruby\nit 'creates a member successfully' do\n     @group = 'tstream:Canary-UI_Discuss'\n      member = Member.add(@group, {\"id\"=>\"tt3683\", \"kind\"=>\"person\"})\nend\n``` ruby\nclass Member\n  include Her::Model\n  collection_path \"groups/:group_id/members\"\n  primary_key :clientId\n  include_root_in_json true\n#belongs_to :group\nattributes  :id, :clientId, :kind, :name, :url\ndef self.add(group_id, attributes)\n    # must include root in json manually\n    payload = Hash.new\n    payload[\"member\"] = attributes\npost_raw \"groups/#{group_id}/members\", payload\n\nend\ndef self.destroy_existing(group_id, id)\n    delete_raw \"groups/#{group_id}/members/#{id}\"\n  end\nend\n```\n. ",
    "tdtadeu": "I know this is an old thread, but I ran into this same problem just now and thought it'd be useful to warn other people to double check a missing http:// in the beginning of the url.\nThat solved it for me. :wink: \n. ",
    "nickweavers": "I am not able to get basic authentication working,. Here's what I have tried:\nHer::API.setup :url => \"https://my.favourite_api.org\" do |connection|\n# Authentication\n  connection.use Faraday::Request::BasicAuthentication \"itsme\", \"letmein\"\nThe RubyMine debugger tells me:\nUncaught exception: undefined method `BasicAuthentication' for Faraday::Request:Class\nCan anyone help?\n. It was simply a missing comma:\nconnection.use Faraday::Request::BasicAuthentication, \"itsme\", \"letmein\"\n. ",
    "jhirbour": "@nickweavers comment works for me. I added a PR to the readme.. ",
    "flop": "This line seems to have been missed for this patch :\nerrors = @resource.response_errors.join(\", \")\nhttps://github.com/remiprev/her/blob/master/lib/her/errors.rb#L22\nThere is no join for hashes.\n. I've tought about it and I don't think there is a generic way to format the errors hash because everyone will have something different in it. For example, I  have : \n{:type=>\"internal\", :message=>\"quote[shipper][country] is invalid, quote[recipient][country] is invalid\"}\nSomething like a customizable proc (or an interpolated string) in the configuration is probably needed but I don't think it's worth the pain just for displaying the errors on \"save!\"\nDo you think a to_s on the hash is sufficient ? \n. I just looked in https://github.com/remiprev/her/blob/master/spec/model/orm_spec.rb and every errors are in arrays...\n. sorry for the noise, my problem was elsewhere.\n. ",
    "skelz0r": "You should add this snippet to the README.\n. ",
    "joanniclaborde": "Yes the fix looks similar.\n. ",
    "seanreads": "Just checking to ask if this pull request is good to go for the next release of Her. I'll be more than happy to fix up any issues, if any are found. Also, I'm happy to update the docs, if you like.\n. w00t!\n. ",
    "CharlieWhite": "Ahh, thanks! Good to know.\n. ",
    "rafaelgonzalez": "Hi,\nHow would you suggest we do if we need ActiveRecord?\nI have an app that implements an API with Her, but uses ActiveRecord for session storage.\nI get the same error \"undefined method `delete' for nil:NilClass\" actually when I test my models with RSpec (the actual app works)\nAnd I think it's rather reasonable to want an app that implements APIs and also needs database storage (i.e ActiveRecord)\nI have followed your steps on the wiki to stub my tests, see my code :\n``` ruby\napp/models/basic\nclass Basic\n  include Her::Model\ndef self.rate_limit\n    r = self.get('/rate_limit')\n    if r.respond_to?(:rate)\n      return r.rate\n    else\n      {\n        limit: 'unknown',\n        remaining: 0\n      }\n    end\n  end\nend\n```\n\n``` ruby\nspec/spec_helper\nRSpec.configure do |config|\n  config.include(Module.new do\n    def stub_api_for(klass)\n      klass.uses_api (api = Her::API.new)\n  # Here, you would customize this for your own API (URL, middleware, etc)\n  # like you have done in your application\u2019s initializer\n  api.setup :url => \"https://api.github.com\" do |connection|\n    connection.use Her::Middleware::DefaultParseJSON\n    connection.adapter(:test) { |s| yield(s) }\n  end\nend\n\nend)\nend\n```\n\n``` ruby\nspec/models/basic_spec\nrequire \"spec_helper\"\ndescribe Basic do\n# Stubbing\n  before do\n    stub_api_for(Basic) do |stub|\n      stub.get(\"/rate_limit\") do |env|\n        {\n          rate: {\n            limit: 60,\n            remaining: 60\n          }\n        }\n      end\n    end\n  end\ndescribe \"::rate_limit\" do\n    before(:each) { @rate = Basic.rate_limit }\ncontext \"API return value is malformed\" do\n  before(:each) { @rate.stub(:respond_to?).and_return false }\n\n  it 'should return specific hash' do\n    @rate[:limit].should eql 'unknown'\n    @rate[:remaining].should eql 0\n  end\nend\n\nit 'should return correct values in hash' do\n  @rate[:limit].should eql 60\n  @rate[:remaining].should eql 0\nend\n\nend\nend\n```\nThe RSpec output : \n```\nFailures:\n1) Basic::rate_limit should return correct values in hash\n     Failure/Error: before(:each) { @rate = Basic.rate_limit }\n     NoMethodError:\n       undefined method delete' for nil:NilClass\n     # ./app/models/rate_limit.rb:6:inrate_limit'\n     # ./spec/models/basic_spec.rb:21:in `block (3 levels) in '\n2) Basic::rate_limit API return value is malformed should return specific hash\n     Failure/Error: before(:each) { @rate = Basic.rate_limit }\n     NoMethodError:\n       undefined method delete' for nil:NilClass\n     # ./app/models/rate_limit.rb:6:inrate_limit'\n     # ./spec/models/basic_spec.rb:21:in `block (3 levels) in '\nFinished in 0.01013 seconds\n4 examples, 2 failures, 2 pending\nFailed examples:\nrspec ./spec/models/basic_spec.rb:32 # Basic::rate_limit should return correct values in hash\nrspec ./spec/models/basic_spec.rb:26 # Basic::rate_limit API return value is malformed should return specific hash\n```\nAnd the stack trace : \nrake aborted!\n/Users/Raf/.rvm/rubies/ruby-1.9.3-p362/bin/ruby -S rspec ./spec/controllers/github_mates_controller_spec.rb ./spec/controllers/sessions_controller_spec.rb ./spec/models/basic_spec.rb ./spec/models/collaborator_spec.rb ./spec/models/repo_spec.rb ./spec/models/user_spec.rb failed\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362/gems/rspec-core-2.12.2/lib/rspec/core/rake_task.rb:156:in `run_task'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362/gems/rspec-core-2.12.2/lib/rspec/core/rake_task.rb:124:in `block (2 levels) in initialize'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/file_utils_ext.rb:61:in `verbose'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362/gems/rspec-core-2.12.2/lib/rspec/core/rake_task.rb:122:in `block in initialize'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/task.rb:228:in `call'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/task.rb:228:in `block in execute'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/task.rb:223:in `each'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/task.rb:223:in `execute'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/task.rb:166:in `block in invoke_with_call_chain'\n/Users/Raf/.rvm/rubies/ruby-1.9.3-p362/lib/ruby/1.9.1/monitor.rb:211:in `mon_synchronize'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/task.rb:159:in `invoke_with_call_chain'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/task.rb:152:in `invoke'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/application.rb:143:in `invoke_task'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/application.rb:101:in `block (2 levels) in top_level'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/application.rb:101:in `each'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/application.rb:101:in `block in top_level'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/application.rb:110:in `run_with_threads'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/application.rb:95:in `top_level'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/application.rb:73:in `block in run'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/application.rb:160:in `standard_exception_handling'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/lib/rake/application.rb:70:in `run'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/gems/rake-10.0.3/bin/rake:33:in `<top (required)>'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/bin/rake:19:in `load'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362@global/bin/rake:19:in `<main>'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362/bin/ruby_noexec_wrapper:14:in `eval'\n/Users/Raf/.rvm/gems/ruby-1.9.3-p362/bin/ruby_noexec_wrapper:14:in `<main>'\nTasks: TOP => spec\n. Doh, of course!\nYou had it documented on the wiki, but upon reading it I just assumed the 200, {}, was part of the response body. \nThanks a lot for your time!\n. Let's all support #399 !\n. ",
    "markmcconachie": "has_one takes an optional attrs hash and this can include a  :class_name. Setting the classname makes this work without renaming other things\u2026\n```\nclass Person\n  include Her::Model\nhas_one :details, :class_name => 'Details'\nend\n```\n. No problem, just being helpful :)\n. ",
    "thibaudgg": "Awesome, can't wait!\n. I have found that adding the Faraday::Request::UrlEncoded middleware fix that bug, my bad to not having followed the README properly. Sorry!\n. ",
    "rmcafee": "As a note - with a little work you can get this to work pretty darn well now. We actually use it in a project and put together a Her::ActiveModel module which we include in our classes to get the ActiveModel goodness we need. Our module isn't perfect - but, so far it's been working pretty darn good!\nKeep up the good work on this very useful gem!\n. ",
    "mesozoic": "I just opened pull request #86 as a proposed solution that does not involve overwriting the id method.\n. It looks like I forgot to include a couple commits that replace other instances of :id with a call to the primary_key_field method. So the approach is up for discussion, but the branch is not quite ready to merge. I'll add another note once those commits are part of the pull request.\n. Okay, now I believe this covers everything that would need to change in order for a developer to use Id or object_id or any other attribute name as the primary key for a particular model.\n. I checked Travis and it looks like my earlier pull request failed on 1.8.7.\nThis one is good to go: https://travis-ci.org/remiprev/her/builds/6085485\n. Glad to help! Thanks for merging this one in.\n. I have to respectfully disagree. Pushing this down to Faraday middleware makes the implementation less cohesive. We'd have to worry about a larger set of edge cases that come from relying on the transport mechanism to change characteristics of the request without our business logic knowing about it.\nI think a reasonable analogue would be custom URLs: the principles of REST say that a Document should live at /documents/:id, but if (for whatever crazy historical reason) a Document must live at /docs/:api_key/:id, we don't rewrite URLs in the middleware; we configure the Document model.\nCompare:\nruby\nclass Document\n  method_for :update, :post\n  method_for :create, :put\nend\nTo:\n``` ruby\nclass SwapPostAndPutMethods < Faraday::Middleware\n  def initialize(app, *args)\n    @app = app\n  end\ndef call(env)\n    env[:method] =\n      case env[:method]\n      when :post then :put\n      when :put then :post\n      else env[:method]\n      end\n@app.call(env)\n\nend\nend\nclass Document\n  class API < My::Library::API\n    def setup(*args, &block)\n      super\n  connection.use SwapPostAndPutMethods\nend\n\nend\nuses_api API\nend\n```\nMy last argument in favor of the pull request: for most of Her's users, this can remain an internal implementation detail. But it's applied the refactoring practice of replacing magic values with a constant method, which is (I believe) a net positive for the code base. If that argument makes it easier to accept the change, I'd be happy to update the pull request to replace other magic HTTP method values (e.g. :get and :delete).\nUltimately it's your call, but we'll probably keep our version forked if this doesn't make it into the library.\n. Thanks for reconsidering! The branch is ready to go, I believe.\n. Awesome; thanks!\n. Thanks! We will eagerly await 0.6.3 to resume using your packaged gem in our project.\n. Awesome, thanks! Looking forward to the next release :)\n. ",
    "i0rek": "This will probably fix the error (see docs):\nruby\nrequire 'typhoeus/adapters/faraday'\n. @dlorson \n\nExcept for one important detail: Faraday requests use a shared Hydra instance, which is not thread-safe. So I monkey-patched the adapter to use Typhoeus::Request.run, which spawns its own, per-request Hydra instance. Problem solved.\n\nWhich version of Typhoeus are you using? Since 0.5 Typhoeus::Request.run doesn't use a hydra any more. Instead it really blocks now - so be careful.\n. Actually - I might have been wrong. Although Request#run blocks the GIL is released so that the other thread can run too. \n. ",
    "jphenow": "That did the trick for the error\n. ",
    "dlorson": "I'm working on an app that communicates with two independent service APIs, and Her is a great ORM, so I've been interested in request parallelization too.\nThe ActiveRecord pattern in Her makes it more involved to add an asynchronous callback mechanism.  The common solution is to return proxy objects for (collections of) model objects.  They are then replaced by the mapped data from the response.\nActually, this is the pattern followed by the parallel support in Faraday (see their wiki).  It's not fully asynchronous though, as the calling thread is blocked until the request group fully completes.\nI'm interested in helping out with an implementation, but I'm relatively new to Ruby so any pointers are welcome.\nFor the time being, I tried to find a quick-and-dirty solution.  If you add the Typhoeus adapter as middleware, all Faraday requests run through Hydra, which is I/O nonblocking:\nruby\nmy_api = Her::API.new.setup(host) do |connection|\n  connection.use Faraday::Adapter::Typhoeus\nend\nHowever, enclosing multiple Her requests in a Faraday in_parallel block is not possible, since Her expects an immediate response.\nSo I just run every request in its own thread:\nruby\nf = Thread.new { @features = Feature.all }\na = Thread.new { @articles = Article.all }\nf.join; a.join\nThis works fine, because Hydra is used (providing nonblocking I/O) and while one thread is blocked, it's perfectly possible to start a second request on a second thread.\nExcept for one important detail: Faraday requests use a shared Hydra instance, which is not thread-safe.  So I monkey-patched the adapter to use Typhoeus::Request.run, which spawns its own, per-request Hydra instance.  Problem solved.\n``` ruby\nmodule Faraday\n  class Adapter\n    class Typhoeus < Faraday::Adapter\n  def perform_request(env)\n    read_body env\n    request(env).run\n  rescue Errno::ECONNREFUSED\n    raise Error::ConnectionFailed, $!\n  end\n\nend\n\nend\nend\n```\nIt's hardly an elegant solution, but it does the job.  Runtime equals the longest request time.  Note that my use case is a couple of service calls as part of a client Rails app controller action.  YMMV if you're doing heavy fetching in a background task.\n. @i0rek\nThanks for the heads up!  I was indeed confused by an outdated RDoc+source.  However, I'm on the latest version from RubyGems.org (Ethon 0.5.8, Typhoeus 0.5.4).\nI see that Typhoeus::Request is now using the Easy interface as opposed to the Multi one that Hydra uses.  But since my request timings were fairly unambiguous, I experimented a bit further:\n- Using a per-thread Hydra in the Faraday adapter didn't yield any difference in request times\n- Removing any single request didn't affect the time of the other one\nSo finally, taking the aforementioned controller action and artificially increasing the response time of each service API by 5.0 seconds yields the following:  (art and sci are the service APIs, front is the client app)\n```\n16:59:17 front.1      | Started GET \"/\" ...\n16:59:17 art.1        | Started GET \"/consumer/articles\" ...\n16:59:22 art.1        | Completed 200 OK in 5098ms (Views: 90.9ms | ActiveRecord: 5.6ms)\n16:59:22 front.1      | ETHON: performed EASY url=... total_time=5.130982\n16:59:23 sci.1        | Started GET \"/features\" ...\n16:59:23 sci.1        | Completed 200 OK in 5513ms (Views: 75.8ms | ActiveRecord: 8.7ms)\n16:59:23 front.1      | ETHON: performed EASY url=... total_time=5.543162\n16:59:23 front.1      | Completed 200 OK in 5661ms (Views: 100.8ms | ActiveRecord: 0.0ms)\n```\nTo rule out any Rails logging inaccuracies, I also timed the page load manually, giving the same result.\nThere are no mentions of MULTI anywhere, yet the requests are clearly not blocking; otherwise the front request would have taken at least 10 seconds.\nSo I guess this is a mystery.  I'm not familiar with libcurl, but if you have any idea what could be causing this, that would be great to know.\n. That's correct!  I'll wrap class_for_data and check if the class is a descendant of self.\nAh, I thought I had all entry points covered.  I'll modify the remaining calls.\n. I haven't worked with Her for over a year, so I'm a bit out of touch.  Would appreciate it if you could look at it, @romansergey !\n. ",
    "jrabary": "Is the root name can be pluralized when we get an array of resource to make it compatible with active model serializer https://github.com/rails-api/active_model_serializers\n. Can somebody help me how to make this test pass. I need to parse a more rails compatible json where the root correspond to pluralized resource name for a collection\n``` ruby\n before do\n        Her::API.default_api.connection.adapter :test do |stub|\n          stub.post(\"/users\") { |env| [200, {}, { :user => { :id => 1, :fullname => \"Lindsay F\u00fcnke\" } }.to_json] }\n          stub.get(\"/users\") { |env| [200, {}, { :users => [{ :id => 1, :fullname => \"Lindsay F\u00fcnke\" }] }.to_json] }\n          stub.get(\"/users/1\") { |env| [200, {}, { :user => { :id => 1, :fullname => \"Lindsay F\u00fcnke\" } }.to_json] }\n          stub.put(\"/users/1\") { |env| [200, {}, { :user => { :id => 1, :fullname => \"Tobias F\u00fcnke Jr.\" } }.to_json] }\n        end\n    spawn_model(\"Foo::User\") { parse_root_in_json true }\n  end\n\n  it \"parse the data from the JSON root element after .create\" do\n    @new_user = Foo::User.create(:fullname => \"Lindsay F\u00fcnke\")\n    @new_user.fullname.should == \"Lindsay F\u00fcnke\"\n  end\n\n  it \"parse the data from the JSON root element after .all\" do\n    @users = Foo::User.all\n    @users.first.fullname.should == \"Lindsay F\u00fcnke\"\n  end\n\n```\n. ",
    "jipiboily": "@jrabary depending on your needs, you can also disable that root node from the rendered JSON.\n. ",
    "fbjork": "Any plans on adding support for root level nodes with a single array node, i.e \"videos\": {}...?\n. +1 for supporting ActiveModel::Serializer output\n. ",
    "magagnon": "Not sure if that's what the OP meant but sometimes it's necessary to define attributes on which validation has to be performed. \nI'm using the active_attr gem with her to achieve this.\nhttps://github.com/cgriego/active_attr\n. ",
    "martijnschouwe": "The main goal was for validation indeed\n. When using rails it takes the model validation to return errors in forms and you don't goto the API until you know that your model is valid, but if HER is made compatible with ActiveModel then it should be sufficient as that also concludes validation\n. ",
    "mixtli": "I'm getting the same results as wingrunr21.\n. works now.  Thanks!\n. This seems to be a problem again.\n. ",
    "mwotton": "I think I've worked out my confusion - I was expecting it to follow the embedded book links in /users/:id, but it's asking for /users/:id/books to get that listing. I can munge the API I'm wrapping to provide that indexing information, I think.\n. That's great news :) Sorry I never got back to you on this, I ended up writing my own horrible homebrew system. This feature would make it possible for me to junk my one, which makes me very happy.\n. ",
    "lucaspiller": "No it doesn't, it is just basic information, e.g.:\njson\n{\n  \"id\": 54,\n  \"name\": \"Luca\"\n}\nIn my actual use case (as opposed to this example), the child can belong to multiple parents, so it doesn't make sense to have a single parent_id attribute. Maybe a better example would be Groups which have Users, and Users can belong to multiple Groups.\n. Sorry for the delay, we've been busy busy recently...\nBack to the issue, so the actual model in our case is read-only, so we don't need to worry about saving it. However if we did the the example you provided would be correct.\nI think for now we'll just add some custom stuff to stop the #inspect method from doing this, in our case it's pretty simple to know what the URL is, so I don't think we need it there.\n. That sounds good to me :)\n. Works perfect, thanks!\n. That fixes it, thanks!\n. ",
    "pusewicz": "Great! It's been annoying for a long time ;)\n@lucaspiller Can you verify and close the issue?\n. Whoops, forgot that it was a custom class :D \nruby\nmodule Her\n  module Middleware\n    class Mashify < Faraday::Response::Middleware\n      def on_complete(env)\n        env[:body] = Hashie::Mash.new(env[:body])\n      end\n    end\n  end\nend\n. Yes, I'm using second level parse middleware\nSent from my iPhone\nOn 13 May 2013, at 02:21, R\u00e9mi Pr\u00e9vost notifications@github.com wrote:\n\nWhy are you using this middleware? Her expects env[:body] to be a Hash parsed from a JSON response body.\n\u2014\nReply to this email directly or view it on GitHub.\n. In order to have easier access to the attributes with a method access.\n. We are using the data, metadata structure with nested attributes as well eg:\n\nThis is env[:body]:\nruby\n{:data=>\n    {:id=>1021, :first_name=>\"Ann\", :last_name=>\"Walsh\",\n    :profile_pictures => { :thumb_url => 'http://thumb.url' }\n}\n. Fixed with:\nruby\nmodule Her::Model::Attributes\n  def attributes\n    @attributes ||= Hashie::Mash.new\n  end\nend\n. ",
    "hamann": "Btw\n``` ruby\n\n\nPostgresBackupTarget.all(:_postgres_backup_server => \"sauspiel\")\n```\n\n\ncalls the correct url:\n10.20.20.1 - - [01/Apr/2013 15:17:35] \"GET /api/servers/sauspiel/targets HTTP/1.1\" 200 43 0.0022\n. That's it! Thank you!\n. You're right, the response is true\nIs there a best practice how such a response message should look like?\n. Sorry, but I haven't got time yet to test it. But the case is clear to me and I will change the response messages. Thanks for your work and help!\n. ",
    "yonahforst": "thanks, that would be amazing.\nI'm not sure how this API has their models set up, maybe has_many :through, or polymorphic. In any case, they don't return the relation id, rather the entire object. would it make sense to be able to do something like:\ncollection_path(\"/configurations/#{configuration.id}/publish_sets\")\nAlso, I noticed that every object has its own url embedded as an attribute. \n```\n\n```\nI don't know if this is standard practice with REST APIs. If it is, would it make sense to allow the objects path to be inferred from the object itself (url attribute)?\n. Any suggestions for saving objects along with nested associations? (that is, how to automagically append _attributes to associations)\n. ",
    "dsshap": "ruby\n   <Keryx::Citizen(citizens) _id=\"516c810406f16a9e9e000001\" \n    created_at=\"2013-04-15T22:36:52+00:00\" \n    email=\"mail@mail.com\"\n    mobile_number=\"1234567890\" \n    name=\"jack\" \n    updated_at=\"2013-04-15T22:36:53+00:00\">\nI have these methods in a included module that i excluded in the above post.\nruby\nmodule Keryx\n  module Model\n    def id\n      self._id\n    end\n    def error?\n      self.errors.any?\n    end\n  end\nend\n. I believe I have narrowed down the issue. It has todo with the fact that I am using mongodb and the id attribute of the document is specified as _id.\nAdding support for custom primary keys (commit a9615573fc5c19fb6083c3645d91114f265b4c90) is exactly what i was needed.\nUpdating the readme would be useful for others facing a similar situation.\nCustom Primary Keys\nIf your record uses an attribute other than :id to identify itself, specify it using the primary_key. For Example:\nruby\nmodule Foo \n  class Bar \n    include Her::Model \n    # Define the default primary key\n     primary_key :_id\n  end\nend\n. Thank you!\n. latest release\n. ",
    "slnovak": ":+1: Looking forward to seeing this in a release.\n. ",
    "mlpinit": "This is great :+1: \n. ",
    "romansergey": "It has been a long time since and this is still not merged.\nIf the changeset is not acceptable or not complete, would there be any comments from the core collaborators?\n. thanks @remiprev!\nIf not @dlorson, then I'll take a look into that.\n@dlorson?\n. That would be a more \"unattended\" way:\nruby\nHer::API.setup url: 'http://api.example.com' do |connection|\n  connection.use Faraday::Request::BasicAuthentication, 'myusername', 'mypassword'\n  connection.use Her::Middleware::DefaultParseJSON\n  connection.use Faraday::Adapter::NetHttp\nend\n. ",
    "hubert": "@romansergey It looks like the responsibility has been passed to you in to get this in shape for merging. I am on a mission to get to 0 open PRs, so am going to close this. Feel free to re-open if you have time to finish out the work. \n. discussion makes it seem like this is no longer an issue and no response for a long while.\n. i agree with @pencil assessment of the matter. @prcongithub if you have a solution that is able to address root cause, please reopen. thanks for the contribution!\n. @superp @malclocke is there anything here that is not addressed by the primary_key option?\nFYI i'm trying to address all open PRs. if this is still an issue, please reopen and let me know. \nthanks for your contribution.\n. hi @lleger. first off, thanks for the contribution. i have a couple concerns tho. \n1) i worry about the association_ids method and the association being separate entities in the response. this opens up the possibility that the data could conflict with each other. \n2) the automagic addition of the _ids method. given the inherent separate nature of a remote service, i feel it prudent to be conservative about sending anything not explicitly specified by the caller. while it might work smoothly for rails-specific services, we have no assurances that the remote service is indeed that.\nif you feel i'm erring in my judgment, i encourage you to let me know.\n. @ryanto i'd prefer to the responsibility of caching be handled more generally at a lower level, e.g. the faraday_middleware referenced in the README, rather than sprinkling it in strategic places across the gem. \nfeel free to reopen if you have a counterpoint you'd like to raise. thanks for contributing back!\n. @dvictory i believe that this issue was addressed in a recently merged PR. if you're still seeing the bug, please rebase with master and resubmit. \nthanks for contributing back!\n. thanks for the feedback. i worked around it by doing something comparable -- using a custom method.\n. hi @chris911 this may very well have been true at one point, but i don't think this is the case anymore. if you disagree, feel free to let me know.\nthanks for contributing!\n. @dturnerTS i'm working to get Her down to 0 PRs. given there is already has_many serialization, i think it makes sense to do the same for has_one associations. \nfew things before we merge:\n1) how does it handle the case where the has_one association key is present but the value is nil? \n2) please rebase with master so that we can make sure this works with the current travis checks.\n3) please remove the commit bumping the version.\n. @dturnerTS thanks for taking the time to go through this again. can you rebase this instead of merging it?\n. i'll take a closer look at this over the weekend.\nOn Thu, May 14, 2015 at 12:00 PM, M. E. Patterson notifications@github.com\nwrote:\n\nping? is this in a build somewhere I can use? having various problems with\nAMS and Her integration...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/remiprev/her/pull/266#issuecomment-102138063.\n. merged #359, which is this PR rebased with the latest in master. needed to do so in order for it the latest travis checks to be run. \n. @dturnerTS i've blocked out some time on saturday (tomorrow) to work through pending pull requests. \n\nthanks for the kind words. happy to contribute back to the gem. \n. @l8nite i think this responsibility falls to the parser setting up the data, meta, and errors in the expected way.\n. closing this. json api support will be handled as a first-class representation.\n. most of the code here is PRd in #262 which i've responded to the OP about. going to close this for now and wait for a few small changes before we try to merge it.\nthanks for contributing!\n. hi @gottfrois if you rebase with master to get the latest checks and resubmit without the commit/revert, i'll merge this.\nthanks for the contribution!\n. i'm not clear on the use case based on the OP question, but how do you determine which API you want a given object to query. what is the reason that you cannot have two models one for talking to each of the APIs and then use the same logic that determines which API to use to select which Her::Model to use. \nif there are many APIs to hit, and these can only be determined at runtime, you could create a Factory class that builds a Her::Model class (perhaps based on a class that contains any common logic) that is configured to speak to whichever API your business logic dictates it should. \nlet me know if i am totally misunderstanding what is desired.\n. #282 merged\n. Hi @eggmatters. Which middleware are you using to parse the responses you get back from the API you're calling? Based on your description of the behavior, I'd guess you're using Her::Middleware::FirstLevelParseJSON (same as DefaultParseJSON). \nIf that's the case, Her will expect a hash of the model's attributes at the top level, including errors. so something like:\njson\n{ \n  \"username\": \"eggmatters\",\n  \"email\": \"eggmatters@github.com\",\n  \"errors\": { \"username\": [\"has already been taken\"] }\n}\nthere's also some examples in the middleware specs. \nhope that helps!\n. merged. thanks for contributing. :+1: \n. @hderms there is more first class support for jsonapi in the latest versions of the gem, which follow the jsonapi 1.0 spec. \nclosing now. thanks for the contribution!\n. thanks for the contribution @WizardOfOgz \nif you rebase with master so it runs the latest travis checks, i can merge this. \n. hi remi. we're using her in a number of client gems here at practice fusion and i'd love to take a more active role in maintaining/enhancing it moving forward. i have a couple open PRs and we have a fork of the gem with some fixes/enhancements, mostly around consuming json_api which is what we are using as our standard.\nwith the upcoming json-api 1.0 release, i believe the gem will def benefit from some further development in that area. in addition, having spent some time going through the source code, my feeling is that the configuration is admirably flexible, but all of those controls can also make it difficult to find the right combination of options to implement some of the more common cases. i believe that there are abstractions we could add/modify to better support some of these cases outside the box.\nher has been a big help to me in my professional life, so i'd like to give back. it fulfills a lot of the promise that many of us hoped activeresource would and i'd like to help the project continue to thrive.\n. hi remi. i just searched my email because i figured it got filtered by my gmail priority inbox settings, but i still don't see it :-(  it's weird since i did get the latest notification.\ni am still interested. please let me know how you'd like to proceed. if you could resend your message and cc my work email, hhuang@practicefusion.com, so i'm sure to get it, i can answer whatever questions you might have. thanks!\n. hi @will-r. yes, this project is alive. i haven't had as much time to devote to it as would be ideal, but there's been a fair amount of work merged into master in addition to a relatively recent patch release. i've been delinquent on responding to the issues as my focus is to get all the open PRs addressed. \ni just msg'd you on your personal email where we can continue this discussion.\n. @crv couple things would be needed to get this merged in. apologies for the long wait.\n1) could you update the test so that it asserts that whatever is dumped can also be loaded? i'm dubious of tests that only check that an error has not occurred.\n2) this needs to get rebased with what's in master so that it runs the latest travis checks and we can be sure it works with the latest.\n. closed in favor of #377 \n. @cakejelly  i'm just returning from holiday now, so can take a closer look. \ni may have a fix for this here: https://github.com/remiprev/her/pull/326\ncould you post a stack trace of the error you are getting?\n. hi marshall. could you remove the space between the -> and () in the examples? \nthis preserves 1.9 compatibility. \n. @fist28 my read of the code is that the method is not private in the ruby sense, but rather part of the \"private\" api of her. \nthanks for the contibution!\n. i agree that returning nil makes more sense than an object with no attributes.\nthe place this would be handled is in the Her::Middleware layer. when parsing the object, it's not accounting for 4xx codes as you noticed, and should. \ni'm doing some work at this level right now to handle json api compliant apis, so can take a look at this as well, or if you want to take a crack at PRing this yourself, that would be much appreciated.\nthanks for the report. \n. i agree there needs to be a way to distinguish between things working or not. however, i don't agree that http status codes are the way to do that.\nthe her middleware layer is there to provide the adapter layer between the http details on the active model object that is returned. \nfor a 404 specifically, nil is the most obvious, but the tradeoff would be that we wouldn't be able to include any additional info the server provides. the other possibilities would be a \"NullModel\" of some sort or making find raise an exception akin to how ActiveRecord does it.\nfor a 422 or other 4xx responses, the way to determine whether or not the delete was success would be to query the errors object attached to the model. Her should probably add a generic error for 4xx cases and then add errors included by the server.\n. could you add a test to illustrate the fixed behavior?\n. hi faisal. how does using a set, rather than an array, improve search performance? it also takes O(n) time to find something in a set.\n. the behavior of method_defined? vs instance_methods.include? aren't equivalent. method_defined? would also return true if the method were defined by one of it's superclasses, while instance_methods.include? would not. \nfrom my reading of the code, the latter behavior is what we want. i took a quick look at Module and don't see an equivalent. do you know of something that i missed?\n. should have tried it out rather than just reading the doc, which lead to me overlooking the diff between modules and classes. \nre: what the behavior should be\n```\nclass A\n  attr_accessor :foo\nend\nclass B < A\n  include Her::Model\nattributes :foo\nend\n```\nit's a corner case, but here, i'd expect the attribute foo to overwrite the foo= method. that said, the behavior is not changing so no need to try and deal with now. \nthe PR code gets exercised indirectly in specs, but could you add specs to verify the attributes method is doing what we expect in the case where there isn't a user defined version of the setter and predicate method? \nGTG once that's in place.\n. :cupid: for the benchmark\n. @marshall-lee the reason i asked for specs is the behavior of the attributes method is i think it will be clearer to gem users if the behavior is spec-ed explicitly. the current specs also don't check that the predicate method gets defined.\nthe attribute.to_sym call is also unnecessary since it gets converted back to a string when it gets interpolated. we can deal with that separately if you prefer. \n. yep. looks good.\nthanks for your contribution :+1: \n. nice investigation. \nmy inclination would be to piggyback on activemodel since Her::Model does already for a number of features. given that activemodel provides a standard for behavior that is well-known, adhering to it would be intuitive for developers.\nif there are counterargs, i'd be interested to hear them. \n. @reneweteling in my mind there are two separate issues here.\n1) allowing the request to continue when client side validation fails. not sure what the original thought was on this, but i don't see an advantage to it.\n2) the existence of bang methods. these should be pretty straightforward to add in most cases.\ni am open to modifying both of these behaviors, so if you want to PR these changes, we'll look at getting these merged in.\nthanks!\n. hi mike. thanks for writing in.\ni'm doing some work on adapting her to work with json api. i plan to open\nan issue with README updates and perhaps some tests to make a proposal for\ninitial support in the next day or two. the upcoming spec is a big step\nforward but has quite a lot in it, so help will certainly be welcome.\nif you want to propose something straight away and kickstart the\ndiscussion, go for it.\nOn Tue, May 12, 2015 at 4:19 PM, Mike Martinson notifications@github.com\nwrote:\n\nIs anyone working on tracking document structure changes in JSONAPI rc3\nfor the adapter? I'll need to get to work on this and don't want to to\nduplicate anyone's work if it's already underway.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/remiprev/her/issues/340.\n. @mmartinson FYI #345 \n. hi @marshall-lee, i know you didn't introduce this issue, but how do you feel about removing the 'self' part from the initialize method. at a glance it's misleading when you're tracing the code from setup to initialize. \n\notherwise G2G.\n. beautiful @marshall-lee \nthanks!\n. @valo could you rebase with what's in master so we can run the full travisci checks. once that's done, we're G2G.\n. thanks for contributing!\n. i merged in #359 which i believe should address this as well. feel free to re-open if you are still having issues. \nthanks for the contribution!\n. @marshall-lee \n1) What's the purpose of format: :json_api then? Deprecate it?\nThe idea would be to deprecate it. Her should remain flexible enough to consume any api. However, for standards we want to support, they should have a first class representation which doesn't require any custom configuration to consume.\n2) Maybe just create a PR so we can look at it?\nI have a working PR in another fork. I'll create a PR so that people can look at it. It does not touch Her::Model which was one of my goals when writing this.\n. @marshall-lee i agree with most of what you say. \nthe top-level id and type attributes are both \"api\" rather than object attributes. namespacing the object attributes was done so that they could continue to add attrs as necessary and not conflict with whatever the user returns in attributes.\ni think that adding _type and _id methods are reasonable ways to go, but those methods will still shadow _id and _type that are passed within attributes. the user could still dig in and access them directly via attributes which would not be the norm, but i think that's fair to put that burden on the api developer.\nagree it is a corner case if id is passed within attributes.\n. Hi @mpeteuil. Likely, it has fallen out of date. As a new maintainer, i don't have insight into the progress prior to 0.7. My plan is to change the scope of the document and to track all notable changes for releases moving forward. I will do this today.\nI am following semver guidelines for this release and going forward, so there are not meant to be any breaking changes in this release. \n. @alexchumak you could try what's in master now. it has the first makings of jsonapi support (no relationships, included, etc.) so if your api is simple, that might work for you. \ni'm not sure about AMS support moving forward since the scope of AMS is changing quite a bit and given that, there won't be a strict definition of what \"AMS format\" is. \n. @alexchumak does your code follow this for consuming the json api compliant services?\nhttps://github.com/remiprev/her#json-api-support\n. @marshall-lee thanks as always for your contributions. this was actually on my list of things to enhance for her, so really glad that you are taking this one. have a few questions/comments.\n1) could you create a new connection_pool_spec file that exercises the connection pool code? also, i'd like to see some specs that validate that the connection pool code is doing the right thing, in addition to just running without error. i know metaprogramming let's you really reduced the code you write, but it would be nice to have specs that document and exercise each of the methods that is generated. \n2) i know Net::HTTP:Persistent maintains it's own connection pool. have you tested the code with this adapter to make sure they work nicely together?\n3) could you move the additions to the README into the advanced section?i believe the top section should really be focused on getting the user up and running. \n. @alexchumak this is actively being worked on (by me), so i hope so :-)\nhttps://github.com/hubert/her/tree/feature/jsonapi-compound-documents\nit's not quite ready to be merged in but i'll PR soon. there is one bit of work i needed to do with regards to has_one associations were being handled in order to get this to work, so that will need to get merged and then this will come soon after.\ncomments welcome and appreciated.\n. @will-r @alexchumak i'd encourage you to share your thoughts on PR #360 \ni have some qualms with it, but now that 0.8.0 has gone out, i'd be more inclined to merge it in if there are active users who would benefit.\n@will-r do you have a example of the jsonapi parsing be fragile? i'd be keen to take a look.\n. thanks for the contribution. couple questions:\n1) should we be escaping the primary key value as well?\n2) could you update the test so that it is testing the public interface for path building (request_path) vs the underlying class method?\n. Haha. I actually just meant the new specs but it's great that you did them all :-)\nI'll take a look at this when I get home.\n. are you sure the behavior you are getting is the same for dup and clone? i'm fairly sure that Her is relying on the underlying ruby implementation of these methods and the example you show above is consistent with the clone behavior of ruby objects.\n. hi @chadwtaylor \nthe json api stuff got merged in after the 0.7.4 release. could you try updating to latest (0.7.6) and see if that solves your issue? \n. can you paste the code in your initializer that is triggering the error?\nOn Thu, Aug 13, 2015 at 2:33 PM, Chad W. Taylor notifications@github.com\nwrote:\n\nUpgraded to 0.7.6 and keeping it at rails 4.2.1 and ruby 2.2.1 still threw\nthe same error:\n/Users/chadwtaylor/Dropbox/web_projects/honey/waxapp/config/initializers/her.rb:18:in block in <top (required)>': uninitialized constant Her::Middleware::JsonApiParser (NameError)\n    from /Users/chadwtaylor/.gem/ruby/2.2.2/gems/her-0.7.6/lib/her/api.rb:78:inblock in setup'\n    from /Users/chadwtaylor/.gem/ruby/2.2.2/gems/faraday-0.9.1/lib/faraday/connection.rb:91:in initialize'\n    from /Users/chadwtaylor/.gem/ruby/2.2.2/gems/faraday-0.9.1/lib/faraday.rb:70:innew'\n    from /Users/chadwtaylor/.gem/ruby/2.2.2/gems/faraday-0.9.1/lib/faraday.rb:70:in new'\n    from /Users/chadwtaylor/.gem/ruby/2.2.2/gems/her-0.7.6/lib/her/api.rb:77:insetup'\n    from /Users/chadwtaylor/.gem/ruby/2.2.2/gems/her-0.7.6/lib/her/api.rb:29:in initialize'\n    from /Users/chadwtaylor/.gem/ruby/2.2.2/gems/her-0.7.6/lib/her/api.rb:13:innew'\n    from /Users/chadwtaylor/.gem/ruby/2.2.2/gems/her-0.7.6/lib/her/api.rb:13:in setup'\n    from /Users/chadwtaylor/Dropbox/web_projects/honey/waxapp/config/initializers/her.rb:1:in'```\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/remiprev/her/issues/361#issuecomment-130851075.\n. doh. misread the commits. i merged this in after 0.7.6 so if you point your\nGemfile to the master branch on github, this should be fixed.\n\ni'll be cutting a new release soon, so after that you should be able to use\nthe latest from rubygems.\nthanks!\nOn Thu, Aug 13, 2015 at 2:40 PM, Chad W. Taylor notifications@github.com\nwrote:\n\nHer::API.setup url: \"http://localhost:3001\" do |c|\n# Request (JSON API)\n  c.use FaradayMiddleware::EncodeJson\n# Response\n  c.use Her::Middleware::JsonApiParser\n# Adapter\n  c.use Faraday::Adapter::NetHttp\nend\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/remiprev/her/issues/361#issuecomment-130853369.\n. never :smirk:\n\nbut i'm cutting a 0.8.0 version now :smile:\nOn Fri, Sep 4, 2015 at 8:33 PM, Adam Gotterer notifications@github.com\nwrote:\n\nHaving the same issue and was curious when you expected to cut 0.7.7?\nThanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/remiprev/her/issues/361#issuecomment-137900816.\n. what's the behavior you would expect here? you might be able to write a customized parser based on the JsonApiParser to do what you want.\n. If you PR the readme with the info, I'll merge it. Bonus points for adding\na rest if there isn't one already.\n\nOn Wednesday, August 26, 2015, Paul Mackay notifications@github.com wrote:\n\nOK have dug into the tests and realised it can be done with\nhas_many :recent_comments, class_name: \"Comment\"\nWould be great to add a quick note to the docs showing this.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/remiprev/her/issues/363#issuecomment-134935318.\n. done. thanks for bringing this up.\n\nthere's also a 0.8.0 now as well :smile_cat: \n. agree it is a bit surprising. is this something you stumbled across or was this at the root cause of an issue you were troubleshooting?\n. does the solution here work for you?\nhttps://github.com/remiprev/her/issues/222\n. hi @ekampp. thanks for the contribution!\ncould you add a spec to cover this behavior? G2G once that's in place.\n. the response_errors should be an array, not a hash. if the api you are consuming with her is returning errors as a hash, you'll need to write custom parser that can translates that into the array that her is expecting.\n. hi @ticktricktrack. thank you for the contribution.\ni don't agree with the practice of passing params to the delete, but i don't see a downside for a general http client such as Her supporting it, since the current HTTP 1.1 RFC sounds agnostic about it. will merge.\n. hi greg. you can use any faraday middleware with her. so in your case,\nsomething like this should work\n```\nHer::API.setup url: 'https://api.foo.com' do |c|\n  c.request :json\n# rest of your setup goes here.\nend\n```\nOn Mon, Oct 5, 2015 at 10:30 AM, Greg Lappen notifications@github.com\nwrote:\n\nHello,\nI am setting up Her for a project. So far, I have my custom middleware\nworking and can get members and collections form our API. When I update a\nmodel and call save on it though, it does a PUT, and in the logs I see the\nMIME type is application/x-www-form-urlencoded. Is it possible to send JSON\ninstead?\nThanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/remiprev/her/issues/376.\n. @crv thanks for being proactive about this. i hope you'll continue to contribute moving forward. :beers: \n. Hi Tom, Thanks for contributing.\n\nCould you elaborate on the advantages of having Her have it's own serialization routine rather than including ActiveModel::Her::Serialization where needed when json output is required?\nCheers!\n. @tcollier thanks for following up and providing an example we can work off of.\ni think you understood what i was saying. given the example you show, i think there's a bug. once you call #to_json the relation should resolve and #to_json should be called on the result of actually making the call to retrieve users. \nthat said, i don't think explicitly defining as_json and to_json on the relation objects is the right way to go. there does appear to be an incompatibility between Her::Model and ActiveModel::Serialization. if we were able to address that incompatibility, i think your issue would be resolved as well. \nto illustrate, i think if you did the following you'd get the behavior you expect:\nruby\nusers = User.all\np users.to_a.to_json\n. Hi Brian,\nThanks for writing in. I'm not sure I've run across an API that was set up\nthat way.\nWhat would the response look like for GET /fruits since the root key seems\nto be derived from the individual type rather than their common superclass?\nOn Tue, Oct 13, 2015 at 2:03 PM, Brian Gernhardt notifications@github.com\nwrote:\n\nI have an API that works like the following (names changed to protect the\ninnocent):\nGET /fruits/1.json => {\"apple\": {\"id\": 1}}\nGET /fruits/2.json => {\"orange\": {\"id\": 2}}\nThis is from a Rails app that has uses ActiveRecord::Inheritance\nhttp://api.rubyonrails.org/classes/ActiveRecord/Inheritance.html to\nstore multiple related types in a single table and include_root_in_json\nto return the types in the API.\nThe only way I see to handle this in Her (haven't implemented it) is to\nimplement custom middleware that parses the JSON, stores the type in\nmetadata (which doesn't seem very well documented), and reverses the\nprocess when doing requests.\nIs there a better way to do this in Her that I'm not seeing?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/remiprev/her/issues/379.\n. Hi Stephen,\n\nThanks for writing in with your issue. I think the best course of action to\nyour problem would be to specify that the api use the\nactive_model_serializers format. I believe that should interpret the root\nkeys for your data correctly.\nThe naming is probably a bit misleading since it indicates that one should\nspecify the format to consume an API that is produced by\nactive_model_serializers when what is really specifying is what is expected\nfor the root keys.\nLet me know if this fixes your issue.\nThanks!\nOn Wed, Oct 21, 2015 at 8:55 AM, Stephen Margheim notifications@github.com\nwrote:\n\nWhen moving a project from ActiveResource to her, my team and I came\nacross a problem. The API we are using (which is being built by our team\nfor an enterprise application) wraps the JSON response in a model name\n(e.g. GET /api/v1/accounts -> {\"accounts\":[]}, or GET\n/api/v1/accounts/2 -> {\"account\":{}}). This API, however, is not\nusing ActiveModelSerializer to generate the responses (it uses JBuilder\ntemplates, FWIW). When creating the models to be backed by her, we simply\nhad:\nclass Account\n  include Her::Model\n  parse_root_in_json true\nend\nAttempting to access that model threw an error, however: Undefined method\n'.keys' for #. In debugging this issue, I found that the problem\nlied in the extract_array method in the parse.rb file:\ndef extract_array(request_data)\n  if request_data[:data].is_a?(Hash) && (active_model_serializers_format? || json_api_format?)\n    request_data[:data][pluralized_parsed_root_element]\n  else\n    request_data[:data]\n  end\nend\nThe issue is that our request_data wasn't passing the first if clause,\nsince I didn't state that the format was one of those two options, although\nthe response was a Hash. This method thus simply returned the hash\nresponse (i.e. accounts: {}), instead of accessing the nested data.\nThere are obviously numerous simple fixes (remove the second half of the\nif check, move that second half into a new nested if check, if Hash, try\nto access request_data[:data][pluralized_parsed_root_element] and handle\npossible errors, etc), but I don't presume to understand precisely what\nyour large scale project decisions are that led to this particular\nimplementation, thus I haven't yet put in a Pull Request.\nHopefully, this is clear enough to display the issue that my team and I\nhad. If not, let me know what else would prove valuable to you.\nLove the project!\nstephen\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/remiprev/her/issues/380.\n. thanks for the contribution @hmatsuda.\n\nit doesn't look like the way == is written now is perfect, but the way you've rewritten ==, it would be pretty easy to get false positives.\n```\nclass Foo; include Her::Model; end\nclass Bar: include Her::Model; end\n\nFoo.new(id: 1) == Bar.new(id: 1)\ntrue\n```\n. can you add a spec to verify the relation equality from your original example works as expected?\n. hi @glappen first off, thanks for the contribution. i've been on the road for a bit so haven't had much time to review PRs. apologies for the slow reply\n\nafter looking at your PR and @kritik suggestion, i fear that a solution of this nature might just paper over the root cause -- that Her::Model is not compliant with ActiveModel. would you want to take a stab at a solution using that approach?\n. hi @glappen. i understand your confusion. we def shouldn't be pulling in anything from ActiveRecord. when i looked at it earlier, i must've misread it as ActiveModel. my issue with the solution may be that i don't like the way the situation with record_attributed_in_place is handled in ActiveModel.\nlet me look a bit more closely and i'll get back to you.\n. ",
    "kinopyo": "@pencil I assume faraday-http-cache is superior if your api provides all required http cache headers, otherwise maybe like @espen replied nothing will be cached, and personally I don't see/recall in a real world api return those http cache headers quite often in my experience. \nmy suggestion is keep the README as is, but could mention the options of faraday-http-cache if your api also \"respects\" http caching.\n\nand back to the original issue, i still can't find a good solution to expire a cache manually. maybe could borrow the idea of https://github.com/plataformatec/faraday-http-cache/issues/36#issuecomment-38464461, a hack to faraday-http-cache so can't apply directly here but the idea should be similar, supply a specific parameter(invalidate_cache in the example) that will intercept the response and clear the cache in the middleware layer. \n. @256dpi there're some pretty interesting features in the pull request, are you still working on it? or do you mind if I pull some of them and make separate pull requests? such a pity to see the great work sink\n. :+1: on this, had same issue and go around same trip, the readme is misleading.. \n. same here wondering what's the status, seems a missing feature or common gotcha. will use this fork for a while and see if there's any side effects. meanwhile @remiprev could you please take a look and give some feedbacks when you have time?\n. good job :+1: \n. I'm not using this gem anymore and has no interest in driving this issue, please allow me to close it \ud83d\ude47\n. Didn't know about that, so seems like for any missing method with a ? appended will return false.\nruby\nProduct.new.foo? # => false\nProduct.new.bar? # => false\n\nThere's a new? method seems to be used as opposite of destroyed?, but I'd prefer ActiveRecord style new_record? for that purpose.\nhttps://github.com/remiprev/her/blob/4824f6f18e4de091fede948cf362728c851f3654/lib/her/model/orm.rb#L8-L10\n. I'm no longer using this gem and have no intention on driving this pull request anymore so will just close it :)\n. Could show us how you setup Her on initializers/her.rb? Is accept_header defined there?\nPurely looking at the code in the helper spec you posted, I don't recognize the accept_header is any global method and I guess that's why ruby complains about it.\nruby\napi.setup url: ENV['PATH'], headers: { accept: accept_header }\n. nice fix! :+1: \n. i found this call will append another user_id as parameter in the end..\n/users/1/comments?locked=true&user_id=1\n. does it mean we need to specify collection_path on the association's model if we want to call the scopes on it? is there any way to get around it?\nThis is the official document example,\n``` ruby\n@user.comments.where(approved: 1)\nGET \"/users/1/comments?approved=1\"\n=> [#]\n```\nwonder if we could just call it without adding that collection_path:\n``` ruby\nwant this\n@user.comments.approved\nGET \"/users/1/comments?approved=1\"\ncurrent(without specifying collection_path on Comment model)\nGET \"/comments?approved=1\"\n```\n. sorry I didn't make it clear. I'll switch the example from \"comment\" to \"post\", please bear with me for a moment.\n``` ruby\nclass User\n  include Her::Model\n  has_many :posts\nend\nclass Post\n  include Her::Model\n  belongs_to :user\n  collection_path '/users/:user_id/posts/' # specified collection_path\nscope :approved, -> { where(approved: true) }\nend\nuser = User.find(1)\nuser.posts # => /users/1/posts\nworks great\nuser.posts.approved # => /users/1/posts?approved=true\nbut break this kind of usage\nPost.all # => Her::Errors::PathError: Missing :_user_id parameter to build the request path. Path is /users/:user_id/posts. Parameters are {}\n```\nIn web app we normally don't show a list of comment, they tend to attach to a specific user so specifying the collection_path totally makes sense. But things like Post we may also want to show a full list of them(/posts), and also posts that belong to a user(/users/:user_id/posts). I was seeking a way to make the \"scopes on associations\" thing work on this kind of usage.\n\nIf remove that collection_path from Post model\n``` ruby\nclass Post\n  include Her::Model\n  belongs_to :user\nscope :approved, -> { where(approved: true) }\nend\nuser.posts # => /users/1/posts\nhere user id got lost in the url path, but I really want it there\nuser.posts.approved # => /posts?approved=true\nbut will allow this kind of usage\nPost.all # => /posts\n```\n. thanks, confirmed the behavior :+1: \n. thanks for the reply, seems there're a lot unsolved discussions on the nested resource path topic. Sorry for bothering you all along :bow: , hope this pull request will be merged..! i'm sure it'll solve lots of real world problems\n. ",
    "letronje": "Thats for encoding request body, right ? I'm interested in ways to encode URL parameter values. For a GET request with a nested datastructure as one of the parameter values, which middleware can I use ?\n. Lets say I have a custom get call that looks like this\nResource.myget(:x => [ {:y => 'true', :z => false}, {:y => [1]}])\nIf I use the following middleware,\n```\nclass EncodeJSONQuery < Faraday::Middleware\n  def call(env)\n    Rails.logger.ap env[:url].query \n    #prints ''x%5B%5D%5By%5D=true&x%5B%5D%5Bz%5D=false&x%5B%5D%5By%5D%5B%5D=1\"\n    #At this point the URL is already URL encoded\n    #Is there a way to hook into the code that url encodes the get method parameters and replace it with json encoding ?\nRails.logger.ap Rack::Utils.parse_nested_query(env[:url].query) \n#throws parse error ( https://gist.github.com/letronje/5538433 )\n\n@app.call(env)\n\nend\nend\n```\n. I didn't get you. What are the options available ?\n. As mentioned in my comment , I'm getting a parse error\n. Here's how we hacked it together for now. very similar to your approach.\nhttps://gist.github.com/letronje/437b4a72225eb53366c6 . By overriding new_collection(hacky), the collection returned is auto paginated with kaminari.\n. +1\n. ",
    "aaronmcadam": "Setting store_response_errors :errors makes calling .valid? on a model object raise:\nNoMethodError: undefined method `add_on_blank' for {}:Hash from ~/.rvm/gems/ruby-2.0.0-p195@global/gems/activemodel-3.2.13/lib/active_model/validations/presence.rb:8:in `validate'\n. ",
    "simonprev": ":+1: :shipit: \n. ",
    "rymai": "FYI, I'm using Her 0.6.1. I'll update to 0.6.3 and let you know if the problem persists!\n. Awesome, thank you R\u00e9mi!\n. Perfect, I'll try this right now and will get back to you as soon as I can confirm!\n. Yeah, I saw it, that's great thanks!\n. Ok, works like a charm, thank you again!\n. You're welcome! Aha, yours not bad too! ;-)\n. ",
    "as181920": "include_root_in_json true\nis ok with gem 'her', git: \"xxxxx\" during Gemfile, I need use her during my own gem,so need wait it release to rubygem.org.\nparse_root_in_json true\nI can not use parse_root_in_json when server just return a hash,like {a: \"a\",b: \"b\", data: {x: \"x\"}},I need to return special hash sometimes.\n. ",
    "finalarena": "It failed without error surprisingly. The server log showed it had rendered the partial, but it treated it as it it were empty (i.e. an empty array). Its as if something in rails were testing for a length on the array and it was returning without even processing the content in the partial (i.e. the partial could comprise simply a deliberate broken erb code).\nWe've moved on and lost the server output for it now, but I can recreate tomorrow if needed. \nI also can't see anything in https://github.com/rails/rails/blob/eaa0d0b7744327151d44d0a147fbb70c72678d35/actionpack/lib/action_view/renderer/partial_renderer.rb#L357 that is not compatible with the returned association.\nI can PM you the actual content behind the association if you like\n. will do asap.\n. I'm not no, but I'd like to :) I'm connecting to an API with which I'd like to decrease the timeout to be less friendly :-) i.e. I need to have a very short timeout at my end as we can't afford to wait for them if they are not performing well temporarily.\n. @jamesfzhang  but its the same setting I'm after. You want to increase it, I want to decrease it (:timeout and :open_timeout)\n. ",
    "kenips": "I'm seeing this, and I'm getting #<Her::Model::Associations::HasManyAssociation is not an ActiveModel-compatible object. It must implement :to_partial_path.. If I put .to_a after it fails silently.\n. :+1: on side-loading support!\n. ",
    "zacharywelch": "Closing due to inactivity. Feel free to reopen with example code if this is still an issue.. Closing this issue due to inactivity although it looks like some progress on JSON API and AMS was made in the meantime. If anything specific is still missing in our latest support for these two, feel free to reopen the issue or create a new one with more information.\nThanks!. Gonna close this as a duplicate of #135. Thanks @chewi!. looks like this was fixed by #437. Thanks!. Closing due to inactivity. Feel free to reopen if you're still having issues.. README updated in #431. Going ahead and closing this one. Remember happily applying this patch a few years back and eventually moving a few things around. Also have a rough patch that would let us remove collection_path as @kinopyo pointed out.\n```ruby\nclass User\n  include Her::Model\n  has_many :comments\nend\nclass Comment\n  include Her::Model\n  belongs_to :user\n  scope :approved, -> { where(approved: true) }\nend\n\nuser = User.find(1)\n\nGET \"/users/1\"\n\nuser.comments.approved\n\nGET \"/users/1/comments?approved=true\"\n```\nI'll put a PR together soon.. Unfortunately had to remove the primary key changes before merging to master, but we solved the original issue of freshly-loaded resources being marked as dirty \ud83c\udfa9 \ud83d\udcaf\nStill open to a solution of the primary key problem that doesn't involve raising an error if anyone's interested in putting together a PR. Glad we were able to identify some of the challenges.\nThanks!. I may have found a solution to the primary key problem @chewi. Working on a PR.. Right, would rather find a solution that solves both use cases and remains backwards compatible. In the process of testing I uncovered another pre-existing issue related to primary_key so it just needs some  \u2764\ufe0f. Lemme type up an issue so we don't lose track of our findings.\nThanks!. Sorry overlooked this. @chewi let us know when you're ready and I'll give it a review. Thanks!. Good find @chewi \ud83d\udc4f I went ahead and took care of the chop on master. Will come back to your PR as soon as we finish the upgrade to rails 5.2. Sorry for the wait @pmackay. Thanks for helping us improve the docs \ud83c\udfa9 . Gonna close due to inactivity. Feel free to reopen if this is still an issue.. fixes #375 . closing since we have other plans to refactor associations. Fixed in #367 . hi @glappen thanks for the PR! We're considering an update to ActiveModel which would give us attribute_changed_in_place?Would that cover what you need?. @etiennebarrie believe you're correct and these options were always available as part of the request hash or within the builder as you suggested. \nruby\nHer::API.setup(url: \"https://api.example.com\", request: { timeout: 10, open_timeout: 2 })\n/cc @abhikalakuntla @SirRawlins. Fixed by #298\nThanks!. Fixed by #298. Thanks for your help on this @tiagogodinho!. Difficult to say what's causing the issue. Is there a sample response you can share?. Closing due to inactivity. Feel free to reopen with a sample response if this is still an issue.. Closing this since her depends on an Id or primary key to be defined. . Nice catch @jkappers. Let us know if you want to create a PR for this behavior :smiley:. Fixed in #456. Thanks!. +1 on using collection_path as a default for has_many. Association paths in general could use some \u2764\ufe0f to get them in sync with Relation\nIn the meantime here's a workaround:\n```ruby\nclass RemoteBankAccount\n  collection_path 'bankaccounts'\nend\nclass RemoteUser\n  has_many :bank_accounts, path: \"/bankaccounts\"\nend\n``. Faraday includes a logger toSTDOUT`. Try giving this a shot :)\nruby\nHer::API.setup url: \"https://api.example.com\" do |c|\n  # ...\n  c.response :logger\nend. Hi @kvokka, thanks for the PR! Do you mind putting together some specs describing the middleware  behavior? See first_level_parse_json_spec for an example.\nI'm also curious what the difference would be with something like faraday-http-cache where it caches api responses and checks whether they're stale on subsequent requests to another microservice or api. Do you have an example you could share?\nAnother idea discussed in #445 would be to package your own faraday middleware if it's something that could be used by other faraday consumers. Generally her middleware is fundamental to the ORM.. find is one of the few methods which terminates the proxy and issues a fetch.  Is related_object an attribute on your model? If you could put a snippet or gist together that'd be a huge help \ud83d\ude3a . Going to close this due to inactivity. Feel free to reopen if it's still a problem and you have more information.. @nikushi I went ahead and squashed these commits locally before merging with master. Thanks again!. Hi @edtjones you're right it's rather self-contained and shouldn't interfere w/ her's public api. I spent some time confirming the Relation params weren't carried over after reload and that looks fine as well \ud83d\udc4d Lemme know if you need anything else.. sounds awesome! sent an email to your errorstudio address \ud83d\ude04 . Rebased \ud83d\udc4d \nDidn't see an obvious section in the readme for toggle but then too many examples would probably pollute the document? We do have information in the rubydocs for reload,\n toggle, first_or_create, etc. however. Let me know if you feel it warrants additional documentation in the readme \ud83d\ude3a. rebased \ud83d\udc4d . See this sorta thing being useful in a variety of ways \ud83d\ude0e As you mentioned apis may send json properties as camelCase, snake_case, PascalCase, or dash-cased.  Since we only ever want snake_case once it reaches our ruby code what are your thoughts on handling this in a separate Faraday middleware instead? Or do you think the greater need is to transform keys on a per-model basis like parse_root_in_json?. @vinc another idea would be to package your own faraday middleware so it's available to anyone using Faraday. There's a bunch of great examples on github. I'm going to close this pull request since you'll be creating a separate middleware. Good luck and feel free to provide a link here once it's complete \ud83d\ude3a Thanks!. merged in a29c883f2ed875908825e06b4f714f79d0116e41. Made a few small adjustments to try and take advantage of the associations array. Thanks again for your help \ud83d\ude3a . Wanna merge #367 first and get all the reload goodies in one build? That should also let us close out #375  \ud83d\ude04 . released 0.9.0 w/ release notes \ud83d\udc4d . Going to close this for now but feel free to reopen if the suggestions in #452 are insufficient. Thanks!. @gotmayonase mind squashing these commits real quick before merging?. Thanks!. Hi, was trying to defer these changes until we had a chance to release 0.9.0. Now that's taken care of perhaps we'll merge this weekend. Until then feel free to add any comments or give it a review \ud83d\udc4d . Hi Joshua,\nSorry for taking so long to respond. Don't really have a strong opinion on this and see how appending filters in the example above would be useful. Of course there's also the option of passing them in a single where clause.\nruby\nscope = User.where(filter: { a: 1, b: 2 })\nFor their part, ActiveResource uses a merge while ActiveRecord appends where clauses. That said deep_merge was added in activesupport 3.0 so if we wanted to change this behavior we at least don't need to update any dependencies \ud83d\ude05 . Glad it helped. Good luck \ud83d\ude03 . Would rather leave pry out, though others are free to use it locally \ud83d\ude03 \nBelieve what @att14 is proposing is allowing attributes with the same name as the possible root element? Sounds reasonable \ud83d\udc4d \nwithout root element\nhttp\nGET /roles/1 \n{ \"id\": 1, \"role\": \"admin\" }\nwith root element\nhttp\nGET /roles/1 \n{ \"role\": { \"id\": 1, \"role\": \"admin\" } }. @att14: went ahead and amended the commit before merging. Thanks again for your contributions on this!. Hi @pablocrivella, I'm a fan of the idea \ud83d\ude0e Something using or resembling Rails attributes api is being discussed but this would require a modest overhaul of Her attributes and most likely a major release. Going to close this for now since it's out of scope. . Gonna go ahead and close this since #480 was merged \ud83d\ude3a . You could also place your Her models in a directory that's autoloaded or add that directory to the autoload path. Her support for ActiveModel::Serializers only extends to parsing and consumption of APIs following the serializer format. As you pointed out the two conflict with each other because they share a similar public API (e.g. attributes and associations). Gonna close this since it's outside the scope of Her but let us know if you were able to find a solution. Thanks!. Hi @samstarling, parse_root_in_json expects arrays to be returned as\nGET /users/1/items  #=> [{ item: { id: 1, name: \"apple\" } }]\nIf there's a root element on the array you should be able to use the active_model_serializers format\n```\nGET /users/1/items  #=> { items: [{ item: { id: 1, name: \"apple\" } }] }\nGET /users/1/items  #=> { items: [{ id: 1, name: \"apple\" }] }\nclass Item\n  include Her::Model\n  parse_root_in_json true, format: :active_model_serializers\nend\n``\nHope this helps \ud83d\ude3a .clientandaddresses` are at the same level and considered two distinct resources. Do you have control over the api where you could return something along the lines of?\nruby\n{\n  client: {\n    name: \"Sam\",\n    surname: \"Sterling\",\n    addresses: [{ line1: \"123 Sesame St\" }]\n  }\n}. Going to close the issue now that we have a solution. Thanks again \ud83d\ude3a . Apologize for not getting back to you on this @samstarling. Went ahead and put together a sample project using form_for. Take a look and see if that helps. If not feel free to reopen the issue.\nThanks!. #382 documents the issue w/ validates_numericality_of. There's an open PR that seems to fix the issue but need to take another look and see if we can update ActiveModel instead. Until then hope this helps.\nThanks!. You could try following #101 and see if that helps. The method's been renamed as store_response_errors. Rails 5.2 support is now available in v1.0.0 \ud83c\udf89\nThanks!. This has been on the todo list for some time. Thanks @ssuttner \ud83c\udfa9 \ud83d\udc4d . Just remembered we have another open PR #298 that cleans up change tracking. Let me see if it can be merged because it should help w/ this PR \ud83d\udc4d . @zoltankiss I started working on a branch which finally updates activemodel. Some of the changes introduced in 4.2.1 we depend on are backwards incompatible so our best option is probably to branch out the codebase like Devise and Rails. Once that's done we should have a better idea what's  required to support Rails 5.2. It looks like we already know @attributes is one of those things \ud83d\ude3a \n. @zoltankiss can we go ahead and create a separate PR for https://github.com/remiprev/her/pull/492/commits/b6bc6b16f21fea7f7cd9197f60cde26781a8e333 since it's backwards compatible? Once we branch the code we won't have to worry about keeping those changes in sync \ud83d\ude3a . Only the changes to activemodel 4.2.1 described above. We've accumulated some technical debt related to dirty attributes that we're trying to pay off in the process of supporting 5.2. Thanks for the extra help testing @grk! We should have a more robust solution ready for everyone by this Saturday \ud83d\ude3a . Gonna close this now that we've merged #500. For those interested, 5.2 support is provided in v1.0.0 \ud83c\udf89 \nThanks @zoltankiss!. Hi @skswhwo thanks for your PR \ud83d\ude3aDo you mind including a brief description of the issue? If you can give an example or test case that would also help us tremendously.\nIf it helps clarify things, reserved is meant to correspond to the predefined primary key (usually id) and any associations on the model.\nThanks!. closing as duplicate of #372. thanks for the PR!. @ssuttner thanks so much for these improvements! \ud83c\udfa9\ud83d\ude4c. Gonna close this one due to inactivity. Feel free to reopen if it's still an issue \ud83d\ude3a . @edtjones mind taking a look?. correct, we'll follow this up with #500 which requires a major 1.0 release \ud83c\udf89sound good?. @zoltankiss mind taking a look? . Confirmed this is an issue. Here's a failing spec\n```ruby\ndescribe \"calling reload on deleted resource\"\n  before do\n    Her::API.setup url: \"https://api.example.com\" do |builder|\n      builder.adapter :test do |stub|\n        stub.delete(\"/users/1\") { [200, {}, { id: 1, name: \"Tobias\" }.to_json] }\n        stub.get(\"/users/1\") { [404, {}, { errors: [\"Resource not found\"] }.to_json] }\n      end\n    end\nspawn_model \"User\"\n\nend\nit \"handles reload on a deleted resource\" do\n    @user = User.destroy_existing(1)\n    expect(@user.reload).to be_nil\n  end\nend\n```\nThis could also occur if you're holding onto a resource that's been deleted by someone else\n```ruby\n@user = User.find(1) \nin the meantime someone else deletes the resource\n@user.reload #=> :(\n```\nOne solution would be to mark the resource as destroyed and return self\nruby\n@user = User.destroy_existing(1) <User(users/1) id=1 name=\"Tobias F\u00fcnke\"> \n@user.destroyed? #=> true\n@user.reload #=> <User(users/1) id=1 name=\"Tobias F\u00fcnke\">\n@user.destroyed? #=> true\nHowever the idea behind reload is the object is reinitialized with the result of find, which in this case is nil. My preference would be for Her to behave like ActiveRecord and raise a ResourceNotFound in the event find returns nil or the status is 404. \n```ruby\ncalling find on non-existing resource\n@user = User.find(-1) #=> raises Her::Errors::ResourceNotFound\ncalling reload on deleted resource\n@user = User.find(1)\n@user.destroy #=> DELETE /users/1\n@user.destroyed? #=> true\n@user.reload #=> raises Her::Errors::ResourceNotFound\nexample catching error\ndef user\n  @user ||= User.find(-1)\nrescue Her::Errors::ResourceNotFound\n  NullUser.new\nend\n```\nTo add this behavior we'd be looking at a breaking change to the find api. Thoughts?\n@voltechs in the meantime are you able to rescue the nil exception or provide a workaround?\nThanks!. @voltechs your best bet would be to use Faraday's RaiseError middleware and catch the exception when the resource is not found. This also satisfies the find use case above \ud83d\ude0e \nGonna close this since we have a solution but feel free to reopen if you're still having issues. Thanks!. We\u2019ve been happy so far with github releases to maintain a changelog. Thanks! . awesome thanks \ud83c\udfa9\ud83d\udc4d . You're correct @seanbjornsson. The path option for associations should override any defaults, including belongs_to associations. Working on a fix but need to run through some tests first \ud83d\ude3a . See the problem. I'll take a look shortly. Thanks @espen \ud83d\udc4d . Here's a failing spec I think captures the problem. Working on a fix...\n```ruby\n    context \"to a symbol\" do\n      before do\n        Her::API.default_api.connection.adapter :test do |stub|\n          stub.post(\"/users\") { [200, {}, { person: { id: 1, fullname: \"Lindsay F\u00fcnke\" } }.to_json] }\n        end\n    spawn_model(\"Foo::User\") { parse_root_in_json :person }\n  end\n\n  it \"parse the data with the symbol\" do\n    @new_user = Foo::User.create(fullname: \"Lindsay F\u00fcnke\")\n    expect(@new_user.id).to eq(1) #=> failing\n    expect(@new_user.fullname).to eq(\"Lindsay F\u00fcnke\")\n  end\nend\n\n```. Fixed now by d0b49f10f19461dcb4973cdf57094069ab140b8c and published in releases v1.0.2 and v0.10.3. Thanks!. Is this still a problem or were you able to find a solution?. Closing because of inactivity. Feel free to reopen if it\u2019s still an issue. . You could try following #101 and see if that helps. The method's been renamed as store_response_errors. Confirmed this is a regression \ud83d\ude05 \nAlthough documentation states\n\nOptions Hash (opts):\n:path (Path) \u2014 The relative path where to fetch the data (defaults to /class_name.pluralize/id)\n\nIn the end we were actually defaulting to resource_path or collection_path. Go figure \ud83d\ude09\nThe ideal solution would continue to support the custom path option as well as default to resource_path or collection_path based on the type of association. Keep in mind we also maintain a list of associations on the parent class. Specs for that can be found here FWIW #425 documents a similar issue with has_many.. @keegangroth's fix can be found in release v1.1.0. Thanks everyone!. thanks @keegangroth \ud83c\udfa9 \ud83c\udf89 . Can you help us with a failing test or steps to reproduce?. Fixed by #514 and released in v1.1.0. Thanks!. Glad you found a solution \ud83d\ude3a Normal usage for introducing common scopes would be inheritance or some sort of mixin. Is the monkey-patch based on your original need to override where? Be aware there's still an issue with scopes on associations. \nGoing to close this issue now. Please let us know if you have any further questions!. Your best bet is to define scopes or class methods on the model, since Her can't predict what conventions an API follows for each of these options. Some examples\n```ruby\nclass User\n  include Her::Model\n# @example\n  #\n  #   User.page(2) # Fetched via GET \"/users?page=2\n  scope :page, ->(value) { where(page: value) }\n# @example\n  #\n  #   User.limit(100) # Fetched via GET \"/users?limit=100\n  scope :limit, ->(value) { where(limit: value) }\n# @example\n  #\n  #   User.order(:name) # Fetched via GET \"/users?sort=name_asc\n  def self.order(params = {})\n    params = Hash[params, :asc] if params.is_a? ::Symbol\n    where(sort: params.flatten.join('_'))\n  end\nend\n```\nAnother idea would be to move these into a base class or mixin so they could be reused.. What's the purpose behind the param method? Can you provide a sample of what the HTTP request would look like?. Ok, see now where this particular problem is discussed in #519. Let's move the conversation over there and see if we can find a solution since we covered support of limit, page, etc. \ud83d\ude3a . Hi @noctivityinc, update_attributes was deprecated in favor of assign_attributes long ago (see usage). Not sure why this was done, but it shouldn't be difficult to add update_attributes and have it behave similar to ActiveRecord in that it calls save afterwards. I'll take a crack at it tomorrow \ud83d\udc4d . update_attributes added in 1849339b317177e9dfc5546aa413be45b779c63f as well as support for strong parameters. Like ActiveRecord you'll need to permit these params before sending them to your Her model.\n```ruby\nuser_params = params.permit(:name, :email)\ninitialize with params\nuser = User.new(user_params)\nassign params\nuser.assign_attributes(user_params)\nupdate with params\nuser.update_attributes(user_params)\n```\nPublished in release v1.1.0\nGonna close this as fixed now \ud83d\ude3a . Unfortunately no, but that would be a really cool feature that we'd love to see \ud83d\ude3bThere's a more fundamental problem with scopes on associations that will probably need to be resolved first.. Do you have a sample response and the call which is producing the error?. That should be enough @noctivityinc. Not sure why a separate request is made to pick up the first device offer since they should be cached after .all. Tied up at the moment but I'll try and reproduce later. . Setting up different apis for different models would let you specify the middleware you want for each. Would that solve your issue?. Can we add multiple users here for consistency?. how about?\nruby\ncontext \"for existing collections\" do\n  let(:users) { Foo::User.all }\n  it \"has no changes\" do\n    expect(users).to_not include(be_changed)\n  end\nend. this should come in handy elsewhere \ud83d\udc4d  . This should be covered in #404.. nice \ud83d\udc4d \nOnce we update ActiveModel we should probably look at clear_changes_information after a record is fetched or reloaded and changes_applied after persistence.. Can we stick w/ the current, explicit style to keep the specs consistent? Also think it helps to see the json w/ each stub \ud83d\ude3a . Think we're already good on coverage here. timeout and open_timeout would probably distract from the spec which is focused on foo.  Can we go ahead and remove this commit?. So the build is passing on Travis w/ commit 86ceadd833e003030932168761348defa894167b and  to be sure I tested on a separate branch. We should be ok  to drop commit 6f01adce19caa36c24b4a7ec931e99aa6fc4578d \ud83d\udc4d . Believe there's confusion around the timeout and open_timeout options introduced in #400. These options should be part of the request hash set on the connection. There's a thread on Faraday w/ more detail.\nAs far as I can tell open_timeout and timeout are never recognized by Faraday unless they're part of the request hash, or set on the builder, going as far back as 0.5.7. The syntax should be\nruby\nHer::API.setup(url: \"https://api.example.com\", request: { timeout: 10, open_timeout: 2 })\nCan you confirm?. Haven't played around w/ the faraday retry options much. Is there anything there you could take advantage of? \nRegardless it sounds like this is a separate issue and there's another PR explaining how to properly use timeout and open_timeout w/ Her. I'll go ahead and close this PR then.. Can we try iterating over association_names instead?. do we need a has_one spec also?. do we want to put these comments underneath if method == :options like we do for if method == :get?. Can we reset changed_attributes inside instantiate_record like #411? That would be closer to the recommendation and correct this small difference\n```ruby\nActiveRecord behavior\nuser = User.new(id: 1)\nuser.changes # =>  {\"id\"=>[nil, 1]}\nHer behavior\nuser = User.new(id: 1)\nuser.changes # => {}\n```\n  . didn't notice a difference running these specs w/ the previous code. would be fine removing this block and sticking with the coverage you added above \ud83d\udc4d . Agree w/ the overall coverage of these specs. Is it possible to combine them into one spec and narrow the coverage. How about?\n```ruby\nbefore do\n  Her::API.setup url: \"https://api.example.com\" do |builder|\n    builder.adapter :test do |stub|\n      # ...\n      stub.get(\"/users?where=6\") { ok! [{ id: 4, fullname: \"Tobias F\u00fcnke\" }] }\n      stub.get(\"/users?where=7\") { ok! [{ id: 2, fullname: \"Lindsay F\u00fcnke\" }] }\n      stub.get(\"/users\") { ok! [{ id: 1, fullname: \"Tobias F\u00fcnke\" }] }\n    end\n  end\nspawn_model \"Foo::User\" do\n    # ...\n    scope :baz, -> { bar(6) }\n  end\nspawn_model \"Bar::User\" do\n    scope :baz, -> { where(where: 7) }\n  end\nend\n...\nit \"does not share scope with other models\" do\n  expect(Bar::User.scoped).not_to respond_to(:foo, :bar)\n  expect(Foo::User.scoped.baz.params[:where]).to eq(6)\n  expect(Bar::User.scoped.baz.params[:where]).to eq(7)\nend\n```. Noticed an issue with child classes no longer inheriting scopes. Can we make sure that's still available?\nHere's a failing spec\n```ruby\nbefore do\n  spawn_model \"Foo::User\" do\n    scope :active, -> { where(status: \"active\") }\n  end\nFoo::Admin = Class.new(Foo::User)\nend\nit \"passes scopes to children\" do\n  expect(Foo::Admin.scoped).to respond_to(:active)\nend\n```. Good catch \ud83d\udc4dReserved keys are stored as symbols but attributes can be assigned with string keys. It should instead read \nruby\nreserved.include?(k.to_sym)\nWould you like to submit a PR?. let's go ahead and remove the extraneous describe \"[:<association>]\" blocks since the subject's already defined\nruby\ncontext \"single has_many association\" do\n  let(:association) do\n    # ...\n  end\n  before { Foo::User.has_many :comments }\n  subject { super()[:has_many] }\n  it { is_expected.to eql [association] }\nend. thanks for grouping these. we're beginning to push the limits of context depth but once we remove the extraneous describe blocks this should be fine \ud83d\ude0e Do you mind going ahead and changing these to describes as well?\n```ruby\ndescribe \"has_many association\" do\n  subject { associations[:has_many] }\n  context \"single\" do\nend\n  context \"multiple\" do\nend\nend\n``. while we're refactoring think we should use an explicit subject instead of callingsuper()`?\nruby\ncontext \"setting associations without options\" do\n  subject(:associations) { User.associations }\n  # ...\n  context \"single has_many association\" do\n    subject { associations[:has_many] }\n  end. Let's keep the setting associations specs up top. It's useful to first understand how association definitions are stored on the model before diving into how they influence build & creation.. still needed?. still needed?. Let's instead make this part of the initial assignment. Also fine removing the comment.\nruby\nfiltered_attributes =\n  attributes.dup.each_with_object({}) do |(key, value), memo|\n    value = value.serializable_hash if value.is_a? ActiveModel::Serialization\n    memo[key] = value\n  end.symbolize_keys. Let's test the public version of #to_params since .to_params is marked private.\nruby\n    it 'serializes the instance in `to_params`' do\n      attributes = { model: @model }\n      user = Foo::User.new(attributes)\n      expect(user.to_params).to eq(model: { name: 'foo' })\n    end. since the docs recommend using strings instead of symbols and we wanna make sure everything's symbolized by to_params can we go ahead and change this spec to string keys? \nruby\ndef attributes\n  { 'name' => nil }\nend. We've actually been meaning to update activemodel for some time. 4.2.1 or 4.2.7 will give us the same api and help clean up some of the existing code.. Makes sense. We have other examples where instance variables follow a @_<variable> format but they're prefixed with @_her_<variable>. Not a strong justification but following that format would give us consistency.. let's opt for beginning_only. let's skip this cop. let's turn these into underscores instead. I prefer this style as well but don't know what the effects would be or the original reason for prefixing these instance variables with _her.  For example would we run into a situation like @attributes where another class defines @associations and we have a naming conflict? Any thoughts @edtjones?. agree with keeping this rule and replacing the class definitions with spawn_model instead. . let's skip this. let's skip. let's skip. let's skip. ok let's enable and autocorrect \ud83d\udc4d . let's enable and autocorrect \ud83d\udc4d . let's enable and autocorrect \ud83d\udc4d . let's skip. let's skip. let's skip. We need each association in the list of <HerModel>.associations to include a path. The documentation states this will default to /{class_name}.pluralize/{id} for belongs_to though I agree it should be resource_path or collection_path depending on the type of association.. @keegangroth after further thought I'm more inclined to accept a default path of nil on belongs_to \ud83d\udc4d  Long term we might want to refactor .associations to resemble something like ActiveRecord::Reflection \ud83d\ude05 \nUntil then, defaulting to nil would have the following, expected behavior on belongs_to associations: use path if provided, otherwise build_request_path would default to resource_path. We'd also need to update the docs for belongs_to (maybe remove the defaults to... language)\n@edtjones see any issues here?. should we also run_callbacks :initialize here?\n. we can remove this since new_record? doesn't rely on an instance variable yet \ud83d\ude3a. To stick w/ ActiveRecord behavior, we'll also need to clear or assign nil to any association caches. \nAssociations which aren't included in the initial request are stored in separate instance variables following a @_her_association_<name> convention. \nAssociations which are part of the initial request are merged w/ @_her_attributes.. can we go ahead and move this to attributes.rb below initialize?. Let's go ahead and refactor save_existing to use your method\nruby\ndef save_existing(id, params)\n  save_existing!(id, params)\nrescue Her::Errors::ResourceInvalid => e\n  e.resource\nend. Similar to .save_existing but raises ResourceInvalid if save fails. ruby\nit \"handle resource update through .save_existing!\" do. ruby\nit \"raises ResourceInvalid when .save_existing! has errors\" do. ",
    "girak": "+10 !  we need ActiveModel::Serializers output to make her useful\n. :+1: \n. @billc yea in that case that should be an option as it's not conventional?\n. ",
    "TonsOfFun": ":+1: :+1: \n. :+1: \n. :+1: \n. ",
    "steveklabnik": "Let me know if I can help with anything here, and please let us know what you think of json-api; this kind of project should be a fantastic use case.\n. (also, note that AMS today only supports ~80% of the spec; we've been modifying the spec with feedback and discussion over the last two weeks, and need to bring the code back in sync. That said, default AMS output should conform to JSON API as of the next release, so you don't need to worry about setting special AMS options or anything.)\n. I believe this may be an AMS issue actually.\n. The plural tjing\n. ",
    "butsjoh": "+10 as well, we are getting in to JSON api's and are really betting on the json-api spec so if her would support it we will try to contribute as well. \n. I was to quick with the first fix. It is actually the last one that really fixes it. Drove me crazy ....\n. ",
    "prognostikos": "I've finally found some time to look at this and #116 is ready to merge.\n. @robinhoudmeyers @steveklabnik I'm happy to look into this but I'm not 100% clear on what the issue is. Looks to me like there may be two:\n1. Plural vs. Singular for root key (as far as I can see this is not defined in the JSON api spec?)\n2. \"Singular resources are represented as JSON objects. However, they are still wrapped inside an array:\"\n@steveklabnik does AMS support the second or is that something that's missing?\n. @robinhoudmeyers I agree that all the examples are plural - but I'm not sure if that's by design. It would be nice if it were more explicit...even just specifying something like \nthe resource name must match the last component in the endpoint (i.e. /api/posts -> \"posts\":[])\nwould make sense to me.\n. @robinhoudmeyers basically \"life got in the way\" :)\nI may have time to look at this again this weekend. You're welcome to take a crack at the refactor.\n. @robinhoudmeyers I'm talking about refactoring Her::Model::HTTP to take the parsing options into account rather than just checking the type.\n. I may have some time for this tomorrow afternoon/evening my time (UTC+2) if anyone wants to pair with me.\n. Activesupport 4 doesn't like ruby 1.8 or 1.9.2, it seems...\n. ",
    "hoetmaaiers": "I have a problem with my API being compliant with JSON api (using Restpack serializer ).\nFor singular and collection requests, JSON api defines to both return an array nested in a plural root element. This is something that is missing for Her, or am I missing something?\n. So to conform to the JSON api spec, the root key should be plural all the time?\nWhat about an array for singular requests?\n. @prognostikos in the JSON api spec, the topic about 'top level' describes all resource names in a plural form. Or is it my misinterpretation?\n. If both singular and collection requests return JSON objects wrapped inside an array, I feel fine with the top level being plural tense.\n. I'm wondering why this pull request did not continue?\nHer supporting the json-api spec would be great.\nAny help neded on the failing spec?\n. Aaaah life again :)\nAre you talking about a small refactor? Or just the pull request?\n. ",
    "mbulat": "Any plans on supporting ActiveModel::Serializer side-loading, ie setting embed :ids, include: true ?\n. ",
    "chrise86": "Has there been any developments on the side-loading?\n. ",
    "groodt": "Whats the recommended approach for this now?\n. ",
    "fishermand46": "Any updates on this? The active_model_serializers feature is actually pretty broken without this being fixed, and there are a two open issues related to it (#302 and #177).\nActive model serializers spit out json that looks like this: {\"users\": [{\"id\": 2, \"name\": \"John\"}]} but Her expects a root node for each object in the collection which is a format I have personally never even seen before.\nI'd be willing to take a stab at a pull request, but I am not very familiar with the code base and would not know the best place to fix this problem.\n. ",
    "jamesfzhang": "Are you getting a Errno::ETIMEDOUT (Operation timed out - connect(2)) error? If so, :+1: from me\n. ",
    "odcinek": "Yeah, it's almost like \"Her::Model::Relation / where / for base classes\" from https://github.com/remiprev/her/blob/master/spec/model/relation_spec.rb, but initial GET /users is empty\n``` ruby\nbefore do\n  Her::API.setup :url => \"https://api.example.com\" do |builder|\n    builder.use Her::Middleware::FirstLevelParseJSON\n    builder.adapter :test do |stub|\n  stub.get(\"/users\") do |env|\n    ok! [\n      @created_user,\n    ].compact\n  end\n\n  stub.post('/users') do |env|\n    @created_user = { :id => 3, :fullname => 'George Michael Bluth' }\n    ok! @created_user\n  end\nend\n\nend\nspawn_model \"Foo::User\"\nend\nit \"does not reuse empty relations\" do\n  Foo::User.all.should have(0).items\n  Foo::User.create(:fullname => 'George Michael Bluth').id.should == 3\n  Foo::User.all.should have(1).items\nend\n```\n. Yep, works great, thanks man!\n. ",
    "stevschmid": "Sure thing!\nClosed in favor of #125 \n. Cheers! :+1: \n. RIP in pepperonis her!\n. ",
    "Phantoms": "Your test passes on my end as well. And my code is absolutely trivial. \nI guess there is something in my Rails setup that is interfering with Her.\nI get \nNoMethodError: private method `define_method' called\nonly when i try calling scope.\nUpdate:\nIf i create a file with just this\n``` Ruby\nrequire 'rubygems'\nrequire 'her'\nmodule Namespace\nend\nclass Namespace::User\n  include Her::Model\n  scope :s, ->{ }\nend\n```\nit fails with the same error.\n. Thank you. Seems to be working.\n. ",
    "terlar": "I agree, this was what I ended up doing in the end.\n. Okay, seems I should have read the documentation/code more carefully.\nThis solution works. Thank you!\n. ",
    "edtjones": "Hi R\u00e9mi,\nI think I'm having the same issue so wanted to add some code. My associated models are breaking when I try to class_eval them (I have a gem which I'm including in a Rails project, and want to class_eval the models to add project-specific methods):\n```\nmodule OurProject\n  class Document\n    include ::Her::Model\n    has_many :pages, class_name: \"OurProject::Page\"\n  end\nend\nOurProject::Page.class_eval do\n    def some_method\n        #this doesn't work - we get an error from Her:\n        # NoMethodError: undefined method `request' for nil:NilClass\n    end\nend\n```\nHope this is useful. For us, returning the actual OurProject::Page object when requesting OurProject::Document.pages would be really useful.\nThanks, by the way, for an awesome library :-)\n. Hey nice spot Dominic, thanks. Just to be sure I understand - the ID field needs to be included in the JSON returned for the parent resource? Is the name of the field 'magic'? ([entity]_id)\n. hi @ddevaal @oliverzeyen the answer is that the actual json returned from the server needs to have a field referencing the parent ID. So in my document/pages/diff example above, data on /documents/1234/pages/5678 needs to include document_id: 1234 in the json response.\nThere is another way to hit deeply nested resources, and it's cheaper than this way anyway. To use my example from above:\nclass Diff\n   collection_path \"/documents/:document_id/pages/:page_id/diff\"\nend\nDiff.where(_document_id: 1234, _page_id: 5678).first #hits /documents/1234/pages/5678/diff without having to walk through the ancestor resources\nHope that's useful.\n. @chewi definitely, and looks really useful. Need to absorb fully. Are there any downsides / expected failure modes which mean we should be careful about merging this in?\n. hi @shashiprab @chewi this has been hanging around for ages - sorry! Don't have the mental bandwidth to deal with the implications of merging this at the moment but I would be delighted if someone else could review.. hi @chewi  I've just got commit access on this repo and plan to get back on track with maintenance over time - will be in touch soon!\n. Thank you @chewi. Will review and merge as soon as poss. Haven't looked at the code yet; how are you caching? I ask because I would prefer that we don't have loads of partial solutions to caching floating around. . Happy to discuss @chewi - what would be the alternative, and how could we do it?. @chewi I would need to plough through the code to understand completely (sorry - didn't write this bit) but have you come across send_only_modified_attributes in the setup block? https://github.com/remiprev/her#dirty-attributes\n. OK I see. Are these separate endpoints or nested data? I assume separate endpoints?. Really grateful for all your effort on this @chewi and the changeset looks like it's really useful. Paging @zacharywelch - I don't have a lot of headspace right now. Can you sign off on this?. I\u2019ve had this where an attribute is called \u2018attributes\u2019. Might not be related. I fixed up in a middleware. \nEd \n\nOn 10 Apr 2018, at 16:21, James Le Cuirot notifications@github.com wrote:\nDrat, after months of no issues and heavy use in production, my colleague ran into an infinite loop involving to_json. It looks very much like the earlier problem with inspect. Investigating...\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @remiprev I will reluctantly put my hat in the ring to maintain Her - it's invaluable to us at https://github.com/rooftopcms and https://github.com/errorstudio\n\nI'll need involvement from everyone else too though! Only have limited time. I suggest you/we follow the 'successful pull request gets commit access' model if you're too busy.\nPlease give someone commit access to merge all the PRs\n. Hi @losco @giedriusr @hubert @bf4 @sambao21 @will-r - @remiprev has handed over the keys to the Her repo and I'll do my best to keep it maintained with the community's help. My colleague @foxpaul will be involved too.\nThe plan of action in the short term is to plough through the PRs and see which ones make sense to merge immediately; we would like to use the 'one PR merged = commit access' model, so we can all review stuff. Hope that suits.\nI'll close this issue now.\n. Thanks for the nudge! This looks really interesting. \nA few questions (I don't know the answers!):\n\n\nShould we go one step further and use something with swappable backends like httparty?\n\n\nwith a connection pool the requests are usually blocking, so you can run out of connections. Obviously, disregarding the negative side effects of resending the same tcp packets in Net::HTTP, that wouldn't happen in the current implementation. Does that mean that this could break an existing implementation if someone naively added a connection pool which is too small?\n\n\n--\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 27 Dec 2016, at 05:38, Vladimir Kochnev notifications@github.com wrote:\ncc @edtjones @foxpaul :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. hi @DocX  I've just got commit access on this repo and plan to get back on track with maintenance over time - will be in touch soon!\n. Hi folks,\n\nI've just taken over maintenance of this gem and pushed 0.8.2 which includes support for Rails 5.\n. hi @siassaj @giedriusr  I've just got commit access on this repo and plan to get back on track with maintenance over time - will be in touch soon!\n. hi @coreyward  I've just got commit access on this repo and plan to get back on track with maintenance over time - will be in touch soon!\n. hi @zkwentz @ryanswood @arturseletskiy @jkappers I've just got commit access to this repo and this will be my first merge! Will keep you posted here.\n. Hi folks,\nRather than accept this PR I've written a slightly more permissive change to the gemspec. I'll close this one now.\nEd\n. hi @abhikalakuntla  I've just got commit access on this repo and plan to get back on track with maintenance over time - will be in touch soon!\n. @abhikalakuntla sorry for the delay.\n@ticktricktrack this feels like one which should be easy to merge. Do you agree?\n. Sorry you've had to chase. Will review and merge tomorrow. \nHappy new year!\n--\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 5 Jan 2017, at 02:52, abhikalakuntla notifications@github.com wrote:\nbump\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @abhikalakuntla I've just released version 0.8.4 with this PR merged. I'm really grateful for the input - thankyou.. Thanks @SirRawlins - would be delighted to have whatever input you have time for.. @abhikalakuntla @SirRawlins can you help with this?. hi @avdmatamoros @mtwentyman @cimtico I've just got commit access on this repo and plan to get back on track with maintenance over time - will be in touch soon!\n. Hi @linkyndy hmm - tricky. I would probably use instance methods to approximate the relationship here - on Client you could have:\n\nclass Client < ActiveRecord::Base\n  def payments\n     Payment.where(client_id: self.id).to_a #without the to_a you'll get an unexecuted query\n  end\nend\nCould that work?\n. Ideas about how it could work or - even better - a PR welcome @linkyndy :) I think the main issue is the fact that the associations, while sharing method names, are fundamentally different. Will give it some thought.\n. hi @avdmatamoros the answer was no, but I hope is now yes! R\u00e9mi has handed me the keys and @foxpaul and I would like to see this gem actively maintained again.\n. Hi @brylor (I'm new here as a maintainer but I've used Her for a long time). The where query is lazily evaluated when you iterate over the contents. This should make the call:\n```\nCluster.where(name: system).to_a\nor\nCluster.where(name: system).each do |result|\ndo something with result\nend\n```\n. hi @tiagogodinho @lucasrenan  I've just got commit access on this repo and plan to get back on track with maintenance over time - will be in touch soon!\n. hi @chewi I've just got commit access on this repo and plan to get back on track with maintenance over time - will be in touch soon!\n. hi @lipanski I've just got commit access on this repo and plan to get back on track with maintenance over time - will be in touch soon!\n. @ticktricktrack d'you have time to sanity-check this and merge? seems like an easy one.\n. @lipanski just did! 0.8.3 is on rubygems. Thanks SO much for your contribution (and the nudge) :-). FANTASTIC Rainer. \nWould you like commit access? Feels like you might actually be ahead of us in terms of getting going with this. \nEd\n\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 30 Sep 2016, at 23:35, Rainer Kuhn notifications@github.com wrote:\n@edtjones @foxpaul I had some fun cleaning up while skyping. Let's get this repo into a sane state again.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Have asked @remiprev to give you access. Thanks for this. \n\n\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 1 Oct 2016, at 09:38, Rainer Kuhn notifications@github.com wrote:\n@edtjones sure, that would be great\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. You should have an invite\n\nEd\n\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 1 Oct 2016, at 09:38, Rainer Kuhn notifications@github.com wrote:\n@edtjones sure, that would be great\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \ud83d\udc4d fine with me!. Hi Mehmet\n\nSo is this a bug in the JSONAPI parser do you think? Are you including the relations in your responses?\n(This is not a part of the codebase I know well)\nEd\n\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 23 Oct 2016, at 11:39, Mehmet Davut notifications@github.com wrote:\nIf i include Her::JsonApi::Model, i can not receive relationships data from my json\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks for this @mehmetdavut - we're still getting up to speed with reviewing all the PRs but will get to this one asap.\n. @Taoshi are ssrs and ssr_groups Her models?\n. Hi there\n\nI haven't investigate this yet, for which apologies. But Her doesn't use ActiveRecord associations, so reflecting on them would mean more code for sure. I would start by looking at the way the associations are defined. \nEd\n\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 23 Nov 2016, at 16:58, pklimenkov notifications@github.com wrote:\nis there a big fix you need to do, can you provide some info on how to fix this?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks for a super bug report, Ian. I haven't seen something like this before. \n\nDoes your user object have an id? Have you specified a different field to be the primary key? Does your user respond to new?() ?\nEd\n\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 23 Nov 2016, at 19:47, Ian Ker-Seymer notifications@github.com wrote:\nSetup\nHer::API.setup url: 'https://api-endpoint.com/api/v2' do |c|\n  # Request\n  c.use Auth0Authorization\n  c.use FaradayMiddleware::EncodeJson\n# Response\n  c.use Faraday::Response::Logger, ActiveSupport::Logger.new(STDOUT) if Rails.env.development?\n  c.use Her::Middleware::DefaultParseJSON\n# Adapter\n  c.use Faraday::Adapter::NetHttp\nend\nclass User\n  include Her::Model\nend\nBug in action\nHere is a pry session (with some sensitive info cleaned up)\n[3] pry(main)> u = User.find('auth0|56e843ce9e61a7af469f8020')\n=> #\n[5] pry(main)> u.nickname = 'test'\n=> \"test\"\n[6] pry(main)> u.save\npost https://api-endpoint.com/api/v2/users\nUser-Agent: \"Faraday v0.10.0\"\nAuthorization: \"Bearer \"\nContent-Type: \"application/json\"\n400\ndate: \"Wed, 23 Nov 2016 19:40:41 GMT\"\ncontent-type: \"application/json; charset=utf-8\"\ntransfer-encoding: \"chunked\"\nconnection: \"close\"\nvary: \"origin,accept-encoding\"\ncache-control: \"no-cache\"\n=> false\nDiscussion\nAs you can see, it attempts to create a new resource as opposed to creating a new one. I would expect this example to PATCH https://api-endpoint.com/api/v2/users/:user_id instead.\nEnv\nGem version: v0.8.2\nRails: 5.0.0.1\nRuby: 2.3.1p112\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. that'll probably be it then :-) Something without an ID is considered new, I think. Can you return one in your result? If not, is there a primary key you can use as a substitute? You can configure your her-backed model to use that: https://github.com/remiprev/her#custom-primary-keys. Hi @jkappers yeah that feels wrong doesn't it. Will mark as a bug.. @jkappers in practical terms what problem is this causing you? And what would you have expected?. @jkappers thanks. The relations aren't an area of the code I know well, but I'll do a bit of spelunking when I can. @zkwentz @ticktricktrack d'you recognise this issue?. @masonjm thanks for this. How did you find this edge case? Would it be best to fix the reason there isn't a hash in the first place? . @masonjm so the next was producing nils whereas your next hash fix returns a hash. Nice. Seems like it shouldn't break anything. I'm happy if you're happy :-). Thanks @mascott I'm grateful. Merged :-). Hiya. Can't you do that by specifying the class?\n\nhas_many :bank_accounts, classname: 'RemoteBankAccount'\nUnless I have misunderstood?\nEd\n--\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 26 Dec 2016, at 10:54, Nicolas Besnard notifications@github.com wrote:\nIn the following case:\nclass RemoteBankAccount\n  collection_path 'bankaccounts'\nend\nclass RemoteUser\n  has_many :bank_accounts\nend\nI could be nice to use collection_path instead of the association name.\nIf you are ok, I can do the PR :)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hi @nicolas-besnard OK I understand. Makes sense to parameterise that I guess. A PR would be welcome :). I think it should be parameterised / optional @nicolas-besnard . You want to take a swing at a PR and we'll see how we go? Thanks loads for being involved :-). Hi Nicolas\n\nYou could write a very small Faraday middleware to do that. I have done something similar which dumps env into stdout. \nWill dig out some code when I'm at my machine. \nEd\n--\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 26 Dec 2016, at 11:03, Nicolas Besnard notifications@github.com wrote:\nSometimes it could be nice to have access to the server raw response. Is it possible at this time ?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hi there\n\n(Didn't write this code - @remiprev did)\nFeels ok to me because even if it's not threadsafe it's defining associations which will be the same in all threads.\nUnless I'm missing the point? Happy to review a PR if there's a better way :-)\nEd\n--\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 3 Jan 2017, at 12:26, odyss009 notifications@github.com wrote:\nWhen I read the her source code, I saw suspicious part.\nhttps://github.com/remiprev/her/blob/master/lib/her/model/relation.rb#L67\nhttps://github.com/remiprev/her/blob/master/lib/her/model/associations.rb#L34\nIs above code thread safe?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks for this @dhenze - I think if we're going to return errors for the destroy method shouldn't we do so for all request types?. @ticktricktrack @zkwentz @foxpaul do you have a view? Seems smart to have responses which represent what happened, UNLESS we want to take the approach that the thing returning the success was the request in which case what happens now is correct.. Sorry @dhenze haven't had headspace to review this. Looks ok from a quick look. Please nudge if you haven't heard anything in a week.. Hi @dhenze I think we should merge this. I think the general expectation would be to return errors from the api. Will do it tonight. . So sorry - had a bananas time the last few weeks. Will merge asap. \n\nWould you like commit access? I am keen to share the work with people who want to be involved. \nEd\n--\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 2 Mar 2017, at 09:06, Daniel Henze notifications@github.com wrote:\n@edtjones Any news on this?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @dhenze with big apologies for the delay, I've merged this and released 0.8.5 to rubygems. Let me know if you want commit access - I'm keen to share the work :-). Hi - it seems a bit data specific for a REST client in my opinion but please do elaborate / put together a PR and I will have a proper look. :-)\n\n--\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 11 Jan 2017, at 23:15, Mr. Outis notifications@github.com wrote:\nWould be awesome to have something like ActiveRecord::Base enum.\nWhat do you think?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hi @danielneis\n\nInteresting. Can I see some code which shows what isn't working?. Hi @danielneis\nIsn't it the job of the rest api to expose that? I can't think how Her could infer from an integer supplied from a remote endpoint what the enum should be. \nIf I were developing the API and I couldn't return the string of the enum in the rest response, I would build an endpoint which exposed the mapping between integer and endpoint. \nEd. OK I understand @danielneis.\nI can't see how we could infer the done?() method from the \"done\" string in a generic way, so I don't think this use-case will make it into the library (but PRs are most welcome if you can think of a way!). However for this example, you might be able to dynamically define a method on the instance by mutating it in an after_find() hook.\nTOTALLY UNTESTED ;-)\nclass Test\n   include Her::Model\n   after_find ->(record) {\n      record.send(:define_singleton_method, :\"#{record.status}?\", ->{record.status})\n   }\nend\nSlightly crazy metaprogramming there, but that would define an instance method called done? on your instance record.\nMay / may not be what you're looking for :-). If you have total control over the API side, and no external requirements for the schema, I agree - make it as easy as possible to consume :). Hi @allthesignals - are you trying to hit the api with a different parameter, or do you want to stop hitting the api at all under these circumstances?. hi @allthesignals \nWell: really you don't want to involve Her at all for that, by the sound of it. I've used a pattern in the past for filtering posts returned from our headless WordPress, https://www.rooftopcms.com - get all your objects once, then filter them in memory using Enumerable#select and union the collections.\nHere's a snippet of code which filters a collection of events. In this case there are scopes on Event called things like showing_between, which actually do make requests to the API. This particular example is in a controller but you could refactor this code to be a class method on an API-backed model.\n```\ndef filter_events(events)\n# What we're going to do is push into this array a bunch of different collections which match different filter criteria. At the end, anything which is in the results of all the filters will be the matching selection we want, so we can just union them.\n# So say we have [[a,b,c],[a,c],[b,c]], only c will match all 3 filters and be returned when \n# we call (:&) on the array.\n\n# Build a collection of collections, which we will intersect to get only ones which match all\nall_match = []\n\n# push into the array anything which matches the date criteria\nif params[:from].present? && params[:to].present?\n  from = DateTime.parse(params[:from]) rescue DateTime.now\n  to = DateTime.parse(params[:to]) rescue DateTime.now\n  all_match << events.showing_between(from,to)\nelsif params[:from].present?\n  from = DateTime.parse(params[:from]) rescue DateTime.now\n  all_match << events.showing_on(from)\nend\n\n# Push into the array anything which matches the venue\nif params[:venue].present?\n  all_match << events.matching_summary_venue(params[:venue])\nend\n\n# Push into the array anything which matches the genre\nif params[:genre].present?\n  all_match << events.with_genre(params[:genre])\nend\n\n# free-text search\nif params[:q].present?\n  all_match << events.matching_query(params[:q])\nend\n\n#\u00a0intersect all collections to return only the ones which match all the filters\nall_match.inject(:&)\n\nend\n```\nHope this might help? I was mulling suggesting you reimplement scope() in your class with Her::Model mixed in but I think you could easily get in a muddle. If you want to do this in a model class, I'd decide on another class method name.\n. Cool - glad it helped. I will close this issue but if you want to submit a PR with a way to do what you want and it's generic enough, we can certainly discuss merging it. . Thanks @jhirbour - I'm grateful :-). Hi @stephen-kainos sounds like you're connecting to WordPress :-) The answer is that underscored parameters are stripped - I'm afraid I can't remember why / where.\nWe solved this in our Rooftop CMS Ruby client, which uses Her. The answer is you have to mangle the request in a Faraday middleware.\nHere's how we did it:\nhttps://github.com/rooftopcms/rooftop-ruby/blob/master/lib/rooftop/middleware/embed_middleware.rb#L10\n(You use is like this: where(include_embedded_resources: true))\nHOWEVER: Rooftop CMS is WordPress with a bunch of plugins to make the API more useful - you might well find you can use the rooftop-ruby gem as-is: https://github.com/rooftopcms/rooftop-ruby\n(Would also recommend checking out Rooftop in its entirety if you are using WordPress - it's open source: https://www.rooftopcms.com/). Thanks @kvokka - any reason for writing this rather than using the https://github.com/plataformatec/faraday-http-cache gem?\nAlso, I wonder if you can fix up the failing tests?. @kvokka a quick holding message to say I haven't forgotten about this! Just want to find some time to review properly.. @zacharywelch if you're feeling keen could you review this?. Hi,\nThe only thing which I can think of here is that each part in the response should have an id. I can't see an id field in the child objects.\nEd\n--\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 20 Feb 2017, at 05:37, yongwoon-kim notifications@github.com wrote:\nI got the response via her request as following:\nThe response is nested.\nI want to use contents data as a object.\nBut execute the program, I got a error as follow:\nundefined method `logo' for #\nHow can I deal with as object about contents data?\nIf I deal with hash, Has no problem.\njson.set! :content do\n  json.array! part.content do |data|\n    json.logo           data[:logo]\n    json.bg_img         data[:bg_img]\n  end\nend\nresponse\n{\n  \"page\": {\n    \"title\": \"Rock Fun\",\n    \"parts\": [\n        {\n          \"kind\": \"header\",\n          \"contents\": {\n            \"logo\": \"https://example/assets/logo.png\",\n            \"bg_img\": \"https://example/assets/bg.png\"\n          }\n        },\n        {\n          \"kind\": \"header\",\n          \"contents\": [{\n            \"logo\": \"https://example/assets/logo.png\",\n            \"bg_img\": \"https://example/assets/bg.png\"\n          },\n          {\n            \"logo\": \"https://example/assets/logo.png\",\n            \"bg_img\": \"https://example/assets/bg.png\"\n          }]\n        }\n    ]\n  }\n}\nconnection.rb\nCUSTOM_PARSER = Her::API.setup url: \"https://example.com\" do |conn|\n  conn.use CustomParser\n  conn.use Faraday::Adapter::NetHttp\nend\nparser.rb\nclass CustomParser < Response::Middleware\n  def on_complete(env)\n    json = MultiJson.load(env[:body], symbolize_keys: true)\n    item = json.is_a?(Array) ? json[:page] : [json[:page]]\n    env[:body] = {\n                    data: item,\n                    metadata: {\n                      status: env[:status]\n                    }\n                  }\n  end\nend\nmodel.rb\nclass SiteData\n  include Her::Model\n  uses_api CustomParser\n  collection_path \"/pages/mysite\"\nhas_many :parts\nclass << self\n    def find_organization(path)\n      SiteData.where(path: path).all\n    end\n  end\nend\nclass Parts\n  include Her::Model\n  has_many :contents\nbelongs_to :organization\nend\nclass Content\n  include Her::Model\n  belongs_to :part\nend\nsite_data.jbuilder\njson.result do |json|\n  json.array! @result do |obj|\n    json.title        obj.title\njson.set! :parts do\n  json.array! obj.parts do |part|\n    json.kind               part.kind\n\n    json.set! :content do\n      json.array! part.content do |data|\n        json.logo           data.logo\n        json.bg_img       data.bg_img\n      end\n    end\n  end\nend\n\nend\nend\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hi. You should not need a custom parser - if you include an id for each part in the json response the has_many method should make the child responses into objects. \n\n--\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 20 Feb 2017, at 08:23, yongwoon-kim notifications@github.com wrote:\nIt means that parts, content model should have an id?\nThe raw response data via her, doesn't have an id.\nFor handle data as object, should I insert an id in custom parser?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. HI @pablocrivella thanks for the PR! What situation are you trying to resolve here? Why wouldn't you have an attributes key?. Sorry - not yet. Will review asap. \n\n--\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 17 Apr 2017, at 07:44, nikushi notifications@github.com wrote:\nAny feedback?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Strange. Should certainly be possible. Although I think your resource path is wrong - I assume it's /profile-data/:id ? Or maybe /users/:user_id/profile-data/:id ?\n\nNote that the profile data response needs to have a key called user_id with the user's id if you want to be able to call the user from the profile object. \nCan you proxy the request so we can see what's happening? Are you sure there's no request being made?\n--\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 3 Apr 2017, at 21:33, mkarganov notifications@github.com wrote:\nHi, is it possible to define a has_one association with a dash inside name? Smth like the following:\nclass User\n  include Her::Model\n  has_one :profile_data\nend\nclass ProfileData\n  include Her::Model\n  resource_path: 'profile-data'\nend\nWhat I want to archive is:\n@user.profile_data should make a call to\n/users/:id/profile-data instead of /users/:id/profile_data.\nIf I try now without the line resource_path: 'profile-data' no call is done but result is:\n(Object doesn't support #inspect)\n=>\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Not near a machine to have a play around but a profile() method on user which does a custom get wouldn't be a bad way to do this. \n\n--\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 3 Apr 2017, at 22:21, mkarganov notifications@github.com wrote:\nHi edtjones, thank you for fast response.\nYes, you are right, maybe missing id for profile-data/:id is the cause, unfortunately I am not the guy who designs API, just consuming it. And the endpoint just looks like /users/:user_id/profile-data (without any id for it).\nSo most likely I have to use custom_get to get the data. Or there are other ways?\nP.S. I am logging all requests and while trying with this one I do not see any logs.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks @yensaki that's brilliant. I've merged. Won't deploy a new gem version for now. (Unless you think I should?). This is brilliant @zacharywelch thank you! I'm quite snowed under; how confident should I be just merging this? Will it break anything? I can't see that it can really. . (From a quick code review it looks really self-contained). Amazing. I will try to merge and release this week. Thanks again!\n\n(Would you like commit access? I'm keen to share with as many as are keen to contribute). @vinc yes! Plan to merge @zacarywelch's stuff asap. . @zacharywelch can you sort out the conflict in orm.rb before I merge this? Also an update to the Readme would be ace. Thanks :-). Ace - you want to merge these? You have commit :-). I probably can't release a new gem til Tuesday I'm afraid. . @zacharywelch sorry - maybe I've introduced these conflicts in orm.rb with earlier merges? Can you clean up? Thanks :-). @zacharywelch shall I hold off merging this until we've resolved the conflicts in #442 and #443 ?. Thanks for this @vinc - can we deprecate but not remove :underscore ?. @vinc yeah - that's what I meant. That's fine. I only skimmed the PR on a mobile so I didn't clock that you were introducing an optional method call :-)\nRe middleware - that would be the best way, I agree with @zacharywelch - and you can do transformations in both directions. Various examples here https://github.com/lostisland/faraday_middleware. (@vinc just to say I won't merge this for now, pending refactoring into a middleware - hope ok). Hi @myxrome - interesting idea! Devise has a LOT of hooks into the database. I haven't reviewed the ORM adaptor - would be an interesting exercise - but it feels like it might be hard work to make everything work as devise expects. \nMaybe I'm being overly pessimistic though \ud83d\ude42. \ud83d\udc4d we probably have some readme work to do too. . @zacharywelch you ok with this?. @gotmayonase @zacharywelch thanks for this! \ud83d\udc4d . Thanks @att14 - @zacharywelch are we happy to require pry as a development dep?\n@att14 doesn't your change mean that top level attributes might be ignored? (Sorry - doing a quick review on my phone so I might have misunderstood). @att14 would you mind rebasing and removing the pry dependency? Happy to merge after that. . thanks @zacharywelch  and @att14 . Sorry for taking so long on this @zoltankiss - can you rebase and we will see if we can get the tests passing before I merge?. Merged - thanks so much @zoltankiss. Thanks for keeping going with this Zach :-)\n--\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 6 Oct 2017, at 20:26, zacharywelch notifications@github.com wrote:\ngetting some failures on travis related to bundler versions\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/remiprev/her/pull/464\nCommit Summary\nfix travis.yml bundler\nFile Changes\nM .travis.yml (3)\nPatch Links:\nhttps://github.com/remiprev/her/pull/464.patch\nhttps://github.com/remiprev/her/pull/464.diff\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hi Armando\n\nRecursion problem? Just a wild guess, but I had an api I was consuming with Her which had an attribute called \u2018attributes\u2019 which caused havoc. I fixed it in an after_find, which I think happens before the object is returned. \nEd\n--\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 27 Oct 2017, at 21:13, Armando Lew notifications@github.com wrote:\nHi, good afternoon.\nAfter I tried to use the Her::Middleware::DefaultParseJSON middleware and getting a TypeError (no implicit conversion of Symbol into Integer), I tried to use a custom middleware that someone posted as a solution to the issue. Finally, after getting this middleware to show the response coming from an external API, I fired a query and the app freezes at the moment of creating the model objects from the json response. I don't receive any error on console nor a warning anywhere and I'm able to print the response from the env hash, so my guess is that Her is trying to convert this json response into model objects and there is where the app hangs. Can you please give me some pointers regarding the structure the env data should provide in order for Her to be able to parse accordingly? Thank you. Regards. Armando.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hmm. Hard to know. Can you share your source json in a gist?\n\n--\nSent from my phone: please forgive the brevity.\nEd Jones\n\nOn 27 Oct 2017, at 21:42, Armando Lew notifications@github.com wrote:\nHi Ed, thanks for the quick reply. No, there's no 'attributes' attribute. What I can see is that Her parses a batch of json strings but then crashes. I'm not sure if this issue might be related to an absent attribute or a memory issue.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @zacharywelch I decided to bump to version 0.10.0 rather than 0.9.1 because this release includes your refactor of attributes which is a relatively big chunk of stuff. Hope ok.. Hi @arielkirkwood yes - sorry. will add one.. Glad to have you @arielkirkwood - I've just written up the v0.10.0 release.. Thanks for the report @blazingkin - we could check Bar is defined when defining the association I guess. Fancy putting together a PR?. Perfect - thanks in advance!. Thanks Joe - we should probably refactor so it\u2019s threadsafe really. If you wanted to have a crack at putting a PR together that would be brilliant. Even just a PR for the readme to include some notes on the workaround would be appreciated :-). . Thanks @swamp09. Pinging @zacharywelch - dyou mind sanity checking, Zach?. thanks @zacharywelch :). @samstarling I've taken to massaging the incoming json for APIs like this in a middleware. Here, for example, is a middleware to take Zoho CRM's json and turn it into something Her will understand: https://github.com/errorstudio/zoho-ruby/blob/master/lib/zoho/crm/middleware/response_parser_middleware.rb\n\nYou wouldn't have to do much rework on the incoming json in your case. My example is a bit bananas.. (and here is where you invoke the middleware in the Her setup - https://github.com/errorstudio/zoho-ruby/blob/master/lib/zoho/crm/crm.rb#L30 ). Sorry @samstarling I've never done this. :( Will try to find time to have a play around with it. I know that form_for does inspect the attributes so you might need to do an after_initialize on your Foo::Client object to assign some attributes. Total guess though.. Thanks @samstarling that sounds really helpful.. Hi @voltechs - if I understand the issues correctly, this might be a tricky fix in Her because the attributes method is defined in an activesupport mixin. \nI have successfully worked around attributes called \u2018attributes\u2019 in a middleware. \nHave a look at https://github.com/errorstudio/spektrix-ruby/blob/master/lib/spektrix/response_parser.rb - it\u2019s pretty involved because I\u2019m parsing some totally non-RESTful endpoints but you\u2019ll see that there\u2019s a comment explaining how we iterate over the data and change \u2018attributes\u2019 to \u2018custom_attributes\u2019 be for Her sees it. \nAny use?. @martinstreicher @siim2812  yes we're planning to sort this out imminently. @zoltankiss is planning on leading this ticket. PRs welcome :). You getting anywhere with this @zoltankiss ? I might be able to pitch in but I didn't want to start from scratch if you have some idea what needs fixing.. Looks excellent @zoltankiss - thanks heaps for your work on it. What\u2019s still undecided in your mind? Is it the underscore variable name for @_attributes? I can\u2019t think of a better name to be honest. Is it ready for @martinstreicher to have a play with?\nThanks again - really great to have your help. . good spot @zoltankiss - could you put together a PR and I'll merge?. Terrific - thanks for this @zoltankiss - will do a release and push to rubygems ASAP. . Excellent news @grk \n@zoltankiss @zacharywelch are there known issues still to resolve?\n. @ssutner thanks for getting into this. Great stuff. . Thanks both. Great progress. \ud83d\udc4d. Hi @keithxm23 - feels like a fundamental problem with the api you\u2019re trying to consume. If a url has a slash in it but it\u2019s not part of the path, it should be url-escaped. I\u2019ve never seen a url construct where an identifier includes an unescaped slash. \nMy best suggestion is to use a Faraday middleware to unescape the identifier before you make the request.. @zacharywelch this looks ok to me. Would it mean that after this merge we'll branch to 0.10.0 and then update master with activemodel ~> 4.2.1?. Great. Have pressed the merge button \ud83d\ude42. Excellent work @zoltankiss and @zacharywelch - I\u2019m really grateful! \u2b50\ufe0f. Thanks @zacharywelch ! \ud83d\ude07. @masciugo @evgeniy-kunitsa is this peculiar to the created_at attribute, or any attribute you define in the base class?\nDoes it work if you define it in a mixin instead?. The request isn't executed until you do something with the Her::Model::Relation enumerable. If you do AdminUser.all.to_a it'll send the request. Or AdminUser.all.each {|u| puts u.something} or whatever.. Thanks as ever for being a hero @zacharywelch \ud83d\udc4d. hi @noctivityinc there are a couple of ways to achieve this:\n\nmix into Her::Model::Relation and redefine fetch\nwrite a Faraday middleware to mutate the request before it hits your API, but after Her has finished with it.\n\nSome examples:\nMutate parameters by redefining fetch in Her::Model::Relation - this is probably the closest to what you're describing:\nhttps://github.com/rooftopcms/rooftop-ruby/blob/master/lib/rooftop/queries/queries.rb#L11\nIn this example we're mutating parameters to be inside a filter[] for a WordPress API endpoint. Her::Model::Relation is mixed into when the gem loads, here:\nhttps://github.com/rooftopcms/rooftop-ruby/blob/f68ac881c77cfed4d53ee92780d8553ae9c7bb6a/lib/rooftop.rb#L147\nAnother example of redefining fetch - in this case to cache the results:\nhttps://github.com/rooftopcms/rooftop-rails/blob/master/lib/rooftop/rails/relation_cache.rb#L8\nDefine a middleware to mutate parameters\nThis is lower-level. Here's an example - in this case we pass arguments into where in Her and then parse them out (and set other parameters) in a middleware. So you call Foo.where(something: bar, include_embedded_resources: true) and the request to the API endpoint is _embed.\nhttps://github.com/rooftopcms/rooftop-ruby/blob/master/lib/rooftop/middleware/embed_middleware.rb\nThis particular example is to get around a limitation in Her that underscored arguments to where are parsed out so don't get to the API.\nHope this helps.\nEd\n. ",
    "prcongithub": "Actually I was looking for errors in the backend which can be related to uniqueness or even custom validations. \nCurrently I am doing something like this\nbackend some initializer\nclass ActiveRecord::Base\n  def  error_messages \n    errors.full_messages\n  end\nend\nbackend controller\ndef create/update\n  @entity.to_json(:methods => [:error_messages])\nend\nfront-end\n@entity.error_messages # returns array of full messages\n. I guess this was an issue with our code. Never encountered this again. Apologies for not closing it sooner.\n. bump!\n. ",
    "jpbarela": "Merged this Pull Request into the current master and resubmitted in https://github.com/remiprev/her/pull/210\n. @rempirev Thanks for merging and closing.\nOn Wed, Jun 4, 2014 at 3:59 AM, R\u00e9mi Pr\u00e9vost notifications@github.com\nwrote:\n\n@jpbarela https://github.com/jpbarela Nevermind, I kind of need this in\nHer soon so I\u2019m gonna work from your branch and merge in master [image:\n:smile:]\nI\u2019m going to close this issue now.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/remiprev/her/pull/210#issuecomment-45072500.\n. \n",
    "ettomatic": "Just checked with master, now works fine.\nCool thanks a million!\n. ",
    "ghost": "@pencil Sorry, I realize this has been closed for some time, but curious why collection_path isn't the default path for has_many associations, rather than using the name of the association.  Shouldn't this be equivalent to using table_name in Active Record?\n``` ruby\nclass User\n  include Her::Model\n  has_many :comments\nend\nclass Comment\n  include Her::Model\n  collection_path \"/remarks\"\nend\nuser = User.find(1)\n=> GET /users/1\nuser.comments\n=> GET /users/1/remarks ?\n```\nThanks, and btw great job w/ the gem\nZac\n. It means that parts, content model should have an id?\nThe raw response data via her, doesn't have an id for all models.\nFor handle data as object, should I insert an id in custom parser?\nlike\n{\n  \"page\": {\n    \"title\": \"Rock Fun\",\n    \"parts\": [\n        {\n          \"id\":0\n          \"kind\": \"header\",\n          \"contents\": {\n            \"id\":0\n            \"logo\": \"https://example/assets/logo.png\",\n            \"bg_img\": \"https://example/assets/bg.png\"\n          }\n        },\n        {\n          \"id\":1\n          \"kind\": \"header\",\n          \"contents\": [{\n            \"id\":0\n            \"logo\": \"https://example/assets/logo.png\",\n            \"bg_img\": \"https://example/assets/bg.png\"\n          },\n          {\n            \"id\":1\n            \"logo\": \"https://example/assets/logo.png\",\n            \"bg_img\": \"https://example/assets/bg.png\"\n          }]\n        }\n    ]\n  }\n}\n\nI assume that API have one collection of resources. It is not be expected resource like\nhttps://example.com/pages/mysite/:siteId\n. you mean that I have to modify api (https://example.com/pages/mysite) ?\nI couldn't because not mine.  also I cannot change request url and data.\nSo, have to solve it somehow in my project. \nHow I can solve the problem in my project ?\nIs it impossible?\n. ",
    "yonpols": "Is the same thing making requests parallel than make them asynchronously? In that case could the be made using Faraday? The way Faraday allows to do parallel requests implies that they must be enqueued and once they all finished you can access all results. I think this is different than the concept of asynchronous requests. What do you think?\n. ",
    "LichP": "This also happens if the API has a 'data' attribute, which collides with the deprecated 'data' instance method included in Model.\n. ",
    "nifoc": "I just ran into this issue, too. My API returns/expects a field called data, which causes nothing but trouble (the exception isn't really helping either).\n``\nundefined methodinject' for #\nher (0.6.8) lib/her/model/attributes.rb:50:in use_setter_methods'\nher (0.6.8) lib/her/model/attributes.rb:103:inassign_attributes'\nher (0.6.8) lib/her/model/deprecated_methods.rb:15:in deprecate!'\nher (0.6.8) lib/her/model/deprecated_methods.rb:23:indata='\nher (0.6.8) lib/her/model/attributes.rb:53:in block in use_setter_methods'\nher (0.6.8) lib/her/model/attributes.rb:50:ineach'\nher (0.6.8) lib/her/model/attributes.rb:50:in inject'\nher (0.6.8) lib/her/model/attributes.rb:50:inuse_setter_methods'\nher (0.6.8) lib/her/model/attributes.rb:103:in assign_attributes'\nher (0.6.8) lib/her/model/attributes.rb:27:ininitialize'\n```\nWhat's the status of this issue? Is there any workaround?\n. ",
    "pzgz": "Ran in to same problem in my project, not sure if that's an easy way to fix this issue in this gem. But in my project, I found a workaround by massage the data node in a custom parser. For e.g., following is my parser:\nruby\nclass FeatureParser < Faraday::Response::Middleware\n  def on_complete(env)\n    json = MultiJson.load(env[:body], symbolize_keys: true)\n    # ArcGIS features return used attributes as the result key, which is conflicted with rails model. We gonna change that\n    json[:features].each { |f| f[:values] = f.delete :attributes }\n    env[:body] = {\n      data: json[:features],\n      errors: json[:errors],\n      metadata: json[:metadata]\n    }\n  end\nend\nWhat I did is just changed the attributes node to values node, which just fixed the issue in my case. Just FYI.\n. ",
    "bf4": "Close?\n. @remiprev If you're still looking for maintainers, perhaps reference this issue in the README to raise visibility?\n. @remiprev also maybe convert to an org?  if you want a generic one, I can offer 'gemhome'\n. @giedriusr maintainers are people with limited resources.  Moving on is fairly common. And @remiprev is being responsive, so I have no complaints.  \nHave you tried User.raw_get(\"api/users/:id/custom_action\") (or raw_post)? It just gives you a parsed request and response object back, but that's useful. and you can call it with a block.\nIf you wrap that in e.g. def User.custom_action(id); raw_get(\"api/users/:id/custom_action\"); end.  (I assume you're not talking about specifying a nested route)\n. your api is a json-api, which isn't AMS json, so that format string is wrong.  @hubert is this supported now?\n. ",
    "malclocke": "This is not fully working, I'm working on a fix.  Her::Model::Paths.build_request_path still doesn't do the right thing.\n. Superseded by #162\n. @superp thanks, I'll try and add a test for this and update the pull request.\n. @superp do the representations that come back from your API include an id field?\n. ",
    "danryan": "As long as the routes in your API are configured as such, you should be able to achieve this with no special configuration. \nAssuming a basic configuration of:\n``` ruby\nclass User\n  include Her::Model\nhas_many :comments\nend\nclass Comment\n  include Her::Model\nbelongs_to :user\nend\n```\nIf you want to find comments belonging only to a user resource:\n``` ruby\nuser = User.find(1)\n=> #\nreturn all comments\ncomments = user.comments.all.fetch\nreturn a single comment\ncomment = user.comments.find(42)\n=> #\n```\nIf you want to find comments external to any user:\n``` ruby\nreturn all comments\ncomments = Comment.all.fetch\nreturn a single comment\ncomment = Comment.find(42)\n=> #\n```\n. ",
    "moofish32": "close this?\n. Any chance Set is having some sort of collision with Ruby's Set? http://www.ruby-doc.org/stdlib-1.9.3/libdoc/set/rdoc/Set.html\n. ",
    "masciugo": "how can you achieve this if User is not an her model but an activerecord?. same problem here with custom_patch which returns an object instead of an array. @pablocrivella did you solve this or it is still a bug? . ",
    "lleger": "I'm gonna :+1: this. Without removing those fields, AR will just throw a ActiveRecord::AssociationTypeMismatch error because it's expecting a relation, and what it actually gets is a hash.\n. Some of the tests randomly failed on 1.8.7. Fixed in 0f27448, so it looks like we're all green now.\n. I'm not sure I understand the dichotomy. If the error happens locally thanks to an ActiveModel validation on the Her model or remotely on the actual ActiveRecord resource, I still want to be able to display those errors in the same place and in the same way.\nI don't think this does anything more than what Her is trying to do, it just enhances the functionality that's already there. I'm already getting the errors from the response, but now I get them in a nicely wrapped instance that's familiar and that I'm already interfacing with for the ActiveModel validations.\nThat being said, is there some version of this functionality that you would consider merging? For example, if instead of adding it to the base errors we transformed the response_errors hash into an ActiveModel::Error object, would that be agreeable?\nI believe this is good functionality and I'm open to alternative implementations in order to see its way into the codebase.\n. We perhaps could ignore any ill-formatted errors, but as a matter of convention I'd imagine, if you're sending the errors back over the wire, then it'd make sense to send them back as a hash (otherwise there'd be no relation between the error message and the attribute).\n. I'm struggling to consider a way to implement this if the response errors aren't formatted as a hash. It would be difficult to relate an error message to an attribute if we get an array or a string. Do you have any recommendations?\nIt currently works fine with how Rails and AR serialize a failed validation back to JSON, but that's the only API I've tested it with. \n. We've had some lively discussion on this, and I'd like to see it get merged in, so I'm pinging y'all back to see if there's some manner we can get this functionality into Her.\n. Unfortunate\u2014was really hoping we could get this merged. It's a splendid addition for our usage. In case anyone finds a similar need, we'll keep our fork maintained.\n. @noctivityinc To be honest, this is quite old. We abandoned Her not long after this in favor of greener pastures. Our fork has the code we ended up using, though, and you're free to use it if it's helpful. Good luck!. We ended up rewriting the app in question to use a React frontend that just straight consumed a Rails API. Much better experience than trying to consume an API on the backend and push back a response.. Closed in favor of #190, as requested.\n. Any thoughts on getting this merged in?\n. In all honesty, I had forgotten completely about this PR. 2013 was a much different time! In any case, I couldn't really comment on your decision; we haven't used Her in production in over a year, and I'm thoroughly unfamiliar with the project in its current state. Even if I did disagree with closing this, the branch is almost two years outdated, and it would hardly be worth the time to update it for reconsideration.\n. ",
    "McSlow": "Hi,\njust tested that:\nAdded has_many :facts to the node model. \nThere already was a fact model defined ( for another endpoint of that api) which looks like this:\nclass Fact\n        include Her::Model\n        collection_path \"/v2/facts\"\nend\nUnfortunately, calling Node.find('foo.bar.com').facts still fires (only) a \nGET /v2/nodes/foo.bar.com HTTP/1.1\nThis returns some valid json stuff, but just basic information about the node, not the facts.\n. Tried that already, but it doesn't fetch annything more:\nLoading development environment (Rails 3.2.13)\n2.0.0-p247 :001 > mytest = Node.find('foo.bar.com').facts.inspect\n => \"#, @opts={:class_name=>\\\"Fact\\\", :name=>:facts, :data_key=>:facts, :default=>[], :path=>\\\"/facts\\\", :inverse_of=>nil}, @params={}, @klass=Fact , @name=:facts>\"\nOnly one GET fired: GET /v2/nodes/nixwissen.erlm.siemens.de HTTP/1.1\nHmm ,strange :)\n. ah got it :)\n.inspect doesn't work, but looping it with .each finally throws the correct request ! :)\nThanks a LOT for your help!!!!\n. Digged a bit deeper:\nThis works, so problem has to be a bit deeper:\n``` ruby\n2.0.0-p247 :056 > y MultiJson.load(Faraday.get('http://localhost:8080/v3/fact-names').env[:body])\n\n\napache.config.ok\napache.vhosts.list\narchitecture\naugeasversion\nbios_release_date\nbios_vendor\nbios_version\n...\n```\n. Sure:\n\n```\n\nInitializes the HER API to the PuppetDB API Interface\n\nssl_options = { verify: false }\nHer::API.setup url: \"http://localhost:8080\", ssl: ssl_options, headers: {:accept =>  'application/json'} do |c|\n  c.use Faraday::Request::UrlEncoded\n  c.use Her::Middleware::DefaultParseJSON\n  c.use Faraday::Adapter::NetHttp\nend\n``\n. ruby\n2.0.0-p247 :050 > y Factname.all\n--- !ruby/object:Her::Model::Relation\nparent: !ruby/class 'Factname'\nparams: {}\n_fetch: !ruby/array:Her::Collection\n  internal:\n  - !ruby/object:Factname\n    metadata: {}\n    response_errors: {}\n    destroyed: false\n    attributes: !ruby/hash:ActiveSupport::HashWithIndifferentAccess\n      fact: apache.config.ok\n  - !ruby/object:Factname\n    metadata: {}\n    response_errors: {}\n    destroyed: false\n    attributes: !ruby/hash:ActiveSupport::HashWithIndifferentAccess\n      fact: apache.vhosts.list\n  - !ruby/object:Factname\n    metadata: {}\n    response_errors: {}\n    destroyed: false\n    attributes: !ruby/hash:ActiveSupport::HashWithIndifferentAccess\n      fact: architecture\n  - !ruby/object:Factname\n    metadata: {}\n    response_errors: {}\n    destroyed: false\n```\nYou were absolutely right!  Thanks a lot!!!\n. ",
    "yozlet": "@remiprev: Thanks for accepting our previous PRs! @alfonsocora and I need this one merged so that we can stop depending on our own fork of Her. Many Rails-based APIs throw mass-assignment errors when all of a resource's attributes are POSTed back; this patch fixes that.\n. ",
    "grk": ":+1: this would be very useful\n. I've been testing this branch in development over the last few days and so far everything works \ud83d\udc4d . ",
    "marckell": "Would it be possible to see a working example? I am running into the same issue.\n. ",
    "superp": "Please, merge this commit.\nThis is very important issue.\n. But it not working for update method.\nMy sample:\n```\nmodule Api\n  class Account\n    include Her::Model\n    collection_path \"/api/v1/accounts\"\n    finder_key :access_token\ncontroller\n@account = Api::Account.find(token)\n@account.assign_attributes(account_params)\n@account.save\nrequest without access_token\npost http://fodojo.com/api/v1/accounts\n```\n. Yes, but I can't find answer for my issue here https://github.com/plataformatec/faraday-http-cache\n. ",
    "trobrock": "What is the eta on get this released to rubygems?\n. /cc @remiprev \n. ",
    "256dpi": "@kinopyo just go ahead! I never found time to do that.\n. ",
    "ak47": "I suspect you need need a collection_path in Task like \" /contacts/:contact_id/tasks\"\nbut the larger issue of shallow routes is my new thorn\n\"Her\" seems to have no knowledge of this concept \nupdate:\nthis seems to work\nhttps://github.com/remiprev/her/blob/4824f6f18e4de091fede948cf362728c851f3654/lib/her/model/paths.rb#L80\n. the problem with returning nil is you have nothing to work with in the event of an error - \nif this is limited to 404's return nil, that might work\nbut sometimes it's useful to see what was returned, the http status code\nideally, all Her objects would have some simple way to see the http details\nlike maybe a #_status that gives the code for the call, or maybe even a hash of relevant details\n{http_status_code: '404', http_method: 'GET'}\none of the biggest knocks I hear against Her is the lack of transparency when something goes wrong\n. object.response_errors => [{:id=>\"bb78d697-7b3b-4780-8b45-3c0eadaabf95\",\n  :status=>404,\n  :title=>\"Not found\",\n  :detail=>\n  \"thing not found by key=10a228f9-4dff-4f7d-8aba-1c88fd9a29d8\",\n  :at=>\"2015-06-09T22:54:25.943Z\"}]\n. ",
    "andyt": "Redefining a kernel method with a different implementation is bad practice.\n```\nclass WhatsGoingOn\n  include Her::Model\nend\nWhatsGoingOn.new.respond_to? :any_method_ending_with_question_mark?\n=> true\n```\nThat's unexpected behaviour. I don't see any method definition for the above, and am required to know about the implementation of Her. \nThis should be documented prominently if there's no alternative implementation.\n. I didn't know about respond_to_missing? either - very handy!\n. ",
    "frankcaron": "Solved by changing collection path to \"/notes/\" from \"/notes\".\n. ",
    "kitwalker12": "Replied a little to prematurely. The parse Json class was still getting the status as 200 after I implemented your code. I did a class_eval on the on_complete method to implement the body check.\n. ",
    "Dakuan": "I think I had the same issue as you. Child models need to have a parent_id field for walkable trees to be created. see #204 \n. so this was due to my nested resources not having a parent_id property, so adding menu_id and sub_menu_id to the appropriate models did the trick\n. ",
    "ddevaal": "Would be nice if you could explain how you solved this.\n. Nevermind I guess it's not possible. \n. Doesn't seem to work for me. These are my classes:\n``` ruby\nclass Document\n  include Her::Model\nhas_many :properties\nend\nclass Property\n  include Her::Model\nbelongs_to :document\n  has_many :values\nend\nclass Value\n  include Her::Model\nbelongs_to :property\nend\n```\n``` ruby\ndocuments = Document.where(key: 'somekey').all\n(GOOD) Started GET \"/documents?key=somekey\" for 127.0.0.1 at 2014-05-26 14:43:14 +0200\ndocuments.each do |document|\n   properties = document.properties\nend\n(GOOD) Started GET \"/documents/19590/properties\" for 127.0.0.1 at 2014-05-26 14:43:20 +0200\nproperties.each do |property|\n   values = property.values\nend\n(WRONG) Started GET \"/properties/19590/values\" for 127.0.0.1 at 2014-05-26 14:43:20 +0200\n```\nI want it to be:\n``` ruby\n(GOOD) Started GET \"/documents/123456/properties/19590/values\" for 127.0.0.1 at 2014-05-26 14:43:20 +0200\n```\n. Would be nice if @remiprev could comment on this. I've seen similar questions all seem to be unanswered. Maybe I'm just expecting too much of Her. \n. @reejosamuel That is awesome. Thanks!\n. ",
    "oliverzeyen": "@Dakuan Any further explanation would be appreciated!\n. @Dakuan Sorry for opening an old issue but I'm having the exact same problem and don't really get how to solve this. Actually I'm not able to provide the parent_id because I can't even access it. Would you be so kind and give me a code example? Thank you so much. Olli\n. :+1: \n. ",
    "sulabhjain": "+1\n. ",
    "kapso": "+1\n. ",
    "will-r": "There is a similar problem with belongs_to associations: the block in get eventually sends us to new_collection(parsed_data), which calls extract_array again and we look for a pluralized root element that should be singular.\n. It's truthy because the association proxy object is always present, and it's nil? because the proxy object relays all methods_missing to the actually associated object, which is nil. The purpose is to lazy-load associates, and when the associated object is present it works very well.\nA short-term fix would be for Her to add an .associate? method that simply calls .associate.present?\nIn the longer term, and ideally in the context of a proper error-handling framework (#334), I think the lazy-loader should be renamed so that once the actual associate exists the proxy can be bypassed:\nruby\n   def subject\n      _subject_proxy.lazy_loaded || nil\n   end\nMeanwhile we have got into the habit of checking associate.present?\n. @remiprev, @hubert, we would be happy to help with this. One of our clients is very reliant on Her.\n. @remiprev, @hubert, is this project really alive? There doesn't seem to be either discussion or development going on and we are finding it very difficult to contribute. It's fine to say no: we will just fork it under a new name.\n. Thanks, @hubert.\n. I think @hubert is right here. System failure (including 401, 403, 404 and 5xx) should raise an exception. In those cases we can't rely on the API response to be sane. Content failure (e.g. 422 because invalid) should change model properties by passing through API error messages.\nI would suggest a small family of exceptions that follow the usual status code names (Her::Errors::NotFound, Her::Errors::Unauthorized, Her::Errors::ServerError) and all inherit from Her::Errors::ResponseError.\nAssociates would sometimes need rescuing from fetch errors. Perhaps that should be configurable:\nruby\n      belongs_to :country, foreign_key: :country_code, on_error: :raise\nFor the model errors could I also suggest that we adopt ActiveModel::Errors to try and marshal the received errors hash or array into a standard format? As usual people would need a custom parser if their error format is weird, but the error-processing could be exposed as a separate method.\n. @marshall-lee yes, that would make sense for a processing error. The exceptions are meant for complete failures where we may not even have an object to store errors in. As @antonrd originally pointed out, creating a model object to communicate that there is no model object is too confusing.\nTo address the original issue report properly: I think the value of a missing object should be nil, and the action of fetching a missing object should raise an exception. Ideally this would be done in a way that is very easy to ignore. For single associations the default behaviour on 404 would be to nullify and continue, but for an explicit find or fetch call we would let the caller handle the exception just as ActiveRecord does.\n. Agreed that behaving like ActiveRecord is always going to be comforting. In Her it's easy to configure response error behaviour while setting up an api because in the end all requests are made by Her::API#request. Nice work by R\u00e9mi there.\nruby\n    Her::API.setup url: \"https://api.example.com\", ignore_response_errors: [404]\nThe maintainer would have to decide about default behaviour after an upgrade but rails gives us a good example: warn and deprecate one version ahead, then change the default behaviour in a way that is easy to undo.\n. Hello @hubert. We are keen to help with this if we can. I've merged your earlier work and I see that your has_one PR has been pulled in. The basic assembly of compound documents seems to work very well and I like the way it simply prevents a future api call. Thank you for that. Is there other work in this area that we could help to finish?\nWe are finding the jsonapi parsing quite fragile, especially around associations. I don't think that's related to the compound document parsing - more to do with #334 - but it becomes more important when bundles of stuff are being passed around. Happy to come up with something there too.\n. ",
    "anicholson": "+1 to @lleger , I don't see the dichotomy either.\n. ",
    "noctivityinc": "@lleger I know this is an old issue but I completely agree with you.  Id like to try to integrate the same logic using a callback but unfortunately the callback is cancelled if an error occurs.  How did you eventually handle this?. Thanks man.  What did you decided to use in place of Her for consuming\nRESTful APIs in Rails, or are you using something else now on the front end\nthat is better suited?\nBest,\nJosh\nOn Thu, Oct 18, 2018 at 8:56 PM Logan Leger notifications@github.com\nwrote:\n\n@noctivityinc https://github.com/noctivityinc To be honest, this is\nquite old. We abandoned Her not long after this in favor of greener\npastures. Our fork has the code we ended up using, though, and you're free\nto use it if it's helpful. Good luck!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/remiprev/her/pull/178#issuecomment-431210776, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAE0AvTJX5hJWwCVGf4fQTReF0edLNrHks5umSNLgaJpZM4BEqDx\n.\n. Thanks.  Ive been thinking of learning React for that exact purpose.  I\nwrote the backend Rails API, which works great, but consuming it in a Rails\napp with pseudo ActiveRecord code is proving to be interesting\n\nOn Thu, Oct 18, 2018 at 9:02 PM Logan Leger notifications@github.com\nwrote:\n\nWe ended up rewriting the app in question to use a React frontend that\njust straight consumed a Rails API. Much better experience than trying to\nconsume an API on the backend and push back a response.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/remiprev/her/pull/178#issuecomment-431211652, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAE0ArrjF47U19HicsRWMa9MI4QzdaX7ks5umSSugaJpZM4BEqDx\n.\n. For anyone else curious, I'm overriding the save method based on a method provided in #178 using a concern:\n\n```\nmodule Her\n  module Overridable\n    extend ActiveSupport::Concern\ndef save\n  callback = new? ? :create : :update\n  method = self.class.method_for(callback)\n\n  run_callbacks :save do\n    run_callbacks callback do\n      self.class.request(to_params.merge(:_method => method, :_path => request_path)) do |parsed_data, response|\n        load_from_parsed_data(parsed_data)\n        add_errors_to_base if @response_errors.any?\n\n        return false if !response.success? || @response_errors.any?\n        changes_applied\n      end\n    end\n  end\n\n  self\nend\n\nprivate\n\ndef add_errors_to_base\n  @response_errors.each do |attr, messages|\n    [*messages].map { |msg| self.errors.add(attr, msg) }\n  end\nend\n\nend\nend\n``\nwhich is placed inconcerns/her/overridable.rb` and calling it in my models like such:\nclass Site\n  include Her::Model\n  include Her::Overridable\nNot the best solution since it will break if the save method changes, but it does work.. Any idea when this is going to be merged?. So continuing this thread, if we want to add our own class method, where exactly would we add it?\nFor example, if I want to add support for a limit method so:\nUser.limit(1) would call a defined method for all models inheriting the Her module, where would I do this?. Scratch that.  I figured it out.  For anyone else:\nAdd your method here:\nHer::Model::Relation\nand then define it as a class method here:\nHer::Model::ORM::ClassMethods\nSo, for example, to add support for a limit method I did this in an initializer:\n```\nmodule Her\n  module Model\n    module ORM\n      module ClassMethods\n        [:limit].each do |method|\n          class_eval <<-RUBY, FILE, LINE + 1\n            def #{method}(params)\n              scoped.send(#{method.to_sym.inspect}, params)\n            end\n          RUBY\n        end\n      end\n    end\nclass Relation      \n  def limit(num)\n    return self if num.blank? && !@_fetch.nil?\n    clone.tap do |r|\n      r.params = r.params.merge({limit: num})\n      r.clear_fetch_cache!\n    end\n  end\nend\n\nend\n```\n. Problem with that is that I'm wrapping the where statement as per an earlier post.  It's almost like I need the ability to do something like \nscope :limit, -> (value) { param(limit: value) }\nwhere the param method would accept any parameter.\nBest,\nJosh. Ok.  So.\nI have overridden the where method for Her like such:\nmodule Her\n  module Model\n    class Relation\n      # Add a query string parameter\n      #\n      # @example\n      #   @users = User.all\n      #   # Fetched via GET \"/users\"\n      #\n      # @example\n      #   @users = User.where(:approved => 1).all\n      #   # Fetched via GET \"/users?approved=1\"\n      def where(params = {})\n        return self if params.blank? && !@_fetch.nil?\n        clone.tap do |r|\n          r.params = r.params.merge({where: params})\n          r.clear_fetch_cache!\n        end\n      end\n      alias all where\n    end\nso that where is automatically wrapped in a \"where\" attribute.  Then on the API I have this...\n```\n   @devices = ::Device.all\nfilters = params[:where]\nif filters.present?\n  filters.keys.each do |key|\n    if key == 'term'\n      @devices = @devices.where(filters[key])\n    else\n      @devices = @devices.where(\"#{key}\" => filters[key])\n    end\n  end\nend\n\n```\nso when I user Her I do something like:\n```\nDevice.where(active: true) =>  https://api.example.com/devices?where[active]=true\nor \nDevice.where({term: [\"created_at > ?\",1.month.ago]}\n```\nAnd all of the above work fine and let me run any query.  \nAs you can see, because of this I can't just put things like limit, order, etc into the where statement, which doesn't make sense logically anyway.  If, however, I had a catch-all method, like param I could do:\ndef first\n  Device.param({limit: 1, order: 'created_at desc'})\nend\nand then on the API:\npassed_params = params[:param]\nif passed_params.present?\n  passed_params.each do |key|\n     case key\n        when 'limit'\n           @device = @device.limit(passed_params[:key])\n       when 'order'\n          ....\n     end\n  end\nend\nmake sense?. @zacharywelch that one was me also :)\nThat addresses more mutating existing methods (I didnt use any of those btw) instead of adding new ones.  . Thanks @zacharywelch but the issue with this is that, for some reason, it doesnt support strong parameters.  I get an undefined method `each_with_object' for #<ActionController::Parameters>\nmessage when trying to pass strong parameters to assign_attributes.. Weird thing is that something like User.new(user_params) works fine where @user = User.assign_attributes(user_params) fails.. For that matter - User.assign_attributes(params[:user]) fails also, so I think assign_attributes is broken.  For now, I'm doing this:\nuser_params.each do |x|\n      @user.send(\"#{x}=\",user_params[x])\n    end. Thats excellent, thank you.\nOn Tue, Feb 12, 2019 at 10:56 PM Zachary Welch notifications@github.com\nwrote:\n\nupdate_attributes added in 1849339\nhttps://github.com/remiprev/her/commit/1849339b317177e9dfc5546aa413be45b779c63f\nas well as support\nhttps://github.com/remiprev/her/commit/8a0d873fea29c1fe53ee47a71a04a5063c082b99\nfor strong parameters. Like ActiveRecord you'll need to permit these params\nbefore sending them to your Her model.\nuser_params = params.permit(:name, :email)\ninitialize with params\nuser = User.new(user_params)\nassign params\nuser.assign_attributes(user_params)\nupdate with params\nuser.update_attributes(user_params)\nGonna close this as fixed now \ud83d\ude3a\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/remiprev/her/issues/521#issuecomment-463047473, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAE0AltMc_72BMgc1CymfvciK-9-k90Yks5vM4zQgaJpZM4a1dDb\n.\n. Here is the full chain:\n\n```\n2.6.1 :002 > u = User.find('XXXX-XXXX')\nETHON: performed EASY effective_url=http://domain.com/v1/admin/users/XXXX-XXXX response_code=200 return_code=ok total_time=2.526228\nD, [2019-02-18T08:43:05.160459 #67471] DEBUG -- : [httplog] Sending: GET\nD, [2019-02-18T08:43:05.160681 #67471] DEBUG -- : [httplog] Data:\nD, [2019-02-18T08:43:05.160856 #67471] DEBUG -- : [httplog] Status: 200\nD, [2019-02-18T08:43:05.161028 #67471] DEBUG -- : [httplog] Benchmark: 2.526608 seconds\nD, [2019-02-18T08:43:05.161482 #67471] DEBUG -- : [httplog] Response: (not showing binary data)\n => #false, \"current\"=>false, \"needed\"=>true, \"expired\"=>true} id=\"1ecec758-5fb7-456c-b10f-70b2512821cc\">\n2.6.1 :003 > u.user_device_offers.all\n => #false, \"current\"=>false, \"needed\"=>true, \"expired\"=>true} id=\"XXXX-XXXX\">, @opts={:class_name=>\"UserDeviceOffer\", :name=>:user_device_offers, :data_key=>:user_device_offers, :default=>[], :path=>\"/user_device_offers\", :inverse_of=>nil}, @params={}, @klass=UserDeviceOffer, @name=:user_device_offers>\n2.6.1 :004 > u.user_device_offers.first\nETHON: performed EASY effective_url=http://domain.com/v1/admin/users/XXXX-XXXX/user_device_offers response_code=200 return_code=ok total_time=0.011298\nD, [2019-02-18T08:43:12.593182 #67471] DEBUG -- : [httplog] Sending: GET\nD, [2019-02-18T08:43:12.593368 #67471] DEBUG -- : [httplog] Data:\nD, [2019-02-18T08:43:12.593503 #67471] DEBUG -- : [httplog] Status: 200\nD, [2019-02-18T08:43:12.593624 #67471] DEBUG -- : [httplog] Benchmark: 0.011605 seconds\nD, [2019-02-18T08:43:12.593912 #67471] DEBUG -- : [httplog] Response: (not showing binary data)\nTraceback (most recent call last):\n        1: from (irb):4\nNoMethodError (undefined method `map' for nil:NilClass)\n```. @zacharywelch was that what you were looking for?  Here's even more logs:\noMethodError: undefined method `map' for nil:NilClass\n  File \"/home/vcap/deps/0/vendor_bundle/ruby/2.6.0/gems/her-1.1.0/lib/her/model/attributes.rb\", line 182, in instantiate_collection\n  File \"/home/vcap/deps/0/vendor_bundle/ruby/2.6.0/gems/her-1.1.0/lib/her/model/attributes.rb\", line 193, in new_collection\n  File \"/home/vcap/deps/0/vendor_bundle/ruby/2.6.0/gems/her-1.1.0/lib/her/model/http.rb\", line 72, in block in get\n  File \"/home/vcap/deps/0/vendor_bundle/ruby/2.6.0/gems/her-1.1.0/lib/her/model/http.rb\", line 59, in request\n  File \"/home/vcap/deps/0/vendor_bundle/ruby/2.6.0/gems/her-1.1.0/lib/her/model/http.rb\", line 81, in get_raw\n  File \"/home/vcap/deps/0/vendor_bundle/ruby/2.6.0/gems/her-1.1.0/lib/her/model/http.rb\", line 70, in get\n  File \"/home/vcap/deps/0/vendor_bundle/ruby/2.6.0/gems/her-1.1.0/lib/her/model/associations/association.rb\", line 52, in fetch\n  File \"/home/vcap/deps/0/vendor_bundle/ruby/2.6.0/gems/her-1.1.0/lib/her/model/associations/has_many_association.rb\", line 86, in fetch\n  File \"/home/vcap/deps/0/vendor_bundle/ruby/2.6.0/gems/her-1.1.0/lib/her/model/associations/association_proxy.rb\", line 11, in tap. Any update on this?  Were you able to reproduce?\nOn Mon, Feb 18, 2019 at 3:09 PM Zachary Welch notifications@github.com\nwrote:\n\nThat should be enough @noctivityinc https://github.com/noctivityinc.\nNot sure why a separate request is made to pick up the first device offer\nsince they should be cached after .all. Tied up at the moment but I'll\ntry and reproduce later.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/remiprev/her/issues/523#issuecomment-464861396, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAE0AmU-1ds_zapnxGe9VNvvhTALNRb9ks5vOwhigaJpZM4bA53x\n.\n. @zacharywelch figured it out.  Since the model is UserDeviceOffers the serialized json root is userdeviceoffersso I needed to add:\n\nparse_root_in_json :userdeviceoffers.\n",
    "vic": "+1 on merging this.\n. You can use photo? to test if the object is present.\n. ",
    "mculp": "This same issue got me today. Is this intended functionality, or a bug? This behavior is different from the default rails behavior.\n. Can I reopen this? This is still an issue for us.\n. Thanks for the actual response. I understand the difficulties with renaming the gem. I just wanted to bring the problem up in case a situation in which you are able to rename the gem presents itself.\nThe google problem arises when searching for error messages or specific 'her' issues, as 'her' is a pretty meaningless word in the context of an error message. \nThe confusion problem tends to arise in fast paced or verbal discussions:\nperson 1: \"we are using her.\" \nperson 2: blinks \"um, what?\" \nperson 1: \"oh, the her gem. ack, I hate that name!\"\nI hear and read similar conversations a few times a week.\n. ",
    "davoclavo": "Hey @slnovak,\nI'm also wondering about question 1.\nAbout question 2 & 3, you can write a middleware like this (not tested):\nbased on Faraday docs\n``` ruby\nher.rb\nclass QueryInjector < Faraday::Middleware\n  def call(env)\n    token = RequestStore.store[:token] # or any method to get your token\n# env[:url] is a URI object\nenv[:url].query = \"f=json?token=#{token}\"\n\n# You can also change headers \n# env[:request_headers]['header']\n@app.call(env)\n\nend\nend\nHer::API.setup ... do |c|\n  c.use QueryInjector\n  c.use Faraday::Request::UrlEncoded\n  ...\nend\n```\n. For question 1, according to the Her docs you can do this\n``` ruby\nclass Item\n  ...\n  custom_post :addItems\nend\n```\n. ",
    "agrobbin": "No problem! It'd be great to get this bugfix released, we're currently using a workaround in our client gem that it'd be great to remove.\n. ",
    "SirRawlins": "@billc hey Bill - Appreciate this is a really old issue, but did you ever find a solution? I'm banging into the same problem today. In my case the ID is passed in the URL and doesn't need including in the body, doing so throws an error much like your own.\n. Did this conversation go any further? Found myself bumping up against it today, expecting find(unknown id) to Raise an exception but it swallows it.\n. Any reason this hasn't been merged in?\n. Sweet job on getting this merged in! Was running off @abhikalakuntla's branch so I had this support, nice to be back on the upstream.\nGood job folks!. @zacharywelch this looks good. Can you clarify for me:\n1) Which of the two examples given above is the best/correct way to set the default timeout?\n2) How can we set a per-request timeout when calling something like Class.create()?\nOnce I know for sure I'd be happy to send in a PR which properly documents it.. ",
    "secretfader": "I'm experiencing this error too. Any input would be appreciated.\nirb(main):011:0> Transistor::Channel.all.to_a\nNoMethodError: undefined method `request' for nil:NilClass\n    from /Users/nicholaswyoung/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/her-0.6.8/lib/her/model/http.rb:52:in `request'\n    from /Users/nicholaswyoung/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/her-0.6.8/lib/her/model/relation.rb:70:in `fetch'\n    from /Users/nicholaswyoung/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/her-0.6.8/lib/her/model/relation.rb:45:in `method_missing'\n    from (irb):11\n    from /Users/nicholaswyoung/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/bundler-1.3.5/lib/bundler/cli.rb:619:in `console'\n    from /Users/nicholaswyoung/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/bundler-1.3.5/lib/bundler/vendor/thor/task.rb:27:in `run'\n    from /Users/nicholaswyoung/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/bundler-1.3.5/lib/bundler/vendor/thor/invocation.rb:120:in `invoke_task'\n    from /Users/nicholaswyoung/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/bundler-1.3.5/lib/bundler/vendor/thor.rb:344:in `dispatch'\n    from /Users/nicholaswyoung/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/bundler-1.3.5/lib/bundler/vendor/thor/base.rb:434:in `start'\n    from /Users/nicholaswyoung/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/bundler-1.3.5/bin/bundle:20:in `block in <top (required)>'\n    from /Users/nicholaswyoung/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/bundler-1.3.5/lib/bundler/friendly_errors.rb:3:in `with_friendly_errors'\n    from /Users/nicholaswyoung/.rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/bundler-1.3.5/bin/bundle:20:in `<top (required)>'\n    from /Users/nicholaswyoung/.rbenv/versions/2.0.0-p353/bin/bundle:23:in `load'\n    from /Users/nicholaswyoung/.rbenv/versions/2.0.0-p353/bin/bundle:23:in `<main>'\n. ",
    "aalvarado": "Looks like the order in which the files get loaded get's screwed up and Her::API.setup doesn't get run first.\nI was able to fix it in this really hacky way:\nruby\nmodule Client\n  class Base\n    Her::API.setup\n    include Her::Model\n  end\nend\n. I was able to solve it by doing require false in the Gemfile, and load the api and the Base on initializer.\n. in the folder gemfiles there are 2 files defined if you use Ruby 1.9.3 and above, you can install one of them like this: \n$ BUNDLE_GEMFILE=gemfiles/Gemfile.activemodel-4.0 bundle install\nand then copy the generated Gemfile.activemodel-4.0.lock to ../Gemfile.lock\nWhich I think resolves one of the issues, however I'm getting the ActiveSupport::BasicObject error as well. Ruby 2.0.0p247\n. We have this problem as well. I'm using factory_girl + webmock. and 7.1 works correctly but breaks on 7.2 with the same issue.\n. ",
    "Chris911": "Hi @mbajur,\nI know it has been a while but are you still experiencing this issue?  This code works just fine for me: \n``` Ruby\nmodule Test\n  class User\n    include Her::Model\n  end\nend\nu = Test::User.all\nu.each do |user|\n  puts user.message\nend\n```\n. The behaviour is wrong but I can't figure out why. I'm new to this codebase but I've been trying to debug this for over an hour now and I just can't find where the path is supposed to be built when creating. It's pretty straight forward for the GET requests but the not for the POST. \nThere should be something like this happening somewhere in the execution:\nRuby\npath = build_association_path lambda { \"#{@parent.request_path(@params)}#{@opts[:path]}/#{id}\" }\n@remiprev Please take a look if you have a minute. Or just let me know where I should be looking. \n. I'm thinking a good fix would be to add a function in lib/her/model/associations/association.rb that encapsulates the save method of orm.rb by building the proper path first and then calling save. There's already a similar function there that does the same for GET by encapsulating the call in the find function. \nBut again I'm new to this codebase and it might already be done somewhere I just can't find it. But I agree with @pfspontus it seems that behaviour in the README is not implemented by looking at the spec. \n. :+1: \nI was working on the same fix and came up with the same conclusions. This works for me. \n. Well as the example shows in the README you can do something like this with custom requests: \n``` Ruby\nclass Tweet\n  include Her::Model\nend\n@tweets = Tweet.get(\"/statuses/home_timeline.json\")\n```\nHowever it kinda defeats the purpose of the ORM if you have to specify every route. Something like this can work for your base resources but that's not a really good fix. Might be a good feature to have. \nRuby\nclass User\n  include Her::Model\n  resource_path \"/users/:id.json\"\nend\n. @AlexCppns I implemented this feature in #233. Don't know if it will be merged by the maintainers of the project. \n. By the way the Travis build is failing only because of dependencies. It will pass if #229 if merged. \n. If this is going to be merged I can merge current master with my branch so Travis passes. \n. All the rake tests (Travis) will pass if #229 is merged. They work locally. \n. Rebased to make Travis pass. \n. I get the same error but it's strange because it passes on Travis. I think it's because the gemfiles in her/gemfiles are not used when running bundle install but they are used by Travis. If you change these lines in the gemspec it will work with Ruby 1.9.3:\n```\nBefore:\ns.add_runtime_dependency \"activemodel\", \">= 3.0.0\", \"< 4.1\"\ns.add_runtime_dependency \"activesupport\", \">= 3.0.0\", \"< 4.1\"\nAfter:\ns.add_runtime_dependency \"activemodel\", \">= 4.0.0\", \"< 4.1\"\ns.add_runtime_dependency \"activesupport\", \">= 4.0.0\", \"< 4.1\"\n```\nBut I'm not sure which version are supposed to be supported by her and why. All I know is that everything works fine with 4.0.4. I can make a pull request with these changes but again I'm not sure if we are supposed to be compatible with v3 of activemodel and activesupport for some reasons.\nI also think the best solution would be to migrate to ActiveSupport::ProxyObject instead of the deprecated ActiveSupport::BasicObject. That way we can use the latest versions without any problem. \n. This is weird but I just tried bundle install again with a fresh ruby install and it seems to work. Tried with 2.0.0 and 1.9.3. I swear I got the same error you got before. \n. It should return false if there's an error. See this line in the save function. \n. ",
    "mkb": "I was having the same problem. Since I'm using Her in a rubygem, \"require: false\" isn't an option AFAIK.\nStill, I was able to fix the problem by ensuring that Her initialization happened before my model was loaded. Unfortunate, but at least it works.\n. ",
    "jwietelmann": "Agreed with @mculp. Ungoogleable names are an anti-pattern & will cause support headaches for years to come.\n. ",
    "dturnerTS": "I added two tests, please let me know if there are additional tests you had in mind.\n. @filib I suspect it has to do with https://github.com/remiprev/her/issues/324 . Once things get back on track I'll be happy to merge master back into this PR\n. @hubert Thanks for looking into this again. \n(1) I've changed the code to be more defensive. \n(2) Conflicts are resolved\n(3) Version bump is removed\n. I'm not a big fan or rebasing. Can you explain why you think its preferable to the master merge here?\n. @hubert Anything I can do to help get this merged? Also, thank you for stepping up to help maintain Her.\n. I actually have this fixed in an outstanding PR https://github.com/remiprev/her/pull/262 sorry you ran into the bug.\n. @aauthor :+1: \n@balvig Take a look at https://github.com/remiprev/her/pull/261 I think that will explain the problem.\n. I'm not sure exactly what your asking about. \nYou don't have to explicitly set a collection path (https://github.com/remiprev/her/blob/master/lib/her/model/paths.rb#L48). If you don't set the collection_path it basically defaults to /class_name. \nHowever, if a user has many comments, and you need to get the comments through /user/:user_id/comments Her requires a collection path to be set. There are some open issues discussing ways to deal with that and its far out side of the scope of this PR. \nIf you're suggesting that the right behavior is just to ignore whats in the collection path, I'd disagree since that would limit functionality.\n. Good catch. I'm not sure there is currently a good way to prevent that from happening. Any suggestions? \n. This is fixed now.\n. Got, it. This is the same issue raised in #253 . The reason that is has not been resolved is that there is no clear answer on what to do when a class has multiplebelongs_to associations. \nI strongly believe that this issue is outside of the scope of this pr.\n. ",
    "miguelsan": "Anyone looking at this?\n. ",
    "awendt": ":+1: \n. ",
    "chrisbaldauf": "FWIW, I was able to call save on an existing resource and have it use the PATCH method with the following code in my model:\nruby\nclass User\n  include Her::Model\n  method_for :update, :patch\n  ...\nend\n. ",
    "chrishough": "any luck fixing this issue?\n. ",
    "ashmckenzie": "I am also seeing this issue :(\n. ",
    "djh3315": "Hey guys i've got this issue as well any eta on when the fix will be merged in?\n. This is still a critical bug that we need fixed. Is there a workaround for this that I am missing?\n. Hey guys any idea when this will be merged in? I've been encountering this issue as well\nCheers!\n. ",
    "benwoodward": "I just bumped into this bug. \n. Merge pls. :)\n. Awesome! Thanks @hubert \n. ",
    "voltechs": "@remiprev can we get this merged in?\n. Why are none of these pull requests and issues being addressed? Has the author abandoned this? @remiprev?\n. Is it bad etiquette if I fork the repo, make these same changes and submit a (similar) pull request?\n. Did you share the monkey patch? I'm running into a similar issue.\n. Yea that makes sense. I appreciate this! Cheers \ud83c\udf7b. That\u2019s unfortunate. Thanks for the consideration. Best of luck, and thanks for the gem.. ",
    "jhaesus": "In-browser debugging, link-sharing. Most (all?) APIs respect the format path as well. And it's not required.\n. ",
    "javiayala": "@remiprev Thanks! This is what I was looking for except for one thing. How can I also log or debug the body content returned from the api call. I noticed that it is logging the response headers but it is not including the response body. I have to manually debug my instance variables to see the content under the _fetch attribute of the Her object. \nIs there a way to also include this automagically on every call? \nI also noticed that manually debugging/logging the instance variable on the controller is different from what I get on the view. At what time is the gem fetching the contents from the api?\nThanks for your help and for maintaining this awesome gem.\n. @remiprev Quick notes from the snippet of code that you shared and for future reference for anyone that wants to do something like this.\nIn order to make that code work I had to add the /libs path to the application's autoload_paths. Not doing it will throw an uninitialized constant ResponseBodyLogger error because Rails is not automatically loading the files under that directory. I fixed this by adding the next line to config/application.rb :\n``` ruby\nconfig/application.rb\nconfig.autoload_paths += %W(#{config.root}/lib)\n```\nThere was also an error when I used env.body. I had to change it to be env[:body].\nBased on this, I finally got my response Logger working like I wanted. The code can be better and simpler but I added some format stuff. I basically modified the on_complete method to output the data that I wanted.\n``` ruby\nlib/response_body_Logger.rb\ndef on_complete(env)\n    @logger.info \"\\n::#{env[:method].upcase} #{env[:url].to_s}\"\n    @logger.info \"  Request\"\n    env[:request_headers].each do |key, value|\n      @logger.info\"  -- #{key}: #{value}\"\n    end\n    @logger.info \"  Response\"\n    @logger.info \"  -- Status: #{env[:status]}\"\n    env[:response_headers].each do |key, value|\n      @logger.info \"  -- #{key}: #{value}\"\n    end\n    @logger.info \"  Response body\"\n    @logger.info \"  -- #{env[:body]} \\n\"\nend\n```\nThis is an example of a GET resquest to a simple endpoint of the API that I am currently working on:\n::GET http://0.0.0.0:4000/endpoint/example\n  Request\n  -- User-Agent: Faraday v0.8.9\n  Response\n  -- Status: 200\n  -- content-type: application/json\n  -- content-length: 129\n  -- access-control-allow-origin: *\n  -- access-control-allow-headers: Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, Api-Version, Response-Time\n  -- access-control-allow-methods: GET, PUT, DELETE\n  -- access-control-expose-headers: Api-Version, Request-Id, Response-Time\n  -- connection: close\n  -- content-md5: PE9uSnf9SNudIuxdQrsiyQ==\n  -- date: Sat, 01 Mar 2014 21:46:56 GMT\n  -- server: example-api\n  -- request-id: 02a10540-a18b-11e3-a22c-0f561cd4f791\n  -- response-time: 11\n  Response body\n  -- {\"id\":1,\"name\":\"Demo\",\"createdAt\":\"2014-03-01T00:59:16.260Z\",\"updatedAt\":\"2014-03-01T00:59:16.260Z\"}\nI hope that this helps anyone trying to do something similar. I decided to print almost all the information available but it is pretty easy to modify it to your needs.\nThanks again @remiprev for your help!\n. ",
    "kritik": "Strange fail, It fails even on master without any change\n. Here's two options to fix it:\n1) monkey patch for number-validation https://gist.github.com/kritik/2c98b73a390c557b2d1a. It works for me\n2) fix her to use ActiveRecord::AttributeSet\n. Can you add a link here with you pull request?\n. ",
    "alessandrobanjo": "+1\n. ",
    "tkaruzis": "```\nModel.find(143921207)\nStarted GET \"/v1/models/143921207\" for 127.0.0.1 at 2015-01-14 12:03:50 -0500\nProcessing by V1::ModelsController#show as /\n  Parameters: {\"id\"=>\"143921207\"}\n  Model Load (1.6ms)  SELECT  \"models\".* FROM \"models\"  WHERE \"models\".\"id\" = 143921207 LIMIT 1\n  Rendered v1/models/_model.json.jbuilder (7.3ms)\n  Rendered v1/models/show.json.jbuilder (12.2ms)\nCompleted 200 OK in 20ms (Views: 17.6ms | ActiveRecord: 1.6ms)\n```\n\n```\nModel.where(id: 143921207).first\nStarted GET \"/v1/models/143921207?id=143921207\" for 127.0.0.1 at 2015-01-14 12:05:48 -0500\nProcessing by V1::ModelsController#show as /\n  Parameters: {\"id\"=>\"143921207\"}\n  Model Load (0.5ms)  SELECT  \"models\".* FROM \"models\"  WHERE \"models\".\"id\" = 143921207 LIMIT 1\n  Rendered v1/models/_model.json.jbuilder (1.2ms)\n  Rendered v1/models/show.json.jbuilder (2.8ms)\nCompleted 200 OK in 8ms (Views: 6.3ms | ActiveRecord: 0.5ms)\n```\nWe also set our controller to ignore the extra id parameter from where, and we get the same \"TypeError: no implicit conversion of Array into Hash\"\n. ",
    "maticompiano": "Hi! Same problem here. Any idea?\n. ",
    "pfspontus": "+1\n. Line 43 in lib/model/orm.rb, definitely needs more flexibility. Where it says :_path => request_path. The stubbed out request in the spec in spec/model/associations_spec.rb (line 363-364) seems to indicate that two requests is necessary.\n. Looks like you're not getting any data back in the response. What does the actual request look like, and the actual response?\nAlso the initialize method in SLTokenAuthentication, is short-circuiting the super initializer, but I'm sure you're aware of that.\nWhat does bundle show say? about what actual versions of activemodel, activesupport and faraday.\n. I believe this is a duplicate of \nhttps://github.com/remiprev/her/issues/224\nI put together a PR\nhttps://github.com/remiprev/her/pull/238\nyou are welcome to comment on it.\n. Isn't the point to get rid of the \"< 4.1\" part of the Gem file? otherwise :+1: \n. ",
    "cseeger": "+1 (merge please)\n. ",
    "araslanov-e": "+1 (merge please)\n. ",
    "nosretep": "Is this still a known/unsolved issue?. ",
    "AlexCppns": "@Chris911 thanks, looking forward to use it :).\n. ",
    "mhuggins": "Yeah, ActiveSupport 4.0+ (might be 3.2+ actually) now has ActiveSupport::ProxyObject instead of ActiveSupport::BasicObject.  It's probably worth adding a BasicObject class to the Her gem that looks something like this:\nmodule Her\n  if defined?(ActiveSupport::BasicObject)\n    class BasicObject << ActiveSupport::BasicObject; end\n  else\n    class BasicObject << ActiveSupport::ProxyObject; end\n  end\nend\nThen just reference the Her::BasicObject class directly inside this gem.\n. ",
    "brtjkzl": "@mhuggins I tried something like this but six tests in ./spec/model/associations_spec.rb fail when you use ActiveSupport::ProxyObject and I couldn't find why.\n. ",
    "divyashravanthi": "Hello, did you find an efficient way to customise to this?. ",
    "ming13": "Probably related to #224.\n. ",
    "planas": "Hi there, is this going to be merged at some point? If not it would be a good idea to fix the readme\n. ",
    "emq": "seems to do the job :+1: \nadding this thread to watchlist and waiting for merge & new release :)\n. ",
    "motevets": "It seems to me that this path would only get used once (i.e. for the #create or first #save, but then be deleted and not used in subsequent requests).  \nExample (not tested):\nruby\ncomment = @user.comments.create( body: \"Your really bad at grammar\" ) # POST /users/:user_id/comments\ncomment.body = \"You're really bad at grammar\".\ncomment.save # PUT /comments/:comment_id\nIs that the desired behavior?  I know for our APIs we would make subsequent PUTS to /users/:user_id/comments/:comment_id.\nPerhaps this should be set as a instance variable (instead of a temporary attribute) on the model, so that it can be used repeatedly.\n. :+1: \n. Aha, so it does!  I also didn't know has_one serialization had been implemented by someone.  Good stuff.\n. @dturnerTS, unless I misunderstood, this is not the same situation as #261, because Step does define a belongs_to relationship.\n@balvig if you'd like to create a failing spec for this case in a branch and share it, I'd be happy look into it more.\n. It looks like everything is setup properly.  Is your code open source somewhere to look at?\n. Hey @vala, as a caveat, I have never done this, but hopefully this helps:\nYou're going to have to change your API specification in your her.rb initializer to include Faraday's Request::Multipart (documentation).  You still might need to use a hook to make sure the payload includes the file in the format that Faraday expects.\nPlease report back! I'd love to hear what works for future reference.\n. While either would work, I would think that putting in the middleware would make more sense.  If you know that you'll need to convert the file for Faraday's use, you might consider implementing your own Faraday::Middleware extending the existing Request::Multipart that can accept the file in the format you'll have it and do the conversion before calling its super.\n. Thanks for merging in my fix.  Please let me know if you notice anything awry.\n. Oi, bug bit me too.  This is fixed in an outstanding pull request #282.\n. What if you used the .her_nearby_class method so that you didn't have to specify the class_name for an association? (When the class is part of a module).\n. ",
    "mungler": "bump :+1: \n. ",
    "poliphox": "Hmm, I've managed (somehow) to get the POST going to the correct URL, but now there's an issue when GET'ing the next resource. \nI have this URL: /users/1/books/1/chapters\nI can fetch Users and Books, but fetching Chapters doesn't work. \nMy User has_many :books, and a Book has_many :chapters (book belongs_to :user, and chapter belongs_to :book in my Her models). \nHowever, calling :User.find(1).books.find(1).chapters sends a GET request to\n/books/1/chapters (the /user part of the url is missing). \nIf I look at the object returned by User.find(1).books, the @parent variable is set to 'users/1'. For User.find(1).books.find(1).chapters, the @parent variable is set to 'chapters/1'. That seems correct to me, but I would assume the subsequent call to fetch the chapters would join these parent paths together. \nMy Her models are: \nclass User\n    include Her::Model\n    has_many :books\nend\nclass Book\n    include Her::Model\n    belongs_to :user\n    has_many  :chapters\nend\nclass Chapter\n    include Her::Model\n    belongs_to :book\nend\nOn the API side, each of the resources, apart from User, has the foreign_key for its parent resource (ie /users/1/books/1 has user_id, /users/1/books/1/chapters/1 has book_id). \nCan resources be nested deeply, or is only 1 level supported? \nthanks.\n. Replying to myself again :) \nI've added collection_path and resource_paths to my nested models (\"users/:user_id/books/:book_id/chapters\" and \"users/:user_id/books/:book_id/chapters/:chapter_id\"). \nThis is now returning data from the resources, however calling: \nUser.find(1).books.find(1).chapters.find(1)\nreturns an object like Chapter(< unknown path, missing user_id >. \nObviously, I'm doing something wrong somewhere, I don't know why the Chapter is warning about the user_id, but not the book_id? Shouldn't it just be getting that from the parent model(s) anyway? \nI'm trying to figure out why the Book->Chapter relationship is causing problems (unlike the User->Book one) but I can't find anything wrong in my code. Is this a bug in Her? \n. ",
    "mtwentyman": "It's present in 4.0-stable and ActiveSupport::BasicObject is gone in 4.1-stable\n. We would have to get rid of the \"< 4.1\" in both the gemfile and gemspec.  It's not a bad idea, per se, to set an upper bounds for dependencies like activesupport that aggressively deprecate old apis, but  we could do a more thorough audit to enable >=3.2.0 more broadly.  @pencil care to give any guidance there?\n. Sorry for the long pause there, vacation + family stuff got in the way.  using active model/support 4.1.1 seems to be triggering a fetch:\nhttps://gist.github.com/mtwentyman/25261e2e8a3ac36deab0\nChanging the @parent.attributes[@name].empty? to @parent.attributes[@name].blank? on https://github.com/remiprev/her/blob/90e5c0d371f3cfddfb12df17a50a003b5093b54f/lib/her/model/associations/association.rb#L47 clears the failure (and doesn't introduce any others), but I was unclear on the potential side effects there.\nUsing Foo::User.new :role => associated_value vs Foo::User.new.tap { |user| user.role = associated_value } also clears the failure.  I'll dig through the assignment under the hood, but wanted to know if you had any insight / direction to give.  Thanks!\n. I've run into this myself and had to patch this method over.  +1\n. The test I've added here will fail without the corresponding patch.\n. @hubert would you mind taking a quick look at this one?  this fixes a regression as noted in the initial comment.\n. Flagging @remiprev and @pencil to ensure they see this so they can turn it off and on again :)  Thanks guys!\n. It's in a transitional place; see #324\n. Another option to help avoid an incorrect return type (while allowing the use of next) is to use Enumerable#each_with_object.  It might have a slight side benefit of making it a little harder for this to break in the future.  Speaking of which, I'd love to see a spec for this too.  From the contribution guide:\n\nAdd examples that describe it (in the spec directory). Only refactoring and documentation changes require no new tests. If you are adding functionality or fixing a bug, we need examples!\n. \n",
    "danielneis": "Hello,\nI was also facing dificulties when dealing with empty collections.\nEven when I \"include_root_in_json\" and \"parse_root_in_json\" , I am getting a \"undefined method `merge' for []:Array\" error.\nI've changed the \"parse_root_in_json\" to the following and now it is working:\nparse_root_in_json true, format: :active_model_serializers\n\nHope this helps =). Hello,\nit would be great if her could parse the associations sent on \"relationships\".\nHere is an example json for a call with a has_one relationship:\nhttps://gist.github.com/danielneis/255d4c931ca8191f5b8d0b2bc2a1c5ce. hello, it would be very usefull.. I've tested the changes proposed here and found that they work.\nThere is a problem with types with \"_\" or \"-\", but this is generalized in all her-rb code, so I think it may not be a reason to not get it working. I've experimented with has_one and belongs_to relationships.\nRelationships inside other relationships are not parsed.. Hello,\nI am using Her to interact with a model that uses ActiveRecord::Enum (http://api.rubyonrails.org/classes/ActiveRecord/Enum.html) and it is nice because when you have a \"status\" attribute and you set the statuses on the enum (lets say you have waiting and approved), you are given methods like .waiting? (returns true if status == waiting), .waiting! (sets the status to waiting) and .waiting (that returnas a collection of all records with status == waiting).\nIt seems that these methods (waiting?, approved?) always return false. The status method returns the correct status. It may be on the Her side or maybe on the Serialization side, I don't really know, but any help is welcome =). Hello,\nif you have something like this:\n```\nclass CreateTests < ActiveRecord::Migration[5.0]\n  def up\n     create_table :tests do |t|\n       t.integer :status\n    end\n  end\nend\nclass Ticket < ActiveRecord::Base\n  enum status: { scheduled: 0, done: 1, canceled: 2}\nend\n```\nAnd on the client side you have:\nclass Test\n  include Her::Model\nend\nYou will have the following behaviour on the client side:\n```\n\nt = Test.find(2)\n\n\n\nt.status\n => \"done\" \nt.done?\n => false \nt.scheduled?\n => false \nt.status == \"done\"\n => true \n```\n\n. Hi @edtjones \nin fact, there is no route on the API endpoint for done? or other status methods.\nI was trying to figure what is happening and in fact, the \"status\" attribute is sent by the API as a string, the correct string, as the first example shows.\nWhat I noticed is that looks like Her gives methods ending with \"?\" for all attributes, and also for any method I call that ends with \"?\" and does not exists, it returns false.\nI could add the endpoints for those methods, or include the results on the JSON returned by the API, but it would be better if everything \"just works\" =)\n. Hello!\nThank you for you clarifications.\nAfter thinking about the problem for a while and looking at what you suggested, I think it's better for the API to send the methods ending in ? because it has a way to determine which statuses are available. The methods ending in ! may be called as extra calls on the API because they change the object status.\nIn the API side I can tell the \"as_json\" method to include the methods I want with something like this:\ndef Test\n  def as_json(options={})\n    super(options.merge({:methods => Ticket.statuses.map { |s,v| s.to_s + '?'} }))\n  end \nend\nWith this I get a json attribute for each status and can use it on the Her side. =)\nBest regards,\nDaniel. ",
    "reejosamuel": "@revathskumar \nHave enabled cache on the request as mentioned in the documentation \nCaching\nAgain, using the faraday_middleware and memcached gems makes it very easy to cache requests and responses.\nIn your Gemfile:\nruby\ngem \"her\"\ngem \"faraday_middleware\"\ngem \"memcached\"\nIn your Ruby code:\n``` ruby\nHer::API.setup url: \"https://api.example.com\" do |c|\n  # Request\n  c.use FaradayMiddleware::Caching, Memcached::Rails.new('127.0.0.1:11211')\n# Response\n  c.use Her::Middleware::DefaultParseJSON\n# Adapter\n  c.use Faraday::Adapter::NetHttp\nend\nclass User\n  include Her::Model\nend\n@user = User.find(1)\nGET \"/users/1\"\n@user = User.find(1)\nThis request will be fetched from memcached\n. ruby\n@resource = Resource.find(1)\n@property = @resource.properties.find(1)\n@value = @property.values\n```\nI had the same problem yesterday, so i opened the shell cracked some commands and found this to work. \n. Hey @ddevaal I tested what you are saying and faced the same error, I have come up with a fix after scouting some pull request and merging some pull requests from others. Its a quick fix for the time being until the gem author is back. I like take no credit but just to keep things moving.\nYou can include this in your Gemfile\ngem \"her\", \"0.6.8\", git: 'https://github.com/reejosamuel/her.git'\n. branch_params is just a helper method for getting the params\nruby\n    def branch_params\n      params[:branch]\n    end\n. So, you are saying i remove the associations, handle each Model separately? and use the resource_path. Is this is a temporary fix or the right way to go about with HER\nThis has sorted the issue. Thank you\n. Personally i believe if the user has mentioned the belongs_to associations then he is actually expecting the url to be nested as per association and given how your gem has been keeping up the pattern it is very much expected. Also i saw a lot of users opening issues on this context.\nHaving collection_path and resource_path is a great alternative for people who wants to customize the URL.\nNote that there is nothing mentioned in the readme documentation about the resource_path\n. ",
    "revathskumar": "@reejosamuel Thanks. I thought they will cache it on the object if Memcache is not configured.\n. ",
    "haozeng": "oh. I think I kinda of figured it out.  if it is a post, it will return a object but if it is a get, it will return nil. Can you point me to the source code ? \n. @remiprev is there any instruction that i need to follow in order to submit this pull request ? \n. Got you. Thanks a lot for your answer. Right now, I think a cusom parsing middleware is the way to go.  I will close this PR. :dancers: \n. ",
    "paulvt": "This fix seems to work only partially for me, as it doesn't seem to check if you actually changed the value (which also isn't tested by the test):\nprod = Product.find(1)\n=> #<Product(/rest/products/1) name=\"Player\">\nprod.name = \"Player\"\n=> \"Player\"\nprod.changes\n=> {\"name\"=>[\"Player\", \"Player\"]}\n. @caomania Great! Applied it locally for now :)\n. I agree with the above assement, however, setting a collection path changes it for the entire model, while it is only relevant for the association.\nFor example: a product may be associated to a few categories (/products/:product_id/categories/:category_id), which can be created/updated/destroyed there but this holds for the mere associations. There can be a /categories/:category_id where the actual all categories live.  In this case, I cannot set the collection path to either one for model Category.  Maybe it is better to have it configurable per association like:\nruby\nclass Product\n  has_many :categories, use_parent_path: true  # uses /products/:product_id/categories/:category_id\n  has_many :stocks # uses /stocks/:stock_id\nend\nSee also #238.\n. Yes, agreed. When diving through associations it quickly gets messy because of the (duplicate) backrefs.\n. I would expect POST to send all attributes and PATCH to send only the modified attributes.\n. Indeed, clearing @changed_attributes is missing in several places.  I have added for resource in Her::Model::Attributes.initialize_collection, but this doesn't solve it for single resource associations.\n. Also added a clear to the fetch method of the various associations and now everything seems to be fine.  When I have time I will prepare a pull request.\n. I overlooked your pull request, cheers!\nThis is much more elegant than clearing it all over the place. (I am still getting to grips with the intricate structure of model, relation, association, proxy, etc.)\n. Maybe also add a test?\n. ",
    "caomania": "@paulvt it's resolved by this pull request. https://github.com/remiprev/her/pull/314 Still waiting to hear back from @remiprev \n. Thank you. :+1: \n. ",
    "alainmeier": "@remiprev this is how I include the middleware in her.rb:\n``` ruby\nrequire Rails.root.join('lib', 'api_key_authentication')\nI have two authentication strategies and this one uses HTTP Auth Basic.\nUSER_API = Her::API.new\nUSER_API.setup url: ENV['BLOCKSCORE_PATH'] do |c|\n  # Request\n  c.use Faraday::Request::UrlEncoded\n# Response\n  c.use Her::Middleware::DefaultParseJSON\n# Adapter\n  c.use Faraday::Adapter::NetHttp\n# HTTP Basic authentication\n  c.use ApiKeyAuthentication\nend\n```\nI will play around a bit more and let you know.\n. ",
    "balvig": "Not sure if this helps but just for reference, with Spyke (our heavily Her-inspired gem) we are solving the problem like this:\nhttps://github.com/balvig/spyke#custom-uris\nA key difference though is that Spyke uses only one URI template (with optional urls segments) to handle both collection/resource, but I guess perhaps Her could be tweaked to allow both the :resource_path and :collection_path-options on the associations in a similar fashion?\n. Just noticed this is a duplicate of https://github.com/remiprev/her/pull/281. Closing!\n. Great to see this! Has been bugging me as well :) For me the belongs_to classes still seem to slip through in nested associations even when using this fix...ie\n``` ruby\nclass Recipe\n  include Her::Model\n  has_many :steps\n  accepts_nested_attributes_for :steps\nend\nclass Step\n  include Her::Model\n  belongs_to :recipe\nend\n```\nresults in something like\nruby\n{\n  \"recipe\"=>\n  {\n    \"steps\"=> [{\"id\"=>\"1\",\"recipe\"=>\"#<Recipe:0x007fc2e5deebd0>\"}]\n  }\n}\nHaven't found the cause myself yet, maybe something deeper going on...?\n. @aauthor, @dturnerTS Sorry about that, while writing the failing spec I actually realised the problem was in fact that Step doesn't define a belongs_to relationship...I somehow added that while formatting the example for github! :sweat: \nThe problem is indeed #261 ! Thanks for pointing me in the right direction :grin: \nFor reference, here is the failing spec showing that particular problem: https://github.com/balvig/her/commit/be7ffd77e7585cb8ce018b836a9465f9c73af382\n. This is probably way out of date at this point :sweat_smile: \nHave switched to https://github.com/balvig/spyke so will close this to avoid clogging up the PR tubes! :bow: \n. ",
    "DiscreteObject": "Hope this helps:\n1) Customer GET /admin/customers/:id returns a customer\n     Failure/Error: expect(Customer.find(customer.id)).to be_an_instance_of Customer\n     NoMethodError:\n       undefined method `include?' for nil:NilClass\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/activemodel-4.1.0/lib/active_model/dirty.rb:154:in `attribute_changed?'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/activemodel-4.1.0/lib/active_model/dirty.rb:186:in `attribute_will_change!'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/activemodel-4.1.0/lib/active_model/attribute_methods.rb:387:in `name_will_change!'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/attributes.rb:195:in `block (2 levels) in attributes'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/attributes.rb:61:in `block in use_setter_methods'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/attributes.rb:58:in `each'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/attributes.rb:58:in `inject'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/attributes.rb:58:in `use_setter_methods'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/attributes.rb:106:in `assign_attributes'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/attributes.rb:61:in `block in use_setter_methods'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/attributes.rb:58:in `each'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/attributes.rb:58:in `inject'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/attributes.rb:58:in `use_setter_methods'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/attributes.rb:106:in `assign_attributes'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/attributes.rb:27:in `initialize'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/attributes.rb:175:in `new'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/attributes.rb:175:in `new_from_parsed_data'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/relation.rb:98:in `block (2 levels) in find'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/http.rb:59:in `request'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/relation.rb:96:in `block in find'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/relation.rb:89:in `map'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/relation.rb:89:in `find'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/her-0.7.2/lib/her/model/orm.rb:138:in `find'\n     # ./spec/models/customer_spec.rb:37:in `block (3 levels) in <top (required)>'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:114:in `instance_eval'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:114:in `block in run'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:179:in `call'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:179:in `run'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/extensions/instance_eval_with_args.rb:16:in `instance_exec'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/extensions/instance_eval_with_args.rb:16:in `instance_eval_with_args'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:247:in `instance_eval_with_args'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/hooks.rb:106:in `block (2 levels) in run'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/hooks.rb:108:in `call'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/hooks.rb:108:in `run'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/hooks.rb:446:in `run_hook'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:340:in `run_around_each_hooks'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:256:in `with_around_each_hooks'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example.rb:111:in `run'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:390:in `block in run_examples'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:386:in `map'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:386:in `run_examples'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:371:in `run'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:372:in `block in run'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:372:in `map'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/example_group.rb:372:in `run'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/command_line.rb:28:in `block (2 levels) in run'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/command_line.rb:28:in `map'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/command_line.rb:28:in `block in run'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/reporter.rb:58:in `report'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/command_line.rb:25:in `run'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/runner.rb:80:in `run'\n     # /Users/me/.rbenv/versions/2.1.1/lib/ruby/gems/2.1.0/gems/rspec-core-2.14.8/lib/rspec/core/runner.rb:17:in `block in autorun'\n. ",
    "AdamFerguson": "We have a need for dates to come through as actual date fields instead of strings in our client application. I attempted to add support for this in the client gem that wraps Her, but this proved to be sticky b/c of the precedence of attribute methods. This implementation is largely modeled off of the Sawyer gem\n. OK. Thanks for looking and apologies for the versioning faux pas. I'll work on a custom middleware instead.\n. ",
    "polivers": "Hi all, \nI'm not getting very far in solving my issues with Her, unfortunately. \nMy User model has_many :posts, with accepts_nested_attributes_for :posts, and my form submits fields like: \nuser[posts_attributes][0][title] which update Her's @user.posts[0].title attribute, all as expected and what I want. and I THEN do @user.save - I'm expecting my api to receive user[posts_attributes]. \nMy form can even nest another level down, Her handle's it and objects in my controller are updated perfectly: \n```\n<%= form_for @user do |form| %>\n    <%= form.text_field :name %>\n    <%= form.fields_for :posts do |posts_form| %>\n        <%= posts_form.text_field :title %>\n    <%= posts_form.fields_for :tags do |post_tags_form| %>\n        <%= post_tags_form.text_field :ids %>\n    <% end %>\n<% end %>\n\n<%= form.submit %>\n\n<% end %>\n```\nHowever, Her seems to just send user[posts] - so the models in my API, which are ActiveRecord models, with their own User has_many :posts and accepts_nested_attributes_for :posts, don't work. \nIt's also sending the object of the belongs_to association as an attribute of the POST data. For example: \n\"user\" => {\n    \"posts\" => [\n        { \n            \"name\" => \"Post name\"\n            \"user\"  => \"#<User:0x007f0e55011570>\"\n        }\n    ]\n}\nI'm not sure why \"user\"  => \"#<User:0x007f0e55011570>\" is there?\nUnless I'm doing something obviously wrong, it looks like I'm going to have to give up with using Her and re-write everything as a single Rails app. \nWould be very disappointing as it's absolutely great when it works. \nthanks for reading. \n. ",
    "cknoxrun": "Thank you for the quick response, this works great!\nOn Wednesday, June 25, 2014 at 8:33 AM, R\u00e9mi Pr\u00e9vost wrote:\n\nYes, you can use the built-in Her::Middleware::AcceptJSON middleware.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/remiprev/her/issues/260#issuecomment-47108724).\n. +1\n. \n",
    "pisaruk": "Great job. Would you mind merge this code into your own fork? I would like to point to your fork/master.\nThank you.\n. ",
    "mcfilib": "@remiprev Besides this now causing conflicts, what was the reason this was never merged? This is causing pain for us and I'd really like to see this on master. How can I make that happen?\n. @dturnerTS Ah, didn't see that and didn't realise that @remiprev was looking for a new maintainer. Thanks for the heads-up!\n. We're experiencing the same issue. I've managed to get around it by suffixing the collection with .fetch.\nruby\nrespond_to :json\ndef index\n  @internal_users = InternalUser.all\n  respond_to do |format|\n    format.json { render :json => @internal_users.fetch }\n  end\nend\n. ",
    "gottfrois": "+1\n. ",
    "minktom": "@pencil, @remiprev: I've rebased the branch, sorry for the late\n. ",
    "vbalazs": "ping @pencil \n. ",
    "oneamtu": "pong @hubert, whenever you have time\nthanks for the fix @minktom! \n. ",
    "mepatterson": "ping? is this in a build somewhere I can use? having various problems with AMS and Her integration...\n. ",
    "mathieujobin": "LGTM :+1: \n. wouldn't it be better if this'd be done when calling super?\n. ",
    "boie0025": ":+1: \n. ",
    "shashiprab": "Any plans on merging this PR?. Thanks Zachary! Wonderful to see the progress on Her gem. \n-Shashi\n\nOn Jun 25, 2017, at 5:01 PM, zacharywelch notifications@github.com wrote:\nreleased 0.9.0 w/ release notes \ud83d\udc4d\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n. Any movement on this? The longer it sits around, the more stale it gets.. Cool. Appreciate your efforts that have moved the needle over the last month tremendously! \n-Shashi\n\nOn Jun 29, 2017, at 7:16 PM, zacharywelch notifications@github.com wrote:\nHi, was trying to defer these changes until we had a chance to release 0.9.0. Now that's taken care of perhaps we'll merge this weekend. Until then feel free to add any comments or give it a review \ud83d\udc4d\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Zachary\n\nIf you could share your email with me I have proposal about the Her gem. My email is shaship@yahoo.com \nThanks\n-Shashi\n\nOn Jun 29, 2017, at 7:16 PM, zacharywelch notifications@github.com wrote:\nHi, was trying to defer these changes until we had a chance to release 0.9.0. Now that's taken care of perhaps we'll merge this weekend. Until then feel free to add any comments or give it a review \ud83d\udc4d\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "gmontard": "Hello,\nAny update on a merge of this PR?\nThanks.\n. ",
    "derekprior": "Would love to see this merged. Almost gave up on Her today because I couldn't find a simple way around this.\n. ",
    "WizardOfOgz": "Since the Readme specifically mentions providing \"ActiveRecord-like methods\" I believe it is fair to expect #new_record? to respond in a manner consistent with ActiveRecord models.\nOn a side note, I'm not a big fan of responding to every method ending with ? or =.\n. @hubert This PR has been rebased on master. Thanks for adding this!\n. ",
    "tippenein": "@annacruz I think @moofish32 is right about this. You should namespace it differently. Could you close the issue if this is the case?\n. ",
    "vala": "Thanks @aauthor, I'll have a look at the Faraday API to handle the files, it seems to be pretty easy.\nWhen you talk about a hook, do you mean in Faraday or in Her ?\n. Thanks @aauthor, I finally had time to implement it.\nIf it can be useful for anyone : \nAlways .use the Request::Multipart middleware before the Request::UrlEncoded in your Her config initializer.\nThen, Faraday can't automatically treat Rails uploads as if they were files, so I had to implement a way to make it work easily on my models. So I created the following module : \n``` ruby\nIn lib/her/file_upload.rb\nmodule Her\n  module FileUpload\n    extend ActiveSupport::Concern\nmodule ClassMethods\n  def has_file_upload(attribute)\n    attributes attribute\n\n    define_method(:\"#{ attribute }=\") do |file|\n      assign_file_attribute(attribute.to_sym, file)\n    end\n  end\nend\n\ndef assign_file_attribute(attribute, file)\n  if file.is_a?(ActionDispatch::Http::UploadedFile)\n    file = Faraday::UploadIO.new(\n      file.tempfile.path,\n      file.content_type,\n      file.original_filename\n    )\n  end\n\n  # Super can't be called with Stack Level Too Deep errors\n  if @attributes[attribute] != file\n    self.send(:\"#{ attribute }_will_change!\")\n  end\n\n  @attributes[attribute] = file\nend\n\nend\nend\n```\nyou can use this class in your model with the following :\n``` ruby\nrequire 'her/file_upload' # Can be avoided by adding your lib folder to autoload_paths\nclass MyModel\n  include Her::Model\n  include Her::FileUpload\nhas_file_upload :my_file\nend\n```\nHope it saves someone else some time !\n. ",
    "l8nite": "@hubert is this one still worth merging?\n. ",
    "kvaggelakos": "I can confirm that this is still an issue. Doesn't seem like @chewi's PR has been merged yet.\n. ",
    "eggmatters": "Btw, I think I see it. hash keys can't be called like methods. But that still points to something in translating the return in your code. Used webmocks gem with much greater success.\n. ",
    "bswinnerton": "I'm not sure if this is an appropriate place to put it, but something like this does accomplish what I'm looking to do:\nruby\nmodule Her::Model::ORM\n  def fetch\n    self.class.find(id)\n  end\nend\nruby\nCat.find(1).owner.fetch\n. ",
    "diegoy": "This feature is useful, is there any problem in this implementation in particular?\n. ",
    "solutus": "this issue slows down to show 100 records up to 10 seconds. Vote to merge it to master\n. ",
    "marshall-lee": "Hi @toddmazierski !\nCould you provide your benchmark code?\n. @toddmazierski I thought maybe you have a complete benchmark code that somehow mocks an API endpoint :smiley: \n. I ask you because right now I'm trying to achieve this because this issue is not the only one for performance optimization, though it's the most heavy. So having a benchmarking tool for Her would be useful.\n. Oh, benchmarks here: https://github.com/remiprev/her/pull/337#issuecomment-99233830\n@toddmazierski I think you'll be interested.\n. done!\n. Custom exceptions are good but theye're not for everyone.\nMaybe store object.response_status at least?\n. > I think the value of a missing object should be nil\nYou mean missing association objects? If yes I think the same.\n\nand the action of fetching a missing object should raise an exception\n\nAs ActiveRecord throws ActiveRecord::RecordNotFound one would assume a similar behavior for Her. I definitely want this feature but I want it as optional for now. It shouldn't break existing code. For example in our project we handle errors (and not found errors too) by looking into response_errors. We don't like it but it's already implemented and it works, and we don't want our code be broken after upgrading to new version of Her. There should be a graceful upgrade path for existing users.\n. > The maintainer would have to decide about default behaviour after an upgrade but rails gives us a good example: warn and deprecate one version ahead, then change the default behaviour in a way that is easy to undo.\nYeah, I agree.\n. Set is implemented using hash tables so it should  be O(1). But on small sets it may not improve performance due to overhead.\nHowever, this one improves performance due to memoization \u2014 current implementation calls instance_methods which creates a new array on each iteration so it's slow.\nBut it's just a variation of #307 and you can see benchmarks \u2014 they are adequate. We faced this problem too \u2014 current implementation parses json in our project for about 10 seconds but that patch dramatically increased the performance!\nAlso please look at my #337 \u2014 it solves this problem even better without creating any additional arrays at all.\n. I benchmarked this PR in https://github.com/remiprev/her/pull/337#issuecomment-99233830 and it's turned out to be slower than #307. I think this is because of Set constructing overhead.\n. > method_defined is implemented using a binary search which takes O(lg n)\n:smiley: despite the name rb_method_boundp it's not a binary search. It's a hash lookup.\nJust trace the https://github.com/ruby/ruby/blob/ruby_2_2/vm_method.c:\n- rb_method_boundp calls rb_method_entry_without_refinements\n- rb_method_entry_without_refinements calls rb_method_entry\n- rb_method_entry calls rb_method_entry_get_without_cache\n- rb_method_entry_get_without_cache calls search_method\n- (the most interesting) search_method calls lookup_method_table for each superclass of a class (beginning from the class itself of course)\n- lookup_method_table calls st_lookup from st.c which is a hash table lookup\nhash lookup is O(1), so the overall complexity is just O(M) where M is the number of superclasses of a class.\nInteresting: looking up in M small hash tables is turned out to be better than looking in one big hash table (the constructed Set). I still think this is because of Set constructing overhead + maybe some caching techniques deep inside  method_defined? call.\n. > Searching a set can take O(1) to O(lg n) time, depending upon how its implemented\nRuby's Set is not ordered by value so It's not a balanced search tree :smiley: (but ordered by the order of inserts by the way \u2014 just like Hash)\nLook at implementation of set.rb \u2014 it just piggybacks to Hash.new.\n. By the way, method lookup in Rubinius is implemented the similar way \u2014 a hash lookup for each superclass.\nhttps://github.com/rubinius/rubinius/blob/2.2/kernel/common/module.rb:\n- method_defined? calls lookup_method\n- lookup_method calls mod.method_table.lookup for each superclass mod.\n- method_table.lookup is defined in vm/builtin/method_table.cpp which is a typical hash table implementation.\n. It's also worth to not convert every string to symbol \u2014 there's no need to do it now.\n. > the behavior of method_defined? vs instance_methods.include? aren't equivalent. method_defined? would also return true if the method were defined by one of it's superclasses, while instance_methods.include? would not.\nNo, instance_methods traverses all superclasses too:\n``` ruby\nclass X\n  def m\n  end\nend\nclass Y < X; end\nputs Y.instance_methods.include?(:m) # outputs 'true'\nHowever:\nputs Y.instance_methods(false).include?(:m) # outputs 'false'\n```\nBut instance_methods without false  is being calling in our case.\n\nfrom my reading of the code, the latter behavior is what we want\n\nI don't think so. What if I want to inherit my model class from another?\n. I created a benchmark branch in my fork \u2014 it just contains a benchmark rake task that runs User.all.to_a with mocked faraday response so it measures only CPU work without any real networking. After this i created a separate branches for all  relevant PRs and merged them with benchmark branch.\nSo we have 4 variants:\n- benchmark \u2014 current master with benchmarks.\n- benchmark-instance_methods_by_generalassembly \u2014 the #307 with benchmarks\n- benchmark-instance_methods_by_faisalmansoor \u2014 the #336 with benchmarks\n- benchmark-instance_methods_by_marshall_lee \u2014 this one\nHere the benchmarks from my laptop:\nmaster            0.350000   0.000000   0.350000 (  0.352151)\ngeneralassembly   0.160000   0.000000   0.160000 (  0.169817)\nfaisalmansoor     0.230000   0.000000   0.230000 (  0.234990)\nthis one          0.110000   0.000000   0.110000 (  0.103908)\nThis one performs better!\n. Also we can see that @faisalmansoor's solution (#336 \u2014 that constructs a Set for memoization) is slower than @generalassembly's (#307 \u2014 that memoizing with Array). I think this is because of Set constructing overhead but maybe i'm wrong.\n. ok I will add it soon.\n. @faisalmansoor \n\nhow many objects did you test with and how many attributes each object had\n\nbenchmark code is open, i provided the link above (benchmark and all benchmark-* branches). The benchmark rake task itself is here: https://github.com/marshall-lee/her/blob/benchmark/Rakefile#L13\nIn this benchmark I emulate a case when fetching from server an array of 1000 objects. Each object has three properties: id, email, name.\n. > I don't think just memorizing the array will solve the problem\nO(lgN * N) vs O(N * N) just tells us about a rate of growth. Sure, solution with Set will be better than linear search but only when N is sufficiently large. In our concrete case this N is not so big and probably will never be \u2014 it's just a number of methods of a class. So our problem is not a large value of N.\n. By the way, Set lookup is not a O(lgN) \u2014 it's simply O(1).\n. @hubert \n\nthe PR code gets exercised indirectly in specs\n\nSometimes directly and sometimes indirectly. Specs for setters/getters are already in spec/model/dirty_spec.rb. Are they sufficient?\nI just wrote my spec for attributes class method in spec/model/attributes_spec.rb but not yet commited it because I realized  it's redundant.\nUPD:\n``` ruby\n  context \"attributes class method\" do\n    before do\n      spawn_model 'Foo::User' do\n        attributes :fullname, :document\n      end\n    end\ncontext \"instance\" do\n  subject { Foo::User.new }\n\n  it { should respond_to(:fullname) }\n  it { should respond_to(:fullname=) }\n  it { should respond_to(:fullname?) }\nend\n\nit \"defines setter that affects attributes\" do\n  user = Foo::User.new\n  user.fullname = 'Vladimir Kochnev'\n  user.attributes[:fullname].should eq('Vladimir Kochnev')\nend\n\nend\n``\n. About a corner case discovered by you: yeah it's a big problem. I think in next major version we should splitattributesclass macro and attributes definition that's being calling indirectly. Soattributesmacro should always override methods defined before but indirect call should check for existence withmethod_defined?`.\n. > the attribute.to_sym call is also unnecessary since it gets converted back to a string when it gets interpolated. we can deal with that separately if you prefer.\nI wanted to do it separately because it's not the only place to fix string <=> symbol transformation. It's also not necessary to do interpolation like :\"#{attribute}\" because @attributes is already a HashWithIndifferentAccess. This fix deserves separate PR.\n. I added specs. Are they ok?\n. https://travis-ci.org/remiprev/her/jobs/61596212 \u2014 it fails as expected.\nBut only 4 of 6 new spec examples failed. Those that test getter method (which is defined by ActiveModel) are green. So we should fix a behavior of setter and predicate methods.\n. We have two ways to fix it:\n- Piggyback on ActiveModel's generated_attribute_methods.\n- Dynamically include our own module which stores setters and predicates. This will allow us to not depend on ActiveModel's implementation.\n. No counterargs from me too. So lets proceed.\nChosing this way we should decide what to do with concurrency. It turns out that it would be better to acquire a mutex around an attribute method definition:\n- ActiveModel 4.x has a Mutex_m in generated_attribute_methods module but acquiring this mutex is a user's responsibility. For instance, ActiveRecord calls generated_attribute_methods.synchronize \n- ActiveModel 3.2 doesn't use a Mutex_m mixin, but ActiveRecord creates a @attribute_methods_mutex and wraps a call to define_attribute_methods in @attribute_methods_mutex.synchronize.\n- ActiveModel & ActiveRecord 3.0 - 3.1 doesn't care about this but my opinion is that we should care about it anyway.\nSo the solution is simple: use generated_attribute_methods as a mutex for  ActiveModel 4.x and create a Mutex.new for 3.x.\n. b5faac2 removes method_defined? workaround introduced in #337 at all because ActiveModel already has a convention for defining custom attribute methods that our setter and predicate methods actually are. For instance, ActiveRecord uses attribute_method_suffix  for predicate and setter too.\n. cee317f acquires a mutex around an attribute methods definition and the specs for this are written.\nAlso I measured a performance as in #337 \u2014 it's not degraded but I think it's even became faster a bit.\n. @hubert ?\n. @hubert I rebased against current master (with your work on JSON API support). There were some conflicts in spawn_model spec macro, so I decided to change it this way: d4eec52b6c115973fb8f6e1fda4461bd636e3aaf.\nPlease merge it. This PR finally fixes the issue with attributes.\n. In this file I also don't like that Her::API.setup calls instance method #setup twice \u2014 inside #initialize and also explicitly in .setup. Create a separate PR for this? (upd: #342)\n. Thanks! Merging this PR probably helped me with https://github.com/remiprev/her/pull/351\n. @hubert ?\n. @hubert done!\n. 1. What's the purpose of format: :json_api then? Deprecate it?\n2. Maybe just create a PR so we can look at it?\n. > The main downside is that we would need to combine the top-level data namespace with the attributes namespace. If an \"id\" or \"type\" were passed in attributes different than the top level id, we'd need to figure out a way to resolve the conflict.\nThis issue should definitely be resolved before merging.\nFirst of all: what JSON API standard says about issues like this? Probably It says nothing because there is actually no such problem on JSON API side :smiley: \n\nPerhaps top-level \"id\" and \"type\" get added as \"data_id\" and \"data_type\" or something...\n\nwow, just don't do this! What if I have data_type or data_id in attributes? Just don't put in ActiveModel's attributes something that is actually not an attribute because it will produce bugs.\nSurprisingly, the answer lies in my issue #338. Look at how ActiveModel is implemented: virtual module is injected in a model class that stores all the attribute methods. Okay what if I have a class attribute in the API response? Then :class attribute method will be created dynamically so It would not be possible to get an object class :smile: Attribute methods are superior and there's literally nothing to do with it. It's just an ActiveModel's caveat, that user should be warned about. Just don't struggle with it!\nSoooo I propose this solution:\n1. Don't put top-level type into attributes. If I get JSON API right the type is an API parameter \u2014 not an attribute. It can't be mutated. You could store it in instance variable @type and add a reader method for this but don't put it into attributes. If I call object.attributes[:type] = 'something' it's an assignment to type attribute but not to a type API parameter.\n2. Define _type instance method for accessing @type instance variable. If someone has a type attribute he would have a possibility to access a not overriden type.\n3. Put top-level id into attributes. Seriously, It's a different thing. Suppose a corner case when we mutate an id with PUT /somethings/old_id. Or just create an entity with custom id using POST /somethings. I don't know how the standard deals with this situation but this behavior seems not to break it.\n. It's also worth to have ability to somehow pass a type API parameter separately from passing attributes when calling Her methods. I don't realized yet how to achieve this. Need some more use cases of advanced usage of type parameter.\nBut for now we could simply infer type value from model's name. Doing this we make a Her::JsonApi implementation being a compatible subset of JSON API standard. Not bad for the start!\n. And I believe this all could be safely implemented without touching existing Her::Model code.\n. 4 I haven't described what to do when attributes: { id: '...' } is in the response. Well, I propose not doing anything with it for now. We should tell about this caveat in documentation but not make any workarounds in code. Just warn a user that using reserved keywords (class, id, etc) is dangerous and that's all.\n. After all, API endpoint that sends id in attributes is strange and corner cased.\n. > i think that adding _type and _id methods are reasonable ways to go, but those methods will still shadow _id and _type that are passed within attributes. the user could still dig in and access them directly via attributes which would not be the norm, but i think that's fair to put that burden on the api developer.\nYeah but  be careful when adding _id. I propose not add it for now. We can store _type separately from attributes, but not the _id because in current Her architecture it assumes that id is a part of attributes. Ideally, Her::JsonApi should use that separately stored _id when constructing paths like /somethings/123 but not the value of id attribute. Does your implementation achieve this? If not, adding that _id will be useless and confusing. Achieving this may require changing the Her::Model code but maybe there is a simpler solution.\nAlso Her::Model adds a class method primary_key. Your Her::JsonApi should not add this method or just raise an exception because JSON API doesn't allow to setup different name for id.\n. But maybe... Add that _id now and solve the issue with path constructing later? It's better than nothing :smiley: \nBut please undefine all these primary_key, parse_root_in_json and include_root_in_json in Her::JsonApi because they're simply not related to JSON API standard. Getting NoMethodError exception will show the user, that read documentation poorly, that these settings are not valid in case of JSON API.\n. ...When comparing Her to ActiveRecord it's the one of the important features Her lacks. And since creating connections is done by Her itself there is no other way to setup a pooling than add its support to Her.\nconnection_pool gem with its simple with { ... } semantic (acquire connection from pool for every request and release it immediately) is very suitable for stateless protocols like HTTP.\n. You can read more about all this stuff in the updated README\n. @hubert I don't think so. Using a connection pool is optional so installing a connection_pool gem is also optional. Her should not require it to work \u2014 https://github.com/marshall-lee/her/commit/5288afd8576250fe611c58c165af494b4acc4972#diff-6b1740b8978bf165426acae9d1c17138R1\n. add_runtime_dependency is an alias to add_dependency :smiley: \n. I made it a development dependency only for running connection pool-related specs.\n. Maybe it is worth to add a connection_pool as a dependency and use it every time. Even if there's only one connection, having a pool will automatically solve thread safety issues. However it can confuse existing Her users that have long running queries \u2014 they can get a Timeout::Error accidently.\n. bump! /cc @hubert \n. @hubert \n\n1) could you create a new connection_pool_spec\n\ndone!\n\n2) i know Net::HTTP:Persistent maintains it's own connection pool. have you tested the code with this adapter to make sure they work nicely together?\n\nIt doesn't require a setup_pool at all and I mentioned it in README. However when using it with setup_pool nothing harmful will occur. There will be no concurrent workload from multiple threads on a single Net::HTTP::Persistent instance so its own pool just won't be used.\n\n3) could you move the additions to the README into the advanced section\n\ndone!\n. cc @hubert \n. cc @edtjones @foxpaul :). @edtjones Hi Ed! Sorry for late response. \n\nShould we go one step further and use something with swappable backends like httparty?\n\nOnly if someone really-really needs it and wants to contribute :) But for me it would be ridiculous because Faraday itself is a solution for swappable backends. BTW supporting HTTParty doesn't make any sense because it's just a convenient wrapper around Net::HTTP but its benefits will be hidden from the user.\nNevertheless, making our own swappable backends solution won't become harder after adding a connection pool, it's implementation-agnostic.\n\nwith a connection pool the requests are usually blocking, so you can run out of connections. Obviously, disregarding the negative side effects of resending the same tcp packets in Net::HTTP, that wouldn't happen in the current implementation. Does that mean that this could break an existing implementation if someone naively added a connection pool which is too small?\n\nYes. Rule of thumb is to make a pool size equal to threads count.\n. This breaks our api clients on some ids :sob: \n. @hubert it escapes primary key as you may see in the new added spec.\n. @hubert wait, you mean rewrite all the tests to use request_path ?\n. updated\n. Is it the only place where highlight is not rubyish?\n. Hello! Thank you for your issue.\nIt was unable to reproduce it on CI since Her does not automatically require all the ActiveSupport's quirks.\n\nperhaps define Mutex directly will be the alternative?\n\nHer tries to create mutex directly only if it's necessary. Modern ActiveModel creates this mutex itself so we can reuse it.\nlook at #358 \n. ",
    "toddmazierski": "Hi, @marshall-lee!\n\nCould you provide your benchmark code?\n\nHmm\u2026not exactly sure to which code you're referring.\n- Benchmark is regular old Benchmark from from the standard library\n- User.all in my application corresponds to an endpoint with a large JSON payload (approximately 25 records, and each of them has a nested relation of about 10 records each)\nHope that's useful!\nBy the way, your solution #337 looks to be a superior one! I'm going to close this pull request.\n. Thanks, @marshall-lee! :clap: Great work!\n. ",
    "bitops": "I've played with this and it looks like it won't work - back to the drawing board.\n. @giedriusr sorry, yes, it's not very clear.\nI am working on a Rails application and all my models are Her models. The problem now is that this system is going to be multi-tenant, and each tenant has their own API instance. E.g. for Tenant A we talk to https://some-api-host/ and for Tenant B we talk to https://some-other-api-host/.\nSo my need is to be able to change the url dynamically based on which tenant I'm fetching data for. Is that more clear?\n. @giedriusr Tenant is the user of the system. Said differently:\nruby\nFoo.get(\"/important_data\") # => needs to talk to https://some-api-host/\nFoo.get(\"/important_data\") # => needs to talk to https://some-other-api-host/\n. @giedriusr looking at the docs, it's supporting a different use case than what I have. I need to point to a different API for the same class/model.\n. @remiprev thoughts?\n. Just following up here since it seems like folks are still asking this question. I think if this is a problem that affects you as a developer, you should not be using Her in your application. \nHer is really great if you are trying to get something done in a quick and dirty way and/or if you have a large number of integrations for a mash-up type application.\nHer is not a good fit if you're building out an enterprise backend where a strong and consistent domain model is required. Particularly if the responses you get on different request types have very different shapes. In my own case, the team I was on at the time ended up writing a proper SDK / gem for the API we were using and removing Her. It was a lot of work but we ended up with a well-understood domain model and it was much easier to test things. \nThe thing that forced our hand in the switch is that the API we were coding against had really different response formats on success versus error. Trying to build a consistent domain model to accommodate this with Her was much more trouble than it was really worth.\nNone of this should be construed as a criticism of Her. It's a library that works well and it's a perfect fit for a certain set of use cases. But, if you find yourself on this thread really wishing you had this functionality, you might consider finding a different solution.. I'm going to close out this issue because I don't think it should be a responsibility or design goal of Her to work in this way. . ",
    "tomash": "I'd also be interested in this (similar problem, I'm using it for \"meta-admin\" application that talks to endpoints of all the tenants' apps)\n. ",
    "abhikalakuntla": "This was an experimental solution we created - I'm not too sure this is the best way though.\nIn our use case, we had to switch out the endpoint based on the user that was logged in. User-type A would hit endpoint of \"a-user.com/api\" and user-type B would hit \"b-user.com/api\". The user type was able to be extracted based on user auth token. \nSo in our Her config, we setup a API endpoint configuration for each type of user. So that we can say Model.use_api (User-A-API) or Model.use_api(User-B-API). In that format you can also customize the middlewares you want for each api endpoint. \nThen in our controllers, we have a before_filter that will change the direction of the model based on the user auth token. \nBut you might get race conditions with this solution. The issue is: let's say request 1 (user type a) hits it's api but the request takes 20sec. Then you have request 2 (user type b) hit it's api a little after request 1. If both request 1 and request 2 use the same model, then you might run into issues of timing seeing as to how models are global. However, our house was running this setup under unicorn, which makes a copy of all models for each worker AND, in general, ruby processes it's requests serially. \nIf you want to be super sure and want to correct this (DISCLAIMER: have not done this myself), you can generate a copy of each model per api endpoint and hash it in a global space (yeah, saving to a global accessible space is generally frowned upon but maybe okay because a model is not supposed to be dynamic). Then when a request comes in you assign the local model variable to the desired one you stored in the hash. \n. bump\n. @edtjones hi, any update? :) \n. bump. Thank you :). ",
    "wmulligan87": "Hi, I just wanted to resurrect this issue as I'm looking to use the Her gem for a customer portal app I'm building, but I have a scenario where each request, depending on the current_user logged in user, will be accessing a different url to fetch the json data.\nThe app is multi-tenanted, where there are a bunch of Users which belong to Companies (Company has_many Users), and those companies have their own API for fetching data to show the user. In fact it's probably quite similar to what @tomash described.\nUser log in, and want to see an index of (for example...) 'Products' from '/api/products.json'.\nFor example user X belongs to company 1, user Y belongs to company 2.\nSo, User X logs in and gets an index of products, fetched from 'http://company1.com/api/products.json'\nUser Y then goes to the same index, but the products are fetched from 'http://company2.com/api/products.json'\nThe app has to handle a large quantity of companies, these aren't constants, so I can't hardcode different API's in the initializers as mentioned in the docs.\nSo basically, I need to be able to change the URL per-request. I can't see a documented solution for something like this in Her. I was originally looking at ActiveResource - which can change site's per request via modifying a class variable per request (obviously not ideal, but it worked in testing) - but it hasn't been maintained for a long time so seriously want to avoid that...\nAny thoughts? Could I achieve this with Her?\n. ",
    "linkyndy": "Thank you! :+1: \n. This is the approach I've followed, but would still like to see a better, \"official\" way to do it. I believe it would be useful for many!\n. ",
    "aahmad": ":100: - follows spec\n. ",
    "mhgoldman": "OK, this seems to mostly work for me. I had to add very similar code to the Relation and HasManyAssociation classes, which definitely needs to be DRYed up and better tested. \nhttps://gist.github.com/mhgoldman/a6654612b69d17204da9\nHere's how I'm using this:\n- I required these files before my Her setup.\n- I added use_collection_finders (a method I defined in class_methods.rb) at the top of the affected models, right below include Her::Model. That makes it work for calling finders directly on models (i.e. Thing.find).\n- I added the parameter use_collection_finders: true to the affected has_many relationships. that takes care of calling finders on has_many associations.\nNow things like this seem to work:\nThing.find(534113)\ninstance_of_class_that_has_many_things.things.find(534113)\nThing.where(id:\"534113\",project_id:\"37878\").fetch\nLet me know if this is of any use and I'd be glad to spend some more time cleaning it up and testing it.\n. ",
    "y00rb": "@remiprev  Could you checkout it? if it is merge, I can used new version in my project\n. ",
    "zbelzer": "Had a look at that branch, @hubert, like some of the things I'm seeing there. +1\n. ",
    "sambao21": "Just wanted to ask to make sure but has a maintainer being identified and responsibilities handed off?\n. ",
    "bessey": "I'd like to raise this again, its been 6 months since the last commit was merged, open pull requests are piled up, as are issues. @hubert hasn't been active anywhere on GH in months. Her is a terrific gem, easily the best in the space that I've come across. Would be a shame to watch it stagnate.\n. Sounds good, thanks for picking up the baton.\nOn Fri, 30 Sep 2016 at 10:20 Giedrius Rimkus notifications@github.com\nwrote:\n\nawesome \ud83d\udc4d\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/remiprev/her/issues/324#issuecomment-250699065, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AArOaB-sRZcTJYyN3BLTK_SwBorW4wlaks5qvNRHgaJpZM4DtkbK\n.\n. See #324, (no).\n. \n",
    "losco": "Can be nice to have https://github.com/remiprev/her/pull/399 merged.\nAnyone?\n. ",
    "jeromegn": "Actually, it looks like that's what Rails does. My PR would make Her not compliant with Rails.\nInitially, I created this because if our API returned an error status, there would be no way of knowing that it failed (expect that there wouldn't be an id on the element)\nClosing!\n. ",
    "tustar": "@giedriusr Try this.\n```\ncustom_get :custom_action \nkey-value\nUser.custom_action(id: xxx) \njson\nUser.custom_action({id: xxx})\n```\n. ",
    "ksarunas": ":+1: \n. ",
    "crv": "Can someone please review this and if found okay, please merge. We love her and want to use new version in our app. @remiprev @pencil \n. Hi @hubert ,\nI have created new pull https://github.com/remiprev/her/pull/377 which has latest from master and a new spec as you suggested. Please review and merge if it looks proper.\n. ",
    "ff-cviradiya": "@remiprev @pencil \nAny review comments, suggestions ? Please share if any. \n. ",
    "ff-rboutotte": "Con someone accept this pull request? Or explain why you can't accept the pull request? We have same issue and this has existed for quite some time, and patch provided that works.\n. ",
    "fractaledmind": "This initially appears to be the same sort of issue as mine in #380. Though it might be related to the formatting of the response. A stack trace would clarify the problem.\n. @hubert That does fix my problem, but I'm not certain it's the best general fix. What is the point of parse_root_in_json true if it doesn't actually parse the root key without that format specified? Would it not be possible to add another else path to the extract_array function for the situation where parse_root_in_json is true, but no format is specified? If the request_data[:data][pluralized_parsed_root_element] fails, raise an exception that suggests manually specifying the root key.\nIf this seems acceptable, I can put in a PR.\n. I may just put in a PR with this suggested fix.\n. ",
    "antonrd": "Reopening this as custom paths don't seem to handle 404s well after all. Even when 404 is returned Her prepares a model object but it has not attributes. I would expect it to return nil.\n. ",
    "jonathanpa": "I notice the same thing, I would expect that Her returns nil in case of 40X HTTP codes returns.\n. ",
    "dasmoose": "I agree with ak47, sometimes you want to make decisions based on the status code. Like a 401 vs 422 vs 204.\nI am working on something right now where on a DELETE of a resource I get a 204 for a successful delete and a 422 for a unsuccessful delete. Now, I have no way of knowing whether or not the call was successful or not on the client side. \nLike ak47 said just having a hash of the details would relieve a lot of troubles I have with her. \n. ",
    "alvinschur": "@wil-r, @hubert I am interested in Her raising an error for unauthorized errors.  Or somehow make that case visible.\nIs anyone working on related behaviour?\nIf not I could help out with some guidance.\n. Thank you for the detailed answer and example.\nI am writing several libraries to access internal microservices.\nI see a few options for including the error handling code\n1) duplicate the error handling code in each library created to access a microservice\n2) fork her and write the error handling code once\n3) contribute to her so others can benefit from the error handling code\nIs it ok to include a middleware as described to handle the unauthorized error in her?\nThis error handling sounds quite similar to handling 404 and other errors.\nIs it feasible to have one middleware handle a list of errors?\nOr do people prefer separate middleware, one per error: unauthorized, not found, server error, etc?\n. 4) a separate project similar to Faraday middleware for the extra middlewares we use\n. ",
    "hmatsuda": "@alvinschur Here's my solution.\n1 Create faraday middleware to parse JSON data\n```\nmodule ApiResponseHandler\n  class UnauthorizedError < StandardError; end\nclass CustomerParser < ::Faraday::Response::Middleware\n    def call(request_env)\n      @app.call(request_env).on_complete do |response_env|\n        json = MultiJson.load(response_env[:body], symbolize_keys: true)\n    case response_env[:status]\n    when 200\n      response_env[:body] = {\n        data: json,\n        errors: [],\n        metadata: {}\n      }\n    when 401\n      raise ApiResponseHandler::UnauthorizedError\n    end\n  end\nend\n\nend\nend\n```\n2 Load custom parser instead of default one\n```\nconfig/initializers/her.rb\nHer::API.setup url: \"https://api.example.com\" do |c|\n  c.use ApiResponseHandler::CustomParser\nend\n```\n3 When REST api returns 401 as http status, it raises ApiResponseHandler::UnauthorizedError\n```\n[1] pry(main)> User.find(1)\nraise FaradayApiResponseParser::UnauthorizedError\n```\nI hope this helps you.\n. I don't know best practice how about her's error handling but I'm handling 40x and 50x errors in one middleware(extract gem) like above example code.\nIf you have serval client application to use same REST API, I think your 4) solution is better.\n. @hubert Thanks for reviewing. I added to test both class are same or not into == method and change it's spec.\n. @hubert I added a spec. Can you review it?\n. ",
    "gdeoliveira": "I've modified an existing test that will fail with the original implementation but will pass with the modification (under 2.0.0-p645). Please bear in mind that with both the old and new implementation tests will fail under the latest Ruby version (2.2.2) with the following:\nNoMethodError:\n  private method `__method__' called for ...\nThis can be fixed by changing public_send to send in the line I modified, but perhaps you'd like to modify Her::Model::Attributes#method_missing instead.\n. This has already been fixed at master.\n. ",
    "faisalmansoor": "Searching a set can take O(1) to O(lg n) time, depending upon how its implemented, not sure how its implemented in ruby. method_defined is implemented using a binary search which takes O(lg n), but, since it does not build a separate data structure it might run faster in practice.\nBoth solutions should work a lot faster than what we have right now, so, we can choose whichever has better benchmark.  \n```\nstatic VALUE\nrb_mod_method_defined(VALUE mod, VALUE mid)\n{\n    if (!rb_method_boundp(mod, rb_to_id(mid), 1)) {\n        return Qfalse;\n    }\n    return Qtrue;\n}\n```\n. #337 is a simpler solution and does not require the overhead of creating a Set, so we should use that.\n. @marshall-lee thanks for the details, very informative, thanks. \nFaisal\n. @marshall-lee can you explain your benchmark a little bit more, how many objects did you test with and how many attributes each object had? array include is implemented using a linear search, I don't think just memorizing the array will solve the problem, even with memorization we will end up with a quadratic runtime for this function. I think we should use a set or method_defined function, they both will result in at max O(n lg n) runtime for this function.\n```\nVALUE\nrb_ary_includes(VALUE ary, VALUE item)\n{\n    long i;\nfor (i=0; i<RARRAY_LEN(ary); i++) {\n    if (rb_equal(RARRAY_PTR(ary)[i], item)) {\n        return Qtrue;\n    }\n}\nreturn Qfalse;\n\n}\n```\n. ",
    "emilebosch": "My .2c.\n- I suggest methods with a bang (!) should raise when validation fails\n- Invalid models shouldn't post but return false.\n. ",
    "aderyabin": "//cc @hubert \n. ",
    "valo": "Done\n. #266 seems to fix a problem with has_many relations and parsing included data, like user: { comments: [...] } I merged the specs from #266 into my branch and there are failing specs for the included data case and there is a failing spec when using user.comments.find.\nMy PR is fixing only the belongs_to case.\n. ",
    "Fivell": ":+1: \n. ",
    "senid231": "+1 \nvery good idea\n. ",
    "mpeteuil": "Sounds good, thanks @hubert \n. ",
    "alexchumak": "Seems to be working now! I was at master with the initial json api implementation and was getting that error. One of the consequent commits must've fixed it!\nThanks!\n. Actually, my bad @hubert, i was still running a cached copy of master that had my modification.\nFrom the JSON API spec:\n\nPrimary data MUST be either:\n- a single resource object, a single resource identifier object, or null, for requests that target single resources\n- an array of resource objects, an array of resource identifier objects, or an empty array ([]), for requests that target resource collections\n\nThe code in model/parse.rb assumes that there's a pluralized root node inside of data which doesnt seem to agree with the spec.\nruby\ndef extract_array(request_data)\n  if active_model_serializers_format? || json_api_format?\n    request_data[:data][pluralized_parsed_root_element]\n  else\n    request_data[:data]\n  end\nend\nFor it to work, it should be returning only the request_data[:data] bit. Or am I misunderstanding something?\n. One of your recent commits fixed this issue. I'm able to use the master branch without any modifications now.\nProbably this line:\nhttps://github.com/remiprev/her/commit/8a5b80da597614160e9404c16ecb4a2d28923cf7#diff-9f46c6432f36a5642681207c26cf15f8R172\n. That's great news @hubert! I even forked it myself and was about start mucking around with it, but glad i asked first!\nLooking forward to taking advantage of this functionality. Do you have any sense as to when this might get merged into master?\n. ",
    "scottraio": "+1\n. ",
    "RaVbaker": "Yes, it's broken. dup is also doing it wrong. \n$ irb\n2.0.0-p645 :001 > require 'her'\n => true\n2.0.0-p645 :002 > class HerModel; include Her::Model;  end\n => HerModel\n2.0.0-p645 :003 > i1 = HerModel.new(foo: 42)\n => #<HerModel(her_models) foo=42>\n2.0.0-p645 :004 > i2 = i1.dup\n => #<HerModel(her_models) foo=42>\n2.0.0-p645 :005 > i2.foo = 7\n => 7\n2.0.0-p645 :006 > i2\n => #<HerModel(her_models) foo=7>\n2.0.0-p645 :007 > i1\n => #<HerModel(her_models) foo=7>\n2.0.0-p645 :008 > i1.object_id\n => 70109072228660\n2.0.0-p645 :009 > i2.object_id\n => 70109072277660\n. As you see changing attribute of one of cloned objects also changes it for the other one. \n. ",
    "bronson": "You don't want clone: http://api.rubyonrails.org/v4.0.8/classes/ActiveRecord/Core.html#method-i-clone\nUsing dup works as you're describing in AR.  Maybe Her should supply its own dup implementation?  Like AR.  Sounds like a good opportunity for a PR.\nHere's more info: https://yacodeblog.wordpress.com/2012/08/08/adventures-in-cloning-activerecord-instances/\n. Yup, it's time!\n. Have you looked at the network traffic?  It sounds like you're running into an n+1 issue, round-tripping to the server for each record.\n. ",
    "luislavena": "@marshall-lee thank you for your promptly response. Indeed #358 corrects this issue when loading it under a real Rails app.\nLooking forward this gets merged :smile: \nThank you :heart: :heart: :heart: \n. ",
    "rjayroach": "@hubert First, thanks for taking up as maintainer of Her. much appreciated!\nI've been using this branch for some testing with some internal micro services we're building. There are a few features that I want to add to JSON API support including populating an errors hash when the API returns errors, e.g. name cannot be blank. Wondering if you plan on merging this PR in and if you need help what I can do to move it forward?\n. ",
    "vaihtovirta": "@hubert Do you have any plans to finish this?\nLet me know what's still missing and maybe I can help.. ",
    "chadwtaylor": "Upgraded to 0.7.6 and keeping it at rails 4.2.1 and ruby 2.2.1 still threw the same error:\n.../config/initializers/her.rb:18:in `block in <top (required)>': uninitialized constant Her::Middleware::JsonApiParser (NameError)\n    from /Users/chadwtaylor/.gem/ruby/2.2.2/gems/her-0.7.6/lib/her/api.rb:78:in `block in setup'\n    from /Users/chadwtaylor/.gem/ruby/2.2.2/gems/faraday-0.9.1/lib/faraday/connection.rb:91:in `initialize'\n    from /Users/chadwtaylor/.gem/ruby/2.2.2/gems/faraday-0.9.1/lib/faraday.rb:70:in `new'\n    from /Users/chadwtaylor/.gem/ruby/2.2.2/gems/faraday-0.9.1/lib/faraday.rb:70:in `new'\n    from /Users/chadwtaylor/.gem/ruby/2.2.2/gems/her-0.7.6/lib/her/api.rb:77:in `setup'\n    from /Users/chadwtaylor/.gem/ruby/2.2.2/gems/her-0.7.6/lib/her/api.rb:29:in `initialize'\n    from /Users/chadwtaylor/.gem/ruby/2.2.2/gems/her-0.7.6/lib/her/api.rb:13:in `new'\n    from /Users/chadwtaylor/.gem/ruby/2.2.2/gems/her-0.7.6/lib/her/api.rb:13:in `setup'\n    from /.../config/initializers/her.rb:1:in `<top (required)>'\n. ```\nHer::API.setup url: \"http://localhost:3001\" do |c|\n# Request (JSON API)\n  c.use FaradayMiddleware::EncodeJson\n# Response\n  c.use Her::Middleware::JsonApiParser\n# Adapter\n  c.use Faraday::Adapter::NetHttp\nend\n``\n.gem 'her', :git => 'git://github.com/remiprev/her.git'` worked, thanks!\nI really appreciate your prompt response to this issue.\n. ",
    "adamgotterer": "Having the same issue and was curious when you expected to cut 0.7.7? Thanks!\n. I have the same question. Did you find a solution?\n. Likely to raise an exception or return an object that has the errors\n. ",
    "Holyoke": "I'm having problems with this too. Since validations occur mainly on creating/updating to the database, I'm having trouble thinking about how to capture 404's when Her puts a GET request to a resource that doesn't exist. The code I work with sends back a 404 status, but I don't think Her is capturing that. \n. ",
    "pmackay": "OK have dug into the tests and realised it can be done with \nhas_many :recent_comments, class_name: \"Comment\"\nWould be great to add a quick note to the docs showing this.\n. Have created a PR.\n. @hubert does the PR look ok to merge or any feedback?\n. ",
    "softmonkeyjapan": "Thanks, it does works :)\n. ",
    "tcollier": "@hubert It appears you're the maintainer of this gem. I will be building clients for some microservices at work soon and lack of JSON serialization is blocking me from using this gem. Thanks in advance!\n. Hi Hubert, thanks for responding to my PR.\nIncluding ActiveModel::Serializers in a Her model will work for serializing individual models\n``` ruby\nclass User\n  include Her::Model\n  include ActiveModel::Serializers::JSON\nend\nuser = User.find(1)\np user.to_json\n{\"id\":1,\"email\":\"bob@example.com\"}\n```\nHowever, it fails when working with relations\n``` ruby\nusers = User.all\np users.to_json\n\"#\"\n```\nLet me know if I misunderstood your suggestion.\n. @hubert (bump)\n. @hubert That's a workable solution for me. I'll close this PR, thanks!\n. ",
    "Benabik": "include_root_in_json affects the serialization of each object, so the controller does something akin to:\nruby\ndef index\n   render json: Fruit.all\nend\nAnd the result is: [{\"apple\": {\"id\": 1}}, {\"orange\": {\"id\": 2}}]\nI'm trying to simplify significantly from an internal API.  I can try to make a simple Rails app that demonstrates this come Monday.\n. ",
    "mikenichols": "I ran into this same problem and I struggled with it for a while. I was eventually able to get it working by explicitly specifying: parse_root_in_json true, format: :active_model_serializers. I like @smargh 's idea, it should try something sane.\n. ",
    "glappen": "I think I'm running into this also when I try to use \"validates_on_numericality_of\":\nFailure/Error: should validate_presence_of(f)\n     ArgumentError:\n       wrong number of arguments (2 for 1)\n     # /gems/2.2.0/gems/her-0.8.1/lib/her/model/attributes.rb:173:in `attribute?'\n     # /gems/2.2.0/gems/activemodel-4.2.1/lib/active_model/attribute_methods.rb:385:in `attribute_changed_in_place?'\n     # /gems/2.2.0/gems/activemodel-4.2.1/lib/active_model/validations/numericality.rb:98:in `record_attribute_changed_in_place?'\n     # /gems/2.2.0/gems/activemodel-4.2.1/lib/active_model/validations/numericality.rb:26:in `validate_each'\n     # /gems/2.2.0/gems/activemodel-4.2.1/lib/active_model/validator.rb:151:in `block in validate'\n     # /gems/2.2.0/gems/activemodel-4.2.1/lib/active_model/validator.rb:148:in `each'\n     # /gems/2.2.0/gems/activemodel-4.2.1/lib/active_model/validator.rb:148:in `validate'\n     # /gems/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:455:in `public_send'\n     # /gems/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:455:in `block in make_lambda'\n     # /gems/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:192:in `call'\n     # /gems/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:192:in `block in simple'\n     # /gems/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:504:in `call'\n     # /gems/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:504:in `block in call'\n     # /gems/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:504:in `each'\n     # /gems/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:504:in `call'\nIf someone can give me a little direction, I'd be happy to help fix this as we need it to be working for our project ASAP.  Thanks!\n. I actually fixed it in Her and I have a pull request pending approval.\n. Yeah, I should have included this before.  My pull request is here:  https://github.com/remiprev/her/pull/383\n. I would be willing to take a stab at it.  Can you elaborate a bit more\nabout what you have in mind, and what would be involved in becoming\nActiveModel compliant?  Thanks!\nOn Nov 6, 2015 9:44 PM, \"hubert huang\" notifications@github.com wrote:\n\nhi @glappen https://github.com/glappen first off, thanks for the\ncontribution. i've been on the road for a bit so haven't had much time to\nreview PRs. apologies for the slow reply\nafter looking at your PR and @kritik https://github.com/kritik\nsuggestion, i fear that a solution of this nature might just paper over the\nroot cause -- that Her::Model is not compliant with ActiveModel. would you\nwant to take a stab at a solution using that approach?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/remiprev/her/issues/382#issuecomment-154603514.\n. @hubert - Following up as I haven't heard anything (maybe because I forgot to mention you in my response).  Are you suggesting @kritik 1st of 2nd option?  monkey patch number validation or implement ActiveRecord::AttributeSet?  Can you explain how implementing ActiveRecord::AttributeSet solves the problem here?  Thanks!\n. For our information, what is the current status of the project?  Is it being maintained?  Can we expect pull requests to be merged at some point?  Thanks!\n. \n",
    "brylor": "I seem to be having the same problem\nWhen I check tcpdump, there isn't anything sent for the where query.\n```\n[21] pry(SuperBot)> Cluster.find(2)\n=> #\"online\"} configuration_variables={} str=\"cluster: sslco01 (G200)\" tags=[] service_env={\"id\"=>1, \"service\"=>\"test-service\", \"environment\"=>\"test-environment\", \"url\"=>\"http://134.6.27.164:880/api/services-environments/1/\", \"service_uid\"=>nil} licences=[] configuration_path=nil base_objects=[] masters=[] created=\"2016-07-28T00:30:19.597119\" modified=\"2016-07-28T23:07:36.416596\" remarks=\"\" name=\"sslco01\" hostname=nil status=\"in use\" type={\"id\"=>1, \"url\"=>\"http://134.6.27.164:880/api/cluster-types/1/\", \"name\"=>\"G200\", \"show_master_summary\"=>false} id=2>\n[22] pry(SuperBot)> Cluster.where\n=> #\n```\nstinks this project is dying, its very much needed :(\n. I edited:\n/usr/local/opt/rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/her-0.8.1/lib/her/api.rb\nline 96           request.url path.concat(\"/\"), opts\n. Figured it out... using the totally wrong class:\n```\nc.use Faraday::Request::Authorization, 'Token', \"9234bca04b2b9aaceab919770528af13a92447ff\"\n```\nworks fine\n. ",
    "alex-bezek": "What was the resolution for this? I am having the same issue\n. ok, I ended up resolving this for my situation. I have a kind of theory as to why it was behaving this way, but i'm not 100% sure. \nmy route: /organizations/:organization_id/user\nits important to note that while experiencing this error, my api did not return the organization_id (adding this to the api response fixed it)\nUser class has_many settings.\nI noticed when getting my results from her, if I specified one of the has_many objects after I got my result, it would also have this backwards link to the whole object\nresult = HerClient::User.where(organization_id: 'test').all\nresult.first.settings.first\n would not only show the data for the setting, but also include a link to the whole user object. I think when the response didn't include the organization_id, it would try to get this user parent object, not have the organization id, and freak out. Adding organization_id allowed it to figure out that the parent object User had a list of settings, but these are the same settings it just queried for and to stop the recursive process.\nIf anyone has another idea, I would be curious. If someone wants, I can make a gist or small project they could test against. \nThanks\n. ",
    "conx2share": "This line: https://github.com/remiprev/her/blob/master/lib/her/model/parse.rb#L61 should read as:\nruby\nnext hash if params.empty?\n. ",
    "zoltankiss": "@DocX can you please let me know if this is still an issue? I tried running your test case against latest master and it was green. @edtjones rebased. here is what I have so far, take a look https://github.com/remiprev/her/pull/492\nIt works well against 5.2, 5.1, 5.0, 4.2, 3.2. I've waited this long to open the PR since there's still some stuff I'm undecided about and may want to rework before the final version.. yup!. \ud83c\udf89!. @zacharywelch https://github.com/remiprev/her/pull/497. ",
    "DocX": "@zoltankiss Hi. Sadly I don't work with her gem anymore, so I can't confirm. If you say the test is green, then it is probably been fixed elsewhere \ud83d\udc4d It may still make sense to add the test to the master - looking quickly the destroy_existing method is still not being covered?. ",
    "iMacTia": "```ruby\nconfig/initializers/her.rb\nHer::Model.class_eval do\n  def as_json(options = nil)\n  attributes.as_json(options)\n  end\nend\n```\n```ruby\ncontrollers - no change here in theory\naffiliate = Affiliate.find(9991104)\nrender json: affiliate\n```\n. ",
    "singjsong": "Was looking through the issues, and while I don't have your exact problem, I know what would solve this. You do indeed need a custom parser.\nIn her.rb, in the Her::API.setup block you would add something e.g.\nruby\n...\nc.use MyCustomParser\n...\nAnd then in my_custom_parser.rb:\n``` ruby\nclass MyCustomParser < Faraday::Response::Middleware\n  def on_complete(env)\n    json = env[:body].is_a?(Hash) ? env[:body] : MultiJson.load(env[:body], symbolize_keys: true)\n# assuming your response body looks like \"[{id:1, name:\"Bear\"}]\"\nunrooted_resource = json.first\n\nend\nend\n```\nNot exact, but that's the gist. Let me know if you have other questions.\n. ",
    "Coolnesss": "Hey, thanks for your answer. I already switched to another library for my project so I can't really test this anymore. I guess we can close the issue if that solves the problem :) \n. ",
    "djpate": "+1\n. ",
    "mokus80": "+1\n. ",
    "tokhi": "Even beta3 is out now.\n. ",
    "leighmackay-catapult": "+1\n. ",
    "johan-smits": "+1\n. ",
    "siassaj": "Anyone?\n. Beep boop\n. ",
    "nitishdhar": "No, there is only one initial request that goes and returns the results. The initial request returns the post along with the 'has many' comments, that's how we have built the service also which is returning the posts along with the comments embedded. In the view we have to run a for each for the comments and I am sure it does not make more requests for those comments. The HER results already has the comments.\n. Update - Looks like the result is returned pretty fast i.e.\n@posts = Post.all\n@posts is ready within 1 sec\nIf it output what's in post, instead of the suggested results, its the HER object something like - \np @posts - \n\"{\\\"queryType\\\": \\\"all\\\"}\", :from=>\"0\", :size=>20, :sort=>\"creationDate\", :order=>\"ASC\"}, @_fetch=nil>\nIf I run @posts.each and print each\np post.title -\nthis is when it gets slow and takes like 10 seconds\nDoes this help narrowing down the issue?\n. ",
    "coreyward": "Does Faraday::HttpCache rely on intercepting the request before it's made? It would seem that it should be caching raw HTTP responses before the keys have been symbolized in the first place. scratches head\n. Ah, so after looking at Faraday::HttpCache and the Her docs a little better, I think the issue is that HttpCache is using serialization, and Her is very adamant about the input it receives. The documentation references using FaradayMiddleware::Caching, which doesn't seem to attempt any of this serialization malarky. That might be worth trying instead. \nIf you would prefer to stick with HttpCache, you could probably just write a custom serializer that piggybacks on JSON and has a call to stringify_keys on the load. I would avoid the Hash#with_indifferent_access for the simple reason that you're handing Her an object that it isn't expecting and you could run into a bug with it.\n. I was able to handle this by creating a custom parser that combines the two provided parsers:\n``` ruby\nclass ConditionalParser < Her::Middleware::ParseJSON\n  def parse(body)\n    json = parse_json(body)\n# Toggle between ActiveResource/First Level and JSONAPI formatting\nif json.key?(:data)\n  unpack_json_api json\nelse\n  unpack_first_level json\nend\n\nend\ndef on_complete(env)\n    env[:body] = case env[:status]\n    when 204\n      parse('{}')\n    else\n      parse(env[:body])\n    end\n  end\nprotected\ndef unpack_json_api(json)\n    {\n      :data => json[:data] || {},\n      :errors => json[:errors] || [],\n      :metadata => json[:meta] || {},\n    }\n  end\ndef unpack_first_level(json)\n    errors = json.delete(:errors) || {}\n    metadata = json.delete(:metadata) || {}\n    {\n      :data => json,\n      :errors => errors,\n      :metadata => metadata\n    }\n  end\nend\n```\n. ",
    "ditsara": "I believe that it needs to, so it can add the proper Cache-Control headers if it has previously stored the etag. How would I test? By placing Faraday::HttpCache below NetHttp in the middleware stack?\n. ",
    "ryanswood": "Please merge this in. Gems that depend on Her and that are included in a Rails app are blocking upgrading to Rails 5.\n. ",
    "zkwentz": "If anyone really wants to use this, I've forked and created a new gem: https://rubygems.org/gems/her5\n. ",
    "jkappers": "+1\n. @edtjones Thanks for getting back to me so quickly!\nIt's nothing that I can't work around. I discovered it by doing something similar to: \n```ruby\nclass User\n  include Her::Model\n  has_many :phone_numbers\nvalidate :at_least_one_phone_number\ndef at_least_one_phone_number\n    if self.phone_numbers.count == 0 || self.phone_numbers.none?(&:valid?)\n      # errors.add or whatever.\n    end\n  end\nend\nclass PhoneNumber\n  include Her::Model\n  belongs_to :user\nend\nu = User.new\nu.valid? # NoMethodError: undefined method `count' for #\n```\nMy expectation was something like:\nruby\ndef phone_numbers\n  return @cached_result if @cached_result\n  return Her::Collection.new unless parent.persisted?\n  @klass.get\nend\nI wasn't sure if the behavior I was experiencing was by design or not.. Her doesn't validate when you call save, so validation is essentially always \"skipped\". You have to explicitly call the validate method.\nruby\nmodel.save if model.valid?\nOne solution for this specific case is to override the save method on your model.\n```ruby\nclass User\n  include Her::Model\ndef save(options = nil)\n    super()\n  end\nend\n```. In case anyone else runs into this issue, this is how I'm getting around it.\nExercise caution: blank_relation is a private method.\n```ruby\nAdded to config/initializers/her.rb\nmodule Her\n  module Model\n    class DeepMergeRelation < Relation\n      def where(params = {})\n        return self if params.blank? && !@_fetch.nil?\n        self.clone.tap do |r|\n          r.params = r.params.deep_merge(params) # This is the only difference from Relation.\n          r.clear_fetch_cache!\n        end\n      end\n    end\n  end\nend\n# Override the blank_relation class method in your model so that it returns this new relation.\n class User < ResourceBase\n   def self.blank_relation\n     @blank_relation ||= DeepMergeRelation.new(self)\n   end\n end\n```. No problem!\nI have some code that chains where clauses, but your idea to combine the parameters first wasn't something I had considered. I'm going to see what it would take to update my code to do that instead because it would be a lot cleaner and way easier to test! Nice idea!. ",
    "arturseletskiy": "+1\n. ",
    "etiennebarrie": "I can't seem to be able to pass timeout and open_timeout directly to Her::API#setup with Faraday 0.11.0, this is the backtrace I get:\n~/.gem/ruby/2.3.1/gems/faraday-0.11.0/lib/faraday/options.rb:31:in `block in update': undefined method `timeout=' for #<Faraday::ConnectionOptions:0x007fd289aecf50> (NoMethodError)\nDid you mean?  timeout\n    from ~/.gem/ruby/2.3.1/gems/faraday-0.11.0/lib/faraday/options.rb:20:in `each'\n    from ~/.gem/ruby/2.3.1/gems/faraday-0.11.0/lib/faraday/options.rb:20:in `update'\n    from ~/.gem/ruby/2.3.1/gems/faraday-0.11.0/lib/faraday/options.rb:52:in `merge'\n    from ~/.gem/ruby/2.3.1/gems/faraday-0.11.0/lib/faraday/connection.rb:61:in `initialize'\n    from ~/.gem/ruby/2.3.1/gems/faraday-0.11.0/lib/faraday.rb:67:in `new'\n    from ~/.gem/ruby/2.3.1/gems/faraday-0.11.0/lib/faraday.rb:67:in `new'\n    from ~/.gem/ruby/2.3.1/gems/her-0.8.4/lib/her/api.rb:76:in `setup'\nI was able to fix it by setting the two options inside the block instead of using them as parameters instead, as mentioned in https://github.com/lostisland/faraday/issues/417#issuecomment-223413386:\nruby\ntimeout = options.delete(:timeout) || 5\nopen_timeout = options.delete(:open_timeout) || 1\nHer::API.setup(options) do |connection|\n  connection.options.timeout = timeout\n  conn.options.open_timeout = open_timeout\nend\nso I'm not sure :timeout and :open_timeout should be in FARADAY_OPTIONS.. ",
    "cimtico": "I'm not entirely sure how to build a spec for This scenario. Also it might even be overkill considering it's a bad usage of inject.\nRegarding the each with object, I agree it might be a better solution to the inject in this case.\n. ",
    "maurosbu": "@edtjones The solution you proposed works, but has limitations. When you have a collection of clients and you also need to access the payments, how would you prevent the N+1 queries problem?. ",
    "joshminnie": "\nSee #324, (no).\n\nWho has the best fork then?\n. ",
    "lucasrenan": "\ud83d\udc4d \n. ",
    "lipanski": "@edtjones great news!\nI've just rebased my branch cause there was a merge conflict in one of the tests. would love to see this merged :) (and if you do so, please release a new version as well)\n. @edtjones @ticktricktrack can we :shipit: ?. :balloon: nice! thx.. ",
    "ticktricktrack": "@edtjones @foxpaul I had some fun cleaning up while skyping. Let's get this repo into a sane state again.\n. @edtjones sure, that would be great\n. ",
    "mehmetdavut": "data.attributes includes relationships data from server response, but Her JsonApi parser excludes it from data, so it is not possible to reach these values. i made a change on parser and use on my project, so shared fix with pull request, if it is ok with your jsonapi parser: #418 \nI think my models should reach to relationships data if server response contains it.\n. ",
    "Taoshi": "yes they  extended from \nclass BaseModel\n    include Her::Model \n end\n```\nSeatGroups<BaseModel \nSsr<BaseModel \n```\n. ",
    "pklimenkov": "is there a big fix you need to do, can you provide some info on how to fix this?. ",
    "ianks": "\nDoes your user object have an id?\n\nIt does not. What is the best way to configure this?. ",
    "masonjm": "@edtjones we discovered this when upgrading from 0.7.6 to 0.8. We had a bunch of specs start failing with obscure errors. We eventually tracked it down to a problem with some seed data in our specs.\nIt's possible this fix isn't necessary, but tracking down the source of the error this generates was non-trivial. It also bothered me that the code could fail in an expected way, and nothing was checking for that :).\n. ",
    "nicolas-besnard": "When I specify the class, it doesn't use the collection_path (or resource_path) defined on the associated class.\nAs you can see on the here, the association name is used to find the path. I think changing this will break people code. We should use an options for this.\nWhat do you thing ? Should it be the default behavior ?. ",
    "odyss009": "Thanks for reply.\nIf I'm not wrong, associations method(https://github.com/remiprev/her/blob/master/lib/her/model/associations.rb#L34) can be accessed by another thread when model class has no associations.\nBut, it doesn't cause any problem because it returns always empty hash and it's not mutated.\n```\nclass User include Her::Model\n  use_api API\nend\nthreads = []\nqueue = Queue.new\n200.times do |n|\n  threads << Thread.new do\n      user = User.find(n)\n      queue.push user\n    end\n  end\nend\n```. ",
    "dhenze": "@edtjones I actually did not change the behaviour of the response_errors, instead I do set the @destroyed value of the resource accordingly. My assumption here is: An error occured during the delete request, the resource therefore has not been deleted and the resource should not behave like it has been deleted by returning true for .destroyed?\nTo be honest, I haven't checked for other request types, but most likely similar behaviour may occur for POST (e.g. persisted? returning a truthy value even though creation failed with errors) and PUT requests. But as stated, haven't checked.\nFirst and foremost I would like to clarify this is the way we want to proceed.\nUPDATE: persisted is not affected, it acts on the id value being set or not.. I did update the PR to refer to the response status rather then requiring the errors to be set. I guess this is a much more generic approach.. Hi there, any news on the discussion?. @edtjones None of the others seems to have considered this PR. Should I outline what this PR is about more clearly?. Thanks @edtjones Very much appreciated. And yes, signaling a success without checking the response causes false expectations. That could lead to other transactional actions in a service ending in inconsistencies.. @edtjones Any news on this?. @edtjones Thanks a lot! \nAs for the commit access, as soon as I see something popping up and the need to return, I will get in  contact with you to set something up. Right now it looks like a one-off effort.. Btw. the fix originates of work from @lipanski. \ud83d\ude47 . ",
    "allthesignals": "Hi @edtjones - thanks for the response.  I want to hit the API as if it were a regular 'User.all', but then filter using #where or apply a scope. So, this would create GET '/users', get all the data, and apply a default 'where' scope or filter in memory as if it were some array of hashes. Right now 'where' generates the request 'users?column=value' but since the API doesn't filter at all, it returns the whole unfiltered collection. \n(Also, thanks for picking up this project, it's fantastic). @edtjones, thank you for the thoughtful response - I think my issue had more to do with developer ergonomics - I can work around this, but when \"#where\" doesn't actually filter anything (silently failing), it can present some gotchas to other developers. Not really a huge deal. \nThis helps quite a lot, thank you - basically, you're recreating in-memory filters which allows params to be used by the client. . ",
    "kvokka": "Thank you for so quick response.\ngem https://github.com/plataformatec/faraday-http-cache is great, but it targets to client-side optimizing, rather this middleware is targeting to back-end.\nThis chink was made to prevent heavy response generation on other side, in favor checking updated_at field only, so, 200-500ms sub-requests transformed to 2-5ms.\nTravis is green now :)\nI've fix syntax to the most common style for Ruby 1.9.3 support. Strange to see 1.9.3 in 2017. In Caching part of the README shown way, how to implement caching, but, if on other side object will be changed there is no way to get this information. Only expire_in cache, so you will do lots of unneeded expiration's or use stale data. With this middleware there is the way on other side of back-end microservice to know, since what moment the object is fresh.\nOf course it is not perfect solution, but it is much more livable, than that, which is included in README.\nIf you like the code, I can do README update also (or you may take comments from the middleware). ",
    "pablocrivella": "I have some endpoints that only return id and type, and according to JSON API spec attributes is not a required field.. Hey @edtjones any update about this? :). ",
    "nikushi": "Any feedback?. @zacharywelch Thank you!. ",
    "mkarganov": "Hi edtjones, thank you for fast response.\nYes, you are right, maybe missing id for profile-data/:id is the cause, unfortunately I am not the guy who designs API, just consuming it. And the endpoint just looks like /users/:user_id/profile-data (without any id for it). \nSo most likely I have to use custom_get to get the data. Or there are other ways?\nP.S. I am logging all requests and while trying with this one I do not see any logs.. Great, thnx!. ",
    "vinc": "Thanks for this PR! Do you think you can also merge #367?\nI started using Her last week and I was just looking for a way to reload assotiations in my test suit.. Oups, some tests are failing with older versions of ruby, I'll rewrite the code to avoid using Hash#transform_keys.. @edtjones by keeping but deprecating :underscore, do you mean keeping the current behaviour of not transforming the attribute keys but making it deprecated? I think the current behaviour should stay the default, it's the least surprising, and the transformations should be done only if key_transform :dash is explicitely added to the model. I coded it that way in this PR, the transformation is opt-in.\n@zacharywelch I can indeed see this code as a separate middleware, it'd keep the main code lean, especially if I add all the transformations and make it recursive for nested attributes! But would it be possible to use the same middleware for doing the inverse operation when we serialize the data to be transmitted to the API?. Hi @edtjones and @zacharywelch, thanks for your suggestions! I'll look into writting a middleware to handle this.. ",
    "myxrome": "I've created my own ORM Adapter for Her ORM orm_adapter-her and it's worked for me. Now I can use Devise based on Her ORM.. ",
    "raisin": "This pull request was rebased against the current master branch on June 20th, 2017. Afterwards, the specs were run to ensure they still pass, and the code was checked to see if the problem still exists without the changes made to lib/her/model/parse.rb. The following three specs, which were added, still won't pass without the minor changes that were made:\nspec/model/associations_spec:306\nspec/model/associations_spec:312\nspec/model/associations_spec:419\nThanks. @zacharywelch Thanks for looking at my PR! I'm looking forward to getting this merged. Also, I want to thank you for all the work you've done maintaining this gem. :). Thanks for looking at the PR, making modifications, and merging. Your\nchanges made the code more elegant.\nOn Sat, Jun 24, 2017 at 11:42 AM, zacharywelch notifications@github.com\nwrote:\n\nmerged in a29c883\nhttps://github.com/remiprev/her/commit/a29c883f2ed875908825e06b4f714f79d0116e41.\nMade a few small adjustments to try and take advantage of the associations\narray. Thanks again for your help \ud83d\ude3a\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/remiprev/her/pull/447#issuecomment-310858271, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB6oXbrXw63xgMQB_KDiJOzmKBaXOu7wks5sHViigaJpZM4Nww99\n.\n. Sure. I modified the code to iterate over association_names.. I added a has_one spec.. \n",
    "stereobooster": "can you please merger this one https://github.com/remiprev/her/pull/449 before release. Thanks. Test didn't fail for Travis, but failed for local env because Gemfiles used by two envs are different. We can change Gemfile to:\nruby\neval_gemfile(File.join(File.dirname(__FILE__), \"gemfiles/Gemfile.activemodel-4.2\"))\nThis way we will make sure that it is at least someway intersect.. this test shows error - without fix it will fail. Here is failing test case https://travis-ci.org/remiprev/her/jobs/241677947. Sorry, still haven't tested it. But found another connected bug: Net::HTTP retries idempotent requests once after a timeout, but its not configurable. So if we will fix this bug, and I will pass timeout, Net::HTTP will do two requests in case of Timeout. Nice.\n. ",
    "gotmayonase": "Commits squashed.. @edtjones Happy to help! \ud83d\ude04 . Also thanks for that amazingly fast response time @zacharywelch! . @zacharywelch My pleasure \ud83d\ude04 . ",
    "att14": "No, this should not ignore keys. This function is used when determining if the object is nested. E.g.\njson\n{\n  \"rate\": {\n    \"rate\": \"$1.23\"\n  }\n}\nVs\njson\n{\n  \"rate\": \"$1.23\"\n}\nCurrently in the later case this function believes the object is nested because the root_element does exist but it is not an object. The code I've added just checks that it is an object or list of objects.\nThis isn't a perfect change and I would suggest that long term this become explicitly defined by the user like the other class methods mixed in by Parse.. ",
    "armandolew": "Hi Ed, thanks for the quick reply. No, there's no 'attributes' attribute. What I can see is that Her parses a batch of json strings but then crashes. I'm not sure if this issue might be related to an absent attribute or a memory issue.. ",
    "arielkirkwood": "@edtjones Appreciate it! I'm a new user of this gem and am excited to use it.. ",
    "blazingkin": "Yeah, I can do that.. Hi @thornfoot!\nHope this didn't break anything in CAR\nThe simplest way to fix the error is to require 'bar'\nThat may not be the easiest thing to remember, so perhaps a better solution is to adopt a code pattern like \nhas_many :bars, class_name: Bar.class.name\nRails should then autoload the Bar class.\nThe best solution would be to change the parameter that Her takes so that it is something that rails will autoload. (e.g. has_many :bars, class: Bar.class). That, however, would require some additional changes to Her internals.. Hi @edtjones @remiprev, any chance someone could look at this. It's a super small change :). ",
    "reifying": "What is the best-practice for avoiding this exception in the first place?. This has_many model is already in an auto-loaded directory. The issue is that sometimes autoloading would load the parent before the dependent class.\nIt also already had require 'bar', but after reading about Rails auto-loading, I wonder if require_dependency is the better directive for this. I like the Bar.class.name approach so I'll probably try that first.\nAs @blazingkin mentioned, this occurs at random. On my end it has been causing the test suite to fail in as much as 2/3 runs. Replacing the has_many eliminated the issue, but it's possible this is impacting others.\n. ",
    "thoho": "Solved this with (instance method)\nself.class.post_raw(\"devices/#{id}/action/#{action}\")\nNot a solution I'm proud of but seems to do the job. Probably the API that should have a better wat to express \"actions\" on resources..... ",
    "samstarling": "@zacharywelch Aha, that makes perfect sense. I'll give that a go! Thanks for the speedy reply. I'm also having problems parsing responses like this:\n{\n  client: {\n    name: Sam,\n    surname: Starling\n  },\n  addresses: [\n    foo: bar\n  ]\n}\nI'm trying to parse this with a standard Her::Model class called Client and using format: :active_model_serializers, but I think I lose access to addresses.. @zacharywelch Sadly I don't have any control over this API, so if there was any other way around this, that would be really useful to know about. I had a dig through the source code, but couldn't see much of a way forward. Thanks in advance for any advice!. @edtjones Oh nice \u2013\u00a0that looks like a good solution. The API I'm working with has a slightly odd format for errors as well, so I think this provides a nice solution for that too. I'll give it a go, thanks!. Hey @edtjones @zacharywelch\u00a0\u2013\u00a0sorry to ping you directly, but I wondered if you had any ideas here?. @edtjones Ah OK\u00a0\u2013 I'll have a play around, and if I find anything then I'll let you know. It'd be cool to add it to the documentation if there's a nice solution. I'll give it some thought, and maybe there's a pull request at the end of it :). I'll close this, given it's a pretty vague question. If I learn or discover anything, I'll be sure to contribute back.. @zacharywelch No need to apologise \u2013\u00a0this is really useful: I realised the main mistake I was making was that my models were not in the models folder, and now _path helper methods and so on work much better\u00a0\u2013\u00a0form_for was having problems there, because everything was in the lib directory, so that's my mistake.\nOne other question \u2013\u00a0I can't seem to get model validations working. For example, I have a model with a simple validates :name, presence: true \u2013\u00a0but when I call User.new().save, it doesn't have anything in it's errors object. Is there something I missed?. Ah, wait \u2013\u00a0this is (again!) my fault, that validations are not run. There is a problem when I call @model.valid? which results in an exception with the following (truncated) stack trace:\n```\nArgumentError in AccountsController#create: wrong number of arguments (given 2, expected 1)\nher (0.10.0) lib/her/model/attributes.rb:142:in attribute?'\nactivemodel (5.1.4) lib/active_model/attribute_methods.rb:384:inattribute_changed_in_place?'\nher (0.10.0) lib/her/model/attributes.rb:50:in method_missing'\nactivemodel (5.1.4) lib/active_model/attribute_methods.rb:429:inmethod_missing'\nactivemodel (5.1.4) lib/active_model/validations/numericality.rb:102:in record_attribute_changed_in_place?'\nactivemodel (5.1.4) lib/active_model/validations/numericality.rb:25:invalidate_each'\nactivemodel (5.1.4) lib/active_model/validator.rb:150:in block in validate'\nactivemodel (5.1.4) lib/active_model/validator.rb:147:ineach'\nactivemodel (5.1.4) lib/active_model/validator.rb:147:in validate'\nactivesupport (5.1.4) lib/active_support/callbacks.rb:413:inblock in make_lambda'\nactivesupport (5.1.4) lib/active_support/callbacks.rb:197:in block (2 levels) in halting'\nactivesupport (5.1.4) lib/active_support/callbacks.rb:601:inblock (2 levels) in default_terminator'\nactivesupport (5.1.4) lib/active_support/callbacks.rb:600:in `catch'\n...\n```\nI don't think there is anything special about my model or my controller, but let me know if you'd like any additional information.\nEdit: Just to be clear, this only happens when I add validates_numericality_of :foo \u2013\u00a0should that be possible?. @zacharywelch Thanks \u2013\u00a0I'll have a read. Is it possible to use store_response_errors with validates? I have some basic \"presence\" validations on my model, but I also want to be able to handle errors from the API in a custom manner.. ",
    "smudge": "Alright, addressed feedback and made sure specs are green. Let me know if you have any questions or additional feedback on my changes to support inheritance. (Good catch on that!) \ud83d\udc4d . Combined. \ud83d\udc4d . There was already a spec for scope inheritance but it didn't cover the chained scope case -- updated that to support both.. This now pulls the blank relation off of the superclass, similar to the way default_scope is inherited.\nThe one API change to Relation was to add a writer for parent so it could be updated from this context.. Bar::User.scoped#respond_to? is set to do a fetch under the hood, which is why this stub was necessary. I gave the model its own collection_path to make sure this stub wouldn't interfere with the other model in this context.. ",
    "mrryanjohnston": "I run into the same issue trying to include Her::JsonApi::Model in a model in that Gem. It seems this is loaded the same way with autoload: https://github.com/remiprev/her/blob/master/lib/her.rb#L17\nWhy are the JsonApi features the only ones that are autoloaded?. I think this just may be a misunderstanding on my part with how requiring dependencies works in gems. I'm going to close this issue for now. Sorry about that!. ",
    "martinstreicher": ":+1: here. . Happy to test a PR when it is ready. We are using JSONAPI. . \nLet me know if there is a commit to point to and we can run our specs. \n\nOn Apr 12, 2018, at 4:39 PM, Ed Jones notifications@github.com wrote:\nLooks excellent @zoltankiss https://github.com/zoltankiss - thanks heaps for your work on it. What\u2019s still undecided in your mind? Is it the underscore variable name for @_attributes? I can\u2019t think of a better name to be honest. Is it ready for @martinstreicher https://github.com/martinstreicher to have a play with?\nThanks again - really great to have your help.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/remiprev/her/issues/487#issuecomment-380937374, or mute the thread https://github.com/notifications/unsubscribe-auth/AAB6V8Lye-rw76H4vDKNGZmJDeDUNQv0ks5tn7uZgaJpZM4SrUk0.\n\n\n. ",
    "ssuttner": "@zacharywelch fixes are done.\nThanks for the review!\nLet me know if you find anything else :). @zacharywelch Travis let me know I need to take care of the old ruby versions. \nI'll take care of that later. Hope this serves as a good starting point.. Here is a set of fixes for rubocop rules that apply to all ruby versions. Some others are pending, waiting for discussion -- mostly because fixes behave differently for each ruby version that's supported.. @zacharywelch this is ready for another round of review\nI took care of all of your comments \ud83d\ude0e . I took it out :). I took it out :). ",
    "eduardofiorezi": "\ud83d\udc4f . ",
    "keithxm23": "Hi @edtjones ,\nI guess that is a fair response. Thanks for looking into this.\nCheers!. ",
    "ikuto0608": "Hi @edtjones \nThere was the situation I didn\u2019t want to use save/save! instead.\nex)\n```\nExternal api model with her\nclass External::User\n  attr_reader :hoge\n  attr_accessor :fuga\nend\nuser = External::User.find(1)\nuser.fuga = 'anything' # :fuga is allowed to change\nfailed\nuser.save # -> failed because it sent a PUT request with all elements including :hoge,\n          # and the external api checks whether the params includes only rewritable params or not,\n          # and if the params has read only item, it's not gonna just ignore but 422 UNPROCESSABLE ENTITY.\n          # So I needed to send only the params which I wanted to modify.\nsuccess\nExternal::User.save_existing(user.id, { fuga: 'anything' })\n```\nThanks!. Thanks @zacharywelch for doing code review, I updated the code!. ",
    "evgeniy-kunitsa": "faced with the same situation, is there any information?. @edtjones, no, in my case I have base class:\n ```ruby\nmodule Api\n  class Organization\n    include Her::Model\ndef suborganizations\n  @suborganizations ||= self[:suborganizations].map { |org| Organization.new(org) }\nend\n\nend\nend\nAnd child class:ruby\nmodule External\n  class Organization < Api::Organization\n  end\nend\nI try to do smth like this:ruby\nApi::Organization.new(suborganizations: [{ uid: 123123 }]).suborganizations\n=> [#]\nExternal::Organization.new(suborganizations: [{ uid: 123123 }]).suborganizations\n=> [{\"uid\"=>123123}]\n```\nWhy in second case I got an array of hashes instead of array of organizations?\nFYI: ruby 2.5.3, rails 5.2.2. ",
    "bubodlack": "I have the same problem . ",
    "seanbjornsson": "Thanks for the fix @zacharywelch !. ",
    "keegangroth": "just to be clear, this was caused by #511 . I update #514 to include a specific test for this. ok I guess that means extracting and generalizing the path building logic from fetch. I'll give it a try when I get a chance. sounds good, I was not seeing a good way to get at the relevant information where the option defaults were being set. Will have a go at updating the docs.. ",
    "j1mmie": "I see this is fixed in #514 - any chance #514 will be merged?. Hoping to see a fix for this as well. Tried to make a PR myself but got lost in the meta-programming \ud83d\ude43 . I see this is fixed in #514. I've commented there to get a status update. ",
    "johnallen3d": "I believe there is an issue here related to associations. By the time the \"request_data\" for an association reaches this point the root has been stripped out. This causes request[:data] to be an array with associated objects not a hash with the root.\nFor example:\n``` ruby\nclass Foo::PhoneNumber\n  include Her::Model\n  parse_root_in_json true, :format => :active_model_serializers\nend\nclass Foo::User\n  include Her::Model\n  parse_root_in_json true, :format => :active_model_serializers\nhas_many :phone_numbers\nend\n```\nAnd we return data in the default format for embedded associations:\njson\n{\n  \"user\": {\n    \"id\": 1, \n    \"fullname\": \"Lindsay F\u00fcnke\",\n    \"phone_numbers\": [\n      { \"id\": 1, \"digits\": \"8675309\" }\n    ]\n  }\n}\nWe'll receive the error: \"no implicit conversion of Symbol into Integer\".\nI would submit a pull request but I'm not sure where the best place to resolve this issue is. I'm not sure if this method is being used to extract arrays that are not associations (ie. a request to /phone_numbers). To make things work locally I patched this method to add a check that we're actually dealing with a hash (something that could have a root element) like this:\nruby\ndef extract_array(request_data)\n  if active_model_serializers_format? && request_data[:data].is_a?(Hash)\n    request_data[:data][pluralized_parsed_root_element]\n  else\n    request_data[:data]\n  end\nend\n. ",
    "lambcr": "Thanks for the taking a look.  Agreed, we should stay in line with ActiveRecord behavior. \n. ",
    "krishantaylor": "Shouldn't this be < 5.1.0 so patches to rails 5 are compatible?\n. ",
    "huangjun604": "Hi @zacharywelch , is there any reason to ignore the string keys like old version?. Thanks for response @zacharywelch . Please help to update it, thanks.. "
}