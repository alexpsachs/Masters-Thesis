{
    "darkyen": "the code can then simply become\njs\n   componentDidMount(){\n     let domNode = React.findDOMnode(this);\n     let ch = componentHandler.upgradeElement(domNode);\n   }\n   componentWillUnmount(){\n      ch.downgradeElement();\n   }\nOther benifits of this approach are \n- DRY\n- Code Stays in sync\nPossible Issues \n- Components with dynamic children components like the Tabs or Layouts but re-implementing them is easier than re-implementing the whole lib. \n. Not really when components are passed you can use the element.widget to update them :) using the api and selectively have it update and reMount on update that can be packed as a mixin or sebmecks higher order classes. Also about modularity that is indeed a. Bummer so far but as of now you need the file anyways and when modularity will come it should be a transparent update for the user ... Btw the credits to this idea goes to winjs team and also at the level of pure css and vanillajs enclosed high performance components the react magic is an overhead over extremely performant hand tweaked js code.\n-----Original Message-----\nFrom: \"Tommy\" notifications@github.com\nSent: \u200e22-\u200e07-\u200e2015 07:48\nTo: \"tleunen/react-mdl\" react-mdl@noreply.github.com\nCc: \"Abhishek Hingnikar\" abhishek@hingnikar.com\nSubject: Re: [react-mdl] Why not use componentHandler instead ? (#1)\nGood point. To be honest, I never thought about their upgradeComponent function...\nSure it will work and as you said, it will simplifies a lot the code and will make sure the code stays in sync. But I don't like the fact the entire JS file will be required to make that work. The current MDL implementation is not really module friendly. Maybe that will change in the future.\nWith your code sample, i'd need to reset (downgrade - upgrade) when the component receive new props as well, at least for the textfield since it'll receive the maxRows at an attribute.\nFor complex components like the layout, it won't be possible though since I'll probably split them in multiple components (Layout, Header, Navigation, Tabs, Drawer).\nAlso, using the original JS code to upgrade the elements makes the code less \"react friendly\" since it creates dom nodes on the fly. I don't think it's a major issue though but still...\nBut I'm open to discussion...\n\u2014\nReply to this email directly or view it on GitHub.\n. @tleunen For layouts I'd say a mix of both, you can listen to events and call React.render on individual props when you wish to dynamically render them out of react context but that will not be justice. I'd say use react to create the html and then call .upgrade.\nHave a look at http://darkyen.github.io/react-ui-components/ \nIt is a hybrid method of doing what you did.\n. I'd love to help :-) , If this gets done I can move basic components out of my ui-components and have only common app ones there. (making react-mdl a dependancy)\n. :D :D thats awesome !\nMuch better than my small implementation :D +1 + 1 \n. js\n       var buttonClasses = classNames('mdl-button mdl-js-button', {\n            'mdl-js-ripple-effect': ripple,\n            'mdl-button--raised': raised,\n            'mdl-button--colored': colored,\n            'mdl-button--primary': primary,\n            'mdl-button--accent': accent,\n            'mdl-button--icon': !!icon\n        }, className);\nI'd like to reduce the recurring code there, wouldn't u (by a mixin or a lil bit of inhertiance maybe) ?\n``` js\n// a lil bit of inheritance won't hurt\nclass MaterialComponent extends React.Component{\n    / alternatively now the component handler can be injected here /\n    getMaterialStateClasses(){\n         let states = this.constructor.MDLStates;\n         let props = this.props;\n         let prefix = 'mdl-' + this.constuctor.MDLClassName;\n         let reduceStateObj = (obj, state) => { \n                obj[prefix + '--' + state] = props[state];\n                return obj;\n         }\n         return states.reduce(reduceStateObj, {});\n    }\n}\nclass Button extends MaterialComponent{\n   render(){\n          let states = this.getMaterialStateClasses();\n          let buttonClasses = classNames('mdl-button', 'mdl-js-button', states); \n   }\n}\nButton.MDLClass =  'button';\nButton.MDLStates = ['raised', 'colored', 'primary', 'accent', 'icon'];\n// with es 7 the static keyword can be used.\n```\n. Awesome.\n. my latest commit just removed all of my custom code for your implementation :dart: the latest build is incredible.\n. Makes sense. \nMDL's tabs are pretty limited, and honestly tabs are hard to implement in a framework agnostic way (I personally have my own version of swipe tabs for android built using their styles)\n. I would like to contribute to this in any way possible.\nSuggestions: \n- Kitchen sink.\n- Maybe multiple codepen with use cases.\n. I see you have started the docs in a branch, can you create a roadmap maybe ?\n. An approach taken by react-winjs uses hooks to inject components inside on callbacks after the initial layout is created by the element, As in they create the WinJS Control and then call React.render on inner divs to update the layout. I guess we can't do that here because this is wrapping the element in the dom tree with another which is not known to react et-al. \nThe solution you submitted seems to be right. Do we have a list of all components which do this ?\n. +1 \n. Hmm i noticed it now, sorry about the false call x)\n. @web2style  do yo run the buildscript after you install ?\n. How about registering a browserify transform ?! So that browserify compiles\nthis from src ? (For gh purposes only)\nOn Aug 28, 2015 8:34 PM, \"Tommy\" notifications@github.com wrote:\n\nReopened #20 https://github.com/tleunen/react-mdl/issues/20.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tleunen/react-mdl/issues/20#event-395158970.\n. \\o/ \n. How about we discuss about it on gitter ? then comment the gist of it here ?\n. @tleunen  ?\n. Sure. I think we can make a simple component(s) like which facilate animation squences for material design, or we can simply just make a microlib that does it and make a seperate repo. \n\nhttps://github.com/lgvalle/Material-Animations \nThe above animation look pretty declarative to me and with react-animate this should be relatively easy to implement.\n. Makes sense. \n. :D, Normally I'd make a PR for this but I am too messed up overloaded. :+1: thanks for fixing it :D\n. React works nice with meteor so this https://github.com/reactjs/react-meteor should be helpful, As mentioned in the project itself React is agnostic of the way you fetch data from the server and meteor can be easily dropped in for that part.\n. @generalleger I think that is the official package that meteor installs when you do meteor add react (since its by react team)\n. even better :D from meteor team +1 \n. @cadesalaberry defaultValue should be used in case of non-controlled components. Although sometime helpful they can go out of sync and usually people prefer having controlled components over non-controlled ones.\n. Here is a proof of concept\nThere is more than just adding the npm cdn ;-)\nyou will also have to add the custom material.js and material.css\nhttp://codepen.io/darkyen/pen/VaxPjg?editors=0010\n. @tleunen it works with @1.4.2 but not the latest.\n. Seems so, did you create an issue on Chrome Issues? [Adding that for all browsers is a little bit aggressive and might trigger fouc on some browsers]\n. Pretty sure its better that they fix it since the issue is chrome only.\n. Cannot reproduce I can scroll just fine, chrome://version ?\n. @tleunen I think it has to do something with complex structures in chrome (could be userland code aswell). It works in firefox and even edge. There were a few warnings thrown by dialog-polyfill.js in chrome though \"can't upgrade : already supported\". I wonder if it had to do something with that. \nAlso by changing the overflowX to change you are forcing the browser to re-layout.\n. That is beyond the scope of this library though as it is a microwrapper.\n. @tleunen (: have you branched off from being just a micro-wrapper approach?\n. I missed the track of mdl development for a while, can you link a changes / upgrade guide to mdl 2 ?\nWill also help new people trying to help :-)\n. Oh everything re-implemented, doesn't that increase headache for managing?\nI am up for the task but I really do not like code duplication, have you tried talking this with the MDL team ? How are they planning v2 ?\n. @tleunen that sounds like a safe bet, I will get started, I propose we make an issue for each thing we are updating in the issues section then you can assign issues :+1:  ?\n. @Download I'd say this library should be 1:1 with mdl master. \nWhy I think microwrapper approach is better is because react does not automatically gain performance, it achieves that by following a diff algorithm. In many cases you can hand optimize things (like github did for atom). Similarly Microsoft is maintaining a microwrapper for WinJS over rewriting the project completely in react.\nI think MDL components are supposed to provide high performance by design. I'd still support re-using the mdl code-base for that very reason. Also I have tried implementing high performance modules in react like UITableView and tried to keep them as per spec it becomes too much code to manage and maintain with time. \n. @Download I have https://github.com/darkyen/react-ui-components/ have a look those components follow react's way of doing things but violate from MDL spec.\n. I'd love to contribute to the development.\nOn Sun, Apr 17, 2016 at 2:44 PM, Stijn de Witt notifications@github.com\nwrote:\n\n@darkyen https://github.com/darkyen Wow that's some cool stuff you got\nthere! I'd like to include some of those if that's ok by you?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/tleunen/react-mdl/pull/258#issuecomment-211078678\n. @Download  it is slightly outdated though (relies on babel5 for isntance the export semantic used in that project are bad). I will republish it shortly, with some improvements.\n. I will start with the switch and tooltip and textfield.\n. @tleunen It should be fine until MDLv2. This is effectively a micro optimization\n. I will take this one.\n. Oh haven't had enough time because of work. You can hop on it, I will take\nother ones :-( sorry!\n\nOn Sun, May 1, 2016 at 12:33 AM, Tommy notifications@github.com wrote:\n\nHey @darkyen https://github.com/darkyen, any update on this one? ;)\nI might jump on it tomorrow, since I'd need it to finish something in the\nnew tests for the Table components.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/tleunen/react-mdl/issues/285#issuecomment-216015563\n. \n",
    "tleunen": "Good point. To be honest, I never thought about their upgradeComponent function...\nSure it will work and as you said, it will simplifies a lot the code and will make sure the code stays in sync. But I don't like the fact the entire JS file will be required to make that work. The current MDL implementation is not really module friendly. Maybe that will change in the future.\nWith your code sample, i'd need to reset (downgrade - upgrade) when the component receive new props as well, at least for the textfield since it'll receive the maxRows at an attribute.\nFor complex components like the layout, it won't be possible though since I'll probably split them in multiple components (Layout, Header, Navigation, Tabs, Drawer).\nAlso, using the original JS code to upgrade the elements makes the code less \"react friendly\" since it creates dom nodes on the fly. I don't think it's a major issue though but still...\nBut I'm open to discussion...\n. Currently, the master js file is not needed.\nI'll investigate this path of including it and make the component just \"container\" calling the upgrade/downgrade function.\nNot sure yet how to do for the Layout/Drawer though. Any idea?\n. I'll make some tests this weekend using the component upgrade feature. I'll create a specific branch for that so you can see what I'm doing\n. ~~Tried something on this branch https://github.com/tleunen/react-mdl/tree/component-upgrade\nWhat do you think?~~\nThe code is now on master.\n. I played a bit with my implementation and it had some issues. I cannot register the MDL components on the fly because the order of registered components inside MDL is important. I cannot register the Ripple Effect because Button (or Switch) for example.\nSo I'm removing that part, and until I find a better way (or MDL fixes this part), the MDL js file will be needed so we have the global componentHandler variable. I'll publish 0.5 with this change.\nAbout inheritance vs helper class, I'll think about it. It won't make sense if it's not used a lot, so I'll wait to see how the other components will be built.\n. I'll close this issue.. \nI refactored a bit some of the current components (should push everything later tonight).\nI'll work on adding the missing components as well before 1.0.\n. Thanks ;)\nThe only missing part is the tabs inside the header. I did something really quick but I'm not happy.\nI'd like from the MDL team a way to use the styles for the tabs without the code (because it's based on a hash on a href elements + panels), but for now it's not possible without writing css myself, which I'd like to avoid.\n. By using it, you already contribute because you might encounter some issues or have new suggestions to improve the library so thanks for that ;)\nAbout the doc, I was thinking of something quite similar to the official doc, (based on this page http://www.getmdl.io/components/index.html) to list the components, show examples with code.\nI'd built it based on react-mdl so at the same time it's a good example.\n. Indeed I started a new branch while it's still in progress. Every day I try to convert the demos into the newly doc website ;)\n. There's aa build step to create everything. I changed ab bit the structure recently and all the docs are now written in markdown. See this https://github.com/tleunen/react-mdl/tree/docs/docs/pages\n. Good point. The new prop is shadow yes. It has been renamed in the v1.\n. It will be deployed on the github page to create the React MDL documentation website. It should be done over the weekend now ;)\n. Here it is, in its first version :) http://tleunen.github.io/react-mdl/\n. Sorry about that, I published 0.9.1 earlier to fix the issue.\nLet me know if you still have the bug once you update\n. Hmm ok, will take a look\n. Just tested your example and it works fine for me with 0.9.1.\nAre you sure it's the version you use?\nCheck the index.js file from the downloaded react-mdl and the one from the repository. They should be the same.\nIn 0.9.1, I changed it so it properly exports Card.\n. Oh I see the error.\nYou should use this syntax:\nimport { Card } from 'react-mdl'\nReact-mdl is a set of multiple components, therefore you have to get the one you need. Otherwise you can do this:\nimport ReactMDL from 'react-mdl`\nvar Card = ReactMDL.Card;\nBut the first example in your initial post should work fine.\n. Exactly :)\n. I submitted a fix in the MDL repo but unfortunately it won't land before v2...\n. I never experienced this error with the textfield component. Only with the layout.\nAnd based on your log, it seems you're also using the layout component. (from react-mdl or not, it doesn't really matter I think). But it's causing some issues that I described here (https://github.com/google/material-design-lite/issues/1356). I submitted a fix but it cannot be merged before the next major version.\nYou can easily get my fix and build new js/css material files. I'm also thinking of providing them inside this repo until a proper fix is done in MDL.\n. If you want to use the Layout component, I suggests you use my custom material.js and material.css files.\nThe demos in this repository use these files for example.\nThis is based on the latest version of MDL (1.0.4 when writing this post).\n. Thanks.\nI just pushed a new version with a similar fix. I went for renaming the import instead of the filename.\nbtw, I think we can change the casing of a file by using git mv instead of making 2 commits ;)\n. Thanks for reporting the issue @iquabius. It should be fixed now. It was something I introduced in the 0.10 :/\n. I didn't build the minified files tho. Will think about it for the next release of MDL ;)\n. Could you also update the paths and clean up the commit log? The merge commit is not needed\n. I manually merged it and added the missing part. Thanks!\n. Thanks @Graf009. I added a few comments.\nI think it's a good idea to put the Navigation as a separate component so the end user can do what he wants inside the header/drawer. \nCould you please read my comments and then merge all your commit into one? (git rebase -i should help you)\n. Thanks so much! Please rebase, fix the indentation and then I'll merge :)\n. Done, thanks!\nThere are a few other things I wanna add to the project before releasing a new version. Hope that's ok\n. Can we have a spacer inside a navigation? Do you have an example?\n. Thanks @Graf009. I manually merged it because I changed a few details from your implementation ;-)\n. Hmm... Do you have a code example?\nBEcause upgradeDom uses upgradeElement internally... So I'm a bit surprised if the error only occurs when using upgradeElement.\nIn the end, it might be related to this other issue https://github.com/tleunen/react-mdl/issues/4. But I'm not sure it was the exact same error. With a code example, I could investigate this.\n. Would need to investigate on this one.\nProbably caused by the way react-modal works.\n. Might be fixed by #48. Please enter a new issue if your problem persists (and which component is problematic if possible)\n. Good idea!\nI'll add it later today in the repo :)\nIn the meantime, you can find my only changes in this file https://github.com/google/material-design-lite/pull/1357/files#diff-e8d273098ad170740ae489c057f29e9d\n. I added the files inside master.\nI'll publish a new version on NPM in the next days with the recent changes\n. You should use the files from the release branch on MDL https://github.com/google/material-design-lite/tree/release\n. With this https://github.com/tleunen/react-mdl/pull/11, we actually removed the injected mdl-navigation__link because we remove the navigation from the header.\nThe code is not yet on NPM though, I want to make sure everything works as expected before pushing it.\nMaybe you could try with the latest version from master and tell us if it fixes your issue in the meantime?\n. Did you tried something like this?\n<Drawer>\n    <Navigation>\n        ....\n    </Navigation>\n</Drawer>\n. Thanks @darkyen!\n. The order doesn't seem to impact the rendering.\nI can see in the CSS that the icon is always aligned on the left.\nYou should create a ticket in the MDL repo to ask the team to create something to inverse the order.\nWhat you could do also is update the position with CSS.\nI'll close this since it's out of scope.\n. No need to create a PR from your master to this master.\nYou can create it directly from your patch-1 branch to this master. This way, only 1 commit will show up (with your package.json update), without your merge commit.\nPlease resubmit the PR and it will be good :)\n. The lib folder is missing your your hierarchy.. That's weird! I'll take a look.\n. Not sure why you end up without the lib folder, but have you tried a clean install?\nOn my side, it seems to work fine.\n\n. Because you're getting the files from github, you actually don't have the compiled files. Therefore, you have to compile the files yourself with npm run compile in the react-mdl directory.\nThe compiled files are only pushed on NPM when a new version is published.\n. Hmm.. Not sure how to fix this thing. Maybe someone has an idea?\nI don't want to put the src folder on npm, but because of that it doesn't seem to get fetched when we install it from a github url.\nI'll reopen, maybe someone can help here.\n. The end user cannot do anything with the source since it needs a compilation step. So I was thinking to remove it from npm, but if it's the only solution to get the src folder when installing from github, I guess I'd remove it from the ignore file\n. perfect! ;-)\n. Not sure about this one... If the component doesn't have any children, it should not go inside the forEach loop.\n. Hmm. Would need to test this one myself. Could be a React issue then, I'm not sure we should be able to loop over a false child. (https://facebook.github.io/react/tips/false-in-jsx.html)\n. I had a crazy weekend so I didn't get the chance to take a look at this.\nWould probably need to put a breackpoint in this traverseAllChildren and see what's going on :)\nhttps://github.com/facebook/react/blob/master/src/shared/utils/traverseAllChildren.js\n. I finally got time to check this one, and I can not reproduce the issue. If the Header doesn't have any children, the children property is undefined and therefore it goes never inside the children.foreach function.\n. Good catch! ;)\nI now understand why it didn't seem to work when I used the phone prop...\n. postinstall will fail because babel is set as devDependencies. And I don't want to put it as a direct dependency of the project.\nBut I agree we can put src/ on npm as well.\nI think that's all we can do. Usually people won't install the project through the github link but with the npm name, so they won't have the issue. For people that get the code from github, they can either fork it and handle it the way they want, or they can also put a postinstall hook in their project to install the dependencies of react-mdl as well.\nRegarding this project, I had a crazy weekend so I could not release a new version but will do asap\n. What are the others properties of the event? Are they useful or could we just send e.target?\n. The value for onChange really depends on the component.. Some will return a single value (string for Textfield, boolean for checkbox) so this one could send whatever he wants... The object or the combo \"id, checked\" could be another solution.\nI don't mind changing it again for \"id, checked\" if you want, but in that case, I would change it as \"checked, id\" so it's not a breaking change (But again, creating a BC now is not a problem since we're still not in 1.0)\n. Is it from the demo? Or your project?\nI forgot to update the demos with the latest version of react-mdl but it seems the navigation is missing.\nThe latest version introduces the Navigation component and you have to explicitely create it now. It's not auto created when you put links in a header.\nSo it should be something like this:\n<Header>\n    <Navigation>\n      {links}\n    </Navigation>\n</Header>\nThe reason why we did this is to allow having something else than Navigation links in the header.\nLet me know if this fixes your issue\n. Thanks :) Sorry for the demos, I'm working on a new website with examples so they will be removed anyways :)\n. What do you mean exactly? Providing an animated gif/video would help I think ;)\n. Yeah I remember seeing this as well, but it's a upstream issue. On the getmdl website, you can also reproduce it.\nThey also said the animation was not right and I think they think about changing it to match what the material design describes.\n. I do have the same issue on my side, I opened an issue about it on the mdl repo a few weeks ago. They closed it because it was linked to another issue mentioning the animation is not correct.\nSee this https://github.com/google/material-design-lite/issues/1335\n. Upstream issue, see https://github.com/google/material-design-lite/issues/954\n. onChange is actually needed, otherwise you can't get the updated value\n. The input is currently a controlled input, so the value displayed is always the value specified. That's why there's a onChange event.\nIf we want to modify that, we would need to make the onChange callback optional and modify the value for defaultValue. But I usually prefer playing with controlled component. I'm open to discussions though.\n. Yep but because we use the value property on the input, if we don't use the onChange callback, React will warn about this ;)\nYou have a point but I don't know how we could allow controlled and uncontrolled form at the same time\n. The label is there so you can click on the whole thing and check the input.\nBut I think we could easily do that if the radio button are inside a radio group.\n. Hmm.. Instead of forcing the use of ul and li. I'll add 2 more props to the component to set the root container and the container for each radio button. What do you think?\nThis way, we can keep use whatever we want... ul and li, dl and dt/dd or just div.\n. Nice hack. This is not optimal because we would get multiple container with the same id \"undefined\" if we put more than 1 tabs component in the page, but I guess we can live with that for now...\nWe should not put any anchor on the tabs so we should be good on that side.\nI'll keep open for now and will test the code asap before merging.\n. Thanks a lot @timkrins, I squashed the commits and manually merged it.\n. Damn, I didn't test the right thing :D Ok I keep this one open and will retest this later :)\n. Fixed with #22 :) Thanks @Graf009 and sorry about that, should have been merged a while ago\n. Hmm... So we'll have 2 ways of managing the validity of the textfield (either with pattern or with invalid). Don't know if it's a good idea. Could be misleading if users use both props at the same time :/\nI agree with you that server validity is not possible just by using the pattern. Maybe add a valid props could be the answer (I prefer using valid instead of invalid ;)). But in that case, we would probably remove the pattern prop and let the user do the pattern inside the valid prop.\nBut at the same time, pattern is an existing prop on an input field so I guess we have to handle this case as well :D\n. Actually, by default a field is invalid if the value doesn't match the pattern. (That's weird but it's like that :/)\n. Sure we definitely have to introduce a way to force the state.\nWe could introduce a feature inside react-mdl now but we will probably need to refactor the code once this is done on the MDL side https://github.com/google/material-design-lite/issues/1136 (context: https://github.com/google/material-design-lite/issues/1132)\nAt the same time, I was thinking of removing the permanent error prop and only add/use it when the field is actually invalid. So we could merge the forceInvalid and error prop.\n. If you're willing to do it, you can do it. Otherwise I'll do it when I've time.\nUpdate your current PR or create a new one is fine. I'll review and test it after that to make sure everything is ok\n. Maybe remove pattern?\nWhen the onChange callback is called, the developer can check the validity (by using a regex pattern for example) and set the error prop if needed.\nIt's more general that way, could be the solution.\n. Yeah. maybe.. \nMaybe we could add a custom prop validator to check that error is provided if pattern is also provided. Or maybe error could be really optional. I have to double check this but error is just the text, right, so even if the pattern is invalid but without the error text, the field should still turn red.\n. Could you explain or give an example?\n. Sorry I'm quite busy at work these past few days and when back home, I'm not always on the computer either ;) Depending on the timezone, it could be hard to be connected at the same time though.\nDo you mind explaining it here, and if it gets complicated, we'll try finding some time to chat about it\n. Yeah, I think it's better to put that in another repo, and maybe use it inside this one (or keep it separated and let users do the integration).\n. I really like the idea. And yes you can submit a PR for that. I'm still quite busy these days :/\nThanks!\n. What's valueLink? Can't you do the same with onChange?\nonChange={this.linkState('name')}\nI'm using this on a project and it's working fine.\n. Ok I see, you should already be able to use this.\nAny \"unknown\" props received on the Textfield are passed to the input or textarea so the valueLink should be properly set as well.\nBut yes, for now you have to provide an onchange (in this case it can be an empty function). And I agree to set the callback optional.\n. For now, the is-invalid state is only set when the value doesn't match the provided pattern. There's some discussions about the textfield here https://github.com/tleunen/react-mdl/issues/37\nWe're trying to find the best available solution to resolve this.\n. Fixed by merging #49 \n. I thought we were handling the case but I guess not. Could you please open a new ticket to track the issue?\n. I think you can use the onInvalid event, or the onChange event and check the validity of the input field there.\n. Yep, a squash would be nice :)\n. I usually use single quotes in JS but double quotes in html (and therefore JSX).\nThe default value is \"double\" so it should be ok.\n. It's actually prefer-double ;)\n. Do you mean we don't inherit from it because it's not part of the recommended eslint configuration?\n. Indeed we never used the rule from eslint-plugin-react. I didn't know it existed. Probably it has been added after I integrated it.\nAbout the recommended eslint, we're using it then.\n. Thanks ;)\n. :+1: \n. fixed by #48 \n. You are now modifying the component instead of creating a new one. I'm not sure we want to go in that direction...\nI would prefer if we can find another solution to the issue.\n. Not a big fan of inheritance when writing React code either. \n. Inheritance in JavaScript is hard because there's no way to know when you override a function or not. That's why I usually try to not use it (except in some cases).\nBefore going with that route, I'll try to find another way of solving this.\n. Inside a child class, you have no way to know without looking at the parent if a function you're writing is overriding the parent function. That's why I tend to avoid using inheritance in JS.\n. Still thinking of a solution. I'd like to keep the High order component instead of the inheritance so I'm trying to find a way to fix the issue while keeping the HoC.\n. What do you think of adding a get function inside the components who needs to manually specify the container to downgrade, and update the mdlUpgrade helper with this:\n```\ncomponentWillUnmount() {\n    var { comp } = this.refs;\n    var element = (comp.getMdlContainer && comp.getMdlContainer()) || this;\n    componentHandler.downgradeElements(React.findDOMNode(element));\n}\nrender() {\n    return ;\n}\n``\n. Hmm.. Let's keep the old way of upgrading (the function mdlUpgrade), and add a newMDLUpgradefor this specific tooltip code.\n. I was more thinking of keeping themdlUpgradeas it was before, and creating a newMDLUpgradecomponent that will use themdlUpgrade` function. That way we keep the logic only in one location.\n. One or the other, it will give the same result. It's just that one needs less code changes :)\nAbout the decorator, I prefer keeping a function for now, less code, easier to understand for everyone.\n. I meant, less code change to keep the function as is and create a component.\nUsing a generator will produce more code in the end. We might switch to a generator later, but not now\n. make sense. :+1: \n. I'll merge.. we'll see how it goes like that. Even if I'm not a big fan of the mdlUpgrade implementation, I currently don't have any better solution\n. The solution looks nice, at least until the MDL team provide a better way of doing this.\nThanks.\n. Not sure to understand.\nIn the title of the header, you're not using a text string, but a dom node? Is that the issue?\n. I think only strings are allowing based on the MDL spec, but we could probably allow node/component as well and assign the mdl-layout-title class on it.\n. CardTitle already accepts anything as a child, but in that case it won't use the default h2.mdl-card__title-text.\nThe reason for that is because of the Event card in the demos: https://github.com/tleunen/react-mdl/blob/master/demo/card/card.js#L51-L57\n. Done. 0.13\n. I know It's been a long time :/\nSo many changes since last version, I still have a few things I want to finish first.\nA new version should land in the next couple of days, alongside with the support of MDL 1.0.6 for the Layout component\n. You're right by saying 1.0.6 \"should\" be the last version of 1.0.\n1.1 will contain a few new components.\nBut because the layout has to be redesigned, it's a breaking change and this can land only on 2.x :/\n. If you're using the custom files we provide (which fixes an issue with the Layout component), that's unfortunately not possible for now...\nIf you don't use the layout component, you can safely use the CSS files provided by the MDL team.\n. Because @slybridges said using ~ would fix the issue and we now use it in our scss patch file\n. Yes, I'm also very interested in improving the way we can customize the components. With our v2, I wanted to remove all the direct css dependency to have each component have their own css dependency (using css-modules or something similar). But I didn't get the time right now to investigate all this.\nThen with a root \"ThemeProvider\", we could indeed let the user choose the main theme color he want to use, probably based on this: https://getmdl.io/customize/index.html\nFeel free to jump in, try a few things and propose something in a PR ;)\n. If you're using valueLink, you can't provide onChange and value. The valueLink does the work for you.\n. I don't really have much experiences in this.. Would probably have to check what other React repo do in term of tests and use the same frameworks for that...\n. @nathanmarks sure thanks!\nI'm still unsure if karma/mocha is really needed of if we just have to check the output html for each components based on the props we provide.\nI don't think we really need to render it in a real browser in this case, because MDL upstream already does this kind of testing to making sure the rendering is correct.\n. I don't think Selenium is needed.\nWhat we just have to make sure is the output of the components based on the props they receive.\nMocha, chai or whatever should be enough.\n. I'll probably go with Mocha + basic assert (at least for now)\n. I've started to use mocha + React shallow renderer in this PR https://github.com/tleunen/react-mdl/pull/84\nAgain, I'm not sure something complexe with browser testing is required in this case because MDL already does this part to be sure everything is rendered properly across browser.\n. About assert, that's why I started using expect instead. It gives more utils and better equals.\nAbout tape vs mocha. Some people prefer the former, some other the latter. I chose the latter for no particular reason except it's widely used. I know tape is also well known.\n. What's wrong with expect? It's easy to use.\n. Not sure to see the point here. I'm using what feels the best to use for every usecase.\n. It's not that long. Take a look https://github.com/mjackson/expect\nAnd it gives you readability. \n. I made a few tests with jsdom this morning.. Well, it's a lot faster than Karma, but a few things are not implemented in jsdom (like html5 validity inputs) which prevent some tests to be done :/\n. What's the usecase?\nWould have thought that because the value has changed, the textfield is re-rendered and therefore MDL should check the validity.\n. Good catch.\nActually, this is because the MDL object is already initialized.\nWe might want to use .change() on the MDL object if we detect the value has changed.\n. Not yet no... But it should work since it updates the css.\n. Did not get a chance to test it yet. Should do that tomorrow.\n. So I checked it, with react-devtools, and there one thing I don't understand... When changing the value, the textfield component receive an event in componentDidUpdate where the prevProps are the props with the value I entered, and props empty.\nBut it should be the opposite.\n. I created the gitter room so we can discuss about it :)\n. closing this in favor of #79 \n. Hmm.. What do we have to set to accept all 0.14 versions?\n. >= 0.13 < 0.15, will that solve the issue?\n. We also want to set React as a devDepencency to prevent issues with npm3 :)\nWill make a few tests later tonight\n. That's why I said \"devDependency\" :)\n. The reason for this is simple. NPM doesn't install peerDependency anymore, so you have to also set it as a devDependency so you can still get the project, run the tests/demos ;-)\n. Removing them once 0.14 is released :) In the meantime, I'm afraid there is no solution for that.\nI was also thinking of creating a next branch of react-mdl based on the next version of react\n. Thanks @peterssonjesper\n. Wow...\nYep the fact they use event.stopPropagation(); is a bit problematic here... Maybe we can manually bind the click event for the element inside the tooltip?\nOnce the element is mounted, we manually add the click event (if one was provided), do you think it could work @faergeek ?\n. Why the entire tree? The main element linked to the tooltip should be enough.\n. A tooltip can only have 1 single child, and I think the issue is there because MDL add an event on the linked child with the stopPropagation. That's why we should be fine by just manually mapping the event on that linked element.\n. I don't want to create a patch. The patch file is going to disappear once MDL goes 2.0.\nThey said in one of the issue you linked it's the normal behavior (for them), and they won't fix it (for now).\nI know it would be better to fix it upstream, but it seems there are some reason why they do that.\n. @faergeek any update? Is it fixed upstream?\n. I think it's fixed in 1.1, not in 1.0.6\n. The problem is that it would required to be put inside every \"clickable\" component :/\n. The issue is already fixed upstream in 1.1.x. So it will be included in react-mdl 1.4.0.\n. Probably something related with your code with React-router, but if you can share some code, we might be able to help you :)\n. Several things here:\n- The implementation of the tabs inside the header is not complete. I wanted to reuse the tabs component instead of using hash to show a content, but I did not continue that way and of course I don't remember why...\n- The reason why the tabs are not working at first, is because it tries to display the container scroll-tab-2 (for example), but it's not in the DOM yet when you're on the homepage. You have to click on the \"Example content\" link to display the tabs content.\n- Also, the reason why the content stays visible is because the tabs get upgraded without their panels. Because the panels are dynamically added after, the mdl component doesn't know them. To resolve this, you could try to re-upgrade the view but it's really not optimal. That's why I'm not a big fan of the current implementation of the tabs in the header.\nI'll put the Tabs in header at the top of my todo :)\n. Why would you want to create MDL components?\nEvery MDL components should be available in this repo. If something doesn't exists in MDL, you can probably create them using a simple basic React way instead of using the mdlUpgrade function.\n. Exact! :)\nI saw the news today, I'll try to get the time tonight to update the repo with 0.14 et fix all the warnings\n. You're right.. seamed should be added to the header props.\n. Yes as @faergeek mentioned, I'm not in favor or inheritance in this case. That's why we decided to use another approach :)\n. Haha ok ;) Yep, actually I figured out it make no sense if the children was null as well anyway ;)\nAbout the text, I'm not sure.. How would you render an empty badge? (just the red circle without any content)?\nI'm not saying there's no fix to be made on react-mdl. But maybe we could render an empty data-badge if text is null? Because if you don't want the badge, you could not render it in your component instead of assuming Badge will not render himself\n. Ok so you suggest that if text is null, Badge:render returns the children then?\n. No need to add an extra container for that.\nWhat do you mean when you return null from Badge?\n. So I updated the code to only force a change value on the textfields that are not focused.\nWhat do you think?\n. Yes, it would work, but only with the current version that we have in react-mdl. Upstream, the code has changed to fix an issue and now it supports to pass an empty string.\nhttps://github.com/google/material-design-lite/blob/master/src/textfield/textfield.js#L201-L205\n. :+1: used ref instead to avoid searching inside the entire element.\n. There are already too many changes and breaking changes, so I was planning to finish them before releasing a new version\n. So.. What you're trying to do is to not display the badge icon if the text is empty, right?\n. And React displays the attribute, even if text is empty?\n. Should be fixed now.\n. @web2style once made a PR about the same kind of change: https://github.com/tleunen/react-mdl/pull/25. It was accepted and then reverted.\nBut this one seems to be more consistant. It updates every component with the same behavior.\nInitially, the reason why the value was only sent is because usually, that's the only information you care to receive. But I do understand sometimes you want more, or like in this case, you want the same function signature. So I agree to accept the PR. I'll do it later after a better look at it.\n. Thanks @joshq00! I really appreciate the help to make react-mdl better :)\nI understand we could do a cleanup in the propTypes of every component, but is some cases and especially when they are flagged \"required\", I think it's good to have them. It forces the user to use/set them and to know what's available on the component.\n. I think it really depends. Because you know how the component is built, you know you can use a lot of props that are not described. But ideally, props should describe what you can use (or at least those who are supported and tested). A slider without the min/max value for example doesn't make a lot of sense, but because it's an input behind the scene, you know you can provide them.\nIn the implementation of a MDL Textfield, the label is required (for the bottom border when it's focused). So that's the reason why it's needed.\n. Yes the input still works. But it doesn't have the MDL styles. Label is required with a MDL Textfield, we cannot change that.\n. For now, because there's no documentation, I prefer keeping the propTypes because they are kind of a documentation as well.\nCould you rebase instead of merge? To avoid having these merge commits ? :)\nThanks!\n. Could you please only change the way the event is sent inside onChange?\nAs I said, I prefer keeping the props to serve as a documentation.\n. In general, yes we can set the onChange callback as optional. It helps prototyping screen. But usually people will set it anyway because we usually create controlled form. (using value + onChange).\n. Yep I forgot about this valueLink. But I agree with the changes. I'll merge once I get a confirmation for the tabindex thing. I asked them on their gitter channel.\n. I'll merge. please enter an issue if you still have issues with it.\n. A gitter already exists at this url ;) https://gitter.im/tleunen/react-mdl\n. I disagree with this.\nIf there's no reason to have a badge, there's no reason to have the badge css class as well.\n. Yep, everything is fine. I made a small modification so a text will always have a span around him\n. Nice work @joshq00. Just by curiosity, have you seen the docs branch (https://github.com/tleunen/react-mdl/tree/docs).\nSome time ago, I started working on a real website for the documentation/demos. It's not updated\n. Great work!\nWhen you click on a section, table for example, and then decide to scroll back up (at the beginning), the whole section is blank.\nWhen inspecting, it goes on the table section even if I scrolled up.\n\n. Thank you very much for the contribution @joshq00, but unfortunately I was already working on one site. Feel free to take a look and contribute to it if you want! :)\nhttp://tleunen.github.io/react-mdl/\n. I agree with removing the boolean values in jsx. I was forcing them in personal projects but the more I use them, the more I want them removed as well.\nBut yes, it would mean that all booleans should be false by default.\nThe only one that isn't false is the ripple effect, because I think people usually add it since it's part of the MDL so I thought I could save that to users\n. I did a first step which removes the boolean when it's true. I'll change the default for the ripple later.\n. I agree with the coverage but I have no plan to move to tape.\n. Never used Meteor, what would be the impact? What need to be done to be integrated with meteor?\n. So is there anything we can do to make it easier maybe? @generalleger \n. Meteor supports React (see http://react-in-meteor.readthedocs.org/en/latest/) so this shouldn't be an issue anymore.\n. You can put whatever you want inside the Drawer component. So you can add your custom header if you want instead of using the Header component. (Which doesn't seem to be the case in this mdl example anyway).\n. Everything you put in a <Header> will be wrap inside a HeaderRow, unless it's already a row, or a tab.\nSo with the current implementation, you cannot achieve exactly the same thing as what you describe, but you can have something quite similar I think using this:\njsx\nconst customTitle = <div><IconButton name=\"arrow_back\" /> Some title</div>;\n<Header title={customTitle} />\n. There's currently an issue in 6.0.14 about the class properties that prevent us to update to v6.\n. Once isparta is upgraded, we should be good. (see https://github.com/douglasduteil/isparta/issues/81)\n. done in the babel6 branch\n. Thanks @janpieterz for taking care of this. I was planning to do it today but you can definitely do it if you want ;)\nThere are no breaking changes in 1.0.6, it's only a patch version with a few fixes so it shouldn't be hard to update. And yes, you point to the right commit change.\nThere are no tests yet for the Layout component so everything should still work as before.\nThe problem it fixes is because componentWillUnmount was never called on any components inside a layout. The fix I suggested resolves that issue. But again, there are no tests yet to make sure it works as expected.\n. I think it would be easier to get the latest version from upstream, and then re-apply the changes on top of it.\n. fixes with 3.7.1\n. Sure! Feel free to open a PR ;-)\nBut I'm not a big fan of having the end user writing something like this, because of the <tr>\n<DataTable>\n    <tr>\n       <DataTableHeader />\n    <tr>\n    <tr>\n       <DataTableCell />\n    </tr>\n</DataTable>\nMaybe something like this would be better? <DataTable headers={headers} cells={cells} />?\n. We could probably support both ways\n. It's because key is a reserved word in React. You cannot have a prop named key.\nI looked at your gist, but I'm not sure to see what this way really gives more than the current way. I mean.. yeah.. by providing the component itself, a more customization is possible by the end user, but I'm not sure if it's really useful here\n. Checkboxes will be deprecated in MDL 1.1 so yep we have to find a way to set this table more customizable :)\nToo bad, I liked the way to populate a table using just simple datasets.\nI'll think about it. Don't hesitate to continue what you have in mind as well.\n. hey @janpieterz, sorry for the delay.\nI tought about it, and I think we could use both system.\nWe would have 2 ways of filling the table. The first one, the simple one, would take 2 props (headers and data), like what we currently have. The second one would take the children as data. Headers will stay as props.\nThat way, we keep the current system so we can ship this feature in v1.x.\nThe children (content) could be whatever the user want, either <tr><td>...or custom component he want so he can easily manage the events on the rows for example.\nWhat do you think?\n. Currently, the only way is to bind the event on the checkboxes manually :/\nIf I were you, I won't use the selectable prop on the table because it will be removed in a future version of MDL, so by starting to manage it yourself it will be a lot easier :)\n. hey @janpieterz, still working on this?\n. @FoxxMD about onchange event, I suggest you to do it yourself, adds a Checkbox in the cell instead of using the selectable property. I'll deprecate it soon since it's deprecated in MDL. About using components in cells, it's already possible.\nHere's an example with an image:\njsx\n<DataTable\n    columns={[\n        { name: 'picture', label: '' },\n        { name: 'firstname', label: 'Firtname' },\n        { name: 'lastname', label: 'Lastname' },\n    ]}\n    data={[\n        { picture: <img src=\"http://placehold.it/100x100\" />, firstname: 'John', lastname: 'Doe' },\n        { picture: <img src=\"http://placehold.it/100x100\" />, name: 'Jane', lastname: 'Doe' },\n        { picture: <img src=\"http://placehold.it/100x100\" />, name: 'Janie', lastname: 'Doe' }\n    ]}\n/>\n@janpieterz The more I think about it and the more I find the current implementation acceptable. We might add a few other \"properties\" to the columns so that we could easily customize them (for example classNameand tooltip).\nWhat do you think?\n. I pushed a new version of the datatable, and put an example with checkboxes on the website. Feel free to take look at it.\nI'm closing this issue. I'm not sure a refactoring is needed to add features to it. Please reopen a new issue if you think more feature could be added.\n. Yep, the example looks ok.\nI also like the dataFormat function... This is something we could easily add in the column structure.\n. Ok I'm reopening the issue.. Indeed I think a refactoring using something similar to what we can find in react-bootstrap-table and fixed-data-table would be a good idea.\nFeel free to work on something and open a PR if you want or come to discord to discuss about it :) I'm busy with some other things right now so I don't know when I'll be able to work on that.\n. yeah about that, I was thinking about adding back the selectable prop and handle the checkboxes like it is in the example.\nI'll think more about it...\n. Closing in favor of #219 \n. :+1: \nThank you @janpieterz !\n. Yep a section similar to that also exists in h5bp, and I didn't use it because I'm not sure it's important to know the os/browser for an issue in react-mdl. I mean, we are using the css/base js from upstream, so any specific bug would need to be reported upstream, not here.\n. Good catch! :/\n. I was waiting to see if there were any other quick fixes to make\n. Thanks @durandj!\n. What about changing Tabs to allow anything, and wrap the children with Tab. Instead of rendering a link, Tab will render the child with the custom props.\nWhat do you think?\n. I have to merge the babel6 branch in master and it will be a major update as well... I'm surprised nobody complained yet that the available version not compatible with babel 6.\nAnyway we could also wrap it only if it's not already a tab ;)\n. Yes indeed. I was completely wrong. Babel is only a dependency for building the code, so that's fine. I can easily merge the babel6 branch without updating the version.\n. hey @janpieterz, instead of changing the way it work, what do you think of having a prop called component allowing you to decide what component to render, with a default to <a> (current behavior) ?\nWe already use this prop for a few other component (Button, Grid, Dialog, ..), so at least we keep it \"standard\".\n. Could you please add nospacing inside the propTypes list please?\n. Was also thinking, shouldn't the name of the prop be noSpacing instead (capital S)?\notherwise, lgtm!\n. LGTM.\nNo idea why eslint breaks on your PR now... I'll investigate this.\n. Hey @Graf009, now that we also have a docs, could you update the PR to add the property inside the doc as well?\nLet me know if that's ok, otherwise I can do it while merging it :)\n. Actually, demos should probably use defaultValue so we can play with it for a demo purpose, but users should use value and onChange to set the value of the textfield.\n. It's usually because the import path is incorrect and that the \"Textfield\" you're using is actually undefined.\n. Do you still have the issue @treeder ?\n. The right import should be import Textfield from 'react-mdl/lib/Textfield'; when importing the Textfield directly\n. What I usually do is keeping track of everychange in the state/store and get those values when hitting form onSubmit.\nKeeping track of changes in real time allows me to quickly display an error\n. Yep, with a little helper you can usually do that without too much code.\nvalue={this.state.myInput} onChange={saveInState(this, 'myInput')}\n. Oh I forgot to remove this section from the readme.\nNow that we have a website with examples, demos don't exist outside of this website.\nLater, we'll add links to \"export\" the examples inside codepen.\n. Thanks @noisecapella. Could you please fix these eslint errors?\nreact-mdl/src/Checkbox.js\n  27:9  error  Expected indentation of 6 space characters but found 8  indent\n  29:9  error  Expected indentation of 6 space characters but found 8  indent\n  33:9  error  Expected indentation of 6 space characters but found 8  indent\n  43:5  error  Expected indentation of 2 space characters but found 4  indent\nThe others 2 errors are unrelated to this commit and I'll fix them later\n. Indeed, the other \"input fields\" could have the same issue.. I'll try to take a look in the next days\n. Do you mean the 2 imports inside the _layout.scss file in our extra directory?\n. Yep, it's definitely something I'd like to see on the website as well! :)\n. Thanks for the work @brysgo. I'll take a deeper look this weekend, but at first, I think it would be better to put the templates \"outside\" of the docs.\nIt's a bit more work, because it would need a separate webpack config for it, but having a page /templates listing all the templates and then /templates/dashboard would be nice.\n/templates will be a page inside the doc (so a simple markdown page, like the homepage for example), and then /templates/dashboard would be a complete other \"website\".\nWhat do you think?\n. hey @brysgo, I just pushed 2 examples of templates in the docs. Please take a look and feel free to adapt your PR to update the dashboard template :-)\n. Thanks for reporting the issue @treeder. I checked and it's indeed an issue with our custom implementation of the layout\n. Or maybe not. Where do you put the footer?\nBecause maybe you did the same mistake as I did. The footer should be inside Content, and not outside.\nI know it's weird, but that's how the MDL team did it :/ Maybe they'll change that later with the refactoring of the layout in v2.\nCan you confirm it's ok when putting the footer inside the content?\n. Hi @trungtin and sorry for the delay of this response.\nThe goal of the inner-container was to resolve this issue https://github.com/tleunen/react-mdl/issues/4.\nBasically, the idea behind was to always have a known element as the root of the component. After that, the component could dynamically create inner element if it wants.\nFor my last tests, and based on what was done for the website (which uses React-Router and the inner container layout), everything still work. The MDL team already told they will work on a better implementation of the Layout component in their v2, but until then, what I suggested is the better \"small fix\" I found.\nYou don't really remove the inner-container, a lot of css is based on that, indeed. So I'm not surprised some features don't work if you remove it.\nDo you have a repo or a gist for your issue using React-MDL with React-Router? Maybe I can help finding the real issue.\nFor the Card and Cell, they are not meant to be used together. Cell is part of the Grid. Card has its own \"subcomponents\". What do you want to do? Having a grid inside a card? In that case, defines a grid before setting the cells :)\n. Unfortunately if you're using our custom css to fix an issue with the layout, it's not possible to customize the color. I'm trying to find a better solution to this\n. Not that I'm aware of.. But some people got something in this thread https://github.com/tleunen/react-mdl/issues/148\n. Thanks @skeskinen!\n. Hmm indeed I think it would be nice to describe the process in the readme. I'm also wondering if it could be possible to use the MDL css and apply a monkey patch on top of it to fix the layout. It might a lot easier for users that way.\n. Nop, there's no way to setup the color from the react component. It's better to setup your styles and then use the component without knowing the color.\n. Don't hesitate to submit a PR to add the how to in the readme.\nI also added the complete list of styles in the repo in /extra/css. This will be available in the next minor version.\n. Thanks :)\n. false alarm\n. I'm not sure I following.\nEvery render of the component, is-invalid is automatically removed from the component. So we add back the class if there's an error. Unless you're using a \"uncontrolled\" textfield maybe?\n\nWe then fix our erroneous form input and from our typing in the textfield, MDL will automatically clear the is-invalid class off of the Textfield.\n\nIf the error is still set, the textfield should keep its \"invalid\" state.\n\nWhen our backend ajax request comes back and clears the error attribute on our Textfield component, componentDidUpdate will run again but the is-invalid class will not get removed.\nOnce again, if the error is not set, there's no reason the input keep the invalid state.\n\nCould you setup a codepen or something to illustrate the issue?\n. hey @slybridges, because you made the initial code to force the invalid state in react-mdl, you might know why the classname is not reset.\nIn the example from @andrepew, it seems MDL doesn't remove the is-invalid classname when rendering the textfield. Do you know if they changed something in a recent release?\n. You can add material.js in webpack as well, but since it's not a dependency of react-mdl, you have to do it manually.\nSee the code on our website as an example: https://github.com/tleunen/react-mdl/blob/master/docs/pages/_template.js#L11\n. If you can share some code, maybe I'll be able to help ;)\nOtherwise, make sure react renders it. Use the debugger to help you in this task ;) or breakpoints in the code\n. I think all the elements inside Layout should be at the first child level :/\n. Glad it solves the issue. Thank you :-)\n. Awesome! Thanks @slybridges!\n. Seems like the expected behavior to me. If the error contains something, it's normal the textfield is still in an invalid state.\n. Very interesting. Indeed, it's great if you only use a specific component!\nBut currently, because of the \"small\" change we have to make on the layout component, using this would be complicated.\n\nNotice: only component js, sass and polyfill need to import from origin one;\n\nWhat does it mean?\n. I think it's a lot easier to use a ripple prop than having a component for that.\nThe component will not add any value.\n. I understand the need of getting the dependencies instead of using the global MDL. Trust me, I would definitely prefer having a commonjs module that I could use for that :)\nAnd I really like what you did with your package. But for now because of our custom \"layout\", we cannot use it.\n. Indeed...\nI'll be quite busy during the christmas holidays but I'll try to make something based on your commonjs lib :)\n. hey @morlay, sorry for the huge delay :/\nCould you submit a PR with a component as en example? I think it will allow me to better see and understand the changes and how it will improve the code.\n. Yep, I was thinking of updating all components to not use their JS at all and just their CSS. I noticed the limitation of using their code when building the snackbar.\nNice work. What do you think of focusing our effort? We could prepare the v2 in a new branch using only the css directly imported in the component using css modules\n. Could we discuss about it on discord or somewhere else? :)\n. Hmm it's a tricky question. Because we can't really use the style/props from Tabs for TabBar because if we do so, we won't have any way to customize the mdl-tabs element.\nWhat about a tabBarProps so the end users can easily send whatever he wants?\n+1 for the updated PropType to allow a single element.\n. Could you also add the information in the docs (configuration table)?\nThanks :)\n. Released as v1.1.0. Sorry for the delay @slybridges\n. Thanks @sarink! I usually have the compiled files so I haven't noticed the error before :)\n. I'm not sure MDL has a specific spec for a color input, but you can pass a type prop with the type you want.\nSee this as en example http://codepen.io/anon/pen/zrqROo?editors=001\n. Not a bug.. Was adding the html as a string instead of an element\n. Could you explain? I don't see any errors.\n. Indeed, if fb.me is blocked, the script won't load. I'll update the link to use another cdn instead.\nI'm reopening the ticket as a reminder.\n. PropTypes.node seems to be the right thing to use then to allow all sort of \"rendering\" elements.\n. From the doc\n\n// Anything that can be rendered: numbers, strings, elements or an array\n    // (or fragment) containing these types.\n    optionalNode: React.PropTypes.node,\n\nSo only node is enough. Also, could you please squash your commits please?\n. perfect! :) Thanks @Gregoor \n. Good catch. This is because of the empty onChange callback.\nEither you have to get the changed value and apply it on the radio, or you can get the value with another way (using ref for example) and in that case you don't need the callback.\nI'll fix the doc.\n. the mdl class is-checked should be updated even if you don't specify the change callback. But it will result in the small warning explained in this PR https://github.com/tleunen/react-mdl/pull/181\n. So should this be checked if there's an onChange callback, and defaultChecked if not?\n. Thanks for the PR, I fixed it by handling both controlled and uncontrolled radio groups.\n. @kretz I remember now why I didn't implement it this way in react-mdl. This is because, when the spinner is stopped, it gets invisible. Therefore, in React, you can easily remove it from your render function when you don't want it.\n. Hmm.. Indeed. But usually, a spinner/loader is often put in absolute position in the center of the page, or inside a button after a user interaction. It's rarely always in the page waiting for a loading.\nI understand your case though, and of course you can open a PR with the functionality. The active state should be enabled by default though.\n. Do you include the material.js file before running your tests?\n. Good thing a simple fix has been found to make it work with jsdom :)\n. Thanks @odewahn. But this is just a wrapper for MDL. So any feature requests should be on the MDL upstream repository https://github.com/google/material-design-lite\nI found this issue mentioning it, but nothing ready yet https://github.com/google/material-design-lite/issues/1031\n. How do you see this with the current MDL dependency? It would be very hard to do so.\n. Once the MDL lib is completely modular (for both JS and css), this is something we'll implement. Until then, it's not something we can really do.\n. Indeed, Textfield might have an issue with the internal state in this particular case because React doesn't update everything. But the doc you mentioned specifically says to specify a key to let React know the element is different (which is the case in your example).\n. I'll keep the ticket open to investigate on this.\nBut for your usecase, please use a key prop. Not everyone will swap textfield based on a condition, so for most usecases, it behaves correctly.\nI ported your example in a codepen to better visualize the issue: http://codepen.io/anon/pen/EPRLww\n. The issue is because we set the key prop on the Textfield. Because of that, the input changed, but not the whole element, so it's never unmounted / re-mounted.\nI'll try to find a fix for the 1.4 release...\n. Hmm.. This is based on a mixin, which is deprecated. So I don't think I'll spend the time to support it. (https://github.com/facebook/react/issues/2302) \nIf you specify a valueLink, you don't specify a value. So I'm not sure to see the problem in componentDidUpdate. \n. But the condition is there only when the field is updated programmatically (not when the user write directly inside)... I'm not sure to see how this could be related to valueLink.\n. Oh ok, it makes sense now ;)\n. Go ahead! :)\n. Yep you can create a PR and I'll review it :)\nThanks a lot!\n. I've integrated all small changes from the release notes, except these 2:\n\nAdded full bleed modifier option to menu items.\nAdded column sorting to data table.\n\nI'm definitely not sure the bleed divider modifier is a good idea (see https://github.com/google/material-design-lite/issues/4083)\nAnd for the datatable, it's not useful without a better component to automatically handle sorting.\nSo closing this issue now.\n. Thanks!\n. Awesome work @Permagate! Just minor comments about the code.\nFor the tests, spying is fine.\nShould the dialog be automatically displayed when added in the dom, or always in the dom and use the isOpen prop?\nI mean... It's pretty much the same between, except in one case, the element is not in the dom, unless it's really needed.\njsx\n{{shouldOpenDialog && <Dialog />}}\n// and\n{{<Dialog isOpen={shouldOpenDialog} />}}\n. nvm about the open thing. I guess it will feel more natural for users to use a specific prop, since the native way of opening a dialog is to call a showModal function.\nAnyway, I'll check your branch locally and verify with the MDL doc to see if everything is ok :) Thanks again!\n. The title is actually just this:\ncss\n.mdl-dialog__title {\n    padding: 24px 24px 0;\n    margin: 0;\n    font-size: 2.5rem;\n}\nSo basically, it could be anything. The doc uses h4, but the demo uses h3 for example. Maybe we could use the same way as some other component, and having a prop component allowing to specify the element to use, with a default of h4 if you want :)\n. Yes adding a note about the polyfill will be helpful since the user has to include it :)\nThanks again for all this! I know there's not really any documentation to explain how to write and test the doc.\n- Could you also please squash the commits into 1 instead (or several but 1 for the code, 1 test and 1 documentation)?\n- Don't forget to add the Dialog in src/index.js as well :)\n. Yes, this is related to https://github.com/tleunen/react-mdl/issues/65\nBecause of mobile, the click event is used to display the tooltip :s \nThere's nothing we can do for now to fix this.\n@faergeek Do you think it would be better to refactor the tooltip by using our own custom implementation instead? But we won't support mobile I guess :/\n. Great news if it's fixed in 1.1.x.. I'll make some test tonight :)\n. Confirmed it's fixed in MDL 1.1.x, so it will be fixed in react-mdl 1.4.0. Closing it.\nGood job on your fix @faergeek https://github.com/google/material-design-lite/commit/0e65b743a0d60cd186cb941c3f46361527fe376c\n. I'd probably go with a specific primary content, and a secondary content to have everything flexible.\nI'll take a deeper look later today and read the spec and mdl doc to see how we could do it.\n. The ListPrimaryContent could take an icon and a subtitle as props, and children will be the title.\nThe ListSecondaryContent could take an info as prop and children will be the action.\nI'm just throwing some ideas, I'd need to think about it. I'd like to provide an easy way to create a list of items (where the item is a link, like in the drawer for example), and the possibility to have that fully customizable :)\n. Do you mean having List > ListItem > ListItemPrimary & ListItemSecondary > ListAction ? Or replacing Secondary with Action?\nCould you write an example of jsx code? It will help me visualize it\n. Oh I see... The secondary content is always an action... Well.. the spec calls everything an action, but MDL only use action for the secondary content.\nI won't put any event handler on that item, because it can be a checkbox or any other component...\nSo it could be <ListItemAction info=\"Actor\"><Checkbox /></ListItemAction>\n. I think we could rename everything though.. List, ListItem, ListItemContent and ListItemAction\nI'm suggesting this:\nList and ListItem are basic.\nListItemContent would be the primary content, can receive icon and subtitle as props. Subtitle is only used for 2 and 3 lines content, and for 3 lines, subtitle will use the body specific className, and children will be the main content.\nListItemAction is the secondary content, can take info as props (to display a small \"header\"), and children will be its content. I think it should also attach the className mdl-list__item-secondary-action on the child.\nWhat do you think?\n. We can see this of 2 different ways I thing. Either the component takes a twoLines or threeLines prop. (or a single prop \"lines\" which takes 2 or 3?), or based on a subtitle or body prop, we can define if it's 2 or 3 lines. (subtitle = 2; body = 3).\nI don't know if using subtitle and body is really good, since it can create confusion for the users. Using the number of lines is clear and you know exactly what you'll get.\n. Yep :-) Lets see some code and we'll see how it behaves :)\n. You can see the job task here https://travis-ci.org/tleunen/react-mdl/builds/108559317\nWithout investigating, I have no idea, but I think your tests don't need renderDOM, you could only use render instead and check the children with output.props.children\nPlease come on discord if you wanna discuss about it ;)\n. Any news on this? I can continue the work if needed\n. Thank you @darenju for the work. I really would like to publish the new version today so I'll complete the work here with the said modifications and the documentation.\n. Based on what I found on stackoverflow, it seems to be related to multiple React versions, as you suggest. It might be because the version you're getting uses React 0.14.7, and you're using something else. If you're using Webpack, you can try to add this plugin to remove duplication.\nIf it doesn't work, one other hack could be to compile the file, copy it somewhere, reinstall the default npm version, and put back the saved compiled Textfield.js ;)\nNote that instead of getting the commit, you can also use the branch name issue-197\n. @aaugustin This is because findDOMNode was not defined in the code of the pen.\nI fixed it by adding var findDOMNode = ReactDOM.findDOMNode; and I can't reproduce your issue ;)\nhttp://codepen.io/anon/pen/EPrywo\n. np, thanks! :)\n. Like this:\njsx\n<Button raised>\n    <Icon name=\"layers\" /> Button\n</Button>\nhttp://codepen.io/anon/pen/VegzEe\n. Are you using our \"un-released\" Dialog component?\nI'm not sure to understand why your dialog is not inside your React app.\nAnyway, even if it's separated, why can't you do something like this?\nhtml\n<body>\n    <div id=\"app\"></div>\n    <dialog>Hi!</dialog>\n</body>\n. Why would it be out of control? You can pass the open prop to the dialog which will open it when needed.\n. Well.. I still don't understand the problem with our Dialog component.\nGood thing you found a solution though. \n. I started the modifications. I didn't push it yet. I'm still thinking about how to build the Sortable thing. If I do a prop, or a HoC component over the current table component.\nI'm almost sure I'll go with the HoC component, so I can keep the \"sortable state\" out of the current component.\n. I did something, I still have to adjust the tests.\nBasically, I created a new component called SortableTable which takes exactly the same props as the default Table, and we can specify a custom sortFn on the table headers.\n. At first I did it like that, but it also adds a lot of state management in the base table component and I think it's better in this case to have it in another component.\nBut I agree, because selectable is a prop, maybe it would be more consistent to have sortable as a prop :/\n. I'm having an issue with the Selectable feature...\nWhen the component receives new props, with new rows.. How should behave the selection? Should we reset everything all the time? It's probably a bad idea, but at the same time, I cannot really know if the row is fully new or not since I only store its id :s I may need to store everything after all :/\n. @zeskysee you mean the row with the \"add\" and \"remove\" buttons?\nNop, it won't be part of the table at this stage. But I'm pretty sure you could easily build it outside of it.\n. Yep, with the new component (not released yet), you'll be able to get the selected rows so you can enable/disable the buttons outside of the table\n. It won't work without headers. Headers are used to know in which order the data have to be displayed.\n. Hopefully, it should be this weekend :)\n. @michaelguild13 I've decided to change the way I was thinking it. So in my latest attempt, both the selectable and sortable are props. And I also put the specific code in each a Selectable and Sortable HoC component so I can keep the initial Table component quite easy to read.\nNo changes for the end user except now when importing the Table, he will both import the sortable/selectable code, even if he never uses them. But I guess that's ok...\n. PR merged. Closing this ticket\n. What do you mean? Everything looks fine here http://tleunen.github.io/react-mdl/#/lists\n. Thanks for reporting the issue!\nI didn't know the escape key could cancel the dialog. But indeed, it's explained on the Chrome developer page.\nUsing the cancel event should solve this. In your case, try with cancel instead of onCancel.\nI'm thinking of cancelling the escape key by default, unless the user provide a cancel event. What do you think @Permagate?\n. I initially thought it was an attribute cancel, but in fact it's a real event.\nI'll open a ticket in React to know if they plan to add the onCancel event.\n. So I have a fix (quite easy to do), but I also wanted to add some tests to make sure we don't introduce regressions later, but I have some hard time finding how to check that the dialog closes or not when the user pressed the escape key :/\nIf you have some time @Permagate, could you take a look to see if there's a way?\n. Indeed, cancel is currently not a supported react event. I created a ticket in React (https://github.com/facebook/react/issues/6049) about it.\nBut there's a difference between what you define as props in your own components, and what's defined on the React elements.\nFor the prevent function, from my testing, it's called when the dialog receives the cancel event. The reason why the component catch the event by default and prevent its default behavior is because, with React, we cannot really let anyone else manage the state of a component outside of the component. So if the dialog decides to closes itself, React has to know about it. And without listing to attributes changes on the element, it's not really possible (is it?). So I decided to not allow this behavior by default.\nIf the end user still wants it, he can override the onCancel handler and manage the open state by himself :-)\n. Nop, if you specify the onCancel prop, it will override the default value set in the Dialog component. So the prevent function won't be called.\n. You don't have to manually listen the event yourself, the component does it for you.\n. Oh damn you're right. It should be this.props.onCancel instead.\n. Hmm... I don't see any issues on FF 44.0.2\n. Do you have another machine you could use to test?\n. Good catch. Indeed, we should clean everything when unmounting the component.\nThere's another small chance to have an error, with the second timer in the clearTimeout. The timer is so small the chances are really low, but still we should clear it.\n. Thanks!\nCould you sqash your commits? :)\n. Interesting. I'll leave it open for now. Maybe someone knows why it's happening.\nOn the long term, the tests will change and I'll probably drop karma for jsdom (with Enzyme)\n. A component is not just an output, sometimes it's more than than with logic. So you cannot really use renderToString. That's why we currently use karma.\nFor the v2, I'd like to not depend on the MDL js part, in order to build real react component. So we'll have more \"complex\" component and we'll need to test them.\nAbout the memory issue, I have no idea :s I never got any crash when testing locally or on Travis\n. @Download I found a similar issue here https://github.com/karma-runner/karma/issues/1868\nWe can try to move to this configuration to see if it resolves your issue https://github.com/webpack/karma-webpack#alternative-usage\n. Are you sure you include either the official mdl js file or the one we provide in /extra?\n. I got the exact same issue when trying to write test around that.\nGood enough, thanks so much!\n. I tried it and everything seem to work. The value is updated after a drag/drop text with the correct value, not undefined.\nDo you have an example?\n. Do you update your store with the onChange handler?\n. np, let me know if I can help ;)\n. You can use npmcdn to get the same result. Here's the latest version for example https://npmcdn.com/react-mdl@1.4.2/out/ReactMDL.js\n. Each demo on the website has a link to codepen if needed. (But I just noticed it's currently broken, I have to investigate why)\n. MDL v2 is far from being released, but yes we'll support it.\nReact-MDL v2 will be a lot different too. Instead of using their javascript, we'll rebuild every component in a true React way, we'll only use the css they provide.\n. Can you share en example of code with the error?\n. Closing this for now... Please provide more information\n. By any chances, @michaelguild13, @FoxxMD, do you know why Travis is failing on rendering the Table component? It's working fine locally oO\n. Ok I found the issue in the tests. It was because I used array.includes, which doesn't seem to be inside the chromium version used in Travis.\n. Hmm.. It might be an upstream bug in that case, since all the files under /extra are generated by the MDL project (https://github.com/google/material-design-lite) with our layout patch.\nSo it might be on their side, or might be a side effect of the applied layout patch\n. np ;)\n. I'm wondering if it's not a chrome issue.. If I open the devtools or resize the window, it resolves the issue :/\n. > If you set on close overflow-x on \"auto\" it works...\nWhat do you mean?\n. Yep, try to create a small codepen example for example and submit a ticket in Chrome please.\n. In react-mdl website, the scrollable content is not the body, maybe it's related to that.\n. But the issue is still not reproducible in the codepen example :/\nThat's weird\n. If it's (currently) only an issue on the React-MDL website because of the inner panel scrolling.. That's ok. I won't change how it works because of that.\nMDL is built with the native dialog feature, so we do the same. It doesn't make a lot a sense now to create a dialog module since a native dialog is available for us.\n. Lets talk about v2 there https://github.com/tleunen/react-mdl/pull/258 ;)\n. I'm really hoping the v2 will solve this issue because it's related to the way the Layout is built (internal scroller).\n. Hard to exactly know what can cause this issue. Unfortunately, I believe we won't really have any good fix before v2.\n. Currently, there's no easy way to that, but you could set a ref on the layout, and then call this findDOMNode(this.refs.layout).MaterialLayout.toggleDrawer()\n. Yep exactly. Having a prop on the drawer to open/close it.\n. Could you share what you're trying to do?\n. Indeed, I can reproduce the error in our demos\n. Is it from a clean install? Which version of node and npm are you using?\nIt should never install history, as it's not a direct dependency.\n@jolic nothing is disabled. If the button is disabled for you, contact github support.\n. You have to specify a title and a description to submit an issue.\nIf you still have issue, please contact the github support.\nStop posting this here.\n. I found this https://github.com/npm/npm/issues/9894 and this https://github.com/npm/npm/issues/9642\nLooks like, because of the name, it's always pulled.\nI never got the issue with npm 3, so if you can, upgrade your npm ;)\n. Can this be reproduced with the base MDL? outside of react-mdl?\n. How do you scroll with the visible obsuscator?\nCould you build an example using codepen, jsbin or any other tool like that?\nThanks.\n. @darkyen So for this v2, I'm trying to rebuild all the components to not use the base javascript file from the MDL team. This will allow us to have everything handle in react and have a better control on the components.\nFor the css, I'm still not sure, I'd like to use css-modules mais I still have to test with their css if this is really possible.\nCurrently, this is still in heavy development and cannot really be used. So no upgrade guide. Also, I don't think there will be any big major changes but we'll see at the end of this big tasks ;)\nThe major things I'd like to do are:\n- Change tests to use Enzyme, chai and chai-enzyme.\n- Update all component to not use the \"mdlUpgrade\" helper (MDL upgrade element)\nA few components are easier to do than others of course (that big Layout thing :D) And any help is very welcome! If you want to help on any of this, feel free to take something and submit a PR against the v2 branch ;) (Please tell us here what you plan to work on so people don't work on the same thing)\n. No idea how they're planning v2, but if we want something nicely integrated with React, we'll have to rewrite some code.\nOf course, we might end up reusing some of their code by importing their module (I'm thinking of the ripple effect as an easy example), depending on how they do it.\n. Yep it sounds like a good idea. I'll merge this PR soon as a starter and create tickets per components for v2 :)\n. Closing it. I'll re-create a PR when we'll be close to merge v2 in master\n. @Download No worries. Any discussions on any ticket is good to take ;-) And especially this one about v2.\nAs I said to @darkyen earlier, I'll create a few tickets (probably one per component to rewrite) today or tomorrow and you'll be free to jump in those ticket and say you want to contribute on them ;)\n\nWould you be willing to accept PRs that optionally allow people to deviate from Google's design guidelines?\n\nHmm.. I think it would be preferable to have another package, maybe react-mdl-ext to extend it with new unofficial components. I'll be happy to add a mention about it on react-mdl if someone creates a pakage like that, but I prefer keeping react-mdl as close as possible from the official MDL library.\n@darkyen performance is not really what motivates me. What I'd like is having good components, easy to use. Once it's done, ok we can focus on performance (if we notice issues).\nThe thing is, we're already using React and it handle very well the event listeners for example. So why not use them instead of having to manually add/remove listeners (with the base MDL lib). In the end, by using MDL.js, it produces some javascript that we could avoid.\nI agree with @Download that the MDL v1 is not meant for a use with React or another framework. I think they will improve that in their v2 so we'll see what we can reuse from that.\nThey did a proof of concept already (see https://github.com/google/material-design-lite/commits/v2-components-poc).\n. Nice work!\nOk, a lot a things here :)\nThe way you did to access the components using the console is kinda out of React. It looks really cool and could be helpful for testing for example. I'll take a look at your lib if you decide to create it ;)\nAbout your \"react-mdl-naughty\" project, I agree, this kind of component fits very well in another project close to react-mdl.\nI'd need to see how your project are integrated with react-mdl, but v2 will be quite close to v1 in term of feature and \"api\". Probably not a lot of breaking changes, so it should be fine. I'll be able to help and give more information when we'll be closer to the release of v2.\n. Yep for the checkbox, I reverted the decision to go only with controlled input. It doesn't make sense to do that. In my local changes, I handle both controlled and uncontrolled, I have to finish the tests before pushing it ;)\nI forgot to update my initial post about it.\n\nAm I right that this is your plan?\n\nYes it is ;) Everything controlled by props. Most components will be stateless. A few of them, like checkbox have to be stateful because of the controlled/uncontrolled way, or the table component.\n. I created a few tickets in the milestone 2.0: https://github.com/tleunen/react-mdl/milestones/2.0\n. Hey @HriBB, this is not really up to date ;)\nAt first, I thought it would be best to rewrite everything, but since they started to rewrite the components, I strongly believe we'll be able to mostly use them out of the box without having to rewrite a lot of things. So I'm waiting their alpha to play a bit with all this.\nNot sure if it's possible to try their v2 version before they hit alpha.\n. Yep this is doable indeed, with some tweaks ;)\n. Have you tried it? Everything works as expected with rollup?\n. I'm not able to reproduce the issue.\nSee this as an example: http://codepen.io/anon/pen/RapwNO?editors=001\n. Thanks @vitosamson, I'll investigate the issue.\nFrom what I see, because of the custom UI styles, we cannot directly set the value of the input field. We have to use the MDL function to do so (using MaterialSlider.change(value)).\n. Will be fixed in next version.\nBut, usually the slider must be a controlled component, thus you have to retrieve the value from the onChange event and update the value from the slider.\nIf you want to force a value, without setting the slider as disabled, you could do something like this I guess:\njsx\n<Slider min={0} max={100} value={this.state.value} onChange={e => this.setState({ value: this.state.value })} />\n. Ok ;)\nSo yep, you'll still need to \"force update\" the value, to trigger an update on the component, and thus update the UI for the slider.\nUnfortunately, until v2, that's the only way.\n. Yep, this is because you still need the fix I did in this commit ;) https://github.com/tleunen/react-mdl/commit/cd1253dc62ae546b14fb6ba47bc74524cd77d7a9\nI'll release v1.5.1 later today.. V2 is still experimental and will take a few weeks/months ;)\n. yep!\n. Unfortunately, it's a limitation of Material Design Lite, because the scrolled content is not the body. It's the content container.\nBut you can still scroll the container at the top using this\njs\ndocument.querySelector('.mdl-layout__content').scrollTop = 0;\n. The documentation always mentioned them as required, but it wasn't the case in the code. So in the latest version, I set them as required.\nThe slider is therefore not compatible with the \"uncontrolled\" way. I should change the demos to reflect that.\n. Not much probably...\nJust change this line to execute it only when a value is provided.\nhttps://github.com/tleunen/react-mdl/blob/master/src/Slider.js#L16\nA PR is welcome to change that.\n. The header was not visible in small screen. This patch solved the issue. What's the problem?\n. One is using React, the other nothing ;)\nBoth should look the same\n. Duplicate of https://github.com/tleunen/react-mdl/issues/255\nShould have been fixed in 1.5.2. What version are you using?\n. hmm indeed the error is still thrown... Yes it's safe to remove it, it's not used anyway since 1.5.2 :)\nUnfortunately, unless they change something in the base MDL lib, it's not something we can fix.\n. I'm not a typescript user, but indeed it would be great having the typescript description file for all the typescript users out there :)\nEven if I'm thinking about v2 (which btw will be fully React, without the initial material.js from MDL), it's still in early development. So if you want the typescript support asap, it's better to do it against v 1.5 first ;) Ideally, both versions will have a really close interface. Most components won't change.\nFor the conf table in the doc, it's manually, but I like the idea of scanning the component and generating it automatically :)\n. TableHeader.cellFormatter can take 3 params, but only the first one is really needed. The 2 others are just in some specific usecases. (String, Object, Number) which are the value in the cell, the row object, and the index of the row.\nYour definition for TableHeader.sortFn is correct. And the others as well.\n. I don't mind adding a typescript definition file in this project, if one of you guys want to send a PR for that ;)\nAs @alexeyzimarev mentioned, almost all elements can have intrinsic attributes.\n. I see that typescript are available in the DefinitelyTyped repo. See https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/react-mdl/\n. React and react-dom are not inside the bundle, you have to require them before including reactmdl ;)\nYou can use these urls: https://npmcdn.com/react@0.14.7/dist/react.min.js and https://npmcdn.com/react-dom@0.14.7/dist/react-dom.min.js\n. Oh I see.. Thanks for the clarification. I didn't get that at first.\nI guess it's because of these lines: https://github.com/tleunen/react-mdl/blob/master/webpack.config.js#L3-L4\nFeel free to submit a PR to fix the import names :)\n. https://github.com/tleunen/react-mdl/pull/272 \nIndeed, kinda make sense... So are the require('React') and require('ReactDOM') expected in the header of the output file?\n. I'll revert the specific commit.\n@PavelPZ I don't know your initial issue, but maybe this ticket will help you https://github.com/webpack/webpack/issues/1275\n. In v1.4.3 for example, we had this header:\n(function webpackUniversalModuleDefinition(root, factory) {\n    if(typeof exports === 'object' && typeof module === 'object')\n        module.exports = factory(require(\"React\"), require(\"ReactDOM\"));\n    else if(typeof define === 'function' && define.amd)\n        define([\"React\", \"ReactDOM\"], factory);\n    else if(typeof exports === 'object')\n        exports[\"ReactMDL\"] = factory(require(\"React\"), require(\"ReactDOM\"));\nSo I'm guessing if someone wants to use the bundled file, with their own code, they would need to configure their webpack to say window.React should be used when require('react') is done, right?\nI'm just unsure about these lines above. To me, it should be the name in lowercase...\nThis following like is ok though, since root is the window.\nroot[\"ReactMDL\"] = factory(root[\"React\"], root[\"ReactDOM\"]);\nOur config looks ok now so it should be fine, but still I don't really understand why it's these names\n. I don't know :/\nThis seems to be the real require function, not the webpack one __webpack_require__.\nBut it looks like are forced to use the same name for all cases.\nAnother example of this would be with ReactMDL. ReactMDL is the name exported on \"window\", but the package name is still react-mdl.\n. For the peerDeps, it should be ok, I used this tool to confirm http://semver.npmjs.com/\nGood news for the output targets. I'll give it a try when I get some time :) Thanks again @Download \n. Thanks for reporting the issue. It's an error in the documentation. You'll receive the event and you can get the value with e.target.value.\n. I'll release the fix in the doc later today when I find some time ;)\n. I fully agree with that, but that's how the original MDL works unfortunately.\nI don't see it changing before our v2 though.. Unless someone has a good idea how to resolve it in v1?\n. @kkpoon - What do you think of having the target props accepting a string (current behavior) or an element? If it's an element, the Menu will display the element and automatically attach the menu to it.\n. Yes I meant that. I'm still not sure about it since it's not something common in a React world :)\n. Thanks @greggigon :)\n. Did you include material.js?\nMy guess is that componentHandler is not defined.\n. Currently, react-mdl is tested against React 15 rc2 so, yep it will work with 15 ;)\n. Thanks :)\n. Will continue the typescript related questions on https://github.com/tleunen/react-mdl/issues/266\n. Indeed, because IconButton is basically a Button, it can also accepts all the props from Button.\nThe thing is, I don't think it makes sense to put them in the code. I think eslint will warn of unused props if it's the case. So maybe it's something that should only live in the typescript definition?\n. Thanks for reporting the issue @alexeyzimarev. I don't see any issue on the website. Can you try to put your code on a codepen and share?\n. @alexeyzimarev could you check the description file? I'd like to have your input since I know nothing about typescript...\n. I'm not able to reproduce the issue with a simple example (http://codepen.io/anon/pen/MyQYxy?editors=0011)\nIf the issue persists on your side, could you setup a small repo example?\nThanks.\n. Thanks for reporting the issue @mpolichette.\nGood to know it works well with redux-form :) I'll make sure to fix the issue in the next version.\n. Thanks for reporting the issue @Kuirak.\n. Thanks @samoshkin. I made a fix to retain the className from the child. At the same time, I also retain the className from the badge component itself, so you'll be able to write this:\njsx\n<Badge text={notSeenPendingOrderCount || null} className=\"OrderTabs-tabNewText\">\n    NEW\n</Badge>\n. Thanks @samoshkin for the great bug report! I'll use your repo to help me find the root cause to this.\n. Thanks a lot @samoshkin for the bug repo. It helped me a lot having quickly a test example and work a fix on it.\nI moved the button in the layout so I could easily toggle the footer.\n\nA fix will follow soon :)\nThe fix is mostly inside the patched version of MDL. Instead of letting him creating a dom element for the  layout inner container, it's created by React. Thus it knows where the node is.\n. Released as 1.5.3 :)\n. Could you explain a little bit more what this fixes?\nAlso, this fix would need to also be in the minified file, and all the other css files as well. I'd need to regenerate all files since I already have a setup for that. (We have to generate the files in the MDL repo)\n. @jdrmar I'm closing this PR, I think the issue is resolved with the fix I did in https://github.com/tleunen/react-mdl/issues/280\nLet me know if I'm wrong.\n. Thanks @drager for the contribution!\n. In React-MDL, tabs works a bit differently than in the base MDL lib.\nHave you seen the example? http://tleunen.github.io/react-mdl/components/tabs/\nBased on the tab id, you can decide what to display.\n. Are you sure stackoverflow is not an empty array?\n. Not sure about the function there...\nWhat if you replace that with this?\n{this.state.activeTab == 0 && \n                               this.props.stackoverflow.map((stack, i) => (\n                                    <div>My item.</div>\n                                ));\n                            }\n. You can also import them in your entry point with webpack for example ;)\nSee https://github.com/tleunen/react-mdl/blob/master/docs/pages/_template.js#L11-L12\n. Thank you @darkyen! :)\n. Hey @darkyen, any update on this one? ;)\nI might jump on it tomorrow, since I'd need it to finish something in the new tests for the Table components.\n. Np ;-)\n. Closing this for now while rethinking about v2\n. Try the new implementation using the new MDL v2 code: https://github.com/google/material-design-lite/blob/master/src/slider/slider.js\n. No rewrite required. It's an error\n. It's definitely the way to go, but it can be hard to achieve now with the current css. mdl-layout--fixed-drawer is applied on the layout, not on the drawer :s\n. Thanks @Download for the investigation.\nI'll revert the commit in https://github.com/tleunen/react-mdl/pull/299\n. Looks good @Download!\nThanks :)\n. If you register these events, wouldn't this override the default upgrade and then never upgrade the elements?\n. Oh nm, I see... So basically, you'll trigger the initialize manually instead of automatically onload, is that right?\n. Something is weird, I just remembered that I added this line to make server rendering work https://github.com/tleunen/react-mdl/blob/master/extra/material.js#L4\nSo in theory, the file should not even be executed.\n. Merged in master.\n. Yeah sorry, for some reasons I thought the issue was on server, but after reading again it it was clear it was the client ;)\n. I'll investigate this weekend if we can remove the onload event. I believe we can, because as you said we already upgrade/downgrade everything on mount/unmount.\n. Yes please update the PR to remove the upgrade call.\nWe cannot remove the class because some users could use it.\nAlso, this also needs to be in the minified file. I can regenerate them if you'd like. I always have a \"fork\" of material-design-lite with my patch.\nThanks ;)\n. Sure, no problem. Will manually merge the PR with the updated patch and the minified file\n. Manually merged. Thanks @Download \n. The problem with a automatically generated id is that you cannot really guarantee that you id will be the same between the server rendering and the client rendering... That's why it was based on the label.\nFor the fact to allow custom component for the label, I don't have anything against it, except I'm not a big fan if this syntax. It doesn't seem very \"React\". Maybe I'm wrong.\nOne other thing could be to have labelComponent prop. It would give something like this:\njsx\n<Textfield labelComponent={FormattedText} label=\"MyLabel\" id=\"foo\" />\nMight be a bit better. I should ask some other React devs to see what would be the best.\n. I'll go with the component inside label ;)\n. Not that I'm aware of ;-)\n. Auto generating things is not that great because of server side rendering, you would need to have the same id on server than client to prevent a re-render.\nI agree using the label as \"id\" is not great, but you can pass your own id to the Textfield and this id will be used instead.\nI wanted a way to easily create a textfield without forcing to specify an id. But this might change in v2.\n. Agreed. but how would you generate the id in order to have the same generated one between multiple render (server/client)?\n. You can have a pretty good random string using just Math.random().toString(36).substr(2).\nBut the problem with this is that you won't get the same id when rendering multiple times, so this is an issue. No everybody uses server rendering but this is still something to keep in mind while building a library...\n. I agree with you for the purpose of them, but at the same time we have to find a way to not trigger a second render when going from server side render to client side render ;)\n. An id is required to have a full a11y coverage.\n. Thanks @kctang. Currently, it's not as easy as it seems to be to offer this possibility.\nThe button is located inside the Layout component, but this is an option that should live in the Drawer component :s\nWe can think of something for v2, but for v1 it will be hard... Unless someone has a good idea how we could do it.\n. Thank you for the contribution @Chun-Yang \ud83d\udc4d \n. From a code point of view, it looks good.\nBut i'd like to test it visually to see if it's ok. My main concern with using a specific element for the label is that it won't get the MDL classname, and because of that, the UI could be quite bad.\n. Yep it might be better, indeed :)\nIn most cases, this should be fine since it will be links (your case) or component used for i18n (like FormattedText, which is just text in the end).\n. Yes, because they are SFC.\nWhat's your usecase?\n. Better to wrap your component in a class component to be able to use the ref if this is your need.\n. Thank you for the bug report @noisecapella. \nI can see what we can do, but it's definitely low priority to me since you're not supposed to provide an empty onChange if you're specifying a value.\n. Oh I see.. So yes, it really looks like a bug\n. This looks more complex than I thought... When the value doesn't change, the component doesn't get re-rendered. But at the same time, the input loose its value. I wonder if this could be a React issue instead.\n. Looks like shadow={3} doesn't work, but the others seem to be fine.\nYou can see in this file we only accept a number from 0 to 6 (included): https://github.com/tleunen/react-mdl/blob/master/src/utils/shadows.js\nAlso, currently the prop value doesn't match the real shadow value, this should be improved (and add the missing values (see https://github.com/google/material-design-lite/blob/master/src/shadow/_shadow.scss)\n. At first, I believed it would be best to let the end user register the polyfill, but in the end I don't think it was a good idea.\nThis should be resolved in v2.\n. I believe MDL will soon have a date time picker. See https://github.com/google/material-design-lite/pull/4187\nOnce it gets merged (or even before), someone can help me implementing it for react-mdl ;)\n. MDL is progressively getting deprecated so, it's better to look for the new React-MDC library that @idancali is planning to create.\nAlso watch this https://github.com/material-components/material-components-web/issues/54. Thanks @tetsuyainfra. For some reasons I missed this PR and I'm very sorry about that :/\nWith this change, I believe both the tooltip and the element will get exactly the same id, and we can't have twice the same id in the same page at the same time :/\n. Yes I totally agree using a random id is not optimal at all.\nI believe the best way would be to move the element as a child of the tooltip. That way we know the element without using any id. But it would also require a change in MDL I believe... They're working on their V2 so maybe we can suggest this change if it's not already planned.\nsee https://github.com/google/material-design-lite/issues/4495\n. Clicking an entire row or column is unfortunately not possible, but you should be able to put a button or any other component in a cell with a custom renderer (with cellFormatter).\n. Are you sure? I checked the build on npm and everything looks ok.\n. Oh I think you're right. Only the specific components seem exported here https://github.com/tleunen/react-mdl/blob/master/src/index.js\n. Do you load the material.js file before using React-MDL?\nThis is required to get the upgradeElement. Read: https://github.com/tleunen/react-mdl#requirements\nI know this is not ideal and will be resolved in the next major version.\n. Btw, to resolve the undefined issue when using this import ReactMDL from 'react-mdl';\nYou can use this instead:\njs\nimport * as ReactMDL from 'react-mdl';\nBut I highly suggest you to grab the specific components you want by using the direct path to the component react-mdl/lib/Button or using this syntax: import { Button }  from 'react-mdl.\n. It really depends on what you want to center. Your datatable example will indeed work to center a datatable.\nFor the example you mention in the first post, the article template, this is done because it used the Grid system. There is a 2 empty columns sized before the \"main\" part. Also, this system allows to automatically hide the 2 first columns when the view is in a \"mobile\" or \"tablet\" mode, to keep 100% width.\n. Indeed, it will be best to fix these small issues:\n./src/Grid.js\n  40:30  error  Unexpected block statement surrounding arrow body  arrow-body-style\n  40:30  error  Missing space after =>                             arrow-spacing\n  40:66  error  Missing semicolon                                  semi\nThanks for your contribution!\n. Thanks @Undeadlol1, I'll merge it tonight after adding the new props in the documentation :)\n. Could you please create a codepen with the reproduced issue? Tried with the demos on the react-mdl website and I can't reproduce it.\n. Closing due to inactivity.\n. Thanks @Download, I'll take a look tonight to resolve this issue. I've been busy like hell this past few weeks but I'll try to come back to this development, especially since the MDL team started development on their v2 as well. I have to see how we can use/reuse their stuff.\n. Thanks @Download. I think it's safe to say it cannot break anything ;-)\n. Afaik, there's still no select component inside MDL :/ That's why we don't provide one here.\n. Hmm.. You're right. Initially we did that to limit the content to a single item. But with the current state of the menu, it's not compatible :s \nA PR is welcome to address this issue. Should be trivial. Probably just need to remove this: https://github.com/tleunen/react-mdl/blob/master/src/List/ListItemAction.js#L5\nThanks @adamdawkins \n. Usually I set children as an exception, but I agree we should set it as node instead.\nThanks!\n. Thanks @zckrs !\n. Hmm.. Just tried on codepen and everything seems ok: http://codepen.io/anon/pen/VjmNad?editors=001\nMake sure the styles are loaded properly in your setup\n. Your imports look ok. Maybe the issue is inside your css loader?\n. Is this working for you now @jasan-s ?\n. Unless I'm missing something, 15.1.0 is already covered\n. But the current peerDep also covers 15.1.0.\nNot sure to understand why it doesn't cover 15.2.0-rc.1 though :/ https://semver.npmjs.com/\n. Currently, the drawer is part of the layout component, if we add these options/props, it would require a way to communicate between the drawer and the layout, or simply have them on the Layout component.\nI know the MDL team will work on a better layout/drawer system in their V2, and I'd like to also improve all this in our V2 (related to this https://github.com/tleunen/react-mdl/issues/295), but currently with the state of v1, it seems hard to achieve... Unless someone has an idea and I'm all ears!\n. We could make icon to be a string, or a component.\nThat way you can use an image, and put events on it.\nAny help is welcome.\n. I just checked, and <ListItemContent> already allow for a string or an element. So you can build an image before sending it to the component.\nClosing it.\n. The bundle file does not include React.\nFor the ref, the Textfield component set a ref on an input or a textarea, but that's the only ref, which is valid.\nCan you share some code to replicate the error?\n. Yes currently, the only way is by managing the paging yourself. There's no solution in MDL at this moment afaik. \nNote that the Material Design specs has a section for pagination but we'll have to wait for MDL to add the css for it before implementing it in react-mdl: https://material.google.com/components/data-tables.html#data-tables-specs\n. Yes, @Brickpsp is right, you can use the cellFormatter to format the content the way you want :-)\nI'm closing this ticket, let me know if you still have troubles with this feature.\n. Yes, this issue has been reported a couple of times already (even if I can't find the previous tickets :/).\nI have no idea why the scroll doesn't work after opening a modal. I would definitely need to investigate this. \nFeel free to jump in and help me to find a solution ;)\n. Chrome doesn't use the polyfill, because Dialog is natively supported. So it might be a bug with the native Dialog then.\nI can reproduce the issue quite often, but it's not 100% repro. I don't really know what could be the conflict here.\n. Duplicate of #253 \n. I'll try to make a bit more fixes and changes before releasing a new version early next week. Please be patient :)\n. You shared with me this codepen: http://codepen.io/xdvarpunen/pen/LkykVK?editors=1011\nSo you're trying to log the state right after setting it. This is the issue. setState is a synchronous operation, so sometimes you might not have the right info if you log just after setting it.\n\nsetState() does not immediately mutate this.state but creates a pending state transition. Accessing this.state after calling this method can potentially return the existing value.\nFrom: https://facebook.github.io/react/docs/component-api.html\n. Hey @sontek, \n- You can add logic (inside the component or outside, depending on your app) to check the data before submitting it.\n- I believe it's because of the default rendering of the required textfield (I remember seeing a ticket for that in MDL). One way could be to not set it as required and manage the error youself (with the error prop).\n- Same thing, you can do that by managing a state (inside your component or outside)\n. The MDL should provide each component as a standalone module, so we should be able to leverage that in our implementation. Unfortunately, they currently have no plan to release anything, even a pre-alpha version so we can't really know how it will be done.\n. Thanks @traviskaufman for the update.\nI'm following the v2 very closely and I can't wait to get my hands on this alpha to see how we can use the new components inside react-mdl :) From what I already saw for the already created v2 components, it will be a lot easier. Especially for the css.\nI'll check if we can start trying to use them even before the alpha (by getting the sources and compiling them on the fly for example) to see what are the problems we could encounter once you hit alpha.\n. Thanks @Undeadlol1, make sure you're up to date with master ;)\n. The default value is actually 4 (when the css class is not set). Should we use the same default or set it as 12 (or 4 or 8 depending on the platform)?\n. In their doc, here's what they say:\n\nmdl-cell--N-col          Sets the column size for the cell to N          N is 1-12 inclusive, defaults to 4; optional on \"inner\" div elements\nhttps://getmdl.io/components/index.html#layout-section/grid\n. Gotcha. Could you squash the commits, make sure you're updated with the latest master and I'll merge ;)\n. Mo worries, I can do it if you have issues with it.\nSquashing is done by doing an interactive git rebase git rebase -i (See https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages)\n. I just committed manually the PR :) See f4e0a47fb964ade189fe002eec9c02bb970a494c\nThanks for your contribution @Undeadlol1 \n. @Undeadlol1 I will actually revert the change, because the default value is 4, not 12. See this: https://github.com/tleunen/react-mdl/blob/master/extra/material-grid.css#L790\nOk the default depends on the viewport size, but still, it's not 12. I will remove the requirement of the prop, but I will not set any default.\n. I agree, it might be weird, but for some reasons, that's the default value the MDL team came up to.\nI would suggest you create a ticket under the MDL project to potentially change the default width to 100% (equal to col=12).\nThere's no reason why we would change the default behavior of a cell in react-mdl compared to mdl. It might confuse the users if we don't use the same defaults.\n. Please create a ticket upstream, just so we can see their thoughts on it.\nAnyway, this would be a breaking change so we can't really change this now\n. Yes, it's a good idea to do that :) https://github.com/google/material-design-lite/issues\n. Perfect, thanks @elasim :)\n. Yes we could define a custom proptype checking this.\n. When you don't set any col value, the component uses the default value provided by MDL, so it doesn't seem needed.\n. What are you trying to achieve?\nThe Layout component should be the \"root\" (or really close to the root) of your app. The \"main content\" is a child of the layout.\nYou can see examples here: http://tleunen.github.io/react-mdl/components/layout/\n. Yep currently, there's no other way. You can still make them in a separate component and decide to show/hide the header if needed though.\n. The value inside the array can be 3 things, in this order:\n- The value of rowKeyColumn from the row,\n- The value of key\n- The index value\nSo if you set a rowKeyColumn, which is suggested, it will use that :)\n. The React is not defined is an issue only on the website, not sure yet to know why it's happening.\nThanks for reporting the issue with the Tabs, will definitely take a look at it.\n. Yes. Thanks @tb I still have to go through each component and see what are the ones causing an issue with this new warning. But in the meantime, it won't produce any UI issues.\nNot sure yet which solution would be the best between:\n- Use of eslint comment\n- Use of lodash.omit\nWhen you use a minifier to remove \"unused variables\" I don't know what would be the result when the unused variable is inside a destructuring assignment.\n. The ripple in tabs has been fixed in #376.\nFor the unknown proprs mentioned by @tb, most of them seems to be from your own app :/\nCo I'm closing the issue for now.\n. Hi @GolanPachu , the best way is to check the field yourself and set the error prop in case you want to show the error under the field.\n. For now, there's no plan to create extension components to the original MDL library. With the v2, we might want to revisit this, but at this time this is not planned.\n. Hi @1j01, \nI understand the way you do to use the library will also work, but most users will use webpack or browserify to bundle their project, and therefore include react-mdl using the same way.\nEither way, I also believe a \"getting started\" document might help people to better understand how to use the lib. Would you want to help on this?\n. Having it in the readme is fine, unless it becomes too big. Either way, we can start with that and move it in another file later if necessary.\n. Looks way better than what we had before ;) Thanks @1j01 \n. Hi @dimik,\nThanks for reporting the issue. Is it happening because you're creating the drawer manually?\n. Indeed, you can pass a custom component prop to the component to specify the component you want.\njsx\n<Tab component={Link} to=\"/\">Home</Tab>\nBut to be honest, I'm not a huge fan of this syntax. Instead, it should be the way you thought it was. This will probably be updated in v2 ;)\nNote that you'd still need to listen for a onChange event on the Tabs component to setup the right active tab for the styles.\n. Yes I agree, Tabs should automatically set the active state on one of its children, and thus avoid the end user of doing it.\nI wonder if this could be done in v1.x without creating a breaking change, because users are already using an onclick to setup the active tab (mostly only for the active purpose I guess because most users would probably use something like react router)\n. Thanks @abrabah, could you make a PR against the master branch instead?\nThe website is getting automatically generated based on the things in /docs ;)\nHere's the file you probably want to edit: https://github.com/tleunen/react-mdl/blob/master/docs/pages/components/textfield.md\n. Thanks \ud83d\udc4d \n. Thanks a lot @MichaelBitard :)\n. Great! How would you check if it's an iterator or immutable-js object?\n. Could you provide portion of your code or an example so I can reproduce it easily? For example on codepen.\nFor example, if you provide rowKeyColumn in your table to map the key to one property of your dataset, you should not have the issue. The issue might happen if you keep the index as the key.\n. Thanks for reporting the issue @jdelafon. Are you able to reproduce the issue outside of your project, in a small example for example? This will help me finding a proper fix to this.\n. The thing is, you should not upgrade/downgrade any of the component yourself, if you're using components from react-mdl.\n. Because it looks like an issue with react-static-boilerplate, I'm closing the issue.\n. Hmm Do you have an example?\nHere's the output I see:\ncss\n@media screen and (max-width: 1024px)\n.mdl-layout--fixed-header > .mdl-layout__inner-container > .mdl-layout__header {\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex;\n}\n. Thank you @igorsantos07! But it's against the wrong branch ;)\nCould you create a new PR against master and update this file instead?\nhttps://github.com/tleunen/react-mdl/blob/master/docs/pages/components/tabs.md\n. Hmm I believe the documentation is wrong. There's not really any \"default\" for this value because we need a way to not have any shadow at all.\nCurrently, the shadow system is quite bad, the value doesn't mean anything and I'm hoping to improve this in v2.\n. Sure, I'd like that. Thanks @milotoor.\n. Hi @HriBB, yes, I also believe it could be great, especially for the demos/examples. But I wonder how easy it is to customize the generated website to make it look the way you want.\n. >  I've been playing around with it and it's really cool because you can easily create different scenarios of the same component.\nI agree, I've also been playing with it for another UI library and it works very well. I'm really interested in using something like this (or like carte-blanche) for react-mdl if we can customize the generated website.\n. Hey @edwardGunawan, thanks for reporting the issue. Could you please setup a small codepen or even repo with the issue so I can easily reproduce and investigate why this is happening?\n. Users could use custom css for custom styles so yes unfortunately this is required :/\nWith v2, this process will be a lot easier and users will be able to customize the styles using settings file instead.\nBe patient ^^ ;)\n. hey @HriBB, great work! I haven't had the time to really take a look at it yet, but if you want to add a mention to your component in the readme and/or website, feel free to send a PR ;)\n. hey @HriBB, this is very interesting.\nFrom a first use, this doesn't match the exact MD guidelines but I guess it wasn't your objective. \nFor the multiselect, I believe using the new \"Chip\" component would be best, also having them inside the input instead of outside.\nVery good job.\nClosing because it's not an issue initially ;)\n. Yep I agree :/\nMaybe you would need to build something custom, just for the chips. Something like this demo: https://material.angularjs.org/latest/demo/chips\n. If the user pass an immutable-js list instead of a plain array, and we're using array functions on it, how will it work on the immutable-js structure? Does it has the same functions?\nLike, .lenth(), .slice(), .map, etc?\n. Hmm indeed, it seems the window.innerHeight is more appropriate.\nThanks for the report! And yes, a PR is always welcome :)\n. Thank you @milotoor!\n. Thanks @pablocubico!\n. Not sure to understand why this is failing with string refs, but I definitely agree to change all string refs for string callbacks ;)\nDo you want to help on this? A PR is very welcome :)\n. I'm not sure we should specify all props on Tab, because most of them are added by the TabBar.\nMaybe only component should be specified?\n. Hi @igorsantos07, just by curiosity, could you show me the generated html for the tabs? I wonder if there's the is-active classname on the active tab or not.\nFor the ripple, I know of an issue where sometimes the ripple is not triggered when using the click on a laptop trackpad.\nNote: Do you know you could also use the <HeaderTabs> for your use case?\n. You can see an example of HeaderTabs in this page: https://tleunen.github.io/react-mdl/components/layout/ (at the bottom).\nBut it seems you've found an issue when using a custom component. I'll try to setup something to reproduce the issue with react-router Link. (Unless you already have a codepen reproducing the issue?)\nThanks for reporting it!\n. I can see the underline on my end. Just by curiosity, can you reproduce your underline issue on MDL? https://getmdl.io/components/index.html#layout-section\n. Not sure yet why it doesn't work in your example while it works in our website. Definitely related to #394 so lets keep the discussion there\n. Yay :/\nI believe I'll make a monkey patch on the MDL side to remove the href check to show the panels. It doesn't make sense in a react world.\nTrying to fix it since the beginning with the href but it definitely doesn't work.\n. The way I currently patch MDL is by fetching their 1.2.0 version, applying my current patch on it, and then modify the things I have to update. Generating the new MDL version with the changes (with gulp all on the MDL repo). Then creating the patch from the changed files/commits.\nI'll try to do this tonight after work, but if you want to do it, go ahead ;)\n. Sorry @HriBB, I'll probably do it later today.\n. Looks good, thanks @pablocubico !\n. I agree, I implemented it in our own library at work. But I'm not sure about it for MDL, I don't see it in the initial spec :/ (See https://material.google.com/components/data-tables.html#data-tables-specs)\nMaybe you can ask the MDL team? https://github.com/google/material-design-lite\nIt might just be something missing in the documentation. \nBut yes this can be done quite easily in react-mdl. I just don't want to do too many things that are not in the MD spec, or the MDL library.\n. Thanks for reporting this @igorsantos07 \n. They should already support it, do you have an example of a component which doesn't support it?\n. Good point, I forgot about that.\nIt's hard to fix before v2 though. In the end, component should have a custom inputProps instead of applying all props on the input instead of the root element :/\n. Thanks @gaearon!\nYep, importing the files from the javascript is probably the way users will use the most. Not specific to \"create-react-app\".\n. Thanks @ahoereth. \nFor the header, I've tried the example with the basic MDL lib and I can reproduce the exact same issue. See: https://codepen.io/anon/pen/JRYxWx\nTherefore I'd suggest you to file an issue on the MDL repo to make sure they fix the issue in their v2. https://github.com/google/material-design-lite\nAbout the footer, I don't know yet what are the plans for v2, but in v1, the footer has to be inside the \"content\", not outside.\n. I don't think the MDL team made something to make it sticky, but I might be wrong\n. I believe you might be able to skip the use of react-mdl/extra-material inside a nodejs env.\nHave you tried it?\n. Indeed, for that purpose I usually use react-portal (https://github.com/tajo/react-portal)\nWill take a deeper look in the following days ;)\nFor the PR about readme/documentation, I'm always interested in these ones. Having a good doc is very important for me :)\n. Would you be willing to help with the v2 port? I'm seeing a lot of progress on their side and I'd like to start rebuilding react-mdl using it.\nI'm available on discord if you wanna talk about it :) https://discordapp.com/invite/0ZcbPKXt5bWTpxL5\n. Sorry for my silence once again :/\nI believe they will plan for an alpha release before the end of the year. That's what I guess based on the number of open tickets.\n. With the last version of react-mdl, you should not have the error on the querySelector anymore. But you'll have to use our monkey patched version of the MDL lib by using the file located under /extra.\n. Thanks for the jsbin, I'll take a look.\n. Are you talking about Tabs in the HeaderTabs, or the generic Tabs component?\nBecause these tabs work fine, I can see the ripple for example, same for the HeaderTabs in the example with the 6 tabs.\nWhat's your issue exactly?\n. Hmm weird, it looks like it doesn't get upgraded. I'll investigate\n. Thanks for the info @Place1.\nI'm very busy still for a few days so I won't be able to take a closer look and find a fix. So any help is welcome\n. Good catch @DirtyHairy! I'll take a look at the PR tomorrow.\n. Merged and released as 1.8.0\n. Both actually exist, but because the MDL team is using the term data-table, I'd prefer keeping DataTable as the suggested name for now.\n. Thanks @gabrielperales but we don't need to manually update gh-pages. This is done automatically when a new version of the project is released.\n. I don't think there's an easy way of doing it, but you can ask on the MDL repo: https://github.com/google/material-design-lite\n. Sorry @Augustin82, I've been busy with some other things recently and couldn't spend much time on react-mdl :s \nSo after a quick investigation (to remind me how the Table works), className is mostly used internally to set the row as \"selected\". While I believe it's ok, I also think it could conflict with the row data, especially if the row data already has a className or style property.\nI believe for v1, we should be fine, but for v2, I'd prefer having a special prop, maybe something like __mdlRowProp or something very unlikely to be used as a data prop to avoid any conflict.\nThoughts?\n. On a cell basis, it could be a bit more complicated to do so. To allow that, each cell data must be an object, with the special style key inside. Which will require users to create a new array of objects. Initially, the way I designed the table was especially to be able to take the raw data from an API/DB and use it inside the table with only the keys we want to display, without manipulating the data (or manipulating while we're displaying with the cellFormatter).\nIt really depends on the use case, if there's one important use case for that, we might support it, otherwise it doesn't look necessary. Most of the time, a user should be able to achieve what he wants with a custom cellFormatter.\nI believe your implementation is fine for now, maybe just check style is an object before adding it in the element?\nAnd maybe rename it with _mdlRowProps, while adding support for custom className and style? Having a generic props would also allow to add onClick event and other things on the tr\n. Sorry I was away this weekend and came back yesterday, will make sure we merge this asap ;)\n. I thought I asked why doing {...{ style, onClick }} instead of just passing all props { ...mdlRowProps } because if the user wants another event on it, like onDoubleClick or onMouseOver, we'll also need to add them. We can't really maintain a whitelist imo.\n. Thanks @Augustin82 and sorry again for the long long delay\n. Currently no, but this is something we could easily export as well...\n. Thanks for reporting the issue, I'll try to take a look in the next few days\n. There's currently no way to click on an entire row. You would have to add a button or something in a column to achieve this\n. If you set a custom cell formatter to display a link that takes the entire space, I believe it should work ;)\n. You should be able to decide when the material css is loaded, because it's a step you have to do manually.\nHow are you using it?\n. Could you also load your own styles the same way?\nOn Wed, Sep 21, 2016, 8:32 AM Hugo Heneault notifications@github.com\nwrote:\n\nWith a import 'react-mdl/extra/material.js'; statement.\nI think this is the reason why it's at the bottom of the footer\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tleunen/react-mdl/issues/402#issuecomment-248597694,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB4ZV9DwoeA63FsXnkcLhqziAbBI3La1ks5qsSPKgaJpZM4KCcxz\n.\n. The title in Header can receive an element instead of a string, so you can pass a link.\n\njsx\n<Header title={<a href=\"/go\">Title</a>}>{...}</Header>\nThe drawer also supports this.\n. Do you mean that if you select a row with the table unfiltered, then filter it in order to remove the selected row, and then change the filter again to see the row.. The row should still be selected?\nIf that's the case, maybe we could add a prop to check the value of something in the row instead of relying on an internal state.\nSo let's say you have your person with this:\njs\n{\n  name: 'X',\n  lastname: 'Y',\n  selected: true\n}\nThen we could add a new prop on the table, something like selectedRowKey (or maybe rowKeySelected to match the other rowKeyColumn :D)\n. For the pagination, it really depends on how it's built. I have a similar component at work and the selected elements are kept in memory, it doesn't care if there's an pagination or not ;)\n. Weird, I cannot reproduce it with the same version of Chrome, but on macOS Sierra.\n. This is not really required because we're forwarding all unknown props to the input.\nDo you have any reasons to specifically set the proptype?\n. Maybe a temporary error with Chrome? If you still have it, try to fill an issue on Chrome, but unfortunately it doesn't see related to react-mdl.\n. Anyone willing to take the lead?\nI can create an org and invite several people but having someone to really drive the project might be best as well\n. Hi @idancali css modules were indeed in the plan. For the sass direction, it really depends. For the core MDL, I didn't plan to write any css because everything should already be done by the core MDL team. But for new \"plugins\" (eg. components which don't exist in MDL), yep, why not...\nIt would be great if you're interested in taking the lead on the project make the transition to MDL v2 ;)\n. That's great! I will create an organization and move the repo there, and then invite you and some other contributors. Any suggestions on the name? Just use react-mdl as well for the name?\n. Good catch for the SFC upgrade. Initially, I let the component which required upgrade as class, and Tabs didn't need it. But this was before trying to fix it and then I forgot it was only for class component.\nI'm glad you fixed it for the SFC. And good catch for the reason why it worked in the documentation, but not when users would use the component.\nThanks again for the investigation and the fix. Before merging, because of the change in the upgrade function, I just want to double check the code locally and see if everything is still ok.\n. Hi @DirtyHairy, I've tested the PR against the documentation and I have noticed the tabs and ripple inside the Layout header doesn't work properly. An error is thrown in the MDL Ripple about calling style and classlist on undefined.\nBut it looks fine for the Tabs component!\n. > I have modified HeaderTabs to explicitly add the tag class, which removes the race.\nCould you explain this?\nAll the changes you made make sense now that the doc doesn't auto upgrade everything in the page, I'll double check just to make sure ;)\n. I don't mind adding it for consistency, but in theory, because Badge only clones the child, you can pass the onClick on the child directly\n. Nice one @HriBB!\nI can totally see them under the react-mdl org if you'd like ;)\n. The website is autogenerated, that's why ;) The code lives here if you want: https://github.com/react-mdl/react-mdl/tree/master/docs\n. Currently, it will fail, because the RadioGroup is attaching custom props to every child.\nThis would need to be redesigned to allow other child types.\n. Thanks @DirtyHairy :)\n. It's definitely not the best and most accurate :) Not anymore at least.\nI'd suggest using these ones from Google: https://github.com/material-components/material-components-web, or something like React-Toolbox. Yes. Or using a className instead ;). Sure. The library was built before the introduction of PureComponent and it hasn't been updated to this new \"component\". But a PR to add it would be a great idea.. Looks like it's an issue in the Material Design Lite project itself. Can you report the issue there please?\nSee these lines:\nDefault color: \nhttps://github.com/google/material-design-lite/blob/mdl-1.x/src/layout/_layout.scss#L197\nHardcoded to black under the media query:\nhttps://github.com/google/material-design-lite/blob/mdl-1.x/src/layout/_layout.scss#L213. Looks good, but the proptype is missing for this id. Could you add it please?. Make total sense, thanks @kradio3 . @idancali What's your call on this?\nShould we update/change name (react-mdc?) of this package? Do you prefer creating a brand new one for the new implementation, or keep react-mdl for the new implementation.. It would be awesome, indeed. \nTry contacting github, and the author of the org if you can find an email. I'm sure there won't be any problem.. The person who seems to own react-material is @lkarthee. I found his email from one of his commits. Wanna try sending him an email directly?\nHis email is his github username [at] gmail . It might also be a good idea to sync with @haoxins. He created https://github.com/haoxins/react-mdc. React-MDL will probably not update. Unless someone else wants to take the lead and build something.. Thanks @awjreynolds . You can use <Textfield type=\"password\" /> to achieve the same thing.. Not really needed because all the extra props will be passed to the input field. Thank you though.. Make sense. Thank you for the contribution @carlbarrdahl . Hi @extend1994,\nI'm not sure it's interesting to have all versions on CDNJS, especially the ones before 1.0.\nAlso, this library is getting deprecated, if not already, in favor of material-components-web, so I'd say that only the latest version could be on cdnjs. There's a very low chance we release any new versions here.. Thank you @jguffey . Thank you @adam187!. Don't even know why it was * as React :) Thanks @samerbuna . None. This project is not maintained anymore.\nGo for react toolbox ;). The project is not really maintained anymore so I guess we could easily remove them and I can remove the integrations too.. Any reason why your autocomplete searches inside the react-mdl code?. I see. I'm afraid there's no real fix then. We provide all the possible css files to let the user use the one they want.. You're right. I'll archive it.. children not needed, you can safely remove it :)\n. Should be Navigation (without 's')\n. Should we replace this with the new <Spacer /> or remove it?\nI don't see any use-cases where we would not put a spacer between the title and the children/navigation...\n. indentation is not right here. Please uses spaces :)\n. using typeof shadowLevel !== 'undefined' would be better in this case, so if the property is not provided, we don't put any shadow on it.\n. The problem here is that we try to avoid making modifications to the base MDL library. And the code you're removing here is the reason why the Tab(s) component doesn't implement the upgrade function.\nIt would be better to find another solution to resolve the issue without making any modifications to the parent library. If this is not possible, it would be interesting to ask on the MDL repository if we can find a better way to handle this case. Maybe just add a check on the href before trying to reset the panels should be enough and maybe they will accept this small change.\n. tbh, I think the best thing to do here is submit a PR in mdl to add a check before reseting everything. (it would be a safe check for them but \nAnd then we should be able to upgrade the element :)\n. Shouldn't this be PropTypes.element ? Or if we want to allow string as well (but not sure we want that), we could do a oneOfType...\n. Use PropTypes.string instead\n. Actually, no need to get the href since it will be inside otherProps. Since we do not make any changes to the value, that's fine.\nBut this could give an eslint error since it will be defined as a prop but \"never\" used? Could you test?\n. :+1: \n. Yep but I think it's not valid for href. href has always been used as a string, so people know they should put a string in there, nothing else. If you write a custom element taking a non string href, maybe you should rename it ;)\n. You're right ;)\n. Why would we export the component?\n. Seems like it should go inside the utils directory\n. But for your example, you could use the component we provide as well.\nNot sure the export is needed. Because if the end-user needs access to it, it means something is missing in the library ;)\n. Yep, but it's more of a \"helper\" than a real component :)\n. So for components using this helper, there are now 2 indirections:\nMDLUpgradedComponent\n    MDLComponent\n        Component\nWhile if we reverse the helper function and component, we'll have only 1 indirections in most cases.\n. Creating an anomymous function every render is not optimal. It's way better to keep the _handleChange ;)\n. Let me know when it's fixed and I'll merge\n. why not just this.props.text?\nDoes mdl render something if it's an empty string?\n. state should be on the instance inside the constructor, not static ;)\n. Hmm weird. Do you know if there's already a bug about that on react?\nSeems weird the behavior from a stateless component is different in React and in a Shallow renderer.\n. any reason why it's not required anymore?\nUsually, React wants us to provide an onChange callback if we set a value.\nThis is valable for every input.\n. Why it's not required anymore?\nCreating a Slider without the min/max doesn't make any sense\n. Same here, I can't think of a scenario where we won't set the callback\n. It's needed. Upstream set the value so there's no reason we don't do the same.\n. Same, isRequired?\n. Yeah the only reason why I see onChange not beeing required is just for prototyping because otherwise you have no way to get the value from the input.\n. seriously?! Either you use react, or you don't...\nI understand it's nice to be generic, but I think there's a limit to that lol\n. Indeed. It seems they have a default min-max of 0-100 with 20 as the default value.\nAgreed with disabled. \n. I was taking about the tabIndex ;)\n. Yep, I think it's the default value. Might be better to ask upstream why they specify the tabIndex value then before changing it here. Because they have it in all their demos.\n. Could you open an issue upstream to ask them and follow up on this?\n. :+1: \nI wanted to add it for a long time now\n. --report lcovonly --report html instead?\nNo need of the other exports\n. should be ../src/Layout :)\n. Sounds like a good candidate for reusing the basicClassCreator helper.\nYou can see these 2 as an example: https://github.com/tleunen/react-mdl/blob/master/src/Card/index.js#L4-L5\nYou can keep the tests though\n. no need of !!. The proptype already specify the value should be a boolean. If the user provide something else, he will be notified that he has to change it.\n. same here, no need of !!\n. could be replace with a stateless function :)\n. Stateless function component instead?\n. React.createElement(typeof children === 'string' ? 'h4' : 'div', containerProps, children) ? :)\n. Most of the props we use in react-mdl don't use the prefix is. Do you think it would be better to only use open?\nThe native dialog also use an open attribute.\n. hmm I'll rename it with onActionClick then :)\n. you can use classNames('mdl-list__item-secondary-action', child.props.className) instead :)\n. twoLine && !threeLine.\nsame on the line below\n(I'm still unsure about using a trailing s or not. Feels weird to not have it though :/)\n. Please use cloneElement instead. Also, I think it would be better to use another prop name instead of threeLine in this case. useBodyClass maybe... (Anyway it's just something internal, but at least it gives more info for the ListItemComponent.\nReact.cloneElement(child, {\n    ...child.props,\n    useBodyClass: threeLine\n});\n. not required\n. use {info && <span ...>}, it's easier to read and to see what it renders :)\n. I'm not a big fan of try catch, especially in this case. The propType should be enough.\n. const child = cloneElement(Children.only(children), {...\nNo need to override children.\n. {child} base on the comment above on const child = ...\n. <span className={classes} {...otherProps}>\n. Not needed. Having undefined as default is enough\n. PropTypes.node instead, i's for \"anything that can be rendered\"\n. use the format {icon && <Icon name={icon} />} (with the Icon component)\nbtw, we have to support mdl-list__item-icon and mdl-list__item-avatar.\nMight be better to use a specific component for that as well, to allow users to set something else than a Material Icon (an image for example).\n. should use typeof position !== 'undefined', because we don't want a useless css class called mdl-tooltip--undefined when the position is not specified ;-)\n. Not sure this test is really necessary. The user will see the warning in the console, that's enough ;)\nFor the other positions, you could only set one test and test several things inside by looping through the position. ['left', 'right', 'top', 'bottom'].forEach(() => { test... });\n. You can move this in a src/List/index.js with the other imports as well. No need of a specific file since the end user will never import only this one (he won't be able to do much only with this)\n. return cloneElement(...? Then we can remove the let component = child :)\n. this test can be removed. The list is just a component from the basicClassCreator, which already have tests.\n. Hmm... I don't really want to create a specific component for that one, so I'll try something here...\nHave icon and avatar as prop. (Both are exclusive, we cannot have an icon, and an avatar at the same time.\nBoth can take either a string (icon name), or an element. If it's a string, we create an Icon and attach the specific classname. If it's an element, we clone it and attach the classname as well.\nI think most of the time, avatar will be used, with an  element.\n. Hmm.. Yep, but this one is a little bit different, because it checks the proptype. I should add a spy on it though, and see if I can get the new Error value without spying the console\n. for testability?\njs\nconst children = Children.map(otherProps.children, child => {\n    if(child.type === ListItemContent) {\n        return cloneElement(child, {\n            ...child.props,\n            useBodyClass: threeLine\n        });\n    }\n    return child;\n});\n. Even if you have 1 return, you still have to cover both cases. But maybe I missing something ;)\n. I'd keep the old syntax but use something like {label && this.formatLabel(label)}\nWith formatLabel returing the label inside the mdl element if it's a string, or just returning label for the others cases. It will simplify the function also since checking the object is not needed.\n. Impossible to reach because label is required.\nSo you can just return label if it's not a string\n. I'd prefer having this check in a custom proptype checker function. You can see an example here in the doc: https://facebook.github.io/react/docs/reusable-components.html\n. Please revert this change\n. Hmm...\nI know we're using that for row.className but I wonder if with style it could produce errors. Because if the rows data have style as a key, and that style is a string for example, React will not be happy.\nI wonder if we could find a better way to allow the row styling (even for the className to be honest).\n. hmm.. Why do we really want to check the received data?\nThere's a high chance the user know what to do when he uses mdlRowProps... I mean.. I hope he knows what he's doing ;p\n. I believe we can just pass everything without checks... Something like: { ...(row.mdlRowProps || {}) }\n. Also, what about the old row.className?\n. mdlRowProps would be the responsibility of the user\n. We can, but then we need to change this: https://github.com/Augustin82/react-mdl/blob/b45052c66fcaaaacfb1f0de7a5cb75c797de0755/src/DataTable/Selectable.js#L129-L131\n. For now, merging them would be best. We'll rethink this later (hopefully for v2)\n. Why not passing all the other mdlRowProps, not just style and onClick?\n. you can use .filter(Boolean) instead. Shouldn't it be selectedRows instead?. Do not bind and add the event conditionally to a props. Always add the event, and inside the event, only do something if a prop is set.. ",
    "cadesalaberry": "Forgive my ignorance, but how can you have access to the docs ?\nI looked into the docs fork, but the index.html file in the docs folder leads to nothing...\n. Thanks @tleunen ! Much appreciated.\nWouldn't it make sense now to move everything to the github wiki of this repo, and get rid of the docs fork ?\n. ",
    "skaapgif": "The new docs have proven helpful already, thanks. There's one mistake, on the cards page cards have the following property: shadowLevel={0}, from the source code it seems like shadow is the correct property or is this a new api?\n. I didn't test the code now, but going by what @t1bb4r has said, if cancel isn't a supported react event, then your code would never call the onCancel prop?\nI would have expected to see \nthis.refs.dialog.addEventListener('cancel', this.props.onCancel);\ninstead of\nthis.refs.dialog.addEventListener('cancel', prevent);\nBut perhaps I'm missing something.\n. I agree that components should have as little state as possible and like the fact that you made the default for onCancel to prevent closing.\nBut given the following code:\n<Dialog onCancel={console.log('user cancelled the dialogue'}>\nWould react actually handle the cancel event and call my onCancel prop? I think the above code would still call prevent and nothing would be shown on the console. Once facebook/react#6049 is fixed, I'd expect the passed in onCancel prop to be called, but not as it stands now.\n. Haha, glad to see I wasn't going crazy :+1: \n. ",
    "marcelpanse": "Hi, I've upgraded to v0.9.1 but still have the same issue.\n. Hmm, very strange, I have the newest files and I see the changes in index.js where you changed it to Card: Card.default, but still the same error.\nI will try it on a clean project without any other packages and see if I can reproduce it and upload it to a public git repo so you can test it.. \n. It works!\nI actually did try that as you can see in my initial question, but then it probably didn't work because of the bug you fixed in 0.9.1. \nThanks\n. Typo on my side, apologies!\n. I think you are right about git mv, but I had similar problems in the past where i didn't pick up on other machines, especially renaming folders..\nAnyway, thanks for the update :-)\n. Cool, this seems to work just fine, I will use this workaround. Thanks.\n. I also need this, can the PR be merged?\n. ",
    "bvleur": "The onClick event for Button is working fine for me (react-mdl@0.9.1)\n. ",
    "eisneim": "thanks so much!\n. thanks, i'm gonna try it\n. ",
    "velveteer": "The perpetrators: \nhttps://github.com/tleunen/react-mdl/blob/master/src/card/Card.js#L4\nhttps://github.com/tleunen/react-mdl/blob/master/src/layout/Layout.js#L4\nhttps://github.com/tleunen/react-mdl/blob/master/src/Menu.js#L4\n. ",
    "cjk": "@bvleur The files are found in the /extra folder. You should be able to integrate them using Webpack et.al. or just copy / symlink them to a local assets-folder and add a script-tag.\nBut yeah, a minified version for the latter case would be nice.\n. ",
    "Graf009": "Now I make an example http://www.getmdl.io/templates/dashboard/index.html on react-mdl\n. I'm still working on it\n. I finished\n. Ready\n. I can not do rebase can help me?\n. For Example http://www.getmdl.io/templates/dashboard/index.html: drawer has a main menu, and in the bottom of the help button\n. I'll add an example later\n. Demo: https://gist.github.com/Graf009/ad0131583c2bb9a07f7c\nI think the problem in React.findDOMNode(this), React can not find the element node.\n. Example:\n\n    {!userIsLogin && LOG IN}    // return false\n\n. javascript\n<Header transparent title=\"Example\">\n        {!userIsLogin && <Button raised colored onClick={ onLoginButton }>LOG IN</Button>}\n</Header>\nIn article https://facebook.github.io/react/docs/component-specs.html says \"You can also return null or false to indicate that you don't want anything rendered.\"\nI think it's safe behavior, what do you say?\n. Here is an example that reproduces the error https://gist.github.com/Graf009/ddef4109d157046ac62a\n. I think that it is necessary for all the components through the use of links refs\n. I use the react-modal, and I have problems with the same problems React.findDOMNode (this).\n. Please tell me, I use mdl-data-table - selectable, how do I subscribe to change events checkbox?\n. done\n. done\n. Sori. Now I do not have the time to do it.\n. ",
    "slybridges": "Awesome, thanks ! \nI see you only included the modified _layout.scss. Is it safe to pull out other scss files from the master branch of the official mdl repo you think ? Or should I look at a particular revision ?\n. \ud83d\udc4d\ud83c\udffc\n. Any reason why you don't want to include the sources on NPM @tleunen ? \nI actually find it's easier to have the sources when investigating a potential bug or wanting to fiddle around with the libs.\nAnd MDL team actually ended including the sources in their NPM because of most people asking for it.\nhttps://github.com/google/material-design-lite/issues/793\n. As long as the README mentions that compiled components are in lib and that components can be recompiled with npm install && npm run compile, it shouldn't be a problem I'd say.\n. Yep that's what I scratched my head around too for some time ;-)\n. Maybe can we make the props name a bit more explicit ? Something like forceInvalid (or forceValid, although in my opinion, a field is valid by default and we want to force displaying errors only if it doesn't fit our business logic).\nBut it you look as the demo example I added, the password confirmation, this is a very common use case and pattern props cannot manage it afaik.\n. Yes but the pattern prop being optional makes it all questionable.\nAnyway, happy to take whichever convention you think is best as long as we can introduce this idea of being able to have externally validated fields :-)\n. Having only error set is indeed a nice solution !\nLet me know should you want a PR or if you feel like doing it yourself. In the latter case, you can close my PR.\n. I'll take a stab in Monday then. Weekend is weekend :-)\n. Oh but then what would be the expected behavior when using pattern prop ? Because when using pattern, we should always set error even if field is valid. Hence it wouldn't be consistent with using error only field, right ?\n. Removing pattern is a bit of a downgrade / deviation from original mdl library, don't you think ? Take the number textfield example in the demo. It wouldn't look as nice and simple without the pattern.\n. Closing this one and will open a new one after our discussion.\n. @faergeek Yep, but I think you should add a tilde in front of the module in scss, like so:\ncss\n@import \"~material-design-lite/src/variables\";\nAlso the import of layouts.scss from react-mdl won't work directly because the file contains the following imports with relative paths: \ncss\n@import \"../variables\";\n@import \"../mixins\";\n@tleunen maybe it would be good to change those two lines to:\ncss\n@import \"~material-design-lite/src/variables\";\n@import \"~material-design-lite/src/mixins\";\nSo that we can make a direct import without changing that file locally?\ncss\n@import \"~react-mdl/extra/layout\";\n. Hi @tleunen @andrepew - let me have a look\n. @andrepew was on the right track, this is because react-mdldoesn't check for the new validity of a field when error changes.\nHowever I think, we can have a slightly better fix than the one suggested in #151. I'll submit a PR.\n. MDL says they're not aiming at supporting dynamic websites (such as those created with React) at the moment. Hence they won't implement solutions using setState and the likes. However I think react-mdl plays nicely around those limitations.\nI'm using react-mdl along with redux-form which has some nice helpers to validate the data and display error messages dynamically as you're typing.\nExample: http://erikras.github.io/redux-form/#/examples/synchronous-validation\n. tabBarProps:+1:, much better\nI'll get to it.\n. For the record, if anybody wants to align tabs to the left instead of center, they should add the following prop to Tabs:\njavascript\ntabBarProps={{ style: { justifyContent: 'flex-start' } }}\n. Not sure you get a notif when there is a new commit @tleunen, but done ;-)\n. hello @tleunen - could you maybe publish a new version of react-mdl including this PR ? My site doesn't look that pretty without it :) Thanks !\n. Top, merci Tommy ;-) \n. ",
    "lislamov": "I tried last version from master, Header with Menu is ok now\nbut Drawer broken \nthere is no <nav> tag, and mdl-navigation__link class in <a> tag\nhtml\n<div class=\"mdl-layout__drawer\" data-reactid=\".0.1\">\n    <span class=\"mdl-layout-title\" data-reactid=\".0.1.0\">Title</span>\n    <a href=\"\" data-reactid=\".0.1.1:0\"><i class=\"material-icons\" data-reactid=\".0.1.1:0.0\">dashboard</i><span data-reactid=\".0.1.1:0.1\">link1</span></a>\n    <a href=\"\" data-reactid=\".0.1.1:1\"><i class=\"fa fa-usd\" data-reactid=\".0.1.1:1.0\"></i><span data-reactid=\".0.1.1:1.1\">link2</span></a>\n    <a href=\"\" data-reactid=\".0.1.1:2\"><i class=\"fa fa-eur\" data-reactid=\".0.1.1:2.0\"></i><span data-reactid=\".0.1.1:2.1\">link3</span></a>\n    <a href=\"\" data-reactid=\".0.1.1:3\"><i class=\"fa fa-caret-down\" data-reactid=\".0.1.1:3.0\"></i><span data-reactid=\".0.1.1:3.1\">link4</span></a>\n    <a href=\"\" data-reactid=\".0.1.1:4\"><i class=\"material-icons\" data-reactid=\".0.1.1:4.0\">map</i><span data-reactid=\".0.1.1:4.1\">link5</span></a>\n</div>\n. just now, yes is works\n. ",
    "yantakus": "Maybe the problem occurs because I install the package from my fork at github:\n\"react-mdl\": \"git://github.com/web2style/react-mdl.git#master\",\nAnd I can't try to install it from npm because it's version doesn't include my pull request (yet, I think) because of react version conflict.\n. No. There's nothing about it in the README.\n. When installing from github, there's no src directory either. So npm run compile returns src doesn't exist error.\n. Is it right this way? Sorry, my first pull request ever :)\n. There are a lot of other properties. At least 2 of them are useful for me: isDefaultPrevented: () and\nisPropagationStopped: (). I think there's no sense to pass e.target and limit users in these properties. At least if you don't want to accept another pull request in the future :)\n. I think this pull request was a hasty decision. First of all, this is a braking change. Also, other components send boolean as onChange payload, so sending an object here will be an inconsistency. So I think you should discard this commit.\nWhat concerns my example above, it can be handled like this:\nonChange={(checked) => this.handleChange('yourId', checked)}\n. I didn't mean you should pass id as an argument from inside the component. A user can pass it as a string himself in the onChange callback when he creates a components if he needs it.\nI just proposed to discard this commit and get back to how it was before. But it is up to you anyway.\n. Here is the video: https://www.dropbox.com/s/mrmxm64ibr4z7v3/20150909-233330.mkv?dl=0\n. But there's no such issue at MDL website: http://www.getmdl.io/components/index.html#layout-section/tabs\n. ",
    "iquabius": "That's from the demo, I didn't thought of that. Just saw it was broke and reported it.\nI'll try the new way (which actually looks more flexible), and I get back if needed.\n. ",
    "janpieterz": "That depends on your setup. For example, using the this.refs you can access the value as well, depending on your setup. This way you don't have to handle every single input's change manually if this is not needed.\nhttps://facebook.github.io/react/docs/more-about-refs.html\nhttps://facebook.github.io/react/docs/working-with-the-browser.html\n. Yeah, I have currently changed them to be controlled inputs, using your handy helper to set the state easily. I don't mind either way, I think since React itself allows it it should be allowed as well, but that's just my 10 cents ;)\n. Maybe this is just me (relatively new to React), but couldn't we just set the value on the input conditionally, and therefore also the make onChange callback conditional?\n. I'm working on one as we speak!\n. There we go, example repo: https://github.com/janpieterz/Mdl-header-tabs\nAnd I think by creating it all over again I've almost answered my own question, but I'm not a 100% sure. In my official app I use the browser history instead of a hashhistory, but since I serve it off the file system (and browser don't allow histories to be replaced), I use hashhistory, shouldn't make a big difference for this, certainly because the same behavior occurs.\nWhen I have the Tabs right away on the home page, it works fine.\nWhen I have the tabs on the second 'content' page it doesn't work.\nMy current line of thinking is that those Tabs should only be 'made' there when the tab-panels are there, which makes sense. \nBut since in the source of the header tabs there is no component upgrade call towards MDL since the whole layout upgrade seems to happen in layout.js and not the individual component like HeaderTabs.\nObviously I'm not going to use the tabs like this in the 'real' application. They'll be added dynamically per page. I had that before as well, but that didn't work either so I reverted to a more hardcoded one, which might bring this problem.\nAny thoughts on dynamically adding tabs in the header? It seems like as soon as I load the page directly on the items component it works fine, but as soon as I come from another part it isn't (which is what would happen if those headers are dynamically added, since the layout is already upgraded). Calling the upgrade again in the console doesn't seem to solve it.\nI know this is mostly my 'mess' but I'm curious how to tackle this one, any help would be massively appreciated.\n. I've been trying, in the example, to get the tabs to be dynamically populated, only way I can see that quickly happening is adding a Flux store like Alt. In case this is handy, anyone an idea to do it simpler?\nEDIT: I'm doing that in the real app since that one is all setup for this.\n. Alright, I think I've found \u00edt, although I'm not sure about a decent solution:\nIn the real world example, I currently dynamically add a couple of tabs when navigated to a new page. These don't get upgraded (very easy to see).\nI then manually delete the data-upgraded from the mdl-layout div. Then running componentHandler.upgradeAllRegistered(); will work.\nObviously this is not the way to go forward, but I'm also not sure how to solve this.\nSince it's all related to the layout, somehow I need to re-initiate the layout's upgrade, but running it without manually deleting that tab didn't work. componentHandler.downgradeElements(document.getElementById(\"layout\")); doesn't seem to do a lot, but perhaps I'm adding the elements to this the wrong way. \n. I have it 'working' now, by using a relatively dirty hack provided here:\nhttps://github.com/google/material-design-lite/issues/1165\nFor future reference:\nI edited the material js and exposed the MaterialLayoutTab (since the released version doesn't have it yet), then added in my componentDidUpdate the following code:\nvar tabs = document.querySelectorAll('.mdl-layout__tab');\n    var panels = document.querySelectorAll('.mdl-layout__tab-panel');\n    var layout = document.querySelector('.mdl-js-layout');\n    var tabbar = document.querySelector('.mdl-layout__tab-bar');    \n    for (var i = 0; i < tabs.length; i++)\u00a0{\n      new MaterialLayoutTab(tabs[i], tabs, panels, layout.MaterialLayout);\n    }\nThe HeaderTabs of react-mdl needs to be in the DOM already for this to work.\nIt certainly works like this, but I have the feeling this logic is more at it's place in a 'lower' library.\nIf anyone( @tleunen ) has an idea how to build this in react-mdl I'm more than happy to take it on in a pull-request! I browsed around a little bit but didn't find too much dynamic stuff in here so I'd be curious how to handle it. This should, obviously, only take place when mdl's fix is in their release.\nI'll leave it open so we can discuss the above possibility, if not feasible/possible/wanted it can be closed!\nThanks for the little push that send me down the drain of issues @ MDL and gave me the solution ;)\nMore references I found about this:\nhttps://github.com/google/material-design-lite/issues/1665\nhttps://github.com/google/material-design-lite/issues/1340\n. Yeah, that's what happened when I just insert them hard in the header. Second page it does work, but not correctly, although the fix above makes the dynamic ones working, there's just a manual extra step needed to initialize the tabs if the layout is not rendered again.\nJan-Pieter Zoutewelle\n\nOn 8 okt. 2015, at 17:49, Sergey Slipchenko notifications@github.com wrote:\nI'm not sure about real issue, but first issue that I see is that tabs' href in / route point to elements that do not exist (and console reports Uncaught TypeError: Cannot read property 'classList' of null) and in /items route they do exist.\n\u2014\nReply to this email directly or view it on GitHub.\n. This shouldn't be too difficult, besides that one fix to layout that is done locally, I think? \nI couldn't really find any breaking changes myself in their changelogs, but I might have overlooked it. If there are none given the HTML structure, it's basically upgrading to the new files, making sure the layout fix is applied, running the tests and that's it.\n\nThe layout fix, as far as I can see, is only this change: https://github.com/tleunen/material-design-lite/commit/b776c3e350b80756e82c97eb2dba8056886becf0\nI'd be more than happy to take this one on, if you could provide some guidance @tleunen ? Mostly confirming my method described above.\nI'd also like to be sure about the changes needed for the layout fix you've done not to regress. Perhaps I (or perhaps it's smarter that you do it since you know exactly what the fix does and how to detect it)  can write a test for it so we know with future upgrades it won't fall back?\nLet me know what you think.\n. I'm having some trouble getting the right base to commit this from. Tried to pull a fork of your material-design-lite repository, checking out release, merging upstream remote back into it, but get way too much merge conflicts (all solvable, but it shouldn't be that hard). Merged release branch can be found here: https://github.com/janpieterz/material-design-lite/tree/release\nThere's a couple of options I see (new fork directly from Google, re-doing the specific changes to the layout) but there must be an easier way that I'm missing. I have never worked with forks from forks, and would like to make sure I don't fuck it up.\nSorry for the overhead I'm causing.\n. Awesome. Will open one up.\nI chose to to the tr way, because of a couple of reasons:\n1. Now you can't add multiple rows in a thead, which is technically possible\n2. I found that just before initiating the datatable i was mapping through my collection to make it confirm to the format of react-mdl, to then ship it off. The cognitive overhead of mapping it to a custom (although simple) structure was just a bit weird if I can also map it myself to well known structures like tr's, or a custom DataTableRow (although there would be no point for this one)\nNumber one could be solved by accepting either an array with items, or an array with arrays, enabling multiple rows.\nNumber two is just a preference. I don't know of any way to automate this without adding either a tr or a custom data structure.\nLet me know what you think! I'll start with it tomorrow.\n\nOn 7 nov. 2015, at 18:01, Tommy notifications@github.com wrote:\nSure! Feel free to open a PR ;-)\nBut I'm not a big fan of having the end user writing something like this, because of the \n\n\n\n\n\n\n\n\nMaybe something like this would be better? ?\n\u2014\nReply to this email directly or view it on GitHub.\n. Been working on this a little bit, get stuck on something weird.\n\nFirst: even though html supports multiple headers in a table, the mdl library doesn't, it ruins the layout, so I decided not to implement the multiple headers. \nOnly downside of my current implementation is that we can't have interactivity with the tr's in head and body, for example an onClick handler, but all other elements are at least available for interactivity.\nGist has been updated with current code: https://gist.github.com/janpieterz/6a74182debfaa61db7df\nThe problem I run into is the key property. Since I want to pass the whole component down, I require the key as a property on DataTableCell. If I name this 'name', require it and provide it, it works (although I can't set it on the cell itself). If I name it 'key' it says it is not provided, although it is, and the only change is key => name or name => key. Any ideas?\nWarning in Demo is:\nWarning: Failed propType: Required prop key was not specified in DataTableCell. Check the render method of Demo.\nI can also create a pull request with this so it's easy for you to check if you're interested. Will dive deeper to see if I'm missing something.\n. What it enabled me to do is have my own custom implementation of the checkbox'es so that I can easily interact with them, enabling things like the attached image.\nOther things are for example in-table editing etc. The specs mention this, material-lite isn't there yet.\nhttps://www.google.com/design/spec/components/data-tables.html#data-tables-interaction\n\n. Sounds like a good idea! Will take some time to refactor my current code for this and am very busy this week, but am open to taking this on next week.\n. I've let it sit for a little while, got massively busy with a project. Realistically I don't think I'll have time until January, and possibly even later.\nMy current progress is here:\nhttps://github.com/janpieterz/react-mdl/tree/datatable-refac\n. Awesome! Just figured this out myself. @tleunen when do you expect to publish this to npm?\n. Good idea, super flexible, but wouldn't this break the just-released version, pushing it over to the next mayor?\n. Somehow I'm running it with babel 6 locally without a problem, so I'm not sure how that works out. It is actually quite weird because I see you used class properties, which don't seem to work in my own code but they do seem to run in yours. Perhaps because it only uses the compiled version which is compiled with babel < 6?\nAh, that seems to be the best way to go then.\n. Sweet proposal! Sorry, I've been a bit off of projects using MDL lately.\n. ",
    "Pagebakers": "+1 for your last comment tleunen.\nRight now I run into limitations because I have to to async validation.\n. It's part of the LinkedStateMixin \nsee https://facebook.github.io/react/docs/two-way-binding-helpers.html\nAttaching this to onChange doesn't work unfortunately.\n. Yes good job on the unknown props, that works great.\nAlthough when using valueLink, an onChange handler is not allowed. For now I'll use your way of binding the state.\n. Great, thanks!\n. Awesome thanks!\n. ",
    "faergeek": "I think actually it may be needed in many other places. May be we should write some mixin-link solution for that.\n. What about that PR?\n. I fixed href validation. If everything alright, I can just squash it.\n. Done :-)\n. No, it's not double, try to set double explicitly and lint sources.\n. I can submit PR for that too :-)\n. In native, yes.\n. I mean that in eslint-plugin-react there was no default value for that option, so I assume that rule didn't ever work.\nBut for native eslint option there's default value prefer-double.\n. It's really needed just for Tooltip, for others React.findDOMNode(this) is enough for now.\n. It fixes #47 \n. Okay, so what about inheritance? Something like this:\njavascript\nclass ProgressBar extends MDLComponent {\n...\n}\nor another way around (new component inherits from ours, less changes in code, but looks not so good in devtools :-( ):\njavascript\nexport default Component =>\nclass MDLComponent extends Component {\n...\n}\n. Are there some reasons for that? It fits naturally in that case.\n. What do you mean by \"override a function or not\"?\n. We can use super to call parent\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super\n. Let me provide a prototype to play with it.\n. It's time to check it out.\nSorry for delay.\n. Ping \n. What if we will use MDLComponent inside components' render methods like this?\n``` javascript\nclass Button extends React.Component {\n    render() {\n        var { accent, className, colored,\n            primary, raised, ripple, ...otherProps } = this.props;\n    var buttonClasses = classNames('mdl-button mdl-js-button', {\n        'mdl-js-ripple-effect': ripple,\n        'mdl-button--raised': raised,\n        'mdl-button--colored': colored,\n        'mdl-button--primary': primary,\n        'mdl-button--accent': accent\n    }, className);\n\n    return (\n        <MDLComponent>\n          <button className={buttonClasses} {...otherProps}>\n              {this.props.children}\n          </button>\n        </MDLComponent>\n    );\n}\n\n}\n```\nMDLComponent should wrap exactly one children on which we should call upgradeElement.\nIt will provide good public API for users wishing to change real markup however they want.\nFor example:\njavascript\n        return (\n            <MDLComponent>\n              <input\n                type=\"button\"\n                className=\"mdl-button mdl-js-button\"\n                value=\"Send the from\"\n              >\n            </MDLComponent>\n        );\n. I think that we should not use refs for that. I really like the idea with HoC which wraps mdl components.\nFor example Tooltip's render would look something like that:\n``` javascript\n    render() {\n        var { label, large, children, ...otherProps } = this.props;\n        var id = Math.random().toString(36).substr(2);\n    if(typeof label === 'string') {\n        label = <span>{label}</span>;\n    }\n\n    var element;\n    if(typeof children === 'string') {\n        element = <span>{children}</span>;\n    }\n    else {\n        element = React.Children.only(this.props.children);\n    }\n\n    return (\n        <div style={{display: 'inline-block'}} {...otherProps}>\n            {React.cloneElement(element, { id })}\n            <MDLUpgrade>\n                {React.cloneElement(label, {\n                    htmlFor: id,\n                    className: classNames('mdl-tooltip', {\n                        'mdl-tooltip--large': large\n                    })\n                })}\n            </MDLUpgrade>\n        </div>\n    );\n}\n\n```\nEven better for devtools we can do that without even leaving the traces of HoC like in react-document-title\nhttps://github.com/gaearon/react-document-title/blob/75ef9566a162a4c9bc697c0e23cf5c44ac5efb74/index.js#L22-L28\n. Wrong, it leaves the traces in devtools, but anyway I think it's a good solution.\n. If you do not want so much changes I can rewrite old mdlUpgrade which will use HoC and we can leave the code of most components as it was before.\nDo you see any other problem?\n. I just thought the other way around.\nIn that case we can avoid workarounds like in ProgressBar component \n. What you think about exposing mdlUpgrade as a public function?\nAlso what you think about it's usage as a decorator instead of plain function call?\n. It's less code actually.\n``` javascript\nclass ProgressBar extends React.Component {\n}\nexport default mdlUpgrade(ProgressBar);\n```\nvs\njavascript\n@mdlUpgrade\nexport default ProgressBar extends React.Component {\n}\nand no other changes needed.\n. Please note that changes in ProgressBar and explicit use of MDLUpgrade component is needed as a workaround instead of what was before.\nIt's just some small code share.\n. And if everything's alright I'll squash it again.\n. I had to rename MDLUpgrade to MDLComponent to avoid collisions with mdlUpgrade on case-insensitive filesystems.\n. Finally I coded something. The reason why I don't want to reverse mdlUpgrade and MDLComponent is I don't want to lose this and use workarounds as was in ProgressBar.\n. Thanks\n. Exactly :+1: \n. I'm not sure if it matters.\nUsers can just put some span or strong tag there or some complicated custom markup and I wouldn't restrict them.\nI'm also not sure if mdl-layout-title is necessary or not.\n. I guess you can change colors and other variables using sass to compile material-design-lite and @import _layout.scss from extra folder instead of upstream like so (just copy original and change paths):\nsass\n// Variables and mixins\n@import \"material-design-lite/src/variables\";\n...\n@import \"react-mdl/extra/layout\";\n...\n@import \"material-design-lite/src/grid/grid\";\n. Fixed\n. Which stack do you prefer? I'd like to try tape, do you have some experience with it?\n. I'd like to help with that. Really want to have tests for this project.\n. @tleunen It doesn't make sense to check rendered html and even check parts of a DOM, but we should test if interactions work correctly.\n. Not sure if shallow render can help with that. MDL works in a browser environment.\n. @nathanmarks Thanks, I think we need some help with tests.\nDo you have any experience in writing tests with user interactions?\n. Yes, react has test utils to simulate events https://facebook.github.io/react/docs/test-utils.html.\nBut I'm pretty sure that they're simulating events just for react itself and we probably need something like selenium to test the whole thing.\n. @nathanmarks This project is not the mirror of upstream functionality, it's wrapper around it.\nProbably we could try to just check the rendered DOM in different states, but I'm not 100% sure that it will be enough.\nAbout testing framework: I suggest using tape as a testing framework because TAP is widely supported standard and we potentially get many integrations for coverage, CI and such things related to testing.\nBut I have no experience with it.\nI'm going to try it out on a smaller project like lib which I didn't publish yet or on one of my private react projects to see how smoothly it goes.\n. Yes, probably we don't need selenium or even phantom for now.\nAbout \"mocha, chai or whatever\":\nMocha is a test runner and can't work by itself, it has no assertion library, chai is assertion library that works with mocha.\nTape on the other hand is a standalone tool that runs tests and also provides assertion library, but it needs a reporter probably (standard reporter just outputs raw test data to console, which is not so readable).\n. Ok, I just told about advantages of tape.\nIf you still wanna to use mocha, let's use it :+1: \n. @tleunen I think we should at least use strictEqual method of assert because assert.equal uses == instead of === which is not cool in many cases, especially for tests.\nOr just take a look at what @joshq00 did with tape :+1:\nI still think that it's more readable and just simpler.\nWe don't need karma though.\nBut we definitely need code coverage + some utils for simpler shallow rendering + watching for development.\nI'm going to make a branch with all of it right now :-)\nP.S. I'm also going to look at that cool thing http://speckjs.github.io/\n. @tleunen Take a look at this article about tape https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4\n. Tape is well known, small and predictable, which is important for tests.\nI think react and co has popularized unix-way (small tools that each do one task, do it well and can be integrated vs do-anything combines) in frontend and it's good ;-)\nI don't know the reason why mocha has no assertion library, but have many rarely needed things, like tons of reporters etc. It's bad separation IMHO.\nAnd just look at tape, it's much more readable anyway.\n. @tleunen What if we at least agree on using only simple assertions as @joshq00 said?\n. Nothing's wrong.\nLet's just agree to not use some assertions like expect(3).to.be.not.ok and instead use expect(!3).to.equal(true), for example.\n. I mean it takes time to search docs for method that \"fits\" and then search what exactly method does when reading.\nI did it before, it annoys. Looks logical only at the first time.\n. @joshq00 Exactly :+1: \n. Okay, that version is much better than embedded in chai  :+1: \n. Try to update value using react-devtools from empty to some value and backwards. If value assigned programmatically, then label will be under real text and vice versa.\n. I have a real use case where I'm editing images and when I switch them some images have filled values and some don't.\n. Not sure if it's needed for validation, though.\n. I tried using .change(), seems like it doesn't work that way. Did you test it?\n. Usually such methods assume that you know what you're doing and handled everything, so it does not dispatch event.\n. Ping\n. @tleunen So what about that PR?\n. Just did a rebase on master.\nAlso I don't see any way to trigger change event at all.\n. If you're testing this in demos then you can just see other fields updating too as there are rerender of parent component and we have no shouldComponentUpdate (and we really should) for them.\nI checked it, everything is alright, except we should add shouldComponentUpdate hook here and I think in more places across library (will make another PR for that).\n. I just did a rebase on top of master.\n. Can we talk about that problem in a more real time way? May be gitter or something like that?\n. I guess first publicly announced beta was beta1. I think that would be enough.\nWe can go from 0.14.0-alpha1 to support all releases, but I think that now even just rc1 would be enough. AFAIK there's no breaking changes between beta1 and rc1.\nSo I think we should set beta1 or rc1.\n. Yes, I guess. Need to try it out with both versions and check if npm shows warnings about unmeet peer dependency.\n. No, having react as a dependency is the first step to include two versions of react. And it's bad and not working at all.\nWhat issues do you have with npm@3? I don't have any.\n. If you mean we should have it for tests, then I think we should find some another way for that.\n. Hmm, looks like redux does include react in devDependencies too.\nhttps://github.com/rackt/react-redux/blob/master/package.json#L53\n. Yeah, that makes sense :+1: \nDo you have any idea on how we can get rid of deprecation warnings in react@0.14.x about findDOMNode?\n. I think creating another branch doesn't make sense because it doesn't break anything actually.\nWe can add some info about 0.14.x support to readme though.\n. Updated\n. See #59\nIf you use npm@3 there should be no problems with it.\n. Looks good :+1: \nJust a few hints:\n1. There are eslint errors, you can see them if you type npm run lint.\n2. It's more comfortable for both sides to create branch other than master in your repo and then send PR.\n. I think it's no necessary for now.\nIt's just more comfortable for submitter and reviewer.\nJust a hint for your future PRs :-)\n. @tleunen Please take a look at this.\n. It's an upstream issue\nhttps://github.com/google/material-design-lite/issues/1196\nhttps://github.com/google/material-design-lite/issues/1461\nReact uses event delegation for all events.\nAs a workaround you can try this out https://www.npmjs.com/package/react-native-listener\nOr just use addEventListener on mount and removeEventListener on unmount manually.\n. @tleunen I think we should fix it by binding events internally.\n. Also @markuso did it automatically update from 0.13 to 0.14?\n. After some investigation I'm not sure if we can fix it without patching upstream or remove event handler and lose tooltip functionality on mobile (also seems like it doesn't work right on Mobile Safari anyway).\n. In that case we should walk entire component tree under tooltip or just use event delegation :-)\n. And what if there is more than one element inside?\n. Even if we use event delegation, it's more safe to assume that there can be elements inside that single child and we should collect click handlers on them and call them with right this.\nI started thinking that it's not so good solution as seemed at first.\nNow I think it would be better to patch upstream again.\n. The reason is that it accidentally works on mobile (not in iOS Simulator, though) and seems like no one wants to dig into it and try to understand why and how it works :-) I tried myself.\nOn the other side I don't know why they use JS to just show hint.\n. It's merged, but I'm not sure that it's released already, need to take a closer look.\n. Looks like it should be in 1.0.6\n. Confirming, it's not fixed in 1.0.6\n. Could you provide reduced test case for that?\n. I'm not sure about real issue, but first issue that I see is that tabs' href in / route point to elements that do not exist (and console reports Uncaught TypeError: Cannot read property 'classList' of null) and in /items route they do exist.\n. Good idea :+1: .\nI think that mdlUpgrade and MDLComponent should be a public API.\n. It's good for better customization, though, we can just leave note in readme about that, something like:\n\"If some feature is missing you can use MDLComponent/mdlUpgrade to temporarily recreate this functionality and don't forget to submit an issue :-)\"\nAnd give some example.\nFor example, I think that it should be possible to set custom tags everywhere.\nOr I want to pass some props to some tag/component and I can't, because it's impossible in current implementation.\nWe should make that possible by making API public or by documenting how to achieve it (like documenting a hack).\n. Actually, I'm already working on PR. We can use stateless components here.\n. Please read #48 \n. Sorry, it's not what I'm talking about. It's about text prop, not children.\nThe point is that we're wrapping some element in Badge and we can provide text, but according to upstream styles the element is shown only if DOM element has a data-badge attribute, so if it's empty (there's no new notifications or something like that) then it doesn't make sense to render it.\n. Here's a selector .mdl-badge[data-badge]:after.\n. Let's assume that we have some icon for notifications and we want to show a badge only if there's a notification (mostly like on github, but with numbers), with the current implementation we will wrap component in a badge if there's notifications or don't wrap if there's none. Not so good.\nInstead I guess it's assumed by upstream that if we don't want to show badge we just don't set data-badge attribute, even empty.\nI can make a PR to show the difference.\n. Not exactly. I'll make a PR to explain better :-)\n. It throws now when you return null from Badge.\n. What if instead of checking for a single element and so on and so forth we just wrap element in span in any case? Try to wrap Textfield in Badge, for example. It's confusing.\n. Still to avoid setting value twice we should not pass argument to change method.\n. I don't think we need these checks actually :-) Just leaving it with no argument will be ok.\nTake a look at these lines https://github.com/tleunen/react-mdl/blob/master/extra/material.js#L2637-L2639\nSo if we don't pass a value it just updates classes.\nAnd as classList is used everywhere we won't have any actual changes when they're not needed and no performance problems.\nTake a look at this video for explanation why http://www.youtube.com/watch?v=hZJacl2VkKo\n. Even better, upstream code checks if there's need to add/remove classes, so even classList is not touched.\n. Even with that in mind I don't that we should use contains to detect if it's focused, it's better to use ref and just check equality then :-)\nBut don't close this yet, I'd like to test if setting value twice will have any impact on performance.\n. Could you publish that to npm before we introduce breaking changes?\n. No need to merge commit for demo, it's just for demonstration/testing.\nI'm going to remove it if it's not needed anymore.\n. Exactly.\nOtherwise we would need to conditionally wrap/unwrap element.\n. Attribute is rendered if it not equals null or undefined.\n. Great point.\n@tleunen What do you think? Why did you decide to pass value to handler instead of original event?\n. Not sure that it's fired twice because of that though, AFAIK comments don't work like this in JSX.\n@joshq00 Try removing it instead of commenting.\n. @tleunen Take a look at this about onChange https://github.com/tleunen/react-mdl/issues/55\n. Did you think about dynamic modifications to badge text? It would be much more performant to add/remove attribute than wrap/unwrap element, React can't deal with it in some smart and performant way AFAIK.\n. I just leave here these two links to not forget about it:\nhttps://www.npmjs.com/package/react-styleguide-generator\nhttps://github.com/reactjs/react-docgen\n. @joshq00 Do you need some help with that?\n. I still would like to make something like live demo here https://gaearon.github.io/react-hot-loader/\n. :+1: \n. P.S. I still would like to use http://speckjs.github.io/ but it probably will require some custom code to easily test react render output.\n. Need to fix test running as it silently fails now in Travis.\n. But why? There are not much tests yet, I can covert them to tape easily.\n. Take a look at this doc too, mainly about issue reporting (os, browser, reduced test case) https://github.com/BrowserSync/browser-sync/blob/master/CONTRIBUTING.md\n. @tleunen I'm pretty sure that it's already fixed in mdl 1.1.0, so it's already fixed in master here.\n@vurt007 Could you try to install this package from master branch and test?\n. @tleunen Thanks :-)\n. @rpominov Did you take a look at v2 of MDL? Could we use it as it is without hacks here https://github.com/whitescape/react-admin-components ? If so, we could join organisation. Even if not, we could make it so \ud83d\udc4d \n. Nope, PropTypes.element would be already rendered element, but we should allow to pass a string (for html tags), class (for react components) and soon function (for react 0.14 feature to allow just pass function).\nSo we actually need to use oneOfType with string and func, but I think we should not restrict it. React 0.14 will allow to use pure function instead of a real class and there's so much issues with different components out there that did not assume that possibility and it's just annoying.\nAnyway react will warn users if they'll try to pass something totally wrong.\n. I think we should not restrict here too. What if there's some component which use a prop called href and it can be function or node or something.\nFor example, what if I'll write some ScrollToElement component which will scroll to some element. It can pass function to return element id or something like this.\nIt's strange case though. What do you think?\n. We get href just to check that it is set later. So we can set a tag for button if user didn't pass custom component.\nP.S. for now eslint doesn't warn about unused props that are in props validation. But I wish it would :-)\n. BTW, take a look at TransitionGroup component which is included in react in 0.13.\nhttps://github.com/facebook/react/blob/v0.13.3/src/addons/transitions/ReactTransitionGroup.js#L25\n. I thought we could export it for users wishing some custom markup or something like this.\nFor example I use code like this if I want link look like a button:\njavascript\n                  <a\n                    className=\"mdl-button mdl-button--icon\"\n                    href={`/download/${id}`}\n                    title=\"Download\"\n                  >\n                    <i className=\"material-icons\">file_download</i>\n                  </a>\nWould be handy if in such cases user could wrap that code inside MDLUpgrade which will handle remounting.\n. Sorry, I thought that if it's a component and not function which wraps component then I should put it alongside other components.\n. Ok, I'll fix it.\n. Sadly, yes. I'll try it out a little later.\n. Sorry, I just got used to use react-hot-loader and now react-transform-hmr. So I avoid assigning methods on each instance.\n. It isn't static, it's on instance, static should be prepended by static keyword :-)\n. mdl has a selector that looks like this .mdl-badge[data-badge]:after so it renders badge if there's data-badge attribute even if it's empty.\nAnd undefined does not render attribute at all. Check the DOM in devtools.\n. We could set prop validation to any and convert text prop to string though.\n. Sorry, actually we can't, undefined equals to string 'undefined' if it's converted to string.\n. I'm talking about this line.\nIt seems like stateless components do not support returning null from render.\nCurrent test suite skips it somehow.\n. I guess may be we just don't get stateless components right?)\nI didn't search for a bug.\n. I'd like to have json too, because I'm going to use plugin for my code editor to highlight not covered lines and it understands json only.\nI don't think that it takes much time to generate it, do you?\n. ",
    "kctang": "These fields:\njavascript\n<Textfield name=\"check1\" label=\"Email\" error=\"something wrong\" pattern=\"\" defaultValue=\"bla\"/>\n<Textfield name=\"check2\" label=\"Email\" error=\"this error message not showing\" defaultValue=\"bla\"/>\nCurrent behavior on component render:\n- check1 shows error.\n- check2 does not show error\nWould be better if check2 also show error because pattern is not set.\n. I just found out that the check1 scenario above is also not acceptable.\nIt will show the \"Please match the requested format\" message because it will force input to validate against the pattern.\n\n. ",
    "jolic": "Wouldn't it be good to add a callback when an input item isn't valid?\nSomething like:\n<Textfield\n                onChange = {() => {}}\n                pattern='....'\n                error=\"Show this error\"\n                label=\"Test\"\n                isValid = {(isValid) => { console.log(\"This item is: \"+valid); } }\n            />\nCurrently only the parent element of the input gets the classname \"is-invalid\".\n. Just researched a little: It's the div container with class \"mdl-layout__inner-container\"!\nIf you set on close overflow-x on \"auto\" it works... \nIt seems a bug in chrome? you need to \"touch\" the overflow style...\n. Just need to verify it...\n. Ok... this is super strange:\nYou have to set after the close of a dialog (verified on Chrome):\ndocument.getElementsByClassName('mdl-layout__inner-container')[0].style.overflowX='auto';\ndocument.getElementsByClassName('mdl-layout__inner-container')[0].style.overflowX='';\nTry it on the demo page...\nI think this is a css issue. Have you copied the css from Google?\n. Chrome seems buggy. ;)\n. This works for me:\n...\n  handleCloseDialog() {\n    this.setState({\n      dialogIsOpen: false\n    });\n    /* Workaround !!!!*/\n    document.getElementsByClassName('mdl-layout__inner-container')[0].style.overflowX='auto';\n    document.getElementsByClassName('mdl-layout__inner-container')[0].style.overflowX='';\n  }\n...\n. No, I haven't created an issue...\n. Hmm... very strange. When I click on the \"show dialog\" button @ https://tleunen.github.io/react-mdl/components/dialog and then close the dialog I can't scroll the content anymore.\nHere you can copy\njs\ndocument.getElementsByClassName('mdl-layout__inner-container')[0].style.overflowX='auto';\nin the console and the content is scrollable again.\nWhen you look at the codpen http://codepen.io/jolic/pen/dMmzpX/?editors=0010 the content is scrollable after closing the dialog but also when the dialog is opened.\n...need to investigate a bit more but currently i have no time.\nCould somebody else have a look at it?\n. @darkyen Steps to reproduce:\nWith Chrome go to https://tleunen.github.io/react-mdl/components/dialog and click on the first \"Show Dialog\" button. When the dialog opens click on \"Disagree\". After the dialog is closed you can't scroll the content with the mousewheel anymore.\nIf you open the console and trigger the function call (see above) the content is scrollable with the mousewheel again.\n. @tleunen \nIt's not the <body>. The title of this issue is misleading as I know now that the content which is scrolling is <div class=\"mdl-layout__inner-container\"...></div>. \n. Updated the title. ;)\n. Here are 2 problems:\n1. The example @ https://tleunen.github.io/react-mdl/components/dialog doesn't set the content to be scrollable with the mousewheel on Chrome after the dialog is closed.\n2. Why is the content scrollable with the mousewheel on Chrome when the dialog is opened @ http://codepen.io/jolic/pen/dMmzpX/?editors=0010?\nThe codepen example uses a simple <Layout/> with a dialog inside <Content/> taken from the react-mdl example.\n. Could somebody test both examples without any extensions in Chrome? Maybe this could be the issue?\n. So, I've researched a couple of things and I'm sure the Dialog Component is not suitable. The Dialog is currently supported natively from Chrome and Opera (see http://www.getmdl.io/components/index.html#dialog-section). A polyfill is available  @ https://github.com/GoogleChrome/dialog-polyfill and the demo @\u00a0http://demo.agektmr.com/dialog/ shows that the content can be scrolled even if a dialog is opened. This is not a normal behaviour.\nTherefore it would be better to implement something like react-modal (https://github.com/reactjs/react-modal) as the modal window is appended directly at the <body>.\n. Sorry for the post here but\nwhy is \"New Issue\" disabled?\n. Sorry.\n. See https://www.getmdl.io/components/index.html#layout-section\nWhen you add some big content inside the <main class=\"mdl-layout__content\">...</main> on the first example it works as expected.\n. As I wrote a codepen I realized that I didn't wrap the content with a <Content/> component:\nhttp://codepen.io/jolic/pen/wGJvQg\nWorks as expected.\n. ",
    "markuso": "I have the same need where I just need to pass some markup instead of a string to the title prop as I need to display two pieces of information, like: \"Area / The Title\", where I pass <span><span style={{ color: '#ddd' }}>Area / </span><strong>The Title</strong></span> as the title. See a real example in the screenshot below.\n\nThe title props in the Header and HeaderRow components just needs their propTypes changed to any or specific types (string, number, element, node). That takes care of everything. We then could even pass it something like <span><Icon name=\"...\" /> The Area Title</span>.\nThis would be very useful and it would not impact anything else. The MDL specs never took the React way of coding into consideration and the need to pass components around that displays formatted text. I hope you will consider this.\nUpdate: I would love to see the same done to CardTitle which will make it so much more useful.\n. That is fantastic Tommy. Thank you.\n. @faergeek No, react-mdl did not automatically upgrade from 0.13 to 0.14 but I needed to upgrade to get some of the latest fixes and changes as I needed them on the project. Also, to actually fix the Tooltip too since it was not functioning at all. Thank you for shedding some more light on this.\n. My apologies. It seems to be because they are passed props from redux-form. I will investigate further. Thank you and I'll close this issue for now.\n. Yes I do.\n. The problem turned out to be within the onDrop and onDragStart props that redux-form passes into the textfield when I wrap the component. I will submit an issue on that repo.\nThanks a lot Tommy :)\n. ",
    "vmakhaev": "I raise this question again, cause last changes were published almost month ago.\nAlso FYI, you can make separate commits for version change and add git tags with npm version command.\n. Looking forward to have it.\nBTW, as I understand 1.0.6 is last version for 1.0 and then mdl will start 1.1 version. I suppose they have some reasons for this, like breaking changes or something. Do this solve react-mdl issue with Layout? Or it will be only in mdl 2.0?\n. Ok, at least we know that some day we'll have it :)\n. ",
    "cezarsmpio": "As I thought...\nWhat do you think to build the custom files with sass, less or anyone? Like Twitter Bootstrap http://getbootstrap.com/customize/ but more simple, just primary and accent color.\nCan I change manually the colors using, I dont'n know, \"cmd+f\"? \nThanks!\n. I'm not using onChange or value, I'm using valueLink and I get the error :/\n. ",
    "sontek": "@tleunen Why was this closed?\n. @tleunen ok, I was trying to figure out if what I'm doing is fine and saw this.  So far I've done:\n```\n// Variables and mixins\n@import \"./variables\";\n@import \"~material-design-lite/src/variables\";\n@import \"~material-design-lite/src/mixins\";\n// Resets and dependencies\n@import \"~material-design-lite/src/resets/resets\";\n@import \"~material-design-lite/src/typography/typography\";\n// Components\n@import \"~material-design-lite/src/palette/palette\";\n@import \"~material-design-lite/src/ripple/ripple\";\n@import \"~material-design-lite/src/animation/animation\";\n@import \"~material-design-lite/src/badge/badge\";\n@import \"~material-design-lite/src/button/button\";\n@import \"~material-design-lite/src/card/card\";\n@import \"~material-design-lite/src/checkbox/checkbox\";\n@import \"~material-design-lite/src/data-table/data-table\";\n@import \"~material-design-lite/src/dialog/dialog\";\n@import \"~material-design-lite/src/footer/mega_footer\";\n@import \"~material-design-lite/src/footer/mini_footer\";\n@import \"~material-design-lite/src/icon-toggle/icon-toggle\";\n@import \"~material-design-lite/src/list/list\";\n@import \"~material-design-lite/src/menu/menu\";\n@import \"~material-design-lite/src/progress/progress\";\n@import \"~material-design-lite/src/radio/radio\";\n@import \"~material-design-lite/src/slider/slider\";\n@import \"~material-design-lite/src/snackbar/snackbar\";\n@import \"~material-design-lite/src/spinner/spinner\";\n@import \"~material-design-lite/src/switch/switch\";\n@import \"~material-design-lite/src/tabs/tabs\";\n@import \"~material-design-lite/src/textfield/textfield\";\n@import \"~material-design-lite/src/tooltip/tooltip\";\n@import \"~material-design-lite/src/shadow/shadow\";\n@import \"~material-design-lite/src/grid/grid\";\n/ Fixes small screen layout for navbar /\n@import \"~react-mdl/extra/layout\";\n```\nwhich seems to render everything but the hamburger icon\n. The ./variables is my variable that sets the colors I need.   As a a suggestion, I love the way material-ui does this with a ThemeComponent:\nhttp://www.material-ui.com/#/customization/themes\nSo it might be worth adding that to this project.  They do it with inline-css which is why I'm not using them.  In here we'd have to make it work with something that is extractable.\n. Why is this patch required?  I don't see this problem when using MDL directly but do see it when using react-mdl.\n. @tleunen I'm just trying to figure out what is different about mdl-react than mdl itself.  Here is an example of using MDL directly:\nhttp://codepen.io/sontek/pen/oLZLex\n. Actually, looks like its just not documented.  It does seem to work.\n. ",
    "reygiecacho": "how can i change the button color?. ",
    "nathanmarks": "@tleunen If you're happy with karma+mocha for testing I can assist in writing tests -- just checking out the package now to potentially use in a project. If I do use it, I'll be more than happy to contribute tests.\n. @faergeek Are you talking about simulating real user interactions? I write quite a bit of scripting for headless browsers.\n. @faergeek I have used selenium a bit and I've got a lot of phantomjs experience. \nI think if @tleunen can pitch in and let us know what he sees as in scope for testing here -- we can make a decision on tape/mocha/etc.\nI would start by asking ourselves, what is the goal of this package, and what is the best way to confirm that the goal is being reached?\nIf the goal is to 100% mirror the MDL upstream functionality, perhaps testing render output in different component states (via user interaction) and comparing it to the MDL output is a possibility for tests.\n. I'm happy to contribute tests with either of them (tape or mocha).\nTape is super simple and easy to use.\n. Actually, scratch this, doesn't seem to be causing my issue!\n. ",
    "joshq00": "If you'd like to use karma and tape, I've started a branch on my fork.\nIf not, I'll wait until you get your testing approach sorted out before writing more tests\n. I would actually argue that less assertion functions is better. \nWhen I used mocha and chai, learning the million different asserts was time consuming. Writing tests, I was constantly referencing the docs\nSticking to just a few forces you to simplify what you're testing. I try not to use deep equals or any of those. As much as I can, testing with .equal keeps them very clear about what I'm expecting and makes me better design my tests\n. My question is what is gained when using the long-chained language asserts?\njs\nexpect( obj ).to.have.property( '_id' ).that.is.a( 'string' )\ndoes not give any added value over\njs\nassert( typeof obj._id === 'string' )\nBut it does make it take longer to write the tests.\n\"Do I use .that.is.a.number? or is it .that.is.a( 'number' )? I forget... check the docs\"\n. Re-writing this comment.\nEssentially, the problem is that I couldn't stop the onChange event from propagating.\n``` jsx\nhandleChange ( checked ) {\n   // logic\n   // ...\n   // ...\n   this.props.onChange( this.state.checkedCount );\n}\nrender () {\n   let { title, ...other } = this.props;\n   return (\n      \n{ title }\n\n\n   );\n}\n```\nUse <MyComponent onChange={ console.log } /> and it'll fire twice: once with checkedCount, once with SyntheticEvent.\nIt's hard to reason why: but it's because we trigger it, then the original onChange from the checkbox propagates and fires on MyComponent. But as a user, we never saw this because the handler is (under the covers) swallowing the event and letting it continue propagating. I'd normally have to stop that in 'handleChange'\n. Sorry for those repeated commits. Don't know if you expect one-commit merges. Had to do some tweaking tweaking with the demos\n. If accepted, should probably bump a minor version... As these will be breaking changes\n. I don't see any problem with keeping them in the propTypes, or documenting that all input attributes are valid props.\nHowever, I don't think they should be required if they are not required on the native input element.\nFor example, if I want a text box without a label (maybe I'm just using placeholder, or putting my label elsewhere) - I have to do\njsx\n<Textfield label=\"\" />\nWithout doing label=\"\", I don't just get an invariant warning... I actually get an error thrown\n. I made a fiddle testing behavior with/without labels\nEverything appears to be working properly without labels\n. Fair enough.\nAnyhow, I didn't remove isRequired from the label property. Would you like me to add other properties?\n. Rebased\n. I'll get those back in today or tomorrow at latest\n. @tleunen should be all ready now\n. 100% agree - you'll probably will want to register a handler... but you might not. there are a million edge cases where you could be accomplishing the same thing.\nA use case for not having value is if I'm using a store to keep track of the freeform text instead of state.\nAnother use case is that, sometimes, I need to use onKeyUp instead of onChange. By requiring it, I need to do onChange={ () => {} } just to avoid all the warnings\n. Another reason I can see this being very useful is, when doing a quick code scan, singling out true vs false will be much easier.\njsx\n<Button colored={ true } ripple={ false } accent={ true }>\n// vs\n<Button colored ripple={ false } accent>\nIf changed, a separate discussion is whether \"true\" should be the default value for anything. Considering <Button ripple> makes it very clear that we are adding functionality rather than <Button ripple={ false }> to turn it off\n. I think it's a good start. Things can be modified as they come up over time\n. Exactly my reasoning. React already handles the checking and it's not required on the true input element. Warnings will show as they should, and the user will interact with the element like they would a normal input element.\nAs a user, I might not care to listen to the onChange event. I may be prototyping.\nEspecially in the case of the other input types, I often use defaultValue instead of value+onChange\nMaking the fewest assumptions about what the user \"meant to do\" keeps the library from limiting what they can do\n. But it's allowed. None of those are required properties on input elements. For example, <input type=\"range\" max=\"100\" /> is valid.\nAlso, consider <Slider disabled />\n. <Slider disabled />\n. <Slider defaultValue={ 25 } max={ 100 } />\n. Or, one could have a dom listener registered\n. Not exactly. Take Facebook for example. The majority of the site was done directly mutating dom and they implemented react just for the chat section. There's a reason Facebook doesn't make assumptions about what we meant to do. I can have a full blown site that I just drop in a React component for one piece. That shouldn't break the rest of my app. \n. Another example is if the user is looking at onClick instead of onChange. Or onTouchStart/onTouchEnd\nAssumptions make an opinionated framework and, if I wanted that, I'd use ember or angular\n. Doesn't tabindex have a default of 0 anyhow? I'd have to check into it, but I'm pretty sure that's the case\n. I just tried it : without tabIndex=0, tabbing through still works properly.\ntabindex=0 should be the default for any focusable element\n. I just checked their slider samples and, if you scroll down to \"Example,\" they do show usage without setting tabindex\n. ",
    "bfreis": "Sergey, thanks for the quick response!\nI got it to work now, after upgrading to npm@3.3.6. The error became just a warning now:\nnpm WARN EPEERINVALID react-mdl@0.14.0 requires a peer of react@0.13.x || ^0.14.0 but none was installed.\nAt least it did install react-mdl!\nThanks!\nBruno\n. ",
    "peterssonjesper": "Sorry, was in a bit of a hurry there! The linting errors have been fixed. Do you want me to create a new pull request from my new branch?\nThanks!\n. ",
    "michaelguild13": "Here is an example for a simple fix for the onclick with mdl's tooltip ( or any mdl component ) and react\nhttps://jsfiddle.net/michaelguild/svan6ntd/\nyou could also do this to be more generic for components\nReactDOM.findDOMNode(this).onclick = this.props.onClick\nAlso to keep in scope you could ReactDOM.findDOMNode(this).onclick = this.props.onClick.bind(this)\n. Should this just be a prop option for the datatable vs a new component? That's what we're doing for our component library at Inova. Just a thought, not trying to argue anything. You know your repo better than I :)\n. For our component library with MDL, we bounced back and forth with that same problem. I think that's an architectural problem that get's ironed out with maturity. Really, depends on the masses here vs for us, private. I've been enjoying this repo with comparison on how we are doing it here, at Inova. Either way, great work @tleunen \n. ",
    "generalleger": "@VenelinPetkov did you try to import the npm package?\n@tleunen usually npm packages integrate pretty easily with Meteor, since Meteor can require npm packages the same way vanilla node projects can.  But, some packages integrate better than others.  Some work without any modification, and others need to be tuned for Meteor's  environment.\nThe challenges with google mdl and Meteor are described here: https://atmospherejs.com/zodiase/mdl\n. @tleunen Someone with some time just needs to try it and see how easily they integrate and where the issues are.\n. @darkyen Meteor has built in support for React without using that package.  You can simply do meteor add react\n. @darkyen I think this is what they add...  https://github.com/meteor/react-packages\n. ",
    "szimek": "@tleunen Hey, I've got similar question. I'd like to add a back button to the header:\nhtml\n<header class=\"mdl-layout__header\">\n  <button class=\"mdl-layout-icon mdl-button mdl-js-button mdl-button--icon\">\n    <i class=\"material-icons\">arrow_back</i>\n  </button>    \n  <div class=\"mdl-layout__header-row\">\n    <span class=\"mdl-layout-title\">Some title</span>\n    <div class=\"mdl-layout-spacer\"></div>\n  </div>\n</header>\nI guess it's not possible with the current Header component? I can always use plain HTML, just asking :)\n. This works:\nhtml\n<header className=\"mdl-layout__header is-casting-shadow\">\n  <IconButton name=\"arrow_back\" className=\"mdl-layout-icon\" />\n  <HeaderRow title={title}>\n    ...     \n  </HeaderRow>\n</header>\n@tleunen Thanks for this awesome library!\n. ",
    "FoxxMD": "+1 datatables with solid onchange events and cell customization (using components in cells) is essential for my projects\n. @tleunen Thanks for the example! Interesting..\nSo if I wanted to use custom components I would do something like this?\n``` jsx\nconst mappedColumns = this.props.data.map(function (entity) {\n  return {\n    customColumn1: ,\n    customColumn2: \n  };\n}, this);\n\n```\nAt first glance I can't see any downsides but I wonder how this approach would compare to the way react-bootstrap-table and griddle tackle formatting columns -- they take the approach of providing a callback for each column and supply the row/column data, expecting a component/jsx in return.\n. The more I look at it the more I like the way it is done now actually. Since react-mdl allows custom components the only real difference between the way react-mdl does it and the way react-bootstrap-table does it is cosmetic (in that you have to use dataFormat to insert a component vs. mapping your data to the component and passing it to DataTable)\nI think the only refactoring really needed is providing a react-mdl specific implementation for checkboxes/selecting rows.\n. +1 for HoC. I don't know how you are writing the sortable functionality but providing a way to override your default functionality (per-column?) would be super helpful if the data was more complex than a plain value.\n. perfect\n. ",
    "treeder": "Yes, just tried it again, this is my import:\nimport { Textfield } from 'react-mdl/lib/Textfield';\nThis is the render:\nrender: function() {\n    return (\n      <div style={{marginBottom: '50px'}}>\n             <Textfield/>\n      </div>\n    );\n  }\n. Nice, that works, thanks!\nAnother quick question, notice it doesn't support name or ref, what's the best way to get all the values on submit?\nie: these, don't do anything: \nname=\"description\" ref=\"description\"\nbut they do on regular  fields. \n. Do you have a separate onchange handler for every field then?\n. ",
    "noisecapella": "Just pushed!\nBy the way it seems like similar changes would be needed for Radio and possibly other components \n. Sorry, the example might be a bit oversimplified. I added another codepen which is closer to the problem we're having: http://codepen.io/anon/pen/mPozRG?editors=0010\nTo reproduce, select all text and delete it (or one character at a time if you prefer). The text won't change because the onChange handler only allows text with at least one character. Change focus away from the textbox, and the floating label should rest inside the textbox as if it were empty.\n. ",
    "Pajn": "Exactly, would be great if they instead were\n@import \"~material-design-lite/src/variables\";\n@import \"~material-design-lite/src/mixins\";\nso one could import the file directly instead of copying it and changing those two imports.\n. ",
    "ciccia": "+1\n. ",
    "brysgo": "@tleunen - thanks, I'll take a look\n. Going to close this since it is really old and i can't remember what it is about.. ",
    "lawrencesong": "thanks!\n. ",
    "jpklzm": "Any updates about this case?\n. ",
    "vmagro": "I'm also interested in this. It would also be nice for those of us that import all our css with webpack and not have to add another link for the mdl stylesheet\n. ",
    "thomasantony": "Is there any way at present to dynamically specify the color options from React code?\n. Nevermind. I wasn't including the material.js file assuming that webpack would take care of it. \n. ",
    "morlay": "SASS config\njs\n{\n  importer: ((aliasMap) => {\n    return (uri, prev, done) => {\n      if (aliasMap[uri]) {\n        return done({\n          file: aliasMap[uri]\n        });\n      }\n      return done();\n    };\n  })({\n    // if need to custom or just path to node_modules/material-design-lite/src/_variables.scss\n    '../variables': path.join(process.cwd(), 'path/to/custom/variables.scss')\n  }),\n  includePaths: [\n    // need to config this, variables.scss includes other file like _color-definitions.scss\n    'node_modules/material-design-lite/src'\n  ]\n}\nnow just import the _layout.scss from ~react-mdl/extra/_layout.scss;\n. https://github.com/morlay/material-design-lite-cjs/blob/master/index.js\njs\nexports['MaterialButton'] = require('./src/button')['MaterialButton'];\nexports['MaterialCheckbox'] = require('./src/checkbox')['MaterialCheckbox'];\nexports['MaterialDataTable'] = require('./src/data-table')['MaterialDataTable'];\nexports['MaterialIconToggle'] = require('./src/icon-toggle')['MaterialIconToggle'];\nexports['MaterialLayout'] = require('./src/layout')['MaterialLayout'];\nexports['MaterialMenu'] = require('./src/menu')['MaterialMenu'];\nexports['MaterialProgress'] = require('./src/progress')['MaterialProgress'];\nexports['MaterialRadio'] = require('./src/radio')['MaterialRadio'];\nexports['MaterialRipple'] = require('./src/ripple')['MaterialRipple'];\nexports['MaterialSlider'] = require('./src/slider')['MaterialSlider'];\nexports['MaterialSpinner'] = require('./src/spinner')['MaterialSpinner'];\nexports['MaterialSwitch'] = require('./src/switch')['MaterialSwitch'];\nexports['MaterialTabs'] = require('./src/tabs')['MaterialTabs'];\nexports['MaterialTextfield'] = require('./src/textfield')['MaterialTextfield'];\nexports['MaterialTooltip'] = require('./src/tooltip')['MaterialTooltip'];\nin my build, i only process these files,\nand in origin one, they have this file https://github.com/google/material-design-lite/blob/master/src/third_party/rAF.js as polyfill.\nConfigures: https://github.com/morlay/material-design-lite-cjs/blob/master/scripts/build.js#L15\nby the way, in server render, \nhave to add the dirty code. :-( \njs\n// mdl mock\nglobal.addEventListener = ()=> {\n};\nbecause of https://github.com/google/material-design-lite/blob/master/src/mdlComponentHandler.js#L474\n. Seems componentHandler is not necessary. Life cycle in React can replace it.\nAnd we could make the export effects as component too.\nHow do you think this way\uff1f\njs\n<RippleEffect>\n    <Button></Button>\n</RippleEffect>\n``` js\n// RippleEffect\nimport { Children, cloneElement } from 'react';\nimport { MaterialRipple } from 'material-design-lite-cjs/src/ripple';\nimport connectMDL from './utils/connectMDL';\nconst RippleEffect = (props) => {\n  return cloneElement(Children.only(props.children), {\n    className: 'mdl-js-ripple-effect'\n  });\n};\nexport default connectMDL(MaterialRipple)(RippleEffect);\n```\n``` js\n// Button\nimport { MaterialButton } from 'material-design-lite-cjs/src/button';\nimport connectMDL from './utils/connectMDL';\nconst Button = (props) => {\n    // ripple is not need to config in the pure button\n    const { accent, className, colored,\n      primary, raised, component, href,\n      children, ...otherProps } = props;\n// mdl-js-button is for componentHandler, once we not depend it, \n// we can remove this className.\nconst buttonClasses = classNames('mdl-button', {\n  'mdl-button--raised': raised,\n  'mdl-button--colored': colored,\n  'mdl-button--primary': primary,\n  'mdl-button--accent': accent\n}, className);\n\nreturn React.createElement(component || (href ? 'a' : 'button'), {\n  className: buttonClasses,\n  href,\n  ...otherProps\n}, children);\n\n}\nexport default connectMDL(MaterialButton)(Button);\n```\n``` js\n// connectMDL\nimport React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nexport default function connectMDL(MaterialClass) {\n  return (ReactComponent) => {\n    return class MDLComponent extends Component {\n      componentDidMount() {\n        this._materialInstance = new MaterialClass(findDOMNode(this));\n      }\n      componentWillUnmount() {\n        this._materialInstance.mdlDowngrade();\n      }\n      render() {\n        return ;\n      }\n    };\n  };\n}\n```\n. Just want to make the dependences could be tracked.\nKeep the props ripple, we still could did this.\nMaterialRipple  \u2192 RippleEffect ( may just simple function )\n                                    \u2192  Button (base MaterialButton)\n                                    \u2192  IconToggle (base MaterialIconToggle)\n( After for maintenance works in some big company, I really fear the global dependences, sorry for this :-)\nMaterialRipple  \u2192 RippleEffect\nCustomMaterialRipple  \u2192 CustomRippleEffect\nMaterialIconToggle  \u2192 IconToggle\nMaterialButton  \u2192 Button\nThen could let user to composed, and let user could make custom effect as a pure wrapper.\nIn real project. we usually make some common component instead of configure everywhere. so I think this will not different for usage.\nRippleEffect(Button(raised, colored, primary)) \u2192 PrimaryButton\nRippleEffect(Button(raised, colored)) \u2192 SecondaryButton\n. Sorry, I haven't got this point. \nIn commonjs may be easier to overwrite the official MDL.\n``` js\nimport { MaterialLayout } from 'material-design-lite-cjs/src/layout';\nMaterialLayout.prototype.CssClasses_.INNER_CONTAINER = 'mdl-layout__inner-container';\nMaterialLayout.prototype.init = function newInit(){}\nexport {\n  MaterialLayout\n}\n```\n``` js\nimport { MaterialLayout } from './customs/MaterialLayout';\nimport connectMDL from './utils/connectMDL';\nconst Layout = (props) => {}\nexport default connectMDL(MaterialLayout)(Layout);\n```\n. Marry Christmas. ~\nAnd once official provide the UMD version in 2.0, my package could delete.\n. After talking with the mdl team, https://github.com/google/material-design-lite/issues/2028\nI'm persuaded following the react way to create these components, https://github.com/morlay/react-pure-mdl/\nIt is already used in my recent project, most of them works well. \nBut still need more testings and docs, if I have enough time.\nAnd in the next big version of mdl, there will be a standard way for component.js https://github.com/google/material-design-lite/issues/1820.\nMaybe just prepare the new version and let this issue closed.\n. I like css-modules, however,  css-modules is not fully compatible with BEM.\nAnd in the MDL, there are some dirty overwrites crossing components. That means we have to rewrite some css too, if we use css-modules. And http://react-toolbox.com/ which is created by css-modules, is good enough ( There are too may choices in frontend :-P ).\nSo I think we have to use constants to maintain the classNames like https://github.com/morlay/react-pure-mdl/blob/master/src/cards/constants/CardCssClasses.js\nIt is react-mdl, may just keep rules of the MDL. \nAnd Google prefer to use some unstable features, even broken in their Chrome, https://github.com/google/material-design-icons/issues/186.\nSo I feel we should make the composed component easy to replace for user to write their fallbacks ( like the Icon in LayoutHeader ) .\n. ",
    "andredigenova": "I've created a jsfiddle for the issue and simplified it down. I'm no longer convinced this PR is the correct fix. I'll create a separate issue.\nEdit: Issued create #152 \n. IMHO mdl's built-in behaviour of automatically clearing the error on user input is wrong in the context of react. \nIt allows for a situation where what the component is displaying is inconsistent with the react property that is set. In the example I gave, this.state.error is still contains 'oops' after the user inputs something. If a developer wants the error to clear on user input, they should have to implement onChange and clear this.state.error via this.setState()\nAlso, this inconsistency breaks the error display behaviour of the component in other ways. For example, all state changes causing a re-render in the parent will cause the Textfield component to flicker between showing and not showing an error if the user enters input between the state changes.\nIs it possible to disable mdl's behaviour of auto clearing the error? I'm not very familiar with mdl's JavaScript.\nEdit: I should probably file this as a separate issue but related issue.\n. ",
    "gillchristian": "I'm having the same issue, but the material.js file is being included.\nProblems is with the <Drawer> component\n. _Thanks!_ That fixed the error, now it does not show. \nThe <Drawer> still not showing. But I guess that is not related to the issue.\n. That's may code, <App> is the main component and <MainNav> is for now just a wrapper.\nI am seeing everything rendered but the <Drawer> as I mentioned.\n``` jsx\nimport React from 'react'\nimport { Layout, Content } from 'react-mdl'\nimport CategoriesContainer from '../containers/CategoriesContainer'\nimport MainNav from './MainNav.jsx'\nconst App = () => (\n  \n\n\n\n\n\n\n\n)\nexport default App\n```\n``` jsx\nimport React from 'react'\nimport { Header, Navigation, Drawer } from 'react-mdl'\nconst MainNav = () => (\n  \n\n\nLink\n\n\n\n\nLink\nLink\nLink\nLink\n\n\n\n)\nexport default MainNav\n``\n. Yes, looks like that was the problem :grin: \nGlad is solved now :smile: \nBTWreact-mdl` is awesome!\n. ",
    "drouillard": "+1 on this issue being helpful. I was seeing weird behavior with ref callbacks not being called. It was due to including the material.js script tag at end of body and with defer attribute. Included material.js file properly and my issue cleared up as well. \n. ",
    "QuantumInformation": "sure, all I see is:\n\n. Closing as facebook.com is blocked, I will try again when its not blocked.\n. ",
    "Gregoor": "Oh, I did not know this type existed. thanks, will change!\nEdit: But wouldn't the type node exclude a string? Well same probably goes for object.\nEdit2: Of course, I forgot we have .oneOfType!\n. It took a while but I think I squashed it. Always grateful for a chance to work on my git skills.\n. Thanks for getting back to me so quickly (also big thanks for the library, my HTML looks so much better without all those mdl-classes :) ).\nI noticed that the change is happening in the underlying input elements, the MDL classes are just not updated. If that's also what you're talking about would I then have to fix the MDL classes when changes happen?\n. ",
    "kretz": "Right, that is how I do it today.\nBUT what I also found was that if this spinner is taller than the other\nelements in a parent element, then the height of the parent element changes\non removal, but not on hiding.\nSo, I still think there is a case for start and stop. Are you open for a\npull request with this functionality?\nOn Sat, Jan 16, 2016, 23:15 Tommy notifications@github.com wrote:\n\nClosed #189 https://github.com/tleunen/react-mdl/issues/189.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tleunen/react-mdl/issues/189#event-517085121.\n. \n",
    "AugustinLF": "Yes I did a require('react-mdl/extra/material');. Then, I get a Element is not defined at line 187 of material.js if (!(typeof element === 'object' && element instanceof Element)) {.\nI solved that by adding a global.Element = global.window.Element; after my JSDOM setup, since in a JSDOM context, Element is not a global. Sorry for bothering you!\n. ",
    "aaugustin": "Giving the two fields different keys i.e. <Textfield key=\"first/second\" ... /> makes the problem go away. This suggests that the issue arises when React reconciles the two Textfields.\nIt may have something to do with the fact that MDLComponent implements componentDidMount / componentWillUnmont but not componentWillUpdate / componentDidUpdate.\n. Yes, I couldn't find a convincing way to handle this in Textfield. Perhaps it's best to treat this as a known limitation and to document the workaround. My use case may not be very common.\n. For my own use I have a wrapper that sets key={props.name} but I don't think this solution can be generalized because:\n- not everyone will set unique names on fields because they aren't necessary if the form submission is handled in JavaScript based on the React state\n- it's likely to have unintended consequences; it may do more harm than good\n. Ah, sorry, while the documentation states that the LinkState mixin is deprecated (like all other mixins), it wasn't clear to me that valueLink was also deprecated.\nI looked at the code and indeed it is.\n. (For completeness, the problem in componentDidUpdate is that, when this.props.valueLink.value !== prevProps.valueLink.value, the block that deals with value changes isn't executed because this.props.value !== prevProps.value evaluates to false -- both are undefined.)\n. I noticed this because I was updating the value programatically \u2014 not a typical use case, obviously \u2014 and passing it through the valueLink.\n. Thanks a lot for working on this!\nI tried running a version with this change in my development environment to check that it fixes my original issue. Unfortunately I failed, due to my lack of knowledge of npm.\nMy latest attempt was:\ncd node_modules\nrm -r react-mdl\ngit clone https://github.com/tleunen/react-mdl.git\ncd react-mdl\ngit checkout 1c926e9a5835349fc318667070b697704b019cb7\nnpm install\nnpm run compile\nAt this point, my app fails with:\n\nError: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's render method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).\n\nThis must be because node_modules and node_modules/react-mdl/node_modules each have their copy of React.\n. Indeed, I could run the new code by compiling react-mdl and replacing the node_modules/react-mdl/lib by the compiled output.\nThis patch clearly goes in the right direction.\nTruth be said, I could still break your latest codepen as follows:\n- open http://codepen.io/anon/pen/EPRLww\n- click in first field\n- type \"foo\"\n- click on toggle\n- click on second field\n- type \"bar\"\n- click on toggle\n- click on first field\n- select all text and remove it\n- click on toggle\nAt this point, the \"bar\" text is superimposed on the \"second\" label.\nAdmittedly, it's an edge case. I'm not sure how much effort it is reasonable to put into fixing it!\n. I guess we're good, then. Thanks a lot for your investigations on this issue!\n. I'm on 44.0.2 as well and the problem persists after restarting Firefox and force-refreshing :-/\nIt works in Chrome and Safari. Not sure what's going on. \n. It works on my wife's laptop. Hmpf.\n. Ugh, it was Privacy Badger being overzealous and blocking npmcdn.com. Really sorry for the noise!\n. ",
    "Permagate": "Hi @tleunen, I'd like to try tackling this, if you haven't already. I need this component at the moment, so I might as well.\n. Hi @tleunen, thanks for the review :+1: I'll try to update the docs as well sometimes tonight.\nReact.createElement(typeof children === 'string' ? 'h4' : 'div', containerProps, children)\nRegarding DialogTitle, I'm still not sure how to approach this correctly. In the mdl sample code, it appears they intend the 'mdl-dialog__title' to be used in a title element.\n<h4 class='mdl-dialog__title'>My title</h4>\nBut on my tests, it can be a div as well so users can put inside whatever they want. So that's why I currently implement it like that:\n- If the children is only a string, then it will be rendered as h4 element.\n<DialogTitle>My custom title!</DialogTitle>\n<!-- will become <h4 class='mdl-dialog__title'>My custom title!</h4>\n- If the children is not a simple string, then it will be rendered as div element.\n<DialogTitle>\n    <h3>My custom title!</h3>\n    <h5>My custom subtitle!</h5>\n</DialogTitle>\n<!-- will become\n    <div class='mdl-dialog__title'>\n        <h3>My custom title!</h3>\n        <h5>My custom subtitle!</h5>\n    </div>\n-->\nMaybe I should stick to an element?\n. Documentation page added. Not sure if I should add a preface talking about the polyfilling dialog (which currently only works with Chrome). But I left it text-less like the other pages. Let me know if you prefer otherwise.\n. Hi @tleunen, thanks for the link. there are some new things regarding the native dialog element that I have learned.\n\nUsing the cancel event should solve this. In your case, try with cancel instead of onCancel.\n\nI couldn't find the doc that says onCancel would be implemented natively, cmiiw. So I'm thinking if we should provide one ourselves? So that we don't need to attach a listener everytime we create a dialog, like @t1bb4r did.\n\nI'm thinking of cancelling the escape key by default, unless the user provide a cancel event.\n\nYeah, I agree.\n. @tleunen Heya, I was preoccupied with other things last week, so I just take a look at the fix today. I agree with @skaapgif. I think specifying onCancel props still doesn't replace the prevent function behavior, does it?\nI have to change the following:\nthis.refs.dialog.addEventListener('cancel', prevent);\nto\nthis.refs.dialog.addEventListener('cancel', this.props.onCancel ? this.props.onCancel : prevent);\nto prevent the prevent function from being executed. Is it working as intended on your end without changing the above line of code?\n. Ah, I'm talking about the component itself: https://github.com/tleunen/react-mdl/blob/master/src/Dialog/Dialog.js#L19\n. Based on https://babeljs.io/docs/learn-es2015/#math-number-string-object-apis, we might just need to include polyfill to support Array.from syntax. Or we can just avoid it altogether.\n. Yeah, I feel that would be better. It is inconsistent with the other component's style. I initially used isOpen because I thought I should make it different with the native open.\nGive me a moment, I'll update the PR.\n. Personally, when I saw onClick, I thought it was a handler when snackbar is clicked (not just the action button). I think we should keep mdl naming (actionHandler). Or if we want to stick to on- naming, maybe onActionClick?\n. You are right, I should have checked my demo more thoroughly.\n. Oh yeah, I'm a bit confused about testing warning in the console. I saw similar scenarios in other components (for example Tabs-test.js:85, but it simply render the element without expecting anything. I'll just remove it then.\n. ",
    "darenju": "I have started working on that. Should I create my PR?\n. So, we'd have a PrimaryContent and SecondaryContent components? Also, there's this difference between \"secondary content\" and \"secondary actions\", and the latter can be a link or a button, if I'm not mistaken.\n. The ListPrimaryContent and ListSecondaryContent seem pretty decent.\nHowever, I don't get your second paragraph. What we could do is providing a ListItemAction that would take a icon, a onClick and a child content for label. What do you think about this?\n. For example, this code (3rd example on Components section of MDL):\nhtml\n<div class=\"demo-list-action mdl-list\">\n  <div class=\"mdl-list__item\">\n    <span class=\"mdl-list__item-primary-content\">\n      <i class=\"material-icons mdl-list__item-avatar\">person</i>\n      <span>Bryan Cranston</span>\n    </span>\n    <a class=\"mdl-list__item-secondary-action\" href=\"#\"><i class=\"material-icons\">star</i></a>\n  </div>\n  <div class=\"mdl-list__item\">\n    <span class=\"mdl-list__item-primary-content\">\n      <i class=\"material-icons mdl-list__item-avatar\">person</i>\n      <span>Aaron Paul</span>\n    </span>\n    <a class=\"mdl-list__item-secondary-action\" href=\"#\"><i class=\"material-icons\">star</i></a>\n  </div>\n  <div class=\"mdl-list__item\">\n    <span class=\"mdl-list__item-primary-content\">\n      <i class=\"material-icons mdl-list__item-avatar\">person</i>\n      <span>Bob Odenkirk</span>\n    </span>\n    <span class=\"mdl-list__item-secondary-content\">\n      <a class=\"mdl-list__item-secondary-action\" href=\"#\"><i class=\"material-icons\">star</i></a>\n  </span>\n  </div>\n</div>\nWould be:\njsx\n<List>\n  <ListItem>\n    <ListPrimaryContent icon=\"person\">Bryan Cranston</ListPrimaryContent>\n    <ListItemAction icon=\"star\" onClick={/* ... */} />\n  </ListItem>\n  {/* ... */}\n</List>\n. Everything seems clearer and precise now. Do we still agree that ListItem has twoLine and threeLine prop? Otherwise, we couldn't set .mdl-list__item--two-line or .mdl-list__item--three-line\nIf so, then it's alright. Attaching mdl-list__item--secondary-action to the child rather than on the parent seems actually more compliant to the specs.\nIf everything is alright, I could start writing it today.\n. Keeping the twoLine and threeLine (with trailing S or not?) is better than specifying body or subtitle as you mentioned it.\nHowever, the point with CSS classes is that the parent must have it (-two-line or -three-line). Actually I found a way to pass this prop to ListItemContent if it's defined in ListItem.\nI think we're all set, aren't we?\n. I'm currently working on it.\nHave actually done a lot, and the trickiest part is over, I guess. Expect more commits by the end of the day. :)\n. I can't get to pass the Travis tests while it passes on my machine... Do you have any idea what it could be? @tleunen \n. Thank you for your feedback! It helps me get better with React.\nI have fixed most of the things, except the part for the icon/avatar point. We need to design this as well.\n. Okay, tomorrow I'll work on avatar and everything else. Thanks for your feedback again.\n. Sorry I haven't replied. I actually did some work, but was celebrating my birthday meanwhile. I'm glad my work has been merged. :+1:\n. I don't agree on this one, as for testability it's better to return only one value. \n. We would need to test two cases here: the regular case and the case where it's a ListItemContent two returns would mean adding another test case. At least that's what I learned. And, I previously had this same exact code, but code coverage was lower (due to what I just explained.)\n. Okay then, I will rollback to two return statements and will add tests.\n. ",
    "vurt007": "great, thanks ... I'll update\n. ",
    "kuy": "Thanks for your reply!\nYes, I'm using un-released Dialog component.\nBecause I'm using react-mdl with Redux, if I put a dialog outside of the root element (in Redux, it's called container component), it will be out-of-control. I can put a dialog component as a pure React component, but I can't show/hide it from Redux because it isn't connected to Redux's <Provider>.\n. Ah...you means I can still set open property of <dialog> element via DOM interface or call showModal() via JavaScript API.\n. @tleunen Sorry for boring you by my question. Finally, I got what I wanted. Using react-portal, I can put <Dialog> component under Redux's rendering tree with placing <dialog> tag as a child of <body> tag.\nWhy I want to keep <Dialog> component in Redux's rendering tree is that I want to pass a content for the dialog and receive events from the dialog in manner of React.\nThanks for working on react-mdl.\n. ",
    "zeskysee": "\n@tleunen so you mean add the buttons outside the table?\n. May I know will the new data table (not released yet) will be working if i did not specify any table header?\n. After re-read the material design's data tables guideline, it is correct to make the assumption that the header is mandatory\n\nA data table contains a header row at the top that lists column names, followed by rows for data.\n\nSorry for my ignorance question. Thanks for the quick response and answer :) Looking forward to your new release data table.\n. ",
    "rimaudev": "I just realized i was on react-mdl 1.3.0 (that supports mdl 1.0.6). My mistake, will close this ticket.\nThanks for the quick feedback.\n. ",
    "t1bb4r": "I'm very new to React so forgive my ignorance, here is what I've done to solve it. Hope this helps some one.\nThe following did not work (The event might be unsupported by React?)\n<Dialog open={this.state.openDialog} onCancel={this.handleCloseDialog}>\nSo I did the following:\ncomponentDidMount() {\n    ReactDOM.findDOMNode(this.refs.dialog).addEventListener(\"cancel\", this.handleCloseDialog);\n}\nrender() {\n  ...\n     <Dialog open={this.state.openDialog} ref='dialog'>\n  ...\n}\nNow when a user presses escape, or exits the dialog without using the button, the state is correctly set and the dialog can be opened once more.\nEdit: Code works as a drop-in to the examples.\n. ",
    "carpie": "Ah, I see.  If unmount happens while the animation timer is running.  Will do.\n. Sure :) Done... Sorry about that...\n. ",
    "Download": "I tried a few more times but it is consistent. It's probably got something to do with the combination Karma/Windows I suspect.\nWhy the need for a framework like that though? Your components are mostly pretty simple so why not just test the output or ReactDOMServer.renderToString?\n\nit is consistent.\n\nEDIT: Maybe I have to expain that a bit more... It consistently crashes with an out of memory, but the output is different each time, so it's not crashing in the same code.\n. > For the v2, I'd like to not depend on the MDL js part, in order to build real react component.\nYes! It would be so much better! :)\n. Ah! That's great! Thanks!\n. I actually rebuilt react-mdl's Drawer to be a controlled component with an open property. I also added an autoClose property that closes the drawer after a click on a nav link. It's a feature that has been requested many times on mdl.\nIt also has a right property to use it on the right hand side of the screen, but you may not like that part so much depending on your position on the 'holyness' of the material design guidelines, so to speak.\nAlso, I found that it was useful to de-couple the layout obfuscator and made it into a separate component named Modal that I reuse for Dialog (yes I re-wrote that too).\nIf you want to have a look at what I have currently, check it out here:\nhttps://github.com/Download/bridalapp-ui/blob/master/src/components/Mdl/mdl-extras.jsx\nAnd to see it in action:\nhttp://www.bridalapp.net\n(note the button on the far right of the appbar; it opens the right drawer)\n. Sorry to comment in a closed issue. I actually have the beginnings of an add-on library to react-mdl that contains some components that I built for my app that I think may be usable for others as well. I have an alternative for Dialog for example that doesn't use the native components for people like me that think it's not worth the polyfill until support for it is more widespread. I also got some stuff that 'violates' Google design principles such as a right drawer or an alternative for Badge that has the bubble expand to an ellipsis for larger text. In addition I have a simple lightbox and I am experimenting with providing controlled and stateful versions of things like Textfield, and of offering standard interfaces with the controlled versions of such components to make integration with Redux super easy.\nAnyway, I just wanted to say that I fully agree with your desire to drop the dependency on Google's scripts. They are built (imho) with a different kind of model in mind than React's. They assume the bulk of the components will be rendered once (and then automagically 'upgraded' by the material.js script) and only some of the components will be injected dynamically later. Just something simple as the menu button opening and closing the left drawer is so different from how you would do this in React. I'll take a look at the v2 branch and see if I can contribute in some way. In the mean time do you have tips on what to read (except for the code :) ) to get an idea of where I could step in? \nAlso I wonder about your position on the microwrapper thing? Would you be willing to accept PRs that optionally allow people to deviate from Google's design guidelines? For example I had already started on a PR to add a right property to Drawer so we could use it on the right hand side of the screen, when I realized that it's against Google guidelines and you would probably not accept it. I am now toying with the idea of a react-mdl-naughty module that adds such components but I never just asked you what your position is.  :)\n. The problem is that MDL is created for the 'jQuery + Bootstrap' design paradigm and there is a lot of 'magic' going on that is very counter intuitive for React users. Just how you need to close the drawer for example, shows that it's often not a good match. \nI think small changes to bring react-mdl in line with React are a good thing. MDL is mostly about the stylesheet anyway. Personally I would be most happy if we could use the original stylesheet from the MDL project directly and completely ignore their .js file because the behavior would be handled 'the React way' by react-mdl.\n. @tleunen \nIn my previous comment I talked about offering a standard API for working with controlled components. If you want to see how it works, open the dev tool on http://www.bridalapp.net/Wedding+Dresses and paste this command into the console:\njs\nbridalapp.leftDrawer.openDrawer()\n...and marvel at the magic of it. I can actually control most of the app from the console now. I am not really using it for anything in particular yet, but I think this will prove to be really powerful if done right. Try this for kicks:\njs\nbridalapp.products.setFilter({category:'Wedding+Dresses', brand:'Lilu Rose'});\nbridalapp.products.search();\nbridalapp.auth.provoke();\nbridalapp.auth.loginDialog.username.setValue('testuser');\nbridalapp.auth.loginDialog.password.setValue('secret');\nbridalapp.auth.login();\nbridalapp.rightDrawer.openDrawer();\nbridalapp.auth.logout();\nThe loginDialog is an instance of an api class that parallels the Dialog component. The username and password fields are instances of the api class that parallels the Textfield component. So when we setValue on these fields, we immediately see that reflected in the GUI. And to link the two is as simple as (in ES6):\njs\nrender() {\n    const { loginDialog } = this.props;\n    return <LoginDialog {...loginDialog} />\n}\nAnd the whole stuff is backed by a Redux store, meaning the React components are almost all stateless and we have a very predictable mechanism to mutate the state.\n...I realize I'm going off in a tangent... Suffice it to say that I am very enthusiastic about react, redux, (react-) mdl, and especially about the power the combination provides, so I got lots of ideas on this library that I'd like to work on. But my interest is mostly just outside of the 'core' of MDL.\nSo yes I really like your idea of an add-on module. Maybe even multiple. Here is two I'd like to work on:\n- react-mdl-naughty\n- react-mdl-redux\nreact-mdl-naughty\nContains 'naughty' components in the sense that they violate Google's Material Design guidelines in some way. For example, I have a FlipCard component. Google says about it:\n\nCards do not flip over to reveal information on the back.\nhttps://www.google.com/design/spec/components/cards.html#cards-behavior\n\nHowever, I agree with Burke Holland\n\nA card on your desk would have a front and a back. You would be able to physically pick that card up and turn it over. It can have just as much information on the front as it does on the back. If you can\u2019t flip it over, it\u2019s not a card \u2013 it\u2019s a sticker.\nhttp://developer.telerik.com/featured/creating-flippable-cards-ui/#real-cards-flip\n\nIn the end, I don't want my app to be a Google clone, but instead I want it to feel at home, but still be different. Components like that could fit nicely in this 'naughty' project.\nreact-mdl-redux\nThis would offer the api classes allowing you to integrate redux and react-mdl in the way that enables a 'scriptable' GUI like I talked about above,\nI have actually been thinking about these projects for some time now as I've been building these components for Bridal App, but I never published them because of the v2 coming and more important, because I would want to feel supported in publishing them because of the tight dependency on / integration with this project.\nLet me know what you think and don't spare me  :)\n. > Nice work!\nThanks! :)\n\nThe way you did to access the components using the console is kinda out of React. It looks really cool and could be helpful for testing for example.\n\nYes, it looks as if you are accessing the components, but actually you are accessing separate objects, that manipulate a Redux state tree (by dispatching actions to it), which is in turn connected to your top-level React component(s) using connect from react-redux. Even though we can send imperative commands to a text field in the middle of the hierarchy, all information actually flows top-down through the component hierarchy in 'the React way'.  \n\nI'd need to see how your project are integrated with react-mdl, but v2 will be quite close to v1 in term of feature and \"api\". Probably not a lot of breaking changes, so it should be fine. I'll be able to help and give more information when we'll be closer to the release of v2.\n\nThank you! I will work on setting up the projects in the coming weeks. I have the basic code, but I need to create the builds and CI tests etc. I will keep you posted on my progress, but I have to keep the business runnign as well so it will take some time.\n:+1: \n. Oh, on a related 'note':\n\nCheckbox is only a \"controlled\" component now. No more defaultChecked.\n\nThe cool api thing I did above depends on components being controlled. This is why I replaced the Drawer with my own version (well, that and the naughty right drawer thing). I was hoping that we would, for v2, make sure that all component state (such as drawer being open / closed, dialog being shown or not, text in inputs etc, etc) would be derived directly from props. Am I right that this is your plan? \nIn essence I am asking if all components will be stateless (or at least, have a stateless version).\n'stateless' does not include things like scroll state... though it would be awesome if you could control that from the console as well... mmm  :)\n. :+1: \nI think I mostly know how to make a stateful component stateless, so if you have some specific ones you like some help on, create issues for them and I'll have a look. \n. @darkyen Wow that's some cool stuff you got there! I'd like to include some of those if that's ok by you?\n. @darkyen That's great! Let me have a good look at your project and mine and I'll see if I can set up a base repo that combines both.\n. > Not sure if it's possible to try their v2 version before they hit alpha.\nThey are doing open source development right? So you could just clone their v2 branch or whatever I guess?\n@HriBB Life intervened a bit I am afraid. I won't have the time on my hands in the short term to set up that project. However I would be interested to contribute my stuff to it. \n. This change breaks including ReactMDL from a regular script tag.\nSee https://github.com/tleunen/react-mdl/issues/298\n. react and react-dom are the module names. React and ReactDOM are the names of the externals. This is reflected in webpack's config:\njs\nmodule.exports = {\n  externals: {\n    react: 'React',\n    'react-dom': 'ReactDOM'\n  },\nThis snippet of config is mapping the module react to the external React, which is expected to be found on the root object (which is this, which is window). This config was good before it was changed. These are externals, because ReactMDL does not get to decide what to fill in here. It was decided by Facebook when they chose react as their module name to publish on NPM and React as the name to use for publishing to the window object. All this config does is inform webpack about this.\n. > Indeed, kinda make sense... So are the require('React') and require('ReactDOM') expected in the header of the output file?\nI don't think so actually. It is my understanding that require is supposed to accept the module name (lowercase), whereas the 'import' from the window object is supposed to use the uppercase name... I'm not sure what (if any) is the right term for that name... 'global name' maybe?\n. Yeah I see what you mean. I agree that I would also expect the require lines to use the lowercase module name... I know that webpack is inserting it's own require so maybe it's got something to do with that?\n. Yeah you are right it must be the real require... But still it works? Strange. I have to admit that I find webpack's config options very confusing at times. Maybe the best thing would be to just ask a question on the webpack issue tracker? Sokra is a very helpful guy I bet he is willing to help. He helped me in the past with questions I had.\nFor comparison, here is React DOM:\nhttps://npmcdn.com/react-dom@0.14.2/dist/react-dom.js\nAs you can see, it is doing what we would expect:\njs\nmodule.exports = f(require('react'));\nand\njs\ng.ReactDOM = f(g.React);\nHowever, it looks like this code was generated by another tool, or handwritten...\n. I think your peerDependencies need an update BTW:\njs\n\"peerDependencies\": {\n    \"react\": \"0.14.x || ^15.0.0-rc\",\n    \"react-dom\": \"0.14.x || ^15.0.0-rc\"\n  },\nI think that NPM sees 15.0.0 as incompatible with 15.0.0-rc, though again I'm not sure.\n. It seems you can specify aliases per output target:\njs\nexternals: {\n  \"react\": {\n    root: 'React',\n    commonjs2: 'react',\n    commonjs: 'react',\n    amd: 'react'\n  }\n}\nSee\nhttp://stackoverflow.com/questions/34252424/webpack-umd-lib-and-external-files\n. @tleunen I'm preparing a PR for it\n. @tleunen Could you re-open this issue?\n. Don't forget to render the props.children as well when implementing this.\nSEE Make Textfield render children #326\n. I've been thinking about this one a lot. My app has 2 drawers, one on the left hand side and one on the right. MDL's Layout component is a pain in this regard because it assumes you may have a left drawer but never a right one. I ended up using my own drawer component that is fully controlled.\nPersonally, I think in React MDL, the Layout should be much simpler. It shouldn't make so many assumptions about the components that can be nested inside it as it does now. \nE.g.\nhtml\n<Layout fixedDrawer>\n        <Drawer title=\"Title\">\nThe fixedDrawer attribute is misplaced IMHO. It should have been:\nhtml\n<Layout>\n        <Drawer fixed title=\"Title\">\nWhat do you think about this? Any plans to make such more structural changes?\nPersonally, I think we should have a close look at what shapes and forms the 'AppBar' can take and implement just that part separately. As I said I am using my own drawer in my app and I am just ignoring the built-in behavior of Layout and I don't really see any disadvantages. It makes life much simpler actually.\n. Yeah I know. But honestly, the whole fixed thing isn't working very well i.c.w. React. Because they have all these responsive style rules that have a big impact on the structure. \nAre you in contact with them for their v2? I think they could use the feedback of where we have problems.\n. I think it broke in this PR:\nhttps://github.com/tleunen/react-mdl/pull/272/files\n. My server does not actually render the data-upgraded attribute; it is added by material.js after it loads, but before the client has kicked in... Maybe there could be a way to prevent material.js from doing it's work until the client has actually kicked in and rendered for the first time?\n. I've done some more digging.\nI think I could prevent the issue by changing this code in material.js:\n``` js\nwindow.addEventListener('load', function() {\n  'use strict';\n/\n   * Performs a \"Cutting the mustard\" test. If the browser supports the features\n   * tested, adds a mdl-js class to the  element. It then upgrades all MDL\n   * components requiring JavaScript.\n   */\n  if ('classList' in document.createElement('div') &&\n      'querySelector' in document &&\n      'addEventListener' in window && Array.prototype.forEach) {\n    document.documentElement.classList.add('mdl-js');\n    componentHandler.upgradeAllRegistered();\n  } else {\n    /\n     * Dummy function to avoid JS errors.\n     /\n    componentHandler.upgradeElement = function() {};\n    /\n     * Dummy function to avoid JS errors.\n     /\n    componentHandler.register = function() {};\n  }\n});\n```\nMy idea is to place this code in a separate function initializeMDL, and then let the script check a flag before it assigns this function to onload, like this:\njs\nif (! window.suppressMDLonLoad) {\n  window.addEventListener('load', initializeMDL);\n}\nThis would allow me to suppress this behavior initially until after the client has first rendered the markup, at which point I could call initializeMDL myself.\nWhat do you think? I realize this will all go away for v2, but it would be helpful (for me at least) until that time to have this.\n. Yeah that was my idea, but it looks like that's not even needed. I think it works because when the React MDL components are mounted they already upgrade themselves. It looks like we could just drop the initial upgrade components in on load altogether and it would work just fine. But I haven't done any serious testing, just clicking around in my app.\n. For what it's worth, my app is now live on http://www.bridalapp.net with this change in it. It seems to be working flawlessly so far.\n. @tleunen \nThe problem is that the file executes on the client before React had a chance to render the first view on the client; then when React tries to render, it notices that what it has rendered is different from what the current state of the DOM is.\nI think React does a very strict check on the existing state of the DOM when it is rendering for the very first time to decide whether to keep it and start diffing with it straight away, or whether to first discard the old DOM, re-render all the markup to the DOM and use the new DOM as starting point for the diffing process.\nThanks for merging it!\n. @tleunen Can you let me know what needs changing in order to get this merged?\n. @tleunen \nThanks! Yes I think that would be best actually, but I didn't want to go as far. But if we just remove it, we avoid having to define some ugly flag.\nI'm not sure about removing the complete event handler BTW. It's basically just the call to componentHandler.upgradeAllRegistered I think. Because the rest of the onload handler is just checking the env for compliance and setting a mdl-js class on the body element. Since rendering directly into the body element is not recommended anyway, I don't think it will hurt React users. And having that env check around makes sense. \n. If you like, I can modify this PR to avoid the flag and just skip the call to componentHandler.upgradeAllRegistered. Let me know.\n. @tleunen \n\nYes please update the PR to remove the upgrade call.\n\nWill do!\n\nAlso, this also needs to be in the minified file.\n\nYes, I was looking at the build script to see how to generate it, but I could not find it.\nIf you could do that part it would be great.\n. I have already implemented this in my own adaptation of Drawer. And indeed it's tricky. The problem is the coupling between the components as you say:\n\nThe button is located inside the Layout component, but this is an option that should live in the Drawer component :s\n\nThe solution is the same as always in React: use props  :)\nWhat I did was hide the hamburger menu in CSS, then use a 'real' React button that know's nothing of the drawer and just calls an onClick handler when pressed. This handler than toggles some state that is later used to set the value for the open property when we render the drawer. Imho, Drawer should be a controlled component and should have just an open property to control it (I currently implemented that as a boolean, but since the drawer should be able to slide, it might actually be better if we can also set a number).\nThis question is actually very relevant for \n[v2] Rewrite Layout without mdlUpgrade #295\n. ### npm-debug.log\nsh\n0 info it worked if it ends with ok\n1 verbose cli [ 'C:\\\\Program Files\\\\nodejs\\\\node.exe',\n1 verbose cli   'C:\\\\Users\\\\Frank\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js',\n1 verbose cli   'run',\n1 verbose cli   'test' ]\n2 info using npm@3.5.3\n3 info using node@v5.4.0\n4 verbose run-script [ 'pretest', 'test', 'posttest' ]\n5 info lifecycle react-mdl@1.5.3~pretest: react-mdl@1.5.3\n6 verbose lifecycle react-mdl@1.5.3~pretest: unsafe-perm in lifecycle true\n7 verbose lifecycle react-mdl@1.5.3~pretest: PATH: C:\\Users\\Frank\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\node-gyp-bin;c:\\ws\\react-mdl\\node_modules\\.bin;C:\\Program Files (x86)\\Oculus\\Support\\oculus-runtime;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\ATI Technologies\\ATI.ACE\\Core-Static;C:\\Program Files\\Git\\cmd;C:\\Program Files\\nodejs\\;C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin;C:\\p4merge\\DVCS\\;C:\\Program Files (x86)\\Heroku\\bin;C:\\Program Files (x86)\\git\\cmd;C:\\maven\\v3.3.9\\bin;C:\\Program Files (x86)\\GNU\\GnuPG\\pub;C:\\Users\\Frank\\.dnx\\bin;C:\\Program Files\\Microsoft DNX\\Dnvm\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\D\\v2.070.2\\dmd2\\windows\\bin;C:\\Program Files (x86)\\Git\\cmd;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files\\EmEditor;C:\\Users\\Frank\\AppData\\Local\\Programs\\Python\\Python35\\Scripts\\;C:\\Users\\Frank\\AppData\\Local\\Programs\\Python\\Python35\\;C:\\Ruby193\\bin;C:\\Users\\Frank\\AppData\\Roaming\\npm;C:\\Program Files (x86)\\Jar2Exe Wizard\\\n8 verbose lifecycle react-mdl@1.5.3~pretest: CWD: c:\\ws\\react-mdl\n9 silly lifecycle react-mdl@1.5.3~pretest: Args: [ '/d /s /c', 'npm run lint' ]\n10 silly lifecycle react-mdl@1.5.3~pretest: Returned: code: 0  signal: null\n11 info lifecycle react-mdl@1.5.3~test: react-mdl@1.5.3\n12 verbose lifecycle react-mdl@1.5.3~test: unsafe-perm in lifecycle true\n13 verbose lifecycle react-mdl@1.5.3~test: PATH: C:\\Users\\Frank\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\node-gyp-bin;c:\\ws\\react-mdl\\node_modules\\.bin;C:\\Program Files (x86)\\Oculus\\Support\\oculus-runtime;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\ATI Technologies\\ATI.ACE\\Core-Static;C:\\Program Files\\Git\\cmd;C:\\Program Files\\nodejs\\;C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin;C:\\p4merge\\DVCS\\;C:\\Program Files (x86)\\Heroku\\bin;C:\\Program Files (x86)\\git\\cmd;C:\\maven\\v3.3.9\\bin;C:\\Program Files (x86)\\GNU\\GnuPG\\pub;C:\\Users\\Frank\\.dnx\\bin;C:\\Program Files\\Microsoft DNX\\Dnvm\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\D\\v2.070.2\\dmd2\\windows\\bin;C:\\Program Files (x86)\\Git\\cmd;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files\\EmEditor;C:\\Users\\Frank\\AppData\\Local\\Programs\\Python\\Python35\\Scripts\\;C:\\Users\\Frank\\AppData\\Local\\Programs\\Python\\Python35\\;C:\\Ruby193\\bin;C:\\Users\\Frank\\AppData\\Roaming\\npm;C:\\Program Files (x86)\\Jar2Exe Wizard\\\n14 verbose lifecycle react-mdl@1.5.3~test: CWD: c:\\ws\\react-mdl\n15 silly lifecycle react-mdl@1.5.3~test: Args: [ '/d /s /c', 'npm run test:react:14 && npm run test:react:15' ]\n16 silly lifecycle react-mdl@1.5.3~test: Returned: code: 1  signal: null\n17 info lifecycle react-mdl@1.5.3~test: Failed to exec test script\n18 verbose stack Error: react-mdl@1.5.3 test: `npm run test:react:14 && npm run test:react:15`\n18 verbose stack Exit status 1\n18 verbose stack     at EventEmitter.<anonymous> (C:\\Users\\Frank\\AppData\\Roaming\\npm\\node_modules\\npm\\lib\\utils\\lifecycle.js:232:16)\n18 verbose stack     at emitTwo (events.js:87:13)\n18 verbose stack     at EventEmitter.emit (events.js:172:7)\n18 verbose stack     at ChildProcess.<anonymous> (C:\\Users\\Frank\\AppData\\Roaming\\npm\\node_modules\\npm\\lib\\utils\\spawn.js:24:14)\n18 verbose stack     at emitTwo (events.js:87:13)\n18 verbose stack     at ChildProcess.emit (events.js:172:7)\n18 verbose stack     at maybeClose (internal/child_process.js:821:16)\n18 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)\n19 verbose pkgid react-mdl@1.5.3\n20 verbose cwd c:\\ws\\react-mdl\n21 error Windows_NT 10.0.10586\n22 error argv \"C:\\\\Program Files\\\\nodejs\\\\node.exe\" \"C:\\\\Users\\\\Frank\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"run\" \"test\"\n23 error node v5.4.0\n24 error npm  v3.5.3\n25 error code ELIFECYCLE\n26 error react-mdl@1.5.3 test: `npm run test:react:14 && npm run test:react:15`\n26 error Exit status 1\n27 error Failed at the react-mdl@1.5.3 test script 'npm run test:react:14 && npm run test:react:15'.\n27 error Make sure you have the latest version of node.js and npm installed.\n27 error If you do, this is most likely a problem with the react-mdl package,\n27 error not with npm itself.\n27 error Tell the author that this fails on your system:\n27 error     npm run test:react:14 && npm run test:react:15\n27 error You can get information on how to open an issue for this project with:\n27 error     npm bugs react-mdl\n27 error Or if that isn't available, you can get their info via:\n27 error     npm owner ls react-mdl\n27 error There is likely additional logging output above.\n28 verbose exit [ 1, true ]\n. Thanks for merging it!\n. @1j01 I recognize what you are struggling with. The whole bundling process takes some time to get used to. Personally I would recommend trying Webpack with Babel and the React preset. It seems to be what most devs are using.\nA good starting point might be one of the many starter kits out there. Once you get that working correctly, adding React MDL is pretty simple actually. But now you are doing both at the same time and it can become very confusing quickly.\n. > Oh, ah, I see, the bundle I made includes react. I couldn't find out how to include the module in a browser so I used browserify to export ReactMDL to a global. Is there an official bundle somewhere?\nFrom your comments I am assuming you at one point did\nsh\nnpm install --save react\nYou are installing a Node module in that case. You can use Browserify or Webpack to package that for the web into your own library (as you are currently doing), but you can also configure either tool to not bundle React into your own bundle. In the case of Webpack you do this using by marking React as external in your config. Something like this:\njs\nmodule.exports = {\n    externals: {\n        'react': 'React',\n        'react-dom': 'ReactDOM',\n        'react-mdl': 'ReactMDL',\n    }\n};\nWhat this config does is tell Webpack: I am using modules react, react-dom and react-mdl from external scripts, load them from the global objects React, ReactDOM and ReactMDL respectively. They will then be excluded from your own bundle and you can load them from e.g. CDN using an old-fashioned script tag on the web.\n. ",
    "broveloper": "temporary solution for anyone who is experiencing is to pass in the htmlFor={target} in the  component itself.\n. Not an issue.  Bug was because of using old version of MDL v1.0.6, instead of v1.1.1\n. Not an issue.  Bug was because of using old version of MDL v1.0.6, instead of v1.1.1\n. ",
    "swarajd": "Ah my mistake I forgot to include the one provided in /extra. Apologies for the mix up. With it added the issue dissapears.\n. ",
    "jormaj": "Hi Tommy,\nTurns out the grid with issue was due to a mistake I made: in an attempt to check why the in-focus color was off, I used the official mdl style, causing the grid to be off. Sorry!\n. Does adding '<!doctype html>' to the top of your index.html fix it?\n. Yes, fixed!\n:))\n2016-04-10 16:58 GMT+02:00 Tommy notifications@github.com:\n\n@jdrmar https://github.com/jdrmar I'm closing this PR, I think the\nissue is resolved with the fix I did in #280\nhttps://github.com/tleunen/react-mdl/issues/280\nLet me know if I'm wrong.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/tleunen/react-mdl/pull/281#issuecomment-207996332\n. \n",
    "yard2010": "Hey guys, just noticed that weird bug.. Shouldn't we file a bug on chromium or something?\n. ",
    "jfrag": "I have the same bug with MDL using in chrome 52.\nSolution :\ndocument.querySelector('main.mdl-layout__content').style.overflowY = '';\nmodal.close();\ndocument.querySelector('main.mdl-layout__content').style.overflowY = 'auto';\n. ",
    "paolocaminiti": "Win10/Chrome Version 53.0.2785.101 m\nTaking a look a this issue I found something even weird:\nopen the dev tools, inspect the button to open the modal\nrename the \"mdl-button\" class from the button to \"mdl-button1\" or whatever\neverything will work fine\nrename the class back to \"mdl-button\" and the scroll is broken again\nMay it be related to the layers doing the ripple animation?\n. ",
    "prasadsilva": "What did you have in mind for 2.0? Wrap the toggleDrawer call in a Drawer component method?\n. Cool. Just ran into this. Having trouble getting a ref to the Layout..\nFor this (in render):\n<Layout ref=\"layout\">\nI get empty object for this.refs in a click handler.\nAnyone else getting this?\n. Nevermind, issue was my fault. Scopes! :)\n. Scopes? Make sure the click handler is a closure with the correct 'this' object. ES5: .bind() or ES6: () => { }\n. @mdpedersen I'm running into this issue. Did you manage to workaround this?\n. ",
    "bingomanatee": "i was also getting that issue prasadsilva reported; what was your fix? \n. ",
    "drewbolles": "I solved this by adding a componentWillReceiveProps lifecycle method to my primary App container. It check the location pathnames and if the conditions were correct, fired the toggleDrawer method.\n```\ncomponentWillReceiveProps(nextProps) {\n  // If our locations are different and drawer is open,\n  // force a close\n  if (this.props.location.pathname !== nextProps.location.pathname) {\n     const layout = document.querySelector('.mdl-js-layout');\n     const drawer = document.querySelector('.mdl-layout__drawer');\n if (layout.classList.contains('is-small-screen') && drawer.classList.contains('is-visible')) {\n   layout.MaterialLayout.toggleDrawer();\n }\n\n}\n}\n```\n. ",
    "darrylmack": "@drewbolles This worked great! Put it in the function to navigate to different pages.. Found it on - https://getmdl.io/components/index.html#sliders-section\nIt's step, i.e. step={100}. ",
    "kkpoon": "Here is my render function\n``` jsx\nrender() {\n    const { formatMessage } = this.props.intl;\n    const { router } = this.context;\n    const tabId = _indexOf([\"/patha\", \"/pathb\"].map((p) => router.isActive(p)), true);\n    return (\n      \n\n\n\n {}}\n                       label=\"Search\"\n                       expandable\n                       expandableIcon=\"search\"/>\n          \n this.handleTabChange(tabId)}>\n            Tab 1\nTab 2\n\n\n\n\n\n            {this.props.children}\n          \n\n\n\n\n    );\n  }\nhandleTabChange(tabId) {\n    this.context.router.push(paths[tabId]);\n  }\n```\n. I have made a pull request in material-design-lite, see whether they consider as a bug\nhttps://github.com/google/material-design-lite/pull/4203\n. ",
    "unindented": "@tleunen Fresh install. I've tried rm -rf node_modules multiple times, I've tried npm cache clear, and I always get the same.\n$ node --version\nv4.4.0\n$ npm --version\n2.14.20\nI'm pretty sure npm is at fault here, but if you could verify with a couple of your projects...\n. Ha, nice! Thanks for finding that!\n. ",
    "HriBB": "\nSo for this v2, I'm trying to rebuild all the components to not use the base javascript file from the MDL team. This will allow us to have everything handle in react and have a better control on the components.\n\n@tleunen music to my ears :)\n@darkyen cool demo!\n@Download +1 for react-mdl-naughty. I am willing to help.\nFor example, I was shocked when I realized that mdl does not implement a Selectfield component. So I created my own. Same goes for Uploadfield.\n. @tleunen I really hope so. But for some components it will be probably impossible to get it right without a few tweaks. For those, I think it's better to rewrite some parts.\n@Download no worries. Let's wait for v2 alpha, then we can decide if naughty is even needed.\n. @idancali let us know when you have something to show\n. Hey. I can confirm this. Any ideas how to fix it?\n. Until there is a proper fix, this is the ugly workaround to get rid of the error\nHeader\n<HeaderTabs activeTab={activeTab}>\n  <Tab href=\"#salon-info\">Info</Tab>\n  <Tab href=\"#salon-customers\">Customers</Tab>\n  <Tab href=\"#salon-services\">Services</Tab>\n  <Tab href=\"#salon-brands\">Brands</Tab>\n  <Tab href=\"#salon-gallery\">Gallery</Tab>\n</HeaderTabs>\nContent\n<Content>\n  {this.props.children}  \n  <div className=\"mdl-layout__tab-panel\" id=\"salon-info\">Info</div>\n  <div className=\"mdl-layout__tab-panel\" id=\"salon-customers\">Customers</div>\n  <div className=\"mdl-layout__tab-panel\" id=\"salon-services\">Services</div>\n  <div className=\"mdl-layout__tab-panel\" id=\"salon-brands\">Brands</div>\n  <div className=\"mdl-layout__tab-panel\" id=\"salon-gallery\">Gallery</div>\n</Content>\nStyles\n.mdl-layout__tab-panel {\n  display: none !important;\n}\n. Furthermore, I get an error if I show/hide HeaderTabs\nDOMChildrenOperations.js:67 Uncaught NotFoundError: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.\nSo I have to hide them with css\nLast, ripple effect does not work on Tabs.\n. Not sure. It's just an idea. I've been playing around with it and it's really cool because you can easily create different scenarios of the same component.\nI see they have storybook-ui. Maybe it's possible to create a custom UI like react-mdl-storybook-ui\nWill do some research when I find some time.\n. I also use react-storybook for testing and will use this repo as a playground to figure out how to style the storybook interface.\n. @tleunen sure why not. First I would like to get some feedback on this, don't want to promote something that does not work as expected.\n. > From a first use, this doesn't match the exact MD guidelines but I guess it wasn't your objective.\nExactly. It's easy to override the styles though, just put a negative margin to mdl-selectfield mdl-menu__container. Maybe I will add followSpec prop for that. Also I am thinking about creating a new AutoCompleteField component for this.\n\nFor the multiselect, I believe using the new \"Chip\" component would be best, also having them inside the input instead of outside.\n\nI will definitely use the new Chip component, but rendering them inside the input is not so easy, it does not allow children. I will have to position Chips absolutely, but then comes a world of problems. Any ideas?\n. Ohh maybe it's not so hard. Simply render an input field after all the chips. Thanks for the link ;)\n. Yeah mdl@v1 is not very react-friendly. I believe that monkey patch is the only solution for this problem ATM, because I think they wont accept any PRs on the mdl for this. Anyway, let me know how I can help. I can even write the patch if you just point me into the right direction.\n. Uhh I think I'll leave this one to you :) It would probably take me way too long to get everything right. But I will test as soon as you patch it ;)\nI want to focus on missing form components which I require for my app: react-mdl-autocomplete, react-mdl-datetime and fix react-mdl-selectfield to use chips at least.\nI really hope they release v2 alpha soon, it's kinda frustrating having to work with v1.\n. @tleunen when do you plan to release this? I would like to test it + HeaderTabs ripple effect.\n. @tleunen no worries, did not mean to rush you or anything, I was just wondering when it's gonna be released. Take your time, I know that you've got more important stuff to do :)\n. Yeah I tried to use react-portal, but I just could not get it to work as expected. I might revisit that. Will create a PR for the docs soon. Need to make SelectField and MultiSelectField stateless first, and use the new Chip component.\n. Sure! I already did a lot of reading and looked through the examples for react and it looks really great.\nBTW I already rewrote the menu to use react-portal. 50% less code :) Not really sure why I did not use it in the first place ... but hey, at least now I know how to make a custom portal should I ever need it. Now I'm working on the react-mdl-extra package that will provide some extra components as the names suggest. Hopefully we wont need it for V2 :)\nHow long do you think it will take for MDL v2 to hit the alpha?\n. This happens when the menu is inside Layout > Content.\n. MDL issue https://github.com/google/material-design-lite/issues/4640\n. I have the same problem as you @tleunen. I simply don't have enough time to lead, but I will help with the V2 rewrite.\n. It's because react-portal adds a click handler dynamically on target prop.\n<Menu target={<Badge text=\"2\" overlap><IconButton name={'person'}/></Badge>} align={'tr tr'}>\n  <MenuItem/>\n  <MenuItem/>\n  <MenuItem/>\n</Menu>\n. @tleunen when I find some spare time I will add this to the react-mdl org.\n. ",
    "notpushkin": "I'm currently trying it out. One problem could be a lot of config to boot up React itself (https://gist.github.com/iamale/fa68da6925b44f567d63), but otherwise it should be OK. I'll write once I manage to start it.\n. Works smoothly so far!\n. ",
    "vitosamson": "Awesome, thanks for the speedy fix! That's pretty much my use case - it is a controlled component but sometimes I don't want the user to be able to change the value, but also don't want it disabled.\n. It seems like even with forcing an update via state change the background and button become out of sync. Any eta on v2?\n. Ah gotcha, I thought you'd meant that as a workaround until the commit landed in a release. Will that commit be in 1.5.1?\n. :+1: thanks again for the quick response\n. ",
    "rektide": "What kind of work would have to go in to getting uncontrolled supported?\n. ",
    "Chun-Yang": "I am using version 1.5.2\n. Any one is working on this? I can give it a shot.\nMy use case is for Checkbox. I need the label to contain links.\n. @tleunen Thank you for this well maintained package! Let me know if this is what we want.\n. How about this?\n. ",
    "raphaguasta": "Hello guys! I'm using version 1.6.1, but the error still is thrown. Do you have any solution for this problem?\n. ",
    "PavelPZ": "OK, I will try to parse 1.5's .propTypes objects.\n. I prepared the first .d.ts version. I have problem with the functional properties signature. Some of them I recognized from your code or examples - can you check it out please? And there are some of them which I cannot recognize. Thanks.\nCannot recognize:\n\nTableHeader.cellFormatter - ?? (val:string) => string\nTableHeader.sortFn - ?? (a:string, b:string, isAsc:boolean) => number\n\nCheck it out please:\n\nSnackbar.onTimeout - () => void\nDialog.onCancel - () => void\nTableHeader.onClick - (event, name:string) => void\nHeaderTabs.onChange - (tabId:string) => void\nTab.onTabClick - (tabId:string) => void\nTabBar.onChange - (tabId:string) => void  \nTabs.onChange - (tabId:string) => void  \nCheckbox.onChange - (event) => void\nRadio.onChange - (event) => void\nTextfield.onChange - (event) => void\nIconToggle.onChange - (event) => void\nRadioGroup.onChange - (event) => void\nSlider.onChange - (event) => void\nSnackbar.onActionClick - (event) => void\nSwitch.onChange - (event) => void\n. @tleunen thanks, I modified TableHeader.cellFormatter to (val:string, row: any, rowIndex:number) => string. What is your idea concerning using this file in your project? Some of pure JavaScript repos has Typescript directory in the root. Or will it be better to wait for @alexeyzimarev version (which will be part of DefinitelyTyped project)?\n\n\n@alexeyzimarev, thanks for info about your project, I removed obsolete React.Props<T>.\nComments: \n- my  react-mdl.d.ts is machine generated from @tleunen 's propTypes objects (including oneOfType or oneOf, which is very usefull for typing, see e.g. FooterSectionProps.type?: 'top' | 'middle' | 'bottom' | 'left' | 'right'; etc.). So it contains all valid properties and events - you can use it as a source for your repo (where are a lot of components x props x events missing).\n- What is the following code for? I can generate it for you easily.\nJavaScript\ninterface CardTitleElement extends React.ReactElement<CardTitleProps> { }\nconst CardTitle: CardTitle;\n- inspecting @tleunen 's source code, I am not sure that all elements are expected to have intrinsic HTML attributes. But maybe I am wrong.\n. intrinsic attributes\nI added them to all components except of Table. The reason is that official react.d.ts definition file contains following definitions for some of the intrinsic attributes: \nJavaScript\nvalue?: string | string[];\nrows?: number;\nThose definitions are in conflict with the following react-mdl definitions: \nvalue: string | number for Radio and RadioGroup\nrows: Array<{}>  for Table.\nPossible solution is to keep value?: string | string[] for Radio and RadioGroup + to ommit intrinsic attributes for Table\nIn order to have intrinsic attributes for Table too, it is necessary to rename Table's rows attribute.\n. @alexeyzimarev, HTML attributes are already solved.\nd.ts machine generation is based on correct propTypes found in @tleunen code.\nI am successfully using react-mdl.d.ts in my eLearning project now (component props inheritance, mentioned in #273, is patched by hand).\n. Yes, I know, but react-dom.min.js uses require(\"react\"), your node_modules\\react-mdl\\out\\ReactMDL.js uses require(\"React\").\nSo SystemJS module loader needs to map both react and React to the same module bundle. I am working without NPM, Babel, wabpack etc., just Typescript.\nBut forget for it...\n. I tried something at my react-mdl fork.\n. Is it really TypeScript question?\nIconButton.js contains\nJavaScript\nIconButton.propTypes = {\n    className: PropTypes.string,\n    name: PropTypes.string.isRequired\n};\nShould not be (from button.js) like this?\nJavaScript\nIconButton.propTypes = {\n        name: PropTypes.string.isRequired,\n        accent: PropTypes.bool,\n        className: PropTypes.string,\n        colored: PropTypes.bool,\n        component: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.element,\n            PropTypes.func\n        ]),\n        href: PropTypes.string,\n        primary: PropTypes.bool,\n        raised: PropTypes.bool,\n        ripple: PropTypes.bool\n    };\n. You are right, I will include type inheritance to my generator for those cases:\n- FABButton & IconButton inherits from the Button\n- what else? \n. @alexeyzimarev \"What is the following code for?\" is already explained.\n\"propTypes inheritance\" is patched by hand.\n. I included type inheritance to my generator for FABButton & IconButton (both inherits from the Button).\n@tleunen, are there any other inheritances? After your confirmation I will prepare new PR with final .d.ts.\nThe only problem is with \n\n\"There is a collision in react-mdl x React.HTML&DOM atributes. So I removed those atributes from React definition and leave them in correct MDL form: onChange, label, size, title, value, rows.\"\n\nTypescript team is working on possibility to override property definition in interface descendant. After solving this Typescript issue I will prepare more correct version. I thing that this problem is not crucial for now.\nFor @alexeyzimarev: the last version is here.\n. ",
    "alexeyzimarev": "All elements are expected to have intrinsic HTML attributes like style, I can see this from examples. Also, React.Props<T> is marked as obsolete. In addition, we need to have support for importing individual components. I started a repo for Typings, adding new elements continuously but only when I need them in my project. It may take about a week until I finish all types.\n. @PavelPZ as you can see, I define interfaces for both Props and for ComponentClass. This is because I find it not correct to define classes in type definitions although I realize that these are ambient references, still it actually would generate some real JS code, whilst interface definitions do not generate anything. In order to export a component type, I declare a constant that has interface as its type and export it.\nThis approach is used in type definitions for many popular component libraries like react-bootstrap.\nRegarding the HTML attributes, all components are in fact HTML elements and normally should have all intrinsic HTML attributes available. These attributes are widely used in samples and this is where I got issues using your d.ts file.\nI am not sure if machine generation is good or not. I am still working on my definitions file and I test all components with it. Adding oneOf is not a problem for me too but of course it will need changes if the source library changes.\n. OK, I missed that one.\nNow it is different:\n\nInvalid argument provided to upgrade MDL element.\n\nIn this code:\njavascript\nif (!(typeof element === 'object' && element instanceof Element)) {\n    throw new Error('Invalid argument provided to upgrade MDL element.');\n}\n. I found that the call to findDOMNode returns null, upgradeElement gets null for both parameters, although the calling party is a valid React element.\n. Okay, I found it. JSPM has installed both 0.15rc1 and 0.14.7 of React. When I cleaned it up to 0.14.7, everything started work. The question is if react-mdl will keep working on 0.15...\n. I tried to find out what the issue could be but cannot find it, all CSS properties are identical. This is what I see when I run my app:\n\n``` jsx\nconst App = () => (\n    \nArea / The Title}>\n                \nLink\nLink\nLink\nLink\n\n\n\n\nLink\nLink\nLink\nLink\n\n\n\n\n   );\nrender(\n    , document.getElementById(\"content\")\n);\n```\nindex.html\nhtml\n<html>\n<head>\n    <title>Examples</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"jspm_packages/npm/react-mdl@1.5.2/extra/material.css\" rel=\"stylesheet\" />\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n    <script src=\"/jspm_packages/system.js\"></script>\n    <script src=\"/config.js\"></script>\n    <!--<script src=\"/deps.lib.js\"></script>-->\n    <script>\n        System.import(\"react-mdl/extra/material.js\");\n        System.import(\"./src/app\");\n    </script>\n</head>\n<body>\n    <div id=\"content\"></div>\n</body>\n</html>\n. I found this issue reported on MDL repo long time ago and there was also a workaround provided. I will post it here when I get back home.\n. I used this:\n#html\n    <style>\n        .mdl-layout__drawer-button:before {\n            content: '';\n        }\n    </style>\n. @jdrmar It actually helped, thank you very much!\n. ",
    "lsemerini": "@tleunen \nYou mean something like this?\njavascript\n<div style={{position: 'relative'}}>\n    <IconButton name=\"more_vert\" id=\"demo-menu-lower-right\" />\n    <Menu target={\n        <ComponentX />\n    } align=\"right\">\n        <MenuItem>Some Action</MenuItem>\n    <MenuItem>Another Action</MenuItem>\n    <MenuItem disabled>Disabled Action</MenuItem>\n    <MenuItem>Yet Another Action</MenuItem>\n    </Menu>\n</div>\nThat will render ComponentX with the menu attached to it? \nIf that's the case, +1 for this, i need it to work for my project.\n. ",
    "coveralls": "\nCoverage remained the same at 100.0% when pulling ed87eb78e4b4402946129fbb2b5bccb7ef75d705 on greggigon:master into f4c67fe9f4a160636685f419e1586f3e17875ed3 on tleunen:master.\n. \nCoverage remained the same at 100.0% when pulling d57282b8dcfe88ffea0a13f9f983b15787d69049 on PavelPZ:master into 75599425df17a2070ddb9fe93d806f74e157a8e9 on tleunen:master.\n. \nCoverage remained the same at 100.0% when pulling 9d1405ad907d138a6b442b253f7b87211746066a on PavelPZ:master into 26b35f8761cfa15c82f5cdaa99b75b770ed46f9f on tleunen:master.\n. \nCoverage remained the same at 100.0% when pulling a9b8c3085d2f7399b265cacca544783a9f4e40d0 on jdrmar:patch-1 into 26b35f8761cfa15c82f5cdaa99b75b770ed46f9f on tleunen:master.\n. \nCoverage remained the same at 100.0% when pulling e4d15aab39de3e7770c87153f7c1911a0f939870 on drager:hide-spacer into 45adcbfa5cea6b0dfbb84abc7a3ef1ce52ee2c6a on tleunen:master.\n. \nCoverage remained the same at 100.0% when pulling e4d15aab39de3e7770c87153f7c1911a0f939870 on drager:hide-spacer into 45adcbfa5cea6b0dfbb84abc7a3ef1ce52ee2c6a on tleunen:master.\n. ",
    "samoshkin": "Wow, thanks a lot for fixing this. Looking forward for the next release :)\n. ",
    "gon250": "How do you display the content, I'm having problems to display data from my props. In case I have to display data like below is ok, take a look.\n```\nimport React from 'react';\nimport { Tabs, Tab } from 'react-mdl';\nexport default React.createClass({\n  getInitialState: function() {\n    return { activeTab: 0 }\n  },\nrender: function() {\n    return (\n         \n this.setState({ activeTab: tabId })} ripple>\n                 Stack\nGitHub\nGist\nTwitter\n\n\n\n                   {function(){\n                      if (this.state.activeTab == 0) {\n                        return Content for 0\n                      } else if (this.state.activeTab == 1){\n                        return Content for 1\n                      } else if (this.state.activeTab == 2){\n                        return Content for 2\n                      } else if (this.state.activeTab == 3){\n                        return Content for 3\n                      } else {\n                        return No Content\n                      }\n                    }.call(this)}\n                 \n\n\n     );\n  }\n});\n```\nThe problem is when I have to try to display data from my props as below:\n<div className=\"demo-tabs\">\n             <Tabs activeTab={this.state.activeTab}\n                   onChange={(tabId) => this.setState({ activeTab: tabId })} ripple>\n                 <Tab>Stack</Tab>\n                 <Tab>GitHub</Tab>\n                 <Tab>Gist</Tab>\n                 <Tab>Twitter</Tab>\n             </Tabs>\n             <section>\n                 <div className=\"mdl-grid portfolio-max-width\">\n                   {function(){\n                      if (this.state.activeTab == 0) {\n//TODO: This case is not working.\n                        {this.props.stackoverflow.map((stack, i) => {\n                           return (\n                             <div>stack.title</div>\n                            );\n                        })}\n                     } else if (this.state.activeTab == 1){\n                        return <div id=\"banner\">Content for 1</div>\n                      } else if (this.state.activeTab == 2){\n                        return <div id=\"banner\">Content for 2</div>\n                      } else if (this.state.activeTab == 3){\n                        return <div id=\"banner\">Content for 3</div>\n                      } else {\n                        return <div id=\"banner\">No Content</div>\n                      }\n                    }.call(this)}\n                 </div>\n             </section>\n         </div>\nAny idea how can I display it? if is not possible would be good implement a way to allow to display content in the tabs, isn't it?\n. I'm sure, I have tried without the code below and it's working.\n{function(){\n // ...\n}.call(this)}\nI mean like this: \n```\nimport React from 'react';\nimport { Tabs, Tab } from 'react-mdl';\nexport default React.createClass({\n  getInitialState: function() {\n    return { activeTab: 0 }\n  },\nrender: function() {\n    return (\n         \n this.setState({ activeTab: tabId })} ripple>\n                 Stack\nGitHub\nGist\nTwitter\n\n\n\n                       {function(){\n                            if (this.state.activeTab == 0) {\n                                  {this.props.stackoverflow.map((stack, i) => {\n                                     return (\n                                        My item.\n                                      );\n                        })}\n                 \n\n\n     );\n  }\n});\n```\nI think is because the code is inside {function(){// ...}.call(this)}\nAny idea? \nThanks.\n. my mistake... you are right \ud83d\udc4d ! Thanks!!\n. ",
    "xdvarpunen": "Actually just read about 2.x update. Font needs to be downloaded externally still though.\n. Thanks! c:\n. Reduce the amount of data DataTable renders by giving it X size of array per page to render and when you need to show next X size of array, rerender DataTable element with new given X size of array.\nIn pseudocode:\n``` jsx\ndata = yourBigLoadOfdata.takeFirst10;\n\noneOfYourDataColumns\n\n```\n. Thank you very much! Tyt (:\n. New problem:\nOn first click the selection shows empty,\nOn second click the selection shows correctly selected rows.\nIf click the select all box, it shows reverse choice:\nOn first click it shows empty,\nOn second click it shows all selected.\n. Link to milestone 2.0 https://github.com/tleunen/react-mdl/milestones/2.0\n. Found it; rowKeyColumn attribute sets row id equivalent to assigned object id\n. ",
    "Kuirak": "Actually I like this syntax with passing a fully valid component as prop. It is basically the same syntax you use for the <Header title={<Icon name=\"logo\"/>} />.\nIt helps knowing where the passed component will be used in the actual component.\nIn my opinion either label or labelComponent should be set but not both.\n. ",
    "leifoolsen": "Is the generated id correct?\nWhen I inspect the first textfield component in the examples page I see the following output.\nhtml\n<div class=\"mdl-textfield mdl-js-textfield is-upgraded\" data-upgraded=\",MaterialTextfield\" style=\"width: 200px;\">\n<input class=\"mdl-textfield__input\" id=\"textfield-Text\" name=\"\">\n<label class=\"mdl-textfield__label\" for=\"textfield-Text\">Text...</label>\n</div>\nThe third textfield it has the same id-value. Would i not be better to generate a random id, e.g. id=\"textfield-Text-someuniquerandomcharsequence\"? \nFor screenreaders to work properly it is required to correlate label and input with a unique id.\n. If the only purpose of an id is correlating label and input it may be desirable to automate this task. \nMaintenance of identifiers can quickly become messy, especially when the input fields are dynamically generated.\n. My knowledge of React is, for now, relatively limited. We does not use server side rendering. Inside the render() method I use this this to generate a random id:\n``\nconst randomString = ( n=12 ) => Array( n+1 ).join((${Math.random().toString(36)}00000000000000000`).slice(2, 18)).slice(0, n);\nconst id = 'textfield-'+randomString();\n```\n. As i mentioned, the only purpose of the id is to correlate label and input for screen readers. If the id varies between page loads does not matter, as long as the label for= correlates with the input id=. For ids we need to track we do not use a random generated id.\n. ... btw. Thanks for a great lib :+1: \n. I do not have much knowledge about serverside rendering. But if the id and correlating for= is set by the server, then the client side maybe could check if the id already exists?\n. Regarding the generated id: Wold it not be better to NOT generate an id? The absence of an id does not affect MDL. As it is now, we'll potentially end up with several duplicate id values in a page.\n. I know. But if no id is given in markup, then I think it is better to leave it out. Having (potentially) duplicate id-values will not validate either :) \n... this is not really a big problem, as you would normally set identifier in markup.\n. ",
    "codecov-io": "Current coverage is 99.42%\n\nMerging #306 into master will not change coverage\n\ndiff\n@@             master       #306   diff @@\n==========================================\n  Files            55         55          \n  Lines           689        689          \n  Methods          64         64          \n  Messages          0          0          \n  Branches        137        137          \n==========================================\n  Hits            685        685          \n  Misses            4          4          \n  Partials          0          0\n\nPowered by Codecov. Last updated by 6d749c6...5cba2d3\n. ## Current coverage is 99.42%\nMerging #307 into master will not change coverage\n\ndiff\n@@             master       #307   diff @@\n==========================================\n  Files            55         55          \n  Lines           689        689          \n  Methods          64         64          \n  Messages          0          0          \n  Branches        137        137          \n==========================================\n  Hits            685        685          \n  Misses            4          4          \n  Partials          0          0\n\nPowered by Codecov. Last updated by 76675e0...9b109e8\n. ## Current coverage is 99.13% (diff: 66.66%)\nMerging #311 into master will decrease coverage by 0.20%\n\ndiff\n@@             master       #311   diff @@\n==========================================\n  Files           107         55     -52   \n  Lines          2114        695   -1419   \n  Methods           0         65     +65   \n  Messages          0          0           \n  Branches          0        139    +139   \n==========================================\n- Hits           2100        689   -1411   \n+ Misses           14          6      -8   \n  Partials          0          0\n\nPowered by Codecov. Last update 4547085...4b53198\n. ## Current coverage is 99.84%\nMerging #323 into master will increase coverage by <.01%\n\ndiff\n@@             master       #323   diff @@\n==========================================\n  Files            55         55          \n  Lines           634        636     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits            633        635     +2   \n  Misses            1          1          \n  Partials          0          0\n\nPowered by Codecov. Last updated by b44f6bb...4e80f28\n. ## Current coverage is 99.84%\nMerging #330 into master will not change coverage\n\ndiff\n@@             master       #330   diff @@\n==========================================\n  Files            55         55          \n  Lines           634        634          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            633        633          \n  Misses            1          1          \n  Partials          0          0\n\nPowered by Codecov. Last updated by f19760a...73e2bc2\n. ## Current coverage is 99.84%\nMerging #332 into master will not change coverage\n\ndiff\n@@             master       #332   diff @@\n==========================================\n  Files            55         55          \n  Lines           634        634          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            633        633          \n  Misses            1          1          \n  Partials          0          0\n\nPowered by Codecov. Last updated by 2f809a3...6d08eab\n. ## Current coverage is 99.47%\nMerging #342 into master will increase coverage by <.01%\n\ndiff\n@@             master       #342   diff @@\n==========================================\n  Files           105        105          \n  Lines          2096       2097     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2085       2086     +1   \n  Misses           11         11          \n  Partials          0          0\n\nPowered by Codecov. Last updated by 542310a...ed9c532\n. ## Current coverage is 99.47%\nMerging #343 into master will increase coverage by <.01%\n\ndiff\n@@             master       #343   diff @@\n==========================================\n  Files           105        105          \n  Lines          2096       2098     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2085       2087     +2   \n  Misses           11         11          \n  Partials          0          0\n\nPowered by Codecov. Last updated by 542310a...55c3bc1\n. ## Current coverage is 99.33%\nMerging #353 into master will not change coverage\n\ndiff\n@@             master       #353   diff @@\n==========================================\n  Files           107        107          \n  Lines          2107       2107          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2093       2093          \n  Misses           14         14          \n  Partials          0          0\n\nPowered by Codecov. Last updated by 9a6b280...0969c64\n. ## Current coverage is 99.33% (diff: 100%)\nMerging #357 into master will not change coverage\n\ndiff\n@@             master       #357   diff @@\n==========================================\n  Files           107        107          \n  Lines          2107       2107          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2093       2093          \n  Misses           14         14          \n  Partials          0          0\n\nPowered by Codecov. Last update 87c373d...737e42f\n. ## Current coverage is 99.33% (diff: 100%)\nMerging #358 into master will not change coverage\n\ndiff\n@@             master       #358   diff @@\n==========================================\n  Files           107        107          \n  Lines          2107       2107          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2093       2093          \n  Misses           14         14          \n  Partials          0          0\n\nPowered by Codecov. Last update 77dc8d8...c278e2f\n. ## Current coverage is 98.91% (diff: 0.00%)\nMerging #369 into master will decrease coverage by 0.42%\n\ndiff\n@@             master       #369   diff @@\n==========================================\n  Files           107        107          \n  Lines          2107       2116     +9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2093       2093          \n- Misses           14         23     +9   \n  Partials          0          0\n\nPowered by Codecov. Last update 191a863...45699c2\n. ## Current coverage is 99.33% (diff: 100%)\nMerging #371 into master will not change coverage\n\ndiff\n@@             master       #371   diff @@\n==========================================\n  Files           107        107          \n  Lines          2107       2107          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2093       2093          \n  Misses           14         14          \n  Partials          0          0\n\nPowered by Codecov. Last update 191a863...5e17d8a\n. ## Current coverage is 99.33% (diff: 100%)\nMerging #373 into master will not change coverage\n\ndiff\n@@             master       #373   diff @@\n==========================================\n  Files           107        107          \n  Lines          2107       2107          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2093       2093          \n  Misses           14         14          \n  Partials          0          0\n\nPowered by Codecov. Last update 08ff13f...c2b3fc0\n. ## Current coverage is 99.33% (diff: 100%)\nMerging #375 into master will increase coverage by <.01%\n\ndiff\n@@             master       #375   diff @@\n==========================================\n  Files           107        107          \n  Lines          2107       2114     +7   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           2093       2100     +7   \n  Misses           14         14          \n  Partials          0          0\n\nPowered by Codecov. Last update ddccc00...f3a66b6\n. ## Current coverage is 99.33% (diff: 100%)\nMerging #376 into master will not change coverage\n\ndiff\n@@             master       #376   diff @@\n==========================================\n  Files           107        107          \n  Lines          2114       2114          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           2100       2100          \n  Misses           14         14          \n  Partials          0          0\n\nPowered by Codecov. Last update 9ab92f9...7d8c286\n. ## Current coverage is 99.34% (diff: 100%)\nMerging #378 into master will increase coverage by 0.01%\n\n| Diff Coverage | File Path |\n| --- | --- |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | new src/Chip/tests/Chip-test.js |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | new src/Chip/index.js |\n\nPowered by Codecov. Last update 4547085...1d1bd72\n. ## Current coverage is 99.34% (diff: 100%)\nMerging #379 into master will not change coverage\nPowered by Codecov. Last update 4b8beac...a39070d\n. ## Current coverage is 99.35% (diff: 100%)\nMerging #382 into master will increase coverage by <.01%\n\n| Diff Coverage | File Path |\n| --- | --- |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/Snackbar/index.js |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/Dialog/Dialog.js |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/Textfield.js |\n\nPowered by Codecov. Last update 4b8beac...bb8ebcb\n. ## Current coverage is 99.35% (diff: 100%)\nMerging #385 into master will increase coverage by <.01%\n\n| Diff Coverage | File Path |\n| --- | --- |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/Chip/index.js |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/Chip/tests/Chip-test.js |\n\nPowered by Codecov. Last update 0a64490...4f6b1e3\n. ## Current coverage is 99.35% (diff: 100%)\nMerging #387 into master will not change coverage\nPowered by Codecov. Last update 8501d90...9c03525\n. ## Current coverage is 99.35% (diff: 100%)\nMerging #388 into master will not change coverage\nPowered by Codecov. Last update a00a538...10f3a17\n. ## Current coverage is 99.35% (diff: 100%)\nMerging #395 into master will not change coverage\nPowered by Codecov. Last update 509a65c...6426288\n. ## Current coverage is 99.36% (diff: 100%)\nMerging #398 into master will increase coverage by 0.01%\n\n| Diff Coverage | File Path |\n| --- | --- |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/DataTable/tests/Table-test.js |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/DataTable/Table.js |\n\nPowered by Codecov. Last update 1be1492...87b0772\n. ## Current coverage is 99.35% (diff: 100%)\nMerging #408 into master will not change coverage\n\n| Diff Coverage | File Path |\n| --- | --- |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/Textfield.js |\n\nPowered by Codecov. Last update 1be1492...fa6f445\n. ## Current coverage is 99.36% (diff: 100%)\nMerging #418 into master will not change coverage\nPowered by Codecov. Last update a405631...46e021a\n. ## Current coverage is 99.27% (diff: 100%)\nMerging #421 into master will decrease coverage by 0.08%\n\n| Diff Coverage | File Path |\n| --- | --- |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/Switch.js |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/Tabs/Tabs.js |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/IconToggle.js |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/Layout/HeaderTabs.js |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/Layout/Layout.js |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/Menu.js |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/Checkbox.js |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/utils/mdlUpgrade.js |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/utils/MDLComponent.js |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/Radio.js |\n\nPowered by Codecov. Last update af8c4eb...6ab648b\n. ## Current coverage is 99.36% (diff: 100%)\nMerging #422 into master will not change coverage\n\n| Diff Coverage | File Path |\n| --- | --- |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/Badge/index.js |\n\nPowered by Codecov. Last update 768b3f4...67cde10\n. ## Current coverage is 99.36% (diff: 100%)\nMerging #423 into master will not change coverage\nPowered by Codecov. Last update af8c4eb...633ed43\n. ## Current coverage is 99.10% (diff: 100%)\nMerging #433 into master will decrease coverage by 0.17%\nPowered by Codecov. Last update fbb1853...dbcf717\n. ## Current coverage is 99.10% (diff: 100%)\nMerging #435 into master will increase coverage by <.01%\n\n| Diff Coverage | File Path |\n|---|---|\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/tests/Menu-test.js |\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/Menu.js |\n\nPowered by Codecov. Last update 5563865...4f621ad. ## Current coverage is 99.10% (diff: 100%)\nMerging #437 into master will increase coverage by <.01%\n\n| Diff Coverage | File Path |\n|---|---|\n| \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 100% | src/utils/mdlUpgrade.js |\n\nPowered by Codecov. Last update 5563865...3aa6ccb. # Codecov Report\nMerging #442 into master will not change coverage.\nThe diff coverage is 100%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/IconToggle.js | 100% <100%> (\u00f8) | :arrow_up: |\n. # Codecov Report\n\nMerging #475 into master will decrease coverage by 0.18%.\nThe diff coverage is 33.33%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/Dialog/Dialog.js | 77.14% <33.33%> (-22.86%) | :arrow_down: |\n| src/DataTable/__tests__/Selectable-test.js | 97.67% <0%> (-0.09%) | :arrow_down: |\n| src/Tabs/TabBar.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/Layout/HeaderTabs.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/Checkbox.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/Grid/Cell.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/Card/CardTitle.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/List/__tests__/ListItemContent-test.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/Snackbar/index.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/Layout/Header.js | 100% <0%> (\u00f8) | :arrow_up: |\n| ... and 44 more | |\n. # Codecov Report\n\nMerging #485 into master will not change coverage.\nThe diff coverage is n/a.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/Badge/index.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n. # Codecov Report\n\nMerging #486 into master will not change coverage.\nThe diff coverage is 100%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/Tabs/Tab.js | 100% <100%> (\u00f8) | :arrow_up: |\n. # Codecov Report\n\nMerging #488 into master will not change coverage.\nThe diff coverage is n/a.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils/mdlUpgrade.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n. # Codecov Report\n\nMerging #492 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/RadioGroup.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/__tests__/RadioGroup-test.js | 97.5% <100%> (\u00f8) | :arrow_up: |\n. # Codecov Report\n\nMerging #495 into master will not change coverage.\nThe diff coverage is n/a.\n\n. # Codecov Report\n\nMerging #499 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/DataTable/Selectable.js | 94.82% <100%> (+0.09%) | :arrow_up: |\n. # Codecov Report\n\nMerging #501 into master will increase coverage by 0.34%.\nThe diff coverage is 100%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/DataTable/Table.js | 91.66% <100%> (\u00f8) | :arrow_up: |\n| src/Dialog/Dialog.js | 100% <0%> (+22.85%) | :arrow_up: |\n. ",
    "szymonmichalak": "Thanks for adding that! I also have a use case for that in order to add label with asterisk (*) to identify which field is required, the same way as Material Design guidelines suggest: https://material.google.com/components/text-fields.html#text-fields-required-fields (with color change on focus).\nIs there any chance that this PR will be merged soon?\n. ",
    "vyerneni17": "Thanks for this, I was breaking my brain to get an HTML element inside the label prop. Cheers!. ",
    "dimik": "I have List with overflow: scroll and need to set scrollTop=0 on it in event handler\n. ",
    "fabiozaffani": "Ah ok, great then!\n. ",
    "mdpedersen": "I agree that this would be much nicer! \nAlso, after integrating dialog-polyfill in a react-mdl project, I've found it to be somewhat brittle in some situations. When a dialog is removed from the DOM, the polyfill dialog overlay (with class _dialog_overlay) sometimes remains in the DOM, and dialogs that are shown subsequently can no longer receive focus. I'm not yet sure exactly how to reproduce the problem, but it seems to happen in situations where the dialog's high-up ancestor is removed from the DOM. If I carefully ensure that only the dialog is removed before any further DOM manipulation, things seem to work. This is happening in Safari and Firefox.\nI wonder if anybody else has encountered similar problems, or if there is anything I should be doing to clean up dialogs after use?\nMaybe this is related to the following dialog-polyfill issue with DOMNodeRemoved not always firing:\nhttps://github.com/GoogleChrome/dialog-polyfill/issues/72\n. @prasadsilva I didn't find any actual solution, no. My workaround, in cases where this problem occurred, was to ensure that close() is always called on the dialog DOM node before removing it from the DOM (in react-mdl, that means setting the 'open' property to false on the Dialog component).\n. ",
    "fellipeesteves": "Folks, any solution for this now?. ",
    "roboslone": "Seems MDL is not getting date time picker. Should this issue get unblocked?\nThere's a date picker on material.io though: https://material.io/guidelines/components/pickers.html#pickers-date-pickers. @tleunen , I didn't find React-MDC in @idancali's repos, but I did find react-mdc by @haoxins. I believe this npm package is directly related to that repo.\nIs that what I should be looking into?\nIf I understood correctly, I can't use material-components-web directly in react, since they aren't react components.. ",
    "tetsuyainfra": "Thanks @tleunen and your work, I know the id not should be used at the same time\nThis patch is when a child element have the id, tooltip use this id.\n( if child element haven't id, the id is generated randomly )\nHowever,  this patch is not a smart way, so programmer have to write id for ALL tooltip element on server-side rendering.\nI will let you know if come up with workaround.\n. ",
    "Natanael1234": "It's sufficient! Thanks!\n. Answer:\n```\n    return (\n        \nId          \nName        \nAddress  \nPhone  \n    </DataTable>\n\n```\n,\n. ",
    "saravanan4514": "I'm getting the same issue as well. Kindly let me know if i have missed anything.\n. Loading specific components we get an error \"Cannot read property 'upgradeElement' of undefined\". I tried using Button and checkbox component.\n. Thank you so much for your valuable response. Awaiting for the next major version.\n. ",
    "tb": "@Undeadlol1 nice feature but \"eslint docs src scripts\" is failing the CI\n. Seems it will require something like https://github.com/nathanmarks/material-ui/commit/c497d13a8f769265a3f34b9b5d3a0c20fabb40f3\n. ",
    "Undeadlol1": "@tb what does it mean? What is needed to be done? Refactor according to eslint settings?\n. Done and done\n. @tleunen cool, thank you\n. I have no idea why my previous commits are being added to this PR. But seems like only one file is being changed which is exactly what i need.\n. @tleunen how come is it 4?\ncol={12} === .mdl-cell--12-col ===  { width: calc(100% - 16px) }\nThis basically applies full width on every media screen size. I checked it, there is nothing wrong.\n. They probably ment it defaults to 4 on mobile (and to 8 on tablet)\nThen again, i tested this change and it works fine, so there must be a issue with documentation, not with the code.\n. @tleunen Sorry for asking, but how do i squash commits? Any advices on how to understand hint better? Maybe you are using some GUI git client i don't know about?\n. Git just seems a little frustrating to me...\n. @tleunen you are confused.\nWith this commit i am trying to introduce logical behaviour to Cell component and improve readability of code.\nThere is simply no point in making this\n<Cell></Cell> === <div class=\"mdl-cell\"></div>\ninstead of this\n<Cell></Cell> === <div class=\"mdl-cell mdl-cell--12-col\"></div>\nFirst option gives me 33% of page width, second one gives me 100%.\nIt's simply illogical. Why the hell do i need 1/3 width by default? What kind of random number is this? I don't even use 1/3 width components often, but i use full width all the time.\n. @tleunen I can see your point.\nBut i don't think anybody would be confused, because 99% of the time people read component's property-values-defaults table.\nAlso, i do not think they will change it, because seems like it's a workaround to make cell render properly on mobile devices. But i will try to add a PR/ create an issue.\n. I am not a smart man. What does \"create ticket upstream\" mean?\nMy intention was to make an issue at mdl with question about default width and link to this discussion. Afterwards i were planning to post link with mdl's answers here\n. ",
    "1j01": "Are you using React only for some parts of an app? The patched version of material.js doesn't upgrade material components on the page automatically as of 1.5.4 (currently the latest version).\n. So react-mdl.js includes a bundled version of React? Would https://github.com/tleunen/react-mdl/issues/286 fix this?\n. Oh, ah, I see, the bundle I made includes react. I couldn't find out how to include the module in a browser so I used browserify to export ReactMDL to a global. Is there an official bundle somewhere?\nHow am I supposed to use this?\n. Okay, I found the bundle viewing the source on the examples. It would be good to improve the documentation though as I had no idea how to get started. Why isn't the bundle in extras/?\n. Do I have to use browserify? It's on my TODO to use it in my app, but I don't want to lose my auto-reloading workflow and watchify isn't working. (I've tried multiple operating systems.)\n. Alright, thanks for your help!\n. Yes, it should explain how to use it with webpack or browserify. I'd be using one of those if I could get a live-reloading working with either.\nSo, were you thinking this should be a separate document? I was thinking of just having all the information on the README, except for the external examples (which benefit from the interactivity). In other words, READMEs are generally the getting started documents, no? Not that it matters that much.\n. Sounds good, I'll send a PR soon.\n. ",
    "MengJueM": "I am at a holiday recently, I'll get this updated once back.\n. ",
    "adamdawkins": "Yea I just saw that, they're still debating what to do in the MDL GitHub!\nEl El mi\u00e9, 15 jun 2016 a las 13:51, Tommy notifications@github.com\nescribi\u00f3:\n\nAfaik, there's still no select component inside MDL :/ That's why we don't\nprovide one here.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tleunen/react-mdl/issues/328#issuecomment-226177351,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AABsGANlneRRpLEI90r0IMfPEWMDYrsjks5qL_UwgaJpZM4I1VQ-\n.\n. \n",
    "jtraub": "I just got this warning.\nI believe you don't want to remove children from ProprTypes. Usually people put PropTypes.node. See https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prop-types.md#as-for-exceptions\n. ",
    "zckrs": "Thanks to you for react-mdl.\n. ",
    "jasan-s": "@tleunen  it seems to work with cdn link so is this import statement incorrect? \nimport 'react-mdl/extra/material' \nimport 'react-mdl/extra/material.css'\n. also is it possible to change color of this button? \n. ",
    "drager": "Yeah, they are covered as dependencies in this project but it would be great if peerDependencies also matched them and are not RC versions.\n. Ah alright, I see. About the 15.2.0-rc.1 not being included might be because it in fact is a Release Candidate and not a stable release. So if you want to cover that as well you can do this: ^15.1.0 || 15.2.0-rc.1. Not sure if you want that?\n. @tleunen: Saw that you updated the dependencies yourself, then you can close this PR?\n. ",
    "Brickpsp": "oh i see,  i will try create my own page navigation and combine your method.\nThank for your help.\n. you can try my way:\n<DataTable\n    shadow={0}\n    rows={yourdata}>\n<TableHeader name=\"link\" cellFormatter={(link) => <a href={link}>{link}</a>}  tooltip=\"This is link\">Link</TableHeader>\n</DataTable>\n. ",
    "buinauskas": "Just quoting this from description:\n\nThis component uses dialog element, which is only supported by Chrome and Opera currently. For other browsers, you need to include a polyfill in your code\n\nSurprisingly, this bug can be reproduced in both Chrome and Opera, which might lead that issue is related to polyfill/dialog element.\nGoing further:\nThis is error from console:\n\nCan't upgrade <dialog>: already supported\n<dialog class=\u200b\"mdl-dialog\">\u200b\n  <h4 class=\u200b\"mdl-dialog__title\">\u200bAllow data collection?\u200b</h4>\u200b\n  <div class=\"mdl-dialog__content\">\u200b\n    <p>\u200b\"Allowing us to collect data will let us get you the information you want faster.\"</p>\u200b\n  </div>\u200b\n  <div class=\u200b\"mdl-dialog__actions\">\u200b\n    <button class=\"mdl-button mdl-js-button\" type=\u200b \"button\" data-upgraded=\u200b \",MaterialButton\">\u200bAgree\u200b</button>\u200b\n    <button class=\u200b\"mdl-button mdl-js-button\" type=\u200b \"button\" data-upgraded=\u200b \",MaterialButton\">\u200bDisagree\u200b</button>\u200b\n  </div>\n</dialog>\u200b\n\nCould it be that polyfill tries to overwrite default  element and it conflicts?\n. ",
    "SB3K": "Not sure if this helps, but on a dialog where a Snackbar is triggered on close, scroll works fine.\n. ",
    "traviskaufman": "Hey @tleunen! Just wanted to chime in regarding MDL's path forward for v2.\nCustomization and 3rd-party framework integration are specific items that we're looking to improve with v2. We want v2 components to be as un-opinionated and easily integrate-able as possible, to make wrapping them in a framework like React feel elegant and idiomatic. Not only will we no longer be rendering DOM ourselves, but we'll be providing foundational classes for each component that are meant specifically to be integrated into UI frameworks for the web platform. The idea is that the framework can initialize / teardown the foundational class using its own lifecycle, as well as pass it an adapter which tells it how to interact with the host DOM implementation. \nWe actually built out an example checkbox in React using our new v2 architecture. While this architecture is still in flux, we'd love for you to try out our v2 components once we hit alpha and let us know what the experience of building react-mdl around them might be like. In the meantime, if you have any other questions / concerns about v2 feel free to drop us a line. \ud83d\ude04\n. Hey @idancali ,\nThat's awesome to hear! It'll be great to get some early feedback on how our model is working out for framework development. We're in the process of gearing up for an initial alpha release of our packages to npm and will keep you updated as to when they're published.\nSince you're going to be building an MDLv2 library integration, I recommend you read our docs explaining our architecture, which provides an in-depth look at components, adapters, and foundations along with how to integrate foundations into a framework. We actually use react as our primary example framework in those docs, so it should hopefully feel familiar to you.\nI'm always on our gitter so feel free to ping me in there if you have questions or run into trouble. Also, please file issues when running into trouble and we'll be sure to address them.\n. @idancali glad it's making sense. I'll keep you updated on any significant changes and/or things to be aware of as we move through our launch phases, and definitely let me know if you run into any issues, or something architecturally isn't working out for you.\n. ",
    "idancali": "Hey @traviskaufman just wanted to chime in quickly and update this topic. We're going to start putting together an official roadmap for react-mdl v2 and that means we're probably going to have to pick your brain at some point about mdl v2. The foundation/adapter concept seems like a good step forward but I would love to check in with you as we progress with our v2 and make sure we're making the best use of the foundations you provide. More on this later, I just wanted to update this topic for now.\n. Hi @traviskaufman,\nLooking forward to the alpha release. I've read through pretty much all of your v2 documentation. I see where you're going with v2. I'm sure questions will come up as I go through the React implementation but for now I am working on setting the foundation right for the project. More on that later. \nI've joined your gitter room so see you there.\n. Hey @sgomes really great work! Looking forward to seeing this all come together. I will most likely need to get back to you with some questions at some point. Great work, talk to you soon.. Hi @tleunen I am currently evaluating different React frameworks, I've used react-toolbox and material-ui and I'm at a point where I'm debating whether I should create a brand new framework from scratch or fork some existing one, etc. I'm leaning towards one that makes good use of CSS Modules and SASS, there's several reasons why I think that's important. If I were to take on the lead on your project, would you be open to moving the next version towards a CSS Modules & SASS direction? \n. hey @tleunen the sass direction would be mainly for theming, which I've found to be a major concern in most react ui frameworks and that is really a major consideration when developers pick a framework, so I would love to have the option to theme my react-mdl components with a higher degree of freedom. But this is all stuff that we can workout as we move forward.\nso yeah I'm interested in the taking the lead on the project and I'm looking forward to get started, the timing is perfect, please let me know how you want to proceed next\n. yeah let's go for react-mdl I think that makes the most sense, let me know if you need help with anything during the migration\n. Hey guys @dannyphung @tleunen \nMDL as a brand is being sunsetted as far as I can tell. It would not make much sense for us to keep onto the MDL brand if they're moving away from it.\nI think it might make more sense to create a brand new one  from scratch. \nI'm thinking something like React-Material would make more sense.\nI would love to get the @react-material org but it seems taken. Not much activity there. I wonder if GitHub would be willing to let us have it to transfer @react-mdl over.\nThoughts?. I'm going to contact them. I did that before for other orgs and they were really cool about. I'll get back with more info once I hear back from them.\n. I've contacted them. I'll wait for a response and I'll keep you guys in the loop.. Hey guys, looks like GitHub thinks that the org is being used so we can't have it. We can go with something like @react-material-design perhaps.\nThoughts?. great idea, I'll do that. @tleunen great news!\nI got in touch with Kartheek @lkarthee and he is an absolutely outstanding person! Thanks so much for being so amazing about this @lkarthee \nHe transferred the ownership of @react-material to me so I'm now the owner of that org. I'll connect with you separately, @tleunen to talk about next steps.\nOnce again, many thanks @lkarthee, I really appreciate it, all the best with your startup!. ",
    "sgomes": "Hey folks! Small update: as you've probably seen by now, we've rebranded MDL v2 into Material Components for the web. Other than the name change, both in project and in code (sorry about that!), everything should be the same. It should also make life significantly easier for you now that we're on npm :)\nFeel free to reach out to us with any questions, and thanks for all the great work on react-mdl so far!. ",
    "MichaelBitard": "I'm willing to work on this as it seems quite easy and I already have something working, but I cannot figure how to unit test this, any idea?\n. ",
    "woniesong92": "I see, thanks. I wanted the HeaderNavigation component to be individual from the other components, so I can plug in and out as I want. I figured that the hamburger menu and the drawer only work if I enclose both Drawer and Header inside a Layout component, so that's what I did.\n. ",
    "worrel": "The charAt issue with tabs is because the tab JS expects an href like '#some-id' on each tab which it then strips the '#' off of & attempts to find a layout-tab-panel with the corresponding ID to show.  This sucks because with React you'd really like to have only the active tab in the DOM & switch it out based on state change.  Not sure if you can just catch the click event & preventDefault, but you'd likely lose the ripple effect.\n. ",
    "igorsantos07": "I've got a similar one here, but sounds to be a breaking issue instead of those:\nwarning.js?8a56:44Warning: Unknown prop `ripple` on <div> tag. Remove this prop from the element. For details, see https://fb.me/react-unknown-prop\n    in div (created by Tabs)\n    in Tabs (created by NavigationBar)\n    in NavigationBar (created by MainLayout)\n    in header (created by MainLayout)\n    in div (created by MainLayout)\n    in MainLayout (created by RouterContext)\n    in RouterContext (created by Router)\n    in Router\nThat renders my Tabs without any effects :(\nI'm running React 15.3, but the error still happens when I downgraded to 15.1.\n. @tleunen, I was re-reading this issue here and got an idea. Shouldn't that be default to the Tabs/HeaderTabs+Tab components? Or would it be too hard to implement?\nI mean, Tab could have an internal onClick behaviour that would give its ID to the parent component - that should always be one of the Tabs implementation, and the correct active tab would be set without developer intervention. I can't see a case where there would be no need for tabs to change into active hmmm\nThere's also Tab.active to be used in this case.. Could be even simpler/decoupled to implement.\nIf you think this makes sense, I can move this into a new issue. Not sure I could help coding as I'm pretty new to React libs (even React apps themselves are new for me). :smile: \n. Whoops. Haha will do\nIgor Santos\n-- Desenvolvedor Web\n[enviado do meu celular]\nOn Aug 12, 2016 11:08, \"Tommy\" notifications@github.com wrote:\n\nClosed #363 https://github.com/tleunen/react-mdl/pull/363.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tleunen/react-mdl/pull/363#event-754042223, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAgfS1e4HduUmKXbRwxOWEyDC50XReWIks5qfH5EgaJpZM4Jiyto\n.\n. It seems the codepen from the docs page is not functioning perfectly as well... The tabs underline even blink, but there's no actual ripples.\n. There is is-active on the mdl-tabs__tab element. Not sure if you noticed but the active tab text is darker than the other one in the previous screenshot.\n\nI'm indeed using a notebook, but with a mouse; not sure if it makes a difference on that edge case. I tested the tabs from my phone as well: they behave the same way.\nAnd no, I didn't know about HeaderTabs. I was converting a pure MDL markup into react-mdl and began on the tabs... When I replaced the layout components I just overlooked the rest of the sample haha\nCould the HeaderTabs component be mentioned in the Tabs doc as well? Plus: what's the difference? I don't recall seeing those on the pure MDL docs and common tabs were working ok.\nI used HeaderTabs instead: they now show the correct underline, but there's still no ripples :(\nOn the other hand, it seems the link binding for HeaderTabs > Tab[component=Link] do not work? I'm now getting an error as if MDL were trying to find an ID with the link address (i.e. Failed to execute 'querySelector' on 'Element': '#/growth' is not a valid selector.). That didn't happen with Tabs > Tab[component=Link]\n. I don't quite remember exactly, but I'm pretty sure I removed the custom component and the ripple effect still didn't appear.\ni'll re-test this tomorrow, when I'm back to the project in question :)\n. Indeed @tleunen, with or without the custom component the behaviour is the same: a slight blink on the underline animation and no ripple. Will create a codepen for this.\n. Pretty easy. Here's the codepen, using the exact same code you give as sample for Layout with fixed tabs - I just added the ripple property but nothing changed (undocumented property, btw; had to look into the source to make sure it exists).\nI should point that I discovered what's that \"blink\" by reducing animation speed on DevTools: the underline is instantly set and then it disappears and moves from the beginning to the end of the tab. Its first, instant appearance should not happen :)\n. It seems this issue is still alive, ripples are not happening on HeaderTabs or Tabs; see this codepen.\nI got confused with my implementation and ended up opening #393 because if this :sweat_smile: \n. Sorry, that error I showed was probably caused by outdated dependencies on my travel notebook. However, the issue described on the title is real: Links only work on Tabs, not HeaderTabs.\nI created a JSBin (based off React-router's) that reproduces the issue. You can notice Tabs change the page content, while HeaderTabs doesn't - you can remove any of them, it's not a conflict between the components.\n. I think that's #394, @pghalliday :)\n. These tabs do not display ripples :)\nThis codepen is based on the example's code - I just doubled the Tabs, so I could create one that was wrapped by MDLComponent to display my findings.\n. As mentioned on #380, I'm bringing here the codepen displaying HeaderTabs that seems to be upgraded (they do have the colored underline) but have no ripple effect\n. ",
    "jdelafon": "Not yet. But I noticed that it happens when I call something undefined, like undefinedFunction(12) inside componentDidMount() of any of my components that is a child of the component where I call downgradeElements as above.\n. So this should reproduce:\n```\nclass Main extends React.Component {\n    componentDidMount() {\n        window.componentHandler.upgradeElement(this.refs.root);\n    }\n    componentWillUnmount() {\n        window.componentHandler.downgradeElements(this.refs.root);\n    }\nrender() {return \n     <div ref=\"root\">\n            <Sub />\n     </div>;\n}\n\n}\nclass Sub extends React.Component {\n    componentDidMount() {\n        undefinedFunction(12)\n    }\nrender() {\n    return <div><div/>\n}\n\n}\n```\nbut I don't know really how to create a small example project with this code to test.\n. Ah. I took a full boilerplate package to start, and it was already written so I left it. But indeed apparently I can remove that safely. I'd better ask them why it was there in the first place, then. If it is their mistake I'll close.\n. ",
    "EduardoAC": "I agree with @dantman, I have the same problem with react-mdl 1.9.0 and material-design-lite 1.3.0.\nMaterial design lite added to my package.json and incorporate it by my index.scss. The reason because it happens to me is related with the extra CSS require by react-mdl if you do \n@import \"~react-mdl/extra/material.css\";\nit may fix your problem as well.\nI disagree to hide extra nested structure on the top of MDL itself, make hard to debug and understand because the CSS behaviour expected is different that the one provide by google. ",
    "milotoor": "Yes, agreed that the documentation is wrong. My proposed fix would produce the same behavior for\njsx\n<DataTable rows={...}> ... </DataTable>\nand\njsx\n<DataTable shadow={0} rows={...}> ... </DataTable>\nNamely, no shadow would be added to the table. The currently supported shadow values (those currently accessed by setting the prop from 0-6) would be remapped to 1-7. It's a breaking change, so I understand if you are reluctant to make the change prior to v2. Perhaps the best thing to do would just be to fix the docs?\n. I can make a PR to amend the docs if you'd like.\n. This is to address issue #364.\n. @tleunen No prob!\n. ",
    "edwardGunawan": "Update: after removing mdl-js-layout, DMD component works perfectly fine. Why wouldn't it work with mdl-js-layout?\n. ",
    "ahoereth": "There is no length property, slice(), map() etc work the same. For all the available functions see the sidebar in the immutablejs docs -- they mostly correspond to their JS/ES6 equivalents, especially to the new ES6 Map type. \n...and I just figured: This makes a lot more changes necessary. Seems like the code just seemingly works fine as is, but actually does not. Will need to add immutablejs as dev dependency to test this thoroughly.\n. I won't have time to complete this PR in a timely manner, using a simplified custom DataTable for now. Closing this for now, hope to come back to it later.\n. Very similar problem for the <Footer /> component:\n- Fixed footer when placed inside <Layout /> after <Content />. Always sticky to the bottom of the screen, no matter the height of <Content />'s value -- but this way it always takes up a lot of screen real estate.\n- Does not take up screen real estate when placed last inside of <Content /> -- but this way it is not fixed to the bottom of the screen when the content does not fill the full available vertical space.\n. Thanks thus far. Regarding the footer inside content: When its inside its not sticky to the bottom of the screen. Demo: https://codepen.io/anon/pen/KgdjpB\n. ",
    "pablocubico": "The problems of string refs have been outlined in an answer here by Dan Abramov, check out specially the last two points (3 & 4):\nhttps://news.ycombinator.com/item?id=12090484\nI'll make a PR. \n. ",
    "mr-e-": "I am still seeing this issue in the latest npm package 1.7.2. Is there any other workaround for this?\n. ",
    "Augustin82": "Something I don't understand: if I add a 'className' attribute to each row of the rows object I pass to DataTable, the classes are added to the tr. However, it does not work that way with the 'style' attribute. This is obviously a problem when defining all your styles inline, instead of via external CSS.\nI have added it myself as a quick'n'dirty hack, but I cannot use it if it's not in the official repo...\nThe change is on line 68 of react-mdl/src/DataTable/Table.js : \ndiff\n-- <tr key={row[rowKeyColumn] || row.key || idx} className={row.className}>\n++ <tr key={row[rowKeyColumn] || row.key || idx} className={row.className} style={row.style}>\nIs there a reason not to add this?\nEDIT: went ahead and made a PR: https://github.com/tleunen/react-mdl/pull/398\n. @tleunen any update on how I should proceed? Do I need to write more tests, to fix the handling of edge cases, to argue my case some more?\nPlease let me know and I'll get to work. Cheers!\n. @tleunen no worries, I was just pinging you. Thanks for taking the time to answer.\nI agree with what you said on the need for v2 to have a special prop that would help limiting conflicts (along with explicitly defining it in the documentation).\nWould it be OK, for the current version, to release support for \"proper\" React styling, still? I could update my PR to use a less obvious name than style (such as __mdlRowClassName and __mdlRowStyle, or something like you suggested).\nThe same thing could be extended to individual cells if deemed necessary; again, I could update my PR to support this.\nThanks!\n. OK, I'm on it. Thanks for the feedback and suggestions =)\n. Updated. What do you think, @tleunen ?\n. Updated as per your comments. Thoughts?\n. @tleunen sorry to ping you, any update on this?\n. Is there any problem with it?\n. @tleunen any update on this, please?\n. Apologies, I didn't understand it that way.\nI have pushed an update, is that what you mean?\nThanks!\n. No need to apologize. Thank you very much for taking the time to review it, suggest correction, review it again because I messed up, and merging it ;)\n. So do I... ;)\nHowever, in the meantime, since there is support for className, I believe it only makes sense to have support for style, even if it means handling the entire thing differently later on.\nWhat checks on the nature of 'style' should be performed to make it safe?\nWhat checks on 'className' ?\nAlso, maybe 'style' should be renamed to something less likely to collide, like 'rowStyle' ?\n. I wanted to make sure that we wouldn't be causing weird out-of-our-control React errors by allowing the wrong types through to React props.\nIf you think this is needlessly complicated, I'll remove. Thanks!\n. I assumed we were replacing it. I'll merge instead.\n. You're right, that's a pretty big miss. Sorry about that.\nWhich one would you favor? Adding to mdlRowProps (creating it in the process) or merging two separate objects?\nI'd tend to favor keeping the current behaviour, only adding more classNames to it via mdlRowProps, in case people like me were already overloading row.className. What do you think?\n. ",
    "matthewsiemens": "Hey folks!\nI'm trying to do something very similar to what mstn was doing but I'm having a bit of trouble wrapping my head around it. Any chance either of you would be willing to provide some code examples of what this cellFormatter would look like and where to add it?\nThanks so much!. Hey Marco!\nThat's awesome, thanks so much for taking the time to respond!\n--Matthew SiemensWebsite:http://matthewsiemens.com\nhttp://siemenstech.ca/Cell:(306) 202-6574\nOn 7 December 2016 at 11:06, Marco notifications@github.com wrote:\n\n@matthewsiemens https://github.com/matthewsiemens here you go some\npseudocode. I didn't check it, but you should be able to find out the\ncorrect syntax easily.\nconst doEdit = (itemId) => {\n   // do something\n}\nconst renderEditAction = (action) => {\n   return doEdit(action.itemId)}/>\n}\n\nDescription\nEdit\nYou can have also multiple actions per row. What I did in my project is to\nwrap the original DataTable inside a custom one that adds n actions to each\nrow.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-mdl/react-mdl/issues/383#issuecomment-265507182,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEC2UXO9z6InndhSOyXKXFpQQu2yOIDPks5rFuelgaJpZM4JqqC-\n.\n. \n",
    "mstn": "@matthewsiemens here you go some pseudocode. I didn't check it, but you should be able to find out the correct syntax easily.\n```javascript\nconst doEdit = (itemId) => {\n   // do something\n}\nconst renderEditAction = (action) => {\n   return doEdit(action.itemId)}/>\n}\n\nDescription\nEdit\n\n```\nYou can have also multiple actions per row. What I did in my project is to wrap the original DataTable inside a custom one that adds n actions to each row.. ",
    "okbel": "Sure. \nCheckBox renders a label tag and an input tag.\nWhen I use a style attr in a Checkbox Component the style goes to input. I need access to the parent label tag\n\n. ",
    "pghalliday": "I also noticed in my own code and in the posted jsbin that the regular tabs don't underline or highlight the active tab - is that another error?\n. ",
    "knowellG": "@igorsantos07 I am seeing this problem with react-router Links not working in HeaderTabs or regular Tabs. Neither seem to load the page content in your JSBin example. I am experiencing this in my own project as well with the latest version. Was there a change since you opened this?. ",
    "Carpetfizz": "I'm getting the following error with the latest react-router and react-mdl\nUncaught DOMException: Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.. ",
    "Place1": "Can confirm i'm getting this issue as well. Something i noticed was that it worked with the official MDL js/css. I'm porting a react UI that used MDL without this library. I had the Tabs all working and then my last step was to swap out the MDL css/js from google with the one from this library and then it broke.\nnot sure if that's any help but i thought i'd let you know :D\n. Yeah good stuff!\nOn Friday, 21 October 2016, Tommy notifications@github.com wrote:\n\nGood catch @DirtyHairy https://github.com/DirtyHairy! I'll take a look\nat the PR tomorrow.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-mdl/react-mdl/issues/394#issuecomment-255268208,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ALMBlotnoAGkAlY-9DZywPZA4VQ_-QpHks5q2A-PgaJpZM4J5pcx\n.\n. \n",
    "vitalets": "Also can confirm this issue. Would appreciate the fix.. \n. ",
    "gabrielbull": "Me too, having the same issue.\n. ",
    "DirtyHairy": "The heart of this issue is the component upgrade not handling functional components correctly. In addition, ripple requires upgradeElements (not the plural :smirk:) instead of upgradeElement to be called on the element. Both issues never show up on the doc pages as upgradeElements is called on the whole page during bootstrap there.\nThe above PR #421 fixes these issues.\n. Thanks alot, @tleunen :smile: I'm in the progress of collecting similar ripple effect fixes (updateElements vs upgradeElement) as we stumble upon them in our project, but I'll keep these in a branch for a later pull request.\n. We stumbled over this issue today, too :smirk:\nThis bug comes from the fact that the MDL component handler adds click handler on all menu items that are present in the DOM when the component is upgraded. Any changes to the item set that occur later are not tracked by the handler, and thus additional items don't get the necessary listener attached.\nWe managed to hack around this by adding a key to the menu that changes when the set of items changes, forcing react to unmount and re-render the component. However, this is complicated by #426 which causes an error to be thrown in the process.\n@tleunen , if you like, I can prepare a pull request that provides a DynamicMenu component that automagically calculates a matching key based on the set of child nodes (that's what we came up with). Of course, the prerequesite is fixing #426 ... :smiley: (I can also provide a PR for that).\n. I have seen this issue on Chrome 53 / Linux. It appears to be a rendering glitch and not any actual scrolling. In our case, setting transform: scale(1) on the content area that was corrupted solved the issue.\n. Chiming in: while I don't have enough spare time to lead, I will definitely help and contribute to a v2 rewrite --- apart from personal intereset, we also use react-mdl in a client project. :smirk:. This is a duplicate of #394 that got fixed in 1.8.0 .\n. Hi @Tommy! Yes, I noticed the same yesterday. That is a side effect of the upgrade now working - previously, nothing would happen without a global uprade, and now the upgrade works, but is incomplete. I have yet to find out what is going wrong here... A short term solution would be disabling the ripple effect for header tabs until we have a full fix. \n. Hi @tleunen !\nI have fixed the remaining issues and have updated the PR. I cannot find any glitches in the documentation anymore now.\nThe issue that caused the errors in the console is a nasty race between MDL component handlers. If MDL is used on a static page, the Layout handler will run before the Ripple handler on the Tabbar. The Layout handler tags the Tabbar for special treatment by the Ripple handler by adding a class. However, due to the order in which lifecycle hooks are called in React, it seems that the Tabbar Ripple handler is called before the Layout handler and, as the tag class is missing, attaches event handlers that will throw later.\nI have modified HeaderTabs to explicitly add the tag class, which removes the race. Similar quirks are documented as necessary when creating custom MDL components that use ripple, see i.e. google/material-design-lite#4205\nCheers\n-Christian\n. > Could you explain this?\nI am explicitly adding the class mdl-js-ripple-effect--ignore-events in JSX if ripple is enabled. Usually, this is dynamically set by the Layout handler before the Ripple handler executes but, due to the order in which react calls the lifecycle hooks, in our case Ripple executes first. Setting the class statically prevents the Ripple handler from erroneously attaching the failing event handlers.\nSo, I guess 'removing the race' is not a precise way to put what I did, 'evading the consequences' is more like it :smirk:\n. Thanks for merging... :smile:\n. That's a duplicate of #415 and #394 that should be fixed in 1.8.0 .\n. The issue is the same as #400 , and your explanation is correct. As a workaround, you can set a key on the menu component that changes whenever content is updated; this will force react to unmount and recreate the component. I have code ready that does this automatically, but I have to provide a PR for #426 (that depends on #421, merged today) before I can do a PR for that :smirk:\n. I just noticed the same on some stock Android browsers --- me culpa, this didn't show up in my tests :disappointed: . I have put up PR #437 with a fix.. Yes, react-mdl 1.x is a nightmare when it comes to DOM maniupulations :smirk:. ",
    "yaoxiao4": "what about an individual cell ?\n. that worked! thanks\n. ",
    "HugoHeneault": "With a import 'react-mdl/extra/material.js'; statement. \nI think this is the reason why it's at the bottom of the footer\n. ",
    "wrick17": "Thanks.\n. ",
    "dymat": "Wow! You are fast! Thanks for reply!\nYou got exactly my point. It would be great if you could add such a prop.\nBTW: this new prop would be a good base for writing a pagination add on which keeps track of selected rows over all pages...\nThanks again!\nBye,\n~dymat\n. ",
    "vegansk": "Reproduced on Chrome 53.0.2785.116 (64-bit), Ubuntu 14.04\n. You can use workaround:\njsx\n<TableHeader name=\"profile\" cellFormatter={(profile) => profile.name}>Name</TableHeader>. ",
    "gavmor": "I have no specific reason.\n. ",
    "Tushant": "I found the solution. \nit should be\navatar={<img src={movie.imageUrl} />}\n. ",
    "PCreations": "In your example the tooltip is not rendered behind the HeaderTabs, it just has an opacity of 87% inherited from mdl-navigation__link class.. ",
    "tuarrep": "Hi @tleunen!\nThanks for the work already accomplished. I use it at work for our next product and we love it.\nI'm interested in to participate. I prefer joining an organization like you suggest, I have no enough time to take it on my own.\nHope I can help\nCheers\n. ",
    "vladgolubev": "Organization is the best option, IMO. Invite some top contributors and let the project evolve.\n. ",
    "hmaciasc": "I can confirm not even adding ripple fixes it\n. ",
    "StrikeForceZero": "a dirty fix\nadd in to your components lifecylce componentDidMount handler\njs\nprivate componentDidMount() {\n   window.componentHandler.upgradeAllRegistered();\n}\n. ",
    "Danbardo": "Sorry, this isn't a solution to your problem. I was looking for a solution to a similar problem, mainly I just wanted to disable autofocus completely. This is the closest question that came up, so for anyone else who would like to disable autofocus here are two options:\nIf you don't care that the object is focused on then just set the styling to match the background colour of the parent div.\n.mdl-button:focus:not(:active){\n    background-color:#fff;  \n}\nIf you do care, make a  at the beginning of the mdl-dialog__actions div and set its width/height to like 1px and opacity to 0 (so you can't see it). This invisible button will be autofocused on instead of any other buttons in your mdl-dialog__actions div. Note you can't use display:none as this will result in the dummy button being ignored.. ",
    "bogas04": "Thanks !\nMaybe we can use document.body here\njs\n    const content = document.body;\n    if (content) {\n        content.scrollTop = 0;\n    }\nI'll try to create a PR in evening.\n. ",
    "IsaiahPacheco": "Also seeing issue in CodePen example\n. ",
    "Cleanshooter": "I've been playing with both a lot recently and so far I'm leaning toward react-mdl myself.  Right now Material-UI has a lot of components that are really great and are super easy to work with.  But in the current  version of the package Material-UI has no support for layouts which this one does.  So it's basically up to you on which one you choose.  Material-UI doesn't really provide you with any CSS to tweak (that I could find) as most of the design is put into React components directly (from what I can tell)\n. ",
    "fgarcia": "There are so many trade offs that it is impossible giving a generic answer\nif you do not want to spend time tweaking CSS and just use a framework then use Material UI\nif however you want to get better at Web Development (outside just React-frontend-JS styling development), and expect to cherry pick components from around the web and tweak them into a global custom theme (you will need CSS skills) then react-mdl is the clear way to go\nHere you are two screenshots of the code generated for a button (MDL vs Material-UI) and decide which one you want to customize.\nThe Material UI way:\n\nThe React MDL way:\n\n. ",
    "tszekely-spotcap": "Material UI looks great until you actually try to use it. Then the \"awesome\" inline styles kick you in the groin, and the bugs + the people maintaining it not caring about issues kick you in the Coccyx.\nAfter wallowing in horrible JS/React code pain, you realize you'll never have a production ready app using Material UI, unless you fix it all by yourself... and I don't think you want to do that, do you?. ",
    "msaron": "Material-UI is heavy and slow.. ",
    "erlgry": "Thanks. The code indeed looks much cleaner on the react-mdl.\nI also noticed that react-mdl v2 branch has not had a commit since June. Is the v2 no longer interesting? . ",
    "metacoding": "what about react-md? I read somewhere that it is the best and most accurate implementation of material design for react. Just tried react-mdl and wonder why it doesn't show the ripple effect?. ",
    "marceux": "Alright, I did some further research.\nIn attempting to understand what the hell is going on, I tried using the explicit style in the first example for the render method in the second example and this is what I got:\njavascript\nrender() {\n    return (\n        <Menu>\n            <MenuItem onClick={this.selectOption}>Test 1</MenuItem>\n            <MenuItem onClick={this.selectOption}>Test 2</MenuItem>\n            <MenuItem onClick={this.selectOption}>Test 3</MenuItem>\n        </Menu>\n    );\n}\nThis works just fine, but the options I'm rendering are not always predetermined; they can be an array of various sizes.\nSo, I'm starting to think:\nWhen I use .map to render <MenuItem>s from an array of options, does this circumvent material.js from registering its own event handlers to the elements that will be rendered?\nAnyways, that's the best I could come up with.\nHopefully this helps other people that may have similar problems.\n. Thanks @DirtyHairy \nI don't mind looking around and seeing if I can hack at a PR too, but I was wondering if you knew of any literature/blogs/anything where I can read up more on the matter.\nHere are the topics I'm interested in:\n- changing key prop to force react to unmount and recreate a component\n- how/why .map to render goes around an external library targeting and setting handlers\nCheers :beer:\n. ",
    "kradio3": "I cannot reproduce it with react-mdl@1.9.0 see Gist. This is not a bug of react-mdl. The same behavior reproduced on clean mdl see codepen http://codepen.io/kradio3/pen/dOqZQg. @omerts Yes, i found it. That because of .mdl-js-button. http://codepen.io/kradio3/pen/rWqeqB\nButton doesn't lose focus on mouseleave\nhtml\n<button class=\"mdl-button\">Agree</button>\nButton loses focus on mouseleave\nhtml\n<button class=\"mdl-button mdl-js-button\">Agree</button>\nBecause of losing focus keyboard's Enter will have different behaviors\nreact-mdl includes mdl-js-button class by default\nhttps://github.com/react-mdl/react-mdl/blob/master/src/Button.js#L27\nThis .mdl-js-button required by getmdl.io https://getmdl.io/components/index.html#buttons-section. @brandonmp\nTry to use enzyme https://github.com/airbnb/enzyme\n```javascript\nimport React from 'react'\nimport {shallow} from 'enzyme'\nimport App from 'your-components/App'\nit('renders without crashing', () => {\n  const wrapper = shallow ()\n  console.log(wrapper)\n})\n```. ",
    "mattmichler": "I forgot JSX treats lowercase tags as html... embarrassing.. ",
    "WellingtonCosta": "I did it just using style={{\"width\" : \"100%\"}}. It's the best way?\n. ",
    "endash": "Thank you \ud83d\udc4d\ud83c\udffb. ",
    "koutsenko": "Temporarily workaround is DialogActions fullWidth property - so buttons text don't overlapped.. I tried to do something like that - wrap DataTable to div with className 'scrollabletable'.\nIt works but is very dirty solution, it assumes that table header is 5em height and so on... \n```\n.scrollabletable {\n  overflow-y: scroll;\n  height: 100%;\n  margin-top: 5em;\n}\n.scrollabletable > table {\n  top: -5em;\n}\n.scrollabletable > table > thead {\n  position: fixed;\n  z-index: 50000;\n  background: white;\n  outline: 1px solid white;\n}\n.scrollabletable > table > tbody {\n  position: absolute;\n  margin-top: 5em;\n}\n```\nMaybe somebody can test and improve this solution. . ",
    "Verikon": "For all browsers but chrome, autoComplete=\"off\" on the Textfield element should suffice. \nGoogle feel that developers need to be protected from themselves here : https://bugs.chromium.org/p/chromium/issues/detail?id=468153#c164\nedit: not sure if the project steers here want to support google's compliancy problems https://www.w3.org/wiki/HTML/Elements/input/text\n. ",
    "bradzacher": "@tleunen as requested. ID has been added to the proptypes. ",
    "omerts": "@kradio3 On the clean mdl hovering over the agree doesn't remove th accent from it, so even if it is not the best design, it is consistent.. ",
    "knuterik91": "Answered your stackoverflow question here : http://stackoverflow.com/questions/41125726/how-to-programmatically-set-textfield-value/41126246#41126246. ",
    "sveisvei": "Did find current icons, here is an array\njs\n[\n    '3d_rotation',\n    'ac_unit',\n    'access_alarm',\n    'access_alarms',\n    'access_time',\n    'accessibility',\n    'accessible',\n    'account_balance',\n    'account_balance_wallet',\n    'account_box',\n    'account_circle',\n    'adb',\n    'add',\n    'add_a_photo',\n    'add_alarm',\n    'add_alert',\n    'add_box',\n    'add_circle',\n    'add_circle_outline',\n    'add_location',\n    'add_shopping_cart',\n    'add_to_photos',\n    'add_to_queue',\n    'adjust',\n    'airline_seat_flat',\n    'airline_seat_flat_angled',\n    'airline_seat_individual_suite',\n    'airline_seat_legroom_extra',\n    'airline_seat_legroom_normal',\n    'airline_seat_legroom_reduced',\n    'airline_seat_recline_extra',\n    'airline_seat_recline_normal',\n    'airplanemode_active',\n    'airplanemode_inactive',\n    'airplay',\n    'airport_shuttle',\n    'alarm',\n    'alarm_add',\n    'alarm_off',\n    'alarm_on',\n    'album',\n    'all_inclusive',\n    'all_out',\n    'android',\n    'announcement',\n    'apps',\n    'archive',\n    'arrow_back',\n    'arrow_downward',\n    'arrow_drop_down',\n    'arrow_drop_down_circle',\n    'arrow_drop_up',\n    'arrow_forward',\n    'arrow_upward',\n    'art_track',\n    'aspect_ratio',\n    'assessment',\n    'assignment',\n    'assignment_ind',\n    'assignment_late',\n    'assignment_return',\n    'assignment_returned',\n    'assignment_turned_in',\n    'assistant',\n    'assistant_photo',\n    'attach_file',\n    'attach_money',\n    'attachment',\n    'audiotrack',\n    'autorenew',\n    'av_timer',\n    'backspace',\n    'backup',\n    'battery_alert',\n    'battery_charging_full',\n    'battery_full',\n    'battery_std',\n    'battery_unknown',\n    'beach_access',\n    'beenhere',\n    'block',\n    'bluetooth',\n    'bluetooth_audio',\n    'bluetooth_connected',\n    'bluetooth_disabled',\n    'bluetooth_searching',\n    'blur_circular',\n    'blur_linear',\n    'blur_off',\n    'blur_on',\n    'book',\n    'bookmark',\n    'bookmark_border',\n    'border_all',\n    'border_bottom',\n    'border_clear',\n    'border_color',\n    'border_horizontal',\n    'border_inner',\n    'border_left',\n    'border_outer',\n    'border_right',\n    'border_style',\n    'border_top',\n    'border_vertical',\n    'branding_watermark',\n    'brightness_1',\n    'brightness_2',\n    'brightness_3',\n    'brightness_4',\n    'brightness_5',\n    'brightness_6',\n    'brightness_7',\n    'brightness_auto',\n    'brightness_high',\n    'brightness_low',\n    'brightness_medium',\n    'broken_image',\n    'brush',\n    'bubble_chart',\n    'bug_report',\n    'build',\n    'burst_mode',\n    'business',\n    'business_center',\n    'cached',\n    'cake',\n    'call',\n    'call_end',\n    'call_made',\n    'call_merge',\n    'call_missed',\n    'call_missed_outgoing',\n    'call_received',\n    'call_split',\n    'call_to_action',\n    'camera',\n    'camera_alt',\n    'camera_enhance',\n    'camera_front',\n    'camera_rear',\n    'camera_roll',\n    'cancel',\n    'card_giftcard',\n    'card_membership',\n    'card_travel',\n    'casino',\n    'cast',\n    'cast_connected',\n    'center_focus_strong',\n    'center_focus_weak',\n    'change_history',\n    'chat',\n    'chat_bubble',\n    'chat_bubble_outline',\n    'check',\n    'check_box',\n    'check_box_outline_blank',\n    'check_circle',\n    'chevron_left',\n    'chevron_right',\n    'child_care',\n    'child_friendly',\n    'chrome_reader_mode',\n    'class',\n    'clear',\n    'clear_all',\n    'close',\n    'closed_caption',\n    'cloud',\n    'cloud_circle',\n    'cloud_done',\n    'cloud_download',\n    'cloud_off',\n    'cloud_queue',\n    'cloud_upload',\n    'code',\n    'collections',\n    'collections_bookmark',\n    'color_lens',\n    'colorize',\n    'comment',\n    'compare',\n    'compare_arrows',\n    'computer',\n    'confirmation_number',\n    'contact_mail',\n    'contact_phone',\n    'contacts',\n    'content_copy',\n    'content_cut',\n    'content_paste',\n    'control_point',\n    'control_point_duplicate',\n    'copyright',\n    'create',\n    'create_new_folder',\n    'credit_card',\n    'crop',\n    'crop_16_9',\n    'crop_3_2',\n    'crop_5_4',\n    'crop_7_5',\n    'crop_din',\n    'crop_free',\n    'crop_landscape',\n    'crop_original',\n    'crop_portrait',\n    'crop_rotate',\n    'crop_square',\n    'dashboard',\n    'data_usage',\n    'date_range',\n    'dehaze',\n    'delete',\n    'delete_forever',\n    'delete_sweep',\n    'description',\n    'desktop_mac',\n    'desktop_windows',\n    'details',\n    'developer_board',\n    'developer_mode',\n    'device_hub',\n    'devices',\n    'devices_other',\n    'dialer_sip',\n    'dialpad',\n    'directions',\n    'directions_bike',\n    'directions_boat',\n    'directions_bus',\n    'directions_car',\n    'directions_railway',\n    'directions_run',\n    'directions_subway',\n    'directions_transit',\n    'directions_walk',\n    'disc_full',\n    'dns',\n    'do_not_disturb',\n    'do_not_disturb_alt',\n    'do_not_disturb_off',\n    'do_not_disturb_on',\n    'dock',\n    'domain',\n    'done',\n    'done_all',\n    'donut_large',\n    'donut_small',\n    'drafts',\n    'drag_handle',\n    'drive_eta',\n    'dvr',\n    'edit',\n    'edit_location',\n    'eject',\n    'email',\n    'enhanced_encryption',\n    'equalizer',\n    'error',\n    'error_outline',\n    'euro_symbol',\n    'ev_station',\n    'event',\n    'event_available',\n    'event_busy',\n    'event_note',\n    'event_seat',\n    'exit_to_app',\n    'expand_less',\n    'expand_more',\n    'explicit',\n    'explore',\n    'exposure',\n    'exposure_neg_1',\n    'exposure_neg_2',\n    'exposure_plus_1',\n    'exposure_plus_2',\n    'exposure_zero',\n    'extension',\n    'face',\n    'fast_forward',\n    'fast_rewind',\n    'favorite',\n    'favorite_border',\n    'featured_play_list',\n    'featured_video',\n    'feedback',\n    'fiber_dvr',\n    'fiber_manual_record',\n    'fiber_new',\n    'fiber_pin',\n    'fiber_smart_record',\n    'file_download',\n    'file_upload',\n    'filter',\n    'filter_1',\n    'filter_2',\n    'filter_3',\n    'filter_4',\n    'filter_5',\n    'filter_6',\n    'filter_7',\n    'filter_8',\n    'filter_9',\n    'filter_9_plus',\n    'filter_b_and_w',\n    'filter_center_focus',\n    'filter_drama',\n    'filter_frames',\n    'filter_hdr',\n    'filter_list',\n    'filter_none',\n    'filter_tilt_shift',\n    'filter_vintage',\n    'find_in_page',\n    'find_replace',\n    'fingerprint',\n    'first_page',\n    'fitness_center',\n    'flag',\n    'flare',\n    'flash_auto',\n    'flash_off',\n    'flash_on',\n    'flight',\n    'flight_land',\n    'flight_takeoff',\n    'flip',\n    'flip_to_back',\n    'flip_to_front',\n    'folder',\n    'folder_open',\n    'folder_shared',\n    'folder_special',\n    'font_download',\n    'format_align_center',\n    'format_align_justify',\n    'format_align_left',\n    'format_align_right',\n    'format_bold',\n    'format_clear',\n    'format_color_fill',\n    'format_color_reset',\n    'format_color_text',\n    'format_indent_decrease',\n    'format_indent_increase',\n    'format_italic',\n    'format_line_spacing',\n    'format_list_bulleted',\n    'format_list_numbered',\n    'format_paint',\n    'format_quote',\n    'format_shapes',\n    'format_size',\n    'format_strikethrough',\n    'format_textdirection_l_to_r',\n    'format_textdirection_r_to_l',\n    'format_underlined',\n    'forum',\n    'forward',\n    'forward_10',\n    'forward_30',\n    'forward_5',\n    'free_breakfast',\n    'fullscreen',\n    'fullscreen_exit',\n    'functions',\n    'g_translate',\n    'gamepad',\n    'games',\n    'gavel',\n    'gesture',\n    'get_app',\n    'gif',\n    'golf_course',\n    'gps_fixed',\n    'gps_not_fixed',\n    'gps_off',\n    'grade',\n    'gradient',\n    'grain',\n    'graphic_eq',\n    'grid_off',\n    'grid_on',\n    'group',\n    'group_add',\n    'group_work',\n    'hd',\n    'hdr_off',\n    'hdr_on',\n    'hdr_strong',\n    'hdr_weak',\n    'headset',\n    'headset_mic',\n    'healing',\n    'hearing',\n    'help',\n    'help_outline',\n    'high_quality',\n    'highlight',\n    'highlight_off',\n    'history',\n    'home',\n    'hot_tub',\n    'hotel',\n    'hourglass_empty',\n    'hourglass_full',\n    'http',\n    'https',\n    'image',\n    'image_aspect_ratio',\n    'import_contacts',\n    'import_export',\n    'important_devices',\n    'inbox',\n    'indeterminate_check_box',\n    'info',\n    'info_outline',\n    'input',\n    'insert_chart',\n    'insert_comment',\n    'insert_drive_file',\n    'insert_emoticon',\n    'insert_invitation',\n    'insert_link',\n    'insert_photo',\n    'invert_colors',\n    'invert_colors_off',\n    'iso',\n    'keyboard',\n    'keyboard_arrow_down',\n    'keyboard_arrow_left',\n    'keyboard_arrow_right',\n    'keyboard_arrow_up',\n    'keyboard_backspace',\n    'keyboard_capslock',\n    'keyboard_hide',\n    'keyboard_return',\n    'keyboard_tab',\n    'keyboard_voice',\n    'kitchen',\n    'label',\n    'label_outline',\n    'landscape',\n    'language',\n    'laptop',\n    'laptop_chromebook',\n    'laptop_mac',\n    'laptop_windows',\n    'last_page',\n    'launch',\n    'layers',\n    'layers_clear',\n    'leak_add',\n    'leak_remove',\n    'lens',\n    'library_add',\n    'library_books',\n    'library_music',\n    'lightbulb_outline',\n    'line_style',\n    'line_weight',\n    'linear_scale',\n    'link',\n    'linked_camera',\n    'list',\n    'live_help',\n    'live_tv',\n    'local_activity',\n    'local_airport',\n    'local_atm',\n    'local_bar',\n    'local_cafe',\n    'local_car_wash',\n    'local_convenience_store',\n    'local_dining',\n    'local_drink',\n    'local_florist',\n    'local_gas_station',\n    'local_grocery_store',\n    'local_hospital',\n    'local_hotel',\n    'local_laundry_service',\n    'local_library',\n    'local_mall',\n    'local_movies',\n    'local_offer',\n    'local_parking',\n    'local_pharmacy',\n    'local_phone',\n    'local_pizza',\n    'local_play',\n    'local_post_office',\n    'local_printshop',\n    'local_see',\n    'local_shipping',\n    'local_taxi',\n    'location_city',\n    'location_disabled',\n    'location_off',\n    'location_on',\n    'location_searching',\n    'lock',\n    'lock_open',\n    'lock_outline',\n    'looks',\n    'looks_3',\n    'looks_4',\n    'looks_5',\n    'looks_6',\n    'looks_one',\n    'looks_two',\n    'loop',\n    'loupe',\n    'low_priority',\n    'loyalty',\n    'mail',\n    'mail_outline',\n    'map',\n    'markunread',\n    'markunread_mailbox',\n    'memory',\n    'menu',\n    'merge_type',\n    'message',\n    'mic',\n    'mic_none',\n    'mic_off',\n    'mms',\n    'mode_comment',\n    'mode_edit',\n    'monetization_on',\n    'money_off',\n    'monochrome_photos',\n    'mood',\n    'mood_bad',\n    'more',\n    'more_horiz',\n    'more_vert',\n    'motorcycle',\n    'mouse',\n    'move_to_inbox',\n    'movie',\n    'movie_creation',\n    'movie_filter',\n    'multiline_chart',\n    'music_note',\n    'music_video',\n    'my_location',\n    'nature',\n    'nature_people',\n    'navigate_before',\n    'navigate_next',\n    'navigation',\n    'near_me',\n    'network_cell',\n    'network_check',\n    'network_locked',\n    'network_wifi',\n    'new_releases',\n    'next_week',\n    'nfc',\n    'no_encryption',\n    'no_sim',\n    'not_interested',\n    'note',\n    'note_add',\n    'notifications',\n    'notifications_active',\n    'notifications_none',\n    'notifications_off',\n    'notifications_paused',\n    'offline_pin',\n    'ondemand_video',\n    'opacity',\n    'open_in_browser',\n    'open_in_new',\n    'open_with',\n    'pages',\n    'pageview',\n    'palette',\n    'pan_tool',\n    'panorama',\n    'panorama_fish_eye',\n    'panorama_horizontal',\n    'panorama_vertical',\n    'panorama_wide_angle',\n    'party_mode',\n    'pause',\n    'pause_circle_filled',\n    'pause_circle_outline',\n    'payment',\n    'people',\n    'people_outline',\n    'perm_camera_mic',\n    'perm_contact_calendar',\n    'perm_data_setting',\n    'perm_device_information',\n    'perm_identity',\n    'perm_media',\n    'perm_phone_msg',\n    'perm_scan_wifi',\n    'person',\n    'person_add',\n    'person_outline',\n    'person_pin',\n    'person_pin_circle',\n    'personal_video',\n    'pets',\n    'phone',\n    'phone_android',\n    'phone_bluetooth_speaker',\n    'phone_forwarded',\n    'phone_in_talk',\n    'phone_iphone',\n    'phone_locked',\n    'phone_missed',\n    'phone_paused',\n    'phonelink',\n    'phonelink_erase',\n    'phonelink_lock',\n    'phonelink_off',\n    'phonelink_ring',\n    'phonelink_setup',\n    'photo',\n    'photo_album',\n    'photo_camera',\n    'photo_filter',\n    'photo_library',\n    'photo_size_select_actual',\n    'photo_size_select_large',\n    'photo_size_select_small',\n    'picture_as_pdf',\n    'picture_in_picture',\n    'picture_in_picture_alt',\n    'pie_chart',\n    'pie_chart_outlined',\n    'pin_drop',\n    'place',\n    'play_arrow',\n    'play_circle_filled',\n    'play_circle_outline',\n    'play_for_work',\n    'playlist_add',\n    'playlist_add_check',\n    'playlist_play',\n    'plus_one',\n    'poll',\n    'polymer',\n    'pool',\n    'portable_wifi_off',\n    'portrait',\n    'power',\n    'power_input',\n    'power_settings_new',\n    'pregnant_woman',\n    'present_to_all',\n    'print',\n    'priority_high',\n    'public',\n    'publish',\n    'query_builder',\n    'question_answer',\n    'queue',\n    'queue_music',\n    'queue_play_next',\n    'radio',\n    'radio_button_checked',\n    'radio_button_unchecked',\n    'rate_review',\n    'receipt',\n    'recent_actors',\n    'record_voice_over',\n    'redeem',\n    'redo',\n    'refresh',\n    'remove',\n    'remove_circle',\n    'remove_circle_outline',\n    'remove_from_queue',\n    'remove_red_eye',\n    'remove_shopping_cart',\n    'reorder',\n    'repeat',\n    'repeat_one',\n    'replay',\n    'replay_10',\n    'replay_30',\n    'replay_5',\n    'reply',\n    'reply_all',\n    'report',\n    'report_problem',\n    'restaurant',\n    'restaurant_menu',\n    'restore',\n    'restore_page',\n    'ring_volume',\n    'room',\n    'room_service',\n    'rotate_90_degrees_ccw',\n    'rotate_left',\n    'rotate_right',\n    'rounded_corner',\n    'router',\n    'rowing',\n    'rss_feed',\n    'rv_hookup',\n    'satellite',\n    'save',\n    'scanner',\n    'schedule',\n    'school',\n    'screen_lock_landscape',\n    'screen_lock_portrait',\n    'screen_lock_rotation',\n    'screen_rotation',\n    'screen_share',\n    'sd_card',\n    'sd_storage',\n    'search',\n    'security',\n    'select_all',\n    'send',\n    'sentiment_dissatisfied',\n    'sentiment_neutral',\n    'sentiment_satisfied',\n    'sentiment_very_dissatisfied',\n    'sentiment_very_satisfied',\n    'settings',\n    'settings_applications',\n    'settings_backup_restore',\n    'settings_bluetooth',\n    'settings_brightness',\n    'settings_cell',\n    'settings_ethernet',\n    'settings_input_antenna',\n    'settings_input_component',\n    'settings_input_composite',\n    'settings_input_hdmi',\n    'settings_input_svideo',\n    'settings_overscan',\n    'settings_phone',\n    'settings_power',\n    'settings_remote',\n    'settings_system_daydream',\n    'settings_voice',\n    'share',\n    'shop',\n    'shop_two',\n    'shopping_basket',\n    'shopping_cart',\n    'short_text',\n    'show_chart',\n    'shuffle',\n    'signal_cellular_4_bar',\n    'signal_cellular_connected_no_internet_4_bar',\n    'signal_cellular_no_sim',\n    'signal_cellular_null',\n    'signal_cellular_off',\n    'signal_wifi_4_bar',\n    'signal_wifi_4_bar_lock',\n    'signal_wifi_off',\n    'sim_card',\n    'sim_card_alert',\n    'skip_next',\n    'skip_previous',\n    'slideshow',\n    'slow_motion_video',\n    'smartphone',\n    'smoke_free',\n    'smoking_rooms',\n    'sms',\n    'sms_failed',\n    'snooze',\n    'sort',\n    'sort_by_alpha',\n    'spa',\n    'space_bar',\n    'speaker',\n    'speaker_group',\n    'speaker_notes',\n    'speaker_notes_off',\n    'speaker_phone',\n    'spellcheck',\n    'star',\n    'star_border',\n    'star_half',\n    'stars',\n    'stay_current_landscape',\n    'stay_current_portrait',\n    'stay_primary_landscape',\n    'stay_primary_portrait',\n    'stop',\n    'stop_screen_share',\n    'storage',\n    'store',\n    'store_mall_directory',\n    'straighten',\n    'streetview',\n    'strikethrough_s',\n    'style',\n    'subdirectory_arrow_left',\n    'subdirectory_arrow_right',\n    'subject',\n    'subscriptions',\n    'subtitles',\n    'subway',\n    'supervisor_account',\n    'surround_sound',\n    'swap_calls',\n    'swap_horiz',\n    'swap_vert',\n    'swap_vertical_circle',\n    'switch_camera',\n    'switch_video',\n    'sync',\n    'sync_disabled',\n    'sync_problem',\n    'system_update',\n    'system_update_alt',\n    'tab',\n    'tab_unselected',\n    'tablet',\n    'tablet_android',\n    'tablet_mac',\n    'tag_faces',\n    'tap_and_play',\n    'terrain',\n    'text_fields',\n    'text_format',\n    'textsms',\n    'texture',\n    'theaters',\n    'thumb_down',\n    'thumb_up',\n    'thumbs_up_down',\n    'time_to_leave',\n    'timelapse',\n    'timeline',\n    'timer',\n    'timer_10',\n    'timer_3',\n    'timer_off',\n    'title',\n    'toc',\n    'today',\n    'toll',\n    'tonality',\n    'touch_app',\n    'toys',\n    'track_changes',\n    'traffic',\n    'train',\n    'tram',\n    'transfer_within_a_station',\n    'transform',\n    'translate',\n    'trending_down',\n    'trending_flat',\n    'trending_up',\n    'tune',\n    'turned_in',\n    'turned_in_not',\n    'tv',\n    'unarchive',\n    'undo',\n    'unfold_less',\n    'unfold_more',\n    'update',\n    'usb',\n    'verified_user',\n    'vertical_align_bottom',\n    'vertical_align_center',\n    'vertical_align_top',\n    'vibration',\n    'video_call',\n    'video_label',\n    'video_library',\n    'videocam',\n    'videocam_off',\n    'videogame_asset',\n    'view_agenda',\n    'view_array',\n    'view_carousel',\n    'view_column',\n    'view_comfy',\n    'view_compact',\n    'view_day',\n    'view_headline',\n    'view_list',\n    'view_module',\n    'view_quilt',\n    'view_stream',\n    'view_week',\n    'vignette',\n    'visibility',\n    'visibility_off',\n    'voice_chat',\n    'voicemail',\n    'volume_down',\n    'volume_mute',\n    'volume_off',\n    'volume_up',\n    'vpn_key',\n    'vpn_lock',\n    'wallpaper',\n    'warning',\n    'watch',\n    'watch_later',\n    'wb_auto',\n    'wb_cloudy',\n    'wb_incandescent',\n    'wb_iridescent',\n    'wb_sunny',\n    'wc',\n    'web',\n    'web_asset',\n    'weekend',\n    'whatshot',\n    'widgets',\n    'wifi',\n    'wifi_lock',\n    'wifi_tethering',\n    'work',\n    'wrap_text',\n    'youtube_searched_for',\n    'zoom_in',\n    'zoom_out',\n    'zoom_out_map',\n];. ",
    "chris-erxleben": "In case you didn't ever find them, the usage docs are here and the icons are here.. ",
    "hankphung": "Guys, that's great!\nI will keep in touch and closing this issue now.. ",
    "coderhaoxin": "Hi, guys! That is so great! I can transfer react-mdc on npm if you need that \ud83d\udc4f\nAlso, it's better to publish all the components as separate modules under a npm scope (such as: react-material), just as material-components-web does.\n\u53d1\u81ea\u6211\u7684 iPhone\n\n\u5728 2016\u5e7412\u670824\u65e5\uff0c\u4e0b\u534811:20\uff0cTommy notifications@github.com \u5199\u9053\uff1a\nIt might also be a good idea to sync with @haoxins. He created https://github.com/haoxins/react-mdc\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "stunaz": "Hi guys,\nwhat's new with this?\nMaybe you guys can team up?\ncc @tleunen @haoxins @idancali @kradio3 @Hardtack. ",
    "codekiln": "This is confusing!. ",
    "brandonmp": "thanks @kradio3 .  enzyme coupled with this project seems to make jest snapshot tests work fine. \nfull example:\n```\nimport React from 'react'\nimport MyThing from './index.js'\nimport 'react-mdl/extra/material.js'\nimport 'react-mdl/extra/material.css'\nimport { shallow } from 'enzyme'\nimport toJson from 'enzyme-to-json'\nit('renders correctly', () => {\n  const tree = shallow(\n    \n  )\n  expect(toJson(tree)).toMatchSnapshot()\n})\n```. afraid i'm not sure what you mean--my fix, as in my extension content script? \n& all I know about shimmed modules is that they're basically passed through webpack into the bundle w/o being parsed, right? If that's the case, I don't think I understand 'shimming a module for document'  . ahh got it--i hadn't thought to use webpack for the substitution, that's clever. \nFor brevity's sake I ended up just skipping shadowDOM & gutting mdl global styles to avoid spillage (eg just removing all css that affected html tags, but looking to make it better encapsulated in the future so I'll give this a go. . unfortunately there are very few options here as far as i know. \nto isolate css, you could normally use a Shadow DOM, but material.js won't work in that instance.\nI was using react-mdl in a Chrome extension and had a similar requirement. the only solution I found that could work was to use a custom version of material.css with all of the HTML tag name styles removed (just do a regex search in your editor for ^\\w). ",
    "jatarga": "I found the problem. Adding display: none for mobile devices is intended?  \n``` css\n@media screen and(max-width: 1024 px) {\n    .mdl-layout__header {\n        display: none\n    }\n    .mdl-layout--fixed-header > .mdl-layout__header {\n        display: -webkit-flex;display: -ms-flexbox;display: flex\n    }\n}\n```. ",
    "r72cccp": "That is simple, when i remove class names like .mdl-cell--12-col-phone, .mdl-cell--12-col-tablet from tags class attribute and leave only class mdl-cell--12-col - all working fine.\nit's may be closed - this is not issue.. ",
    "fb-owen-vandijk": "Running into the exact same, issue, did you find a solution?. Isn't that the same project?. ",
    "chipit24": "Whoops, I thought I was replying to another issue - I removed my comment. I never resolved the issue. I ended up building a different component and not using radio buttons.. ",
    "midgethoen": "After some more though; this is probably not related to react-mdl, but more likely to material-design-lite..\nI'll close it for now. . ",
    "jvivs": "If you're using webpack to bundle, have you tried applying your fix as a shimmed module for document?. Fair point, there are multiple kinds of shimming available with webpack.\nI was thinking of the ProvidePlugin which enables the replacement of a free variable like document with a module.\nSo your module would be something like this:\n// shadow-root\nmodule.exports = ((root) => root.document.querySelector('#shadowroot').shadowRoot))(window);\nAnd your webpack build would contain something like this:\nnew webpack.ProvidePlugin({\n  \"document\": \"shadow-root\"\n});\nThat make any more sense?. Yeah, there's definitely a lot in there. I haven't tried applying it to shadow dom use cases though. If you do find it works, I'd love to know!. ",
    "developer94404": "Thanks for your kind suggestions and feedback !. ",
    "be-next-hotdog": "I made it work by rewriting inline style z-index, I think it's better to join it as natural props.. ",
    "jiantongc": "Ah... have to use\nimport 'react-mdl/extra/material.css'\nimport 'react-mdl/extra/material.js'\ninstead of\nimport \"material-design-lite/material.css\"\nimport \"material-design-lite/material.min.js\". ",
    "saboya": "I'm not sure about react-mdl's menu specifically, but nothing using react-portal will work (like react-mdl-extra), because react-mdl uses html5 dialog. The alternative you have is using another modal implementation, that does not use html5 dialog.\nI hit the same issue and was using react-toolbox's modal, but that basically pulls an extra 400kb (unminified / ungzipped) to your bundle for a single feature.\nI ended up ditching react-mdl-extra selectfield and implementing my own, and went back to react-mdl dialog.. Updated branch with requested change.. ",
    "extend1994": "@tleunen Thanks for your response!. I saw there are people using this library on https://www.npmjs.com/package/react-mdl. So I still decide to add this library in https://github.com/cdnjs/cdnjs/pull/11878. Anyone need this library can use CDNJS service :) We are also adding material-components-web!. ",
    "graphicgeek": "From the docs: \nhttps://react-mdl.github.io/react-mdl/components/dialog/\n\nThis component uses dialog element, which is only supported by Chrome and Opera currently. For other browsers, you need to include a polyfill in your code.\n\nI'm trying the one the suggested: https://github.com/GoogleChrome/dialog-polyfill. ",
    "hariharanravi92": "1)Install and use react-modal npm package\nhttps://github.com/reactjs/react-modal\nIt's working properly in firefox, chrome, ie, edge, safari\n. ",
    "Azhng": "Hi wzup, I had similar issue as you. I found that it might be caused by the incompatibility between react-mdl and bootstrap library. I resolved this issue by removing code that imports bootstrap library.\nHope it helps. . ",
    "nickmccurdy": "Hmm I failed to notice that Circle CI and Codecov are still processing pull requests here, maybe the badges just need to be changed?. ",
    "sanyatuning": "That's true.\n\n@tleunen requested changes on this pull request.\nIn src/DataTable/Selectable.js\nhttps://github.com/react-mdl/react-mdl/pull/499#discussion_r138122796:\n\n@@ -128,6 +128,7 @@ export default Component => {\n             // remove unwatned props\n             // see https://github.com/Hacker0x01/react-datepicker/issues/517#issuecomment-230171426\n             delete otherProps.onSelectionChanged;\n+            delete otherProps.selectedProps;\n\nShouldn't it be selectedRows instead?\n\n. sorry for the slow fix :). fixed. ",
    "kokororin": "https://github.com/react-mdl/react-mdl/blob/master/docs/pages/templates/text/index.js. ",
    "achtan": "so the autocomplete could work :)\nhow else WS would know witch css libs i am using, if he dont look into node_modules... ?\nhttps://intellij-support.jetbrains.com/hc/en-us/community/posts/115000052410-IntelliJ-CSS-autocomplete-for-node-modules-Bootstrap. ",
    "timkrins": "Yeah, I was trying to avoid making changes, but noticed that the current diff between the two material.js files removed similar functions that are obsolete in React style development.\nAs it is, the changes I made will work with the current material.js file, but causes errors in the console if I don't have a tab panel and hash-links configured.\nI will do some thinking on the problem :)\n. Hmm, would mdl want this changed in their branch? It will currently fail if there is no dom panel for mdl to make visible, and if you are using pure mdl, this is probably an error that you want to see and then correct.\nLike this person's issue which you have commented on before: google/material-design-lite#1397\nMaybe the upstream pull request could implement a warning that there was no panel found? But then I'm not sure how we would ignore that warning...\n. ",
    "durandj": "That did simplify things greatly.\n. ",
    "Cactucs": "Changed. "
}