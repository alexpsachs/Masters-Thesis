{
    "keithamus": "The issue with Azerty keyboards is not something that can be easily fixed; there is no way to check of the type of keyboard, and the number keys fire the same keyCode, regardless of modifier keys. You would be better off checking for shift key on or off combined with the number keys (we'll get to that).\nThe second problem is a slight misinterpretation of the syntax; 'shift+[0-9],num-[0-9]' is a key sequence, in other words: shift+(number key) followed by a numpad number key. So instead you want to use a /, to denote an optional key.\nLastly, the engine isn't advanced enough to pick out fragments of a key label, so 'num-[0-9]' won't work. You'll instead need to use '[num-0-num-9]'.\nSo in summary, to capture both sets of number keys you need to express a combo like so: '[0-9]/[num-0-num-9]'. If you wanted to check for those numbers, regardless of shift key then you want something like: 'shift+[0-9]/[0-9]/shift+[num-0-num-9]/[num-0-num-9]'. This obviously is fairly verbose, and it'd be great to use some kind of optional key syntax like RegEx's ? key (so doing 'shift?+[0-9]') but I think that is out of scope for the issue you're reporting. As such I'm closing this as I don't think there is a valid issue within your description.\ntl;dr: Use:\njavascript\njwerty.key('shift+[0-9]/[0-9]/shift+[num-0-num-9]/[num-0-num-9]', function (e) {\n    alert(e.which);\n});\n. Just to clarify, the only problem you are having is with the following chunk of code, which you are expecting to focus the input:first-child element, on keypress of enter:\njavascript\njwerty.fire('enter','input:first-child', \"#myForm\");\nThis code is incorrect, firstly because you are using jwerty.fire, which will trigger an event to happen on a particular field, simulating a keypress of \"enter\". Secondly, this needs to be a jwerty.key and the second argument has to be a Function a Boolean. Lastly to this, you've specified the selector and the selector context, which seems wrong, as to me this sounds as though this should be a global key. So what you actually want to do is something like:\njavascript\njwerty.key('enter', function () {\n    document.getElementById('type-email').focus();\n});\nThis is being closed as there is no issue with the framework here.\n. You can bypass all of the string matches by passing a full 2D array into the jwertyCode param, like so:\njavascript\njwerty.key([['/']], function() {\n   console.log('test');\n});\nThis is an issue which will be overcome before 1.0, but not quite sure the best way to solve this problem right now.\n. Escaping is really a last resort for me, as it makes some ugly looking strings which defeats the point of this lib (to be very readable and self documenting). \nThe parser already handles these special cases for all but slash; a string like 'ctrl++' or ',,.' parses successfully, but / is a slightly more difficult one to handle generically like this. \n. As an aside, your issue with keyup events is because jwerty.key listens for keydown. When the keydown event fires, you're focusing the input box, then the keypress and finally the keyup events fire, so the browser assumed you want a / in the input. A way to fix this particular problem is the following:\njavascript\n$(document).bind('keyup', jwerty.event([['/']], function () { input.focus(); });\nEssentially binding to keyup to do the same job, bypasses event sequence issues.\n. Re-opened this because not being able to process the '/' string literal is a genuine issue\n. Thank you for pointing this out. My old account used to be keithcirkel, but I have recently renamed it to keithamus, this is why the issue has occurred.\n. IE is a work-in-progress right now. I have been looking into supporting it in some kind of capacity, but it'll likely only be jQuery dependant. \nThis is a definite requirement for a 1.0 though - ideally I'd like to support IE9+ standalone, with support for IE6+ with jQuery as a dependency.\nThanks for the advice around the metaKey though, I'll definitely look into this!\n. @flesch that is fantastic, thanks very much! I have a couple of things I want to chime in on this for now, with actual work to follow up later:\n- I originally -- intentionally -- skipped attachEvent for many reasons, mostly because I'm stubborn and I don't want to code for IE when the lib also supports jQuery (and, I don't know anyone who would use this lib raw, for IE, without jQuery). Depending on the volume of complaints about lack of raw-js-ie support would decide whether I changed my mind or not.\n- A lot of the tests are failing because of broken tests, not broken code. For example createEventObject/fireEvent isn't used in the tests to build any keyboard events, so where the code might have a change at passing for genuine keyboard events, it doesn't. I've actually got some un-committed code sitting here which fixes issues like these, and allows about 70% of the tests (with jQuery) to pass, so I'll commit this shortly.\n- There is some really odd behaviour with the metaKey attrib in Windows with Internet Explorer. I know jQuery spent some time hashing this out and solving it. Something along the lines of that if ctrlKey is true, metaKey is undefined, unless shiftKey is present... I'd like to properly solve this before this lib is deemed \"ie ready\"\n. Just out of curiosity, what are you using to bind/listen to events onto DOM elements? Maybe it'd be better to be able to support custom bind methods instead of just supporting IE?\n. That question was mostly for @flesch as he was suggesting fuller IE support. While I'm happy to support IE with jQuery/Ender I don't see much utility in providing event listener degradation for IE.\n. A fix is in the works, but I have been a bit busy with other projects, personal life, and my day job over the past two months. The project definitely isn't closed and I plan to start working on it as soon as I can. Thanks for the support!\n. Sorry I should be updating the tests for these fairly soon - been a little busy with work and other projects.\n. If I recall IE9 works fine, but I could be wrong, I haven't worked on this in a long time. If you want to put some money behind it, please, be my guest ;)\n. jwerty has no \"dependencies\" as such. When ender is used, it requires ender to be installed with a selector engine and an event binding engine. While the obvious choices for this (right now) might be Qwery and Bean, they are not hard dependencies, for example: you could push querySelectorAll as your selector engine into Ender, and it will (and should) still work flawlessly. Similarly, as long as you have el.bind() and el.trigger() inside Ender, then jwerty will works.\nIf there was a say to provide dependencies based on functionality in ender, I would definitely use it, however I am wary to say \"Qwery+Bean\" as a dependency, simply because they're not.\n. I think the best way to do this would be to extend a capsLock property inside a keyboard event, which will be similar to shiftKey.\nThe problem is, it seems as though the only way to detect a caps lock event is if a keyboard event is generating a capital letter, but shiftKey is false. This seems somewhat unreliable, and won't work for non-printable characters, which means if the property is always inside the keyboard event, it may give a false positive (or false negative).\nAlso it seems like caps-lock behaviour is undecided among browsers. For example Chrome on Mac will only fire the caps lock key when it switches onto caps lock. Firefox, however, will fire regardless of state.\nThat is not to say no, but I think it is worth putting more research in to get a good idea of how best to implement it.\n. Grr the \"close and comment\" and \"comment\" buttons being next to each-other is super irritating\n. At current there is no \"easy\" way to do mass key bindings, other than using jwerty.is.\nI have been considering the issue of mass-keybindings though, before this issue. My proposal is to allow an object mapping of keys to functions, allowing you to do something like this:\n``` javascript\njwerty.key('myinput', {\n'ctrl+shift+a': false,\n'ctrl+shift+x': function () { console.log('ctrl shift x'); },\n'ctrl+shift+p': myFunction\n\n});\n```\nHowever for repetitive tasks, that mostly do the same thing with a few minor exceptions, this doesn't really improve anything.\nI'd like to see your use code though, how you're using it and what you think would improve the terseness.\n. Thank you for your commit. This is hugely appreciated!\n. Thanks for this bug report! I'll definitely get this working for 0.4.\nAs an aside, it's really difficult to get keys like # working - on my UK British keyboard, # is between ' and the return key, and my Shift+3 key combo gives me \u00a3 (UK GBP symbol)\n. There is good and bad news.\nThe good news is there is a proper API for getting the actual key value and not the key code, in the DOM Level 3 Events Spec. (As you can see it has a comprehensive list of key special values here also\nThe bad news is that it has yet to be implemented by any browser vendors. Webkit browsers (Chrome/Safari) kinda-sorta implement this with KeyboardEvent.keyIdentifier, but using this style of keyboard detection is really an \"all or nothing\" situation.\nHowever, as soon as one browser supports KeyboardEvent.key/KeyboardEvent.char, I will be working on supporting it for jwerty (in a branch, which will eventually become fully supported in jwerty when the major vendors all support it)\n. None what-so-ever. If you look at line 118 I had intended to put it there, I just wasn't sure it correlates to the \";\" key on all (qwerty) platforms.\nIf you want to, you can submit it as a pull request then you can take the credit it for it on the list of contributors!\n. Perfectly executed pull request!\n. When you create a pull request it will create a new issue in the issue tracker, which you can use to describe the issue at hand (and also bundle the solution as well).\nIf there is an existing issue, which you intend to close with your pull request, add \"fixes #NN\" to the commit message, where NN is the issue number. When the pull request is accepted it will automatically close issue NN.\n. If you have jQuery, and you're using jwerty.key() you can unbind the key handler using $(el).unbind('keydown.jwerty');, which will unbind the jwerty events without removing any additional handlers you have added. Alternatively you can indeed manage it yourself using $(el).on('keydown', jwerty.event()) and then just use $(el).off().\nIf you do not have jQuery then you need to manage the binding yourself so you can unbind it. Use the jwerty.event() method in combination with el.addEventListener/el.removeEventListener.\njwerty.key is currently a one time binding, with no ability to unbind. See #19\n. 'enter' will not fire on the 'button:first' as there is nothing bound to 'enter' on 'button:first'. Programatically generated keyboard events in the DOM do not execute the default behaviour I'm afraid. There is no way around this, as far as I know.\nAs a demonstration example, see this fiddle: http://jsfiddle.net/wU4Pe/\nTo expand: jwerty.fire() is working exactly as intended. But the DOM does not support the behaviour you are trying to do.\n. Numberpad numbers are different to the numbers on the top row of the keyboard. They are a special set in jwerty, starting num-0 and going to num-9. If you want to look for both, you need to use the following jwerty notation: 0,num-0 or, for example, with combos: ctrl+0,ctrl+num-0\n. I wouldn't be able to tell you without more information about the code that you're using. Could you please provide more information. Browser? OS? Other libs?\n. @heta are you still seing this issue?\n. I'm closing this issue because there isn't enough information, and it's quite old. If you have some more information you can provide, then I'll re-open it\n. Numpad Dot does not exist. The keycode is 110 (for me check here to confirm it is for you) but it is not in Jwerty. If you want to make a pull request to add it in I'll happily accept it, otherwise I'll get it in sooner or later.\n. This is a lot of commits for a small change. If you'd like to re-do it I'd be more than happy to accept it, but I'm closing this one as its too messy.\n. There are lots of edge-cases to this that would require looking at. It would be a nice to have but not a priority, unless you want to submit a PR?\n. It lowercases codes to make selection of said codes easier. If you jwerty.key(\"shift+q\"... it should fire on those to keys pressed in combination, its a little ambiguious to use jwerty.key(\"Q\"... or jwerty.key(\"q\", as it can be prone to errors or typos (other typos could include jwerty.key(\"Shift+q\"...\nAlso there is a case where if the caps-lock is on, what key does it fire? Q or q?\n. Dupe of #19 \n. I'm closing this issue because there isn't enough information, and it's quite old. If you have some more information you can provide, then I'll re-open it.\n. This issue is pretty old, but I'm pretty sure you can do this in the existing version of Jwerty like so:\n``` javascript\nvar shortcut;\n$(body).on('keyup', function (event) {\n    if (jwerty.is(shortcut, event)) {\n        // do stuff\n    }\n});\n// When user is finished, he saves the shortcut\n$('#save-shortcut-button').on('click', function () {\n    shortcut = $('#shortcut-input').val();\n});\n```\nIf this doesn't work for you, could you please raise a new issue with a more detailed explanation as to why my above solution wont work, and what you feel you need from jwerty.\n. I think this can be done a bit more cleanly. So while I like the idea of event delegation, I'm not going to accept this particular implementation.\n. You cannot use jwerty to fire shortcut commands to the browser. It does not work like this. jwerty.fire can only trigger functions that have been registered with jwerty.key or jwerty.event. You should look at the fullscreen api instead\n. What require library are you using? RequireJS?\n. I dont really understand the use case for this. Can you explain precisely how you are intending to use DOM based keyboard events inside NodeJS?\n. Aside from my urge to tell you that that is probably a bad idea, and you should consider using PhantomJS or a real browser via something like Selenium instead, I have to close this pull request because your code actually breaks in a real browser environment, as Uncaught ReferenceError: global is not defined. \nYou would instead need a ternary like typeof global === 'undefined' ? this : global\n. Fancy making a pull request? \n. MIT See the code\n. Yeah... I probably should add a LICENSE file... Fancy PRing that also :wink:?\n. Excellent. I've registered it via bower too, so hopefully it will appear shortly.\n. Nicely done @aggressivex. Much appreciated.\n. @jayroh You're very close with the code you have, but the jwerty.key('<key>', false) shortcut is for preventing the default behaviour of the action, and does not stopPropagation, which is what you want. (See https://github.com/keithamus/jwerty/blob/master/jwerty.js#L384)\nSo instead of having jwerty.key('j', false, '#q');, try jwerty.key('j', function (e) { e.stopPropagation() }, '#q');. \nAs an aside, you should probably also return false in focus_input to prevent the \"i\" character from appearing in the input when it is focussed.\nSee this jsfiddle for the full, working code\n. Sure, you want to use event delegation (with jQuery) to do such a thing. The delegate element will need to be something that doesn't change, e.g document.body or document.getElementById('container');. Read more about jQuery's event delegation\n. You need to simulate the click of the link instead of changing window.location, so your code should be\njavascript\njwerty.key('f2', function () {\n    $('#SaleLink').click();\n});\n. I absolutely love the idea. I can't help but feel the code could be improved though. I'm going to look at this in more detail a bit later on.\n. The main problem is that the current DOM Keyboard spec is much less than perfect. Different keyboard buttons on different keyboards can sometimes have the same keycode as others.\nThese kinds of bugs are likely to never be fixed until all browsers get on board with DOM Level 4 keyboard spec.\n. Sorry, it's not :(\n. Jwerty doesn't need this functionality because it's already baked into the event object. Simply do event.shiftKey === true\n. Fancy making a PR for it?\n. While I like the idea of the PR, and this definitely needs to be solved, I'm not sure I like the way of doing it... explicitly requiring jQuery actually prevents a key feature of jwerty. Perhaps a way to fix this is to add a jwerty method to override jwerty's $ reference with your own chosing? Or just expose jwerty.$ et al to be overridden.\nFeel free to change this PR, or close it and make a new one. I'll definitely merge the right solution (but this isn't it).\n. I'd say nail the two mentioned issues, and I'll be happy to merge\n. Great work. Sorry I took so damn long to merge this :+1: \n. Odd fix, but thanks for finding it. Fancy turning this into a pull request (without the comment also)? That way you'll get proper credit for it and will be featured on our contributors page!\n. Thanks @kossnocorp!\n. :+1: \n. Thanks so much for the PR @makoConstruct! Looking good, but two things are missing for me to merge this: tests and documentation.\nYou've done a good job at commenting the code, but I'd like you to also edit the README.md and just mention this feature.\nAlso, if you could add some tests that'd be amazing. Have a look at the test.js file to familiarise yourself with the tests.\nIf you need any help with these, or would rather not do them - just let me know.\n. :+1: You're now in the jwerty hall of fame :wink: \n. hey @okonet thanks for the issue. Special keys on keyboards are difficult, because they don't map to all locales. To make matters worse, some browsers support different keycodes for the - (109 which we support) on your number row vs the - on the numpad (173 which we don't support), while some browsers report it as 189. So it can be wildly different depending on the browser, which sucks.\nIf you want to make a PR to add all 3 numbers to be - I'll merge it.\n. If jwerty were to keep a mapping of bound keys, that could cause memory leaks which would be trivial to surface, take for example the following:\njs\njwerty.key('\u2193', function () {...}, '#myList');\n// later on on the code;\n$('#myList').remove();\nBy removing the element, but not clearing up the internal jwerty key binding, jwerty now has a reference to a key binding on a dom element that doesnt exist, but doesn't know about it - therefore a memory leak. The only way around this, to my knowledge, is if we added DOM mutation handlers to every element we bind to - but this is not compatible with lots of browsers and is way too heavyweight.\nCurrently where jwerty returns an unbind function makes good sense, because there are no references stored in jwerty, it just passes the unbind function - which you have to manage yourself via your own classes, where you have much better knowledge of the application logic than jwerty does.\n. Thanks @estaylorco. Sorry that jwerty can't help you here. If anyone can come up with an idea that wont cause memory leaks, I'll be all ears :smile:.\n. Hey @brettpostin thanks for the PR! Could you explain what this solves, with code examples please?\n. You can use the literal word plus, as in: ctrl+shift+plus - but there is specific code to make ctrl+shift++ work also, so both forms should work.\n. Great idea! How would you like to send a PR to correct the docs?\n. @thfontaine master has some fixes in it which have yet to be published. It is on my todo list to publish this soon. In the meantime you can use the master version by doing the following in your package.json:\njs\n\"dependencies\": {\n  \"jwerty\": \"keithamus/jwerty#master\",\n}\n. Awesome work @brutalcrozt! Thanks for the contribution!. -1 for adding jQuery as a dep, as jwerty doesn't actually need it. \n. You could probably move the global.* into the tryRequire function - e.g line 33 could be } else { return global[mod] }\n. I know its picky, but this tryRequire method is defined after it has been used. While this isn't a problem with JS, it is with readability. Could you please move this up above to line 19?\n. Not sure I like the term sever. I think unbind would be best... thoughts?\n. ",
    "olecrivain": "Thx you for your fast and very detailed answer. I ended up with 'shift+[0-9]/[0-9]/[num-0-num-9]'.\n. ",
    "mikedfunk": "Thanks, I tried this but when it called input.focus() it inserted a forward slash into the input box. I just left that part with event.keyup in jquery.\n. Also I think a good way to deal with this would be to escape the character with a backslash, such as '\\/' comes out to /.\n. Thanks for this! I got it working this way, works great. Now typing in the location bar doesn't interfere with keyboard events.\n. ",
    "sambenne": "I had some issues like this with the ' and # keys not working. I then realised that it was but only if I had an american keyboard as with some symbols the ID is different.\n. ",
    "amir20": "I have put  e.preventDefault() in the callback and it seems to not put / in textbox\n. Never mind. I saw issue #3 is the same thing. \n. ",
    "flesch": "@keithamus - I created a fork and started working on adding IE support. It's not complete (only 2 of the 18 tests pass), so I haven't submitted a pull request, but thought you might be interested to see what I've done so far.\nhttps://github.com/flesch/jwerty/commit/461acfc56dd0f4648cb250bf3f38a87eab88beac\n. It makes sense not to reinvent what jQuery's cracked, though I was hoping not to have it as a dependency (using Ender in a project now). So, +1...?\nI have to admit I only tested a global hotkey (overriding CTRL+S) and one bound to a textarea, so where I'm checking p in event in the jwerty.is() loop, that only prevents IE from throwing an error.\nI look forward to seeing what you have!\n. ",
    "ghost": "I apologize for the late answer. I am using jquery binding bind/delegate/live depending on the requirement :\n``` javascript\njQuery(document)\n         .unbind('.debugModal')\n         .bind('keydown.debugModal.openDebug', jwerty.event(debugKey, loadDebugDetail));\njQuery('.detail-meta').delegate('.inplace input:text', 'keydown', jwerty.event('enter', function() {\n...\n}))\n```\n. ",
    "thiagodosanjos": "Hello, first I'd like to say thanks for the plugin you created. I swear that I searched a lot something like these and I didn't find. I'm a webdesigner trying to be a little more complex and using this plugin to improve the acessibilty of my websites. But how some people noticed, the plugin doesn't work on internet explorer. Do you have a fix for it already or the project is closed?\nThanks Thiago dos Anjos from Brazil \n. Ok thanks for the reply...You're very polite. \n. ",
    "creage": "It's bad that jwerty is not available for IE, because I was really hoping include it in our project.\nAccording to unit tests, when I run them in IE9 having IE9-th rendering applied - all of tests pass except of one. But when I  switch to IE8 mode - tests completely fail.\nWhen should we expect new commits regarding IE? (I know I shouldn't ask that, but once I'm here...:)\n. Any progress in IE support?\n. Currently I see that jwerty is explicitly lowercases all of codes. What if we just leave all of codes as users bind them?\n. OK. For now I'm dealing like this\nif (key == key.toUpperCase()) {\nkey = key + \"/shift+\" + key;\n}\n. Well jQuery events don't. They are wrapped into jQuery Event, having originalEvent property, which actually does have this props. But it is not convinient to write a (e.originalEvent || e).shiftKey === true everytime.\n. ",
    "EisenbergEffect": "What is the status of IE key binding? If it's not fixed, I'd be willing to put some money behind getting it fixed immediately. I only need IE9+ support.\n. ",
    "marcbourlon": "HI Keith,\nThanks for the answer. While posting the issue, I thought that maybe I was not doing things optimally.\nI'm doing a webapp, in which I use key combos (and for this, jwerty just rocks), but also single keypresses. I don't feel comfortable at adding my own keydown events, so I had to do it to detect single dead keys, as posted in another issue (how, with jwerty, would you use a dead key to enable a specific mode of your app? Like: normal mouse action is drawing, but if I press Ctrl, same mouse action will result in moving elements? I need a keydown and a keyup callbacks, and as of now, had to do with my own (crappy) code. Though this is another issue, it also comes to the fact I need to \"complete\" Jwerty, which is a bit less elegant for me.\nAs for the current issue, here's my need: I use the same callback for two keys (v and h namely), and use the key as an object property, to make it simple.\nI have something like:\nJwerty.key('v/h', myCallback);\nfunction myCallback(e) {\n var key=Key.getKey(e);\nMyObject[key] = \"foobar\";\n}\n. ",
    "scream": "delete keycode is same with 'insert'\n. ",
    "brihogan": "So, different keyboards will have a different keycode for the # symbol? That's unfortunate. Too bad there isn't an API that would feed us the actual symbol pressed instead of the keycode of the button pressed - but maybe that'd have limitations, too.\n. I hope I did this right. This is my first pull request.\n. Thanks!\nI closed the other issue (the original message). But, for future reference, do you know if there's a way to \"combine\" a pull request and an issue together so that they don't have to be closed separately? Or at least, can they be linked somehow?\n. Brilliant. Thanks!\n. ",
    "plasmaboyer": "I found that i can do it if i use the jQuery notation (bind/unbind with jwerty.event()). \nBut how can i do if i do not have jQuery ?\n. thanks for this information.\n. ",
    "heta": "using Firefox 12. Windows 2007 OS. the code is as follows inside the script tag...\n``` javascript\n        // functions for menu short-cuts\n        function CloseMenu() {\n            menu = $(\"#menu\").data(\"tMenu\");\n            menu.close($($(\"#menu\").data(\"tMenu\").element).find('span.t-link', '> li').parent());\n        }\n    jwerty.key('alt+[a-z],[a-z]', function (e2) {\n        //var menu = $(\"#menu\").data(\"tMenu\");\n        var a = $('ul#menu > li[accesskey]', 'body')\n            .filter(function (t) {\n                return $(this).data(\"opened\") === 1;\n            })\n            .find('li')\n            .filter(function (i) {\n                return jwerty.is($(this).attr('accesskey'), e2.originalEvent, 1);\n            });\n\n\n\n        var lnk = a.find('> a.t-link')[0];\n        window.location = lnk.pathname; //lnk.attr('href');\n        return false;\n    }, false);\n\n\n    jwerty.key('alt+[a-z]', function (e) {\n\n        CloseMenu();\n        var menu = $(\"#menu\").data(\"tMenu\");\n        var a = $('ul#menu > li[accesskey]', 'body').filter(function (i) {\n            if ($(this).attr('accesskey').split(',').length === 1) {\n                return jwerty.is($(this).attr('accesskey'), e.originalEvent, 0);\n            }\n            return false;\n        });\n        $(a).data(\"opened\", 1);\n        //alert(a.attr('accesskey'));\n        menu.open($(a));\n        return false;\n    }, false);\n\n    jwerty.key('Esc', function (e) {\n        CloseMenu();\n        return false;\n    }, false);\n\n```\n....also have included jwerty.js in head tag. using jquery-1.7.1.min.js\n. ",
    "sahilb": "Too many commits, just getting started with git.\n. ",
    "DeTeam": "+1\n. ",
    "kossnocorp": "Nope, it just pure Node.js.\n. How I use it: https://github.com/kossnocorp/backbone.jwerty/blob/master/spec/backbone.jwerty_spec.coffee#L10\n. @keithamus I'm using Node.js to run autotests in console. I'm emulate DOM via jsdom library so I don't have to manually run tests in browser.\n. ",
    "luishdez": "Sure! but first better to ask\nBTW What's the license of this library ?\n. My bad , I was looking for a LICENSE file. sorry :) \nPS: working on the pull \n. There you go\u2026\nBower -> https://github.com/keithamus/jwerty/pull/34\nLICENSE -> https://github.com/keithamus/jwerty/pull/35\n. There you are \n```\n bower search jwerty\nSearch results:\n\njwerty git://github.com/keithamus/jwerty.git\n```\n. \n",
    "klash75": "hello,\n can we use this plugin for ajax enabled web apps. \nI mean using ajax, different page gets loaded on same page. so can we use this plugin to add key event to trigger event on different loaded pages.\nThanks in advance\n. ",
    "webmastervinay": "thanks a lot keithamus!!!\n. ",
    "nicholasrq": "Ok, thanks. I'm glad to see that you're interested in my idea. I'll wait for your comments.\n. ",
    "moccalotto": "I get problems with shift+2 on OSX: \nTo duplicate: \njwerty.key(\"shift+2\", function() { alert(\"test\") });\n. ",
    "LoicMahieu": "You're completely right about jQuery dependency. I updated my PR to remove them. Try/Catch around require() is a little hacky but I have not find any better solution. (Used in node-redis)\n. I updated my PR\n. ",
    "osudude": "Apparently, this issue only happens when using JWERTY with Jquery 1.9 and above in IE8.\n. ",
    "Gedrovits": "To be honest you should step back and think about that. \nIs this really a bug? Most of the shortcuts consist of modifier keys and one alphanumeric character.\nI think it's done like that for a reason.\n. ",
    "makoConstruct": ":+1: \n. It doesn't sound like it's necessary in your use case, you could just change what your onUpKey and onDownKey callbacks do according to an external variable, no?\nAnyway, it should be implemented. If the _context objects you're referring to are as the return values of jwerty.event, it'd be a one line patch.\nIf, however, you want the context objects to be the callbacks, or the context the callbacks are to be called in, or a pair of both of them, we would need a way of storing a mapping from (keycode, _context) to the binding object. There are a few ways of accomplishing this.\n- We could use es6 maps but this would not work on ie10-, so no we couldn't really use es6 maps.\n- Or we could store the binding object _in _context as .jwerty_binding or something. Not pretty, especially considering we want to maintain a mapping from (callback, context), but instead we have to pick just one and find a way to work with that.\n. If and only if you mean\n```\n{\n...\n}\n```\nThough we'd probably store the keys as concatenations of the keycode and the selector rather than an array.\n'Fraid that may not be be enough of-popular-interest to land a place on @keithamus's 1.5kb arc?\n. ",
    "okonet": "I've tested with 189 on Mac OS X 10.10 in Safari 8.0.2 (10600.2.5), Chrome 39.0.2171.95 (64-bit) and Opera 24.0.1558.64. I'm submitting a PR to merge.\n. Could you release a new npm version when it's merged please?\n. ",
    "ecgeiser": "Will this be merged? I'm running into the issue this resolves.\n. ",
    "estaylorco": "Since I'm actually mapping about a dozen keys, I don't feel that flags are elegant.  They just don't fit the general case.\nThe context in this case is the keyboard context (DOM selector).  I simply imagined that we would have a compound dictionary key made up of the key combination and the keyboard context.  For example, we wouldn't want to accidentally unbind _all up keys, perhaps just the up key in a particular keyboard context.\nThinking out loud, I'm seeing a dictionary that might look like this:\n[ { { key: keyCombo: 'up', selector: '#someDiv'}, subscription: h } }, \n  {...}, \n  {...}\n];\nDoes that make sense?\n. O.K., then.  I withdraw my request.  I will simply build management around the subscriptions.\nThank you.\n. ",
    "2x2xplz": "I created a pull request to implement this: #68 \n. ",
    "wadestuart": "+1 for this type of functionality -- I also have had to fork out to create something similar but some core support for exposing the captures that exercised the event just makes sense given the regex functionality. \nNot sure I think the stringified result in this patch is the best option but given a choice between this or nothing this is better. =)\n. ",
    "btopro": "cool. Might want to add that to the readme / docs though as it's not mentioned anywhere I can find http://keithamus.github.io/jwerty/\n. PR open\n. ",
    "thfontaine": "Ok, thank you for your answer !\n. ",
    "sreejith-ms": "It worked as expected.\nhttps://jsfiddle.net/sreejithms/4zdfzag9/. ",
    "evpozdniakov": "I see that it works as expected in jsfiddle, but at the same time...\n\nI'll try to investigate what is wrong on my side.. "
}