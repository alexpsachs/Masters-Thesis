{
    "codeguy": "Just merged in your changes. After looking through the new code, I figure Slim should now work with PHP 4 >= 4.3, but I'm not entirely sure on this until someone can confirm. So for now I'm leaving the official version requirement as PHP >= 5.0. Thanks for your help on this!\n. Yeah I don't know why I was thinking PHP 4.x would work. But I've since updated the class headers to clarify that PHP 5 is required. My next big step is probably going to be setting up PHPUnit and writing tests to improve test coverage.\n. @Kolanos Thus far Slim works great with 5.3, making good use of anonymous functions. So if you are a 5.3 user, Slim will work great. However, if you are using < 5.3, Slim will still work but with a slightly less elegant syntax. So currently Slim will work either way. I think this is a good thing especially for those on shared hosts that are hesitant (or unable) to upgrade to 5.3 just yet. The only big thing Slim doesn't get from 5.3 is namespaces... but I'm not really convinced Slim needs them since Slim is only really intended for smaller web services. Down the road I may introduce a 5.3-only branch. But for now my goal is to let as many people as possible enjoy Slim. Thanks for your input! Let me know if you have any other questions.\n. Hi. Thanks a lot for your suggested changes. I agree 100% about the simplified Slim::init() function. An oversight on my part. As for the multiple patterns for one callable... I see what you mean but I want to think on it more tonight before I pull in the changes. Will comment here again once I pull. Thanks!\n. So here's what I'm thinking... Let's say you have two routes '/one' and '/two/:foo' where the second route expects a url param named \"foo\" as the second segment. Both should map to a single callable. Currently, URL params are passed into the callback function as parameters, in order of appearance. I would like to keep it this way. I also don't like the syntax of passing an array as the first parameter. It may be DRY but it just seems dirty from a syntax point of view. One of my goals with Slim is to keep the syntax clean and simple. What are your thoughts on this?\nSlim::get('/one', '/two/:foo', function ($foo = NULL) {\n    //Do something here\n});\nThis way both routes map to the same callable, URL params are still available as callback parameters, and the syntax is cleaner. To accomplish this, you would only need to pop off the last parameter of Slim::get(), assuming it is the callable object. All previous parameters to Slim::get() are assumed to be route patterns. All of your other changes are great.\nI also like your changes to Router, specifically having both Router::params and Router::param($key, $default)... I assume you intend these to be used like:\nSlim::get('/one', '/two/:foo', function ($foo = NULL) {\n    $fooFromFunction = $foo;\n    $fooFromRouter = Slim::router()->param('foo', 'defaultFoo');\n});\nCorrect? Let me know what you think! Thanks again for your help.\n. All nice ideas. Heading into work, but I'll think about this today and post my thoughts later tonight.\n. Hey guys,\nAfter thinking a while on this... first, I completely agree about adding in named routes. This would make templating much easier; even if the routes themselves change, the URLs in the templates will remain consistent when using a helper method such as \"url_for()\" or something similar as you have already demonstrated.\nHowever, I'm not entirely satisifed yet with the suggested implementations of having multiple routes tied to a single callback, all within a single Slim::get() call. It's getting too complicated, which is something I want to avoid at all costs. I don't intend for Slim to be the most advanced framework, but instead the most approachable and the easiest to use for 80% of use-cases. I'm ok if the extra 20% of the time you have to write a little extra code.\nI would rather the burden of multiple routes with a single callback be placed on defining the multiple routes rather than condensing everything into a single Slim::get() call. It is very easy to define a separate function (regular or anonymous) which can be passed into each separate route definition. This would be DRY with regards to the single definition of the callback function. But each route would need to be defined separately, like this:\n$callback = function ($name) {\n    //Do something here\n};\nSlim::get('/hello/:name', $callback);\nSlim::get('/hi/:name', $callback);\nOf course, there is some duplication of effort here, but I think you retain readability and ease of use at the expense of a little extra effort. I of course will continue to think on this and if a better solution presents itself in the future I'll be sure to re-think this.\nNow, for named routes. My near-future plans were to add an additional $opts parameter to Slim::get, Slim::post, Slim::put, and Slim::delete. This $opts paramater would be an array that, at the very least, could be used to define conditions for route parameters, like this:\nSlim::get('/book/:id', $callback, array('name' => '\\d+'));\nThis $opts parameter could of course be converted like this for further extensibility:\nSlim::get('/book/:id', $callback, array(\n    'conditions' => array('name' => '\\d+')\n);\nSo this leaves us with several options. We could always add 'name' as a key in the $opts array, like this:\nSlim::get('/book/:id', $callback, array(\n    'name' => 'show_book',\n    'conditions' => array('name' => '\\d+')\n);\nBut this seems overly verbose if you only need to specify a name. Or we could generate a new first-class static function in Slim specifically for named routes, like this:\nSlim::named('GET', 'show_book', '/book/:id', $callback);\nThe only additional requirement for this approach is the need to specify the HTTP request type as the first parameter and the name as the second parameter. What do you think?\n. Great idea! I really like this idea:\nSlim::get('book/:id', $callback)\n    ->name('book')\n    ->conditions(array('id' => '\\d+'));\nAnd it is more readable and still extendable. We could simply return the Route object from the Slim::get() method, and expose the new methods on the Route object. Anyone have any objections?\n. I'll mockup some code tonight on a separate branch and push it up when ready.\n. Hi guys. Just pushed a new branch called \"named-routes\". This is a major refactoring of the Router and Route code. Small changes were necessary in Slim so the route is returned from Slim::get, Slim::post, Slim::put, and Slim::delete, but nothing else. These changes also let me decouple Request from Route. I've added Route::name() and Route::conditions() as public instance methods. They work and are callable, but currently don't do anything just yet. My goals tomorrow evening are to get these two methods functional. Thanks!\n. I have pushed several commits which enable support for named routes and route regular expression conditions. See the bootstrap file for an example.\n. Thanks! I'm going to manually update the View class as mentioned at the top of this thread rather than pull in the remote branch with a bunch of other changes that are no longer needed. Also, this is my first open source project, so I'm not really knowledgable with open source etiquette. I want to make sure credit is given where credit is due. So feel free to toss in some of your own @author doc comments whenever some of your own code is pulled in. I'm going to go ahead and close out this thread.\n. @j4mie Just missed your comment when closing the thread. My very next step is to setup an account with some sort of online ticket system so we can organize what is getting done and by whom. Do you have any suggestions for online (hopefully free) ticketing software? Once that is setup, I'll put together a roadmap. And yes, test coverage is probably my next big task since the routing engine is fairly stable at this point. I've got the foundation in place with PHPUnit in the tests/ directory.\n. ha. Forest for the trees. Also my first time using GitHub for a big project, obviously :) Sounds good. I'll put together a road map tonight (you guys can do the same with features you'd like to see in Slim) and we can compare notes when ready. Thanks!\n. I have opened a new issue at http://github.com/codeguy/Slim/issues/issue/5 where we can start discussing Slim's RoadMap.\n. Thanks @cognitive. Was going to get to that later today but went ahead and merged in your changes. Thanks!\n. @Cognitive Thanks!\n1. Can you explain this in more detail? If you want to serve static files, you are already able to do this because Apache will serve static files if they exist, else it will forward the request to the Slim application. I'm sure it would be helpful to delegate static file serving to Slim in some instances though. Could you provide several examples?\n2. I'm not sure if \"Middleware\" was the best word for this, nor am I sure how I want to implement it just yet. Currently, Slim allows you to define multiple before and after callbacks that are run in succession, before and after the Slim app runs. Due to the static nature of Slim, I'm not sure we even need a mechanism to register \"middleware\" when all you have to do is include your custom code at the top of your bootstrap file and call your code where necessary. What do you think?\n3. I like this. But we need to be careful not to mix responsibilities between the controller/route and the view. I can parse the requested format based upon the resource URI extension (ie. set \"Content-Type: text/json\" header for a .json extension). However, it is still the view's responsibility to serve the actual JSON... a responsibility that currently falls on the end developer. We'll need to figure out how to implement this right.\n4. This should be fairly simple... if Slim::pass() throws an exception, the exception could be caught in the Router::dispatch() loop that then calls \"continue;\" to continue looking for the second matching Route.\nNice! Let me know what you think about 1, 2, and 3.\n. @Cognitive\nRegarding number 3, I actually don't think this would be that big of a deal if we built this functionality into the default View.\n. 1. Will think some more on this and look at how/why Sinatra does this. I'm still not entirely sure it's as necessary with Slim, but it could be useful nonetheless.\n2. I agree, a standard plugin interface would be good to have. I'll probably spawn this off into another discussion when ready.\n3. Cool. I would really like to have this feature myself. Sounds good.\nAnd I'll work on copying over the documentation to the Wiki sometime soon.\n. @j4mie I've found true content negotiation that depends on the Accepts headers very if not completely unreliable because many web browsers (including Safari), do not handle it correctly. But as you said, we could easily shift a new priority preference onto the front of the Accepts header based on the extension. That should work fine (and good idea!)\n. @j4mie If you were to write a non-browser third-party HTTP client that DID send accurate Accepts headers... I could add a setting to toggle on or off Accepts header content negotiation. But I would still say that a resource URI with an extension would still take priority if it is specified.\n. @j4mie For reference, Kris Jordan (a colleague of mine) published this in 2009. Things may have changed since then, but its a good read. http://www.gethifi.com/blog/browser-rest-http-accept-headers\n. @j4mie I completely agree with you re: non-browser clients. Those are certainly more likely to adhere to the HTTP spec. My only concern is:\nWe have a cURL client who requests /foo/bar and sends an Accept header that prioritizes XML.\nWe also have a web browser who requests /foo/bar and expects HTML but requests XML due to a weird Accept header.\nIn some cases this may work if the browser sends an appropriate Accept header; in other cases (such as Safari), the browser request would still be served XML because that is what the Accept header will prioritize. If a URI extension is specified (ie. /foo/bar.html), then Slim will ignore the Accept header and serve HTML, but then you must always specify the .html extension for web page requests for html. Adding the .html extension is not really clean, especially for those that want cruft-free URLs.\nSo you see the predicament? Until browser makers can fix the issues with the Accept header, it really throws a wrench into supporting true content negotiation.\nSo I believe the plan going forward should be to, at first, support fake content negotiation based on the request resource's extension (ie. \".xml\" for XML, \".html\" for HTML, \".json\" for JSON, etc). Later on, I can add a Slim setting to toggle true content negotiation based on the Accept header. For now, it's safer to use the resource extension to explicitly request a format, else default to HTML.\n. Closing out.\n. Agreed to both. I'll push these fixes up tomorrow. If you have code already, send a pull request and I'll pull them in.\n. Hi j4mie. In my mind Slim::error() is a helper method to set the HTTP status and return the response. However, to return a non-success Response, it seems more elegant and flexible based on your suggestion (if I am understanding correctly) , to throw an Exception whose code is equivalent to the desired Response status code. Such an exception would be caught by a try/catch block in Slim::run as you said. This will work for purposefully thrown Exceptions (ie. a 404 or 302), and for inadvertent Exceptions (ie. 500) should something break in the app's code. Is this what you mean? I like this a lot but want to make sure I full understand what you intend before implementing this. Let me know if you think of anything we've missed.\n. Closing this out. Post any further comments to the Errors and Exception Handling issue.\n. Thanks! I'll pull in these changes during lunch.\n. Just pulled in the changes.\n. Good question. I would say validate this in Response::status since this error would then be caught app-wide. Open to other suggestions though. This is on my to-do list... don't think an Issue has been created for it just yet.\n. This is done. Will close out when I push the new code.\n. This is done. I will close this out when I push the new code.\n. This is complete. Slim::error is now deprecated and has been replaced with Slim::raise( $message, $status = 500 ); A try/catch block now surrounds Slim::run and catches SlimExceptions (thrown with Slim::raise), or other non-fatal Exceptions which trigger a 500 response.\n. Good catch. Looks like I overlooked these last night. I can setup a global exception and error handler which both create and send a stand-alone Response object independent of the actual Slim app.\n. Closing this out. After further thought, I don't see it appropriate to filter input data. Output data is important to filter. This is already delegated to the selected View class (ie. Smarty and Twig have excellent output escaping).\n. It's on my to-do list, but I've been swamped at the day job lately. If you want to take a stab at it, you are more than welcome. Just let me know if you decide to take it on. You can see TwigView and MustacheView that have been coded by other contributors.\n. Thanks! I will be out of the country until Monday, but I will pull in your code when I get back. Ultimately, my goal is not to include the actual third-party library code with Slim, but to simply provide example custom View class files for each third party library. The end user could then download the third party library and then integrate it using the example custom View files provided in the Slim download.\nBut I'll be sure to pull your code and run through your tests and add your HaangaView to the Slim repo. Thanks!\n. I am not familiar with Flask. Do you have a link?\n. Flask looks cool. Seems very similar to Sinatra, but in Python. I think its intentions are the same as Slim, and it has a few features that I intend to add to Slim soon, such as Logging, Sessions, Debug mode, etc.\n. Thanks! Just pulled in your changes.\n. I would agree to just stick with tabs for now. Go ahead and take care of this if you can. I'll fix the notFound handler issue.\n. This is fixed.\n. Thanks! Just pulled your changes in. I'll fix the 404 issue later today after work. My next goal is to write tests for Request and Response. I'm also thinking of changing Slim::raise() to Slim::halt()... semantically, I think that makes more sense. And that should wrap up development for 1.0.\n. Absolutely. The preferred style is:\n1. Tabbed indentation\n2. Each method should be well documented using PHPDoc comments\n3. Submitted changes should include 100% PHPUnit test coverage (or as close as is reasonably possible)\nI think it would be beneficial to go into more details regarding PHP coding style. A great example is the Zend Framework's coding guidelines at http://framework.zend.com/wiki/display/ZFDEV/PHP+Coding+Standard+(draft)#PHPCodingStandard%28draft%29-Indentation. I certainly won't use all of those guidelines, nor do I agree with all of them, but that would be a great resource while writing these up. I'll start this on the Wiki tonight.\n. Done. http://github.com/codeguy/Slim/wiki/Contributor's-Guide\n. Done\n. Thanks Paul. I'll push up a fix as soon as I can.\n. Hi Paul. I've just pushed new code that should resolve this issue. I assume you are still using either Apache or nginx on Windows, correct? I don't think Slim will work correctly yet on IIS since IIS does not provide a $_SERVER[DOCUMENT_ROOT] variable. Closing this issue, but let me know if you still have issues.\n. Should I leave Slim as is so that it does alert you of this issue? Or do you think I should implement something like the following in Slim.php which will ensure a Timezone is set, and if not, it will default to 'UTC'?\ndate_default_timezone_set(date_default_timezone_get());\nIf you have already set your timezone, this will effectively do nothing. If your timezone is not set, this would suppress the error you received and use UTC. Let me know what you think.\n. I agree. But I'll be sure to make a note of this default in the Docs. Re-opening and marking as a bug. Thanks!\n. I've just pushed some new code that should fix this issue (see slim/Slim.php just before the Slim class declaration). If your system or ini file does not specify a timezone or that timezone is invalid, then Slim will use \"UTC\" by default. I'm closing this out for now. If you still have issues. Please leave a comment on this issue.\n. Right now this is a \"20%\" thing in my opinion. But I can see where it would be helpful. For now, I am going to close this issue and add this to the Road Map's longer term goals. Please keep posting feedback as you run into issues. It's greatly appreciated.\nFor now, you can easily define a single function which accepts two arguments with default values. You can then define multiple routes using the same callback function.\n$callback = function($nick = 'foo', $format = 'xml') {\n    //Something\n};\nRoute::get('/nickinfo/:nick/:format', $callback);\nRoute::get('/nickinfo/:nick', $callback);\nRoute::get('/nickinfo', $callback);\nNot the most DRY code, I know. But this will work for now.\n. Ok, so under the hood your route pattern (/nickinfo in your example) is ultimately compiled to a regular expression. So the current (undocumented) solution is to do the following (identical to the Sinatra framework's solution):\nSlim::get('/foo/?', $callback);\nThe \"?\" makes the trailing slash optional and will thus call that callback with or without a trailing slash. Does this help you? If so I'll be sure to add this to the documentation.\n. \"Yep, that works for the moment. Would be good to have that written to disk - or in this case to Git.\"\nDo you mean added to the documentation? Or did you imply the routes' regular expressions should be cached to disk?\nI think specificity is good when deciding whether or not to support trailing slashes, and that having a route with an optional trailing slash would be an edge case when making web apps that expose a specific API. In most cases you won't want a trailing slash (especially with content negotiation which will be added in version 1.1). So I'm perfectly ok with requiring a \"?\" to make the trailing slash optional (assuming it is well documented, of course). But I'm definitely willing to hear what you and others think. Slim's not at 1.0 yet, so I want to make sure this is done as best as possible before then.\n. This is on my radar. Going to wrap up a few other tasks then get to this. If someone else wants to jump in and take care of this, feel free.\n. @hexa2k9 Good catch. This is next on my to-do list.\n. Here are my thoughts on a permanent solution. This example will use this route:\nSlim::get('/foo/bar/', function () {\n    echo 'Foo';\n});\nIn this example, the route expects a trailing slash. When this route is requested, if the request URL has a trailing slash, all is well. If the request URL does not have a trailing slash, a 301 redirect response will be sent. How will this work?\nIn Route::matches(), we will convert the route pattern to a regex (lines 104-105) as we currently do. IF AND ONLY IF the route pattern has a trailing slash, we will append '?' to the end of the regex pattern so that the current request URL will match the route even if the request URL does not have a trailing slash. If the request URL matches the route's regex pattern, and if the request URL does NOT have a trailing slash, a SlimRedirectException will be thrown. This exception will be caught by the Slim::run() loop, and when caught, a 301 redirect response will be sent redirecting the client to the same URL but with a trailing slash.\nIf a route is defined without a trailing slash, and the client requests that URL with a trailing slash, a 404 response will be sent. This functionality is already in place, so I don't see any issues for this scenario.\nMy question is, does this seem ok? It does successfully decouple the Route class from the Slim class. However, I'm not sure if relying on Exceptions in this way is the correct way to accomplish this. What are your thoughts?\n. Sounds great. I'll take care of this tonight.\n. This is done. Pull the latest code from master.\n. I've just pushed a commit to master which should resolve this issue. Pull the latest code and let me know if the issue is fixed. I was not calling preg_quote in slim/Request.php on line 204.\n. Closing this out. Re-open if you still have problems with this.\n. 1. Only Slim classes will be in the slim/ directory. I know I haven't made this too clear... I'm in the process of writing a Contributing to Slim guide which clarifies all of these details.\n2. Because this class will likely be written/created/used by the Slim user, I think compartmentalizing the TwigView settings within the TwigView class would be fine.... so class vars or class constants should work. Or you could always use Slim::config('foo','bar'). Not so good for decoupling, but I don't see this CustomView existing without the Slim class anyway. If you do embed the vars in the class itself, be sure to prominently feature these at the very top of the class definition so they are super easy to find.\n3. Yeah I wouldn't worry too much about it. If it becomes an issue, we can refactor later.\n4. No. Definitely not. I want to keep the repository as light-weight as possible with little to no dependencies. We can just include the CustomView class with Slim, or we can publish the CustomView class in the Wiki documentation with hyperlinks to the respective template library's website (my vote).\nNice work! Let me know your thoughts and we'll figure out the best way to move forward.\n. Sounds great. I'll take a look this weekend and pull your changes into a plugins/ or extras/ directory as you suggested. Been super busy this week with client work. Hoping to get back to Slim this weekend. Thanks for your help!\n. Just pulled in your custom TwigView class. I moved it out of the slim/ directory and into the views/ directory. I ran your unit tests locally and it worked great. However, because the Twig library will not be distributed with the Slim Framework, I removed the TwigView unit tests so that the core tests would pass without the Twig library.\nWhat do you think about making $twigDirectory and $twigOptions public static variables? This way one could set these in bootstrap.php rather than in the TwigView class definition. I'm fine with TwigView as it is, just throwing the idea out there. Thanks!\n. Do you think it should be static? This would limit the functionality of the custom View class per HTTP request, but it does keep things nice and simple. Or would you rather I tweak the Slim::init() method so that it can A) accept the name of the custom View class as it currently does, and B) also accept an object of type View. Option B would allow you to instantiate and customize the custom View before initializing the Slim app, and then pass the custom View object into the Slim::init() method. Instantiating the custom View with option B would then allow you to avoid static variables and potentially utilize various instances of the custom View throughout the Slim app. Either way is fine. One is simple, less flexible. The other a bit more complex but more flexible. Thoughts?\n. Awesome. Just pulled your changes into master.\n. Just pushed @jwpage's fix to the repo.\n. Thanks for the white space fixes. That's something I've been meaning to do, especially once I publish the Contributor's Guide this weekend. Good call regarding require vs. include in the View. I removed the nginx.conf file, though. Not sure why that would need to be included in the main repository. Thanks!\n. Pulled. Thanks for catching this.\n. Thanks for this. I'll be sure to add this code into the Request class and strip slashes on $_COOKIE and $_POST and $_GET data.\n. I've just pushed a fix for this.\n. Nice. I didn't realize GitHub would do that. Just pulled in your changes.\n. Fixed\n. Fixed.\n. Awesome! Thanks for this. Will pull in your changes tonight.\n. Pulled in\n. Slim::halt() should only be called form within a Slim route callback. If you are using this code outside of a route callback, you should use:\nmysql_connect(...) or trigger_error('Error message', Slim::ERROR);\n. Can you email me your entire script? It will help me diagnose this issue in context.\n. Re-opening. The default error handler incorrectly depends on Slim::halt, which itself throws an Exception. This is a bug and I'll fix this tonight.\n. I've just pushed updated code to the master repo. I've made some fairly major changes affecting how Slim responds to errors and exceptions. Many of Slim's internal functions (notFound(), error(), redirect(), etc.) now rely on Slim::halt to send appropriate responses. As a result, however, you should now be able to call Slim::error, Slim::notFound, trigger_error(), or Slim::halt inside OR outside of a route callback and Slim will function as expected. The Slim interface has not changed, so you won't need to update any of your code. Give this a go and let me know if it resolves your issues. Closing this out for now, but let me know if there is still a problem.\n. Pulled in.\n. Response coverage is as good as it is going to get. Will wrap up Request coverage this weekend.\n. Request and Response coverage is as good as possible. Some methods cannot be tested (to my knowledge) with PHPUnit because they use PUT request parameters or set respond headers. Marking this as complete for now.\n. This is almost done! Will push this to the public development branch in a few days. Really excited about this feature :) It's going to be great.\n. This feature is available in the \"develop\" branch. You can create routes with optional segments and default values like this:\nSlim::get('/archive/:year(/:month(/:day))', function ( $year, $month = 5, $day = 20 ) {\n    echo \"<p>The date is: $month/$day/$year</p>\";\n});\nI still need to write unit tests, but it should be usable as is.\n. This is done and tested. This feature will remain in the develop branch until the next point release, then it will be merged into master.\n. ## Content Negotiation (CN)\nCN is something I've wanted to add into Slim since the beginning. It is a very useful feature, especially for RESTful APIs. My goal is to allow Slim to produce JSON, XML, and other content using CN.\nWhat is content negotiation?\nAccording to Wikipedia, CN \"is a mechanism defined in the HTTP specification that makes it possible to serve different versions of a document (or more generally, a resource) at the same URI, so that user agents can specify which version fit their capabilities the best.\" For example, the client (a web browser) sends a request to a single URI; the request will include a \"Accepts:\" header that states what types of content it expects. Slim will parse the request, determine the acceptable content types, and, if possible, respond accordingly.\nReal world usage\nUnfortunately, the real world is not quite that perfect. Most requests will originate from a tradional desktop or mobile web browser (ie. Firefox, Safari, Internet Explorer). Each web browser implements a slightly different \"Accepts:\" header format (for Internet Explorer... a much different one) making it difficult to rely exclusively on the \"Accepts:\" header.\nTherefore, it is necessary to fake CN by appending format extensions to the request URI.\n/foo/bar.xml\n/foo/bar.json\nBecause we are technically using different URIs to request the same document (albeit in a different format), this isn't considered true CN. But it works.\nImportant Considerations\nWhat if a user wants to use true CN?\nI intend to enable/disable true CN with a Slim application setting. If true CN is enabled, the Slim framework will return content in a format determined by the \"Accepts:\" request header. If true CN is disabled, the Slim framework will return content in a format determined by the resource URI format extension (or a default format if no extension provided).\nWhat happens if a route does not support the requested format?\nThe Slim framework will return a 406 Not Acceptable response whose body contains a list of URIs to acceptable and available formats (per the HTTP spec).\nHow does a route declare its supported formats?\nThis is up for debate. A route should be able to declare what formats it supports. So something like this:\nSlim::get('/foo/bar', $callback)->respondsTo('html, xml, json');\nThis leads to another issue. We will need to build and maintain a mimetype registry. In the example above, \"html\" will be extracted and converted to \"text/html\". If the request indicates it accepts XML, and if the route responds to XML, an XML response will be returned. If the request does not declare a format extension (assuming true CN is disabled), then the route will respond with HTML, as it was declared first (followed by XML then JSON).\nHow are format-specific templates selected?\nTemplate selection is delegated to the View. In most cases, I imagine a custom View will be used. So I will need to tweak the View::render method to something like this:\n```\nclass CustomView extends View {\npublic function render( $template, $format ) {\n    //$template = the template file name\n    //$format = the desired format\n}\n\n}\n```\nThe custom View class may then select the appropriate template file using whatever naming convention.\nHow is the \"Content-Type:\" header set based on the format?\nThis will occure in the Router::dispatch or Slim::run loop. I'm thinking in Slim::run, after the output is captured in the output buffer, and before the response is sent.\nError Responses\nWhat happens if there is an error (ie. 5xx)? Currently, Slim responds with HTML. However, we may need to add in support for JSON and XML, too. How can we abstract this? How do we make this extensible to developer-defined content types?\nThoughts?\nThese are my initial thoughts. Post yours here. After version 1.0 is wrapped up (refer to Road Map on the Wiki), I'll break this out into appropriate Issues and get started on it.\n. This feature is on hold for the time being (still a part of 1.1). I want to take some time to further research this on my own before moving forward with implementation.\n. Closing this out. There's some great conversation here and will consider everything above when I begin working on the conneg implementation soon.\n. Sounds good, and I agree completely. Go ahead and make that one small change and I'll pull in your work. Thanks!\n. Nice work. I'll pull in your changes as soon as I get home from work tonight.\n. Just pulled in. Thanks!\n. Done. Use Route::setDefaultConditions(array(...)) to define conditions applicable to all subsequent Route instances. Use Route::getDefaultConditions() to fetch default Route conditions. Default Route conditions are assigned to each Route instance during __construct(). The Route conditions() instance method will merge its array argument with any conditions already assigned to the given Route instance.\n. Removing this feature from the road map. Decided this is tangential to the framework itself, and can easily be written as a plugin if necessary using an earlier application hook. See https://github.com/codeguy/Slim/issues/closed#issue/75.\n. Not really sure what you mean. Slim already has a built-in custom error page that provides error details (if debugging is enabled) and a full stack trace (if an exception was thrown); else Slim will call your own custom error handler (see Slim::error) should debugging be disabled. Maybe I'm just not clear on what you mean.\n. I am unfamiliar with nginx configuration, which is why I've recommended Apache for Slim. I do know that one of the Slim contributor's (hexa2k9) had created a working nginx configuration file for Slim. See this commit:\nhttps://github.com/codeguy/Slim/commit/4747f4c84e3ef682bd6571df7fb68f6be218c7a1\nI'm closing this out since it's not really an issue with Slim. But feel free to leave additional comments if you have any further questions.\n. I don't think I am going to implement this feature. It's already common (and recommended) practice to use square brackets to pass information as an array from HTML into PHP. I'd rather not change the recommended approach in Slim since this would likely confuse developers and deviate from standard practices. I think the \"ugliness\" can be easily mitigated by isolating the given markup in a Twig macro or a Smarty/Mustache macro/partial equivalent. Closing this out for now, but feel free to leave further comments if you want.\n. Thank you! Small bug that slipped past me in the latest View updates. Should be fixed. Pull from develop and try again.\n. Can you send me the code snippet from your app you are using to set cookies?\n. I'm unable to duplicate this on my end, so it may be something specific to your app. That being said, I am still readying several improvements to Slim's cookie management. Should have those pushed to the develop branch sometime tomorrow.\n. Thanks for the additional info. I don't seen anything that would cause Cookies to disappear. But I can't really tell you much more without debugging your code directly. Feel free to pull the new code (once it is pushed tomorrow) and see if that resolves these issues. If the issue persists... setcookie() will work instead.\n. Re: Slim app lifecycle, that is a great suggestion and I will be sure to add that to the Wiki as soon as I can.\n. I have pushed the latest code to the develop branch and added unit tests. Pull the changes and let me know. I still have not been able to duplicate the issues you've described here. Hopefully the latest changes will help. See the \"Cookies\" section in the Wiki docs for more info.\n. I'm closing this out as I don't see any problems on my end. If you still have issues, leave a comment here and I'll re-open.\n. I'll add a reminder in the docs. The Cookie class constructor currently accepts the same signature as PHP's native setcookie() method. The Cookie class is rudimentary at best right now... I intend to smooth it out in a few weeks.\n. Do you think a note will suffice? Or should cookies be auto-set for the application root directory path? So if my app is accessible at http://www.mysite.com/sub/directory/, cookies will be set for /sub/directory/. Thoughts? Just want to make this as intuitive as possible.\n. Added a note to the documentation. Closing.\n. Try using the following route patterns instead:\n'/maintenance(/:time)'\n'/login(/:msg)'\nDo these work for you?\nEDIT: Made several formatting changes that were not picked up by GitHub.\n. Just fixed Issue 61. This one is next on my to-do list.\n. First, when you call Slim::run(), the URL is passed through rawurldecode(). In your example above for /maintenance/in%20an%20hour, the ultimate route passed into the router would be /maintenance/in an hour. This is an invalid route. Luckily, rawurldecode() ignores +, so you can instead use /maintenance/in+an+hour. Problem solved.\nI am able to get both routes working as expected using the following:\nSlim::get('/maintenance(/:time)/', function ($time = 'default') {\n    echo $time;\n});\nIn this route, if the trailing slash is omitted, you should be redirected to the same URL with the trailing slash. If you don't want the route to act as a directory, you could use:\nSlim::get('/maintenance(/:time)', function ($time = 'default') {\n    echo $time;\n});\nIf you call this route with a trailing slash, you will get a 404. The same goes for your login route. Even though this is perhaps not the most intuitive approach, once you learn how to do this it does work. The route regex's are pretty involved as is, so I'd rather not try to fix an important part of the routing system that is not really broken. I may revisit this in the future. I'm closing this out for now, but if you still think something is wrong, please let me know.\n. To be honest, optional route segments were only intended to be used for subsequently optional route segments, much like an archive route scenario:\n/archive/:year(/:month(/:day))\nThe examples you provided are more complex than what Slim can currently manage. Honestly, I probably won't update the optional route segments implementation for the time being. If someone else has time to provide a new implementation, that's perfectly fine. But I will be focusing on other tasks.\nFor your app, I would either organize it to use subsequently optional route patterns or split the functionality into separate routes.\n. This is fixed. I have pushed the hotfix to both develop and master. The latest version of Slim has been bumped to 1.0.1.\n. Hi Jud. Thanks for your code! I have a few more important issues to resolve first. Once those are smoothed over and pushed into develop and master, I'll be sure to pull this in.\n. Absolutely! I really appreciate the help, and please continue doing so as you run into issues. There were two nasty bugs that were brought to my attention (one fixed, one outstanding). One those are both fixed, development will get back on schedule.\n. Sorry for taking so long to pull this in. This is now available in the develop branch.\n. @bobdia Perhaps. In this case, Request::$root is the public-accessible URI to the directory in which the Slim app is installed. Most of the times, this will be \"/\", but it could be \"/foo\" or \"/foo/bar\" and so on. I believe DIRECTORY_SEPARATOR will be \"\\\" on Windows so not necessarily useful when constructing URIs. This should be an easy fix... just need to get to it here soon is all.\n. Absolutely. I'll post another message here when I push up the changes so you can test. Thanks!\n. I'm not at all familiar with IIS, and I believe this issue is specific to that server. If anyone else can chip in and provide a solution for this, that'd be much appreciated. Until then, I'm lowering the priority of this ticket.\n. Nice! If you want to send a pull request I can pull your code and credit you with the change. Else I'll add this in myself later today.\n. Pulled in, pushed to master and develop.\n. Added at https://github.com/codeguy/Slim/wiki/Application-Lifecycle. Leave a comment if you would like to see more specific details.\n. Thanks for the suggestion! I've contacted the author of the code to see if this is okay.\n. I know it's BSD, but I figured I'd be courteous and ask anyway :) Thanks!\n. This is caused by the recent interface changes to the Router and Route classes. Change $currentRoute->pattern to $currentRoute->getPattern() instead. I'll fix this in the repo tonight.\n. Added to develop\n. Slim is still very very new, so I'm 100% open to your suggestions. I'll add in an accessor for the app instance.\n. I have just pushed a commit to develop that adds Slim::getInstance() which returns the Slim application object.\n. Brilliant. Will pull in your changes to the develop branch in the next day or so when I have some free time. Thanks!\n. @bobdia Is there a reason you updated the Slim::clearHooks and Slim::getHooks methods so that it works for both hooks and filters? I see that you have added new, separate methods just for filters (preferable), and the changes to Slim::clearHooks and Slim::getHooks seem redundant. Just wondering.\nDefault hooks are already in place. Do you mean default Filters? Some filters off the top of my head:\nstripTags\nsanitize / xss filtering\nWill let you know of others I think of. It may be beneficial to make filters also accept arrays (and if the argument is an array, call the filter on the array using array_map).\n. @bobdia Nevermind about the Slim::clearHooks and Slim::getHooks changes. I see what you're doing and that's fine. Keeping it nice and DRY. I'll pull in the code shortly once you give me the ok regarding default filters.\n. Can you explain a little more about your filters implementation? Just an overview so we're on the same page. Thanks!\n. @bobdia This thread was before our IRC chat.... so feel free to move forward as you see fit as we discussed. Thanks!\n. @bobdia Any update on this?\n. @bobdia If you feel having separate methods for filters and hooks is best, that's fine. Ultimately, hooks appear to be filters that are passed the application instance as their argument. So it's basically only about semantics as far as I can see.\nAre you satisfied with your code at this point? Do you have all necessary default hooks and/or filters in place?\n. Nice. I'll have a look at your changes tonight and get them pulled in soon.\n. @bobdia Send a pull request when your changes are ready. Will be releasing 1.1 tomorrow afternoon.\n. @bobdia Your pull request was available this morning... I just looked again and it was gone. Did you remove it? I'm going to move your hook and filter updates to the next 1.2 release. Going to go ahead and release 1.1 as is.\n. @bobdia Can you send me another pull request with your changes?\n. This has (finally) been pulled into the develop branch. Will provide foundation for route-specific middleware coming up next.\n. Hey guys. Sorry been travelling past few days. I'm registered on freenode as \"joshlockhart\". The official room is ##slim. I'll try to hang out there as much as I can during the day when I'm not busy with the day job.\n. No worries. I usually hang out on IRC, but I've been in and out with the holidays. Best light-weight PHP ORM... I would take a look at @j4mie's Idiorm/Paris combo. It's relatively new, works well, and provides you a simple light-weight solution. @KrisJordan has also unofficially abstracted the excellent ORM from his Recess Framework... you might ping him about that. Closing this out, but don't hesitate to leave further comments if necessary. Thanks!\n. @andyl I have never used Propel, but I know that it and Doctrine are very capable and mature ORMs. However, they are both very robust in a everything-but-the-kitchen-sink kind of way. If you need something like that, Propel or Doctrine will work great. If you are looking for sweet and simple (Slim's goal), Idiorm/Paris or DumbledORM is the way to go :)\n. Very good idea. This will be perfect for those running PHP >= 5.3, but probably too cumbersome to write for PHP < 5.3. Nevertheless, I'll put this on my to-do list. Thanks!\n. Closing this out. It's on my radar and will be revisited in the future.\n. Can you provide an example of how you would use this in your application? I can see the seemingly-apparent benefit of memoization... but I'm more interested in why you would need this for routes. In most cases, a route will only be called once in the lifetime of an application request which reduces the usefulness of memoization. Let me know some specific examples. Thanks!\n. A route's callable when invoked will echo any output as is. Currently, the Slim app captures a route callable's echod content into an output buffer and eventually writes the buffer content to the Response body. Based on your suggestions, I'm not entirely sure any changes to Slim are necessary. If using your example code above:\nmemoize() should return an anonymous function that wraps the user-defined callable. The memoize() wrapper, when invoked, should check for a cache value; if no cache, the memoize() wrapper should invoke the user-defined callable (passing its own arguments as arguments into the user-defined callable) and optionally cache the results. The results, cached or not, should be echod from the memoize() wrapper so Slim can capture the output to its output buffer and write the content to the Response.\nIs this sufficient? Or do you see this being more integrated with Slim?\n. I'm adding this to the Road Map for a future release. I agree this would be a nice feature in Slim to take advantage of functional programming intro'd in 5.3. Closing this issue for now, but will link to this thread from the Road Map page for future reference. Feel free to post additional comments here, though.\n. Agreed this seems like a tangential feature not truly necessary to the framework itself. If someone really wants this, it could easily be created as a plugin using one of the earlier application hooks. I'm removing this from the road map.\n. Thanks. Looks like a small bug slipped through. Will fix this by tonight.\n. Would you mind emailing me your boostrap.php file so I can see this in context? Or a simple bootstrap.php file that demonstrates this? I'm having difficulty pinpointing the bug on my end. info [at] joshlockhart [dot] com. Thanks!\n. Can you require BlitzView after Slim::init() and tell me the error you receive then?\n. Also, initialize Slim with the default View during this test since BlitzView won't exist during init.\n. Also make sure you are using the updated Slim files from the develop branch. I'm sure you are, but want to make sure for testing purposes.\n. I've just pushed a very small change to the develop branch. Pull down the latest commits and see if the error continues. Let me know. The problem seems to originate on line 330 of Slim.php where one uses Slim::config('foo') to request the value of a config setting. I've ensured Slim::\\$settings is set to an empty array on __construct, so this should (I hope) fix the issue.\n. @tobsn Does your PHP install support mcrypt? This is required by the new AES Cookie encryption recently pushed to develop. If this is the cause of this issue, I'll have to add some fallbacks in the code. Let me know.\n. This should be fixed. Other users who experienced similar errors did not have the mcrypt extension installed, and Slim did not have any fallback in place. Now, Slim::setEncryptedCookie() will degrade gracefully and set an unencrypted Cookie if mcrypt is not available.\n. Glad that fixed it. Didn't get an email yet.\n. @tobsn You'll need to re-send it. Let me know when you do and I'll keep an eye out for it.\n. Got it. Will take a look in more detail tonight!\n. I will add a hotfix for the Status header needed by fastcgi. But the HTTP/1.1 header should already be including the numeric status code as is. See the Response::getMessageForCode() method in slim/Response.php on line 246.\n. No real reason... just a convenience factor I guess. They'll never change. I'm sure this could be cleaned up though.\n. Just applied a hotfix to set the Status: header if running under fastcgi. Tagged as 1.0.2.\n. @bobdia Ok. I read more about running PHP under fastcgi, and according to the docs on php.net, as you said, it does expect a Status: header that contains the \"200 OK\" or similar HTTP status message. If you are not running php under fastcgi, Slim will continue working as it has.\n. See Issue 64. There are some issues with Slim on Windows that I will fix shortly. Closing this particular issue, and renaming the existing issue to better clarify the problem. Thanks!\nhttps://github.com/codeguy/Slim/issues#issue/64\n. Interesting. I'll take a look tomorrow and see what I come up with. Thanks!\n. @FredWilson I'm unable to duplicate this issue here. As I'm sure you know, and I'll repeat here just for later reference, if you include() a file with an error, PHP will issue a warning and continue executing the script; however, if you require() a file with an error, PHP will generate a fatal error and kill the script.\nTo answer your question, yes, you should be able to include() a script as you've done in the example above. I've performed my own tests locally including a PHP script with errors in it, and the application continued to render the page as expected. Can you post the full content of the included PHP file in your example above so my tests can match yours as closely as possible?\n. @FredWilson Some additional notes. After adding syntax errors to the included PHP file, PHP is throwing a Parse Error (which is not catchable by the PHP script). Syntax errors are beyond my control. Slim is able to respond to a divide-by-zero error.\n. @FredWilson Unable to properly duplicate on my end. Closing this out for now. Please post additional details so I can duplicate this issue and fix it if necessary. Will re-open at a later date once you have more details. Thanks!\n. ### Better debug settings\nAgreed. Will think on this and post some ideas here later this weekend after 1.1 is released.\nAutoloading controllers, models, views\nMaybe. Slim is a very small framework that makes as few assumptions as possible. Will checkout your links tomorrow.\nDatabase Model\nProbably won't happen. I've purposesly chosen to exclude an ORM from Slim. There are a lot of nice ones to choose from already... Paris/Idiorm, Recess Framework's ORM, etc.\nPagination\nDependent on the ORM. I wrote a pagination (based on @nunemaker's Plucky paginator) at https://github.com/codeguy/Recess-Framework-Model-Pagination\nSecurity\nSlim could benefit from an authenticate plugin similar to Rails' Devise. I've been meaning to write one soon using the new plugin/hook system.\nLanguage Support\nAgreed. I need to research this some for my own benefit and then implement support into Slim.\n. @bobdia\nSome thoughts and questions for you:\n1. I've resisted it so far, but with the addition of more class files I am seeing the benefits of using the autoloader pattern where class names are namespaced with underscores. I don't want to use PHP 5.3 namespaces to maintain PHP 5 < 5.3 support.\n2. I'll likely write an authentication plugin based on the Warden RoR gem. Provides a high-level authentication framework that still enables the developer to define application specific strategies for auth. This will not be a Core class, but instead provided as a plugin in an extras/ directory.\n3. How do you see Localization implemented into Slim's Core? The only language output within the Core classes are Exception and Error messages. How else do you see Localization being integrated?\n4. Caching... can you provide some examples for integrated caching? Route output memoization was suggested on the Issue Tracker. Was wondering what other examples you might have. Do you see this acting much like the new Logging system (ie. provide your own Cacher which Slim will use if available)?\n. @rlm80 Thanks for the feedback. Re: your Slim::route('name')->url(...) suggestion, I like it. There's nothing keeping me from implementing it alongside the current Slim::urlFor() helper method.\n. @All Thanks for the great ideas. I'm definitely listening. Will re-organize the roadmap with your ideas once I get some free time later this week.\n. I'm not sure I entirely understand. In either scenario, Slim::urlFor will return the URI (with URL segments populated) of the named route. The HTTP method is entirely up to you based on how you initiate your HTTP request. Can you tell me what you would expect returned from your example above?\n. @Calvein Gotcha. Right now Slim does not have a concept of resources, or a collection of routes that compose a resource; this is under consideration and may appear in the future. So as it stands, you'd have to manually add Javascript/jQuery (preferably with event delegation) to accomplish this. The script below is only needed once for an entire table of rows.\n$('#my-table').delegate('a.delete', 'click', function (e) {\n    e.preventDefault();\n    $.ajax({\n        url: $(this).attr('href'),\n        data: {\n            '_METHOD': 'DELETE'\n        },\n        error: function () { ... },\n        success: function () { ... },\n        type: 'POST'\n    });\n});\nHope this helps in the short term.\n. Thanks for your feedback. You definitely have a valid concern. At this point, I would consider Slim a micro framework that you can use to write RESTful web applications. There are, I admit, some non-DRY aspects of Slim's current implementation when looked at from a purely RESTful perspective.\nIn the future Slim may become smarter about the concept of Resources. For now, Slim is just a small toolkit to help create RESTful APIs and small applications. It doesn't pretend to be anything more.\nOne critique I have about your examples above... you assume that a resource route \"/resource/:id\" would display an edit form for the given resource. Instead, that route should display the representation of the resource itself, not an edit form. The edit form could be accessed with \"/resource/:id/new\" or \"/resource/:id/edit\".\nSo, I certainly understand what you're saying. Short term, Slim is not going to fundamentally change. However, longer term, I do hope to make Slim smarter about how it handles Resources. I appreciate your feedback. I hope this clarifies some of Slim's goals and intentions.\n. Thanks! Will look into this in the next day or so when I find some free time.\n. @enposte Thanks for bringing this to my attention! I've pushed 1.1.1 which includes a fix for this issue.\n. I agree, but I think adding all of these to the custom View adapter may be unwieldy. Instead, you can use the custom View's getInstance() method to fetch the Smarty object and set these yourself directly.\n. SmartyView::getInstance() is a public static method. You can set this once right after you initialize Slim and the settings will be available for all of your route callbacks. I can certainly add additional methods to the SmartyView class as you've suggested, but I'm working on other tasks at the moment. You're more than welcome to send me a pull request though. Hope this helps.\n. Closing this out. Feel free to submit a Pull Request if you have not already when available.\n. Slim purposefully makes as few assumptions about your own application created with Slim. Slim will autoload its own classes, but it is up to you to provide any additional autoloaders (with spl_autoload_register) to load your own class files as you need.\n. @yaph Thanks for your contribution. I want to make sure this works as expected, so give me a day or two to test this on my end. Another reference is http://www.regular-expressions.info/php.html (see paragraph 4 beneath \"The preg Function Set\").\nAlso, we need this to degrade gracefully if PCRE was not compiled with unicode support.\n. @yaph After a quick search, that test seems to be the consensus for detecting PCRE unicode support. Sounds good to me.\n. @yaph You could add a new public static method to the Route class and memoize/cache the result. The method would return the already set value if available, or calculate/set/return the value if not.\n. @yaph Thanks. I'm going to wrap up a new MimeType handler first, then I'll pull this in afterward..\n. I'm willing to update Slim so that it can parse unicode URLs. That may not be RFC, but I see no harm in this additional functionality assuming it does not break the framework's existing functionality. Of course, all URLs generated or returned by Slim should be URL encoded and RFC compliant.\n. After a lot of thought on this, I've decided not to accept non-ASCII characters in route URLs. I found an excellent discussion on StackOverflow about this. See:\nhttp://stackoverflow.com/questions/2015546/allowing-non-english-ascii-characters-in-the-url-for-seo\nWikipedia is known for using URLs with non-ASCII characters. But based on that discussion thread, and after examining the source code of this Wikipedia page:\nhttp://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\n...you can see that even though the UTF8 characters are used in anchor text, the anchor links are still url encoded. So even though you may see UTF8 URLs displayed by the browser, the browser is still sending URL-encoded requests to the server.\nI'm going to close this out and keep Slim in accordance with the RFC3986 spec.\n. The first sentence is irrelevant really... but I do agree with you. SEO has nothing to do with my decision to omit this feature though. I was more looking at the fact that browsers will make a best effort to show the decoded URL to the end user while still submitting the encoded URL with the request.\nAnd even if you paste a URL with UTF8 characters in your browser address bar, the HTTP request sent to the server is still URL encoded before it is sent. I'm certainly willing to have a \"Slim Hacks\" page on the Wiki. Not a problem.\n. https://github.com/codeguy/Slim/wiki/Slim-Unofficial-Hacks\n. @iromli Do you want to send me a pull request? I'll be glad to pull in your code.\n. No idea what this is. Line 293 of Slim.php deals with setting setting SSL support for secure cookies. Are you sure you haven't specified these weird characters in your Slim app settings during Slim::init()?\n. @Kofel Agreed. I've looked over the code just in case but do not see anything that would even potentially cause this error.\n@jakefolio Were you able to setup an isolated PHP test environment to troubleshoot this as we discussed on IRC?\n. @jakefolio Sounds good. I'm going to close this out for now, but if you discover this is a bug, let me know and I'll reopen. Thanks!\n. This is fixed. The Logger is setup during Slim::init() after the error handler is declared. This way you will receive a well-formatted, human-friendly error message if the logging is enabled, you are using the default logger, and the log directory is not writeable.\nSome may suggest that the app continue to run even if the log directory is not writeable... personally I think the developer should know the log directory isn't writeable if the developer expects logging to occur.\n. Thanks for the heads up. Do you think I should convert all headers to lower case automatically? And convert all to underscores or dashes?\n. Fixed. According to this RFC spec http://www.ietf.org/rfc/rfc2616.txt, HTTP headers may be case insensitive which I did not know. The latest commit to the Develop branch allows for this and resolves this issue. You can request headers in uppercase or lowercase, with dashes or underscores and you will still get the value of the correct header. Internally, header keys are stored in lowercase with dashes.\n. I think so, yes, but they would be passed the Request, Response, and a reference to the subsequent middleware to call so they can choose to call the next one or abort the process.\n. I'm a ways out from implementing this so feel free to provide suggestions.\n. Fixed in develop branch\n. Pulled.\n. Namespaces require PHP >= 5.3 and are not backwards compatible. This is why I have chosen not to implement namespaces; I want Slim to work with PHP 5.1 or newer. You're more than welcome to fork Slim and implement namespaces for your own project though.\n. I like your solution. Simple. Allows manual AJAX detection by passing a parameter with the request. I'll consider that the solution unless anyone else has further suggestions. Will implement shortly unless you want to send a pull request.\n. Done. Updating docs now.\n. Thanks. Pulled in.\n. @MatthewCallis That was my thinking as well. As far as the end user is concerned, all of this is 100% transparent. The user would continue using $_SESSION as usual.\n. Converting unit tests to be compatible with PHP < 5.3 will simply take too much time and additional code at this point. I'm going to leave it as is. You'll need a PHP >= 5.3 interpreter to run the tests.\n. Good catch. Will bump this to the top of my to-do list.\n. I've fixed this locally. I need to write unit tests for the fix this afternoon and I'll have it pushed up this evening.\n. Just pushed a hotfix (tagged 1.2.4) to both branches.\n. Hmm... for now set the Session handler setting to null to revert to PHP default session handling. What data were you putting into the Session? Cookies have an inherent limitation of 4k.\nI will duplicate later tonight and try to figure out a solution.\n. That is odd. If possible, send me an example app that is as simple as possible while still duplicating the issue.\n. @Calvein Can you hop on IRC chat? ##slim\n. Didn't mean to close this. I can't duplicate this. On my computer, for each request, the previous session cookie is deleted and a new one (with a new ID) is set, as expected. I don't see anything going on that would cause the cookie size to gradually increase. I'll need more information before I can do anything to fix this. Be sure you've pulled the very latest commits just in case.\nCan you print_r($_SESSION) in one of your routes to inspect the session data? Be sure you do not die in your route callback because session data must be written out after the route and app finishes running. Do you see anything odd happening in Firefox/Firebug or Chrome/WebInspector regarding cookies?\n. haha. Awesome. The download links at http://www.slimframework.com/install link directly to the latest commits from the master and develop branches on GitHub. Let me know if you still have this issue after pulling the latest code.\n. Thanks for the image. Can you send me a screenshot of what you seen when you print_r($_SESSION) within one of your routes? I need to see what data isn't being remo ved on each request. This may be something specific to Ubuntu's PHP install as I'm not seeing this happen here. Thanks for your help.\n. I've just pushed a new commit to the develop branch that should resolve this. Pull the changes and let me know if this works as expected for you. Thanks!\n. Well I can no longer duplicate this issue, so I'm considering this resolved. If not, leave a comment with further debugging information.\n. It appears I closed this prematurely. I've just pushed another hotfix to both branches that corrects an error in CookieJar::deleteCookie; before the latest hotfix, this method incorrectly set the Cookie expiration time which prevented the older session cookie from being invalidated on the client. This is now fixed for sure.\n. @michaelsmanley I was thinking the same thing. It should be easily done with the same code above like this:\n$_ENV['mode'] = 'foo';\nor...\nSlim::init(array('mode' => 'foo'));\nAnd then:\nSlim::configure('foo', function () { ... });\nThanks for mentioning that.\n. This has been pushed up the develop branch.\nDetermining application mode\nThe environment variable is given first priority. If $_ENV['SLIM_MODE'] is available, that will determine the application mode. Else, if the mode was specified during configuration with Slim::config(array('mode' => 'foo')), that will determine the application mode. Else, the default application mode is development.\nConfiguring for an application mode\nAfter you call Slim::init(), you can configure slim for a given mode with:\nSlim::configureMode('name_of_mode', function () {\n    //Configure Slim here for this mode\n});\nIn a real scenario, you will likely call Slim::configureMode once for each potential application mode. Only the configuration for the current application mode will be invoked. Also, Slim::configureMode will invoke the configuration callable immediately.\nClosing this out. Will provide more detailed documentation upon 1.3.0 release.\n. Sorry. I need to update that code in the docs. It should use $currentRoute->getPattern().\n. Hmm... Can you post some sample code that demonstrates this issue? Slim::redirect will accept and use any URL to set the Location: HTTP header; the Location: header instructs the client to send a subsequent request for the new URL. The Slim::redirect method also sets the HTTP response code to a 3xx redirect.\nYou should be able to call Slim::redirect from within any route... be it GET, POST, PUT, or DELETE.\n. Nevermind. I've duplicated the issue here and am looking into it.\n. Solution:\nSlim::redirect('/new-url', 302);\nThis code issues a HTTP 302 Found redirect response. By default, Slim::redirect will send a HTTP 307 Temporary Redirect response. I'll need to do some additional resesarch to determine which response should be the default.\n. After some quick searching, it appears HTTP 302 Found is the default status for generic redirects. I've updated both branches with a small hotfix... Slim::redirect will use 302 by default now. Should work. Let me know if it does not.\n. I'll add a note about this in the default .htaccess file later this evening. Thanks!\n. Done. Merged into both branches.\n. You can use PHP's default server side sessions by setting the 'session.handler' setting to null. You can also write a custom filesystem session handler as demonstrated in the develop branch documentation (see Wiki).\n. Thanks! Will try to push up a fix this afternoon.\n. Just pushed a hotfix to both branches. Tagged 1.2.9.\nhttps://github.com/codeguy/Slim/commit/d08ae6b6df71dfa74563a4b704492bd4e332f62b\n. Will fix this later this afternoon. Thanks for the heads up.\n. Done. Pushed hotfix to both branches.\nhttps://github.com/codeguy/Slim/commit/08e00b7dc2dadbb60565703d7a284d943a85f224\n. Thanks. I'll apply this fix to the dev branch before merging it into master this weekend.\n. Is this what caused the empty Slim::request()->put() issue you tweeted about? Or is that a separate issue?\n. Ah I see. I don't want to special-case every potential content-type in loadPutParameters... if your Request content-type is \"application/json\" or \"application/xml\" or \"application/whatever\", the raw request body will be available in Slim::request()->getBody(). Your application may then parse the Request body as is needed by your application. A future version may better support this scenario. For now, it's up to you to parse the Request body for non-urlencoded content types.\n. Content-type parsing fixed and pushed to the develop branch (soon to become master in an hour or so).\nhttps://github.com/codeguy/Slim/commit/ecda898fee67bb190b291dea772c90cbff8c470a\n. I'm opening a new Issue to natively support JSON and XML content-type parsing just like I do already for url-encoded requests.\n. I agree. This is not noted in the docs. I'll make a note of it, and I've pushed the native JSON and XML request support to the top of the Issue Tracker. Thanks!\n. This link was provided by @silentworks as reference for this issue.\nhttps://github.com/philsturgeon/codeigniter-restserver/blob/master/application/libraries/REST_Controller.php\n. Awesome. I have no idea if this will work, but I'll certainly take a look later tonight! Thanks.\n. Considering this issue resolved with the Slim_Middleware_ContentTypes middleware class in v1.5.2. I will introduce this middleware in a blog post early this week.\n. I'll take a look, but this could be any number of things. I've never heard of Quercus before. I admit this isn't going to be a huge priority because it will be extremely difficult for me to troubleshoot without an actual Quercus environment to use.\nIs it at all possible for you to setup and give me access to a virtual host using your Quercus interpreter?\n. @perlun I use a Macbook with OS X 10.6.7 and MAMP Pro. I don't plan on installing Java and Tomcat just for testing an obscure web server. I don't mean to be dismissive at all. It's just not something I am going to do on my dev machine. I'm honestly not familiar enough with Java and Tomcat to build a VM from scratch, either.\nIf someone else is willing to tackle this, that's great. But it's not something I can do.\n. Sounds good. On hold for now.\n. Closing this out as I don't think it's an issue with the framework. But if you want to send a pull request to enable Quercus compatibility, I'll be happy to pull it in.\n. Can you attach a stack trace or an error log? Are you setting Cookies whose names contain those invalid characters?\n. Thanks for the code. Let me know if you can reliably duplicate the issue. Otherwise I'll use your code to try and duplicate the issue tomorrow. What environment are you using? (ie. Apache with mod_php, nginx + php_fpm, ...)\n. Thanks. I'll be working on this issue this afternoon.\n. @phollo Several things for you to try:\n1. Initialize your Slim app using PHP's default session handler like this:\nSlim::init(array('session.handler' => null));\n2. If the issue persists, comment out lines 361 and 377 in Slim/Slim.php\nLet me know if either or both resolve the issue.\n. Can you also provide the settings passed into Slim::init()?\n. @phollo Can you confirm that using Slim's session handler while commenting out lines 361 and 377 in Slim/Slim.php did not work?\n. @phollo Also can you create a dummy route like this:\nSlim::get('/foo', function () { echo session_id(); });\nLet me know what session_id generates, as that value is used as the name of the session cookie.\n. Also, be sure you are not calling session_start() before Slim::init. Slim will start sessions for you.\n. Ok try adding this at the very top of your bootstrap file.\nini_set('session.hash_bits_per_character', 4);\nini_set('session.hash_function', 0);\nThe first setting tells PHP to only use values 0-9,a-f for session IDs. The second tells PHP to use the md5 hashing algorithm to generate session IDs. You should be able to just use the second one but I've provided both to be sure. Test out using just the second, then the first, then using both.\n. Reference:\nhttp://us2.php.net/manual/en/session.configuration.php#ini.session.hash-bits-per-character\n. I've pushed 1.3.1 to master. Please compare your testing to that version. v1.3.1 should resolve this issue by forcing session IDs to use only [a-z0-9] characters.\n. Great! Marking this as complete.\n. I can confirm that this works as expected. If you set the session.handler setting to null, it will use the session handler as specified in your php.ini file. Make sure that you are not calling die() or exit() within a route callback. Does $_SESSION work as expected from a normal non-Slim PHP file?\n. Thanks for the additional information. What environment are you running? I'll investigate this further tonight.\n. I think the issue is caused by too many simultaneous requests and Slim is trying to issue a new session ID per request to prevent session fixation attacks. I think issuing a new ID per request is a good thing, but perhaps not good for certain circumstances like this. I will add a new application setting called session.regenerate in a hotfix tonight which will let you enable/disable session ID regeneration.\n. After further testing on my end, there are a lot of issues with session id regeneration in 1.3.1 especially if there are many ajax or asset requests. For now I've removed session id regeneration in 1.3.2. I'll revisit in the future, but for now for the sake of stability I've removed that one feature.\n. Yeah I agree. \"templates_dir\" is a vestige from 1.0.\n. Yep. Can certainly be trimmed down. Want to open another issue for that?\n. I have renamed \"templates_dir\" to \"templates.path\" in 1.3.2\n. Oh I thought you were saying that setData and appendData were synonymous and therefore redundant. I'd like to keep the \"Data\" suffix on the method names just in case I need to add additional setters and getters in the future.\n. That's not currently possible... I'll add it to the list of future considerations in the Road Map. Don't want to add this to the Issue Tracker just yet.\nThat's a tricky issue where you would have to mimic a second HTTP response and pass along headers, etc. So, right now... this isn't possible. In the future, perhaps.\nThanks!\n. Thanks for catching this. Will push a fix early this week.\n. So the potential solution I am considering is moving Logger instantiation into Slim::run... this will enable you to configure debugging and logging with Slim::configureMode just fine since the logger won't be determined until Slim::run is called. However, this means you won't be able to call Slim_Log::* outside of route middleware or route callbacks because the logger won't yet exist. Thoughts?\nElse, I could move logger instantiation into Slim_Log... when you first call Slim_Log::*, it will check to see if a logger has been set, and if not, it will load the logger determined by the Slim app settings. This will also allow you to use Slim::configureMode, with the only exception being you can't call Slim_Log with the expected logger until after you've set the application setting for the given mode.\n. Thanks all for your comments on this thread. @nirandas I'm almost ready to push a large change to the develop branch that already includes a fix for this issue; my change/fix will lazy-load the Logger on-demand using the settings available when the Logger is first requested. I appreciate your contribution and apologize for the unfortunate timing. But I do encourage you to continue to contribute to the framework... currently I am still seeking feedback (but not pull requests just yet) for content negotiation implementation ideas.\n. A fix for this has just been pushed into the dev branch. Closing this out.\n. This has been pulled into 1.3.3. Not sure why it didn't auto-close. But this is done. Thanks!\n. Thanks for catching and fixing this. Willl pull in this weekend.\n. Fixed. Thanks for the heads up.\n. I'm running into issues trying to pull this in, so I've just copied and pasted it instead. I also changed substr($class,4) to substr($class,5) so that it trims Slim_ rather than Slim from the full class name. Thanks for your help! I will have this change pushed up shortly to both branches.\n. hmm I thought I had merged the fix into both branches. I'll check again this weekend.\n. This is expected behavior, but perhaps it could be made more intuitive. If you are passing the base URI from your Slim app into templates, you can pass Slim::request()->getRootUri() . Slim::urlFor('home')... which will return '/' (I assume) as you would expect. I'll make a note of this... it won't be a high priority until a few other issues are taken care of. Thanks!\n. Closing this out for now as it's not really an issue but more a suggestion for different behavior. Adding this to the Road Map's list of future considerations so I can keep the Issue Tracker better organized with more immediate issues.\n. If \"/\" is considered a directory, then you are breaking just before you hit the rewrite rule. Try removing the\nif ( -d $request_filename ) {\n    break;\n}\ncode and see if it works then.\n. Thanks! Fixed. I'm not able to create internal reference links with the GitHub Wiki (it's a known bug... not sure when to expect a fix). For now I've moved the docs elsewhere to make it easier for readers to navigate the docs.\n. Pull from master and try again. I've changed CookieJar to avoid encrypting empty values. The Cookies are still secure/signed.\n. Like @tobsn said, there is not a database module, nor will there ever be one. Slim is meant to be simple, and it is super easy to use an existing ORM like activemongo, mongodb, Idiorm/Paris, Doctrine, or Propel.\n. I'll take a look at this as soon as I'm back from the honeymoon on June 13th. If anyone can look at this sooner, that'd be great.\n. This will be the first item I fix once I am able to start working on Slim again. Been off the grid for a while but should start development again later this week.\n. @tobsn I've been reading more in the rfc3986 spec, and the colon character is a reserved character that should only be used unencoded when part of a URI scheme. Otherwise, the spec says it should be percent encoded; this was partially why I chose the colon character to delimit URL parameter placeholders. I'm going to leave these as is for now and follow the spec's recommendations.\nEDIT: I am going to resolve the error though to degrade gracefully.\n. @tobsn Maybe this was resolved on its own in a newer version than when you opened this issue. I'm unable to duplicate the errors you posted above. Can you still duplicate this issue in 1.5.0.3?\n. @NimbleHost Glad you got it worked out. @tinnet Thanks for stepping in. Just returned from my honeymoon in St. Lucia. Will be catching up on emails over the next few days.\n. @silentworks Great. Be sure to tweet a link to your article and I'll be happy to spread the word. Closing this out to keep the Issues area specifically for open problems. I follow you on Twitter so I'll see it once you post it to the web.\n. Thanks for the detailed report. I won't be able to start up development again until next week (moving and such), but will definitely prioritize this.\n. @silentworks Absolutely! A good use for $app->urlFor(route_name) as it was intended.\n. Upon further inspection, this is not really a bug but more an HTTP client implementation issue (e.g. web browsers). An HTTP redirect status in response to a POST request is a source of confusion it seems. POST requests are non-idempotent meaning they should not be arbitrarily repeated at will (unlike GET requests). So the HTTP spec says that if an HTTP client receives a redirect status in response to a POST request, the HTTP client must get confirmation from the end user before performing the redirect. I'd rather not have Slim force the redirect and go against the spec. My suggestion is to update your app's routes rather than rely on auto-redirection. Here are a few links that may be worth reading.\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3\nhttp://www.alanflavell.org.uk/www/post-redirect.html\n. Assuming you are submitting HTTP requests from a web browser client... GET and POST will work just fine. You'll have to simulate PUT and DELETE requests as shown in the documentation because browsers do not support those types of HTTP requests. Every framework will have this limitation.\nIf you are using an HTTP client that supports PUT and DELETE requests (jQuery, cURL, etc.) then Slim should parse those requests correctly without any extra help.\n. Yes I believe so; I've used a similar script before. If you run into an issue, just let me know.\n. I think this may still be an issue; there's already an issue open for this at:\nhttps://github.com/codeguy/Slim/issues/134\nPost more info on that other issue if you run into this again. Thanks!\n. This is on the Road Map and will be coming in a future release. For now, you should be able to use a URL param like \"/foo/bar.:format\" to respond to different format requests. Closing this out since this is not an immediate concern.\n. The OPTIONS request type is not yet supported. This may be introduced in a future version. I'll leave this open so I can provide a graceful failure rather than error out unexpectedly.\n. This is an easy change and is on the Road Map for the next point release. It's coming :)\n. Done. Available in the development branch. Use $app->options('/foo', function () {}).\n. I am unable to duplicate this issue. Here is sample code I am using with version 1.5.0.2.\n```\n$app = new Slim(array('debug' => false));\n$app->notFound(function () use ($app) {\n    echo \"Root URI: \", $app->request()->getRootUri(), \"Resource URI: \", $app->request()->getResourceUri();\n});\n$app->run();\n```\nThis outputs the expected results. I'm removing this from the 1.5.1 milestone for now; it will be helpful if you can provide more details to help me duplicate this issue.\n. Closing this out. Please leave a new comment here if you are able to reliably duplicate this.\n. See https://github.com/codeguy/Slim/issues/160. If you need further customization, let me know in the forums or on IRC and we can chat further. Errors are converted to ErrorExceptions, but the error message and code are maintained through the conversion as the ErrorException code and message. Closing this for now.\n. Appreciate the help, but changes I am preparing to push to the development branch tonight make this error a moot point; routing has been re-built in a much more flexible way. Details and new code coming tonight!\n. Yes this can certainly be improved. Thank you for your honest feedback. I'll work on improving this in the next point release.\n. This is resolved as of 1.5.0.1. Hotfix pushed to both stable and develop branches. Slim will only use its custom error handler once the application has been fully instantiated. Otherwise, errors/exceptions are propagated to the existing/default error/exception handler.\n. I don't think you're hitting the Slim application... I would make sure your .htaccess file is successfully funneling requests to your bootstrap file. A simple test case can confirm this. Closing this out. However, please let me know if you can confirm this is a Slim issue and I'll be happy to re-open.\n. @Xeon06 Agreed. I'm working on a fix.\n. Now available in the develop branch. Docs available at http://slimframework.com/documentation/develop#routes\nEnjoy!\nJosh\n. Does your browser accept third-party cookies? Session data is stored in an encrypted cookie by default.\n. Insert session_write_close() immediately before $app->redirect(). This will force sessions to be serialized and written out before the PHP script ends. Does this work?\n. This is a regression that will be fixed very soon in Slim. For now, hard-code it in your app. The next point release will include this fix.\n. $res->write('foo') appends content to the response body. $res->body('foo') overwrites the response body. Do you require direct accessors for the response body, e.g. $res->getBody() and $res->setBody()?\n. Docs updated.\n. By default, Slim stores session data in an encrypted cookie. In your app config, set session.handler to null to use the default PHP session store. Should solve your issue. If not, leave another comment here and I'll investigate further.\n. By default, Slim uses a Cookie for session data. By setting session.handler to null, Slim uses whatever your default session handler is; in most default PHP installs, I believe this is usually a flat file somewhere in /tmp. This looks like the user running the PHP process does not have permission to write to this flat file to store session data. Try setting a custom session directory with the session save path ini setting...\nhttp://www.php.net/manual/en/session.configuration.php#ini.session.save-path\n. You should place the method detection into a hook that is run before each application route instead of performing the detection in the global namespace.\n. Closing this out for now as it's not really a bug. Feel free to email me directly or start a chat on IRC.\n. I really don't have enough information to go on, and I'm doubtful (at the moment) that this is a bug. Hop on IRC when you get a chance and I'll be happy to talk with you more about this so you can find a solution.\n. Slim does not set Expires headers... is your web server doing that?\n. I agree that it is likely the stack... Slim does not explicitly set an Expires header... it only provides methods to set Last-Modified and ETag headers. It's very likely your web server is setting the Expires header due to a default or custom setting.\n. Closing this out. I'm on IRC in ##slim every day between 9am and 5pm EST if you need further assistance. Happy to help.\n. I think Slim could provide better built-in support for HTTP authentication. I'll add this to the Road Map. For now, your approach seems reasonable.\n. Closing this out out since it is not an issue with the framework. Will add it to the Road Map shortly.\n. 1. How do you see JSON Schema being implemented in Slim? What benefit would it serve to the core framework?\n2. Slim is a framework used to build APIs. Do you think JSON Schema is something that sould be in the core framework? Or is this something that you would use yourself in a specific Slim application? Not rhetorical. Interested in what you think.\n. Closing this out because it's not an issue with the framework. But I will keep this in mind and may add it to the Road Map for a future release.\n. This is now available in the develop branch. Your registered custom error handler will be passed the caught Exception as its one and only argument when it is invoked. Manually triggered or runtime errors are converted to instances of ErrorException.\n. Fixed. Added a unit test to prevent this from happening in the future.\n. This is now available in the develop branch. Use the application setting http.version and set it to a string value of \"1.0\" or \"1.1\". You can set this directly on the Response object, too, with $response->httpVersion(\"1.0\").\n$app = new Slim(array('http.version' => '1.0'));\nEnjoy!\n. The urlFor method is meant to build a complete URL to a given route with an optional array of parameter values used to build the URL if the given route requires them.\nIf you need to use custom logic that checks for existing routes, I can definitely improve the Router/Route interface to accommodate that.\n. This is done and available in the develop branch. New interface changes are:\naddNamedRoute( string $name, Slim_Route $route ); //returns void\nhasNamedRoute( string $name ); //returns bool\ngetNamedRoute( string $name ); //returns Slim_Route or NULL\ngetNamedRoutes(); //returns ArrayIterator for all named routes registered with given Slim_Router instance\n. This is complete and available in the develop branch. Router now implements the IteratorAggregate interface and provides an external ArrayIterator instance for iteration of the router's matching routes. You can use the Router iterator by using the router instance in a foreach loop, or manually requesting an external iterator with $router->getIterator().\n. This is complete and available in the develop branch. Middleware are now passed three arguments: the HTTP request object, the HTTP response object, and the related Route object.\n```\n$app = new Slim();\n$middleware = function ($req, $res, $route) {\n};\n$app->get('/foo', $middleware, function () {});\n$app->run();\n``\n. I see that too. For now if you run with--stderr` they will run successfully. I'll try to find that and fix it.\n. Fixed. See commit https://github.com/codeguy/Slim/commit/c49873d027f4598c7750b142243324a628bc8925. PHPUnit was apparently sending output really early. Starting a session earlier in the tests fixes the error.\n. I am not familiar enough with IIS. Slim does work on Apache without mod_rewrite. If it does not work on IIS, let me know what errors you receive and I'll take a closer look.\n. 1. Removing \"index.php\" from Request->getRootUri() is a valid issue that needs to be addressed for asset paths.\n2. It seems that your Apache server is using mod_rewrite and that your IIS server is not, so the route on IIS would be \"/demo/index.php/admin\" and not  \"/demo/admin\".\nI'll re-open this issue only for removing index.php from Request root URI.\n. Thinking more on this, however, you'll want the Root URI to be the absolute path to which the resource URI can be appended to create a full absolute application URI... removing \"index.php\" may be good for assets but not for building application paths. I'm not sure yet how I want to change this, if at all... will think on it. Anyone else have an opinion?\n. No worries :) Let me know if you have any other questions; post them to the forum at http://forum.slimframework.com.\n. Awesome. Will pull this in tonight.\n. Haven't forgotten about this. I'll roll this into a hotfix in the next day or so.\n. Hmmm... not sure to be honest. Slim's unit tests are setup as describe here:\nhttp://www.phpunit.de/manual/3.5/en/phpunit-book.html#organizing-tests.filesystem\nYou should be able to run phpunit tests from the directory containing tests/ to have PHPUnit run all of them; I've never had an issue with this since I started writing tests for Slim. I'm on PHPUnit 3.5.14, so this could be a bug introduced in the next version. Can anyone else confirm this?\n. Just upgraded to phpunit 3.5.15, and it still works as expected for me here. Perhaps try installing phpunit with pear and see if that fixes the issue?\n. Closing this out since I believe this is a local issue rather than a framework issue. If you are still having difficulty, please open a forum thread at http://forum.slimframework.com and I'll help you more there.\n. Thanks for the heads up.\n. Closing out this duplicate issue.\n. Closing this out due to change of approach.\n. Fixed. Included in 1.5.1.1 hotfix merged into both master and develop branches.\n. Closing out in favor of v1.5.2's middleware feature.\nwww.slimframework.com/documentation/develop#middleware\n. Agreed. I'll likely add this to the Slim-Extras repository, and in the README for the main repository. I'm admittedly not that familiar with anything other than Apache (so far) hence only the Apache-specific instructions :) I'll try to incorporate this soon. Thanks!\n. Can you test the following for a Slim app at the top of your document root?\nurl.rewrite-if-not-file = (\"^\" => \"/index.php\")\n. Thanks! I'll move the Lighttpd setup into the README soon.\n. Nice catch! I'll get this fixed later tonight after work.\n. Fixed\n. I'm putting this on the back burner as I'm not entirely satisfied with how optional URL parameters are working thus far. I need to refactor my current approach and figure out something better. That's likely next on my to-do list after v1.5.2 becomes stable.\n. Closing this out. I will re-visit optional segments in a future release. Right now they are still considered experimental.\n. Closing duplicate\n. This is done\n. All good suggestions. After the next release I'll likely take some time to improve Slim's testability.\n. I pushed version 1.5.2 (beta) to the develop branch yesterday. While there are still a few regressions/bugs that I need to smooth over, it does decouple the environment variables from the Slim_Http_Request into the Slim_Environment class. The new Slim_Environment class has a mock() public static method that accepts an associative array of environment variables that you define. This allows you to build mock HTTP requests for your tests. You must provide all required environment variables, though, if you do use the mock() method. You can find a list of required environment variables here:\nhttp://www.slimframework.com/documentation/develop#environmentvariables\nLeaving this open for comment if you think this idea can be improved.\n. Closing this out. Here's a status update for each bullet point you mentioned above:\nStub Slim_Http_Request to make getBody() return a body string of my choosing (there is no way to override the output of PHP's internal php://input stream).\nYou can use a mock environment with Slim_Environment::mock(array('slim.input' => 'your own string')) to manually specify the HTTP request body.\nStub Slim to make request() return the stub mentioned above.\nThe Slim_Http_Request as of 1.6.0 (currently in dev branch) is now an abstraction layer overtop the environment variables. You can override all environment variables using Slim_Environment::mock(array(...)). See the development documetation for a list of available/required environment variables. \nhttp://www.slimframework.com/documentation/develop#environmentvariables\nSet a large bunch of $_SERVER key/value pairs as most of them are unset when working with the application from the command line (I actually stole this trick from some of Slim's own unit tests).\nI'm not entirely sure why this is necessary. I would encourage you to begin using Slim_Environment::mock() for future testing. All of Slim's unit tests now do this.\nWrite a test harness that hides all this behind a simple API that allows me to perform requests and make assertions on the response.\nThis is now possible because of Slim's new Rack architecture. Instead of running the app, you can instead invoke the app's call() instance method, passing in the array of Environment settings as its one required argument. This will return an array of (int) status, (Slim_Http_Headers) header, and (Slim_Stream_*|string) body. This makes it super easy to test assertions on the app response to a mock request.\nThe header implements ArrayAccess and is iterable. If the body is not a string, it will implement a process() method that will output/flush data to the client (used for streaming).\n. No. This is on the Road Map though for a future release. It's not an immediate concern just yet though. Closing.\n. I've been meaning to add this for a while. This isn't an immediate concern, but I'll add it to the Road Map.\n. Closing this out. Please post feature requests to http://help.joshlockhart.com. I've opened a thread here:\nhttp://help.slimframework.com/discussions/suggestions/2-wild-card-in-routes\n. Can you provide code for the simplest Slim application you can build that demonstrates this issue? It's difficult to diagnose out of context. I don't think the View method is related to the error being triggered.\nEDIT:  Actually what is happening is that when you call $app->view()->setData(array(...)), you are effectively overwriting all of the View's variables, including the object responsible for Flash messaging. I encourage you to use $view->appendData(array(...)) instead :) Not really a bug, just need to use the appropriate View instance method. Closing this out.\n. Closing this out as this change would intercept and alter the expected native behavior of a static method callable.\n. Use $view->appendData(array()) instead. The error is a result of you replacing the Flash messaging variable in the View object.\n. I've not seen this before, nor can I duplicate having tried here really quickly. What version of PHP are you using?\n. You should not die within a callback, else the Slim application is unable to complete it's lifecycle (i.e. sending headers to the HTTP client at the end of the application lifecycle). I recommend you call $app->halt(status, message) instead.\nThe issue at the top of the thread... I still cannot duplicate.\n. @snez Cool. Slim will catch any PHP errors and convert them into more manageable ErrorException objects which are re-thrown and caught by either your own custom error handler (when debug is false) or by Slim's default handler that shows detailed debugging information about the exception (when debug is true).\n. What PHPUnit version are you using? I may be on an older version through the PEAR repo.\n. Cool. I was using an older version. I'll be staying with the latest version from now on.\n. Pulled this into the develop branch. It will be introduced with 1.6.0 soon. Not sure why it did not automatically close the request.\nhttps://github.com/codeguy/Slim/commit/0bd3b8612ff8c9071ba2b7185d0df8c39a852cd0\n. Thanks. I'm wrapping up documentation and unit tests for the new version tonight. Once I get it pushed to the development branch this week, I'll pull this into a hotfix for both branches.\n. If you are on PHPFog, make sure you are using the http.version setting so that its value is \"1.0\". If you are not on PHPFog, I'll have to investigate further.\nJosh\n. This will be resolved in the next stable release. It is already resolved in the develop branch. Closing this out. If you have any further questions on this, please don't hesitate to post a question to the support forum at http://help.slimframework.com.\n. I previously merged a hotfix that moved template path assignment into the Slim constructor, but I prefer your approach much better as it will also apply when new Views are added later during runtime, too. I don't think I want a separate method just for template path assignment, though. I'd rather toss out the legacy code and use only $this->view->setTemplatesDirectory($this->config('templates.path'));.\nI can make these changes on my end after I pull down what you have. Will try to merge this later today.\n. This is done in v1.5.1.4 now available in the master branch.\n. I'm looking at both branches and I don't see this. Perhaps your local branch is not up to date with Slim's official branches? I still need to adjust the development branch so that it acts the same as master.\nThe primary issue addressed by this change was to ensure the View object knew its template path upon app instantiation. I can assign the template path in both locations, instantiation and render, to accommodate both scenarios. Does that seem reasonable? It may be redundant in most cases, but I can see it being helpful in some situations.\nEDIT: Be sure you look at the official Slim repo's branches and not the raw pull requests. Some other changes were likely made after the pull request's changes were pulled in.\n. This is a great use-case for the middleware in v1.5.2+. You can write middleware to inspect the response status; if the status is 4xx, you can overwrite the response body as you see fit. Bear in mind that middleware surrounds the Slim application. Middleware does not act within the Slim application.\n. Agreed. I'll add an abstract Slim_Middleware_Base class that all middleware should extend.\n. This is done.\nhttps://github.com/codeguy/Slim/commit/be3c90edf0c625f928acb3801686154fab37bb5c\nAll middleware must implement Slim_Middleware_Interface.\n. Thanks for pointing this out! I'll take care of this later today.\n. @dannykopping When you invoke $app->halt(...), that method will set the HTTP status and HTTP body on the current response object and throw a Slim_Stop_Exception to prompt the application to immediately send the response; behind the scenes, the Slim_Stop_Exception is caught by a catch block later in the Slim app's call() method. The error handler is invoked to handle an Exception caught during runtime; invoking halt() in the error handler throws another Slim_Stop_Exception that can only be caught by the upstream diagnostics middleware.\nYou do not need to call halt() in your error handler; instead, echo() the response body. The resultant HTTP response will automatically have a 500 status and will use the content that you echo() from the error handler.\nDoes this seem reasonable? I suppose I could add an additional catch block in the call() method to handle this situation, but not sure if that is necessary.\n. I agree with you that you should be able to set the HTTP status and HTTP headers in the event of an error, instead of Slim using a HTTP 500 response automatically.\nHere's the error() method in the Slim class:\npublic function error( $argument = null ) {\n    if ( is_callable($argument) ) {\n        //Register error handler\n        $this->router->error($argument);\n    } else {\n        //Invoke error handler\n        $this->halt(500, $this->callErrorHandler($argument));\n    }\n}\nAnd here are my suggested changes to keep the necessary changes as simple as possible:\npublic function error( $argument = null ) {\n    if ( is_callable($argument) ) {\n        //Register error handler\n        $this->router->error($argument);\n    } else {\n        //Invoke error handler\n        $this->response()->status(500);\n        $this->response()->body('');\n        $this->response()->write($this->callErrorHandler($argument));\n        $this->stop();\n    }\n}\nThis change ensures that, in the event of an error, the response status will (by default) be 500 BUT this can now be changed in the custom error handler. Any content echo()d in the error handler will be written to the response body; the custom error handler may also append content manually to the Response body rather than echo() content. This also respects existing headers since the current Response object is used rather than replaced. And error handling is still contained and managed by each separate application.\nThoughts?\n. I'll still need to update the Slim class call() method to catch the Slim_Exception_Stop exception thrown by the above changes of course.\n. @dannykopping This is now available in the develop branch. Added a unit test to tests/SlimTest.php on line 1293 that demonstrates functionality.\n. Link:\nhttps://github.com/codeguy/Slim/blob/develop/tests/SlimTest.php#L1293\n. I'll explore alternative forum options later this week.\n. I've migrated all support to http://help.slimframework.com. Closing this out.\n. I'm not really sure what you are trying to accomplish. If you want to append new methods to the Slim application class, you can extend the Slim class (I advise against this) or use a decorator like this:\n```\n<?php\nclass MySlim {\n    protected $app;\n    public function __construct( Slim $app ) {\n        $this->app = $app;\n    }\npublic function __call($methodName, $args) {\n    if ( method_exists($this->app, $methodName) ) {\n        $this->app->$methodName($args);\n    }\n}\n\npublic function alias() {\n    //Do something\n}\n\n}\n?>\n```\nBut that's getting messy, and I'm hesitant to suggest this without knowing more about what you want to accomplish.\n. Is this not something you can do with query parameters? Query parameters are trimmed and URL decoded automatically by Slim. So something like this:\n$app->get('/action', function () use ($app) {\n    $action = $app->request()->get('action');\n    $task = $app->request()->get('task');\n    if ( $action === 'conquest' ) {\n        //Do task\n    }\n}\nThe request URI would look like \"/action?action=conquest&task=buy\"\n. I guess looking at this further, it makes sense that two apps in the same file cannot run simultaneously. Only one set of headers and HTTP response should ultimately be sent.\nWhere I would ultimately like to take this is to enable one to mount an app at a given endpoint on another app. Now that v1.5.2 introduces the call() method, this becomes possible.\nHowever, that's too far off and I don't want to worry about it just now. Will add to the road map but remove from the Issue Tracker.\n. Previous versions used a one-size-fits-all approach to logging and assumed that a daily log file was sufficient. The current version writes all logs to STDERR by default, but that is easily changed.\nMy goal is to make the framework less presumptuous and more flexible. That being said, it is super easy to restore this functionality with a custom log writer:\n```\nclass DailyLogWriter {\n    protected $path;\npublic function __construct( $path ) {\n    $this->path = rtrim($path, '/') . '/';\n}\n\npublic function write( $object ) {\n    return file_put_contents($this->path . date('Y-m-d') . '.log', (string)$object . PHP_EOL, FILE_APPEND);\n}\n\n}\n$slim = new Slim(array(\n    'log.writer' => new DailyLogWriter('../logs')\n));\n```\nI'll likely add some error handling to this custom log writer and merge it into the Slim-Extras repo so that it is readily available. I'll make a note of this change in the docs, too. Leaving this open so anyone else can add his or her ideas.\n. Closing this out. Custom log writers are the preferred way to perform application logging as of 1.6.0.\n. Just thinking out loud here. The process that initiates streaming should be defined within a route callback. The streaming should not be initiated until the Slim app's run() method is invoked (the very end of the app lifecycle).\nThere are two ways I can see this happening. One is a closure, but this is only helpful if you need to maintain a reference to the application state within the callback. Otherwise, we can set the Response body to a hypothetical class instance that is responsible for the streaming. Currently, the Slim app's run() method expects the response body to be a string, but we could overload that expectation so that if the Response body is any object with a process() method (the method name is only an example), that method will be called rather than doing a simple echo() of the Response object's body property.\nThis way we are sure to send headers first, and then send the Response body (be it a string or an object that handles the Response body).\n. More thoughts...\nWe rely on polymorphism... both Slim_Http_Response and Slim_Http_Stream will implement a finalize() method that returns [status, header, body]. The two classes are otherwise unrelated.\nIn Slim_Http_Stream, the \"body\" of the array returned by finalize() will be an object instance that implements interface Slim_Stream_Interface... we check for this instance in Slim::run() where we currently only echo the body, and if the instance is found, invoke the instance's process() method to initiate streaming rather than echo the response body.\n```\nSlim_Http_Stream\n    protected $streamer;\n    public __construct( Slim_Stream $streamer, $options );\n    finalize(); //return [status, headers, Slim_Stream body]\nSlim_Stream_File implements Slim_Stream_Interface\n    public process(); //stream in chunks with fopen/fgets/fclose\nSlim_Stream_Data implements Slim_Stream_Interface\n    public process(); //echo data\nSlim_Stream_Process implements Slim_Stream_Interface\n    public process(); //stream in chunks with popen/fgets/pclose\n```\n. Hey everyone,\nI've pushed an initial streaming implementation into the develop branch. These commits introduce the streamFile( $path, $options ), streamData( $data, $options ), and streamProcess( $process, $options ) methods to the Slim class. This implementation is by no means final, but it is a solid foundation from which to start. The method signatures will not change.\nI am not entirely sure on the HTTP headers defined in Slim_Http_Stream::finalize(). I think they are fine according to the HTTP spec, but some browsers may require some extra legwork to get it working optimally. Feedback is welcome.\nYou can find more detailed documentation in the respective class files.\nAll existing unit tests still pass. I have not written tests for these new streaming methods... if anyone wants to work on those that'd be great, otherwise I can add those in next week some time.\nStream File\n$app->get('/stream-file', function () use ($app) {\n    $app->streamFile('/path/to/file.txt');\n});\nThe streamFile() method accepts two arguments. The first argument is the path to the file you want to stream to the HTTP client. The second argument is an optional associative array of the streaming settings below. The file will be streamed to the HTTP client until the script time limit is reached or the client severs the connection.\nname\nString. The file name sent to the HTTP client (defaults to basename of first argument).\ntype\nString. The mimetype of the content sent to the HTTP client\ndisposition\nString. Either \"inline\" or \"attachment\" (defaults to \"attachment\")\nencoding\nString. Either \"ascii\" or \"binary\" (defaults to \"binary\")\nallow_cache\nBoolean. Dictates which Cache-Control and Pragma headers are sent to the HTTP client.\nbuffer_size\nInteger. Bytesize of stream chunks. Default is 8192.\ntime_limit\nInteger. Time limit of PHP script set when streaming begins. Defaults to 0 (infinite).\nStream Data\n$app->get('/stream-data', function () use ($app) {\n    $app->streamData('Lorem ipsum dolor sit amet, consectetur adipisicing elit', array(\n        'name' => 'lorem.txt',\n        'encoding' => 'ascii'\n    ));\n});\nThe streamData() method accepts two arguments. The first argument is the raw data (string) you want to stream to the HTTP client. The second argument is an optional associative array of the streaming settings shown below. The data will be streamed to the HTTP client until the script time limit is reached or the client severs the connection.\nname\nString. The file name sent to the HTTP client\ntype\nString. The mimetype of the content sent to the HTTP client\ndisposition\nString. Either \"inline\" or \"attachment\" (defaults to \"attachment\")\nencoding\nString. Either \"ascii\" or \"binary\" (defaults to \"binary\")\nallow_cache\nBoolean. Dictates which Cache-Control and Pragma headers are sent to the HTTP client.\nbuffer_size\nInteger. Bytesize of stream chunks. Default is 8192.\ntime_limit\nInteger. Time limit of PHP script set when streaming begins. Defaults to 0 (infinite).\nStream Process Output\n$app->get('/stream-process', function () use ($app) {\n    $app->streamProcess('ls -al /usr/local', array(\n        'name' => 'file-list.txt',\n        'encoding' => 'ascii'\n    ));\n});\nThe streamProcess() method accepts two arguments. The first argument is the process to execute whose output will be streamed to the HTTP client. The second argument is an optional associative array of the streaming settings shown below. The data will be streamed to the HTTP client until the script time limit is reached or the client severs the connection. Unlike streamFile() and streamData(), this method will stream output line by line rather than in chunks.\nname\nString. The file name sent to the HTTP client\ntype\nString. The mimetype of the content sent to the HTTP client\ndisposition\nString. Either \"inline\" or \"attachment\" (defaults to \"attachment\")\nencoding\nString. Either \"ascii\" or \"binary\" (defaults to \"binary\")\nallow_cache\nBoolean. Dictates which Cache-Control and Pragma headers are sent to the HTTP client.\ntime_limit\nInteger. Time limit of PHP script set when streaming begins. Defaults to 0 (infinite).\n. @guumus Not sure how this is related to this particular issue. Can you move your question to http://help.slimframework.com?\n. Closing. I want to re-think streaming in Slim to make sure it's as good as possible. Will re-visit in the future after 2.0 release.\n. This is already available in the develop branch and will be merged into the master branch for version 3.0.0 coming soon.\n. This is done and available now in the develop branch. This will become available in the stable branch when version 1.6.0 is officially released in a few weeks.\n. If you invoke $view->setData(array(...)) anywhere in your app, you're overwriting the View's flash data variable. I recommend you instead use $view->appendData(array(...)) instead to avoid the issue. I hope to resolve this assumption in the near future.\n. Thanks. This is limited to 1.6.0 in the develop branch. I'll get this fixed tomorrow.\n. It should accept both a string and an integer. If it does not, it's a bug. I'll look into this. This should be isolated to 1.6.0 in the develop branch only and not the stable branch.\n. Hi Darek. That's a valid concern. I recently changed Slim so that the View was assigned its template path when the Slim app is constructed. However, it is also useful, as you've shown, to ensure the View has the latest template path upon render. I'll push a fix soon so that the View is assigned its template path during Slim instantiation and during render.\n. I've pushed a fix to the develop branch so that the View's template path is set right before render. This fix will be available in the stable 1.6.0 release later this month.\n. Currently this is done in the Request class, but probably best moved into Environment.\n. You should write and register your own autoloader instead of modifying Slim's autoloader. You can queue more than one. If the first does not find a class, the next will be called, and so on. See this page for details:\nhttp://us3.php.net/manual/en/function.spl-autoload-register.php\n. It works both ways. I was experimenting with an easier, quicker way to set headers and iterate over them.\n. @BigBlueHat It'll still work both ways. I intend to leave it that way.\n. Thanks for the report! I'll have a look at this tonight.\n. Can you show me how you are adding the Slim_Middleware_SessionCookie middleware to your application? You can post it here publicly, or you can post a private message http://help.slimframework.com, or you can email me the code to info [at] slimframework [dot] com.\n. Nevermind. I see where the bug is. Thanks for bringing this to my attention.\n. Just pushed a fix. Tested this out both in a unit test and with a quick test app. Seems to work for me. Does this update work for you? Be sure you pull the latest down from the develop branch.\n. Have you enabled a PHP session, or have you added the Slim_Middleware_SessionCookie middleware to your app?\n. Hmm. Can you send me code that demonstrates this not working? I'm testing the development branch right now and it works as expected for me. If I can see your code I may be able to see what is causing this not to work. This example app does work for me:\n```\nrequire 'Slim/Slim.php';\n$app = new Slim();\n$app->add('Slim_Middleware_SessionCookie');\n$app->get('/foo', function () use ($app) {\n    $app->flash('info', 'Hello there');\n    $app->redirect('/bar');\n});\n$app->get('/bar', function () use ($app) {\n    var_dump($_SESSION);\n});\n$app->run();\n```\nJosh\n. Also, an important bug fix was pushed yesterday that fixed a bug in Slim_Middleware_SessionCookie. If you are using that middleware, be sure you pull down the latest code.\n. haha. Sorry about that. It's early and I've yet to have my coffee :P\n. Any luck? I'm unable to duplicate. Let me know tonight. Otherwise I'll close this out and we can continue troubleshooting in a forum thread at http://help.slimframework.com.\n. @imknight Yes, but how you access the variable in your templates depends entirely on the template system you are using. If you are using the default Slim_View, you will access it with $flash['info']. If you are using Twig, you will access it with flash.info, and so on.\n. Pulled this into the develop branch (and the 1.6.0 release branch on my local machine). I tweaked it slightly so that only the abbreviation itself was linked, and I linked to the Wikipedia entry rather than Fowler's page that pushes his book. I felt only a quick definition of \"DSL\" was necessary rather than a big list of specific patterns.\n. The examples at the top of the README are brief visual examples only to demonstrate how simple it is to write and run a Slim app. The Hello World tutorial and online documentation are available at http://www.slimframework.com/learn as is listed in the README and clearly linked to on the website. I encourage you to fully read the README and online documentation to learn how to use the framework as intended.\n. I've added these changes to the develop branch (and to the v1.6.0 release branch).\n. Hmm.... will take a look at this tomorrow.\n. Thanks @hexa2k9. To be clear, HTTP headers are case-insensitive. So the only issue here is entirely aesthetic. That being said, I can appreciate the desire to see HTTP headers output exactly as you specify them. Currently, Slim normalizes them into a lower-case canonical form.\nSo, what I'll have to do is update the Slim_Http_Headers class to store a secondary hash of specified header names that maps the canonical form to the original form. The Slim_Http_Headers instance will continue to operate in a case insensitive way accepting either lower-case, mixed-case, or upper-case input.\nThe only change will be \"under-the-hood\" and will require a tiny bit more overhead to lookup the original form when headers are ultimately flushed to the HTTP client in Slim::run().\n. @hexa2k9 Pull this commit and let me know how it works for you. Should work great based on my unit tests.\n. @hexa2k9 I do not prevent sending duplicate HTTP headers so that Slim can send multiple Set-Cookie headers to the HTTP client (this is in the Slim::run method). The original X-Powered-By header set by PHP is outside the scope of the Slim app so there's nothing I can do to prevent it from being set. What I can do is to only allow Slim to set duplicate Set-Cookie headers but not for any other header. This would solve the problem but remove the ability to use other duplicate headers.\nBy design, Slim_Http_Headers prevents duplicate headers since it acts like a key/value array. However, headers are ultimately flushed in Slim::run which does allow duplicate headers. So allowing or disallowing duplicate headers must be determined in Slim::run.\nI'll think on this for a bit. For now, you can disable the default X-Powered-By by adding this line to your PHP.ini file:\nexpose_php = Off\n. Sounds good. There are arguments to be made either way... the HTTP spec allows duplicate headers, so I do not want to prevent that. However, PHP pollutes the final set of HTTP headers by settings its own without user approval. I'm not sure I want to limit Slim for an inherent PHP shortcoming. I'll think on it. But version 1.6.0 will likely be released based on the current header implementation.\n. I can add the PrettyExceptions middleware at the beginning of Slim::run() guaranteeing that it will always be the outermost middleware layer so that any uncaught exceptions are passed through the entire stack.\n. I've made this change to the release-1.6.0 and develop branches. Pull down and test out when you get a chance. Thanks!\n. I've updated the default 404 page so that it will always have a trailing slash. I'll revisit the debate of having or not having a trailing slash later on.\n. Thanks! This has been fixed in the develop branch, but I'll pull this into master before 1.6.0 is released later this month. Will try to pull this in tonight.\n. This was cherry-picked into master. Tagged 1.5.1.5.\n. Pulled into develop. Looks like GitHub's post-push hooks are failing.\n. Not sure why GitHub did not auto-close this. I've pulled this into the develop branch.\n. haha. I think I'll wait until the IETF approves this ;)\n. Closing. This was solved in a previous pull request. Will be available on the View object in 1.6.3.\n. Most HTTP headers will be available as HTTP_* (e.g. DNT, X-Do-Not-Track, X-Forwarded-For). PHP and Basic/Digest authentication is a bit weirder. PHP hijacks these HTTP request headers and inserts them into:\n- PHP_AUTH_DIGEST\n- PHP_AUTH_USER\n- PHP_AUTH_PW\n- AUTH_TYPE\nThe AUTH_TYPE value is \"Basic\" or \"Digest\". The raw value of the Authorization header is available in the PHP_AUTH_DIGEST value.\nSlim does not presume you are using Apache. Many use nginx, lighttpd, and others. That being said, I do not think that Slim looks for the PHP_AUTH_DIGEST variable, so I'll be sure that is pulled in, too. Look for a push in a few days.\n. I've tweaked how Slim parses and exposes the request headers through the Response object. The PHP_AUTH_DIGEST variable is now available both in the Slim app's environment array and with $response->headers('PHP_AUTH_DIGEST'). If present, this should equal the raw Authorization header sent with the request.\nI'll be introducing HTTP Basic/Digest auth middleware eventually.\n. There are a lot of variables at play. Can you push this to a public URL and send me the URL that demonstrates the faulty redirect? This will let me narrow down what may be happening.\n. Sounds good. Closing this out. If you continue to have issues, please open a thread at http://help.slimframework.com.\n. Thank you very much for your contributions. I'll merge these into the develop branch so they are included in the 1.6.0 release.\n. Agreed. What are your thoughts, though, on sending the Slim_Http_Stream response object back up through the onion, as opposed to a string object (as Slim currently does)? Is this avoidable? I think it introduces additional complexity for unsuspecting middleware. I'm not sure it is avoidable, though, short of exiting the middleware stack and streaming directly to the client. This has no bearing on your commits... I agree on what you've done. I'll make sure these are pulled in and introduced for v1.7.0.\n. Closing for now. Will re-visit in the future. See road map.\n. This partly answers my previous question on your other pull request. This would provide a common interface to all responses, in and out of the onion. However, I believe we would need to stub the write() and body() methods on Slim_Http_Stream, correct? This is likely the only way to ensure a common interface so middleware layers do not need to run conditionals to detect a string response vs. a stream response.\n. One thing I like about currently returning the triplet [status, header body] from each onion layer is that each layer may completely re-construct and/or return a fresh response rather than modify one master response object. In my opinion, this adds a lot of helpful flexibility to middleware.\nThat being said, we could return an instance of Slim_Http_Response rather than the triplet... this creates a more tightly coupled system, but provides the benefit of a more encapsulated response.\n. This is done and available in the develop and release-1.6.0 branches.  You can read about the final middleware implementation at http://www.slimframework.com/documentation/develop#middleware. Each middleware layer, and the Slim application itself, all reference the same objects.\n. Merged into the develop branch and will be in the 1.7.0 stable branch. I've already frozen the 1.6.0 release code and wanted to avoid a complicated merge.\n. This is best delegated to custom Views. You can learn more about custom Views with Slim at http://www.slimframework.com/documentation/stable#views. You can see a bunch of available custom Views in the Slim_Extras repo at https://github.com/codeguy/Slim-Extras.\nBest,\nJosh\n. I'll look at pulling this in for the 1.7.0 release. This only appears to be a bit of sugar on top of:\n$app->get('/foo', array(new Foo(), 'instanceMethod'));\nI can appreciate the simpler syntax, for sure. Will get back with on this later after 1.6.0 stable is released.\n. I'm closing this out in favor of this similar issue:\nhttps://github.com/codeguy/Slim/pull/311\nThe alternative implementation is more DRY and better handles exceptions if the class or method does not exist.\n. Cherry-picked into the release-1.6.0 and develop branches. Thanks!\n. I've made sure all information in the 1.6.0 release branch and develop branch are accurate. If you find any incorrect links or references, let me know.\n. Version 1.6.0 does not start a session for you at all. I felt sessions in 1.5.x were too presumptuous, too, as you suggested. If you need a native PHP session, you have to prepare and start it on your own in 1.6.0. The current implementation in 1.5.x has been abstracted into optional middleware that you can enable with:\n$app->add('Slim_Middleware_SessionCookie');\nThis middleware will persist session data into hashed, encrypted client-side cookies. I will be writing additional middleware soon that will enable a native PHP session with safe defaults should someone not want to configure and start the session himself.\n. I'll take a look at this soon and have a fix added to 1.6.1 if necessary.\n. @jbrower Definitely. Let me do some digging. Once I have something for you to look at, I'll push to a remote branch on GitHub for you to test.\n. So after a lot of reading, I can't find a reliable answer on whether or not Apache/nginx/etc. will automatically add the Content-Length header on its own (with or without gzip compression). I assume that an HTTP/1.1-compliant web server will set the Content-Length header... but that's only an assumption.\nI looked at Symfony's commits, and they had a very similar discussion... I believe they decided to remove the Content-length header for the time being until they could find a reliable solution later.\nWhat are your thoughts?\n. Also, make sure you are testing this with the develop or release-1.6.0 branch. Those do not flush() output. And because they do not flush() output, the web server should have the opportunity to manipulate the Content-Length header before the response is sent to the client, even if the header is already set in PHP.\nLet me know if you still have issues with the newer branches.\n. @jbrower I'm coming to the same conclusion. I'll remove the Content-Length header from version 1.6.0 and forward.\n. Thanks! I'll have a look and get this pulled in this weekend.\n. This will be resolved in 1.6.4 (coming out in a few days). I've updated the Slim::call loop so that the slim.after hook will always be run, even when the stop, halt, or redirect Slim application methods are invoked.\n. Slim still supports PHP 5.2 so I have chosen not to implement namespaces at this point in time. It also appears that your changes break many of Slim's unit tests, and you've made a change to the README that indicates you are maintaining a separate official namespaced branch of Slim which is not the case. I appreciate your suggested changes, but I'm not ready to pull these changes at this time.\n. @kinncj As we discussed privately via email, I appreciate you making changes to the README to make it clear that your fork is based on my code rather than claiming it as your own. Can you make sure the README contains these changes?\n1. Include a link to the authoritative Slim repository at https://github.com/codeguy/Slim\n2. Retain a link to the @slimphp Twitter account\n3. Retain all original copyright statements at the top of each framework file\nI encourage everyone to fork my repository and submit pull requests so long as you respect the MIT license and provide credit to me, the original author.\n. The README is fine. I'm considering this resolved.\n. Can you pull the latest changes from the develop or release-1.6.0 branch? I am unable to duplicate this on my machine. I'm running this in Terminal:\ncurl -X GET http://slim/contact -v\nAnd I see the expected HTTP response being a 301 redirect having this HTTP header\nLocation: /contact/\nLet me know if you are still having issues and I'll continue to investigate.\n. Are you on Windows? Please pull down the release-1.6.1 branch and see if that fixes things.\nEdit: Just saw the require 'C:\\xampp\\... path :) The 1.6.1 release should help you.\n. Awesome. That branch is stable if you want to keep using it. It should be merged into master this weekend.\n. This is done. Pulled into both the develop and release-1.6.0 branches. Can you confirm it works correctly?\n. Great! Thanks for checking.\n. Hi guys. I'll investigate and get a fix added to the develop branch soon.\n. Ok. Sorry for the wait on this. I've just pushed a fix to both the develop and release-1.6.0 branches.\nFirst, Slim removing HTTP_ from header names, even if said substring was not the prefix, was a bug. Now, Slim will only strip HTTP_ from header names if that substring is indeed the prefix.\nSecond, I've updated the Slim_Environment class to parse all X- prefixed custom headers. Previously, Slim would only parse a whitelist of headers.\nThird, I've updated Slim's method override middleware to respect the X-Http-Method-Override header.\nThanks for bringing this to my attention!\n. Agreed. I've consolidated what needs to be documented before the 1.6.0 release into the issue linked below. Closing this out.\nhttps://github.com/codeguy/Slim/issues/274\n. The develop and release-* branches have had an nginx rewrite rule for a while. It will be available in master later this week once I take 1.6.0 live.\n. Thanks! I'll get this pulled in shortly after 1.6.0 is out the door later this week.\n. I'm doing some research and running a few tests using no opcode cache, using XCache, and using APC. Do you know of any URLs that confirm this? I don't doubt you, I'm just not as familiar with this issue and want to read more about it.\n. Cool. I'm not entirely convinced the performance gain is worth the convenience lost. But I certainly learned something new :)\n. It is my understanding that, as @alganet said, a HEAD request for a given resource should return a response identical to a GET request of the same resource but without a body. It is necessary for Slim to execute the GET resource's route/callable in case the route attaches custom headers to the response.\nI certainly appreciate your argument, but I don't think the time/effort saved implementing HEAD-only routes is worthwhile.\n. The only reason Slim will respond with a 405 is that if one of your Slim app's routes matches the request URI but not the request method. Can you post the request URI you are using, and then post the PHP code of the Slim app's route that should be invoked?\n. Please post your code to a new thread at http://help.slimframework.com and I'll continue helping you there.\n. Awesome work. It looks like all of the important changes are in commit 603d7a5, correct? Want to make sure I don't miss anything. I'll likely cherry-pick that in so I don't have to worry about conflicts with all of the other commits in this pull request.\nI'll get 1.6.1 out in a day or so. Wildcard support will be going into 1.7.0 which I'll start on as soon as 1.6.1 is out.\n. I made several tweaks... I changed your preg_match to strpos... it's more naive, but I feel it does what is needed with much less overhead. I also avoided an array lookup by using an already established variable.\n. I agree completely. This has already been done in the develop branch and is scheduled to be included in version 1.6.0 when that is released soon.\n. Closing. This won't be added. Slim will soon be moving to 5.3+ as of version 2.0 coming up soon.\n. Thanks guys. I'll pull this into 1.6.0 before release.\n. This has already been completed in the develop branch and will be introduced in version 1.7.0.\n. Cool. If you want to send me a pull request you can get credit for the fix.\n. I'm not a Drupal expert. I encourage you to ask this question on the Slim Framework support forums. Closing this out.\nhttp://help.slimframework.com\n. This is done\n. Thanks. I'm not ready to take Slim to >= 5.3 just yet. I'll probably do so by version 1.7 or 1.8.\n. Awesome. You may want to post a link to your fork at http://help.slimframework.com in the Chat section. I'm trying to keep the GitHub issue tracker only for immediate legitimate issues with the framework rather than feature requests or general questions. But definitely post a link in the forums so others can see.\n. Makes sense to me. I'll get this pulled in for 1.6.1.\n. I just pulled this in. Not sure why GitHub did not mark it as complete.\n. Right. I understand that you are now able to use your own template View variable... however, you disabled the ability to invoke View::render independent of View::display. If you want to revert this one regression in your push request, I'll be happy to pull it in.\nBest,\nJosh\n. Thanks! Looks good. Pulling this into release-1.6.3 now.\n. Great. Thanks! Will get this pulled in soon.\n. No. Currently Slim uses the Slim_Middleware_PrettyExceptions middleware to catch any exceptions thrown during development. In production, you'll want to set the debug app setting to false and define your own custom error handler with $app->error($customHandler) that will be invoked during production (whose one argument will be the caught exception).\nFor now, I'd recommend you run in production and define a custom error handler that interfaces with your current setup. In a future version I can introduction an app setting that would disable Slim's built in error handling. It would be on by default.\n. I'm not entirely sure I understand your question. Are you asking how Slim does this internally? Or how you can do this yourself? I think this is better suited for the support forum. Closing this out. Please open a thread at http://help.slimframework.com.\nBest,\nJosh\n. Thanks. I don't have a Windows machine to test on, so I rely on users to make sure it works as expected. Will get this pulled in shortly!\n. Pulled into the release-1.6.1 branch. Will merge into master by this weekend. Closing (not sure why GitHub didn't automatically).\n. No worries. I'll get this pulled into the next point release.\n. This is done. You can find the new TimestampLogFileWriter in the Slim-Extras repo here:\nhttps://github.com/codeguy/Slim-Extras/blob/master/Log%20Writers/TimestampLogFileWriter.php\nFor now, you can only use this new custom log writer with the release-1.6.3 branch until 1.6.3 is officially released.\n. I believe that fetch is a more intuitive method name compared to render. However, this was already addressed in an earlier pull request. I've added a deprecation warning to Slim_View::render (it will be made protected in a future release). Thanks!\n. Thanks! Pulled into the release-1.6.3 branch. Will roll into master later this week.\n. Thanks for the additional info. I'll investigate this week and include a fix, if necessary, with 1.6.3.\n. Can you send me the output of phpinfo() on your machine? Email to info [at] slimframework [dot] com if you'd rather not post here. I'm not seeing any issues on my machine so I'm wondering if it may be caused by some ob default settings with your local PHP install. I still want to make sure this is fixed, so I'll try to setup my local environment as close as possible to your own.\n. So far I've been unable to replicate this. Any other info you can provide would be great. I'll keep looking, but so far no luck. If anyone else can replicate this, feel free to jump in.\n. I can't duplicate this... closing this out for now. Please move discussion back to the support forums until we can reliably replicate this so that it may be fixed if necessary.\n. Thanks! Cherry-picked this into the release-1.6.3 branch. Will roll into master sometime this week.\n. Can you post a gist of your code?\n. Ok. The problem is that you are always calling the downstream middleware which will override the 400 response you are setting in your middleware. You need to update your conditional so that:\nif ($env['slim.input'] == null) {\n    $this->app->response()->status(400);\n} else {\n    $this->next()->call();\n}\nOnly call the downstream middleware if the request is as you expect.\n. Yep, that, too. Middleware is run around the Slim application. Hooks are run within the Slim application. Middleware should only be used to tweak the request and response objects before and/or after the Slim application is run. You should only echo content within a Slim app's route callbacks. Glad you figured it out!\n. @urosgruber The Method Override middleware does not look at the environment's 'slim.input' variable. It only inspects the environment's 'REQUEST_METHOD' variable. Perhaps I misunderstand what you are trying to say.\n. Thanks for the details. I'll get a fix pushed up soon.\n. Even though I added a minor solution to avoid this potential error, I'm not convinced this is a bug... if you expect your HTTP request to contain a JSON body, your request should have the application/json content-type header. Slim will only parse the request body with parse_str (or mb_parse_str) if the request content type is application/x-www-form-urlencoded.\n. I prefer this be optional middleware. Any configuration params will be on the middleware instance itself. Is this all you need to know? Let me know if you need further info. Thanks!\n. Also, this middleware will be added to the Slim-Extras repository and not into the main repository. That repo is currently undergoing reorganization, so feel free to talk with @silentworks about it, or you can send your pull request on this repo, but I'll need to manually migrate it to the Slim-Extras repo. I'd encourage you to send the pull request to the Slim-Extras repo so that you receive proper credit for your work.\n. Interesting. If you can send a pull request, that'd be great. Otherwise I can get to this in the next point release after 1.6.3 is released.\n. I'm not an nginx expert so there's only so much I can suggest. However, I'm closing this issue out since it's not a problem with the framework itself. Post this question at http://help.slimframework.com/ and you should receive help there from other Slim users.\nBest regards,\nJosh\n. Pulled into release-1.6.3. Thanks!\n. This is something that should be abstracted into its own custom View... this is really the entire purpose of custom Views (e.g. TwigView, SmartyView, and so on).\n. This issue is isolated to the develop branch only. It does not affect other branches.\n. Done.\n. This is done\n. Thanks! Big help. Your code assumed PHP 5.4+ (when E_STRICT was merged into E_ALL)... I tweaked the code so that it did not make that assumption.\n. Please move this to http://help.slimframework.com/. You're more likely to receive more input there. I prefer to keep the Issue Tracker for issues that are immediately actionable. Thanks!\n. This is not a framework issue but a local installation-specific issue. Please move this to http://help.slimframework.com instead. Thanks!\n. I've been on the fence about this feature for a while. I recently closed a duplicate issue in favor of this one for its more DRY code. However, I've decided not to include this feature for these reasons:\n1. It seems useful to, and has been requested by, only a small handful of developers\n2. It duplicates native PHP syntax already available (e.g. \"Class::method\")\n3. It may cause confusion or arguments among developers familiar with other language syntaxes\nClosing.\n. Cool. Spending most of today on Slim. Will look for your updated code later today.\n. I'm not entirely satisfied with this implementation. Nothing wrong with the code, I just think that it's too messy (as a result of pre-existing implementation) and needs to be simplified, even if that means refactoring elsewhere. Let me think on this some.\n. Take a look at https://github.com/codeguy/Slim/commit/148cd1b52024fc0415775d38ffea59b9e434b73c and see if that does what you need. It works for me and has minimal changes to the codebase.\n. Routes are not known until iterated when the Slim application itself is called. Currently, middleware will not know. I will update this method to return false in your scenario.\n. Give me a few days and I'll see what I can do.\n. See https://github.com/codeguy/Slim/commit/1719b40112bed2f847115826ae1743cc866aaf4f\nYour change caused a lot of errors, primarily Only variables should be passed by reference.\nSo I changed it slightly, but the result is still the same.\n. Pulled into release-1.6.4 branch.\n. I'm working on this now. I assume the value of $param_name would be an array, correct? A simple setParam($name, $value) setter method should be sufficient.\n. Index order is going to be an issue. Will tweak this afternoon.\n. Some additional proposed code. This allows you to completely replace the given params, or to set a single param by index. If you choose to set or get a param by index, a param must exist at that index else an exception will be thrown.\n```\nRoute {\n    protected $params = array();\npublic function getParams () {\n    return $this->params;\n}\n\npublic function setParams ( $params ) {\n    $this->params = $params;\n}\n\npublic function getParam ( $index ) {\n    if ( !isset($this->params[$index]) ) {\n        throw new InvalidArgumentException('Route parameter does not exist at specified index');\n    }\n    retun $this->params[$index];\n}\n\npublic function setParam ( $index, $value ) {\n    if ( !isset($this->params[$index]) ) {\n        throw new InvalidArgumentException('Route parameter does not exist at specified index');\n    }\n    $this->params[$index] = $value;\n}\n\n}\n```\nBecause Route parameters are tightly coupled to the Route pattern, I'm not too concerned about not providing an interface to add or remove params. I'm only concerned about changing values of existing params.\n. The redirect method is designed to run only in application route callbacks... not from middleware. I'll need to refactor some code before this will be possible. Middleware is meant to act on the raw request and response objects.\nMy recommendation is to manipulate the Response object like so:\n$res = $app->response();\n$app->status(301);\n$app['Location'] = '/foo';\nIf you do redirect from middleware, you should not call the downstream middleware.\n. That's fine, too. It's a helper method on the Response object that does the same thing (I forgot to mention it above). But the point being that many of the Slim instance's helper methods that affect application flow (e.g. halt, stop, redirect) are intended only for the primary Slim application's route callbacks \u2014\u00a0not middleware. Middleware is an opportunity to inspect and tweak the Request and Response objects before and after the application is called.\n. Brian's suggestions may help you. You might also write custom middleware that, after invoking the downstream middleware layer, inspects the Request URI and, if it matches your route URI, you can fire off whatever long-running process you need.\nI'm going to close this out since it is not an immediately actionable issue with the framework itself. You are more than welcome to continue this thread at http://help.slimframework.com/... you'll likely get more responses there from fellow Slim users.\nBest,\nJosh\n. Thanks! Pulled into the release-1.6.4 branch.\n. Closing. See #332.\n. This feature is already available in v1.6.4. If you are having issues, please open a new thread at http://help.slimframework.com/.\n. This is a good idea if your Slim app requires localization. But this is definitely not something that's going to be in the core. It's a great candidate for the Slim-Extras repository, as @miraage said. Please submit a pull request to Slim-Extras and we'll review it.\n. This will not be added to the core. It may be a viable candidate for Slim-Extras. Please submit a PR to Slim-Extras with your proposed auth middleware.\n. Please move major changes into separate pull requests. For example, one PR for locals, one PR for auth, one PR for travis. Unusable as is.\n. Please move to http://help.slimframework.com/.\n. I'm not entirely sure what example page you are asking for. You'll find more help for this issue on the forum.\n. Closing in favor of #335.\n. Seems like you have a resolution. Closing. Please move further discussion to http://help.slimframework.com/.\n. Slim supports 5.2+ and cannot rely only on an anonymous function just yet. Replace with 5.2+ compatible implementation. Slim will go 5.3+ in version 1.7 or 1.8.\n. ~~Seems like you're using a similar pattern to Sinatra (e.g. [^/]+). Keep in mind that you should also break on # and ? for final url segment~~\nEDIT: Realized this is not necessary since this method is given a pre-sanitized version of the resource URI that will not contain the # or ? characters.\n. Can you submit pull request?\n. Also, be sure you are working from the release-1.6.5 branch which includes additional code for matching wildcard characters.\n. Ok. I'll likely have 1.6.5 released by then. I'll get this pulled into 1.6.6.\n. I prefer that both named parameters and wildcard placeholders be provided to the route callback as arguments. Otherwise, it becomes cumbersome to fetch wildcard values in the route callback.\nFor your second suggestion using getWildcardParams, can you provide an example demonstrating how that should be used in practice?\nI propose we use something like this:\n$app->get('/test/:foo/*/:bar', function ($foo, $splat1, $bar) {\n    // Do something \n});\nFor a request URI \"/test/one/two/three/four\":\n- The arg $foo will equal one.\n- The arg $splat1 will equal array('two', 'three').\n- The arg $bar will equal four.\n. If named wildcards are easier, I'd still use the '*' character to designate wildcard parameters (not 1:1 with regex connotation, but that's fine). In this case:\n$app->get('/test/:foo/:splat*/:bar', function ($foo, $splat, $bar) {\n    // Do something \n});\nFor a request URI \"/test/one/two/three/four\":\n- The arg $foo will equal one.\n- The arg $splat will equal array('two', 'three').\n- The arg $bar will equal four.\nThe only benefit to using a named param is that you can easily fetch the splat's array value via custom named key from $route->getParams().\nI think I may prefer this method, really. Best of both.\n. You'll want to pull and rebase against a few tweaks I've pulled in with #338.\n. I think that's a reasonable compromise. Go for it. Be sure you rebase against changes pulled in with #338 though.\n. Ok. I still think that it is far too difficult to fetch the wild card parameter values if they are not provided as arguments to the callback. Can you implement both our suggestions? Use named wildcard parameters with \"+\" suffix, but also pass each wildcard parameter's values as arguments to the callback?\n. The template var is actually used for wildcard support in v1.6.5. For example, suppose you have a route with pattern /foo/*/*/bar. This will not work with the urlFor helper method. So route objects will be given a new setTemplate method to store an override of the route pattern to be used with the urlFor helper (e.g. foo/:paramName/bar). This was the simplest way I could think of. If you have an alternative suggestion, let me know.\n. It's entirely flexible before it's merged. I like your suggestion, but not a fan of the long names (e.g. slim_route_wildcardN). What if we went with \"splat\" instead (like Sinatra). That'd be easier on the fingers. But I do like your solution better than what's in place.\n. You want to tackle this? Else I can get to it later this evening or mid-week. Moving into a new home tomorrow and Tuesday, so not sure if I'll be able to code much until Wed.\n. Ah, must have been tired last night ;) Thanks. Will get this pulled in today.\n. Update composer.json autoloading, too.\n. Please send a new PR to be pulled into release-1.6.5. Send future PRs into 1) the current release-* branch or 2) the develop branch.\n. Closing. Please resubmit new PR to release-1.6.5 branch using strict equality.\n. I'm not an expert with Apache rewrite rules. Can you explain what your changes do line by line? I think what I have satisfies most cases though.\n. Closing. Send new PR to the latest release-* branch. Include explanation of rewrite rules there.\n. No idea why this wasn't in there already :) Thanks. Will definitely get this pulled into 1.6.5.\n. Pulled into release-1.6.5 branch.\n. Pulled into release-1.6.5\n. You're more than welcome to submit a PR to improve this. If you'd rather I make these changes, just let me know. I want you to get credit for your improvements.\n. Sounds good.\n. Did you send a separate PR for this?\n. Closing. You should set Slim app mode in environment variable or during Slim construction. Docs have been updated to clarify this.\n. This looks great. I'll pull this in this afternoon.\n. The Router::testRouterUrlFor unit test fails. Can you refactor the Router::urlFor method to work with your new wildcard implementation?\n. That second commit only updates the unit test itself... does not touch the actual method. Did you rebase before committing?\n. No worries. I figured you'd forgotten to commit something. Just pulled in the additional fix. Looks great! Appreciate your help.\n. I don't see any issues. But I need a few more details to help you troubleshoot:\n- What is your virtualhost document root?\n- What exact URL do you request?\n- What exact URL does it redirect to?\n. For now I recommend you post your question to the Slim support forum at http://help.slimframework.com/. If we find that it is indeed a Slim issue, I'll re-open a ticket for it here.\n. Will investigate. For now, use an alternative character (e.g. underscore, pipe, or dash)\n. I've tested this here and Slim appears to work fine for me with the built-in 5.4 web server. Granted, you don't have .htaccess so you have to include \"/index.php\" in your request URLs. But it seems to work just fine here with periods in the URL. I'm using the develop branch. Which branch are you using?\nAlso, you may want to do a print_r($_SERVER) to see if the request URLs are getting malformed before they hit the web server. As is, I can't duplicate. Closing this out. Please open a thread at http://help.slimframework.com/ and I'll continue to help you out there.\n. Closing this PR. Please re-submit with fixes applied to Slim_Environment. I'll research this more here, too, running the built-in PHP server. Also, I recommend you URL-encode periods as they may be construed with a different meaning if left un-encoded. Try that first.\n. I'm a bit confused. I encourage you to revise your application directory structure to remove your dependency on mod_rewrite magic. The physical path to your public subdirectory must be in your application's HTTP request URI else it will break Slim's routing.\nI think you're better off posting your question to the Slim support forum at http://help.slimframework.com/.\n. Pulled into develop. Will merge into master with next point release with a few other PRs.\n. Yep. Make sure you use UNIX-style LF (line feed) as EOL character.\n. I'm not a rewrite wizard. Can you explain your .htaccess changes a bit more?\nThe Slim::getInstance method was never intended to construct. Instead, it was for injecting a Slim instance within a route callback for those using PHP < 5.3. For PHP >= 5.3, I recommend currying the $app instance variable into route callbacks with use. I really want to de-emphasize the getInstance method anyway at this point.\nClosing. Please re-submit separate PRs for each change.\n. Available this afternoon to chat about this. Want to make sure we find the best solution before merging. Hop online whenever.\n. Hmm. The source markdown seems fine. Probably something going awry when generating the HTML. Will have a look.\n. Also, the documentation will soon be moved into its own GitHub Pages repo. So I'm not going to worry too much about this.\n. Thanks for your work on this. I'm not going to pull it in as there are a few things I want to do differently, but I do like some of the ideas you're using. I'll likely cherry pick some things from this soon and provide credit where/if necessary.\n. No news to report yet. I've been swamped at the day job so haven't had much time to do much of anything this year so far.\n. No, I haven't had any time to sit down and play with the design of it. I'm perfectly happy to delegate that out to others willing and able to implement it well.\nIf you'd like to spearhead the effort, maybe in conjunction with @njh above, that'd be great. Please discuss and solidify your approach here in writing before diving into code though. But that'd be great if you're interested.\n. Nice! I don't see why we should reinvent the wheel to parse the raw headers. The only new thing this introduces are dependencies. But I'm fine with that.\n. This is available in the Slim-Middleware repository here:\nhttps://github.com/codeguy/Slim-Middleware\n. You already have that ability. Set application setting debug to false and then specify your own handler like this:\n$app->error(function (\\Exception $e) {\n    // Do something\n});\n. Pulled into develop. Will merge into master in next point release very soon along with a few other PRs.\n. Send PRs against the develop branch, please. Day job has kept me busy the past few weeks. Will start pulling fixes in tomorrow.\n. libmcrypt is a system requirement. I want to reduce Slim's global namespace footprint which is why this code was originally removed.\n. I've fixed this in 1.6.7. Pull the latest code and it'll work again as it did before.\n. Closing this PR as it's unusable. Consider it a learning experience :) I went through the same thing. As a project maintainer, it's easiest for me to receive a separate PR for each unique change you want to make. This means I can pull in a PR for one thing, and potentially reject or delay a PR for another thing.\nFor each change you want to contribute, please create a separate branch just for that one change. Then send a PR based on that separate branch.\nDoes this make sense? If not let me know and I'll try to clarify further.\n. This is already accomplished with the debug application setting. If debug is true, Slim will rely on the Slim_Middleware_PrettyExceptions middleware. If debug is false, Slim will rely entirely on the custom application error handler.\n. Can you re-do this? Don't have much time to spare today unfortunately :(\n. This is definitely something I will consider. Up to this point, Slim has supported PHP 5.2 and newer so Pimple was not an option. Slim 2.0 will move to 5.3 and newer which opens up all sorts of new possibilities. Leaving open and marking for 2.0 milestone.\n. So this is happening. I've got a working prototype on a local branch. Super excited about this. More info coming soon.\n. Working prototype available in the \"feature-ioc\" branch. Feel free to have a look and submit improvements. All unit tests pass and it should be backwards compatible.\n. Pulled in your changes. This feature will be merged into the develop branch soon for the next upcoming point release.  Closing this out.\n. Sorry. Getting merge conflicts. Can you rebase against the latest code in the develop branch?\n. I think this concept can be abstracted further for multiple content types. Content negotiation and accept-header parsing is on the todo list. Will revisit this suggestion in the near future.\n. I don't see that error here. What version are you running? Can you post the errors reported by phpunit?\n. Interesting. I'm running PHP 5.4.3 and PHPUnit 3.6.12. Only differences are I'm on a newer version of PHP and don't have the Suhosin-Patch applied. Oh well. I've pulled your fix in. Thanks!\n. Thanks for your work on this. Let me play with it some this weekend and see what I think.\n. I agree only the Slim class should implement ArrayAccess and Pimple-like features. Applying to settings and middleware is just too much over-engineering. I don't think we need everything that Pimple provides, just basic parameter and object injection, and sharing/singletons.\n. I can do this now. Would you like to send a pull request though? That will give you credit for the fix. Let me know. Be sure to send the pull request to the develop branch.\n. Never use the built-in PHP server for production. But for development, absolutely. In the same directory as your Slim app's index.php file, run this bash command:\nphp -S localhost:4000\nOpen localhost:4000 in your browser and you'll see your Slim app. That server won't support rewrite rules, so you'll have to include the /index.php in your URLs.\n. The redirect method is intended for use only within route callbacks. If you need to issue a redirect in middleware, you'll want to work with the response object itself. Fetch it with $this->app->response().\n. Tests pass here. What version of PHPUnit do you have? Running 3.6.12 here.\n. Closing. Please resubmit against the develop branch. I also prefer to use \"name\" instead of \"application-name\".\n. Yep. I'm on it. Packagist indicates it knows about latest version, but in reality it downloads older version. Not sure why.\n. I've added that setting to the composer.json file. Packagist still fails. Will keep trying.\n. The problem is not isolated to Slim. Follow this issue I've opened for further updates:\nhttps://github.com/composer/composer/issues/1090\n. Closing. Please resubmit against the develop branch if this is still valid. Be sure you rebase against the latest code in the develop branch. The built-in Slim autoloader uses the suggested PSR-0 autoloader so I'm hesitant to make any changes.\n. Good catch. I'll get it re-added.\n. Done. Added a link to main menu.\n. I'm happy with how rendering is delegated to custom views at the moment. I admit template paths can likely be decoupled from the Slim class and moved into the View classes. Will need to make sure this doesn't break backwards compatibility. Should get to this soon.\n. So status on this is... I agree with you in theory but any changes now will likely break things. So this will likely wait to the next major point release.\n. This is addressed in https://github.com/codeguy/Slim/tree/release-2.4.0\n. I agree. Flash messages will soon be getting an overhaul that will better decouple flash messaging from the Slim object... I already have a developer working on it so look for this within the next point release or two.\n. Most of the time this would seem fine, but technically you can do other things after calling render(), too, that may affect the output buffer. Is that likely... no. But still possible. It works as is, so no need to fix something that isn't broke.\n. @earlPeriscopic Can you inspect the raw HTTP request and post that here?\n@tyd Slim apps have that middleware added by default.\n. Yep. I'll double-check tonight to make sure it works correctly. Right now, make sure this isn't a simpler issue related to routing.\n. Your HTTP request for POST /project/admin/html/potential/384 does not match any of your application's routes.\n. Your request URI still must match one of your app's routes. That header only affects the request method, not the URI.\n. Is your Slim app installed in a subdirectory?\n. No worries. Glad you got it fixed.\n. I'm working on this now and will be moving this from GitHub Pages (as it is now) to a one-page Statamic website.\n. I've reverted the documentation back to one page. You can now easily search it with the browser's built-in Cmd+F search.\nhttp://docs.slimframework.com/\n. Short term, I will likely add a $app->any() method that will map the given resource URI to all HTTP methods. Long term, I will likely look at implementing resource controllers in separate standalone classes. I'm not entirely sure on the exact implementation, but that's something that can be fleshed out in the support forums.\n. This will be implemented in upcoming content negotiation features.\n. @barlowm I'm not able to duplicate the issue here (Mac/Apache/PHP 5.4.3). That being said, I don't doubt that you're seeing an issue. I'm wondering if something is happening to the request URI between your web server and PHP. Can you var_dump($_SERVER) before you instantiate Slim and see if the request URI is what you expect?\n. Closing this out. Please move this to a new topic at http://help.slimframework.com/ and I'll investigate further there.\n. I guess I'm not too clear on why you need this or what you are trying to do. Please open a discussion on the forum if you haven't already and we can discuss.\n. Doesn't this nullify using namespaces? It's easy enough for the end user to manually do this if they don't want to type \\Slim so much. Not sure this is an assumption we should make.\n. Can you rebase against the latest code? This commit assumes the 405 handler was added.\n. An earlier PR has made this unnecessary. Removed the entire concept of a 405 response in #418.\n. Hmm. I am not seeing any issues with this. Please open a thread at http://help.slimframework.com/ and post example code and information about your web server setup so I can troubleshoot further. Will open a new issue for this if necessary when we narrow down the problem.\n. I don't want to include the actual Web.config file in the repo. Your update to the README file should be sufficient. Can you resubmit this PR with only the README change?\n. All of these changes look great. Please re-submit this PR to the develop branch.\n. You can do this already in the slim.before and slim.before.dispatch hooks. In either of these hooks' callbacks, fetch the View object and use appendData.\n. This will be a breaking change that will require apps to be updated to continue working. So this will likely wait until the  next major point release.\n. Yep this is done.\n. Did you rebase against the latest develop branch?\n. Ok I'll merge locally and see what's up. Thanks!\n. Will investigate. Nothing has changed on our end, so it's likely something with Packagist.\n. I was able to install Slim and Slim-Extras with composer as expected. Are you still having this issue?\n. What web server are you using?\n. Thanks for the info. Will try to get a fix into a point release as soon as I can, definitely in a 2.x release.\n. I've been experimenting with Apache, nginx, and hhvm today. This snippet of code seems to work well in all three, with or (for Apache) without rewriting.\n$scriptName = $_SERVER['SCRIPT_NAME']; // <-- \"/physical/index.php\"\n$requestUri = $_SERVER['REQUEST_URI']; // <-- \"/physical/index.php/virtual?abc=123\" or \"/physical/virtual?abc=123\"\n$queryString = isset($_SERVER['QUERY_STRING']) ? $_SERVER['QUERY_STRING'] : ''; // <-- \"abc=123\"\nif (strpos($requestUri, $scriptName) === false) {\n    // With rewriting\n    $settings['SCRIPT_NAME'] = str_replace('/' . basename($scriptName), '', $scriptName);\n} else {\n    // Without rewriting\n    $settings['SCRIPT_NAME'] = $scriptName;\n}\n$settings['PATH_INFO'] = '/' . ltrim(str_replace(array($settings['SCRIPT_NAME'], '?' . $queryString), '', $requestUri), '/');\nI like this code because it is much simpler than Slim's current way of parsing the request url. Can you all verify? I was intending to use this code in 3.0, but if it is stable I'll get it into the next 2.x point release.\n. I lied, sort of. It appears that hhvm does not set the SCRIPT_NAME server variable correctly. For the above code to work, you will need to add this block to your hhvm configuration virtual host block:\nServerVariables {\n    SCRIPT_NAME = /index.php\n}\nAnd that works.\n. Or we could derive the proper script name from other available server variables like this:\nstr_replace($_SERVER['DOCUMENT_ROOT'], '', $_SERVER['SCRIPT_FILENAME'])\n. This is resolved in the release-2.3.3 branch and will be resolved in the develop branch in a few days. I've talked with the hhvm devs, and they are aware that the SCRIPT_NAME server var is set incorrectly... that will be fixed in a future hhvm point release.\n. This is addressed in the develop branch.\n. Doh! Thanks for your help. Merged into develop. Not sure why GitHub did not close this out automatically.\n. Closing. Please re-submit to the develop branch.\n. Thanks! Can you please re-submit to the develop branch?\n. Sorry for the wait! Merged into the develop branch. Will become available in the next point release later this week.\n. Closing in favor of https://github.com/codeguy/Slim/issues/398\n. Slim will be getting an IoC container really soon which should make it super simple to define custom router and route objects immediately after app instantiation. This way you can simply instantiate your subclass inside of the router or route's Closure definition.\nThoughts?\n. Sure. You would define a custom Router for Slim to use like this:\n<?php\n$app = new \\Slim\\Slim();\n$app->container->singleton('router', function ($c) {\n    return new \\My\\Router();\n});\n// Define routes\n$app->run();\nThis assumes that \\My\\Router implements the same interface as \\Slim\\Router, but I think that's a safe assumption to make.\n. I agree. Good point. But do you otherwise approve of my approach?\n. Closing in favor of https://github.com/codeguy/Slim/issues/398\n. There are plenty of third-party libs that will do this... look at Guzzle or Resty.\nhttp://guzzlephp.org/\nhttps://github.com/fictivekin/resty.php\nBoth can be integrated with your Slim app.\n. Please send all PRs to the develop branch.\n. @paulyg Where in your Slim app is the exception thrown? Is it thrown from within a route callback? Or from one of your middlewares?\n. Closing for inactivity.\n. Please resubmit PR to the develop branch.\n. I've decided to leave this as is for now. I may revisit in the future.\n. Documentation will be updated to explain the risk of using client-side storage. Also, a future point release will add a new way to activate and use sessions (with a native or custom save handler) to avoid relying on client-side storage.\n. I'd prefer to separate this into two new methods: getConfig($name = null) and setConfig($name, $value). Currently, there is the one config() method that acts as both a getter and a setter. But I'd like to separate this out. Would you be interested in leading this up?\n. Configuration will be changing interfaces in 3.0 release making this unnecessary.\n. I haven't been able to duplicate this. If you want to post some example code to the support forum I will be happy to look over it for you.\n. @gcatlin This sounds fine. Send PR(s) when ready. Be sure you work from the latest code in the develop branch.\n. Please send all PRs to the develop branch.\n. This was removed to simplify things. I did not want to add yet another function to register a handler for 405 responses (like we have now for Not Found and Error responses). I do intend to improve this in the future, but for now it's limited to 404 and 500 handlers.\n. Please submit PRs to the develop branch.\n. I think there's a more elegant solution to be had (this applies to my current implementation). My own current implementation is too tightly coupled to \"not found\" and \"error\" handlers and can be abstracted to better support other  scenarios, such as \"forbidden\", etc. If you want to explore how to do this that'd be great.\n. Seems like it. I can look into this or you can send over a fix... let me know which you prefer so we don't duplicate effort.\n. Thanks! I'm 5.4 only now so appreciate you catching these.\n. I think there is a better solution to assign session data to a view... this process will become much easier very soon, too, with a new Slim interface to session data.\n. @danilobuerger Doing as you suggest would break existing expectations. If I were to change this behavior, it would be for a future major point release. For now, I encourage you to pass an array of messages for a single key.\n. Closing out in favor of https://github.com/codeguy/Slim/pull/497\n. This is not something that will be added to the core repo. You are welcome to create a custom view and submit a PR to the Slim-Extras repo.\n. Thanks!\n. Fix merged into https://github.com/codeguy/Slim/tree/release-2.4.0\n. Please resubmit PR to the develop branch.\n. I'd prefer to let each existing class change its behavior by injecting an appropriate callable or closure.\n. I agree it's messy and not very DRY short of using the call_user_func_array function. But the solution is just as messy. I'm going to leave as is if only for obviousness and legibility. Thanks for bringing this up though. It is an issue, but one I'd rather live with for now.\n. Sounds like a server configuration issue. Are you certain you are using the recommended .htaccess file (I assume you are on Apache)? You're better off posting this question to the support forums.\nhttp://help.slimframework.com/\n. Happy to hear you got it worked out!\n. Closing. Please move this to the support forum at http://help.slimframework.com.\n. I think property overloading is fine if it will help improve compatibility with Mustache. Go for it. Send a PR when ready.\n. Instead of this:\nif (!empty($default)) {\n    return $default;\n} else {\n    return null;\n}\nWhy not just do this:\nreturn $default;\nIf you want to make this change (or post why you would not do this), I'll get this pulled in. Also, please resubmit to the develop branch.\n. I like where you're going with this. But I feel like this functionality is best kept outside of the core framework. This would be a good addition to the Slim-Extras repo, perhaps in a separate introspection lib. The core framework, as you've demonstrated, already provides the interface necessary to extract and display this information.\nIf you want to approach it from this angle and submit a PR to the Slim-Extras repo, I'd be glad to pull that in for you.\nAlso, make sure your submitted code is PSR compliant.\n. This has been an interest of mine for quite a long time, but I haven't really settled on an implementation that I like. It's on the drawing board, but there are other higher priority changes that need to happen first.\n. I never said that was content negotiation, but it's a makeshift solution. As is inspecting the Accepts header in the request. Right now Slim doesn't handle CN. For now, your Negotiation lib is certainly a good third-party solution.\n. This has definitely been put on the backburner for a while now. My apologies for that. I think it is probably best to implement this in a middleware layer instead of putting it in the core code. @willdurand I don't have time to do this, but you are welcome to head this up if you are interested and have time. You can build this out in the new https://github.com/codeguy/Slim-Middleware repository, or you can keep it in a local repo and push it up to Packagist under the \"slim\" namespace. Let me know whatever you think is best.\n. And feel free to source the previous pull request or to require (and credit) your own Negotiation library. No sense reinventing the wheel.\n. @willdurand Sounds great. Looking forward to see what you come up with.\n. Closing. Andrew, I'd like to better decouple Flash messages from the Slim object.\n. Currently Slim is built with the assumption that you are using a web server in front of it... you may be able to get it working as you describe, but I cannot guarantee it will work since that is currently not supported.\n. I'm going to leave it as is right now.\n. Yes, for now.\n. You don't need to use middleware to send a response to an OPTIONS request. You can create a GET or OPTIONS route like any other route:\n$app->get('/foo', function () { ... });\n$app->options('/foo', function () { ... });\nEither of these will return the appropriate response headers. The method you demonstrate above is also a valid approach, except that you should NOT invoke exit; instead, simply do not invoke $this->next->call(). If you invoke exit, Slim will not complete the app lifecycle.\n. Middlewares must implement a specific interface for them to run correctly.\n. This is actually already implemented and should be available in the develop branch. It'll get merged into the next point release some time soon.\n. Closing. See duplicate issue here https://github.com/codeguy/Slim/issues/398\n. Thanks!\n. Please separate into different PRs by using different branches for each new feature. Also submit to the develop branch.\n. Can you separate your changes into different pull requests?\n. I haven't touched this at all yet.\n. I'm hesitant to couple a third-party lib to Slim... Whoops is a component just like Slim. You could easily write your own custom error handler that integrates with Whoops and register the handler with Slim.\n. Can you clarify what issue you are trying to fix?\n. There's certainly some overlap and I think they definitely could be merged. Will take a look at your suggestions tonight. Thanks!\n. You may as well overload __set while you're at it. Go ahead and do that and I'll merge. It should not conflict with anything since property overloading and array access are separate things that will accomplish the same goal.\n. Thanks for this. I've not heard of Coveralls before. I'll have a look.\n. Thanks for the heads up. We've run into this before and adding a \"lang\" attribute to the HTML element did not seem to fix it (although this issue may have been fixed in a recent build of Chrome). I've re-added the lang attribute so hopefully that will fix it. The issue was narrowed down to one of the contributor names.\n. I've simplified Slim's built-in custom error handler (changes pushed to develop branch for now), and it will respect your error_reporting level. Bear in mind that PHP will always report certain types of errors that cannot be handled by the custom error handler. Reference:\nhttp://php.net/manual/en/function.set-error-handler.php\n. @Addvilz Gotcha. I don't want to go to that extreme to handle errors... Slim will only handle errors within the scope of its existence... it will handle its own errors and then cede control back to the previously registered handler.\n. Please submit PRs to the develop branch. Thanks!\n. Nice work!  Will get this into 2.4.\n. What do you think about changing the method name sendProc to sendProcess... I'm less concerned about brevity and more about obviousness.\n. Haven't forgotten about this. This is next on my todo list. Hoping to get it pulled into the develop branch either tonight or tomorrow.\n. This is fixed. Thanks.\n. This should no longer be an issue.\n. A similar PR was already pulled into the develop branch recently. See:\nhttps://github.com/codeguy/Slim/pull/452\n. This is not possible yet. It is a feature I hope to include in the next major version.\n. I'd prefer not to overwrite the REMOTE_ADDR server variable. Also, \\Slim\\Http\\Request already compensates for IPs behind load balancers. See:\nhttps://github.com/codeguy/Slim/blob/master/Slim/Http/Request.php#L572\n. It's used in subclasses like \\Slim\\Http\\Headers and \\Slim\\Http\\Cookies.\n. I've found this approach results in the least amount of duplicate code.\n. Thanks. I think the skeleton repo may be out of date... I'll look into it.\n. This should be resolved by https://github.com/codeguy/Slim/issues/561 coming in 2.3.1 later this week.\n. Thanks! Cherry picked into https://github.com/codeguy/Slim/tree/release-2.3.1\n. Slim's log implements all of the PSR-3 methods. It does not technically implement LoggerInterface because it is not meant to be shared or used with other frameworks. It is only for Slim. You are more than welcome to override the Slim app's default logger with your own third-party logger, either via the app setting or using the new Resource Locator to inject your custom logger.\nAs is, your changes break unit tests since LoggerInterface is not available. I don't want to burden Slim with third-party dependencies since I still want to make it easy to use and install Slim manually, without Composer. You could copy the LoggerInterface definition into Slim's repo, but that creates a hard-coded dependency that will be obsolete should the fig-standards repo be updated in the future.\nLeaving this open in case others want to add to the discussion.\n. Thanks for the feedback. I do understand your situation, but you still imply that Slim's default logger is a separate component intended to be shared among other third-party components. Which is not what it is meant to be.\nIn all honesty, I'd rather remove Slim's built in logger and defer to more specialized, third-party components that you can inject into Slim using the new resource locator. Currently, Slim's core code does not rely on the existence of a logger. The current \\Slim\\Log class only exists for your convenience while building Slim apps. I'd honestly recommend that you use a third-party component for logging.\nI think, if anything, your (perfectly valid) argument has helped me figure out where I want to steer Slim and how to further simplify its concerns.\nDoes this make sense?\n. See http://help.slimframework.com/discussions/problems/4765-fresh-slim-230-problem-with-twig-template-render\n. Ah thanks for the heads up. I'll get a fix in place soon.\n. Fix pushed to the release-2.3.1 branch. Should be merged into master later this week.\nhttps://github.com/codeguy/Slim/commit/baa1585005dcb347d8c4eee783ee0057f414eb38\n. Thanks! I'll get this pulled into 2.3.1 to be released later this week.\n. Thanks. Pulled into release-2.3.1 branch for now.\nhttps://github.com/codeguy/Slim/commits/release-2.3.1\n. I haven't been able to duplicate this issue on my end. Going to close this out. I encourage you, though, to post this question to the support forums where you may find more help.\nhttp://help.slimframework.com/\n. Sure. Go ahead and post that here and I'll run that tonight.\n. Thanks. I've cherry-picked these into the release-2.3.1 branch. Will be merged into master this week.\nhttps://github.com/codeguy/Slim/commits/release-2.3.1\n. Odd. Seems to be a merge error... it made it into develop but should have been in 2.3.0. Fixed now. Thanks for the heads up!\nSee commits here https://github.com/codeguy/Slim/tree/release-2.3.1\n. Can you post some sample code that demonstrates how you would use this in practice? I think that would help me get a better idea of what you are suggesting. Thanks!\n. I like where this is heading, but I'm going to wait on this feature for the next point release so we don't rush it out the door.\n. Version 3 (in develop branch) will be using Pimple as its container.\n. Update your older view so that it passes $this->data->all() rather than $this->data. Or update to the new custom view code in Slim-Views.\n. Did you want to send a PR, or would you prefer I do this? Just want to make sure you have a chance to receive credit for the fix. Let me know. Thanks!\n. Thanks! I've merged this commit into the release-2.3.1 branch. See:\nhttps://github.com/codeguy/Slim/tree/release-2.3.1\nIf you have time, can you submit a unit test for this change? If not I can get to that this evening after work. Appreciate your help on this!\n. I think it's fine. I'm less concerned about it being \"good\" and more concerned about it accurately testing this particular scenario.\n. Great. Merged into https://github.com/codeguy/Slim/tree/release-2.3.1.\n. Future versions of Slim will only support the custom Twig and Smarty classes. However, @anoxic's comment above is correct. You can fix the issue by changing $this->data to $this->data->all().\nThe View contains an instance of \\Slim\\Helper\\Set to store and retrieve template data.\n. Inject session object into constructor.\n. Not really. This will print out a literal HTTP protocol representation of the request and response, much like the raw request and response are displayed in Webkit Inspector.\n. Can you move your changes into the \\Slim\\Http\\Response::finalize method?\n. Sorry. You're right. I was reading through this too fast. I'll get this pulled in today!\n. Merged into release-2.3.3.\n. This let's Slim treat HEAD requests just like GET requests (per the HTTP spec)... if it is a HEAD request, the request body will be removed later in the app lifecycle by Slim.\n. No problem. Happy to help. Feel free to keep asking as you see things.\n. Fair point. Will try to improve this in the next major point release since this would be a breaking change.\n. I think this would be a good opportunity to learn how to do a basic unit test. You can look at some of the existing simpler unit tests for boilerplate.\nElse, feel free to submit a PR without unit tests and I can take care of those on my end when you have your code changes complete.\n. Sounds good!\n. Thanks. I'll have a look at your PR this weekend. You may be right about the circular dependency... I'll have to tinker with that and see if it fails. If it does fail, we may need to hold off on converting \\Slim\\Slim to a subclass of Set.\n. Closing.\n. I'm not terribly concerned about this. I'd favor simpler code instead of trying to prevent public access.\n. You likely need to use $view->all() to fetch an array of its data to pass into the template. This is resolved if you use the latest versions of Slim and Slim-Views.\n. This is resolved in the develop branch.\n. All of these keys should be present in the $_SERVER superglobal array. I've just tested this by creating a web server with php -S localhost:3000 and it works as expected. If you continue to have trouble, please open a new thread at http://help.slimframework.com/.\n. Picked into release-2.3.2. Will be merged into master very soon.\n. The environment class is largely being de-emphasized in favor of directly manipulating the request and/or response objects in middleware. The Environment class is a convenient encapsulation of the current $_SERVER variables, or a way to inject custom $_SERVER variables for testing purposes.\n. @marionebl Can you move your regex changes into the \\Slim\\Route::matchesCallback method? I'd like to keep regex preparation isolated in that method. Thanks!\n. This is fixed and will be included in version 2.3.2 https://github.com/codeguy/Slim/tree/release-2.3.2\n. Thanks. I've cherry-picked commit 25e1027 into https://github.com/codeguy/Slim/tree/release-2.3.2\n. I'm not sure I see the problem you are trying to solve. Can you post some code that demonstrates the problem?\n. Thanks! Cherry-picked into https://github.com/codeguy/Slim/tree/release-2.3.2\n. This has become moot. The develop branch has removed the PrettyExceptions middleware (rolling its functionality into Slim's default error handler). With version 3.0 (in development), you should override the default error handler and, considering the current application mode, choose to show your own debug info or not.\n. This is a documentation omission. The repo README is correct (see https://github.com/codeguy/Slim). Feel free to send a PR or I can fix this soon.\n. https://github.com/codeguy/Slim-Documentation\nThanks for the help!\n. And pulled. Thanks everyone. Closing this out.\n. Assigned this to @gmanricks. He'll review and pull in when appropriate.\n. Re-assigning to @akrabat for review.\n. Slim 2 is done. If we're going to pull this in, it'll be for 3 only.\n. I'm wondering if a simpler solution is to simply not encrypt cookie values in the \\Slim\\Middleware\\SessionCookie class and let Slim handle cookie encryption as it does already. What are your thoughts?\n. Cool. Feel free to update this PR or close and submit a new one and I'll get it pulled into 2.3.2 to be released soon.\n. Submit a PR to the 2.3.2 release branch. This class will be removed from the next major release and replaced by the new Session class. But this change is still very important for apps using the 2.* codebase.\n. I'd be on board with this, but I'm worried about the necessary complexity. If this were to happen, I'd prefer that Configuration be isolated into a separate \\Slim\\Configuration class. There are other things I'm focusing on now, but anyone else is more than welcome to take this on.\n. I'd move everything to do with configuration currently in the \\Slim\\Slim class (variables, methods) into a new \\Slim\\Configuration class and then instantiate the \\Slim\\Configuration class with the new DI container as $app->config.\n. Sounds good.\n. Toss it in the top-level folder with the other classes for now.\n. Closing this out since @designermonkey's config changes have been pulled into the develop branch for the upcoming 3.0 release.\n. Application names will be phased out soon.\n. Can you include a unit test for this?\n. Looks like your PR is just fine :) Can you post a link for additional reading on the topic of XEE attacks?\n. Thanks! Cherry-picked into https://github.com/codeguy/Slim/tree/release-2.3.2\n. Thank you! I've cherry-picked this into https://github.com/codeguy/Slim/tree/release-2.3.2\n. Please move this to a thread at http://help.slimframework.com/.\n. I'm not really in favor of this. Mandatory query params are the responsibility of the API and not the framework.\n. If you do not have URL rewriting, you can use Slim with /index.php/foo/bar?abc=123 instead.\n. We all learn something new everyday :)\n. Where do you see this? On which branch?\n. Pull the latest commits from develop. This was refactored yesterday.\n. This was just completed in the develop branch. Pull down the latest commits and you'll be good. Be sure you review the new \\Slim\\View interface.\n. I'm going to hold off on this and go ahead and roll out 2.3.2 later today or tomorrow morning. If you want to get a working PR in soon I can include it in the 3.0 release.\n. Which branch are you working from?\n. The \\Slim\\Middleware\\PrettyExceptions middleware has been vaporized. Instead, the PrettyExceptions error handling has been migrated into \\Slim\\App::defaultError(). This makes it much easier to override Slim's error handling.\n. Merged into https://github.com/codeguy/Slim/commits/release-2.4.0\n. Thanks! Will have a look later this week.\n. You bring up a good point. The \\Slim\\Environment class was originally static because it parsed and dealt with information readable only once (particularly the request body from php://input). However, I agree it should be changed. I'm not entirely sure it will need the NestedArrayHandler, but I'll keep that in mind if I see that it does. I'll assign this to me and take care of it later this evening.\n. This is done https://github.com/codeguy/Slim/commit/79790012c98837e75446e04a753fbe79d8c46409\n. @csdco Get in touch with @designermonkey, he's heading up the interfaces feature.\n. Can you post a very simple app that demonstrates this?\n. Implementing countable is fine. Send PR to the release-2.3.3 branch. Be sure you create your feature branch from the current master branch, NOT the develop branch... a lot has changed in develop that already resolves this.\n. Not for a few weeks at least.\n. Thanks for the info. I will investigate this further this week and hopefully include a fix in the next point release.\n. Can you confirm this works in the release-2.3.2 branch?\n. I believe this is fixed with this commit to be merged into master soon:\nhttps://github.com/codeguy/Slim/commit/2b7a9d80eea998688c54617be3284401271b0af9\n. Just so I am completely clear about the problem and how this solves it, can you post a sample curl command that demonstrates an HTTP request that causes the problem to occur?\n. Pulled into release-2.3.3 branch.\n. Looks like there are some merge conflicts. Can you resolve those first? There shouldn't be many... probably just inline documentation changes. Let me know if it's more significant.\n. I'm not sure I'm a fan of adding the custom classes as an additional argument to the App constructor. I guess it's more efficient than asking the end developer to inject the custom implementations with $app->foo = $app->share(function ($c) {});, but it feels messy to me. Thoughts?\n. Actually, I think asking the end developer to inject with $app->foo = $app->share(function ($c) {}) is reasonable and a more flexible solution, because who is to say that the overridden component does not require additional configuration (like the default Request and default Session components) in its own closure?\n. Can you expand on why it would be a problem for you? I'm not clear on your previous comment. I'm open to suggestions. Nothing really happens in the constructor as is beyond setting the default closures to be executed when/if the associated components are requested. The only overhead really is having to define the overrides after you instantiate the app.\n. Cool sounds good. Will merge tonight... have to head out to a high school band competition soon.\n. I can understand the desire for efficiency, but I'd rather favor configuration over convention. It's a write-once-and-done thing, so I'm not too big on mucking up the constructor for the sake of saving some keystrokes :) Anyway, heading out. More tonight.\n. Cool sounds good. I've let that fall a bit behind. Ok if I remove it?\n. Please resubmit to the develop branch.\n. If it is not relevant to the server, can you give me an example for when your change would be necessary?\n. It's also my understanding that fragments are not passed to the server... they are handled only by the HTTP client. You can ready this for more info:\nhttp://www.w3.org/TR/webarch/#media-type-fragid\n. @n3m0 When you telnet in, it looks like you are manually setting the raw request URL... whereas an HTTP client will strip that before it sends the actual request. For example, try this instead:\ncurl -X GET http://localhost/m.php#foo\nSince curl is an actual HTTP client (as opposed to telnet issuing raw HTTP commands), it will properly strip the fragment.\n. Please resubmit to the develop branch and I'll pull it in.\n. Do you all prefer to use the :: separator even though that notation is used elsewhere in PHP? Should we instead use @ to separate controller name from controller method name?\n. I'd prefer to keep it limited to a one-character separator, or the same character typed twice. Some options are:\n- Foo::bar (potentially confused with static method call)\n- Foo:bar (my favorite)\n- Foo@bar (like Laravel)\n- Foo>bar (not as visible on quick glance as other options)\n. @lrlopez I'm not sure whether it makes sense or not... that's really for the end developer to decide. But I'd prefer not to rule out the possibility. I think using : for non-static methods and :: for static methods is a good idea. Is anyone adamantly opposed?\n. Ok let's move forward with using a single : for instance methods and :: for static methods. @renatbilalov Can you go ahead and make this update, and also change [] on line 157 to array()? Will merge when these two changes are complete.\n. @designermonkey I understand that the code will always use object instances. What I'm saying is that the syntax it uses duplicates existing syntax used for static method calls. If we implement this, it will effectively override the ability to use static method calls for Slim route callables, and it may cause confusion. I'm not even sure it's good to use that syntax in documentation examples :) I personally find it confusing, purely because of PHP's :: static method call syntax.\n. Thanks! Merged into https://github.com/codeguy/Slim/commits/release-2.4.0\n. Closing. This is fixed in the current release.\n. Closing. This is fixed in the current release.\n. @petarov and @4g0st1n0\nCan you both post a copy of your Apache Alias configuration so I can duplicate your setup locally for testing? Include only the bare necessities. Also provide an example file system structure, too. I'm guessing the Apache Alias config is not providing the expected DOCUMENT_ROOT or SCRIPT_FILENAME environment variables.\n. Thanks! Testing now.\n. Ok I have this working locally. I will do some more testing tomorrow with nginx and hhvm. Should have you a solution very soon.\n. @4g0st1n0 Update your entire Slim/Environment.php file with the code below. Let me know how this works.\n```\n<?php\n/\n * Slim - a micro PHP 5 framework\n \n * @author      Josh Lockhart info@slimframework.com\n * @copyright   2011 Josh Lockhart\n * @link        http://www.slimframework.com\n * @license     http://www.slimframework.com/license\n * @version     2.3.3\n * @package     Slim\n \n * MIT LICENSE\n \n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n \n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n /\nnamespace Slim;\n/\n * Environment\n \n * This class creates and returns a key/value array of common\n * environment variables for the current HTTP request.\n \n * This is a singleton class; derived environment variables will\n * be common across multiple Slim applications.\n \n * This class matches the Rack (Ruby) specification as closely\n * as possible. More information available below.\n \n * @package Slim\n * @author  Josh Lockhart\n * @since   1.6.0\n */\nclass Environment implements \\ArrayAccess, \\IteratorAggregate\n{\n    /\n     * @var array\n     */\n    protected $properties;\n/**\n * @var \\Slim\\Environment\n */\nprotected static $environment;\n\n/**\n * Get environment instance (singleton)\n *\n * This creates and/or returns an environment instance (singleton)\n * derived from $_SERVER variables. You may override the global server\n * variables by using `\\Slim\\Environment::mock()` instead.\n *\n * @param  bool             $refresh Refresh properties using global server variables?\n * @return \\Slim\\Environment\n */\npublic static function getInstance($refresh = false)\n{\n    if (is_null(self::$environment) || $refresh) {\n        self::$environment = new self();\n    }\n\n    return self::$environment;\n}\n\n/**\n * Get mock environment instance\n *\n * @param  array       $userSettings\n * @return \\Slim\\Environment\n */\npublic static function mock($userSettings = array())\n{\n    $defaults = array(\n        'REQUEST_METHOD' => 'GET',\n        'SCRIPT_NAME' => '',\n        'PATH_INFO' => '',\n        'QUERY_STRING' => '',\n        'SERVER_NAME' => 'localhost',\n        'SERVER_PORT' => 80,\n        'ACCEPT' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'ACCEPT_LANGUAGE' => 'en-US,en;q=0.8',\n        'ACCEPT_CHARSET' => 'ISO-8859-1,utf-8;q=0.7,*;q=0.3',\n        'USER_AGENT' => 'Slim Framework',\n        'REMOTE_ADDR' => '127.0.0.1',\n        'slim.url_scheme' => 'http',\n        'slim.input' => '',\n        'slim.errors' => @fopen('php://stderr', 'w')\n    );\n    self::$environment = new self(array_merge($defaults, $userSettings));\n\n    return self::$environment;\n}\n\n/**\n * Constructor (private access)\n *\n * @param  array|null $settings If present, these are used instead of global server variables\n */\nprivate function __construct($settings = null)\n{\n    if ($settings) {\n        $this->properties = $settings;\n    } else {\n        $env = array();\n\n        //The HTTP request method\n        $env['REQUEST_METHOD'] = $_SERVER['REQUEST_METHOD'];\n\n        //The IP\n        $env['REMOTE_ADDR'] = $_SERVER['REMOTE_ADDR'];\n\n        // Server params\n        $scriptFilename = $_SERVER['SCRIPT_FILENAME']; // <-- \"/var/www/foo/index.php\"\n        $scriptName = $_SERVER['SCRIPT_NAME']; // <-- \"/foo/index.php\"\n        $requestUri = $_SERVER['REQUEST_URI']; // <-- \"/foo/bar?test=abc\" or \"/foo/index.php/bar?test=abc\"\n        $queryString = isset($_SERVER['QUERY_STRING']) ? $_SERVER['QUERY_STRING'] : ''; // <-- \"test=abc\" or \"\"\n\n        // Physical path\n        if (strpos($requestUri, $scriptName) !== false) {\n            // Without rewriting\n            $physicalPath = $scriptName;\n        } else {\n            // With rewriting\n            $physicalPath = dirname($scriptName);\n        }\n        $env['SCRIPT_NAME'] = rtrim($physicalPath, '/'); // <-- No trailing slashes!\n\n        // Virtual path\n        $env['PATH_INFO'] = substr_replace($requestUri, '', 0, strlen($physicalPath)); // <-- Remove physical path\n        $env['PATH_INFO'] = str_replace('?' . $queryString, '', $env['PATH_INFO']); // <-- Remove qs\n        $env['PATH_INFO'] = '/' . ltrim($env['PATH_INFO'], '/'); // <-- Must have leading slash!\n\n        // Query string (without leading \"?\")\n        $env['QUERY_STRING'] = $queryString;\n\n        //Name of server host that is running the script\n        $env['SERVER_NAME'] = $_SERVER['SERVER_NAME'];\n\n        //Number of server port that is running the script\n        $env['SERVER_PORT'] = $_SERVER['SERVER_PORT'];\n\n        //HTTP request headers (retains HTTP_ prefix to match $_SERVER)\n        $headers = \\Slim\\Http\\Headers::extract($_SERVER);\n        foreach ($headers as $key => $value) {\n            $env[$key] = $value;\n        }\n\n        //Is the application running under HTTPS or HTTP protocol?\n        $env['slim.url_scheme'] = empty($_SERVER['HTTPS']) || $_SERVER['HTTPS'] === 'off' ? 'http' : 'https';\n\n        //Input stream (readable one time only; not available for multipart/form-data requests)\n        $rawInput = @file_get_contents('php://input');\n        if (!$rawInput) {\n            $rawInput = '';\n        }\n        $env['slim.input'] = $rawInput;\n\n        //Error stream\n        $env['slim.errors'] = @fopen('php://stderr', 'w');\n\n        $this->properties = $env;\n    }\n}\n\n/**\n * Array Access: Offset Exists\n */\npublic function offsetExists($offset)\n{\n    return isset($this->properties[$offset]);\n}\n\n/**\n * Array Access: Offset Get\n */\npublic function offsetGet($offset)\n{\n    if (isset($this->properties[$offset])) {\n        return $this->properties[$offset];\n    } else {\n        return null;\n    }\n}\n\n/**\n * Array Access: Offset Set\n */\npublic function offsetSet($offset, $value)\n{\n    $this->properties[$offset] = $value;\n}\n\n/**\n * Array Access: Offset Unset\n */\npublic function offsetUnset($offset)\n{\n    unset($this->properties[$offset]);\n}\n\n/**\n * IteratorAggregate\n *\n * @return \\ArrayIterator\n */\npublic function getIterator()\n{\n    return new \\ArrayIterator($this->properties);\n}\n\n}\n```\n. Great! Glad to hear it. nginx worked fine as well. I'll get this rolled into a point update later today.\n. Closing. This is fixed in the current release.\n. @silentworks Don't feed the trolls\n. @lornajane Thanks! Very useful.\n. Please test using the experimental Environment.php class shown here:\nhttps://github.com/codeguy/Slim/issues/655#issuecomment-26771717\n. Closing. This is fixed in the current release.\n. Can you rebase your local branch against the latest develop branch and update your PR? As is I can't automatically merge.\n. Sorry for the egregious delay :D Sorting PRs now. Yes, there's not much to salvage here. I actually killed this method in the App class, and I intend to migrate it into the Response class and named something like withDownload($path, $type, $disposition = \"attachment\"). Do you want to work on that?\n. Not ready to go 5.4 only just yet.\n. I'll touch base with @silentworks and see if the Slim-Views repo needs any tweaks for the 2.3.4 update.\n. @DavidePastore That'd be great. I'll use that on a local Windows VM to duplicate the issue you are seeing.\n. Should be fixed in 2.3.5. If not let me know.\n. Can you resubmit to the develop branch? Will get this into the 3.0 release since it will require us to bump the minimum supported PHP version.\n. Should be fixed in 2.3.5. If not, let me know.\n. Does this work when the physical directory path has more than one \"\\\" in it?\n. Picked into 2.3.5.\n. Yes, there's one test that will intermittently fail since it's coded poorly. It expects two time measurements to be the same, but they may differ by a second or so every once in a while. I need to fix that.\n. Will get it pulled into the forthcoming 2.4.1 release this weekend.\n. Merged into release-2.4.1 branch.\n. Merged into https://github.com/codeguy/Slim/commits/release-2.4.0\n. This looks great. Will pull in soon.\n. Merged into https://github.com/codeguy/Slim/commits/release-2.3.6\n. Solution looks great. Please send a PR to the master branch when ready and I'll pull in.\n. This is resolved in https://github.com/codeguy/Slim/commits/release-2.3.6. Will release into master branch soon.\n. Can you clarify 1) what the issue is, and 2) how this solves it? I'm not saying you are wrong, I'm just not entirely clear on what your description above says.\n. Ok. All Slim application routes should assume they are relative to the physical directory in which the Slim index.php file exists. So if I create my Slim app in /foo/index.php, my application routes should not begin with /foo. Can you confirm this issue exists in version 2.3.5?\n. @ziadoz Yes, you can remove the redundant call in the render method.\n. haha. That's fine I can cherry pick the relevant ones. Will do that today.\n. Merged into https://github.com/codeguy/Slim/commits/release-2.3.6\n. Merged into https://github.com/codeguy/Slim/commits/release-2.3.6\n. Do you want to send a PR or do you mind if I make this change? Want to make sure you receive credit if you want.\n. Is this issue limited to a particular unit test? And if so, should this solution be implemented in the Slim source code rather than in a unit test? I guess I'm just looking for more details about this issue.\n. Thanks for the clarification. Will get this pulled in soon.\n. Merged into https://github.com/codeguy/Slim/commits/release-2.4.0\n. haha. Will definitely get this pulled in soon.\n. Pulled into https://github.com/codeguy/Slim/commits/release-2.3.6\n. I feel like this would merit its own separate component that could be used within a Slim (or Silex or Laravel or Symfony or...) application. But I don't see Slim itself being able to implement this without forcing specific conventions on applications built with Slim. I agree it would be nice to have a tool to handle this complex and confusing task, but it won't be in Slim core. I do encourage you to build this out as a separate stand-alone component.\n. @freen Can you push a sample app to pastebin that I can run locally to duplicate? Also, can you confirm you are running version 2.3.5?\n. Glad you got it resolved!\n. Added in https://github.com/codeguy/Slim/commits/release-2.4.0\n. What @arsenetar said. \n. They should be available in the view in variable flash. First, make sure you have activated a session with session_start() before you instantiate the Slim app. Next, make sure you are using the latest version of Slim... 2.3.5 currently. If it still fails, let me know.\n. Like @fousheezy said, you can fetch the raw request body with $request->getBody() and run that through json_decode(). The ContentTypes middleware will be removed from Version 3... so be sure you send any potential pull requests here https://github.com/codeguy/Slim-Middleware\n. With these changes, do we need to retain these magic methods?\nhttps://github.com/codeguy/Slim/blob/develop/Slim/App.php#L280\n. I've always wanted to keep Slim self-sufficient with zero third-party dependencies. But at this point in time that line of thought is swimming against the tide. Since 3.0 will be a big refactoring and reorganization, I think we should probably go ahead and move Pimple as a Composer dependency rather than keep it in core.\n. @lalop Yep that's what I'm thinking.\n. Just pushed a fix for this to the develop branch.\n. Cool. Get some unit tests added and make sure Travis CI is happy then I'll get this merged in.\n. Cool feel free to ignore and I'll have a look on my end.\n. 1. What version of Slim?\n2. What web server?\n3. Are you sure your rewriting is setup correctly?\n4. Can you provide a sample Slim app that demonstrates?\n. @silentworks You are more familiar with IIS... can you help troubleshoot this?\n. Awesome. Glad you figured it out. Closing.\n. This question is best suited for the support forums. See http://help.slimframework.com/.\n. @kperry42 Do you want to submit a PR so you can get credit for the fix? If not I can go ahead and do this, but wanted to check with you first.\n. Fixed. https://github.com/codeguy/Slim/commit/73a8daab6ab395d0aa38a0de4af21a0b720e8367\n. FYI this is in the develop branch and will be rolled out with the 3.0 release.\n. Can you include a unit test for this?\n. StackPHP seems tightly coupled to the \\Symfony\\HttpFoundation\\Request class, right? I'm looking here:\nhttp://api.symfony.com/2.3/Symfony/Component/HttpKernel/HttpKernelInterface.html\nThat makes it a non-starter.\n. I agree. Conceptually it is nice, but we really need a PSR interface for HTTP requests for this to be usable for projects that don't use Symfony. Slim already has a middleware system in place that pretty much does exactly this.\n. Thanks. I need to create a new VM locally with the latest hhvm build for testing. Will get this merged into the 2.4.1 release this weekend.\n. Merged into release-2.4.1 branch.\n. @ptarjan Still getting some PHPUnit phar issues that cause unit tests to fail. See:\nhttps://travis-ci.org/codeguy/Slim/jobs/15450484\nDid a quick Google search and found this:\nhttps://github.com/facebook/hhvm/issues/1334\n. If you can shoot over a PR to the release-2.4.1 branch, I can have that merged tomorrow.\n. Can you provide a unit test with this?\n. Didn't intend to close this. I believe this was auto-closed by GitHub when the target branch was removed :( Not seeing a button to re-open. Are you able to easily re-submit a new PR?\n. Thank for the detailed report. Can you provide a very simple example app (via pastebin or gist) that can help me duplicate this?\n. If you are comfortable sending your custom code, I'm happy to look through it. Be sure you send any steps necessary to setup the app and reproduce the issue. You can reach me at the email listed on my GitHub profile.\n. Awesome. Give me a few days to look it over. If you don't hear from me by Wednesday, nudge me here or on Twitter.\n. I've glanced at this quickly. When you set the SessionCookie middleware secure setting to true, it will only work for requests (and future requests) sent over HTTPS. Can you confirm this is the case on your end?\n. HTTPS is established by your web server configuration (and by having a self-signed certificate or a certificate provided by a CA like Comodo, Verisign, etc.) and is beyond Slim's control. You're better off talking with your web host's support team to get that setup.\nIf you want to use Cookie encryption within Slim, you can use the cookies.* application settings. See http://docs.slimframework.com/#Application-Settings for more info.\n. No worries. Happy to help!\n. There are merge conflicts against the latest develop branch. Can you take a look at those?\n. Merry Christmas! I've a few hours left to prepare the milk and cookies :) \n. Hmm ok. Weird that happened locally. \n. Sorry, just catching up on this thread. I'd like to avoid using abstract classes and stick with interfaces only. If that means we have to adjust some of Slim's implementation to make interfaces easier, that's fine.\n. :+1: \n. Can't argue with better error reporting :+1: Thanks!\n. Actually, can you re-submit this change against the release-2.4.1 branch? That way I can get it pulled in this week rather than wait for the 3.0 release.\n. Just fyi, the request and response objects have always been instantiated objects... the static methods were simply factories that return instances based on different types of input arguments.\nAnyway, will have a look through this soon and get it merged in. Thanks!\n. :+1:  Changes look great. Gotta head out to a family lunch, but will work on this some more tonight. v3 is going to be great!\n. @prisis I recommend you post a question to http://help.slimframework.com. The issue is almost certainly related to your custom autoloader.\n. haha. Sorry. I thought it looked fairly complete. If you want to keep working on a PR, just make a note of it in the initial comment so I don't pull it in too early :)\n. This busted a ton of unit tests. Have a look at that first, then I'll pull in.\n. Pulling in. Will make that last tweak myself.\n. We'll want to parse this in the \\Slim\\Http\\Headers class along with other special-cased headers. We can then look for this in \\Slim\\Http\\Request::getScheme().\n. This is done. I'm not too concerned about the Front-End-Https non-standard header.\nhttps://github.com/codeguy/Slim/commit/60cc1e4dc3165f268763ca46527be28d35823095\n. Still needs to be written.\n. Sounds good. I'm not a super advanced Git user... I just do what appears to accomplish my goal and carry on :) I'll mess with it and see if I need to do anything to merge.\n. Far simpler reason... I haven't had time to write one yet :)\n. Refactoring the existing session class to make it easier to test. Will be simplifying a few things, too.\n. I've got the session class tested... but the Flash class still needs tested. If you want to write tests for that, that would be wonderful. I would use Mockery (composer update to get it) to mock the Session dependency so we can focus on the Flash class in relative isolation.\n. Yep I'm aware of that. I'll remove hhvm testing until Travis CI can release a new image including the latest hhvm bug fixes.\n. You're better off asking this on the support forums at http://help.slimframework.com/.\n. This is already resolved in the develop branch and is scheduled to be included in the 3.0 release.\n. Merged into develop and release-2.4.3 branches.\n. And this still fails if you remove the trailing \"/\" from your Slim route paths? i.e. change:\n$app->get('/hello/', function () {\n    echo \"Hello\";\n});\nto\n$app->get('/hello', function () {\n    echo \"Hello\";\n});\n. Scheduled for 2.4.3\n. This is merged into the develop branch. Do you want to send a similar PR for the release-2.4.3 branch?\n. @designermonkey Is this PR still valid?\n. Please resubmit PR against the dev branch.\n. I think this is more a concern of the View object and not the Slim instance, right? Version 3 will be removing the templates.path setting from the default Slim app settings and instead moving that concern to the view itself. Does this make sense?\n. Can you send me a very simple demo app? Pastebin, email, whatever is fine.\n. Ah, no. Similar-ish issue here:\nhttps://github.com/codeguy/Slim/pull/758\nAlso, configuration is changing in version 3 (develop branch) and I'd prefer any configuration changes be made against that branch. Feel free to evaluate the develop branch changes and submit a new PR against the develop branch. Thanks!\n. Currently these do not affect middleware, only the Slim app's routes. This will be improved in version 3.\n. I would probably just update composer dev requirements to require the mcrypt lib.\n. @lrlopez Nails it. We need to require mcrypt so we can have tests that cover cases with and without mcrypt.\n. @zergin Do you want to take the lead on this? We'll need a test or two that confirms behavior if mcrypt is not loaded. Let me know if you're busy and I can write some up this weekend.\n. @sarciszewski This is now irrelevant. I need to clean up obsolete tests, which I'll try to do tonight or tomorrow.\n. Leaving this thread open until that is done.\n. Merged into release-2.4.3.\n. Thanks. Will merge into a point release soon.\n. Forgot about this for 2.4.2. Will roll this out in 2.4.3 soon.\n. Closing in favor of #721 \n. Closing this out since it's not an issue with the framework. If you have any further questions, please pose to the Slim Framework support forum here:\nhttp://help.slimframework.com/\n. Closing. Addressed in PR #752.\n. Can you resubmit PR with only the commits related to this fix?\n. This was ignored because it does not adhere the cgi spec. However, apparently the PHP built-in server ignores the spec and only provides the HTTP_CONTENT_TYPE as you explained. I've just released version 2.4.1 that includes this fix.\nhttps://github.com/codeguy/Slim/releases/tag/2.4.1\n. Closing in favor of https://github.com/codeguy/Slim/pull/718\n. Yep this is already available in the develop branch scheduled for the 3.0 release.\n. Merged into release-2.4.3\n. @calmdev That is intentional (although not ideal, in hindsight) behavior. It has been fixed in the develop branch (what will become 3.0 soon).\n. Just pushed a commit that removed these lines.\n. So if my understanding is correct, the entire gist of this thread is how to define what arguments are injected into the controller object referenced by a string callable like \"\\MyController:methodName\". Correct? Would it not be simpler to instantiate the controller first, and then associate it to a route like this?\n$app->get('/foo', [$fooController, \"methodName\"]);\nThis allows you to instantiate the controller however you want to, and maintain a single instance for however many routes use it.\n. Understood. Will probably leave this open and roll into a 3.x point release so we don't rush the implementation.\n. Can you provide unit tests for the new recursive merge feature?\n. Merged into release-2.4.3. Thanks!\n. What is a matrix parameter?\n. Agreed. This will happen.\n. This is not the intended functionality, so I suppose the documentation can be worded better. There is one error handler and it is a catch-all for any Exceptions that are caught while the app is running.\n. +1 for using a route factory method suggested by @andrewmman.\n. My thoughts so far:\n- I agree that we need to use a factory (closure) to generate Route objects. This will let a developer easily swap the Route class with another that implements the same Route interface.\n- I do not think it is a big deal if the route factory exists in \\Slim\\App or in \\Slim\\Router. The result is the same, just a different place to override the route factory implementation.\n- String to callable functionality has already been merged recently into the develop branch, so be sure you accommodate that existing code with any of these changes.\n. After some thought I'm leaning toward moving the route factory into the \\Route class and have a setFactory(Closure $factory) method. We can then use a static \\Route::create() method that will return the result of the factory.\n. Merged into release-2.4.3\n. Using my article against me I see ;) No, I agree Slim should adopt an existing component. I think I want to wait, though, until the PHP-FIG releases a new PSR specifically for HTTP request and response interfaces before making this decision.\n. Also, even with a new PSR, I think Slim will still ship with a very \"slim\" implementation with only a few core methods required by the interface. This will make it easier to swap in a more robust implementation like HTTP Foundation if you want.\n. @ramirovjr I think we can get this into 3.0 (currently the develop branch). To get this started, can you figure out the most important methods used by HTTP Foundation's request and response classes and list those here? We can use those to refactor and simplify Slim's current request and response classes.\n. Let's move that to a separate issue.\n. The problem with HttpKernelInterface is that it has a hard dependency to Symfony\\Component\\HttpFoundation\\Request as far as I can tell. This is the reason we need a PSR for HTTP request and response interfaces.\n. But thanks for the research notes above. I'll have a look tonight and put together a game plan.\n. For sure. I intend to have you heavily involved in this transition. Just fyi, there is this php-fig proposal here, but it has not opened up for public discussion just yet.\nhttps://github.com/php-fig/fig-standards/blob/master/proposed/http-message.md\n. See https://github.com/codeguy/Slim/issues/776\n. After some thought and research, I'm leaning toward providing first-class HTTP request, response, and body classes that will implement the upcoming PSR for HTTP messages. However, I also want to put equal effort into HTTP request and response adapters for the Symfony HTTP Foundation classes since those are so popular.\nI also want to roll the header and cookie collection interfaces into the request class interface so we don't violate the Law of Demeter. In other words, we should not expose the cookie and header collections as public properties. Doing so will reduce our class overhead, too.\n. I will be implementing native HTTP request and response classes that implement the forthcoming HTTP PSR. I expect we will need to adapt these implementations as the spec moves toward completion, but I don't foresee any big changes from what has already been proposed.\n. However, because Slim will expect the HTTP PSR interface and not a concrete Slim request/response class, you can easily swap in whatever class you want.\n. Investigating.\n. This is an issue with the Slim-Views repository. I have a commit pending review from my collaborators. I believe this will fix the problem you are having. Should be available tomorrow.\nhttps://github.com/codeguy/Slim-Views/commit/82daa909f91d535285e898940138196d9306e07e\n. Yep. I'll need much more information to go on here.\n. Resolved in dev branch.\n. Thanks @lrlopez, exactly. Think of it like adding more layers around an onion. I think a visual diagram would go a long ways to help explain this, but I'm not the best vector illustrator :)\n. Duplicate of https://github.com/codeguy/Slim/pull/735\n. Cool. I'd like to test this thoroughly to avoid any inadvertent breaking changes. This will probably find its way into a 3.x point release.\n. I'd prefer to avoid another class.\n. I think this is getting too complicated for the sake of performance. Closing.\n. Ah that would have been unintentional. If you can help get those into the release-2.4.3 branch that would be great.\n. Have you pulled all of the latest commits? Unit tests are all green here. Are you adding custom closures to the Slim container for your app?\n. Do you want to submit a PR for this?\n. Works for me.\n. Can you send to the release-2.4.3 branch?\n. Thanks!\n. Looks like this breaks unit tests. Can you have a look?\n. What @amenadiel said. You do not want to rely on superglobals for this. If you are receiving url-form-encoded data, it will be available like @amenadiel suggests above. If you are receiving non-url-form-encoded data, you must rely on $app->request->getBody() to fetch the raw request content.\n. Closing. Master branch is not accepting any new major changes. However, I do need to implement this in the develop branch soon. Let me know if you want to work on that.\n. Assigning @akrabat to work on integrating this with his existing callable resolver stuff.\n. Just realized you submitted your PR to the master branch. Can you re-submit to the develop branch instead? I'll get this pulled into the 3.0 release branch.\n. That method only works with the content-type is application/x-www-form-urlencoded. Otherwise, you have to use the $request->getBody() and decode appropriately. I'm hoping to get native JSON and XML support built into 3.x.\n. This is ideal for middleware. You can create middleware as a separate stand-alone PHP component and I'll link to it.\n. I prefer that $app->redirect() be dumb... this lets us redirect to external URLs or to any absolute URI path. Assuming the application base path would drastically limit the usefulness of this method. \n. This is resolved in the develop branch.\n. Someone else who uses and is familiar with eAccelerator will have to confirm. I know Slim works great with APC and ZendOPcache\n. Use two \"#\"s\n. Can you rebase against the latest develop branch code and resolve any conflicts?\n. @harikt Ah thanks for the heads up. I'll bring in this code manually then.\n. \n. We discussed this at length in IRC, and the consensus is to move query params to an optional additional argument. This way you don't get any unintentional/unexpected side-effects. The Zend Framework does it this way, as do many other frameworks.\n. @vik-singh Please rebase against latest develop branch changes. Let us know if you don't have time. I just want to make sure you have the opportunity to receive credit for the change.\n. Yep this is biting a lot of frameworks. This is a moot issue in the latest dev branch.\n. Resolved in develop branch.\n. Yep. Goal is to have a beta release sometime soon. I need to write a blog post about the framework status. It's on hiatus for a bit until I can free up some time to continue working on it. I have every intention of picking up development again as soon as I can wrap up some large projects at work and my upcoming O'Reilly book.\n. Still alive. It'll be ready when it's ready. Life gets in the way sometimes :)\n. Yep, closed in favor of #1029 which should have a more secure implementation.\n. Closed in favor of #895 \n. This has been fixed at some point in time.\n. This needs to be refactored against the latest code. You can find the relevant header parsing code in \\Slim\\Http\\Headers::createFromEnvironment().\n. Closing due to lack of relish.\n. Can you rebase against the develop branch and fix conflicts?\n. Pulled in #674 which fixes this issue.\n. Can someone send a PR to the develop branch?\n. Sure. I don't see why not so long as it doesn't break bc.\n. Agreed. Can you rebase against the latest code?\n. Closing. This is not a commentary on the quality of your PR. I just don't think Slim needs this feature, and a lot has changed in the develop branch (future 3.x codebase). The master branch is accepting only security fixes at this time.\n. I'm honestly for removing the pass() method. I have never used it myself. I'm just worried others may depend on it. I'll see what others think in IRC.\n. Eh, let's just remove the pass method altogether. The performance gains not having it outweigh its benefits, imo. @alanpich how do you want to handle this? Do you want to submit a new PR that removes the pass functionality? If so I'll close this one. Let me know.\n. Sounds like a plan. Thanks!\n. The \\Slim\\App class unit tests should be passing now (assuming you run only the tests for this class). You can stick your tests in the tests/AppTest.php file.\n. Any update on this?\n. @alanpich Hold on this. Exploring alternative router implementations and that could affect your work on this. Will post more details soon.\n. This PR is moot. @alanpich As we discussed, send a PR against the develop branch with your router mounting code.\n. http://swagger.io/ is a popular option\n. Closing. Can you send a new PR against the latest develop branch code? Sorry for the back and forth. Lots of changes being made lately.\n. Link?\n. Thanks. I'll add a default value of 80 if this value is not available. Do you want to submit a PR to the develop branch?\n. Which branch does this affect?\n. Resolved in develop branch.\n. @designermonkey Is this still relevant?\n. Can you post a gist that demonstrates how this generates a fatal error?\n. Do you want to submit a PR to the develop branch?\n. What @Stelian said.\n. Merging because you are hilariously awesome sir. Trolling or not, bravo.\n. @rajibmp Awesome! Glad you're starting to contribute. I just thought it was funny that we're talking about just 64 bits. But if it helps you learn, and if it improves the Slim Framework just a teeny tiny bit, then I'm all for it. Feel free to reach out if you have any other questions about contributing :)\n. This is obsolete. Can you test against the latest code in the develop branch and report back? The relevant code is in \\Slim\\Http\\Uri::createFromEnvironment().\n. On my todo list.\n. Ok, this is next on my todo list. Will be posting feedback soon.\n. Here's some basic code I put together really quick based on what you've done so far. Let me know what you think. Basically, all we'd need to do is change the Middleware class in this code to a trait, and drop that into the Slim and Route classes.\n``` php\n<?php\nclass Middleware\n{\n    protected $stack = [];\npublic function initializeStack()\n{\n    $this->stack[] = $this;\n}\n\npublic function add(callable $callable)\n{\n    $next = $this->stack[0];\n\n    array_unshift($this->stack, function ($req, $res) use ($callable, $next) {\n        return $callable($req, $res, $next);\n    });\n}\n\npublic function call($req, $res)\n{\n    return $this->stack[0]($req, $res);\n}\n\npublic function __invoke($req, $res)\n{\n    $res .= '-CENTER-';\n    return $res;\n}\n\n}\n$mw = new Middleware();\n$mw->initializeStack();\n$mw->add(function ($req, $res, $next) {\n    $res .= 'Foo';\n    $res = $next($req, $res);\n    $res .= 'Bar';\nreturn $res;\n\n});\n$mw->add(function ($req, $res, $next) {\n    $res .= 'Xyz';\n    $res = $next($req, $res);\n    $res .= '123';\nreturn $res;\n\n});\n$out = $mw->call('', '');\necho $out;\n```\n. So much has changed I went ahead and implemented a rudimentary version in https://github.com/slimphp/Slim/commit/f45fe83c6f976210b5b334229bd406cc932db00e. Can you look over and make sure it's ok? Also, can you integrate into the Route class and make sure Route middleware is working correctly?\n. I think your existing PR can be closed, but open a new PR for new changes and we can move discussions there.\n. Good catch! Merged :)\n. They are not the same, by design. This is expected behavior.\n. Thanks!\n. @silentworks Let me know what you find out. /cc @jeremykendall \n. Can you provide a unit test for this?\n. Closing. Route creation should happen either in a container service or inside the Router object. This is something that needs refactored for the 3.x release.\n. Please move this thread to the Documentation repo.\n. Any progress on this?\n. How's this coming?\n. Week or two sounds great! Just checking in. Will probably roll out a beta release earlier though and merge this in closer to release.\n. Any updates? Just fyi I'll be tagging 3.0.0-beta1 in a day or two.\n. Nah. I don't like comment annotations.\n. Care to submit a patch to develop?\n. @sarciszewski But how do you really feel? I agree earlier versions should not persist session data client side. This will be changed in 3.x. You can also review the latest encryption strategies in \\Slim\\Crypt in the develop branch.\n. @sarciszewski Please review the develop branch \\Slim\\Crypt class and let me know if you have any feedback. I want it peer reviewed as much as possible. It's already had a lot of eyes on it, but one more won't hurt. Thanks!\n. Just wanted to chime in here. First, I truly appreciate the scrutiny here. I really do, be it overly harsh or not. It only makes Slim better. Also, the 2.x code is not as up to date as I'd prefer. Neither is its documentation. I've been on hiatus so to speak for 1.5yrs... working on other things, writing a book, etc. But now I've returned and am moving fast on the upcoming 3.x release (the current develop branch). You can read details about the upcoming release here:\nhttp://www.slimframework.com/2015/02/11/whats-up-with-version-3.html\nIt's getting better daily, and I'm trying to fix any issues as they appear. Most notably, I killed Slim's naive crypto implementation tonight and replaced it with Zend/Crypt. Anyway, thanks for the scrutiny.\nAs for the 2.x code, if you see anything that needs improved, fixed, etc. please send a pr against the master branch. This branch is only accepting hotfixes and security updates.\n. Just migrated the develop branch over to Zend\\Crypt.\nhttps://github.com/slimphp/Slim/commit/c5b6c76a2bba90dfab300280ed9258e2263edb52\n. Outdated. Sorry. We'll get stable again soon I promise!\n. Already outdated. Sorry :) I need to rewrite many of these tests.\n. I'm open to alternative routers. I'll investigate tonight. Thanks!\n. @harikt Bear in mind the develop-route branch is purely experimental. If we do go with League/Route, I'll have them create a new tag without the Symfony dependency since I don't need that; I'll also probably favor League/Container instead of Pimple to reduce redundant dependencies.\n@alanpich Looking forward to your findings.\n. Merged and tagged. Thanks!\n. You can find details about each release on the release tag page. See those at https://github.com/slimphp/Slim/releases. Slim also follows Semantic Versioning... so 2.x up to but not including 3.0 will be backwards compatible with earlier 2.x releases.\n. Assigning this to @silentworks for review. He'll merge in when appropriate.\n. @silentworks Something in one of these pulls broke settings... looks like you have to separate setting values with \"_\" instead of \".\". Can you restore this behavior asap?\n. I'm OK with this so long as we provide at least one good session middleware in the Slim-Middleware repo. @silentworks Do you want to get that going?\n. Seems reasonable to me.\n. @silentworks Thanks! Send a PR to the develop branch when ready.\n. Since we're extracting sessions from Slim core, I guess we can do away with the hard dependency on Zend/Crypt, correct? We'd lose encrypted cookies, but I'm not entirely sure that's necessary anyway due to the inherent 4Kb limitation on cookie data. I definitely want the new Session middleware to offer encryption as an option.\nHow close are you on this?\n. Agreed. I'll work on stripping out the encryption stuff today.\n. I'll be on irc all day. Just open a private query when you want.\n. Don't forget to also accommodate flash messaging. The original Flash class still exists in the core repo. Feel free to migrate this class if necessary.\n. I've removed sessions from core, so renaming this to something more appropriate for the new session middleware.\n. @silentworks How's this coming along?\n. @silentworks I'll be on irc most of the day if you need to chat.\n. This can wait until after the 3.0.0 release if need be. So there's no super rush on this.\n. No worries. That's what I figured.\n. My question is... do we even need this? Can we recommend another PSR-7 middleware that already exists? If not, more than happy to have this built\n. Can you post an example of what route mounting syntax will look like?\n. Also I've merged FastRoute into the develop branch, so send any PRs there.\n. Not yet, but you're welcome to run and post some seige results comparing develop and master branches.\n. The only big issue I see with this is updating how Slim uses the application container (Pimple). We'll need to inject that somewhere so that we can define the factory methods for the request, response, crypt, etc. objects.\n. We'd still need crypt for cookie data.\n. @silentworks Which parts specifically do you disagree with? Just asking for clarification. I think this particular thread is a bit much for 3.0... I may hold off on any huge API changes until a later release.\n. I think it can work if done well. But I think this is probably too big a change to include in 3.0. I say let's put this idea on the backburner for now and re-visit in the future.\n. Going to close this out. Let's revisit after 3.0 launches.\n. :+1: Send PR please\n. @silentworks Pull the latest commits. I asked Nikita to push out a new 0.4.0 FastRoute release that accepts an array of HTTP methods.\n. Master branch is only accepting bug and security fixes. Please submit any new features or improvements to the develop branch.\n. @silentworks Is this supposed to happen?\n. This is fixed.\n. Done https://github.com/slimphp/Slim/commit/2fac030d415ce89a005b3bbdad31ca1721411bc9\n. This looks awesome so far. The only thing you missed is Slim\\App on line 267. Need to change the setMiddleware() method call with add().\n. Does this still work if no middleware is added?\n. Sounds gd. @lalop do you want to add that to this pr?\n. Probably :) Forgot that little guy existed.\n. Do want to send a PR or should I do this?\n. I was bored. Went ahead and pushed this up https://github.com/slimphp/Slim/commit/ed994a1ee44f66b6da8c2d734a9f41b46971044c\n. I think this is all fine except for the EditorConfig thing. Can you remove that?\n. Just the formatting changes, please. I don't want anything in the repo that doesn't absolutely need to be there.\n. Crap. Can you rebase against the latest develop branch?\n. We will convert to PSR-4 and move source code into a src/ directory closer to the 3.0 release. I don't want to do this now so I don't cause too many conflicts with outstanding PRs in progress.\n. We can keep this one open if you don't mind rebasing in the future. Otherwise feel free to close and re-open a new one closer to the 3.0 release.\n. :+1: \n. Seeding is a protected method and only accessible to the framework itself. I imagine we'll notice that if it happens without using an exception :)\n. :+1: \n. Can you make the property protected, and add a docblock for it?\n. Thanks!\n. Currently, it lazily resolves and instantiates callables. Moving this into the mapRoute method does give us the DI container, but it gives us additional overhead of instantiating callables that may never be used. It's a trade-off for sure.\n. Personally, I like the benefits of having the DI container access vs. saving a few microseconds for performance. What do others think?\n. hmm ok. Guess I misunderstood. This seems fine! I'll merge in later this morning.\n. Agreed. This would be nice. I think this is a good candidate for the forthcoming session middleware layer since Slim core will no longer touch anything related to sessions. This is related to https://github.com/slimphp/Slim/issues/1049\n. Looping @silentworks in on this.\n. @harikt Slim has had route middleware since 2.0.\n. @funkatron Isn't this already solved with 3.x since we are no longer saving session data into cookies?\n. \n. Only one route is ever invoked for each request, so I don't see how this is an issue.\n. Cool. Route \"passing\" has been removed from 3.x because it's a rarely used feature with too much overhead.\n. This was why I had the name parameter as required in the earlier 3.x version. The easiest solution is to require a name argument (first or last). This may be a pain to some, but it does make you think about what you are building and it does give you the ability to use the urlFor() method later on.\nWe could restore the name() method on the Route object, but this exposes/leaks the Router's internal implementation. It's messy from an architectural pov, but it solves the problem. It does add a tiny amount of overhead when looking up a named route because we have to iterate over all routes and cache a lookup table from name to route... this only has to be done once on the first call to urlFor().\nThoughts?\n. @akrabat What do you think about @silentworks' idea?\n. @akrabat I assume using a method call like version 2.x does.\n$app->get('/', 'HomeController:index')->setName('name');\n. @akrabat Yes\n. I just don't see a clean alternative. Exposing the route object is not as neat as I'd prefer, but it's something I can live with. I +1 @silentworks' solution.\n. Another option (not that I like it any better) is to introduce new methods on the App instance:\n$app = new \\Slim\\App();\n$app->namedGet('list', '/list', $callable);'\n$app->run();\n. We could also do something like this http://laravel.com/docs/4.2/routing#named-routes where the last argument is an array that could be overloaded to provide middleware, callable, name, etc.\n$app->get('/list', [\n    'name' => 'listUsers',\n    'add' => [$mw1, $mw2],\n    'callback' => $callable\n]);\n. Re: previous comment, if second argument is callable, consider it the route callable and be done with it. If the second argument is NOT callable and an array, make sure the array has a \"callback\" key, but also use the \"name\" and \"add\" keys to specify a name and middleware.\nEDIT: If second arg is not callable and a string, run it through setCallable() and use the resultant value as the route callable.\n. I agree. I'll go ahead and make an executive decision that we move forward with @silentworks' solution. The App instance's routing methods (e.g., get(), post(), and so on) will always accept two arguments:\n1. The route URI\n2. The route callable\nThe App instance's routing methods return the new Route object, and you can chain additional methods provided by that Route object to set names or add middleware.\n$app->get('/list', 'Controller::method')->setName('list')->add($mw);\n. This is done. Route names are now optional and must be set using a chained method call like this:\n$app->get('/pattern', 'callable')->setName('name');\n. You'll need to json decode $request->getBody().\n. In v2, only form urlencoded http bodies were decoded and made available via params(). Is this ideal? In hindsight, not really :) v3 will be much better about this.\n. As far as I know, there is no official specification or recommendation regarding parsing multiple query parameters with duplicate names. So I'd rather rely on an existing, well adopted solution which happens to be PHP's parse_str() function.\n. If we were to change it, I'd go with \"uses()\" or \"use()\". Nothing else really makes sense or is as easy to type.\n. And I don't think we can get away with \"use\" as a function name anyway.\n. Eh, I'm happy with \"add\".\n. Master branch is what it is. It's only accept security fixes. All new features and improvements should go to the develop branch.\n. The master branch is only accepting bug/security fixes for the current code. We already have a PR open for improved IP and X-Forwarded-* header parsing. This PR will be back-ported to the 2.x branch when ready.\n. I think some psuedo-code would help here.\n. I think this is worth exploring, but not for version 3.0. Definitely 4.0. Keeping this open for discussion.\n. @geggleto Is this not already possible? You can add a JsonParser or a BodyParser and inject the parsed body into the Request object with withParsedBody($parserResults).\n. Or we just leave it as is. That's always an option. How often are you going to consume data that isn't form urlencoded, json, or xml?\nIf you want to use your middleware approach, just parse the request body in the middleware and inject the parsed results back into the request with withParsedBody(). You incur early overhead while always parsing the request body, but if you are adding the middleware, odds are you want to do that anyway.\n. Can you describe what this PR is fixing?\n. Be sure any PRs are accompanied with appropriate unit tests.\n. Awesome! Go for it. Feel free to ask any questions here as you're working on it.\n. It does not. It should return a data structure that mimics $_FILES. Re: your current PR, we cannot rely on direct access to the $_FILES superglobal. Instead, we should inject an array that mimics this structure via the constructor. We can also leverage the Environment object to contain a key (e.g., slim.files) that contains this data. This makes it much easier to test and craft sub-requests.\n. :+1: Go for it. Feel free to ask any questions here if you have them.\n. Removed outdated settings https://github.com/slimphp/Slim/commit/8e8b2b54638e7c35c24a25dcc69112e7e3c20421\n. Master branch is not accepting new features.\n. v2 is frozen except for security fixes.\n. Yes they should be chained. Good catch. @JoeBengalen Yes please send PR when ready. Thank you!\n. Looks like @lalop beat you to it. :) Closing this out.\n. This is a good observation. I tend to agree. Send PR when ready :+1: \n. I do want to maintain a way to short-circuit the middleware stack and exit immediately, which is what stop currently does.\n. For now let's leave halt() and stop() as they are. Let's modify only the redirect() method.\n. Thanks! I'll work on a fix tonight unless someone else jumps on this before then.\n. I've got to go back and review the latest changes to the PSR-7 interfaces. Make sure it adheres to this interface. If the port is present and standard for the given scheme, it should be excluded. If the port is present and IS NOT standard, it should be included. If the port is not present, it should be excluded.\n. Interface is https://github.com/php-fig/http-message/blob/master/src/UriInterface.php\n. @JoeBengalen The spec is unclear what value to return if the scheme is not present. I would presume we return the port value if present (standard or not).\n. I'm not too worried about this. I'm fine assuming a default port for the time being.\n. Re-opening for continued discussion\n. This is resolved.\n. Are there any architectural changes that would make this easier for you? I didn't want the Route class implementation exposed outside the Router class, because I see the Route as more an implementation detail of the Router. However, if exposing the Route class as a first-class service makes your life and this implementation easier, I think that's fine.\nAs is, I think your solution is good given the current architectural limitations. But I'm wondering if it can be better. Thoughts?\n. Agreed. I'll merge in tonight.\n. I do think an additional method making this process easier would be nice. I don't want to use the getAttributes() method from the PSR7 interface though. I'll toss something together soon.\n. # Proposal\nAddition of these methods:\n- withParameter($key, $value); // Replaces existing values for $key\n- withAddedParameter($key, $value); // Merges into existing values for $key\n- withoutParameter($key); // Removes existing values for $key\n- getParameter($key);\nI imagine POST data will take priority over GET data. There will be issues if a given key is duplicated in GET and POST data sets. Should we assume one value takes priority? Or should we merge both values into an array for the same key?\n. The proposed getParameter($key) method would request the parsed body if the body has not already been parsed. This method must also inspect the type of the parsed body result, because the parsed body can be an array, an object, or null.\n. :+1: \n. @JoeBengalen It mirrors the withAddedHeader() method on the Request and Response objects. Internally, each key is an array of values, even if only one value is present. Externally, the getParameter() method would return the single value or the complete array of values if more than one value is present.\n. After some thought, the with* methods above are unnecessary since parameter access is driven purely from query parameters and body parameters, both  of which are already overridable. I've added the getParameter($key) method. Please review.\nhttps://github.com/slimphp/Slim/commit/b32ce17609edbf5b69269c62936730228e26eaf9\n. Done.\n. It will continue to receive security updates, but no new features. Not that much is changing from an end user point of view. You map routes like you do before. The only difference is the route callbable signature. The new signature is:\nfunction ($request, $response, $args) { ... }\nWhere $request is the Request object, $response is the Response object, and $args is an associative array of route pattern segment keys and values extracted from the HTTP request URI. I think this is much nicer than v2. You can continue to echo content from your route callable in v3, just like v2.\nWhat exactly do you dislike?\n. Yeah, this is just not possible given the PSR-7 interfaces. I think you are discrediting value objects without giving them a try. I was skeptical at first, but once I implemented them, I saw how incredibly nice they are to use. You can pass a request and response into other functions or middleware and be safe knowing that your own instances will not be modified somewhere downstream... precisely because they are immutable. Immutability adds a nice safety net and gives the developer more confidence in the state of the objects. I know not everyone will see it this way, but this is where Slim is going.\nSlim v2 will always exist here on GitHub. It will continue to merge in security fixes. Its documentation will be made available on its own subdomain before v3 launches. But the v2 branch will not see any additional features.\n. Thanks! This is a big help.\n. Are these backed up with tests?\n. :+1: Go for it\n. Doh. Nvm. Guess I should read ahead :)\n. Well done. This is exactly what I had in mind.\n. Fixed https://github.com/slimphp/Slim/commit/05c5b3cb61352a52a6cdcba8c2dbabc263ee269c\n. Closing this out. The PSR-7 interfaces have changed as have my thoughts on how to implement.\n. Sounds good. I'll make it optional and injectable via Pimple. Or if anyone can jump on this today (I can't get to it til tomorrow) that'd be fine, too.\n. Thanks for the helpful info. Will look into this.\n. Your PR assumes routes with trailing slashes are equal to the same route without a trailing slash. I'm not sure they are. @gmanricks What's your take on this?\n. Bringing in @funkatron too\n. Slim 3.x supports returning an Psr\\Http\\Message\\ResponseInterface instance from route callbacks. Slim 3.x also supports echoing output from route callbacks, too, for legacy compat.\n. Yep. The current master branch (2.x) is feature frozen and is only accepting security fixes. The current develop branch (to become 3.x) is where all current development is happening.\n. What if the Request object supported an object that implemented some form of filterable interface. We'd inject the filter object into Slim's request object in its Pimple factory method. We would then run all values currently returned from getParam() and getParams() through the filter object if present. This would let you register the filter object on the container, too. Obviously, this stops working if you swap in an alternative PSR7 request object. Thoughts?\n. For example, we'd register the custom request filter object like this:\nphp\n$app = new \\Slim\\App();\n$app['requestFilter'] = function ($c) {\n    return new \\MyRequestFilter();\n};\nWe'd update the current Request Pimple service to look like this (note the last two lines):\n``` php\n$this['request'] = $this->factory(function ($c) {\n    $env = $c['environment'];\n    $method = $env['REQUEST_METHOD'];\n    $uri = Http\\Uri::createFromEnvironment($env);\n    $headers = Http\\Headers::createFromEnvironment($env);\n    $cookies = new Collection(Http\\Cookies::parseHeader($headers->get('Cookie')));\n    $serverParams = new Collection($env->all());\n    $body = new Http\\Body(fopen('php://input', 'r'));\n$request = new Http\\Request($method, $uri, $headers, $cookies, $serverParams, $body);\n$request->setFilter($c['requestFilter']);\n\nreturn $request;\n\n});\n```\nAnd we'd update the Request object's getParam() method to this (note last line):\n``` php\npublic function getParam($key)\n{\n$postParams = $this->getParsedBody();\n$getParams = $this->getQueryParams();\n$result = null;\nif (is_array($postParams) && isset($postParams[$key])) {\n    $result = $postParams[$key];\n} elseif (is_object($postParams) && property_exists($postParams, $key)) {\n    $result = $postParams->$key;\n} elseif (isset($getParams[$key])) {\n    $result = $getParams[$key];\n}\n\nreturn $this->filter ? $this->filter->process($result) ? $result;\n\n}\n```\n. We could also delegate this to a service provider object like this:\n``` php\n$app->register(new \\My\\FilterProvider);\n$app->get('/foo', function ($req, $res, $args) {\n    $cleanValue = $this['filter']->get($req, 'paramName', FILTER_*); \n});\n```\nAnd pass the current request object into the service provider object and assume it does what it does and returns a clean value.\n. @JoeBengalen That prevents access to the original raw parameter values.\n@lalop Good idea :+1: \n. @funkatron Any thoughts? I'd like to include something for input sanitization/validation in 3.0.0\n. Middleware seems like the best solution that can work on a per-app or per-route basis. The Middleware could accept an interface that lets us write adapters for various third-party components.\n. Does anyone want to lead this effort? I'd like to have it available for 3.0.0, but since it's external middleware that's not required.\n. v2.6.3 corrects this\n. @jeremykendall Which internal classes need access to the additional methods? I've tried to avoid this kind of tight coupling. If an external class needs the additional methods provided by this specific implementation, can they not typehint for \\Slim\\Http\\Request?\n. @lalop Good catch. That needs to be fixed then to rely on $response->getBody()->write() instead.\n. @jeremykendall \"Always code to an interface\" is a good mantra, but I think it's overkill in this particular scenario. We already accept interfaces for the PSR7 message objects. Our particular implementation provides some additional helper methods. These methods are not (or should not) be relied upon by Slim's other internal classes. We could make interfaces, but I don't think the additional weight is really all that helpful.\n. @lalop Because they are helpful to the end user and provide a reason to use our own implementation?\n. Oh they don't add tight coupling... that was in reference to something I said above about how I was trying to not tightly couple the custom non-PSR methods to elsewhere in the framework.\n. I'm not sure how they are non-compliant with PSR-7... the Slim request and response objects are fully-compliant and implement the interfaces in full. They just happen to have additional methods that do not negate any of the PSR7 functionality.\nThe write method is indeed a mistake and needs to be corrected. Also, the Request and Response bodies are mutable... but everything else in the HTTP message objects is immutable.\n. There is not a \"debug mode\" in 3.x. You either use the default error handler or you swap in your own.\n. @JoeBengalen Go for it. I haven't touched this yet.\n. Oh. Hmm. Sorry must have confused you with someone else! My bad. Question above is still valid.\nEDIT: @designermonkey is who I was thinking of.\n. @akrabat That's my thinking. The config objects were originally built to support realtime translation between \"foo.bar\" and the related multi-dimensional array data (e.g., $array['foo']['bar']). But I'm not sure this is still necessary.\n. Agreed. I still think @designermonkey's config tools would make an excellent service provider that could extend the default settings service.\n. @designermonkey I'd love to port your config code to a service provider that I can list on Slim's site as an optional addon.\n``` php\nclass ConfigProvider extends PimpleServiceProvider\n{\n    public function register(\\Pimple\\Container $c)\n    {\n        $c->extend('settings', function ($settings, $c) {\n            // $settings is array returned from original service\n            // $c is container and \\Slim\\App instance\n        return new \\Your\\Custom\\Config($settings);\n    });\n}\n\n}\n```\nThis assumes \\Your\\Custom\\Config is your config class that implements the \\ArrayAccess interface. You could then continue to fetch settings in the app itself like this:\n``` php\n$app->register(new \\ConfigProvider);\n$app->get('/foo', function ($req, $res, $args) {\n    $httpVersion = $this['settings']['httpVersion'];\n});\n``\n. Thanks!\n. I've started work on this locally. This also has implications for theSlim\\Http\\Cookiesclass... since we can rely only on PSR7 methods inApp::run(), all cookie helper methods in the Response must serialize/unserialize to and from rawSet-Cookieheaders immediately. We cannot wait untilApp::run()to serialize cookie objects into raw headers. This probably means the Cookies class will go away in favor of serialize/unserialize helper methods on the Request object itself. We'd retain thewithCookie(),withoutCookie()methods though.\n. Thanks!\n. Closing. This is a moot issue in v3. Version 2.x is what it is. Please move any further discussion to the support forums.\n. Agreed on both counts. @geggleto I'm unsure if middleware or a service provider (or both?) would be more appropriate. What would your proposed middleware look like?\n. Right. So the service provider could provide RequestCookieheader parsing and ResponseSet-Cookie` header serialization, while the middleware is where these methods would be used.\nWhat is the workflow for a developer to add a cookie to the Response? What does that look like, and where does that happen?\n. Bear in mind we should limit ourselves to PSR7 message interfaces.\n. Read this https://groups.google.com/forum/#!topic/php-fig/6zesbZWLY_Y\n. The clean solution appears to be this: creating new cookies means storing the cookie data in a separate, stand-alone object (via service provider). This object is in no way contained by or related to the response object. I imagine a shared Pimple service that looks like this:\nphp\n$app['cookies']->set('name', ['value' => 'foo', 'domain' => 'example.com', 'expires' => '3 days']);\nThe middleware layer is responsible for 1) unserializing the Request Cookie header, and 2) serializing the cookie data from the service provider above into HTTP Set-Cookie headers. I don't like how this is separated from the Response object; it feels wrong, but I think it's the best solution.\nAside: For middleware and service providers that work together like this, do you still prefer adding them to the application separately (e.g., $app->add(middleware) and $app->register(provider)) or is there a way to add them both at once?\n. Disregard that last aside. I think we'll register the provider in the App constructor, and we may not even need a stand-alone middleware. We can instead deserialize cookies in the Request (for its getCookieParams() method), and serialize cookies in the App::run() method.\n. Right. That's the predicament :( I'll think on this too. What is available now in the develop branch is definitely not final. \n. Another option is to just re-introduce first-class methods on the App class itself. App::getCookie() uses Request object's PSR7 methods to fetch a cookie value. App::setCookie() uses the built-in provider (hidden from end user) to store cookies that are later serialized onto the Response object (again hidden from end user).\nEDIT: I kind of like this solution. It keeps things clean and compatible with PSR7 interfaces, yet simplifies the end user experience.\n. Pushed up some changes here https://github.com/slimphp/Slim/commit/fa6f24b88bdf8af4ae6a0d705d3807181d23f599\nUsage:\nphp\n$app->get('/set', function ($req, $res, $args) {\n    $this['cookies']->set('foo', [\n        'value' => 'bar',\n        'domain' => 'example.com',\n        'path' => '/sub',\n        'expires' => '4 days'\n    ]);\n});\nOr you can just do:\nphp\n$app->get('/set', function ($req, $res, $args) {\n    $this['cookies']->set('foo', 'bar');\n});\n. So the two best solutions are:\n1. Keeping Response::withCookie($name, $props) as @lalop suggested. This keeps Cookie concerns with the Response object. However, this must immediately serialize the cookie into a Set-Cookie header. This also flows well with the existing with* methods on the Response object. However, this is not a part of the PSR7 interface and cannot be relied upon anywhere else in the framework.\n2. Use the cookie service. This decouples cookies from the HTTP messages, and it lets a Slim app continue to have cookie management tools even if the PSR7 message objects are swapped out with an alternative implementation.\nI'm honestly fine with either. Neither is perfect. What are everyone's thoughts?\n. In my opinion, the non-standard withCookie()method is cleaner. However, the cookies service is guaranteed to work regardless of PSR7 implementation. I understand the semantic argument against it, but I'm going to keep that solution.\n. :+1: \n. We need access to the container in the Slim\\App constructor so we can register Slim's default services. This means we'll have to pass the DI container instance into the Slim\\App constructor as an element of the configuration argument array. I have heard good things about Container Interop, but its interface does not explicitly accommodate our current expectation that service factory methods receive the container instance as an argument. Would this not cause problems when registering Slim's default services that assume the container is provided to each factory method as an argument if your third-party container does not do this?\n. I guess we could inject the container into each factory method via use and rely on the get($id) interface method. Messy, but it solves the problem.\n. I prefer a more predictable argument list as opposed to a signature that can vary based on route segment parameters.\n. There will be more docs about this very soon.\n. CCing @akrabat \n. Seems like a good candidate for an application setting. Want to send a PR?\n. Performance gap will close closer to launch.\n. For reference http://seancoates.com/blogs/http-1-and-the-connection-header\n. Closing this out.\n. What @JoeBengalen said.\n. I'm not against this. I do think it's a nice compromise, like Ed said. Another potential solution is to move this functionality into a service provider.\n``` php\nclass FilterProvider\n{\n    protected $request;\npublic function register(\\Pimple\\Container $c)\n{\n    $c['filter'] = $this;\n    $this->request = $c['request'];\n}\n\npublic function get($name, FILTER_FLAGS)\n{\n    $raw = $this->request->getParam($name);\n\n    return $this->doFilter($raw);\n}\n\nprotected function doFilter($raw)\n{\n    // Return filtered value\n}\n\n}\n```\nAnd register like so:\nphp\n$app->register(new FilterProvider)\nAnd use like this:\n$app->get('/foo', function ($req, $res, $args) {\n    $param = $this['filter']->get('foo');\n});\nThis decouples it from the core and nicely encapsulates the functionality in a way that is easily portable .\n. No, it's specific to our own implementation. So long as we don't depend on this elsewhere in the core framework we're fine afaik\n. Cool. I think the best course of action is what @silentworks suggested above https://github.com/slimphp/Slim/pull/1177#issuecomment-93985985. Closing this out.\n. @akrabat Did you want to make any further tweaks to this before merge?\n. Sounds good. I'll wait until you are ready for merge.\n. Can we rename \\Slim\\DefaultContainerFactory to something not so Java-esque? :)\n. After some deliberation, I've decided to move forward with PHP-DI as our primary DI container. PHP-DI supports the container-interop interface, and the additional delegate container interface. I think this is the best out-of-the-box solution that also affords us additional flexibility if needed.\n@akrabat Do you agree? If so do you want to get that process moving?\n. I'm going to do some more research this weekend on alternative lighter-weight solutions (League/Container, Aura/Di). Hold off on any implementations until Monday.\n. @Jusomeara Thanks. I saw that a few days ago. We're working on a solution that will prevent us from favoring any one container over another. More info coming soon.\n. Deferring to @akrabat on this.\n. Thank you!\n. haha there are vocal people on both sides. Some for echo, some for strict PSR-7 and returning the response object. I'll figure out if I want to restore echo before v3 release.\n. 3.0.0 will work how it currently does. However, we can introduce alternative dispatching strategies in a minor point release that lets us swap in alt strategies that can rely on the container in ways described above.\n. I think RouterStrategyInterface is a good name. And +1 for getting this going on your fork. Will definitely be willing to merge upstream for a 3.x point release.\n. No. We want those URL-decoded by the time we inject them into the route callback.\n. Binding to the route makes sense, but the difference from app middleware should be well documented to avoid confusion.\n. @akrabat To avoid errors caused by sending headers multiple times in unit tests.\n. If it can be removed without consequences go for it.\n. Feel free to submit a PR if you have time. Otherwise we can get to this soon.\n. Callable binding is super convenient. We've discussed it earlier (no idea where), but it's going to stay in v3.\n. Belated :+1: \n. +1\n. Good catch. I want to say that existed at one time, else it's a remnant from an earlier Guzzle stream implementation. Either way, this needs to go.\n. Yes, it is the last stage in the app lifecycle which returns the content out of PHP to the upstream web server and on to the HTTP client. All isAttached() does is make sure there is still an underlying resource attached to the StreamInterface instance.\n. @geggleto Sounds good\n. +1 making Not Found the default response.\n. I don't really care if they live beneath a traits/ directory. I do think we should change the class suffix to be \"Trait\" to be in line with PSR suggestions.\n. This will not be in the core. it is a good candidate for third-party components or middleware.\n. Why is the Session middleware Slim-specific?\n. Yep. Choose a top-level vendor namespace that is unique to you.\n. +1\n. Perhaps we want to replace the Response body rather than write to it.\n. I'm not sure I really understand the aversion to native methods on our own PSR-7 implementation. You don't have to use those methods. And you don't even have to use our own PSR-7 implementation if you prefer something else entirely. These are merely there for convenience and do not affect Slim's support for PSr-7 interoperability.\n. @akrabat That assumes the end user is providing a third-party implementation, correct? Slim would need to have its own implementation AND then more decorators. Seems to be getting complex.\n. @akrabat is correct. I do want to create a cookie utility class (separate component) before we reach official 3.0.0 though.\n. @designermonkey Nice!\n. @designermonkey Propose your ideas here before implementing please.\n. Service provider for third-party component is fine.\n. Creating repo now.\n. @designermonkey Added the repo, and added you to the maintainers team. You should have access.\n. -1. You already have the ability to run code before and after the application.\n. Each middleware, when invoked, is provided a Request object, a Response object, and a reference to the next middleware. The middleware may manipulate the Request and Response objects before and after it invokes the next middleware.\n``` php\n    function (Request $req, Response $res, callable $next) {\n        // Add attribute BEFORE next middleware\n        $req = $req->withAttribute('foo', 'bar');\n    // Invoke next middleware and fetch response\n    $res = $next($req, $res);\n\n    // Update response AFTER middleware\n    $res = $res->withStatus(400);\n\n    // Return a response to upstream middleware\n    return $res;\n}\n\n``\n. :+1: \n. Same. We can revise for 3.x or 4.x later.\n. Lots of other things have been removed, too. Will add more as I think of them.\n1. Hooks\n. Removal of HTTP caching methods into separate components.\n. Relocation of \\Slim\\App::redirect into the Response class.\n. HTTP request and response changes to satisfy PSR-7\n. New\\Slim\\App` class name, and new \\Slim\\App constructor signature.\n. New minimum PHP version required.\n. Removal of crypto\n. How to read and parse request bodies based on content type\n. Switch statements are cool if you have A LOT of options. Otherwise just use an if statement :)\n. :+1: for PR that adds optional params functionality to FastRoute\n. FastRoute as is lets us create custom named tokens that are expanded into an appropriate regex. See League Route for example implementation:\nhttps://github.com/thephpleague/route/blob/master/src/RouteCollection.php#L202\n. hmm. okay. If necessary this can wait until 3.1.\n. Awesome news. Because I really like FastRoute.\n. Build failed due to Composer timeouts on Travis CI's side of things. Merging. Will fix any issues if they arise.\n. @mnapoli Originally (read: with version 2) that was exactly the use case. With version 3, we are encouraging users to install with Composer. We include a sample .htaccess file in the documentation. I'm not sure why we would need to keep this file in the repo.\n. I have no objections. @rszrama Also got your email. Will get back to you tomorrow when I have some time to write a decent response :)\n. I agree new versions are the time to do this. If everyone is against this, we might introduce a new uriFor() that aliases the existing urlFor() method. We mark the urlFor() as scheduled for removal in next version, and we encourage everyone to use the uriFor() method.\n. Slim is 100% semver, so it cannot be removed until 4.0. We should probably trigger a E_USER_DEPRECATED, too, like @akrabat suggested.\n. I'm with @silentworks. This needs to be done on the container.\n. I'm afraid I spoke too soon. Slim's current implementation includes additional methods beyond the pure PSR7 spec, and if we separated it as it is now we would fragment the spec. Will try to introduce a pure Slim PSR7 implementation after the 3.x release.\n. So there's a lot of varied opinions on this in IRC. Leaving open for now. Maybe this will happen. More info soon.\n. Agreed. I'll take care of this soon.\n. Closing in favor of #2045 \n. I'm fine asserting a few expectations on the container. 99% of the time people will not even consider it, and therefore use our own container by default that comes pre-configured. The 1% of developers who want their own container can figure it out. I'm fine with what we have. I feel this discussion is careening out of control and is only introducing more programmatic and mental confusion to all involved.\nI'll revisit our implementation in the future once PSR-11 is in place (Slim 4.x?). For now, I'm happy with where things are at.\n. You can use Slim without .htaccess. Just prepend the URLs you would use with \"/index.php\". For example:\n/index.php/users/1?foo=bar\n. Can we assume to know how other containers register services?\n. Let's plan on pulling this in for 3.1.\n. We're 5.5+ from here on out.\n. I would think you'll be safe with ServerRequestInterface as @JoeBengalen said. @weierophinney Thoughts?\n. These examples assume you are using Slim's default container. If you are using another container, you just need to make sure the container returns service foo for $container->get('foo');\n. Agreed. Will merge when checks complete.\n. :+1: \n. Whenever I see this argument come back up, I always think about using a composite container. In the Slim 3 App constructor, we accept an external ContainerInterop container. We then create a CompositeContainer instance in the constructor, pass in an instance of Slim/Container that provides default dependencies. We then pass in the user's external container into the composite container. When we invoke has or get on the composite container, it defers to its children containers (first to the external one, then to its default one). Seems like it addresses all issues, right?\n. I generally don't like having multiple containers. But I don't think there's anything wrong with it, either. If we were to do so, a composite container is what I'd recommend because it provides a simple, expected interface to its child containers.\n. All easy fixes though. Want to send a PR for each?\n. All that is necessary in these situations is to return an appropriate response object. In which case, I'd suggest instantiating and returning an appropriate Response instance. This could be made easier with a factory method that simplifies this process. Or we could somehow recycle the existing notFound handler.\n. It's one way. Not necessarily the recommended way. If we can make this easier, I'm all for it.\n. Not sure what this tries to fix. Closing. Feel free to provide a better explanation and I'll reconsider.\n. Also line 336\n. Some streams are not writable (e.g. Guzzle's PumpStream). Which is not an exceptional situation. But it becomes one when Slim tries to write to it (I found this out yesterday).\n. We should respect the Response returned by the route callback. We can ask it if it's writable, and if it says yes, we write to it. If it isn't writable, we don't.\n. What's wrong with IRC?\n. I would ignore this one.\nOn Sun, Nov 29, 2015 at 9:23 AM Glenn Eggleton notifications@github.com\nwrote:\n\nThis is such a huge edge case, I am for not doing anything.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/issues/1571#issuecomment-160419050.\n. Sorry for jumping in late on this thread. Can someone clearly list the use-cases that are not already solved with the existing codebase (excluding this PR)?\n. I've talked with @akrabat about this. I've decided that we're going to make Slim as dumb as possible when it comes to group and route paths... this means we will concatenate the group and route paths exactly as they are defined by the end user. Most of this behavior is already in place. @akrabat is making a few small tweaks to further support this decision.\n\nThe side-effect of this decision is that we allow $app->get('', ...). This looks funny, but it is predictable. I would prefer predictable over magic.\n. +1 what @akrabat said.\n. This looks good, but I also want a test to prove the changes.\n. Thanks!\n. @geggleto We are determining if the response should have an empty body based on the status, and if so, we remove the appropriate headers. I'm fine having the duplicate isEmptyResponse() method in Slim\\App.php to avoid conflicts with alternative PSR 7 implementations.\n. Does this work for you? Can you add a unit test for this change?\n. Thanks!\n. I think this is a fair assessment. I don't see why we have to finalize all routes instead of the one matching route. However, I don't think this is paramount for the 3.0.0 RTM release. Will move to the 3.1.0 milestone.\n. There are some edge cases such as sub requests, etc. We'd want to save the \"finalized\" state as a member variable in each route instance, and then finalize routes lazily on invocation. But a problem to be addressed later in 3.1.0 for sure.\n. Not too early. Just be prepared to potentially rebase your PR in the future.\n. If this is running successfully, we may as well just merge this into RC3 /cc @akrabat \n. @silentworks For sure.\n. :+1: \n. I would just make sure that we agree on where the method override element and/or attribute exists in the request body XML. Should be a child element named \"method\" beneath the root element? Should it be in an attribute on the root element? Or both?\n. Or should we just say it's better to rely on a request header for this?\n. If we remove this to middleware, it should be a first-class middleware and available as soon as 3.0 launches.\n. @geggleto Should also support the X-Http-Method-Override header.\n. Moving this to optional middleware is fine, imo. It'll have a marginal speed increase, and not everyone needs this functionality. But it should be moved to the @slimphp organization if it's going to be extracted. @geggleto I'll add you to the @slimphp/maintainers team if this sounds good to you.\n. Agreed.\n. Nice. Merging in.\n. We'll address this soon. I want to discuss future road map with @silentworks and @akrabat first.\n. Thanks for all the great feedback. I'll organize  these thoughts over the weekend and get them added to our issue tracker.\n. If I turn on a stack trace,  I'm either developing, debugging, or both. And in both cases I want to see exactly where my errors are. You should not need to turn on stack traces in production.\n. I'm on board with this assuming the community is.\n. Slim (the PHP framework) came out before Slim (the templating language) which is why \"slim\" was used on StackOverflow.\n. Thanks!\n. This should be automated or removed imo.\n. Thanks for using Slim! We probably will not add an event bus into Slim though as that goes against our core principles. It should be easy enough to find an external component to do that though.\n. Is there a reason you want to define routes that respond ONLY to head requests? You should already be able to issue HEAD requests  against any GET route, you just won't  get back the response body, just the header.\n. See https://github.com/nikic/FastRoute#a-note-on-head-requests (which Slim uses under the hood)\n. I can tackle this today unless you've already started. Let me know.. I assume the idea here is to delegate error handling to a middleware else to PHP itself outside of the Slim app context. For the middleware, do we intend for that to be a diagnostic-type error handler that reports the stack trace? Or did we intend for that to be a production-ready middleware (e.g. \"something went wrong, we're on it\")? Or perhaps two separate middlewares?\n/cc @akrabat @silentworks @geggleto . @mnapoli That's a good point.. @akrabat Was this for the inbound request object or outbound response or both?. Resolved.. @0x13a Slim will continue to support third-party containers that implement the container-interop interface. But Slim will not provide it's own built-in container.. I tend to agree with @akrabat on this one. I think our goal for 4.0 will be to move forward with new Response(), see what problems arise if any, and then take appropriate action with 4.1.. Why? You'll still be welcome to provide one, but there won't be one by default. One less dependency. Should also simplify the codebase.\n. After further review, this is actually already in place EXCEPT for one change. We need  to make the CallableResolver::__construct() arguments optional. . PR https://github.com/slimphp/Slim/pull/2095. Done. Let middleware be single-pass by default. We will provide a double-pass middleware adapter for those that still want it.\n. Will become:\n$app->get('/foo', function (ServerRequest $request, array $args) {\n    // Return response object\n});\n. @geggleto I wasn't paying much attention to Slim when this was added, so I'm not 100% familiar with the internals of the current implementation. Can you walk me through it sometime soon on Slack?\n. PR submitted  https://github.com/slimphp/Slim/pull/2087. Updated title. This only affects the Slim\\Exception\\SlimException class.\n. We'll hit the main ones I think. We could also do something like JsonResponse(), etc. /cc @akrabat \n. @geekish Can you post a very brief snippet of code that demonstrates what you're thinking?\n. For reference:\nhttps://github.com/php-fig/fig-standards/blob/master/proposed/http-factory/http-factory.md\n. And the meta doc:\nhttps://github.com/php-fig/fig-standards/blob/master/proposed/http-factory/http-factory-meta.md\n. See https://github.com/slimphp/Slim/issues/2048#issuecomment-264172923. Not sure why I created this issue. We already did this! Closing.. @geekish has a good point\n. The container is becoming 100% optional in v4. Currently in v3, there is always a container, and we bind all route callable closures' state to the container (i.e. $this inside of a route callable closure is the container). In v4, if no container is provided, we cannot bind the closure state.\n. We're doing away with Pimple. And if we're going to support third-party containers, they should adhere to container-interop. And if that means only supporting $this->get('...') inside of route callable closures, that's the way I would go.\n. Related to #2100 . Done. See https://github.com/slimphp/Slim/blob/4.x/Slim/App.php#L539-L541. Not yet. This is pretty tightly coupled to @akrabat's work on the new HTTP stuff.. Closing. Duplicate of #2047.\n. This would be a client-side concern if you are using URL fragments. You're better off asking this on the Slack channel. Plenty of folks there who can give you some pointers :)\n. /me pings @akrabat . I included the same fix in my PR against 4.x. Not enough Windows users on the project ;). ^ seconded. @akrabat We should update our contributing docs to clarify.. @akrabat I also left the Uri::getBaseUrl() method since that was a separate, unrelated helper method. I assume you'll deal with that when you tackle the PSR-7 class extraction stuff.. Also, what is the point of CallableResolverAwareTrait exactly? The trait appears to require a container in order to use our own callable resolver. Should I append this PR by adding a setCallableResolver() method to Slim\\App and not rely on the presence of a container internal to the app like so?\n$container = new \\My\\Container();\n$app = new \\Slim\\App();\n$app->setCallableResolver($container->get('myResolver'));\nThoughts?. And how will this work should the user provide a 3rd-party container? If the end-user invokes $app->setContainer($otherContainer), is that container set as the new app resolver?. If my previous comment is true, then we should only add $app->setContainer($container) rather than adding that in addition to a new $app->setCallableResolver($something) method.\nEDIT: The more I think of it, these should be separate things.\n</end-stream-of-consciousness>. What if we do away entirely with the concept of a CallableResolverInterface and just use our own. Is anyone using a different resolver anyway? Do we really need to support more than an actual callable or a container-interop container to resolve things?\nEDIT: Apparently folks are. That's fine.. @mnapoli Thanks! Good to know.. Leaving this PR as is. I've opened a new issue (assigned to me) to refactor more CallableResolver stuff #2096 . 1. Done\n2. Done\n3. Done\n4. Done\nSee PR #2098 . Done. @akrabat See:\nhttps://github.com/akrabat/slim-bookshelf/blob/master/app/src/dependencies.php#L17\nYou'll need the app's router with $app->getRouter(),  else inject your container's router with $app->setRouter($c['router']).. @akrabat Should we have a method, such as, $app->loadFromContainer($container) that populates major objects from a third-party container to help with upgrading from v3?. Example code:\npublic function loadFromContainer(ContainerInterface $c)\n{\n    if ($c->has('router')) {\n        $this->setRouter($c->get('router'));\n    }\n    // repeat for other objects\n}. We could even do importFromContainer($container) and exportToContainer($container) to expedite stuff both ways.. Just pushed an UPGRADING.md file to document changes.. The point of this issue is to move settings management into the App class and away from reliance on the container. Like other major objects,  folks can still use an external DIC to resolve the settings, but the resolved settings must still be injected into the App instance either during construction or after construction via a setter method.\nI'll leave the App constructor alone for now, but I am going to add a public interface to the App class to manage settings. Some proposed methods include:\n\nsetSettings(array $settings) (replace)\ngetSettings()\naddSetting($key, $value)\naddSettings(array $settings) (append)\nhasSetting($key)\nremoveSetting($key)\n\nInternally, settings will be a Collection instance.. Actually, it seems to be just a single-dimensional array. So yeah, we can probably avoid the Collection instance and just use an array. \ud83d\udc4d . We can also add getter/setter methods to the Route instance to control individual route output buffering settings so that the end user can easily chain the method calls during route definition.\n$app->get('/foo', 'callable')->setOutputBuffering(true);\nSame methods will be used inside of Router instance based on the router's default output buffering preference set during router creation.. Another related concern are route groups, which need  a resolver and they need to bind their callables to the app instance itself.. I'm all for removing output buffering, but I'm not sure how you omit that and allow var_dumping from a route callable at the same time.. Explicit tasks:\n\n[x] Let end-user inject found handler into router instance, else default to RequestResponse strategy\n[x] Let router inject found handler into each generated route inside of Router::createRoute()\n[x] Bind route callable to container outside of router\n[x] Remove container from router and route\n[x] Make adjustments to route group as necessary. WIP PR #2102 . @akrabat Pretty sure the PR is ready for review. Is there anything I'm missing from the checklist above?. Closing. Ready for review.. @akrabat Can you review this when you get a chance?. @akrabat Middleware will become single-pass though since it is unpredictable to try and edit a response on the way out.. Well, if that'll work then it seems the best alternative.. Assigning to me.. PR here https://github.com/slimphp/Slim/pull/2166. @akrabat What's your opinion on injecting settings in the constructor? Right now we accept a container instance in the constructor... but that will be unnecessary in 4.x. The container will be optional, so I think we should not ask for it in the constructor, but instead with a setter method setContainer($c).\n\nWe could update the constructor to accept settings though like:\n$app = new \\Slim\\App([\n    'foo' => 'bar\n]);. Currently, there are two ways you may use the 3.x constructor:\n$app = new App([\n    'settings' => [\n        // settings\n    ],\n    // other container items\n]);\nThe array argument will be used to populate a default Slim container. Else, you can pass your own container-interop container into the constructor:\n$app = new App($myContainer);\nBoth scenarios would need to change to the following signature, where the argument is optional and if present, will be merged with the default settings:\n$app = new App([\n    // settings\n]);\n. @akrabat I had to merge my latest work from #2102 into this branch. So you can either merge #2102 and then merge this PR, or you can simply merge this PR.\nLatest changes in this PR make the App::__construct() method accept only an array of app settings which are then merged into the default settings array. It adds a public interface to interact with app settings array. And it separates settings from the app container entirely. To do this, I added getter/setter methods for app handlers (e.g. not found,  not allowed, error, php error).. Ping @akrabat. Can you review and merge this soon? I just merged in other latest changes from the primary 4.x branch.. @akrabat Forward port to 4.x too?. Do we want a test for this?. Will merge once you get a test added.. @akrabat Is this just for 3.x?. Changes so far include:\n\nRequire all route callbacks to return PSR7 response.\nRemove all output buffering concerns from App and Route classes.. :+1: This is a cleaner solution. @rndm2 Do you want to make this change?\n. No worries. I'll do this and link to your PR for historical reference.\n. All tests are green on my end. Can you post the error output you're seeing on your end?\n. Will look at this later today.\nOn Tue, Dec 15, 2015 at 3:28 AM Rob Allen notifications@github.com wrote:\n\n\nIn .gitattributes\nhttps://github.com/slimphp/Slim/pull/1676#discussion_r47608456:\n\n@@ -0,0 +1,12 @@\n+# Enforce Unix newlines\n+* text=lf\n\nDo we want this @codeguy https://github.com/codeguy? You're the\nresident Windows developer, so may have an opinion?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/pull/1676/files#r47608456.\n. What @tuupola said. PSR-2 requires Unix LF line returns. So I give this a big :+1: \n. Git translates line returns on pull and commit. So it's not really a big deal, right?\n. I think my intention was  to retain temporary BC with our current container (to prefer what it provides). But I agree with you. I just pushed a new commit to remove it from this method.. Just pushed a new commit. Luckily, this brought several affected unit tests to my attention.. Updated language. One step at a time :). What does \"reasonably\" mean? That's really the only thing I see that will likely prompt push back. Otherwise this looks great.. \n",
    "j4mie": "Thanks for the merge! This is definitely PHP5 only, as PHP4 doesn't support public/private/protected visibility on methods/properties, doesn't support constructors named __construct, etc.\n. One possible thing to consider when implementing this:\nI have been thinking about the idea of adding optional named routes and reverse routing to Slim for generating URLs in a DRY way.\nThis would work as follows. When defining your routes, you would pass an optional name for the route as the last argument:\nSlim::get('/hello/:name', function ($name) {\n    echo $name;\n}, 'hello');\nThis name would be stored in the router. To use this, you could call:\nSlim::reverse('hello', array('name' => 'Jamie');\nThis would substitute each of the values in the second parameter into the pattern associated with the route name. So it would return the string /hello/Jamie.\nThis means if you modify the pattern associated with your  functions, any URLs generated in your application would automatically change.\nWhat do you think of this idea? Do you think it would be a useful addition? If so, how would this be impacted by the idea of mapping multiple patterns to the same view function? I can see several options here:\n1. Simply disallow reversing patterns when multiple patterns are mapped to the same function.\n2. Pass in an index into the (proposed) reverse function to reverse the patterns in order. So if your function is mapped to two patterns, Slim::reverse('hello', array('name' => 'Jamie), 0) would reverse the first, and Slim::reverse('hello', array('name' => 'Jamie'), 1) would reverse the second. Obviously, different arrays of arguments could be passed in to each one.\n3. Name each pattern separately, instead of each mapping. I'm not sure how the syntax for this would work yet. Perhaps (using codeguy's suggested syntax) the patterns passed as the first arguments to the mapping functions could (optionally) be arrays, containing both the function and the pattern:\nSlim::get(array('/hello/:name', 'hello'), array('/hi/:name', 'hi'), function () { echo $name; });\nThe last two options seem a bit too complex to me, so (assuming you like this proposal) maybe we should just go with the first one. Does anyone else have any better ideas?\nMore generally (and in response to the original idea), in the real world, how often are people likely to map the same function to multiple URLs? What are the use cases for this?\nJamie\n. That looks like a good solution. What would happen if two patterns had the same set of arguments?\nI understand those use cases now. I think the basic problem is that anonymous functions are by definition not reusable, so you have to do everything you need to do with them right where they are defined. I suppose to keep Slim simple this would be the right approach.\nOne other quick idea that might be a possible solution here - if Slim allowed internal requests (invoking the routing system without making an actual HTTP request) then you could have a simple set of cascading routes that would accomplish what you need:\n```\nSlim::get('/', function () {\n    Slim::internalRequest('/index');\n});\nSlim::get('/:page', function () {\n    // Do your page processing here\n});\n```\nEach route could then still have a separate name.\nThis would also have the added advantage of allowing HMVC (like Kohana 3).\n. I was thinking more along the lines of having the same function at two different URL prefixes - /hello/:name and /hi/:name for example. Maybe that wouldn't be very common though.\nI agree 100% that Slim should be kept lightweight. I'm just trying to help think of the cleanest/simplest solution. The simple one-to-one mapping between callables and patterns does seem like a benefit that needs to be carefully thought about before changing things.\nSinatra takes the approach of using an array of routes: http://www.sinatrarb.com/faq.html#multiroute\nIf Slim does go down this road, I actually think codeguy's solution is cleaner in PHP's syntax. To address your concerns (passing an array of routes), Slim could support both approaches. If the first argument to the mapping functions is an array, Slim could iterate over it and map each pattern to the callable. If the first argument(s) are strings, it could pop off the callable and then map to each string. \nI can think of one possible problem (assuming reverse routing is added). The mapping function would just receive an array of arguments, all of which might be strings. The last argument might be a route name, or it might be a callable. How would it distinguish between the two? We can't use is_callable because it's quite possible that the route name might also be a valid callable..\n. That's a lovely solution. I'm a big fan of fluent interfaces :)\nThis allows the basic case to be kept very simple, but allows as much extensibility for the future as we need. Great idea.\n. Looks great. My original attempt at implementing named routes was almost identical. \nDo you have a roadmap or some rough ideas for future additions? I'm guessing that increasing the test coverage will be the next priority..\n. Why not just use Github Issues? Or maybe set up a wiki page for the roadmap, then promote each item to an issue when it comes time to implement it? As this thread shows, the issues system seems to work well as a discussion board for design/architecture ideas.\n. I like the idea of supporting multiple content types, but this should probably be done using content negotiation ( http://en.wikipedia.org/wiki/Content_negotiation ) as this is more in keeping with REST and HTTP. We can support changing URL extensions too (add .json, .xml etc) but this should probably just \"spoof\" the content type in the same way that _METHOD in forms spoofs PUT and DELETE methods.\nI'll have a good look at the roadmap and add my thoughts when I get some time. At the moment, it looks like a great set of ideas.\n. I'll leave the work here to someone who knows more about it that me! However, I was thinking more about clients other than web browsers (REST client libraries, cURL, etc) which are more likely to send the correct headers. We could give Slim some sensible defaults and make it behave gracefully when it receives incorrect headers (from browsers) and still support the HTTP spec.\n. Thanks - issue with the cryptic error message is now solved.\nBefore we do the work to add the try/catch block, we need to think about error handling in Slim more generally. We currently have Slim::error(), but Slim often throws a RuntimeException when something goes wrong. Which method are we going to favour? Ultimately (IMO) we should be throwing exceptions, but we could keep Slim::error() as a helper method which just throws the relevant exception, if we decide this is a cleaner approach. Any thoughts?\n. Sorry I didn't get chance to look at this last night - your implementation looks great.\nI can see a couple of possible issues that still remain. One is the question of what happens to exceptions thrown outside the run method. Both the Router and the View throw RuntimeExceptions which are currently unhandled. Should these also trigger a 500 error? This could be done explicitly (try/catch block) or we could use set_exception_handler to catch everything.\nAlso, what happens if PHP throws an error rather than an exception? Should these also be handled somehow, with set_error_handler perhaps?\n. Great. Should we create a \"Contributing to Slim\" page in the wiki with style guidelines etc?\n. I really like Flask's approach here.\nIf a route is definited with a trailing slash, then when the URL is entered without the trailing slash, Flask will perform a redirect. If a route is defined without a trailing slash, and then is accessed with the trailing slash, Flash will return a 404. This is nice and clear, and seems to cover all the use cases.\nhttp://flask.pocoo.org/docs/quickstart/#variable-rules\n(See Unique URLs / Redirection Behaviour)\n. Flask (or, more accurately, Werkzeug - the framework that Flask is built on top of) handles this with exceptions:\nhttp://github.com/mitsuhiko/werkzeug/blob/master/werkzeug/routing.py#L581\nSo I think that's probably a good way to go.\n. Looks great, thanks Josh.\n. ",
    "kolanos": "I don't know if I would worry about <5.3 incompatibility. One of the things that would make Slim interesting is that it is 5.3+ and that it makes full use of the 5.3 features. Just my $0.02.\n. ",
    "lukemorton": "I like it, it looks cleaner! It's still DRY with your solution the only problem that could arise is that if I held an array of routes somewhere I could not easily pass them to Slim::get(). Arrays are easy to throw more data into the as and when needed, even in a different location. However I think I'm being pedantic now and since what I was trying to achieve only needed two patterns it won't really affect me too much, it's just an array allows you to be slightly more dynamic.\nAs for the param() and params() method, they would allow you to do something like this in the routes:\nSlim::get('/one/:foo', '/two/:bob', function () {\n    Slim::router()->param('foo', 'defaultFoo');\n    Slim::router()->param('bob', 'defaultFoo');\n});\nTwo differently named route variables, and it simplifies working out the callable arguments.\nOverall I'm happy with your vision of my suggestions so feel free to pull and modify, I'll take another look tonight.\nRegards,\nLuke\n. I like the idea of Slim::reverse, although perhaps it should be accessible through the Router object rather than Slim itself, i.e. Slim::router()->reverse(), although that is a bit more verbose it makes sense that it is part of the routing logic.\nI would propose that reverse routing would work exactly like it does the right way round that is of this:\nSlim::get('/foo/:bar', '/foo/:bar/:jar', function() {\n    // ...\n}, 'foo');\nSlim::reverse would try to match the patterns in the order they are defined. So for no defined parameters the first route is always matched Slim::reverse('foo'). Where as Slim::reverse('foo', array('foo' => 'something', 'jar' => 'something else')) would match the second.\nReal world cases are having varying routes use the same logic such as my initial use:\nSlim::get('/', '/:page', function() {\n    Slim::render(Slim::router()->param('page', 'index').'.php');\n});\nBut this is also useful in many other applications where you have indexes, or optional levels of routing such as:\nSlim::get('/:controller', '/:controller/:action', '/:controller/:action/:id', function() {\n    // ...\n});\nLuke\n. Two patterns with the same set of arguments? Then there should only be one pattern, unless I'm misunderstanding the question.\nI think somewhat internal requests might be providing too much of a solution. Although a handy feature I'm not sure they are required at the moment, you could always redirect the request.\nI love Kohana don't get me wrong, but this is a lightweight RESTful solution. If you need Kohana features, use Kohana.\nLuke\n. My pull request allowed an array of routes as Sinatra does, Josh requested that they each be an extra argument to the method which might look slightly cleaner but is less extensible. However I do not personally mind which way this decision is taken.\nAs for your reverse routing issue, I am not so sure... an array for patterns would solve this issue, however it is an issue on a piece of code that does not exist yet. I'm sure Josh will have an opinion :)\n. Perhaps to keep the simplicity of the REST specific methods you could allow the name to be specified as a string, however if you want to add more complex configuration you pass it as an array:\nSlim::get('/book/:id', $callback, 'book');\nSlim::get('/book/:id', $callback, array(\n    'name' => 'book',\n    'conditions' => array('id' => '\\d+')\n));\nThis allows basic named functionality, along with more complex configuration which would be fairly complex anyway. Since how would you specify advanced options to the Slim::named()? Yet another parameter? IMO it breaks away from a RESTful orientation to have another function not named after it's HTTP request type i.e. Slim::named().\nAlternatively you could return an object from Slim::get() so that you could call methods against it for further configuration, i.e.\nSlim::get('book/:id', $callback)\n    ->name('book')\n    ->conditions(array('id' => '\\d+'));\nThat seems cleaner, but obviously adds more logic to the core workings of Slim.\n. Nice additions!\n. It's alright, I had some other changes in mine which were catered for differently in the end.\n. Just some passing thoughts.\nShouldn't accept headers be part of a wider, more full support for routing conditions based on HTTP request headers? So like you use ->conditions() you can also use ->headers(). For example:\n```\n// Our HTTP header compliant route\nSlim::get('/query/:datasource', function () {\n    // lalalala\n})\n    // Route conditions\n    ->conditions(array(\n        'datasource' => '(a|b)'\n    ))\n// Header conditions\n->headers(array(\n    'Accept' => 'application/(json|xml)'\n));\n\n```\nTo save the repetition you could use a public statics for both conditions and headers like so:\nSlim::$conditions= array(\n    'foo' => 'bar' \n);\nSlim::$headers = array(\n    'Accept' => 'application/json'\n);\nThen the final conditions and headers would be a merge of the defaults and individual route defined conditions and headers.\nOf course you could add a higher level accept to header conditions as you have provided in your example with ->respondTo() but I think it could be clearer with a method called ->acceptType(), because pretty much every part of a route definition defines what the application should \"respond to\".\nThis still does not provide a solution to the problem of non-compliant accept headers.\n. I think any solution to the non-compliant accept headers will be inelegant and misleading to some. For example if you allow extensions to be used this will not be clear unless defined within the route itself, which too will lead to repetition.\nI guess you could have something that checks for extensions particularly? If a route is defined with an extensions method then this will require the use of an extension or the equivalent Accept header?\nSlim::get('/data', function () {\n    // accepts /data.json, /data.xml or /data with appropriate Accept header\n})->extensions('json, xml');\nI'm still not happy with this solution however.\n. As I suggested in #48 perhaps these Header based conditions could be provided for in a more general ->headers() method. For example:\nSlim::get('/foo/bar', function () {\n    // Render\n})\n    ->headers(array(\n        'User-Agent' => 'Songbird (\\d\\.\\d)[\\d\\/]*?'\n    ));\n. What is the problem with using square brackets in your HTML?\n. If you use $_SERVER['REQUEST_URI'], clean it like Kohana.\nhttps://github.com/kohana/core/blob/3.0.x/classes/kohana/request.php#L249\n. ",
    "neverender": "Oh, it looks like DrPheltRight did do this, but you haven't pulled in his change.\n. Hi, first of all, thanks for starting this project. I think this may become my favorite php micro framework. The RoadMap looks great. Ideas off the top of my head:\n- Ability to set a directory for static files.\n- Middleware? The documentation says 'Coming soon...'\n- Maybe a built-in way to change the response based on extensions in the url like .xml, .json, etc. It would be nice if you could, within one route, set your variables and then have a different view depending on if the url ends in .xml or whatever.\n- a 'pass' method. Where the current route halts and you get passed to the next matching route. Like Sinatra. \nThese might be non 80/20 things, I dunno.\n. 1. You're right, Apache will serve your static files, so I guess it's not a big deal. But I was just thinking of how Sinatra does it. You set a static file directory (defaults to /public) but your files show up at '/file.txt' instead of '/public/file.txt'. I usually would accomplish this through some .htaccess rules, but it would be cool if Slim could take care of it somehow.\n2. Yeah I can see how \"Middleware\" might not be necessary. But on the other hand, it could be good to have a standardized way of plugging stuff in.\n3. That's exactly what I meant. Whether it's a controller or view thing, I'm not sure. My first thought was controller, since it would need to know route information. And you call the Render method within the route callback. But it is kind of a view-centric feature...\nI just thought of something else. Since you're using github, you might as well fully utilize the wiki and copy the documentation over to it.\n. ",
    "tobsn": "Slim::get( 'route', function(){})->type( CONTENT_JSON ); would be a good idea... to pick up the content negotiation issue. \nlook at the examples here: https://github.com/caolan/quip - but i guess you already solved that anyway.\n. arg sorry, should've seen that after editing TemplateDirectory to getTemplateDirectory... ;)\n. hook.before.dispatch:\nSlim::view()->data['content'] = 'something';\nPHP Fatal error:  Cannot access protected property BlitzView::$data\n. nevermind me... i forgot about the set/get change again. ;)\n. well im in there... ;)\n. i use ActiveMongo\n. ha! i think thats it - sorry for not replying yesterday, i was busy finding the bug and when you started debugging i went to bed cause im sick right now. \ni remember that mcrypt was installed but the package version of php on my rackspace cloud dev servers on ubuntu is baked and returns a 500 status on almost any error or warning so i hand compiled the latest php 5.3 and forgot about some of the extensions like mcrypt and the int8 stuff. \ngoing to download devel now and try it out quickly - but im sure that was the problem.\n. yeah. that was the problem. \nbtw. did you got my mail?\n. ha... weird, its in my sent folder to the info@ you wrote at the top.\n. got it?\n. https://github.com/jsmestad/sinatra_warden/\nlike that?\ni already build a simple hook to do role based auth... i could just gist the thing... \n. @coolGoose: example?\n. im gonna go ahead and close that one so someone can open a new one with new features because this one is already half a year old ;)\n. s/multi/any ;)\n. URLs are written only with the graphic printable characters of the US-ASCII coded character set. The octets 80-FF hexadecimal are not used in US-ASCII, and the octets 00-1F and 7F hexadecimal represent control characters; these must be encoded.\nhttp://www.ietf.org/rfc/rfc1738.txt\n. its just not RFC. everything that is not US ASCII has to be encoded... /Kak%c3%a1\ntough i don't really mind. just wanted to point out that it doesnt have to support it.\n. yeah, not really. if you look into the source of google etc. the href links are all encoded. wikipedia of course can receive such urls directly and unencoded and maybe slim should support it but should always return them encoded.\n. not sure, but sounds like a good idea. you know, just for the heck of it to make sure some browsers dont do BS.\n. so its chained hooks?\n. well, remember the example i sent you? i guess you could do something like that... with the loaders etc.\n. haha, nice :D\n(btw. you couldve put in the lowercase version too in the hotfix)\n. wut? seriously?\n. there is none. \ni use activemongo for mongodb.\n. my version? from like februrary ;)\ni need to update but everything else is pretty stable... i can't even remember where i had this issue... :/\nwups, accidentally closed it.\n. ",
    "djl": "I've got a working version of this running locally, but I've got a quick question about setting the status code.\nIf the status code has to be valid, should this be implemented at the lowest level (i.e. Response->status()) so it's application-wide or should it just be for this helper method?\n. ",
    "josedasilva": "I there, do you have some news on this? Need some help with it?\n. Yes, i have forked the project already and will start to work on it.\n. Just sent a Pull Request on the SmartyView custom view implementation. Feedback is welcomed.\n. Yes, i had the same doubt myself. I believe that having an accessor method to expose the Smarty object would be the cleanest way to do this, in terms of customizing the Smarty object, because you have more needs, when performing a complex development, from  Smarty than render(), just think of fetch() , Cache or Filters usage. I don't think that making the view class more complex, meaning adding more Smarty class method wrappers would be the way, this would kill the Simple Framework purpose of Slim.\n. ",
    "jrivero": "I like your ideas\nYou know flask project? creation and distribution extensions is very simple, and the framework core is very robust.\n. Yes! Is a great micro-framework python based.\nhttp://flask.pocoo.org\n. Now I think it is better to create a slim-haanga project as an extension following the idea of flask.  Later will eliminate the code and put it on new project\n. i think same\n. I Know :)\nfailed other names that do not like me too... examples:\non view object, the methods setData and appendData: may set or append anything other than \"data\"? is redundant, do not you think?\n. ok\n. Thanks!\n. he he he... I feel good, no problem\non this new topic (synonymous) I will say that I like to have a set and append, the latter do not normally use, but I like that there\n. ",
    "pftg": "Forget add revision in which appear this string.\nNow used:\n$this->root = rtrim(dirname($_SERVER['PHP_SELF']), DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;\nBut this is the same bug.\n. ",
    "jimpsson": "Set \"date.timezone\" to it's correct value in your php.ini or use the php function date_default_timezone_set(). Here you have a list of supported timezones: http://www.php.net/manual/en/timezones.php\n. ",
    "hexa2k9": "True, my fault. Had to reinstall php from MacPorts and forgot to configure it properly.\nThanks for the hint.\n. well .. if there is a way to improve that it should be done in my eyes. that just makes one possible error less someone could run into.\n. My comment is: pulled, merged, works, thanks ;)\n. That's how I'm running currently. The basic Idea behind my thought was to work with Slim::config's values.\nfunction ($nick, $format) won't accept those values for setting them for defaults. \n\nRoute::get('nickinfo/:nick/:format', function () { \n  something \n})->defaults('nick' => Slim::config('nick'), 'format' => Slim::config('format'));\n\nwould take those as far as I see that.\nAnyway .. thanks for the Moment. I keep running my current code for the Moment ;)\n. Yep, that works for the moment. Would be good to have that written to disk - or in this case to Git.\nAnyway .. in my eyes it would be good to make a trailing slash really optional. Not just 'hacking around that' since a route is added really fast, and a callback as well - since it's just fun with Slim - but a single char is forgotten very fast (at least by me ;) ).\n. I've added the single \"?\" to my App and it works perfectly with or without the trailing slash now. That's the 'Yep'. Anyway .. it should be documented to get a great Framework (which it is already) for anyone who might run into this \"Edge Case\".\nNow I (and all those who read Issues) know that there's a need for a \"?\" to ignore trailing slashes. So I for one am perfecetly OK with having this requirement.\n. For the records - this currently breaks urlFor() helper. \nIf a Route is created like Slim::get('status/map/?', function ...)->name('statusmap') and urlFor('statusmap') is called the URL returned is http://whatever/status/map/? which results in a 404 Error.\n. I think it's the way it should work like. Due to serendipity I got in touch with Flask (mentioned by j4mie some days ago) and could test this behaviour. That works as it should do. \nAnother way could be an option on Slim's config. Something like 'trailingslashes' => '[redirect|ignore|404]' or so. Then anyone can choose to ignore Slashes or do redirects or 404s. Means of course more work and possibly pollute Code.\n. s/looks/works/ ;)\nThanks Josh.\n. This is basically generating the same Error.\nSetting Config 'debug' to true gives me a more detailed Error (as expected), but still no custom Message.\n. Jepp. Reverted to my original bootstrap.php (without that workaround I've written about yesterday) and now it works as expected. No more creepy errormessage from PHP.\n. I'm using Slim with nginx for quite a while. This is my rewrite which made me never have any problems (however - not a problem - my index.php still is called bootstrap.php):\nlocation / {\n  if (!-f $request_filename) {\n    rewrite ^(.*)$ /bootstrap.php last;\n  }\n}\n. Ignore that - shame on me. I just upgraded my Slim and it's all good now.\n. That fixed it. Thanks Josh.\n. I have seen that behaviour as well. In my case it's on nginx 1.0.5, php 5.2.6 via fastcgi on debian 5.0.8 with exactly the same (or almost the same) date somewhen back in Nov 1981.\nI personally think it has something to do with the stack you're running. I'm running DokuWiki on that stack which does set Expires Headers that far in History as well. On another version of nginx (same versions of nginx & php) in this case these Headers are not set (or set as expected).\n. Just found out since I developed some sort of interest in why this date is set. In php's source /ext/session/session.c starting at line 1085 you can find a Line of code whis does set exactly that date: ADD_HEADER(\"Expires: Thu, 19 Nov 1981 08:52:00 GMT\"); \nSee source here: http://svn.php.net/viewvc/php/php-src/trunk/ext/session/session.c?revision=313663&view=markup \nWhyever this has been set, it's the birthday of a person called \"Sascha Schumann\" who seems to have written that (http://www.phpbuilder.com/lists/php3-list/199911/3159.php).\nAs a workaround it should still be possible to unset the Header using apache2's module mod_headers with a simple \nHeader Unset Expires \nin your .htaccess. That will make the client use ETag as mechanism used for caching\n. Hi,\nI think it's the way it is supposed to be. I'm working with headers like $app->response()->header('key', 'value') for ages .. It's on the docs as well like that: http://www.slimframework.com/documentation/stable#response\nRegards,\nChris\n. thanks, Josh ;)\n. @codeguy this works for the lowercase Headers, yes. However it still sends duplicate Headers (e.g. X-Powered-By is set by PHP itself and the Slim App I'm running). By design that should not be a major issue, however it could be nice to have a setting/parameter to $app->response->headers() to indicate wether the existing one should be replaced or added to it.\n. I'm running php with expose_php = Off, however on other servers I'm running the app on these servers don't. I just wanted all app servers to send the same headers.\n. I'm going to use header_remove('X-Powered-By') right before sending a new Header for that in the meantime. So don't rush with that ;)\n. Sorry, for putting that into master branch by the way.\n. ",
    "jwpage": "\nGotcha.\nOpting for class vars at this stage. The rest of the slim/ classes are decoupled from Slim, so we should keep it that way.\nYep.\nAgree with you there about not including Twig in the Slim repo. \n   Keeping CustomViews with the repo (perhaps in a slim/plugins dir?) or within a separate repo (slim-plugins?) would be my vote, since then we can include unit tests for it to prevent breaking the CustomViews (and other plugins) with future API changes.\n\nI'm relatively happy with the commits at this stage, so you're welcome to pull it into the repository or put it up on the wiki if you like.\n. Definitely correct, they should be static. I'll fix that and do another pull req.\n. Generally you don't need to render multiple templates per HTTP request anyway, and if you wanted to do multiple ones with different functionality in the class you'd just have to set TwigView::$twigDirectory to something else before the second render().\nAs for the the Slim::init() call, it possibly does make sense to accept either a class name and a View class. It'd allow for much more flexibility in case the developer requires it.\n. I've just added a fix, and a pull request for it in Issue #37\n. ",
    "KrisJordan": "I haven't looked closely enough at Slim internals to comment on philosophical/strategical choices that will plug in nicely to the framework, but I do want to highlight a few things.\nSome resources which may be handy during execution from the Recess Framework:\n- MimeTypes - http://github.com/KrisJordan/recess/blob/master/recess/recess/http/MimeTypes.class.php\n- Accepts - http://github.com/KrisJordan/recess/blob/master/recess/recess/http/Accepts.class.php\n- Accepts List - http://github.com/KrisJordan/recess/blob/master/recess/recess/http/AcceptsList.class.php\nThe strategy taken in Recess was to enable content-negotiation as per HTTP but to allow it to be overridden by type extensions 'resource.xml'. So the presence of \".xml\" essentially forces a format.\nThe toughest piece to smooth over is the negotiation that happens within the framework between the router/controller and the view(s). If I'm following your example properly you're avoiding the need for 'negotiating' in-framework by saying up-front with the route \"here's the route, here are the content types it will respond to\". This is a fine choice, and reads quite explicitly, but has some trade-offs:\n- suppose my app only deals in json & xml - it could become repetitive to have to declare this for every route\n- it duplicates knowledge that is arguably the view's to keep - adding support for JSON isn't just adding a template or some new logic to a view, it's also going back and updating each route\nAn alternative to \"a route being able to declare the formats it supports\" is a \"view being able to declare the formats it supports\". This is the approach Recess took. When Recess added CN views added a 'canRespondWith' method so that when it came time to render, that's when the \"negotiation\" happened, and Recess asked the selected view \"can you render this?\" \"no\" \"what about this?\" \"no\" \"what about this?\" as it walked through the prioritized accept header list (or just the one forced type if an \".ext\" extension was used). The main upside was that it was up to the view(s) for deciding whether they could respond. So a \"JSONView\" could always respond that it could render JSON, and a TwigView could look to see if there was a template with a matching extension. The main downsides are:\n- It makes for a more complicated hand-off between controller and view.\n- You can't respond with 'unacceptable' until after the controller is handing off to view. This is potentially bad for post/put/delete requests, shouldn't matter for gets. It's not super clear in the http spec (I don't think) what to do when you can process the content of a post, but not reply in an 'acceptable' content type.\nI don't think there's a right or wrong, just wanted to highlight an alternative strategy which helps tease out each's strengths & trade-offs.\n. Also, in terms of dealing with the parsing of 'accept' headers, I strongly encourage reusing the code in Recess'  \"AcceptsList\" (linked above). The HTTP spec did a poor job designing the grammar for easily pulling out the prioritized content types. It took a bit to get this working and efficient. Usage:\n$acceptsList = new AcceptsList(\n    'text/plain; q=0.5, text/html,text/x-dvi; q=0.8, text/x-c'\n);\necho $acceptsList->next(); // text/html\necho $acceptsList->next(); // text/x-c\necho $acceptsList->next(); // text/x-dvi\necho $acceptsList->next(); // text/plain\nvar_export( $acceptsList->next() ); // false\n$acceptsList->reset();\necho $acceptsList->next(); // text/html\n... etc ... `\nFurthermore, if you're going to do other accept/content negotiation, the class \"Accepts\" tries to make it easy to get nextLanguage, nextEncoding, etc. from an array of headers with keys that look like 'ACCEPT', 'ACCEPT_LANGUAGE', 'ACCEPT_ENCODING', and 'ACCEPT_CHARSETS'.\nWhich brings up another dimension of content negotiation: negotiating encodings for gzip, etc. Ideally this happens as middleware and your controllers/views are ignorant of this decision.\n. ",
    "BigBlueHat": "Looks like this has been percolating for some time, but wanted to throw in my meager $0.02. :)\nI was actually headed here to file to issues: 1) for Accept header (at least) conneg 2) for file extension routing (as I'm \"replicating\" an API in Slim which uses those)\nFor the first, I'd love to see a syntax something like:\nphp\n$app->get('/thing', function() {\n  // do some data gathering stuff\n  // and then hand it off to the chained function\n  // *don't* (ideally) output anything but (maybe) headers here\n  return $data;\n})->accept('application/json', function($data) {\n  // assuming the Accepts header matches the mimetype\n  // use the passed in $data likely via a template\n  // to echo/send back this data and finish the connection\n})->accept(array('text/html', 'application/xhtml+xml'), function($data) use ($app) {\n  // same as the above, but for two mimetype options\n  // these could use a named \"shortcut\" type like \"html\" (re: Recess)\n  // and the specific mimetype could be used conditionally here\n  // to \"tidy\" or otherwise tweak the format distinctions between html and xhtml\n  $html = template($data);\n  if (in_array('application/xhtml+xml', explode(',', $app->request()->headers('Accept'))) {\n    echo tidy_repair_string($html, array('output-xhtml' => true));\n  }\n});\nPlease note: due to the presence of the quality param in Accepts (ex: \"/;q=0.8\") the explode() above won't work. Just an FYI. :)\nNot sure if it's \"ideal,\" but I like the fluent interface use and the feeling of munching data in the first part ($app->get(), and dealing with output format issues in the second part (->accept()). I also think using \"accept\" as the method names aligns more closely to what one sees \"on the wire\" when using HTTP--which is a perk, maybe, but one I like. :)\nSo, there it is. Roughly $0.02. ;)\nThanks.\n. I'd prefer to have it both ways actually (via ArrayAccess, maybe?).\nRegardless, the documentation reflects the (old?) array access approach, and likely needs updating:\nhttp://www.slimframework.com/documentation/stable#response-header\nI'd update it via a patch request, but I'm not sure which you want or if the array access approach is just out \"for now.\"\nThanks.\n. Hmmm...guess I need to upgrade...\n\"Fatal error: Cannot use object of type Slim_Http_Response as array...\"\nWill do, and retest.\nThanks.\n. ",
    "njh": "I needed Content Negotiation for a project I am working on, so I have implemented it in a branch:\nhttps://github.com/njh/Slim/tree/negotiation\nEven if it doesn't get accepted into Slim master, hopefully some of the code will be re-usable and there is something that can be used in the meantime.\nSee #376 for details.\n. +1 to content negotiation using the Accept header.\n. I needed Content Negotiation for a project I am working on, so I have implemented it in a branch:\nhttps://github.com/njh/Slim/tree/negotiation\nEven if it doesn't get accepted into Slim master, hopefully some of the code will be re-usable and there is something that can be used in the meantime.\nSee #376 for details.\n. +1 to supporting OPTIONS\n. At a guess, I think this is coming straight from Apache, not Slim.\nDocumentation for the  directive:\nhttp://httpd.apache.org/docs/current/mod/core.html#limit\n. ",
    "bobdia": "Having too many routes with slightly different conditions seems like a bad pattern. It would be faster to check conditions inside a single route, if you have more than a couple.\n. Perhaps the built-in DIRECTORY_SEPARATOR constant would be handy.\n. Just thought I'd mention it. \"/\" will work on windows so should be simpler to always use that. Let me know if you need someone to test on Windows.\n. What do you think about priorities for hooks/filters?\nHere is how WP does it for illustration purposes. The code is a bit dirty but we can do better than that: http://core.trac.wordpress.org/browser/tags/3.0.3/wp-includes/plugin.php\nPriorities seem like a must if one has to fine-tune multiple plugins operating on the same hooks.\n. Here are my changes: https://github.com/bobdia/Slim/commit/a2f4ff7491ff7df9fbe7481cf97984cf13aa771f\nI need suggestions for default hooks to add.\n. I should have started a different issue for the filters.\nDoing an array_map by default would be a bad idea when you want to filter the array as a whole. I think just running array_map inside the callback function would be best. \nI mean default filters but not exactly like that. Think \"slim.before.flush\", so plugins can filter content before Slim flushes the buffer. I'm not sure where are some good places to add applyFilter() in the Slim core, so that's what I was asking for. I've been going through Slim's code myself, so I'll have a better idea of how everything fits together soon. (btw I've commited some minor tweaks in my 'develop' branch)\n. I can't explain much at this point, I should use it a little first. I'll try to work on a plugin that makes use of filters.\nI've been working with some WP themes and plugins and that was what inspired me to add this in Slim. This page lists all the filter hooks available in Wordpress and might provide some further insight: http://codex.wordpress.org/Plugin_API/Filter_Reference\n. I think keeping them separate is best. Hooks are only about side-effects. Filters only operate on values passed to them. Also makes code easier to search. \nI'll leave the decision to you. \n. I agree it's just semantics and it bugs me the same way. I made a few changes and combined the two. I guess developers will have to document their hooks so other people will know if it's a filter or not.\nHowever, one of my original points was that the existing hooks should not have any arguments. If they need to interact with Slim:$app they can use Slim::getInstance(). This way we don't have to figure out whether to pass Slim::$app to some of the hooks.\n. I forgot to push my changes the other day, will do later today.\n. The combined code is ready and I've also added a priority system. My first pull request, so no idea if I did it right.\n. It's there in closed tickets. I guess my accidental clicking on the \"Comment and close\" button was bad timing. I'm keeping up with your develop branch, so it should be easy to pull whenever you get to it.\n. Cool. By the way you can also setup a hook to post commit messages on the IRC channel. \nGo to the repo's page, click the 'Admin' buttone next to Watch/Fork. Then 'Service Hooks' > IRC and input the following:\nServer: irc.freenode.net\nPort: 6667\nChannel: ##slim\nNick: SlimCommiter\nSSL: false\nActive: true\n. I somehow didn't notice that the status number was in both the key and value of the message array. Is there a reason for that?\n. I didn't test this before opening the issue by the way. Also, Tobsn said he didn't have any problems running this on lighttpd without the fix.\n. Better debug - yes\nAutoloading\nI think most people are following the proposed standard: http://groups.google.com/group/php-standards/web/psr-0-final-proposal . I think that's the only thing we need and only implemented for the core of Slim. Then if anyone wants to implement custom autoloaders, they can work with that or write their own.\nSplClassLoader in PHP: https://gist.github.com/221634 , and as an extension: https://github.com/metagoto/splclassloader\nORM/models/pagination/\nI don't think Slim needs and ORM at its core.\nSecurity\nDevise for Rails looks very useful, something similar for PHP would be great. I plan on writing (maybe in the coming week) a small auth plugin for my webapps, but it will be nowhere near the scope of Devise. Just something simple with a couple HTML forms and a SQL backend for storing credentials.\nLocalization\nA story to consider: \nhttp://search.cpan.org/dist/Locale-Maketext/lib/Locale/Maketext/TPJ13.pod#A_Localization_Horror_Story:_It_Could_Happen_To_You \n(some discussion: http://news.ycombinator.com/item?id=2095334)\nCaching\nA caching utility with adapters for various storage systems would be great, along with some degree of integration with core Slim.\n. @codeguy\n1. One advantage is that other people that have autoloaders compatible with the proposed standard, can just drop Slim in their /vendors directory and have it work for them.\n2. Let me know if I can help with that.\n3. I'm not sure what my point was, perhaps that no localization is more desirable than bad localization. It's important to have for plugins however, so we could borrow a few ideas from MakeText and see what we can make of it.\n4. Again, this is very much needed for a good plugin platform. Something simple like Slim::cache('key', 'Lorem ipsum') should suffice. If we go with pluggable cache engines then we also need Slim::setCache('engine', $options).\n. I agree with adding some default views to the auth plugin. Speaking of phpass, I've made a PHP5-only implementation (it needs a couple improvements though):\nhttps://github.com/bobdia/php-otp/blob/master/PassHash.php\n. An idea for a default filter to add: urlFor()\n(My bad, I closed this by mistake.)\n. How about something like the following:\n\n    public static function multi($methodArray, $pattern, $callable ) {\n        return self::router()->map($pattern, $callable, $methodArray);\n    }\n\n. Is using only \\p{L} (letters) possibly too restrictive? How about \\p{N} (numbers), \\p{P} (punctuation) or \\p{S} (symbols)? I understand why you wouldn't want to allow all Unicode characters, but does {L} cover what's needed?\n. Also, I think \\w match unicode characters when using the 'u' modifier at the end.\n. Had to reread what the 'u' modifier does. It's used when you want the regex pattern to include Unicode chars.\nSo we just need the \\p{class} stuff, you can remove the 'u' modifier.\nEdit:\nNever mind about that, just tested it. We do need the 'u'. The docs were slightly confusing for me.\n. Tobsn is right.\nNot all browsers, webservers, middleware, etc handle Unicode the same way. It doesn't seem like a bad idea to have Slim handle both regular and Unicode URLs, but we may be proven wrong in the future.\nyaph, I think it's very likely you are seeing a decoded URL in your browser(s), not a true unicode one.\n. ",
    "nielsen": "Oh! I never had debug set to true; nvm, then.\nGreat job so far! Looking forward to content negotiation\n. /** COOKIES **/\n/**\n * Add Response Cookie\n *\n * @param   Cookie $cookie\n * @return  bool\n */\npublic function addCookie( Cookie $cookie ) {\n    $this->cookies[] = $cookie;\n    return setcookie($cookie->name, $cookie->value, $cookie->expires, $cookie->path, $cookie->domain, $cookie->secure, $cookie->httponly);\n}\n. The code executes as follows:\nA POST with login form data is sent to the Route /login/; that calls:\n  Slim::post('/login/', function() {\n    $user = new user;\n    $user->login( $_POST['login'] );\n});\n[All my custom classes, like the part below, are invoked in Slim::before();]\nThe offending part with cookies, after all the checks, etc, is:\nif ( isset( $info['remember'] ) && $info['remember'] == 'on' ) {\n        Slim::session( $config['auth']['cookie'], $content, time() + 75000 * $this->priv, '/');\n        setcookie('testing123', $content, time() + 60000, '/');\n    } elseif ( !isset( $info['remember'] ) ){\n        Slim::session( $config['auth']['cookie'], $content, time() + 30000 * $this->priv, '/');\n        setcookie('testing456', $content, time() + 60000, '/');\n    }\nThe direct \"testing\" cookies set, but calling Slim::session() doesn't work as a setter (but it works great as a getter; I think the \"NULL\" response value is better than just an isset() check).  I can tell you that I traced, as I commented in the original problem, that $this->cookies[] only lasts so far into the app; by the end, when they're iterated through and passed to the PHP handler, they weren't there.\nPerhaps some info on the life cycle of a Slim request (which would be helpful in the wiki) would be useful for my debugging.\n. Thanks; I look forward to looking it over, and pulling it in.\nI really like this framework; you've done a great job, and I'm happy to see how it's developing.\n. The versions I have '/maintenance/(:time)' and '/login/(:msg)' default to '/maintenance/' and '/login/' and 404 without the trailing slashes, i.e. the router doesn't automatically append them.\nI had already tried the setup you suggest, which reverses the problems of the original: the slashed version throws 404 unless there is a \"/time\" or \"/msg\", and the unslashed version is default.\nNeither case utilizes the auto-append slash which works otherwise without optional route segments.\n. This is a better example:\nSlim::get('/blog/(:id)(/:article)', function( $id = null, $article = null ){ \n    if ( !is_null( $id ) && !is_numeric( $id ) ) { Slim::pass(); }\n    global $db;\n    if ( is_null( $id ) ) {\n        $p = $db->query( $db->prepare( \"SELECT * FROM post WHERE type != %s ORDER BY date DESC LIMIT 20\", \"page\" ) );\n        Slim::render('posts.php', array('postsObject' => $p)); \n    } else {\n        $s = $db->query( $db->prepare( \"SELECT * FROM post WHERE id = %s\", $id ) );\n        if ( $s ) {\n            Slim::render('single.php', array( 'postObject' => $s[0] ) );\n        } else {\n            Slim::notFound();\n        }\n    }\n});\nI cannot type as a URL \"http://localhost/blog\" without throwing a 404; perhaps that works a little better as a demonstration?\nAlso, in reference to your prior point, the \"/maintenance/in%20an%20hour\" works just fine: http://madebycoil.com/maintenance/in%20an%20hour for example (look @ \"Come back in an hour\"). http://madebycoil.com/maintenance throws a 404, whereas http://madebycoil.com/maintenance/ doesn't (and takes the optional route segment \"a while\" and passes it to the template). The code in question is:\nSlim::get('/maintenance/(:time)', function ( $time = \"a while\" ) { \n    Slim::render('50x.php', array( 'time' => $time ) ); \n});\n. +1\n. c.f. https://github.com/codeguy/Slim/issues/60\n. ",
    "dmtrs": "@nielsen :+1: \n. ",
    "tutuca": "As far as I know they are not mentioned anywhere in the spec. And they are just plain ugly :) \n. Woah dude!! that was fast :)\n. ",
    "Jud": "Just trying to commit things I run into while using Slim, its a great framework.\n. ",
    "phaseinducer": "I run a WAMP server with the latest dev version and I had a similar problem : my URI root was \"\\\" so all my generated URLs were incorrect. This is due to the different behaviour of dirname() on Windows, called in Uri::getBaseUri() (line 71).\nI fixed it like this :\n    $baseUri = strpos($requestUri, $scriptName) === 0 ? $scriptName : dirname($scriptName);\nreplaced by :\n    $baseUri = strpos($requestUri, $scriptName) === 0 ? $scriptName : str_replace('\\', '/', dirname($scriptName));\nIt's not very pretty but effective.\nI tested it with and without a controller call and also with the app installed in a sub-directory.\n. I have no fork for the moment so you can make the change, yes.\n. Great! I'll test this tomorrow.\nThank you for being so responsive ;)\n. Yes it does.\nIf it can help you the only solutions i found for the moment is :\n- to call session_start() just before Slim::init(), but i don't think it's a good solution.\n- to replace session_regenerate_id(true) by session_regenerate_id() (l. 369 in Slim.php). That's why i think the problem comes from the session id.\n. I'm running a WAMP server with PHP 5.3.1.\nMore information : the problem occurs when your page calls non existing resources (eg images). Since they don't match the htaccess condition the controller and so Slim::init() is called several times.\nAnd I have the following error message in my log file :\n    Message: session_regenerate_id() [function.session-regenerate-id]: Session object destruction failed | File: C:\\Users\\Yohan\\Documents\\NetBeansProjects\\unjeuneunpro\\Slim\\Slim.php | Line: 369 | Level: 2\n. Good idea, thanks!\n. ",
    "OriPekelman": "Hi,\nIt is kind of you to ask for agreement, but the code is BSD, so you need not ask permission. I am sure Fran\u00e7ois the author will be honored to have you use it. And anyway you can consider this message as a formal accord. Also have a look at Toupti which follows a very similar logic to Slim, there might be stuff there that could interest you (we will be pushing a new version soon I hope).\nOri Pekelman\nCTO AF83\n. ",
    "iromli": "nice idea, a public channel would be great :)\n. hi,\ni wrote a custom View class for Haanga template, you could take a look here.\n. sure, i'll re-fork Slim and sent you a new HaangaView code so you can take a look on it (the old one was accidentally deleted)\n. ",
    "Wemago": "https://github.com/jasonmoo/DumbledORM\nmaybe this could be a good option for you, uses PDO, so you can do sqlite\n. ",
    "andyl": "Thanks these are all great suggestions.  \nDo either of you have an opinion on Propel ORM ?? (http://www.propelorm.org/)\n. OK - I will give Idiorm/Paris a try - thanks again for your feedback !!\n. ",
    "francescoagati": "hi,\none can should be like caches_action in rails where you define an action that must be cache for a certain time.\nin php with functional programming in 5.3 should be possible memoize a function. With an High Order Function that accept like parameter a function and return the function memoized.\nThis is an example, with slim, imagine that there is a function memoize in php code is possible make this thing:\nphp\n\n<p$action_fn= function ($name) {\n    return \"Hello, $name!\";\n};\nSlim::get('/hello/:name',memoize($action_fn));\nSlim::run();\n?>\nmemoize will cache all the call all the function $action_fn with parameter name.\n. P.S, Memoization is not made in memory of php process but with a cache system like memcached, db or filesystem\n. i think of yes. but this was an idea for introduce elements of functional programming in slim with php 5.3\n. ",
    "SargentHatch": "Sorry for the delayed response.  Thanks for checking into this.\nMy web host does not allow: error_reporting = E_ALL\nThat's it really.  On my localhost, I changed the php.ini and syntax errors showed up no problems.\nMore experienced PHP users will get this right away.  I assumed that Slim handled all errors, but I understand now why it cannot.\nThanks for checking into this.  The framework seems really nice so far.\n. ",
    "rlm80": "Hi,\nI'm not really THAT good at PHP (it's a hobby, it's not my job), so take my words with a grain of salt.\nI really like the framework's philosophy of keeping it as small as possible to that people can choose whatever tools (ORM...) they like to work with best.\nThat's why I would advice against the point \"autoload controller/model/view\". It's fine to use autoloading for the framework's own classes, but providing such a mechanism for user classes goes against the philosophy of the framework IMHO. Some people like to put their classes here, some people there, some like underscores, some prefer namespaces and so on.\nBeside, it's really easy to add one's own autoload function in the bootstrap file. Something along the lines of (not tested) :\nspl_autoload_register(function($class) {\nrequire [my classes folder] . strtr($class, array('_' => '/')) . '.php';\n});\nMaybe providing such an example in the docs would be good though. Since most frameworks have that feature built-in, newcomers are bound to ask you why it's not there and how to add it.\nBTW and on an unrelated note, I think the syntax...\nSlim::route([route name])->url([url params]);\n...would be more elegant than the current Slim::urlFor() function. Matter of taste though.\nThank you for your great work on this.\n. I'm not sure solving the problem would require the framework to be smarter about resources. All that's needed to solve it is to provide \"method-less\" routes : routes that match any HTTP method, not specifically GET or POST or...\nIt wouldn't take anything away from the current implementation. Method-less routes could exist alongside the usual get, post, etc. routes. They would simply need to be checked for a match by the router after the normal routes, since they are less specific.\nThe syntax for creating them could be the one I posted above : Slim::route(), or if it causes backward compatibility issues, Slim::any() would be fine too.\nThat way, in addition to solving the problems described above, you would satisfy people who like to put a strong emphasis on HTTP methods distinction (the REST fans) but also people attached to a more traditional approach to web development, where the HTTP method is considered more like a request parameter to be checked on occasion.\n. ",
    "DarrenN": "would donate beer money for a good Warden port to PHP usable in Slim.\n. Devise is the 'gold standard' as it comes along with views, etc. But having a solid foundation like Warden as a plugin would be fantastic (using phpass http://www.openwall.com/phpass as the hashing algorithm). Authentication is one of the things I dislike having to implement, but always have to have.\nAlso, +1 for the Autoloader. I'm currently using the Namespace spec that @bodia mentioned but its causing all kinds of problems with other libraries I need for my project so I will probably ditch it. Slim's built in is nice, and Twig has it's own, I just need a clean way to load my models and other libs.\n. ",
    "Calvein": "I think it could be a good idea to add a parameter of the Slim::urlFor() method to inform what HTTP method we would like to use, especially for the DELETE one when you don't need a form but just a link.\nInstead of simulate the delete in JavaScript, by creating a form, it would be nice to be allow to do something like this : Slim::urlFor('maRoute', array('id' => $id), 'delete')\n. I would like to do only one name for my GET/POST/PUT and delete routes. I just want a link to perform my DELETE route, the problem is that Slim::urlFor('myRoute', array('id' => $id)) will always go in the GET route. If I want my link to perform the DELETE route, I have to catch the click event on my link and simulate a form like this :\n\n$('.destroy').live('click', function(e) {\n  e.preventDefault();\n  if (confirm('\u00cates-vous sur de vouloir supprimer ce document ?')) {\n    var $this = $(this),\n        $form = $('').appendTo('body');\n    $form\n      .attr({\n        method: 'POST',\n        action: $this.attr('href')\n      })\n      .hide()\n      .append('')\n      .find('input')\n      .attr({\n        'name': '_METHOD',\n        'value': 'DELETE'\n      })\n      .end()\n      .submit();\n    $this.parents('tr').fadeOut();\n  }\n});\n\nSo I thought I could be nice to have a parameter in urlFor to choose wich route we want to use.\n. I think add the urlFor method in Slim_view could be useful to allow us to do $this->urlFor() in templates in 1.5.\n. I have set the session handler to null, the weirdest part is that I havn't put any datas into the session\n. The Development Release  has this issue.\n. I was talking about the Development Release on the website (http://www.slimframework.com/) not the sources on github, I'll send you the trace of my $_SESSION tomorrow, I actually have to go right now.\nAnyway, your framework looks very promising so here is a unicorn to make you happy :\n\n                             \\\n                              \\\n                               \\\n                                \\\n                                 >\\/7\n                             .-(6'  \\\n                            (=___./\\\n                                 )  \\ |\n                                /   / |\n                               /    > /\n                              j    < _\\\n                          _.-' :``.\n                          \\ r=._\\.\n                         <\\_  \\         .-.\n                          \\ r-7-. ._  ' .\\\n                           `,      -.7  7)   )\n                            \\/         |  \\'  / `-.\n                                       ||    .'\n                                        \\  (\n                                         >\\  >\n                                     ,.-' >.'\n                                    <.'.''\n                                      <'\n\n. I just get the very last version and the bug is still there.\nHere is an image of the first request and after 50 refreshes :\nhttp://i.imgur.com/Z9g1p.png\n. Here what I get :\n\nArray\n(\n    [flash] => Array\n        (\n        )\n)\n\nOne of my co-worker had this bug to this morning. Since he update it looks good (he's on Windows Vista with PHP 5.3.5).\nBy the way, here is my Slim configuration :\n\nSlim::init(array(\n    'templates_dir'   => '../templates',\n    'log.enable'      => true,\n    'log.path'        => '../logs',\n    'session.handler' => null\n));\n\n. ",
    "CoolGoose": "Hi guys, I was wondering if a feature like Padrinorb's \"mount\" for apps/modules would be nice in slim\nhttps://github.com/padrino/padrino-framework/blob/master/padrino-core/lib/padrino-core/mounter.rb\nBasically it allows you to split your items in distinct chunks :P\n. @tobsn \nhttp://www.padrinorb.com/guides/mounting-applications\n. ",
    "silentworks": "In the current version in develop branch you can do $app->urlFor(); which is as good as $this->urlFor().\n. Yeah its all the same issue, even with the fix the results seem wrong. If i call Slim::request()->put() without a param passed to put() I seem to get the returned array as [values] => key, where I think that should be the other way around. I found that the problem is the way how parse_str works, its fine for the old \"application/x-www-form-urlencoded\" but not for \"application/json\". so I changed the function to look like this:\n\nprotected function loadPutParameters() {\n        if ( $this->getContentType() === 'application/x-www-form-urlencoded' ) {\n            $input = is_string($this->body) ? $this->body : '';\n            if ( function_exists('mb_parse_str') ) {\n                mb_parse_str($input, $output);\n            } else {\n                parse_str($input, $output);\n            }\n            return $output;\n        } elseif ( $this->getContentType() === 'application/json' ) {\n            $input = is_string($this->body) ? $this->body : '';\n            $output = array('body' => $input);\n            return $output;\n        } else {\n            return array();\n        }\n }\n\n. Ok that makes sense, could you note this in the documentation for future versions. Because it is not clearly stated others could end up trying to do the same as I did. Also for future version implimentation take a look at Phil Sturgeon Rest Lib for Codeigniter https://github.com/philsturgeon/codeigniter-restserver/blob/master/application/libraries/REST_Controller.php, It might be of use.\n. You get that because you are in debug mode, I tried it on my production version of a website and all I got is the 404 page I created. I am using Slim develop branch version btw. What version you using?\n. When possible can you do a update and update this ticket as to wether this bug is solved or still showing up in your code. Could you close the ticket for now until you test the latest version.\n. I think you closed the wrong issue. Or maybe I got my threads crossed.\n. Can you please change the title of this as it isn't explanatory as to what your pull contains.\n. Hi codeguy just so you know I have worked this out now and its not a bug, it was a problem with my .htaccess rules. I will leave the ticket open as  I will be writing up a post of how to multiple instances of slim on one project. I am currently using it for a CMS backend and a front controller at the same time.\n. This might be a bug but it can be avoided by using $app->urlFor(name)  as the action for the form and set a ->name(name) on the post routing. This will ensure that when you change you route, your action will still point to the right place.\n. You can do that in your code by using a switch statement. and have a case called details.json or just json. If just json you will need to explode the url param at the . and return only the second part of the array as the argument for the switch. If this is not clear enough I will do a example in my next comment if you need one.\n. @aaronjameslang what version of Slim are you using?\n. Right I can see it was done here https://github.com/codeguy/Slim/blob/1.5.1/Slim/Slim.php#L1059 but was removed.\n. I don't recommend this but what I did was use the notFound method as my catchall since it isn't implemented as yet.\n. Thanks, I forgot to mention I didn't get a chance to run the unit tests after making the change.\n. This works correctly Josh. I tested from develop branch and it works without any issues.\n. Yes this will be added to Packagist soon.\nOn Apr 14, 2012 9:58 PM, \"Ben Evans\" \nreply@reply.github.com\nwrote:\n\n@codeguy Are you adding it to http://packagist.com ?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codeguy/Slim/pull/251#issuecomment-5134502\n. This is now available on Packagist.\n. Since this has been opened for quite awhile, not sure if this has changed or if its still the same. I will close this out as a lot has changed in Slim develop branch which might reflect some of this.\n. @briannesbitt will this return a string or a object? I so want this to return a string also.\n. Hey guys this can be accomplished by using map, its is a few more lines of code than one but it works for this really well.\n\n``` php\n$app->map('/entity(:item+)', function ($item = null) use ($app) {\n})->via('GET', 'POST', 'PUT', 'DELETE');\n```\n. Guys if this is not a actual Slim issue please take it over to the forum instead. http://help.slimframework.com/\n. No this doesn't nullify the use of namespace at all. I think its useful for users transitioning from older version of Slim.\n. Hi @azag0 you can use a twig global. http://help.slimframework.com/kb/views/using-twig-functions-inside-of-slim\nClose this ticket out please.\n. Please send this PR to develop branch instead.\n. Post a reference link here to the topic on the support forum and I will try and help as best as I can. Please close this issue after.\n. @tuupola we will take this into consideration and add some info in the documentation around this.\n. @lucasrubini is this issue still ongoing? also is it still the same in latest version of Slim?\n. Closing this one off, please reopen if you find this issue still persists in the latest version of Slim.\n. Would FlashKeep not help at this point? http://docs.slimframework.com/#Flash-Keep\n. Not sure where the get() inside of the get() method works, is that what you are implementing? if yes we currently have group() method in develop branch which accomplish this.\nAlso when sending PR try and send from develop to develop, your master would be missing some of the updates that develop branch has.\n. This seems like a bit of a overkill. I prefer the current setup where you define your routes before the run loop completes. I don't think being able to add routes after the run loop is a good idea (well not for Slim at least).\n. Hi @doublemarked your feedback will be taken into consideration. I think that as it currently stands it is considered to be working correctly. This will probably get looked at in the next major point release.\n. I will run some test on this along with your changes on a few different environments and see if it behaves the same, especially on IIS. Once this works correctly I will try and get it resolved.\n. Can you test this is 2.3.5 release of Slim, this should now be fixed.\n. I hope you noticed I mentioned that mcrypt is installed on my production server, but I don't want it on my local. I would prefer if the framework not dictate to me about what I need to have installed as a requirement and more suggest to me. So this would be better off in a suggest rather than a require. Also make it more prominent in the docs that you should never put Slim into production without mcrypt setup.\nI am coming from the point of Slim has always kept its requirements low and not complicate the setup for anyone, hence why we have a Simple DI built in rather than using Pimple (which would become a dependency). I think we should keep it simple as always.\n. This seem to have been fixed now. Closing off.\n. Closing this off since its over a year old, re-open if you think its still relevant or if its more of a question that a bug, ask about it over at http://help.slimframework.com.\n. Closing this, since in develop branch all interfaces are now in place.\n. Closing this off as its an old issue, reopen if necessary.\n. I am going to close this one off again as it can be done through mod_rewrite for now, but will look into it again once we start looking into better error handling and better http response code usage.\n. There are currently discussion around error handling and the notFound method at the moment, it would probably be nicer to have something like what @tuupola suggested here https://github.com/codeguy/Slim/issues/881#issuecomment-53032739. I am going to close this one out in favour of @tuupola suggestion.\n. I don't think this is a bug in the behaviour. If I had a scenario where I had another route declared with only 3 params this would break.\nphp\n$app->get('/partA/partB(/:partC)/partD(.html)', function () {});\n$app->get('/partA/partB(/:partC)', function () {});\nMy second route could be rendered useless because of this PR. I will be closing this off based on that note and on the note of no Unit Test provided. You can re-open with some tests if you still want this merged.\n. Over a year and no reply from original author so closing this one out.\n. What was the end result of this? did it work?\n. No explanation was given as to what this solves and code is now outdated. Closing off this one.\n. Closing this off, if you need to discuss this further please do so over at http://help.slimframework.com/\n. I think this should be done on a per project basis, so probably better as a custom solution, with the changes to Slim 3, this can be easily implemented by anyone.\n. @johnhunt that wasn't very useful, the point of this ticket is to talk about the kind of tutorials you would like to see.\n. I will start writing up some tutorials of using Slim with JS Frameworks, I have been using it extensively with AngularJS and have a lot to share. I will try and create a few stubs and run them by the rest of the team.\n. @revuls thanks for that, we are working on a Slim addons listing directory at the moment, where all middleware, loggers, views and anything Slim related will be listed.\n. @tuupola I replied on that other ticket, but just to have a reference here, its best to create your own namespace as you have done in that example. Whenever creating addons, its best to not pollute the \\Slim\\Middleware namespace or any of the other \\Slim related namespace.\n. Hi @DavidePastore can you state your OS and PHP version please?\n. Yeah I have tested this and getting the same issue, this even occurs with the Slim View, so its an issue within urlFor method. I will take a closer look into this.\n. This seem like the same as #663 and #667 should fix this. If not can you give more details as to the OS the client server is running and version of Slim you are using.\n. Re-testing now, I didn't realize that travisci is only running on develop branch.\n. I seem to be getting the ViewTest failing and not the one you mentioned. Are you testing master branch?\n. ah yes what you said would make sense.\n. Closing this off, if you would like to re-raise this please open on the forum. http://help.slimframework.com\n. Can't test as we don't have a IIS server stack to test it on, closing for now.\n. As with what @designermonkey stated, Slim is a request response framework, I think CLI work should be done with something like Symfony console.\nClosing this off on that note, reopen if necessary.\n. Please reopen on http://help.slimframework.com since this is a question.\n. This sounds good to me, especially if the templates can take an array for its paths too, as Twig and Smarty template allow multiple template paths.\n. Ok cool, I will make the necessary changes to the Twig and Smarty views on a new release branch.\n. Open over at http://help.slimframework.com instead please.\n. This is now outdated and cant see the immediate value of the change, closing off for now. Reopen with updated code and the value it adds over using array_values and will reconsider.\n. Since this is more of a question could you move it over to http://help.slimframework.com instead please.\n. Closing this off in favour of #822 \n. @designermonkey how would this work if we had more than one method and route for that controller?\n``` php\n$app->get('/hello/:first/:second', '\\Hello:sayHello')->setConstructorParams(\n    array($app, $someParam)\n);\n$app->get('/yo/:world', '\\Hello:yoWorld');\n```\nWould I have to pass setConstructorParams on the second route too? I can see this becoming a long array list of dependencies on my routing code if I had lets say 6 dependencies and if I have to repeat that, it would start to become a bit tedious.\n. @mvader but that means you just tied me into all the same objects for all my controllers which is not ideal.\n@lalop I like that idea, the problem I am finding with this is how would one find the key in the di container without injecting the di container into the Route?\n. @mvader that would be a better solution. Maybe change the method name, I so dislike that name, something like inject sound better and makes more sense.\nphp\n$app->inject('\\App\\Home', $app);\n. @lalop I understand that bit, but how do you anticipate getting this into the Route.php file without injecting the di container?\n. @designermonkey This still feels like I am repeating code for the sake of repeating code, I will have to call setConstructorParams on each route of this exact same Controller. I am more for @mvader suggestion or automatic resolution like they have in Laravel.\n. @danielgsims I am not sure if Slim Route is being used anywhere outside of Slim itself, but I can see your point. I think adding the basic setConstructorParams as @designermonkey for now is ok, but the Route class need to be added to the di container in Slim\\App to make it easily interchangable. Currently I have to extend the Slim\\App and changing the Slim\\Route class in the mapRoute method.\n. @danielgsims I have submitted a PR but for Slim 3 rather than 2, You can check it out #767 ti get a better understanding of what I am saying.\nWith this PR, I can change \\Slim\\Route after instantiating \\Slim\\App like this\nphp\n$app = new \\Slim\\App();\n$app['route'] = $app->share(function () {\n    return new MyOwnRouteClass();\n});\nWith this I can now create my own way of Route and implement my own way of dealing with the constructor params or even change out Slim\\Route for another Route library all-together.\n. @codeguy The problem with doing that is I would have to instantiate all my controllers even if they aren't called.\n. Closing this off in favour of #822 which seem like a more robust implementation.\n. Closing this off as its an old issue.\n. Thanks for the effort, you mind closing out this PR please.\n. @designermonkey all tests that require a route failed when changed to your suggestion.\n. @designermonkey thanks for that, my oversight. Forgot that I was calling a new instance each time when I changed the code to your example. Great stuff, learning more each day.\n. @andrewmman How else would you change out the Route object if you extended it? The only other way would be that you would have to extend Slim\\App itself then change the route mapping at that point.\n. The other option would be to move the mapRoute method into the router instead then we wouldn't need this as the Router itself would be interchangable. But as this is not the case this is the only option I can think of.\n. @codeguy will change the PR to use @andrewmman suggested factory method.\n. @andrewmman this looks good, is there a reason why you didn't push the new service back into the container stack? I am just thinking if I have the same dependency on more than one route callable then it would create a new one each time if I don't manually add it to the container stack.\n. @andrewmman it needs to remain separate, this was done sometime ago to not couple the router and route class #452 , hence why its now in the Slim\\App class.\n. @andrewmman after some thought, I came to the same conclusion.  Although I think you are typing this comment in the wrong issue. But yeah, this should be a separate project and not included in the core of Slim.\n. I am looking at something like this now, but I am thinking that if the params aren't defined in the route then this should probably convert to a query string, I see Laravel doing this, but not sure if this is a normal behaviour of other frameworks.\ne.g\n``` php\n// route\n$app->get('/items', function() {})->name('items');\n// route call\n$app->urlFor('items', ['page' => 1]);\n```\nIn Laravel this would results in /items?page=1, I wonder if we should be having this kind of behaviour in Slim.\n. There is currently a PR implementing what I have suggested https://github.com/codeguy/Slim/pull/876 will be closing this issue in favour of the PR.\n. You can easily use monolog with Slim and override the log call in Slim by doing\nphp\n$app->log = yourOwnLoggerClass;\nTake a look at @tuupola comment here #840 you will notice he is using Monolog.\nThere is another issue relating to this at #851, I will close this in favour of that.\n. This is fixed in the develop branch.\n. I opt for removing what we currently have or extending SessionHandlerInterface, Interfaces are only being used in Slim 3 and this will be PHP 5.4+ only from what I gather.\n. Yes Slim 3 will be 5.4+ closing this off, we will sort the SessionHandlerInterface class out in Slim 3.\n. Closing this out as this should be asked on http://help.slimframework.com/.\n. Can you ask this over at http://help.slimframeworks.com please, this is not an issue with Slim framework but more of a question about how to solve a problem.\n. Closing this off in favour of moving it over to the help site.\n. Can you run a test @tuupola and let me know if it still exist, I will reopen this and wait for your feedback.\n. Thanks for that @tuupola I will close this off since its no longer an issue.\n. Thanks for the heads up, will sort this on next release.\n. @codeguy can we look at getting this back in please, as currently without this PR develop branch is broken when trying to get data from Slim\\Http\\Request.\nAnd can you also rerun this build as it seem to have failed for no reason to do with this PR, but more to do with composer issues.\n. @mnlg can you update your branch with latest changes from develop please as PHP 5.3 has been removed from the travis.yml file. I want to merge this in today, but can only do so once you have a made this change.\n. Closing following comments from related issue. $_SERVER is not deprecated.\n. This is something your would do in a template parser or create a layout engine to manage this kind of setup, I don't think this belongs inside the core of Slim.\n. This is a great solution I think, I have currently implemented this as a separate dependency for a project I am working on and its working nicely so far.\n. @danielgsims Can you fix the current issue that is causing this PR to not be ready for merge, @codeguy will probably take a look at it soon and if its ready for PR and he is happy with it, he can merge it in easily.\n. Sorry folks, I am still waiting on feedback from @codeguy on this. He has been real busy lately but should be back on PR's at the end of this month. \n@ecoreng your solution looks like a good one but I'm not too sure if it keeps the simplicity of Slim in its execution.\n. @danielgsims sorry for the cat and mouse chase, can you update this again, we will be taking a look at this very soon as we now have the psr7 branch merged into develop.\n. Can you move this over to http://help.slimframework.com and I will have a look into it please.\n. After reading the comments on the blog post about FastRoute, it wouldn't support some features and still have some shortcomings. If you look at the comments on Nikic blog post you will see them outlined there.\n. I cant remember at this point in time, but if you want to continue discussion around this lets move it over to http://help.slimframework.com/ as the issues section here is mainly for Slim related issues.\n. @cgsmith I personally don't think this should be part of the getting started section, as you can run Slim with the .htaccess.\n. @cgsmith I should really re-read what I type before posting it, I mean't you can run Slim without .htaccess. \nHowever I see no harm in adding a link to the Getting Started though that point to the Route Url Rewrite section.\n. No PR was sent, also this is the wrong repo for this issue to be open on. This is related to docs which has its own repo https://github.com/codeguy/Slim-Documentation\n. @DavidePastore I am merging PRs as often as I can and really do appreciate the community help in sending them in. It wouldn't be fair to compare Slim to something like Symfony when it comes to project management. We are not full time employed by Slim and everyone who works on the project has other responsibilities.\nUnfortunately at the moment @codeguy is a bit busier than usual and unable to get back to some PRs in a specific timeframe. The company he works for if I remember correctly does allow him to work on Slim at times, but with the company having other responsibilities, those would be priority over Slim.\nIf you have any suggestion on how to make this process more streamlined, we are all ears. Please bear with us as we are working with what we have.\n. @DavidePastore no criticizim taken, I just wanted you to know the difference between project setups. \nI don't think its always correct to think that more developers on a project mean more issues closed, sometimes this can become an issue, especially when the original author has a vision of where he wants that tool to go and others might not understand this vision. But saying that I do see where you are coming from with that suggestion.\n. You could create a class to do this.\n``` php\nclass Config \n{\n    protected $setting;\npublic function __construct($setting)\n{\n    $this->setting = $setting;\n}\n\npublic function get($name)\n{\n    return $this->has($name) ? $this->setting[$name] : null;\n}\n\npublic function set($name, $value)\n{\n    $this->setting[$name] = $value;\n}\n\npublic function has($name)\n{\n    return isset($this->setting[$name]);\n}\n\n}\n```\nTo use you would do\n``` php\n// Slim 2\n$app->container->singleton('config', function ($c)\n{\n    return new Config($c['settings']);\n});\n// Call using\n$app->config->get('mode');\n```\nHope that helps.\n. Happy to hear you found a solution in the end. Closing this off as it seems to be solved.\n. I am wondering since this branch is 5.4+ only why do we need to test if bindTo method exists?\n. This is something I have seen someone blogged about a few days back, I think folks expect the behaviour to be that Slim should recognise that its in a subdirectory and redirect should use that information by default. So Slim redirect should be context aware.\nhtdocs | (webroot)\n  - testsite | (Slim project)\n    - index.php\nphp\n$app->redirect('/'); // will redirect to htdocs rather than testsite\nSymfony HttpFoundation would redirect to testsite which I think is what others expect this to do in Slim.\nI would like your thoughts on this, I personally use named routes on all my projects as it is good practise all around, but there are some folks who don't.\n. @lrlopez I am waiting on @codeguy to get some free time to work out the best approach to sorting this, It might just be that we will make it possible in Slim 3 which will break BC anyway. But it would be good to have a solution for 2.4+ since its the most widely used right now.\n. Not an issue, as @alexandrubagu suggested Log writer requires a class that has a write method.\n. @hakre Slim isn't dead, but as devs we also have other responsibilities, I have just recently taken the time to help @codeguy with dealing with some of these PRs but us not taking in your PR in your set timeframe doesn't mean the project is dead. We are also working on Slim 3 as we keep maintaining 2.\n@bensquire Slim isn't dead, you will probably be better with using the solution @tuupola suggested for Loggers in Slim. In the Slim 3 it is likely we will be using Monolog to benefit from its more advanced features and its community. I will find out from @codeguy about PR #851 and see if he is happy with this and if we can get it merged in soon.\n. Do you have both these routes in the same file? if so move the example below above the other one. I am also not sure what the purpose of the ? is for in the routes?\n. Can you move this over to http://help.slimframework.com/ and I will have a look there.\n. I will test this out and see what could be causing this, maybe it doesn't like the direct call of a function in the array key.\n. I haven't used Heroku for PHP as yet, but if you know the process, would you mind sending a PR and we will get it merged in.\n. Send PR when its ready, I'm closing this off for now.\n. This should be added to your own personal .gitignore, not the project's .gitignore.\n. I was waiting on this @tim-bezhashvyly you will note in that other issue I stated this \"This issue will remain a project and team preference, some folks don't like it while some do, its hard to please everyone unfortunately.\" this still stands.\n. @tim-bezhashvyly maybe we should have a chat one evening on Skype or something, I think these comments wont adhere enough and it might eventually start sounding like a flame war even though we both have no intention of starting one.\n. @tim-bezhashvyly Just to clarify on the project with framework ambitions part, if you take a look at zend framework 2 they are taking the same approach. And one of the reason why others are doing this is so that each time you change dev machine you don't need to add .idea back into your .git/info/exclude as this doesn't move with the project, its stays locally at all times.\nhttps://github.com/zendframework/zf2\n. Ah even better @tuupola @tim-bezhashvyly  catch me over at ##slim on irc. Its on freenode.\n. Since this is not an actual issue in client code, I am closing this one out.\n. This would be solving a problem, but I wonder if the problem should be rather solved by adding a public method to get all routes instead. Also note you can extend the router and use your own router if you wish like the example below:\nphp\n$app = new \\Slim\\Slim();\n$app->container->singleton('router', function() {\n    return new MyOwnRouter();\n});\nMyOwnRouter class\nphp\nclass MyOwnRouter extends \\Slim\\Router\n{\n    public function getAllRoutes() \n    {\n        return $this->routes;\n    }\n}\n. I think you should extend the Slim.php class and override that method, that way you don't break anything in the core files.\n. Too many changes in here to know what was actually changed. Can you send a PR with only the files you have changed, this PR seem to be including other changes too.\n. I am currently leveraging Laravel Session Library with slim, I will release the middleware soon along with steps needed to get it setup. Laravel Session allows you to use Database, File, Redis, Memcache or even write your own based on their interface.\n. On another note, I will close this off since its not a Slim issue, can you move it over to http://help.slimframework.com/ please.\n. Are you sure this is the case? I have a few sites with middleware on route groups. Try adding some debugging code in apiKeyCheck() to make sure its being called. If its still not working open this up on http://help.slimframework.com/ and I will assist you there.\n. Working fine here too. Maybe the question your found indexed was deleted by the user who posted it.\n. Can you send this as two separate PRs please, route caching as one and route parameter to query string as another.\n. Please change the phpdoc comments to match the changes you made.\n. @pine3ree Can you resend this please but add the extra params as an additional param for the urlFor method.\nphp\n$app->urlFor('user-list', ['page' => 12], ['sort' => 'firstname.desc']);\nThis way we are taking in the third param as a query string, this will allow the user to set the desired expectation rather than one being imposed on them.\n. @pine3ree \n1) maybe queryParams would be more descriptive\n2) yes please\n3) not sure as I have no experience with zf2 and don't know what this does\nAlso jump on irc channel #slimphp on freenode if you want to chat more in realtime.\n. @pine3ree thanks for updating, but this still looks like its not aligned with the latest dev branch updates.\n. Can you move this over to http://help.slimframework.com please, its not a issue with the framework but more of a question.\n. @vik-singh can you update this so we can get it merged in please.\n. @DavidePastore but notFound is not a route or even a special route.\n. Closing this off and leaving the PR open.\n. This should remain as it currently is, the user should define their own .gitignore for their project. But as for the Slim codebase and contribution we will keep this to make sure no one will commit this by mistake.\n. Personally I think its better to try and prevent people from committing such files, I have seen many projects take this approach and I'm not saying its good because they take this approach, but its a lot easier to remove a .gitignore file from Slim from your project than it is to accidentally commit such files. I am all for adding .DS_Store and Thumb.db in the .gitignore file.\nThis issue will remain a project and team preference, some folks don't like it while some do, its hard to please everyone unfortunately.\nHere are some other projects doing the same:\nhttps://github.com/zendframework/ZendSkeletonApplication\nhttps://github.com/yiisoft/yii\nhttps://github.com/laravel/laravel\nhttps://github.com/magento/magento2\n. Since this is not a bug or issue can you move it over to http://help.slimframework.com/ please. Closing this out.\n. @DavidePastore not at the moment, we are going to release a beta version soon, but I am not sure how soon. I will try and liaise with @codeguy today and see when he has in mind.\n. @cochesaurus I heard there was one in the work sometime ago by @jeremykendall but I am not too sure how far along he has gotten with it.\n. Closing out as this should be posted on help forum.\n. Yeah this is a weird one, it only happen on certain environment it seems, I think I had this error on Windows environment, while Travis CI doesn't seem to have this issue.\n. @tuupola this is gonna have to wait a little until Josh is back on dealing with PRs.\n. @pioter I am still unsure what you are trying to accomplish? Can you move this over to http://help.slimframework.com please, as the issues section here is to report bug in the frameworks. Closing this out.\n. Fixed and merged fe1c215.\n. Closing this one out as there has been no reply on it for awhile.\n. Sorry for taking so long to get back to this but you dont need the additional method on router to do this, you can already do this like the example below:\nphp\n$app->get('/:param1/:param2', function (/*now it's optional*/) use ($app) {\n    $route = $app->router->getCurrentRoute();\n    $param1 = $route->getParam('param1');\n    $param2 = $route->getParam('param2');\n    $allparam = $route->getParams();\n});\n. This should not be in the core of Slim, you can already use third party libraries to do this as they all convert back to an PHP array in the end.\n. Thanks for pointing this out, we will get this updated soon.\n. No as groups are like prefixes, they don't actually exist. We will be working on making the act more like normal routes in the future.\n. @fredw I am closing this one out, if you are still having trouble please open up a forum topic over at http://help.slimframework.com/ or come see us on irc channel #slimphp on freenode.\n. Thanks for this, will get this merged in now.\n. Yes, we are still here and will be picking up pace soon again. Send any PR's related to Slim 2 to master branch and Slim 3 to develop branch.\n. I think we have multiple cleaner ways of doing routes already, what you have proposed would only confuse users. I am going to reject it on that basis.\n. Can this PR be pointed at develop branch instead as per @codeguy request on #924 please.\n. Yes we will consider this for the release of Slim 3.\n. This is currently out of sync and I think we will be including Pimple as part of the repo rather then adding it to the composer require.\n. You are indeed correct, can you send a PR with the issues mentioned above please.\n. At the moment, no.\n. This is not an issue with Slim itself, it seems more of an issue of the changes you are looking to make. Closing this one off as its not a bug.\n. Already fixed on develop branch https://github.com/codeguy/Slim/commit/86654ba38ffa5f9c45422d8e8268a9698080c182 we will align the branches properly soon and probably move some of these changes to v2.\n. This have now been merged into master branch 77ab910.\n. This gives such great speed boost on large projects. I have tested this myself and it works great, I am yet to see it breaking anything but maybe @codeguy could say if it would break anything existing.\n. I think this is better as a setting than removing pass() there is probably someone somewhere using it and not sure if this is worth the break over this feature which can be enabled anyway.\n. @alanpich yes develop is broken the moment, but you can still go ahead and submit your PR. Also can we split this into two PRs, once for the skip route and another for removing pass().\n. Ah sorry my bad, I read through the thread again and notice its all the same thing. We will try and fix the tests soon, or you can jump on it if you want @alanpich \n. Its a namecheap DNS issue, its currently working for me.\n. The docs are here https://github.com/codeguy/Slim-Documentation\n. This is not a framework related issue, I will be closing this out. If you wish to continue discussion on this please move it over to http://help.slimframework.com/\n. I have seen others mention this issue before and we will definitely look into it, in one comment by @tuupola he suggest having sinatra like error handlers. https://github.com/codeguy/Slim/issues/881#issuecomment-53032739\n. This is a good suggestion but wouldn't this mean that if I am calling a different method on the Greeting Class wouldn't this mean passing in the params again since its the constructor.\nHere is an proposed alternative which I am still waiting on @codeguy to review https://github.com/codeguy/Slim/pull/822, it would solve you issue and the one I mentioned.\nIf you do not need to pass the params into the __construct method, you can pass the dependencies directly to the method instead using setParams().\nphp\n$app->get('/hello/:name', '\\Greeting:sayHello')->setParams([$appInterface, $cachePoolInterface, $adapterInterface]);\nThe dependencies would be injected into the sayHello method. \\Greeting::setHello($app, $cache, $adapter)\n. 2.x branch is only taking security fixes at the moment, we are working on releasing 3.x which should fix these sort of issues.\n. I don't think this is a bug as others have pointed out here, this actually works. Can we move the discussion back over to http://help.slimframework.com/discussions/problems/8449-problems-with-checkbox if you wish to continue or jump on irc channel #slimphp on freenode.\n. Good catch, thanks for that.\n. Since this is not an issue and more of a topic you are looking for discussion on, it would be better to discuss on the forum http://help.slimframework.com/ or on irc channel #slimphp on freenode.\n. I am going to reject this PR as I don't think it should be included in the repo, since not everyone uses editorconfig plugin with their IDE/editor and we have already stated that contributions should follow PSR-2 style guide.\n. Hi @toby-griffiths, currently you can do the following below without this PR.\nphp\n$app->hook('slim.before.dispatch', function () use ($app) {\n    $route = $app->router->getCurrentRoute();\n    var_dump($route->getName()); die();\n});\n. That is correct.\n. Sorry the PR seem to have more than the urlFor fix, can we strip this back to just the urlFor fix please\n. Whats the current output you are getting and what is the output you would be expecting?\n. I see what you mean, I will do some testing on this over the coming days and see if making this change would break something else first.\n. Ok I created a Unit test for this and I am getting the expected result. I will submit this as a PR so you can test it locally.\n. @ptcong you are indeed correct, I have updated the test and I am now getting incorrect results as you stated above. You want to send a PR with a fix to this please.\nedit: sorry that was suppose to state now instead of not.\n. Thanks for this.\n. This is being addressed by @lalop so will close this out.\n. I somewhat feel this would have been better disclosed privately first. Also parading it on Twitter doesn't help either, we know you probably know more about security than most of us, but don't think trying to make others work look bad is the way to prove that.\nAnyway back to the original point, please share privately first next time, if you realise no-one is taking note of it after 30 days then by all means disclose it publicly.\n. Sorry looking at alternative routing solution for 3.0, I think when the routing is finalised this will become relevant or irrelevant then.\n. I am for this, I currently use the Laravel Session library through a middleware I created instead of the built in Session handling.\n. Yeah I will get this sorted.\n. I have started working on this now, should have something up on the weekend. I will need to touch base with you @codeguy over irc or on hangout before then.\n. @codeguy getting there, but slower than anticipated due to workload. Hit me up when ur on irc or hangout.\n. Ok cool, sorry just got was too busy lately with other work. Downtime is currently minimal.\n. woot woot, any benchmark on performance difference?\n. I am not too sure I agree with the direction this is headed. I think this removes the simplicity out of Slim, lets keep it simple please. I think the developer should make the decision of how much complexity they want their app to have rather than us making that decision.\n. I am referring to the route group changes and making it act like submodules. This to me would push a lot of users away, especially beginners. Slim has always been simple and beginner friendly, I think the kind of abstraction introduced above would remove that simplicity.\n. @akrabat you are correct on this, I have now found the issue in the tests which led me to thinking this was necessary.\n@codeguy it would seem that $this->addRoute method is looking for an string as the method and not an array, If I move this into a foreach loop it fixes the issues. I can see this only being necessary to do because we are still supporting the $app->map method. Let me know your thoughts.\n. @codeguy yes that worked.\n. We are only doing security fixes to version 2 now. Please test this in version 3 and let us know if this is still true.\n. I don't think we need src, I think that is just a convention that has been used by most projects.\n. I almost feel like making route middleware attach through a method would be a better solution? This would also mean the API would feel the same as adding an middleware to the app.\nphp\n$app->get('/', 'HomeController:index')->add('Your Closure Here');\nIf multiple route middleware\nphp\n$app->get('/', 'HomeController:index')->add('Your Closure Here')->add('Your Closure Here');\n. @akrabat either that or keep it as third parameter, but as @funkatron said, remembering which param comes first isn't very predictable for first time users so creating a method call for each would be better. \nI however wonder if there is a better way internally to do all this before passing over to the mapRoute method, as I don't like the idea of leaking the router implementation out as we did in Slim 2.\n. The second arg as an array still feels like its not explicit enough, as in an IDE won't know the keys for the array being passed, whereas the explicit naming would allow for this.\n. @micoboyet you are probably better off opening a issue on the actual repo @DavidePastore linked to, easier to keep track of your conversation there as this issue is closed atm.\n. This is no longer an issue in develop branch (Slim 3) so will be closing this one out.\n. I would suggest making a smarty view for Slim and use that instead. I think we will only officially maintain the Twig view at the moment as none of us constantly use Smarty in order to keep the view up to date or know the best way of working with it.\n. @namaless you can find it here https://github.com/slimphp/Slim-Views.\n. This should be done on the returned value as stated by @JoeBengalen. Otherwise better to extend the Request class in your own project.\n. I think this should be provided as a separate component to the framework, I like the solution @codeguy provided above but it wouldn't be sufficient enough for what @funkatron has mentioned. As it doesn't actually override the provided Request class, I am also not for ServiceProviders implementing themselves, I think the ServiceProvider class should only provide an interface for an external Library, so this would fit will with the concept of Inspekt.\n@funkatron if you need some pointers, catch me on irc next week and I will see where I can help out. (Still have the Session Library to work on, before @codeguy asks about it again :-))\n. @JoeBengalen because this http://ocramius.github.io/blog/when-to-declare-classes-final/\n. I don't think this should not be configurable. I think this was decided a year and a half ago as to the :, you can read more about it here #652 \nI think if we were to change this now, we would be inclined to the @ symbol but not the :: as it would cause confusion as mentioned in the previous discussion. \nOn that note I am going to close this one.\n. I also agree with @tuupola and @mnapoli about getting echo back in there. As the person who deals with most of the support forum requests, I know this is going to become something that will be asked more than 100 times and the cause of people's frustration with the framework.\nI think from early days we have always kept Slim somewhat non opinionated and feel this would be making it a little more opinionated for no major gain.\n. This might have been of the overly cautious nature of @codeguy at the time of writing that bit of code. I don't think there is any particular reason for it, but it doesn't hurt I guess.\n. Also why not add this inside of the container, so its only instantiated when needed?\nphp\n$app->container->singleton('pdo', function () {\n    return new PDO('sqlsrv:server =[info here]; Database = [info here]', '[info here]', DB_PASSWORD, [\n        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n    ]);\n});\n. Your suggested change only fixes an issue you are having as the issue is not actually Slim related but more your code related, it doesn't make sense to have it in the core code.\nThe code I have posted is code I have used in the past and its code I have used when working with SQL Server also.\n. I just submitted a PR which allows you to use the built in subRequest. #1248 \nUse as follow:\n``` php\n$app->get('/timmy', function ($req, $resp)\n{\n    return $this->subRequest('GET', '/hello/George', 'middle=James&last=Bourne');\n});\n$app->get('/hello/{name}', function ($request, $response, $args)\n{\n    return $response->write(\"Hello {$args['name']} {$request->getParam('middle')} {$request->getParam('last')}\");\n});\n```\nIf you were to visit timmy you should get Hello George James Bourne.\n. As @tuupola stated above, this is expected behaviour, I think we shouldn't be constraining the user as to how to return their response, we should only guide them. So in all documentation we should strictly use return $response->write();. A new user is most likely to follow what the docs say than going their own way, if we make this a recurring pattern in tutorials/open source projects we produce also it will make it easier for everyone to follow.\n. You would need to make the singleton into a factory for that to work.\nphp\n$app->container->singleton('main', function () {\n    return function ($value) {\n        return new Main($value)\n    };\n});\nNow you should be able to run using\nphp\n$app->main('invoke test');\nor\nphp\n$app->container['main']('invoke test');\nDo note, I am not for this way of doing things, its better to create a real factory class than using the Container in this manner.\n. In Slim 2 we had this and then we added array mapping, I can't see any great benefits in adding this back in, rather it could cause confusion if in a team some folks were using strings while others using array. I would say lets keep it simple and keep what we currently have only.\n. @JoeBengalen in that case, shouldn't respond() be a protected method?\n. Closing this one out, if you are still having this issue please provide some code sample and re-open.\n. @JoeBengalen you beat me to it, I was just about to post that.\n@jenssegers also note that even though the code might not look developer friendly, its a language feature, so we have to be prepared to use it if we need to, another solution is to create all your services in a separate class and register them to the container if you are using Pimple.\n``` php\n<?php\nuse Pimple\\Container;\nuse Pimple\\ServiceProviderInterface;\nclass MyServiceProvider implements ServiceProviderInterface\n{\n    public function register(Container $app)\n    {\n        $app['foo'] = function () {\n            return new Foo();\n        };\n    }\n}\n```\nThen just register that to the container like:\nphp\n$app->getContainer()->register(new MyServiceProvider);\nand for getting the service you can use the above suggestion by @akrabat.\nI find this way better for organisational purpose.\n. @jenssegers what kind of application logic would you want your service provider to have? you would have access to all Slim's registered services. I have never needed more than that but do tell me more about what you are after.\nI also use Laravel and currently the Container works almost the same.\n. As @JoeBengalen stated above then your SomeServiceProvider would look like:\n``` php\n<?php\nuse Slim\\App;\nuse Pimple\\Container;\nuse Pimple\\ServiceProviderInterface;\nclass MyServiceProvider implements ServiceProviderInterface\n{\n    protected $app;\n    public function __construct(App $app)\n    {\n        $this->app = $app;\n    }\npublic function register(Container $app)\n{\n    $app['foo'] = function () {\n        return new Foo();\n    };\n\n    $this->app->get('/myroute', function () {\n        return 'Here is my route';\n    });\n}\n\n}\n```\nI still don't understand what you mean by developer friendly, there is nothing hostile in the code and its even better organisation. And this is not a workaround, this is exactly what Laravel is doing in the background for you, I prefer to know about the magic than just have it happen without knowing what is going on.\n. @jenssegers Laravel is bound to a single implementation of a Container, this was the case for the early versions of Slim 3, but this is no longer the case as not every developer want to work with Pimple.\nI think the options we have outlined are sufficient for any developer to work with, I don't think this is going to change at the moment as this issue was open for quite a while and we had no objections until now that it has been merged in.\nAnother option would be to use this Service Manager https://github.com/itsgoingd/slim-services instead. You would probably need to modify it to work with Slim 3 as it was originally created for Slim 2.\n. And this is one of the times when a good IDE is helpful in development. :-)\n. Can you rename the method to any please? that way it will keep the same naming as it did in Slim 2.\n. @kminek sorry for the delay in getting back to you, but can we have a unit test for this method please?\n. Thank you very much for your contribution.\n. @needcaffeine thanks for your improvements to the README, but can you add the Testing section back please?\nThe Testing section does not confuse new users as new users would be pulling down Slim via composer or git clone the repo, the Testing section is necessary for contributors and there are already tests written for the framework itself.\n. Thanks for this update @needcaffeine.\n. I think a recent experiment by @akrabat kinda proves why its good that we don't have setName in the Interface. He started implementing Aura.Router and noticed that it already had its own way of setting a name for a route, you had to pass it in as the last argument of the route itself rather than a independent method and there was no way of setting it later as it was required upon route creation, if setName was a hard requirement then he would have just created an empty method that does nothing and would not be of any use to anyone.\nSome developers don't actually use setName and urlFor at all, because they are building small apis which don't require getting the url through the route name as its small enough to remember the path to each endpoint.\nFor these reasons I don't think it would be wise to add these methods to the Interface.\n. This has now been merged into develop.\n. @lalop not sure I understand point 2. In point 1 the code example seem to carry the wrong signature for the subRequest method.\n. There was a bug in the original change which have been fixed in #1254, this PR is now outdated based on the new changes.\n. Nice, thanks for that.\n. Thanks for all the input everyone. This has now been removed, thanks to @akrabat.\n. Hi @stratedge thanks for suggesting this, but I think it would move us back into the issue of making Middleware's Slim specific again. \nWe are trying to move away from having Middleware being specific to 1 framework, this way we can share the same middleware between different frameworks. I know that most frameworks seem to be sticking to the trend of making everything framework specific, but we don't think this is the route we want to go down again, the developer should decide if they want to make their middleware specific to Slim rather than us directing them in that direction.\nYet again thanks for your suggestion but I don't think it sits well with the current goal of the project.\n. @designermonkey is the code available anywhere on Github or can it be available for us to take a look at please?\n. I agree.\n. Thanks for your feedback, but I don't think there will ever be an official validation library in Slim itself. We are geared towards making things very modular and don't want to impose any sort of restrictions on the user as to what validation library they work with or how they handle multiple languages in their project.\nAll of us on the Slim team uses it professionally in our day to day work and we all use different validation libraries and have our projects setup differently, this is what we and most users like the most about Slim.\n. From what I can see we currently don't have any Slim 3 specific middleware at the moment, I think Session will be the first and probably will use the Slim\\Middleware namespace.\n. Well it wont be but it needs a namespace to live under as a Middleware.\n. @akrabat didn't see that one.\nOn a separate note can we stop coupling the ServiceProvider with the actual code for the package. I see this is becoming a pattern that others will follow. Now that we are using Container Interop, we shouldn't bind the actual package to the Pimple ServiceProviderInterface, we should create a separate class in each package to do this.\n. I think its more of an identity to say where they came from and I guess to also lessen collision. But I do agree that it should be under Slim\\Middleware namespace in order to not convolute the top level namespace.\n. Moving from Slim 2 to 3 we want to keep the ease of use, I don't think abstracting away withRedirect and withJson is a good approach, they should probably stay where they are.\n. Am I being picky by asking why not use a switch statement instead of if else if and else?\n. I hate that you hate switch statements. ;-(\n. Correct FastRoute does not support optional paramaters, although the syntax I provided is what @nikic provided in the comment section on his blog http://nikic.github.io/2014/02/18/Fast-request-routing-using-regular-expressions.html#comment-1256023948. \nYou example will not work with urlFor method on the router, which is where the problem is at for me.\n. @geggleto correct, and its because the regex in urlFor is broken, it doesn't take optionals into consideration.\n. @akrabat https://github.com/slimphp/Slim/blob/develop/Slim/Router.php#L184 has no clue how to deal with optionals, it will think that {optional:.*} is required although its not in the example you provided.\n``` php\n$app->get('/hello2/{name}{a:/?}{optional:.*}', function ($req, $res, $args) {\n    $name = $req->getAttribute('name', '== not set ==');\n    $optional = $req->getAttribute('optional', '== not set ==');\nreturn $res->write(\"<p>Hello $name. Optional: $optional</p>\");\n\n})->setName('hello');\n```\nThe below example breaks\nphp\n$app->getContainer()['router']->urlFor('hello', ['name' => 'World']);\n. @geggleto correct but\n```\n//Given this route\n$app->get('/test/{param1}[/{optional:[A-Za-z]}]');\n// the request\nGET /test/1\n// would break in Slim currently.\n```\n. @akrabat Slim 2 does and FastRoute can support it if you add it in.\n. @codeguy I don't think this solves the optional parameter issue, this just allows custom named tokens.\n. Thanks @nikic. \nNow we just need to fix urlFor to work with the new syntax for optionals.\n. Fixed.\n. Here is my nginx config I am using with Slim v3.\n```\nserver {\n    listen 80;\n    server_name idiaz.app;\n    root \"/home/vagrant/Code/Personal/idiaz/public\";\nindex index.html index.htm index.php;\n\ncharset utf-8;\n\nlocation / {\n    try_files $uri $uri/ /index.php?$query_string;\n}\n\nlocation = /favicon.ico { access_log off; log_not_found off; }\nlocation = /robots.txt  { access_log off; log_not_found off; }\n\naccess_log off;\nerror_log  /var/log/nginx/idiaz.app-error.log error;\n\nsendfile off;\n\nclient_max_body_size 100m;\n\nlocation ~ \\.php$ {\n    fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n    fastcgi_pass unix:/var/run/php5-fpm.sock;\n    fastcgi_index index.php;\n    include fastcgi_params;\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    fastcgi_intercept_errors off;\n    fastcgi_buffer_size 16k;\n    fastcgi_buffers 4 16k;\n}\n\nlocation ~ /\\.ht {\n    deny all;\n}\n\n}\n```\nTry that and let me know if it resolves the issue you are having.\n. You are welcome, happy to hear you got it all resolved in the end.\n. Ok we now have a tag. This should no longer be an issue.\n. For cookies use this library for psr7 cookies https://github.com/dflydev/dflydev-fig-cookies, we are likely to create a service provider or some sort of integration to it in the Slim-Http-Cookies repo.\n. @ibrahimch this is what @akrabat is saying you cant do. The request from the container is stale, because PSR-7 request/response is immutable.\nSo a request from the container would not have any values set on the request being passed to the the route callable.\n. Yes this can be removed for v3, this was necessary in v2 but this is no longer the case.\n. I don't think a name change should be made to this function at all, it has been this name since the dawn of Slim and a change like this with no real benefit but semantics  seem a bit of an overkill.\nSome history on this function, if I remember correctly the name originated from the Flask python framework's url_for and some functionality were not ported across to keep things simple. But having look over the Flask's version again, I think we would be better off adding an extra parameter to compensate for the absolute url being provided. In Flask this function is also used for loading static assets at which point it can just be a path that get's provided.\nYou can have a look at the Flask version here https://github.com/mitsuhiko/flask/blob/master/flask/helpers.py#L186 and you can see the extra param here https://github.com/mitsuhiko/flask/blob/master/flask/helpers.py#L247.\nMy suggestion would be to add an extra param for the user to get an absolute url.\n. I think just state deprecated in docbloc and allow it to work as it currently does, should probably not trigger anything IMO. We should also note it will be removed in a minor release rather than the next major, although I kinda think this breaks semver.\n. This should mostly remain the same as it currently is from the api perspective, I think we currently only have 1 issue which is asking for a change to the urlFor #1316. Leave a comment over there if this will affect you in a big way please.\n. I think what we have currently is and should be considered the correct behaviour, my reason for this is if you look at anything in a group from the perspective of they all end without a slash, then the first item would be correct as it ends without a slash.\nGroups are just prefixes, so they get prefixed onto each route nested within them, so in essence what the routes in the second example look like would be:\n/foo/bar\n/foo/bar/bar\n. I suggest we trim the / on the group path before passing it over to FastRoute.\n. Yep every possible scenario is fixed, this is back to working as Slim 2 was.\n. This have now been merged in.\n. Can the creation of Group's happen inside of the router instead of in the App please?\n. As these are setters and Container Interop does not define setters this is a no for me.\nIf you were to decide to use Zend Service Manager or Aura.Di this would lead to broken methods in App.\n. @hguiney is this behaviour still the same in Slim 3? If yes send a PR to that please, we are only currently taking security fixes for Slim 2.\n. No stopping you now @Lewiscowles1986 you already on a roll with documentation, so if you see anything lacking, go ahead and send a PR.\nThanks again for your continuous contribution to this project.\n. Ok I think a solution might actually be:\nphp\n$app->get('/hello/{name}', function ($request, $response, $args) {\n    $response->write(\"Hello \" . $request->getAttribute('name', 'Bob'));\n    return $response;\n});\nYes I know this is not happening from the outside in, but it is a solution I think.\n. We had some discussion on IRC yesterday about this and are still considering if this is the way to go, also could you make your implementation happen inside of the Route.php file rather than in App.php please.\n. In this case, should this be renamed to setParam/setParams as we had in v2?\n. @AlexStansfield it is now merged.\n. @AlexStansfield no lets leave it as Arguments as it could get confused with the Request object getParam/getParams methods.\n. Ok cool, will wait on @codeguy to discuss the setters in the interface, we already have setName in that particular interface so I don't really see it as a issue, but let me have a chat with @codeguy and hear what he says.\nI am guessing you are getting ready for bed so, you might just see this all merged in when you wake up or further discussions on it.\nThanks again for all your help and your push in making this change possible.\n. Will discuss with @codeguy about setters in interfaces later, going to merge this in for now.\n. @savdeep checkout this blog post http://akrabat.com/run-a-slim-2-application-from-the-command-line/\n. That line says if its a string convert it to an array, so I'm not sure how this relates to your change here.\n. @opengeek do you know if this is being used anywhere or what was the purpose of it?\n. Is it me or the name doesn't have a meaning without context? I look at it without reading all the messages above and wonder what is it dispatching before the app middleware?\n. @AlexStansfield thanks for your time and hard work on this feature, we finally got it in.\n. @moufmouf do you mean something like a factory to create these instances, like what they have in Aura.Filter https://github.com/auraphp/Aura.Filter/blob/2.x/src/FilterFactory.php\n. Overall I get where you are heading with this now, I like it but not sure about the amount of setters. I for one would only need 1 setter and that would be the setContainer method. I do get your case for wanting to change only the Request object lets say, but at that point I would probably prefer you go create your own Configuration object based on the Interface provided.\nI am not too sure about some of the comments above like: \n\nYou could put an \"app\" instance in your container that requires a \"container\" instance that itself sets the \"request\" instance. Using this design pattern, the container can be the master, i.e. the container can create Slim\\App.\n\nI am not sure why the container would create the app and then get injected back into the app through the configuration object, this to me seems like circular referencing.\n. I think this is to do with method visibility, I think method_exists will find private and protected methods even though they are unusable outside of their context.\n. Yeah tested this and my thinking above is correct.\n. This is thinking way to far ahead, I am going to close this for now and if in the future PSR-11 should allow for this, then open PR again.\n. Now we can use the Route caching above without any issues at all, thanks to @nikic for pointing out that you can't serialize Closures, so a lookup table was necessary.\nhttps://github.com/nikic/FastRoute/issues/63\n. The interfaces would lead to BC breaks.\n. Yes you can do this using subRequest.\n``` php\n$app->get('/', function ($request, $response, $args) {\n    $res = $this->subRequest('GET', '/hello');\n    return $res;\n});\n$app->get('/hello', function ($request, $response, $args) {\n    $response->write(\"Hello, World\");\n    return $response;\n});\n```\n. Are you calling that inside of a route, your code doesn't show context as to where you are calling this.\n. I tested the code below and it works:\n``` php\n$app->get('/', function ($request, $response, $args) {\n    $res = $this->subRequest('GET', '/hello');\n    return $res;\n});\n$app->get('/hello', function ($request, $response, $args) {\n    $response->withJson(['hello' => 'World']);\n    return $response;\n});\n```\n. In order to var_dump the value you need to cast getBody to a string.\nphp\nvar_dump((string) $res->getBody());\n. Yeah it seems stream_get_contents behave differently depending on which version of PHP it is used in, if no byte length and offset is set.\nMight need to change the code in getContents to take this into consideration.\n. @ismnoiet that should already be the case, Response objects are immutable so the data shouldn't be passed over to $response unless you explicitly tell it to do so.\n. I wonder if this should also be defined in the RouterInterface. I personally think it should and would prefer that be added to the PR before we do a merge.\n. You are correct, this seem to be a bug. I noticed the group doesn't take into consideration anything attached to the group when using the Container to resolve the middleware callable, this however works on a per route level.\n//cc @opengeek \n. Thank you for your contribution but unfortunately I wont be able to merge it for reasons stated above, we are currently only accepting security fixes for 2.x branch.\n. I can tell you now that I have no use case for what you are suggesting @yurevichcv I need this feature purely for ACL at App Middleware level, nothing more.\n. @juriansluiman I think it was summarised on that symfony issue as to why we shouldn't be handling this at the framework level here https://github.com/symfony/symfony/pull/10381#issuecomment-38717986\n. At what point of your application would you need this? You can get the currently called route using\nphp\n$route = $request->getAttribute('route');\n$route->getName();\n. Take a look here https://github.com/slimphp/Slim/blob/3.x/Slim/Route.php#L274 and it gets called here https://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L447\n. These settings are passed into the settings key of the container.\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Container.php#L100\nWe are currently discussing this on irc #slimphp on freenode if you want to hop on.\n. @akrabat can you open a PR with this so I can leave my comment on the code please. I am happy to make this change but have 1 reservation.\n. @guice this is now working the way you expect it to, we have merged in a PR to allow what you are after.\n. @Swader I have this very setup in one of my application and it works as it should, you sure your actions don't have the same code in them?\n. Why would I use this over https://github.com/slimphp/Slim/blob/3.x/Slim/Handlers/Strategies/RequestResponseArgs.php, which gives you similar setup to what we had in Slim 2 and less overheads?\n. We should fix that actually, will have a look during this week to see if we can find a better solution.\n. This should be fixed now.\n. What happens If I call getSize before getMetadata? would this not result in stale size?\n. I should really read code more, ignore last comment.\n. Why should we support an unsupported platform? If the PHP core team says they won't be supporting it after 14 Sep 2015, then why should anyone support it. \nThe problem is not this change in the project nor is it Laravel 5.1, the problem is hosting companies being too lazy to make the switch.\n. Security support end 14 Sep 2015, not 10 Jul 2016.\n. I think this thread has discussed this a lot already and many PHP projects are moving towards this direction also, we cant be kept at ransom by hosts, operating system or any of the likes. We are sticking with 5.5 and won't be changing this anytime soon. If you require support below 5.5, there is still Slim 2 available which is only taking security updates at the moment.\n. Fixed.\n. This is now fixed, thanks for the feedback @harikt \n. In the docs we state you should access services using $this->view and not $this['view'], this might have not been updated for the flash repo. But all this is doing is falling back to $container->get(). \nI agree with you about removing ServiceProviderInterface and the register method all together as this will cause confusion for any developer looking to use their own Container implementation.\n. Just to add some previous feedback on having this in the past. https://github.com/slimphp/Slim/issues/838#issuecomment-76093849\nI also looked at a similar issue on Silex repo: https://github.com/silexphp/Silex/issues/678\n. Yeah we all agreed it was good. Jump on irc at times if you want to discuss anything.\n. If you want to use PHP class name resolution with the default InvocationStrategies provided in Slim you will have to do it like:\nphp\n$app->group('/api/b2b/v1', function () use ($app) {\n    $app->group('/hotel', function () use ($app) {\n        $app->map(['GET', 'POST'], '/list[/{id:\\d+}]', App\\Controller\\Test::class . ':hotelList');\n        $app->map(['GET', 'POST'], '/rates', App\\Controller\\Test::class . ':hotelRates');\n    });\n});\nIf you decide to implement your own Strategy I am afraid we can't help you much with that, but the signature of these Classes are unlikely to change at the moment.\n. Try $app->request->post() and check if that contains all of your emailto's.\n. Well that means something is wrong on the other side of this, not the Slim side.\n. I don't write iOS code, both myself and @geggleto have provided you with sufficient amount of code that should result in getting this working.\n. You finish with this PR @akrabat \n. You can do this using the code above.\n. This has been the case before this change was made, you probably just didn't notice it before. Services are frozen from the minute they get called, this is how Pimple works.\n. Yes this is possible.\n. I think we will keep this a class for now.\n. I can also confirm this works. If you look at the resolver code you will notice if its a callable it goes straight to the else.\n. Yes you are correct, that could cause an issue again. Will get that updated or you are welcome to send a PR.\n. This should be fixed from the PR sent by @jaapverloop \n. I would like to think Middleware is both singular and plural.\n. I tested this and it was present at the time, the only time the referrer was missing was if I went directly to the route itself, but on using the build in redirect it was always present.\n. Configuring app != configuring app dependencies.\n. This has now been merged.\n. Happy to hear that @yurevichcv, will get this merged in soon.\n. What do you mean by conditionals? and what version of Slim are you referring to?\n. You can now do that directly on the placeholder according to FastRoute docs.\nhttps://github.com/nikic/FastRoute\nphp\n$app->get('/verify/{code:[a-zA-Z]}', 'Controller:method');\n. From the code, he is using the built in PHP webserver, I am inclined to think this is a server configuration issue rather than a Slim itself issue.\n. I am closing this one out, I think we tested as much as we could and it doesn't seem to be an issue with Slim itself.\n. This is not Slim related, closing out.\n. I would like to see a PR with the cleanups, even if it includes a RouteFactory, anything to make the code more readable and easy to follow is welcomed.\n. @designermonkey @geggleto I have taken a shot at this and would like some feedback from both of you #1497\n. @jwyuen you are missing a closure for your new Response class.\nphp\nif (!isset($container)) {\n  $container = new \\Slim\\Container(array(\n    'response' => new ApiResponse()\n  ));\n}\nparent::__construct($container);\nshould be\n``` php\nif (!isset($container)) {\n  $container = new \\Slim\\Container(array(\n    'response' => function () { \n        return new ApiResponse(); \n    }\n  ));\n}\nparent::__construct($container);\n```\n. This is not slim related, please ask on Stack Overflow or ask on http://help.slimframework.com/\n. I have this exact setup in my test app and its working as expected.\nhttps://github.com/silentworks/idiaz/blob/develop/config/routes.php\nYou can clone the repo and test.\n. @designermonkey I just updated to that hash and its all still working, you can clone the repo now I have pushed my updates.\n. @designermonkey the issue is the hyphen in the placeholder, make it snake case or just one word and it will work correctly.\n. Yep I agree.\n. @stevenwadejr I would like to know your use case for extending the Container rather than replacing it?\nThe benefit of declaring final is making sure we don't have crazy inheritance chains and having support issues due to someone breaking their code due to wrongful use of inheritance. With final and an interface that defines the external API, we have less chances of this happening.\nThe only against I can see for the Container class is that you will need to redefine the services registered, but this is more due to the fact that set method is not part of container-interop.\nIn a way we have gone overzealous on flexibility in this version of Slim, but at the same time we had to keep a balance, we want you to be able to replace the Container but not extend it. Pimple is meant to be simple, I think at the point you want to make it more than simple you should probably replace it.\n. I am closing this one out, I think we will be sticking by our decision with our call on final for now, if this should change it won't break anything.\n. Hi @feryardiant I had a look at the code earlier and it looks really good, but unfortunately I will have to ask if you can change the namespace from Slim\\Views to your own namespace. \nWe tend to create our own namespaces for projects not managed by the Slim team to keep support requests away from the Slim team and also to keep the association clear.\n. I think this is spam, also this is the wrong place for questions about how to use Slim.\n. Fixed.\n. I just had a look at Zend Expressive and they are doing a configure it yourself kinda setup, I think if we include defaults for the Pimple container we include and write documentation for implementing any other Container you want to use. This is the current approach of Zend Expressive http://zend-expressive.readthedocs.org/en/stable/container/pimple/.\nSo I say leave it as is, anyone wanting to change to another Container just needs instruction on what services needs to be implemented. I will open a issue on the documentation website.\nThanks for all the comments on here, it was really good learning from you all.\n. @juliangut we have always shipped with a Container, so this is nothing new, Pimple does not follow Container Interop, we could go on to create another class just to put the Pimple services in, but we don't see any value in this as it would still be only useful to Pimple. I think out approach is about ease of use for new developers, if you are a advanced developer then you can change and reconfigure you services if you wish. But we are still catering for beginners as much as we can.\n. Travis says you are trying to convert a Array to string or vice-versa\n. @geggleto we need to know now what you are proposing otherwise its a 4.0 deal.\n. We spoke and will tend to this later once @geggleto work out what he wants to say.\n. @kevinmlong $this->response is probably stale. Where is that coming from?\n. @kevinmlong you need to use $response instead of $this->response. $this->response is a stale response object while $response is the current one from this request. You can even do exactly what @akrabat did in his example.\nphp\n$app->get('path to route', function ($request, $response, $args) {\n    return $response->withStatus(404)\n                   ->withHeader('Content-Type', 'application/json')\n                   ->write(...stuff...);\n});\n. I actually did a test by switching out our Request/Response objects for the Zend Diactoros ones and it worked without any issues, I think @akrabat is going to put it in his test rig and see if it all still works.\nHere is the code I used with @akrabat slim 3 skeleton https://gist.github.com/silentworks/c9ae6b01e750256fae75\n. I think this is up to the developer, we don't want to be passing around the container as this is classed as bad design. If you require this for your own application, you should probably replace the Resolver inside of the Container with your own implementation.\n. @xMolchy almost all classes in the framework can be replaced and CallableResolver is one of them. Using the service inside of a closure would almost be the only way of getting an service inside of the closure, you can't inject dependencies into an closure unless you want to write some non-performant code.\nYou can replace using the code below:\n``` php\n$container = Slim\\Container();\n$container['callableResolver'] = function ($c) {\n    return new MyOwnCallableResolver($c);\n}\n$app = new Slim\\App($container);\n```\n. @xMolchy its bad design because we have no idea of the requirements of each Class at that point, we are also giving the caller(Class) access to everything inside of the container even if it doesn't need them. There are also issues our IDE will have to deal with if we needed to deal with any refactoring as we would be working with strings inside of our Classes and not actual object references.\nYes you can do the same with the Router which creates the Route.\n. Your comment doesn't match with the PR you sent. Closing this out until correct code is sent.\n. No its run only once, its run agains the newly assigned $resolved variable. \n. Haha, I was looking at the patch-2 branch submitted by @oanhnn and was wondering how comes I only see that check happening only once. Then I looked at the 3.x branch and realise you are both correct it is being called twice.\n. Here are the issues I have with this being used publicly and why I think it should be either protected or if being used in a tutorial the writer should state the side effects of not using the add method on the Route class instead.\nIf a user uses addMiddleware they have no access to the resolver unless they do this manually, it would mean that if I were to do:\nphp\n$app->get('/', ....)->addMiddleware('Class:method');\nThat would not work as addMiddleware does not resolve this string. If I were to also pass through a closure I would get similar results If I were to try and access the container using the $this variable.\nphp\n$app->get('/', ....)->addMiddleware(function () {\n   $this->router // This would not work as this is only being bound inside of the Route class add method\n});\nNow the use case that @geggleto propose might be valid but I can't see how it would give better optimisations, based on what he stated on irc, calling addMiddleware would mean bypassing the resolveCallable which I don't think would give that much of a speed boost as even inside of the CallableResolver we wouldn't run many checks if what we are passing is already a callable https://github.com/slimphp/Slim/blob/3.x/Slim/CallableResolver.php#L78.\nHaving this method public, feels dangerous and has more cons than pros. To me this will end up with us having more issues coming in from users due to it not working as they would be expecting. I advocate against using it at all and think it should be made either protected or private.\n. @oanhnn not sure if its that much faster but its doing the same as previous code minus using the else.\n. @jensscherbl my current use case is I have a old Codeigniter app which I have created a middleware for and I am using Zend Diactoros to pipe the Codeigniter app as a middleware and also adding Slim 3 as a middleware to it. So in my front controller I will look in Slim for the path to see if it matches, if not I tell Slim to go to the next middleware which is the Codeigniter one and see if it matched there.\n. This is now fixed with the new $router->relativePathFor() method.\n. This is not related to the framework. Please open a topic on the forum or StackOverflow.\n. I am inclined to consider this a critical bug and think there should be a patch release for it.\n. @akrabat I agree.\n. You are allowed to add non PSR-7 methods to the implementation, the framework itself is not dependent on any of these methods as I have swapped out our implementation for diactoros and it all worked as expected. Zend Expressive also has its own helper methods for their PSR-7 implementation although a bit more separated than we have.\n. Make use of Route names and pathFor, otherwise you will have to work out the context of subdirectories by yourself.\n``` php\n$app->get('/', function ($request, $response) {\n    if (isset($_SESSION['Auth'])) {\n        return $response->withStatus(302)->withHeader('Location', $this->router->pathFor('dashboard'));\n    }\nreturn $this->view->render(\n    $response,\n    'login/index'\n);\n\n});\n$app->get('/dashboard', function ($request, $response) {\n    return $response->getBody()->write('I am in the dashboard');\n})->setName('dashboard');\n```\n. Just tested this following your steps and didn't have the issue you are currently having. Can you post your .htaccess file so I can see the rules you have set please?\n. I only have 1 .htaccess and it is identical to the 2nd one you posted above. In your example you have your front controller (index.php) 2 subdirectories down. I have only tested with mine 1 subdirectory down. Let me test with your setup and see what results I get.\n. Happy to hear you got this resolved. Thanks @r3wt for helping out.\n. Thank you for doing this.\n. @Serhioromano are you sure you are returning the correct response object, remember PSR7 response object is immutable. Try the following below:\nphp\n$app->get('/', function ($request, $response) {\n    $data = [\n        ['name' => 'Tester'],\n        ['name' => 'Tester 1'],\n    ];\n    return $response->withJson($data);\n});\n. I did this just today using the following command composer require slim/slim ^3.0@RC\n. We have been considering this, but still haven't decided if we will and which service we are likely to use.\n. I have no objection to Slack or Gitter as I use both for different projects. I also agree with @mnapoli that Gitter would be a better option due to its Github integration and its ease of use over IRC (for some users). \nI think we could use both platforms, but will discuss with the rest of the team and see what everyone else thinks. I guess it will be one more thing for us to manage (keep an eye on) so we have to chat about that aspect of it internally first.\n. Current stable version doesn't require composer to run. So anything in the 2.x version can be used without composer, also you can use composer during development for 3.x and upload the entire project along with the vendor directory and it should work as normal. Remember you shouldn't be doing composer related stuff on production servers.\n. Yes, since we seem to be just aliasing it as that anyway.\n. Would this not be relative and absolute pathFor, I am not sure about the current name as its a public method saying its internal, when its accessible externally.\n. @akrabat is getBasePath not a Slim 3 specific method? I think @tuupola is trying to avoid that and have his middleware's work with any PSR7 implementation.\n. Responses are Immutable, you need to send this along at the point of calling your render method, your second example wont work as the JsonProvider class would have a stale Response object. If you want to use the second method you would have to do it like below:\nphp\n$app->get('/', function ($request, $response) {\n    $jsonProvider = new JsonProvider($response);\n    return $jsonProvider->render([], 200);\n});\n. At the moment this can be done via a middleware, actually there is already a middleware created that deals with this nicely. You can check it out here https://github.com/rszrama/negotiation-middleware\n. ArrayAccess is correct in these cases since you would already be in the context of Pimple inside of the closure. The Container being passed in via the registration doesn't matter too much wether it is being used or not.\n. Sorry about closing this earlier, can you send only the changes for the removal of unused $c variable please and I will get this merged in.\n. Does $c->get() work in that context though? I thought Pimple was injecting itself and not the extended Slim\\Container class.\n. Ok in terms of consistence, if we are going with $c->get(), we will need to update all the other repositories README.md that make use of ArrayAccess instead. \nI am all for using $c->get().\n. I am going to leave this on hold for the minute. We need to check the impact this is going to have and find a viable solution to suggest to people first.\n. I am working on a directory for middleware. I should put it on Github so you can keep track of its progress.\n. You are correct indeed, not sure why we didn't do that. Let me get @akrabat to comment here if he can see any reason not to do this.\n. We have decided to remove these and opt for a middleware instead.\n. @orykami this will be in RC2 which will be out over the weekend or next week, just need to finalise some bits with @akrabat.\n. @designermonkey just to note RC1 was broken in the way it handled route group, when I upgraded my live app I noticed that the route mapping was failing due to this and this fix in RC2 fixed that issue, however due to regression we didn't notice the original issue came back about. We will be doing a RC3 to fix the original issue while fixing issues that were caused in RC1. Here is a code snippet below outlining what was wrong in RC1.\n``` php\n<?php\nrequire 'vendor/autoload.php';\n$app = new Slim\\App();\n$app->group('/', function () {\n    $this->get('/', function($req, $res) {\n        return $res->getBody()->write('Welcome Home.');\n    });\n$this->get('/about', function($req, $res) {\n    return $res->getBody()->write('About me.');\n});\n\n});\n$app->run();\n```\nIf you visited / it would all work correctly, but if you try and visit /about you would notice it all failed. I tested this with nginx and also with php build in development server. The reason it failed is because the route for about is actually registered as //about which in turn makes it an absolute path rather than a relative path to webroot. In order to get this to work in RC1 we would have to make our routes in the group not start with a leading /.\nWill fix all this for RC3 and ask for more feedback from everyone before making a release of RC3 as we want to go final after RC3.\n. @designermonkey move discussions over to #1597.\n. Chrome shows them all as uppercase in the Network view, most examples online show them as uppercase, I see no reason to make them case insensitive, just just an unnecessary overhead. \nIf you need it be case insensitive extend App and add some code to deal with it.\n. Fixed.\n. Will get this merged as soon as we decide on what the next milestone will be.\n. I am going to close this one out as we don't want to promote the use of this in your own app. I know you made comments to wildurand Negotiation but that will probably not be read by many.\nedit. why you so quick @akrabat :)\n. Hi @cleartext the code above should work. Also thanks for the feedback, I think this is something we will need to get sorted in the documentation, because as you say it feels somewhat harder to get into Slim 3 than it was with Slim 2, I would like to get some more of your feedback on anything else you are finding issues with so we can write some Cookbook style documentation around those areas.\n. Or you should be able to do\nphp\n$this->get('view')['metadata'] = $metadata;\n. @pokmot send separate PR's for the issues you mentioned above. One for making private methods protected and another for moving the inline errors to their own protected methods.\n. @pokmot make that a separate PR, also I don't think these methods should take anything more than the exception as an argument. At the point where you need more flexibility, create your own Error handling class.\n. @pokmot I will have a look at this soon.\n. Info on turning error reporting back on.\nhttp://www.slimframework.com/docs/handlers/error.html\n. Is this by any chance related to #1571\n. Added to the docs thanks to @mathmarques \n. $level is passed down to the log method through other methods like warn, debug, info, error, critical. The log writer receives the $level from the call to LogWriter write method on line 322 of the Log class.\n. Like this:\nphp\n$route = $request->getAttribute('route');\n$route->getArguments();\n// or\n$route->getArgument('argumentName');\n. @dopesong good point, you wanna PR it or I will add it later on in the week.\n. Done\n. I think if someone was to change knownContentTypes to something not in the switch, it should fail badly, easier for the developer to debug than something magical happening without them knowing why.\n. For the reasons outlined in #1574\n. @juliangut with this PR you don't need to, but if you should create your route with that last slash then I guess that is your intention.\nAlso look at the original issue if you want a middleware to remove trailing slash at all times.\n. @akrabat tested that /users/ and thats working correctly. Do note the endpoint would be /users/ and not /users.\n. @theodorejb its more of a best practise than a forced expectation.\n@geekish A completely valid use case for this would be:\n``` php\n<?php\n$app->get('/hello', function ($req, $res) {\n    return $res->getBody()->write('Hello');\n});\n$app->group('/world', function () {\n    // I want these validated\n    $app->group('', function () {\n        $app->get('/yo', function ($req, $res) {\n            return $res->getBody()->write('Yo');\n        });\n        $app->get('/howdy', function ($req, $res) {\n            return $res->getBody()->write('Howdy');\n        });\n    })->add(new AuthMiddleware());\n// I don't want these validated\n$app->group('/place', function () {\n    $app->get('/hello', function ($req, $res) {\n        return $res->getBody()->write('Hello');\n    });\n});\n\n});\n```\nThe difference is I won't need to inspect the path in order to know which routes to apply the middleware to.\n. @akrabat that code doesn't work in this PR nor in RC2, you would have to do\nphp\n$app->group('/users/', function () {\n    $this->get('/', 'UserCollection::list');\n    $this->post('/', 'UserCollection::add');\n    $this->get('/{id}', 'UserResource::load');\n    $this->put('/{id}', 'UserResource::update');\n    $this->delete('/{id}', 'UserResource::delete');\n});\nfor it to work in RC2\n. Send a PR and will get this re-instated.\n. Fixed. You can now find this in a example directory.\n. I agree with @akrabat and @codeguy \n. A PR has been accepted with that fix recently. #1618 \n. @rbairwell thanks for testing, contributing PRs and providing feedback.\n. @codeguy can we get this tested on an app that makes heavy use of middleware's first, both Route and App level middleware.\n. Take a look here https://github.com/slimphp/Slim/issues/1594#issuecomment-157010524\n. @mbretter and @geekish thanks for all the feedback, we have taken it all into consideration and will be removing final shortly. #1670 \n. I agree with @ppetermann, but at the same time we need to keep the ease of use for the end user. Some of this stuff will probably be better handled in the slim-skeleton as I think pushing all of this into Slim core is going to get messy.\n. The code below works in Slim 3.\nphp\n$app->get('/foo/bar', function ($request, $response, $args) use ($app)\n...\n})->add($authorize('whatever'));\n. This is actually in the Container and since a closure is bound to the Container you can call services the same as you would in Slim 2.\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Container.php#L287\nphp\n$app->get('/foo/bar', function ($request, $response)\n    $this->router->methodName();\n});\nYou should also note there is a Strategy that allows you to map placeholders to args like in Slim 2, so you can do.\nphp\n$app->get('/foo/bar/:name', function ($request, $response, $name)\n    return $response->getBody()->write(\"Hello $name\")\n});\nWill get something written up about migrating soon.\n. Look at my example again, you can do the same, you just need to replace $app in the Closure to $this.\n. Do note all classes that are instantiated by Slim itself using\nphp\n$app->get('/', 'MyClass:hello');\nThe constructor is passed an instance of Container, so you can do\n``` php\nclass MyClass\n{\n    private $container;\n    public function __construct($container)\n    {\n        $this->container = $container;\n    }\npublic function hello()\n{\n    $this->container->cache->get(...\n}\n\n}\n```\nor you can create your own App class and extend Slim\\App and add the magic getter to your version.\n. I think this part of the spec is a bit confusing, because the second sentence seems to call for the enforcement of the first sentence. \nNot sure why you would need both or why the container should be handling this part of exception handling rather than the end user doing it themselves.\n//cc @mnapoli \n. @mnapoli thanks for clearing that up. I didn't realise NotFound extended ContainerException hence why I found it a bit confusing.\n. I am still not seeing the value in this, it feels like its been over-engineered for something that the developer should deal with themselves. Wouldn't this example below solve this issue?\nphp\n$container = new Container;\n$container['foo'] = function (ContainerInterface $container) {\n    try {\n        return $container['doesnt-exist'];\n    } catch (\\Exception $e) {\n        // deal with it here\n    }\n};\n$container->get('foo');\n. Sorry for going back and forth on this one @Sam-Burns but we want to get to the best possible solution on this, I wonder if we should do as suggested on https://github.com/zendframework/zend-expressive/issues/129#issuecomment-157516173 until the actual Pimple team decides to adapt container interop.\n. What makes this an improvement over what was already there?\n. This is not an issue at the moment as this change doesn't give any performance increase or the likes and it will be refactored in next major version.\n. I think the middleware solves this issue, otherwise you can manually set the baseUrl.\n. Implement your own and override the Slim\\Container.\n. Please don't open multiple issues on the same topic.\n. If you need them yes.\n. This would only be beneficial to contributors and not to the user using the end product. I am inclined to thinking that so far all contributors are following PSR2 coding standards and we won't benefit much from this.\n. This is correct as it is. Read from the link below for reference on $_FILES in php.\nhttp://php.net/manual/en/features.file-upload.post-method.php\n. This is the result I get using the PHP built in webserver on the hash you have above.\narray(1) {\n  [\"tags\"]=>\n  array(2) {\n    [0]=>\n    string(7) \"Express\"\n    [1]=>\n    string(6) \"Baking\"\n  }\n}\n. Not sure why you are setting the status code as the body, you need to set the status code as a status code.\nphp\n$app->response->setStatus(419);\nhttps://github.com/slimphp/Slim/blob/2.x/Slim/Http/Response.php#L156\n. @feryardiant if you see any other repo that would benefit from this, send a PR.\n. This is not a bug. I somewhat think its a browser/web server behaviour. I just tried this on some websites and it worked, also note some websites do redirect to the url with only 1 slash.\nhttps://github.com///slimphp/Slim/issues/1679\nhttps://www.google.com///doodles\n. The issues section of the repository is for Slim related issues. Please ask this question on the forum, stack overflow or freenode irc channel #slimphp.\n. @odan I don't think there is currently anything stopping you from doing this.. The 3.x covers all possible 3 branches. e.g. 3.0, 3.1, 3.2, 3.3, 3.4...\n. We will be cleaning up some of these methods in the next few versions. I am going to re-open this as its something we should probably look into.\n. An .htaccess file is not necessary to use Slim. If one should be required we have that covered in the docs and we also provide an example directory in the repo with one in it.\n. This is what the manual page states.\n- $_FILES['userfile']['name']: The original name of the file on the client machine.\n- $_FILES['userfile']['tmp_name']: The temporary filename of the file in which the uploaded file was stored on the server.\nTo me this says that the tmp_name is greater to check against as this is an actual place the files is store on the server and if it wasn't this would return none from what the docs says, while there is no mention on if name would even be a thing at this stage.\nBut saying that, after reading this comment http://php.net/manual/en/features.file-upload.post-method.php#104349 it might make more sense to check name.\n. You don't need to inject it yourself if you are using ->add('Class:method') or ->add(new Class). In these cases we inject container into the constructor for you. So you can call $this->container->get('router').\n. Because of community misconception that you need to actual run composer command on your production server (which is not possible for shared servers). Take a look at @akrabat's article if you want to use Slim 3 on shared server https://akrabat.com/using-composer-with-shared-hosting/\n. Closing this one out as I think it will bring more confusion than clarity. Someone is likely to clone the repo and run composer update in /example and then ask why is there 2 copies of Slim.\n. Yeah we should be able to get rid of that, but can't at the moment because of BC breaks it would cause. We are bound by that Contract for this moment.\n. Take a look at #1644.\n. Would this not be a BC break? because as someone mentioned above if I were already using ->add([$instance, 'method']);, this PR would break my code.\n. I personally don't really have too much of an opinion on this as I tend to have only ever needed 1, max 2 middleware per route, normally I would add them to route groups or at the app level. I don't really mind typing ->add() over and over, nor would I mind typing ->add(an_array_of_middlewares).\n. This is still a BC break. Also why wouldn't you do $response->withJson([], 500) if you need a different status code?\n. Please also note that withJson is a helper method, it should help you write less code for a specific purpose. \n@AndrewCarterUK that should return a response with 200, if the developer wants it to return a status of 404 either do:\nphp\n$response = $response->withStatusCode(404)\n    ->withHeader('Content-Type', 'application/json;charset=utf-8')\n    ->getBody()->write(json_encode([]));\nor\nphp\n$response->withJson([], 404);\n. It is indeed possible for someone to use Slim in such way, there are also other ways people can use Slim which could give such side effects but we think the documentation is clear enough to guide the user in using Slim correctly.\n. Thanks for this, we will be sorting out a section of the website for stuff like this soon. In the time being just post it on the Wiki of this repo.\n. I don't understand what you mean by this, are you using Twig? or is this using plain PHP? because your template file is default.php but you are using Twig's {% syntax.\n. @OptimusCrime because its a web server like all the others and some companies like having the backing of a larger company behind their server architecture choice.\n. Happy to hear that @miitchyy, I will close this one out on that note.\n. I am not for this PR, I intentionally left our route caching from the core of the Framework due to the issues it could cause for someone who doesn't understand what it does. This would lead to us having more issues to attend to due to people enabling cache this easy. If you don't remove the cached route file on each deploy, you end up with a broken system. And for this reason I left this out and was planning to add to the documentation how to get it working along with these warnings.\n. Thought about this a bit more and I agree with you on KISS. Can you update the PR please and we will look to get this merged in for 3.3.0.\n. Fixed.\n. Looks good to me.\n. Is this not just pathFor without the using named routes? if this is the case why not just create named routes?\n. Can you let me know if you get a different result if you chain all of those together?\nphp\nreturn $response\n    ->withStatus(400)\n    ->getBody()->write('No user found');\n. This PR could makes this unusable with other Pimple implementations.\n. By default if you want to add a ServiceProvider to Pimple you would do.\nphp\n$container = new Pimple\\Container();\n$container->register(new Slim\\DefaultServicesProvider());\nWith your change this would no longer be possible. I also cannot see any advantages in what you are doing.\n. I replied on SO.\n. Any reason why you wouldn't just handle this in a custom handler? Also you are missing a ) on line 595.\n. Nothing stopping you from separating them. I think exceptions should be handled in user land code, so you can try and catch them where necessary otherwise create a custom handler that passes it off to the correct handler.\n. Please make that tag slimphp on Stack Overflow, slim is also the name of a popular ruby templating library.\n. Ah I see, just noticed Slim(templating language) is using slim-lang tag.\n. We had this in Slim 2, maybe an oversight that we missed it out in Slim 3. I will check the code again and look at some issues to see if there was a reason its not in Slim 3.\n. After reading through the code more now I understand what you are trying to do, what is the use case for this as we intended for it to work the way it currently does as its more clear that $data will replace placeholders in path while $queryParams will be added at the end.\nI think the current setup is as flexible as it gets, your change is limiting that flexibility by checking in both arrays while not necessary. If the developer wants the placeholder replaced then place the variable in the $data array otherwise if they want it added to the end do so in the $queryParams array.\n. @aimeos This is a breaking change that will have to wait until 4.0, it would lead to an unexpected behaviour for the developer, potentially exposing data they didn't wish to expose in the querystring.\nAn alternative would be to provide a setting option to turn this on and this would be set to off by default. This I could merge in right away.\n. @aimeos what would be the default behaviour with this optional parameter?\n. @aimeos I am happy with it working like that. Update PR and we will get it merged in if no-one has any objections. @codeguy @akrabat \n. So this is a matter of implicit vs explicit. I am always for the explicit way of doing things, but I see no harm in this being one of those occasions we do it implicitly.. I think this has been answered, so closing.\n. @rachellcarbone yes currently you can create custom views, take a look at the Twig-View or the PHP-View to see how its done. How was the custom JSON view implemented in v2? was it a hook or a middleware or just manually called in each route callable?\n. @grikdotnet to this very day no one understands what your issue is and you haven't explained it clear enough for anyone to attempt to fix it if its a bug. Not sure why you still feel the need to be negative about others work while they are trying to help you as much as possible.\n. @grikdotnet yet again I have not seen anything in this discussion where any official member of the team has said they wont fix this. I have seen @akrabat ask over and over for you to clarify what the issue you are having is and how to reproduce it. I am yet to see you provide any of what he has asked but continuously say you have explained it already.\nWe cannot fix what we can't reproduce or have steps to reproduce, we also cannot fix anything that is not related to Slim itself. Please provide clear steps on how to reproduce your issue and we will definitely investigate it more. Also can you state which framework you have used which doesn't have the issue you are talking about so we can check how they are handling the issue.\n. @schnittstabil your issue is very clear, not sure if this is the same issue @grikdotnet is having. If its the same this just means that there is no rewrite available/setup on these servers, you would have to route using the old method of including the file in the url. So from your example, you could get it working following your workarounds or by visiting http://0.0.0.0:8888/api.php/hello. This would work the same for nginx without the try_files $uri $uri/ /index.php$is_args$args; config change.\n. @schnittstabil thank you so much for this, we will look into this now and try to come up with a solution.\n. This has come up before and we have settled for keeping it the way it currently works. I think on a per project basis the developer can decide which container they want to use, not all containers use ArrayAccess for setting and if we were going to create an interface in order for you to create a bridge class, you might as well just do that in your own code rather than having this in the core of Slim. \nThis is the reason container interop spec didn't define a way to set but only get and has.\n. @farazappy now unblocked, not sure why that happened.\n. Petition Denied for the lack of real evidence. We need Immutable evidence as proof. There is Node other way we can React on this Petition.\n. I don't think this belongs in the core of Slim, but can be part of Slim Skeleton.\n. You can easily add this in your own implementation if you wish, but I don't think this belongs in the core. This was the reason why we made the Container class not final anymore, its so you can extend and do as you please with it.\n@KuroThing you do realise this is just code right, you can do as you please with your own, not sure how hypocrisy comes into play when the framework is now opinionated. If Container was still final then I would understand your case, as it no longer is you are pleased to do what you will.\nAll magic methods that we decided to implement are purely for shortcut use, and since every container that uses container-interop follow the same get and has, it is easy enough to have magic methods in Slim to provide access to these. set is not defined by container-interop hence why you need to do all your set on the Container directly.\n. @ppetermann you can do b and c with Slim as it currently is, but you can also go about it not using b and c. We realised anyone coming from Slim 2 are likely to want to do $this->cache->get in their route closure when using anonymous functions, for developer experience we thought that is way simpler than doing $this->getContainer()['cache']->get(). In cases where you are not using that style of coding, you would inject your dependencies using whatever method your chosen Dependency Injection Container provides.\n. This would be useful for ACL, but you could solve this by using Route names. I done this by making my route names use a dot notation e.g users users.profile users.update\nThis way I can set ACL on users and it would get applied to all other instances using users at the beginning of the name. I will try and dig the code out to share so you can see a different approach of doing this.\nI also would like to know your exact use case for this @alexweissman \n. Looking at the solution @danielgsims proposed, why couldn't this be solved with what @JoeBengalen suggested? After all setArgument and getArgument is doing the same but thing just not as specific as this. There is also a getArguments method.\n. If you namespace it correctly, there is no way it should be getting over written.\n. After thinking about this a bit more, I really think its adding a feature that can be done through other means and don't think this change belong in the core of the framework itself. It might be better if someone contribute a Cookbook recipe to the Documentation website.\n. Closing this one out, reason stated in #1891.\n. Looks like PHP-DI covers most of your cases http://php-di.org/doc/frameworks/slim.html#request-or-response-injection\n. As stated above, we don't think this should be part of the framework itself. You can do this in your application via a Middleware or other means if you wish. On that basis I am closing this PR.\n. I think @JoeBengalen answer is a solution to your issue. Closing this issue for that reason. Please reopen if you feel its not resolved.\n. @matthew-dean rightfully as @tuupola put it, the route was matched, so the router would have done its job, returning a 404 would be the job of the action within that route itself. \n. This is due to BC, where we allow you to echo instead of return ResponseInterface.\n. I don't remember it being removed. Maybe add to the 4.0 Roadmap.\n. Thank you for wanting to contribute to the framework, but I can't see any benefit in what has been done in this PR. On that basis, I will be rejecting this PR at this point in time. We look forward to your future contributions.\n. @geggleto I am for the config array approach, you could even create a ArrayObject helper if you want autocomplete for your IDE or have a documented API of setting requirements.\n. In its simplest form, the container we use is just a in memory key/value store, I consider settings pretty much keys/values, so not sure why settings doesn't fit into the container? Maybe because we are explicitly doing it, If this was implicit and hidden would we be still having this same conversation?\nAs I stated above, nothing stopping you from implementing your own ArrayObject to deal with autocomplete for IDEs https://github.com/slimphp/Slim/issues/1923#issuecomment-231872843\n. If the current version of Slim 2.* works for you, then I would suggest keep using it. The entire PHP community is moving towards sharing components and composer is a way of doing this. You can install Slim 3 without composer if you wish, but you will have to deal with all the wiring yourself. \nI think you should consider updating your Autoloader to work with PSR4 as this is becoming the standard of autoloaders in the PHP ecosystem.\n. > It just seems strange to me that auto loading would be the only reason for relying on Composer.\nWe rely on Composer for more than autoloading, it is used for dependency management. It allows for faster getting and including a package from the wider PHP eco-system without having to fiddle with how to load these packages.\n. Closing as I think it was reopened by mistake.\n. I don't think we would want this into the core, but you are free to make this a separate add-on project.\n. Thats a good suggestion, please create a Pull Request on the Slim-Website repo please. Here is a link to the file you need to modify https://github.com/slimphp/Slim-Website/blob/gh-pages/docs/objects/router.md\n. Thanks again.\n. Hi, thanks for stopping by and making this suggestion for the guides. I think what we provide in the guide is the minimum most common solution for all users of the framework, I think when a user decides to do something more advanced they will need to find a solution themselves as you have. Your code above covers your use-case, but it wouldn't cover ever use-case, so unfortunately we can't add this into the guide as it is specific to your setup.\nNginx is a bit of a handful for most beginners and we think anyone attempting to use it for advanced setups should have a grasp of it before starting.\nI hope this helps you understand why we provide only the minimum configuration needed to start working with nginx.\n. You need to override it before the new instance of Slim\\App.\nphp\n$settings = require __DIR__ . '/../src/settings.php';\n$settings['router'] = function( $c ) {\n        return new \\Aimeos\\Slim\\Router();\n};\n$app = new \\Slim\\App($settings);\n. Also can we make it all one page again or provide a one page version also?. Is this not a BC break, since we are now suppressing a PHP error?. @theodorejb would you be able to provide an example app showing the slowdown, so we can take a look at where we could improve performance please?. @theodorejb so a route callback will always execute when the app is initialized, because this is used for urlFor() as noted before. This is something I make heavy use of and many other do also. What we are asking is if you use a string as your route callback then you shouldn't have performance issue.\nphp\n$app->get('/', 'Class:method');\nThis is lazy loaded and only requested when the route is matched, so any code inside of that method won't be executed until the route is matched.. @theodorejb what is that $class and what does it contain? If possible jump in the slack channel, its probably easier to get back and forth quickly.. @theodorejb yeah just looked at the README in the repo, I am working on an example now.. @akrabat I think it could as it would just be a lookup table of route paths that would be necessary, I mean FastRoute kinda generates one when you use RouteCaching.. @akrabat would it not just store\n[\n    '/users/:id/address' => 'UserController:address',\n    '/users/:id/messages' => 'UserController:messages'\n]. @akrabat I think @theodorejb issue is to do with the actual get running than the actual group closure.. @theodorejb I have created an example project so you can have a look at how I would approach this with lazy loading the callback by using a class string.\nhttps://github.com/silentworks/slim-route-group-test. @theodorejb I don't think this is being lazy loaded as how it is in my example, you just mapped a callback as a string, in my example its all in the container and the container doesn't get invoked unless the route matches. I think your example will invoke all callbacks even if the route don't match.. @theodorejb I would really like to see the test done on a real world app, an app where you don't actually write anything inside of the group besides your $app->[get,post,put,delete]. I think you are getting a slow down due to the loops you have in that example, each request cycle those loops have to be run.. @Rotzbua and can you tell me how current version of Slim limits you from using PHP 7? or even how the next version if we chose not to go PHP 7 affects you as a end user please?. @garnold it seems Google App Engine Flexible Environment supports PHP 5.6+, you might want to switch over to that as @Sam-Burns has said, PHP 5.5 is no longer supported by the PHP core team at all.. or just use CakePHP for everything.. I don't see any harm in writing it the long way by using map, I don't see this becoming a common thing anytime soon and don't feel we need to add a shortcut for it.. I don't think we will consider this, as you stated you can already change these by using custom pages. The Slim name is part of the framework branding and should remain so in the core codebase that is provided.. @designcise I think a more important question is why would you be running your production website in development mode? You will only see Slim in an error if you are running it in development mode, otherwise this is not seen.. @designcise We want you to give credit where credit is due, if the project is built on Slim, let it be known it is built on Slim, especially in development mode. We don't want people trying to sell the Framework as their own, it even builds confidence for your client when they know you are building on a already solid codebase (not that they would be interested, unless they are a technical client). It also mean that the next developer who takes over doesn't need to guess which framework you used.\nIf you are ever so concerned about the name leaking out in your presentation, switch your application to production mode for your presentation. Actually by default out of the box, Slim is in production mode. (Note we are talking about debugMode being off, not that we are adding any extra production optimisations for you).\nTo be clear, we will not be facilitating this sort of functionality that you requested in the core of the framework.. @damianopetrungaro I don't think this will happen as long as 5.6 is still getting security updates.. @amitd-sequere you are trying to PR to the wrong branch? please look at your pull request again and try to send it to the correct branch.. I am also proposing we add this in the next minor release of Slim 3 and note that group() is deprecated and will be removed in the next major version.. @damianopetrungaro that is true, we need a better name than prefix I guess.. I like that idea, or maybe we should do as you said and leave it as it is. We would just need to make it very clear in documentation that group is not the same as a get, post ..... I am happy with this change getting added into Slim 4, @geekish has also provided example code to show the use of this feature, which current implementation doesn't allow.\nhttps://gist.github.com/geekish/3a1cf866aec0a6ee1935007cbf915d78. @geggleto we can't pass the Router instead, because the Router doesn't carry these methods, these are helper methods [get, post, put, delete, map] that are created inside of App.. @sharifzadesina we are already doing this in the form of closure binding. So I am not sure why there is fuss about this PR.. @sharifzadesina so the point you are making has nothing to do with this PR. Someone else should send another PR to fix the issue you are concerned about.. @sharifzadesina no we aren't making it bigger, it still the same magnitude as it was before this PR. This PR however is making the use more consistent.. For past commenters and future commenters on this issue, I want to make it clear that coming with an argument about design decision has no effect on this PR, this PR was created after the design decision was taken, this PR is just making it more clear as to how you create routes in route groups.\nI find it distasteful that many have commented about bad design on a PR by a first time contributor that has/had no effect on the bad design decision that was taken more than a year ago. If you wish to fix this bad design decision, raise a new issue or send a PR, please don't make this PR out to be what its not.. I think its more of consistency and my IDE would know how to give me autocomplete hint based on $app than currently where I get none based on $this.\nAlso since this is v4 I would expect there to be breaks, I actually don't see this as a major break either (although that depends on how many route group you have already using $this inside.. As I don't think there are any benefits to these changes, I will be rejecting this PR.. This is not that easy to implement in user-land due to our current design and currently it won't break anything in core and its not doing any harm adding it in.. Can you ask the question on http://discourse.slimframework.com/ and can you also make the question a bit more clear, I have no idea what you are asking at this point.. @cacharrin You need to run composer require phpseclib/mcrypt_compat in your project. That should fix the issue.. Yes this would be a helpful feature.. Sorry but we are only accepting Security fixes for Slim 2.. Having it in a separate class makes it available to user land code which I think is a good idea. So now in my responses I can make use of it, instead of trying to remember the codes too.. I wouldn't recommend you use 4.x branch, this branch is a WIP and breakage should be expected. The official stable branch is 3.x.. Please ask this on the forum instead https://discourse.slimframework.com/. The proposed solution look like the way to go. I'm just wondering if there are any side-effects to making that change.. In a case that someone should have an application (intranet apps) running on a different port, I don't think this change would work. e.g. http://myintranet.net:3200. For the core of Slim we will keep this as is at the moment, as @JoeBengalen said, your suggestion would add more classes which is unnecessary as you can override any dependency at the moment through the container or even using your own ServiceProvider class that implements the ServiceProviderInterface (If you are going to use default implementation). We are trying to make Slim 3 as flexible as possible to the Container someone will choose without too much added complexity.\n. This would not make a difference as Container Interop does not define how you set dependencies in the container but only if it has them and how to get them. So your suggestion would only mean a bunch of redundant classes, while the current implementation makes sure there is only 1 redundant class if you should choose another implementation.\n. @opengeek take a look at #1348 as the currently merged changes broke the default setup, we think this will remedy it.\n. Yes that is better naming, sorry I am bad with naming variables at times.\n. Just add $group->setContainer($this->container); after $group = $this->container->get('router')->pushGroup($pattern, $callable); and that should fix the issue. Sorry only realised this after you made all these changes.\n. Is it me or would we be passing settings to Pimple then replacing it right after on line 71?\n. Nah leave it, its probably quicker to replace it twice than to pop it off the array. Will merge, you can cleanup later if you wish.\n. At the moment if the class doesn't have an invoke method you will get Class is not resolvable, so you would hit line 78. I am happy with it being just that rather than firing up a Reflector class just to do the check first.\n. Good spot, @pokmot can this be removed please, if you need it in your extended class add it there.\n. Yeah part of the code was missing from the PR initially, but now its all there this method is fine.\n. But we already have a ContainerValueNotFoundException that extends Interop\\Container\\NotFoundException on line 266.\n. Thats an edge case we can live with. It would be also concerning if you were using {name} for both placeholder and $_GET argument, in that case I would think its an API design flaw.\n. @OptimusCrime it would be kinda a breaking change if this were to get merged, because the developer wouldn't expect any undefined placeholder to become a query string at the end of the path. I don't think this would cause much harm to any project, but it might not be what the developer expected. I however think this is something we can live with as this is expected behaviour in some other frameworks.\n. I think its the idea of return early, I am however not sure how much of a speed improvement this gives.. Is this a PHP 7 feature?. Whats wrong with this?. Maybe prepare or perform then?. Please don't Yoda the codebase. Lets keep it consistent with everywhere else in the codebase.. I think what @geggleto suggested is probably better to use as reasonably is subjective.. ",
    "enposte": "That was quick! Thanks for looking into it.\n. ",
    "dannym": "Yes, with \"have to set them manually inside my route callback function\", I meant \"use the custom View's getInstance() method to fetch the Smarty object and set these yourself directly\" :) \nBut that's a bit overkill, you have to add them to every callback function because you don't know which route is called first.\nAm I missing something? There should be a cleaner and smarter way to set these variables once in the code.\n. Ok great. I'll hack it through and will send you a pull request. Thanks.\n. ",
    "joshfng": "Awesome thanks. Registering another autoloader was my fallback just wanted to make sure there wasn't something within the framework I could take advantage of first.\n. ",
    "yaph": "Maybe the regular expression should be even less restrictive, I can well imagine numbers and symbols as parts of URLs that are not covered by the existing regular expression. For example the \u20ac sign in a URL still leads to a 404 page.\n. Only adding the u modifier does not suffice, \\w does not match \u00e1 if the \\pL sequence is missing.\n. Just tried it without the u modifier and Slim fails to load the correct page. The manual page linked above also empathizes that UTF-8 has to be selected.\n. Regarding your point about missing unicode support I found this forum discussion https://bbs.archlinux.org/viewtopic.php?pid=838794\nWhat do you think of using the @ operator for a support check?\n. Well, I haven't dived very deep in the Slim code yet so I am not sure which would be the best place to perform such a check. It should happen only once during a request life cycle and set as an object property that is easily accessible in the Route class.\n. Sounds like a good approach.\n. @codeguy great and thanks to you for Slim!\n. @tobsn I don't see what's wrong with unicode letters in URLs as browsers can handle them.\n. @bobdia I generate links in a Slim based app that contain unicode characters without URL encoding them. Links that contain these characters lead to an error and thus break the app.\nOf course, I could encode the URLs before generating the HTML links, but a user might still type unicode chars directly in the address bar, which would also break the Slim app.\nTry typing special characters like \u00e1 or \u00e4  directly in the address bar to change a Google search query or go to a certain Wikipedia page. This will work.\n. @codeguy as an application developer you can control the links generated by your app so it's easy to make sure they work, but you cannot control what users type in the address bar and in many cases it's unfeasible to control the content editors write.\n. Thanks for the quick reply, replacing all calls to setData with appendData resolves the issue.\n. ",
    "MatthewCallis": "For what it's worth, the first sentence of the answer on that StackOverflow answer is completely wrong \"Firstly, search engines really don't care about the URLs.\" and it might be worth it to make a note since the change is so simple in a \"Slim Hacks\" section or some other title on how to achieve this, seeing the URL in the title correctly makes all the difference in a users experience, as some browsers will actually show the URL correctly, be it http://list4.auctions.yahoo.co.jp/jp/\u30c6\u30ec\u30d3\u30b2\u30fc\u30e0-\u30b2\u30fc\u30e0-\u304a\u3082\u3061\u3083-\u30b2\u30fc\u30e0/22844-category.html or http://p\u00e5.ws/ rather than http://xn--p-2fa.ws/ \n. This would be really useful for people coming from Django, good work!\n. The more secure the default settings the better, to a point. I don't think this crosses the point of being to cumbersome or too secure for an average use.\n. @prelun do you have Resin installed? Did you convert the .htaccess to Resin dispatch?\n<web-app xmlns=\"http://caucho.com/ns/resin\" xmlns:resin=\"urn:java:com.caucho.resin\">\n    <resin:Dispatch>\n        <resin:IfFileExists/>\n    </resin:Dispatch>\n    <resin:Forward regexp=\"^\" target='/index.php'/>\n</web-app>\n. Can you try this and see if the error persist?\nSlim::init(array(\n    'view' => 'TwigView'\n    'cookies.encrypt' => false,\n    'session.handler' => null\n));\n. The ideal would be to implement both: api/user/1/details (generic uri that supports conneg by Accept header) api/user/1/details.xml, api/user/1/details.json, the first of which is already in the Road Map\n. ",
    "jkaflik": "That seems to be a problem with charset\n. No problem :)\n. ",
    "jakefolio": "@codeguy I tested the code on WAMP and everything worked fine.  I'm going to go ahead and push blame to the OSX php install.  I'm going to blow out the OSX install and use homebrew to setup a new environment.  I will update you guys on the outcome.\n. ",
    "michaelsmanley": "I like the idea of having differentiated execution modes, but I'm always a little chafed when I'm limited to only a strict set of environments. \nWould it be possible to have those as a default set of modes, and allow for additional modes if necessary? In previous projects I've worked on there were DEV, QA (same as TEST), STAGE, PROD, CI and DEMO environments, each with its own configurations, for example. I'd like to be able to specify my own modes.\n. That looks good to me. Thanks much.\n. ",
    "benatkin": "If you have control of your Apache installation, how do you make it so RewriteBase isn't necessary? I'm looking for the information myself and I'll report what I find.\n. ",
    "danielhardy": "It is not really the same thing but in similar vein I built a library of sorts to handle this by using the \"Accept\" header.  Basically you can pass the name of a template and an array of data. It determines how to distribute the data (HTML/template, JSON, or XML) based on the request header. I have even wrote a Slim view file for a RESTful api I am building.\nAgain I realize that it is probably not what you are looking for but it might be an interesting way to do it. The project can be found at https://github.com/danielhardy/GNexus - (I am not much of a developer so please feel free to give me any feedback if you do check it out)\nCheers!\n. ",
    "perlun": "Hi,\nI fully understand \"blind\" debugging this will be kind of meaningless...\nUnfortunately, I'm running this on my laptop so providing a VM access is a\nbit hard. But, you should be able to do this pretty easily:\n1) Get the Quercus framework is available from http://quercus.caucho.com/.\nVersion 4.0.11 is the one I'm using.\n2) Get the Tomcat installation from\nhttp://tomcat.apache.org/download-60.cgi. I don't know if you are on\nWindows or Unix? If on Windows, this should be pretty easy to get going,\nprovided you have a JVM.\nOnce the Tomcat is running, just drop the Quercus .war file in the webapps/\nfolder of Tomcat. This will create a http://localhost:8080/quercus or\nsimilar application, in which you can run .php files without any\nmodifications. Bigger applications like Wordpress are supported, so I guess\nthe level of PHP compatibility is pretty high. But, obviously it isn't\n100%... I guess.\nPlease, check it ouf it you have some time. Thanks!\nBest regards,\nPer Lundberg\n-----Original Message-----\nFrom: codeguy\n[mailto:reply+i-707227-cc24352cb36758767049503a2df6f7fb5f21d178@reply.githu\nb.com] \nSent: den 27 mars 2011 00:06\nTo: Lundberg, Per\nSubject: Re: [GitHub] Does not work (at all) with Quercus [codeguy/Slim\nGH-114]\nI'll take a look, but this could be any number of things. I've never heard\nof Quercus before. I admit this isn't going to be a huge priority because\nit will be extremely difficult for me to troubleshoot without an actual\nQuercus environment to use.\nIs it at all possible for you to setup and give me access to a virtual host\nusing your Quercus interpreter?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codeguy/Slim/issues/114#comment_921339\n. Fine by me. I might actually be able to get a VM for you, where we could\ndebug this, but it will mean a little work. I'll get back to you if/when\nthis gets possible. Put the issue on hold for now.\nBest regards,\nPer \n-----Original Message-----\nFrom: codeguy\n[mailto:reply+i-707227-cc24352cb36758767049503a2df6f7fb5f21d178@reply.githu\nb.com] \nSent: den 27 mars 2011 23:12\nTo: Lundberg, Per\nSubject: Re: [GitHub] Does not work (at all) with Quercus [codeguy/Slim\nGH-114]\n@perlun I use a Macbook with OS X 10.6.7 and MAMP Pro. I don't plan on\ninstalling Java and Tomcat just for testing an obscure web server. I don't\nmean to be dismissive at all. It's just not something I am going to do on\nmy dev machine. I'm honestly not familiar enough with Java and Tomcat to\nbuild a VM from scratch, either.\nIf someone else is willing to tackle this, that's great. But it's not\nsomething I can do.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codeguy/Slim/issues/114#comment_923635\n. ",
    "phof": "I get the error only every few page refreshes (ie, randomly), at times with the additional:\nWarning: Cannot modify header information - headers already sent by (output started at ../Slim/Http/Response.php:292) in ../Slim/Http/Response.php on line 292\nI'm not setting any cookies, the app is as simple as:\n```\nSlim::get('/', function () {\n    Slim::render('index.php');\n});\nSlim::get('(/:a)/:b(/:c)/:d/', function ($a, $b, $c, $d) {\n     Slim::render('result.php', array('a' => htmlspecialchars($a),\n                                 'b' => htmlspecialchars($b),\n                                 'c' => htmlspecialchars($c),\n                                 'd' => htmlspecialchars($d)\n                                ));\n});\n```\nNo log is created in the logs directory.\n. I can reproduce the issue only every few page refreshes, the problem wasn't there on 1.2. I'm using Dreamhost shared hosting: Apache + PHP 5.3.5 via FastCGI.\nThank you for your help.\n. @codeguy Thank you for looking into this: 'session.handler' => null seems to resolve the problem. I would have hoped to use the Slim session handler though, does that mean I won't be able to?\nBefore adding 'session.handler' => null my Slim::init was:\n```\nSlim::init(array(\n    'mode' => 'development'\n));\nSlim::configureMode('development', function () {\n    Slim::config(array(\n        'log.enable' => true,\n        'log.path' => '../logs',\n        'log.level' => 4,\n        'debug' => true\n    ));\n});\n```\nAlso, please note that no matter what log.path I indicate (and whether or not the dir exists or is writable), Slim doesn't seem to create logs.\n. Please note I've used Slim 1.2 and sessions cookies for a different project on the same hosting provider with no issues.\n. I can confirm that using Slim's session handler while commenting out lines 361 and 377 in Slim/Slim.php did not work: the random error re-appears.\nThe following are some example outputs from Slim::get('/foo', function () { echo session_id(); }); with 'session.handler' => null:\nDR,ELMz964thoxdac8Hgh3\nbtWv,yWvaH8nNrCmob5P91\nfsO3I1n6kcXuDhXuqeaRi1\n5Tf42u0o5RfDYr0YIVKfF0\nHZ8CDGgYMjo3-6RFtoL401\nMGLR6UICTLFPo90Ei29vk0\nfndvYm-hIRoo66PRyVDRU1\n,2GUrLJlBnI-R,Hax09cF1\n. Can also confirm I'm not calling session_start() at all.\n. If the outputted values represent the cookies' names, those with the commas could be the ones causing the error. Hope it helps, please let me know if I can offer you further help with the debugging of this issue.\n. - ini_set('session.hash_function', 0); doesn't work, still getting errors (strange as md5 should be ok?);\n- ini_set('session.hash_bits_per_character', 4); works, no errors (0-9,a-f is good);\n- they both work at the same time.\nI see you included both lines in Slim.php 1.3.1; I can confirm that by just replacing the Slim directory from 1.3.1 the app throws no errors anymore.\n@codeguy You're the man, thank you for your help!\n. ",
    "falmp": "I suppose the first option seems ok, even though you won't be able to call Slim_Log::* outside the middlewares or route callbacks. I might be overlooking some situations, but the way I see it all code executed during the request life cycle will be inside these methods.\n. Yup, it works. :)\n. Ok, thank you Josh!\n. ",
    "nirandas": "Hello, \nFirst of all, I am new to git and github and open source contribution. I find Slim to be really clean and slim. I forked Slim couple of days ago and played around it with it a bit.\nAs github indicates on this page, I've committed a possible fix to this issue to my fork. It basicly delays the creation of logger, view and session till  configureMode() method has been called if an application mode is provided in Slim::init(). \nIf no mode was given in Slim::init(), it works as before, initializing classes during init().\nOnly change in application behaviur will be that the mode must be specified if config settings are to be changed in configureMode(), even for development mode. A new test for this issue is also included in tests/SlimTest.php.\nthanks,\n. ",
    "mpedrera": "I am having this issue with current stable version from official site, shouldn't it be updated?\nIf I try with the latest development release it works like a charm ;)\n. ",
    "1994rstefan": "Still not working.\nIf you name the folder \"Slim\" the autoloader trys to load \"web_files/Slim/View.php\". If you name the folder \"slim\" the autoloader trys to load \"web_files/slimSlim/View.php\" and fails.\n. ",
    "valentinvieriu": "Thank you all. This was helpfull. I've managed to make it work.\nHere is my config:\nlocation / {\n  root    /var/www/new/Slim;\n      index  index.php;\n    if (!-f $request_filename) {    \n        rewrite ^(.*)$ /index.php$1 last;\n    }\n}\nIt does not work if I don't add the $1 at the end of index.php. It gives me 404 ( slim 404 ) error on all pages.\nMaybe you can add this on the front page for other to use it. \nThank you again\n. One more thing I wanted to add: Because I am using php-fpm I needed to modify what goes to the fpm; notice the (.*)$ at the end is for Slim php\nlocation ~ .php(.*)$ {\n      fastcgi_pass          unix:/var/run/php5-fpm.sock;\n      include                   /etc/nginx/fastcgi.conf;\n  }               \n. that worked! But what it's strange now is that after removing those lines, works too.\nI am using the development branch so it's \n$app = new Slim(array(\n  'view'=>'TwigView',\n  'cookies.encrypt' => false,\n  'debug' => true, .....\nThank you guys for the feedback and good luck @codeguy in your honeymoon :)\n. ",
    "kkdg": "For my case, below code lines did the trick.\n    location / {\n            try_files $uri $uri/ @handler;\n    }\n\n    location @handler {\n            rewrite / /index.php;\n    }\n\n. ",
    "adrianmg": "As I supposed if you change the init settings it works fine:\nAll is ok now.\n. It is ok now! Glad to contribute :)\n. ",
    "tinnet": "Works for me?\nI just tried all links, the .htaccess was always included (in the main folder, same as index.php) . Could it be a problem with \"show hidden files\" on your end NimbleHost?\n. ",
    "NimbleHost": "That was the first thing I checked, and \"show hidden files\" is enabled - or so I thought. It was turned on in Transmit, but not in Finder. Sorry for the false alarm.\n. @codeguy Welcome back~ Hope you had a great time, and...Congratulations!\n. Yes. I've tried in all major browsers, IE8/9, Chrome, Firefox, and Safari, and double-checked that each browser has (EDIT: accepts 3rd party) cookies enabled.\n. I've been working on this (in my own app) for the past couple of days without much progress. I then created a completely separate, very simple Slim 1.5 app that does just the following:\n- Display a login page\n- After logging in, redirect to another page\n  - The first page shown after login checks if the user is logged in, and displays a link to a second page\n  - The second page also checks if the user is logged in, and displays a link to the first page\nHere's a link to the live app on our site: http://test.nimblehost.com/slim15/\nusername: admin\npassword: test\nYou can download the source for this simple app here: http://test.nimblehost.com/simpleLogin-Slim1.5.zip\nAt this point, barring some really stupid mistake on my part, this appears to be a Slim issue. I've gone through Slim's source to try and pinpoint where the problem might be, but haven't found anything so far.\n. That does indeed work, both in my app, and in the simple login app on our test server. Thanks!\nOn a side note, is this something I should be doing in my own code (best practice?) or will it be incorporated into Slim?\n. Roger that. Thanks again!\n. ",
    "agush22": "Hahahaha best title ever\n. ",
    "amenadiel": "So, how about echoing \n<?php \n<p><a href=\"https://github.com/codeguy/Slim-Extras\" target=\"_blank\">Browse 'custom Views'</a></p>\n?>\nif you close a PHP tag to output an HTML block, how would you echo '<?php' ? The parser would go back to PHP mode and throw a fatal error due to invalid syntax. Heredocs let you echo whatever you want, including php tags.\n. You're right. My mistake. I'll close this request and pull another one with the right formatting,\n. Im using a lot of custom hooks as mini plugins, Some of them are not called/invoked on the regular workflow, therefore all they get is an empty slim instance. My first workaround was to always create a new Slim instance before invoking a plugin hook, but it seemed like a waste of footprint in those cases when a Slim instance was already in memory, My solution covers both situations.\nRegarding changes on htaccess, let's say you are on a shared host and each customer has a vhost in the form of:\n<Virtualhost>\n    DocumentRoot /home/user1/htdocs\n    ServerName user1.server.com\n</Virtualhost>\nCalling a Slim route from that vhost is completely straightforward because htaccess knows where is beign called from.\nBut, for shared hosts, your site might be running fon a VirtualDocumentRoot environment.  This allows for Apache to serve an unlimited number of virtual hosts and subdomains, without any specific vhost entry and without restarting the webserver to add more vhosts. Any user will have its own subdomain as they have an htdocs in their home folder.\n<Virtualhost>\n     VirtualDocumentRoot /home/%0/htdocs\n      ServerName thetimebilling.com\n      ServerAlias *.server.com\n<Virtualhost>\nIf, let's say, user2 (http://user2.server.com/) has his Slim RESTful API on a subfolder called api (http://user2.server.com/api/) and he makes the example route books\n$app->get('/books/:id', function ($id) {\n//Show book identified by $id\n});\nthe regular .htaccess doesn't really know where are you calling it from, so it will make the webserver try and get a file from the global document root:\n/var/www/html/books\nWhich will throw a 404. They usually say you can get around this by adding\nRewriteBase /\nTo .htaccess, but in that case, you'll be pointing to\n/home/user2/htdocs/books\nWhich also is a 404. The manual solution is to add\nRewriteBase /api/\nBut this will only work if you are on a folder whose name is api.  If you want slim to run in whatever folder avoiding manually changing the RewriteBase parameter, this mod does it for you, as in htaccess you are able to know where you are regarding your document root (even if it's virtual or just a mod_alias) so it can dinamically prepend it  to slim's index   thus getting the relative index.php you see from tour document root.\n```\nsets the rewrite relative to your document root\nRewriteBase /\nstrips the last part of the URI (which we assume is the route name)\nRewriteCond %{REQUEST_URI} (.+)/(\\w+)$\nRewriteCond %{REQUEST_FILENAME} !-f\nprepends the first part of the URI (the subfolders) to the Slim script you're running\nRewriteRule ^    %1/index.php [QSA,L]\n```\nIf you are to deploy 10 instances then is small potatoes, but I have 2000 app custombers and 12 Slim routes in each wich broke when I used  VirtualDocumentRoot.\n. It's true, but I believe that's just a minor documentation omission. I didn't need to resort to google to find out how to do it, for it was somewhere in the former documentation. However, this is my current config\n```\n    location / {\n       try_files $uri $uri/ /index.php?$request_uri;\n    }\nlocation ~ ^/interfaces/([A-Za-z0-9\\-\\_]*)/(.*)$ {\n      try_files $uri $uri/ /interfaces/$1.php?$request_uri;\n }\n\n```\nThe second block is just my way to handle different methods to different interfaces on a particular subfolder, while preserving the default behaviour in the root.\n. :+1: to @tuupola , I really like Slim's current approach over Silex's, but I see no problem if there's an extension to use a custom controller as router, same as there are extensions to use Monolog or Twig for their respective use cases.\n. I don't think you should use PHP superglobals for this. Perhaps you can try getting the value with\nphp\n$name = $app->request()->put('name');\n. If you commit on top of an existing pull request the travis test will be ran again. \nIt seems that Guzzle requires PHP 5.4+, so Slim whould have to amend its travis.yml to reflect the same. (or add some kind of shenanigans to use a former Guzzle version for 5.3 environments).\nThe 5.4 and 5.5 builds failed due to a 403 error in pimple's repo. Should have been just a lapsus.\n. Slim before dispatch should expose any request variable you need to sanitize\n$app->hook('slim.before.dispatch', function () use ($app) {\n    // something with $app->request()\n});\n. Is it mandatory for you to use urlFor? Managing routes manually is doable for a small number of routes \nIf it is, you could write a custom middleWare to to translate subdirectory routes to proxied routes. In the simplest scenario it's just an str_replace.\n. Since the % was unquoted, it was interpreted as a module operator, and the right parameter was eval'd as a real. Something like that.\nHowever, even if this was an unexpected behavior (which is not) it's still not a Slim issue, but an ORM issue. BTW, which ORM is that? Eloquent? I can tell it isn't doctrine :horse: \n. Just to be on the safe side, I suggest skipping symlinks as well\nRewriteCond %{REQUEST_FILENAME} !-l\n. I agree with @ircmaxell. We wouldn't be discussing any of this if SessionCookie middleware used json_decode to retrieve the key/value pairs of the encrypted cookie.\nThe cookie is encrypted to avoid someone tampering with its values, but it isn't meant to hold anything besides your logged status and user_id. \nSending this hash on each request, and having the server unencrypt it to know who you are is just as secure as sending an OAuth token to an API backend. \nSure, you can tamper with an OAuth token just as easily as you can tamper with a cookie. Hell, you might send whatever token you want and if you succeed in forging a token that amounts for another person you can impersonate them. Because that's how it works, actually.\n. > I still see a problem here. Encryption is not authentication. Since the session state is in the hands \n\nof the client, they get unlimited tries. It takes an average of 128 tries (worst case: 256) per byte\nto break CBC | and forge the contents. Encrypt-Then-MAC or doom.\n\n@sarciszewski so basically the problems are\n- Encrypting with a weak algorithm\n- Using unserialize on the decrypted cookie contents\nI agree on those too, but that has no relation whatsoever with the pros or cons of using user provided data (cookies, headers, query string or POST params) to provide a stateful app.\n. But Slim does by no means force you to use SessionCookie middleware. The default implementation uses native session storage.\n. This is the part of the documentation that describes it.\n. @codeguy I believe that there might be a problem when dealing with non-english characters (and storing a person's first or lastname in the session might be fairly common) resulting in null values. A safer solution could be\n$data=$_SESSION;\nif (mb_detect_encoding($data, 'UTF-8', true) !== 'UTF-8') {\n    $data = utf8_encode($data);\n}\n$value = json_encode($data);\n. I'm not aware of the inner defects of utf8_encode, but your comment sure makes me want to dig deeper on that.\nHowever, replacing serialize with json_encode in the master branch might result in current users of Slim 2.5.x seeing their cookie persisted session returning null. Since json encoding non utf8 values doesn't throw any errors, they will be in a difficult position to debug the unexpected behavior. They might spin in circles before actually trying json_last_error(). \n. However unreliable encoding detection may be, having your session data a bit scrambled is easier to debug than null data.\nI'm really concerned on the consequences of rolling this change as is in the next minor release.\n. I've seen a difference in backend's behavior depending on the request Content-Type header.\nCare to inspect what header are you sending? IIRC sending the Content Type \"application/json\" should allow Slim to access the variables both from $app->request->post() as well as the raw body.\n. IIRC json extension is part of PHP core since PHP 5.3. You don't need to install any additional json libs.\nEdit: it was 5.2.0, my mistake.\n. ",
    "timeglider": "Well, it really pays to read the documentation a little closer:\nIn the top of my template file:\nSlim::response()->header('Content-Type', 'application/json');\n. ",
    "ansdma": "so is this gonna work using jQuery:\n$.ajax({\n    url: '/books/1',\n    type: 'DELETE',\n    success: function(result) {\n    // Do something with the result\n    }\n});\n. Thanks anyway Josh. I'll be using what you suggested till the next improvement come.\nBest\n. ",
    "sanrodari": "+1 to add content negotiation, thanks @njh for the fork.\n. ",
    "marleyiam": "Hi! Does anybody could show me an example about how to set and use Content Negotiation using SlimMiddleware ? Cheers!\n. Hi! Does anybody could show me an example about how to set and use Content Negotiation using SlimExtras+ ? Cheers!\n. Hi! Does anybody could show me an example about how to set and use Content Negotiation using SlimExtras2+ ? Cheers!\n. ",
    "micha": "+1 here, as well. If you want to sketch out what needs to be done to add OPTIONS support, I'd be happy to make it happen.\n. Ah, okay. Thanks, keep up the good work!\n. ",
    "alexturpin": "I also think this would be a better behaviour than the 404\n. ",
    "aaronjameslang": "This appears to be broken again. Slim is returning 404 when the URL matches but not the method, it should return 405.\n. 2.4.3, according to composer.lock . Thanks\n4906b77a07c7bd6ff1a99aea903e940a2d4fa106\n. Is there any information on why it was removed? Or a workaround?\n. ",
    "markalanevans": "Hey, \nI'm not sure if this is fixed, but how would cnames affect this? We are using the SessionCookie middleware and if we do a redirect in another custom middleware, the session on redirect is lost. but if we switch to native sessions everything works fine.\n. ",
    "manuelh": "We are also using a SessionCookie middleware and are experiencing the same issue with our Cookie Session being lost on a redirect.\n. ",
    "tabaktoni": "Hi i have same problem with last Slim version downloaded from website, and session_write_close(); not working :(.\nI think i know what it is, i save in session multy array, and if it is too big or something, session is lost\n. This is like cut->paste on osx. You can do all \"mabo jambo\" , do entire circus around inside and outside but it does not support simple function like multipart/form-data with PUT.\nThere are no explanation or discussion for that. You can run but you can't walk slow because it is inefficient. \n. ",
    "oytuntez": "This issue is still valid for ~v2.6.\n. ",
    "maboiteaspam": "Hi,\nsorry i did not read the code carefully enough !!! \nI simply need to call for $res->body(null) to get the body content.\nAnd yes, direct accessors is what i was looking for.\nThanks for all,\nand sorry for unnecessary issue.\nbye\n. hi,\nwich view class are you talking about ?\nwich version ?\nBecause in 1.3.5, code looks fine :\nphp\npublic function setData() {\n        $args = func_get_args();\n        if ( count($args) === 1 && is_array($args[0]) ) {\n            $this->data = $args[0];\n        } else if ( count($args) === 2 ) {\n            $this->data[(string)$args[0]] = $args[1];\n        } else {\n            throw new InvalidArgumentException('Cannot set View data with provided arguments. Usage: `View::setData( $key, $value );` or `View::setData([ key => value, ... ]);`');\n        }\n    }\nbye\n. > > If you need to use custom logic that checks for existing routes, I can definitely improve the Router/Route interface to accommodate that.\nyes, i think you resumed well my needs. Thanks !\nbye\n. ",
    "lucianbld": "In php.ini i have:\nsession.use_cookies = 0\nsession.use_only_cookies = 1\nsession.auto_start = 0\nI receive the following message when i set \n$app = new Slim(array(\n 'session.handler' => null\n));\nFatal error: Uncaught exception 'ErrorException' with message 'session_start(): open(/var/lib/php/session/sess_38af698c85cd8e2c1e0f5f95810e9679, O_RDWR) failed: Permission denied (13)' in /usr/share/nginx/v1/Slim/Slim.php:211\nStack trace:\n)' in /usr/share/nginx/v1/Slim/Slim.php:211\nStack trace:\n0 [internal function]: Slim->handleErrors(2, 'session_start()...', '/usr/share/ngin...', 211, Array)\n1 /usr/share/nginx/v1/Slim/Slim.php(211): session_start()\n2 /usr/share/nginx/v1/index.php(7): Slim->__construct(Array)\n3 {main}\nthrown in /usr/share/nginx/v1/Slim/Slim.php on line 211\nFatal error: Exception thrown without a stack frame in Unknown on line 0\n. i moved my session path to /tmp from /var/lib/php/session . Thanks alot\n. Seconds ago i tried with curl the same HEAD call to server:\ncurl -v -X HEAD -H \"Content-Type:application/json\" -H \"Accept-Encoding: gzip,deflate\"  api.domain.com/\nthe curl call remain blocked at\n< Allow: GET,PUT\n< Content-Length: 23\nand after i wait a few seconds i received:\n- transfer closed with 23 bytes remaining to read\n- Closing connection #0\n  curl: (18) transfer closed with 23 bytes remaining to read\nThe content lenght is different from first post because i use another message.\nThis is the error message from nginx logs:\n2011/07/30 03:21:20 [error] 3874#0: *76 FastCGI sent in stderr: \"PHP Fatal error:  Uncaught exception 'Slim_Exception_Stop' in /usr/share/nginx/html/Slim/Slim.php:780\nStack trace:\n0 /usr/share/nginx/html/Slim/Slim.php(802): Slim->stop()\n1 /usr/share/nginx/html/index.php(22): Slim->halt(403, 'Unspecified method ... ')\n2 {main}\nthrown in /usr/share/nginx/html/Slim/Slim.php on line 780\" while reading response header from upstream, client: xx.xx.xx.xx, server: api.domain.com request: \"HEAD /v1/ HTTP/1.1\", upstream: \"fastcgi://127.0.0.1:9000\", host: \"api.domain.com\"\ncurl -v -X SEARCH -H \"Content-Type:application/json\" -H \"Accept-Encoding: gzip,deflate\"  api.domain.com/\nSlim Application Errorbody{margin:0;padding:30px;font:12px/1.5 Helvetica,Arial,Verdana,sans-serif;}h1{margin:0;font-size:48px;font-weight:normal;line-height:48px;}strong{display:inline-block;width:65px;}Slim Application ErrorThe application could not run because of the following error:Details:Message: Undefined index: SEARCHFile: /usr/share/nginx/html/Slim/Router.phpLine: 116Stack Trace:#0 /usr/share/nginx/html/Slim/Router.php(116): Slim::handleErrors(8, 'Undefined index...', '/usr/share/ngin...', 116, Array)\n1 /usr/share/nginx/html/Slim/Slim.php(1013): Slim_Router->getMatchedRoutes()\n2 /usr/share/nginx/html/v1/index.php(80): Slim->run()\n\nConnection #0 to host api.domain.com left intact\nClosing connection #0\n  #3 {main}\n. Everything works great with hooks. Thanks alot\n. Thanks alot\nHave a nice day \n. I'm using slim framework for my clients, and the biggest problem so far is the integrity of  JSON object content received by the server through POST,PULL.\n Just as DTD is used to validate the content of XML, I thought that JSON should do the same, because the JSON phenomenon has gained momentum in the web services community, and I think we need some kind of validation. Web services are consume by the most diverse users and besides these there are people who try to harm the service provider, and this validation would be a little wall built in front of them.\n\nNot just web services would benefit from validation but the entire community that uses JSON.\nIn connection with the slim framework implementation of JSON schema, i think it's important in the future to consider this request. Not for me, but for the entire slim framework community.\nSo far you did a great job with the slim and I wish you all the best. \nI'm sorry for my english, but is not my primary language.\nAll the best.\n. ",
    "kennethsam": "TwigView\nVersion 1.5.0\nKen\nOn Aug 2, 2011, at 3:48, maboiteaspam reply@reply.github.com wrote:\n\nhi,\nwich view class are you talking about ?\nwich version ?\nBecause in 1.3.5, code looks fine :\nphp\npublic function setData() {\n       $args = func_get_args();\n       if ( count($args) === 1 && is_array($args[0]) ) {\n           $this->data = $args[0];\n       } else if ( count($args) === 2 ) {\n           $this->data[(string)$args[0]] = $args[1];\n       } else {\n           throw new InvalidArgumentException('Cannot set View data with provided arguments. Usage: `View::setData( $key, $value );` or `View::setData([ key => value, ... ]);`');\n       }\n   }\nbye\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codeguy/Slim/issues/156#issuecomment-1707178\n. \n",
    "zeroecco": "Sweet!  Thanks!\n-Rich, Support Engineer, PHP Fog\n. ",
    "ghost": "Ok, but also test RequestTest::testStripSlashesIfMagicQuotes should run ok when magic_quotes_gpc is off. I wrote workaround, but I don't know that it's correct:\n\ndiff --git a/tests/Http/RequestTest.php b/tests/Http/RequestTest.php\nindex 1a1970d..467375a 100644\n--- a/tests/Http/RequestTest.php\n+++ b/tests/Http/RequestTest.php\n@@ -150,7 +150,10 @@ class RequestTest extends PHPUnit_Framework_TestCase {\n     public function testStripSlashesIfMagicQuotes() {\n         $_GET['foo1'] = \"bar\\'d\";\n         $getData = Slim_Http_Request::stripSlashesIfMagicQuotes($_GET);\n-        $this->assertEquals(\"bar'd\", $getData['foo1']);\n+       if(get_magic_quotes_gpc())\n+               $this->assertEquals(\"bar'd\", $getData['foo1']);\n+       else\n+               $this->assertEquals(\"bar\\'d\", $getData['foo1']);\n     }\n\n     /* TEST REQUEST METHODS */\n\n. Sorry, I put sleep function (to test delay between create $hourFromNow and create $c2) in previous commit in wrong place and I too fast used wrong test function (I don't know PHPUnit well, yet). You can est this fix by putting sleep function between create two variables $hourFromNow and $c2, sometimes there times were different in your code.\n. Sounds great., thanks.\n. I agree I should have read the entire readme. But hello world is intended for complete newcomers to the framework, and it's given before the necessary setup details, which doesn't make sense.\n. Updated following your instruction, the new commit seems to be noted in this pull request above.\nI hope there's not bad feelings :) Thanks for all the work.\n. Awesome, glad I could help!\n. Alternatively, you could urlencode() it twice.  Not very pretty, but it works too.\n. Please just go ahead to fix this without my pull request. Sorry for that.\n. assuming that flash messages are stored in \nphp\n$_SESSION['slim.flash']\n(from documentation) you can try to save and array like \nphp\n$app->flash('error',array(\n'Invalid login'\n,'You dont have access to X'\n,'..'\n));\n. @codeguy here is my slim app bootstrap: https://github.com/towry/Slim-app-bootstrap/blob/master/public/web.config\nthe version is latest, the web server is IIS.\n. @codeguy ok, fixed it. it's the rewrite problem, the properly rewrite rule should be:\n<rewrite>\n        <rules>\n            <rule name=\"Slim Rewrite URLs\" enabled=\"true\" stopProcessing=\"true\">\n                <match url=\"^(.*)$\" ignoreCase=\"true\" />\n                <conditions logicalGrouping=\"MatchAll\">\n                    <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n                </conditions>\n                <action type=\"Rewrite\" url=\"index.php\" appendQueryString=\"true\" />\n            </rule>\n        </rules>\n    </rewrite>\n. I agree with you @lrlopez \nTalking in this way I prefer to add this feature to \\Slim\\Route. I don't want to force all the routes with a single/global configuration.\nCould it be somethig similar to the last commit?\nThe next easy (I think) step is to implement all this on Slim\\Slim so it can be applied using\n$app->get('...')\n. Getting too many mails on this topics ... why discussing so much on this topic and not do the Slim behaviour analysis first and say something useful.\nWhat you need to do is extend Route.php ... there you have access to all arguments ... add a function for example called setValidation(arrayRules) ... this way you have arguments and rules access for specific route.\nThen there is function called __invoke(ServerRequestInterface $request, ResponseInterface $response) .... in this function on the beginning initialize your validation library or whatever and if validation passes you let this function continue work else you return your own custom validation response .... \n. Hmmm ... Route -> Function ... container is available inside the function so it is passed inside also. How come this is not bad design ?\n$app->get('/foo', function ($req, $res, $args) {\n    $container = $this->getContainer();\n    $myService = $container->get('myService');\nreturn $res;\n});\nAnother issue is that CallableResolver is defined as Final class and can not be overwritten ... already tryed ;)\n. I understand why is final no issues there ... but why allow passing container into functions of the route but not the class-es ? explanation why is bad design ?\nTy for:\n$container['callableResolver'] = function ($c) {\n    return new MyOwnCallableResolver($c);\n}\n;) did not know can do that ... can i use the same for \"Route\" to extend some chain functions ... for example route validation also which container i wish to pass into specified routes (depands which application what needs) ?\nTy already extended personal knowledge ;)\n. @akrabat Ty for the information. Above information already allows me to do some custom things which are needed, but do not want to  change slim core files within Slim ... normally overwrite or extend.\nDiscussion are always needed in any project, more minds know more ...\n@silentworks I understand, it is very hard to make an framework to satisfy everyone's needs, that's\nwhy i like Slim ;) its Slim and i put needed things myself. You can not fully support object references for refactoring in IDE ... new [$class, $function] does not help ;) . My plan is to extend \"Route\" with chain function that i can specify which container i wish to pass into the specific route (Api, Web, Soap have different needs) and then CallableResolver change that i have access to specified container so i can do MVC/HMVC structure and perform this inside Controller classes $this->view = $container->get('view'), database, logs,  .... \nTy and great work on Slim!\n. /galleries/2 matches a gallery\n/galleries/:2 matches home instead of 404\n. I have updated slim from 3.0.0 to 3.2.0 and everything works as expected. Now I get a 404.\n. Yes. In version 3.2.0 it is fixed. Thanks for conversation :)\n. > Because modern PHP development is done via Composer in the same way that modern Front End development is done with Bundler.\nThis would be your personal opinion, not a fact :/. Is this something that should be moved to a middleware?. For reference, the changes are here.\nThere are 2 failing tests due to this change, both attempting to modify the settings.. Of course, to fix the test I mentioned:\n```php\n    /*\n     * Test settings can be edited\n     /\n    public function testSettingsCanBeEdited()\n    {\n        $this->assertSame('1.1', $this->container->get('settings')['slim']['http_version']);\n    $settings = $this->container->get('settings');\n\n    $slim = $settings['slim'];\n    $slim['http_version'] = '1.2';\n    $settings['slim'] = $slim;\n\n    $this->assertSame('1.2', $this->container->get('settings')['slim']['http_version']);\n}\n\n```\nBut this goes against the simple approach requested by the test, I suppose.. @geggleto this doesn't deal with the crux of the issue though.\n\nIndirect modification of overloaded element of Slim\\Collection has no effect\n\nYou can't modify nested values. This is something we need to fix, not make people code around.\nI hope with the invent of Slim4, we find a better way of handling this.. If it's been sidestepped in 4, no problem.. Okidoke. I didn't realise there was one.. Whichever way is chosen we must be mindful to name things properly:\n\nLIFO = Stack\nFIFO = Queue. Hello! Thanks for the PR. We need a test reproducing the error as you have witnessed it and then we can assess whether the fix is right.\n\nThe only issue I see with the proposed fix is what would happen if the query params had a key that was the same as the body params? Merging would of course merge, but replace would favour body over query.\nWe would have to decide what was the expected and favoured outcome.. I just realised I'm commenting with the wrong account. Will switch to @designermonkey next time ;). Thanks @yolcuiskender.. I agree.. ",
    "soggie": "It doesn't work so far in my shared server. Take a look at http://can-i.com.my/demo. Two things:\nFirstly, Slim::request()->getRootUri(); gives me http://can-i.com.my/demo/index.php, which means my css and js files would not be loaded (click view source). If I remove the index.php, static files load just fine.\nSecondly, there's a route at http://can-i.com.my/demo/admin, which works locally (I'm running MAMP) on Apache, but doesn't in my server (IIS 6.0). You can take a look at the phpinfo() page at http://can-i.com.my/demo/test.php.\n. I don't mind adding in index.php to my routes. That's the least of my problems. Adding a getResourceUri() on the other hand, as a companion to getRootUri(), would be nice if we have assets served from a different location (CDN maybe?) or folder.\n. I am the stupid. There already is getResourceUri. Closing this issue now.\n. ",
    "markstickley": "Thanks, I think it is too. It's been suggested elsewhere that it may be a permissions issue but I haven't had a chance to investigate yet. \n. I've found the problem, in case anyone else has it too:\nThe tests exist in a VirtualBox shared folder and I'm trying to run the tests from within my Ubuntu VM. Apparently this doesn't work; moving the directory to a non-shared folder allows them to run just fine...\n. ",
    "paulyg": "Yes, it worked.\n. From within a route callback.\nI started working on a pull request to make the the outermost, exception handling middleware pluggable, with '''Slim\\Middleware\\PrettyExceptions''' the default implementation. Actually what I need to do is write tests for it.\n. Sounds like a good plan.\n. ",
    "acelot": "I'm from Russia, excuse me for my English :)\n. Oh, thanks, @mnlg! :laughing:\n. ",
    "mnlg": "@willium did you try replacing your route with something like this?\n'/foo/:one(/:two)/'\nJust moving the slashes makes it work for me. In fact this is how it is done in the documentation.\nBy the way, @codeguy do you have any idea on how to refactor the the Route to make it better?\n. @AlexandraK you could organize your routes code in different files and use the slim.before hook to include the needed one depending on the requested uri.\nSomething like this:\n$app->hook('slim.before', function() use ($app) {\n    if(preg_match('/^\\/admin/', $app->request()->getResourceUri())) {\n        include 'AdminRoutes.php';\n    }\n    else {\n        include 'RegularRoutes.php';\n    }\n});\nHowever, as @oipn4e2 pointed out you still have to go through all loaded routes.\n. This is fixed in branch 1.6.0. Slim won't automatically start the session.\n. @codeguy, the commit 603d7a5 contains all the modifications needed to allow wildcards in route patterns.\n. Cool, thank you.\nOn 24 June 2012 22:34, Josh Lockhart\nreply@reply.github.com\nwrote:\n\nI made several tweaks... I changed your preg_match to strpos... it's more naive, but I feel it does what is needed with much less overhead. I also avoided an array lookup by using an already established variable.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codeguy/Slim/pull/265#issuecomment-6536149\n. I guess we could get rid of $_SERVER['PATH_INFO'] and rely on $_SERVER['REQUEST_URI'] instead. What do you think?\n. This is supposed to be a pull request for the release-1.6.5 branch.\n. This commit only moves the dispatcher method from the Slim_Route to the Slim_Router.\n\nHowever, with this change I don't think the route needs to know about the router at all and it could be completely removed from Slim_Route.\nI'll create a new pull request with that modifications too for evaluation purposes.\n. I don't think this is a bug in Slim, the problem here could be caused by the %2F character which apache will automatically translate to /. You can avoid that behavior with the AllowEncodedSlashes directive:\nhttp://httpd.apache.org/docs/2.2/mod/core.html#allowencodedslashes\nUsing AllowEncodedSlashes NoDecode made your example work for me. Please give it a try and confirm this.\nAnyway, if for whatever cause you can't change that directive in your server I'll suggest passing the url as a query parameter.\n```\n// uri\nhttp://example.com/person?uri=https%3A%2F%2Fmy-profile.eu%2Fpeople%2Fdeiu%2Fcard%23me\n// then in the Slim app\n$uri = $app->request()->get('uri');\n```\nNot as pretty but it would work too.\n. Righ, I didn't see that one.\n. I'll post a pull request.\n. I just created a pull requested to experiment with this idea.\n. Thanks a lot for this feature, It was one of the only pieces I was missing in Slim.\nI was wondering if it would make sense to use \\Slim\\Helper\\Set as a container instead of having a new class, I made  a pull request in case you want to give it a try. #535\n. Ready, it should merge without conflicts now.\n. This is what I get when I run the tests:\n```\nPHPUnit 3.6.12 by Sebastian Bergmann.\nConfiguration read from /Volumes/WebDevelopment/Sites/Slim/phpunit.xml.dist\n...............................................................  63 / 341 ( 18%)\n............................................................... 126 / 341 ( 36%)\n..........................................................PHP Warning:  Invalid callback self::handleErrors, cannot access self:: when no class scope is active in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  SimpleXMLElement::__construct(): Entity: line 1: parser error : Opening and ending tag mismatch: author line 1 and book in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  Invalid callback self::handleErrors, cannot access self:: when no class scope is active in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  SimpleXMLElement::__construct(): 1Clive Cussler in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  Invalid callback self::handleErrors, cannot access self:: when no class scope is active in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  SimpleXMLElement::__construct():                                                    ^ in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  Invalid callback self::handleErrors, cannot access self:: when no class scope is active in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  SimpleXMLElement::__construct(): Entity: line 1: parser error : expected '>' in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  Invalid callback self::handleErrors, cannot access self:: when no class scope is active in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  SimpleXMLElement::__construct(): 1Clive Cussler in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  Invalid callback self::handleErrors, cannot access self:: when no class scope is active in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  SimpleXMLElement::__construct():                                                          ^ in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  Invalid callback self::handleErrors, cannot access self:: when no class scope is active in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  SimpleXMLElement::__construct(): Entity: line 1: parser error : Premature end of data in tag books line 1 in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  Invalid callback self::handleErrors, cannot access self:: when no class scope is active in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  SimpleXMLElement::__construct(): 1Clive Cussler in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  Invalid callback self::handleErrors, cannot access self:: when no class scope is active in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\nPHP Warning:  SimpleXMLElement::__construct():                                                            ^ in /Volumes/WebDevelopment/Sites/Slim/Slim/Middleware/ContentTypes.php on line 140\n..... 189 / 341 ( 55%)\n............................................................... 252 / 341 ( 73%)\n............................................................... 315 / 341 ( 92%)\n..........................\nTime: 0 seconds, Memory: 16.50Mb\nOK (341 tests, 636 assertions)\n```\nAnd the php version:\nphp -v\n PHP 5.3.13 with Suhosin-Patch (cli) (built: Jun 20 2012 17:05:20) \n Copyright (c) 1997-2012 The PHP Group\n Zend Engine v2.3.0, Copyright (c) 1998-2012 Zend Technologies\n. I added the settings and middleware to the ArrayAccess too. Some of the code in the Slim class could certainly be removed now.\n. That was my feeling too, the last two commits would over-complicate the code. How would you go to make the settings and middleware accessible via ArrayAccess?\n. I'm closing this one in favor of #433. It takes it from commit  7e5ed46 so ArrayAccess is only implemented in the Slim class.\n. If you consider removing the Slim::pass method you can simplify it even more. See #432.\n. You'r right, I'll close this one. Thanks.\n. I'm not that fan of the pass method and I wouldn't miss it a bit. In fact, most of the time it can be avoided by just declaring the routes in the appropriate order and making use of the route conditions.\nI haven't checked all your blog code and I'm probably missing something, but it seems like you could get rid of it and just throw a notFound instead. The '/:year/:month/:day/:slug' route is the only one you declared with four parameters so $app->pass() won't return any new route at all.\nIn case you had more routes with four parameters you could still avoid the $app->pass() method doing something like this:\n```\n// urls with same structure declared before the generic one\n$app->get('/2012/7/7/foo-bar', function() {\n    echo 'foo bar';\n});\n// generic url\n$app->get('/:year/:month/:day/:slug', function ($year, $month, $day, $slug) use ($app, $posts) {\n   $post = $posts->findBySlug($slug);\nif ($post == null) {\n      //$app->pass();\n      $app->notFound();\n   }\n$app->render('post.php', array('post' => $post, 'next' => $posts->next($post), 'prev' => $posts->prev($post)));\n})\n->name('post')\n->conditions(array('year' => '(19|20)\\d\\d'))\n->conditions(array('month' => '(\\d|\\d\\d)'))\n->conditions(array('day' => '(\\d|\\d\\d)'));\n// this could also be declared before the generic structure, but if you want to declare it here \n// you can use the route conditions in the generic one.\n$app->get('/a/b/c/d', function() {\n    echo 'abcd';\n});\n```\nAlso, instead of augmenting the pass() method to pass to a specific route you can just dispatch it, which is already supported.\n$app->router()->getNamedRoute('world')->dispatch()\n. I see your point and I understand you have different coding preferences but, in my opinion, if the resource is not found using the notFound() method is more descriptive than using pass(). Plus, relying on the order of the routes and route conditions is quite powerful too and can do the job in most cases if not all.\nThe route dispatching thing is already implemented in the current Slim version and you can use it, though you have to dispatch it through the Router instead, but of course if the route needs parameters you will have to set them up first.\n$route = $app->router()->getNamedRoute('coolroute');\n$route->setParams(array('foo'=>'bar'));\n$route->dispatch();\nI guess you would need to do something like that even with an augmented pass() method as not all matched routes may take the same number of parameters and someone has to decide which params get in an which doesn't.\n. I'm closing this in favour of #436.\n. I'm closing this in favour of #436.\n. Most of the modifications rely on DI feature which doesn't exist on the develop branch, cookies and http cache are moved to their own classes because I can then inject them to the DI.\nIf the general diffs are too large see the individual commits instead, here's the one for the cookies d2b4d26\n. Updated to make it work with the current develop branch.\n. I'm closing this one as the tests in the develop branch changed and this is no longer relevant.\n. You might want to ask this in the Slim's support forums instead:\nhttp://help.slimframework.com\nThe support team is doing a great job there.\n. I think this would be something good to have in Slim but it doesn't pass the tests.\n. This is a good idea and something like it could be used to distribute Slim plugins like a blog engine or a user management system.\nSilex does this in an interesting way that might be worth exploring too:\nhttp://silex.sensiolabs.org/doc/organizing_controllers.html\n. It would be great to have Blade templating support in Slim but in my opinion this should go in Slim-Extras, just like we do with Twig, Smarty and all the others. \n. You can also get the route params from within the notFound() method with something like this:\n$app->notFound(function () use ($app) {\n    var_dump($app->router->getCurrentRoute()->getParams());\n});\nThis way at least you don't need to change the Slim.php file. Anyway, you may want to ask this one in the in the help forums instead.\n. This seems to work fine on both branches now, master and develop. Could you confirm it? maybe we can close this issue already.\n. Added a second commit as Travis wasn't passing.\n. What the redirect() method does is set the Location header, and what you describe seems to be the expected behaviour.\nDoing a redirect('/page') will redirect to http://example.com/page. If you want to redirect to your application folder you have to do something like redirect('/application/page') instead.\n. The Helper/Set class has already been removed in the development branch, Slim will extend Pimple instead, which seems much more convenient.\n. This doesn't seem to be directly related to the Slim framework, why don't you try asking at http://help.slimframework.com instead? just make sure to provide enough details so others can understand your issue and help you find a solution.\n. There's already an any method, but it seems it wasn't added to the documentation yet.\nYou can check the code instead:\nhttps://github.com/codeguy/Slim/blob/master/Slim/Slim.php#L563\n. You can access the $app object in the middleware using $this->app, from there you can also access the app config and the environment. These may be a better places to store your user data as the Request object is supposed to represent the HTTP request.\nYou can check the ContentType or ContentNegotiation middleware to see how they handle this, or ask in the help forum http://help.slimframework.com for a different implementation.\n. The environment seems to be used when creating the LogWriter object only:\nnew \\Slim\\LogWriter($c['environment']['slim.errors']);\nYou could pass your own LogWriter object to Slim instead, and instantiate it without the environment object, something like this:\n$app = new \\Slim\\Slim(array(\n    'log.writer' => new \\Slim\\LogWriter(@fopen('php://stderr', 'w'))\n));\nAnyway, you may want to ask this one on the support forums as it's not an issue with the framework.\n. Slim is a request response framework, so having all that notices when running from the command line is the expected behaviour. Maybe using something like Symfony console would work better in this case.\n. You can use $app if you make it available in your callable, something like this would do the trick:\nphp`\n$app->notFound(function() use ($app) { ... }\nHowever, setting the body won't work in this case as notFound method calls the halt method, which resets the body to whatever is echoed in the callable. So instead of setting the body directly in the response you should just echo it.\nphp\necho $myBody\nThis doesn't seem to be an issue with the framework anyway, so you may want to post this in the help forums to get better advice.\n. I can confirm this is a bug and we should fix it. However, I'm not sure using EXTR_SKIP is the best approach here.\nIf I set a templatePathname variable I would expect to be able to use it in my views, instead of getting some internal value that I don't need to know about. The same goes for the $data variable, which can also be overwritten.\nMaybe we could just unset this variables before using extract, that way we would avoid conflicts. What do you think?\n. In my opinion the $data variable should also be unset, otherwise it'd be always set in the view. Doing something like isset($data) in the view would always be true.\nRegarding $this I'm not sure there's an easy way to unset it without complicating the view too much. Anyway, we could take advantage of it. We could extend the view to add new functions and do something like $this->urlFor()' or$this->escape()from within the template, so it may be good to leave it there.\n. AsubRequestmethod has been added in the 3.0 version. For the 2.x branch you can try asking in the [help forum](http://help.slimframework.com) instead, maybe someone can give advice on how to handle this.\n. This was fixed in PR #879. I didn't change the doctype though.\n. I'm with @silentworks too, I don't think this should go into Slim. I'd rather use a third party library when needed.\n. Ispass()` really that useful? I've never used it myself and I 'd rather not have it in Slim at all.\nI guess most projects could do fine without pass(), and removing it would simplify the code and give us that speed boost by default. I know some of you guys use this feature but I'm wondering if we could get rid of it.\n. :+1: I like this too.\n. @geggleto thanks for sharing the benchmarks.\nSlim's loc went from 13400 in version 2.6.2 to 121292 in version 3.0, but it turns out most of that loc increase is due to the require-dev packages.\nInstall the dependencies with the --no-dev flag and 3.0 is only 12651 loc which is amazing. That simplicity is what I appreciate the most of Slim, kudos to everyone making this framework possible.\n. @akrabat I wasn't sure what branch to target, the CONTRIBUTING.md file doesn't seem to be up to date..  I can't think of any case where having this as a setting could be useful. Anyway, this PR isn't intended to add a new feature but to avoid code duplication.. ",
    "maikg": "Also added support for 423 status codes.\n\n11.3.  423 Locked\nThe 423 (Locked) status code means the source or destination resource\n   of a method is locked.  This response SHOULD contain an appropriate\n   precondition or postcondition code, such as 'lock-token-submitted' or\n   'no-conflicting-lock'.\n. According to PHP's documentation this syntax is already reserved for calling static methods on a class (PHP 5.2.3 and up).\n\nphp\n// Type 4: Static class method call (As of PHP 5.2.3)\ncall_user_func('MyClass::myCallbackMethod');\nThis change will therefore break existing Slim applications. Maybe use something like ClassName#methodName?\n. ",
    "semencov": "Yes, I've considered this possibility, but still hope there will be native support for wildcards, as it could be greate to use it more flexible than simple '*'.\n. ",
    "DrBenton": "Hmmm... PHP developers are used to the :: syntax, it may be better to keep it ?\nI can a new PR with a check of the static nature of the called method ; this way, users would be able to use static methods or instance methods, with the same syntax.\n. What if we use \"#\" as a separator between a class name and its instance method name ? (i.e. myClass#myMethod)\nThis is not \"PHP standard\", but we are used to this notation (in documentations, for exemple), and it can be intuitive.\nWhat's your opinion about it ? :-)\n. Great !\nYes, the syntax is a little bit simpler than array(new Foo(), 'instanceMethod') ; but more of all, it allows some lazy-loading (the Foo instance will be created only when we need it)\n. Great !\nAs I'm working with the stable version (1.5), and didn't have a look to the upcoming 1.6, I hadn't seen this. This is just perfect, I will switch to 1.6 when it's ready, thank you very much !\n. Hello Josh !\nStill no will to create such a feature in Slim ? It may be useful only to a small handful of developers, as you said, but I still think it's a simple feature which doesn't break anything in current Slim features. Maybe with another syntax, clearly documented ? Like the Laravel's `Route::get('welcome', 'home@index');``, for instance ?\nI love Slim, but having only static Controllers is a pain... :-/\n. ",
    "CBeerta": "It's what i did. But doesn't that render setData() pretty redundant?\n. ",
    "nansenat16": "CentOS6 x64 PHP 5.3.2 Apache/2.2.15 (no mod_rewrite support)\n. Sorry, I sure the problem in cookie, not in redirect function\nwhen I have a cookie in request like is:\nPHPSESSID=dbbea4b04ea22f92196d36045a836acb; dbbea4b04ea22f92196d36045a836acb=DEFAULT%7C0%7CZmxhc2h8YTowOnt9%7Cb161b6580e43cc79d18932d556d4651fb6de53ce\nrequest page full code:\n<?php\nrequire 'Slim/Slim.php';\n$slim_settings = array(\n    'mode'               => 'production',\n    'debug'              => true, \n    'log.enable'         => false,\n    'cookies.encrypt'    => false,\n    'cookies.secret_key' => 'PLEASE CHANGE THIS',\n);\n$app = new Slim($slim_settings);\n?>\n. I duplicate it\n1. Browser have 2 cookie\n   PHPSESSID=f4a9b5b4d37cbff1634116ede87805cd; f4a9b5b4d37cbff1634116ede87805cd=DEFAULT%7C0%7CZmxhc2h8YTowOnt9%7Cb161b6580e43cc79d18932d556d4651fb6de53ce\n2. The page use redirect like this:\n``` php\n<?php\nrequire 'Slim/Slim.php';\n$slim_settings = array(\n    'mode'               => 'development',\n    'debug'              => true,\n    'log.enable'         => false,\n    'cookies.encrypt'    => false,\n    'cookies.secret_key' => 'PLEASE CHANGE THIS',\n);\n$app = new Slim($slim_settings);\n$app->get('/', function() use ($app) {\n    $app->redirect('home');\n});\n$app->run();\n?>\n```\n1. if browser no cache, get the error\n[Fri Dec 02 23:33:30 2011] [error] [client 192.168.31.151] PHP Fatal error:  spl_autoload(): Class Slim_Http_Cookie could not be loaded in /var/www/html/myapp/Slim/Http/CookieJar.php on line 285, referer: http://192.168.31.99/myapp/\n. when use PHP 5.3.6 or higher it's no error msg.\n. The load error , upgrade PHP will be fix it\nhttps://github.com/codeguy/Slim/issues/188\n. ",
    "rcrowe": "Not sure if this is the same cause that you are seeing, but your example code suggests that you have omitted:\nphp\n$app->run();\nIf I comment this line out in my code I see the error:\nphp\nFatal error: spl_autoload() [<a href='function.spl-autoload'>function.spl-autoload</a>]: Class Slim_Http_Cookie could not be loaded in /Applications/MAMP/htdocs/builder/vendor/Slim/Http/CookieJar.php on line 285\n. ",
    "DevDavido": "I get this error too if I add inside a action e.g. \nvar_dump(123);die;\n. ",
    "snez": "I get this too on php 5.3.2, however if I run the same application on two different servers, both running php 5.3.2, one of them is failing and the other doesn't, so not entirely sure what is causing this.\n. Found it, I had a $param = $_GET['param'] somewhere while the get param was not set, wierd how this throws a slim error and not a php error.\n. ",
    "klaussilveira": "I'm on 3.6.2. \n. ",
    "maxmert": "Thank you for your response!\nI don't use any frameworks like PHPFog.\nI use PHP 5.3.3-7+squeeze3 with Suhosin-Patch, Zend Engine v2.3.0, mcrypt 2.6.8-1. Are there any other dependences for good work? I made all permissions to 777 just in case.\nThanks again!\n. ",
    "raphael-riel": "Looking at the end result, function view() seems to have duplicates...\n//[...]\n$this->assignPathsToView();\n//[...]\n$this->view->setTemplatesDirectory($this->config('templates.path'));\nThese two does the same...\nAlso, paths are no longer set on render(). This makes me think that if template path changes between view-assign and render, it won't be taken in account.\n. Seems like I messed with my branches... \nAs for point B, I prefer to configure once and only once the app; so not updating on render makes sense for me.\nThanks!\n. ",
    "dannykopping": "Hhmm - yeah, that's a solution although there are other mitigating factors.\nFor one, if I just echo a response inside the error handler, Slim won't respect any other custom headers I want to send back... Here's an example:\n``` php\n$app->error(function(Exception $e)\n{\n    $app = Slim::getInstance();\n$app->contentType(\"application/json\");\n$app->response()->header(\"Access-Control-Allow-Origin\", \"*\");\n\necho json_encode(array(\n                      \"error\" => array(\n                          \"message\" => $e->getMessage(),\n                          \"code\"    => $e->getCode()\n                      )\n                 ));\n\n});\n```\nEven if this is a solution, I think this is a small blight on the otherwise perfect complexion of Slim. If you do it this way, you are now forced to send 500 codes when an exception occurs, and - at least for me - this won't work. I'm writing a meta-framework that will handle a number of different exceptions which will in turn halt the execution with different HTTP codes. For example, if a request body cannot be deserialized, I fire the InvalidRequestFormatException which should send back a 400 Bad Request header.\n. I've pushed up an experimental branch to a fork of the repository to illustrate how the previous halt functionality could be restored:\nhttps://github.com/dannykopping/Slim/commit/3b9ac1b21e1f37c6c1aec21507604254334ba6b5\nThere is a problem with this, however; the code will only work with one Slim application (i.e. the default application) by calling Slim::getInstance() as there is no way that I could find to get a reference to the top-level application from the PrettyExceptions class. The issue is compounded by the fact that this PrettyExceptions class is a middleware class, so changing its functionality may affect middleware as a whole.\n. Note that this method also respects any custom contentType or headers assigned to the Response object.\nAn example response:\n``` http\nHTTP/1.1 403 Forbidden\nDate: Mon, 26 Dec 2011 20:04:34 GMT\nServer: Apache/2.2.14 (Unix) DAV/2 mod_ssl/2.2.14 OpenSSL/0.9.8l PHP/5.3.1 mod_perl/2.0.4 Perl/v5.10.1\nX-Powered-By: PHP/5.3.1\ncontent-length: 45\naccess-control-allow-origin: *\nContent-Type: application/json\n{\"error\":{\"message\":\"something...\",\"code\":0}}\n```\ngenerated by:\nphp\n$app->halt(403, json_encode(array(\n                                 \"error\" => array(\n                                     \"message\" => $e->getMessage(),\n                                     \"code\" => $e->getCode()\n                                 )\n                            )));\n. Yeah, that seems like a good idea - I'll test it out once the Slim::call function is updated\nThanks @codeguy \n. Excellent - the changes have restored the original functionality\nThanks @codeguy :)\n. Excellent - I'll test it out tomorrow\n. Looks good to me! Thanks mate\n. Sorry, didn't RTFM well enough I guess.\nHow would one implement a custom error handler when debugging is turned on?\n. Sorry, it's just the dba624552e8f100c165c6efbe2671861f6d6543c commit I wanted to submit for a Pull Request\n. Cool, I've issued a new pull request - sorry for not RTFMing\n. Seems like the build is failing due to something else other than what I'm committing...\nMaybe when I rebased I erroneously resolved a conflict?\n. Yup\n. ",
    "guumus": "OMG. i just realized it now.\nAnyway, Since now i'm using Slim Framework. \nAnd I have a bunch of String names stored in array But when I tried to echo 'em all, I only obtained a partial of the content. Is this related to Slim Buffer or something else?\n.\n. ",
    "aaronpk": "Any plans to re-implement streaming? I just found myself in need of it when doing some image processing in the framework.\n. ",
    "smcphill": "I know this is an old (and closed) issue, but given we're now at v2.3, is there any chance of an update on streaming?\n. ",
    "kelesi": "I know this is an old thread. I am stuck on php 5.3 and cannot move to Slim 3.x for at least couple of months (old RHEL server), but I need streaming to output a big csv file without getting out of memory errors. Which commit for 2.6 does include this functionality? Thanks.. ",
    "kavatari": "\nI know this is an old thread. I am stuck on php 5.3 and cannot move to Slim 3.x for at least couple of months (old RHEL server), but I need streaming to output a big csv file without getting out of memory errors. Which commit for 2.6 does include this functionality? Thanks.\n\nTry to search in the repository. Take a look at this commit: https://github.com/slimphp/Slim/commit/4e0dbb0fcfc576f447ebc51ea4cff5894f0171ed. ",
    "blendsoft": "ok, thanks for answer.\n. ",
    "designermonkey": "This needs reflecting in the Environment class, as it only looks for REMOTE_ADDR and not X-Forwarded-For.\n. It would be ok in both I think, unless the Request class just looked it up from the Environment class, would you agree it would be ok to set the environments REMOTE_ADDR to whatever matches, and add a switch of X-Forawrded = true or something like that? as the environment is Slim specific, and not entirely related to the SERVER variables?\n. Middleware was on my mind as I read this 10 minutes ago too. Not used content negotiation before, looking forward to playing around!\n. I'd just like to point out that Laravel does the same and fails without mcrypt installed, even though for some projects, you may not be using encryption. This has caused me massive headaches on a server that I can't get mcrypt installed on (don't ask, it's irritating), and so I would agree that this is a bad move.\n. That's a really good use case too, I never thought of that one.\n. Thanks for the reply, I will use controllers for now, and where I need to get the response, I'll call them directly.\n. Is it a requirement to have an overridden function in the parent class then? I'm still learning.\n. Awesome, thanks Josh\n. The above allows a user to specify a controller.namespace in their config, and then build classes to contain controllers and methods for routes.\n. @codeguy could you have a think about this? I could prep a PR for this asap for version 3 if you're on board.\n. I have a controllers branch on my fork for your consideration. Simplified this from the functions above. Credit where credit is due, this idea was from SlimController, as mentioned above, but that was work by @fortrabbit.\nThis is a much simpler implementation that I think will benefit Slim's core.\n. Closing in favour of the PR #639.\n. Personally, I would have thought that interoperability with other components, at least from the perspective of easily using something like Monolog in place of the default, would be a preferable situation to be in. I wouldn't put any questions like \"Slim's log should be useable by other frameworks\" in place here. It seems more a question of making it easy to let developers add other components to Slim and not vice versa.\n. Does using (array)$this->data resolve it? If so, then this has been logged and I think dealt with for the next point release.\n. Would this go some way to helping #549 to work?\n. Ah, ok.\n. Ahh, ok. Thanks for answering all my questions Josh :D\n. I would do a PR for you in preparation, but I don't know jack about doing tests yet.\n. I'm glad this would be for the next major release, as I am pretty snowed under right now to do it.\nI have some ideas though, so will definitely do this. Let me know when you're not far off the next release and I'll pull my finger out :)\n. @codeguy I was just having a look at this, and spotted this:\nphp\n$this->middleware = array($this);\nIf we were to make Slim an extension of the Set container, would this make a circular reference and throw an error? I'm not sure myself until I actually do it.\n. I've made the changes required, but for some reason, I can't get any of the tests to run.\nI'm a complete TDD noob, and it's complaining that the Helper\\Set class doesn't exist. As I don't know what to do, I'll PR this work and let you tell me where I've gone wrong if that's ok @codeguy?\n. To me this boils down to specificity. As me is shorter than message, it should come after message in the list.\n. > Do you want to say the mismatch is acceptable and should be handled by every single dev rearranging the route definitions?\nWhen one defines routes that use regex patterns, specificity comes in to play. It does in every app I've used that has routes. Longer possible matches need to come before shorter ones. It's just the way it works.\nI'm not saying your fix isn't valid, it surely is, to catch when it's not done right, but it's one of the things I learned, that's all.\n. Here's the first reference I could find as to what I meant.\nhttp://laravel.io/topic/30/routes-first-in-first-out\n. What I mean when I talk about regex, is not whether you as a developer use a regex pattern when creating your route, it's how the router matches the string you've added, as it uses regex matching in it's processing of a route.\nhttps://github.com/codeguy/Slim/blob/master/Slim/Route.php#L352\n. I would also like to see something similar to this. It would make finding values a lot more flexible.\n. Not too difficult IMO, as Laravel has already tackled this with the namespaced config approach.\nIf you wanted to outline what your ideal approach to a separate Configuration class were, I could look at this. I have already got a partial working extended framework from Slim that has a Configuration class.\n. OK, no probs. I will leave the methods on the Slim class for deprecation though, and just reference them out of the DI container.\n. Nearly done here :)\n. The way I've implemented the Configuration is to have a parent class with default methods, so it can be re-used elsewhere if required, and the Configuration class extends this.\nI was going to put the parent in the Helper namespace, but this is now gone :(\nAs it's merely a helper class, where should it go now?\n. No probs.\nJosh Lockhart wrote:\n\nToss it in the top-level folder with the other classes for now.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/codeguy/Slim/issues/607#issuecomment-24695168.\n. But your query parameters will already be available in the Request object, no?\n. Good reasons! :D\n. I've branched from develop and I can't see a keep method in Set.\n. Cheers.\n. This will teach me to code at 1am. The get method already exists on the Slim class, and therefore throws an error.\n. To get a working PR and maintain the http method functions, the method names in the container need to change, as get clashes with the http method function get.\n. Other than that, I think it's good to go... But I need to test it.\n. I am in the process of learning how to use testing, so sorry for the lack of actual tests. I have tested this manually, and can't find any issues, but like most people, I am known to miss things.\n. Just realised that $this->settings inside the container should really be $this->config. I'll edit tonight.\n. Closed in favour of https://github.com/codeguy/Slim/pull/691 which is much simpler.\n. Happy to help here.\n. This is all done now :D\n. Every framework I've encountered has a base controller to extend from.\n. Sorry, short comment there, had to rush off to look after the kids bedtime...\n\nWhy would you consider it bad design? Do you have examples?\nThe reason for the base controller is to ensure that things like the core app instance are loaded without having to declare that in every new controller.\nI do like the idea of having a reference to an IoC instance included, but that would also mean defining every controller in the container first before the app runs proper, which is a lot of overkill IMO.\nI will have a look at the Silex implementation of this to see exactly what you reference.\n. Interfaces are being discussed and worked on.\n\nit should be optional to extend from the base controller.\n\nIt is, you don't have to use it as it is.\n. Right then.\nAs technically this isn't actually really about controllers, I've removed any reference to them in the code. This is really about being able to pass a route trough a class and method as well as any other callable.\nThere at present is no way to use classes and methods, only functions, and this fixes that.\n. To be honest, I would also prefer not to apply it that way, the problem for me is the entire configuration would run by constructor, and then have to be customised afterward. It seems like a little too much overhead for me.\nNeed to think about this then...\n. I just get a bit over zealous on efficiency, and it would mean that the app would be configured fully, then parts replaced afterward.\nAnyhoo, I've reverted some of the work to remove that aspect, and fixed the merge conflicts. There's still lots to do for the tests.\n. @codeguy I've merged the current develop branch into this one on my repo, hence all the extra commits as feature-interfaces is behind.\n. A few issues have arisen rebasing develop into this, so I'm re-applying the interfaces manually to a fresh branch.\n. Yeah, can do, I'll PR to develop\n. There is already a PR for controller like functionality.\nI'm closing it out in favour of this one.\n. When I see classes and methods documented, I see it as \\Namespace\\Classname::methodName, to me this how one would write it as a string, so seems most fitting in this case.\n. This isn't about static vs non static methods, if you all look at the code clearly, it always creates an instance of the object before instantiation anyway, so there are no static methods in use here.\nAs a prime example of what I was talking about, here: http://us2.php.net/method_exists#65405 is an example of how many people write comments or docs pointing to any method on a class, and that's why in my PR and I suspect this one, there is the use of ::.\nI'm not trying to be difficult, I just want to make sure the decision is made for the correct reason, on the right information.\n. Did a load of fixes for AppTest as implementing ArrayAccess throughout App broke many many tests.\n. I wouldn't have thought so, but I didn't want to start deleting things willy-nilly.\n. This is something I was going to raise also, I'm working on the Pimple/Collection structure at the moment, and was going to suggest moving Pimple out of Slim, and as you say, just requiring it via composer\n. We had a good old chat in the working group about this exact topic, and the choice was to include Pimple. I didn't take it as literally as @codeguy meant, by physically including it in the project...\n@lalop I can see your point actually, we shall wait to hear what @codeguy's thoughts are on it.\n. Balls. No unit test. Must sleep, will do it tomorrow.\n. I have begun work on a 'part 2' for this, to extend the functionality out to have a ConfigurationHandler loaded into the Configuration class.\nThis will allow scenarios like loading config values from a file for example.\nThis can be pulled in for now, as 'part 2' is built on top of this, and it will follow a very similar setup.\n. There's one test that fails: testDerivedClassCanOverrideStaticFunction, but I'm not sure if it's even needed anymore?\n. In version 3, there will be lots of interfaces available which will allow different aspects of the framework to be replaced after initialisation, so the following could be an example\n```\n$app = new \\Slim\\Slim();\n$app['request'] = $app->share(function ($app) {\n        return new MyCLIRequestClass();\n});\n$app['response'] = $app->share(function ($app) {\n        return new MyCLIResponseClass();\n});\n$app->run();\n```\nEach class would be required to follow the relevant interface to ensure that the application can use it correctly.\nThe intention for these interfaces is to allow more control, and your use case is a great example of this.\n. I suppose it all depends on the use case. The plan is to be able to make as many parts of the app swappable as can be without compromising the functionality of the app itself.\nI must say, I've not done any CLI work with PHP, so would be interested to hear any ideas you have on how it could work.\n. It has to be kept in mind that Slim is a request -> response routing framework more than anything.\n. As an example, I am building an app that uses XML, so I will create an XMLConfigurationHandler in my app's namespace. As I will also want nested keys in my app, I will just extend the ConfigurationHandler class, and add my XML support. Then all I will do is swap out the classes, like so.\n``` php\n$app = new \\Slim\\App();\n$app['settings'] = $app->share(function ($app) {\n    $config = new \\Slim\\Configuration(new \\MyApp\\XMLConfigurationHandler);\n$config->callHandlerMethod('xmlFileLoadMethod', '/some/file/path/to/config.xml'); // Loads from a file\n\nreturn $config;\n\n});\n```\n. Certainly can.\nIt's 1 hour before 'Santa' arrives here, so I will get back on this after the kids are in bed tomorrow night.\nHappy Christmas!\n. Didn't see any conflicts there, I merged directly with the remote develop branch and everything went in OK.\n. I will rebase this again before a pull, as there are too many commits here.\n. I knew I'd missed things ;) Thanks, I'll add that now.\n. It makes sense that as Slim still fully supports 5.3.x, the interface should be fully part of Slim. I'll do that.\n. > Last question for the moment \u2013 all of this is being done against Slim 3.5. Should we port this stuff to the 4.0 codebase?\nDid you mean 2.5 and 3.0? We are doing this work for a breaking release of 3.0, which is shaping up to be mega awesome.\nThe Request and Response classes are where I lost my way a bit. Last I looked was a very tired me at 1am, so I closed the laptop and slept. There may be bits missing, so looking here and checking if all methods required by the App class are present makes sense.\n\nMy thoughts on the Collection class...\n\nThese are actually my thoughts too, but I didn't want to just overload Slim with interfaces. I am happy to make more, as there are many classes in the setup that extend the Collection.\nI will also stick an Environment interface in there as well, even though it will be empty for now. A question has arisen about CLI use of Slim, and yes, making interfaces for every class would help if we start making changes along those lines too.\n@csdco thanks for your time so far looking through this, all help is appreciated.\n. Plans have suddenly changed this evening as I opened up Sublime to work on this. I will crack on tomorrow now.\n. That's correct, yep. All intermediary work, @codeguy is doing in release branches.\nJohn Porter.\n\nOn 17 Dec 2013, at 18:07, Charlie Schliesser notifications@github.com wrote:\nSorry, I meant 2.3.5 and 2.4.0. Not enough coffee apparently.\nI was just comparing a local pull of 2.4.0 where I have class Slim (Slim/Slim.php) instead of App (Slim/App.php), it no longer extends \\Pimple, etc. But after browsing through the commit history on the master branch, I'm a bit confused because your branch shows 2.3.5 but has App.php, my pull of 2.4.0 has Slim.php, but browsing the repo's latest commits shows it's currently App.php.\nI'm thinking this is all because the latest work is being done on the develop branch which hasn't changed any version tags since 2.3.5 \u2013 is that correct or am I missing something else?\n\u2014\nReply to this email directly or view it on GitHub.\n. Noted, I can add that too.\n. I've given you collaborator access so you can push to my repository. Feel free to make any additions and changes, I can always alter anything if need be.\n. I don't know about the Abstract idea, what does @codeguy think?\n. I wanted to refactor the Collection to extend Pimple itself and adjust the behaviour slightly. I had a chat with @codeguy about it. I'm too tired right now to figure if that would have an impact on what we're doing here or not.\n. I've had a good old think about this one, and I think I've come up with a clean solution (I think being the operative statement there).\n\nFor class interfaces where the class extends another, the interface should extend the the inherited one\n```\nclass Headers extends Collection\n{\n}\ninterface HeadersInterface extends CollectionInterface\n{\n}\n```\nFor classes implementing multiple interfaces, like Collection, then we should do something like the following\ninterface CollectionInterface extends IteratorAggregate\n{\n    // Include defined methods from the Countable interface\n}\nWhat do you think?\nI want to have Collection extend Pimple as well, and in doing so, I will make a PimpleInterface doing similar.\n. Again, I very much doubt this is going to merge cleanly. I've rebased the develop branch into this one today, and it caused a real mess. I'm in progress cleaning it up, and also re-thinking some of the interfaces...\nAn example is the Request interface. We have only listed public methods that are required by the App class, but I think it should have public methods that we would expect the implementing class to be able to handle. IMO, it's better to say \"Slim expects a class to be able to do the following.\", rather than \"This is the bare minimum that Slim requires to function.\".\n. I've gone through and made my personal judgement on that.\n\ndo you think the interface should require the ->is{Method}() methods?\n\nYes, and I've also added the ->{Method} functions as well, like post and get.\nWhen it comes to the others, I've only added a few that, personally, I would deem required for an HTTP framework. Some of them are just accessors for the headers object, and so aren't so needed, but others are IMO.\nI'm nearly ready to push again, so take a look later on.\n. Ok. All done as far as I can see.\n@codeguy I've just test merged this using squash-commits also (as there are way too many for a normal history), and everything was ok with the world.\n@csdco, if you want to add anything, please take a look through and let me know.\nAlso, I've gone with the idea of extending interfaces, but we still need to have a think about the multiple implementing classes, as just adding the interface methods is not quite right. It will ensure the methods are present, but I don't know if there's some PHP magic to how interfaces like ArrayAccess, IteratorAggregate and Countable work, as these are the only three we may see issues with.\nIf anyone else reading this thread has ideas, please feel free to let us know.\n. I haven't read anywhere that interfaces can extend multiple others. Classes certainly can't do that.\nAlso, interfaces can't extend classes, so Collection could never extend Pimple. I will ask @fabpot whether he would provide a PimpleInterface and see what the answer is.\nWe could certainly add the protected property to Collection to ensure it is set, but Collection does extend Pimple, so I saw this as pointless.\n. > Apparently interfaces can extend multiple interfaces\nWell, I never spotted that! Damn! (goes to do some more work).\n\nso in the event that someone uses the CollectionInterface without Pimple they've got an object that begins throwing lots of errors because $this->values isn't set.\n\nHow so? the interface doesn't reference $this->values anywhere, it's the class that does, and the class would be replaced when someone uses the interface.\n. @codeguy, I think this is ready to pull :D\n. This gives me a nice warm feeling inside :)\n. Just to note this will affect how the interfaces branch works, so if you decide you like this, and it is to be pulled, it should go in first.\n. I've not edited those methods, as I can see they are simple helpers, just the Cookies and Headers classes, and how these are used within Request and Response. Should have been clearer there :)\n. You're as bad as me. It's xmas and we're working on code.\nHope you have a great xmas though man!\n. When do you see this error? Is it when you run the bundled index.php file?\n. Aha! Have you run composer update, as the Pimple class is now loaded by composer instead of being included in the project.\n. The reason the error is happening (at least the only way I can re-create it) is that Pimple isn't being auto-loaded or found, and therefore not giving access to it's values property.\nCan we see your index.php file, and how you've auto-loaded the files?\n. I don't think there's anything I can do to help here, sorry.\n. I notice there's no test for sub-requests yet. I would give it a go, but I'm not entirely sure how it is intended to work yet.\n. Something's gone weird with this branch, as some work is duplicated. Going to use a fresh branch and re-submit.\n. no probs :D\n. God, the one time I don't bloody check them too.\n. Looking at: http://en.wikipedia.org/wiki/List_of_HTTP_header_fields\nmaybe we should also check for Front-End-Https\n. Is this because Sessions don't work on command line?\n. When it comes to a simple fix like that, I would just add it to your branch. I'm sure @codeguy will pull it shortly anyway.\nI hadn't noticed it failing myself, not sure why.\nI rebase too, but how it is supposed to be done in this project would be up to Josh.\n. Is this because Sessions don't work on command line?\n. Yep :)\n. I definitely like this. +1 from me.\n. I will have to rebase develop into this branch to pass tests :(\n. This will need requesting on the develop branch. Things (especially structure) may have changed somewhat on that branch too, as it's under heavy development.\n. Any errors? Suggestions on fixing it?\n. I've just done some testing based on the basic info in that thread, and the autoloader is working fine as far as I can see.\nThe code you showed won't work, as was discussed, but the following works fine:\n``` php\n<?php\ninclude('vendor/pimple/pimple/lib/Pimple.php');\ninclude('Slim/Autoloader.php');\n\\Slim\\Autoloader::register();\n$app = new \\Slim\\App();\n$app->get('/', function () {\n    echo 'works!';\n});\n$app->run();\n```\nEdit: Sorry, forgot to say, this code is in place of the index file in the Slim package (for path relativity).\n. I've got around it by rebuilding the constructor.\n. @zergin You should add this PR to the composer.json file in the develop branch.\n. Check out the develop branch where we've altered the way that Slim works with a container.\n. I think Josh added a sub request method to Slim for the soon to be released version 3, let me have a look...\n. Aha!\nhere it is: https://github.com/codeguy/Slim/blob/develop/Slim/App.php#L1128 in the develop branch.\nIs this the sort of thing you want? If so, then it's been tackled, if not, maybe we could work towards a common goal.\n. I went through all this to some degree before, and got argued with.\nhttps://github.com/codeguy/Slim/pull/639\nIMO, if you are allowing the ability to pass a route through a 'Controller' style class and method, then of course that class needs to receive the main app, otherwise it can't get access to the container, or any of the other functions.\n. Slim Extras is being deprecated when we release v3.\nAlso, I just realised that this has been tackled to some degree in v3 (the develop branch). The Route class' setCallable now accepts a string representation of a Class:method...\n``` php\n    /*\n     * Set route callable\n     * @param  mixed                     $callable\n     * @throws \\InvalidArgumentException If argument is not callable\n     * @api\n     /\n    public function setCallable($callable)\n    {\n        $matches = array();\n        if (is_string($callable) && preg_match('!^([^\\:]+)\\:([[:alnum:]]+)$!', $callable, $matches)) {\n            $callable = array(new $matches[1], $matches[2]);\n        }\n    if (!is_callable($callable)) {\n        throw new \\InvalidArgumentException('Route callable must be callable');\n    }\n\n    $this->callable = $callable;\n}\n\n```\nAlso, parameters are passed on to the callable by using the setParams method of a Route. One could therefore write a Route as follows:\nphp\n$app->get('/hello/:name', 'Class:method')->setParams(array(\n    $app,\n    $someVariable\n));\nWhile this is not ideal as each method would receive the $app instance, it is a way of doing it.\n. setConstructorParams I really like that idea. I'll get a PR together for that!\n. A PR is in for @ciaranmaher's repository as there is already work affecting this area of the Route class. It makes sense to merge the two together before merging into the main repository. @codeguy has said that the work by @ciaranmaher will be pulled for the next point release. Lets hope this gets the go-ahead!\n. It allows you to add parameters to pass to the constructor of any class you use for the route.\nphp\n$app->get('/hello/:first/:second', '\\Hello:sayHello')->setConstructorParams(\n    array($app, $someParam)\n);\nphp\nclass Hello\n{\n    public function __construct($app, $someParam) {}\n}\nIt will only try to pass along parameters if they have been set using the setConstructorParams method.\n. How about doing it with the Configuration object?\n``` php\n$app['settings']['route.foo'] = array(\n    $app, $foo, $bar\n);\n$app['settings']['route.bar'] = array(\n    $foo, $app, $bar\n);\n$app->get('/', '\\App\\Home:index')->setConstructorParams('route.foo');\n$app->get('/bar', '\\App\\Home:barRoute')->setConstructorParams('route.bar');\n$app->get('/baz', '\\App\\Home:bazRoute')->setConstructorParams(array(\n    $bar, $foo, $app\n));\n$app->get('/foobar', '\\App\\Home:fooBarRoute');\n```\nWe could have the setConstructorParams method identify a string and look up from the config object.\nThe Route object would need the current $app passing into it's constructor, but I don't see this as too big a problem personally.\nAfter all, we have the Configuration object available for storing things, so why not use it?\n. Expanding on the above, it wouldn't call the settings object until getCallable is called, so as to not store the array of params in more than one location.\n. I wouldn't expect to support matrix parameters out of the core, as it was just a personal opinion idea of Tim Berners Lee, a very long time ago. It hasn't been adopted on a wide enough scale to gather momentum as a standard, so I reckon IMO, the only way to have it is as described above.\nBear in mind that (according to the link posted) URLs in forms using GET as a method will convert them to query parameters anyway, so a consistent interface across all verbs wouldn't be possible either.\n. > You may find some issues though, mainly because Collection is extending Pimple\nIt was decided to have that happen as  Collection had many of the same ArrayAccess and other methods that Pimple handled in one little package. It was to thin out the duplicate code.\n. @silentworks I'll have a peek later at your branch, as that is how the Pimple container works. Something must be wrong somewhere else.\n. I made a PR on this branch for you @silentworks \n. Why does there need to be another class to achieve all this?\n. Any help required, give me a shout.\n. In the upcoming version 3, we have a ConfigurationHandler class that allows for nested arrays to be accessed using . separated keys.\nMaybe we could utilise this in the Router class for access too.\n. I just pulled all the latest commits, and yes, unit tests are all green here too, which is why I logged it.\nWith regard to the closures front, yes. ;)\nI've broken out the default constructor to build each part of the app slightly differently as I needed to call the configuration from a file based system instead of arrays.The closures are all written in the same format that Pimple states, so I really don't know what is going on...\nI've pushed the app to https://github.com/manneken-digital/beagle if you want to take a look, as I'm completely stumped on this one.\n. I may have jumped the gun on this a little... Need to fix some errors I thought I'd dealt with first.\n. It seems that as one of the closures in the chain had an error, which instead of being output, it was contained in the closure and had the knock on effect of Pimple outputting it as a raw function.\n. No you can't which is why we opted for adding it.\nWhen PHP 5.3 support is dropped, so will the interface be.\n. This happens to me a lot. I didn't even know that existed o_O\n. Can you please open this on the documentation repository?\nhttps://github.com/codeguy/Slim-Documentation\nThanks.\n. Try setting the RewriteBase directive in your .htaccess.\nRewriteEngine On\nRewriteBase /application\n...\n. What is the $_SERVER superglobal saying that the DOCUMENT_ROOT is?\n. Ah, well, that depends on where Slim is installed, and what the document root is.\nIf the docroot is localhost then yes, it is working fine, but if it's localhost/application then there is an issue.\n. So @mnlg was correct as your document root is not the root of your project.\n. Hey, it's no problem.\nCould you close this then? Thanks.\n. Will do.\n. Sorry, still getting used to remembering about tests.\n. $_SERVER is not deprecated, $_HTTP_SERVER_VARS is, and has been for a while, but $_SERVER is still perfectly valid to use.\n. +1 from me on how to solve the dependencies for controller based routing. It's not too complicated, and even though it defines a restriction for developers to some degree, it is one that works efficiently.\n. Yeah resolver seems rine to me, as that's what it's doing.\n. @akrabat I took the concept from here and embellished it into one class here http://github.com/usebeagle/callable-resolver\nPlease feel free to pull it apart as it was based on this code, and it won't be used as it is there.\n. I agree. A callable should be passed through, something like\nphp\n$app->get('/', $app->resolve('MyClass:method'));\n. What @mnlg probably means, is that it is more likely regarding a specific implementation of slim, rather than the framework itself.\n. Function and callback handling is currently moving more towards allowing anonymous functions, and a string to define a class:method callable.\nWould this not be better over restricting it to a certain interface, as it's currently not interface restricted?\n. I'm no nginx expert, but I have one client server running it, and even though the framework running isn't Slim on that one, maybe this could be helpful\n# Match any route and process it\n    location / {\n        # First attempt to serve request as file, then as directory, then fall back to index.html\n        try_files $uri $uri/ /index.php?$query_string;\n        # Uncomment to enable naxsi on this location\n        # include /etc/nginx/naxsi.rules\n    }\n. Glad to help.\n. :+1: \n. Slim\\Http\\Headers parses the entire $_SERVER global.\n. I don't know I'm afraid. Been out of the loop best part of a year :(\nGoing to close it until I can test development for you again at a (hopefully not too) later date.\n. Can this issue be closed? A repository exists for a Slim implementation of sessions, although no work has been done for a while.\nI would assume Slim is not offering session handling as there are plenty of available libraries out there.\n. :)\n. MiddlewareAware was just updated to seed the stack on the first add operation.\n. Nothing like starting small to get back into it :D\n. I'm no good with pseudo code.\nThis is me playing with the idea, and here's a lovely picture.\n\nLeft is how I see Slim at the mo, and right is the crazy that I'm talking.\n. > Is this not already possible?\nWell, yes in a way, it is already possible, but it isn't middleware at the moment, and the example just shows parsers. What I was meaning was every aspect of the application, Configuration, Router, Sessions, Cookies, etc.\nCurrently it's all tightly wrapped in the App class. I know we discussed it before @codeguy and you told me that it's a write once framework where it could be overridden afterwards by a developer.\nI do really think though that every part of Slim can be middleware, and a bootstrap file would replace the constructor that does all the work in App.php. That way a developer can either use the Slim bootstrap file, or make their own.\nI know it's just another angle to the same end, but if middleware is the route that apps are going down, it would be awesome to be a full middleware stack.\n. I've been working with the ADR pattern lately, and the validation happens as part of the process. The pattern is quite abstract and examples in the wild take a request object and return an array, which is entirely up to the developer to implement.\nMy take on that is to return an instance of the request that contains all the filtered input. You can then have access to the original request, and a filtered version.\n. What I meant was to provide the initial request to a middleware\nphp\n$container['requestFilter'] = function ($c) {\n    return new RequestFilter($c['request']);\n};\nthen a filtered request object can be used at any time, while the initial one is still available. This is the benefit of having the immutable nature of the request.\nphp\n$initialRequest = $container['request'];\n$filteredRequest = $container['requestFilter']->getFiltered();\n. Yeah, the two approaches are whitelist and blacklist... Blacklist on input, like XSS, then whitelist on insertion into a DB, so an input filter is like @geggleto says, it encompases all of a request and should be standard to all input sources.\n. I was just about to suggest that.\nThe middleware would getParsedBody, do it's processing, then set it withParsedBody into a filtered request object being made available.\n. @geggleto can you elaborate on what the problem with using the parsed body is?\nYou're right, the raw body is readable only once, and is read into a StreamInterface object, but I don't see the issue of doing XSS filtering and the like on a pre-parsed dataset.\n. In my codeigniter days, we just filtered on the $_POST array, which is no different in theory to what I'm proposing here. We have the initial Request object, fully parsed, and then we want to create a filtered version for use in the app. We would still have the initial version to compare against in case we want to notify anyone that the input was changed or similar.\n. The reason I did it was that it is a gateway to allowing config to be easily read from a file. All that would be needed is to replace the ConfigurationHandler appropriately.\nI've gone further into this concept here: https://github.com/usebeagle/configuration and so would still be looking to patch over the default with something like this without any pain.\nIMO, just dropping back to an array may make it difficult to replace with a custom version, so a class that can have a handler is still needed; Whether that be a service provider of sorts or something core.\n\nPersonally I do like to Config object and use it for much more than the 6 Slim options ;)\n\nA very valid point. No application is just the options Slim provides.\nEither way, I'm happy as long as it can be used like this easily. (I don't have a clue what to do for a service provider).\n. :+1: \n. PS, if you want to use any of the Beagle stuff (github.com/usebeagle) please feel free, it's not going anywhere as is.\n. When we put the initial interfaces together we only added what we decided was must have functionality to make Slim work. Granted that was a year ago, and opinions can change.  A route and router would work fine without a name, and is an advantage of using the in-built router and route classes.\n. I was always a little uncomfortable with how routes and groups were done, so I wrote something to play with that made a new class of RouteGroup alongside Route.\nI'll dig out the code and try to marge it back in to Slim3 (it was a while ago, and many things have changed).\nWhat the code did was made routes and groups essentially the same thing (so things like middleware were handled exactly the same way), but one could have children. It followed the same principal for dispatching, but that part has to be updated due to the PSR-7 work in Slim since I wrote it.\n. Sorry guys, responsibilities have taken over again.\n. Yeah, by all means. This component is never going to get used, so feel free to pull it apart. It was based on Slim anyway.\nhttps://github.com/usebeagle/routes\n. I can see where you're coming from, but no, it isn't. Dispatcher can only return three possible values, which match the three constants referenced in the if statements.\nIt probably would be better to refactor this to always return say, NOT_FOUND as the default return.\n. I'll attack this later then.\n. Cheers.\n. I understand the class has been deprecated, what I'm talking about is the namespace, hence the title [v3] Middleware Namespace.\nIt makes for better structural organisation to hold them in a namespace, whether they're in the core package or not.\n. I can look at that @codeguy this evening.\n. Well, to start, it's be the same basic component that was in last year's prep work for Slim3, just modified to be a service provider.\nObviously the code should be housed here, so if you wanted to create a repo for it, I can PR it to that.\n. @codeguy I don't think I could come up with anything other than a poor duplication of this, coupled with a service provider and middleware plug\nhttps://github.com/dflydev/dflydev-fig-cookies\n. Thanks for the pointer @lalop, it's kind of what I mean...\nThe middleware I would want implemented would be a standard type to avoid the attachment to one specific framework, but what I mean is to have more than one queue to make it so that I can ensure a specific outcome after a route has dispatched.\n. No, I mean two stacks that Slim runs. So I add middleware to a stack that I know runs before the router, and I add middleware to a different stack that I know runs after the router. The middleware is all the same format, I am talking about having two distinct stacks that I can add to.\n``` php\n// From the App::run method\n    // Traverse middleware stack\n    try {\n        $response = $this->callMiddlewareStack($request, $response);\n    } catch (SlimException $e) {\n        $response = $e->getResponse();\n    } catch (Exception $e) {\n        $errorHandler = $this->container->get('errorHandler');\n        $response = $errorHandler($request, $response, $e);\n    }\n\n```\nSo the app tries to run the middleware stack, and the router (via App::__invoke middleware) is the last item to run. I am talking about another stack of middleware to run after that first stack:\nphp\n        // Traverse middleware stacks\n        try {\n            $response = $this->callBeforeMiddlewareStack($request, $response);\n            $response = $this->callAfterMiddlewareStack($request, $response);\n        } catch (SlimException $e) {\n            $response = $e->getResponse();\n        } catch (Exception $e) {\n            $errorHandler = $this->container->get('errorHandler');\n            $response = $errorHandler($request, $response, $e);\n        }\n. @codeguy can you explain how then? How do I modify the response after the router has run?\n. ~~Yes, I get that, but as the Slim router is the last middleware to be queued up in the stack, I cannot manipulate the response object after the router has called a route and run it's callable.~~\nAhhhhh, lightbulb moment. I see. Idiot is leaving the discussion now ;P\n. Now, I've been at odds with this approach myself for some time, and I remember discussing it with you before @codeguy, so forgive me for jumping in again here.\nMy preference would be to see the container filled by a bootstrap.php file which can be included in a project or replaced. There are enough exceptions through the codebase and the included components to show a developer what is missing and a bootstrap file can act as a guide, so it would seem to me that Slim can afford to be a little less opinionated in it's structure.\nContainer is a component of the framework, as is App, and all the other parts. Building contents of a container for an app to function is bootstrapping the app, so logically, it shouldn't happen inside one of the components, it should happen outside. All the container should do is employ the Interop\\Container\\ContainerInterface on top of Pimple\\Container, not define it's own contents.\nEven though Slim is small and powerful, which I love, it saddens me to see how tightly coupled it is with itself, when a few very minor changes can be made to make it so much more flexible.\n. I didn't mean we limit the use of middleware to the interface, only to use it more as a guide. Not a big deal though.\n. So, let me get this right, if I want to define a route for my homepage, I have to use $app->get('', 'FooBar:action'); and not $app->get('/', 'FooBar:action');? That sounds weird for me.\nThough, hasn't the grouping changed now from the initial examples?\n. So, there is a different style for a route group, and a single route? '' vs '/'? That's just weird.\nConsistency is key.\n. > Not sure we can change the example in the initial report.\nDo you mean the initial report in this thread? I can confirm all is fixed as far as I can see...\n. I would think that having a Request object of PSR-7 implementation, and a decorator object, ala new SlimRequest(new Request(...)); is more friendly than a static utility class; they only serve to pollute code and make it tightly coupled.\n. If a middleware developer wanted to couple to Slim's implementation, then let them. It's still PSR under the hood for the end level developer, but they would have the option to use Slim methods also.\n. I still think a decorator pattern is better for this scenario.\n. To get this to work, I have to manually create an instance of every callback class, which goes against the point of making this all accept string references to classes and methods.\nphp\n$app->get('/', new Test);\nor tell it to look for the invoke method:\nphp\n$app->get('/', Test::class . ':__invoke');\nAll this seems a little odd. Could the CallableResolver be updated to allow the use of invokable classes?\n. Pretty embarrassed here, I looked at the code in the repo here and it has been changed since my local copy. Updated and it all works fine.\nSorry chaps.\n. I don't technically want to reopen this, but I still don't understand how Slim verifies that a class is invokable. It seems to me to just assume it is right at the end of the if/else block in the CallableResolver?\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/CallableResolver.php#L76\n. Why am I so blind recently? Thanks.\n. Sorry, shouldn't add a milestone until it's decided on.\n. Looking at it a little more, the invoke method always assumes that the returned callable is a closure irrespective. I can't pass [[$this, 'groupCallback'], [$routable]] for example, to my group as a callable, which the resolver resolves fine, as it isn't called with call_user_func_array which it really should be.\n. Certainly can.\n. Thanks.\n. I can however see one benefit to this method, and that is that I can define my services within the $values array.\nHmmm, I can't decide which I prefer.\n. I'll leave this alone then, as I missed the change. It's fine to have it this way. Thanks for the info!\n. As this is a custom code route mapper, it turns out that it is because the container isn't passed along properly during my mapping process.\nI have to say from reading through all this code, I am pretty shocked at how much the container is passed around outside of class definitions in the initial container setup! The point of a dependency container is to resolve dependencies before your app runs, so code like this\n``` php\n    public function map(array $methods, $pattern, $callable)\n    {\n        if ($callable instanceof Closure) {\n            $callable = $callable->bindTo($this);\n        }\n    $route = $this->container->get('router')->map($methods, $pattern, $callable);\n    if (is_callable([$route, 'setContainer'])) {\n        $route->setContainer($this->container);\n    }\n\n    if (is_callable([$route, 'setOutputBuffering'])) {\n        $route->setOutputBuffering($this->container->get('settings')['outputBuffering']);\n    }\n\n    return $route;\n}\n\n```\ntaken from the App class is pretty bad. The chain here should be that the Router has the container and passes it along to the Route before it returns it from the map method. This code is really complicated because of this requiring the container at a later stage.\nDependencies of the Router (being Route) require a Container, so that by logic becomes a dependency of the Router, as it is a factory for Route; It must already have all the requirements for Route, as Route can't function correctly without them.\n. The OCD in me is making me tidy this up, hopefully won't be long chaps...\n. Personally, I would be all for a factory instance, but I'll keep the footprint of classes the same for now, and just tidy the functionality.\n. Maybe I should come back to this another day then.\n. It's open for discussion anyway :)\n. Hi @silentworks I can see where you're aiming for here, but I must say I think it is still too overly complicated. No offence meant.\nTo me, the complication lies within the Route and Router classes themselves; the fact they both need a container, middleware awareness, callable resolving etc, and the hoops being jumped through to make them work. The aim of Slim 3 was to simplify and decouple the overly complicated dependencies (at least how I understood when we started). Dependencies in groups like a Router and Route are fine, and some obvious ones are too like a container, but I feel like the chain here is too heavy at the bottom.\nRe-reading my comments earlier in the thread, I may have come off a little hot, with no intention, so apologies there. This is way better than it was.\nI really want to delve into this properly, with the eye on the separation of routing as much as possible from Slim, so it could be used without it (I'm not suggesting actual separation from the codebase).\nCan I ask for someone to explain the invocation strategy idea? Why was this needed?\n. Each route is defined in the router separately, so should match.\n``` php\n// $app->group('/recipes', function () {\n//     $this->get('', 'Embark\\Recipes\\RecipesLandingAction');\n//     $this->get('/{recipe-handle}', 'Embark\\Recipes\\RecipesEntryAction');\n// });\n$app->get('/recipes', 'Embark\\Recipes\\RecipesLandingAction');\n$app->get('/recipes/{recipe-handle}', 'Embark\\Recipes\\RecipesEntryAction');\n```\n. Hi @silentworks do you know what commit Slim is at that composer pulls down for that repo?\nI am currently at: 13a0fbce7064ea1b2e60b7c788d2d097d44dd732\n. Well spotted that man @silentworks !!\nit never occurred to me, coming from an XML and XSLT background, I wouldn't have thought.\nI don't suppose there is any way we can allow hyphens? ;P\n. ah well. Thanks for the help guys, really appreciate it (so busy here).\n. Of course not, im drowning in client work at the mo. Thanks!\n. I have always been a disliker of the final and private keywords, but more recently I have started to realise, as stated above, that having a decent interface and using a composition over inheritance design plan is better than lots of inheritance. To me, final is used right in this scenario, and I have also swapped out the CallableResolver myself.\nI personally, would opt for more interfaces and traits, allowing code to be split out into reusable chunks that developers could use, but I can't see many use cases for that pattern in Slim as it stands.\n. I was talking about this the other day for a project I'm on. We are going for a ?debug addition to a url to see the output.\n. Which version of Slim are you using?\n. I just wanted to verify it so we know :) I'm not sure yet on how to resolve the issue, but we know where to be looking now.\n. Can you do the same on Slim2 though?\n. I understand this, yes, but I am talking about the actual architecture of Slim itself. Error handling is already dealt with in Slim's execution, here: https://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L306-L318\nI'm aiming this discussion at having more Exception classes, and expanding the catch list for the relevant exception types, passing them to the right handler during App::runs operation.\nSlim's App::__invoke method would also just be required to thrown a NotAllowedException (which would accept the correct allowed methods) or NotFoundException which would also be caught by the catch list and handled accordingly.\nI know this could be achieved by hotwiring the errorHandler and doing the handling there, but this seems like it should be a part of Slim itself.\n. Personally, I would still choose the more handlers over fewer, simply for a single responsibility principle that is in use.\nThe general errorhandler would have to do more work when overridden in an app of course, but it could farm work out to other handlers for specific use cases.\n. > All that is necessary in these situations is to return an appropriate response object.\nThe problem I have here is that every aspect of my application needs to be aware of the container so it can get a copy of the relevant handler to create the same output consistently.\nIMO, this is bad design practice (passing a container around much like a service locator), which is why I would opt for exceptions, that get caught and handled by the code I would otherwise have to be aware of at a deeper level.\nAs long as an exception tree has been defined correctly, they can be handled ok at the top of the stack.\nAs soon as I get a bit of free time this weekend, I will branch an example of what I mean in practice.\n. Great, thanks!\n. I just remembered getContainer. Ignore this.\n. I'm really confused as to what's happened here. We added the functionality to allow a group's callback to be registered with '/' or '', yet now the former is broken and tries to match a trailing slash.\nIs this therefore a bug?\n. Reading this more, it is desired behaviour from the above list, but this breaks something that already worked.\nIf the plan is to add a middleware, can this be done sooner rather than later? Also, to use the middleware, this should now be an option in the settings to allow trailing slashes. I was never comfortable with the assumption that it was the preferred option. Also, I was sure there were issues around FastRoute and trailing slashes?\n. Actually, the middleware alone doesn't solve this issue if you have been declaring routes within a group having the slash. I now have to spend time fixing this in my code, after spending time trying to debug what we thought was an error in our code.\nI have to say (and I'll stop shortly), that this is now not consistent. A route should always start with a base left-hand slash, whether inside a group or not, so inside a group, this should mean 'the root of that group' not be appended to the end of that group pattern. If that is desired then the group pattern should be /foo/ not /foo.\nThe samples above are too lenient for setting a standard. No route should ever be allowed to be registered without a left slash, or an empty string, it's just wrong, and we came to that conclusion before.\nI have to say this has wound me up more than it should have. The code is in an RC which should be most stable, and a piece of core functionality has changed that other's code relies on.\nBad form.\n. Re the middleware proposed. This does not work if you set Slim to determine the route early. This is why I was hoping for a solution like we had, where the trailing slash is automatically removed.\nI appreciate all the work going in to this, but it kind of hits me that: An app will either allow trailing slashes, or not. So given that definition, we could always:\n- Remove any double slashes // (As you spotted @silentworks)\n- Based on a config option append or remove a trailing slash.\nThis needs to be simple, as has been stated by others, this is way too complex already. With that in mind, the tests outlined shouldn't care about trailing slashes, as a config app wide setting should deal with that.\n. Instead of trying to cater for all of the things, why don't we lay down some ground rules instead.\n1. All route definitions must start with a slash.\n2. All route definitions must not end in a slash.\n3. Trailing slashes are handled globally by a configuration choice (on|off).\n4. Deviation from the above throws a relevant exception.\nThis covers single routes, route groups, nested groups et al. Instead of trying to cater for everyone, it's a basic obvious simple ruleset definition.\nWe simply should not be allowing any omission of a required slash from a definition. If there is the propensity for them to double up (like root + group) then we should just string replace doubles with singles.\n. Well, I count it as a 4 to 3 vote for my ideas so far. And the pull request too makes it 5 in a way.\n. I have been revisiting this, and stumbled at the first hurdle, as apigen seems to not be installable via composer right now without package version issues.\n. Good idea @akrabat . Posted too early...\n~~I have a script that does this kind of thing as I used to do this for server deployments of client projects. I'll clean it up and post here if this is how it wants to be done?~~\nI can't find it any more :(. Personally, I would leave this until a 3.1.0 level release. Release Candidates are complete functionality, that only expect last minute bug fixes. The proposed change here goes against this as Slim 3 is in an RC stage.\nPlease reconsider this for a minor version update to keep with semantic versioning.\n(Sorry to be a stickler on this for a second time).\n. This is at the present commit of 48fb2ce25255ad73f0c322f8914d289d8e55e923\n. Tested with \nphp\nvar_dump($app->getContainer()['request']->getQueryParams());die;\n. I can confirm that if I don't use the router and just var_dump($app->getContainer()['request']->getQueryParams());die; after I initialise an app, it works as expected. As soon as I use the router, it doubles up the parameters.\n. I've just var_dump'ed the Uri object and found the querystring duplicated, which led me to look in my nginx config.\nI've always been used to defining the querystring on the index file, but obviously Slim works more intelligently than that.\nI would love to see any examples of a simple nginx config for Slim.\n. I think this is resolved?\nJust for clarity:\n1. Classes that are to be used as middleware, and require access to objects from the container, need to use the constructor pattern. The best example is from @geggleto above https://github.com/slimphp/Slim/issues/1702#issuecomment-167036377\n2. For clarity sake, closure middleware can access the container as $this inside the closure.\nIf anyone feels this isn't resolved, please re-open with comments.\n. If I remember rightly, the method is only for testing. When we initially put the interfaces together, we just listed all the required functionality.\nI reckon we don't even need the method to be defined in the interface at all, or even an extension of it as testing is testing and the method is not required to reproduce functionality in application specific derivatives.\n. @ppetermann is right on both counts. This isn't a Slim issue, and utilities like phpdocumentor should be installed globally.\nClosing this issue. If you disagree, please re-open it with comments.\n. > but i would really like to hear why this method has been removed.\nJust to directly answer the question...\nSlim has moved towards a different approach as happens with software from time to time. Static access is considered a bad design pattern in a testable application, so the method was removed.\nI think the solutions provided show a good group of ways to replicate the functionality.\nClosing this as the question is answered. If anyone thinks it isn't, please re-open with comments.\n. The app is basically a http runner in version 3. All the meat of your app should be classes stored in the container for access. All route callbacks are provided the container to their constructors. All aspects of Slim's operation other than the physical process of running the http from request to response are stored in the container, so an application needs designing to realise that structure.\nI have recently built an app that reads routes from files and uses the container itself. There is only one additional RouteMapper class that requires the app, so in my bootstrap, I instantiate the app, and pass it to the route mapper, then run the app. That's all that's needed, everything else happens internally using the container.\n. Closing as a solution was found.\n. The above is a good example.\nI would suggest that the best way to get answers to implementation questions like these are to join in the IRC channel where fellow Slim PHP users could offer advice or help.\nDetails can be found here https://github.com/slimphp/Slim/wiki/IRC-Chat\n. @akrabat, anywhere for this to be logged as a requested feature, so it doesn't get missed?\n. Thanks for clarifying that @mathmarques.\nAs this isn't a slim issue, I'm closing this out. If there are any more comments or suggestions, it can be reopened.\n. Thanks for the explanation, but I too am a little lost as to what the use case needs beyond what is available.\nThe App will always run as the last middleware item in the list, and doesn't need a $next parameter, as nothing can be added after it.\nIf I think what you mean is to have your functionality in an 'app' and add Slim as a middleware to that? If so, then currently, the best way to achieve that is to extend Slim\\App directly.\n. @nickdnk is this still an issue for you?\n. I've just had a look to re-familiarise myself with the code responsible and I can see a possible issue from my perspective.\nI can understand why the code is as it is: HTTP spec allows for a specific set of methods, and the codebase follows specification. If the specification doesn't have those methods, then it is seen as a runtime exception.\nThere are a couple of solutions I think.\n- One is to allow a method to add additional HTTP methods to the Request instance. Something like withCustomMethod.\n- The other is to extend the Request object with a custom version, allowing for custom methods.\nMy preference would be to add the method, so only the container definition would need changing. This would fit well with the composition over extension principle (I think I wrote that right, correct me if wrong).\nLet's ask for opinions from @akrabat and @silentworks.\n. Can we identify what the exact bug is here? Is it that the router/route can't resolve the callable/invokable string without the container?\n. Thanks, I understand now.\nThis takes me back to something I brought up a while back: we pass the container around too much.\nI would be in favour of composing the router to include the resolver, but IMO, passing the container to it is not a good idea.\nIn the example provided, the code only requires that the invokable string is resolved, not the requirement for a container.\nWhat are your thoughts?\n. Ooof, I can try to find time. I know how crap that sounds.\n. Could you provide links to any explanatory texts for what they are, in your understanding? It sounds interesting.\n. Thanks for the context, it will help the discussion a lot!\n. Would you like to provide some pseudo code to help the discussion?. I would think this is a middleware, as not everyone creates REST apps with Slim.\nI'm going to close this issue on that basis. If you think this is the wrong decision, please say so, and we can discuss it further.. In a CQRS app I've been working on, we have the concept of Buses for messages; Commands, Queries, Events...\nIt seemed to me that an Exception is simply another form of message, and could be handled the same way. We would just need a message bus in the app, and allow registration of ExceptionHandlers to types of Exception on that message bus. That allows us to simply catch any Throwable and attempt to handle it with the message bus. If handling failed, we could then respond with a default 'Slim' Exception handler.\nI have yet to implement this in my CQRS work...\nI know work was done to better our handling in Slim, and alas I have not had the chance to properly review it and see if it fit the above pattern.\nIf anyone would like to discuss it further, let me know :). I'm not sure we do from a quick glance. We have the isEmpty method on a Response, but I can't see where we would check the Request to see if it is a HEAD request.. I think this is an awesome piece of work, and definitely the direction Slim should be going.\nI left a comment, but I have a couple of points to raise; not complaints, more architectural ideas.\nLooking at the AbstractRenderer and it's constructor, I see there is a boolean passed as an argument. Generally when passing a boolean, it's a sure sign that there are in fact two concerns being addressed by the class/method, and therefore a refactor in the making.\nMaybe we could look at renderers like RendersHtmlErrorsWithDetails and RendersHtmlErrorsWithoutDetails? This is a strategy in effect, and can be handled by the container based on a more global config option, rather than passing the boolean displayErrorDetails around.. @l0gicgate I'm just generally stating that boolean values as constructor and method arguments is a code smell, and should be refactored in some way. The suggestion of container use was only an idea of how. :). @odan I would think that logging is a form of exception handling in itself. Recently I've been using messaging patterns more, and message handling can have more than one handler, so maybe a direction to go? Exception handling could indeed be a kind of middleware pipe allowing multiple handlers?. If we decided to go the Queue route (which I and my alter ego @johnrobertporter think so) I think it would open up a great way of handling middleware that is not available to us yet.\nA Queue could be altered during runtime to add or remove middleware further along the Queue.\nI think this would be a powerful approach for route handling and route middleware, by simply appending them to the current middleware queue. This would mean a change in the signature for a route callback however.\nI never really understood the need for passing args in a callback, and it means we could make all aspects of the application into middleware, instead of having separate signatures for separate aspects.\nI am happy to discuss this idea further with anyone who's interested :). As two PRs have been addressed for the same concern, I'm going to close this issue. If you think this is in error, please say so, and it can be discussed further.. I agree with @geggleto so I'm closing this issue. If a PR is sent, or any other info can be added, it can be reopened.. As the PR was merged to alter behaviour, and no more info or comments have been added by @sjinks, I'm closing this issue. If there is any more info, please add it and it can be reopened if necessary.. It's a little bit of a bad design to add an interface to a system that has no implementations, and no place of use; it just sits there with no real explanation of what it's for.\nAs this is purely related to views, and that views are not part of the core package, I feel this would be better placed in view packages.\nWhile I appreciate the reasoning behind it, I'm against this going into the core.. Right, I understand the issue now. This is a bit of an edge case.\n@akrabat what are your thoughts here? Should we replace, or cater for an edge case?. I'm closing this as the advice is to find more specific help on StackOverflow. If there's any more info to add, please do and it can be reopened.. I'm closing this as there has been no activity for a while. If there is any more info to add, please do and it can be re-opened.. I'm closing this as there is nothing we could do in this case. If there is any more info to add, please do and it can be reopened.. The return of null is from json_decode not Slim. Personally, I would say that this is acceptable for a micro-framework.\nAny extra error handling, exception throwing and/or better json decoding using a serializer for example, should all be done by extending the framework with middleware, parsers and the like.\nThere's a reason we call it a micro-framework instead of doing all this for a developer.. Could you add some examples to elaborate your request please? It'll help us to understand better.. Agree with @akrabat's comment. ContainerInterface is specific for frameworks to have a way to check for classes and then get them. As Slim is a framework, our use is legitimate.\nI'm closing this as there is nothing we would do in this specific case. If there is any more info to add, please do and it can be re-opened.. I'm closing this as there has been no activity for a while. If there is any more info to add, please do and it can be re-opened.. I'm going to close this as it seems to be resolved. If there is any more info to add, please do and it can be re-opened.. Interfaces should not have a constructor as you are limiting the ability to define implementation detail vs defining expected behaviour.\nInstead, your methods render and renderWithBody should accept the exception instance.. ",
    "colonelchlorine": "Was this incorporated? Cancelled?\n. gcaplan +1 for using slim, doctrine, and pimple. swiftmailer for email and we're clones\n. ",
    "imknight": "yup it work, thanks for the update.\n. yup tested both also can't, nothing in the $_SESSION\n. ya i m the one reporting that bug : ) , k will try to post it later when I have time.\n. sorry I was rather busy for the past 2 day, just did another round testing and found the problem.\nfound the problem after I flash and redirect, i redirect to a url without ending slash and my controller is the one with ending slash, so it redirect one more time, thats why the session is gone.\nclosing this issue.\n. sorry just a follow up base on the Doc ,  \nThe message in the example below will be available in the variable flash['info'] in the current request\u2019s View templates.\ndoes it mean i should be able to use $flash['info'] variable on the render() template ?\n. ",
    "pendexgabo": "This feature already exists. Check the method on https://github.com/codeguy/Slim/blob/master/Slim/View.php#L153 you just need to call (AFAIK)\nphp\n$app->view()->setData('color', 'red');\n$result = $app->view()->render('template.twig');\n. ",
    "savdeep": "@codeguy , In current version i am not able to find any of them. Neither $response->headers('PHP_AUTH_DIGEST') not Authorization .. \nAny suggestion?\n. Content-Type \u2192 text/html from postman which slim request says as [CONTENT_TYPE] => multipart/form-data;\nAnd from angular its [CONTENT_TYPE] => application/json;charset=utf-8\n. Thanks @tuupola for the explanation. That make sense :+1: . @geggleto I think i haven't enabled that extension. How to do that?\n. @geggleto Yup, its enabled.I thought you were saying something else. I think i need to debug that middleware.\n. @tuupola thanks once again, Yes i can do that, its simple :+1: . But, i really want to know why that middleware isn't working in my case?\n. Thanks everyone\n. @tuupola using ContentTypes middleware helps but it dosen't populates $_POST and it isn't in $app->request->post().\n. True @rbalik , i used my own middleware for this.\n. @codeguy, i read it in your interview somewhere that its possible and you use slim to run your crontasks. But, unfortunately i am not able to find out how i can use slim for same? \n. Thanks @mbretter , I have set the environment. It now shows me 404 html content on console \n. @silentworks , @mbretter Thanks a ton. saved me many hours.\n. ",
    "tuupola": "Discussion at https://github.com/slimphp/Slim/issues/831 might help.\n. It is probably related to PHP bug 61286. Built-in server will consider request as a static file request if there is a dot in the  SCRIPT_NAME. \n. I think it is cleaner to have separate handler for each rest method. This way amount of code in each handler is small. With suggested catchall route there is one handler but total amount of code is same. Only difference is that code for each method is separated with if sentence.\nI do see usage cases for $app->any() though. Useful when you cannot be sure which http verb will be used.\n. -1 Too much magic is exactly what is wrong with Rails. Having as little magic as possible is what make Sinatra great. If there will be magic make it as optional plugin.\n. It is just a documentation issue. Documentation should mention it is probably bad idea to store sensitive data in SessionCookie.\n. When you put your app into subdirectory why not just use?\nRewriteBase /somedir/\nWorks without any problems.\n. You are correct. RewriteBase is kind of base href of mod_rewrite rules. It sets the base folder for all following rewrite rules in the .htaccess file.\nDo I  understand correctly you have a Slim application in http://host.com/site/foo but you want it to appear in http://host.com/foo?  Just install the slim application directly to http://host.com/foo and there is no need to use mod_rewrite rules.\n. Missing mcrypt should not be a showstopper. Documentation says \"The mcrypt extension is required only if you use encrypted cookies.\" Either this patch should be reverted or documentation updated to state that mcrypt extension is mandatory.\n. Here is a workaround. Add the following to your composer.json\njson\n{\n  \"repositories\": [{\n      \"type\": \"vcs\",\n      \"url\": \"https://github.com/tuupola/slim-fake-mcrypt.git\"\n  }],\n  \"require\": {\n    \"tuupola/slim-fake-mcrypt\": \"dev-master\",\n    \"slim/slim\": \"2.3.*\"\n  }\n}\n. Can you paste the composer output to pastie.org and post link here? I will install ext-mcrypt somewhere to debug it.\n. IMO /test does not equal /test/ and it should not be automatically redirected. There could be a config for this though. But then again is not mod_rewrite better suited for this case?\n. In Sinatra routes are matched in the order they are defined. The first route that matches the request will be executed. I find it confusing if execution order is defined by length of the route. Much less confusing to just set the order in source code.\n. I expect GET /me/ to match /me/ route and GET /message/ to match /message/. Any other behavior is just plain wrong. I do not think passed string is a regex unless I specifically make it a regex. For for example:\n$app->get(\"/^me*/\", function() { ... }); /* Regex */\n$app->get(\"/me/\", function() { ... }); /* String */\n. IMO controllers do not belong to Slim core. They should be provided as an extension.\n. It is because $flash is an instance of Slim\\Middleware\\Flash which contains the flash messages. Slim documentation says:\n\nFlash messages are persisted with sessions; sessions are required for flash messages to work. Flash messages are stored in $_SESSION['slim.flash'].\n\nSo you could do something like var_dump(count($_SESSION['slim.flash']));\n. +1 on implementing Countable if it is ok with Josh.\n. AFAIK hash is not even sent to server so PHP cannot access it anyway. So there is no real need to include code for removing it.\n. I do not know a browser which shows string foo when doing print_r($_SERVER) at address below. Hashes are not sent in the http request. They are used in the browser only.\nhttp://www.appelsiini.net/demo/hash.php#foo\nIf you have a browser which sends the hash / fragment in the http request let me know which one.\n. I can see fragments in referrer logs but not in the actual requests.\n85.253.45.82 - - [26/Oct/2013:00:09:03 +0300] \"GET /xxx/css/skin.css HTTP/\n1.1\" 200 2387 \"http://www.example.com/xxx#content\" \"Mozilla/4.0 (compatible; M\nSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152\n; .NET CLR 3.5.30729; InfoPath.1; .NET CLR 1.1.4322; OfficeLiveConnector.1.3; Of\nficeLivePatch.0.0)\"\nHowever those are actually against specs.\n14.37 Referer\n... \nIf the field value is a partial URI, it SHOULD be interpreted relative\nto the Request-URI. The URI MUST NOT include a fragment.\n. Just FYI. Slim routing is also broken when using mod_vhost_alias I have a workaround for it but it breaks when upgrading from 2.3.1 to 2.3.3. Will do a proper bug report soon(ish).\n. Good idea. You could also link to tutorials and articles on blogs.\n. Now I have a good excuse to start blogging again ;)\n. @silentworks speaking of addons. Is there preferred naming scheme for third party stuff? For example if I was to create a middleware called Foo, should it be called  \\Tuupola\\Middleware\\Foo?\n. @ecoreng I like the idea of curated list of Slim resources. Will submit PR's if I find something new worth mentioning.\n. :+1: \n. I think Slim follows PSR-2 so you should include braces around control structures.\n. Hardcoded \"/\" and DIRECTORY_SEPARATOR clashing somewhere?\n. I ment in Slim or Twig code. \n. Did you notice that some tests were failing?\n. Actually the failed test is not caused by your commit. Instead it was some slow running test. Second changed before the test could finish.\n1) SlimTest::testExpiresAsString\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'Tue, 05 Nov 2013 00:37:01 GMT'\n+'Tue, 05 Nov 2013 00:37:00 GMT'\n. I am not testing myself. I saw it from the details link in the Travis CI build failed notification in this pull request.\n. Even though documentation says otherwise mcrypt extension is now mandatory. You can work around it by using fake mcrypt.\nhttps://github.com/tuupola/slim-fake-mcrypt\n. It is not a requirement. It is suggestion. Ie. you can install ext-mcrypt if wanted but it is not required.\n. Looks like timing issue in tests.\n. To be more exact about this. Documentation states:\nslim.after.router\nThis hook is invoked after the router is dispatched, before the Response is sent to the client, and after output buffering is turned off. This hook is invoked once during the Slim application lifecycle.\nHowever in both master and development hook is called before turning output buffering off.\n. Actually this looks like a book to me if it still happens. Route should not be called twice if optional parameter/part exists.\n. Sure. Bit later today.\n. I am unable to reproduce the problem. Tested with Slim 2.4.3 on both Apache and built-in PHP web server. Also DirectorySlash On Apache setting does not create the problem. Tested with following code:\n``` php\nrequire \"vendor/autoload.php\";\nuse Monolog\\Logger;\nuse Monolog\\Handler\\RotatingFileHandler;\nuse Monolog\\Formatter\\LineFormatter;\n$log = new Logger(\"slim\");\n$formatter = new LineFormatter(\"[%datetime%] [%level_name%]: %message%\\n\");\n$rotating  = new RotatingFileHandler(DIR . \"/logs/slim.log\", 0, Logger::DEBUG);\n$rotating->setFormatter($formatter);\n$log->pushHandler($rotating);\n$app = new \\Slim\\Slim();\n$app->log = $log;\n$app->get(\"/foo(/)\", function() use ($app) {\n    $app->log->debug(\"Request\");\n    print \"foo\";\n});\n$app->run();\n```\n. Documentation is in GitHub so everyone can  fork and submit PR.\n. I do not see any problems with Slim.\n. Basic authentication header should look something like this. \nAuthorization: Basic cm9vdDp0MDBy\nAuthentication most likely fails because of non standard header.  You can also pass credentials like this:\njavascript\n$.ajax({\n    method: \"POST\",\n    url: \"/admin\",\n    username: \"root\",\n    password: \"t00r\"\n});\nWith Slim 2.4.3 I am able to access Authorization header via both $app->request->headers->get(\"Authorization\") and $_SERVER[\"HTTP_AUTHORIZATION\"].\n``` php\n<?php\nrequire \"vendor/autoload.php\";\n$app = new \\Slim\\Slim();\n$app->add(new \\Slim\\Middleware\\HttpBasicAuthentication(array(\n    \"path\" => \"/admin\",\n    \"realm\" => \"Here be dragons.\",\n    \"users\" => array(\n        \"root\" => \"t00r\",\n        \"user\" => \"passw0rd\"\n    )\n)));\n$app->get(\"/admin\", function() use ($app) {\n    var_dump($app->request->headers->get(\"Authorization\"));\n    var_dump($_SERVER[\"HTTP_AUTHORIZATION\"]);\n});\n$app->run();\n```\nGives the following result:\nstring 'Basic cm9vdDp0MDBy' (length=18)\nstring 'Basic cm9vdDp0MDBy' (length=18)\n. With current version of Slim if you add the following to .htaccess file.\nSetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\nYou can then access even non standard header with any of these.\nphp\nprint $_SERVER[\"HTTP_AUTHORIZATION\"];\nprint apache_request_headers()[\"Authorization\"];\nprint $app->request->headers(\"Authorization\");\n. This is an undocumented Apache \"feature\". There was a https://github.com/slimphp/Slim/pull/898 for Slim 2. Something similar could be done for Slim 3.\n. Personally I do not think redirect() method should be context aware. I prefer redirect(\"/\") to be able to jump out of Slim folder. I use context aware url() helper everywhere which takes care of subfolder installations. Something like:\nphp\nfunction url($path = null, $absolute = false) {\n    $url = pathinfo($_SERVER[\"PHP_SELF\"], PATHINFO_DIRNAME) . \"/\" . $path;\n    $url = preg_replace(\"/\\/\\/+/\", \"/\", $url);\n    if ($absolute) {\n        $url = \"http://\" . $_SERVER[\"SERVER_NAME\"] . $url;\n    }\n    return $url;\n};\nand then in routes:\nphp\n$app->redirect(url(\"/admin/cars\"));\nsame helper is also used in templates\nhtml\n<link rel=\"stylesheet\" href=\"<?php print url('css/normalize.min.css') ?>\">\n<script src=\"<?php print url('js/main.js') ?>?<?php print filemtime('js/main.js') ?>\"></script>\n<img src=\"<?php print url('img/icon-3.png') ?>\" class=\"icon\" />\n. Not directly related, but I have been using Monolog which is PSR-3 compliant with Slim for a while. Something like:\n``` php\n/ Setup Slim /\n$app = new \\Slim\\Slim();\n/ Setup Monolog /\nuse Monolog\\Logger;\nuse Monolog\\Handler\\RotatingFileHandler;\nuse Monolog\\Handler\\PushoverHandler;\nuse Monolog\\Formatter\\LineFormatter;\n$log = new Logger(\"slim\");\n$formatter = new LineFormatter(\"[%datetime%] [%level_name%]: %message%\\n\");\n$rotating  = new RotatingFileHandler(DIR . \"/logs/slim.log\", 0, Logger::INFO);\n$pushover   = new PushoverHandler(\"xxxxxxxxxx\", \"xxxxxxxxxx\", null, Logger::ERROR);\n$rotating->setFormatter($formatter);\n$log->pushHandler($rotating);\n$log->pushHandler($pushover);\n/ Attach Monolog to Slim. /\n$app->log = $log;\n```\n. Last commit in development branch 7 days ago does not look dead to me :)\n. What happens if you do\nGET /api/pages/1?pageTemplate=foo\n? It sounds like nginx.conf issue.\n. As I mentioned it feels like nginx.conf issue. Looks like redirect rule eats away the ? character. There is example nginx config in end of routing section of docs.\n. If you are trying to access headers you should use the following instead:\nphp\n$app->request->headers->get(\"Access-Control-Request-Method\")\nYou are currently trying to access $_GET[\"HTTP_ACCESS_CONTROL_REQUEST_METHOD\"] variable.\n. What happened to #slim? \nhttps://github.com/codeguy/Slim/wiki/IRC-Chat\n. What do you mean by cli script? You mean the internal PHP server?\nphp -S 0.0.0.0:8080\n. Slim probably should check if $_SERVER['REQUEST_METHOD'] exists. In the meanwhile as workaround you could disable PHP notices with:\nphp\nerror_reporting(E_ALL & ~E_NOTICE);\n. See the first comment in gzuncompress manpage.\n. Make a composer installable package out of it and see what happens :)\n. Can you include the code where you define the GET /v0 route.\n. I just tried this code:\nphp\n$app->group('/v0', function() use ($app) {\n  $app->get('(/)', function() use ($app) {\n      print 'v0';\n  });\n  $app->group('/beers', function() use ($app) {\n    $app->get('(/)', function() use ($app) {\n        print 'beers';\n    });\n    $app->get('/:id', function($id) use ($app) {\n        print $id;\n    });\n  });\n});\nRunning the above with php -S 0.0.0.0:8080 and  Slim version 2.4.3. When accessing /v0or /v0/ I get result v0. When accessing /v0/beersor /v0/beers/ I get result beers. When accessing /v0/beers/foo I get result foo. So everything seems to be working. Maybe something in rewrite rules or older version of Slim?\n. Works for me.\nhttp://www.downforeveryoneorjustme.com/\n. What does this PR do? Commit message is not very helpful.\n. Any tests how much faster this make $app->urlFor()?\n. I understand. Caching is only useful when when it speeds up things. Otherwise it just adds complexity. This is why I asked if there are any tests about possible speed improvements.\n. Even in routes you usually do not call setBody()directly. You just print or render() your output. However I would also like Slim to implement more Sinatra like error handlers. Something like:\n``` php\n$app->error(403, function() use ($app) { \n    print \"Access forbidden\";\n}\n$app->error(404, function() use ($app) {\n    $app->render(\"404.html\");\n}\n```\n. I think it is matter of taste. However Slim documentation also suggests:\n\nUsually, you will never need to manually set the response body with the setBody() or write() methods; instead, the Slim app will do this for you. Whenever you echo() content inside a route\u2019s callback function, the echo()\u2019d content is captured in an output buffer and appended to the response body before the HTTP response is returned to the client.*\n. You probably want to include only 949768bbf3773466051120c069789972e18121d9 in the PR.\n. This seems like a bug or documentation is wrong. Documentation says headers should be an associative array.\n\nphp\n// Get request headers as associative array\n$headers = $app->request->headers;\nHowever actual return value is instance of Slim\\Http\\Headers class which implements ArrayAccess. For me this is not the same thing. What you can do though is to call all()method of Slim\\Helper\\Set:\nphp\n$headers = $app->request->headers->all();\nvar_dump($headers);\nor the following will also work:\nphp\n$headers = (array)$app->request->headers;\nvar_dump($headers);\nNote that $app->request->headers might not actually contain all request headers sent by browser. You might be better off using $_SERVER superglobal.\n. Parses yes, but includes only CONTENT_TYPE, CONTENT_LENGTH, PHP_AUTH_USER, PHP_AUTH_PW, PHP_AUTH_DIGEST,   AUTH_TYPE and anything beginning with HTTP_ and X_. Anything else such as REDIRECT_HTTP_AUTHORIZATION is discarded.\n. Regarding the redirected headers see #898.\n. Does this work for setup like following?\n<Proxy *>\n  Order deny,allow\n  Allow from all\n</Proxy>\nProxyPass          /foo  http://192.168.0.12/subdirectory/\nProxyPassReverse   /foo   http://192.168.0.12/subdirectory/\n. To me it looks like test always fails in Windows. Looking at the code of setTemplatesDirectory() the offending line is this.\nphp\n$this->templatesDirectory = rtrim($directory, DIRECTORY_SEPARATOR);\nIn Windows DIRECTORY_SEPARATOR is \\. In the test code tries to remove \\from string templates/. Result is templates/ thus the test fails. So Slim code works fine. Test itself is not portable. It should be something like:\n``` php\npublic function testSetTemplatesDirectory()\n{\n    $view = new \\Slim\\View();\n    $directory = 'templates' . DIRECTORY_SEPARATOR;\n    $view->setTemplatesDirectory($directory);\n$this->assertAttributeEquals('templates', 'templatesDirectory', $view);\n\n}\n```\n. It is a bit hard to understand the question. What are you trying to do?\n. Non patch related question. What git client are you using? I have been trying to find out which client makes the default \"Update filename.txt\" commit messages.\n. Do I understand correctly you do not have HEAD route defined? Can you provide minimal Slim code to reproduce the problem.\n. Does not seem to be true.\n``` php\n<?php\nrequire \"vendor/autoload.php\";\n$app = new \\Slim\\Slim();\n$app->notFound(function() use ($app) {\n    print \"FOO\";\n});\n$app->run();\n```\n```\n$ php -S 0.0.0.0:8081 index.php\n$ curl -k -s -o /dev/null -I -w \"%{http_code}\" http://0.0.0.0:8081/nosuch\n404\n$ curl -k -s -o /dev/null -w \"%{http_code}\" http://0.0.0.0:8081/nosuch\n404\n```\nCould you provide minimal code which reproduces your problem.\n. Where should  getallheaders() be?\nPHP Fatal error:  Call to undefined function Slim\\getallheaders() in /home/travis/build/codeguy/Slim/Slim/Environment.php on line 161\n. Your defined route has trailing slash.\nphp\n$app->get('/sales/by-rule/' ...\nbut you are accessing it without trailing slash\ncurl -D - \"nyaa.tld/sales/by-rule?a=0\"\nWhat happens if you access it with trailing slash?\ncurl -D - \"nyaa.tld/sales/by-rule/?a=0\"\n. Try this in your nginx.conf to see if it helps.\ntry_files $uri $uri/ /index.php?$query_string;\n. Great :) I will make a pull request to docs a bit later.\n. Are you using ContentTypes middleware?\n. The idea of ContentType middleware is to automagically turn the body JSON into PHP datastructure. \n\"This is middleware for a Slim application that intercepts the HTTP request body and parses it into the appropriate PHP data structure if possible; else it returns the HTTP request body unchanged. This is particularly useful for preparing the HTTP request body for an XML or JSON API.\"\nIf you want to convert the data structure as back to JSON you could use json-encode or just not use the middleware.\n. Parameters are passed to route handler not the group. Try something like following.\nphp\n$app->group('/foo/:id', function() use ($app) {\n    $app->get('/bar', function($id) {\n        print $id;\n    });\n});\n. You must do $app->run() in the end of your code. Following works for me.\n``` php\nrequire_once \"../vendor/autoload.php\";\n$app = new \\Slim\\Slim();\n$app->add(new \\Slim\\Middleware\\SessionCookie());\n$app->get(\"/foo\", function() {\n    $_SESSION[\"test\"] = \"foo\";\n});\n$app->get(\"/bar\", function() {\n    var_dump($_SESSION);\n});\n$app->run();\n```\n. Should probably update README. It specifically says \"Send a pull request from each feature branch to the develop branch.\"\n. This is not related to Slim. Idiorm support is probably better place to ask.\nhttps://github.com/j4mie/idiorm\n. In your code do you run the Slim app after defining the routes?\n$app->run();\n. Have you tried the rewrite rules suggested by Slim documentation?\nRewriteEngine On \nRewriteCond %{REQUEST_FILENAME} !-f \nRewriteRule ^ index.php [QSA,L]\n. Then again README says: \"All pull requests must adhere to the PSR-2 standard.\"\nhttps://github.com/codeguy/Slim#style-guide\n. I like the idea but double negatives makes brain hurt routes.no_pass => false.  Why not just  routes.pass => true?\n. It will of course break applications which use pass() method in any of the routes. But it is not a problem since fast matching is not enabled by default. \n. Removing pass() breaks BC and requires major version number upgrade. Same goes for enabling this feature by default.\n. Oh, did not notice this was against development branch. Yes I agree. I too was rather confused when reading the code and found out exceptions were used as flow control.\n. http://www.downforeveryoneorjustme.com/http://docs.slimframework.com\n. https://www.google.com/search?q=document+rest+api\n. From Slim documentation.\nWhenever you echo() content inside a route\u2019s callback function, the echo()\u2019d content is captured in an output buffer and appended to the response body before the HTTP response is returned to the client.\nAccording to above barfoo is expected behaviour.\nIn your first example all possible routes get a default response of bar. When GET /setbodyprob is requested foogets appended to it.\nIn second example you write foo to output buffer. Then response is set to bar. After callback finishes the output buffer is appended to response and it becomes barfoo.\n. Actually $app->response->setBody('bar') does set the body response as advertised. However as the if you also print() or echo() something in the route handler it will be appended to the body. I agree this is a bit counterintuitive. However as the docs say you are usually not supposed to use setBody() directly.\n. You cannot use exit() for sending response. Instead you should print or echo the response from the route.\n. :+1: This is what I am using myself too.\n. What does this PR do? Commit message does not reveal anything. \n. Matter of taste.  /2015/01 and /2015/01/ are not the same thing.\n. It is an PHP 5.6 issue. \nhttps://www.bram.us/2014/10/26/php-5-6-automatically-populating-http_raw_post_data-is-deprecated-and-will-be-removed-in-a-future-version/\n. As @akrabat said there already is vendor namespace Slim. I do not see any reason to change it. Current namespacing works just fine.\n. There already is ContentTypes middleware for v2.\n. Without context add() is a bit unintuitive. It becomes more clear when you add parameter to it. \nphp\n$app->add();\n$app->add(new Slim\\Middleware\\FooBar);\n. I think OP is mixing multipart/form-data post parameters and posted json body. In short when you POST multipart/form-data it will populate $_POST which you can also access via $app->request->post(). This is an PHPism.\nWhen you post application/json data it will not populate $_POST  and it will not be available from $app->request->post(). Instead you read the request body and parse the json yourself.\nphp\n$body = $app->request->getBody();\n$data = json_decode($body, true);\nprint_r($data);\nThat said there is middleware called ContentTypes which emulates the behaviour of multipart/form-data when using application/json data. The middleware decodes json automagically and populates $_POST and it will become available also in $app->request->post().\n. The middleware will not show phpinfo(). There you can see if your PHP has been compiled with JSON support. I think it has been default since 5.2.0. This has nothing to do with Slim middlewares.\nYou will save yourself some headaches by encoding the json manually in a route or a hook. It is just two lines of code. \n. For me routes /foo and /foo/are not the same.\n. @geggleto Good job! In the stats page it would be good idea to also mention how composer was run. Ie did you have --no-devand --optimize-autoloadedswitches. They make a world of difference. There is already much confusion about this.\n. For me this feels like over engineering. Is DIC independence really needed? Just choose one and let it be.\n. Please bring back the echoing. Makes life much easier. For example before it was possible to ghetto debug with something like.\nphp\nprint_r($foo);\nNow you have to do hoops and loops.\nphp\n$response->write(print_r($foo, true));\nreturn $response;\n. You can still return just keep echoing as an alternative. It is a tradeoff between usability and by the book engineering. Those who want to return can still return since it is easier to remember. Those who wish to echo still can echo.\n. Yeah! :+1: \n. Above behaviour is expectable and exactly the same as how Slim 2 works now. If you mix echoing and writing  via response object you cannot expect Slim to know the order of those calls.\nphp\n$app->get(\"/hello\", function() use ($app) {\n    $app->response->write(\"hel\");\n    echo \"lo\";\n    $app->response->write(\" world\");\n});\nAbove yields hel worldlo as expected.\n. It is not about experience. I consider myself a non-beginner and I hate the hoops and loops I now have to make to get some output from Slim. Draconian measures such as throwing an exception if someone echoes can be included but it must be optional and turned off by default.\n. In general vendor should be outside of document root. But can you show also the .htaccess file?\n. Might be caused by DirectorySlash config. Try turning it off.\n. Seems it is already catched. 5.4 build failed with the above error message.\nhttps://travis-ci.org/slimphp/Slim/jobs/63999203\n. Agreed.\n. http://garlicjs.org/\n. I was also wondering why the Middleware part has been removed from namespace. It kind of makes sense to keep it there.\n. This starts to be academic, but stirring it a bit more. If middlewares are not Slim specific why are they under Slim namespace then? It is matter of taste but Slim\\Middleware\\HttpCache sounds more logical to me than Slim\\HttpCache\\Cache. \nIs there a practical reason why Slim middleware should not be under Slim\\Middleware namespace? Other than ones preferred way of naming things?\n. There is too much confusion about this already. Removing .htaccess file would cause even more confusion. Most people are using Apache anyway. Those who use Nginx are generally more computer literate and understand that since they use Nginx they can safely remove this file.\n. It might be Apache DirectorySlash setting doing the redirect. Try setting it off.\nDirectorySlash Off\n. Here is original discussion concerning the current behaviour.\n. This can already be done without changes to Slim code. Middleware has access to Psr\\Http\\Message\\RequestInterface which in turn gives you access to path of the request uri. It means the middleware can be passed a configurable list of routes it should passthrough without authenticating (or vice versa). This is how both slim-basic-auth and slim-jwt-auth work. \n. Instead of using the route name for checking authorization you can currently use the request uri instead.\n. Or you can just run composer with --ignore-platform-reqs switch.\n. Also browser does not always the send referer header.\n. Doing return $response->withRedirect('/two'); instructs the browser to do a redirect. It is not an internal Slim subrequest. Following gives me HTTP_REFERER header at /two.\n``` php\n$app->get(\"/one\", function ($request, $response, $args) {\n     return $response->write('Click here');\n});\n$app->get(\"/redirect\", function ($request, $response, $args) {\n    return $response->withRedirect(\"/two\");\n});\n$app->get(\"/two\", function ($request, $response, $args) {\n    print_r($request->getHeader(\"HTTP_REFERER\"));\n});\n```\nYields.\nArray\n(\n    [0] => http://0.0.0.0:8081/one\n)\n. @akrabat my point exactly. If referer header exists using withRedirect() will not remove it.  So you can use withRedirect() and still have the referer header. \nBut in any case relying on referer header is bad practice since there any many cases when it might be missing.\n. The following code works for me. Note that your example is missing $app->run()\n``` php\nrequire \"./vendor/autoload.php\";\n$app = new \\Slim\\Slim();\n$app->get(\"/assets/:height/:width/:id/:type(/)\", function($height, $width,  $id, $type) use ($app) {\n    echo \"/assets/{$height}/{$width}/{$id}/{$type}(/) \\n\";\n});\n$app->run();\n```\nyields\n$ php -S 0.0.0.0:8080 index.php\n$ curl http://0.0.0.0:8081/assets/100/200/6/png/\n/assets/100/200/6/png(/) \n$ curl http://0.0.0.0:8081/assets/100/200/6/png\n/assets/100/200/6/png(/)\n. Just tested the code from my previous comment with fresh CentOS 6.5 + Apache 2.2 install. It works as expected.\n```\n$ curl --include http://192.168.50.10/assets/100/200/6/png/\nHTTP/1.1 200 OK\nDate: Sat, 05 Sep 2015 16:30:58 GMT\nServer: Apache/2.2.15 (CentOS)\nX-Powered-By: PHP/5.6.12\nContent-Length: 26\nConnection: close\nContent-Type: text/html;charset=UTF-8\n/assets/100/200/6/png(/) \n$ curl --include http://192.168.50.10/assets/100/200/6/png\nHTTP/1.1 200 OK\nDate: Sat, 05 Sep 2015 16:31:06 GMT\nServer: Apache/2.2.15 (CentOS)\nX-Powered-By: PHP/5.6.12\nContent-Length: 26\nConnection: close\nContent-Type: text/html;charset=UTF-8\n/assets/100/200/6/png(/) \n``\n. Also [Paw](https://luckymarmot.com/paw) is simply amazing.\n. I like. Makes the clone look much cleaner.\n. -1 for both Gitter and Slack (although I use Slack daily for company I work for). IRC works just fine. Although I must confess I have not tried Gitters IRC gateway.\n. Ok. I thought it might be a intentional. Currently I just use workaround below to always get leading slash. AlthoughgetBasePath()`seems to be the correct way to go.\nphp\n$uri = \"/\" . $request->getUri()->getPath();\n$uri = str_replace(\"//\", \"/\", $uri);\n. It is actually possible to do the same thing with a text editor, TextMate in my case. I had couple of times a case where PHP would just silently die. Debugged it by removing code line by line. Found the line, didn't see anything wrong with it. Pasted it back and PHP dies. Removed it and typed everything again, PHP works.\nWith hex editor I could see there was an invisible control character in the end of the line. Sadly I do not remember what it is but it was possible to accidentaly write it using some key combination. It probably was something close to cmd-s which TextMate uses for saving.\n. In your code put route for /settings first. Then both /settings and /foobar should work. Also you probably should not use same ->name('profile') for both routes.\n.  https://www.whatever.co.uk/api/getEvents/?foo=red&bar=green\n. It is not directly Slim related. \nRFC 3986 governs how URI should be built. The ? character denotes start of query string. Query string itself is usually key=value pairs separated by either & or ; character.\nIt looks like you want to use query string for search, but ended up doing something else.\n. How does your code look like?\n. Personally I think route groups feature is can of worms. It saves a few keystrokes but has been a big source of confusion already since Slim 2.\n. @geggleto most likely has Slim installed in /video-site/public/ folder. Looking at the code cause is similar as with issue #1554. $this->uri->getPath() returns path without leading slash in subfolder, so I guess $this->uri->getBasePath() returns rest of the path without trailing slash?\n. What @designermonkey suggested sounds good.  Current situation feels messy.\n. There are probably many ways to do it. In some of my middlewares I include an callback function which can be used to store information outside of middleware scope. For example with slim-jwt-auth you can store the decoded token outside of middleware with something like:\nphp\n$app->add(new \\Slim\\Middleware\\JwtAuthentication([\n    \"secret\" => \"supersecretkeyyoushouldnotcommittogithub\",\n    \"callback\" => function ($request, $response, $arguments) use ($app) {\n        $app->jwt = $arguments[\"decoded\"];\n    }\n]));\nNote that this is in not Slim 3 feature. Just my way of solving similar problem. I prefer generic callbacks. They are kind of swiss knife because different users have different needs. You might be interested in the code for handling callbacks.\n. I think it is more of documentation issue. Might be good idea to mention rewrite rules already in installation page. That is the only page most people with problems read.\n. Call to $request->getHeader(\"Authorization\") works fine. However if you are using Apache and send something else than valid Authorization: Basic header PHP won't have access to it unless you add the following to your .htaccess file.\nRewriteRule .* - [env=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n. Just FYI, https://github.com/slimphp/Slim/pull/898 was Slim 2 pull request regarding this. Did not know about CGIPassAuth. Thanks for the tip!\n. You do have rewrite rules in .htaccess file?\n. You could also just use href=\"//slim-app.projek.xyz/styles/main.css?v=...\" and browser will automagically choose http or https depending on the current page.\n. What is the problem described in the bug report?  Not getting the https protocol from the  Uri::getBaseUrl() call or not getting the domain part from the same call? It is not clear to from the description. \nI was not suggesting you should manually type something. Just saying that the protocol part is not required in the URL. If you leave it out browser uses the same protocol as the page was requested with. But I guess I misunderstand the original problem.\n. As a sidenote php://temp is usually written to /tmp which is most of the time mounted as tmpfs which is stored in memory, and not disk. Your mileage may vary.\n. FWIW personally I like the wrapper approach.\nphp\n$app->add(new DoublePassWrapper(function($request, $response, $next) {} )):\n. One could always write a middleware which rewrites the headers to format which the legacy client can understand.\n``` php\n$app = new Slim\\App\n$app->add(function($request, $response, $next) {\n    $response = $next($request, $response);\n    $something = $response->getHeaderLine(\"X-Something\");\n    return $response = $response->withHeader(\"X-Something\", $something);\n});\n$app->get(\"/header\", function($request, $response, $arguments) {\n    return $response\n        ->withAddedHeader(\"X-Something\", \"foo\")\n        ->withAddedHeader(\"X-Something\", \"bar\");\n});\n$app->run();\n```\nYields\nphp\n$ curl --include http://localhost:8080/header\nHTTP/1.1 200 OK\nX-Something: foo,bar\n. Same as #1554.\nEven though intentional it still is confusing for me that behaviour is different depending on whether Slim is installed in subfolder or not. I guess there will be lots of bug reports and support requests about this. In the end I just ended up doing something like following:\nphp\n$path = \"/\" . $request->getUri()->getPath();\n$path = str_replace(\"//\", \"/\", $path);\n. Personally I also prefer arrays over multiple arguments.\n. My concern is that currently nothing is broken so no need to fix it. Changing current behaviour will make Slim code more complex and probably more error prone. Personally I have nothing against typing ->add(...) more than once so I would leave it as it is.\n. Slim 2 or 3?\n. Double negatives give headache. To turn on cache you must use routerCacheDisabled = false. It would be more readable to have routerCacheEnabled = true.\n. Oh sorry. Yes you are correct, consistency is better. Did not think this through.\n. What you describe sounds like a good candidate for middleware.\n. Slim 3 does not include logger. Instead you can use Monolog or something similar. Initialise the logger into a container and then you can call it with something like:\nphp\n$app->get(\"/\", function ($request, $response, $arguments) {\n    $this->logger->debug(\"Hello world!\");\n});\n. I can take a look at it. Is there and todo API spec somewhere or do I just read the source of other implementations? Looking at the Sinatra example that is pretty much how I do my APIs. One difference being I return 200 from DELETE actions instead of 204.\n. Needs some polishing but passes tests.\nhttps://github.com/tuupola/slim-todo-backend\n. This can be closed.\n. Code below seems to work.\nphp\nreturn $response\n    ->withStatus(400)\n    ->write(\"No user found\");\n. I think this is a wrong way to do it. There are gazillion of custom vendor mediatypes. You cannot add them all to Slim core. The application/vnd.api+json is not an general mediatype for JSON based APIs. Instead it is specific for a vendor called JSON API. \nMore clear example is application/vnd.github.v3+json which can is parsed as vendor prefix vnd, vendor github version 3 datatype json.\nSo instead of adding all different vendor prefixed mediatypes to Slim core correct way would be to just parse the vendor mediatypes into their general mediatype equivalents. For example application/vnd.api+json becomes application/json and application/vnd.foobar+xml becomes  application/xml.\n. @akrabat I think you are correct. Media parser should be updated.\n. Duplicate of #1554. Personally I still think behaviour of getPath() should be the same when installed in document root and subfoler.\n. I am the one fixing the Ruby tags almost daily :)\n. > There's no known way to find out if a parameter will be used as URL or query parameter so our URLs currently look like.\nInstead of altering current behaviour wouldn't it be better to add a way to get the placeholder names for a given route. This would solve the root of the problem since developer would have information which parameters belong to $data and which belong to $queryParams.\n. I like the feature but it does not belong to core.\n. Tested with 3.2.2 and it returns false. PSR-7 says getParsedBody() says return value should be null|array|object. Seems behaviour is wrong at the moment.\nphp\n$app->post(\"/test\", function ($request, $response, $args) {\n    var_dump($request->getParsedBody());\n});\n```\n%curl --include --request POST http://127.0.0.1:8080/test\nHTTP/1.1 200 OK\nHost: 127.0.0.1:8080\nConnection: close\nX-Powered-By: PHP/5.6.17\nContent-Type: text/html; charset=UTF-8\nContent-Length: 103\nboolean false\n\n```\n. I think something like this is better suited as Middleware.\n. FWIW this is also how Zend Expressive works. Personally I think all content should be outputted inside  the route.\n``` php\n$app = AppFactory::create();\nprint \"AAA\";\n$app->get(\"/\", function ($request, $response, $next) {\n    $response->getBody()->write(\"12345\");\n    return $response;\n});\n$app->pipeRoutingMiddleware();\n$app->pipeDispatchMiddleware();\n$app->run();\nprint \"BBB\";\n```\n```\n$ curl --include localhost:8080 \nHTTP/1.1 200 OK\nHost: localhost:8080\nConnection: close\nX-Powered-By: PHP/5.6.17\nContent-Length: 5\nContent-type: text/html; charset=UTF-8\nAAA12\n``\n. Built in PHP server assumes uris containing a dot are static files. This is considered [not to be a bug but a feature](https://bugs.php.net/bug.php?id=61286).\n. I have no problems using PHP internal webserver with Slim 3. However if you add a route containing a dot that will fail. Looking at your request uri it seems to contain a dot/products/qweqwe.123`.\n``` php\nrequire DIR . \"/vendor/autoload.php\";\n$app = new \\Slim\\App;\n$app->get(\"/foo\", function ($request, $response, $args) {\n    return $response->write(\"bar\");\n});\n$app->get(\"/foo.bar\", function ($request, $response, $args) {\n    return $response->write(\"bar\");\n});\n$app->run();\n```\n```\n$ php -S 0.0.0.0:8080 index.php\n$ curl --include http://localhost:8080/foo\nHTTP/1.1 200 OK\nHost: localhost:8080\nConnection: close\nX-Powered-By: PHP/5.6.17\nContent-Type: text/html; charset=UTF-8\nContent-Length: 3\nbar\n$ curl --include http://localhost:8080/foo.bar\nHTTP/1.1 404 Not Found\nHost: localhost:8080\nConnection: close\nX-Powered-By: PHP/5.6.17\nContent-type: text/html;charset=UTF-8\nContent-Length: 887\n...\n```\n. Dot in the url bug is related to internal PHP server not Nginx.\n. @Lewiscowles1986 The title of this bug report is:  \"Routing is incompatible with embedded PHP server and default nginx settings\". \nMy comment points out that @grikdotnet is using dot in the uri which can be seen from the provided var_dump:\n'SCRIPT_NAME' => string '/products/qweqwe.123' (length=20)\nDot in uri is why Slim with embedded PHP server seems to be broken. Slim 3 routing itself is not broken with embedded PHP server. \nAt no point I have been referring to Nginx behaviour in any way.\n\nThe $_SERVER['SCRIPT_NAME'] is set to the URL value, and the routes are not processed with ANY URI.\n\nDoes not seem to be case with PHP 5.6 atleast.\n<?php\nprint_r($_SERVER);\n$ php -S 0.0.0.0:8080 index.php \n$ curl http://localhost:8080/foo\nArray\n(\n    [DOCUMENT_ROOT] => /tmp\n    [REMOTE_ADDR] => 127.0.0.1\n    [REMOTE_PORT] => 55723\n    [SERVER_SOFTWARE] => PHP 5.6.17 Development Server\n    [SERVER_PROTOCOL] => HTTP/1.1\n    [SERVER_NAME] => 0.0.0.0\n    [SERVER_PORT] => 8080\n    [REQUEST_URI] => /foo\n    [REQUEST_METHOD] => GET\n    [SCRIPT_NAME] => /index.php\n    [SCRIPT_FILENAME] => /tmp/index.php\n    [PATH_INFO] => /foo\n    [PHP_SELF] => /index.php/foo\n    [HTTP_HOST] => localhost:8080\n    [HTTP_USER_AGENT] => curl/7.43.0\n    [HTTP_ACCEPT] => */*\n    [REQUEST_TIME_FLOAT] => 1459350222.3006\n    [REQUEST_TIME] => 1459350222\n)\n. In any case if I understand this bug report there the problem @grikdotnet describes is that he wishes Slim 3 routing to work without adding the following to nginx.config\nlocation /  {\n   try_files $uri $uri/ /index.php$is_args$args;\n}\nAm I correct?\n. @schnittstabil Now that is a good example of understandable bug description.\nSo in one sentence: routing fails with builtin PHP webserver if script filename is something else than index.php.\n. I think CORS does not belong to core.There already are couple of middlewares,  including mine which uses neomerx/cors-psr7 for heavy lifting. However the OPTIONS problem @geggleto mentioned is real.\nBTW. Slim already has some code in place for OPTION magic. You do not need to specify and OPTIONS route to get a list of allowed methods. However I think it is not possible to access the list of allowed methods in middleware. It is only outputted in the error handler.\nIn one sentence what is needed is a way for a middleware to know which HTTP verbs are defined for a given and/or current route.\n. The Authorization header thing is not related to Slim. It is considered a PHP feature. If you send anything else than a valid Authorization: Basic header it will not be available to PHP without the .htaccess workaround. Or it is, but only using apache_request_headers() which is Apache specific.\n. I also think this functionality belongs to main router.\n. I found a way for middleware to get the defined verbs for current routes pattern with the code below.  This works currently without any changes to the router. Note that this is not always the the same as all the defined verbs for current routes uri. However it is close enough for most use cases.\n``` php\nrequire DIR . \"/vendor/autoload.php\";\n$app = new Slim\\App([\n    \"settings\"  => [\n        \"determineRouteBeforeAppMiddleware\" => true,\n    ]\n]);\n$app->add(function($request, $response, $next) {\n    $pattern = $request->getAttribute(\"route\")->getPattern();\n$methods = [];\nforeach ($this->router->getRoutes() as $route) {\n    if ($pattern === $route->getPattern()) {\n        $methods = array_merge_recursive($methods, $route->getMethods());\n    }\n}\n\n$response = $response->write(print_r($methods, true));\nreturn $next($request, $response);\n\n});\n$app->get(\"/api/{id}\", function($request, $response, $arguments) {\n});\n$app->post(\"/api/{id}\", function($request, $response, $arguments) {\n});\n$app->map([\"DELETE\", \"PATCH\"], \"/api/{id}\", function($request, $response, $arguments) {\n});\n$app->run();\n```\n```\n%curl --include http://localhost:8080/api/xxx\nHTTP/1.1 200 OK\nContent-Type: text/html; charset=UTF-8\nContent-Length: 76\nArray\n(\n    [0] => GET\n    [1] => POST\n    [2] => DELETE\n    [3] => PATCH\n)\n``\n. Just tested and seems to work.\n. IMO current behaviour is correct. Slim instance itself is accessed viahttpand the scheme is set tohttp`. If you want to override the scheme via user settable header it can be done with middleware.\nphp\n$app->add(function($request, $response, $next) {\n    $scheme = $request->getHeader(\"X-Url-Scheme\")[0];\n    $uri = $request->getUri()->withScheme($scheme);\n    $request = $request->withUri($uri);\n    return $next($request, $response);\n});\nHowever one should note that user settable headers are not really trustworthy.\n. Browser makes request to  Cloudflare proxy over https. Cloudflare proxy makes request to Slim instance over http. Thus Slim instance is accessed over http. This is if you are using their Flexible SSL offering.\nhttps://www.cloudflare.com/ssl/\nIf you are using their Full SSL or Full SSL strict the traffic between Cloudflare proxy and your webserver will be over https and the problem you described most likely does not exist.\n. http://www.slimframework.com/docs/objects/router.html#route-names\nYou need to give your route a name. Ie something like:\nphp\n$app->get('/hello/{name}', function ($request, $response, $args) {\n    $url = $this->router->pathFor(\"hello\",[\"name\" => \"world\"]); // $url is \"/\"\n    $response->write(\"<a href='$url'>Home</a>\");\n    $response->write('Hello, ' . $args['name']);\n    return $response;\n})->setName('hello');\n. You could also test your code with internal PHP webserver.\n. If you are trying to have both hardcoded routes and route with named argument you can put the hardcoded routes first.\n``` php\n$app->get(\"/wireframes/foo/\", function ($req, $res, $args) {\n   print \"foo\";\n});\n$app->get(\"/wireframes/{page}/\", function ($req, $res, $args) {\n    if( / page exists /) { \n        print $args[\"name\"];\n    }\n});\n```\n. You can return 404 response when needed.\n``` php\n$app->get(\"/middleware/foo\", function ($request, $response, $args) {\n    return $response->write(\"foo\");\n});\n$app->get(\"/middleware/{name}\", function ($request, $response, $args) {\n    if (\"fiddlefaddle\" === $args[\"name\"]) {\n        return $response->withStatus(404);\n    } else {\n        return $response->write($args[\"name\"]);\n    }\n});\n```\nAnother option is to throw an NotFoundException.\nphp\n$app->get(\"/middleware/{name}\", function ($request, $response, $args) {\n    if (\"fiddlefaddle\" === $args[\"name\"]) {\n        throw new \\Slim\\Exception\\NotFoundException($request, $response);\n    } else {\n        return $response->write($args[\"name\"]);\n    }\n});\n. I also agree unused use statements should be removed. I think the problem with the PR was that it does too many things at once. I would break it down to separate PR for example for PHPDoc fixes and one for removing the use statements.\n. Probably should ask from Carbon people.\nhttps://github.com/briannesbitt/Carbon\n. Since they are just plain old HTTP it is possible already to serve SSEs with Slim. Let's assume you have the following JavaScript.\njavascript\nvar source = new EventSource(\"/events\");\nsource.onmessage = function(event) {\n    console.log(event.data);\n};\nSimple SSE route would look like this.\nphp\n$app->get(\"/events\", function ($request, $response, $arguments) {\n    $data = time();\n    return $response\n        ->withHeader(\"Content-Type\", \"text/event-stream\")\n        ->withHeader(\"Cache-Control\", \"no-cache\")\n        ->write(\"data: {$data}\\n\\n\");\n});\nHowever this closes the connection and it makes EventSource automatically reconnect every three seconds which effectively makes it polling.\nIt is possible to make the /events route to stream the data by not using PSR-7 and going into a loop. However this is a bit kludgish and not the best thing to do with Apache. It will also eat up you maximum concurrent connections.\nphp\n$app->get(\"/events-loop\", function ($request, $response, $arguments) {\n    header(\"Content-Type: text/event-stream\");\n    header(\"Cache-Control: no-cache\");\n    ob_end_clean();\n    ob_implicit_flush();\n    while (true) {\n        $data = time();\n        print \"data: {$data}\\n\\n\";\n        usleep(1000000);\n    }\n});\nYou also need to turn off PHP buffering in .htaccess file for this to work.\nphp_value output_buffering Off\n. Have you defined the route you are trying to access?\n. Have you given the route a name with ->setName(\"foo\")? Seeing the route definition would be helpful.\n. You have not defined a name for the /login route. For  $request->getName() to return a value you need to call ->setName(\"foo\") for the given route. For example:\nphp\n$app->get(\"/login\", function($request, $response, $arguments) {\n    return $response;\n})->setName(\"login\");\nHowever I have a feeling you are looking for request path.\n``` php\n$app->add(function($request, $response, $next) {\n    $response = $next($request, $response);\n    $path = $request->getUri()->getPath();\n    $response = $response->write(print_r($path, true));\n    return $response;\n});\n$app->get(\"/login\", function($request, $response, $arguments) {\n    return $response;\n});\n```\n```\n$ curl --include http://0.0.0.0:8080/login\nHTTP/1.1 200 OK\nHost: 0.0.0.0:8080\nConnection: close\nX-Powered-By: PHP/5.6.17\nContent-Type: text/html; charset=UTF-8\nContent-Length: 6\n/login\n``\n. What is the actual problem in here?\n. Just$ composer require slim/slimis enough.\n. You probably should ask in [dflydev/dflydev-fig-cookies](https://github.com/dflydev/dflydev-fig-cookies) instead.\n. See [routing helpers](http://docs.slimframework.com/routing/helpers/) in documentation.\n. What content type you are submitting? IIRCapplication/x-www-form-urlencodedis needed for PHP to populate$_POST. Can you provide curl commandline example request.\n. Look for differences in server config between local and live environments. For example [enable_post_data_reading](http://php.net/manual/en/ini.core.php#ini.enable-post-data-reading).\n. BTW. The code you show and the response with curl request do not match.  The curl request requests something which callsprint_r()and notvar_dump()`.\nvar_dump([]) yields:\narray(0) {\n}\nprint_r([]) yields:\nArray\n(\n)\n. http://www.slimframework.com/docs/objects/router.html#route-names\n. Also /test/ and /test  are two different routes.\n. I do not know what you are trying to achieve, but I would just keep the {locale} in the route. It will make life much easier.\n. Both seem to work fine.\n``` php\nrequire DIR . \"/vendor/autoload.php\";\nuse \\Slim\\App;\n$app = new App();\n$app->get(\"/i18n\", function($request, $response, $args){\n    echo \"i18n working\";\n});\n$app->run();\n```\n```\n$ curl --include http://localhost:8080/i18n\nHTTP/1.1 200 OK\nHost: localhost:8080\nConnection: close\nX-Powered-By: PHP/7.0.11\nContent-Type: text/html; charset=UTF-8\nContent-Length: 12\ni18n working\n```\n``` php\nrequire DIR . \"/vendor/autoload.php\";\nuse \\Slim\\App;\n$app = new App();\n$app->get(\"/I18n\", function($request, $response, $args){\n    echo \"I18n working\";\n});\n$app->run();\n```\n```\n$ curl --include http://localhost:8080/I18n\nHTTP/1.1 200 OK\nHost: localhost:8080\nConnection: close\nX-Powered-By: PHP/7.0.11\nContent-Type: text/html; charset=UTF-8\nContent-Length: 12\nI18n working\n``\n. How does your.htaccessfile look? What do you see inaccess_loganderror_logwhen you request/i18n.  Do you actually request/i18nor something else for example/i18n/. Do you actually call$app->run()` somehwere in your code.\nAlso define \"does not work\".\n. BTW what is the reason ->head(...) shortcut is not implemented?\n. After using http://httplug.io/ for a while I also have also become fan of things like ResponseFactory and RequestFactory. Especially when combined with autodiscovery.. This code is good example why factories are useful. As @geggleto said the instantitation of PSR-7 objects is not standardized.\nhttps://github.com/php-http/message/tree/master/src/MessageFactory. For reference there is currently two PSR-17 implementations supporting Slim. Mine is for slim/slim and the second one is for slim/http.\nhttps://github.com/tuupola/http-factory\nhttps://github.com/http-interop/http-factory-slim\nHTTP Interop also provides integration tests.\nhttps://github.com/http-interop/http-factory-tests. There are many userland cache implementations. Read about couple of them and choose one which suits your coding style the best.\nhttps://packagist.org/search/?q=cache\nhttp://www.php-cache.com/en/latest/\n. https://github.com/php-http/psr7-integration-tests. It would be helpful if you also provided minimal runnable code which reproduces the problem. Currently I can see your code and understand the problem, but to actually reproduce it I would need to write quite much additional code.. Example curl request and result of the actual misbehavingDELETE request would be helpful.. To check for PSR-2 run either $ composer phpcs or $ vendor/bin/phpcs in Slim folder.\nhttps://github.com/slimphp/Slim/blob/3.x/composer.json#L55. See https://github.com/slimphp/Slim/issues/1396.. Sounds like a bug to me too. I understand PSR-7 says that if headers contain either:\nX-Foo: hello\nX-Foo: world\nor\nX-Foo: hello,world\nThen $request->getHeader(\"X-Foo\") should return [\"hello\", \"world\"] and \n$request->getHeaderLine(\"X-Foo\") should return hello,world.\n. FWIW this is also one part which fails on the PSR-7 integration tests.\nhttps://gist.github.com/tuupola/5992c962f07068c4f4e3333c29d986fa. Although I think using nullable return types is a bad idea, I am also proponent of going directly with 7.1.. Do you actually pass the stub to yourProvidersService somewhere?. See https://github.com/slimphp/Slim/issues/2163. It is because you are receiving one Accept header with concatenated values. If you receive multiple headers it will return array with multiple headers.. @adjenks I am well aware of the the RFC and that is how I also originally understood it. However as @geggleto explained we cannot just blindly explode with commas since comma is a valid character in a header value. This is quite confusing part of the RFC.\n\nI guess it is a \"Slim\" framework.\n\nThis is also how Diactoros works.. Just out of interest. Is a windows PHP feature or is there something specific in your setup which causes the string(0) \"\" value to appear in HTTP_AUTHORIZATION?. It probably would be cleaner to use empty().. I would try disabling the Content-Length header to see if there is more unexpected JSON in the response and the header itself is off by one for some reason. . I would try the following:\n$ composer self-update\n$ composer clear-cache\n$ mkdir test\n$ cd test\n$ composer require slim/slim. onAddSubscriber is not part of Slim. I would look at the file  /var/www/clients/client2/web16/web/API/functions_subscriber.php suggested by the error message. . This is not a Slim issue but general configuration issue. If Apache document root is set to <path>/src/public/ then use RewriteBase /. If Apache document root is <path> the use RewriteBase /src/public/. \nIe. check what the document root actually is: var_dump($_SERVER['DOCUMENT_ROOT']);.\nThat said if document root is <path>/src/public/ ie the folder where main index.php is located the default .htaccess from documentation should work ok, no need to set RewriteBase.\n. FWIW:\n```\n$ curl --include --insecure --request OPTIONS  --header \"Origin:  https://alpha.infirma.pl\" https://api.infirma.pl/2.6.0/dummy/backend\nHTTP/1.1 200 OK\nDate: Tue, 02 Jan 2018 10:17:50 GMT\nContent-Type: text/plain;charset=UTF-8\nContent-Length: 20\nConnection: keep-alive\nAccess-Control-Allow-Headers: Content-Type, Authorization\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE\nAccess-Control-Allow-Origin: *\nAllow: GET\nServer: IdeaWebServer/v0.80\ncurl: (18) transfer closed with 20 bytes remaining to read\n```. Default PHP way for this is this. \nGET /api/users?id[]=1&id[]=2\nI do agree your example would be cleaner. Personally I use something like following.\nGET /api/users?id=1,2,3\n. Slim does the  least surprising thing, ie. behaves the same way as vanilla PHP.  If developer wishes to implement some different behavior a middleware would be perfect place to do it.. For tunneled requests these could be derived from X-Forwarded-Port and X-Forwarded-Proto. Not sure if it is the best idea to trust them by default, nor if ngrok sets these. I do know that atleast Cloudflare sets them them when using SSL proxying.. Agreed. This is probably good fit for Slim 4.  See #2175.. Are you sure there really is a POST route defined for /invoices/proforma? Assuming value of RESOURCE_PATH is invoices then shouldn't this:\nphp\n$app->post(RESOURCE_PATH, '/proforma', function (\\Slim\\Http\\Request $request, \\Slim\\Http\\Response $response){\nbe something like this instead:\nphp\n$app->post(RESOURCE_PATH . '/proforma', function (\\Slim\\Http\\Request $request, \\Slim\\Http\\Response $response){\n. Slim already works when running from a subdirectory. I do it all the time. Just need to set the RewriteBase in .htaccess file. For example for the above example it would be:\nRewriteBase /myapp/. @l0gicgate I don't have any strong feelings about that. \nHowever one cannot get rid of RewriteBase. It is not about prefixing Slim urls. It is about telling Apache where to find the index.php file.\nLets assume the document root is /var/www/public and Slim app is in subfolder foo. \n/var/www/public\n/var/www/public/foo\n/var/www/public/foo/.htaccess\n/var/www/public/foo/index.php\nphp\n$app = new \\Slim\\App;\n$app->get(\"/hello\", function ($request, $response, $args) {\n    print \"Hello!\";\n});\n$app->run();\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^ index.php [QSA,L]\nWithout RewriteBase when request is made to https://example.com/foo/hello Apache tries to access /var/www/public/index.php which is wrong. You will get a 404 response from Apache with something like:\nThe requested URL /var/www/public/index.php was not found on this server.\nWith RewriteBase when request is made to https://example.com/foo/hello Apache accesses /var/www/public/foo/index.php which is correct and you will get a response from Slim.\nRewriteEngine On\nRewriteBase /foo/\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^ index.php [QSA,L]\nSince RewriteBase is anyway needed  I am not sure if another setting is needed? Maybe for Nginx and other servers? . For Apache all you need to do is to add RewriteBase directive to the default Slim config. Works with both Slim 2 and Slim 3. I have been running Slim like this since the beginning.\nExample of an .htaccess from one of my live projects. Slim is installed to folder named foo.\n```\nRewriteEngine On\nRewriteCond %{HTTPS} off\nRewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R,L]\nRewriteBase /foo/\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^ index.php [QSA,L]\n```\nThe .htaccess must in the same folder where Slim's main entry point is. In the example below /var/www/public is Apache main document root. Slim app files are simply copied to foo folder under the document root. Slim app is accessible at example.com/foo/ url.\n/var/www/public\n/var/www/public/foo\n/var/www/public/foo/.htaccess\n/var/www/public/foo/index.php\n/var/www/public/foo/src\n/var/www/public/foo/vendor\nSince it is bad habit to have vendor and src publicly accessible and maybe you use deployer for deploying the app, directory structure might look like this:\n/var/www/public\n/var/www/deployer/foo\n/var/www/deployer/foo/public/.htaccess\n/var/www/deployer/foo/public/index.php\n/var/www/deployer/foo/src\n/var/www/deployer/foo/vendor\nWith above folder structure /foo/public must also be aliased as /foo in Apache config.\nAlias /foo/ /var/www/deployer/foo/public/\nNow source code is outside document root but Slim app is still accessible at example.com/foo/ url.\n. IMO each source file should contain the license information. Then it is implicit what is licensed and with which license.. Unix newlines are in PSR-2 standard which Slim says it follows. Everybody should use the same newlines. Otherwise diff will be borken.\n. ",
    "sachinvrg": "try this one in your .htaccess\nRewriteEngine On\nRewriteCond %{HTTP:Authorization} ^(.)\nRewriteRule . - [e=HTTP_AUTHORIZATION:%1]\nmay be it helps you.\n. ",
    "erjatingro": "$_SERVER[REDIRECT_HTTP_AUTHORIZATION] showing value of Authorization. ",
    "nicogranelli": "Well, while I was trying to create an example I found the problem: one of the files I require (with \"require_once\") had an utf8 format but with BOM. In notepad++ you have 2 uft8 option, with or without BOM. It seems that this BOM if what was causing my problem. \nNow I will have to try this modification in my real project, but I'm pretty sure this is the source of the problem.\n. ",
    "KampfCaspar": "As the error handler now is active only while the app is 'run' I disabled the respective unit test.\n. got its own branch\n. By sending a Slim_Http_Response object 'down the onion', NOTHING has to be sent back up. One can inspect the Response object which will expose the current status/headers/body.\n. Probably Slim_Http_Stream could be incorporated into Slim_Http_Response? The whole 'response logic' should be the same, whether it prints a string directly or delegates the printing to some helper object.\nNow, whether to encapsulate strings into their own helper object? That's probably not necessary... middleware should not inspect the 'helper output' anyway, as this output may be very large or only gettable once. As for the API of the response object, I think it would be sufficient to expose both string (maybe empty) and the helper object (which may be inspected but not read).\n. I don't follow... Logically, replacing a value in a triplet and e.g. calling setStatusCode() is the same. Middleware can completely meddle with the result as it wants. But as there can logically be only one response a single instance should suffice.\n. ",
    "jbrower": "I'm curious as to why the content-length is being set by PHP?  If you are using php-fpm (running php externally via cgi or fcgi) this will cause a lot of issues.  Does anyone know why content-length is being specified by php?\n. If you'd like, I can assist with testing/bugshooting.\n. I look forward to it.  Also, do you know why content-length was being set? It might be ok to just let the content-length not be included in the response.\n. It seems to me like setting the content-length is something that falls squarely in the realm of the webserver.  By leaving it up to the webserver, it can either send things with whatever transfer encoding it feels best works for the connecting client.  Chunked for example.  If you are forcing a content-length to be sent, a lot of that usefulness is lost.  When I commented out the lines setting the content-length, my php-fpm issues disappeared and I saw things transfering properly without prematurely killed connections.\n. ",
    "rodrigorm": "+1\n. I think this examples from docs work for you:\nPHP\n$authenticateForRole = function ( $role = 'member' ) {\n    return function () use ( $role ) {\n        $user = User::fetchFromDatabaseSomehow();\n        if ( $user->belongsToRole($role) === false ) {\n            Slim::flash('error', 'Login required');\n            Slim::redirect('/login');\n        }\n    }\n}\n$app = new Slim();\n$app->get('/foo', $authenticateForRole('admin'), function () {\n    //Display admin control panel\n});\n. Sorry, after posting I read your condition of PHP < 5.3.\nMaybe a object works better:\n```\nclass MyMiddleware {\n    protected $args;\nstatic public function setup($args) {\n    return array(new MyMiddleware($args), 'run');\n}\n\nprivate function __construct($args) {\n    $this->args = $args;\n}\n\npublic function run() {\n    echo $this->args;\n}\n\n}\n$app->get ('/',  MyMiddleware::setup('string'), 'handler');\n```\n. ",
    "kinncj": "Not a problem to me begin with just like a fork of Slim, supporting namespaces...\nI see that you read the \"readme\", so, you saw that the tests was broken and that the community will contribute with this...\nThanks for your appreciationm not a problem with the negative pull request...\nMaybe when 5.4 comes and 5.2 down, we can maintain a version with namespaces and a 5.4 with some traits architecture...\nThanks yet.\n. Like we talk over mail, the README was updated with the MIT instead of LGPL license.\nThe links to slim repository was updated too, but i remove the links to installation, support and others... i don't have any kind of wiki to namespaced version...\nCan we do the same with the extensions?\n. I don't know where do you whant the link to the Repository, it's in all the readme... i create a new section for this, so, another link to this.\nThe copyright statements still the same, just added the @author property to files with namespaced to my progile.\nthe link to twitter was added ;)\nsomething more? \n. ",
    "jozydapozy": "I don't use git, but when I download the latest dev-version (this zip-file: https://github.com/codeguy/Slim/zipball/develop) the problem still occurs.. \nThis is my index.php:\n``` php\n<?php\n    require 'C:/xampp/phplibs/slimdevnew/Slim.php';\n$app = new Slim(\n    array(\n        'debug' => false\n    )\n);\n\n$app->get('/', function () {\n    echo \"index\";\n});\n\n$app->get('/contact/', function () {\n    echo \"contact-page\";    \n});\n\n$app->run();\n\n```\nand when I go http://localhost/contact (no slash!!) I'm redirected to http://contact/\n. You're right! Bug seems to be solved in release-1.6.1 ! Great! Thank you!\n. ",
    "bencevans": "@codeguy Are you adding it to http://packagist.com ?\n. Cheers :)\n. ",
    "zekenie": "I've implimented the code you provided and I'm still getting the 403 error. Any advise?\n. Yeah, emulate JSON is turned off. I think there's something not working right with apache.\n. ",
    "wheresrhys": "Do you have emulateJSON turned on in backbone? It should be off. Other than that I can't offer any advice really, apart from maybe to check against my htaccess and httpd.conf settings http://stackoverflow.com/questions/9422210/setting-up-a-restful-service-for-backbone-js-with-apache-and-windows\n. @skoczko cheers for the positive response\nThe patch is correct though: x-http-method-override gets converted (by SLIM?) to x-method-override by the time it arrives at this function, which is why I check for x-method-override\n. Great - thanks :)\n. ",
    "skoczko": "Guys, any move on this, would be very good to get it to the development branch since it's such a tiny thing. I think 'wheresrhys' patch has a problem though -- the header is x-http-method-override not x-http-method\n. Yes -- I checked Slim's source and it seems to be both translating \"-\" into \"\" and stripping any \"HTTP\" (not even a leading one!!) from the key's value in the Request#header method. This is simply not gonna fly as the header is literally 'X-HTTP-Method-Override'. I hate when frameworks do such things behind your back. Anyhow, you can read the original header from $env and in the devel version it's possible to specify 'middlewares' a sort of filtering classes. Here's what I did for the x-http-method-override/x-method-override:\nclass HeaderMethodOverride implements Slim_Middleware_Interface {\n  public function __construct($app, $settings = array()) {\n    $this->app = $app;\n    $this->settings = $settings;\n  }\npublic function call( &$env ) {\n    if (isset($env['REQUEST_METHOD']) && $env['REQUEST_METHOD'] === 'POST' ) {\n      $method = null;\n      if (isset($env['X_HTTP_METHOD_OVERRIDE']))\n        $method = $env['X_HTTP_METHOD_OVERRIDE'];\n      else if (isset($env['X_METHOD_OVERRIDE']))\n        $method = $env['X_METHOD_OVERRIDE'];\n      if ($method) {\n        $env['slim.method_override.original_method'] = $env['REQUEST_METHOD'];\n        $env['REQUEST_METHOD'] = strtoupper($method);\n      }\n    }\n    return $this->app->call($env);\n  }\n}\n$app->add('HeaderMethodOverride');\n. ",
    "gpoole": "Working with Slim dev-master I've noticed that the MethodOverride middleware appears to expect that HTTP_ will be stripped off $SERVER vars, but it looks like in Environment the part that strips HTTP off certain vars has been commented out or replaced somehow. As a result it doesn't seem to be correctly interpreting X-HTTP-Method-Override anymore; it's looking for $_SERVER['X_HTTP_METHOD_OVERRIDE'] but the variable is in $_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE']. Can anyone confirm this or am I looking at the wrong thing?\n. ",
    "holic": "It's better practice to use:\ntry_files $uri $uri/ /index.php?$query_string;\nThe try_files directive can be used both in a server and location contexts, though most applications will put it in their server context.\n. This will skip any existing files/directories.\n. ",
    "ryh": "how to skip the 'assets'  folder or  '.png'  files from routing ?\nthanks\n. ",
    "smagch": "/index.php?$query_string; works perfectly on my environment. I have several index.php files.\nindex.php\n+ api\n  - index.php\n+ v\n  + dev\n    - index.php\nSo I configured like following\n```\nlocation / {\n    try_files $uri $uri/;\n}\nlocation /api {\n    try_files $uri /api/index.php?$query_string;\n}\nlocation ~ .php$ {\n    include fastcgi.conf;\n    fastcgi_pass   127.0.0.1:9000;\n}\n``\n. At the moment, Slim doesn't allow Middlewares to stop application. Let's say there is aMyMiddleware` that can possibly throw a exception. And you want to stop app with a custom status code and a body.\n``` php\nclass MyMiddleware extends \\Slim\\Middleware\n{\n    public function call()\n    {\n        try {\n            // something could possibly go wrong\n        } catch (\\Exception $e) {\n            $app = \\Slim\\Slim::getInstance();\n            // I know 10000 is invalid status code. It's just a example.\n            $app->halt(10000, 'Hello. Nice to meet you');\n            return;\n        }\n        $this->next->call();\n    }\n}\n$app = new \\Slim\\Slim();\n$app->add(new MyMiddleware());\n$app->run();\n```\nBut the response is always 500 Internal Server Error because \\Slim\\PrettyException catches \\Slim\\Exception\\Stop. So I think it would be nice to move this top level try catch to inside run() in order to allow Middlewares to stop application.\n. -1\nYou are just replacing spaces to tabs. As you can see here, Slim follows PSR-2 standards which MUST use 4 spaces for indenting, not tabs.\n. +1\nI'm currently doing exactly the same way in my nginx.conf. The first time I set up nginx, it takes a hour to solve this problem.\n55\n. -1\nANY is not HTTP method. It's inconsistent with current API. I can't see the use case for that. You can use ->map() and ->via(). http://docs.slimframework.com/#Custom-HTTP-Methods\nphp\n$app->map('/any', function() {\n    echo 'call me via any HTTP method';\n})->via('GET', 'POST', 'DELETE', 'PUT', 'OPTIONS');\n. Ah, I hadn't run into a situation that I want to map all method. But it seems reasonable in a certain case. I've just looked into Respect/Rest which has an any feature. \n. ",
    "stfairy": "See http://mwop.net/blog/245-Autoloading-Benchmarks.html\nCompare the results of class map (__DIR__) and SPL closure, under both no-opcode-cache and with-opcode-cache conditions. When there is no opcode cache, SPL closure seems better. However, when there is opcode cache, class map outperforms SPL closure.\nBut also see http://stackoverflow.com/questions/1396501/do-php-opcode-cache-work-with-autoload#answer-1396538\nMaybe by using APC the results will be relatively close to each other. You may feel free to close this issue because I think the difference may not be that big now. :-)\n. If you DO mean to execute B before A, why not put the second line above your first line?\n. You may use hooks, especially one of the default hooks which is called slim.before.router.\n. I think the real problem is that you have to match routes one by one against a given path. Even though you have that inner routes, you still have to go through these routes which might be slow. So I think a more practical and general solution to this issue is to construct a DFA for routing when you run the app. However such kind of things seems suitable for C extensions rather than PHP itself.\n. Good news. So you may close this issue now. :-)\n. ob_get_clean() essentially executes both ob_get_contents() and ob_end_clean(). Once you reach line 1174, it will be the last time writing to the response,  so I think there's no need to call ob_end_clean() and ob_get_contents() is just fine.\n. You cannot be sure about that. Compilers will do optimizations but you never know that. Anyway, the size of the body is relatively small and will be garbage collected as soon as you finish the request processing. So I think it doesn't matter. :-)\n. Isn't it better if no HEAD routes matched, defaults to the GET ones?\n. ",
    "AlexandraK": "that works, but if you want to implement some kind of plugin system in your application, and allow plugins to map routes, then this can cause problems\n. ok :P\n. I did a test by mapping 1000 routes and the performance hit is not the big, even if you iterate trough all of them on each page load (+ ~0.1s), so I guess it's ok to map many routes :P\n. oh nvm, actually it doesn't, I had it in my source :)\n. yes, but isn't the output kept twice in memory? In both the output buffer and the body property of \"response\"\n. ",
    "JohZap": "Hi, sorry for the off-topic.\nAnk, could you please contact me via e-mail? I need to ask you something, thanks in advance! :)\n(keystrange@gmail.com)\n. ",
    "alganet": "The HTTP protocol states exactly this. A HEAD request should be identical as a GET request but without body. This means the same headers should be sent, and if the user sends a header inside the application this header should be sent as well.\nA separate overriding of this behavior declaring a custom head method though is desirable for users who want to tweak the application performance to not run the routed function.\n. ",
    "ralphschindler": "Out of curiosity, how do you feel about this:\nhttps://github.com/codeguy/Slim/blob/release-1.6.3/Slim/Slim.php#L34-L56\nand moving that out into the index.php?\n-ralph\n. ",
    "h9k": "Thank you very much. I can confirm that it fixes the issue :)\n. ",
    "mfprimo": "Done.\n. ",
    "earlyburg": "Hello:\nPlease see my answer at Stack Overflow\nhttps://stackoverflow.com/questions/50504074/how-can-i-use-slim-micro-framework-inside-drupal/54674133#54674133\nA load function can be used\nrequire 'vendor/autoload.php';\nfunction my_modulename_menu() {\n   $items['my/page/%my_modulename_somefunction'] = array(\n    'page arguments' => array(2),\n    'access arguments' => array('access content'),\nreturn $items;\n}\nfunction my_modulename_somefunction_load($var) {\n$app = new \\Slim\\App;\n   $request = request_path(); // set the Drupal request object here\nif ($_SERVER['REQUEST_URI'] == \"my/page/\" . $var) {\n  $app->get('/my/page/{passed}', function ($request, $response, array $args) {\n\n  $stuff = $args['passed']\n\n  // do something with your data here\n\n  return $response->withJson($stuff);\n\n});\n\n$app->run();\nexit;\n\n}\n}\n. ",
    "lsv": "No problem, Just wanted to push it so other could use it :)\n. ",
    "williamwa": "Hi,\nMy change mainly fix this problem: try doing this in your code:\n$app->render('css.php',array('template'=>'abc'));\nthe $template in the css.php file, is 'css.php' not 'abc'\nthanks\n. Hi, please check this new commit, it add a method: fetch to solved the problem.\n. and user can visit the site like this way:\nhttp://site/slim-url?lang=zh_CN to see its Chinese language interface\nthanks!\n. ",
    "fatmuemoo": "Why is templatePath deprecated?\n. ",
    "urosgruber": "isn't this a dupe of #233 ? Render method of a View outputs rendered template. Why double return it?\n. https://gist.github.com/2669367\nand then add it with $app->add(new \\SB\\Middleware\\JsonDecode());\nIt's the only middleware I add.\n. Just found the source of my problem. It was that echo of json_encode and headers were already sent and the code in Slim run function didn't go through setting headers at all. Maybe you could add to doc about not using echo inside middleware.\n. Yes I change only one line and add error msg with app->response->body() instead of echo.\n. Hmm, still something missing or better say broken. I noticed that MethodOverride middleware is added inside Slim. And because I alter $env'slim.input' methodOverride doesn't get string from it. \nMy basic idea is that API I'm building should always parse and decode json from raw input on POST and PUT. So there is no need to do this in every controler. And then I can use just  $app->request()->getBody() to get this json decoded object.\nDo you think my approach is ok or there is better way to get this work.\n. It executes $req->post() which is where things breaks. It tries to parse it with  mb_parse_str where the code return Slim error.\n\"mb_parse_str() expects parameter 1 to be string, object given\"\n. My application do send application/json header but when I was testing the API on the server I probably forgot to add this header in curl request and then this issue pops out. If Slim works that way then it's perfectly ok. My mistake while testing, but still nice you add this extra check. Thank you for your help. \n. ",
    "ArneTR": "I need to correct the issue:\nIt still exists and I cannot load some routes, even with RewriteBase etc. stated.\nHowever, switching to REQUEST_URI does not solve the problem, cause it prevents some static files to load.\nHere is the code that led to the problem:\nindex.php:\nrequire 'Slim/Slim.php';\n$app = new Slim();\nrequire dirname(FILE).'/functions.php';\nrequire dirname(FILE).'/logs.php';\n$app->run();\n/* The logs.php runs fine and has virtually the same code as the checks.php\n*/\nfunctions.php:\n$app->get('/functions/', function () use ($app) { //$app is not set, cause SLIM loads file directly\n  $app->render(\n    '/functions/overview.php', array('author' => 'arne')\n    );\n});\n. Sry, my bad\n. ",
    "buggy": "It sounds like you have MultiViews enabled in your Apache config file. If you do then disabled it and try again.\n. ",
    "jjt": "I'm the poster of that forum thread.\nSame behaviour when using $app->response()->body($output) instead of the echo statement, and same when using an anon routing  function instead of a named one.\n. Emailed.\n. ",
    "gurumike": "I saw this in the support forum; that looks like HTTP chunked transfer encoding.  It's correct output, as long as the proper transfer encoding HTTP header is set.  The client is responsible for decoding that.  It's possibly a configurable setting on your web server.\nFor apache, this might help:\nhttp://serverfault.com/questions/59047/apache-sending-transfer-encoding-chunked\nFor decoding with PHP, see:\nhttp://us.php.net/manual/en/function.http-chunked-decode.php\n. ",
    "miraage": "Okay. I will open new Pull Request this week.\n. Will be done ;)\n. https://github.com/miraage/Slim-Extras/blob/master/Middleware/CsrfGuard.php\nLook at this. I think to create constants named like CSRF_KEY and CSRF_TOKEN because sometimes we don't need views (for example ajax put request).\nWhat can you say about this?\n. Pushed by Silentworks.\nClosing this.\n. Seems to be my local problem.\nEnvironment mocked two times (SlimTest::setUp)\n. Whooooops class#method support should not be attached to this pull request :(\n. Aren't they look for slim.input like a post() current version?\nI wrote unit tests for Slim, and my slim.input data in Slim_Environment::mock was correctly recognized on PUT request.\n. Tested now. Really strange. Maybe I have performed tests on develop branch (don't remember).\nSeems to be really buggy.\n. Imho this feature is not nessesary. I think you will be asked for moving your issue to Slim-Extras.\n. Don't forget about:\n\nSlim is purposefully small and simple with a very slim codebase. Slim encourages configuration and customization over convention.\n\nVia http://www.slimframework.com/ask\n. Are you using NGINX?\n. Put next .htaccess file into your document root: https://gist.github.com/3096679 (correct RewriteBase option if need)\nHelped you?\n. You are welcome to create new extra view.\nhttps://github.com/codeguy/Slim-Extras/tree/master/Views\n. ",
    "teemobean": "ok thanks\n. ",
    "kmarcisz": "Should it? Every major framework has a support for some basic templating system. While using \"require_once 'header.php';\" might be fine for smaller projects, having a optional default layout speeds up web development by a lot. There's less clutter and code is way more organized.\nMy changes are fully backwards compatible, with tests coverage and provide per view / global layouts. I can't think of a way of setting up custom view to use layout that would not break XML / JSON compatibility. Is there perhaps something I am missing on how to achieve it with custom Views?\n. ",
    "Baachi": "This is a bad idea.\nIf your method static, then you can call it with this:SomeClass::method\n. I like this idea, but i'm not convinced from the implementation.\n@peters Your example will throw a PHP Parse Error ;)\n. Sounds good! :) \n. Can be removed?\n. Useless empty lines here.\n. ",
    "briannesbitt": "Hmm... actually it seems this only fixes some of the issues.  Right now if you do a :\nphp\n$app->get('/', function () use ($app) {\n   echo \"Hello World!<br/>\\n\";\n   $app->stop();\n});\nYou get the \"Hello World!\" string repeated twice in the output when output buffering is on.\nGotta think about this some more.\n. I have a better fix that works for all scenarios with output_buffering off and on.  I'll commit later tonight.\n. I actually want to add some ob init code at the top of the run() call.\nphp\n$this->obContextLevel = ob_get_level();\nThis is necessary to conditionally close the ob in the Stop catch block later as sometimes it gets closed by the ob_get_clean() but during stop(), halt() etc that code doesn't run and the Stop catch must do it.  Unfortunately a lot of the tests don't go through the run() but rather call the call() method directly and forces the Stop catch block to check for isset($this->obContextLevel) which I don't like.\nEasy thing I think is to initialize the $this->obContextLevel in the constructor and then grab it again at the start of the run() incase the user called ob_start() in between the Slim object creation and run() call.... doubt it will happen but might as well.\nAs I said, I'll post later tonight :-)\n. The reason the test \"testStopWithSubsequentOutput()\" passes right now is because it is calling $s->call() rather than $s->run() which is what a real application would do.  When you change the test case to execute $s->run() then the test fails with the double output I mentioned earlier:\nhtml\n1) SlimTest::testStopWithSubsequentOutput\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'Foo'\n+'FooFoo'\nAnyway, this patch should (when I commit in a few minutes) fix both cases with output buffering on or off and fix the stop(), halt() and regular code path.\n. Thumbs up!\n. All that This hook is invoked after the current matching route is dispatched. means is the hook is run IFF (if and only if) a route is matched.  So if the URI requested generates a 404 (not matching a defined route) then this hook is not called.  The hook is only called if a successful route is matched.\nYou could set a variable when the route is called to indicate a new thread should be started, then in the hook you can check for this flag rather than doing all of this parsing again?!?\nI should also mention if you look at the source, all of the code (framework, routes, hooks etc) is ran before the body of the response is actually echo'd to the client.  The echo $body happens as the last statement in the $app->run(); function so I am not sure you will get your desired timing.\nI think you might have to do an implicit flush() after the $app->run() and then (maybe based on a flag being turned on) kick off your worker thread.\n. The \"Response is sent to the client\" just means the code executed the \"echo\" of body contents so you can't add any more to the Slim response body.  That doesn't mean that it has actually left the server and been sent out the socket to the client.   Hence the flush().\n. Thought about this today and I don't like my current implementation.  I don't like how they rely on the phpunit functionality.  They also need to assert that the ob_get_level() is 0 since that was the issue from before... stranded output buffer holding the repeated data that was flushed but the underlying php engine and hence wasn't caught by phpunit tests.\n. Ok so decided to leave the the current tests as is using phpunit expectOutputString().  I still was missing the real issue that caused all of this.  There were output buffers left open as the stop exception code bypassed the ob_get_clean() in the call() method and only made a call to called ob_get_contents() rather than closing the output buffer.  In the spirit of simple unit tests that try to only test one feature I added new tests to ensure there were no open output buffers caused by run(), stop() and halt().  This should provide adequate test coverage of this issue.\n. I don't think this is a Slim issue but rather a PHP dev webserver issue.\nIf you access http://127.0.0.1/he.llo/df\n$_SERVER['REQUEST_URI'] = \"/he.llo/df\"\n$_SERVER['SCRIPT_NAME'] = \"/he.llo/df\"\nWhere as if you access http://127.0.0.1/hello/df\n$_SERVER['REQUEST_URI'] = \"/hello/df\"\n$_SERVER['SCRIPT_NAME'] = \"/index.php\"\nThat smells of server issue not Slim.  Slim will then see this as a url rewrite happening and $env['PATH_INFO'] = substr_replace($_SERVER['REQUEST_URI'], '', 0, strlen($env['SCRIPT_NAME'])); will proceed to set PATH_INFO to \\\nNot to mention if you have a route of $app->get('/he.llo/:name', function ($name) {} that will also match /heAllo/brian as the period is a wilcard in a regular expression so I'd say its generally not a great idea anyway.\n. As I mentioned in the other....\nI don't think this is a Slim issue but rather a PHP dev webserver issue.\nIf you access http://127.0.0.1/he.llo/df\n$_SERVER['REQUEST_URI'] = \"/he.llo/df\"\n$_SERVER['SCRIPT_NAME'] = \"/he.llo/df\"\nWhere as if you access http://127.0.0.1/hello/df\n$_SERVER['REQUEST_URI'] = \"/hello/df\"\n$_SERVER['SCRIPT_NAME'] = \"/index.php\"\nThat smells of server issue not Slim.  Slim will then see this as a url rewrite happening and $env['PATH_INFO'] = substr_replace($_SERVER['REQUEST_URI'], '', 0, strlen($env['SCRIPT_NAME'])); will proceed to set PATH_INFO to \\\nNot to mention if you have a route of $app->get('/he.llo/:name', function ($name) {} that will also match /heAllo/brian as the period is a wilcard in a regular expression so I'd say its generally not a great idea anyway.\n. Going to close this one as https://github.com/codeguy/Slim/pull/418 is the newer.\n. They are implemented the same.  In your notFound handler just echo what you want rendered to the body rather than returning it and it will be added to the reponse.  Take a look at Slim::notFound( $callable = null ) vs Slim::callErrorHandler($argument) rather than the 2 you were looking at as they are serving different purposes.\nYour suggested code changes above would leave whatever was already written to the response body (by middleware or hooks) there.  This is why the new ob is created and ob_get_clean() is used and the halt() is necessary.\n. None of what you are describing I would consider a bug but rather its expected behaviour.\n. Swore I selected \"develop\".  Sheesh!  Let me know I can redo it.\n. Will what return a string or object?\n. I am actually a fan of pass() and would like to augment it (at some point) to pass to a specific named route.  I use it for my personal blog when the post is not found... https://github.com/briannesbitt/nesbot.com/blob/master/routes.php\n. However I have as a to do!!  \"Improve router to return early with first matched route ... get another matched route when/if necessary. (ex. on pass())\".  I was leaving it until this initial PR got pulled in... too many changes at once and too hard to make it a separate PR since it would just conflict so much.\n. While I agree that pass() is not required and, similar to a lot of functionality in Slim, there are many ways to tackle the problem.  I prefer the use of pass() here rather than notFound() as it describes what the code is doing which makes it easier to read.  I actually don't match since I couldn't find the resource required, so I am passing up this route for someone else to handle rather than just assuming its not found.  No condition is able to make that decision and I'd rather not rely on the order of the routes being defined.\nAlso I don't think its as simple as just running dispatch() with the new route as it was not necessarily matched (particularly with your proposed changes of only matching one route) and it would not have its route parameters setup.\n. I was waiting for the \"but\" !  haha  If pass() wasn't there I would probably just throw a notFound.  Really I could go either way since its all doable one way or another.  I guess Josh will be the tie breaker!\nI made a small additional commit to my original branch, but actually I don't think it affects this since you only match one route and set currentRoute accordingly.  This change maintains the reason for my update, which was to make the currentRoute available in the slim.before.dispatch hook.\nAlso I think you can remove the \"protected $matchedRoutes;\" from Router since its not being used.\n. ",
    "pablofierro": "This can be fixed by modifying current() function inside the router class by this:\npublic function current() {\n  return current($this->getMatchedRoutes());\n}\nAny reason why you are not using this ?\n. @codeguy indeed, I understand why it is happening but, if I won't be able to use that method in a middleware, could there be any solution for this ?\n. I'm currently using this to get the current request route:\n$current_route = $app->router()->getMatchedRoutes();\nif($current_route) {\n  $current_route = $current_route[0];\n  $current_route = $current_route->getPattern();\n}\n. I forgot to mention I was defining my routes before adding the middleware, so this works for me.\n. Thanks.\nI ended up using:\n$res->redirect('/foo');\nIs this correct ? or should I be defining the header manually ?\n. ",
    "MirkoBonadei": "Update, reading the documentation, I have found this:\n\"This hook is invoked after the current matching route is dispatched. Usually this hook is invoked only once during the Slim application lifecycle; however, this hook may be invoked multiple times if a matching route chooses to pass to a subsequent matching route.\"\nIt seems that this is invoked on a route matching rule.... But I am not able to find any examples. It seems to be what I am looking for.\n. Many thanks guys. I really appreciated Brian's suggestions and yes, I should set a variable instead of parsing the URL again.\nBy the way, I have not understand why I have to call flush() even if I am using slim.after which says: \"This hook is invoked after output buffering is turned off and after the Response is sent to the client. This hook is invoked once during the Slim application lifecycle.\"\nSo in this case, it seems that the Response has already been sent.\nUsing this hook, timings seems good, but I have to prove it under heavy traffic.\nThanks again.\n. Great. Tomorrow I will do the workaround, because now it works but under heavy load it would help my timings.\n. ",
    "peters": "+1\n. The reason for this is very simple. Since most modern api's today use a X-Auth-Key header in every request, it is very simple to retrieve information about the permissions that specific key has to a given route.\n. You could then do the following also:\n$app->get('/hello/:name', function ($name) {\n    echo \"Hello, $name!\";\n})->permission($flags) {\n    // allowed to access?\n    if($flags->admin & $flags->bla) return true;\n    // throw a default json document error\n    throw $Document->Json->AuthError();\n});\n. Hehe, little quick on the trigger there. I'm implementing this is a middleware component, and i'll create a pull request with tests.. then we could go from there? :)\n. The implementation so far is +/- 100 lines, so the changes will introduce a small footprint.\n. Commits are available here:\nhttps://github.com/codeguy/Slim/pull/328\n. Ok :)\n. I'm creating a middleware for this functionality.. i'll submit a pull request when ready, and we can go from there?\n. Needs improvement, but it's a start :) \nShould i push to the develop branch instead?\n. Sorry about the late feedback, i will provide proper pull requests tonight or tomorrow :)\n. ",
    "ChristianVermeulen": "For me they didn't I var dumped the php://input before Slim is initialised with succes.\nWhen I var dump it on the next line after init it comes up empty.\nAlso when I var dump the $app->request()->parameters(); or put() or post() it remained empty.\nHowever, when I var dumped $app->request() I do see the values in slim.input.\nSo I used that to recover the params that for some reason were lost...\nNote: I send PUT requests to my localhost using the RESTconsole extension for Chrome (https://chrome.google.com/webstore/detail/cokgbflfommojglbmbpenpphppikmonn) Maybe the problem remains in the extension and the way it sends its request values?\n. ",
    "Sorbing": "Sorry , but you can leave a link to the example page?\n. Just give an example of how to run a route on CRON. Please. At the forum, I not found nothing.\n. \u0434\u0430 \u043a\u0430\u043a \u0436\u0435 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0440\u043e\u0443\u0442 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u0432 \u044d\u0442\u043e\u043c \u0447\u0435\u0440\u0442\u043e\u0432\u043e\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0435?!\n. ",
    "Adirelle": "No. Standard Debian packages for Apache2 (2.2.16) and PHP (5.3.3).\nThe setup is done in a \"site\" file (Debian\"s /etc/apache2/sites-/ files) and I'm using the following rewrite rules :\nRewrireEngine On\nRewriteCond %{REQUEST_URI} !^/.+\\.php\nRewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f\nRewriteRule ^/?(.*)$ %{DOCUMENT_ROOT}/index.php/$1 [QSA,L]\nMy index.php file is stored directly in the document root.\nURL containing the script name are working fine but short URLs are causing this warning twice.\nI'm currently trying to use Composer to fetch my project dependencies, including Slim, so I cannot use a modified version (as I was doing until now).\n. On a side note, short URLs are also working fine when the application is hosted into a subfolder .\n. This works fine. However I'm not fond of using .htaccess files.\n. ",
    "deiu": "Thanks! Unfortunately, both suggestions result in URIs that are not 'pretty' and conforming to REST goal of making them easy to read. I'll keep looking.\n. ",
    "thomasbley": "ok, second one:\n``` php\n    const PATTERN_NAME = '#:([\\w]+)#';\npublic function matches( $resourceUri ) {\n    //Convert URL params into regex patterns, construct a regex for this route\n    $patternAsRegex = preg_replace_callback(self::PATTERN_NAME, array($this, 'matchesCallback'), $this->pattern);\n\n    if ( substr($this->pattern, -1) === '/' ) $patternAsRegex += '?';\n\n    //Cache URL params' names and values if this route matches the current HTTP request\n    if ( ! preg_match('#^' . $patternAsRegex . '$#', $resourceUri, $paramValues) ) return false;\n\n    //Extract URL params\n    preg_match_all(self::PATTERN_NAME, $this->pattern, $paramNames, PREG_PATTERN_ORDER);\n\n    foreach ( $paramNames[1] as $name ) {\n        if ( isset($paramValues[$name]) ) {\n            $this->params[$name] = urldecode($paramValues[$name]);\n        }\n    }\n    return true;\n}\n\nprotected function matchesCallback( $m ) {\n    return '(?P<' . $m[1] . '>' . (isset($this->conditions[ $m[1] ]) ? $this->conditions[ $m[1] ] : '[^/]+') . ')';\n}\n\n```\n. Yes, will do it next weekend and also check for the test cases.\n. The 1.65 has the new wildcard matching:\n$_SERVER[\"REQUEST_URI\"] = \"/hello/foo/bar/world\";\n$app = new Slim();\n$app->get('/hello/:foo/*/:bar', function ($foo, $bar) {\nprint_r(func_get_args());\n});\n$app->run();\n=> the function is called with 3 parameters (wildcard is second parameter).\n. 1) I propose named wildcard parameters:\n:name to match a parameter to params[name] as scalar\n:name+ to match a path to params[name] as array\n\"\" to match any path and don't get into params[]\ne.g.\n$_SERVER[\"REQUEST_URI\"] = \"/hello/foo/bar/bar2/world/some-seo-bla\";\n$app->get('/hello/:foo/:bar+/world/', function ($foo, $bar) {\n// $foo = foo\n// $bar = [bar, bar2]\n});\n2) Or use $route->getWildcardParams() together with protected $wildcardParams\n=> I can make a patch for both\n. > not 1:1 with regex connotation, but that's fine\nThat's where I think \"+\" maybe more intuitive. People not reading documentation properly might think of :splat* being an optional parameter.\n. Here is a use case:\ne.g. someone builds a shop: http://www.amazon.de/Samsung-Smartphone-Super-AMOLED-Touchscreen-Megapixel-ceramic-white/dp/B00812YWXU/\n/*/dp/:asin/\nfunction showProduct($asin) {...}\n/:seo*/dp/:asin/ or /:seo+/dp/:asin/\nfunction showProduct($seo, $asin) {...}\n$r = new Slim_Route('/*/dp/:asin/', function () {});\n$r->matches('/Samsung-Smartphone-Super-AMOLED-Touchscreen-Megapixel-ceramic-white/dp/B00812YWXU/');\n$this->assertEquals( ['asin' => 'B00812YWXU'], $r->getParams() );\n$this->assertEquals( [ ['Samsung-Smartphone-Super-AMOLED-Touchscreen-Megapixel-ceramic-white'] ], $r->getWildcardParams());\n. I Implemented named wildcard parameters with \"+\" suffix, passing all parameters to the callback:\nhttps://github.com/codeguy/Slim/pull/355 I hope it's ok?\n. Done.\n. Looks like the new one is not yet in the repo, ... one moment ...\n. Sorry, I forgot to commit the Router.php, it should be available in https://github.com/codeguy/Slim/pull/357\n. // or\n$app->any('/:entity(/:id_or_op)',function($http_method, $entity, $id_or_op=null){\n     //code here\n});\n// equal to\n$app->map('/:entity(/:id_or_op)',function($entity, $id_or_op=null) use ($app){\n    $method = $app->request()->getMethod();\n     //code here\n});\n. AccessAccess is slower than member access (http://bit.ly/PPvkvx).\nAuto-completion in an IDE is only possible for members, not for array keys.\nAccessAccess makes protected members public which is really bad for router, request, response and environment.\nIt would be nice to have offsetGet() calling closures automatically, e.g. lazy database connects:\n$app['db'] = function() {\n  return new mysqli(...);\n};\n$app['db']->query();\nor another example with memcache:\n$app = new \\Slim\\Slim();\n$app['mc'] = function(){\n\u00a0 return memcache_connect('memcache_host', 11211);\n};\n$app->get('/books/:id', function ($id) use ($app) {\n\u00a0 $some_key = $app['mc']->get('some_key');\n});\nInstead of $this->config('mode'); there would be better $this->settings['mode']; or $this->settings->mode;\n. > - 1,699 additions, - 970 deletions\nThe diffs are a bit large to review. Things like \"move cookies to its own class\" should be a separate pull request.\nThe \"add a Container class for the DI\" diff starts with a autoloader class, that's quite confusing for a review.\n. Hello,\n\"patients\" works for me, tested with PHP 5.4.5 as Web-Server, Slim 2.1.0 (composer) and Win7-64 SP1.\nbye\nThomas\n. ",
    "adamnbowen": "Hrm, since this is based on the rails implementation, I guess we shouldn't deviate from their standard.  Closing this, as I should probably build my own error/messaging system.\n. :+1: Makes templates a lot less stupid to write.\n. ",
    "digitalnature": "shouldn't strtr be used, instead of str_replace?\nI mean:\n```\nforeach($params as $key => $value)\n  $replace[\":{$key}\"] = $value;\n$pattern = strtr($pattern, $replace);\n```\n. ",
    "m1chu": "I have already found only potential bug. But if you give me few days I will try to submit a PR as improvement proposial. Thanks for you response.\n. ",
    "nortron": "Recreated pulling into release branch instead of master\n. ",
    "mariodev": "Redirecting with \"/bar\" probably assumes that you have your domain set up, so you need to set your virtualhost in development environment \n. ",
    "chriseskow": "I've been trying out Slim 3 and have also ran into this issue. Note that it only occurs when you don't prefix the URL path with the router script name: e.g. it breaks when you use /foo.bar but works fine with /index.php/foo.bar.\nMinimal app to reproduce:\ncomposer.json:\njson\n{\n    \"require\": {\n        \"slim/slim\": \"^3.0@RC\"\n    }\n}\nindex.php:\n``` php\n<?php\nrequire 'vendor/autoload.php';\n$app = new Slim\\App();\n$app->get('/', function ($request, $response) {\n    echo 'ROOT';\n});\n$app->get('/{name}', function ($request, $response, $args) {\n    echo 'NAME: ', $args['name'];\n});\n$app->run();\n```\nPHP invocation:\n$ php -v\nPHP 5.5.27 (cli) (built: Aug 22 2015 18:20:44)\nCopyright (c) 1997-2015 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2015 Zend Technologies\n$ php -S localhost:8080 index.php\nResults:\n| Request URI | Expected Output | Actual Output |\n| --- | --- | --- |\n| http://localhost:8080/ | ROOT | ROOT |\n| http://localhost:8080/index.php | ROOT | ROOT |\n| http://localhost:8080/foobar | NAME: foobar | NAME: foobar |\n| http://localhost:8080/foo.bar | NAME: foo.bar | ROOT |\n| http://localhost:8080/index.php/foobar | NAME: foobar | NAME: foobar |\n| http://localhost:8080/index.php/foo.bar | NAME: foo.bar | NAME: foo.bar |\nInspecting $_SERVER in the above situations makes it pretty clear that the issue is related to the fact that for the request to /foo.bar, PHP sets $_SERVER['SCRIPT_NAME'] to /foo.bar while for all other requests it sets it to /index.php.\nOverriding it by setting $_SERVER['SCRIPT_NAME'] to /index.php at the top of index.php fixes the problem, but this seems like something that Slim should correct itself (note that Symfony/Silex doesn't have this issue).\n. @tuupola Yeah, I did notice that bug report, and that appears to be the root cause. Unfortunately, it doesn't look like they're going to change it (marked Wont Fix).\nOn a related note, I noticed that Slim's ServerRequest factory implementation differs from Zend Diactoros in how it determines the path from the environment. Slim splits the base path and only returns the path info in Uri::getPath(), while Diactoros returns the full request URI including the base path.\n@codeguy What do you think? Can you duplicate it with the code above?\n. Thanks for getting this done, guys! :sparkles:\n. You can use set_error_handler() and throw an exception, such as PHP's built-in ErrorException which is meant precisely for this purpose:\n```php\nerror_reporting(E_ALL); // set to whatever types of errors you want to be fatal\nset_error_handler(function ($severity, $message, $file, $line) {\n    if (error_reporting() & $severity) {\n        throw new \\ErrorException($message, 0, $severity, $file, $line);\n    }\n});\n```\nThe exception would then be caught by Slim's error handler and can be handled as you wish.. ",
    "jeremykendall": "I'm struggling with this now and I've just thrown my hands up. I really can't believe that bug is \"won't fix\", but then I'm frustrated right now and perhaps not thinking it through clearly.\n\nOverriding it by setting $_SERVER['SCRIPT_NAME'] to /index.php at the top of index.php fixes the problem ...\n\n@chriseskow Yes, it does solve the problem of the built in webserver not matching the route, but using that solution causes the server to stop serving static files. Totally bizarre, totally frustrating, and I wish core would just fix the problem already.\n/rant\n. @codeguy :+1: \nThat would also take care of the weirdness of having two sets of cookie settings, one global (except for SessionCookie) and one just for SessionCookie.\n. Sounds good.  Thanks!\n. @codeguy I'm going to create a new PR for simplicities sake, but it looks like the develop branch SessionCookie class no longer exists.  Where should I branch from and submit a PR against?\n. Sounds good.  Thanks for the update.\n. Superseded by #635.\n. @petarov: I noticed your comment on the \\Slim\\Environment HVVM commit.  Would you be willing to apply this fix to your local Slim install and see if it fixes your sandbox problem?  I'm interested to know if this PR fixes both my issue and yours.\n. @petarov I'm sorry to hear it didn't help, although it was kind of a shot in the dark.  If you're willing and able to share a small application that will recreate the issue, I'd be interested in looking at it.  Maybe we can put our heads together and get it sorted out.\n. @4g0st1n0, @petarov, and @tuupola: Let's move the Apache alias discussion over to #655.  That's a separate issue than #653, which this PR fixes.\n. @tuupola :+1: \nCreating a page with links to vetted tutorials sounds like a great idea, and a great way to get this kicked off w/o having to write tons of new content.\n. @leeDav Not a tutorial, but a tip: I put all of my application code in src/ in the root of my project: https://github.com/jeremykendall/flaming-archer/tree/develop/src.  I comply with PSR-0, so I can easily autoload those classes using Composer.  You can experiment in there with directory structure all you like, while keeping the app root clean.\n. @silentworks Sadly family, new startup, moving too much, etc. has gotten in the way of any progress on the book. It's on the very bottom of my list right now, but it's still on the list.\n. @JoeBengalen You're absolutely correct, and that's still possible using this PR, but both Slim\\Http\\Response and Slim\\Http\\Request expose more methods than are defined by the PSR-7 interfaces. It's still possible to type hint on the PSR-7 interfaces when necessary, but without providing a Slim specific interfaces, that leaves the rest of the Slim specific implementations unavailable to internal or external classes that need that additional functionality.\nI may be missing something, and I'm open to being wrong here, but it seems like Slim's concrete implementations of the http-message interfaces should either implement only what is defined in PSR-7 or should extend those interfaces with Slim specific Request and Response interfaces. That is the intent of this PR.\n. @codeguy Ah, I see where you're going. Yes, of course internal classes can typehint for Slim\\Http\\*. I just hate having implementations without interfaces, as a general rule of thumb. If I can throw an interface at it, then I do.\nWith that philosophy in mind, every internal Slim class that would use methods on the Response and Request objects that are not provided by the http-message interfaces would need the Slim interfaces.\n@JoeBengalen Agree, although if the general practice is to typehint against the concrete Slim\\Http\\* implementations when necessary, then the point (other than academic \"always code to an interface ...\" discussion or considerations) is moot in this case.\n(Also, I know I'm late to the Slim 3 game, so forgive me if I'm throwing a wrench into the works.)\n. @codeguy What @lalop said. Also, I've found those methods to be extremely useful in my Slim <3.0 projects.\n. > Because they are helpful to the end user and provide a reason to use our own implementation?\nWhich to me says, \"Add interfaces.\" (Full disclosure, I'm a pedant who frequently shoots for  textbook code, sometimes to the detriment of my codebases.)\n. @codeguy Please feel free to close this if it's not in line with current Slim PHP dev philosophy and direction. There will be no hard feelings on my part :smile:\nFor the sake of discussion, how do interfaces introduce tight coupling? I've always understood them to be the very definition of loose coupling.\n. Ah. Gotcha.\nAgain, for the sake of discussion, would it be better to remove those additional methods? Or move them to a Request helper/decorator? I've made heavy use of them in other projects (example: https://github.com/jeremykendall/flaming-archer/blob/develop/public/index.php#L283), and I really like them, but in this case they're causing the Slim Request and Response to be non-compliant with PSR-7 (Slim\\Http\\Response::write() violates the immutability of the Response object, for example).\n. > The write method is indeed a mistake and needs to be corrected.\nGotcha.\n\nAlso, the Request and Response bodies are mutable... \n\nRight. Absolutely.\n\n... but everything else in the HTTP message objects is immutable.\n\nExcepting the write method, I stand corrected :smile:\n. Closing as not in line with Slim PHP dev philosophy.\nMany thanks for the excellent discussion.\n. @codeguy Did I add the configuration classes? I don't remember doing so and my commit history doesn't seem to reflect that:\nMaster: https://github.com/slimphp/Slim/commits/master?author=jeremykendall\nDevelop: https://github.com/slimphp/Slim/commits/develop?author=jeremykendall\nI don't want to take credit for anyone else's hard work :-)\n. ",
    "halfer": "@jeremykendall: I believe this can be worked around reasonably cleanly by adding a routing script to the PHP web server call and returning false for static assets. See how I have done so here, and ping me if you want more info.\n. ",
    "C-Duv": "Adding the following line in my public/index.php worked for me (PHP 7.2.1):\nPHP\nif (PHP_SAPI == 'cli-server') {\n    $_SERVER['SCRIPT_NAME'] = '/index.php';\n}\nI  had tried (started with):\n PHP\nif (PHP_SAPI == 'cli-server') {\n    $_SERVER['SCRIPT_NAME'] = '/index.php';\n    $_SERVER['PATH_INFO'] = $_SERVER['REQUEST_URI'];\n    $_SERVER['PHP_SELF'] = $_SERVER['SCRIPT_NAME'] . ($_SERVER['REQUEST_URI'] === '/' ? '' : $_SERVER['REQUEST_URI']);\n}\nBut neither PATH_INFO nor PHP_SELF are used by Slim, so forcing SCRIPT_NAME is enough.\nOther workaround which worked (but it's application might not always be possible/desired):\nInstead of requesting:\nhttp://localhost:3000/hello/Joe.Smith\nrequest:\nhttp://localhost:3000/index.php/hello/Joe.Smith. ",
    "boypt": "I encounter this problem, too. but I add a hook before route to do the hack, instead of changing Slim core code.\nphp\n//in the 'development' mode\n    $app->hook('slim.before.router', function () use ($app) {\n        if ( substr( @$_SERVER['SERVER_SOFTWARE'], 0, 3 ) === \"PHP\" ){\n            $env = $app->environment();\n            if($env['PATH_INFO'] === '/' && $env['SCRIPT_NAME'] !== basename(__FILE__)) {\n                $env['PATH_INFO'] = $env['SCRIPT_NAME'];\n            }\n        }\n    });\nThe dev-server has to be run this way ( not perfect, your static files won't be served):\nphp -S 0.0.0.0:8081 index.php\nYou need another route file to do this, according to the PHP Wiki: https://wiki.php.net/rfc/builtinwebserver\nI think @codeguy should add a caveat on the document about the strange about php-dev-server, or add a midware or a switch to support it.\n. ",
    "sirlancelot": "looks like the line-endings have been changed.\n. This is definitely worth more discussion. However, there's already a TwigView class here: https://github.com/codeguy/Slim-Extras/blob/master/Views/Twig.php\n. ",
    "travisbot": "This pull request passes (merged 08eeb5c7 into 7a72ddf5).\n. This pull request passes (merged f99a422b into b6387dd6).\n. This pull request passes (merged 29dacdc5 into b6387dd6).\n. This pull request passes (merged e226d1e3 into b6387dd6).\n. This pull request passes (merged 9d3d39fc into 36ee83a2).\n. This pull request passes (merged 59e937ff into b6387dd6).\n. This pull request passes (merged 32573ff1 into b6387dd6).\n. This pull request passes (merged 6013c745 into e2f2da09).\n. This pull request passes (merged 02cf15a1 into 4bb93e99).\n. This pull request passes (merged 6a2b14d0 into e2f2da09).\n. This pull request passes (merged b726914a into 061acd76).\n. This pull request passes (merged 3fabeade into c9dd68d2).\n. This pull request fails (merged 7e5ed46f into 7d5c480d).\n. This pull request passes (merged 8f380472 into 7d5c480d).\n. This pull request passes (merged c7d56f17 into 7d5c480d).\n. This pull request passes (merged ad55ae03 into 4bb93e99).\n. This pull request passes (merged d00383a2 into 4bb93e99).\n. ",
    "willdurand": "@codeguy any news on the content negociation topic? I'm not sure to use Slim because of that missing feature, and it seems this topic is on the roadmap for more than a year..\nThis PR was nice, better than nothing IMO\n. By the way, I wrote a tiny library to solve this issue:\nhttps://github.com/willdurand/Negotiation.\n\nWilliam Durand | http://www.williamdurand.fr\nOn Thu, Feb 7, 2013 at 9:50 PM, Geoff Catlin notifications@github.comwrote:\n\nSounds good. Could you identify the things you like about @njhhttps://github.com/njh's\ndesign and which things you'd change, so we can have some direction?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codeguy/Slim/pull/376#issuecomment-13258847.\n. Well, Josh's answer is not correct technically speaking, :format in the URI is not CN, and this is not a valid alternative (it is not even an alternative). Slim doesn't handle Content Negotiation, but it's easy to integrate a third-party library such as Negotiation (disclaimer: I wrote the lib). Maybe it's possible to extend either Slim or Negotiation to provide a \"all-in-one\" solution.\n. So, do you want to handle CN in Slim itself or what? Maybe middlewares are the way to go..\n. @codeguy I will try to come up with something like integrating Negotiation with Slim-Middleware\n. :+1:\n. \n",
    "gcatlin": "I'm also wondering about the status of content negotiation in Slim.\n. Have you had any further thoughts on the design? Perhaps I and others could help out.\n. Sounds good. Could you identify the things you like about @njh's design and which things you'd change, so we can have some direction?\n. ",
    "fabiorphp": "Anything new?\n. ",
    "mewejo": "Any update on this?\n. Thanks Josh\n. I'm not sure if you provide support here, but a push in the right direction is all I'm after..\ncomposer.json:\n{\n    \"require\": {\n        \"slim/slim\": \"2.\",\n        \"slim/middleware\": \"\"\n    }\n}\nInstalling with that, doesn't actually seem to install the ContentNegotiation class, at all? This is after clearing cache + deleting the vendor dir. Stuck in a rut, can't seem to make any progress with this. Not used Composer before, so hopefully I'm missing something simple.\n. I am seeing the exact same thing - The code he supplied is more than enough to replicate the issue. Happy to assist with further testing for you @codeguy \n. Appears it's already there \ud83d\ude06 closing.. ",
    "lalop": "Did you tried \"slim/middleware\": \"dev-master\" ?\n. Isn't this issue closed on the develop branch https://github.com/codeguy/Slim/blob/develop/Slim/Autoloader.php ?\n. sorry,\ndidn't find it.\nthank you\n. Yes I can :)\nsorry for that\n. Oo \neffectively, thank you\n. I will try.\nToday if an exception is thrown in the view the output buffer isn't turned off so the beginning of the view is send then it's the exception.\nWith my fix only the exception is send.\nIs it more clear ?\n. If you want i can add some test on this feature ?\n. Do you need anything more on this point ? Information, tests ... ?\n. Hello,\nwhat happens for this issue ?\n. Where is this method ?\n. Hello,\nI just come to update to the 2.3.1.\nIf I understand the fix I 've to use View::keep instead of View::set, isn't it ?\nI have a new issue with that, a little tiny one :\nArgument 2 passed to Slim\\View::keep() must be an instance of Slim\\Closure, instance of Closure given\n. I think this will not happen for Slim2 since there is no new features added to slim2\n. ok,\nIt's done here http://help.slimframework.com/discussions/suggestions/199-catching-fatal-error\n. Here's a simple app.php :\n``` php\n$app = new \\Slim\\Slim(array(\n    'templates.path' => './'\n));\n$app->get('/',function() use($app){\n    return $app->render('view.php');\n\n});\n$app->run();\n```\nand the view.php\nphp\n<?php\nvar_dump(count($flash));\nthat display int 1\n. Or maybe Slim\\Middleware\\Flash can implement Countable ?\n. I can do a pull pull request with that if we are agree on the solution ( and on the issue of course )\n. hum... ok.\nWhen do you think merging the develop branch into master ?\n. I've used a lot of frameworks that gives me the way to structure my code.\nWhat I like in Slim is that I can do the things in my way.\nI see Slim like a router library more than a framework, so my applications isn't structured around Slim.\nI think some examples can be a good things to help starting with Slim but is not a requirement, orm library doesn't give code structure isn't it ?\n. I wrote an asset management library that I use with Slim, it's a pre-beta version but I have to write some doc and I could make a slim tutorial too.\nYou can find it here https://github.com/lalop/aphet\n. That will be the first Slim dependance, just for one class.\nMaybe that's make more sense to build a new container ( based on Pimple ) than make a dependance.\nI think Pimple is great for final user who doesn't want to code this feature or for library that has a lot of dependances but for Slim... I'm not sure.\n. Maybe that can come with the 3.0 ?\n. Yes it's a kind of alias more than a real project, but that can be a good initiative for modern php developpement.\n. ok,\nI understand\nIndeed we need a psr interface and not one from an extra library.\n. Yes, I think that can be great to keep in mind some non-http case.\nBut the other point is the router, what does it become ?\nDo we have to override the web router ?\n. Me too :-)\nI will think about it but I have to take a look at the version 3 before.\n. Yes here is the point but the midleware part of it and the request -> response are interesting for command line too.\n. What about adding a command method to Slim ?\nWe can imagine something like :\nphp\n/* index.php */\n// include common configuration, boot slim app...\n$slim = include 'config.php'; \n$slim->get('foo', function( $req ){ ... });\n[...]\nphp\n/* command.php */\n$slim = include 'config.php'; \n$slim->command('bar', function( $req ){ ... });\n[...]\n. Ok, now \\Slim\\App extends \\Pimlpe so App is the new App::container, isn't it ?\nBut if I build an app with in one hand a web router ( slim ) when in one other hand some cli command (with phake or symfony console component), I would like to share the same DI container.\nI think that's not possible with that change. Or I don't see the way to do it.\nI love seeing Slim as a library of my app not as the core, using it as a general DI for command line script does it take responsibilities that it hasn't to take. Do you see my point ?\n. I'm not sure but maybe that can be done in a middleware ?\nAnd the code put in slim extra.\n. One other way could be using the first part of the route callback Hello in Hello\\sayHello not as a class name but as a key in a DI container. Or using an other format to that.\n. @silentworks controllers key could be prefixed by controllers in the container controllers.hello for exemple.\n. @silentworks good point, I'm not aware of all the internal mecanisms into Slim but Route need to use the app container\n. Sorry for the basic question but can a middleware do that ?\n. Really interested too, if I can help for something give me a shout\n. We can use Slim without render a view or using a view engine so add an external lib as dependencies to do that doesn't seem to be a good idea.\nAnyway Plates looks like a great tool ( I will use it for my next project ) maybe you can make a PR to the codeguy/Slim-Views repository.\n. Hy @danielgsims ,\nMaybe We can add the resolver to the router after its initialization.\n$router = new Router();\n$router->addResolver($c['resolver']);\nThe simple router only handle callable, then anyone ( libraries, middleware ...) can add its own resolver.\nWhen the Router has to resolve a callable it send the param to each resolver until it get a callable.\nFor sure we can add the default resolver to handle Class:method.\nWhat do you think ?\n. Hello, \nI think you should do that with a middleware.\n. Hi,\nI'm wondering that if the first issue that we will solved with that is performance maybe we can start by testing the matching routes at a group level.\nIf we have a lot of routes the router tests all of them but if they are grouped we could start by filtring routes on matching group, that could be a much more performance gain.\n. You need to use route middleware to do that\n. There is an other pr for that https://github.com/codeguy/Slim/pull/998\n. @codeguy since the Middleware class is exists only for internal business I think we can transform it into a more abstract class to wrap the app to, to do it we just have to make the next param optinal.\nSince it shouldn't be used outside of the library that seems ok for me. Maybe we should change its name.\n. Hello.\nAfk for the all week.\nI will take a look next week.\nJust to be sure you want me to add your implementation in the route class ?\nDo we leave my pr ?\nLe 4 mars 2015 04:19, \"Josh Lockhart\" notifications@github.com a \u00e9crit :\n\nSo much has changed I went ahead and implemented a rudimentary version in\nf45fe83\nhttps://github.com/slimphp/Slim/commit/f45fe83c6f976210b5b334229bd406cc932db00e.\nCan you look over and make sure it's ok? Also, can you integrate into the\nRoute class and make sure Route middleware is working correctly?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/pull/1009#issuecomment-77094731.\n. Hi,\nI made a pr for that https://github.com/slimphp/Slim/pull/1009\n. I commited that.\nIn my first PR I've added a lock to prevent middleware addition once the stack is called. Like that we can't add a middleware on the stack that will not be call.\nAn other point, the seedMiddlewareStack method has to be call by the class that uses MiddlewareAware but the trait could do that itself, in that way the usage could be painless.\n. We should add the same things in callMiddlewareStack\n\nphp\n    public function callMiddlewareStack(RequestInterface $req, ResponseInterface $res)\n    {\n        if (is_null($this->stack)) {\n            $this->seedMiddlewareStack();\n        }\n        $start = $this->stack->top();\n        return $start($req, $res);\n    }\n. I'm making a new one\n2015-03-11 1:16 GMT+01:00 Josh Lockhart notifications@github.com:\n\nSounds gd. @lalop https://github.com/lalop do you want to add that to\nthis pr?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/pull/1069#issuecomment-78176753.\n. https://github.com/slimphp/Slim/pull/1078\n\nBased on this new pr we can specify the kernel of the middleware stack to be an other method of the class or anything callable.\nLike that we can create groupStack and other cool stuf.\n. Maybe we should throw an exception when the seed method is called twice.\n. I'm wondering if we shouldn't prevent seeding multiple times the stack by throwing an exception if that happens ?\nBut I'm not sure if the MiddlewareAware should give the hability to update the stack.\n. Yes but the trait can be used outside of the framework.\nI imagine creating a stack of stack of middleware, with my common middleware, then authentifications one... etc.\nIn that case using this trait will be nice, so it should be write to an external use too.\n. Sure,\nit's done\n. You're welcome :)\n. oO\nok, this reflection comes from this issue https://github.com/slimphp/Slim/pull/953\nI don't know enought about FastRoute to get that last point.\nSo yes there is no issue here.\n. @tuupola Yes but the Slim Application is a router, a container and a middleware stack so that can be disrupting for someone who discovers the framework excepts if that is going to change in Slim 3.\n@codeguy we can't named a function use\n. Which file ?\n. Instead of expecting Route and App to be a Container maybe we can inject the container in this class to use the same everywhere and even outside of Slim.\nNo ?\n. @akrabat ok sorry, I didn't read the all diff, specially this https://github.com/akrabat/Slim/commit/232ee757ba2087b298a16cb7497a1ab242acec32#diff-78add50f4cab9c745966442f655ef57fL33\nWhy don't do this in MiddlewareAwre directly  ?\n. With the Slim 3, I think we can add a middleware just on top of the route handler to wrap the old routes.\nSomething like :\n$app->get('/:name', function($name) {\n    echo \"Hello {$name}\";\n})->add('Slim2RouteWrapperMiddleware');\nThat can be a good exercise :)\n. Huumm,\nIn fact we can't do that since the route handler is called by the Route class and not by a middleware.\n. @codeguy I think your first option can be more effective using Pimple#extends https://github.com/silexphp/Pimple/blob/master/src/Pimple/Container.php#L225\n. @codeguy I've found a call to one of this method while I was working on middlewares by mocking psr request and response.\nhttps://github.com/slimphp/Slim/blob/develop/Slim/Route.php#L223\nAt this time I choose to mock the slim request and response instead \n. Since the custom method isn't used in the Slim core, why did they exist ?\nAnd more, we should not use them in middleware to keep frameworks interoperability.\n. Ok, I understand\n. Maybe I'm wrong, but the current implementation has 2 issues for me: \n- In the current state of this project, we can send and receive multiple request/response from the same app instance ( while testing for exemple or react the day they will implement psr7  ).\n  The only thing that will be share between the request-response is the cookie service.\n- if a middleware adds token by its own this will erase the cookie it may have set\nI'm really not an expert but I don't understand why this is cleanest than the withCookie that was in the Response class, if anyone want to enlighten me he's welcome.\n. Hi,\nthat 's fine for me, I wanted to point it.\nI've seen that the same method is used on the httCache middleware so that can be a kind of convention.\n. Shouldn't master branch be an alias to the more stable and up to date branch ?\n. @piotr-cz since the more stable is the stable one with the biggest version number yes \n. Hello,\nIs this affecting the development branch ?\n. Hello,\nYou can overwrite the body via the withBody method https://github.com/slimphp/Slim/blob/develop/Slim/Http/Response.php#L472\n. @r3wt Lumen has less features than Slim ?\nHow is that possible ?\nAt the first look Lumen seems to provide more features, am I wrong ?\n. Why do you move CollectionInterace into Http ?\n. ok, I see\n. I would like to push a second implementation before\n\nLe 17 avr. 2015 \u00e0 17:30, Josh Lockhart notifications@github.com a \u00e9crit :\n@akrabat Did you want to make any further tweaks to this before merge?\n\u2014\nReply to this email directly or view it on GitHub.\n. here is a more generic solution https://github.com/slimphp/Slim/pull/1180\n. > I have a weird idea: Slim could have a Application class that is container agnostic (i.e. relies on ContainerInterface), and there would be a subclass that implements ArrayAccess. So by default you use Slim with Pimple and the \"Slim ArrayAccess-Pimple\" version (i.e. the subclass). And everything would be simple and well. But then you can also choose to use the agnostic Application class and provide your own container. I have not thought this through a lot, just throwing the idea\u2026\n\nAm I wrong or that what @akrabat say in its firs comment ? :)\n. @mnapoli you're right, I misunderstoud, for me the 2 classes was the container and the application but not 2 Application classes.\nBut the container is used in other files than Application so we should reimplement them too.\n. Oh yes, \nthank you\n. I will be happy to have some review on this \n\\cc @codeguy @akrabat \n. Fun fact, I have added a test that pass thanks to #1178 but as a side effect of this patch.\nWe never checked if the string past to the resolver is callable.\nCan we list all the callable things we have : \n- closure\n- 'function name'\n- [$obj, $method]\n- 'Class:method'\n- 'container_key:method'\nMaybe we should add container_key that can be a function after all.\nOther point, I'm not so happy with the name I gave to the class name CallableResolver in front of ResolveCallable for the trait, any inspiration is welcome.\n. Hello,\nI may be wrong but that look like the CallableResolver https://github.com/slimphp/Slim/blob/develop/Slim/CallableResolver.php\nIf you add this class to the container and add an Interface we could easily make new implementation.\n@codeguy a such Interface should manage route and middleware.\n. It's all new and yes there is a naming issue pointed here  https://github.com/slimphp/Slim/pull/1180#issuecomment-94196541 and not solve yet.\nI hope to find the solution here in fact :)\nResolveCallable is the first implementation, it now uses CallableResolver  to wrap and resolve.\n. I think it's a great enhancement, particularly for new users but maybe you can add it as an option by a settings or by adding the output buffering in the container.\nWith this pr I can have some strange behaviour, for exemple if I have a route like that :\n$app->get('/', function($req, $resp) {\n$resp->write('hel');\necho 'lo';\n$resp->write(' world');\nreturn $resp;\n});\nThe final response will contain hel worldlo.\nKnowing how work the response object, I prefer to see an exception when somehing is echoed.\n. I understand your point, and the fact it's the default is a good thing.\nI notice that we can make it unpluggable too for more experienced user.\n. I think this should come with an interface.\n. Adding the CallableResolver in the container makes more difficult to build and maintain test that uses the resolver but that doesn't use App.\nSince all the default services are added in the container in the App class if you don't use this class in a test that use some service we have to add each service manually.\nMuch of the test on the CallableResolver was done twice, in Route and  in App, now all this tests are made directly on the CallableResolver so we don't need them any more.\n. Next step can be injecting a kind of callableResolver Builder in the Route instead of the container.\n. @JoeBengalen it seems yes\n. I don\u2019t see a good way to inject the callable resolver service ( the closure in the container ) into the resolver trait and keeping it as straightforward as possible.\nhelp is welcome :)\n. I think you are asking that for the Container class, this patch is merged on develop today, it appears here because I misuse git rebase.\nAnyway you will found an answer here https://github.com/slimphp/Slim/pull/1179#issuecomment-102471067\n. Any news here ?\n. @akrabat done\n. hello @mnapoli,\nYes I use rebase, but I have some conflict while rebasing and maybe I have a bad usage of rebase while resolving them.\nIt seems that my local develop branch differs from the official, I think this is the problem.\n. @mnapoli How and where do you see conflict with develop ?\nI merge container-callable into develop whithout conflict\n. I make this test whithout conflict \n$ git checkout -b origincc origin/container-callable\n$ git checkout -b updev upstream/develop\n$ git merge origincc\nUpdating 45cc95c..98fe66c\nFast-forward\n Slim/App.php                                            |   4 +++-\n Slim/CallableResolver.php                               |   9 +++++++--\n Slim/{ResolveCallable.php => CallableResolverAware.php} |   6 ++++--\n Slim/Container.php                                      |  10 +++++++++-\n Slim/Interfaces/CallableResolverInterface.php           |  10 ++++++++++\n Slim/Route.php                                          |   2 +-\n tests/CallableResolverTest.php                          |  14 +++++++-------\n tests/RouteTest.php                                     | 104 +--------------------------------------------------------------------------------------------------\n 8 files changed, 42 insertions(+), 117 deletions(-)\n rename Slim/{ResolveCallable.php => CallableResolverAware.php} (86%)\n create mode 100644 Slim/Interfaces/CallableResolverInterface.php\nAm I missing something ?\n. Ok, I think I will make a new PR all clean\n. @mnapoli, thank you for this information.\nAnyway I don't understand why I can't reproduce this conflicts.\n. I finally found the issue, my upstream was linked on the @codeguy original repository wich is not anymore uptodate.\n. I've accidentaly add this to #1208 \n. reopen since #1208 will be closed\n. Did you test like that ?\n$main = $app->main;\n$main(\"invoke test\");\n. you can use too the built in helper protect \n$app->main = $app->container->protect(function() { \n     return 'test';\n });\n$app->main(\"invoke test\");\n@iisurge  can you close this issue please if it's ok for you ?\n. You are right, seedMiddleware is useless, indeed App does'nt call it.\n. Hello @pine3ree ,\nI see your point, but if this pr is merged, route whithout middleware will have a stack only if it's called since the stack will be created in Route::run, isn't that the target ?\n. hum... either we are agree, the call to seedMiddleware is useless and your pr is welcome imho or I don't understand :)\n. So we are completely agree \n. Maybe we can split this concerns into trait like for the middleware stack and the callable resolver.\n. I don't understand what you fix here. \nRoute and App kernel have their own wrapper that returns a response object.\n. I think this issue is solved by @akrabat https://github.com/slimphp/Slim/commit/2f02b4ba7ae3b72e781872d0d41bd4e19b74e711\nAnyway You are right any middleware layer have to return a psr-response-interface and this could help some developer who want to extend Slim. \nMaybe you can change the error message to be more generic.\n. Hello,\nthe master branch only merge security pull request.\n. This class doesn't exist anymore on develop branch but any pr is welcome :)\n. https://github.com/slimphp/Slim/pulls\nThey seems to be closed and/or merged \n. @akrabat yes I can and it's done :)\n. Since the request/response isn't hard coded we can use any implementation.\nBy hard coded I mean :\n$response = $this->callMiddlewareStack(new Slim\\Http\\Request, new Slim\\Http\\Response);\nThe choice made was to open open the library to any psr7 complient request/response implementation by avoiding using this method in the kernel, they are here all for the end user.\nThat will certainly not be a big usage but it's a really good  choice I think in the psr7 philosophy.\n. > If we want to start the stack allowing any other req/res implementation, we could never be safe using slim extra request/response methods as they would not probably be available/implemented.\nSorry but I don't understand what you mean here.\nAre you saying that, if we start the stack with an other implementation we could not use the slim specific request/response 's methods ?\n. Can you provide some code sample ?\n. Hello,\nthis is done in a pr https://github.com/slimphp/Slim/pull/1208\n. It works because we have removed testHaltInMiddleware, but if we have two tests that does an $app->run() the second one will fail.\n. In both case the responded defined as static in the method isn't the good option \n. It's what I see while rebasing.\nI think we can removed it completely.\nDo you want me to update this pr in this way ?\n. Hello,\nnice to see.\nThere is some evolution on how slim 3 manage the container, I think that has some impact on your package\n. Hello @elegos \nsetName come from Route not Router,\nBut the issue is the same, RouteInterface doesn't define setName.\nGiving it a deep look, there is no way to change is implementation... so I don't really see why there is an interface.\n. ok I see.\nyou only have to implement getPattern and __invoke__ to have a valid Slim3 Route.\nSince the core library doesn't use setName this hasn't to be in the interface definition.\n. Since this is used by the Router I think the answer is the same\n. Reading your pr I see 2 questions/comments : \n1) I think we should use the same request type then the one in the container\nThat means the container should only give the Request class not a Request instance and the App should create this new Request for main and sub request.\nOr you should clone the current request to make sub request, so App::subRequest could become an alias for __invoke.\n$app->get('/bar', function($req, $res) use($app) {\n    $uri = $req->getUri()->withPath('/foo');\n    $sub_req = $req->withUri($uri);\n    return $app->subRequest($sub_req,  $res);\n});\n2) Why do not run App middleware ? Maybe that make no sense for session but that can be usefull for a cachemiddleware.\nMaybe We should add a request stack.\nApp stack once per HTTP request,\nRequest stack once per internal request,\nRoute stack once per route per request\n. Hello @silentworks,\nFor point 1, subRequest has a wrong signature because it's what I propose, having the same signature for App::subRequest and App::__invoke.\nFor point 2, I wanted to notice that with this implementation app's middlewares will not see subrequests.\nThat can be okay in most of case but maybe not for all so I proposed to add a new middlewae stack between App and Route, App's stack will be run once, Request's stack will be run once per (sub)request, and Route's stack is defined for each route.\nIs that more clear ?\n. :+1: \n. I think this point has been discussed here https://github.com/slimphp/Slim/pull/1264\n. new url defintion for parameters \nEdit: Good one! Note to self: be sure we link to FastRoute docs, too\n. I don't know how fastroute works, but maybe we can add multiple path to a route.\nSomething like \n$app->get(['/hello', '/hello/{name}'])->setName('hello-world');\nThan for the urlFor we return the first one matching the maximum of the given parameters.\n. I think we should create a new interface that extends RouteInterface or some traits that define this methods but testing if the method exists doesn't seem to be a good partern since all is based on interface.\n. I'm with @nhymxu on that, if the current code base work on php5.4 I don't see any good reason to define as uncompatible.\nIf in the next development php 5.4 appear to cause any issue so we can make this move at this moment.\n. @akrabat @silentworks any news about this path release ?\n. With route in a separate middleware and http's classes in a separate repository it seems that Slim's core will not have anything to do with http.\nIt could be good to define the issue this library want to solve.\nit will look like a middleware stack with a container.\nOn my point of view it could manage any kind of request with the appropriate trinity request/response/router ( http, cli, ... ) \n. It seems like the silex way of doing that is more like calling a new Slim app into the controller.\nSomething like that I think \n```\n$forum = new Slim\\App();\n$forum->get('/', function ($request, $response, $args) {\n    $response->write(\"Forum home page\");\n    return $response;\n});\n$app = new Slim\\App();\n$app->get('/forum', $forum)\n$app->run();\n```\nThis code will not work but a simple middleware can do the trick.\n. This is usefull for composer, if a package need psr/http-message-implementation compoesr will ask to add a dependencie to complete the requirement \n. Here is a list of librairy requiring psr/http-message-implementation  https://packagist.org/packages/psr/http-message-implementation/dependents\nTo use them with Slim we will need to install another implementation since Slim doesn't declare itself as providing it.\n. I'm maybe wrong but any middleware can access to the routes registred in the router, no ?\n. Adding a route middleware and the route information as attribute to the request should do the trick I suppose\n. yes, good point.\nI've fixed that in an other pr https://github.com/slimphp/Slim/pull/1188\nThank you\n. I think we should separate the container implementation than the container provisioning to help provisioning custom container\n. If App can work with any container implementation we could provision any container, isn't it ?\n. Ok,\nI didn't know.\nThat would have been too easy.\n. At least, separating  provisioning and definition would permit to provisione a Pimple container that is not the slim one.\n. I don't know yet how that could look like but I will try.\n. done\n. Yes but now it's set so the next time getParsedBody is called we will not try to parse the body.\n. Oh yes you are right, I didn't know that.\nDamn ! Is there a way to do that whithout setting a second property to know if the body is parsed ?\n. ",
    "ianvanness": "This works great for me (php5.4 array dereferencing in effect here)\nphp\n$app->get( '/png/', function() use ( $app ) {\n    $app->response()['Content-Type'] = 'image/png';\n    $im     = imagecreatefrompng(\"pants.png\");\n    imagepng($im);\n    imagedestroy($im);\n});\nResponse header shows this, as expected:\nContent-Type:image/png\n. ",
    "istvanskeri": "hmm i'm getting a syntax error, unexpected '['\nfrom this line:\n$app->response()['Content-Type'] = 'image/png';\nwonder if i need to change something in php.ini it wont let me do that\n. nevermind got it to work, thanks!\n. ",
    "jcubic": "Actually I just found that I can overwrite Slim_Middleware_PrettyExceptions with \n``` php\nclass NiceExceptions extends Slim_Middleware_PrettyExceptions {\n    protected function renderBody(&$env, $exception) {\n       return ' ';\n    }\n}\n$app = new Slim();\n$app->add(new NiceExceptions());\n``\n. Yes, thanks I know you tell me, I think it was in other issue, because I don't see your answer here. I close this one already.\n. Looking again at the code, it sould look likeSlim::errorthat executeSlim::callErrorHandler` look cleaner.\n. I'm still learning git and never work with forks and pull requests (I'm reading Git-Branching). \nI've created a branch for pull request, I commit 2 fixes, I need to test it and I want to add fix for Slim::error which should be executed on exceptions\nhttps://github.com/jcubic/Slim/commit/afdcd708957ac479b80492bdd8abae1be665a3e9\nPS: how can I add branch that is in the repo, like remotes/origin/develop so I can switch to it using git checkout develop?  I have repo in two places, on server I have branches develop and master and an my local machine\nOn local machine I created a new brach and pull from develop I think I those changes where merge to my handlers branch.\n. Re: PS: I found it, when I call git checkout develop it add this branch.\n. You're are right my code don't fix that, but bug remain - here is code for develop branch\n``` php\n$app->get('/xxx', function() use ($app) {\n   echo \"xxx\";\n   $app->response()->body(\"xxx body\");\n   $app->notFound();\n});\n$app->notFound(function () use ($app) {\n    echo \"notfound echo\";\n    $app->response()->body('not Found body');\n});\n```\nfor /xxx it show\nnotfound echo\nbut should display\nnot Found body<br/>\nresponse->body is overwriten by ob_ buffer it's wrong because body method will never work.\nand there is also one different bug in standard route:\nphp\n$app->get('/xxx', function() use ($app) {\n   echo \"xxx<br/>\";\n   $app->response()->body(\"xxx body<br/>\");\n});\nthis display:\nxxx body\nxxx\ninstead of just xxx body\n. I think that solution is to add ob_clean to body method for normal route to work.\nfor Ultimate solution Slim should \nget the start ob_buffer body will clean the buffer if called if reponse have body it would be printed if something is in the ob_buffer that need to be printed and after that the return value need to be appended.\nand for this to work\nphp\n$app->get('/', function() use ($app) {\n    $r = $app->response();\n    echo \"1\";\n    $r->body(\"2\");\n    echo \"3\";\n    $r->body(\"4\");\n});\nbody method will need to start another buffer before it ends. (data from Buffer append to body body reset buffer and result value append at the end).\n. There are 3 types of handlers and Slim give two results if its executed in notFound or error and route\nphp\n$handler = function() use ($app) {\n   echo \"xxx<br/>\";\n   $app->response()->body(\"xxx body<br/>\");\n}\n- route and error:\nxxx body\nxxx\n- not found\nxxx\nSlim documentation said that:\n\nYou can use the Slim application\u2019s Response object to set the HTTP response\u2019s body like this\n$response->body('Foo'); //The body is now \"Foo\" (overwrites)\n\nbody function don't set body of the response it append ob_ buffer in the end in route and error and in notFound it don't work at all, and you tell me that this is not a bug but expected behavior?\n. These linens where removed from Slim.php but those constants are still in use and there are not defined in any file. \nphp\nif ( !defined('MCRYPT_RIJNDAEL_256') ) {\n    define('MCRYPT_RIJNDAEL_256', 0);\n}\nif ( !defined('MCRYPT_MODE_CBC') ) {\n    define('MCRYPT_MODE_CBC', 0);\n}\nWill add this to my first pull request.\n. I added those lines to my PR I can add another commit to remove them again.\n. I fixed this by installing libmcrypt\n. Hey I'm new to this, why there are 74 commits here?\n. I mark it as PR for master instead of develop\n. One extra comit\n. I try to use debug false and my error handler and it turns out that I forget to add  string handling in error handler, \n. Ok, that's great,  I'm closing the issue\n. I had similar problem with Slim::error in my custom Slim where I handle objects returned by routes as strings, and that object (of Template class) need to call error() so I just catch it \nphp\ntry {\n} catch (Slim_Exception_Stop $e) { }\nit seems that the exeptions is use for internal control flow to instant break a loop from nested functions. You can try to just catch it and do nothing.\n. The file don't look as good as before, but those constans where needed, and giving Notices.\n. ",
    "kishu27": "how do you suggest I do something like:  \n$app->error(function (CustomException $e) {\n    // Do something\n});\n$app->error(function (AnotherException $e) {\n    // Do something\n});\n$app->error(function (MoreCustomException $e) {\n    // Do something\n});\n$app->error(function (\\Exception $e) {\n    // Do something\n});\nor do you suggest using an instanceOf  check inside a single $app->error route?\n. ",
    "adriencarbonne": "(sorry for the multiple commit, I could only use github web ui to edit these files)\n. In my humble opinion this is not Slim-related.\nIf you want to make a HTTP POST request and get its response, you should indeed use CURL.\n. First, Slim does not force you to use SessionCookie. Second, why do you think this cookie is poorly encrypted?\n. ",
    "yuya-takeyama": "Thanks for merging.\nWhy don't you paste build status anywhere you like.\n\n[![Build Status](https://secure.travis-ci.org/codeguy/Slim.png?branch=master)](http://travis-ci.org/codeguy/Slim)\n. ",
    "chelmertz": "@codeguy This is kinda annoying :) I can't run tests on my bare-minimum local dev machine because of this (notices are caught by phpunit).\nAnd \"reducing Slim's global namespace footprint\" does not equal \"silently rely on dependencies being met and crash in the middle of everything\" to me :) Composer might not be ideal quite yet but I would be pretty annoyed if I was allowed to install an rpm/deb but it crashed when I tried to run it.\n. Wow, that was fast. Great job!\n. I use Pimple and Slim now, it's not that many extra letters to write + the dependency is optional.\n```\n$app = new Slim;\n$di = new Pimple;\n$app->get('/', function() use ($app, $di) { .. });\n```\nI really like use of Closure::bindTo() but I think DI can be mimicked in 20 lines or less and included in Slim without that extra dependency of Pimple.\n. ",
    "ziadoz": "Thanks for considering the feature, I think it would be really nice for Slim to have.\nAnother thing that might be useful is binding any route closure objects to the Slim application object (PHP 5.4 only) using the Closure::bindTo() method:\n```\n$app = new Slim;\n$app->get('/', function() {\n    // No need to write: use ($app)\n    print_r($this->request());\n});\n```\nNo idea if you'd want to include this in Slim now (using a PHP version check) or later in the 2.0 milestone, but I thought I'd just throw it out there anyway.\n. Yes, mimicking Pimple probably makes sense since there isn't much to it really.\n. Looks great.\nAdding the Slim settings to the DI container would be really nice. Maybe then the Slim::config() method could be removed altogether?\nIt might also be worth implementing the IteratorAggregate interface as well, this way you could iteratate over the Slim object itself and access all the values in $this->container:\n```\nclass Slim extends \\ArrayAccess, \\IteratorAggregate\n{\n    // ArrayAccess Methods...\npublic function getIterator()\n{\n    return new \\ArrayIterator($this->container);\n}\n\n}\n$app = new Slim\\Slim;\n$app['foo'] = 'bar';\nforeach ($di as $key => $value) {\n    echo $key . ': ' . $value . \"\\n\";\n}\n// foo: bar\n```\nI think the share and protect methods from Pimple would be a good addition too. The share method in particular would be really handy for storing something like a shared PDO object for an application.\n. I think only the Slim object needs to be an array accessible DI container (like Pimple). Not so sure about settings or middleware.\n. Are you using any the Slim Extra CSRFGuard middleware? It had a bug (which is now fixed) that would cause this to happen (https://github.com/codeguy/Slim-Extras/pull/20).\n. I tried your code and you're right it doesn't work (even in 1.6.6). \nMoving the flash calls into a route closure makes flash() work correctly, flashNow() didn't work at all though.\n```\n<?php\nsession_start();\nrequire_once 'Slim/Slim.php';\n$app = new Slim();\n$app->get('/', function() use ($app) {\n    $app->flash('error', 'later');\n    $app->flashNow('info', 'now');\n});\n$app->run();\nvar_dump($_SESSION);\n``\n. I was running PHPUnit 1.3.2, but after upgrading to 3.6.12 all the tests pass.\n. I've experienced the same issue. It looks like thetemplates.pathconfig setting is only passed to view whenrender()orview()` are called from the Slim application.\nPerhaps I'm wrong, but in the Slim constructor it seems like the template.path should be set when the view is put into the dependency injection container:\n``` php\n// Default view\n$this->container->singleton('view', function ($c) {\n    $viewClass = $c['settings']['view'];\n    $templatesPath = $c['settings']['templates.path'];\n$view = ($viewClass instanceOf \\Slim\\View) ? $viewClass : new $viewClass;\n$view->setTemplateDirectory($templatesPath);\nreturn $view;\n\n});\n```\nI'm happy to submit a pull request if @codeguy thinks this is the best solution. In the meantime, the simplest work around is to set the view using $app->view(new Slim\\View) after your configuration.\n. Sure. I've made a pull request: https://github.com/codeguy/Slim/pull/675\n. Should I remove the $app->view->setTemplatesDirectory() line in the $app->render() method? It seems like it's redundant now, as either the DI container or $app->view() will set the correct templates path on any custom view objects.\n. Okay, I've done that, along with a horrible rebase that appears to have added more commits\u2026\n. I've got a commit ready for this by the way: https://github.com/ziadoz/Slim/commit/2fb53177b3631545b6f7d935bfffb30320b1992f\n. Hmm, weird. I've cleared my cookies and everything works fine now. My mistake.\n. Fair enough, that makes sense. I'll consider making a PR to the Slim Views repository. Thanks.\n. ",
    "pyrsmk": "Really interesting, hope it will come soon ;)\nUntil today I was using a similar framework of my own but with Chernozem instead of Pimple. It provides more features which I needed for better flexibility. Then, it's not as lightweight as Pimple but still keeps a tiny footprint, I think.\n. Nice, I didn't see that there is a Slim-Extras repo. By the way, Twig's now working on my framework, it was because the documentation is not for the 2.0 yet ;)\n. In fact, this is not my own server, thus I can't access to the apache configuration. Anyway, a 500 HTTP response is not valid for a redirect request, it should be a 302, but PrettyExceptions overwrite this behavior. I think it may crash with some weird apache configuration or other http servers.\nTell me if I'm wrong and didn't understand your code well, but the 302 response shouldn't be overwritten at all.\n. It's already the case ^^ See at Chernozem repo ;)\n. ",
    "gcaplan": "I've been evaluating Slim and Silex - preferred Slim but was on the edge of going with Silex to get the testability of the IoC. Then I needed to dig into the Silex code and realised it was 13 megs of bloat - not exactly micro. Quickly realised that it's pretty trivial to get 98% of the same benefits in Slim, by simply passing the $app into the closures along with a Pimple IoC. Tried to embed the IoC into $app but unless I'm missing something it's not doable. Here's a sketch of how it's done - hardly rocket science and I'm sure many of you are doing it already:\n``` php\n$app = new \\Slim\\Slim;\n$IoC = new \\Pimple\\Lib;\n$IoC = new \\Pimple\\Lib;\n$IoC['test_var'] = 'foohoo';\n// Pimple offers closures access to the\n// container - nice feature.\n$IoC['test_service'] = function ($c) {\n    return $c['test_var'];\n};\n$IoC['DB'] = $IoC->share(function () {\n$config = new \\Doctrine\\DBAL\\Configuration();\n$connectionParams = array(\n'dbname' => 'xxx_dev',\n'user' => 'root',\n'password' => 'moohoo',\n'host' => 'localhost',\n'driver' => 'pdo_mysql',\n);\n\n$conn = \\Doctrine\\DBAL\\DriverManager::getConnection($connectionParams, $config);\nreturn $conn;\n\n});\n$app->get('/', function() use($app, $IoC) {\n$sql = \"SELECT * FROM customers LIMIT 50\";\n$conn = $IoC['DB'];\n$stmt = $conn->query($sql);\n\nwhile ($row = $stmt->fetch()) {\n\n    echo $row['bill_to_name'];\n}\n\n});\n```\nThis works fine and offers me the opportunity to mock any service I stick in the IoC. In some ways it seems to me that this is more of a pattern than an engineering decision. FabPot's approach offers a little syntactical sugar, in that you only have to pass in $app becuase Pimple is imbedded into it. But on the other hand when I played with Silex I found that his approach added a certain amount of complexity and conceptual overhead when initialising objects which I'm not convinced offers much payback. This would be a disruptive upgrade - I guess my question is, what can the Silex approach offer that the simple (slim!) approach above is missing?\n. ",
    "thelinuxlich": "+1\n. ",
    "pabloh007": "I know this  is closed but it helped me out when migrating from a windows version of slim to a linux. \n. ",
    "rahul286": "Thanks for details. I wanted to use built-in server for development only. :-)\nFor... \n\nThat server won't support rewrite rules, so you'll have to include the /index.php in your URLs.\n\nI was thinking about something like this... https://wiki.php.net/rfc/builtinwebserver#router_script\nI guess Slim already knows which \"URL pattern\" will invoke which function. \nSo it might do something like \"routing\" as mentioned at above link.\nIdea is to speed-up development further...\n. Another example - http://silex.sensiolabs.org/doc/web_servers.html#php-5-4\n. ",
    "iafan": "No, I don't. The code above is the full example (pure Slim with no extras).\n. I think this can be closed in favor of https://github.com/codeguy/Slim/issues/412\n. Hmm. But it works flawlessly there (apart from throwing this exception) \u2014 why the need to work with the response object? Just curious.\nAlso, in Slim docs, there's an authentication example which I tried to follow: \n$authenticateForRole = function ( $role = 'member' ) {\nreturn function () use ( $role ) {\n$user = User::fetchFromDatabaseSomehow();\nif ( $user->belongsToRole($role) === false ) {\n    Slim::flash('error', 'Login required');\n    Slim::redirect('/login');\n}\n};\n};\n$app = new Slim();\n$app->get('/foo', $authenticateForRole('admin'), function () {\n//Display admin control panel\n});\nIsn't that a middleware that uses the same redirect?\n. And a related question in this case, if I may:\nIf I do $app->response()->redirect('/') in the middleware, this will just set the header but will not stop processing the request (unlike $app->redirect('/'), right?. What's the desired method of stopping the processing and finalizing the request then?\n. See https://github.com/codeguy/Slim/issues/412\n. ",
    "archoo": "+1 .. Proposal 2 is the way I thought things worked now from reading the docs..\n. ",
    "benoitsan": "I think the problem is the message Your requirements could not be resolved to an installable set of packages. \nPerhaps it's due to the missing key minimum-stability.\nsame kind of issue\nan example of composer.json with minimum-stability\n. argh, server issue... Wait&see then ;)\n. It's fixed.\nhttps://github.com/composer/composer/issues/1090#issuecomment-8402267\n. Perfectly placed ;)\n. ",
    "alessandroraffa": "Le latest version of Slim, perfectly solves this issue.\n. ",
    "apmuthu": "The v3.x commit solves this issue for higher versions of PHP. For those on lower versions of PHP and using Slim 2.x just change the Set and Log filename and method name as in this commit. The FrontAccounting forum post discusses this.. ",
    "tyd": "Sorry, put this into master branch by mistake... will do another pull request into develop\n. Do you have the MethodOverride middleware added?\n$app->add(new Slim\\Middleware\\MethodOverride());\n. @BarlowMW Try adding a trailing slash to your routes\n. @BarlowMW actually, can you explain what you are trying to accomplish? \nDo you want the route '/patients' to match against 'http://localhost/Dev/Slim/patients1' and 'http://localhost/Dev/Slim/patients2'  etc?\n. Probably get more help with that question over at http://help.slimframework.com/discussions\n. +1 for this mod... but please read:  https://github.com/codeguy/Slim#pull-requests\n. +1 ... this got me the first time I used Slim with nginx. Using the same solution now.\n. @moiseevigor 5.4 introduces a starting point for that http://php.net/manual/en/features.commandline.webserver.php\n. ",
    "earlPeriscopic": "Request:\nPOST /project/admin/html/potential/384 HTTP/1.1\nHost: localhost\nConnection: keep-alive\nContent-Length: 0\nOrigin: http://localhost\nX-Requested-With: XMLHttpRequest\nX-HTTP-Method-Override: DELETE\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1\nAccept: application/json, text/javascript, /; q=0.01\nReferer: http://localhost/blaine/admin/html/\nAccept-Encoding: gzip,deflate,sdch\nAccept-Language: en-US,en;q=0.8,de;q=0.6\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3\nCookie: YII_CSRF_TOKEN=975bc28723f7372c45df81d9c52fac950034bf09; 05a80-j283csmkp5_r=0; _chartbeat2=t1sp890cd248ueuv.1346429276440.1346430188015.00000000000001; WibiyaProfile=%7B%22toolbar%22%3A%7B%22stat%22%3A%22Max%22%7D%2C%22apps%22%3A%7B%22openApps%22%3A%7B%7D%7D%2C%22connectUserNetworks%22%3A%5Bnull%2Cnull%2Cnull%2Cnull%2Cnull%2Cnull%5D%7D; PHPSESSID=aa8d99e8b6c27913b9b0c38809b2b01d; SQLiteManager_currentLangue=2\nResponse:\nHTTP/1.1 404 Not Found\nDate: Wed, 19 Sep 2012 19:01:15 GMT\nServer: Apache/2.2.21 (Unix) mod_ssl/2.2.21 OpenSSL/0.9.8r DAV/2 PHP/5.3.6\nContent-Length: 229\nKeep-Alive: timeout=5, max=100\nConnection: Keep-Alive\nContent-Type: text/html; charset=iso-8859-1\n. @tyd  I did verify the middleware was being loaded properly.\n. @codeguy Is that what you were looking for?\n. Thanks.  These are my routes:\n``` php\n$app->get('/potential', 'getPotentials');\n$app->get('/potential/:id',  'getPotential');\n//$app->get('/potential/search/:query', 'findByName');\n$app->post('/potential', 'addPotential');\n//$app->put('/potential/:id', 'updatePotential');\n$app->delete('/potential/:id', 'deletePotential');\n$app->get('/updatePotential', 'updatePotentials');\n$app->post('/tweet', 'addConcreteTweet');\n```\nThe GET and POST routes work.  If I don't set Backbone.emulateHTTP to true I get the 405 error with DELETE which I expect.  The DELETE route setup there is the only one that returns a 404.  Any other ideas on why that route won't work are totally appreciated.  It's my first time using Slim, but I love it.  Used lot's of other frameworks and none that I've used are so lightweight and focussed.  \nThanks.\n. That's why I sent this header: \nX-HTTP-Method-Override: DELETE\nShouldn't that reroute it to $app->delete('/potential/:id')?\n. Yes in html/api\nSo how do I write that route correctly?  I tried $app->post instead of delete but no luck there either.\n. ... ... ...\nOk, feeling sheepish.  It was user error, but I thought I did something wrong on the Slim side.  \nNOPE!  It was the Backbone portion.  I had my Collection looking at 'api/potential' but my model looking at 'potential'.  Full fetch of the Collection worked great.  The model level had the issue.  \nYour question about the subdirectory helped me figure it out though.  I looked at the full path being sent by the header and realized a directory was missing.  I fixed that and everything works!\nThanks for the help, and for responding so fast.  Sorry to bother you with this since Slim was working properly.\n. Not sure if this helps, but the Blanket 405 error with DELETE was what threw me off.  For some reason I assumed that I had the path right since I didn't get back a 404.  Not sure if you can control that or if Apache did that though.\n. ",
    "nope": "I think is a good idea make a downlodable pdf of the documentation for offline reading. ;)\n. use option wildcard '(:item+)' and test it to catch the rigth route like code belove.\n``` php\n//i use this one\n$app->map('/entity(/:item+)', function ($item = null) use ($app) {\n//and test the request via if like\nif($app->request()->isGet() and !$item)\n//or\nif ($app->request()->isPut() and $item[0] == 'update' and $item[1] != null) {\n```\n. ",
    "ivannovak": "Yes please.  Whether it be a search function or back to one page - this would make all the difference in the world.\n. Thank you\n. ",
    "Semogj": "I agree on the suggestion about making documentation available for download as html or pdf. :)\n. ",
    "barlowm": "Hmmm thanks for the quick response Thomas, let me see if upgrading to PHP\n5.4.5 resolves the problem (I've tried various things with the code base I\nhave but none of them seems to resolve this particular issue).\nMike Barlow\nOn Thu, Sep 27, 2012 at 3:15 PM, Thomas Bley notifications@github.comwrote:\n\nHello,\n\"patients\" works for me, tested with PHP 5.4.5 as Web-Server, Slim 2.1.0\n(composer) and Win7-64 SP1.\nbye\nThomas\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codeguy/Slim/issues/437#issuecomment-8950021.\n. Ok now this is just way too weird...\n\nI've upgraded my local server to PHP Version 5.4.7, everything works as\nbefore...\nHOWEVER... here's the problem I'm still having...\nhttp://localhost/Dev/Slim/books works (so it's not as simple as a \"s\" on\nthe end.\nhttp://localhost/Dev/Slim/patient works\nhttp://localhost/Dev/Slim/patiens works (again it's not the \"s\" problem)\nhttp://localhost/Dev/Slim/patientt works (so it's not a specific URI length\nproblem)\nhttp://localhost/Dev/Slim/patientts works (at which point I throw up my\nhands and say \"I give up\" ;))\nhttp://localhost/Dev/Slim/patients1 works (again it's not a length problem)\nBut there's no way I can find to get\nhttp://localhost/Dev/Slim/patients http://localhost/Dev/Slim/patients1 to\nwork!!!\nSo I know it's not likely it's anything wrong with the Slim framework, but\nit's driving me batty here, especially since it's such a simple little\nthing! :)\nAny suggestions on how I might go about troubleshooting this? And it's not\nas simple as a typo issue (I did think of that and did a copy/paste of the\nURI several times and simply can not get \"patients\" to work no matter what\ncase (or mixed cAsE) I use.\nTIA\nMike Barlow\nOn Thu, Sep 27, 2012 at 3:16 PM, Mike Barlow barlowm@gmail.com wrote:\n\nHmmm thanks for the quick response Thomas, let me see if upgrading to PHP\n5.4.5 resolves the problem (I've tried various things with the code base I\nhave but none of them seems to resolve this particular issue).\nMike Barlow\nOn Thu, Sep 27, 2012 at 3:15 PM, Thomas Bley notifications@github.comwrote:\n\nHello,\n\"patients\" works for me, tested with PHP 5.4.5 as Web-Server, Slim 2.1.0\n(composer) and Win7-64 SP1.\nbye\nThomas\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codeguy/Slim/issues/437#issuecomment-8950021.\n. sigh interesting suggestion (I read the thread about \"trailing slashes\"\nand how to eliminate them so I hadn't thought of that), but alas no luck\nwith \"/patients/\" either (which is interesting because \"/patients1\" DOES\nwork). Looks like I may have to simply resort to another URI, but it's just\nfrustating more than anything else!!!\n\n\nThanks\nMike Barlow\nOn Thu, Sep 27, 2012 at 4:35 PM, tyd notifications@github.com wrote:\n\n@BarlowMW https://github.com/BarlowMW Try adding a trailing slash to\nyour routes\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codeguy/Slim/issues/437#issuecomment-8953085.\n. Nope, I'm trying to use the URI \"'http://localhost/Dev/Slim/patients\" to\nretrieve a list of patients in a medical record system.\nI've just been trying variations on that theme to find another variant\nwhich does NOT work, simply to assist in troubleshooting.\n\nMike Barlow\nOn Thu, Sep 27, 2012 at 4:38 PM, tyd notifications@github.com wrote:\n\n@BarlowMW https://github.com/BarlowMW actually, can you explain what\nyou are trying to accomplish?\nDo you want the route '/patients' to match against '\nhttp://localhost/Dev/Slim/patients1' and '\nhttp://localhost/Dev/Slim/patients2' etc?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codeguy/Slim/issues/437#issuecomment-8953206.\n. Well what's even weirder is that, after porting all the code from my local\n(windows) machine up to a hosted linux site with NO Code changes, it works\nperfectly (but ONLY on my ISP Hosted site, not my local site).\n\nSo since it's something, that's obviously, very specific to my local\nmachine it's now a non issue.\nThanks for the help.\nMike Barlow\nOn Thu, Sep 27, 2012 at 9:11 PM, Brent Baisley notifications@github.comwrote:\n\nAlmost seems like there is word stemming going on. But I can't imagine\nwhere that would be happening. Although stemming does explain the behavior\nyou are seeing.\n-Brent Baisley\nOn Sep 27, 2012, at 4:39 PM, BarlowMW wrote:\n\nsigh interesting suggestion (I read the thread about \"trailing\nslashes\"\nand how to eliminate them so I hadn't thought of that), but alas no luck\nwith \"/patients/\" either (which is interesting because \"/patients1\" DOES\nwork). Looks like I may have to simply resort to another URI, but it's\njust\nfrustating more than anything else!!!\nThanks\nMike Barlow\nOn Thu, Sep 27, 2012 at 4:35 PM, tyd notifications@github.com wrote:\n\n@BarlowMW https://github.com/BarlowMW Try adding a trailing slash\nto\nyour routes\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/codeguy/Slim/issues/437#issuecomment-8953085>.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codeguy/Slim/issues/437#issuecomment-8960404.\n. Hmmm interesting, although that didn't solve my problem. Still have it on my local environment, but since it works on my hosted site, I'm just going to leave it as one of those \"Mysteries\" of the computer world :)\n. \n",
    "bbaisley": "Almost seems like there is word stemming going on. But I can't imagine where that would be happening. Although stemming does explain the behavior you are seeing.\n-Brent Baisley\nOn Sep 27, 2012, at 4:39 PM, BarlowMW wrote:\n\nsigh interesting suggestion (I read the thread about \"trailing slashes\" \nand how to eliminate them so I hadn't thought of that), but alas no luck \nwith \"/patients/\" either (which is interesting because \"/patients1\" DOES \nwork). Looks like I may have to simply resort to another URI, but it's just \nfrustating more than anything else!!! \nThanks \nMike Barlow \nOn Thu, Sep 27, 2012 at 4:35 PM, tyd notifications@github.com wrote: \n\n@BarlowMW https://github.com/BarlowMW Try adding a trailing slash to \nyour routes \n\u2014 \nReply to this email directly or view it on GitHubhttps://github.com/codeguy/Slim/issues/437#issuecomment-8953085. \n\u2014\nReply to this email directly or view it on GitHub.\n. -1 Too much magic means less transparent and obvious functionality. When something isn't working, you need to debug magic. I agree with tuupola, make it an optional plugin.\n. \n\n",
    "bibob-zz": "I had the same problem today when all of a sudden GET '/tests' failed to work, POST '/tests' did work. After investigation, I found out it's the problem with browser cache. Clear my browser cache and things are back to normal :)\n. ",
    "lplume": "could you please take a look at this thread\nhttp://help.slimframework.com/discussions/problems/979-trailing-slash\n. :: as well -> could be confused (although it will be exacted what will be executed), in the end it is about taste. One character like : or @ is visible enough, two characters repeated are better than two different (thinking of typing).\nI second for : or @\n. Perhaps a standalone component maybe wrapped in a middleware?\n. nicknill did a good question. Let's take a look at Slim\\Http\\Request; the doc for the function params() is: \"This method returns a union of GET and POST data as a key-value array, or the value of the array key if requested; if the array key does not exist, NULL is returned.\", internally it uses post() and get() method.\nfunction post(): \"This method returns a key-value array of data sent in the HTTP request body, or the value of a hash key if requested; if the array key does not exist, NULL is returned.\"; actually data sent in HTTP request (like a form for example) has its own content type (multipart ecc) and the data is within the request body.\nwhile\nfunction get(): \"This method returns a key-value array of data sent in the HTTP request query string, or the value of the array key if requested; if the array key does not exist, NULL is returned.\" which is diffrent, get data are query string (www.something.yolo?query=string).\nThe HTTP header contettype is meant to identify the media type sent in the request body. Think of SOAP web services: your request is an xml in the request body, the soap services looks for an xml in the request body.\nTo clarify your question, basically the ContentType Middleware could be expanded to parse content-type multipart/form-data; and this ideally could deprecate function post() method in the Request class (be careful, this is madness, but the intention is to explain why to call getBody() instead of params() )\n. That's why people fork/fix/PR: it's call open source.\n. Perhaps a middleware is a good way to solve this. \n. More: there is the ContentTypes middleware, maybe try to take a look at that middleware \n. More more: it parses XML,json, CSV request body, I think you could implement the parser and add it as a setting \n. Once more: contenttypes middleware should be not responsible for this (sorry) I think the best way is a separate middleware dealing with \"content-encoding\" header.\n. @ekoome  (ref: https://github.com/j4mie/idiorm/issues/244 )\ni think it's a problem about the string you pass to raw_query method (something like http://stackoverflow.com/questions/6978215/mysql-divison-by-zero-error )\n. @bobdenotter your explanation is not explanatory. Using '%' inside a single quotes string (without nothing more) does not exaplain a div by zero itself, especially to someone who get this error: obviously not for those who have in-depth. But, if s/he is asking.. ew! Be real, never ever get a T_PAAMAYIM_NEKUDOTAYIM?\n. @amenadiel you are right (by the way, a string in arithmetic operation is cast to (int) 0); @ekoome cross post the issue (see the reference above) because s/he not sure where it comes form (actually it is related to PHP syntax). The ORM is idiorm.\n. WANT, this must be merged!\n. @akrabat is right, consider one thing, choosing a \"lowlevel\" tools such as streams, give you complete control over the request but it requires to tweak everything. Using third party client like guzzle (which is great) usually it makes things simplier.\n. ",
    "inabeo": "Came across something similar in the last couple of days -\nI traced the issue to not having the date.timezone variable set in the php.ini file.\nOnce this was entered everything work ok - hope this helps.\n. ",
    "natestarner": "Thank you for your response.  Here is a brief example of my use case:\n$_SESSION[\"first_name\"] = \"Nate\";\n$app->get('/', function() use ($some_var) \n{\n$_SESSION[\"first_name\"] = \"Mike\";\n$app->render('a_view.php');\n});\n$app->hook('slim.before', function () use ($app,$twig)\n{\n$twig->addGlobal(\"first_name\",$_SESSION[\"first_name\"]);\n});\nWhen I output \"first_name\" in my twig view, it will still read \"Nate\", not \"Mike\" as I would want it to.\n. ",
    "lkorth": "I am, my composer.json is just \n{\n    \"require\": {\n        \"slim/slim\": \"2.*\"\n    }\n}\nI did a clean install of composer and am running the composer install command\n. This only seems to be an issue on Windows. \nI was able to get it to work with \"slim/slim\": \"dev-master\" though. \n. ",
    "wieczo": "You could write a view extension if you have to use $_SESSION often.\nExamples for Twig Extensions are in Slim Extras.\n. ",
    "moiseevigor": "+1 would be great to have this one!\n. Just found: https://github.com/dannykopping/spore/\nand it's doing quite a lot of magic! \n. Once I've discovered this thread and this answer of Josh: https://github.com/codeguy/Slim/issues/142#issuecomment-1712167\nIt is not the CN, but works.\n. Actually this raise a good question to create a webserver for php. The one similar to nodejs, Mongrel, Thin and others.\n. yep, not using that because of  impossibility to serve the static content out of the box. Non concurrent, but as an initial approxiamtion ... kind of webrick for rails.\n. ",
    "anho": "I really think of it as an extra so it may reside in the repo Slim-Extras. Maybe with different strategies to generate the routes from a class and/or method-name. But when using Slim in any medium sized project this would definitely help (me) to get it rapidly on a solid ground.\nCurrently i do search for a framework that helps me to migrate a legacy \"rest\" application and having such a feature would help a lot.\n. Promising :)\n. Definitely +1 for this proposal.\n. Personally I really like the approach Silex provides with one of its service providers.\n$app->get('/books/:id', \"books.controller::booksList\");\nbooks.controller would be a key in the IoC container, so you have much more flexibility when constructing your objects.\nAdditionally I don't like the necessity of the \\Slim\\Controller class, restricting controllers in such a way is bad design.\n. Symfony does not need a base controller ;)\nI think that the need of the app container inside the controller does not justify the necessity of a base controller. That takes a lot of flexibility.\nPersonally I would use some sort of factory ... probably. The default one would implement your strategy. In addition another factory could be implemented that does it the way Silex is doing it. But I'm not sure if this is too much for a micro framework.\n. Hopefully to make my idea more clear: I do think these \"controllers\" should be seen more as reusable objects and that does not fit very well with the current implementation.\nBesides providing an abstract class you might use an interface/trait or doing some introspection of the constructor. I really believe there is a more elegant, flexible way to implement such a feature.\n. This is what I meant when talking about the usage of an interface/trait (e.g. \\Slim\\ApplicationAware).\n. ",
    "brantmessenger": "Possible solution...\nif(strpos($_SERVER['REQUEST_URI'], (empty($_SERVER['SCRIPT_NAME'])) ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'] ) === 0) {\n. Maybe codeguy will open this back up?\n. Why would we do this after manually setting some of those vars. Seems like you'd want to do this before the manual code.\nLine 166 : $headers = \\Slim\\Http\\Headers::extract($_SERVER);\n            foreach ($headers as $key => $value) {\n                $env[$key] = $value;\n            }\nLooks like a possibility to overwrite what we just did. I would do the above before manually setting anything.\n. ",
    "lucascosta": "Hello, I'm using Slim on HipHop PHP (RedBull) and I had the same issue with URL rewriting. I used brantmessenger's solution and it worked. Could it be merged to the code? Here's my configuration:\nVirtualHost {\n  * {\n    Pattern = .*\n    RewriteRules {\n      * {\n        pattern = ^/(.*)$\n        to = /index.php/$1\n      }\n    }\n  }\n}\n. Cool!\n. Setting the SCRIPT_NAME variable through hhvm configuration does the trick without messing with any other code. The warning stops, thanks!\n. ",
    "unframework": "In Slim v2.4.2 this issue still shows up for me when using an Apache rewrite rule. I know there are a couple ways to resolve this, but fundamentally the framework should be resilient to the empty SCRIPT_NAME possibility, or at least throw an informative error message. If I submit a pull request, would this have a chance to be looked at?\n. ",
    "MarcoMatarazzo": "Under Apache, the problem seems to happen when the rewrite is in the vhost configuration instead of being in the .htaccess file. The Rewrite engine does two different things depending on the context, and this is often overlooked. Hint: the PT flag seems to solve the problem. \nYou may want to look here for some more information, and maybe add something to the configuration page: http://chapter31.com/2013/06/21/php-script-name-returning-empty-string/\n. ",
    "slowmove": "Really really want this to be implemented @codeguy :)\n. ",
    "spoonkojo": "I would also like to see PATCH included, thanks.\n. ",
    "bartlewis": "+1\n. ",
    "m-hume": "Glad to here its making its way through to release!\n. ",
    "elazar": "Ah, I think I actually intended to change that constructor line to call out to $this->router() (to allow for subclasses to override the behavior). I'll try to get that fixed today. Thanks for the feedback. :)\n. @codeguy Any chance we could see some example code showing usage of this new feature as you've described it?\n. I think I would codify that assumption with an actual interface:\n1. Create an interface (e.g. \\Slim\\RouterInterface) with the same API as \\Slim\\Router\n2. Have \\Slim\\Router explicitly implement that interface in its class definition\n3. Change any existing typehint references to \\Slim\\Router in Slim to instead reference that interface\nAt that point, anything implementing the interface can be provided and PHP internals for checking interface implementation will provide helpful error messages if the interface implementation is flawed.\n. Otherwise, sure, this looks like a good approach.\n. ",
    "honzabrecka": "+1\nI'm for solution 1. or 4.\n. ",
    "dinacel": "+1 too, solution 1 seems to be the best.\n. Not everybody is able to decrypt an encrypted cookie, I won't use this middleware, but we can't say that there's a huge risk. It could be a risk to take in consideration for a bank site, but I don't think they will use Slim... neither PHP (it's not a disguise criticism).\n. My bad, I didn't know that isset(null) == false\n. ",
    "rcstr": "i'm not using friendly URL's\n. ",
    "xjunior": "You're probably right. I fixed this cause it was an undocumented pain that I had. I had to code PHP once and Slim was my choice.\nFixed the issue I had but really didn't even ran the tests.\n. Just checked the build output and the issues seem to be pretty straight forward to fix. Mainly (probably) version compatibility on preg_replace and a missing \"/\" in the end of a path (I'd have added that if I've ran the tests).\n. I really haven't tested at all =/ I was scratching my own itch and was really in a rush (code assessment). I just needed the framework to work properly on a situation I believed that should be the default one.\nSorry to disappoint you. I really have no time/interest to work on this anymore. Wish you the best to fix this issue.  \n\nCarlos Palhares\nSent with Sparrow (http://www.sparrowmailapp.com/?sig)\nOn Monday, May 13, 2013 at 12:34 PM, Heath Morrison wrote:\n\nBTW - I ran your branch through phpunit. It seems kinda broken. Your preg_replace call is missing a regex, and it's erroring out on a bunch of tests.\nMaybe you mean to call substr_replace instead of preg_replace? I believe your code will not work if mod_rewrite is disabled.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/codeguy/Slim/pull/475#issuecomment-17827278).\n. I didn't write tests, I was just trying to get that done for myself, but I believe that #475 doesn't break other situations IIRC.\n. I guess he meant to say that it's a feature planning for the future.\n. \n",
    "doublemarked": "I believe that your ticket is basically the same as the one I just researched and submitted: https://github.com/codeguy/Slim/issues/521\n...my feeling is that the test may be broken. Can you read through my ticket and share your thoughts?\n. BTW - I ran your branch through phpunit. It seems kinda broken. Your preg_replace call is missing a regex, and it's erroring out on a bunch of tests.\nMaybe you mean to call substr_replace instead of preg_replace? I believe your code will not work if mod_rewrite is disabled.\n. No worries!\n. Hmm. I ran your branch through phpunit. It seems kinda broken. Your preg_replace call is missing a regex, and it's erroring out on a bunch of tests. I will write some advice on your ticket about this.\n. Does that mean you consider it working properly?\n. It's a mysterious way of describing whether something works as intended or not :) What do you mean by \"for now\"?\n. Thanks. It's nice to hear I'm not the only one seeing it this way...\n. ",
    "timdavies": "Here's a preview (although I've had to remove large chunks of the error - sorry, I'm at work): \n\n. ",
    "Cyrille37": "I think so. Sensible data should not be stored in a poor encrypted string at client side.\n. Please, for the Slim roadmap, keep the velocity in priority one. It exists several really greats light frameworks like Lumen and Silex. In my mean Slim is the fastest and should keep the lead.\nIf one like Lumen or Silex is light and fast as Slim, it will be easier to use them because switching between larger (Laravel, Symfony) will be natural.\nCheers\n. Try to have a look to for a performance tool in quality build chain, like https://blackfire.io or other.\n. ",
    "inf3rno": "Yepp, Slim does not force me, but there are no alternative Middlewares in the lib, and this is the second worst solution to handle session data. (The worst is non encrypted cookie on client side...) So I think this SessionCookie Middleware is a bad idea, and should not exist, because not everybody realizes the risk of this solution.\n. @tuupola I agree, at least documentation should mention it.\n. Thank you! :-)\n. Ok. I gave up, no session cookies, I cannot work without them...\n. @cwt137 IE 8-9 has only very limited features by CORS, that's the problem. I know how to add response header...\n. Thanks!\n. Yepp, but implementation is not simple I think.\n. Slim root, or make a new folder for collections :D\n. https://www.idontplaydarts.com/2011/02/scanning-the-internal-network-using-simplexml/\n. I will sooner or later...\n. I'll create a separate framework with a SLIM adapter...\n. I hardly believe you don't have access to any windows computer. http://msdn.microsoft.com/en-us/library/ms181052%28v=vs.80%29.aspx\n. ",
    "goldsky": "I ended up by\nphp\n$_SERVER['QUERY_STRING'] = str_replace('&amp;', '&', $_SERVER['QUERY_STRING']);\nright before calling the Slim class.\n. http://windows.php.net/\n\nPHP 5.4 series will be the last versions to support Windows XP and Windows 2003\n\nWhy we can't ignore Windows XP?\n1. Most of big companies and industries (read: clients) don't have easy path to upgrade\n2. Most of the users are still using IE8, especially in Asia (sucks but true)\nSo in our case, we, as developer, must try to set our system as low as the user/client can be, to experience their usage, even just to throw \"Unsupported Browser\" message.\nIf you drop the support <5.5 not because of its particular feature/function but rather its supporting reason, I'd like to ask you to consider it again.\nPlease.\n. ",
    "xintron": "One thing to notice is that some web servers don't support the newer status codes. E.g. nginx will take the 429 response and turn it into 200 instead. I would love to see the support in Slim though but it might be worth mentioning in the documentation while this is implemented that some unexpected results might come out of this based on the web server used.\n. One way of solving this is to add the possibility to set a custom 405 error\nhandler and when checking against the HTTP-methods a check is made to see if a\nerror handler has been set, if not run the default notFound-handler. That way\nit you can set a custom handler for 405 but if you don't want to bother you\nonly need to set your own 404 handler and also get all 405's to that\nnotFound-callback.\n. ",
    "hjr3": "Opened #500 \n. ",
    "WooDzu": "I've just added a pull request for this. https://github.com/codeguy/Slim/pull/487\nHope it helps\n. I appreciate this pr is somewhat a hack but it's a little pain that slim won't run from cli by default.\nThe method for cron jobs I use is to invoke curl eg.\n* * * * * curl http://127.0.0.1/api/v1/tasks/gc.\n. +1 for this\n. ",
    "CodeBrauer": "@codeguy - is there any option to run it on cli (for cronjobs)\n. I already use slim for a project that now needs a cronjob - switching is not so easy .. If there is no support I will build a pure PHP standalone script\n. Of cause a standalone file would be easy but I just thought it would be possivle directly. Running the cron with cURL would be possible also, but could bring new problems because it's running on your webserver and not in your commandline.\n. ",
    "mnapoli": "in that case use a CLI framework like Symfony Console or Silly\n. You don't need to switch framework, you can use one alongside the other. Yes you would have to write another PHP file (e.g. console.php or whatever) in addition to the existing index.php, but the content of that file should be pretty easy if you have structured your application correctly.\n. @Jusomeara please be aware that these benchmarks are skewed, have a look at the comments. Some containers should have a cache, or should be compiled, but the author didn't do it. Same for ZF2 he didn't benchmark the correct package. And the biggest problem is he's using a simple loop to benchmark. The truth is that benchmarking containers is unfortunately very difficult because a lot of things come into play (e.g. caches, opcache, autoloading, what is configured, etc.) and the time involved is very small. Putting some code in a loop doesn't work because autoloading, cache reads, etc have an impact (like in a real application where every new request starts from scratch). For a realistic test you have to benchmark through a web request (so that opcache works), but then response time are so fast (because you shouldn't use loops to make it artificially slower) that the HTTP + PHP init overhead is greater than the code execution. That should be doable though, but it takes some work and thinking :) (if anyone wants to try it I would be willing to help)\nIn any case I'm really happy with the direction this is all taking. I'd love to see PHP-DI in Slim, but I also think that container-interop is a very good option and would make Slim stand out (PSR-7 + container-interop makes a hell of a flexible architecture). Pimple is great for starting easily but becomes limited when the application grows. A different container would allow Slim applications to scale much more easily and create very complex applications.\nOf course Slim must come with a default container and work out of the box though ;) (whichever you decide to use)\nRegarding PHP-DI the v5 is currently in development and will be finished in a few weeks. I have been working on a new site + new documentation, it's still WIP but it's probably a little bit better than the current documentation: http://phpdi5.herokuapp.com/ (this URL is temporary just to give you an idea)\nThe most important changes in v5 are:\n- lighter package, lighter defaults (less composer dependencies, annotations disabled by default, etc.)\n- simpler usage, syntactic sugar (i.e. if you are used to Pimple it will look familiar): http://phpdi5.herokuapp.com/news/14-php-di-5-syntaxic-sugar.html\n- support for modular systems (we're working on that for Piwik which has a plugin system): overriding or extending previous entries, lists, etc. (I can detail more if you are interested)\nI did a few performance tests yesterday with this branch using Pimple and PHP-DI, there's a small perf difference (15%) but it can be improved, I've already pushed some optimizations (v5 is not polished yet).\nI have done a little Silex + PHP-DI integration, and I'd love to push it further with Slim (either through official support, or a PHP-DI integration). In any case I would love to help and get involved in Slim, and if you have suggestions for improving PHP-DI (new features\u2026) the v5 it is still open.\nNow regarding this pull request, it is really great. I also thought about a few things:\n- I wouldn't put the request and response factories in the container: those are only helpers used by the App class, so I would move them to private createRequest() and createResponse() methods\n- I would document somewhere the container entries (or \"services\") that Slim expect to be registered in the container: that way user it is easier to know what to define in containers for Slim to work\n- a way to keep the simple API of Pimple would be to have App implement ArrayAccess, and redirect to the container - of course that wouldn't work with offsetSet in which case an exception would be thrown (or it could work only with Pimple\u2026). That means the interface is not fully implemented, but the convenience is kept. It's just an idea, I'm not too sure about that myself\u2026\nI have another suggestion about dependency injection too but my comment is getting big, I'll open a separate issue ;)\nEdit: here is the other issue: #1186\n. > If they aren't in the container, how would a user swap them out for a different Request/Response implementation?\nGood point, but if users wants to create a request or response they don't need to go through an abstraction, they can create it by knowing which implementation they want to use. Is there a use case I'm missing?\n\nI, personally, am not a fan of the array access interface of Pimple.\n\nMe neither :) But I admit that I can see how it makes writing small apps really easy\u2026\n\nHowever, $app->getContainer->get() maybe is a bit longwinded? So I can see the argument for implementing ArrayAccess and offsetGet with offsetSet throwing an exception. Alternatively, we could create our own SlimContainerInterface interface which extends Interop\\Container\\ContainerInterface and adds set() and isset()?\n\nIt would destroy the ability to use any container :(\nThe way I see it, ArrayAccess makes sense only with Pimple. So a Slim edition with Pimple makes perfect sense, it's super easy to learn and use (but limited when growing). In another \"edition\" (whatever the wording) of Slim with a more advanced container the ArrayAccess because useless, because then users will interact with the container directly.\nI have a weird idea: Slim could have a Application class that is container agnostic (i.e. relies on ContainerInterface), and there would be a subclass that implements ArrayAccess. So by default you use Slim with Pimple and the \"Slim ArrayAccess-Pimple\" version (i.e. the subclass). And everything would be simple and well. But then you can also choose to use the agnostic Application class and provide your own container. I have not thought this through a lot, just throwing the idea\u2026\n. You mean the pull request description or his most recent comment? In the PR description there are not 2 different application classes (which leads to the problem of ArrayAccess not a good match with ContainerInterface). And in his latest comments he talks about \"we could create our own SlimContainerInterface interface\" which is not the same thing as having 2 application classes. Did I miss it ;)?\n. I concur that the . is sometimes used for \"namespaces\" in container entry keys, e.g. module.user.manage_controller.\nI think in Laravel or Lumen they use the @ symbol.\n. By the way why is it necessary to use a different separator? Here is the solution I've ended up using in Silly:\n- if is_callable() just invoke it. Can be:\n  - closure: function () {}\n  - function name: 'foo'\n  - static method call: ['Foo', 'staticMethod'] or Foo::staticMethod\n  - object method call: [new Foo, 'method']\n  - invokable object: new Foo  (i.e. implements __invoke())\n- if not callable, try to resolve from the container:\n  - Foo::method or ['Foo', 'method'] (not static method) -> will resolve 'Foo' from the container, check it's an object and invoke $foo->method()\n  - 'Foo' (string) -> will resolve 'Foo' from the container and check that it's an invokable object (i.e. implements __invoke())\nPlease note the difference between:\n- `Foo::staticMethod` (`is_callable() === true`) the container is not involved, it's a static method\n- `Foo::method` (`is_callable() === false`) will use the container\nThe advantage with that is that it's very similar to actual PHP callables, and it supports arbritrary container entry ID (e.g. module.user.controller) as well as class names, which is awesome when using a container that supports autowiring (no need to configure anything).\n. Why not keep support for echo by not erroring if the controller returns null?\nThe documentation could teach the right way (return a response), but the application wouldn't crash if you don't return one. I guess that could help a lot of people and keep the framework easy to use (debugging was one of the use case mentioned). It might also help for the migration to v3.\n. I understand, in that case I would suggest to introduce an interface in Slim similar to InvokerInterface, and add a default implementation that simply does call_user_func_array().\nThe current behavior will be kept, the overhead will be invisible, but it can be possible from v3.0 to provide the features I listed above. I would be interested for example to try publishing a pre-configured version of Slim that comes with such features.\nWhat I can do:\n- a pull request to introduce an InvokerInterface (or another name if you prefer) + default implementation\n- I publish a repository exposing such features on my own Github account, if you want to merge those features upstream I would be more than happy to help\nWhat do you think?\n. @lalop it's possible yes! I'm not entirely familiar with this part. There's also the ResolveCallable trait, between those two I'm still a little confused I need to spend more time in the code. The Slim\\App still directly invokes the controller though, so the CallableResolver seems to only wrap a controller in another closure to add some behavior.\n. OK thanks for the link. In any case I think this issue can be closed for now.\n. Those args should maybe be in the request? After all they describe the request done by the client, I don't see how they are different from query parameters or POST data.\nBy the way I think that's how it's done in Symfony.\n. :+1: good to know!\n. I think this was already done in #1187?\n. @lalop How are you rebasing? It is weird there are \"rebase\" commits in the pull request, whereas rebasing shouldn't introduce new commits. Also the PR is still in conflict with develop.\n. This is what i see on the pull request (here on this page on GitHub):\n\nThis pull request contains merge conflicts that must be resolved.\n\n\n\nYes I use rebase, but I have some conflict while rebasing and maybe I have a bad usage of rebase while resolving them.\n\nUsually when you rebase git goes through commit by commit and stops when there is a conflict. Then you can solve the conflict and continue rebasing. This results in no extra commit: when you solved the conflict you actually edited an old commit.\n\nIt seems that my local develop branch differs from the official, I think this is the problem.\n\nYes that doesn't sound good. Usually when you have rebased, you want to \"force push\" because you need to overwrite the old commits with your new ones (when you edit a commit while rebasing it becomes a new commit with a different SHA1). Then the local branch and remote branch are the same.\n. @jenssegers the reason is that setting entries is very different from containers to containers. E.g. with Symfony's DIC you compile the container from definition sources (YAML, XML, \u2026) and then it's read-only (i.e. can't set). In PHP-DI, you might want to do something similar to allow good use of cache and best practices (static configuration for the container). Also some container entries could come from autowiring, which you don't need to set in the container at all.\n. For the record it seems to come from here: https://github.com/slimphp/Slim/blob/develop/Slim/Container.php#L169\n. > I'm surprised that container-interop doesn't have a concrete class.\nThe idea is to be less invasive to existing DI containers: they can keep throwing their own exceptions, they just have to implement the interface. Most containers do have their own NotFoundException.\nAnd from the consumer POV, the fact that it's an interface doesn't impact the catch (NotFoundException $e) ....\n. yes it could be added for practical purposes, but I'm afraid it could encourage some people to consider it part of the standard and to use it/type-hint against it instead of the interface (which would break if another implementation of the interface is passed later).\n. :+1:\n. It is.\n. Ah sorry I thought you were asking to include it.\nAll means all to me ;) (i.e. I want to catch all methods) I don't see why it should be \"all but options\".\n. It seems you accidentally removed the Testing section.\n. +1\n. I agree that it's not the role of the container to create request and response objects (already voiced that in another comment but can't find the link). I don't think it's a big deal but having those factories inside the app (or another class) would help replacing containers more easily, so +1.\n. No worries I can't even find where it was. It's good to have an issue to discuss that.\n. I'd suggest to:\n- install satooshi/php-coveralls only when used (so not putting it into composer.json)\n- run code coverage once per build so that builds are faster\nThis is the template I use to run code coverage only for PHP 5.6 (which will be the fastest):\n``` yaml\n\u2026\nbefore_script:\n  - if [[ \"$TRAVIS_PHP_VERSION\" == '5.6' ]]; then composer require satooshi/php-coveralls:dev-master -n ; fi\n  - if [[ \"$TRAVIS_PHP_VERSION\" != '5.6' ]]; then composer install -n ; fi\nscript:\n  - if [[ \"$TRAVIS_PHP_VERSION\" == '5.6' ]]; then phpunit --coverage-clover clover.xml ; fi\n  - if [[ \"$TRAVIS_PHP_VERSION\" != '5.6' ]]; then phpunit ; fi\nafter_script:\n  - if [[ \"$TRAVIS_PHP_VERSION\" == '5.6' ]]; then php vendor/bin/coveralls -v ; fi\n```\n. @GrahamCampbell I think the point is that Slim currently requires dev-master: https://github.com/slimphp/Slim/blob/develop/composer.json#L34 (which is the problem)\n. @GrahamCampbell The branch alias will not make the branch be considered as stable by Composer or am I missing something?\nIn other words, requiring a branch is the same as requiring master, it's still dev stability level.\n. The branch alias you proposed is 0.6-dev -> it's a dev version. I really don't think Composer will consider a branch as a stable/tag release. Maybe I'm wrong though.\n. The whole problem is that if you have package A requiring Slim, then you have to explicitly allow minimum-stability: dev for it to work. This is because Slim requires a dev version of FastRoute.\nTo solve the problem, we need Slim to require a stable version of FastRoute, that way package A can require slim/slim: develop@dev without having to change the minimum-stability.\n. or 3.0.x-dev whatever\u2026 that's the same! it's a dev version, not a tag. But whatever that's not the subject.\nEdit: 3.0.x-dev isn't really a version constraint. Anyway, we are talking about people trying out the future version, that's fine\u2026\n. whatever! That's not the issue :)\nAnd 3.0.*@dev isn't a tag too\u2026\n. Right! Anyway, try to require Slim v3, and you'll see that you have to add a minimum-stability because of the FastRoute requirement, which is annoying. That's the issue :)\n. I'd say no need to duplicate the discussion from #1308\n. This repository will be installed as a dependency by Composer, it's not the project of users. The .htaccess will not be in the users project. So it's not really useful to have it here. Or maybe I'm missing a use case where users just clone this repository and don't use Composer?\n. You could use the existing container class and just replace the request factory ($container['request'] = $this->factory(function ...)?\n. > I know this is jumping the gun a bit... and I figured we would need to wait to see where PSR-11 lands... but this seems to be a good bet imho.\nThis is jumping the gun a lot ;) There is very little chance that a standard configuration format could exist, there is even less chances that it would be supported by Pimple in its current version and even less chance that it would look like this even if it existed.\nI don't think this change brings any value today, and this could easily be done in the future if it turns out necessary. What do you think?\n. Makes sense, will update the PR!\n. Done.\n. Good god that was fast thanks! :)\n. @silentworks I need to think of that more often ;) Will keep it in mind, I might be working on such topics in the next days.\n. Also the next step IMO is to remove the CallableResolverAwareTrait (again, per discussions on IRC), but I wanted to do it in a separate pull request.\n. Thanks for the review!\n\nMaybe a final check should happen in CallableResolver::resolve() if $resolved is indeed callable.\n\nDone in ba08a05, an exception will be thrown if the CallableResolver cannot return a real callable.\n\nClosures will never be bound to the container \n\nOh yeah good catch, I fixed it in e87d996. I also added a test for that to make sure it's staying.\n. Thank you for noticing that. I've restored the way it was before regarding binding Closures to app or container.\n. Hi! I've been using Gitter for quite some time on some of my projects and came to love it. The few times I wanted to go in IRC was to go to the Slim channel and it was always a pain (part because I'm not familiar with it, part because of lacking features).\nHere is a list of advantages of Gitter over IRC:\n- chat log is public and on a web page (for example see https://gitter.im/PHP-DI/PHP-DI)\n- chat log is archived so you can catch up even if you are not connected (though maybe that's possible with IRC?), you can also search messages\n- connecting only requires a GitHub account, which is consistent with the repo/issues and most developers have one\n- Markdown support, which is pretty nice for formatting text, code, quotations, links, \u2026\n- code syntax highlighting (which, for discussing code, is awesome)\n- GitHub integration: for example #123 will be turned into a link #123\n- website integration: https://sidecar.gitter.im\nAnd it's compatible with IRC (https://irc.gitter.im) so it doesn't mean you have to drop IRC.\n. @OptimusCrime I have to disagree as Slack has none of the advantages I listed above except maybe the IRC integration. It is a closed tool that requires creating a Slack-specific account (quite bad for the support of an open source project), is terrible for discussing code (no Markdown support, no code highlighting, no Github integration, \u2026).\nIf you see advantages to Slack I'd love to see them listed.\n. @tuupola FYI Gitter is completely compatible with IRC, so it would still work.\n. Hi!\nHere is the spec:\n\nExceptions directly thrown by the container MUST implement the Interop\\Container\\Exception\\ContainerException.\nA call to the get method with a non-existing id SHOULD throw a Interop\\Container\\Exception\\NotFoundException.\n\nExceptions thrown by factories (i.e. closures) are not thrown by the container, so I don't see a reason to catch them and rethrow them as ContainerException.\n\nI think this part of the spec is a bit confusing, because the second sentence seems to call for the enforcement of the first sentence.\n\nI'm not sure I understand what you mean. If you are saying that the second sentence conflicts with the first, I don't think it's the case because NotFound extends ContainerException.\n. @vlakoff:\n- Slim already supports container-interop, that's not the question here\n- this issue is about minor improvements about how the standard is implemented\n- if you want to use Pimple, you already can\n- try to be more constructive and respectful of other's work\n. I'm still definitely :+1: on that ;) Those are value objects, not stateless services, so IMO they shouldn't be in the container.\n. As @namaless suggested already storing config values in the container like this make sense: slim.outputBuffering.\nThat's what I do in the PHP-DI bridge: http://php-di.org/doc/frameworks/slim.html#configuring-slim\nphp\n    'settings.responseChunkSize' => 4096,\n    'settings.outputBuffering' => 'append',\n    'settings.determineRouteBeforeAppMiddleware' => false,\n    'settings.displayErrorDetails' => false,\nA container is key => value, a config is key => value too. It's much simpler to have 1 concept instead of 1.. @ivandokov that is yet another way of configuring the application, container + config array + .env is just too much, it's too confusing.\nNote that I don't have anything against that package and env variables, I use it too sometimes (PHP-DI can integrate directly with that). It's just an implementation detail of how I configure the container. The application (or framework) only uses the container, it's much simpler that way.. In my own experiences having 2 middlewares turn out to be impractical because it would mean having to build 2 different \"HTTP stacks\" (list of middlewares & routes) for dev or prod.\nIf that's of any interest here is what I did: a single error handler middleware that would ask a responder to generate a response: the responder injected in the middleware would depend on DIC configuration (https://github.com/stratifyphp/error-handler-module/tree/master/src/ErrorResponder). That implies not instantiating the middleware directly but rather relying on a DIC, else we are back to the problem I mentioned above.\nEdit: that also allows users to customize the \"responder\" if they want to generate a different error page, after all the responder is just like a controller. It could be called controller if that's clearer too.. Any reason why not reusing Zend Diactoros? That would be less things to maintain\n. Having written a PHP-DI integration I'm interested by this change, but I think that users should not be left by themselves to use a container.\nFor what it's worth here is what I did with Silly's documentation:\n\nSlim could have a documentation for DIC + list of supported containers (like Zend Expressive). Whether those would be external links or internal docs is a detail, I'm \ud83d\udc4d  to write some documentation for PHP-DI if that's of any interest.\nAnd by \"supported containers\" I mean what @geggleto means: containers that have the default services registered.\n\nI'm not a fan of this as the PHP ecosystem has no standard way for registering services. \n\nMaybe you could have a look at https://github.com/container-interop/service-provider ? It has been WIP for some time but it's getting more and more stable. With a final push we could make a 1.0 and it could benefit Slim, just like with container-interop? Also that solution is so simple it is extremely easy to support in any DIC so it would be an improvement from the current DefaultServicesProvider.\n. Would it make more sense to completely remove that? Callables would be bound to a container whose API is undefined.\n. @akrabat so $this->service should be removed in favor of $this->get('...') only?\n. > What if we do away entirely with the concept of a CallableResolverInterface and just use our own. Is anyone using a different resolver anyway? Do we really need to support more than an actual callable or a container-interop container to resolve things?\nWoops yes :) In the PHP-DI bridge: https://github.com/PHP-DI/Slim-Bridge/blob/master/src/CallableResolver.php\nThe reason for that is that with PHP-DI there is a concept of \"lazy callable\" common to PHP-DI and all its framework integrations. Here is how you can define a controller:\n```php\n$app->get('/', [MyController::class, 'myAction']); \n$app->get('/', [MyController::class]); \n```\nSee https://gist.github.com/mnapoli/f8afef0f556010c144e7 which explains in more details. Of course you can use classic PHP callables on top of that.. That's good news!\n\nand the rest of the objects in DefaultServicesProvider were already defined within App.\n\nI'm not sure I understand this part: can \"core\" services of Slim still be overridden? Is Slim doing something like $router = $container->has('router') ? $container->get('router') : $this->buildDefaultRouter() ? (this is pseudo-code). @akrabat OK so a question that's maybe a bit out of scope here but just to get it right: when using a container it might make sense to let the container create the \"Application\" class (the container would call setRouter(), etc. with the correct dependencies)?. Awesome great then!. Mmh OK, I was confused since this is also not consistent with https://www.slimframework.com/\nAnyway thanks!. Reopening in case you want to merge it, feel free to close it again if it's not necessary :). unused outside of the if, immediately overwritten inside the if\n. without the \\ it was resolved in the current namespace\n. unused\n. not necessary, same namespace\n. I wasn't sure if it was OK with the project's coding style (I can remove this change), but documenting like that offers autocompletion and static analysis when iterating the array, which is pretty useful to detect potential errors or to navigate the code (Ctrl+click on a method call for example).\n. @lalop why is this method public? I don't see it being called anywhere except in this class.\n. :+1: \n. @jaapverloop I am, for example, one interested in providing integrations of Slim with PHP-DI. I don't expect Slim to configure my container as 1) Container Interop doesn't cover this and 2) this is very complicated and not optimal because all containers are different (which is exactly why Container Interop doesn't cover this). So the thing that makes sense is that I distributed a package that configures Slim with a PHP-DI instance preconfigured with all the necessary services.\nWhat's important though will be to document the services that Slim expect, so that developers like me can create integrations easily.\n. Commented code should rather be removed?\n. Could someone explain to me how it was working before? I'm afraid I introduced a regression because now I have to register the middleware in the container (and it's not necessary on 3.x).\n. OK so that's an improvement then ;)\n. The new signature of the method is public function resolve($toResolve) so it makes sense right?\n. How about Slim\\Exception\\ContainerEntryNotFoundException extends \\InvalidArgumentException implements Interop\\Container\\NotFoundException ? It's a \"not found\" kind of exception so it should extend NotFoundException.\n. Oh well then that's it!\n. Why not leave these here but not actually use them in createRequest() and createResponse()? That way you keep BC, you can tag these entries as deprecated and App is much simpler.\n. Do you think it would make sense to have something like Environment::fromGlobal() that would do the same thing?\n. Right sorry that was probably what you meant before but I didn't understand it that way.\n. :+1:\n. ",
    "akrabat": "Maybe http://akrabat.com/run-a-slim-2-application-from-the-command-line/ can help?\n. This needs to be against the new code in the develop branch.\nAlso, would the additional code in run() be better off in Middleware?\n. @vlakarados any updates on this? \n. Closed to do lack of response. Please reopen if required.\n. Is the work against the master or against develop branch?\n. Yes, but the diff is against a class that's only in master \u2026\n. @codeguy do you want this for Slim 2 or 3?\n. As we now have a getting started tutorial and cookbook examples, I'm closing this.\nMore tutorials and docs are always welcome though!. This is looking good so far @danielgsims.\nThe concern about which objects become aware of the DIC has has come up before. See the discussion on https://github.com/slimphp/Slim/pull/1112\nFrom my point of view, the main things that the solution needs to achieve are:\n1. Lazy retrieval of the class from Pimple\n2. Consistent API between setting the dispatched callable and the route middleware callable.\nAs long as we satisfy these, then we'd like the cleanest solution possible :)\n. @danielgsims \nI much prefer that the resolver is separated to its own class. However, your current diff has an inconsistent API which I dislike:\n$app->get('/foo', 'foo:bar');\nbut\n$route->add($app['resolver']->build('foo:bar'));\ni.e. I'd like to see a way for the route to to know about the resolver so that:\n$route->add('foo:bar');\nworks. \ni.e adding the callable to get or to a route should be as simple as possible for users of Slim.\n. I think that ease of use and consistency are the most important, so yes, I like the idea of the Route taking the resolver.\n. In addition to creating your own error handler, you can now completely disable Slim's error handling by removing the error handler from the container:\nunset($app->getContainer()['errorHandler']);\n. This is being addressed in Slim 3 where you'll be able to register your class with the Pimple DI container which will allow you to instantiate the class however you wish.\n. I'd like to lose the encrypted cookies from core if we can. It feels like something that could also be in middleware.\n. Yeah - We'll have a Slim session implementation if someone cares enough...\n. Oh good. I have just come across this while looking at devlop.\nI don't see that FastRoute cares about the name though, as the only thing that uses the name is Router::urlFor() as far as I can tell.\n. Can you reproduce this in a small test application?\n. The problem is that that you controller extends Slim\\Slim and you override the constructor. If you want to do this, then you must call through to the parent constructor. \nSimilarly, if you want to override render(), then it must have the same function signature as the parent class.\nSo, your homeController needs to look like:\n``` php\nclass homeController extends \\Slim\\slim {\npublic function __construct(array $userSettings = array()) {\n    parent::__construct($userSettings);\n    $this->app = \\Slim\\Slim::getInstance();\n}\n\npublic function render($template, $data = array(), $status = null) {\n    $this->app->render('home.twig', array(\"user\"=>\"Luis\"));\n}\n\n}\n```\nHowever, as you instantiate homeController in routes.php, you don't actually need it to extend Slim, so it should probably look like this:\n``` php\nclass homeController {\npublic function __construct() {\n    $this->app = \\Slim\\Slim::getInstance();\n}\n\npublic function render() {\n    $this->app->render('home.twig', array(\"user\"=>\"Luis\"));\n}\n\n}\n```\nThis way, homeController is no longer an instance of Slim itself, but rather holds an instance of Slim as $app.\nSo, in summary, Slim is working as expected.\n. Reading https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md, I think that we already have a vendor namespace: Slim\nI also don't see why we need a src directory. Could someone explain why?\n. No longer applicable as we've removed the autoloader. See #1256\n. @JoeBengalen Yes map() should be public. Fixed.\nAll the other helper methods (get, post, put, patch, delete & options) fill in the method array for you. map() doesn't as you specify the set of methods you want. Hence mapRoute() and map() have exactly the same function signature & so map() is redundant and slows things down.\n. Actually, ignore me - this makes more sense for 5.6 :)\n. My understanding of the current code is that we create & instantiate the callable even its not used as it's done in Router::setCallable(). Literally, all I've done in this branch is move it up the call chain and add the Pimple check within the closure.\n. Where does the route name go?\n. i.e. is @silentworks's proposal:\nphp\n$app->get($url, $callable)->add($routeMiddleware1)->add($routeMiddleware2)->name('my-name');\n?\n. Generally seems sane to me. \nLet's see what other feedback we get.\n. As a rule, I prefer explicit over magic, which is another plus point in @silentworks' explicit method call solution.\n. @codeguy: Works for me.\n@JoeBengalen: I agree about documentation, though I think you'll find that with the appropriate doc blocks, IDEs will offer autocomplete for add() & setName()\n. Thanks!\n. Good catch. I'll look at it this week.\n. Fixed by https://github.com/slimphp/Slim/pull/1263\n. Having slept on it & looked at the diff again this morning, I don't see any obvious architectural changes that would simplify things without making other stuff more complex. I'm generally happy with this solution.\nI agree that Route is an integral part of Router and as the user can replace the Router implementation with their own, it's not a problem. I've deliberately made it so that we don't try to register the container into the Route instance unless its an instance of ServiceProviderInterface, so I'm confident nothing will break if another Route implementation is used.\nIf someone wants to override the resolveCallable strategy, then they can extend App to change the routable callable and override Router & Route and inject their new implementation into $app, so it's not too hard to do.\n. Route isn't a Container; Route has a Container.\nHowever, App, is a Container as it extends it. \n. @JoeBengalen I considered creating a \"ContainerInterface\" containing just setContainer(Container $container);, but the ServiceProviderInterface is essentially exactly that, so I just used it.\n. @JoeBengalen Is there a better way to resolve a string that represents a key to Pimple when calling $route->add()  ?\n. Yeah, I figured that the MiddlewareAware trait didn't really care how the callable came to be, so I separated it.\n. I'm not actually against @jaapverloop suggestions here.\nThere's a minor consistency issue as you'd get:\n$app->get('/', 'this:that')->add($app->resolveCallback('foo:bar'));\ncompared to:\n$app->get('/', 'this:that')->add('foo:bar');\nBut it does keep the DIC outside of Route and all we'd need to do is make resolveCallable public.\nI think that adding an additional route-config argument to get() doesn't seem to gain us anything other than additional typing to set a name which is I think quite common.\nWhat does everyone else think?\n. You can't at the moment as add() is type hinted with callable. If this one goes in, then I can do something about App's add to match Route's.\n. On the whole, I'd rather Route knew about the container, so we can have a nice consistent UI that's clean and easy to use.\nI don't think it hurts that much to have Route know about Container as it doesn't do anything else with it and doesn't need to. Application developers won't be accessing it either as there's no way to get at the $container as it's protected and there's no accessor.\n. POST should take priority over GET for me.\n. The only obvious changes I can see to that code snippet would be:\n$app->args['title'] .= 'Hello World'; => $app['args']['title'] .= 'Hello World';\nAssuming that PlebianPHP\\SlimTwig overloads App::__construct() and implement loadTemplate().\nHave I missed something?\n. Personally, I think that /user and /user/ are different.\n. To my mind, filtering and validation of request parameters is related to the route, so conceptually, I'd imagine this being a either route middleware thing or if we're going to attach a requestFilter to the $app, then this would be set on a per-route basis.\n. I'm not sure what's required here.\n@JoeBengalen's comment of:\n\nWhy not simple create middleware for this that updates the Request object? You could use the withParsedBody(array $filteredPostData) and withQueryParams(array $filteredGetData).\n\nsummed it up for me.\nDo we need a section in the docs?\n. I don't see how you would know which filter you wanted until routing had happened. \nIf you do it in middleware, then you could put the filtered request into an attribute.\n. Why doesn't $request = $request->withParsedBody($newData); work?\n. Just create your own Request object and set it in the container before you call run().\n. Many solutions to this - all of which are outside the scope of the code Slim code as the solution is either via replacing the Request object in the DI container or via middleware.\n. What does the config object do that that an array doesn't?\n. I vote to remove. There are config components out that for people that want more power.\n. As someone who doesn't use cookies at all, I'd prefer that they were handled by a helper class. However, if they really are in the 80%-use case, then App methods are fine.\n. Done.\n. Personally, I like Pimple for simple DI needs. When I need something more powerful, then I personally use Zend\\ServiceManager - it's also required if I'm using Zend\\Form. With Slim 3, this means that I have two DI containers in play at the same time which is a small nuisance as you have to either make one aware of the other or keep track of what is where. In these cases, it would be nice to be able to replace Pimple with Zend\\ServiceManager.\n. Implemented in #1179.\n. @alexantr The issues have now been sorted, so it's back in Review stage now: https://groups.google.com/forum/#!topic/php-fig/0lwqRXm94Ik\n. Thanks @mariano\n. I tend to agree with @silentworks. \nA service provider as suggested by @codeguy implies that seeing a $req->getParam() is automatically a signal that it's unsafe. Alternatively, route middleware allows for replacing the data in the request with filtered data so that it's outside the controller altogether, so I see that we already have two different non-framework-invasive ways to handle this.\n. I think we can close this in favour of #1180?\n. I will try & do the same. \n. > I wouldn't put the request and response factories in the container: those are only helpers used by the App class, so I would move them to private createRequest() and createResponse() methods\nIf they aren't in the container, how would a user swap them out for a different Request/Response implementation?\n\nI would document somewhere the container entries (or \"services\") that Slim expect to be registered in the container: that way user it is easier to know what to define in containers for Slim to work\n\nAgreed. Along with which interfaces we expect any given service key to implement.\n\na way to keep the simple API of Pimple would be to have App implement ArrayAccess, and redirect to the container - of course that wouldn't work with offsetSet in which case an exception would be thrown (or it could work only with Pimple\u2026). That means the interface is not fully implemented, but the convenience is kept. It's just an idea, I'm not too sure about that myself\u2026\n\nI, personally, am not a fan of the array access interface of Pimple. However, $app->getContainer->get() maybe is a bit longwinded? So I can see the argument for implementing ArrayAccess and offsetGet with offsetSet throwing an exception. Alternatively, we could create our own SlimContainerInterface interface which extends Interop\\Container\\ContainerInterface and adds set() and isset()?\nThoughts anyone?\n. I see two separate issues:\n1. Do we allow for a common way to configure the container? (e.g. $app->getContainer()->set(\u2026);)\nIf we did this, then we'd need our own interface, which is why I brought it up earlier. Having thought about it, I think that we don't want to do this as configuration is so different between different DIC implementations.\n1. How do we access the dependencies from $app?\nWith this change, the canonical way is $foo = $app->getContainer->get('foo'). Should we have a 'shortcut' way to get at the dependencies?\nIf w choices that I can see are:\n1. Write shorter methods on App: e.g. $foo = $app->getDependency('foo') & $app->hasDependency('foo')\n2. Implement __get() and __issset() on App which would match the way we do it in Slim 2. This would allow us to do $foo = $app->foo.\n3. Implement ArrayAccess and implement offsetGet() and offsetExists(). We would also have to through exceptions for the implementations of offsetSet and offsetUnset. This would allow us to access via $foo = $app['foo'].\nPersonally, I don't see a DIC as an array, so am leaning towards option 2. Matching the way Slim 2 does it makes upgrading easier too which would be nice. \n. @JoeBengalen I do the same as you.\nOthers don't though. This is especially true for $app['router']->urlFor() and for $app['settings'].\n. Rebased onto develop and have added __get and __isset. \n. What does the change give us and how does it affect what's happening in #822 ? \nAlso you'll need to rebase and take into account the change in #1184\n. OK, I've read #1178 now, so know why this PR exists. Just need the rebase with the #1184 change taken into account.\n. Type hinting the $request and $response is optional.\n. Personally, I much prefer returning the response as it's very clear what's happening.\n. I'm confused.\n``` php\n$app = new \\Slim\\App();\n$app->get(\n    '/',\n    function($request, $response) {\n        echo \"HERE\";\n        $response->write(\"Hello World\");\n        return $response;\n    }\n);\n$app->run();\n```\nworks as you'd expect: \n\n. FWiW, I'm not a fan of bringing back echo as it makes the controller callable different from middleware callables. \nI like the consistency of \"always return a response\" as it's simple to remember.\n. Fixed in #1206.\n. You can safely assume that no one will ever turn off POST parsing.\nThe reason that only POST is checked for isFormData is that PHP only fills in $_POST for POST requests. If you're using PUT, then supply the correct Content-Type header.\n. Netcraft thinks that there are around 80million active PHP websites, How many do you think have POST turned off?\nBy \"no one\", I meant \"a vanishingly small percentage\"\n. Thinking aloud here, but I think that the route middleware should have access to the Route object and its parsedArgs property.\nThe most obvious way to to do this is to change Route::add() so that we do $callable->bindTo($this) rather than $callable->bindTo($this->container). This means that the route middleware would have to access the container some other way such as use ($app) when defining it.\nWe should also make $parsedArgs public so that the route middleware can manipulate them before they are passed to the action callable.\nThoughts?\n. Hmm... My ideas here solve the problem for a closure, but not if we get the route middleware via the CallableResolver. More thinking required.\n. @mnapoli This is the conclusion that I'm coming to. \nWe don't find out what they are until Route::run() is called, but we could then put them into the Request object, which would make them available to the route middleware. They would then be accessible in the action callable via $request or via the $args parameter.\n. Doh! They are already there!\n$request->getAttributes() and $request->getAttribute($name, $default = null) have the data already populated\u2026\n. Though, if some route middleware does sanitise the request's arguments, then the action's $args parameter to the isn't updated, so the action callable must use $request->getAttributes() and ignore $args...\n. https://github.com/slimphp/Slim/pull/1196 solves this problem and makes the Request's attributes and $args consistent at the point of dispatch.\n. Fixed in #1206.\n. Changing it would be a BC break on Slim 2 which isn't going to happen at this stage in Slim 2's life.\n. We're only accepting security fixes to Slim 2 now. Is this relevant for what's in develop?\n. Are you able to create a small example project that shows the problem?\n. You have to return a Response from the route's action callable:\n$app->get('/test', function($req, $res, $args) {\n   return $response->write('some nice output');\n});\n. Fixed in #1206.\n. Note, that I also looked at implementing this as Middleware that we ship as part of Slim 3, as shown here: https://github.com/slimphp/Slim/compare/develop...akrabat:output-buffering-middleware?expand=1\nThe main problem with this approach is that we'd be breaking the convention that the route callable always returns a Response, which is why I chose to implement this directly in Route::__invoke(). \nAlso, the user would also have to ensure that the OutputBuffer middleware was the innermost one to avoid errors in any other middleware, which may increase the support burden, which is another reason why implementing it directly seemed better.\n. Yes, I came to the same conclusion that the result of Route::__invoke() must be a  Response for consistency.\nA different Route implementation would be an reasonable alternative, though the docs for how to enable it would have to be easy to find as it's clear that echo'ing in the route callable is a very common use-case. This is why I went for putting it back into the default Route for this PR.\n. We have no current plans to change from $args.\n. Intend to get to it this week.\n. @lalop would be handy if you could rebase it though\u2026\n. Thanks.\n. What's the problem that is solved by this PR?\n. Why does the static $responded exist at all?\nWe don't call run() twice and if someone does that, that's their problem, surely?\n. Original branch is gone, so I have reimplemented in 48a16a51a54ba57eec6f4543923f75cbfb5f9566\n. Currently, I'm hoping for first beta in the first week of June. \n. I like the correctness, but this PR causes the unit tests to fail.\n. Please reopen against the 3.x branch when ready.\n. Set has been replaced by Pimple for the next version of Slim.\n. Why?\n. Also, can you rebase?\n. Tests are failing due to a syntax error. I think it's a missing closing brace.\n. Please reopen against the 3.x branch when ready.\n. Thanks for your work on this @JoeBengalen. I would like to see the non-PSR-7 methods documented somewhere. Just in the docblocks would be fine for now.\nAs I understand it, basePath is the part of the URI that maps to where index.php is. e.g. for http://example.com/my-app/, the basePath is /my-app and '/' is the path used in $app->get('/', \u2026. The basePath can then be used for generating the correct URLs in the router's urlFor() and also would be used for creating the absolute URLs for static assets such as JS/CSS links within view scripts.\n. @pine3ree Actually Slim creates its Request and Response objects via the DIC. See https://github.com/slimphp/Slim/blob/develop/Slim/App.php#L85-L106.\nAs a result, you can do this:\nphp\n$app = new \\Slim\\App();\n$app['request'] = $app->factory(function ($c) {\n    $request = \\Phly\\Http\\ServerRequestFactory::fromGlobals(\n        $_SERVER, $_GET, $_POST, $_COOKIES, $_FILES);\n})\n// set up routes, etc.\n$app->run();\nThe app is now using Phly's Request object and Slim's Response.\n. @JoeBengalen Do you know when you'll get back to this?\n. If updated the bits I commented on and have merged. As I had to rebase, GitHub didn't notice.\nMerge commit: https://github.com/slimphp/Slim/commit/d3039eafc510f269985d9953d0accd0ea4c37a1b\n. Can you explain why we need this?\n. I think I'd rather have a method that returns true if a given mime-type is in the list of accept headers.\nWhat do others think?\n(ping @codeguy, @silentworks, et al)\n. Please reopen against the 3.x branch when ready.\n. Personally, I disagree as I don't think a service container is inherently an array.\nIn Slim 3, __get() is available, so accessing a dependency is as easy as:\nphp\n$foo = $app->foo;\n// or\n$foo = $app->getContainer()['foo'];\nNote that __set() isn't implemented as the container interface we use doesn't specify how to set a service. \nTo set up the dependencies, you use:\nphp\n$app->getConatiner()['foo'] = function() { \u2026 };\n// or\n$container = $app->getContainer();\n$container['foo'] = function() { \u2026 }\n. They way that @JoeBengalen does it is the way that I do it.\n. You have a service provider that registers routes and middleware when it's retrieved from the container?\nHow does that work? It implies that urlFor() for that route would only work if the correct service is retrieved first, even though that service may not be needed.\n(For the record, I'm genuinely trying to understand your use-case here.)\n. I think the main place we differ is that I think\nphp\n$container = $app->getContainer();\n// do something with $container\nis more developer friendly as it's more explicit and easier to understand when maintaining the app in the future.\n. I would say that an equivalent way to replicate the Lavavel example is:\n``` php\n<?php\nnamespace My;\nuse Slim\\App;\nuse Pimple\\ServiceProviderInterface;\nuse Pimple\\Container;\nclass MyServiceProvider implements ServiceProviderInterface\n{\n    public function boot(App $app)\n    {\n        // add route\n        $app->get('/myroute', function () {\n            return 'Here is my route';\n        });\n    // register services\n    $app->getContainer()->register($this);\n}\n\npublic function register(Container $app)\n{\n    $app['foo'] = function () {\n        return new Foo();\n    };\n}\n\n}\n```\nusage:\n``` php\n$app = new Slim\\App();\n$provider = new My\\ServiceProvider();\n$provider->boot($app);\n```\n. That's weird. This test code doesn't work either:\nphp\nrequire \"vendor/autoload.php\";\n$exception = new \\Interop\\Container\\Exception\\NotFoundException;\n. No, it's because NotFoundException is an interface, not a concrete class. \nI'm surprised that container-interop doesn't have a concrete class.\n. Fixed in https://github.com/slimphp/Slim/commit/dbf4334d912d6ecab8bf993359ecad7a44298ddd\n. oh, I wasn't querying the interface, just that there wasn't a concrete implementation of it in addition :)\n. Yeah, I tend to agree.\n. I don't understand this PR. The testRunSendBody test works with the current code.\n. If we remove responded completely, then two tests will work\u2026\n. I agree. I'm just wondering if we can lose it completely.\n@codeguy said that it was needed due to headers being sent, but I can't see why that's the case as we have a headers_sent check.\n. That's my gut feeling. We'll wait on @codeguy though.\n. As @codeguy never followed up, let's remove $responded.\n. Please reopen against the 3.x branch when ready.\n. Router creates each Route object. You can swap out the Router object, but this new router would have to create Route objects that match the interface.\n. Presumably that's because urlFor is also part of the router. What about add though?\n. I believe that RouteInterface and RouterInterface now match what we use in the rest of Slim.\n. Implemented in #1246 \n. Can you provide sample code that shows the problem?\n. aha! We'll have to get that captured in a unit test and get Travis up and running\n. That's interesting!\n. @kminek I think I've fixed this via PR #1245 - are you able test?\n. Appears to work: https://travis-ci.org/slimphp/Slim/jobs/64138247\n. Re point 1, subRequest exists solely to avoid you having to create the correct request object yourself.\ni.e., you could do:\n$app->get('/bar', function($req, $res) use($app) {\n    $uri = $req->getUri()->withPath('/foo');\n    $sub_req = $req->withUri($uri);\n    return $app($sub_req,  $res);\n});\nwithout needing this method at all.\nAs such, subRequest is a convenience method, and that's okay.\nRe point 2: I can see the argument, but disagree. a sub request runs in the context of the first request, not as a completely independent thing. If you have middleware that needs running on both the request and subrequest, then use route middleware.\nthree places to put middleware would just be confusing for a very specialised edge-case. \n. Merged\n. I agree too.\n. PR #1256 for you @silentworks \n. The Request follows the PSR-7 specification and so doesn't have a setter intentionally.\nInstead, you would do this:\nphp\n$request = $request->withBody($plaintext);\n. Fixed by #1260 \n. Replaced with #1260\n. When uploading a single file, the UploadedFile object should be directly against the keyname:\ni.e given : <input type=\"file\" name=\"this_file\"> and an route callable of:\n$app->post('/fileupload', function ($request, $response) {\n    var_dump($request->getUploadedFiles());\n});\nI should see:\narray (size=1)\n  'this_file' => \n    object(Slim\\Http\\UploadedFile)[70]\n      protected 'name' => string '90by90.png' (length=10)\n      protected 'type' => string 'image/png' (length=9)\n      protected 'size' => int 3962\n      protected 'error' => int 0\n      protected 'sapi' => boolean true\n      protected 'stream' => null\n      protected 'moved' => boolean false\n      public 'file' => string '/private/var/tmp/phplSKALT' (length=26)\nrather than:\narray (size=1)\n  'this_file' => \n    array (size=1)\n      0 => \n        object(Slim\\Http\\UploadedFile)[70]\n          protected 'name' => string '90by90.png' (length=10)\n          protected 'type' => string 'image/png' (length=9)\n          protected 'size' => int 3962\n          protected 'error' => int 0\n          protected 'sapi' => boolean true\n          protected 'stream' => null\n          protected 'moved' => boolean false\n          public 'file' => string '/private/var/tmp/phplSKALT' (length=26)\nThis is described by example in https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-7-http-message.md#16-uploaded-files\n. Do we feel this is ready to merge?\n. Implemented.\n. I agree, too. Looking forward to the PR.\n. Fixed via #1317\n. I'd be happy enough if an exception was thrown at the end of the method. If an upgrade to the router ever returns something unexpected, at least we'd know!.\n. Needs rebasing as subRequest() has changed.\n. I don't mind either way.\n. Merged.\n. I can see the logic for the Slim 3 compatible Middleware components to be in the Slim\\Middleware namespace\n. Slim-HttpCache is Middleware\n. I agree about the ServiceProvider coupling.\n. The top level namespace is for vendor, so all of this organisation's PHP projects should be under the Slim top level namespace regardless of whether they are Slim specific or not. \nI think that everyone other than geggleto agrees that any middleware that the organisation creates should be in the Slim\\Middleware namespace.\n. As a rule, you should use your own top level namespace for your code. e.g. I use RKA or Akrabat\n. Me neither. \nPSR-7 is interesting for writing middleware that works with multiple dispatchers. When you're writing the route callable, it's Slim specific anyway.\n. FWiW, Zend-Stratigility solves this problem by wrapping the PSR-7 objects in its own versions which have the extended functionality.\ne.g. their Response object implements write(), but getProtocolVersion() is simply a proxy to the underlying PSR-7 object.\n. Yeah. I wasn't suggesting that Slim does this at all - just showing a different approach. I'm happy with the additional methods on our objects.\n. Fixed.\n. Playing with code, these are two options:\n1. Implement Request::createFromEnvironment()\n   See: https://github.com/slimphp/Slim/compare/slimphp:develop...akrabat:request-create-from-environment?expand=1\nThis simplifies the creation of the Request object in the Container, which may be a good thing in and of itself.\n2. Update Request's constructor to accept $_POST data,\n   See https://github.com/slimphp/Slim/compare/develop...akrabat:post-data?expand=1\n. I tend to agree, so have raised PR: #1278\n. Yes.\n. Merged.\n. My understanding is that cookies are not in core any more.\n. Thanks.\n. PR #1278 moves the creation of the Request into a factory method, so that Container is simply:\nphp\n        $this['request'] = $this->factory(function ($c) {\n            return Http\\Request::createFromEnvironment($c['environment']);\n        });\nLooking at the rest of the factories in Container now, they all seem really really trivial to copy/paste into your own container if you're using something else.\n. In some ways, Slim is intentionally opinionated; you're supposed to use our Container (and our Router).\nSlim 3's App was originally written to extend Pimple so that changing the DIC was impossible. However, we have done enough work to enable replacement of Container with your own one, but you have to do a small amount of integration work. \nPersonally, I think that the number of people what will change the DIC is small and would be able to provide an integration package on Composer for this DIC of choice.\nI'm happy with this state of affairs as I particularly don't want any additional complexity such as two containers in play. I've done this with Slim 2's Set composing Zend\\ServiceManager and it's a right old pain.\n. I don't think your application should set anything new into the container after App is instantiated. If you choose to replace Slim's Request object with another one, then Slim will work, but your app needs to be written to target your new Request object or the PSR-7 baseline.\nI'm happy with what we have at the moment.\n. Not for 3.0 Maybe 3.x.\n. urlFor() is in Router now\n. No. It's part of https://github.com/slimphp/Slim-Documentation/tree/gh-pages\n. urlFor => pathFor\nAlso, pathFor prepends a '/', so to create a fully qualified URL, you now need to do this:\nphp\n    $router = $this->router;\n    $uri = $request->getUri();\n    $url = $uri->getScheme() . '://' . $uri->getHost()\n            . $uri->getPort() ? ':' . $uri->getPort() : ''\n            . rtrim($uri->getBasePath(), '/')\n            . $router->pathFor('news-archive', ['year'=>'2015'], ['foo' => 'bar']);\n. Added issues to Slim-Website.\n. Excellent! :smile: \n. I don't see much point in writing a class that implements ServiceProviderInterface when we can simply document the registration as:\nphp\n$container['flash'] = function ($c) {\n    return new \\Slim\\Flash\\Messages;\n};\n. I don't think that FastRoute supports optional parameters.\nThis doesn't work for me:\n``` php\n$app->get('/hello/{name}[/{optional}]', function ($req, $res, $args) {\n    $name = $req->getAttribute('name', '== not set ==');\n    $optional = $req->getAttribute('optional', '== not set ==');\nreturn $res->write(\"<p>Hello $name. Optional: $optional</p>\");\n\n});\n```\nAm I missing something?\n. The only way I've found to do optional parameters is like this:\n``` php\n$app->get('/hello2/{name}{a:/?}{optional:.*}', function ($req, $res, $args) {\n    $name = $req->getAttribute('name', '== not set ==');\n    $optional = $req->getAttribute('optional', '== not set ==');\nreturn $res->write(\"<p>Hello $name. Optional: $optional</p>\");\n\n});\n``\n. So you get$app->get('/test/{param1}[/{optional:[A-Za-z]}]')->setName('test');to route to a callable?\n. I am genuinely confused. Why haveurlFor` work with path definitions that do not work?\n. Yeah - fundamentally, Slim doesn't support optional parameters as it can't dispatch them.\n. I clearly don't understand, so am happy to review a PR :)\n. I agree that a clean way to do optional parameters is required. I think it's deeper than a urlFor() issue.\n. I've started looking at replacing FastRoute with Aura.Router.\nInitial work here: https://github.com/slimphp/Slim/compare/develop...akrabat:aura-router?expand=1\nTestbed that I'm using: https://gist.github.com/akrabat/66d04bb7a8be8082a53f\nThings that I know work:\n- Optional parameters\n- Middleware attached to routes\n- urlFor() with query parameters\n- Route groups ($app->group()) with names and middleware\nBC breaks with Slim 3 so far:\n- ->setName() is replaced by $name as last parameter as Aura.Router requires the name up front. (Null is allowed though, so I made $name an optional last parameter to map(), get(), post(), etc.)\nNotes:\n- Names for route groups prepends with a full stop separator for use with urlFor(). i.e. a route call foo in a group called bar will be accessed as $url = $router->urlFor('bar.foo'); \n- Middleware for route groups is done as an array as the fourth parameter to group() because as we\n  add each route within the group immediately, we can't use an ->add() construct. \n. I can't see any way around the middleware attachment issues for route groups. Even though Aura.Router has the concept of route groups, they are implemented the same way Slim does it by prefixing the path and then adding the individual routes. As a result, you don't have the concept of a group object after adding the route group on which you can then set some middleware.\nThis is why I've made Slim's add route group function signature as:\nphp\npublic function group($pattern, $callback, $name = null, $middleware = [])\nI couldn't work out a way to do ->add() for this case. If we wanted consistency between adding route middleware and route group middleware, then we'd have to change the function signatures for adding routes. In Slim 2 we have variable arguments and the ones we don't know are assumed to be middleware. If we were to go back to defining middleware as a method parameter, then I would prefer an array as I've done for group, so you'd end up with:\nphp\n$app->get($pattern, $callable, $name=null, $middleware=[]);\n$app->map(array $methods, $pattern, $callable, $name=null, $middleware=[])\nObviously, we can't change the way we add middleware to the app itself, so $app->add() would still exist, regardless.\nOne final option. Don't allow middleware on route groups :)\n. That's great timing! Thanks @nikic :)\n. Fixed.\n. Unfortunately, I've just merged a PR which means that this needs to be implemented against https://github.com/slimphp/Slim/blob/develop/Slim/Http/Stream.php.\n. Fixed in #1292\n. Having found what we thought was the last show-stopper for beta1 (uploaded files), we found another one (optional route parameters).\nI'm hoping we'll have a decision on the approach we'll be taking this week, so we can can find someone to implement the required changes. Then we'll have an idea of when we can release beta1.\n. Merged.\n. Merged.\n. Version 0.5 doesn't have optional routes as it was tagged on 5th May 2015 and optional parameters was implemented on 18th June 2015.\n. I agree. We'll ask @nikic nicely sometime after beta1 when it's had some more widespread testing :)\n. @GrahamCampbell: There isn't a version tag for the feature we need yet\u2026\n. @GrahamCampbell explain please? If we set composer.json to \"nikic/fast-route\": \"^0.5\",, how do we guarantee that composer installs the tip of master and not the 0.5 tag?\n. You can't use the request/response in the container as they are not the same instances as the ones passed into your route action.\n. Slim uses PSR-7 request/response objects which is why you cannot use the request from the container.\n. Correct. You must use the request and response that are passed into the route callable (or into the middleware if that's what you're writing)\n. Your controller action has a request object passed to it.\n``` php\n$app->get('/', 'HomeController::homeAction');\nclass HomeControlller\n{\n    public function __construct($container) {\n        $this->container = $container;\n    }\npublic function homeAction($request, $response)\n{\n    // do something with $request here.\n    // set up $response\n    return $response;\n}\n\n}\n```\n. Agreed.\n. See http://www.slimframework.com/docs/start/web-servers.html\nImprovements welcome, by PR of https://github.com/slimphp/Slim-Website/blob/gh-pages/docs/start/web-servers.md\n. This would be a BC break for the Slim 2 upgraders for no real benefit from what I can tell. \n. I can see @rszrama argument & I agree about the extra parameter. it's harder to make mistakes with two methods compared to a single one with a flag.\nIn Slim 3, urlFor is a bit of a weird function at the moment as it is aware of query parameters, but not of the scheme name, domain name or base path. I suppose that's why Slim2 has a urlFor in the application class which is at least aware of the base path.\n. Having thought some more, Like @codeguy, I'm okay with this too. \nI think it'd be nice to have an easy way to build a fully qualified URL from a route name at some point.\n. Would the alias trigger an E_USER_DEPRECATED?\n. merged #1320 \n. Thanks.\n. As Slim 3 is released, we are only fixing Security issues on Slim 2.\n. Thanks!\n. Given that we use fast route, I'm unclear how this could be changed.\n. We want a fix for this before RC1\n. The top-level issue is fixed. Not sure we can change the example in the initial report.\n. Hi,\nAre you seeing this in version 2 or the upcoming version 3?\n. See https://github.com/slimphp/Twig-View/pull/20\n. Based on IRC chat:\nAnother option would be to add a method to the Request that returns the combination of scheme, domain, port and base path. It could be used something like this:\nphp\n$url = $app->request->siteUrl($app->router->pathFor('hello'));\nor\nphp\n$url = $app->request->siteUrl() . ltrim($app->router->pathFor('hello'), '/');\n. How about something like #1328 to provide an easy way to get the fully qualified URL including the base path?\n. Closing for now as probably need something on the Request object too.\n. Please test with latest version of Slim 2.\n. As Slim 3 is released, we are only fixing Security issues on Slim 2.\n. This is currently a 2-liner:\n``` php\n$app->get('/', function ($request, $response, $args) {\n$errorHandler = $this->notFoundHandler;\nreturn $errorHandler($request, $response);\n\n});\n```\nObviously, you can replace $this->notFoundHandler with $this->notAllowedHandler or $this->errorHandler.\nWe should document this. I'm not sure that it's worth writing additional helpers on App though.\n. Are you saying that it's the setting up of your own notFound handler that's too complicated rather than the raising of a notFound during dispatch?\n. The user story bit didn't help at all. A clear answer to \"Do you mean helper methods to define the error handlers? Or a helper method to call an error yourself from any part of you code.\" would have been more helpful.\nI've updated the issue title.\n. For reference, this is the diff that @Lewiscowles1986  is proposing: https://github.com/slimphp/Slim/compare/3.x...Lewiscowles1986:patch-1\nMy thoughts are that I'm generally fine with adding this functionality. It's not a major thing for me as I only ever set these up once in an application, so I don't mind the additional closure. It's not like adding a route which is a  very frequentl thing.\nI'd like to see the methods called registerErrorHandler, registerNotFoundHandler and registerNotAllowedHandler to make it clear what they do.\nThough, arguably, a single method called registerHander($name, callable $handler) would also work? \n. One option would be to write as middleware:\nphp\n$app->add(function($request, $response, $next) {\n    if ($request->getMethod() == 'GET' &&\n        $request->getUri()->getPath() == '/') {\n        $request = $request->withUri($request->getUri()->withPath('/hello/rob'));\n    }\n    return $next($request, $response);\n});\n. Interestingly, the discussion is completely off topic in terms of the actual reported issue.\nIn order for the code to work as you would expect, you have to pass the response object to the subRequest() like this:\nphp\n$app->get('/', function ($request, $response, $args) {\n    return $this->subRequest('GET', '/hello/grzes', '', [], [], '', $response);\n});\nThis is because subRequest() will pull a new Response object out of the container if you don't pass one in.\nThere's  a reasonable argument that $response should be the first argument to subRequest().\n/cc @silentworks \n. Which version of Slim are you using ?\n. We are not intending to change Slim2's behaviour at this point.\n. Docs aren't in this repo. So you can continue working on the PR and additional docs on https://github.com/slimphp/Slim-Website.\n. I'm generally in favour. Slim\\Http has additional helper methods, but does conform to the interface, so it may be useful to others.\n. Due to dependencies on Slim\\Interfaces\\Http and Slim\\Collection, I can't see how we can split out Slim\\Http into its own component and still maintain BC.\nThis has to be a 4.0 thing.\n. Presumably, you mean that you want the default attribute available in the route middleware? I don't see how it's available in app-level middleware.\n. I would prefer two methods: setAttributes(array $attributes) and setAttribute($name, $value) as these are then analogous to the the Request's withAttributes and withAttribute methods.\n. I agree with your thinking. setArgument/setArguments that store into the routeArguments sub-array is the right approach as it's the only way to ensure that $args has keys for the optional route parameters.\n. Fine with me - though I'd also call it routeParams rather than routeArguments in the rest of the code.\n. @AlexStansfield, I'm sorry, but I think that my work in #1348 to move the route argument assignment from the App to the strategy has inadvertently re-implemented a good proportion of your work. \nCan you check over and see if it does what you require and if not, update this PR to add what's missing?\n. PHP keeps track of its current directory and references file from there.\nTry:\nphp\ninclude __DIR__ . '/../header.php';\n. This functionality in Slim 2 will not be changed at this time.\n. This is too big a change for Slim2. I'm also not seeing broken unit tests on 2.x.\n. The main trouble is that you've done a fairly major refactor to fix this issue.\nI was expecting to see a call ob_get_clean() just before https://github.com/slimphp/Slim/blob/2.x/Slim/Slim.php#L1375 or something similar.\n. Thanks.\nThe PSR-7 interface states that the $value parameter of withHeader() is a string or array of strings. Personally, I'd say that's a little too strict, but it is what it is :)\n. I think you may have opened this PR against the wrong branch? There's over 250 commits in this PR\u2026\n. Please create a new PR by branching 3.x then putting your change on your new branch and then creating the PR between your new branch and 3.x.\n. Yes, the method may change as Slim2 supports the _METHOD POST parameter ( http://docs.slimframework.com/routing/put/#method-override). \nIn Slim3 a neat way to handle that would be with App middleware that looks for _METHOD in the POST parameters and changes the Request's method.\n. Thanks! I intending to look at it today.\n. It's not just you. How about determineRouteBeforeAppMiddleware ?\n. Thanks for your work on this!\n. > Be aware that container-interop states that a container SHOULD return always the same instance.\nI didn't realise this, so we'll definitely sort that out.\n. In general we have a case where we're trying to balance the ease of use of the framework with allowing reasonably easy swapping out of the DIC by experienced users.\nCurrently use is simply:\nphp\n$container = new \\Slim\\Container();\n// configure $container with app specific items here\n$app = new \\Slim\\App($container);\n// register routes on $app\n$app->run()\nWe don't want to complicate this too much. \nHow would you envisage a Configuration class fitting into this workflow?\n. Thinking a bit about it, App uses the container for these purposes:\n- Lazy load objects when required (e.g. notFoundHandler)\n- Allow users to swap out our implementation for another choice (e.g. Request)\n- Provide service location for those users who use closures as route callbacks.\nI can't see how we can continue all three requirements without App being container aware.\nThere's an argument that the configuration keys could be done separately, but it doesn't seem that important as the people who are capable and want to use their own DIC are more than capable of writing a few services.\nHappy to be proved wrong though.\n. I understand better now.\nHow would a use configure their own notFoundHandler so that it was lazy loaded as most requests wouldn't need it to be instantiated?\n. Just adding my thoughts for the record as I'm sure this will come up again.\nI'm also fine with waiting to see where PSR-11 ends up before we re-architect this bit. \nThe key requirements for me are that you can use IoC & DI for your application code and that the container can be swapped by someone with enough knowledge (cough).\nI'm okay with the general concept of splitting the configuration out from Container, as long as we keep all the advantages to users that we currently have. It can certainly wait till after 3 is released.\nOh also if you want the container to create Slim\\App, I believe that's possible now:\n``` php\n$container = new \\Slim\\Container;\n$container['app'] = function ($c) { return new \\Slim\\App($c); } \n$app = $container['app'];\n```\n. Was there a specific use-case you came across that prompted this change?\n. Yeah - looks like a 3.1 issue as I can't get it work :)\nThis is my test case:\n``` php\n<?php\n$app = new \\Slim\\App();\n$app->get(\n    '/',\n    function ($request, $response) {\n        return $response->write(\"Hello World!\");\n    }\n);\n$router = $app->getContainer()['router'];\n$router->setDispatcher(\\FastRoute\\cachedDispatcher(function ($r) use ($router) {\n    foreach ($router->getRoutes() as $route) {\n        $r->addRoute($route->getMethods(), $route->getPattern(), [$route, 'run']);\n    }\n}, [\n    'cacheFile' => DIR . '/../route.cache'\n]));\n// Run app\n$app->run();\n```\nI get this error: http://i.19ft.com/bbdea8a4.png\n. I'd like some of these changes for 3.0 though:\n1. Updated RouteInterface and RouterInterface to match what we actually do\n2. passing the router to dispatchRouterAndPrepareRoute()\n3. Possibly the changes to Route & Router that affect the function signatures.\n. Okay. The problem was the way I was setting up the cachedDispatcher, not with the code itself. Once I fixed that, all was well.\nI understand what the code does and why, so was happy to merge.\n. CallableResolver supports one format. If you need another, then you can replace the default implementation with your own choice. Given that CallableResolver has a mere 63 lines of PHP code in it, it's not hard to replace\u2026\nSee http://ocramius.github.io/blog/when-to-declare-classes-final/  for question 2.\n. This doesn't solve the  'php://input is not available with enctype=\"multipart/form-data\".' issue as file uploads also need to be handled when the method is a real PUT.\nThe latest 3.x does work with METHOD = PUT though, so this issue is resolved.\n. See #1357\n. @yurevichcv I see you are proposing more complex solutions to @poolslick2002, having rejected the more complex solution of a route group for yourself\u2026\n. Maybe $app->add() should take a new last parameter of $afterDispatch which defaults to false. Then if you wanted the middleware to run after dispatch, you set it that parameter to true when adding the middleware?\n. _shrugs All I'm saying is that a solution needs to be pragmatic for people who currently rely on the current behaviour as well.\nAnother option is to have the ability to force a new dispatch after app middleware is run. That is, we dispatch at the start and store the route information to the request's attributes. If after the app middleware is run we check for the route information and if it's missing, we dispatch again.\n. Hooks are like middleware but not quite. Generally, I would like new users to only have to learn middleware. \n. #1357 has now been merged.\n. Thanks @yurevichcv!\n@silentworks I added getNamedRoute to the interface during merge.\n. Are you using version 2 or 3 beta?\n. Consider upgrading to to 2.6.2.\n. Are you able to create a small example app showing the problem?\n. Fixed in #1381\n. Thanks!\n. Further explanation: https://mwop.net/blog/2015-07-28-on-psr7-headers.html\n. is this ready to merge?\n. Closed in favour of #1385.\n. @Outfl3sh The tip of the 3.x branch should fix this issue for you.\n. I think that the current design is correct. The intention of the feature is to allow app middleware to know which route is likely to be dispatched at the end of the middleware chain. As such, if there is no route, a piece of middleware can make a decision on what to do about that before dispatch happens.\nAs Alex says, for your use-case, a single outer app middleware that calls either notFoundHandler or notAllowedHandler is the the way to achieve your goal.\n. We can't trust that Slim is being used with Apache (or any web server), so I take the view that we shouldn't automatically mess with the Response object.\n. Can we simplify RequestBody to something like:\n``` php\nclass RequestBody extends Body\n{\n    /*\n     * Create a new RequestBody.\n     /\n    public function __construct()\n    {\n        $stream = fopen('php://temp', 'w+');\n        stream_copy_to_stream(fopen('php://input', 'r'), $stream);\n        rewind($stream);\n    parent::__construct($stream);\n}\n\n}\n```\ni.e. what do we gain with your current implementation over this?\n. @micheh Can you rebase and solve the conflicts please?\n. Thank you :)\n. I think that code is correct: $_POST is empty if the method is not POST.  \nI think that what's missing is a parser to deal with multipart/form-data data in php://input when the method is not POST. \n. I think that if someone needs multipart/form-data in a PUT request, then they can write their own media type parser and register it with the Request object.\n. @tabaktoni PHP doesn't support multipart/form-data for PUT. I'm unconvinced that we should write our own decoder in Slim unless PHP exposes theirs. \n. We would love a PR!. I'm not sure what to do about this. As 2.6.2 is released, we can't retro-fit it, so presumably it should be set to 2.6.3?\n. What is the type of the Exception?\n. Also, $e->getTraceAsString() should show you the backtrace\u2026\n. Glad you found it!\n. This code would never work as App doesn't load settings files.\nThe correct way to do it is:\nphp\n$settings = require 'config.php';\n$container = new \\Slim\\Container();\nforeach ($settings as $key => $value) {\n    $container[$key] = $value;\n}\n$app = new \\Slim\\App($container);\n. If we did want to change the behaviour, the PR looks like this: https://github.com/slimphp/Slim/compare/slimphp:3.x...akrabat:di-settings?expand=1\n. Yep - the migration guide is wrong and needs to be updated. I'd love a PR that does this :)\n. First one - it's not in middleware, so Slim specific is fine with me.\n. Given a url of http://localhost/slim3/develop-testbed/public/bar where index.php is in the public directory, I get Page Not Found for this route:\nphp\n$app->get('/bar', function ($request, $response, $args) {\n    return $response->write(\"<p>HERE</p>\");\n})->setName('bar');\nThis worked before applying this PR.\nNote, however, that if I set up a vhost, so that I have http://develop-testbed.slim3.dev/bar as my URL,  then the route callable is correctly called.\n(Edited to say what actually happens!)\n. I would guess that the fix is to update the Router's dispatch method to always ensure that there's a leading / on the URI to be dispatched. Maybe something like:\n``` diff\ndiff --git a/Slim/Router.php b/Slim/Router.php\nindex cca8634..c3c6c3d 100644\n--- a/Slim/Router.php\n+++ b/Slim/Router.php\n@@ -134,9 +134,10 @@ class Router extends RouteCollector implements RouterInterface\n     $dispatcher = new GroupCountBasedDispatcher($this->getData());\n\n\n$uri = '/' . ltrim($request->getUri()->getPath(), '/');\n         return $dispatcher->dispatch(\n             $request->getMethod(),\n$request->getUri()->getPath()\n$uri\n         );\n     }\n```\n. I don't think that this needs to be in Slim itself, but instead offered as a separate package via composer.\n. This works for me:\n\n``` php\n<?php\nrequire '../vendor/autoload.php';\nsession_cache_limiter(false);\nsession_start();\n$app = new \\Slim\\Slim();\n$app->get('/', function () use ($app) {\n    $app->flash('success', 'Success!!');\n    $app->redirect('/redirect');\n});\n$app->get('/redirect', function () use ($app) {\n    var_dump($app->flashData());\n    var_dump($_SESSION);\n});\n$app->run();\n``\n. @jbmaisner Did you get my sample above working?\n. From our point of view, the complexity is in the basePath handling of ourUrithat isn't part of PSR-7. The simplest solution is to use__toString()with the relevant parts cleared out.\n. Thanks @campersau - does that look better?\n. Because of http://php.net/supported-versions.php - specifically: \"Security Support Until\": \"14 Sep 2015\"\n. The documentation should be updated to note that Slim will pass in a ServerRequestInterface. We don't enforce this though, so any given Middleware should be able to type hint to RequestInterface. \n. PR: https://github.com/slimphp/Slim-Website/pull/38\n. we're always happy with an issue report :)\n. There are documented ways to do this with PSR-7 that are not that verbose, so I don't see the need for this method. There's also a risk of data loss if the stream is something unexpected, so I'd rather that the more explicit PSR-7 ways are used.\n. We're not updating Slim 2 any more. \n. As per the [README](https://github.com/slimphp/Slim#how-to-contribute), we are only accepting security fixes for the 2.x branch.\n. As per the [README](https://github.com/slimphp/Slim#how-to-contribute), we are only accepting security fixes for the 2.x branch.\n.ContainerInterface` doesn't have any methods for registering services, so it's not the right interface to use as there's no way to work out how the given service provider expected registration.\nHowever, in general you can ignore the register method completely as usually they do next to nothing. e.g. for Twig-View, it's simply:\nphp\n    public function register(\\Pimple\\Container $container)\n    {\n        $container['view'] = $this;\n    }\nIf anything, I'd prefer to just remove register completely and document how to register for the default container.\n. You're looking for subRequest\n. Chatting with @JoeBengalen, one idea we've had is making the router basePath aware. This means that pathFor would always create a path that is absolute including the basePath.\nHere's one possible implementation: https://github.com/slimphp/Slim/compare/3.x...akrabat:basepath-work?expand=1 is one solution\n. @codeguy Updated.\n. Use composer require slim/csrf:dev-master until a new tag is added.\n. Agreed. If container-interop or a FIG standard ever comes up with a set interface, then we can revisit.\nThe only place you should see container set up code is in \\Slim\\Container or in documentation which assumes that \\Slim\\Container is being used.\n. Seems reasonable to me. However, wouldn't it be more efficient to return $callable immediately if it is  is_callable() and so bypass the resolver?\n. You picked a day when I'm on holiday and thinking Slim :)\n. As per https://github.com/slimphp/Slim/pull/1447#issuecomment-132149192, this should be solved via a CallableResolver.\n. Looks good to me.\n. Thanks @mnapoli\n. You can quite easily create your own middleware that does this.\nSomething like this (untested):\n``` php\n$app->add(function($request, $response, $next) {\n    $uri = $request->getUri();\n    $uri = $uri->withPath(strtolower($uri->getPath());\n    $request = $request->withUri($uri);\nreturn $next($request, $response);\n\n});\n``\n. I would guess that https://github.com/slimphp/Slim/blob/3.x/Slim/Http/Uri.php#L198 needs to bestriposrather thanstrpos`.\n@neilmillard  can you locally change line 198 of Slim\\Http\\Uri.php and see if that fixes it?\n. Do you have curl based example of how you are sending the data to your Slim application?\n. Can you screenshot the request and response in it then?\n. The three emailto fields will override each other, so name them emailto[]\n. Replace Slim's handleErrors with your own one.\n. http://docs.slimframework.com/errors/500/\nphp\n$app->error(function (\\Exception $e) use ($app) {\n    // do something here\n});\n. Ah yeah. Sorry.\nWhat you need to do is write your own middleware that resets the error handler:\n``` php\n<?php\nrequire '../vendor/autoload.php';\nclass ErrorHandlerMiddleware extends \\Slim\\Middleware\n{\n    public function call()\n    {\n        set_error_handler(null);\n        $this->next->call();\n    }\n}\n$app = new \\Slim\\Slim();\n$app->add(new ErrorHandlerMiddleware);\n$app->get('/', function () use ($app) {\n    trigger_error('E_USER_WARNING', E_USER_WARNING);\n    echo \"Here\";\n});\n$app->run();\n``\n. Or, extend the Slim class and overridehandleErrors` :)\n. Slim 2 is no longer under active development and is only accepting security fixes.\nSlim 3 doesn't have this \"feature\" :)\n. We're at beta 2. Expecting RC1 towards the end of next week.\n. You're welcome :)\n. Yep\n. @yurevichcv Please open a new issue as it may be related to #1443 rather than this PR.\n. The plural of middleware is middleware.\n. From a SEO point of view, Google's view is that they are different endpoints and ideally one should redirect to the other. However they will handle it in their indexing, presumably because so many sites don't get it right:\n\nIf both slash and non-trailing-slash versions contain the same content and each returns 200, you can:\n- Consider changing this behavior (more info below) to reduce duplicate content and improve crawl efficiency.\n- Leave it as-is. Many sites have duplicate content. Our indexing process often handles this case for webmasters and users. While it\u2019s not totally optimal behavior, it\u2019s perfectly legitimate and a-okay. :)\n\nFrom: http://googlewebmastercentral.blogspot.co.uk/2010/04/to-slash-or-not-to-slash.html\n. Current behaviour is expected: /test and /test/ are different and if you want one route to cover both, the you use /test[/].\nI've added an issue to the docs repository to get his documented.\n. How are you reading the referrer?\n. How are you testing?\n. The REFERER header is set by the browser. So, you need to use the browser to redirect from test to login.\n. i.e.:\n``` php\n$app->get('/one', function ($request, $response, $args) {\n     return $response->write('Click here');\n});\n$app->get('/two', function ($request, $response, $args) {\n    var_dump($request->getHeaders());\n});\n```\n. @tuupola, Your example shows what's going on. The act of clicking on \"click here\" sets the HTTP_REFERER to /one. Then, The redirect in /redirect simply passes that HTTP_REFERER value onto /two. \ni.e. using withRedirect doesn't set or change the HTTP_REFERER header. \n. I use ?r=xyz in URL that I redirect\n. The problem you have is that get requires the router. Therefore you need to set up your container before you start using $app\n. You can't change the request after adding routes as the router needs the request to work\u2026\n. Are you calling run more than once per instantiation of App ?\n. Can you do this:\nunset($container['request']);\n$container['request'] = function($c) {};\n?\n. Nope. The router only uses the request for the base path, so you can just set the router's basepath:\nunset($container['request']);\n$container['request'] = function($c) {};\n$container['router']->setBasePath($container['request']->getUri()->getBasePath());\n. if basePath is a setting, then Slim will no longer work out of the box in a subdirectory.\nI will submit a PR that moves the setting of basePath though.\n. Hopefully #1467 is a better solution.\n. This solution doesn't allow use of pathFor in middleware. Closing in favour of #1467.\n. Line 73 ensures that $class can be autoloaded and so line 76 instantiates it.\nLine 81 checks that it is invokable.\n. I've now tagged 1.0.2 of akrabat/rka-slim-zfsm-container which is the actual solution to this problem.\n. One way in Slim 2 is to use (rka-slim-controller)[https://github.com/akrabat/rka-slim-controller]\nThe basic functionality shown in rka-slim-controller is built into Slim 3 - see this routes.php in my slim-bookshelf app.\n. I see no reason why the signature can't be public function __invoke(App $app = null)\nWhen you send in the PR, don't forget to update the if to check for $app being not null before we try to bind to it.\n. The invocation strategy came about because some people really wanted the function signature for route callables to be very close to Slim 2's to make it easier for migration and setting parameter defaults.\n. Nothing further to do here.\nIf any PRs turn up, we can evaluate them.\n. you could possibly escape it with a backslash?\n. Why are there 10 commits for 4 line change?\n. The route's parameters are not assigned to the request until the route callable is invoked.\nThis is why it isn't in the request object in your route middleware as the route middleware is executed before the route callable and hence the $request doesn't have them. However, as the system has determined which route to dispatch, the information you need is in the request's routeInfo attribute, so this will work:\n``` php\n$app->get('/hello/{name}', function ($request, $response, $args) {\n    $response->write('Middleware test, hello: ');\n})->add(function ($request, $response, $next) {\n$routeParams = $request->getAttribute('routeInfo')[2];\n$name = strtoupper($routeParams['name']);\n\n$response = $next($request, $response);\n$response->write($name);\n\nreturn $response;\n\n});\n```\n. I added two new test files & coverage decreased?!\n. https://ocramius.github.io/blog/when-to-declare-classes-final/\n. We're only accepting security fixes for Slim 2 now.\n. My initial thought is that I dislike having two containers in play as I have that in a Slim 2 application and it's a right old pain as I keep forgetting which one has which thing in it.\n. Generally, I don't like having two containers in play even if one is subservient. However, if we do have to address this, then a composite container feels more workable to me.\n. I've had a play with a composite container and it's fine (though a little slower) as long as your \"inner\" container never needs anything from the \"outer\" container as the factory in the inner container doesn't have access to the outer one.\nIt's do-able though, even if I don't like it and think it's unnecessary :)\n. No reason at all - it was just missed. Feel free to submit a PR.\n. Re-ran the one failed Travis build and it passed.\n. > add missing exception type to json/xml format (mentioned in #1498)\nThanks!\n\nrenamed the root element to error for clarity (xml format)\n\nI like this.\n\nwrapped the json output in a root element like the xml format to make it more consistent\n\nI really don't see the point in this. The root element in XML is requirement of the XML specification. It's not needed for JSON.\n\nI found that heredoc, used in renderXmlErrorMessage, is a little bit limited to work with (calling functions for example). So I've changed the code to make it easier to work with (IMHO) for future changes.\n\nNot a fan of this. I find it much easier to parse the heredoc than to deal with a series of sprintf() statements as they don't read left-to-right. If you're determined to get rid of the heredoc, then please use string concatenation.\n\nNot sure whether we should wrap some xml elements like trace in <![CDATA[ ]]> tags.\n\nThat's a good point. I suspect that we should do this for all the elements.\n. That can't be done in 3.1 as it'd be a BC break\u2026\n. Something is trying to serialise an instance of ResourceCollection. Usually this implies you have it in the session.\n. As Slim 3 is released, we are only fixing Security issues on Slim 2.\n. Yes - you can turn off output buffering on Slim 3, Set the outputBuffering setting to false.\n. As Slim 3 is released, we are only fixing Security issues on Slim 2.\n. Thank you\n. You'll find the route parameters in the third element of the 'routeInfo' attribute. We'd love a PR documenting this :)\nphp\n$routeParams = $request->getAttribute('routeInfo')[2];\n. By default, the route hasn't been worked out when app middleware is running, which is why it's not working for you.\nIf you need this, then you can enable this setting:\nphp\n$settings = [\n    'settings' => [\n        'determineRouteBeforeAppMiddleware' => true,\n    ],\n];\n$app = new Slim\\App($settings);\n. This works @kevinmlong:\n``` php\n$settings = [\n    'settings' => [\n        'determineRouteBeforeAppMiddleware' => true,\n    ],\n];\n$app = new \\Slim\\App($settings);\n$app->get(\"/{name}\", function ($request, $response, $args) {\n    return $response->write(\"Hello {$args['name']}\");\n});\n$app->add(function ($request, $response, $next) {\n    var_dump($request->getAttribute('routeInfo')[2]);\nreturn $next($request, $response);\n\n});\n```\nNavigating to http://develop-testbed.slim3.dev/rob gives me:\n/www/dev/slim3/develop-testbed/public/index-scratch.php:23:\narray (size=1)\n  'name' => string 'rob' (length=3)\nHello rob\n. I would welcome documentation showing how to use register_shutdown_function to render an error. I'm not in favour of making this a default in the code though.\n. I agree with @silentworks.\n. To follow up, CallableResolver is final as solely implements CallableResolverInterface as suggested by https://ocramius.github.io/blog/when-to-declare-classes-final/\n. Mainly because there's no way to inject dependencies into a closure.\n. Oh, and for the record, we're totally happy to have our decisions questioned.\n. Good catch! Thanks.\n. ->add() is the public way to add middleware as far as I am aware. We went to a lot of effort to make ->add() work on route groups for consistency.\n. Need to make addMiddleware protected\n. Fixed with #1550\n. Why this change?\n. Thanks! I put back the ability to return a response in __invoke so that App's __invoke continues to act like Middleware.\ni.e. it's possible that App may be at the bottom of a middleware chain run by Stratigility or Relay rather than one controlled by App::run(), so I want __invoke() to follow the correct convention and return a Response.\nThis also had the side effect of making the current tests pass, so I've added additional tests to check that the exceptions are thrown in __invoke if the handlers are not in the container.\n. The case I can think of is when you're integrating many applications together.\n. Please rebase so that this PR merges cleanly\n. Hmm.\nDoes the router need a different method for this? or a parameter on pathFor() ?\n. I quite like internalPathFor() too.\n. ok. I'll sort out.\n. Do we need the equivalent for Slim 3?\n. I've merged this incase anyone needs this functionality in Slim 2. We probably won't do another release though unless a security fix is required.\n. Fine with me. If we're going to do a new Slim2 patch release, we should probably review the other slim2 PRs and see if any of those are worth adding in too.\n. php\n$app->post('/', function (Request $req, Response $resp, $args) { \n    \\My\\Api::call($request);\n});\nor\nphp\n$app->post('/', function (Request $req, Response $resp, $args) { \n    \\My\\Api::call($request->getParsedBody());\n});\n. One of the design goals of Slim 3 is to remove globals which leads to less than optimal software design due to undesirable coupling of code the app, request, response and router objects.\ni.e. Your underlying code should not expect a global app/request object to exist and so Slim 3 enforces this by not providing a way to get a the app instance. The PSR-7 standard further enforces the idea of injecting dependencies into your objects due to the immutability of the Request object which means that $app->request is out of date as soon as run() is executed. As such, I would recommend that you refactor to support injecting the $request in the route callable into the rest of your application.\n. If you use Slim's implementations, then there is getParam() and getParams() on the Request object.\n. Correct - getParam and getParams are Slim specific and aren't in the PSR-7 interface, so you would be coupling to the Slim implementation.\n. In general, we are only accepting critical bugs or security fixes for Slim 2. HHVM support doesn't meet these criteria.\n. It's actually Stratigility that provides the wrappers that @silentworks is talking about:\nhttps://github.com/zendframework/zend-stratigility/blob/master/src/Http/Request.php\n. Pinging @codeguy for his thoughts on this.\n. There's two issues here.\n1. Whether Slim\\Http should extend PSR-7 without its own Interface.\n2. Potential security issues in getIp() due to looking for X-Forwarded-For\nItem 1 can be targeted at a later 3.x release as it won't break BC.\nFor item 2, my view is that we should remove getIp() altogether and then someone could write middleware that sets an \"ip\" attribute into the Request object if they wanted to.\nAlternatively, I would support removing  the X-Forwarded-For test in getIp() and adding a setIp() method, so, again, someone could write middleware that can set the ip to something other than REMOTE_ADDR.\n. @AndrewCarterUK I'd love so see the middleware. It would be a separate repository from Slim 3 as it's generically useful for any PSR-7 based middleware stack.\n. My take on middleware that is a better implementation of getIp(): https://github.com/akrabat/rka-ip-address-middleware\n. https://github.com/oscarotero/psr7-middlewares/blob/master/src/Middleware/ClientIp.php is another one.\n. @r3wt: Given that I haven't looked at Stack Overflow, can you point me at the page you think that I've copied?\n. I'm confused. You have https://github.com/akrabat/rka-ip-address-middleware/blob/master/src/IpAddress.php#L75-L105 in your projects?\n. Presumably there's not that many ways to actually do this :)\n. Fixed in #1559\n. Looks like you have some PHPCS failures: https://travis-ci.org/slimphp/Slim/jobs/84453270\nhttp://i.19ft.com/20097d12.png\n. where is this code?\n. You need to return the $response from your closure.\n. For the first example, you need to reassign to $response as its immutable:\n$response = $response->withStatus(200)\n    ->withHeader('Content-type', $content_type)\n    ->write($data);\nreturn $response;\n. Why not just use native PHP sessions? \n. As Slim 3 is released, we are only fixing Security issues on Slim 2.\n. App already works as a service locator: $app->notFoundHandler already works.\nThis PR would allow for calling the located object if it's a function in one line of code rather than two. \ni.e. it replaces:\nphp\n    $notFoundHandler = $this->notFoundHandler;\n    return $notFoundHandler($request, $response);\nwith\nphp\n    return $this->notFoundHandler($request, $response);\nAs I said, it's a convenience thing.\n. More people are more likely to have Slack open due to using it at work.\n. Can you explain the issue that you're fixing please?\n. Superseded by #1552 which implements internalPathFor()\n. For what it's worth, I commit my vendor directory to git, so that composer is only used on dev when changing the requirements.\n. Would it make more sense to rename MiddlewareTrait's add to addMiddleware ?\n. ok - will wait for you to make that change before merging.\n. We still need pathFor().\nThe implementation of pathFor() should be:\n``` php\n    /\n     * Build the path for a named route including the base path\n     \n     * @param string $name        Route name\n     * @param array  $data        Named argument replacement data\n     * @param array  $queryParams Optional query string parameters\n     \n     * @return string\n     \n     * @throws RuntimeException         If named route does not exist\n     * @throws InvalidArgumentException If required data not provided\n     /\n    public function pathFor($name, array $data = [], array $queryParams = [])\n    {\n        $url = $this->internalPathFor($name, $data, $queryParams);\n    if ($this->basePath) {\n        $url = $this->basePath . $url;\n    }\n\n    return $url;\n}\n\n```\nAlso, we need unit tests for internalPathFor\n. Superseded by #1552\n. Valid point.\nI'm not especially keen on renaming pathFor though on the grounds that this is the one that everyone should be using 99% of the time. Happy to call the other one relativePathFor.\n. Renamed.\n. I believe that this is intentional.\nIf the path is relative, (no leading /), then the rest of the path can be found in getBasePath().\nIf the path is absolute (leading /), then the base path is empty.\n. Really, you should use:\n$uri = $request->getUri()->getBasePath() . $request->getUri()->getPath();\n. Fair enough :)\n. The Pimple documentation always shows that the factory closure takes a $c parameter even though it may not be used. Why are we removing it?\nI've no particular opinion on changing use of get() to array access.\n. @silentworks: Yes. See https://github.com/slimphp/Slim/blob/3.x/Slim/Container.php#L189\n. This is a stab at doing it in middleware: https://github.com/akrabat/rka-ip-address-middleware\n. > Anyway base path resolution is wrong determining when using server rewrites (the L flag in .htaccess file).\n\nThere should be an option to define base path (and possibly secure connection) as an application setting which can be read from an environment variable.\n\nPlease open as a separate issue with the apache rewrite settings the show the problem.\n. See https://github.com/slimphp/Slim/issues/1567 for the Uri() usage of HTTP_X_FORWARDED_PROTO.\n. These sort of requirements are exactly the province of middleware. At some point we should have a directory of middleware.\n. Fixed in #1564\n. Moving Collection will make splitting out Slim\\Http to its own rep slightly harder later. Not insurmountable, though.\n. We have http://www.slimframework.com/docs/start/upgrade.html so far and would love contributions to it at https://github.com/slimphp/Slim-Website\n. Please just raise PRs against Slim-Website :)\n. Note that Dicatoros also uses X-Forwarded-Proto here: https://github.com/zendframework/zend-diactoros/blob/master/src/ServerRequestFactory.php#L237-L243\n. Another thought. Is this a web server config issue? Apache has mod_remoteip and nginx has ngx_http_realip_module - both of which allow you to whitelist which IPs are able to sent replacement addresses.\n. If we remove them, then https://github.com/akrabat/rka-scheme-and-host-detection-middleware would work as a middleware replacement.\n. Really need discussion on this as to whether it's secure to leave them in place or not.\n. getQueryParams() is a method on Request as it's part of PSR-7's ServerRequestInterface.\n. Arguably, one solution is to add middleware that does:\nphp\n$request = $request->withBasePath('/newsite')->withPath('');\n. I don't understand. That line would work the same way as using a config setting.\n. Hmm... the point of setting it into BasePath was so that routes would work. I'll have to test it now!\n. I have no idea what to actually do with this issue. What specific change do you propose should be made?\n. How about PR'ing what you imagine?\n. Can't get this to work without executing the passed in settings factory, so it would be better for someone to replace our settings factory with their own after Container is instantiated.\n. > By the way, couldn't determineContentType be placed on Slim\\Handlers\\AbstractHandler and use $request as parameter instead? this way it can be used by users as a base to extend their handlers upon. \nFor application-workflow use-cases determineContentType isn't really comprehensive enough as the Accept header specification is more complicated. It's much better to use the willdurand/Negotiation package instead. For the error case here, determineContentType is \"good enough\", but I don't want to encourage it's usage by users.\n. @orykami Actually, CallableResolver will pass the container into the construct when it creates it: https://github.com/slimphp/Slim/blob/3.x/Slim/CallableResolver.php#L64\nThe strategy will determine which arguments to pass to the $method when it is dispatched.\n. Thinking about it, I wonder if we should just provide middleware to redirect the trailing slash if someone wants that?\n``` php\n$app->add(function ($request, $response, $next) {\n    $uri = $request->getUri();\n    $path = $uri->getPath();\n    if ($path != '/' && substr($path, -1) == '/') {\n        // permanently redirect paths with a trailing slash\n        // to their non-trailing counter part\n        $uri = $uri->withPath(substr($path, 0, -1));\n        return $response->withRedirect((string)$uri, 301);\n    }\nreturn $next($request, $response);\n\n});\n```\n. @designermonkey: I've been away, so am just getting back into trying to understand the problem that you are having.\n\nA route should always start with a base left-hand slash, whether inside a group or not, so inside a group, this should mean 'the root of that group' not be appended to the end of that group pattern. If that is desired then the group pattern should be /foo/ not /foo.\n\nCurrent behaviour (RC2):\n``` php\n$app->group('/user', function () use ($app) {\n    $app->get('/', function ($request, $response, $args) {\n        // matches /user/\n    });\n    $app->get('', function ($request, $response, $args) {\n        // matches /user\n    });\n});\n$app->group('/user/', function () use ($app) {\n    $app->get('/', function ($request, $response, $args) {\n        // matches /user/\n    });\n    $app->get('', function ($request, $response, $args) {\n        // matches /user\n    });\n});\n```\ni.e. the final / on a group is ignored and the URI path in the final map determines how the trailing / works.\nIf I've read your comments correctly, I think you want this behaviour if a trailing slash is required on a URI path:\nphp\n$app->group('/user/', function () use ($app) {\n    $app->get('/', function ($request, $response, $args) {\n        // matches /user/\n    });\n    $app->get('', function ($request, $response, $args) {\n        // error condition\n    });\n});\nand if you want to match /user, then you do:\nphp\n$app->group('/user', function () use ($app) {\n    $app->get('/', function ($request, $response, $args) {\n        // matches /user\n    });\n    $app->get('', function ($request, $response, $args) {\n        // error condition\n    });\n});\ni.e. the any double trailing / are removed from the final URI path, but any path definition must have at least a single / in it.\nIs my understanding of your request correct?\n(updated for typos!)\n. php\nreturn $response->withRedirect('/foo');\nor:\nphp\n// inside route callable closure:\n$router = $this->router;\nreturn $response->withRedirect($router->pathFor('route-name');\n. A redirect is always a GET request. You have made /checkParams a POST, so it won't match.. @bbmattieu9  please provide code in a single index.php file along with curl examples that show that it doesn't work.. According to the RFC, they are upper case. I don't mind if we strtoupper them though.\n. If this is all we have, I'm minded to go with a 3.0 final. Thoughts?\n. As per https://github.com/slimphp/Slim/pull/1574#issuecomment-153971977, I don't want determineContentType easily usable.\n. \ud83d\ude00\n. I'm happy to take the isset() change as  its own PR.\n. Here's some middleware that assumes that you're using Twig-View and the you have registered the Twig-View object in the Container as 'view':\n``` php\nfunction ($request, $response, $next){\n    $path = $request->getUri()->getPath();\n    $metaData = Orm::for_table(/../);\n$this->get('view')->getEnvironment()->addGlobal('metadata', $metadata);\n\nreturn $next($request, $response);\n\n}\n```\n(Buyer beware: code written off the top of my head...)\n. The addGlobal() is in Twig_Environment which is why we getEnvironment() from the Twig-View\n. You are calling $next too early in your middleware - i.e. before you set the global.\nChange to:\n``` php\n$app->add(function ($request, $response, $next) {\n    $host = $request->getUri()->getHost();\n    $this->get('view')->getEnvironment()->addGlobal( 'host', $host );\n$response = $next($request, $response);\nreturn $response;\n\n});\n```\nThis way the 'host' value is added to Twig's global registry before you render it within your .twig file.\n. You are very welcome :)\nHave a look at https://speakerdeck.com/akrabat/building-an-api-with-slim-3?slide=30 for the general skeleton of a piece of middleware.\nPersonally I like to use return $next($request, $response); when the middleware does something before dispatch.\n. > Maybe this package could be an official recommendation in the Slim3 docs, as a replacement for those who truly need hooks?\nWe'd love a PR to Slim-Website! At a guess, this would be good to note in the /docs/start/upgrade.md file.\n. PSR-7's SteamInterface::getContents() docblock  says:\n\nReturns the remaining contents in a string\n\nThat doesn't imply that it should do a rewind to me.\n. I can reproduce this. \nI think the correct fix is to ensure that the basePath always ends with a slash if it's not empty.\nActually, looking at Uri::__toString(), we need to add the '/' in getRequestTarget()...\n. Fixed in #1633\n. I'm unclear what sort of fix you are imagining. Can you provide a code sample of the fix you think that would work?\n. Fixed.\n. \ud83d\udc4d\n. This PR removes the ability to create a final pattern of /foo/ within the /foo group?\n. @geggleto: /foo/bar/ is different to /foo/\n. This has broken:\nphp\n$app->get('/users/', function ($req, $res, $args) {\n    // ....\n});\nSo is the table at the top wrong?\nUpdate: ignore this - poor test on my part\n. ah yeah - I didn't simplify down enough for that one.\n. This is one of my test cases for an API end point:\n- /users/      <= collection\n- /users/{id} <= single resource\nIt's set up as:\nphp\n$app->group('/users/', function () {\n    $this->get('', 'UserCollection::list');\n    $this->post('', 'UserCollection::add');\n    $this->get('{id}', 'UserResource::load');\n    $this->put('{id}', 'UserResource::update');\n    $this->delete('{id}', 'UserResource::delete');\n});\nIs the intention that this will not be allowed and that the collection must be /user?\n. FWiW, I'm not against this PR, but I worry that we're introducing a limitation.\n. I have sites in production where collections end in / and resources don't. \nEdit: I don't particularly mind what happens in groups, though would prefer not to limit, but do need flexibility on final URL created. \n. My understanding of RC2 is that we concatenate, but remove double slashes. \ni.e:\n``` php\n$app->group('/bar/', function () use ($app) {\n    $app->get('/', function ($request, $response, $args) {\n        // matches /bar/, not /bar//\n    });\n$app->group('/foo/', function () use ($app) {\n    $app->get('/', function ($request, $response, $args) {\n        // matches /bar/foo/, not /bar//foo//\n    });\n});\n\n});\n```\nPersonally, I think this is reasonable as I can't think of a case when you would want to match double /.\n. @jwyuen /user and /user/ are two different routes. If you want them to be the same, you have two choices:\n1. $app->get('/user[/]', \u2026\n2. Add this middleware from the docs.\n. Why set the status, header and body in each render method? I would have expected each render method to have returned a string and then have:\n``` php\n        $body = new Body(fopen('php://temp', 'r+'));\n        $body->write($output);\n    return $response->withStatus(404)\n                    ->withHeader('Content-Type', $contentType)\n                    ->withBody($body);\n\n```\nat the bottom of __invoke.\n. My personal preference would be to always bind the container to the $this.\nThis would mean that if you wanted to use subRequest in a route callable, you'd have to use ($app), though.\n. Fixed. We now bind Container everywhere!\n. Something for 3.1.0. See https://github.com/slimphp/Slim/issues/1627\n. Fixed via #1716\n. Are you able to add a test to prove that this changes solves it?\n. I've added a unit test.\n. getBasePath is on the URI object: $basePath = $request->getUri()->getBasePath()\n. Not everyone uses best practices. This issue provides a pragmatic solution for people who just want to get up and running... \nIt will not prevent the preferred solution of registering the middleware class with the DIC.\n. Testing shows that this is already in place as we use resolveCallable in RouteGroup::add() and in Route::add() already.\n. Given this set up:\n$ mkdir slimtest && cd slimtest/\n$ composer require slim/slim ^3.0@RC\n$ touch index.php\nwith this index.php:\n``` php\n<?php\nrequire 'vendor/autoload.php';\n$settings = [\n    'settings' => [\n        'displayErrorDetails' => true,\n    ],\n];\n$app = new \\Slim\\App($settings);\n$app->group('/user', function () use ($app) {\n    $app->get('/', function ($request, $response, $args) {\n        return $response->write(\"/user/\\n\");\n    });\n    $app->get('', function ($request, $response, $args) {\n        return $response->write(\"/user\\n\");\n    });\n});\n$app->run();\n```\nThen running: php -S 0.0.0.0:8888, I get this when I curl:\n$ curl http://localhost:8888/user\n/user\n$ curl http://localhost:8888/user/\n/user/\ni.e. it works as you would expect.\n. Note that with #1626, the URI path is very much what-you-see-is-what-you-get. In this case, nothing changes and so to route to /user when your group is /user, you need an empty path in your map:\nphp\n$app->group('/user', function() use ($app) {\n    $app->get('', function($request, $response, $args) {\n        // URL to get here is: /user\n    });\n});\n. As @copynpaste has pointed out, $this within a route callback is the App instance. If you're using a class for your route callable, then register it with the DI container and inject what you need into the constructor:\n``` php\n$c = $app->getContainer();\n$c['HelloController'] = function ($c) {\n    $router = $c->get('router');\n    return new HelloController($router);\n};\n$app->get('/hello', 'HelloController:helloAction');\n```\n. I'm confused. The spec for 204 states:\n\nThe 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields.\n\nSurely that means that there cannot be a Content-Type or a Content-Length header?\n. Right, so really we should look at seeing if we can let you manipulate the response after finalize() has run.\n. This is happening because of the php.ini default_mimetype setting:\n\nBy default, PHP will output a character encoding using the Content-Type header. To disable sending of the charset, simply set it to be empty.\n. Fixed by #1629.\n. I would love a PR\u2026 :)\n. Fixed.\n. Fixed in #1630.\n. When testing with Apache, I get a 500 Internal Server Error for:\n\nphp\n$app->get('/', function ($request, $response, $args) {\n    $response = $response->withStatus(419);\n    return $response->write(\"Home\\n\");\n});\nOutput:\n```\n$ curl -v http://develop-testbed.slim3.dev\n Rebuilt URL to: http://develop-testbed.slim3.dev/\n   Trying 127.0.0.1...\n* Connected to develop-testbed.slim3.dev (127.0.0.1) port 80 (#0)\n\nGET / HTTP/1.1\nHost: develop-testbed.slim3.dev\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 500 Internal Server Error\n< Date: Thu, 26 Nov 2015 07:46:03 GMT\n< Server: Apache/2.4.16 (Unix) PHP/7.0.0RC7\n< X-Powered-By: PHP/7.0.0RC7\n< Content-Length: 5\n< Content-Type: text/html;charset=UTF-8\n< \nHome\n* Connection #0 to host develop-testbed.slim3.dev left intact\n```\n\nHowever, if I change to:\nphp\n$response = $response->withStatus(419, \"Authentication Timeout\");\nThen it works.\nI suggest that we make setting a reason phrase mandatory if you use a code that we don't have a reason phrase for.\n. Merged via rebase by accident, so didn't auto-close!\n. @bmutinda The missing Authorization header appears to be an Apache only thing.\n. I've never used nginx. Maybe ask on the forums.. Within Slim-Website, we need a script that creates the api docs and adds them to the Slim-Website repository. This way we can run it after we release a new version and update the website.\n. Thinking about this, the API docs need to be on the Slim-Website repository as we're going to need this for 3.x and 4.x.\nMaybe this needs to be a bash/php script that is on Slim-Website that checks out the Slim repo, creates the api docs in the right place on the website and then deletes the Slim repo?. So close\u2026. See https://github.com/slimphp/Slim-Website/issues/213. As per our conversation on IRC, I'm happy to consider these for 3.1.\n. Intuitively, I think that this is a bug too as your expected  order matches what I expected too.\n. Please PR a fix!\n. Fixed in #1624. Thank you very much for the report.\n. Fixed by #1632.\n. Looks okay to me. Needs testing by @silentworks - assuming he has an app that uses a lot of middleware.\n. I've done more testing locally and can't break it. Taking for RC3 as it doesn't actually do the lazy resolving so is less risky.\n. This is the one that needs careful testing :)\n. Ping @silentworks. Have you had a chance to look at this?\n. Closed as #1716 is now merged.\n. Can we tell if a the callable is a static before we try to call bindTo()?\n. FWiW, testing shows that this is fixed in PHP 7.0\n. I can't see any way to detect if a closure is static before we call bindTo().\n. So the choices you have are:\n1. Use PHP 7\n2. Change the code as per @geggleto's suggestion\n3. Don't use statics:\n   1. Remove static from the  register() method\n   2. Register like this:\n  ``` php\n  $sample = new Sample($app->getContainer());\n  $sample->register($app);\n  ```\n\nNote that you don't actually need to use ($app) in register() as you can use $this->get.\n. Simplest solution possible at this stage.\nphp\n$this->method = $this->filterMethod((string)$body->_METHOD);\nis the change we need.\n. In an ideal world though, we wouldn't support _METHOD at all!\n. So we're going to remove _METHOD support in Slim 3 and document using the middleware? If so, are we going to adopt the middleware to the slimphp organisation?\n. Tricky isn't it? If we don't remove it now, then we're keeping it until 4.0.\n. > my second preference is to remove the \"Force method override recalculation\" setting in Request::withMethod (so Slim always uses what is \"forceabiliy set/set by other code\")\nI am leaning towards this change on the grounds that if you call withMethod('POST'), it's reasonable to assume that getMethod() will return 'POST'!\n. PR #1655 to fix the string issue with XML METHOD and also to ensure that withMethod() does what you expect.\n. I also don't mind removing the _METHOD detection code altogether, but I don't have enough strong feelings either way as long as there's a way to turn it off and $request = $request->withMethod($request->getOriginalMethod()); will now do so.\n. The way to put it into 3.1 is if we add the middleware _automatically and have a setting to disable it. i.e. an application that uses _METHOD parameters must continue to work with no code changes in 3.1 regardless of whether it is marked deprecated.\n(We would also have to be careful to ensure that if we were adding middleware automatically, we didn't break someone using $request = $request->withMethod($request->getOriginalMethod()); in their own middleware to turn off the current system.)\n. shrugs\nThis is how SemVer works.\n. Closing as can't remove until 4.0.\n. PR?\n. Your code works for me in a clean project using the built-in PHP web server (PHP -S).\n. hmm... so you're accessing your test app via:\nlocalhost/somepath/index.php/test\n?\n. This is a base path issue which was reported as https://github.com/slimphp/Slim/issues/1590\nThe fix: https://github.com/slimphp/Slim/pull/1606 is what causes this problem\n. You should provide this as a separate component.\n. Just put it in it's own repo with a composer.json set up with autoloading and a readme to show how to set it up.\n. We are more likely to solve this by decoration of the PSR-7 objects with Slim ones in the same way that Stratigility does.\n. @Motard The Url hasn't matched or you haven't called ->setName() after you defined your route.. A standard: http://www.phpdoc.org/docs/latest/references/phpdoc/tags/property-read.html\n. I don't see the advantage of an interface?\n. I'm sorry, but I can't reproduce. I don't have PHP 5.5.12, so I tested withPHP 5.5.30.\n. I can't even think what it might be. Can you test with curl please?\ncurl -v http://localhost:8000/\nand report the response.\n. Slim is affected because we set the content length of the response based on the length of the data. The BOM characters were not counted, but were output.\nGlad you found it!\n. The current stable version of Slim is the 2.6.2. When Slim 3.0 is released, then we will change the default branch to 3.x\n. 3.0 is now released and I've switched the default branch to 3.x.\n. At a guess, test.php has some whitespace in it which means that PHP has sent the 200 header at this point. Does test.php have a closing tag? or any whitespace before the opening tag?\n. Please check the BC breaks listed in the Release notes for RC3.\nSpecifically:\n\n1631 - The route callable is now bound to the Container rather than to the App to be consistent with middleware binding. This means that if you are using $this->subRequest then you now need to use ($app) and then $app->subRequest(\u2026). Also if you were using $this->getContainer()->get(\u2026), you need to change this to $this->get(\u2026). Note that using $this->foo to retrieve a service from the container continues to work.\n\ni.e. in the route callable, $this is the Container now.\n. you always need request and response in the route callable as they could be changed by middleware.\n. Really, they shouldn't be in the container at all\n. It implements an interface. See https://ocramius.github.io/blog/when-to-declare-classes-final/\n. You delete Slim/Interfaces/ContainerInterface.php however, I can't find this file in https://github.com/slimphp/Slim/tree/3.x/Slim/Interfaces ?\n. Thanks!\n. We would need to implement our own Container decoration around the user supplied interop-container before we could type-hint the main codebase against a Slim specific interface.\nThis isn't going to happen for 3.0.0.\n. map() takes a string too\u2026\nphp\n$app->get('/', 'Application/HomeAction');\n. map takes array, string, callable|string\n. It's visualised in the docs as a set of concentric circles. Every call to add adds a new outer circle.\n. Where are we on this one?\n. Merged in 70c6d6d4c1b8c8d9beb788db438ee7442c2762cb.\nThanks for this work; I'm sorry it took so long to get in.\n. Also good point. Not sure how I missed it. Please PR along with the escaped .\n. Removing the else statements is nice, but I don't want it split into two methods. Please refactor so that it is back in the single resolve method.\n. How are you including main.css?\n. > Is it possible to get the router from a separate service container, which can add it's own route's;\nI'm sorry, but I'm not sure that I understand the question. Slim already has a container and retrieves the router from it. It looks for the key called router and you can provide whatever class you like for that. \n. I'm not adverse to someone creating a PR for this.\n. Currently planning for mid-next week.\n. We will need to see code that shows this issue.\n. What's the use-case for using an HTTP method that's not part of the spec?\nI think it should't be an uncaught exception though.\n. I'm not sure that we can use the Slim ErrorHandler.\nThe request has thrown the exception when on construction. Hence we don't have a valid request object with which to run the error handler\n. Alternatively, use middleware: http://www.slimframework.com/docs/cookbook/route-patterns.html\n. This feels like a bug to me.\n. I'm looking at the //foo/bar case. \nThis comes into Slim as $_SERVER['REQUEST_URI'] which is set to //foo/bar as you'd expect.\nHowever, Uri::createFromEnvironment extracts it using this line:\nphp\n$requestUri = parse_url($env->get('REQUEST_URI'), PHP_URL_PATH);\nwhich results in $requestUri set to /bar\nThis isn't what I would expect!\n. I'm pretty sure that using parse_url is wrong in this case and this line should be:\nphp\n$requestUri = $env->get('REQUEST_URI');\nThoughts @codeguy, @silentworks?\n. This has nothing to do with FastRoute.\nFor the URL http://example.com//foo/bar we send /bar to FastRoute. i.e. we've removed the //foo/ from the URL before we set it into the Uri instance.\n. That documentation snippet explains where we got the idea to use parse_url()!\nHowever, the documentation for parse_url says:\n\nNote:\nThis function doesn't work with relative URLs. \n. How about solving like this:\n\nphp\n$requestUri = parse_url('http://example.com' . $env->get('REQUEST_URI'), PHP_URL_PATH);\nAs we only want the URI, the actual value of the scheme and domain are unimportant, but it will make parse_uri work as we would expect.\n. No. From the manual:\n\nphp://memory and php://temp are read-write streams that allow temporary data to be stored in a file-like wrapper. The only difference between the two is that php://memory will always store its data in memory, whereas php://temp will use a temporary file once the amount of data stored hits a predefined limit (the default is 2 MB). \n\ni.e. for most cases Response's body uses memory, unless it's going to be too big, in which case it will drop to using a temporary file.\n. We'd welcome a PR to Slim-Website :)\n. @Cyrille37 Could you expand some more on wha you mean please?\n. Move error handling out of core and into middleware?\n. > @akrabat \ud83d\udc4d What about exceptions though... are we catching Exceptions in an application middleware? If so are we adding it by default but allowing users to remove it?\nNot sure yet. Gut feeling is to provide Middleware\\ErrorHandling, but not add it by default, so the migration docs would say:\n\"Add $app->add('Slim\\Middleware\\ErrorHandling'); immediately after $app = new Slim\\App()\"\nor something.\nThis would mean that out of the box, PHP's stock error handling would happen which would definitely fit the principle of least surprise.\n. Support http-interop (PSR-15). This will change the signature of middleware to:\nphp\nfunction (RequestInterface $request, DelegateInterface $next);\nHence add() will change to support callables of the format:\nphp\n$app->add(function($request, $next) {} ):\nWhich means we need to support the current middleware format.\nThere are two choices:\nphp\n$app->add(new DoublePassWrapper(function($request, $response, $next) {} )):\nor:\nphp\n$app->addDoublePassMiddleware(function($request, $response, $next) {} ):\ni.e. we either wrap the middleware before calling add or provide a new method for middleware of this format.\n. Need route strategies to be per-route-callable so we have a migration path.\n. > When will stable Slim 4.x be released?\nWe do not have a date. . Looks good to me and maybe is that start of removing request and response from the container.\n. I like the idea of add ob_get_length().\nDoes anyone have a preference over ob_clean(); vs ob_get_length()?\n. You can now disable Slim's automatic setting of the content-length with:\nphp\n$config = [\n    'settings' => [\n        'addContentLengthHeader' => false,\n    ]\n];\n$app = new Slim\\App($config);\n. > Maybe similar strategy should be used in Slim core.\nThis is in place. The setting displayErrorDetails defaults to false and needs to be set to true in order to display the stack trace.\n. An out of the box nginx install will also not work\u2026 However, an out-of-the-box  PHP built-in server will work as expected.\n. Looks like a bug to me. I don't understand from the manual page why it isn't. Input from @silentworks required!\n. Reading up on this, it seems to be preferred to send one header only with multiple values as comma separated.\nShould be just change our implementation to do that?\n. Ah\u2026 Set-Cookie must be sent as multiple separate headers.\nFrom RFC6265:\n\nAn origin server can include multiple Set-Cookie header fields in a single response. \n\nand\n\nOrigin servers SHOULD NOT fold multiple Set-Cookie header fields into a single header field.  The usual mechanism for folding HTTP headers fields (i.e., as defined in [RFC2616]) might change the semantics of the Set-Cookie header field because the %x2C (\",\") character is used by Set-Cookie in a way that conflicts with such folding.\n\nSo we'll need an exception for that when singleHeader is true\n. I agree with SvenRtbg.\n. My preference is to send one header with multiple values where possible, as my reading of RFC2616 is that this is preferred over sending multiple headers with the same name. \nHowever, as I commented on 1st Jan, this cannot be a blanket thing as there are headers where this doesn't apply, such as Set-Cookie and may be others? Similarly, they may be headers where there can only be one value?\nI don't want a setting; I want Slim to do the right thing.\n. $request->getAttribute(\"routeInfo\"); should have the information you need.\nNote that you'll also need the determineRouteBeforeAppMiddleware setting:\n$settings = [\n    'settings' => [\n        'determineRouteBeforeAppMiddleware' => true,\n    ]\n];\n$app = new Slim\\App($settings);\n// ...\n. Thank you.\n. I don't understand what problem you are having.\nThe protocol is set via the Environment which merges the information from $_SERVER, so if it's set in $_SERVER, then we pick it up.\n. It's not very hardcoded! https://github.com/slimphp/Slim/blob/3.x/Slim/Http/Message.php#L87-L101\n. Yeah - I understand the issue now.\n. Thanks very much for this @abbert!\n. @Atriedes How could app create the services? Container intro doesn't define how to register a service\u2026\n. The problem is that we have no idea how to write registerDefaultServices so that it works with any DI container\u2026\n. You're welcome. I did the same here: https://github.com/akrabat/rka-slim-zfsm-container/blob/master/src/Container.php\n. With and without the / are different URLs.\nThe first example is routed via http://example.com/myposts/ and the second via http://example.com/myposts.\n. Use composer. \n. You don't need SSH to use Composer. You use Composer locally and FTP the files to your server.\n. @TrySound: Download all the dependencies and put them in your project & then write your own autoloader. \n. Composer is the PHP dependency manager. Slim v3 has dependencies and so it uses Composer to manage them. I'm unsure why this could ever be a problem.\n. There's nothing to stack trace on a 404 - it means that the router failed to find a match.\nWe'd love a PR to Slim-Website :)\n. The example is supposed to be standalone, so I've made this more explicit in #1712.\n. I think that SlimException was named incorrectly and we should have called it StopException. Oh well. - maybe we can rename and deprecate the old one?\nWhat's the actual use-case we're trying to solve?\nIs is that we can't write an errorHandler that knows about the current request/response? \n. I like the handleException refactor a lot on its own.\nIn App.php, it could look like something like this:\n``` php\n    public function process(ServerRequestInterface $request, ResponseInterface $response)\n    {\n        // Ensure basePath is set\n        $router = $this->container->get('router');\n        if (is_callable([$request->getUri(), 'getBasePath']) && is_callable([$router, 'setBasePath'])) {\n            $router->setBasePath($request->getUri()->getBasePath());\n        }\n    // Dispatch the Router first if the setting for this is on\n    if ($this->container->get('settings')['determineRouteBeforeAppMiddleware'] === true) {\n        // Dispatch router (note: you won't be able to alter routes after this)\n        $request = $this->dispatchRouterAndPrepareRoute($request, $router);\n    }\n\n    // Traverse middleware stack\n    try {\n        $response = $this->callMiddlewareStack($request, $response);\n    } catch (SlimException $e) {\n        // This is a Stop exception and contains the response\n        $response = $e->getResponse();\n    } catch (Exception $e) {\n        $response = $this->handleException($e, $request, $response);\n    }\n\n    $response = $this->finalize($response);\n\n    return $response;\n}\n\n/**\n * Call relevant handler from the Container if we can. If it doesn't exist,\n * then just re-throw.\n *\n * @param  Exception $e\n * @param  ServerRequestInterface $request\n * @param  Response $response\n *\n * @throws Exception\n * @return Response\n */\nprotected function handleException($e, $request, $response)\n{\n    if ($e instanceof MethodNotAllowedException) {\n        $handler = 'notAllowedHandler';\n        $params = [$e->getRequest(), $e->getResponse(), $e->getAllowedMethods()];\n    } elseif ($e instanceof NotFoundException) {\n        $handler = 'notFoundHandler';\n        $params = [$e->getRequest(), $e->getResponse()];\n    } else {\n        // Other exception, use $request and $response params\n        $handler = 'errorHandler';\n        $params = [$request, $response, $e];\n    }\n    if ($this->container->has($handler)) {\n        $callable = $this->container->get($handler);\n        // Call the registered handler\n        return call_user_func_array($callable, $params);\n    }\n    // No handlers found, so just throw the exception\n    throw $e;\n}\n\n```\n(put here, so I don't lose it!)\n. Yes - let's get the handleException() change in as that's the \"easy\" bit. Please do a separate PR.\n. I'm sorry, but this is too invasive for Slim 3. Maybe the ideas in here need looking at when we do 4.0?\n. We'd love a documentation PR!\nWe can't change the key names until 4.0 is released. \n\nOn 3 Jan 2016, at 16:17, Ilija Studen notifications@github.com wrote:\nAs it stands now, it's a minefield. I managed to step on cache (it's an add-on, but still a problematic name because HTTP cache is not the only type of cache that app will have) and environment already.\nAfter documentation, I think that next step would be to prefix Slim's system resources. Our app uses environment to determine whether we are in dev, staging or production environment, so we had to use a different key (app_env, sigh).\nWhat's your option on this? Do you even see it as a problem that needs to be addressed?\n\u2014\nReply to this email directly or view it on GitHub.\n. Someone should write a cookbook article for the docs about this\u2026\n. global $app will also work\u2026\n. There isn't one. It's one of the BC breaks between 2 and 3.\n. Register the controller once and add the multiple urls:\n\nphp\n$container->set('\\MyController', function () use ($container) {\n    return new \\MyController($container);\n});\nforeach ($urls as $url) {\n    $app->get($url, '\\MyController:index');\n}\nNow, in index you can grab url from the Request:\n``` php\nclass MyController\n{\n    public function index($request, $response, $args)\n    {\n        $url = $request->getAttribute->getRoute()->getPattern();\n    // do something different with $url and set $response\n\n    return $response;\n}\n\n}\n``\n. This is intentional. If the leading/is missing, then the base path is set.\n. Thinking about this one, I think I'd prefer it ifadd()` took an array rather than multiple arguments.\nThoughts @silentworks, @codeguy, @geggleto, anyone else?\n. Thanks. Please update the documentation in add()'s docblock.\n. @vlakoff good point about ->add([$instance, 'method']). I wonder why we don't have a failing test for this branch\u2026\n. ok - more discussion on this idea is required.\n. @silentworks It shouldn't be a BC break with vlackoff's changes are noted in https://github.com/slimphp/Slim/pull/1726#issuecomment-180373096.\nThe question is whether we want it or whether to have a separate method as suggested by @geggleto.\n. I've been thinking about this and I now agree that overloading add() to do two things isn't the way forward. I'm not convinced that the additional utility of an addMany() is worth adding to core as we would then have two ways to do it which is more confusing than one way.\n. Something like this:\n``` php\n$app->add(function ($request, $response, $next) {\n    $get = $request->getQueryParams();\n    $get['new_param']= 'foo_bar';\n$request  = $request->withQueryParams($get);\nreturn $next($request, $response);\n\n});\n```\n. This is a PHP feature. From the header manual page:\n\nThe second special case is the \"Location:\" header. Not only does it send this header back to the browser, but it also returns a REDIRECT (302) status code to the browser unless the 201 or a 3xx status code has already been set.\n. Fixed.\n. Can we have a unit test for this please?\n. Thanks!\n. Can we have a unit test for this please?\n. Thank you.\n. Can we have a unit test for this please?\n. Thanks.\n. Shouldn't we be invalidating namedRoutes when map is called?\n. Ah - so the problem is that the Router holds the list of named routes, but we set the name on the Route, so we can't invalidate the cached list in Router.\n. Thanks for finding and fixing this.\n. Good catch. Thank you!\n. As @AndrewCarterUK says, they will be removed from the container in the next version.\n. You may find that setting the outputBuffering setting to false fixes it:\n\nphp\n$config = ['settings' => [\n    'outputBuffering' => false,\n]];\n$app = new \\Slim\\App($config);\n. I think @rocketpastsix may be onto something too. A possible reason that it's truncating is the the size of the body is incorrect.\nTry: \nphp\n$response = $response->addHeaderLine('Content-Length', $length);\nWhere $length is the correct length of the json encoded string.\n. Well done on finding it!\n. Thanks.\n. As @geggleto says, optional parameters work left to right. You can't omit ones to the left.\n. I confused as to why we would want this?\n. I'm sure this can be addressed via a separate component for anyone who would want it\u2026\n. Ta.\n. Can we have unit tests for this please?\n. > What exactly do you mean\n\n\nThis setting may not exist if someone is using their own Container.\n\n\nI mean that you can't assume that those array keys will exist in the settings array and will need to test for their existence.\n. Thank you. I rebased, which is why this doesn't look like it has been merged, even though it has been.\nNote that I removed the routerCacheDisabled and allow setting routerCacheFile to false to disable FastRoute caching.\n. I don't understand the problem. The $request object is a parameter to the AllowRoutePass method, so pass it in when you call that method.\nPlease show the code used to call AllowRoutePass.\n. Yes. Do not use the one in the container. It shouldn't be there.\n. Our current thinking is that this functionality belongs in middleware rather than in core.\nSee http://www.slimframework.com/docs/cookbook/ip-address.html\n. Use an http client. e.g. PHP streams via file_get_contents(), Guzzle or similar.\n. Thanks.\n. The docs at http://www.slimframework.com/docs/handlers/error.html are fairly clear I think? If you think that they can be improved, can you raise an issue (or PR!) at https://github.com/slimphp/Slim-Website?\n. ping @silentworks, @codeguy \n. @campersau Updated. Thank you!\n. Don't want to. It's not the only PSR-3 logging library\n. /me waits for @silentworks to merge it\u2026\n. Where are the line breaks? Do you have characters  before the opening <?php ?\n. Sorry, but I don't see the advantage to this as I think it is less explicit than the isset checks. i'm closing it. Please reopen if there's a performance advantage that we should be considering.\n. Thanks.\n. Good catch. Thank you.\n. Explicit ping for @codeguy & @silentworks :) Thoughts appreciated from everyone else!\n. Don't ever echo. Return the $response with the additional text that you want.\n. How are you testing? I've checked my local installation.\nphp\n$app->put('/home', function($request,$response,$args){\n    return $response->write(var_export($request->getParsedBody(),true));\n});\nTest via curl:\ncurl -X PUT -d '{\"test\":\"foo\"}' -H \"Content-type: application/json\" http://localhost:8888/home\nOutput:\narray (\n  'test' => 'foo',\n)\n. This could be done in Middleware and so I'm loathe to add to core. FWiW, the middleware looks like this:\nphp\n$app->add(function ($request, $response, $next) {\n    try {\n        return $next($request, $response);\n    } catch (\\Exception $e) {\n        $handler = $this->get('settings')['handlers'][get_class($e)] ?? null;\n        if ($this->has($handler)) {\n            return $this->get($handler)($request, $response, $e);\n        }\n        throw $e;\n    }\n});\n(Also, I love PHP 7!)\n. One way: https://akrabat.com/logging-errors-in-slim-3/\n. This has already been fixed in https://github.com/slimphp/Slim/pull/1737 and will be available in version 3.2.\n. Good catch. Thank you.\n. Thanks, Mark!\n. Also, please update ether Error and PhpError handlers.\n. Good point.\n. The problem is that you can't just convert the mediatype in the request in middleware as you'll need it to understand the parsed data you get back out of getParsedBody().\nDo we need to update the way the media parser works so that +json and +xml are detected and handled correctly?\n. @Big-Shark,\nUntil we sort out the way we are most happy with, you can use middleware to register the parser you need:\n``` php\n$app->add(function ($request, $response, $next) {\n    $request->registerMediaTypeParser('tapplication/vnd.api+json', function ($input) {\n        return json_decode($input, true);\n    });\nreturn $next($request, $response);\n\n});\n``\n. Closed in favour of #1781\n. That's a good question. They would have to change their code to send the request and response in viarun()`.\nMaybe we need a new method then.\n. @mnapoli I'm annoyed with myself for not thinking of changing the signature to run() back then!\n. Yes - I've updated.\n. Still more thinking required!\n. > How would this affect slim/twig-view TwigExtension? It extracts the request from container to retrieve basePath, how would this be done instead?\nIt won't affect it. This PR registers request and response with the container so that when the view is retrieved from the container, the objects are there.\nHowever, we need a new pattern as a deprecation notice will be raised.\n. Needs to be done in 4.0.\n. ping @silentworks, @codeguy\n. ping @silentworks, @codeguy \n. It's intentional. If we create a trait, others will use it and this code is not suitable for that. \nIf you want to deal the the Accept header for non-error handling, you should use Will Durrand's Negotiation package.\n. Can you provide an example of code that's no longer working please?\n. Please test 3.x and let me know if this is now solved.\n. Version 3.2.1 released now. Thank you very much for reporting this issue.\n. I think #1789 is the correct way to solve this.\n. The constructor to Slim\\App takes a Container object. You can pass in any container that implements container-interop and has the services that Slim requires registered with it. \nDoes this not work for you?\n. I don't understand why you care about \\Slim\\Container if you're supplying your own container to App's constructor.\n. You have to provide your own registration for all the services that Slim needs to operate. \nSee this example that integrates Zend\\ServiceManager with Slim: https://github.com/akrabat/rka-slim-zfsm-container/blob/master/src/Container.php\n. This is documented at http://www.slimframework.com/docs/concepts/di.html#required-services\n. We can't put it on the Application class as the container-interop interface doesn't specify how to register a service with the container.\n. Note that if your container supports registering services in the same way as Pimple, then you can use our DefaultServicesProvider:\n``` php\n$container = new \\Some\\DiC()\n$defaultProvider = new \\Slim\\DefaultServicesProvider();\n$defaultProvider->register($container);\n$app = new \\Slim\\App($container);\n``\n. What is your use-case? \n. This is related togetBasePath()`\nDoes this code give the same output on both servers?\nphp\n$uri = $this->request->getUri();\nvar_dump($uri->getBasePath() . $uri->getPath());\n. ah yes - basePath doesn't end with a '/'\n. > @akrabat nope, on the dev result is '/hottest2', on prod \"/test2\"\nThe URIs you are using are different, so the path will be different. Slim tries to remove this difference by putting the path to index.php into basePath, leaving the rest of the path in path. \nThis definitely causes confusion, so more work is required here.\n. I suspect we can't change this in Slim 3 as we'll break existing applications.. @rubobaquero, There isn't a static as that creates global coupling. The correct way to handle dependencies, including settings is to inject via the constructor.\n. @rubobaquero.\nOf course, if you don't care about this, you can always do:\nphp\nglobal $app;\n$settings = $app->settings;\nI wouldn't advise this, though!\n. Item 2 is the preferred way in Slim\n. Slack signup link: https://slimphp-slack-invite.herokuapp.com for whomever creates this new page\u2026\nI still prefer IRC though :)\n. Another potential option is a free Discourse account.\n@codeguy is investigating this.\n. Current status:\n- Our support forum is now discourse.slimframework.com\n- We have IRC at #slimphp on Freenode\n- We have a Slack community.\n- Questions are also being asked on the slim tag on Stack Overflow.\n. I didn't name it - it's been slim for 6 years now, though\u2026 http://stackoverflow.com/tags/slim/info\n. What code are you using?\n. oh, good catch!\n. I'm not sure that this property should be public in the next version though. What's the use-case for needing it?\n. Fixed and 3.2.2 is now released.\nI'm sorry for the inconvenience that this caused you.\n. Probably. We need to look at it, but I didn't want to slow down the release of 3.2.2.\n. I agree with @silentworks. At the moment there are two parameters, $data and $queryParams, which are each responsible for one thing only which makes sense.\n. Thanks for the use-case and detailed explanation.\nIf we were to go down this route, then we'd deprecate the use of $queryParams so that the approved use of relativePathFor would be relativePathFor($name, $params=[]). That would imply that pathFor's documentation would also need changing.\nI've reopened for discussion on this. Certainly, I don' t want $data and $queryParams to be interchangeable.\n. Thoughts, @silentworks ?\n. A quick survey suggests that Symfony, Yii2 and Laravel will automatically convert extra route parameters to query parameters while ZF2 and CakePHP require you to separate them out.\n. I think I prefer explicit too.\nHowever:\n\nInstead of altering current behaviour wouldn't it be better to add a way to get the placeholder names for a given route. This would solve the root of the problem since developer would have information which parameters belong to $data and which belong to $queryParams.\n\nShould be implemented.. To avoid any BC break, it looks like the ability to manually force reparsing of the body is the way forward. Something like $request->reparseBody().\n. @DavidWiesner does #1811 address this issue for your case?\n. @DavidWiesner I spoke with the authors of PSR-7 and the spec deliberately doesn't link Body with ParsedBody. \nWe also can't parse the body every time getParsedBody() is called because withParsedBody() exists.\ni.e according to the spec:\nphp\n$data = $request->withParsedBody(['foo'=>'bar'])\n                ->withBody('{\"one\": \"two\"}')\n                ->getParsedBody();\nresults in $data being set to ['foo'=>'bar']\nNow , in our case, getParsedBody() can do clever stuff to help you turn structured data in the body into an array within parsed body. This is not part of PSR-7 and is a Slim addition. \nAs such, we have now provided a method to allow you to \"re-do\" this parsing via reparseBody() so that you don't have to do it manually.\n. As discussed on irc with @mathmarques, this will be a BC break. We need a different solution. \n. I'm not sure that this is a core Slim functionality.\n. Not a core feature.\n. Can you explain what you're trying to do please? \n. I would appreciate review and test of #1808 to see if this solves the problem.\n. Can you provide a unit test or code that shows the problem?\n. Oh. For Slim 2, we're only fixing security issues as Slim 3 is now released.\n. I've answered on StackOverflow.\n. I agree.\n. To follow up, my understanding of https://www.owasp.org/index.php/OWASP_AJAX_Security_Guidelines#Server_Side is that you should always return an object if you're sending JSON. In which case, no code changes are required anywhere.\n. You can inject whatever you like into a middleware class via DI.\nYou can also pass information from one piece of middleware to the next via the request's 'withAttributes()andgetAttributes()` methods.\n. I'm not sure what you mean, but if you have an invokable class registered with the DIC, you can do this:\nphp\n$app->get('/forum', 'controllers_factory');\nIn which case, Slim will do this when dispatching:\nphp\n$action = $container->get('controllers_factory');\n$response = $action($request, $response, $args);\n. I've had a quick read. No Slim doesn't support that in exactly the same way. You have to be explicit with groups:\nphp\n$app->group('/blog', function () {\n    $this->get('/', 'BlogController:homeAction');\n    $this->get('/view', 'BlogController:detailAction');\n});\nThis assumes that there is a class called BlogController that has two methods, homeAction and detailAction which both have a signature of function($request, $response, $args).\n. Thanks!\n. @geggleto The current code relied on string matching which may be more brittle\n. But someone can extend Container and then implement offsetGet\u2026\n. I agree with @deddus - withJson should instantiate a new Body as the current Body could be anything\u2026\n. We'd need code sample to replicate and understand I think.\n. Slim is open source and as such we rely on contributions from our community to write and document the framework.\nI have added some initial documentation about optional parameters to http://www.slimframework.com/docs/objects/router.html#route-placeholders\n. You have to do it a bit manually:\n``` php\n$app->get('/test/{params:.*}', function ($request, $response, $args) {\n    $params = explode('/', $request->getAttribute('params'));\n// do something with $params and $response\n\nreturn $response;\n\n});\n```\nThen, for a URL of /test/this/out, $params is an array of two elements: \narray (size=2)\n  0 => string 'this' (length=4)\n  1 => string 'out' (length=3)\n. I have also documented this.\n. @adiramardiani I think this is a question you should ask the FastRoute people.. Implemented: https://www.slimframework.com/docs/handlers/php-error.html. PHP has assert() and there are many libraries on packagist. \n. Which version of Slim 3 are you using? This was fixed in version 3.20 (https://github.com/slimphp/Slim/pull/1737).\n. This works:\nphp\n$app->get('/jsontest', function ($request, $response, $args) {\n    $response = $response->withStatus(201);\n    $response = $response->withJson(['foo' => 'bar']);\n    return $response;\n});\n```\n$ curl -v http://develop-testbed.slim3.dev/jsontest\n   Trying 127.0.0.1...\n Connected to develop-testbed.slim3.dev (127.0.0.1) port 80 (#0)\n\nGET /jsontest HTTP/1.1\nHost: develop-testbed.slim3.dev\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 201 Created\n< Date: Tue, 29 Mar 2016 09:30:29 GMT\n< Server: Apache/2.4.18 (Unix) PHP/7.0.4\n< X-Powered-By: PHP/7.0.4\n< Content-Length: 13\n< Content-Type: application/json;charset=utf-8\n< \n* Connection #0 to host develop-testbed.slim3.dev left intact\n{\"foo\":\"bar\"}\n```\n. This also works:\n\nphp\n$app->get('/jsontest2', function ($request, $response, $args) {\n    return $response->withJson(['foo' => 'bar'], 400);\n});\n```\n$ curl -v http://develop-testbed.slim3.dev/jsontest2\n   Trying 127.0.0.1...\n Connected to develop-testbed.slim3.dev (127.0.0.1) port 80 (#0)\n\nGET /jsontest2 HTTP/1.1\nHost: develop-testbed.slim3.dev\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 400 Bad Request\n< Date: Tue, 29 Mar 2016 09:32:21 GMT\n< Server: Apache/2.4.18 (Unix) PHP/7.0.4\n< X-Powered-By: PHP/7.0.4\n< Content-Length: 13\n< Connection: close\n< Content-Type: application/json;charset=utf-8\n< \n* Closing connection 0\n{\"foo\":\"bar\"}\n```\n\nCan you create a tiny, standalone example that doesn't work please?\n. OOI, do you have have any middleware in the chain that sets the status after calling $next()?\n. I'm glad that you found the problem :)\n. See issue #1690 - specifically this comment: https://github.com/slimphp/Slim/issues/1690#issuecomment-213161528\n. You can now disable Slim's automatic setting of the content-length with:\nphp\n$config = [\n    'settings' => [\n        'addContentLengthHeader' => false,\n    ]\n];\n$app = new Slim\\App($config);\n. I'm sorry, but I don't understand the problem. Can you explain a different way?\nThis works with the PHP built in server:\n$ composer create-project slim/slim-skeleton slimtest\n$ php -S 0.0.0.0:8888 -t public public/index.php\nI can then add this to routes.php:\nphp\n$app->get('/products/{code}', function ($request, $response, $args) {\n    return $response->write(\"Product {$args['code']}\\n\");\n});\nand test it via curl:\n$ curl http://localhost:8888/products/123\nProduct 123\n. Look at the instructions for Silex (http://silex.sensiolabs.org/doc/web_servers.html#nginx), Zend Framework (https://www.nginx.com/resources/wiki/start/topics/recipes/zend/#time-for-nginx) & CakePHP (http://book.cakephp.org/2.0/en/installation/url-rewriting.html#pretty-urls-on-nginx), I don't see what's significantly different about configuring Slim for nginx?\n. I think both ZF and CakePHP would disagree with you. \nI genuinely don't understand the first comment. Can you provide concrete sample strings and show what's going wrong please?\n. If we can make Slim easier to use with Nginx without creating a BC break, then I'd like to do so, but I have no clue what needs to be changed as my testing shows that it already works\nTest methodology: \n1. Create a brand new Ubuntu box and then run apt-get install vim nginx php5 php5-fpm.\n2. Follow https://help.ubuntu.com/community/Nginx#Nginx_with_PHP  and modify etc/nginx/sites-available/default as instructed so that my Nginx PHP configuration is as default as it can be:\na. Use public directory, by changing root /usr/share/nginx/html; to root /usr/share/nginx/html/public;\nb. Uncomment PHP section, so that it looks like this:\nlocation ~ \\.php$ {\n                       fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n               #        # NOTE: You should have \"cgi.fix_pathinfo = 0;\" in php.ini\n               #\n               #        # With php5-cgi alone:\n               #       fastcgi_pass 127.0.0.1:9000;\n                       # With php5-fpm:\n                       fastcgi_pass unix:/var/run/php5-fpm.sock;\n                       fastcgi_index index.php;\n                       include fastcgi_params;\n               }\n3. Write simple Slim application: https://gist.github.com/akrabat/44371596bf9ea291c673\n   - composer.json goes in /usr/share/nginx/html\n   - index.php goes in /usr/share/nginx/html/public\n4. Test\n   - http://192.168.99.211/ works\n   - http://192.168.99.211/products/123 is a 404 page. It seems that index.php file isn't being called by Nginx.\n5. Configure URL rewriting in Nginx by updating: etc/nginx/sites-available/default. In the location / section, change:\ntry_files $uri $uri/ =404; to try_files $uri $uri/ /index.php$is_args$args; \n6. Test\n   - http://192.168.99.211/ works\n   - http://192.168.99.211/products/123 works\nDid I miss something? Out of the box, Nginx doesn't support PHP or URL rewriting without changing configuration, and when you configure it, Slim works as expected.\nPlease provide an actionable item that we can do help solve the reported problem.\n. @grikdotnet: I have no idea what we can do to solve the problem you are seeing as I don't understand what you think it is getting wrong.\nPlease provide the URL you are using, the SCRIPT_NAME value you see in PHP, the basepath that Slim calculates and the basepath you think that it should have calculated.\n. I still have no idea how to reproduce this error.\n. > I now have this same problem running on ubuntu with PHP7 builtin web server\n\n$ php -S localhost:8080 api.php\nCalling http://localhost:8080/api/v1/hello\n\nWhich folder is api.php in?\n. @JoeBengalen I can't reproduce with PHP 7.0.6.\nThis is my public/index.php:\n``` php\n<?php\nrequire DIR . '/../vendor/autoload.php';\n$app = new \\Slim\\App();\n$app->get('/api/v1/hello', function ($request, $response, $args) {\n    var_dump($this->get('environment'));\n    var_dump($request->getUri());\n});\n$app->run();\n```\nRunning:\n$ cd public\n$ php -S localhost:8888 index.php \nPHP 7.0.6 Development Server started at Tue May  3 17:31:10 2016\nListening on http://localhost:8888\nDocument root is /Users/rob/tmp/slimtest/public\nPress Ctrl-C to quit.\nOpen http://localhost:8888/api/v1/hello in browser:\n/Users/rob/tmp/slimtest/public/index.php:6:\nobject(Slim\\Http\\Environment)[16]\n  protected 'data' => \n    array (size=23)\n      'DOCUMENT_ROOT' => string '/Users/rob/tmp/slimtest/public' (length=30)\n      'REMOTE_ADDR' => string '::1' (length=3)\n      'REMOTE_PORT' => string '64001' (length=5)\n      'SERVER_SOFTWARE' => string 'PHP 7.0.6 Development Server' (length=28)\n      'SERVER_PROTOCOL' => string 'HTTP/1.1' (length=8)\n      'SERVER_NAME' => string 'localhost' (length=9)\n      'SERVER_PORT' => string '8888' (length=4)\n      'REQUEST_URI' => string '/api/v1/hello' (length=13)\n      'REQUEST_METHOD' => string 'GET' (length=3)\n      'SCRIPT_NAME' => string '/index.php' (length=10)\n      'SCRIPT_FILENAME' => string '/Users/rob/tmp/slimtest/public/index.php' (length=40)\n      'PATH_INFO' => string '/api/v1/hello' (length=13)\n      'PHP_SELF' => string '/index.php/api/v1/hello' (length=23)\n      'HTTP_HOST' => string 'localhost:8888' (length=14)\n      'HTTP_ACCEPT' => string 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' (length=63)\n      'HTTP_CONNECTION' => string 'keep-alive' (length=10)\n      'HTTP_COOKIE' => string '__utma=111872281.18152458.1446108447.1457900608.1457935841.23; __utmz=111872281.1446108447.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); PHPSESSID=bb2de85ej4k73o060lvmhf5vb3' (length=178)\n      'HTTP_USER_AGENT' => string 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/601.5.17 (KHTML, like Gecko) Version/9.1 Safari/601.5.17' (length=116)\n      'HTTP_ACCEPT_LANGUAGE' => string 'en-us' (length=5)\n      'HTTP_CACHE_CONTROL' => string 'max-age=0' (length=9)\n      'HTTP_ACCEPT_ENCODING' => string 'gzip, deflate' (length=13)\n      'REQUEST_TIME_FLOAT' => float 1462293277.2315\n      'REQUEST_TIME' => int 1462293277\n/Users/rob/tmp/slimtest/public/index.php:7:\nobject(Slim\\Http\\Uri)[22]\n  protected 'scheme' => string 'http' (length=4)\n  protected 'user' => string '' (length=0)\n  protected 'password' => string '' (length=0)\n  protected 'host' => string 'localhost' (length=9)\n  protected 'port' => int 8888\n  protected 'basePath' => string '' (length=0)\n  protected 'path' => string '/api/v1/hello' (length=13)\n  protected 'query' => string '' (length=0)\n  protected 'fragment' => string '' (length=0)\n. > Maybe you can ask some question on what I can clarify?\n@grikdotnet Please provide the nginx configuration that does not work that you think should so that we can reproduce it. \n. This level of change requires a discussion on what the current problem is and why this is the best solution to that problem.\n. Thank you!\n. I like the concept. I need to think about it a bit in terms of how to do it.\n. I think this functionality needs to be implemented as middleware that App calls if it hasn't bene called already. I'm not sure that this is possible in 3.x or whether it needs to be a 4.0 thing.\n. I disagree with this. Slim doesn't need ArrayAccess at all - only the service registration does. \n. That's great!\n. @Rudloff can you test #1872 and see if that solves your problem?\n. We are only applying security fixes to Slim 2.\n. Not needed any more as it's been refactored.\n. I'm pretty sure that the intention is that you care create a new Stream and then attach it.\n\nOn 11 Apr 2016, at 12:16, Alexander Pletnev notifications@github.com wrote:\nI want to use fputcsv function to convert array to a csv. But cucrently I cant get access to a stream variable in a Body class.\nIt would be good to create a public getter for stream.\n. $response = $response->withBody($myNewStream);\nOn 11 Apr 2016, at 12:30, Alexander Pletnev notifications@github.com wrote:\nBut I cant neither replace $response->body nor attach new resource to it (attach is protected method) .\n. what's the use-case for this?\n. Thank you.\n. Unit tests fail in testRespondWithPaddedStreamFilterOutput.\n. Suggested fix:\n\n``` diff\ndiff --git a/Slim/App.php b/Slim/App.php\nindex cd478f1..e65c6e4 100644\n--- a/Slim/App.php\n+++ b/Slim/App.php\n@@ -386,6 +386,9 @@ class App\n             if (isset($contentLength)) {\n                 $amountToRead = $contentLength;\n                 while ($amountToRead > 0 && !$body->eof()) {\n+                    if ($amountToRead < $chunkSize) {\n+                        $chunkSize = $amountToRead;\n+                    }\n                     $data = $body->read($chunkSize);\n                     echo $data;\n``\n. You need to install themcryptPHP extension locally as the test that's failing only runs if that's installed.\n. Can you seemcryptin the list when you runphp -m` ?\n. Thanks!\n. I'm not sure we should do this as Slim is more than just a PSR 7 implementation.\nThis would make more sense when we have a viable Slim\\Http repo I think?\n. Yes. I'm just not sure that Slim 3 is the right answer to that question.\n. Aha! I understand now.\n. I'm missing what the problem is. Just create some middleware:\n``` php\n$app->add(function ($request, $response, $next) {\n$uploadedFiles = MyUploadedFilesObject::createFrom($_FILES);\n$request = $request->withUploadedFiles($uploadedFiles);\n\nreturn $next($request, $response);\n\n});\n``\n. In that case, you just have to overridecreateFromEnvironment`:\n``` php\nclass MyUploadedFile extends UploadedFile\n{\n}\nclass MyRequest extends Request\n{\n    public static function createFromEnvironment(Environment $environment)\n    {\n        $method = $environment['REQUEST_METHOD'];\n        $uri = Uri::createFromEnvironment($environment);\n        $headers = Headers::createFromEnvironment($environment);\n        $cookies = Cookies::parseHeader($headers->get('Cookie', []));\n        $serverParams = $environment->all();\n        $body = new RequestBody();\n        $uploadedFiles = MyUploadedFile::createFromEnvironment($environment);\n    $request = new static($method, $uri, $headers, $cookies, $serverParams, $body, $uploadedFiles);\n\n    if ($method === 'POST' &&\n        in_array($request->getMediaType(), ['application/x-www-form-urlencoded', 'multipart/form-data'])\n    ) {\n        // parsed body must be $_POST\n        $request = $request->withParsedBody($_POST);\n    }\n    return $request;\n}\n\n}\n$settings = [\n    'settings' => [\n        'displayErrorDetails' => true,\n    ],\n    'request' => function ($c) {\n        return MyRequest::createFromEnvironment($container->get('environment'));\n    },\n];\n$app = new \\Slim\\App($settings);\n```\n. The ability to override a specific class within the Http classes via settings is not going to be accepted in Slim 3. This may change in Slim 4 when we look to create a base pure PSR-7 implementation with our enhancements in a separate system.\n. > @akrabat Absolutely, which does work just fine. I am just proposing that we get rid of this step and allow users to define their own MyUploadedFile class.\nFrom my point of view, I don't want the additional complexity for a rare situation the can be handled by a 23 line class. \nSorry.\n. I've added a note to #1686 about this issue for when we design Slim\\Http for 4.0.\n. Are there any things within Slim that make supporting CORS harder than it could be?\n. Should we be organising the information in the router, so that getting this information out is reasonably easy?\n. No worries.\n. Thank you! I moved it to the example directory as the main readme as that's where I feel it belongs.\n. Thank you.\n. So we just need some middleware?\n. Closing as solution is possible without this change.\n. $app->get('/{id:[0-9]+}', ActionClassName::class);\nSee http://www.slimframework.com/docs/objects/router.html#regular-expression-matching\n. I suspect that Slim is getting it wrong by cloning the StreamInterface object when the response is cloned. \nThe underling PHP stream resource is not deep cloned when the StreamInterface object is clone and given that we can't assume that any given implementation has implemented stream_copy_to_stream() in their StreamInterface's __clone() method, Slim probably shouldn't be cloning the StreamInterface object.\ni.e.it's my view that this is a Slim bug and that we should update Slim\\Http\\Response::__clone() to not clone the body.\nThoughts?\n. @ckressibucher wrote:\n\nThis would solve the issue, however, I'm not sure about the impact on performance... If you have lots of data in the streams and you copy it over to a new one on every withXYZ method call... This is probably much worse than just instantiating new objects\n\nI agree. Copying the underlying data in the stream on every clone would be prohibitive.\nCurrently we're cloning the StreamInteface object, and so the underlying PHP stream is not copied. Hence the memory usage is negligible. You can see this with this code which creates a body of 1 million characters:\n``` php\n$app->get(\"/\", function ($request, $response, $args) {\n    $start = memory_get_usage();\n    echo \"Initial memory: $start\";\n    $response->write(str_pad(\"\", 1000000, \"x\"));\n    $second = memory_get_usage();\n    echo \"Memory after writing 1000000 characters: $second. (diff: \" . ($second - $start) . \")\";\n    $response = $response->withStatus(200);\n    $third = memory_get_usage();\n    echo \"Memory after cloning: $third. (diff: \" . ($third - $second) . \")\";\nreturn $response;\n\n});\n```\nFor me, the result is:\nInitial memory: 1889000\nMemory after writing 1000000 characters: 2893256. (diff: 1004256)\nMemory after cloning: 2893632. (diff: 376)\n. Fixed in #1862\n. This is exactly the kind of thing that Middleware is for. X-Forwarded-Proto is not trustworthy, so you should also check that the REMOTR_ADDR is the correct IP address. This is more work than should be in core.\nOne such middleware is rka-scheme-and-host-detection-middleware.\n. Please make it throw an exception as determineContentType should mean that the default never happens.\n. Needs tests.\n. PRs always welcome :). __get and __isset exist for BC with Slim 2. We don't encourage their use in new applications.. Tests fail on HHVM.\n. http://www.php-fig.org/psr/psr-7/meta/#why-value-objects\n. I've updated VERSION for the 3.4.2 release and have set it on 3.xto a-devnumber. Don't trust the number on3.xthough...\n. Yes - automation would be nice. We can't remove until 4.0\u2026\n. I don't know how to solve this, but adding a new wrapper class used inAppisn't the right solution. Sorry.\n. Now used in the unit testtestCreateFromEnvironmentFromUserData`. . I'm not totally sold on the need, as I don't see how this is different enough from route arguments to warrant the additional complexity in code, documentation and support. \nI'm not sure about the semantic difference argument as, essentially, all that we're trying to do is identify a set of routes by some common property of these routes. I think it's as likely that you'd want to do that by a property set in the code as by a property set in the URI pattern. \n. I'm confused.\ndetermineContentType() is guaranteed to return a knownContentType. \nHence the default in Error should never happen.\n. I'm mostly confused something's already gone wrong if you're in the error handler... \n. @jonathankaiser why is google bot hitting the error handler though?\n. aha! Sorry - I now know what you mean!\n. That should fix it. Will try and get it released today.\n. Which tests don't set up the Request object correctly?\n. We can't remove slim.files as an application may be using it.\n. Why does coverage go down?\n. Slim 2 is no longer being developed and only security fixes will be applied to this codebase.\nAlso, please consider your tone when creating issues as excessive negativity or aggression is unlikely to persuade the project's volunteers to help you with your issue.\n. This is application level, not Slim level.\n. Extending App is the way to do this at the moment. I expect that in 4.0 we'll convert the route determination logic to middleware so that you can put middleware before and after it.\n. This is logged in https://github.com/slimphp/Slim/issues/1686 as:\n\nRemove determineRouteBeforeDispatch and make routing a middleware that can be placed where you want it to be. If you don't add it yourself, we would add it immediately before dispatch.\n. Why not just override map?\n. > we have to create two new classes, an inheritance of Router and Route, because we do not have direct access to change the way Router instantiate a type of Route (see below)\n\nYou'll still have to do this.\n. Can you provide a unit test for this. Also there's a build failure.\n.  No worries :) Thanks for fixing the issue.\n. If you want to execute some code after the route callable, then register middleware with the code after the call to next:\ni.e.  middleware 2 from https://github.com/slimphp/Slim/issues/1909#issuecomment-264724682 looks like this:\n```php\n$app->add(function ($request, $response, $next) {\n    $response = $next($request, $response);\n// do work now that the App's route callable has executed\n\nreturn $response;\n\n});\n``. Not returning anything is an intentional state. You can turn it off by settingoutputBufferingtofalse`.\nWe should probably warn if we detect that the output buffer is empty and response wasn't returned though.\n. Does your route definition accept POST or is it defined as $app->get() ?\n. Hmmm\nIt works for me:\n``` php\n$config = [\n    'settings' => [\n        'determineRouteBeforeAppMiddleware' => true,\n    ],\n];\n$app = new \\Slim\\App($config);\n$app->post(\"/test\", function ($request, $response) {\n    $response->write(\"Hello world\");\n    return $response;\n})->setName(\"post-test\");\n$app->add(function ($request, $response, $next) {\n    $response->write(\"Route: \" . $request->getAttribute('route')->getName() . \"\\n\");\n    return $next($request, $response);\n});\n$app->run();\n```\nThen, curl gives this output:\nbash\n$ curl -X POST http://develop-testbed.slim3.dev/test\nRoute: post-test\nHello world\n. Thanks.\n. Fixed by https://github.com/slimphp/Slim-Website/commit/a9a41a8d242f42c8d5e498a7e6746932bb1f3e31. > I would then propose a different Strategy for capturing the buffer output from the callable and pass it down the chain.\n\nphp\nob_start();\n$callable($req, $res);\n$response->write(ob_get_clean());\n\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Route.php#L324-L326\nThis would have to be a 4.0 thing anyway.\n. >  I would break it down to separate PR for example for PHPDoc fixes and one for removing the use statements.\nI agree. Smaller focussed PRs are easier for us to digest and understand what's going on and why.\n. As @prisis point out, this method is defined by container-interop and so can't be changed.\n. Closing - not happening.\n. Harder to handle different environments that way\n. @maxmeffert because Pimple's factory signature doesn't look like that.\n. App's constructor now takes the settings array directly - see #2104.. This is now being tracked on #2005 and needs to be fixed in Slim 4.. Replaced by #1929\n. @martynbiz: https://i.19ft.com/60f75283.png\n(https://travis-ci.org/slimphp/Slim/jobs/142474362#L299-L330)\n. Thanks!\n. We'd love a PR for the docs :)\n. This issue is related to #1931.\n. This becomes moot with the proposed PSR for HTTP Middleware.\n. > Why the sudden reliance of 3. party libraries?\nBecause some things have been solved better than we can. Autoloading is a good example. Composer's is much better than Slim 2's.\n. We use Composer for the FastRoute routing library, Pimple DI container and the PSR-7 interfaces in Slim 3.\nBuilding applications with 3rd party libraries managed by Composer is the way of the future for modern PHP development. \nSee https://akrabat.com/using-composer-with-shared-hosting/ for strategies on how to use it for local development, but not on your live platform.\n. What's in your PHP error log\n. oh. Response doesn't have a withAttribute() method\u2026\n. You could use pathFor():\nreturn $response->withRedirect($this->router->pathFor('routename', ['game' => 'bar']));\n. You can't pass an HTTP body via a 30x redirect\u2026\n. The Responder class should be part of Slim-Http.\nIt should contain the code from App::finalize() and App::respond(). App::handle() would then use the Responder something like this:\n```php\n    public function handle(ServerRequestInterface $request): ResponseInterface\n    {\n        //... \n    $response = $this->callMiddlewareStack($request, $response);\n\n    $responder = $this->getResponder();\n    return $responder->respond($response);\n}\n\n```. We'd love someone to submit a PR to the Slim-Website repository for this.\n. I can't see us adding this to Slim. We have methods that allow you to remove a route and replace a route's callable.. Does this work as a separate add-on project for Slim?\n. if you get a blank page, you either have no output created or, more likely, a PHP error has occurred.\nDo you have the displayErrorDetails setting set to true?\n. Try debugging the old fashioned way.\nIn postLogin, add echo \"here\"; exit; immediately after the opening brace. If that works, then move it to immediately before the if (!$verify) { line. If that works, then var_dump() each pathFor call and check that they return the correct string.\n. @konskript,\nThe output after submitting is a 200 OK status with this text in the body:\n<!-- <!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n<input type=\"text\" name=\"\">\n</body>\n</html> -->\nYou can see this if you view source.\n. Can you provide a minimal code example that shows the problem?\n. @chrisemerson can you create a really small test case that shows this?. We can't change the type hint to Throwable as that won't work in PHP 5.6. Maybe we can remove it?. Fixed with PR https://github.com/slimphp/Slim/pull/2121. @konskipt This is not a problem with Slim and how to fix it is displayed in the message provided by the warning:\n\nYou are required to use the date.timezone setting or the date_default_timezone_set() function.\n\ni.e. update your php.ini file and add a timezone to the date.timezone setting in there.\n. > @dopesong well, its in slim vendor right?\nThe vendor directory contains code from other libraries that you have installed. In this case a library called \"Carbon\" from someone called \"nesbot\". i.e. it is not Slim code.\n. @konskript You do not need to edit anything in vendor to solve this issue. Please read this comment again.\n. BasePath is a real nuisance, isn't it!\n. I'm not convinced that the REQUEST_URI is simply rawurlencoded - it appears to percent encode any non-ASCII characaters:\nGiven a directory of Rob's%20te\u0301sting, I see this in $_SERVER:\n'REQUEST_URI' => string '/Rob's%20te%cc%81sting/public/' (length=30)\n'SCRIPT_NAME' => string '/Rob's te\u0301sting/public/index.php' (length=33)\nHowever, the rawurlencode of that string is:\nRob%27s%20testing\nAs such, maybe we need to go the other way and rawurldecode REQUEST_URI and then test?\n. i.e. would it be better to add a $requestUri = rawurldecode($requestUri);?\n. @JoeBengalen Did you get a chance to look at this?\n. > Note that getBasePath encodes the ' into %27\nIs this a change?\n. Thanks for your patience @JoeBengalen! \nI've decided that this is a bug-fix and so is good to go.. @skyzyx: How can I reproduce this? I don't get the exception about a missing reason code that you report in my testing.\nUsing this code:\n``` php\n$app->get('/', function ($request, $response) {\n$client = new Predis\\Client();\n$client->set('foo', 'bar');\n$value = $client->get('foo');\n\n$response->write(\"Value = $value\");\nreturn $response;\n\n});\n```\nI get either: Value = bar when redis is running or https://i.19ft.com/e2530193.png when it isn't.\nI see in your stack trace that you have a Application/EventHandler/Error/ErrorHandler.php file. I don't seem to have this file. What does it do?\n. You should not set Redis' error code as an HTTP status code as it isn't one. You should set the response to a valid HTTP status code in the 5xx series and log the Redis code for your own diagnostics.\n. To resolve this, we would need the router to be container aware.\nThe easiest way to do that is:\n1. Add a setContainer() method to Router that's not in the interface\n2. Update the DefaultServicesProvider's 'router' closure to call the router's setContainer() but only after doing a method_exists check.\n3. Update Router's map() method to call the route's setContainer() method (if it exists) after instantiating the route.\n4. Remove the call to $route->setContainer() in the App 's map() method\n. The problem is that @geggleto is using the Router's map rather than the App's one. The App's one sets the Container instance onto the route object so that the callable resolver works.\nThe proposed solution is to move the setting of the container to the route into the Router object rather than the App object.\n. That would probably work. Want to work up a PR?\n. You have a misspelling in your function definition:\npublic function __invoke($request, $response, $nex)\nshould be:\npublic function __invoke($request, $response, $next)\n. @SusanthCom No problem. Glad it's working for you now.\n. We expect that the error will be overridden using a custom error handler.\n. ``` php\n$config = [\n    'settings' => [\n        'displayErrorDetails' => 1,\n    ],\n];\n$app = new \\Slim\\App($config);\n$container = $app->getContainer();\n$container['errorHandler'] = function ($container) {\n    return function ($request, $response, $exception) use ($container) {\n        // retrieve logger from $container here and log the error\n        $response->getBody()->rewind();\n        return $response->withStatus(500)\n                        ->withHeader('Content-Type', 'text/html')\n                        ->write(\"Oops, something's gone wrong!\");\n    };\n};\n$container['phpErrorHandler'] = function ($c) {\n    return $c['errorHandler'];\n};\n$app->get('/', function ($request, $response, $args) {\n    $this->callNonExistingMethod(); // Intentionally Creating an error\n    return $response->getBody()->write(\"Hello to Slim ... \");\n});\n$app->run();\n``\n. Further information here: https://akrabat.com/overriding-slim-3s-error-handling/\n. Thanks. Would you be able to create a PR for the [docs](https://github.com/slimphp/Slim-Website) to document this? I suspect thatgetServerParams` also needs documenting!\n. Thanks.\n. Slim 3 uses PSR-7 which has immutable request and response objects. As such you need to reassign whenever you use a \"with\" function.\nTry:\n``` php\n<?php\nuse \\Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse \\Psr\\Http\\Message\\ResponseInterface as Response\n$app->get(\"/users\", function(Request $request, Response response){\n    $data = [];\n$response = $response->withJson($data);\n$response = $response->withHeader(\"Random-Header\", \"some value\");\n\nreturn $response;\n\n});\n```\n. No problem :)\nGood luck with your use of Slim.\n. I suspect that this would be solved id #2481 is implemented?. Closing in favour of #2481.. That's a PHP thing isn't it? What's in $_GET ?\n. I mean, Can you var_dump $_GET for me please?\n. if var_dump($_GET) shows the . replaced with a _, then it's a PHP behaviour, not a Slim one.\n. Ah yeah. Here we go: http://www.php.net/manual/en/language.variables.external.php#language.variables.external.dot-in-names\n. Fixed with #1963 \n. Please put setCallable() immediately after getCallable().\nAlso, while we're here, can we add a protected property for $this->callable?\n. ah! - it's in the parent\u2026\n. Please explain more?\n. Implemented in #2398\n. Slim isn't going to check for and provide a warning for every deprecated PHP ini directive.\nThe deprecation of always_populate_raw_post_data is in the migration guide: http://php.net/manual/en/migration56.deprecated.php\n. @adriano-ghezzi This is related to a change in PHP 5.6 and not Slim.\nIn your php.ini file, you also need to remove the leading ; before always_populate_raw_post_data as that semi-colon means that your change doesn't have any effect. You also need to restart your web server when you change a php.ini setting.\nThe 'Unexpected data in output buffer.' exception is from Slim. To stop this happening, update your settings:\nphp\n$config = ['settings' => [\n    'addContentLengthHeader' => false,\n]];\n$app = new Slim\\App($config);\n. Hi, \nYou need to set determineRouteBeforeAppMiddleware to true in your settings:\nphp\n$config = [\n    'settings' => [\n        'displayErrorDetails' => true,\n        'determineRouteBeforeAppMiddleware' => true,\n    ],\n];\nYou now have access to the resolved route from $request->getAttribute('route'); in your middleware.\n. Given that  CallableResponder implements just the single method in CallableResolverInterface, declaring it final is acceptable. \nIt can always be composed into another class that implements CallableResolverInterface if the input or output to it needs to be changed.. Thanks!\n. Why did you close this?\n. Ah - Replaced with #1978\n. Thank you !\n. Thank you!\n. Fixed in the upcoming version 3.6. Thanks for reporting.\n. The operation is as expected.\nWe only 404 on dispatch, so that middleware has the option of changing the $request if the route attribute is null so that it can then be dispatched.. Thanks.\n. What are the BC implications?\n. getAttribute() is part of PSR-7...\n. I hadn't noticed! @luzluna, please rebase against 4.x and edit the PR to be against 4.x too.. Can we raise a new PR for Slim-Http please?. $request has a withAttribute() and getAttribute() method, so your middleware should set an attribute that can then be read in the route callback.\n. You need Slim's dependencies for it to work. Composer is the standard in PHP to do this.\nSee https://akrabat.com/using-composer-with-shared-hosting/ for ideas.\n. Because software doesn't exist in a vacuum. We don't need to write our own router when there's a really good once already available\u2026. Because modern PHP development is done via Composer in the same way that modern Front End development is done with Bundler. We're not going to create packages with all the other possible libraries thet you may want.\nI've already indicated that https://akrabat.com/using-composer-with-shared-hosting/ provides information on how to deploy for a specific individual scenario.. As long as you're happy. SeetestUnsupportedMethodUsedByClient()\n. Fixed with #2141.. From https://tools.ietf.org/html/rfc7159:\n\nNote:  No \"charset\" parameter is defined for this registration.\n      Adding one really has no effect on compliant recipients.\n\nI assume we should probably remove this, but I'm concerned about the BC implications if some services do not work if you omit it?\n. I recommend just writing creating instantiating your own request and response objects and calling $app->__invoke() directly.\n. Yeah - hoping to get to it today.\n. I've thought so more about this and while I appreciate that I asked for this, I now think it'd be better to wait for 4 and handle it better there.\n. @kwhat the PHPError handler will only get called on a PHP 7 installation.\n. We would love a PR to https://github.com/slimphp/Slim-Website.\n. We try to ensure that the docs are good. However, as an open source project, not all contributors provide a docs PR when they write a feature. \nAlso, as someone very close to the code, I rarely need the docs, so am not always aware of what's missing or note explained well. As we know about this one now, I'm confident that it'll be sorted at some point.\n. I will say this for Slim, we don't say \"RTFM\" :) We will link you to the correct docs page though (if there is one!).\nSeriously, thanks for the feedback as I do want Slim to be the best it can be and I appreciate the time you've taken to report this.\n. @nickdnk Can you address the PHPCS issues please?\n. @nickdnk If you look in CI section on here, you'll see: \"Some checks were not successful\".\nOpening up, you see that this PR failed the Travis checks. Clicking on \"Details\" takes you to https://travis-ci.org/slimphp/Slim/builds/173057833.\nPick the 5.6 one,  click into it and scroll to the bottom and you'll see what @dopesong posted earlier. This is the list of errors created by phpcs.\nSpecifically in AppTest.php, there are problems with lines 1988 and 2006.\n. Correct - the PHPCS checks are about the way the code is laid out.\n. The test is correctly failing, yes :)\n. Now we just need @iansltx or someone else to fix it :)\n. Can you add the annotation to tell PHPUnit to skip this test?\nI can then merge it and when @iansltx (or whoever) branches to fix it, they can remove it on their branch.\n. Thanks - the CI passes now :)\n. Fixed as part of #2141 . I would guess that it was missed.\n. @nickdnk What's your use case for needing a separate HEAD method?\n. The thing is: HEAD is exactly the same as GET, except that the body is omitted. Slim already supports that.\nSo writing an $app->head() would imply a special use-case.\n. Yes. _METHOD will certainly be moved to middleware for 4.0\n. Thanks.\n. Well,\nThe PSR-7 spec says this about getParsedBody():\n\n* @return null|array|object The deserialized body parameters, if any.\n *     These will typically be an array or object.\n */\npublic function getParsedBody();\n\nSlim has to implement this method in Request in order to meet the specification and is within that spec to return an array.\n. Not needed as no one has a use case for responding to HEAD differently to GET.\n. They are there for a reason: the code coverage is run in PHP5.6, so that code is never run\u2026\n. Yes - see that the coverage dropped? That's because of this: https://coveralls.io/builds/8878310/source?filename=Slim%2FRoute.php#L347\n. Thanks for looking at it.\nThe difference for me is that we've noted that it's intentional.\n. Resolved by #2288.. Outbound. See https://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L543-L553. Fixed by https://github.com/slimphp/Slim/pull/2254.. The main reason is that we think that for a robust ecosystem there should be more components implementing the PSR than just one.\n. Slim 4 uses Slim-Http.. See https://github.com/slimphp/Slim-Http/issues/50\n. Not totally sure about the factories, but theory code doesn't look too far out of left field.. Where would Slim use a Response object? The new ErrorMiddleware?. Ah. Are you thinking about helping users create Response-independent middleware?. Fixed by #2290. @geekish wrote:\n\nIt's up to you to create and return them, which is why a ResponseFactory of some sort is going to be very useful.\n\nWhy is a ResponseFactory preferable to new Response() ?. My thought was that $response = new Response(); is as easy as $response = ResponseFactory::createResponse(); and is one fewer class to write.. @kadevland You can add namespace App\\Controllers; to the top of routes.php file and you can do that today in Slim 3.. Let's wrap this into #2050 . > If you're going to continue using the array $args by default I'd recommend not adding them as request attributes. See #2019\nWe should look at that, certainly. \nThe route callable's signature is configuration via a strategy, so this ticket is for creating the new strategy to more closely match the PSR-15 signature.\n. @odan Yes - see https://github.com/slimphp/Slim/pull/2379. Fixed in #2497. Maybe the trait should become a class and be composed into App and Route?. > If you want, I can make this change.\nYes. This probably affects into the PSR-15 support that @bnf has started.. Fixed by #2124. This is a Slim-Http thing. See https://github.com/slimphp/Slim-Http/pull/27. run() and __invoke() have totally different purposes:\n\nrun() runs the app from the top\n__invoke() is the last element in the middleware stack\n\nWe can't consolidate as they perform different functions within the lifecycle.\nWe will need to look at __invoke when we go to PSR_15 though. \n. I'm assuming that we'll continue to require that the container is must conform to the container-interop interface.\n. > @akrabat so $this->service should be removed in favor of $this->get('...') only?\nNow that's a good question that we'll have to think about.\n. Fixed in #2104 & #2098. Will do tomorrow. \n. 4.x created and pushed.\n. On our list :)\n. Issues need to be opened on relevant repositories for Slim 4 updates.. Thanks. I've also fixed the bug.. Far more prosaically, I thought I was merging this one when I merged the other one!. In general, I think we should continue to accept PRs for bug fixes and minor new features to 3.x for the time being at least. . PRs raised to fix in the skeleton and on the website.. Thanks.. As already noted, Slim fully supports DI.\nThe actual answer the question is that it's pragmatic - especially in anonymous functions. Not every developer is fully trained up on best practices and they just want to get their job done. Service location is a better decoupling technique than direct instantiation or static function calls, so I'd rather we promoted that for \"RAD\" scenarios than have statics...\n. I get this:\n```\n$ phpunit\nPHPUnit 5.6.1 by Sebastian Bergmann and contributors.\n...............................................................  63 / 566 ( 11%)\n.......................................WS...................... 126 / 566 ( 22%)\n............................................................... 189 / 566 ( 33%)\n..SSSSSSSSSSSSS................................................ 252 / 566 ( 44%)\n............................................................... 315 / 566 ( 55%)\n............................................................... 378 / 566 ( 66%)\n............................................................... 441 / 566 ( 77%)\n.........R..................................................... 504 / 566 ( 89%)\n..............................................................  566 / 566 (100%)\nTime: 615 ms, Memory: 18.00MB\nThere was 1 warning:\n1) Slim\\Tests\\AppTest::testIsEmptyResponseWithoutEmptyMethod\nPHPUnit_Framework_TestCase::getMock() is deprecated, use PHPUnit_Framework_TestCase::createMock() or PHPUnit_Framework_TestCase::getMockBuilder() instead\n/Users/rob/Dropbox/bin/phpunit:572\nWARNINGS!\nTests: 566, Assertions: 908, Warnings: 1, Skipped: 14, Risky: 1.\n``. Can you explain the use-case a little more please as you didn't update theNotFound` handler.. I don't think that this needs to be in core Slim.. Slim-Http has resolved this as it doesn't use a base path.. Thanks.. Does this work:\n```php\n<?php\nheader(\"HTTP/1.1 406 Reaon\");\nexit;\n```\nTesting locally, I can't see any problems with your code, so suspect that it's related to the hosting.\n. > Slim3 is recommend you to show output response in json.\nFor what it's worth, this is not a recommendation of the Slim project. Slim can be used to output content in any media type.. Slim is awesome for APIs :). > Outputs 500 error - it's something with server:/\nLooks that way. Best to contact Home.pl and ask for help.. I thought I saw a PSR-7 compliance test suite somewhere. This may help with that too.. Fixed for Slim 4 in https://github.com/slimphp/Slim-Http/pull/26. With no discussion since 2016 other than @designermonkey's comment, I'm closing. Please re-open if there's more to discuss.. What is the problem?\n```php\n$app->get('/api/search/user', function ($request, $response) {\n    $firstname = $request->getParam('firstname');\n    $lastname = $request->getParam('lastname');\n// do things with $firstname and $lastname\n\nreturn $response;\n\n}\n```. https://github.com/akrabat/slim-bookshelf breaks when I use this branch with it. I get:\n\nAn exception has been thrown during the rendering of a template (\"Named route does not exist for name: list-authors\") in \"layout.twig\" at line 35.. Aha! Yeah - that's an obvious issue.... I'm not sure we need helper methods yet. Maybe wait and see what happens in beta when people try upgrading?\n\nCertainly we should document this in the upgrading documentation as a minimum. Maybe create an UPGRADING.md file in root so that we can note while we we work?\nFor now, I think that the skeleton's index.php needs:\nphp\n$app->getContainer()['router'] = $app->getRouter();\n. What settings do we have? i.e. Do we need a collection at all?. There's an argument that we just remove the output buffering thing altogether. \nWe'll need to ensure that a var_dump() still works though.. Something to look at\u2026. I expect to be able to review this week.. Is it worth implementing setInvocationStrategy() in Slim 3 so that people can start using it now ready for upgrading?. As a minimum we should enforce returning a Response regardless.. maybe we can have middleware that captures the output buffer and appends/prepends it to the body of the response on the way back out?. Nope - Middleware is totally able to modify Response on the way out. It won't be able to modify it on the way in. You have no (easy) control over the parameters passed to middleware or the route callable. You can change the data in the $args though by setting data into the request's attributes.. @liko28s: This can be done in middleware if the determineRouteBeforeAppMiddleware setting is set to true:\n```php\n$app->add(function ($request, $response, $next) {\n    // get the route from the request\n    $route = $request->getAttribute('route');\nif (!$route) {\n    // no route matched\n    return $next($request, $response);\n}\n\n// get the arguments and alter them\n$args = $route->getArguments();\n$args['foo'] = 'bar';\n\n// update the request with the new arguments to route\n$route->setArguments($args);\n$request = $request->withAttribute('route', $route);\n\n// also update the routeInfo attribute so that we are consistent\n$routeInfo = $request->getAttribute('routeInfo');\n$routeInfo[2] = $args;\n$request = $request->withAttribute('route', $route);\n\n// continue\nreturn $next($request, $response);\n\n});\n``. > Out of interest, why the settingdetermineRouteBeforeAppMiddleware = true` isn't set by default?\nThe setting was added after 3.0 was released, so the default is false to maintain BC.. I agree that this feels like an error as our JSON handling doesn't do this.\nPR #2122 raised.. If this can be fixed in a B/C way I'm interested.\nAlso, can someone test if this is a problem for Slim 4?. We could do with a reproducible project with .htaccess file and php -S command line.. Slim-Http no longer has a concept of base path.. Thanks!. You can simply add to this branch and as you push, it'll re-run the CI tests. > The un-covered line here it seems to be like a dead code, and moreover it's not appearing on my local phpunit 4.8.33 running with PHP7 7.0.14, where I've 100% code coverage for the Slim Callable Resolver. Any ideas ?\nI can't see why that closing } is shown as not covered.. Thanks.\n It may be worth looking at the equivalent in 4.x and seeing if that can also be improved.. @damianopetrungaro any luck in producing a small reproducible case?. There's an argument that we should always put the route arguments into request attributes, but we don't do it for the RequestResponseArgs strategy either.\nThoughts?. The HTTP component has been move to Slim-Http where this issue has been handled.. \ud83d\udc4d Will this work for the 3.x branch too as we should support 7.1 there too.. Closing as need a different branch for 4.x. I think it's a bug fix. Will go with majority opinion though. . > @akrabat Forward port to 4.x too?\nYes.. > Do we want a test for this?\nAlmost certainly :). Rebased and added unit tests.. Success, @codeguy  :). Can this go into 4.x too, please?. Thanks.. The use-case was for the situation when a user has thrown their own Exception that extends our NotFoundException.\nIn line 453, there's no exception in play and the request and response are already passed to the handler, so a new Exception isn't created.\nDo you have a use-case where you need this Exception to be instantiated  in line 453?. I'm not intrinsically against making the change if there's a reason to do so. I just can't think of one and at the moment, the handler can distinguish between a not found because the route couldn't be found and a not found because the application threw an exception which could be a useful distinction.. Discovered that my unit test for $preserveHost was wrong as it didn't allow for the case of the Request's Host header being different from the Uri's host property. \nFixed test and hence fixed withRequest().\n. > @akrabat Is this just for 3.x?\nBetter forward port to 4.x too as I need to resync for slim\\http\n. As Slim 3 is released, we are only fixing security issues on Slim 2.. Clearly the docs need improving (calling @geggleto!)\nYou should be able to do this simplification and let Slim sort out the container retrieval:\n// in routes.php...\n$app->get('/...', function () {\n  // ...\n})->add('auth:authorize');. Web browsers do not send the fragment to the server.. PSR-7 is for handling all types of HTTP messages, not just server requests.. Can you explain the reasoning behind this change?. Yes. I understand your logic.. My general opinion is that inconsistencies are inevitable when you have lots of volunteer contributors. I certainly won't reject a PR because someone has named their variable $res rather than $response.\nHowever, I'll take a PR to tidy up and please feel free to do so!\nAs far as comments are concerned, I encourage them as, again, lots of different people look at this code and if a comment helps someone then it's worth it.\nIf you don't think that the code is good enough quality, then create small PRs that you think improve it and we can discuss specifics.\n. General rule: the smaller, the better :). How strange, I use PHP 5.6. all the time here with no problems.. How is Apache2 involved when you're using php -S ?. Thanks for working out what was happening.\nAs this is a skeleton, it's intended to be edited and I think that if you're doing something unusual, then it's not unreasonable to have to edit the code too :). Slim is PHP code, so you can use all PHP functions in an application that uses Slim.\nThe key thing that Slim provides is routing and the encapsulation of HTTP's request and response messages as these are fairly boring to write and every app needs them. This means that you don't have to write the code that works out which function to execute if the url is /hello or if it's /contact.. We'd love a PR that added something.\nCurrent policy is that we only provide security fixes for Slim 2 and that we intend to continue bug fixing Slim 3 when Slim 4 comes out.. It's nowhere near that formal. Slim 2 doesn't get bug fixes any more, but does get security and PHP compatibility fixes. Slim 3 will get bug fixes after 4 comes out, but I don't know for how long.. Not really - if a security issue is found in Slim 2 after 4 is released and someone provides a PR that works, then I'll release a new version of 2.. If as security issue was found in 4 or 3 and we could determine that it affected 2 and we had the knowledge to safely back port, we would do. \ni.e. we will make best efforts to fix known security issues in Slim 2+. \nIn practice, the differences between 2 and 3/4 are significant enough that it's unlikely to happen as there's so little shared code.. That's the one. . Thanks!. Looks good, but you also need to fix the tests. Just push to your branch and this PR will update. okay.\nYou may find https://akrabat.com/the-beginners-guide-to-contributing-to-a-github-project/ helpful.. Thanks @Sam-Burns.\nCan you don one for 4.x too?. @harikt Can you explain?\nIf you have code that checks for instanceof  Interop\\Container\\ContainerInterface, then that code will continue to work. Similarly, you can continue to pass a container that implements Interop\\Container\\ContainerInterface where you could before.. @harikt No problem at all :) Always happy to have additional people look at what we do!. Agreed. Hopefully, 4.x will be easier in this regard.. I bet that was annoying you! Thanks :). We'll solve this for 4.. Please create a unit test and supply a curl command that shows the problem.\nThanks.. I can't reproduce with this test:\n```\n    public function testGetParsedBodyXmlWithNoBody()\n    {\n        $method = 'GET';\n        $uri = new Uri('https', 'example.com', 443);\n        $headers = new Headers();\n        $headers->set('Content-Type', 'application/xml');\n        $cookies = [];\n        $serverParams = [];\n        $body = new RequestBody();\n        $body->write('');\n        $request = new Request($method, $uri, $headers, $cookies, $serverParams, $body);\n    $this->assertEquals('', $request->getParsedBody());\n}\n\n```\nPlease write a test that shows the problem and add to this branch and then reopen the PR.. Please provide some sample code demonstrating this.. I'm glad you sorted it. See comment on PR. A closed list of methods doesn't make sense, so we need to fix it properly.. I'm not going to disagree :). Looking it up, Diactoros uses \n/^[!#$%&\\'*+.^_`\\|~0-9a-z-]+$/i\n\n(https://github.com/zendframework/zend-diactoros/blob/master/src/RequestTrait.php#L303). @Zegnat I agree. Would love a PR :). It's a bug fix, so 3.x  & we'll forward port to 4.x. \ud83d\udc4d  Don't forget the tests!. Please provide two PRs: one for 3.x and one for 4.x\nThe 3.x one keeps $validMethods but marks it deprecated in the docblock.. Out of interest, is there a reason why this isn't relevant to the 3.x branch?. I'm not sure what you mean by Slim being mainly for JSON as it has no bias whatsoever on the format of data rendered.\nPersonally, I use rka-content-type-renderer which renders an array into either JSON, XML or HTML based on the Accept Header.\nThis is a simple Slim app that uses it:\n```php\n<?php\nrequire DIR . '/../vendor/autoload.php';\n$config = [\n    'settings' => [\n        'displayErrorDetails' => true, // set to false in production\n        'addContentLengthHeader' => false,\n],\n\n];\n$app = new \\Slim\\App($config);\n$app->get(\"/\", function ($request, $response, $args) {\n$data = [\n    'items' => [\n        [\n            'name' => 'Alex',\n            'is_admin' => true,\n        ],\n        [\n            'name' => 'Robin',\n            'is_admin' => false,\n        ],\n    ],\n];\n\n$renderer = new RKA\\ContentTypeRenderer\\Renderer();\n$response  = $renderer->render($request, $response, $data);\n\nreturn $response;\n\n});\n// Run!\n$app->run();\n```\nThen, to output XML, the user simply requests XML via the HTTP Accept header:\n$ curl -H \"Accept: application/xml\" http:/localhost:8888\nand the output is:\n```\n<?xml version=\"1.0\"?>\n\n\nAlex\n1\n\n\nRobin\n0\n\n\n```\n. Can't be done.. Sorry, but a far better solution is to remove the list of validMethods altogether and change filterMethod() to check for a regex of the form: \n/^[[:alnum:]!#$%&\\'*\\/+\\-.^_`|~]+$/i\n\nand only throw the InvalidMethodException if the $method doesn't match that regex.. Thanks.. Pretty sure that not all headers use comma a separator. > @akrabat in the RFC its defined that it should be a comma separated list\n\n\nMultiple message-header fields with the same field-name MAY be present in a message if and only if the entire field-value for that header field is defined as a comma-separated list\n\n\ni.e. A header may occur once with a comma in it where that comma does not mean two separate values.  It just may not appear twice.. FWiW, Diactoros behaves the same way as Slim.\n$headers = ['MyCustomHeader' => 'apple,banana'];\n$request = new Zend\\Diactoros\\ServerRequest([], [], null, null, 'php://input', $headers);\nvar_dump($request->getHeader('MyCustomHeader'));\nwill output:\narray(1) {\n  [0] => string(12) \"apple,banana\"\n}\nAdding a header of the same name adds a new element to the output array:\n```\n$headers = ['MyCustomHeader' => 'apple,banana'];\n$request = new Zend\\Diactoros\\ServerRequest([], [], null, null, 'php://input', $headers);\n$request = $request->withAddedHeader(\"MyCustomHeader\", \"orange\");\nvar_dump($request->getHeader('MyCustomHeader'));\n```\ngives:\narray(2) {\n  [0] => string(12) \"apple,banana\"\n  [1] => string(6) \"orange\"\n}\n. I don't think this is a bug and nothing in http://www.php-fig.org/psr/psr-7/#headers-with-multiple-values leads me to think that we should explode on , in getHeader().. Thanks.. This isn't a \"small BC break\" as not running the route registrations in group() will break urlFor() which means that you can't create links to those routes.. I'm interested to know what the performance difference is if you use strings rather than closures in $app->get(). > What we are asking is if you use a string as your route callback then you shouldn't have performance issue.\nWell, it should be less of an impact than registering closures.. In generally in favour of a tree-like lazily loaded routing solution, but have no idea how it could practically be implemented with FastRoute. Happy to look at at a PR for it. @silentworks so how would:\n$app->group(`/users/{id:[0-9]+}`, function () {\n    $this->get('/address', 'UserController:address'):\n    $this->get('/messages', 'UserController:messages'):\n}\nwork?. How? I thought @theodorejb didn't want the closure to run unless the group's \"url\" was matched?. The point still stands that FastRoute doesn't support the concept that you want so you have two choices that I can see:\n\n\nWrite a PR to Slim that creates the concept of group objects that register the group's URL to the router which upon matching removes all current routes, adds the child routes to the router and then re-run the router to match these. The PR will also need to ensure that pathFor() continues to work as currently - i.e. you can retrieve the URL for any other group's route that has a name.\n\n\nImplement a simplistic manual check in group() before adding the child routes.\ne.g.\n```php\n$app->group('/users', function () {\n    $uri = $this->getContainer()->get('request')->getUri();\n    $path = $uri->getPath();\nif (strpos($path, '/users') === 0) {\n    $this->get('/one', 'UsersController:one');\n    $this->get('/two', 'UsersController:two');\n    $this->get('/three', 'UsersController:three');\n}\n\n});\n``. Surely the problem you are seeing is related to the fact that you are not properly escaping$ref` when you render it?\n\n\nPlease show a complete minimal example that shows what you are seeing.. The strtoupper() should certainly be removed from 4.x. The problem with fixing this is 3.x, is that if anyone is currently testing against getMethod(), they are doing a simple == against an uppercase string. This stands a good chance of breaking.. Except that we break people's working apps.. > @alexweissman whoops seems like a great library. I'm not sure though if @geggleto @akrabat want to depend on that.\nYou can safely assume that Whoops will never be a dependency of Slim.. Slim 4's error handling was reworked as per #2398. \nIf further improvements are required, let us know.. The only thing I care about is that it's automated . As per other issue: https://github.com/ApiGen/ApiGen/wiki/Generate-API-to-Github-pages-via-Travis. Generally, I think the odds of remembering to do it manually are low. Another thought.  This needs to be on the Slim-Website repository as we're going to need this for 3.x and 4.x.\nMaybe this needs to be a bash/php script that is on Slim-Website that checks out the Slim repo, creates the api docs in the right place on the website and then deletes the Slim repo?. The last time we discussed it, the plan was for PHP 5.6+. Why? What do you gain as a user of the framework?. There's no reason why you can't use PHP 7 with Slim 2, 3 and 4.\nThe question is whether we should exclude people who are on PHP 5.6 which is getting security updates until December 2018.. https://github.com/php-fig/fig-standards/blob/master/proposed/http-middleware/middleware-meta.md. > Nobody reply to this important topic?\nThere's nothing to add at this stage. @silentworks and myself (& possibly @codeguy?) are comfortable with PHP 5.6 as the minimum version and until someone persuades us otherwise (or we change our minds) Slim 4 will be 5.6 +.\nOf course, we're many months from release, so it's possible (maybe probable?) that this will change. \n. @luispabon However, we get a lot of support issues related to deployment on shared hosting.. Slim 4 is now going to be PHP 7.0+. I don't mind going to PHP 7.1 if someone can demonstrate either \na. some code in Slim 4.x branch that could be measurably better using a feature in PHP 7.1\nb. a dependency of Slim 4.x has a minimum version of PHP 7.1\nRaise an issue in these cases.. That'd be a bc break then\u2026 sorry.. Fixed in version 3.8.1.\nThank you for reporting and I'm sorry for the inconvenience.\n. \ud83d\udc4d I'm surprised we hadn't already done this!. \ud83d\udc4d. > Any guess on why Coverage decreased?\nYou removed a number of lines of code that were covered by the tests, so the percentage of the codebase tested has gone down slightly. . Thanks!. Thanks!. \ud83d\udc4d. it's probably not relative to public. Try a fully qualified directory using __DIR__ . '/../cache/' (or whatever) . __DIR__ is the directory of the file you are in. This is probably not in the root\u2026 . > There is no a variable like the DIR but pointing to the public directly?\nNo. PHP has the concept of current working directory, but unless you specifically set it, you can't be sure where it is.  That's why __DIR__ exists - which is the directory of the current file.. Lock file is ignored by composer as Slim is a dependency to the project. We choose to develop against the latest version of all our dependencies.. I'm not sure that the URL Standard is an actual RFC.\nHowever, I can see the argument that we should percent-encode at least the @ sign if it's in the user or password fields.\nThis URL Standard suggests percent-encoding all these characters:\nU+0020 SPACE, U+0022 (\"), U+0023 (#), U+003C (<), U+003E (>), U+003F (?), U+0060 (`),\nU+007B ({), and U+007D (}), U+002F (/), U+003A (:), U+003B (;), U+003D (=), U+0040 (@),\nU+005B ([), U+005C (\\), U+005D (]), U+005E (^), and U+007C (|)\n\nIf we did this, will we break BC?. This should be fixed, yes @RyanNerd . Actually, see https://github.com/slimphp/Slim/pull/2207 - this is needed for Slim 3 too.. Out of interest, what benefit do you get by using Slim's Container rather than using Pimple directly in your non-Slim project?. Ah!\nWell, tbh, you'd be better off copying Slim's Container into your project directly and modifying it as appropriate. No point in bringing in the rest of Slim's code, unless you're using all that too I suppose.. FWiW, v4 will fix this properly by removing core's reliance on a DI container completely.. v4 will continue to support the DI container, but not need it.. My gut feeling is that link and unlink aren't commonly used enough.\nThoughts, @silentworks, @codeguy ?. Should this be against 3.x ?. @sharifzadesina  if it's changed to rawurlencode, what is then wrong?. @Sam-Burns rebase required.. Needs to be against Slim-Http now. Also, should we be encoding only on output?. Thinning about it, this is probably solvable with middleware.. The only way is to use a global (probably via the container so that you think you're not using a global\u2026). Take out as much code as you can until the problem goes away and then add back in.. ideally it should return a 400. On the contrary, we intentionally try to handle it already in https://github.com/slimphp/Slim/blob/3.x/Slim/Http/Request.php#L214-L223\nWhich version of Slim are you using @jasonetwork?. So why is that stack trace saying that the problem is with line 202 of Request.php?. I'm glad we solved it!. What does your hosting supplier advise?. Closing as reply indicates that poster doesn't want support from this channel.. Travis is failing as the composer requirement cannot be met yet.\n. @codeguy, @silentworks, @geggleto: Travis passes now that Slim-Http 0.2 is released.\nPlease review.. Thanks for doing this. I will review and provide feedback at some point, but may not get to it until next week.. There's a lot here and it's going to take me a while to go through.\nFirst thoughts. \n\n\nPlease get rid of PhpException. This only exists in Slim 3 because we had type hinted the handler to need an Exception which meant we wouldn't use the standard handler. \n    I don't want the additional stack trace because we've wrapped the Error into an Exception just so we can type hint handleException().\n\n\nWhy is displayErrorDetails marked as an optional parameter for the error handler signature?. Currently we render errors and I think that's part of Slim - otherwise, you may as well just use FastRoute directly. What I'm not sure about is whether we should have middleware to do it rather than having it built into dispatch.. I suspect that we're going to do a multi-step error handling refactorying process.\n\n\nThis is a big PR which is why it's taking me a while. It's better than what we have now, but it's where I think we'll end up by 4.0.. I think so.  I like a lot of the concepts in here and would like to explore how to make it middleware.. I think this comment is still relevant: https://github.com/slimphp/Slim/issues/1686#issuecomment-261306557. FWiW, I also think named exceptions are more expressive in the codebase. \nI\u2019m on the fence about shipping exceptions that we don\u2019t need for the dispatcher. . Discussion with @l0gicgate on reworking this:\n\nMove the error handling to middleware that we apply at the outer edge\nie. App just throws either a NotFound exception or a MethodNotAllowed exception\nWrite a new Slim\\Middleware\\ErrorMiddleware which then uses renderers\nRenderers in an appropriate namespace\nLater, we may want to detect that no error middleware has been added to the pipeline and add ours to the outside of the stack in run()\n\nLet's use a new PR for this. Thanks for you work so far and again, I'm really sorry that it's taken me this long.. Add the setting 'addContentLengthHeader' => false to your settings.. By default, Slim sets the Content-Length header to the number of characters in the $response's body. This works fine until you have a third party thing that adds additional data to the body, such as Tracy or New Relic. In these case, the Content-Length value is now too short and so data gets truncated as you have seen.. What's your use-case?. Right, so the problem is that ini_set is disabled on your shared_host. Hmm.. The@ symbol is extremely slow.. I don't think we should change this in Slim 3.. Security fixes or show-stoppers for a new PHP release are the only reasons I can think that we'd accept a 2.x patch.. I don't necessarily disagree. The disconnect that we have a the moment is that a group isn't a thing and it sounds like it is at the moment.. > I created a group with a path of '' (empty string). That's not really a prefix, but in essence is a grouping. I did this to assign scopes around my routes for chadicus/slim-oauth2-middleware\nThis is one of the key use-cases of group.\nClosing this issue as it seems that everyone is happy enough with group as the method name. One side effect of removing the binding is that it will be that much harder to upgrade from 3 to 4. Is the fact that you don't like the closure binding feature of PHP a reason to remove it?\n. I'm happy to pass in $app to the closure / __invoke(), I'm just questioning whether we should remove the binding of $app to  $this for closures. \nI think that smoothing out upgraders from v3 warrants it.\nWe should probably remove any documentation in v4 about the binding though and maybe mark it deprecated for removal in v5?. Note that we could also do this for 3.x to provide a forward migration path.. Any reason we can't do this for Slim 3 too?\n. New features will not be added to Slim 2.x. However, you could create your own PSR-7 to Slim 2 bridge component.. Thanks.. Please rebase.. There's a good chance this needs to be against the 4.x branch. @piotr-cz can you rebase and then we can check that travis passes . Thanks.. What's the default distro?. So probably better to be on trusty globally anyway. Global works for me.. Can you raise the same thing against 4.x too please?. Rebase against latest 3.x & git push --force the branch\u2026. @TKDBB84 is correct in that Slim doesn't add any headers other than Content-Type and Content-Length. I assume therefore that your web server is doing this.. I'm on the fence about this one as I'm not sure it adds enough that it should be part of Slim or whether it should be in user-land.. This is interesting :)\nIf the key doesn't exist then it shouldn't be in the returned array as otherwise getParams() and getParams(['not_there']) will return different results which is inconsistent.\nI disagree with @geggleto on point 2 as I think that getParams('foo', 'bar') isn't as clear that you're selecting a subset from the parameters array.\nFinally, I should note that the user land implementation is a one liner:\nphp\n$some = array_filter($request->getParams(), function ($k) use ($only) { return in_array($k, $only); }, ARRAY_FILTER_USE_KEY);\n. Merged after changing to not provide a default of null for '$only` keys that don't exist in the params list.. Thanks @Grafikart for your work on this.. > second argument passed to 'get' must be a callable, not array.\nAn array is a callable if the first element is a class name and the second element is a static method of that class. See // Type 2`` in the \"Example #1\" code samples on  http://php.net/manual/en/language.types.callable.php. I haven't a clue. Does a simple get to/` work?. Does:\n```php\n<?php\nrequire 'vendor/autoload.php';\n$app = new \\Slim\\App;\n$app->get('/', function (Request $request, Response $response) {\n    $response->getBody()->write(\"Hello World\");\nreturn $response;\n\n});\n$app->run();\n``\nWork?. Ping @geggleto. Renamed toContentLengthMiddlewareas per https://github.com/slimphp/Slim/pull/2288#discussion_r133005546. Rebased to fix conflicts. At the moment Slim 4 is targeting 5.6. If that changes, then we'll update PHPUnit.. > It also looks like you are missing theelseif ($e instanceof SlimException)logic in this PR:\nTheSlimException` is implicitly thrown in the unit tests.\nIn 4.x, there's no SlimException.. @Sam-Burns I added this, but am a little concerned that satooshi/php-coveralls has pulled in guzzle v3. Is this going to cause us issues?. @Sam-Burns Okay. The Composer warning isn't nice though, so lets hope they update.. Slim doesn't get in your way for any caching libraries you want to use. Just use the library as per their docs.. I generally find it easier to put my dependencies in the the Container as it separates out the creation of an object from where it is used.. I'm glass you sorted it. I wonder why it's getting the wrong length. . The Coveralls stats are related to the whole codebase, so changing the amount of code in it affects the percentage covered.\nDo your tests cover every path through the code you've changed? If so, that's good enough.. Thanks.. Can you create a one-file Slim application that shows the problem?. I'm on holiday and my laptop has failed, so I will have to wait until I get home next week. . > @juanpagfe please fix the link in your comment \ud83d\ude2c\nFixed.. Thanks.. What does php -v output?. Thanks.. 4.x doesn't do output buffering in Router; it's done in the OutputBuffering middleware. This is how PSR-7 works.\nUse the request object in the action - the route is in an attribute.. The way to do it is to set the setting that determines the route early to true. Then have a piece of middleware that sets the matched route into a property in your extension, which it retreives via the DIC (though I suppose it could be a static propety).. Can you create a one php file example app with two routes in it where one works and the other doesn't please?. I'm glad you sorted it. I think this is a BC break.. Needs an approach that doesn't break BC. \nWe also need to consider what to do for 4.x. Should be fixed as it's a Mock.\nFortunately, Stream::write() gets it right.. Where is the Cache-Control: no-store, no-cache, must-revalidate coming from?. I've been doing some investigation and it seems that you have the session.cache_limiter setting in php.ini set to nocache - presumably it's being emitted because you have a session_start() somewhere.\n. I think we should be handling this though. Will try and raise a PR.. @Finesse To state the obvious. If you don't need sessions, then don't start one in your app\u2026 \nIt does seem that PHP does have views on what the cache header should be if you are using sessions though. However, I think you should be able to override.. Thanks.. We could also set it in the Skeleton, so that it's easy to remove?. Replaced with #2396. This can be implemented by extending Router and providing using $routeParser. I don't think it's needed for code Slim. Reopen if you think differently.. This is an interesting catch. $tip is fine with me.. Any reason that this can't be applied to 3.x ?\n. Given this comment at the top of MiddlwareAwareTrait:\n* This is an internal class that enables concentric middleware layers. This\n * class is an implementation detail and is used only inside of the Slim\n * application; it is not visible to\u2014and should not be used by\u2014end users.\nI'm inclined to put it into 3.x too. Thoughts, @geggleto, @silentworks ?. Cherry picked to 3.x here: https://github.com/slimphp/Slim/commit/a08b779d2aa97621fb676409d76f0b414f7f616c. Thanks @bnf . @geggleto Test is here\nThis is just a rename of the method to make it clearer what it does.. Rebased. Renamed doRouting() to performRouting()\n. Sorry, but this becomes moot with https://github.com/slimphp/Slim/pull/2290 \u2026. Ping @mnapoli, @geekish, @moufmouf for thoughts as you showed interest in the original issue about this.\nKey thing is that Slim no longer has any concept of default services in the container. i.e. the container is just for the user's code.. > > and the rest of the objects in DefaultServicesProvider were already defined within App.\n\nI'm not sure I understand this part: can \"core\" services of Slim still be overridden? Is Slim doing something like $router = $container->has('router') ? $container->get('router') : $this->buildDefaultRouter() ? (this is pseudo-code)\n\nThe App has methods like: set/getRouter(), set/getNotFoundHandler() etc.. > OK so a question that's maybe a bit out of scope here but just to get it right: when using a container it might make sense to let the container create the \"Application\" class (the container would call setRouter(), etc. with the correct dependencies)?\n@mnapoli Yes. If you need to customise the App's dependencies, then letting the app, then letting the container create the App object would probably make sense.. Rebased to tip of 4.x. > Slim\\Collection and Slim\\Interfaces\\CollectionInterface seem to be unused with this change applied. May those be removed as well?\nYes, you're right @bnf. I've removed them. \nThanks!. > How can we now use dependency injection for tools like Monolog?\nSlim 4 accepts provision of your own PSR-11 compatible container and will use it to resolve actions, etc. Hence you now have more flexibility and can bring your choice of container to your Slim project.\n. Technically, you'd have to pass your container into your action's constructor to have a $this->container available, but that's the general idea.\nDocs for v4 are barely started.. Thanks.. Thanks!. Use of undefined constant is a PHP error: See here: https://encrypted.google.com/search?hl=en&q=Use%20of%20undefined%20constant. Seems valid to me.. Depends what you're testing. If I'm unit testing an action, I don't want to test the middleware at the same time. If I'm doing integration/acceptance tests, then I would probably use $app->process().\nHowever, if callMiddlewareStack works for you, then that's the right approach.. Feel free to submit a cookbook article on your testing approach to the Slim-Website repository.. Closing as it appears solved and there's been no response.. Benchmark it and see what improvement it makes?\nIf nothing happens after respond(), I suspect that it won't make any difference. If you do stuff after respond(), then you probably should consider using closing the session and finishing the request.. Agreed.. Container is removed completely by https://github.com/slimphp/Slim/pull/2290. Can you create a minimal example code that shows the problem?. Also merged to 4.x. Thanks @kelunik . I'm not against it. I would use STATUS_XYZ rather than HTTP_XYZ personally, though.. Duplicate of https://github.com/slimphp/Slim/pull/2302. As @ivandokov says, there is no skeleton application for the 4.x branch.. I would expect getError() to be non-zero.. The problem is that the new PSR-15 standard isn't agreed yet and the signature has changed at least once between 0.4 and 0.5. You can see this in Expressive 2 where they have to use an adapter to allow for people to target either 0.4 or 0.5\u2026\nI'm loathe to support a standard in flux as there's still ongoing discussions about it.\nPersonally I would go with Slim 3 and migrate when Slim 4 comes out.  The key thing is to ensure that you never use the request or response objects from the container. \nI don't think migrating the middleware will be that hard. To make both middleware and actions easier to migrate, if you a returning your own response rather than the one from $next, do not use the passed in$response; instead create your own and return it.. > Why not use REQUEST_SCHEME which is either http or https?\nNo reason that it also couldn't be checked. I hadn't heard of it, so didn't mention it.. Thank you @juanpagfe  :). @juanpagfe Fancy creating a similar PR for https://github.com/slimphp/Slim-Http ?. @mahagr Which web server doesn\u2019t set HTTPS when the connection is over TLS?. The main advantage I've seen has been clarity of expectations. Anecdotally, on other projects, we've had devs say to us privately that they only considered submitting a PR because the CoC gave them the confidence that they wouldn't be attacked in the comments.. Discussion on Slack suggests that basing on https://www.ruby-lang.org/en/conduct/ / https://github.com/laravel/framework/blob/5.5/CODE_OF_CONDUCT.md may work for our community.\ni.e. something like:\n\nThis document provides community guidelines for a safe, respectful, productive, and collaborative place for any person who is willing to contribute to the Slim community. It applies to all \u201ccollaborative space\u201d, which is defined as community communications channels (such as mailing lists, submitted patches, commit comments, etc.). Any violations of the code of conduct may be reported by contacting one or more of the project maintainers.\n\nParticipants will be tolerant of opposing views.\nParticipants must ensure that their language and actions are free of personal attacks and disparaging personal remarks.\nWhen interpreting the words and actions of others, participants should always assume good intentions.\nBehaviour which can be reasonably considered harassment will not be tolerated.. Try looking in your PHP error log. Alternatively, Enabled the displayErrorDetails setting.. It's wherever you've set it up in your php.ini.  Do you have displayErrorDetails set? There's an example here:per https://www.slimframework.com/docs/objects/application.html#application-configuration. Updated wording of last point. Is that better @silentworks, @geggleto, @codeguy?. @mahagr Now that is a very good question :)\n\n\nI think that they should all have /u as I think unicode is allowed in URIs. (e.g http://\u2603.net) . Yes - I would appreciate a PR :). Re hostname: is there any reason to filter it?. Why did you close?. Thanks for noticing @ares333 & thanks @vlakoff for checking the regex. Seems that we're all good.. Thanks.. Thanks.. Good catch. Can you provide a test too?. #2337 addresses this problem.. Can you provide the code that caused the problem?. @travisdetert Can you explain how error handling is not disabled after removing the error handler?. @travisdetert Can you provide an example app in a single index.php that shows the problem?. I'm confused as Slim's middleware works exactly like you want.\ni.e. when Middleware2 returns a response, that response is returned through the previous middleware (Middleware3 in this case).\nConsider this code:\n```php\n$app->add(function ($request, $response, $next) {\n    // middleware 1\n    $response->write('Middleware 1, before $next()');\n    $response = $next($request, $response);\n    $response->write('Middleware 1, after $next()');\n    return $response;\n});\n$app->add(function ($request, $response, $next) {\n    // middleware 2\n    $response->write('Middleware 2, before $next()');\n    $response = $next($request, $response);\n    $response->write('Middleware 2, after $next()');\n    return $response;\n});\n$app->add(function ($request, $response, $next) {\n    // middleware 3\n    $response->write('Middleware 3, before $next()');\n    $response = $next($request, $response);\n    $response->write('Middleware 3, after $next()');\n    return $response;\n});\n$app->get(\"/\", function ($request, $response, $args) {\n    $response->write(\"Hello World.\");\n    return $response;\n});\n```\nThe output is:\n```\nMiddleware 3, before $next()\nMiddleware 2, before $next()\nMiddleware 1, before $next()\nHello World.\nMiddleware 1, after $next()\nMiddleware 2, after $next()\nMiddleware 3, after $next()\n```\nNow. change middleware2 so that it doesn't call next():\nphp\n$app->add(function ($request, $response, $next) {\n    // middleware 2\n    $response->write('Middleware 2 short circuits<br>');\n    return $response;\n});\nThe output is now:\nMiddleware 3, before $next()\nMiddleware 2 short circuits\nMiddleware 3, after $next()\nAs you can see, Middleware 3 has still run and can do its logging as you would expect.. Travis test fails. . I'm wondering if anyone depends on output buffering being at route level.. Do we break anything if we remove a parameter to a constructor?. Remove the brackets:\n$app->get('/{type:CARS_FOREIGN|CARS_NATIVE|TRUCKS_NATIVE|TRUCKS_FOREIGN|BUS|SPECIAL_TECH_NATIVE|SPECIAL_TECH_FOREIGN|AGRICULTURAL_MACHINERY|TRACTOR|ENGINE|MOTORCYCLE}', function (Request $request, Response $response, array $args) {\n    return $this->renderer->render($response, 'example.php', $args);\n});\nFurther information in defining routes:\n\nCustom patterns for route placeholders cannot use capturing groups. For example {lang:(en|de)} is not a valid placeholder, because () is a capturing group. Instead you can use either {lang:en|de} or {lang:(?:en|de)}.. It's a bug in your code\n\nFor a browser to redirect, you need to send a 3xx status code. You're setting a 401.\nIn Slim 3.8.1, there's a bug where setting a \"Location\" header meant that the status code you've set with withStatus() was ignored. This has been fixed, which is your problem.\nChange your code to:\nreturn $response\n                ->withStatus(302)\n                ->withHeader(\n                    'Location',\n                    $this->defaultPath . '?path=' . urlencode($path)\n                );\nThis should work in both Slim 3.8.1 and 3.9.0. @vlakoff: Doh! Somehow I missed it :(. Reverted in 3.9.2. Hi, for Slim 3, we use the documentation website for things like this. \nCreate a cookbook entry and PR it to the Slim-Website repository.. Change your code to return $response->withHeader('Location', '/login')->withStatus(302) or return $response->withRedirect('/login');\nWe'll improve this for 3.9.1.. > May I suggest using === for comparison:\nDone.. #2332 is now merged to 3.x. Thanks.. Thanks! Good catch.. Web browsers will not redirect on a 404 status code as that's against the spec. You need a 302 status code to make a browser redirect.\nreturn $response->withRedirect($this->router->pathFor('home'));\nor\nreturn $response->withStatus(302)->withRedirect($this->router->pathFor('home'));. Thanks.\nSlim 4 is currently a PHP 5.6 project, though that's likely to change at some point.. Thanks. Do we need this for Slim 4.x too?. Browsers only automatically follow the Location header if you set the status to a 3xx code. You\u2019re setting 404.\nIn 3.8.1 and below, there was a bug where the status code you set was not being honoured. . Thanks @mnapoli . Thanks @carusogabriel . > I suggest set upper compatible version of php less than 7.1 for branch 2.x. Because this issue cannot be solved without breaking backward compatibility or the solution will be very complex.\nUsing cookie encryption is optional in Slim 2 and if you don't use this functionality, Slim 2 works perfectly find in PHP 7.1.. > Any updates on this?\nif you create a backwards compatible PR that solves this problem, I'm prepared to entertain it.. Install the mcrypt extension from PECL or look at mcrypt_compat.. Adding \n\"provide\": { \"ext-mcrypt\": \"*\" }\nto composer.json doesn't install the extension. You need to install it via pecl or whatever system your distro uses if you're using a built-in PHP.. Also, It's a deprecation warning. If you are using PHP 7.1, then in my opinion, you should disable E_DEPRECATED in production, so that they don't clog up your log files.\nYou should then look to replace Slim 2's cookie encryption with your own solution as middleware.. Silence operator is the wrong solution here.\nWe should probably put an end of life note on Slim 2.x's README too.. Please provide the output of curl -I http://yourserver.com/path/to/\n. That makes no sense as the status line is wrong and you're missing a header name. \nHow about curl -v http://yourserver.com/path/to/ ? Also show me the curl command itself.. I would have expected that redirection to work. You don't need a Content-Type header for a 302, but you do need a Location.. You\u2019re welcome. . Which version of Slim 3 are you using?. Can you create a small working project that shows the problem please?. As I recall, In PHP, the way that multiple parameters of the same name are expected to be handled is like this: GET /api/users?id[]=1&id[]=2\nWhat do other PSR-7 libraries do with GET /api/users?id=1&id=2 as we should probably try and match in Slim-Http?. I think that the expected result is for the second id to overwrite the first.\nCreate a PHP script containing:\nphp\n<?php\necho \"<pre>\";\nvar_dump($_GET);\nRun it using php  -S 0.0.0.0:8888 test.php and then navigate to http://localhost:8888/?id=1&id=2 and you'll see:\narray (size=1)\n  'id' => string '2' (length=1)\nDoing anything different would be confusing.\n. I've been thinking about this a bit. While I appreciate that it's easier to keep the internals the same as Slim 3, I'd like to explore if we can make PSR-15 the default internally and \"wrap\" the current signatures. Going forward, this makes more sense to me as we probably won't support the current signatures in Slim 5.\nThoughts?. > Closing this as we are moving forward with #2555. Thank you for your contribution @bnf\nTo this point, we only need one PR to get PSR-15 support into Slim 4. \nHowever, the BC problems that @bnf highlights (and @l0gicgate also highlighted in Slack at some point in the past to me) do need to be explicitly discussed I think.\nMy initial reaction as @l0gicgate noted is that passing the response down the chain is bad, so my natural reaction is that I don't mind breaking it in Slim 4. However, is that the right call? I could definitely be wrong.\n. Please use http://discourse.slimframework.com/. This may be related to https://github.com/slimphp/Slim/pull/2493 ?. Closing as there's been no movement on this one and I'm unclear what is being asked for.\nPlease create a new issue with detailed information if necessary.. if you're getting a 404 error, then process() is failing to route to the URI.\nConsider tracing through and finding out why.. Do we correctly ditch the body when it's a HEAD? . Todo:\n\nmake sure that the user can detect a HEAD request inside the route callable that's attached to a GET request\nEnsure that we don't send the request body if it's a HEAD request.. Addressed in #2547 . Re-opening - 3.x needs checking.. This looks great. Would you mind raising a PR in https://github.com/slimphp/Slim-Website to document it?\n\nAlso, Slim 4.x will use https://github.com/slimphp/Slim-Http, so could you port this PR to that respository too, so we have it for the future?. If you rebase against 3.x and then force push to your branch on your clone, then Travis should pass now.. > 1. Use strtolower or ucfirst (or something else?) on the input? (the used case doesn't actually matter for setting the cookie flags)\nUse strtolower() or stripos().\n\n\nWant a specific test for that case?\n\n\nYes.. @sg3s are you likely to be able to work on this?. Thanks @sg3s! Fancy putting the same patch into https://github.com/slimphp/Slim-Http ?\n. > Do you mean that is it Okay for Slim to initialize just every service in container for every single request? How does slim work with professional apps?\n\nI have been working in Python Flask, which is also a microservice framework, and it does provide static persistence.\n\nPHP doesn't work like Python. At the end of every request, we tear everything down and start again for the next request. This means that there's no state between requests. Given the number of PHP applications in the world, you can assume that state between requests is not a requirement for \"professional apps\". This isn't Slim related; it's how PHP works.\nIn this case, I would download the JSON and cache it to a local file or a fast key value storage like Redis or memcache. You there's plenty of caching libraries for PHP.. Needs rebasing and removal of the use of \\Exception. > @akrabat btw we may add a cs fixer and automate all those processes.\nGood idea.. Closing as requested changes haven't been completed and we may go a different route.. Added an issue to Slim-Website for this.. /*\n * The routing middleware should always be added first\n * before the error handling middleware is added\n */\nWhy? I want the error handling middleware to be the outermost middleware as there will be other middleware before routing that I want the error handler to pick up.. It works for me. I like @RyanNerd's pluralisation too.. I thought this was handled by https://github.com/slimphp/Slim-Http/blob/master/src/Headers.php#L54.\nMaybe not though.. This is a Slim-Http issue, so I've raised https://github.com/slimphp/Slim-Http/issues/61 for it.. Yes. I test bits and bobs with a simple Slim app that has this composer.json:\n$ cat slim4x-testbed/composer.json\n{\n    \"repositories\": [\n        {\n            \"type\": \"path\",\n            \"url\": \"../Slim4x\",\n            \"options\": {\n                \"symlink\": true\n            }\n        }\n    ],\n    \"require\": {\n        \"slim/slim\": \"4.x@dev\"\n    }\n}\nWhere ../Slim4x is a checkout of Slim on the 4.x branch (most of the time, sometimes it's on a PR branch\u2026). As @l0gicgate has noted, Slim 4 doesn't actually care which PSR-11 container you use. We'll probably ship the Skeleton with a default one though.. I wonder if we should change to FIFO for Slim 4?. Thanks.. FWiW, I am not a fan of rebasing to clean history. Rebasing to remove a commit that's a typo fix is fine, but I personally prefer to see the route that was taken to get to where we are now.. The change to output buffering came about because of https://github.com/slimphp/Slim/issues/2208 which was fixed with https://github.com/slimphp/Slim/pull/2270. Your PR breaks this fix.\nAs your PDF library is setting headers and echo'ing directly, you should probably just exit after calling it.\nAnother possible solution would be to modify Route::__invoke() to use headers_list()to add the headers set by the library to the response if $newResponse is a string.\nCan you open an issue with an example showing how to reproduce the problem?. > This issue is a nice example of how the router should be implemented as middleware in the future. Then you would have the possibility to add some kind of \"InternationalRouteMiddleware\" one step ahead of the core router into the stack. As a result, the core framework could be kept \"slim\" and the custom routing middleware could be placed where and when necessary.\nSlim 4: has RoutingMiddleware: https://github.com/slimphp/Slim/blob/4.x/Slim/Middleware/RoutingMiddleware.php. At first glance, this need to be opt-in. Ideally, it would be a piece of middleware that runs over all the added patterns and converts them. I'm not sure that's possible with the current access in the router though, but @l0gicgate may know.. > Sorry, but I think, you are wrong.\nFair points.\nHowever, how do we do it that it's not a performance hit for people using ASCII only routes?. > I think, it's worth to discuss this kind of solution (maybe, it even worth to close this pull request and switch it to Issues branch?).\nPlease yes. I'd love to know if there's any BC issues with the rawurldecode proposal.. I'm confident that Slim won't provide more than one Router. Any alternatives will be provided by third parties.. It's reasonable to assume that you can't arbitrarily change routers mid-build. We can take it as read that we'll use a routing component that's already written.. Thanks @imjoehaines . We won't provide a choice unless Slim 4 goes to FIFO and we want to provide a migration path.. The Content-Type header indicates the format of the data you are sending, not the format of the data that you expect to receive as that's the purview of the Accept header.\nIf you set your Accept header to application/json then you'll find that Slim sends you errors in JSON format.\n. Given this Slim application:\n```php\n<?php\nrequire DIR . '/vendor/autoload.php';\n$config = [\n    'settings' => [\n        'displayErrorDetails' => true, // set to false in production\n        'addContentLengthHeader' => false, // Allow the web server to send the content-length header\n    ],\n];\n$app = new \\Slim\\App($config);\n$app->get(\"/\", function ($request, $response, $args) {\nthrow new RuntimeException('error');\n\nreturn $response;\n\n});\n// Run!\n$app->run();\n```\nThen this curl call returns JSON:\n```\n$ curl -i -H \"Accept: application/json\" http://localhost:8888/\nHTTP/1.1 500 Internal Server Error\nHost: localhost:8888\nDate: Mon, 09 Apr 2018 12:09:51 +0000\nConnection: close\nX-Powered-By: PHP/7.1.12\nContent-type: application/json\n{\n    \"message\": \"Slim Application Error\",\n    \"exception\": [\n        {\n            \"type\": \"RuntimeException\",\n            \"code\": 0,\n            \"message\": \"error\",\n            \"file\": \"\\/Users\\/rob\\/tmp\\/test-slim\\/public\\/index.php\",\n            \"line\": 30,\n            \"trace\": [\n                \"#0 [internal function]: Closure->{closure}(Object(Slim\\Http\\Request), Object(Slim\\Http\\Response), Array)\",\n                \"#1 \\/Users\\/rob\\/tmp\\/test-slim\\/vendor\\/slim\\/slim\\/Slim\\/Handlers\\/Strategies\\/RequestResponse.php(41): call_user_func(Object(Closure), Object(Slim\\Http\\Request), Object(Slim\\Http\\Response), Array)\",\n                \"#2 \\/Users\\/rob\\/tmp\\/test-slim\\/vendor\\/slim\\/slim\\/Slim\\/Route.php(335): Slim\\Handlers\\Strategies\\RequestResponse->__invoke(Object(Closure), Object(Slim\\Http\\Request), Object(Slim\\Http\\Response), Array)\",\n                \"#3 \\/Users\\/rob\\/tmp\\/test-slim\\/vendor\\/slim\\/slim\\/Slim\\/MiddlewareAwareTrait.php(117): Slim\\Route->__invoke(Object(Slim\\Http\\Request), Object(Slim\\Http\\Response))\",\n                \"#4 \\/Users\\/rob\\/tmp\\/test-slim\\/vendor\\/slim\\/slim\\/Slim\\/Route.php(313): Slim\\Route->callMiddlewareStack(Object(Slim\\Http\\Request), Object(Slim\\Http\\Response))\",\n                \"#5 \\/Users\\/rob\\/tmp\\/test-slim\\/vendor\\/slim\\/slim\\/Slim\\/App.php(495): Slim\\Route->run(Object(Slim\\Http\\Request), Object(Slim\\Http\\Response))\",\n                \"#6 \\/Users\\/rob\\/tmp\\/test-slim\\/vendor\\/slim\\/slim\\/Slim\\/MiddlewareAwareTrait.php(117): Slim\\App->__invoke(Object(Slim\\Http\\Request), Object(Slim\\Http\\Response))\",\n                \"#7 \\/Users\\/rob\\/tmp\\/test-slim\\/vendor\\/slim\\/slim\\/Slim\\/App.php(388): Slim\\App->callMiddlewareStack(Object(Slim\\Http\\Request), Object(Slim\\Http\\Response))\",\n                \"#8 \\/Users\\/rob\\/tmp\\/test-slim\\/vendor\\/slim\\/slim\\/Slim\\/App.php(296): Slim\\App->process(Object(Slim\\Http\\Request), Object(Slim\\Http\\Response))\",\n                \"#9 \\/Users\\/rob\\/tmp\\/test-slim\\/public\\/index.php(36): Slim\\App->run()\",\n                \"#10 {main}\"\n            ]\n        }\n    ]\n}\n```\ni.e. Slim is working as expected. It sends JSON if your Accept header is application/json. @odan I'm glad you found it! . > (I'm blanket overwriting whatever status code the ResponseInterface has because I wasn't sure the flexibility in e.g. Slim\\Http\\Response::withRedirect is necessary at this level, but maybe it's worth keeping the behavior the same for consistency?)\nThis is correct. You should only change the response object on the way back anyway.. Can you also do this against the 3.x branch?. Thanks @ellotheth !. I think you can parse the output of getBody() yourself.. > StatusCodes sounds very (too) generic.\nWould it be possible to give it a more specific (and singular) name like: HttpStatusCode ?\nWhile I'm not totally convinced on the merit of this yet, the class name is fine as it's in the Slim\\Http namespace.. FWiW, We definitely keep 418.. This example proves my point:\npublic function __invoke(Request $request, Response $response) \n{\n    return $response->withStatus(StatusCode::NOT_FOUND);\n}\nWe don't have HttpRequest, HttpResponse, HttpUri, HttpHeaders as the other class names in Slim\\Http.. > Another question: If at all, should this class not be part of the slimphp/Slim-Http package?\nIf we take this for Slim 3.x, then we'll need it in Slim-Http too for Slim 4.x.. Why is process() called more than once for a given route?. This test fails:\n```php\n    public function testInvokeSequentialProccessAfterAddingAnotherRouteArgument()\n    {\n        $app = new App();\n        $route = $app->get('/foo[/{bar}]', function ($req, $res, $args) {\n            return $res->write(count($args));\n        })->setArgument('baz', 'quux');\n    // Prepare request and response objects\n    $env = Environment::mock([\n        'SCRIPT_NAME' => '/index.php',\n        'REQUEST_URI' => '/foo/bar',\n        'REQUEST_METHOD' => 'GET',\n    ]);\n    $uri = Uri::createFromEnvironment($env);\n    $headers = Headers::createFromEnvironment($env);\n    $cookies = [];\n    $serverParams = $env->all();\n    $body = new RequestBody();\n    $req = new Request('GET', $uri, $headers, $cookies, $serverParams, $body);\n    $res = new Response();\n\n    // Invoke process with optional arg\n    $resOut = $app->process($req, $res);\n\n    $this->assertInstanceOf('\\Psr\\Http\\Message\\ResponseInterface', $resOut);\n    $this->assertEquals('2', (string)$resOut->getBody());\n\n    // Prepare request and response objects\n    $env = Environment::mock([\n        'SCRIPT_NAME' => '/index.php',\n        'REQUEST_URI' => '/foo/bar',\n        'REQUEST_METHOD' => 'GET',\n    ]);\n    $uri = Uri::createFromEnvironment($env);\n    $headers = Headers::createFromEnvironment($env);\n    $cookies = [];\n    $serverParams = $env->all();\n    $body = new RequestBody();\n    $req = new Request('GET', $uri, $headers, $cookies, $serverParams, $body);\n    $res = new Response();\n\n    // add another argument\n    $route->setArgument('one', '1');\n\n    // Invoke process with optional arg\n    $resOut2 = $app->process($req, $res);\n\n    $this->assertInstanceOf('\\Psr\\Http\\Message\\ResponseInterface', $resOut2);\n    $this->assertEquals('3', (string)$resOut2->getBody());\n}\n\n```\nArguably, it's unlikely to happen, but this test works with 3.x today.. > Couldn't think another way to solve it. Any better solution?\nSeems reasonable to me. I've renamed the variable to make it a bit clearer though.. @mathmarques Good point - this needs to go to 4.x too.\nA proportion of them have been ported forward, but it'd be good to go through and check.. Thanks.\nAre you able to forward-port to Slim-Http.. Slim 4 doesn\u2019t come with a container anymore, so you need to provide your own PSR-11 compatible one.. Thanks.. @ncou That's not what this patch does. It will allow multiple Content-Security-Policy headers if you add them to the Request object. \nThis patch replaces headers set by header() if the same header name is used in a header in the Request object.\n. @ncou pretty much, yes.. Personally, I prefer to inject into each class & something like PHP-DI makes it much easier. \nHowever, you could probably use Laravel's DB facade directly if it's own repo. Otherwise, just create a DB class yourself that has the relevant static method on it.. Can you explain why you  are proposing this please?. This question is better asked on our Slack and/or our discourse forum.. This feels like a bug and I'm surprised no one has ever noticed this before. I suppose it's because most people don't use purely numeric key names.\nPersonally, I think we should fix this.. @yolcuiskender Are you likely to get back to this?. Thanks!. Thanks.\nPlease forward port to Slim\\Http. Please provide a simple bootstrap.php that shows the issue.. I use php -S 0.0.0.0:8888 -t public/ with Slim 3 apps with no problem.\nI don't mind changing Uri so that php -S localhost:8080 bootstrap.php also works as long as there's no BC breaks.. Given that getParsedBody() returns an associative array, what would be returned for a JSON body of \"string\" ?. Fortunately, you can always json_decode($request->getBody()) yourself.. > It's not better to throw an exception rather than fail silently here ? In that way it's can be catch from errorHandler to transform it into 400 bad request instead. And we need to explicitly catch the error to handle it from controller rather than the opposite logic (checking each time if it's not null)\nThe spec for getParsedBody() doesn't throw an Exception.. Yeah, that handles the situation when someone registers a non-conforming media parser to the Request object. The built-in parsers will never trigger that exception.. Happy to look at that in Slim-Http. \nThe only potential problem I can see is that we may end up doing parsing work that isn't needed if we pre-parse and then the user doesn't call getParsedBody() which would slow down the request.\n. Thanks.. What problem were you having that required this patch?. Can you explain more about the use-case for this change please?. I don't think that there's a wide-enough use-case for this. If I'm wrong, it'll come up again.. I don't think this change works when phpunit is not in the path. What is the use-case that this change is for?. Do you have an actual app in production that needs this change? I'm struggling to imagine a text/plain website and haven't seen one in the wild.. I think we'll wait for someone to have a production use-case for this one.. This question is better asked on our Slack and/or our discourse forum.. Thanks.\nIs this needed on Slim-Http too?. You can replace our container with any other PSR-11 container and Slim will work. Hence we can't type hint getContainer() to return our Container as that's not true - it could be a PHP-DI container for instance.\nThe only thing we know for sure is that it implements ContainerInterface.. Use proxy-detection-middleware and Slim 3.11.0 and you should be good.\nSee #2487 and #2486 for details.. I'm pretty sure you can set $trustedProxies to an empty array and then the middleware will alway inspect the X-Forwarded-For header.. This question is better asked on our Slack and/or our discourse forum.. I can't find a composer coding standard with a quick google. Can you provide a link please?. I don't see that that way composer writes its lock file to mean that it's a composer.json coding standard.. You could create your own Response object that your action returns. This Response object could extend Slim's and add custom properties for the data you want to send to the middleware.. We are no longer updating Slim 2.. I like the idea of a specialised StreamInterface.\nImplementing this will also address Server Sent Events support (#1959).. This is interesting. PSR-15 calls them handlers and as we're going to support PSR-15 in Slim 4, maybe we should use their terminology.\nThoughts @silentworks, @geggleto & everyone else?. Can you add tests please.. The actual PHP 5.5 build error is [Composer\\Downloader\\TransportException] Peer fingerprint did not match - we need to solve this.\nGetting it here https://travis-ci.org/slimphp/Slim/jobs/414476047. > People usually get around this type of thing by having the proxy/tunnel add a header to the request containing the port, then on the slim side you can retrieve that port number from the header. I don't have an example for Ngrok because I am not familiar with it.\nproxy-detection-middleware does the detection in the Slim side for proxy headers. However, it doesn't fix the problem that Slim sets the port incorrectly when there's a Host header which is fixed by #2487.. Fixed with #2487 in Slim 3.11.0. > In a case that someone should have an application (intranet apps) running on a different port, I don't think this change would work. e.g. http://myintranet.net:3200\nActually, I think that this scenario would continue to work as the HTTP_HOST value includes the port number when it's non-standard.\ni.e. when I run php -S 0.0.0.0:8888 -t public/,  then $_SERVER['HTTP_HOST'] is set to localhost:8888 as that's the URL that I navigate to to get to the website. We have this code which then kicks in to extract the port number.\n. I think it's reasonable to default to port 80 if HTTP_HOST is set. We need to consider SSL though as that needs the port to be set to 443, so may be we need to check SERVER_PORT for 443 explicitly before setting the default to 80?. I've looked it up. According to the spec, if the  Host header exists and doesn't have a port, then it is the default for the protocol. \ni.e. if the port is missing from Host header, we should check getScheme() and set 443 or 80 as appropriate.. Yes, you\u2019d still need rka-scheme-and-host-middleware (now renamed to proxy-detection-middleware) to pick up the scheme. That middleware should probably handle the port better too.\nFurther thinking about the Uri part, it might be enough to set $port to null when the host header exists.\n. Thanks.. Essentially this is a duplicate of #2052.. Please explain what the problem this code solves.. Route arguments are used in URIs which are strings. If you use a boolean, you are implicitly converting it to \"0\" or \"1\" and that should really be an explicit choice. \n\nOn 20 Aug 2018, at 05:40, Petr Bugy\u00edk notifications@github.com wrote:\nHello,\nis there any reason for accept only strings in second parameter $value in RouteInterface::setArgument().\nI'm using boolean and I think it's ok, but it isn't OK for PHPStan :)\nThanks\nPeter\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. There's a potential problem here in that this is not backwards compatible.. Thanks @l0gicgate . Travis build result appears to be missing. It's here: https://travis-ci.org/slimphp/Slim/builds/426856659. As @RyanNerd says, register your own media type parser for application/json into the request object in an early middleware and you should be fine.. Thanks.. However, $app->map('foo', FooHandler::class') has to match to the HTTP method foo, not FOO.. @JeanPaiva Sure.. Fixed by #2507.. Thanks all. Decision made! Let's not do this.. Given that we have phpcs/phpcbf installed, I wonder if we should look at doctrine-coding-standards?\n\nhttps://www.doctrine-project.org/projects/doctrine-coding-standard/en/latest/reference/index.html#introduction\nThis would apply to the 4.x branch, btw.. I also dislike the loss of suffixes and lined up = and => operator. I don't mind comments being complete sentences, but really don't care enough to enforce it. . I think this is too specific for the general case. However, I wouldn't mind a cookbook entry in the docs about running a Slim application in Docker.. Is it worth doing this in Slim-Psr7 for use with Slim 4?. Looks good to me. We need a docs PR for it on Slim-Website.. Thanks!. Rebased. Thank you.. Thanks for this. I think it's too specific to be in Slim itself, but I'd love a cook book entry on the Slim-Website docs for this.. This essentially means we should support running Slim in a subdirectory.\ni.e. Slim should work for a URL like www.example.com/myapp/hello  where the route in Slim is $app->get('/hello', HelloAction::class');\nI would like this to be PSR-7 implementation independent.\n. > @akrabat better documentation perhaps? This cannot be fixed at the Slim level from my understanding.\nI'm more than happy to have a definitive documentation page on how to run Slim in a sub-directory.. I think this becomes a Slim-Psr7 item if we want to do it in 4.x. Opened issue https://github.com/slimphp/Slim-Psr7/issues/24 to track on Slim-Psr7.. I'm mildly confused why you think someone who is involved with a completely different project should make such a statement rather than one of the leadership of this project :). Do we need a --prefer-lowest for 7.1 and 7.2?. Hi,\nThis is a limitation of web browsers. Slim is doing the right thing and setting the status code to 500 and a Location header to /somepage. However, browsers do not automatically redirect unless these status code is in 301 or 302.\nRegards,\nRob. You picked a moment when I happened to be maintaining the issues list :)\n\nOn 5 Oct 2018, at 07:30, alffonsse notifications@github.com wrote:\nWow that was a quick response !\nThank you for the explanation \ud83d\ude03\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Are you able to rebase?. Thank you.. This question is better asked on our Slack and/or our discourse forum.\n\nIf you can create a single file index.php complete Slim app that shows the problem, then someone should be able to help you.. PHPstan support has now landed. Thanks for looking at this though.. PHPStan support has landed via a different PR. Thanks for helping Slim though!. This question is better asked on our Slack and/or our discourse forum.\nYou would need to update the Uri object too as that is created from the original $_SERVER data.. You can't do it for arbitrary URIs, but you can do it for registered routes:\nGiven:\n$app->get('/hello/{name}', MyAction::class)->setName('hello');\nYou can do:\n$router = $app->getContainer->get('router');\n$uri = $router->pathFor('hello', ['name' => 'Rob']);\nand $url will be /hello/Rob\n. We'd love a PR against https://github.com/slimphp/Slim-Website. Thank you.. @odan I think you may mean Slim-Psr7?\nIf someone gets that into shape so that it passes the PSR-7 tests, the there's no reason why it can't be included. As it it, it's not as good as the alternatives.\nSlim-Http is a set of decorators and I think we'll encourage their use with Slim4.. ~I'm not convinced about removing respond().~\nNm. It's moved to ResponseEmitter.. While, I very much like the separation created by ResponseEmitter, I would like it used by default in run(). If the user doesn't want to use our emitter, then they should use handle().. It would be convenient if CallableResolver was aware of the ResponseFactory, so that it could pass it into the constructor of the classes it creates as the second parameter. This would make life much easier for creating actions and middleware that return Response objects without using a container.\n. The 4.x branch is very much in flux at the moment! Slim-Http is now a set of decorators over a separate PSR-7 implementation. PR #2529 covers the integration of this into Slim 4.. 1. See PR #2529 for where we're going. We're in flux at the moment on this branch.\n\nIt really doesn't matter and is up to you. There is no \"right\" here. Personally, I'd use Nyholm's PSR-7 implementation for my Slim app as I like it and then use Guzzle as an HTTP client within my actions.\n. PHP 7.3 in Travis landed as part of another PR.. When you call withJson() you get a new Response object back. The original is not touched.\n\nHence you need to change:\nphp\n$response->withJson($result);\nto:\nphp\n$response = $response->withJson($result);\nand all will work as you expect.. This is only used by the error handling. It's to ensure that Slim sends back JSON when the client's Accept header indicates that it's expecting JSON.\n\nOn 3 Nov 2018, at 19:20, Filip \u0160 notifications@github.com wrote:\nWhy are +json and +xml content types converted to known content types in AbstractHandler.php?\nThe problem is that this does not follow JSON:API Specifications which require application/vnd.api+json content type.\nIs there specific reason for that conversion?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Replace the Error Handler with your own one. \nOn 4 Nov 2018, at 03:47, Filip \u0160 notifications@github.com wrote:\nWhat can I do if I want that unhanded errors will be send using application/vnd.api+json content type?\nI don't want that all responses are JSON because I also want to support other formats. So I want to send same content type as request, but format depending on type.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I like this idea - it feels like a Slim-Http thing.. Slim-Http - it feels like a convenience thing.. Fixed by #2538 . Thank you. Nice find.. As I understand it, $_SERVER['QUERY_STRING'] should never have the leading  ?.. Thank you for this. Good catch.. Thanks.. Thanks.. This is a BC break as the renderXyzErrorMessage() methods can be overridden. \n\nAlso, the use of a static method on Render makes it impossible to test Error independently of Render and so would not be accepted.. However, thank you for your interest in Slim, we appreciate it! You may want to look at the 4.x error handling and see if you like the approach used there.. My concern here is that you can't do this in Slim 4. How many people need to change the parser and how complex is it to extend the router to do so?. Having looked some more, I'm not totally sure what problem is being solved here. Replacing the router factory doesn't seem that complicated if a different parser is required. What's the use-case?. https://github.com/slimphp/Slim/pull/2529 currently has the best explanations of how to run the Slim 4.x branch.. @Danack Example now works. Note that you don't have to use that PSR-7 implementation though.. > In a future version I would add links to the documentation for each step.\nAgreed.\nThanks for looking over it!. Another option is to type hint to a Slim\\Http\\Response if you know that it will always be one in your application.. I think that add() needs to support DI lookup.\ni.e. $app->add(Slim\\Middleware\\ContentLengthMiddleware::class); should work as it could be a key to the DI container which injects dependencies that I only want to resolve if this this middleware actually runs.. > > I think that add() needs to support DI lookup.\n\nOkay so you want the DI lookup to be done right then and there inside App::add()? Because we can't do a deferred callable for this since it isn't an invokable.\n\nWe might need a better deferred callable. We don't want to go backwards in terms of ability.\n. @bnf pointed out something important: \n\nGoing with a pure PSR-15 solution and adding a wrapper for double pass middlewares (as in #2555) results in (hard to detect) breaking behaviour\n\nWe have two choices here:\n\npass a shared response object to all the PSR-7 middleware\nmake it explicit to the upgrader that something has changed. e.g. $app->addPsr7Middleware()\n\nAnyone have an opinion on which one?\n. > * Drop support for legacy (in this thread sometimes also called PSR-7) middlewares at all\nI'm open to this if we can document what to do easily. If we drop Slim3 middleware format do we support pseudo-PSR-15closures ?\ni.e. can a user do this?\n$app->add(function($request, $handler) {\n    return $handler->handle($request):\n});. One thing about Slim is that it's simple to get going with. This is why it's used in so many tutorials for SDKs and libs for other components. We need to not lose that.\n$app->add(new class implements MiddlewareInterface {\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        return $handler->handle($request);\n    }\n});\nis too cumbersome! Though I wonder how many people do closures for middleware compared to doing closures for route callables?\n. I like the function idea and we could do others. Interesting to see that ZF came to the same conclusion.. Maybe we're overthinking the handling of closures?\nPart of me thinks we should just take the closure directly. We can't type hint add() because of the DI resolver ($app->add(MyMiddleware::class)), so it's probably fine to allow $app->add(function($request, $handler) {} ) on the grounds that if you pass in a closure that uses 3 parameters, you'll get an exception if you try to return the second parameter as it's not a Response.\nWe also need to support closures for route handlers too as these are really common. i.e. $app->get('/', function($request, $args) {} );. Again, if you tried to operate on the second parameter thinking it was a Response object, you'd find out by the PHP fatal error.\n. Do we need to provide an adapter from doubleness middleware to PSR-15 or do we just document it?\nSimilarly, do we provide an adapter for Slim 3 route handles to Slim 4 route handlers?\nI suppose it's not hard to provide them as optional things you explicitly use.\nphp\n$app->add(new DoublePassMiddlewareAdapater(MyOldMiddleware::class)):\nphp\n$app->get('/', new Slim3Handler('MyController:action'));\n. I think we're all agreed that Slim 4's add() will not take Slim 3 style middleware classes directly.\nThis means that add() will take one of:\n\na class that's an instance of PSR-15's MiddlewareInterface\na string to be resolved to an instance of PSR_15's MiddlewareInterface when the middleware is invoked.\n(TBD) a closure of the format function($request, $handler)\n\nNote that we need to agree the way forward on item 3.. I think we're all agreed that the Middleware Runner needs to support sub-requests, so let's get that working too.. I am definitely on the other side when it comes to add() which I think should be a convenience  method that takes mixed as this the path that looks nicest when writing your code in whatever style you prefer. Slim doesn't take sides in what structure you prefer.\nI'm definitely happy with runtime errors when you use the wrong signature for a closure for instance. I'm not okay with impossible-to-detect errors though which @bnf pointed out is what happens if we silently handle DoublePassMiddleware with individual Response objects.\nI'm also okay with an addMiddleware() method that it is strictly typed, so maybe we have add() as the convenient loosely-typed one and addMiddleware() for the people that want the strict typing?\nThis is arguably equivalent to having route() as the \"strict\" way to register an action but also support convenience methods like get(), post() etc.. We would massively simplify App if we remove setContainer(), setRouter() and setCallableResolver(). Any reason why we can't do this?. DNS settings failed when we moved the domain. It will be back shortly.. Windows build is fine with me. \nMind you, given that the issue appears to be at the PHP level, I'm not sure that a Windows build helps much?. Can you explain the problem you are having and why this fixes it?. Which read() line causes the fatal error?. https://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L277 is a comment just above the definition of group() ?. Ah!\nWhich read() call in Slim\\App is causing the problem as there are two.. My main concern is that \nphp\n$data = $body->read(min((int)$chunkSize, (int)$amountToRead));\nalready casts to int. However:\nphp\necho $body->read($chunkSize);\nCould possibly be an int. Your fix doesn't change this variable, so maybe\nphp\n$chunkSize      = $settings['responseChunkSize'];\nneeds the cast?. @mbohal Raise a PR against that branch please.. Thanks @vaga !. With a micro framework there is always a balance between what goes into it as it's not full-stack.\nIn this case, some people prefer their notices to go to their error error logs and not their Exception handling, so it's a choice each app makes.. @mbohal Would definitely accept a documentation update! I'm mildly surprised it's not there already and certainly should be on the Error Handling page.\nI'm on the fence about the skeleton. Maybe?. > So should I make a PR against the skeleton app?\nI don't know. I can't promise you it'll be accepted, but it might be.\nI also can't imagine developing without a tail -f on my PHP error log in a terminal window, so clearly we're all different!. I agree with @danopz. This is an application-level thing where people who want it can extend App.\n. Dependency resolution happens as each middleware or route callable is needed when a key to the container is used in add() or get()/post()/map().\nHowever, this is not your issue. What you are seeing is due to the immutable request object that Slim uses as it's  PSR-7 compliant.\nThis means that, the request that is received into your middleware or route callable is not the one that is in the container and that is intentional and by design. In fact, having a request object in the container was a mistake and Slim 4 will not register a request or response into the container.\nTherefore you use middleware to extract the language and either pass it to the route callable via withAttribute() or update the Twig object's global language variable directly in middleware and then your extension should look for the language in the context when it comes to do its work.\ne.g.\n```php\nclass LanguageMiddleware\n{\n    public function __constuct(Twig_Environment $twig)\n    {\n        $this->twig = $twig;\n    }\npublic function __invoke ($request, $response, $next)\n{\n    $lang = $this->determineLanguage($request);\n    $this->twig->addGlobal('language', $lang);\n    return $next($request, $response);\n}\n\n}\n```\nRegister a factory in the container for the middleware:\nphp\n$app->getContainer()[LanguageMiddleware::class] = funcion ($c) {\n    return new LanguageMiddleware($c->get('twig'));\n});\n(This assumes that you've registered the Twig_Environment factory with the key 'twig')\nAdd middleware:\nphp\n$app->add(LanguageMiddleware::class);. FWiW, questions like this are better asked on our Slack and/or our discourse forum.. @wdolek I prefer that you ask rather than struggle for days! :)\nMostly commenting that unless you get lucky and someone's on GitHub when you post (like I was), you're more likely to get a response from the forums.. I suspect that this should be in the documentation if it isn't already.. > @akrabat we could change that logic up a bit actually. We need to check if the file exists, if it exists check if it's writable. If it doesn't exist, we need to check if the directory is writable.\nSounds reasonable to me.. > On a side note, looking at the behavior from FastRoute, it will automatically generate the cache file We just need to document the behavior better.\nAgreed.. Thanks @jonathankowalski . We must make sure that this is 100% fixed in Slim-Psr7!. Note that there's nothing to stop you using Diactoros in Slim 3. Just replace the request and response in the container before you call run().. > Would it be enough to use this middleware in Slim 3? Because that's what I'm doing now to create a reverse proxy. https://gist.github.com/sridesmet/a3e0a6f3a3515aaf5d5b4b42479e8c67\nLooks good to me!. Im a little twitchy about using the container's Request object, but it seems the best choice here. Do we need this for Slim 4 too?. In general, if you do something wrong that results in a runtime error that clearly shows what's wrong, then I think Slim is doing the right thing.\ni.e. I wouldn't object to an exception message that explains that you've passed a null in, but I'd prefer it to not cost execution time if you don't make the mistake.. What's the use-case of implementing RequestHandlerInterface and then not wanting to use handle() ?. We merge what we can, when we can. \nI know that I'm the major blocker here as much because I'm slow to respond due to other things in my life. I'm also a slow thinker and need to see things and then consider them, which slows down major changes like the middleware one.\nI would like to get 2555 in sooner rather than later, but if there's reservations, then it'll wait until we've resolved them to my satisfaction. I'm really valuing the discussion we've got going on 2555 and think we'll end up with a better solution.\ni.e. don't go at each other's throats when you can just band together and blame me!. Re use cases mentioned earlier: 3 on its own is compelling enough to justify fixing this for alpha.. Let's get this one merged. I love me some ... !. I agree that we can improve this. I'm not sure about extending Router and App from a common class though.. IIRC @ has quite a significant performance impact?. The more I think about this, the more I think it's the wrong approach.\nThe problem with adding @ is that if the user upgrades to 7.2 or 7.3, then they'll get a white screen with no error to help them.\nI think we recommend that they explicitly disable the warning by turning off E_DEPRECATED themselves in the short term and in the longer term, they should encrypt their cookies themselves in middleware.. Pimple should be mocked out for 4.x testing.. Agreed re PHPUnit upgrade.. I have more exprience with createMock, so that tends to be my go-to. However, Prophecy is fine with me if we have people willing to (a) write it and (b) help the newbies!. Conversation was on Slack.\nSee https://slimphp.slack.com/messages/C06SHUR19/\n\nOn 23 Feb 2019, at 07:51, Frank Br\u00fcckner notifications@github.com wrote:\n@l0gicgate https://github.com/l0gicgate\n\u2026as per discussion @akrabat https://github.com/akrabat\nUnfortunately, this information is useless because nobody knows where to find this discussion. It would be better to publish a summary and the result of the discussion. A link reference would also be sufficient.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/slimphp/Slim/pull/2589#issuecomment-466626685, or mute the thread https://github.com/notifications/unsubscribe-auth/AACBb94lWlOCaJZl7ChKrgmQWiRcuqACks5vQPLvgaJpZM4bMv5L.\n\n\n-- \nDevelopment thoughts at http://akrabat.com\nDaily Jotter for macOS at http://dailyjotter.com\n. > Will need to update CHANGELOG\nPlease update the CHANGELOG :). A few quick benchmarks using siege indicates that this PR is 15% faster than the current 4.x.. See Slack conversation: https://slimphp.slack.com/messages/C06SHUR19/p1551046761239000. This question is better asked on our Slack and/or our discourse forum.. The Apache foundation requires that every file has the license in it but not the copyright in their policy.. The Software Freedom Law Center has useful information too in their Managing copyright information within a free software project article.\nIn particular:\n\nSince copyright notices are not mandatory, there is generally no harm in under-using them, particularly if authorship is recorded in VCS logs. Over-use, however, can cause problems. . Given that we don't require assignment of copyright to Josh, arguably the current copyright line is incomplete at best and wrong for some files.\n\nI think that we should keep the block with the link to the license, but lose the copyright and link elements:\nphp\n/**\n * Slim Framework (https://slimframework.com)\n *\n * @license https://github.com/slimphp/Slim/blob/4.x/LICENSE.md (MIT License)\n */. > For class, interface and trait declaration\nI don't think we need @package.\nOne thing I would like is an explanation of why this class exists. i.e. what's the point of it?. I would also like to remove any redundant @param, @return or @var for anything that's unambiguously type hinted.. > The biggest problem with that is that you end up with random doc blocks in the code base. What's the purpose to even have them. Let's just get rid of them altogether since everything is going to be typed anyway.\nWhen it's not typed (eg App::add()) then we need a docblock for our users and for PHPStan.. LGTM \ud83d\udc4d \n. I'm easy either way. \n\nOn 3 Mar 2019, at 17:20, bnf notifications@github.com wrote:\n@bnf commented on this pull request.\nIn tests/AppTest.php:\n\n     $responseFactory = $this->getResponseFactory();\n\n\n$router = new Router($responseFactory, $callableResolver, $container);\n$app = new App($responseFactory, $container);\n$router = new Router($responseFactory, $callableResolver, $containerProphecy->reveal());\n$app = new App($responseFactory, $containerProphecy->reveal());\nAn alternative to passing null would be to inject a ContainerInterface mock that asserts that the router isn't retrieved from it, e.g.:\n\n\n$containerProphecy->has(Router::class)->shouldNotHaveBeenCalled();\n$containerProphecy->get(Router::class)->shouldNotHaveBeenCalled();\nWhat do you think?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This is in danger of being too big. Can we pull out some bits into their own PRs?. We can't remove this method as we'll break BC. . Looks reasonable to me. . Line 59 can just be \n\nphp\nif (!is_callable([$obj, $method])] {\nas it won't generate an error if $obj isn't an object and is_callable is effectively a super-set of method_exists functionality, so we don't need to test for that.\n. Why? This Container is specifically for Pimple. If I wanted to use Zend\\ServiceManager I would need to write a new bridge class and the configuration would be different too.\n. Not really as Interop\\Container\\ContainerInterface does not define any way to set up a container. \nMore importantly there are so many different features of containers that configuring them is very container-specific. An auto-wired one like Zend\\Di is configured very differently to one that uses annotations for instance. For Zend\\ServiceManager I would use separate factory classes, but for Pimple, I use closures.\n. I'm very comfortable that anyone who wants to integrate with a different container has to write their own bridge class (if required) and also write the configuration for the required Slim entries.\nI expect that those who do this will create a composer package for it anyway.\n. Want to create a PR against https://github.com/akrabat/Slim/tree/dic-independence so we can see how it looks?\n. You need to use the container interface's get() method.\n. Best practice is to return the response. i.e. you are relying on an implementation detail of the current Route object if you don't return the $response.\n. withHeader returns the changed request, so we need to assign to $clone or just update directly with:\n$clone->headers->set('Host', $uri->getHost());\n. withHeader returns the changed request, so we need to assign to $clone or just update directly with:\n$clone->headers->set('Host', $uri->getHost());\n. Don't need this else. \n. Surely if we've got to this line, then bodyParsed is already null?\n. Why public and not private?\n. Grabbing settings out of the container is wrong as the container is only in the route to resolve the callable and may go away if we find a better way to do it.\nTherefore, please make outputBuffer a property of this class and read the setting for it within App and set the output buffer setting of the route instance when it's created here.\n. Yes - I wanted to ensure that it didn't break anything\n. Where is this method used?\n. I can't see any use for it in the interface\n. I'm unclear what's going on here as this is a repeat of line 1203.\n. Why make this change?\n. Also why do we allow an array of middleware?\n. Why have a sub-array for these arguments? It now means that you can no longer add an attribute in app middleware and have it available in the callback's $args.\n. It also means that there's no way to do default arguments with a stock install of Slim3 without using isset.\n. That's a decision for @codeguy or @silentworks.\n. Would it be a better example to put a ->setArgument('name', 'world') on the /hello/{name} route below and change that one's route path to /hello[/{name}]?\n. Can we call this routeCounter please.\n. Change $name to $identifier to avoid it being confused with the route's name\n. Please put this method back under any\n. I don't think we need to accept a  $stream parameter here. This is a specialist class solely for handling php://input\n. Unsure why we need to keep the tempStream around?\n. I would guess that there's an error there :)\n. Fixed. Thanks.\n. Should this one be stripos too?\n. It's laziness on my part to avoid changing the default settings merging. Will see if I can tidy it up. \n. Can't this be: \nphp\nif ($pattern === '/') {\n    $pattern = '';\n}\n?\n. Please remove this change.\n. Please remove this change\n. Are you sure that the square brackets are always there? https://bugs.php.net/bug.php?id=43632 implies not.\nEdit - experimenting locally, I think you're right that are always there.\n. Why not: $this->assertEquals('Multi-Status', $clone->getReasonPhrase()); ?\n. Why not: $this->assertEquals('', $clone->getReasonPhrase()); ?\n. Why have you removed this line?\n. Ah yes - $contentType is guaranteed to be one of the switch values.\n. Please change this to:\nphp\nif ($this->finalized) {\n    return;\n}\nrather than indenting the entire method\n. We use this for type hinting on line 51 of this file:\nphp\npublic static function createFromEnvironment(Environment $environment)\n. Doh! So they are :)\n. This is a dependency we would not want.\n. This is a BC break. Currently, calling code can expect to catch an \\InvalidArgumentException, but this code changes that to a \\RuntimeException.\n. > @akrabat The docblock says it is a Interop\\Container\\Exception\\ContainerException. What would your suggestion be? Would you prefer to see Slim\\Exception\\ContainerException extend \\InvalidArgumentException to preserve backwards compatibility? I can change it if so.\nIn this particular case, the only thing I especially care about is not changing anyone's code which calls get() within a try/catch block.\n. Do we want this @codeguy? You're the resident Windows developer, so may have an opinion? \n. Maybe we should name this CallableResolver?  It's not middleware, so I'm uncomfortable with the current name.\n. This setting may not exist if someone is using their own Container.\n. This setting may not exist if someone is using their own Container.\n. Please remove the type hint. Any DIC that uses array access with closures would in theory work with this...\n. Can we rename to DefaultServicesProvider?\n. Also, again no need to implement ServiceProviderInterface. We can simply instantiate this class and call register() directly.\n. Should we do this only once? i.e. should getResolvedCallable() store the resolved callable into $this->resolvedCallable and then return that rather than re-resolving?\n. Why is this required? i.e. if the problem is that you can't get at the real callable in the invocation strategy, then this is solved by the availability of getResolvedCallable() which could be called in the the invocation strategy's __invoke() if required?\n. You are correct, which is why #1789 is a nicer solution as we don't actually need a DeferredCallable at all for the route callable.\n. I think that this should be in Request::withBody()\n. If someone has added their own request/response to the container before calling run() they will expect that their container will be used.  The easiest way to tell that this has happened is to remove our default implementations.\n. Maybe, but that would be a different PR.\n. Good catch. Want to create a PR?\n. Good point. Removed.\n. I think that this won't work if someone overrides Container and then extends offsetGet()\u2026\n. I would prefer a more specific method name.\n. Please name this property isPipe.\n. Can you add info on what this particular mode means?\n. This is a boolean I think\n. Should default to false.\n. Please add this one as it's own test method. \nAlso, why does the 404 test use Reflection to set the Status?!\n. No. PHP can tell the difference between a property and a method with the same name\u2026\n. Ah. In that case. When is it cleared?\n. Why add support for string?\n. We can't change public method signatures or how they operate within the 3.x series.\n. $_FILES doesn't look like this at all\n. Ignore me - I'm thinking of the case where the name is foo[bar][]\u2026 see https://github.com/php-fig/fig-standards/pull/746/files\n. @basert, This is what I committed: https://github.com/slimphp/Slim/blob/3.x/Slim/Http/Request.php#L687L696\nNearly got it right :)\n. Where does newResponse come from?\nI like clone as it's quick.\n. Why did you change this? Practically, _METHOD overrides are only going to be used with HTML forms.\n. Cast to a bool please.\n. Not needed.\n. Needs title.\n. Too many blank lines here.\n. Rename to enforceReturnOfResponse ?\n. Can we have a second test where this is the default please?\n. true is not a valid setting for outputBuffering.\n. Should we be using the container at all here? i.e. if you want to change the callable resolver, then you call setCallableResolver().. Same here, I think?. Technically, you need to add the App's router to the container for a straight upgrade. If you've created your own router factory in the container though, then you need to set it into the $app.. Could we include both the current $key and the reconstructed one?. Yeah - it's going to have to be that way. We'll do it in Slim-Psr7. Yes. UPGRADING.md will be used to create the docs for how to upgrade from 3  to 4.. Throwable doesn't exist in PHP5, so it's better to be specific. . Please refactor this ternary into the try/catch. I think that it can go before the try?. I don't think it should matter. If it does, I'm not sure what I'll think!. This changes the behaviour from the current code. \nAt the moment, when there isn't a method specified, we return the class object and let PHP resolve to __invoke. This code explicitly returns an array with the second parameter as \"__invoke\".\nAre there any implications as a result of this change?. Double check performance too.. I've asked around and general view is that it won't make any difference.. I think this test should return a string and expect an Exception to happen?. I tend to agree with @mnlg.. > I guess this is a mistake? Slim 4 is still work in progress.\nThis is a PR against 4.x, so it will be correct. There's an argument we should alias dev-4.x to 4.0 though.. 7+ hasn't been agreed. Everyone agrees on dropping 5.5 though.. Maybe refactor and replace the $params assignments with the return $handler call?\nThat way we can also lose the final else.. Why does the exception object have a request?. Why not just throw a new HttpNotAllowedException so that it's caught in run() ?. What happens if $routeInfo[0] isn't one of the three cases?. To answer my own question. If we return a response, then middleware could process it.. What is the property for?. Needs to support case when displayErrorDetails is false. Any preference? RoutingMiddleware ?\nThough if we postfix with Middleware, we'll have to change the other Middleware classes too.. performRouting() ?. withHeader() is defined as taking a string as the second parameter.. Why? The code under test doesn't touch the body and ensuring the body is the correct text is covered by tests on Response and App.. Size of multi-byte character sets is an issue for Slim\\Http\\Stream() and should be tested there I think?\ni.e. I'm testing that the correct header is added as that's what this Middleware does.. There's an argument that the test should be:\nphp\n$this->assertEquals($response->getBody()->getSize(), $newResponse->getHeaderLine('Content-Length'));\nor even:\nphp\n$this->assertTrue($newResponse->hasHeader('Content-Length'));. Can't be dispatchRequest as this code doesn't dispatch - it only performs the routing work and then we dispatch later. . Renamed to RoutingMiddleware. Good catch. Thanks.\nYes, 'OutputBuffering' will need renaming too, but that's a separate PR if you fancy doing it?. There shouldn't be any other cases, but assumptions change :)\nMake it throw an exception.. Please remove.. It's actually used for OPTIONS. See https://github.com/slimphp/Slim/blob/3.x/Slim/Handlers/NotAllowed.php#L39 where I renamed the method name to make this clearer.\nArguably, we need a better solution, but for now, we're just replicating how it currently works.. Okay.. Please use an if statement.. [\"HTTPS\"] may contain the string off, which should use port 80.. [SERVER_PROTOCOL] will contain HTTP/1.0, HTTP/1.1 or HTTP/2. It will never contain HTTPS and so please do not check this key.. Use single quoted strings if there's no variable interpolation.. If you are going to put REQUEST_SCHEME here, then it needs to be either http or https \u2026 \nSimilarly, if you're going to support it here, you should test for it in $userData for setting the port.. Let's get a generic email address set up.. Please remove this change.. Done. We should put in a phpcs sniff to prevent it!. Let's just take hhvm out - we're not supporting it in 4.x. For more advanced requirements, I expect that the user should be able to easily replace Slim's error handling with their own.\nI don't want this component to turn into a massive thing as we're Slim! However, we should be reasonably flexible.. Why are we ignoring code coverage for methods in App?. I do not want $request or $response as properties on App. They were intentionally removed from Slim 3's DIC because they are immutable and people use them as if they aren't.\nThis also means that I don't want set/getRequest() and set/getResponse().\nAlso, run() and process() are separate for a reason: it allows someone to inject their own request and response when running Silm.. Add a gap between each property. It just looks nicer. This applies to all files.. Do not store response. Each renderer should return a response that they have created.. Call $exception->setRequest($request); and then throw directly here.. Call $exception->setRequest($request); and then throw directly here.\nI know it's a duplication from above, but will be clearer to read and remove the test for not null below.. Test for an instance of HttpException. That way we can be sure that the Request object in getRequest() is a PSR7 Request object.. Can we make HttpException's constructor require a Request object? Then we don't need the null test here.. I'm not sure about this. Conceptually, if the client has set text/plain first, then it should win. Is there a major browser which sets text/plain first or something?. Don't need a Response here. The renderer should create its own.. I don't think that we should instantiate an ErrorHandler here. More often than not, we won't need it.. Why are $logErrors and $logErrorDetails passed directly to the ErrorHandler directly and not passed in via __invoke like $displayErrorDetails is?\nI can imagine that if I register my own ErrorHandler, I'd like the option to implement logging of errors as per the user's configuration of the error middleware.. Ideally, we should integrate the container and collect from there, so that we can lazily instantiate ErrorHandler classes.. Related, would be nice to collect from the container rather than having to have it instantiated every request.. Don't just test here. If the $renderer is not null, then we can instantiate it and return it within this if() statement. That way we can test using instancepf ErrorRendererInterface and we don't have to check for $renderer === null later in the method.. Probably not this PR, but I think we should handle Options in its own middleware or in App or Route directly.. The renderer should return a response that's configured with the content-type correct header. Just add the status and we're good to go.. In general, I agree. A separate PR after this could allow for handling a PSR3 logger.. Renderers should return a Response. As such, I'm not sure what an abstract implementation looks like, so this can probably be removed.. Return a Response.. Return a Response.. Can we use JSON_PRETTY_PRINT| JSON_UNESCAPED_SLASHES please?. Return a Response.. Return a Response.. Please remove this Exception. It's not a common enough use-case to my mind.. Can we make Request the first constructor parameter (required)? I can't think of a downside.. No need for $response. Create one if you need one.. What's the difference between details, title and description?. Rename to HttpMethodNotAllowedException.. As the exception should return a response, this can go into the exception itself.. Would rather have an interface and rename AbstractErrorHandler to ErrorHandler. Response not required.. I think we just need render which returns a response.. Okay. Accepted for now. I'm mildly concerned that you're throwing HTTP exceptions from somewhere where you don't have a request object, but it's your architecture :). Where does it come from given that the error handler is called from the catch() of the Middleware and that we won't have $response passed into the middleware in PSR-15?. default should be last in a switch statement. Arguably, it should throw an Exception as it should never happen.. Should we be caching the list of allowed methods in an instance variable keyed by the function's parameters? It appears that we currently have to do this same work twice when we're in a method not allowed scenario.\n. Why would we not want to url decode the route arguments?. What I mean is that currently in Slim 3 it's not optional. Why is the choice a method parameter here?. Runtime is fine as it should never happen :). I understand that. \nGiven getAllowedMethods() has been called, why don't we keep a copy of the calculated $allowedMethods in a local member variable, so that we don' have to do all the work again if getAllowedMethods() is called again with exactly the same parameters?\nFrom what I can tell if we're in a Method Not Allowed situation, we call getAllowedMethods() on line 68 of Dispatcher.php and then again in line 83 of RoutingMiddleware.php, so it appears to me that we're doing the same work twice.. We need to add\n$uri = rawurldecode($uri);\n\nbefore calling the dispatcher's dispatch() in this method. Not sure if it should be a separate PR or not.\n. This will give the wrong answer if I do this:\n$methods1 = $o->getAllowedMethods('POST', '/foo');\n$methods2 = $o->getAllowedMethods('GET', '/bar');\n\nAt least, I think that $methods2 will be the allowed methods for /foo. Please do not use \\Exception inline. import it with use.. Why does the if statement exist? i.e. why doesn't setting $message to null when constructing the object not set $this->message to null?. I'm not sure that the $routeHandler is a string.. Then again, maybe $routeHandler is actually the route's $identifier. Can you confirm @l0gicgate ?. Maybe we should rename the variable?. > Should probably done in an extra PR as this one is just for PHP7\nYes, that was my assumption and gentle hint to @l0gicgate  :). \ud83d\udc4d. Please revert as this ternary statement is harder to read.. I don't distinguish like this; straight alphabetical please.. What is the point of renaming the variable by assignment? Surely we should just rename it in the method parameter?. Can we add a comments to point out where this one happens?. Don't need this commented out line or the one in tearDownAfterClass(). run() no longer takes a ResponseFactory.. Lose this blank line.. Method has a lowercase m unless starting a sentence.. s/parameters/parameter. Please rename to testGroupClosureIsBoundToThisClass. This is mis-named. It dispatches the route (and also routes if routing hasn't already been performed).\nHow about renaming to DispatchMiddleware?\n. I would like add() to accept a closure too and wrap it in ClosureMiddleware.. Don't set $cacheFile to the class property before we've validated it.. Technically, as this class is in a namespace, you could mock out is_readable()/is_readable(). See tests/Assets/HeaderFunctions.php - I wrote it up here.. The user could catch the exception and then continue.. We should rename this file now that it containers functions other than header functions. Maybe PhpFunctions.php?. We appear to be calling $callable() twice. Is this intentional?. Put $request->getAttribute('routingResults') directly into the if statement as we don't need the temporary variable.. Rather than just assigning, we could clear $this->middleware and then assign each item in $middleware using $this->add(). This would mean that there'd be a PHP type error on assignment rather than a runtime exception when run() is called later.. Assign $middleware using $this->setMiddleware() here so that it we use the type-safe code path.. We shouldn't need this test if we ensure that the only way to add middleware to this class is via add().. Should we make $methods always be an array like $groups is? \nWould save the is_string() ? : call.. $callable will never exist!. Resolved with 5e8fc67. Resolved with 5e8fc67. Resolved with 5e8fc67. Resolved via 4bf9785. Resolved via 9aa8c6b. Currently, if the container factory returns a string that's the name of a class that implements MiddlewareInterface, then 4.x will instantiate that class and use it. In this code, that no longer happens, I think?. There are three things that need to happen:\n\nRegistering route paths to handlers\nDetermination of the route handler to execute based on the request's URI\nExecuting the handler\n\nThese all need to be separate.\n\nRegistration happens before run()\nDetermination of the route handler to execute needs to occur in the middle of the middleware execution so that the user can register middleware before and after it happens.\nExecution of the handler happens last\n\nWithin Symfony's Routing component, there is a RouteCollection object that you register route paths too. . Then Router::matchRequest() (which calls UriMatcher::match() is used to determine the controller to execute. The actual execution is done completely separately in the HttpKernel component, where Kernel::handleRaw() method instantiates a controller class (via an event) and then invokes it using $controller(...$arguments)\nTo circle back to Slim, we need to have these tasks separated too. I don't mind what we call them, but they must be separate. In Slim 3, you register your paths into the Router object and then use it to determine the handler to be  executed. This determination is very clunky in Slim 3's App and can only be at the start or end of the middleware chain. The actual dispatching is the application's job and is done in App::__invoke(). Due to the way Slim 3's middleware stack is set up, App::__invoke is always the innermost middleware of the stack.  \nIn 4.x today, App is no longer its own middleware and the dispatching is now in DispatchMiddleware which is much more explicit as now DispatchMiddleware is the innermost middleware. I agree with @bnf that  it should be a request handler, not a middleware though as we're never gonna call handle. \nIn 2591, the Router does the dispatching too as it is a request handler in addition to a router though it doesn't explicitly implement RequestHandlerInterface. I'm not so much a fan of this as it makes the router do double duty. However, our Route objects are remarkably confused on this point too mind you.. > what is the usecase to return a string or a Closure from a DI container that needs to be instantiated manually with new then? If one actually adds something to a container, then a proper object implementing MiddlewareInterface should and can be easily used, no?\nThis is a good question. I was mostly observing how it currently works rather than asking whether it should do this or not :)\nLet's open an issue to consider it separately as this PR is already a bit too big\u2026\n. FWiW, I don't mind the anonymous functions as they are analogous to the closures we used in Slim 3. One advantage is that a user can't instantiate them, so they can never be part of Slim 4's public API and so have to be supported by us. One disadvantage is that they are opaque and not as explicit as a named class.\nI don't hold a strong opinion on this at all and can go either way.. I also prefer the deferred over lazy.. > I've moved the dispatch logic out of the Router again and moved it into a separate RouteDispatcher which implements RequestHandlerInterface.\nLovely, thanks! I can't see the commit where you did this though?. Why have a MockContainer object when we could be using PHPUnit's createMock() ?. > We need to have ArrayAccess implemented on the class\nWhy? Slim doesn't set anything into the container anymore does it?. Why do we have a MockContainer though? We shouldn't need it as we should be able to use PHPUnit's Mocking functionality for every situation where Slim's classes use a container. If we can't then we need to look at that particular Slim code.. Couldn\u2019t we pass in null for the container here? Pretty sure we no longer look in the container for the router.. Good. Mocking the router is a separate PR of course :)\n. Lower case f and g. ",
    "gmanricks": "You are right it is not an official HTTP method, but that wasn't the point. This addition doesn't look for a methods named ANY. It responds to any other method even custom ones that a user may implement, so I don't think it goes against the current API.\n. I renamed the function, also I forgot to mention I also added a function called setDownload([$filename]);\nWhich will set the header to force a download instead of the browser trying to open it. You can optionally pass in a filename to change the download's name to the specified string.\nfor example if you have a route for '/file'\nand you run:\nphp\n$app->setDownload();\nit will force a download named 'file', whereas:\nphp\n$app->setDownload(\"other.txt\");\nwill download the contents of the route under the name 'other.txt'\n. What are you trying to plug Slim's logger into ?\n. I think that's a really elegant solution +1\n. It won't pickup named routes defined inside groups like @pwhelan mentioned, (which may be a test case we should add in-general). I do like the idea though, but to get around this we can maybe convert this into a lazily loaded property (both the routes name, and path).\nAdd we can allow for groups to be named, and that can be the base name, so for example if the group has a name of 'foo' and the route was named 'bar' you can access it with $app->urlFor('foo_bar');\nWe should probably break Group into it's own class, and have a loaded boolean property, and we can then cache the results on the first load.\nThis would allow us to move some of these concerns out of the Router object into the groups object. From the router object we should only have to call: $group->matchesUri and $group->matchesPath in which the group would perform these checks using @pwhelan algorithm for matching bases. Once loaded, (either for path or name) it would cache all the properties for the routes in the group object \n. Before the keys were added with setValue and in this pull request they are just inserted directly, setValue handles keys with the separator string '.' line 221 in the pull request should be replaced with setValue\n. ",
    "lucasrubini": "I'm pretty sure your solution will be more elegant than mine, since I don't code that much...  thanks!\n. ",
    "daviddeutsch": "Any new info on this? If there is anything I can do to help out, let me know.\n. ",
    "danilobuerger": "Thats how i am doing it now, but it would be much nicer to have Slim take care of it, hence the feature request.\n. As far as i know thats something completely different. I am talking about setting multiple messages with the same key in the same request.\n. ",
    "matthew-dean": "It seems intuitive that multiple flash messages might be added under the same key (by, for example, triggering errors in different places, which isn't as easily managed by collecting it in an array and adding it later).\n+1 for this\n. >  It would be really nice if one could specify a base path which is used by slim to extract the routes.\nJust to tweak what was written above, I was able to fix routing for me this way:\n```\n$app = new \\Slim\\Slim();\n$env = $app->environment;\n$env['PATH_INFO'] = strtok($_SERVER[\"REQUEST_URI\"],'?');\n```\n. Hmm, ok. I wonder what the rationale is for reducing features.\n. @geggleto Alright. That's fine. But do you have another suggestion for how to achieve this? How do you un-match a match? Can middleware on a route cancel (continue) the route?\n. Okay, I'll give you a specific (slightly simplified) use case:\nphp\n$app->get('/wireframes/{page}/', function ($req, $res, $args) {\n  if( /* page exists */)\n      echo $this->page->render($args['page']);\n  else \n      /* continue routing until eventual 404  */\n});\nExpress.js uses this kind of pattern.\n. @tuupola \nWith those routes, /wireframes/fiddlefaddle (assuming fiddlefaddle does not exist) would never (rightfully) result in a 404. Or do you just manually set a 404 header? Do you separate out a 404 function that is fired when nothing matches, and manually call the function in this case? What's the \"Slim way\" for rejecting a matched route? Or, is the short answer simply: Slim has no solution for this use case?\n. As a parallel metaphor, when creating parsers, it's common to match a pattern, and then further examine the match to determine if it qualifies. That's all I'm trying to do here, but with route patterns.\n. Okay! Perfect. Thanks for the tips. I saw that in Slim 3, requests and responses were immutable, so I didn't realize you could return them from a route. Thanks!\n. ",
    "Gufran": "I completely understand the point here. If you can just spare some time to have a look into diff you'll find just a bunch of functions to perform some basic parsing to make template look cleaner and feature rich as well. I dont think we need to roll out a separate library for those tiny functions.\nAnyway, I implemented this for my personal use because I was missing my Laravel way of managing html. Thought of sharing with everyone so here it is.\n. ",
    "janeklb": "On further thought, instead of adding setDispatchContext($context), it might be better to add a $dispatchContext parameter to run() and call() on \\Slim\\Slim and use that instead.\n\nScratch that. This would rely on middleware passing the context parameter around.\n. ",
    "al-the-x": "Example? Discussion?\n. ",
    "hay": "Hey codeguy, well the problem was that my host has some really weird routing going on, and with lots of patience they managed to fix it. Thanks for coding a cool framework!\n. ",
    "tvpmb": "Just tried this, and it also didn't work.... trying to simply here: Also I'm running nginx+php5-fpm.\n$res = $app->response();\n  $res['Content-Type'] = 'image/jpeg';\n  $res['Content-Disposition'] = 'inline; filename=\"img.jpg\"';\n  $image = imagecreatefromstring(file_get_contents('<amazon s3 url>'));\n  $res->body(imagejpeg($image));\n  imagedestroy($image);\n. I created a simple test.php file and ran it on my server, this worked perfectly:\n<?php\nheader('Content-Type: image/gif');\nheader('Content-Disposition: inline; filename=\"img.gif\"');\necho file_get_contents('<amazon s3 url>');\n. ",
    "klivan": "Not a bug. You have bug in you code.\nThis code will work fine:\n``` php\n$res = $app->response();\n$res->header('Content-type', 'image/jpeg');\n$res->header('Content-Disposition', 'inline; filename=\"img.jpg\"');\n$image = file_get_contents('');\n$res->body($image);\n$app->run();\n```\nThe problem with your code is that you're using function imagejpeg. This function not returns image and sets it into ->body() method. imagejpeg function just outputs image content into browser.\nAs headers are set only during $app->run() call they can't be set because content is already sent to browser.\n. ",
    "cwt137": "Yes, just set the response header and add Access-Control-Allow-Origin. Look at the docs to see how to add a response header. http://docs.slimframework.com/#Response-Headers . While you are at it, better set the headers for CORS support so the cross-site stuff will work in Chrome and Firefox too.\n. ",
    "justgook": "ill rebuild repush it, but main idea is to be able dynamically add new routes after cycle of routes is started, so if I i add some new route, and use \"$app->pass()\", than this (just added) route newer fires.\nit is usefully when u wont to create lazy loading and define routes form some kind of \"controller\"\n``` php\nclass Controller {\n    private $app,\n            $prefix;\n    public function __constructor(\\Slim\\Slim $app) {\n        $this->app = $app;\n        $routes = $this->register($app);\n    }\n    protected function register(\\Slim\\Slim $app) {}\n    public function setPrefix($prefix) {\n        $this->prefix = $prefix;\n    }\n    protected function getPrefix() {\n        return $this->prefix;\n    }\n    /*\n     * Register all routes to main App\n     * @param \\Slim\\Slim $app\n     * @param array      $routes prefix_path:class pairs expl: wiki:z0\\modules\\Wiki\n     /\n    public static function defineRoute(\\Slim\\Slim $app, array $routes) {\n    foreach ($routes as $value) {\n        list($prefix, $className) = explode(':', $value);\n        $app->map($prefix .'/:sub+', function($sub) use($app ,$className, $prefix) {\n            $curentController = new $className();\n            $curentController->setPrefix($prefix);\n            $curentController->register($app);\n            $app->pass();\n        })->via('GET','POST','PUT', 'DELETE');\n    }\n}\n\n}\n```\nmain problem that i dont wont load all unnecessary controllers until i need them.\nDisadvantage a cant use those for url generating.\n. btw it increase performance by destroying addition ram memory leak when you every time create new instance of array.. so it is not only possibility dynamically add new routes, but performance increase. so after few updates there can be move all router filtering to that instance (RouterIterrator) \n. ",
    "devios1": "Why is this not considered a bug? Especially when the fix is so simple. I just spent an hour digging through code to figure out why my server was all of a sudden broken after updating my mod_rewrite rules. The lesson here is that you can't assume $_SERVER['REQUEST_URI'] is based on $_SERVER['SCRIPT_NAME'], and this assumption breaks otherwise fully legit environments.\nThanks to doublemarked for the report and fix, though I actually came here to report the very same bug, having discovered it on my own as well. :)\n. I'm no mod_rewrite expert. I tend to get things working and leave it alone. :) I seem to recall attempting to use RewriteBase in the past without success, however, but not pertaining to this issue. I will give it a shot and see.\n. Quick investigation looks like RewriteBase is meant primarily to target a specific subdirectory for rewrites, however I'm not sure it can be used to hide a directory from the url, which is my primary reason for using mod_rewrite. For example, I have my site organized into a subdirectory /site, but want http://host.com/whatever to invisibly map to http://host.com/site/whatever. It doesn't look like RewriteBase can do this, because the rule needs to apply one level up and redirect into that subdirectory. If you target /site with RewriteRule, the rule will not get applied on /.\n. Well kind of the whole point is that I want it in /site/foo. My web host doesn't allow the base account domain to point to a subdirectory (for some reason, I guess cPanel doesn't support it or something), however I have several different sites hosted on the same account via add-on domains, each of which points to a subdirectory of root. I don't want to have my main site at root sort of mixed in with all the different other site subdirectories, so I use mod_rewrite to redirect the main domain to its own isolated subdirectory and all is happy. It is a bit of a pain to deal with mod_rewrite, but I prefer it over the alternative.\nAt any rate, I've modified Environment.php so that it will work with my environment (hmm, ironic?), as per doublemarked's solution so this is working fine for me now. I'm merely pointing out that it really should be considered a bug, as there will probably be others who run into the same problem.\n. ",
    "q3452": "chaiguy's fix is pretty good but there are some edge cases that it doesn't cover.\nIn the extremely common design pattern that uses some version of:\n/\n/public\n/lib\nWe need to rewrite twice, once to add public (if necessary) and once to add index.php (if necessary).\nIt's the \"if necessary\" that is the problem.\nThe existing code handles:\n    example.com/public/index.php/dostuff\nand\n    example.com/public/dostuff\nbut breaks on:\n    example.com/index.php/dostuff\n    example.com/dostuff\nThe code from @chaiguy is a vast improvement but although it handles the useful cases of:\nexample.com/dostuff works\nexample.com/public/index.php/dostuff\nIt breaks on the pathological cases below:\nexample.com/index.php/dostuff\nexample.com/public/dostuff\nThis isn't a show stopper since fixing a huge bug but creating a small one is still an improvement and I can live with pathological cases if I don't have to manually patch library code for my business-as-usual ones.\n. ",
    "gregelin": "I had a similar need to run Slim inside a sub directory. I liked the fact @doublemarked discovered everything worked if one simply appended the path to the subdirectory to all the routes. I found simply doing that to be an acceptable solution.\n. ",
    "evert": "I agree with @silentworks . mcrypt should be optional, as slim will function without mcrypt as well.\n. Well if you're only using Slim for routing.. it's just a bit cumbersome if that requirement exists. You can still throw an exception if mcrypt-related functionality is called, and mcrypt is not installed.\n. @webpatser of course. Making it optional would cover both use-cases.\n. ",
    "webpatser": "@evert For security reasons I would go for the require statement.\nOr add some fallback encryption method to Slim and then remove the requirement.\n. I understand your specific case. But since other people are also using it for more then just routing :-D\n. Like I said. I totally get your setup's etc. It's for @codeguy to decide to write a fallback, remove mCrypt from the encryption functions or to live by the fact that if you have it not installed you don't get encryption, when you think it does.\nuntil then I would say, leave this requirement. And if you know what you are doing, remove the requirement manually.\n. ",
    "josegonzalez": "@tuupola you are amazing. <3\n. @tuupola (please add to composer as fake-mcrypt)\n. For those using this workaround: composer update will not wish to run locally if you already have ext-mcrypt installed somehow. I'd still prefer the mcrypt requirement be dropped (maybe placed into middleware if anything) or this commit reverted at worst, but uninstalling mcrypt locally before running seems to work.\n. ",
    "tassoevan": "But is exactly what I'm doing: ClosureMiddleware implements Slim\\Middleware.\n. :+1: \n. The pasted code is using PDO, right? Nothing related to Slim (you're using bindParam instead of bindValue). However, any error in your application is generating an additional exception because your LogWriter is broken. How are you defining the log.writer parameter in Slim configuration?\n. @honeygoyal Can you check if, before the $app->run(); line in your index.php, the following line throw an error?\nphp\nfopen('php://stderr', 'w');. What about get the value from $_SERVER[\"HTTP_HOST\"]? I don't know if it's a safe method to get this information (according to the PHP docs, even $_SERVER[\"SERVER_PORT\"] isn't), but does the trick.\n. $_SERVER[\"PATH_INFO\"] variable doesn't includes the query string part of URL, while $_SERVER[\"REQUEST_URI\"] does. Actually Slim doesn't use $_SERVER[\"PATH_INFO\"] to compute $app->environment[\"PATH_INFO\"] (and I think it never used this). The awkward variable can be $_SERVER[\"REQUEST_URI\"].\n. I've seen some discussions around this \"400 or 404\" subject. The RFC 2616 states for 404:\n\nThe server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. [...] This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable.\n\nI don't think that 404 is a good status to represent that desired resource doesn't exist because is too generic to say what is wrong with the request URI. Some API developers are using 422 status.\nRegardless this issue, Slim\\Slim::notFound() is not handled like a route; sometimes is annoying.\n. How can this generate an error? Also, __FILE__ and __LINE__ are constants, they will be replaced by the Slim/Slim.php absolute path and 1385.\n. $app->request is an alias for $app->request(); both work. And I confirm the behavior described by @cwscribner, $app->request->post(\"sel\") returns the array, even using 2.4.2 version. To return just the last value, the checkboxes must be <input name=\"sel\"> instead of <input name=\"sel[]\"> or <input name=\"sel[n]\">, the expected behavior.\n. ",
    "aktau": "That would be awesome, thanks. Too bad I can't use the dev releases of Slim and Slim\\Extras yet as a drop-in replacement. Twig gives me some serious errors so I suppose the API has changed somehow. For now I'll create a PSR-3 wrapper. That's 2 levels of wrapping now with some information loss in between, I hope that point release comes soon ;)\n. I've taken another look at the PSR-3 code though and correct me if I'm wrong but I would still need a (empty) wrapper class that implements LoggerInterface (from the PSR-3 package composer I think automatically installs). Is there some reason we don't have \nphp\nclass Log implements Psr\\Log\\LoggerInterface {\n    ...\n}\ninstead of the current\nphp\nclass Log {\n    ...\n}\n?\n. It is not about sharing or using with other frameworks, it is about interacting with components that have not been written with Slim's idea of a logger in mind. When I instantiate one of my own (or someone else's) components and that component requires a logger, I will generally do something like this:\n``` php\n$comp = new \\Some\\Namespaced\\Component($someVariables, $app->log);\n// the definition of \\Some\\Namespaced\\Component, which I may or may not have control over:\nclass Component {\n     public __constructor(array $variables, \\Psr\\Log\\LoggerInterface $log) {\n            // ...\n     }\n}\n```\nThat is, I don't want to rewrite all components I want to use and log to accept a Slim logger instead of a PSR-3 logger. For now I was using a wrapper around the Slim logger which was ugly but doable. It seems I'll still have to use a wrapper, though it be slightly less ugly.\nIn this way, the PSR logger unifies logging capability. I'm normally not a fan of unity-soup (i.e.: design by committee, pandering to everyone, etc) but I believe logging to be one of those things that is exempt because it is (or should be) so ubiquitous. Everybody has the same logging problem, and if it could be fixed once and not duplicated all over the place that would be nice, real nice. This is the reason Monolog adopted PSR-3, so you can pass in a Monolog logger to something expecting a generic PSR-3 logger and have it just work. This is why log4j got so popular in the java world and copied to many other languages et cetera.\nI can understand the dependency argument but it does hurt a little bit for me to have to shim/wrap all loggers. It's not impossible of course and I'll live (especially with 2.3 it's easy to replace), but meh.\n. That makes sense, in that way I can steer my mind away from having to force Slim to do my bidding (the forcing part is something I escaped by converting a legacy app from Symfony) and just pretend the Slim logger does not exist. As it stands then, Slim's logger is only useful when these conditons are met:\n- you don't use any external logging component, such as Monolog\n- you don't want any external component to log stuff, or (alternatively) are prepared to pass in your own logging class whilst ignoring Slim's. Or you use only self-made components that can use Slim's logger directly.\n- you dont' want or can't use composer\nMaybe the people that want to do this are actually more numerous than I expected and I didn't foresee that. At any rate, I think I've just though of a nice way of solving my problem, thanks for that and for listening to my feedback! \n. @Addvilz I'm not so sure it would limit the flexibility, as it is just implementing an interface which doesn't even preclude it from implementing another one if so desired (though it would be messy). I also did not advocate following standards blindly, but I have noted that this specific PSR standard is gaining adoption and I don't see a reason why it shouldn't. I'm not the biggest fan of the PSR anyway, I personally don't like the coding style, for example, and happily ignore it. \nMy current solution is to just not use the Slim logger, but directly use the Monolog logger I instantiate at the top of my file. This shaves off a tiny bit of overhead and allows me to delete ~15 lines of configuration, which is great to me.\nThat said, I would like to know how you have solved the problem in a small amount of time. Can you clarify? Thanks\n. Anything that needs logging and is called from Slim routes\n. This seems to fix it:\n``` php\n    public function finalize()\n    {\n        // Prepare response\n        if (in_array($this->status, array(204, 304))) {\n            $this->headers->remove('Content-Type');\n            $this->headers->remove('Content-Length');\n            $this->setBody('');\n        }\n        else {\n            // if not exists....\n            if (!$this->headers->has('Content-Length')) {\n                $this->headers->set('Content-Length', $this->getLength());\n            }\n        }\n    return array($this->status, $this->headers, $this->body);\n}\n\n``\n. Addendum: I had to check for a zero content-length as well, I still haven't found out why, but the problem was occurring when I did an early quit in some middleware before reaching the actual route. The middleware just did a->render()call to a login page, but somehow the body did not get set in the response, which made the->getLength()` call return 0. Corrected version:\nphp\n            if (!$this->headers->has('Content-Length') && $this->getLength() > 0) {\n                $this->headers->set('Content-Length', $this->getLength());\n            }\n. True enough. Though I don't think this would be a bad thing for core.\n. Bit busy atm, will see when I can manage!\n. I have nothing in place for '/ping', not route, nothing. It should thus return 404, for both GET and HEAD, should it not?\n. Said otherwise, you can reproduce this on your own slim for any route that doesn't exist.\n. ",
    "vlakarados": "This change may be pushed to master branch as I can't see how it can break someones functionality.\n. Considering CORS it doesn't require HEAD method, but I will implement this in the nearest future and commit this\n. Yes, I'm half-way in my project to get full CORS compatibility in Slim, will update this\n. ",
    "nickshanks": "This doesn't add HEAD if GET is available.\n. Have also just noticed that you set \"Access-Control-Allow-Methods\" but don't set the more basic Allow response header!\nIn a non-Slim project I use this:\n``` php\nfunction allow_methods($methods)\n{\n    // HEAD and TRACE are handled automatically\n    // the tunnelling method CONNECT, the WebDAV methods PROPFIND, PROPPATCH, MKCOL, COPY, MOVE, LOCK and UNLOCK, as well as any proprietary methods like DEBUG and TRACK, are prohibited\n    // I can see theoretical use cases for COPY, MOVE, LOCK and UNLOCK in the app, but have not needed them thus far. COPY and MOVE can be broken down into GET, PUT and DELETE methods anyway, which are better supported by intermediaries. LOCK would need a timeout facility\n// in a fully RESTful service, GET should be supported by *every* resource, and so should not need specifying\n//  we're not there yet (/action and /ajax are primary offenders; /action is needed for UAs not supporting PUT, PATCH and DELETE)\n\n$methods = trim($methods);\nif(empty($methods))\n    return false;\n\n$methods = explode(' ', strtoupper($methods));\n$methods = array_intersect($methods, array ('GET','PUT','PATCH','LINK','UNLINK','DELETE','POST'));\nif(in_array('GET', $methods))\n    array_unshift($methods, 'HEAD');    // HEAD is automatically supported by PHP, so long as we treat it as a GET\n\n// TRACE is handled by Apache\n$allow_response_header = 'Allow: '.implode(', ', $methods).', OPTIONS, TRACE';\nif($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {\n    // for issues with this, see http://www.mnot.net/blog/2005/04/03/options\n    header('HTTP/1.1 200 OK');\n    header($allow_response_header);\n    exit;\n}\nif(!in_array($_SERVER['REQUEST_METHOD'], $methods)) {\n    header('HTTP/1.1 405 Method Not Allowed');\n    header($allow_response_header);\n    exit;\n}\n\n}\n``\n. Codeguy, any word on where you're at with this?\n. I reported this back to chrome as a bug in their language detection (using the \"report incorrect detection\" menu item, not a crbug).\n. Slim's urlFor() method is just crap, using the wrong values from$_SERVER` and thus providing broken URLs. It's easy enough to override in your Application subclass though.\n. Well error #1: it doesn't provide a URL, it only provides a path, which causes output formats like Atom and HAL to be invalid. The code I use does not cater for installations other than at the root level of the server, which is fine for my purposes but would be unsuitable for general use. This is in my subclass of \\Slim\\Slim:\nphp\n    /**\n     * Overrides Slim\\Slim::urlFor() which inexplicably concatenated the router URI with getScriptName(),\n     * which presumably is supposed to return the path up to the script? in case you're not running from /index.php\n     * It actually includes the script filename (as the function name implies!) resulting in daft URLs\n     * like /index.php/object instead of /object\n     */\n    public function urlFor($name, $params = array())\n    {\n        // The Slim\\Request::getUrl() method returns scheme://hostname[:port] not the whole request URL\n        // It's really badly named, perhaps getHostURL() would have been better Josh?\n        return $this->request->getUrl() . $this->router->urlFor($name, $params);\n    }\n. Is 2.3 supposed to include breaking changes from 2.2 ?\nIf so, can I suggest you rename it to 3.0\n. If it helps, I can send you a Vagrant/VirtualBox config, Puppet manifest and my composer.json file which should give you the same set-up I am using.\n. Silly GitHub: \"Unfortunately we don't support that file type yet. Please use PNG, GIF, or JPG.\"\nI have copied them to http://web.nickshanks.com/github/codeguy/slim/563/\n. ",
    "civocr": "I'm also getting the same thing since updating composer yesterday\n. ",
    "zomble": "Ahh.. the require-dev on phpunit isn't really required. It's just an artifact caused by personal habit, as I have avoided global installs since using composer.\nShould I remove it?\n. Hey guys, I'd preference $app->call(method, url); and expect Slim Environment to take care of parameters / client variables.\nSimply because that's more inline with slim's operation, and parameter ordering.\nThoughts?\n. #537 was about fixing this issue. It didn't make it to 2.3.0 however.\n. ",
    "patforg": "When you set a custom error handler via set_error_handler() PHP function,  the error_reporting value is not taken into consideration.  The handler will be called on every type of error, it is the functions responsibility to respect the error_reporting() value.  http://php.net/manual/en/function.set-error-handler.php\n. ",
    "Addvilz": "Josh, this isn't completely correct - PHP can have and does have a way to handle almost all errors, including fatal errors, except syntax errors. This is done by registering shutdown function and checking for error with error_get_last. Therefore it is possible to handle almost all types of errors you would expect to slip by the development stage of any  project. Iv'e used this before many times for a long time now, it's a confirmed solution.\nSolution like this could be implemented in Slim, however it must be a configurable option. \n. Nick, could you care to elaborate - what exactly is wrong with using SCRIPT_NAME to find a relative web root? What would you suggest then?\n. It is extremely easy to wrap anything using logger system currently present in Slim. I, for example, use Apache Log4PHP, it took me literally 20 lines of code and 5 minutes of work to do so, in a reusable way. \nCurrent implementation is as flexible as it would need to be. Implementing PSR-3 would not help either way, it would merely limit possible interaction between non-PSR loggers and custom implementations out there. Slim's main strength is ability to customize and modify in a way to adapt \"standard\" and non-\"standard\" implementations to interact with Slim. It should stay that way. Otherwise we will end up with another PSR-ed framework out there, and there is already plenty. \nAlso, I would prefer that Slim would not follow any PSR blindly, nor should it implement vendor functionality to do so, even in form of dependency, Monolog or other in this case, as it would only limit possible interaction between multiple implementations. \nDependencies here mean a) use composer b) waste hours of maintenance if you do not wish to do so.\n. ",
    "Hackmodford": "I just made the search term a parameter. Problem solved ;)\nhttps://whatever/something/inventory/search?query=%\n. ",
    "akDeveloper": "$_SERVER['PATH_INFO'] will catch the path from a url like http://localhost/index.php/some/path. In this example will catch /some/path\nSlim uses urls in type of http://localhost/some/path so $_SERVER['PATH_INFO'] is not available.\nSo Slim must catch /some/path from $_SERVER['REQUEST_URI'] combined by $_SERVER['SCRIPT_NAME'] in case you have a base path. \nBy base path i mean that your web root is in a subdirecory. Ex. your web app is in http://localhost/webapp/ dir, so everything after this consider a path info like http://localhost/webapp/some/path, http://localhost/webapp/some/path?foo=bar etc.\n. ",
    "steelywing": "Thank you for answer =)\n. ",
    "jackcvr": "https://github.com/codeguy/Slim/blob/master/Slim/Slim.php#L1277\n. ",
    "trasher": "I do not know if it is possible, but something like that should be usefull to run unit tests on various routes I guess :)\n. It seems that Silex (and probably Pimple as well) will reach its EOL in 2018; so this is a good news Slim no longer rely on it :). Ha ok :) I've read the project was looking for a new maintainer some months ago... Did not know they've find one.\nAnyways, not relying on pimple is still a good thing ;). ",
    "awarche": "I still have the same problem after change #561:\nSlim Application Error\nThe application could not run because of the following error:\nDetails\nType: ErrorException\nCode: 4096\nMessage: Argument 1 passed to Twig_Template::render() must be an array, object given, called in /data01/virt39293/domeenid/www.opms.com.au/htdocs/web-application/opms/Slim/Extras/Views/Twig.php on line 99 and defined\nFile: /data01/virt39293/domeenid/www.opms.com.au/htdocs/web-application/opms/Twig/lib/Twig/Template.php\nLine: 244\nTrace\n0 /data01/virt39293/domeenid/www.opms.com.au/htdocs/web-application/opms/Twig/lib/Twig/Template.php(244): Slim\\Slim::handleErrors(4096, 'Argument 1 pass...', '/data01/virt392...', 244, Array)\n1 /data01/virt39293/domeenid/www.opms.com.au/htdocs/web-application/opms/Slim/Extras/Views/Twig.php(99): Twig_Template->render(Object(Slim\\Helper\\Set))\n2 /data01/virt39293/domeenid/www.opms.com.au/htdocs/web-application/opms/Slim/View.php(252): Slim\\Extras\\Views\\Twig->render('marine.html')\n3 /data01/virt39293/domeenid/www.opms.com.au/htdocs/web-application/opms/Slim/View.php(242): Slim\\View->fetch('marine.html')\n4 /data01/virt39293/domeenid/www.opms.com.au/htdocs/web-application/opms/Slim/Slim.php(742): Slim\\View->display('marine.html')\n5 /data01/virt39293/domeenid/www.opms.com.au/htdocs/web-application/opms/index.php(115): Slim\\Slim->render('marine.html', Array)\n6 [internal function]: {closure}()\n7 /data01/virt39293/domeenid/www.opms.com.au/htdocs/web-application/opms/Slim/Route.php(436): call_user_func_array(Object(Closure), Array)\n8 /data01/virt39293/domeenid/www.opms.com.au/htdocs/web-application/opms/Slim/Slim.php(1302): Slim\\Route->dispatch()\n9 /data01/virt39293/domeenid/www.opms.com.au/htdocs/web-application/opms/Slim/Middleware/Flash.php(85): Slim\\Slim->call()\n10 /data01/virt39293/domeenid/www.opms.com.au/htdocs/web-application/opms/Slim/Middleware/MethodOverride.php(92): Slim\\Middleware\\Flash->call()\n11 /data01/virt39293/domeenid/www.opms.com.au/htdocs/web-application/opms/Slim/Middleware/PrettyExceptions.php(67): Slim\\Middleware\\MethodOverride->call()\n12 /data01/virt39293/domeenid/www.opms.com.au/htdocs/web-application/opms/Slim/Slim.php(1251): Slim\\Middleware\\PrettyExceptions->call()\n13 /data01/virt39293/domeenid/www.opms.com.au/htdocs/web-application/opms/index.php(159): Slim\\Slim->run()\n14 {main}\n. Googling helped: must use the Twig view from the 'feature/no_static_views' branch of Extras.\n. ",
    "Sentence": "Yep, works with @awarche 's method, with latest Slim and Twig sources. Thanky.\n. ",
    "nubs": "Thanks!\n. Take a look at https://github.com/codeguy/Slim-Views.  It was a drop in replacement for me in place of Slim-Extras, although there are a few differences.\n. :smile_cat: \n. It looks like you got an extra ob_start in here.\n. There's a require-dev right above here - shouldn't it go in there?\n. ",
    "cbschuld": "Nick, this does not help your fight much but I am on CentOS 6.4 but using php5.4 and installing the php-mcrypt for 5.4 did solve the dependency for me and it installed w/o issue. //chris\n. @ptarjan what has your experience been running Slim apps via HHVM - any experience to share?  I am clearly asking in the wrong medium but more curious on your experience!  Thx//cbs\n. @ptarjan thx for the reply; I am going to put our app up on it in the next week & see how it goes... the performance increase sounds amazing - thx for your work on it\n. ",
    "jleck": "Something like:\n``` php\n// Store settings in container\n$container->set('settings', array(\n// Database Connection Details\n'db' => array(\n    'read' => array(\n        'database' => 'db',\n        'username' => 'username',\n        'password' => 'password'\n    ),\n    'write' => array(\n        'database' => 'db',\n        'username' => 'username',\n        'password' => 'password'\n    )\n)\n\n));\n// Register service to initiate ORM\n$container->singleton('db', function($container, $type = 'read')\n{\n    $settings = $c->get('settings')['db'][$type];\n    return new orm($settings);\n});\n// Retrieve ORM\n$container->get('db',  'read');  // New ORM using read DB\n$container->get('db',  'write'); // New ORM using write DB\n$container->get('db',  'read');  // Returns existing read DB\n$container->get('db',  'write'); // Returns existing write DB\n```\nHope that helps!\nEDIT: I realise you could do something similar by registering the DB twice, but this is the simplest way of explaining I could think of. Another use would be caching DB results. You could setup a closure which finds the company of the userId passed, and this would cache the result so a maximum of one query per user would be needed, no matter how many times you lookup the company :)\n. no problem! To be honest, I quite like the idea of registering multiple instead, atleast for services.\nphp\n$container->get('readDB');\n$container->get('writeDB');\nIMO thats better semantically. Still a useful idea anyway.\n. ",
    "shello": "Sorry, I made the PR too soon, and didn't select the correct branch.\n. @codeguy: Is the unit test function that I attached to issue #568 good enough? (see: https://gist.github.com/shello/6026460)\nI'm not sure it is because it couples \\Slim\\Http\\Cookies and \\Slim\\Http\\Headers to \\Slim\\Http\\Util.\n. Pull Request description updated because GitHub ate my \\ twice, making the description senseless.\n. ",
    "anoxic": "UPDATE:\nAfter examining the Twig Slim View at https://github.com/codeguy/Slim-Views/blob/master/Twig.php, I have found just changing $this->$data to $this->all() fixes the problem.\nphp\nreturn $mustache->render($template, $this->all());\n. I tried casting it as an array, and it still breaks. What is the difference between $this->data and $this->all()?\n. var_export($this->all()) yields:\nphp\narray (\n  'site_view' => true,\n  'main_view' => true,\n)\nbut var_export((array)$this->data) (in 2.3.0) yields:\nphp\narray (\n  '' . \"\\0\" . '*' . \"\\0\" . 'data' => \n  array (\n    'site_view' => true,\n    'main_view' => true,\n  ),\n)\nWhere in 2.2.0 var_export((array)$this->data) was the same as what var_export($this->all()) yields now.\nIt is also possible to get the correct data by using $this->data[\"\\0*\\0data\"] right now, but it seems quirky. At any rate, $this->all() does the job.\n. ",
    "solarissmoke": "@codeguy I don't see how I can access the relevant properties of the Request (i.e., isHead()) from inside the Response class?\n. I'm using mod_php with rewrite - but I don't think that is relevant? I can also reproduce with index.php/test/ type URLs.\nThe issue is this block of code which matches the request both with/without trailing slash when the pattern ends in a slash:\nphp\nif (substr($this->pattern, -1) === '/') {\n    $patternAsRegex .= '?';\n}\n. Did some further digging and found the relevant change (the one I cited above isn't the problem). In version 2.1, the Router::dispatch function had this:\nphp\nif (substr($route->getPattern(), -1) === '/' && substr($this->resourceUri, -1) !== '/') {\n    throw new Exception\\RequestSlash();\n}\n... which no longer exists in the Route::dispatch() in the latest code (the function has moved from Router to Route). In fact the RequestSlash exception appears to have been removed completely, so it seems this change was deliberate...\n. ",
    "mattzuba": "0efd38f specifically changed these from protected to public - I'd say the desired functionality is to access them directly.\n. Have you looked at the ContentType tests to see how that middleware is intended to be used (getBody(), not params())?  https://github.com/codeguy/Slim/blob/master/tests/Middleware/ContentTypesTest.php\n. It's already there...\nhttp://docs.slimframework.com/#Route-URL-Rewriting\n. Slim doesn't force you to use it's built in error handler - the beauty of middleware is that you can set your own if you want.  Create a middleware class called 'ErrorHandler' and in it's call method, call set_error_handler to set your own.\n. ",
    "nicosomb": "Sorry ...\nI have to change public $parserDirectory = null; into public $parserDirectory = 'Twig'; in vendor/slim/views/Slim/Views/Twig.php file;\n. It's better to do this in your app : \nphp\n$view = $app->view();\n$view->parserDirectory = 'Twig';\n. ",
    "ersmtp": "For me parserDirectory is NOT a valid parameter inside of Slim Views .. ?\n. ",
    "vnikodijevic": "Change your composer.json to include twig into repository:\n{\n    \"require\": {\n        \"slim/slim\": \"2.*\",\n        \"slim/views\": \"0.1.*\",\n        \"twig/twig\": \"1.*\"\n    }\n}\nRemove code from Slim/Views/Twig.php :\nif (!class_exists('\\Twig_Autoloader')) {\n    require_once $this->parserDirectory . '/Autoloader.php';\n}\nYahoooo - composer's autoloader loads twig's Autoloader.php class.\nCheers, \nVukasin\n. ",
    "sutonium": "Another fix is using package \"slim/views\": \"0.1.*\"\nand the code example perhaps like this\n```\n$twig = new \\Slim\\Views\\Twig();\n$twig->parserOptions = array(\n    'charset' => 'utf-8',\n    'cache' => realpath('../templates/cache'),\n    'auto_reload' => true,\n    'strict_variables' => false,\n    'autoescape' => true\n);\n$twig->parserExtensions = array(\n    new \\Slim\\Views\\TwigExtension(),\n);\n$app = new \\Slim\\Slim(array(\n    'templates.path' => '../templates',\n    'log.level' => 4,\n    'log.enabled' => true,\n    'log.writer' => new \\Slim\\Extras\\Log\\DateTimeFileWriter(array(\n        'path' => '../logs',\n        'name_format' => 'y-m-d'\n    )),\n    'view' => $twig\n));\n$app->get('/', function () use ($app) {\n    $app->render('index.html');\n});\n```\n. ",
    "zulrang": "Are you using mod_php, rewrite, php-fpm?\nOn Sun, Aug 4, 2013 at 3:07 AM, Samir Shah notifications@github.com wrote:\n\nI'm having a bit of an issue with trailing slash handling in routes which\nI think is a regression. I think it was introduced in version 2.2.0.\nMy route is defined as follows:\n$app->get('/test/', function() use ($app) {\n    echo 'test';});\nThere is an explicit trailing slash in the route.\nIn version 2.1.0, a request for /test is properly redirected to /test/.\nHowever in version 2.3.1 /test is not redirected and a 200 response is\nserved (as well as for /test/). The first request should be redirected to\nthe canonical path defined in the route.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codeguy/Slim/issues/592\n.\n. If you're not getting a Slim error, than the problem is how you have your\ndirectories through Apache set up.  I'm assuming your documentRoot is what\nyou mean by -src, and your .htaccess is in that directory?\n\nOn Wed, Jan 1, 2014 at 12:51 PM, Josh Lockhart notifications@github.comwrote:\n\nAnd this still fails if you remove the trailing \"/\" from your Slim route\npaths? i.e. change:\n$app->get('/hello/', function () {\n    echo \"Hello\";\n});\nto\n$app->get('/hello', function () {\n    echo \"Hello\";\n});\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codeguy/Slim/issues/720#issuecomment-31426753\n.\n. Why aren't you using the new Resource Locator for this?\n\n```\n$app->container->singleton('db', function () {\n    return new PDO('sqlite:database.db');\n});\n$app->get('/hello/:name', '\\Greeting:sayHello');\nclass Greeting {\n    public function __construct() {\n        $this->app = Slim::getInstance();\n    }\npublic function sayHello($name) {\n    $pdo = $this->app->db;\n}\n\n}\n```\n. The Singleton was just an example in using the Resource Locator.\nIs it the explicit dependency \"contract\" you're trying to achieve?  \nUsing a service locator is still just as testable:\n$mockContainer['dependency'] = $mockObject\nSorry if my questions sound silly.   I'm still trying to learn some of the better practices of using Slim.\n. As opposed to the \"anti-pattern.\"  Got it.  Carry on.\n. My personal preference is to inject the container into the constructor, but\nleave the option to use your own container (Pimple, etc.) More flexibility\nand test-ability.\nOn Mon, Feb 16, 2015 at 8:32 AM, Daniel Sims notifications@github.com\nwrote:\n\nThe goal with #822 https://github.com/codeguy/Slim/pull/822 is so that\nyou can decide what gets injected into your controller. All you have to do\nis set a config variable. The first option is to load controllers as they\ndo right now, with nothing injected in the controller. The second option is\nto pass the Slim DI Container into the constructor like @zulrang\nhttps://github.com/zulrang suggested, but it's injected instead of you\nhaving to use the getInstance method. This makes it easier to debug. The\nthird option is to load objects from your DI Container directly. There are\nsome examples with the PR, and I'd appreciate any feedback. Thanks guys.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/codeguy/Slim/issues/977#issuecomment-74508413.\n. \n",
    "mattcg": "@silentworks I think this issue should be reopened as it is indeed a regression.\n. @tuupola I agree that there should be a config for this.\nIf strict routing is turned on, you'd get a 404 when requesting /testand the route is /test/ (and vice-versa).\nIf it's turned off, you'd get a 302 (because literally, the resource is \"Found\" under a different URI).\n. ",
    "mmartincevic": "What happens if you run your application from console? Same issue appears.\n. ",
    "markopavlovic": "Yes I have a part where I need config and middleware from slim once running from console. So I would also need this.\n. ",
    "brod-ie": "Sure, but I found this hook helpful in our API (lets a GET variable take priority over request header's method type for easier CORS):\n$app->hook('slim.before.router', function () use ($app) {\n    if ($method = $app->request->get('method')) {\n        $app->environment()['REQUEST_METHOD'] = strtoupper($method);\n    }\n});\nThere's no other way to set the request object's method therefore this seems the most appropriate approach? Unless I'm missing a request->setMethod() style setter? (Can't see anything in the documentation).\n. @amenadiel GET vars are essential to the functioning of most web apps which means it's not an acceptable omission. Remember: there's people out there that no less than me and you; we can't expect people to dig around the web to find a solution to something this trivial.\n. Sure, where is the doc's repo?\n. No problem, Slim is awesome :)\nJust sent that PR now.\n. ",
    "marionebl": "@designermonkey \nSorry, I am not sure what you want to say.\nDo you want to say the mismatch is acceptable and should be handled by every single dev rearranging the route definitions?\nOr do you think the problem should be handled by getting the \\Slim\\Slim::Router::routes array ordered by their string length?\n. Ok, got it. Thank you for explaining! \n. Had some thought on this and for me it is about wether the Slim::Slim::$request_method is to be thought of taking a regular expression as first parameter or a route string with placeholders matching the arguments in the given callback function. \nIf it is the common view that the passed string should be seen as regex, I'll close this pull request. Implementing devs can solve this by passing /^me$/and /^message$/ instead of /me/and /message/.\nIn this case the routing docs should get some hint about this, though.\n. BAD me did the first pull request without setting up the unit test env. \nThe refactored version of this does the same concerning the the issue I want to solve. \nAs a bonus it does not produce any new errors according to my local unit tests. \n. ",
    "hoopyfrood": "+1\n. ",
    "endel": "Hey, the feature wasn't released yet? I'm running version 2.3.5 but this isn't working. Thanks!\n. @codeguy nice! I didn't know about that. Thanks :)\n. Agreed. :+1: \nAnybody who is not using Composer yet should definitely start to use it.\n. ",
    "melbichon": "Please, can you add this feature in next release ?\nSeems branch merging did not include commits.\n. ",
    "piotr-cz": "I'd really appreciate this feature.\nIt's a must when using language prefix as a segment in routes.\n. Thanks @garyyeap, but besides pages with language prefix, I've create an API that's language agnostic. That's why I'd prefer to use groups, it's the cleanest solution.\n. I wonder if this could go into 2.x release since here's the code and test are passing\n. Depends on the point of view. For me it's a bugfix ;)\n. Under the pull request descriptions it says slimphp:develop\n. I'd say that the context of develop branch has changed since this PR. It was more like minor version develop (2.x) and now it's like major future version develop (3.x)\n. If Slim 3 will use nikic/fast-route, similar PR won't be necessary as it's already built in there.\nHowever Slim 2 (ATM only stable release) IMHO deserves having this fixed. But I won't bug anymore\n. Is such behaviour on the roadmap (ie. v3.1)?\n@gisheri: Maybe middleware in Route groups can help you here (actually it may make more sense):\nphp\n$request->getAttribute('route')->getArgument('id');\nApparently it's possible to use router within the middlewares only with the determineRouteBeforeAppMiddleware set to on, but somehow it always works for me.\n. Actually I'm not so sure about it anymore.\nWe shoud evaluate if there are any use-cases when using Group Middleware wouldn't be a better option (given that Router instance may be accessible within Middleware in 3.0 stable).\nBut some note about it should be in docs for sure, this is so common syntax in other frameworks.\nMy example:\nI'm using route groups for muliti-language content and within the group I'd like to set the flag of language code. I decided to do it in the middleware, where I'm already loading language strings too.\n. So what is the recommended place to set the error handler?\nI'd like to catch the Catchable fatal error now which is not being catched by errorHandler defined in container because it's not an exception but error.\n. Okay, I've added NativeErrorHandler middleware, but cannot add the restore_error_handler function there.\nNevertheless the errorHandler registered in container should be called exceptionHandler\n. This concept is also great for future (4.x and so)\n. @lalop Usually you have to choose between more stable and up to date\n. How about putting the migration guide on wiki?\n. Middleware interface would be helpful, but I like the option to define custom method instead of __invoke:\nphp\n$app->add('menumanager:run');\nThis is helpful when storing Middleware as a service inside the container. By default Pimple checks if the __invoke method is available and passes container as an argument.\n. I think in PHP 5.4+ method always returns $rawData without applying a filter, which is correct\nbtw, this applies to 2.x branch\n. I'm for keeping min. requirement of php 5.4, at least until the codebase requires higher version.\nAs others pointed out, 5.4 is supported by the PHP core team till 14 Sep 2015, so ATM it is still actively supported and security support ends on 10 Jul 2016.\n. true\n. It's still possible to install Slim3 on a local machine with PHP 5.5+ and deploy on server running PHP 5.4.\n. What are the benefits?\n. Thank for clarification, I thought it's just like wares is the plural for ware.\n. This pattern may be already used on group routes in v3-beta.2, too:\n``` php\n$app->group('/{locale:en|pl}', function() use ($app) {\n$app->get('', 'App\\Action\\HomeAction::dispatch');\n    ->setName('homepage');\n\n});\n``\n. Good catch.\n. For the exact same reason the check for secure connection shouldn't be based on theHTTP_X_FORWARDED_PROTOheader inside the [Uri`](https://github.com/slimphp/Slim/blob/8bd1002bb69fc1a0c354e72c3195bc56d7dd22c1/Slim/Http/Uri.php#L161) class (more details are here).\nAnyway base path resolution is wrong determining when using server rewrites (the L flag in .htaccess file).\nThere should be an option to define base path (and possibly secure connection) as an application setting which can be read from an environment variable.\n. IMHO this is a security issue, described in details here.\nI see two ways around it:\n- Manually set if connection is secure (using environment variables).\n- Add an option to set if headers are trusted (as seen in Symfony2/HttpFoundation/Request)\nDeveloper is able to find out whether server is using proxy, and so may set environment variable in .htaccess file nginx config, redirect to https or decide to enable trusted headers.\n. I know. The point is how the base path resolution works now.\nImage I'm using (invisible) server redirect to redirect http://foo.org/oldsite to http://foo.org/newsite on the server. The resolution mechanism assumes that request uri overlays physical path which is not correct.\nSo the user will see http://foo.org/oldsite in browser, $basePath will be set to '' and $virtualPath to newsite\n. @akrabat Yes, but if I'd like to use any routes in application I'd have to resolve the $virtualPath in middleware.\n. Yes for no routes, but not for http://foo.org/oldsite/about\n. @akrabat \nI'd like to see is that the method would respect project uri set manually in the container settings.\nBut I don't mind closing the issue ATM either\n. I'll prepare PR, but it may take some time until I get some time\n. Using frames is an unseen practice these days unless you are developing a Facebook app.\n. Note that this is not available in 3.0.0-RC1.\n. At first I thought about that too, but what would we pass as an exception?\nFor notFoundHandler a NotFoundException and for notAllowedHandler a NotAllowedException? In both cases it doesn't mean that something bad and unpredictable (exceptional) happened, in contrast to errorHandler.\n\nThere is actually a NotFoundException but it's used when trying to access non-existing objects in container\n. I was wrong and things have changed since RC1. Container is now throwing a ContainerValueNotFoundException and the NotFoundException is available in the App code block calling notFoundHandler.\nOne advantage I see of passing either NotFoundException or MethodNotAllowedException to appropriate handler is when it would carry on suggested http status code (404, 405).\n. I'd be for strtouppering methods. I usually use uppercase only for constants and consider it good practice.\n. You may also set variables into DIC, given that DIC is passed into middleware's constructor.\nThis is how I determine current locale inside the middleware, set it into settings array and then use in controllers/ actions to load appropriate items.\n. This repository is a library (installed into /vendor/slim/slim folder), not a deployable application with a public folder.\nWhile one don't have to use composer and can put everything into a public folder, it should be considered is a bad practice. I see no reasons to expose metadata files like composer.json, CONTRIBUTING.md to public access other than to show which architecture that was used to build an app.\nBut I think that the slimphp organisation should have own Slim v3 skeleton app repository, similar to @akrabats work, like it has for Slim v2\n. Why middleware should have access to the container?\nI usually register middlewares within container in the app/dependencies.php file and pass just things it needs like so (in this case it's the debug and environment option):\nphp\n$container->register(\n    new App\\Middleware\\NativeErrorHandler(\n        $container['settings']['app']\n    )\n);\nand then in in app/middleware.php\nphp\n$app->add('nativeErrorHandler:run');\nIf you pass whole container, there is no dependency graph - you have no idea what class is using at all unless you inspect it's code.\nI know it's tiring to define dependencies for each container item, but it's only the case when not using DI that supports autowiring.\n. Okay, this makes sense.\nI see there are lot of questions on the support forum about accessing container data from within middleware, maybe a blogpost on Slim framework website could be helpful too.\n. In #1571 I suggested an option to set base URI manually via config option (which in turn may be read from .env file), but still didn't have time to prepare a PR.\n. @vlakoff When using URL rewrites (.htaccess), auto-detection fails and it's not possible to set base URL manually.\n. @silentworks How can I set the baseUrl manually?\n. I like it, but honestly I don't think changing native behavior of Exception::getTraceAsString is worth the effort.\nIn other words, it would make codebase more complex for a little advantage.\nIf are into more fancy exception messages, I can recommend whoops!, it should be possible to use it as an error handler instead of native one.\n. You are right, full path disclosure is a security concern, but probably just like showing up whole stack trace.\nIn my application I'm using a debug and environment settings to decide whether to show user-friendly http page or default stack trace. Maybe similar strategy should be used in Slim core.\nI mean for the end-user probably a message: Something bad happened, please contact admin@site.com would be more beneficial.\n. I like gitter.im.\nIt\\s clean, you may log in with GitHub account and supports code formatting.\n. I don't like current state too, but shouldn't settings be contained in application container?\n. IMHO separation is important in sense that settings and DI configuration should not both come from settings.php file (see my PR https://github.com/slimphp/Slim-Skeleton/pull/41).\nBut settings data should be accessible trough container, as other components (Controllers, Services) need to access it.\nFor example creating Piwik tracker service:\n``` php\n$container['PiwikTracker'] = function ($c) {\n$piwikSettings = $c['settings']['piwik'];\n\nreturn new \\PiwikTracker(\n    $piwikSettings['idSite'],\n    $piwikSettings['apiUrl']\n);\n\n}\n```\nSo what about modified https://github.com/slimphp/Slim/issues/1923#issuecomment-231848142\nphp\n$app = new App($diConfig)\n              ->setSettings($settings);\n. I'd like to apply middleware after error handler is triggered. \nMy use case is adding CORS headers in REST API.\nAt this moment I can easily add middleware to group routes, but when returing response Not Found, I have to add CORS headers within error handler.\nI'm mentioning it here is because I believe that wrapping middleware around error handlers makes more sense to me than wrapping error handlers around middleware.. I use the __invoke method inslide the CLI front controller\nphp\n// ...\necho $app($request, $response)->getBody();. Out of interest, why the setting determineRouteBeforeAppMiddleware = true isn't set by default?. Thank you.. BTW, container-interop is now officially deprecated in favor of PSR-11 php-fig/container. Travis failed on PHP:hhvm build:\nHHVM is no longer supported on Ubuntu Precise. Please consider using Trusty with `dist: trusty`.. @akrabat I've rebased, see https://github.com/piotr-cz/Slim/commits/29d517cfb98df8a173088d1ed69b955bf2b29799/.travis.yml\nNo idea why it doesn't show up, just as a notice after https://github.com/slimphp/Slim/pull/2244#issuecomment-308683978. I need a hand here:\nWhat is the proper way to create an OPTIONS mock request?\nThe getRequest method may receive a method, but it doesn't use it.. @akrabat It looks like it's Ubuntu Precise, at least from details of this failed job: https://travis-ci.org/slimphp/Slim/jobs/242799904.\nAnd in the config \n\"dist\": \"precise\",\n\"os\": \"linux\". Can I trigger tests somehow again on other PR?. thank you. It's a convention that javascript libraries (jQuery, MooTools) used to set such header to every request. Make sure you are sending request with proper content-type that may be auto-parsed by request, ie. application/x-www-form-urlencoded.\nAlso you in your example you are reading variables $username and $password two times.. Travis job failed for php 5.5 because of\n\nNo output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with the build itself.. Why not keep heredoc format? it's so readable\n. Maybe you can add a line for future reference here\n@see https://www.w3.org/Protocols/rfc2616/rfc2616-sec2.html#sec2.2. \n",
    "garyyeap": "Hi @piotr-cz , if you want to use with language prefix, here is an idea of middleware implementation that  no longer need to include language prefix param in any routes.\n```\nclass I18N extends \\Slim\\Middleware\n{\n    public function call()\n    {\n        $app = $this->app;\n        $paths = explode('/', $app->request()->getResourceUri());\n        $locale = $paths[1];\n        $currentUrl = '/'.join(array_slice($paths, 2), '/');\n        $localeFile = $app->config('localePath') .'/'. $locale .'.yml';\n    if(!file_exists($localeFile)) {\n\n        if($locale != '') {\n\n            try{\n                $app->notFound();\n            } catch(Exception $e) {}\n\n            return;\n        }\n\n        $preLocale = $app->getCookie('locale');\n        $locale = $preLocale ? $preLocale : $app->config('defaultLocale');\n\n        try{\n            $app->redirect('/'.$locale);\n        } catch(Exception $e) {}\n\n        return;\n    }\n\n    $app->environment->offsetSet('PATH_INFO', $currentUrl);\n    $app->setCookie('locale', $locale, mktime().time() + 60*60*24*100);\n    $this->next->call();\n}\n\n}\n```\n. Is this getting merged? if does, I will send another PR for 3.x on this weekend\n. ",
    "amcsi": "Please look at #614\nFor this pull request I accidentally compared with the master branch.\n. @designermonkey Yes they would. I did want to use this colon system for 2 reasons though:\n1. I need to differentiate between mandatory parameter and mandatory value. If the value doesn't have a colon, it means the query param has to match that specific key and value. If the value is a colon, that just means it has to be set, but can be any value.\n2. This will allow you allow for clean urls and query urls at the same time if you use the same callback for both types of routes and only check the params for any dynamic values. Or it allows for easy porting of your current project from using clean urls to query parameter urls if it turns out your live hosting site doesn't allow you to use .htaccess files :D\n. But if you're on an environment where you cannot use pretty URLs, you'd basically be having Slim with the inability to use routing at all.\nBut it's your framework. I have no voice in this.\n. Wow, I never realized you could do that with rewriting off! OK, in that case this merge request really isn't needed.\n. Oh OK!\n. ",
    "hrbwaxdoll": "thank u reply~\ni changed php.ini \u201ctimezone=Asia/Shanghai\u201d ~ it\u2019s work!\n\u5728 2013\u5e749\u670817\u65e5\uff0c\u4e0b\u53489:13\uff0cJosh Lockhart notifications@github.com \u5199\u9053\uff1a\n\nWhich branch are you working from?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "charlie-s": "I'd like to get involved with development and this could be a good place to get started. \n. Thanks, found it @ https://github.com/designermonkey/Slim/tree/feature-interfaces.\n. Just out of curiosity, do you have any .htaccess rewrite rules in play? What happens if you redirect to \"hello/me\" instead of \"/hello/me\"?\n. I'm digging into the code and commits now to get the hang of things. Looking forward to it.\n. Nice :) I'm looking at Request and Response next. Anywhere else you'd recommend I start? You can also email me, it's listed on my profile page.\nLast question for the moment \u2013 all of this is being done against Slim 3.5. Should we port this stuff to the 4.0 codebase? \n. My thoughts on the Collection class \u2013 even though it's a core component and an interface for it might seem like unnecessary cruft, I always like that interfaces provide a summary of the contract between one class and other classes that extend or use it. \n. Sorry, I meant 2.3.5 and 2.4.0. Not enough coffee apparently. \nI was just comparing a local pull of 2.4.0 where I have class Slim (Slim/Slim.php) instead of App (Slim/App.php), it no longer extends \\Pimple, etc. But after browsing through the commit history on the master branch, I'm a bit confused because your branch shows 2.3.5 but has App.php, my pull of 2.4.0 has Slim.php, but browsing the repo's latest commits shows it's currently App.php.\nI'm thinking this is all because the latest work is being done on the develop branch which hasn't changed any version tags since 2.3.5 \u2013 is that correct or am I missing something else? \nEnjoy your evening :)\n. Regarding \\Slim\\Http\\Request \u2013 it looks to me like the interface you defined works with all interactions within Slim.\n. \\Slim\\App.php uses \\Slim\\Http\\Response::getMessageForCode($status). Should this then be accounted for in \\Slim\\Interfaces\\Http\\ResponseInterface? I realize that historically putting a static method in an interface doesn't make a lot of sense, but as of PHP 5.3 with late static bindings you can do:\n$foo = new Foo();\n$foo::someStaticMethod();\nso this is potentially helpful to have in the interface.\nOtherwise I also saw this interface matching up with \\Slim\\Http\\Response's usage.\n. Can I commit to this branch or would I have to fork and send PRs to you? I'm happy to pass commits along for your review. Also started on the Container interface and could share that.\n. Thanks! Just pushed initial work on the CollectionInterface. \nThe encrypt() / decrypt() methods are used in App, and both require that the class implements \\IteratorAggregate. Is there a way to define an interface that must also implement other interfaces, or do we need to consider an abstract class for Collection?\nSomething like:\n```\ninterface CollectionInterface\n{\n    // ...\n}\nabstract class AbstractCollection implements \\Countable, \\IteratorAggregate\n{\n    public function count()\n    {\n        return count($this->data);\n    }\npublic function getIterator()\n{\n    return new \\ArrayIterator($this->data);\n}\n\n}\nclass Collection extends AbstractCollection implements \\Slim\\Interfaces\\CollectionInterface {\n    // ...\n}\n```\nI could be way off, just thinking.\n. Just fixed the issue that I introduced between Slim\\Interfaces\\CollectionInterface and Slim\\Collection's replace() method. I should have ran phpunit before I pushed but I wanted to get the code up for you to see. \nThe abstract thing could well be overkill, but after looking at how the Collection class is iterated over in the encrypt() / decrypt() and such, it seems like you may have to add an abstract class that implements IteratorAggregate, Countable, and potentially handles encrypt() and decrypt(), or just ignore them all from an interface perspective. That maybe defeats the purpose since they are called from App and elsewhere... which all goes back to your first point about Collection not really requiring an interface.\n. +1 to avoiding abstracts; keep it slimmer :)\n@designermonkey that sounds great. I can play with the CollectionInterface and push some code for you to review.\n. Regarding Request, do you think the interface should require the ->is{Method}() methods? (e.g. isPost())? Also stuff like getQueryString(), getProtocol()?\n. Can't we extend multiple interfaces in an interface? e.g.\ninterface CollectionInterface extends \\ArrayAccess, \\Countable, \\IteratorAggregate\nI honestly haven't used Countable and IteratorAggregate before, and have only touched ArrayAccess on occasion, but the methods they call don't seem to be very complicated:\npublic function count()\n{\n    return count($this->values);\n}\n...\npublic function getIterator()\n{\n    return new \\ArrayIterator($this->values);\n}\netc. The only way to tackle this that I'm aware of would be an abstract class.\nAlso, is it odd that protected $values = array(); is declared in Pimple, but CollectionInterface doesn't extend Pimple and $this->values is always assumed to at least be an empty array?\n. Apparently interfaces can extend multiple interfaces, but classes certainly cannot. Check out example 3 @ php.net: http://php.net/language.oop5.interfaces#language.oop5.interfaces.examples.ex3\nYou're absolutely correct, it can't extend Pimple. I think I was just trying to illustrate that the interface doesn't require that property, so in the event that someone uses the CollectionInterface without Pimple they've got an object that begins throwing lots of errors because $this->values isn't set.\n. Fair point! I guess I'm looking at count(), getIterator(), etc., and was stuck in the mindset that those would be defined elsewhere and therefore the class would depend on the values property. I think you're spot on and it's a moot point.\n. Initial tests here: https://github.com/csdco/Slim/commits/flash-test\nMostly matches the previous Flash test, updated for syntax, methods, \\Slim\\Session, etc. All tests passing, but the session usage isn't quite right in the 3rd and 4th tests. I need to follow @codeguy's message from https://github.com/codeguy/Slim/issues/713 to mock the Session dependency and give that a go.\n. Okay, refactored the Flash test to use Mockery and all are passing:\nhttps://github.com/csdco/Slim/commit/99b8ca9e830af46b897769716099aa189a4365ae\nhttps://travis-ci.org/csdco/Slim/jobs/16387322\nA couple of things...\n1) I wanted to get the latest code from the develop branch, so I followed the accepted answer at http://stackoverflow.com/questions/7244321/how-to-update-github-forked-repository to rebase develop into my flash-test branch. This means my fork now has a big merge commit (https://github.com/csdco/Slim/commit/2a65c13b0b85a22d06d28c78991a5ec1c62f5f15). Is that the recommended way to do it, or does it muck up an eventual merge back into the primary repo?\n2) SessionHandlerInterface is missing a semicolon after the namespace declaration (https://github.com/codeguy/Slim/blob/develop/Slim/Interfaces/SessionHandlerInterface.php). This is in the current develop branch. My tests obviously wouldn't run without it, but I didn't include it in my commit since that fork should be feature-specific.\n@codeguy Mockery is cool \u2013 thanks for suggesting I write the tests with it. Implementing the Session class with a dummy dataObject / \\ArrayObject is a great idea, too.\n. @designermonkey Any idea on (2) above? How are tests running successfully for other folks if https://github.com/codeguy/Slim/blob/develop/Slim/Interfaces/SessionHandlerInterface.php has that syntax error? (I'm really just curious.)\n. Thanks Josh, I've added that and submitted via https://github.com/codeguy/Slim/pull/724. Will continue the conversation there.\n. Hey @codeguy, I was playing with writing the test for the Flash class (https://github.com/codeguy/Slim/issues/713) but am having a little trouble with the Session class. Probably what you're referring to above \u2013 session values are nested a level deep (in $_SESSION['slim.session']['slim.flash']['foo'] for example) once the save() method is run on the Session object. Is that what you're referring to? Need any help?\n. The Session test is in place in develop, correct? Should this be closed?\n. Should this be as simple as:\nif (!interface_exists('SessionHandlerInterface')) {\n    interface SessionHandlerInterface\n    {\n        public function close();\n        public function destroy($session_id);\n        public function gc($maxlifetime);\n        public function open($save_path, $name);\n        public function read($session_id);\n        public function write($session_id, $session_data);\n    }\n}\n?\n. \"When PHP 5.3 support is dropped, so will the interface be.\"\nDo you know if Slim 3 is 5.4 only? I would certainly prefer that.\n. ",
    "erizocosmico": "Is the access to $app really needed in a controller? If not, as anho stated it should be optional to extend from the base controller.\nWhen you call the method from the specified controller you can check if the controller is an instance of \\Slim\\Controller and if it is you set the $app. If it isn't you don't do anything.\n```\n// 'Books::bookList'\n// $controller is 'Books'\n// $method is 'bookList'\n$controllerInstance = new $controller();\nif ($controllerInstance instanceof \\Slim\\Controller)\n    $controllerInstance->setApp($app);\ncall_user_func_array(array($controllerInstance, $method), array($args));\n```\nThat way extending from \\Slim\\Controller is optional.\n. I think using : for non-static methods and ::for the static ones is a great idea too. Maybe a little confusing for the developer to distinguish between the two of them at quick glance since it's the same symbol.\nAnyway, like @gmanricks said, that's a really elegant solution. +1 to that.\n. Maybe some tutorials about how to actually build something you can use like a simple blog, a simple twitter clone or something like that.\n. @ijy I'd like to see some guidance at that point too.\n. https://github.com/codeguy/Slim/blob/master/Slim/Slim.php (line 549)\nIt's still there.\n. I'm going to try reproduce it. Can you post the full error message and the contents of your composer.json?\n. It's weird. I don't get any error.\nTry with:\n```\n{\n    \"require\": {\n        \"php\": \">=5.3\",\n        \"phpunit/phpunit\": \"\",\n        \"slim/slim\": \"2.3.\",\n        \"leafo/lessphp\": \"\",\n        \"mustache/mustache\": \"\",\n        \"robmorgan/phinx\": \"*\",\n        \"eridal/prelude\": \"master-dev\"\n    },\n\"autoload\": {\n    \"psr-0\": {\"\": \"server/class\"}\n},\n\n\"config\": {\n    \"vendor-dir\": \"server/vendor\"\n}\n\n}\n```\nMaybe the error you get is because of the Slim version (your composer installed 2.2.0 from cache).\n. I'm not sure but I think it's the version that composer has locally cached. Since you requested slim >= 2.*, 2.2.0 satisfied that condition and therefore composer didn't install a newer version.\nEdit: nope, it looks like it's the version you have installed.\n. @eridal you get that problem because you don't have the php mcrypt extension which slim 2.3.X requires.\nIf you're on Ubuntu it's just sudo apt-get install php5-mcrypt\n. It doesn't have anything to do with the redundant code but shouldn't be checked at the top of the function that the remote or local resource exists and throw an exception or something if it doesn't?\nI mean something like:\n``` php\n/\n     * Send a File\n     \n     * This method streams a local or remote file to the client\n     \n     * @param  string $file        The URI of the file, can be local or remote\n     * @param  string $contentType Optional content type of the stream, if not specified Slim will attempt to get this\n     * @api\n     */\n    public function sendFile($file, $contentType = false) {\n        // We don't want that warning if the file does not exist\n        @$fp = fopen($file, \"r\");\n        if ($fp === false)\n            throw new \\RuntimeException(\"Requested file at '{$file}' does not exist.\");\n        $this->response->stream($fp);\n        if ($contentType) {\n            $this->response->headers->set(\"Content-Type\", $contentType);\n        } else {\n            if (file_exists($file)) {\n                //Set Content-Type\n                if ($contentType) {\n                    $this->response->headers->set(\"Content-Type\", $contentType);\n                } else {\n                    if (extension_loaded('fileinfo')) {\n                        $finfo = new \\finfo(FILEINFO_MIME_TYPE);\n                        $type = $finfo->file($file);\n                        $this->response->headers->set(\"Content-Type\", $type);\n                    } else {\n                        $this->response->headers->set(\"Content-Type\", \"application/octet-stream\");\n                    }\n                }\n            //Set Content-Length\n            $stat = fstat($fp);\n            $this->response->headers->set(\"Content-Length\", $stat['size']);\n        } else {\n            //Set Content-Type and Content-Length\n            $data = stream_get_meta_data($fp);\n\n            foreach ($data['wrapper_data'] as $header) {\n                list($k, $v) = explode(\": \", $header, 2);\n\n                if ($k === \"Content-Type\") {\n                    if ($contentType) {\n                        $this->response->headers->set(\"Content-Type\", $contentType);\n                    } else {\n                        $this->response->headers->set(\"Content-Type\", $v);\n                    }\n                } else if ($k === \"Content-Length\") {\n                    $this->response->headers->set(\"Content-Length\", $v);\n                }\n            }\n        }\n    }\n    $this->finalize();\n}\n\n```\nIt's pointless to stream false to the browser.\n. Yes, but even if it is a remote URI $fp value will be false if the remote URI doesn't exist and currently this is not checked anywhere in the code.\n. It would be great to be able to do that but according to travis the method bindTo does not exist https://travis-ci.org/codeguy/Slim/jobs/13025874 (it was added in php 5.4). The tests also fail for 5.4.\n. I tried to reproduce your error but I don't get your results.\n``` php\n$app->get('/', function () use($app){\n  $app->render('index.html');\n})->name(\"HomePage\");\n$app->get('/hi/testing', function () use($app){\n  $app->render('index.html');\n})->name(\"Link1\");\n```\nhtml\n{%\n set links = {\n  'Home': urlFor('HomePage'),\n  'Link1': urlFor('Link1'),\n  'Link2': urlFor('HomePage'),\n  'Link3': urlFor('HomePage')\n }\n%}\n{% for key, link in links %}\n <li>{{ link }}</li>\n{% endfor %}\nAnd I get:\n/\n/hi/testing\n/\n/\nNo escape backslash is added for me.\nVersions:\ninstalled:\n  slim/slim  2.3.4   Slim Framework, a PHP micro framework\n  slim/views 0.1.0   Twig View Parser package for the Slim Framework\n  twig/twig  v1.14.1 Twig, the flexible, fast, and secure template language f...\n. What is your Slim version?\n. It makes sense. +1 to require it via composer.\n. Woah, sorry, I completely forgot about that. Can you reopen the PR? I'd provide an unit test with this right now.\n. Yep, I'll re-submit a new PR in a few minutes.\n. Nope, notFound and error currently don't support the new style controllers.\n. @codeguy -> https://github.com/codeguy/Slim/pull/752\n. @calmdev According to the tests it should work with instance methods too. Can you give me an example where it doesn't work? I'll take a look at it later.\n. @calmdev You were right. Somehow php was treating the arrays in error and notFound as callables. It's weird because it doesn't with \\Slim\\Slim:defaultNotFound. Anyway, I fixed it and rewrote the tests.\n. How about a base controller? Copy and paste that snippet on every controller it's not a very elegant solution to this problem. \nThis issue, however, needs to be addressed. Currently there is no way to pass the instance of the app to the controller. Well, there is...\nphp\npublic function myMethod()\n{\n    $app = \\Slim\\Slim::getInstance();\n}\nThis approach has the same problem I see in your approach. You have to copy and paste that line in every method (or class in your approach).\nI know a base controller goes against the Slim concept but, IMHO, it's really necessary. I think it's better extending a base controller than repeating over and over the same lines of code.\nSomething like:\nphp\nclass BaseController\n{\n    protected $app = null;\n    public function setApplication($app)\n    {\n        $this->app = $app;\n    }\n}\nIt would be checked that the controller class has the method setApplication with reflection (or whatever you can think of to check that) so it wouldn't be compulsory to extend the base controller.\n. According to your code the $app parameter is always passed to the controller class. Your controllers will always have to have a constructor that accepts that parameter. That does dictate how you structure your own controller classes. Then if Slim doesn't have a base controller the user will have to write one. Or a constructor. Or whatever. The thing is that the user will have to write it.\nHaving the choice to use a base controller doesn't force you to use it.\n. @ciaranmaher Well, if \\Slim\\Slim::getInstance() is going to be removed soon it makes sense to force controllers to have a constructor that accepts the $app parameter.\n. How about setDefaultConstructorParams()?\nphp\n$app = new \\Slim\\Slim();\n...\n$app->setDefaultConstructorParams($app, $db, $logger, $foo);\n...\n$app->get('/', '\\App\\Home:index');\n...\n. @silentworks then something like setConstructorParamsFor()?\nphp\n$app = new \\Slim\\Slim();\n...\n$app->setConstructorParamsFor('\\App\\Home', $app, $db, $logger, $foo);\n$app->setConstructorParamsFor('\\App\\Users', $app, $db);\n...\n$app->get('/', '\\App\\Home:index');\n$app->get('/users', '\\App\\Users:index');\n...\n. I think that slim does not implement that by default. You could use something like:\nphp\n$app->get('/route:params', function ($params) use ($app) {\n    $matrixParams = array_map(function ($param) {\n        return explode('=', $param);\n    }, explode(';', $params);\n    // Use $matrixParams here\n});\n. I think that problem has already been adressed in #739\n. I think there's a mistake in the documentation. https://github.com/codeguy/Slim/blob/master/Slim/Slim.php#L648-L658\n. You mean something like this?\n``` php\n$app->group('/books', function () use ($app) {\n    $app->get('/(:id)', MyCallable)->name('get');\n})->name('books');\n[...]\n$app->urlFor('books.get');\n```\nI think it would be cool to have this feature. I could pull together a pull request today or tomorrow with this feature if @codeguy likes it.\n. The shortened array syntax was introduced in php 5.4 (http://docs.php.net/manual/en/language.types.array.php). Since Slim is compatible with php 5.3 or higher I would replace that line with array(new $matches[1], $matches[2]);\n. ",
    "lnpbk": "Controllers or not, what's the issue with passing a fully qualified Namespace::method as the second parameter? This gives users the option of handling their routes in closures, or grouping them into a Class, which would still adhere to the Single Responsibility Principle.\n$app->get('/books/:id', '\\Me\\MyApp\\Books::method');\n. ",
    "torohill": "Looks good - works for me in my dev environment on 2.3.2. Thanks for the fix.\n. ",
    "stephenmittag": "It is not relevant because the browser has to jump to the anchor but Slim will receive the complete url including the hash-character for processing.\nAssume you click on a link like this http://en.wikipedia.org/wiki/Francis_Drake#Award_of_knighthood the server has to deliver the page http://en.wikipedia.org/wiki/Francis_Drake and the browser would scroll to the anchor #Award_of_knighthood.\nBut currently this does not work because the regex in the router uses hashes as begin/end marker.\n. Sry but that is not right. Try it.\n. I've seen the requests in the access log and I'm quite sure that I'm not hallucinating. When im back at the office on Monday I will examine the logs again and see what the user agent was.\n. Well, today I tried this: \ntelnet localhost 80\nGET /m.php#foo HTTP/1.1\nHost: localhost\nArray\n(\n    [SCRIPT_FILENAME] => /opt/www/m.php\n    [REQUEST_METHOD] => GET\n    [SCRIPT_NAME] => /m.php\n    [REQUEST_URI] => /m.php#foo <----\n    [DOCUMENT_URI] => /m.php\n    [DOCUMENT_ROOT] => /opt/www\n    [SERVER_PROTOCOL] => HTTP/1.1\n    [GATEWAY_INTERFACE] => CGI/1.1\n    [SERVER_SOFTWARE] => nginx/1.4.3\n    [REMOTE_ADDR] => 127.0.0.1\n    [REMOTE_PORT] => 52162\n    [SERVER_ADDR] => 127.0.0.1\n    [SERVER_PORT] => 80\n    [SERVER_NAME] => localhost\n    [REDIRECT_STATUS] => 200\n    [HTTP_HOST] => localhost\n    [PHP_SELF] => /m.php\n)\nThe http stack doesn't remove the fragment if the client sends it. We would have to rely on the clients correnct behavior.\nIt is up to you to decide whether that's a good idea.\n. @codeguy Thats the point. The client will strip it if its implemented properly. If its not I am the one with the exceptions.\nAnyway ... I forked the project and we are using the patched version of it. For me the problem is solved.\n. ",
    "renatko": "Maybe then ->?\n$slim->get('/', '\\Renatko\\MyAmazingController->action');\n. I changed the separator for a method to :.\n:: - it is native separator for static method in php. Maybe it's someone already uses, so we must leave it for compatibility.\nis_callable('\\Slim\\Slim::getInstance'); // true\n. Fixed\n. ",
    "lrlopez": "Hmmm... does it have any sense to call a static method as a controller? If that's the case, we could use : for non-static methods (an instance should be created first before the call) and :: for static ones (no need to create a instance).\n. I'm not sure, but I think the file_exists() call is to check if the $file param is an actual file or a remote URI...\n. @mvader,\nJos\u00e9 Miguel, you're completely right. I've amended the commit to introduce the check. \u00a1Gracias!\n. Sure!\n. Josh, the PR is rather outdated. I think the only thing we could savage from it is throwing an exception if the file/stream cannot be opened. Do you want me to create a new PR with the change?\n. @zergin: Yes, you're right, but (ideally) tests should also check the code that runs when there is no mcrypt extension.\nAlso think the other way around: Tests should be also able to detect when a code change affects code that depends on mcrypt and if you skip them when is not installed, you risk to unintentionally break code that worked before.\nI agree with Josh in that adding mcrypt as a dev dependency should be the way to go. I didn't peer at the tests, but the failback code should also be checked there for completeness.\n. Just to clarify: I'd add mcrypt as a dev dependency but also add tests for the expected behaviour when encrypted cookies are used but no mcrypt extension is available.\n. I agree that it should be documented, but I don't find it strange. When talking about middleware in Slim think about the layers of an onion. You start from a core and begin adding layers. The first layer you add directly touches the core. The second layer touches the first layer, but not the core, etc.\n. Cool! You should ask Timothy for permission to use his illustration in the docs. @tboronczyk\n. Timothy, may I ask for your permission for including it in my teaching slides? I'll keep attribution, of course!\n. Thanks!\n. If you have a look here you'll see the reason.\nIt seems that PHP 5.3 doesn't implement SessionHandlerInterface.\n. @silentworks I also think that Slim should be aware of the project root; the current behaviour it really confuses my students. Nevertheless, they are legit causes where a redirect to another project in the same server could be needed. Also, changing the default behaviour would break down some apps that rely on the former inner working.\nI see two different alternatives of implementing this:\n1. Adding a third optional parameter to redirect() that could enable the project root aware redirect.\n2. Adding a global config option that could enable it.\nWe could even combine them for good: if there is no optional parameter, we could get its value from the config option,\nFor mantaining backward compability, the new behaviour could be disabled by default.\nAny thoughts on this?\n. Hmmm... @tuupola, your approach is nice, but implies adding boilerplate code into every app. Wouldn't be nice if that functionality was embedded into Slim?\nMay be that Mika is right about not touching redirect(). What about a localRedirect() method instead? It would be just a wrapper to redirect() with the URL corrected: No breaking changes nor different behaviours for the same method.\nWe could also add new methods to slim/views so that context aware URLs would be available for templating (i.e. localUrlFor()).\nI can prepare a PR if you find this interesting.\n. I think Josh usually prefers PRs that merge into develop...\n. I find this really useful. Thanks for the PR!\n. Although I find the PR useful (especially for newcomers), I find two problems with:\n1. Sometimes is useful to specify a RegExp on the route (the example you provided as incorrect con be the desired behavior).\n2. It's a breaking change. It could potentially break old apps relying on it.\nI suggest adding a switch somewhere. One possibility is introducing a new configuration option to enable/disable the escaping or add a third parameter to \\Slim\\Route constructor (i.e. a boolean).\nWhat do you think about it?\n. I like the idea!\n. ",
    "petarov": "@jeremykendall: I'll check it out asap  and I'll write back. thx!\n. I applied the #653 fix but sadly it did not solve my problem. I still get  /sandbox/resource instead of just /resource  in  PATH_INFO \nLike I wrote in the comment, I'm using an Apache Alias which points to a completely different server directory path than what comes in DOCUMENT_ROOT. I think the problem lays somewhere there but I've got little time to thoroughly trace it right now.\n. @codeguy The attached Environment.php code works for me as well. Thx! :+1: \n. For a start, a list of OSS projects that are using Slim would be great. Maybe in the README file or somewhere else? IMO, learning from code is also a great option.\n. This is a nice feature! But I would pull against the develop branch because tests obviously need be adapted too. There are also a lot of changes in develop and maybe Slim system reqs would also change to >= 5.4 in next major release\n. I would suggest that you take a look at the existing Slim unit tests and derive your own unit tests from there. For example you would create your own Slim mock object and put all the headers and request info inside and then use that to simulate a HTTP request sent to your app. \n. ",
    "4g0st1n0": "I have the same problem of @petarov. I'm using an Apache alias to point to a directory outside of virtual host document root.\nAfter the upgrade from 2.3.1 t o 2.3.3 my routes does not works.\nMy alias is /backend/services. \nWith request uri \"/backend/services/search\" before upgrade PATH_INFO = \"/search\", after upgrade PATH_INFO = \"/backend/services/search\"\n. This is my apache config:\n```\nDocumentRoot \"/Apache/htdocs\"\n\n    Options FollowSymLinks\n    AllowOverride None\n    Order deny,allow\n    Deny from all\n\n\n    Options Indexes FollowSymLinks\n    AllowOverride All\n    Order allow,deny\n    Allow from all\n\nAlias /backend/services \"/Sviluppo/wg_backend/public/\"\nAlias /frontend \"/Sviluppo/ng_frontend/app/\"\n\n  AllowOverride All\n  Options Indexes FollowSymLinks Multiviews \n  Order allow,deny\n  Allow from all\n\n\n  AllowOverride All\n  Options Indexes FollowSymLinks Multiviews \n  Order allow,deny\n  Allow from all\n\n```\n. The new Environment.php works fine.\nFor more testing this is my .htaccess configuration in Slim public foder.\n```\nRewriteEngine On\nSome hosts may require you to use the RewriteBase directive.\nIf you need to use the RewriteBase directive, it should be the\nabsolute physical path to the directory that contains this htaccess file.\n\nRewriteBase /backend/services\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^ index.php [QSA,L]\n```\n. ",
    "lornajane": "I'd like to help!  I'm using Slim for RESTful APIs so I'd be happy to contribute something on that.  Also there's an open source project that uses it with twig ... not really a tutorial but maybe being able to look around a working application would also help those just getting started?  It's here: https://github.com/joindin/joindin-web2 (we might not be doing things \"right\" but it does work and we like Slim!)\nI also wrote about a middleware recently, which might be worth including if you're looking for existing material to get started with?  http://www.lornajane.net/posts/2013/oauth-middleware-for-slim\n. Hmm, this is a really good point. Because the default should be 443 or 80, depending on the protocol, but I'm not sure we always know the protocol of the incoming request, only what the local server is using. If I use https:// for my ngrok tunnel, I still don't get that (default 443) port number in the HTTP_HOST. At the risk of thickening the plot, we don't have scheme either. Reading the git history the X-Forwarded* fields were deliberately removed since they can't always be trusted and that's the only place I can see the scheme. Luckily @akrabat has a middleware that reads those headers and applies the correct scheme to the request object which helped part of my problem but not the port number part. . This works perfectly for me (using the middleware as well) both locally with a custom port number and with the ngrok tunnel in front of it.. ",
    "leeDav": "I'd like to see tutorials about file/folder structure. I come from a full-stack framework background (CodeIgniter) and with that everything is created for me and there's no thought about where controllers, models, or views go.\nAs I'm trying to break out of this, it'd be great to have some \"best practices\", \"recommendations\", or even just some helpful pointers about how to structure code and files :)\nIt'd be really helpful -- for me, at least! -- to have a little nudge in the right direction.\n. ",
    "revuls": "@leeDav @jeremykendall I've created a MVC structure with Slim that I use in my projects https://github.com/revuls/SlimMVC\nThanks @lornajane. That middleware looks great.\nI know that there are many tutorials of middleware but would be great to have a repository of middleware classes.\nI would love to see some tutorials of Slim using different ORMs (Doctrine, Propel, etc...).\nThanks guys for your hard work.\n. ",
    "ijy": "For me the next step was figuring out how to add a little more structure to my app. Slim is obviously intended to be lightweight and primarily based around routing but sometimes your app needs to expand and you start wanting to better organise your code so the logic isn't intertwined with the routing. There's not a lot of guidance at that point.\n. ",
    "DavidePastore": "I can help to create a simple tutorial to create an application that uses Slim, Twig, Idiorm and Paris. \nIn the future it will also integrate an API for communications.\n. I tried with your versions but the problem is always here. It's so strange.\n. Hi @silentworks.\nOS: Microsoft Windows XP Home Edition Service Pack 3.\nPHP: 5.3.8 on xampp.\n. I have not touched any of this.\n. Unfortunately, everything is pretty standard. I will try to create a project in which I show where the problem arises.\n. @codeguy This is all. Basic example where I found the bug. https://github.com/DavidePastore/SlimFrameworkBackslashIssue\n. :+1: The only way to make it works is:\n- append data to the view;\n- fetch the view without params.\n``` php\n$app->view->appendData(array(\n  'something' => 'anything'\n));\n$html = $app->view->fetch('template.html');\n```\nThis seems to be a bug.\n. @mondalaci: take a look here and here.\n. There a lot of this kind of things. $app->request()->getRootUri() and $app->request()->getResourceUri() are other examples.\n. You're right. But I should say one thing: I don't like to see that a project has PRs and no one cares about them. It's a project that has about 4000 stars here and there should be a good group of people that works on this (in their free time). What do you think about it?\n. I don't know. I see other projects like Symfony that have a great support behind them with daily changes, improvements and fixes. Here I see less releases, less support for the project and less participation in the last months.\n. PR are useless if the project admin isn't present to include these fixes.\n. @silentworks It was not my intention to criticize Slim and the development team. Sorry, if it seemed so. One thing that you could make is to increase the developers number that have direct access to this repository, to have more hands and manage more features in less time. Right now I don't know who has direct access to this repository, but you know better than me who can be promoted to a real member.\nWhat do you think?\n. @silentworks Yes, you're right. In a way or another I think that a project has some principle and it should respect them, so the project doesn't deviate.\nI'm member of different projects and one of them has about 5 active developers that works together on different features/plugins. We can work without worry about the others job. If we have something to discuss, we just chat about it.\n. This answer could be helpful.\n. @aronduby \nTry to use\nphp\n$app->redirect( urlFor('Login',\n   array(\n      'requested' => $app->request->getResourceUri()\n   )\n));\n. @aronduby Yes, you're right, you have to name everything. I use this approach in all the projects that I based on Slim and I find it very helpful. I think that the only consistent way to trace a route is to give to it an unique name, so you can refer to it even if one day you decide to change the url.\nBut:\nHow would you like it to work? Could you make an example?\n. @lrlopez I like your solution :+1: \n. :+1: \n. @mnlg Hi, I think that this is an issue with the framework because if a developer makes a thing in a normal route, I think that he should make the same thing in a special route like the notFound one.\n. @silentworks Do you think it's impossibile to replicate the same environment in the notFound thing?\n. @tuupola I usually use setBody() when I create services that give me JSON. I don't know if it is a bad practice.\n. @amenadiel You're right. The problem is that the project should work in two cases: with and without proxy. If I created a middleware, how can I handle the two cases?\n. I ended up creating a PR for this. #892 .\n. Thanks @tuupola . You're very helpful.\n. @tuupola Do you mean it's better to improve Headers::extract($data) method?\n. :+1: \n. Thanks for your response! :pineapple: \n. Ok @codeguy. Good news from you. Good luck with your book. :cake: \n. I don't know. In my case the configuration is a little different (and simpler):\n<Proxy *>\n  Order deny,allow\n  Allow from all\n</Proxy>\nProxyPass          / http://192.168.0.12/subdirectory/\nProxyPassReverse   / http://192.168.0.12/subdirectory/\n. News about this? Why did you close this?\n. @sekjun9878 The use case of this is the one showed here.\n. Yes, it is maintained and you can create patch.\n. Can you format your code using markdown?\n. Do you want to make a single transaction with all the two (or more) queries?\n. It's better to handle what you're trying to do in a different way.\nCreate a class and a method for each operation you need to do with the database, so you can call them separately. All you need is small code sections that are easy to debug and easy to trace.\nRedirect to another route because you want to perform another operation is not a best practice.\nWhy?\n- losing bandwidth;\n- losing time;\n- losing control between routes;\n- diaspora of your controller code and your db operations.\n. Nice to see this. It is associated with #892\n. @sekjun9878 In my case HTTP_X_FORWARDED_HOST was used from the reverse proxy server (Apache).\n. @sekjun9878 Not simple to remember. It was a long time ago when I faced this.\n. I agree with @akrabat .\nWe could use something like Respect/Validation that has all the things you could imagine.\n. For validation, a nice simple solution could be this one: https://github.com/DavidePastore/Slim-Validation If you have questions and want to know more, just ask on that repo. :stars: :smile_cat: \n. If we remove it, it would be nice to have in the documentation (or in the site in general) a list of files to download with the recommended settings for each web server.\n. You can see the rendered HTML in the HTML tab. Check it. :dango: \n. :+1: \n. Thanks for the answer. Anyway I think the Silex way would be a nice addition to Slim.\n. Hi @KuroThing, thanks for the solution. It would be nice if you could create a PR with this code :+1:  @akrabat what do you think about it?\n. I'm even with the 3.x branch: https://github.com/slimphp/Slim/commit/a63b393a5d5d8ebf774c6716059b5ec151ae7198 .\n. @akrabat Thanks for your suggestion. Do you think this is the best way to achieve it?\n. Thanks, feel free to close this issue. :+1: \n. Yes @codeguy , \"don't reinvent the wheel\" :smile_cat: . Yes, you're right. Do you have ideas on how to fix it? :+1: \n. ",
    "ecoreng": "I collected some of the stuff you guys linked here + links posted by the twitter account \"SlimPHP\" + some stuff I know existed and some blog posts into this repository\nhttps://github.com/ecoreng/Slim-Resources\nI dont have any plans for that information but to remain as a reference, if someone wants to create and maintan a real \"library\" with this information feel free to do it.\nIf you have something you want added or modified, send a PR.\n. I know I am butting in here, but I did something to solve this problem without knowing there was already a solution waiting for feedback. I created two traits to help me inject dependencies from the container (Pimple) into my controllers without having to inject the whole container/app:\n[removed link]\nWouldn't something like this work? It would certainly allow the Controller Author to declare it's own dependencies from the container Inside the controller itself. It works by doing setter injection, which is a little bit different from constructor injection.. so it's not as \"pretty\".\nThe problem I see with my own solution is when someone requires to inject the App itself instead of the router, response or any other service defined inside the container.\n. @danielgsims, you are right. Thanks for the explanation, makes sense.\n. :+1:\n. The develop branch is going to be Slim 3, which is going to be different internally and have some backward compatibility breaking changes.\n. I know, but internally .. appendData uses a \"replace\" method directly in the data set:\nhttps://github.com/codeguy/Slim/blob/master/Slim/View.php#L188\nthat same function is available as proxy here:\nhttps://github.com/codeguy/Slim/blob/master/Slim/View.php#L129\n. ... And I had to add the method \"keep\" to the data set because that function is being used without existing (no tests for this?, should I add one?)\ndefine data as \\Slim\\Helper\\Set:\nhttps://github.com/codeguy/Slim/blob/8760ac091c284f4e93d80d157a32d12c517084d0/Slim/View.php#L69\ncall data->keep:\nhttps://github.com/codeguy/Slim/blob/8760ac091c284f4e93d80d157a32d12c517084d0/Slim/View.php#L113\nbut it's not available nowhere in the class:\nhttps://github.com/codeguy/Slim/blob/8760ac091c284f4e93d80d157a32d12c517084d0/Slim/Helper/Set.php\nso I added that function, copying this proxy call signature:\nhttps://github.com/codeguy/Slim/blob/8760ac091c284f4e93d80d157a32d12c517084d0/Slim/View.php#L111\nand using this built in method:\nhttps://github.com/codeguy/Slim/blob/8760ac091c284f4e93d80d157a32d12c517084d0/Slim/Helper/Set.php#L240\n. This last part complements:\nhttps://github.com/codeguy/Slim/pull/934\nbut:\nhttps://github.com/codeguy/Slim/issues/891\nsays it's not even used, however this test fails if we use $view->set('fooClosure', ...:\nhttps://github.com/codeguy/Slim/blob/master/tests/ViewTest.php#L81\n[Failed asserting that 'foo' is an instance of class \"Closure\".]\nso we have to add that function or drop support for closures as view data\n. I think this code only applies to this branch.\n. PR Sent.\nAfter reading some more, the second part starts beign a problem after we upgrade to Pimple 3.0 (Pimple 2.0 is not documented now neither in github: https://github.com/silexphp/Pimple nor the website: http://pimple.sensiolabs.org/) and only if we are supporting the ServiceProvider registration (which I personally think is great).\nSo I already have a way to fix this last part.. but it depends on Slim updating to Pimple 3.0 which I am trying to do here:\nhttps://github.com/codeguy/Slim/pull/939\n. I dont think that's related to Slim.\nI think that your problem is javascript related.\nNo creo que sea problema de Slim\nCreo que tu problema esta en Javascript\n. +1\nConsider:\nhttps://github.com/container-interop/container-interop\n. Here's a repository where the Application provided overloads the pimple methods to allow the user to use a container-iterop compatible container (optionally) without having to sacrifice the definitions already in pimple (both containers coexist)\nhttps://github.com/thecodingmachine/interop.silex.di/blob/2.0/src/Mouf/Interop/Silex/Application.php\nwould something like this work here?\n. Your snippet basically says that the new container should replace pimple:\npublic function offsetGet($key) {\n    return $this->dic->get($key);\n}\nHoewever I think that there should be flexibility on which container to use, but leave the implementation details to the user. For instance by using this:\nhttps://github.com/thecodingmachine/interop.silex.di/blob/2.0/src/Mouf/Interop/Silex/Application.php#L66\npublic function offsetGet($id)\n    {\n        if ($this->rootContainer) {\n            try {\n                return $this->rootContainer->get($id);\n            } catch (NotFoundException $ex) {\n                // Fallback to pimple if offsetGet fails.\n                return $this->pimpleContainer[$id];\n            }\n        } else {\n            return $this->pimpleContainer[$id];\n        }\n    }\nYou are not necessarily replacing pimple, you are allowing the user to add another container to the mix.. but you would probably have to roll your own https://github.com/slimphp/Slim/blob/develop/Slim/ResolveCallable.php and other infrastructure to support your container which could also fallback to pimple just like in the snippet above.. \nAside from the container-interop php Interface, there are other document that this \"standard\" proposes like the following:\nhttps://github.com/container-interop/container-interop/blob/master/docs/Delegate-lookup-meta.md#43-alternative-the-fallback-strategy\nWhich could help us model a strategy to have the best of both worlds.\nAn obvious drawback is the added complexity of all this code to support using 2 (or more) containers.\n. ",
    "HamptonNorth": "I'm a beginner/intermediate developer. There is a lack of tutorials aimed at beginners. I'd like to fill that gap with a tutorial series aimed at 3.0\nSuggested content - opens *.pdf\nI'd like to partner with experience developer. I produce, they polish/correct my code to ensure quality tutorials.\nAnyone interested in partnering in the code review role?\n. ",
    "xssc": "I started working on a Awesome-List here: https://github.com/xssc/awesome-slim, then found this; get a few more resources and a couple stars and should be able to get it on https://github.com/sindresorhus/awesome\n. ",
    "geniuscd": "I'd like to see the oauth 2.0 integration. I've been working on a slim 3 middleware for oauth 2.0, but i cant figure out how to integrate.. maybe i can create a new repo in my github account and start all over again.\ni think if someone is using Slim 3 to build a restful service that he \"won't hate\" :P would appreciate this middleware. no?\n. I can confirm this issue. after updating to RC3 the routing is broken.\nI'm not using .htaccess,  im on tomcat :/ (long story)\nso i'm using localhost/project/public/index.php/route\nit used to work normally when i change one line of code in Uri.php line 194\nfrom\nphp\n$requestUri = parse_url($env->get('REQUEST_URI'), PHP_URL_PATH);\nto \nphp\n$requestUri = parse_url($env->get('PHP_SELF'), PHP_URL_PATH);\nafter updating to the latest version, but now its broken.\nhere is my route file\nphp\n$app->group('/', function() use ($app) {\n    $app->group('/employees', function() use ($app) {\n        $app->get('', 'App\\Controller\\View\\EmployeesController:dispatch')->setName('employees');\n        $app->get('/categories', 'App\\Controller\\View\\employeesCategoriesViewController:dispatch')->setName('employeesCategories');\n    });\n});\n. I also dont use the other than $settings['settings'], my custom app variables are nested inside that array. But what i was looking for is to add some sort of development / production boilerplate settings without installing other packages.. ",
    "dmbaye": "If video tutorial is your thing, this youtube channel is awesome place to learn about slim https://www.youtube.com/codecourse.. ",
    "eridal": "hmmm something is way tood wrong.. now it's saying:\nCannot access protected property Slim\\\\Slim::$request...\nI have removed the Slim's vendor directory and composer says..\nInstalling slim/slim (2.2.0)\n    Loading from cache\nanybody could reproduce this?\n. Sure!\n```\n{\n    \"require\": {\n        \"php\": \">=5.3\",\n        \"phpunit/phpunit\": \"\",\n        \"slim/slim\": \"2.\",\n        \"leafo/lessphp\": \"\",\n        \"mustache/mustache\": \"\",\n        \"robmorgan/phinx\": \"*\",\n        \"eridal/prelude\": \"master-dev\"\n    },\n\"autoload\": {\n    \"psr-0\": {\"\": \"server/class\"}\n},\n\n\"config\": {\n    \"vendor-dir\": \"server/vendor\"\n}\n\n}\n```\nand this is the full error:\nPHP Fatal error:  Cannot access protected property Slim\\\\Slim::$request in /var/www/index.php on line 32\nPHP Stack trace:\nPHP   1. {main}() /var/www/index.php:0\nPHP   2. Slim\\\\Slim->run() /var/www/index.php:42\nPHP   3. Slim\\\\Middleware\\\\PrettyExceptions->call() /var/www/server/vendor/slim/slim/Slim/Slim.php:1174\nPHP   4. Slim\\\\Middleware\\\\MethodOverride->call() /var/www/server/vendor/slim/slim/Slim/Middleware/PrettyExceptions.php:67\nPHP   5. Slim\\\\Middleware\\\\Flash->call() /var/www/server/vendor/slim/slim/Slim/Middleware/MethodOverride.php:94\nPHP   6. Slim\\\\Slim->call() /var/www/server/vendor/slim/slim/Slim/Middleware/Flash.php:86\nPHP   7. Slim\\\\Router->dispatch() /var/www/server/vendor/slim/slim/Slim/Slim.php:1222\nPHP   8. call_user_func_array() /var/www/server/vendor/slim/slim/Slim/Router.php:172\nPHP   9. {closure:/var/www/index.php:30-40}() /var/www/server/vendor/slim/slim/Slim/Router.php:172\n. what's the meaning of that asterisk?\n$ composer show Slim/Slim\nname     : slim/slim\ndescrip. : Slim Framework, a PHP micro framework\nkeywords : microframework, rest, router\nversions : dev-master, 2.3.3, 2.3.2, 2.3.1, 2.3.0, * 2.2.0, 2.1.0, 2.0.0, 1.6.7, 1.6.6, 1.6.5, 1.6.4, 1.6.3, 1.6.2, 1.6.1, 1.6.0, dev-develop, dev-feature-interfaces\n. ok found this:\nYour requirements could not be resolved to an installable set of packages.\n  Problem 1\n    - slim/slim 2.3.3 requires ext-mcrypt * -> the requested PHP extension mcrypt is missing from your system.\n    - slim/slim 2.3.2 requires ext-mcrypt * -> the requested PHP extension mcrypt is missing from your system.\n    - slim/slim 2.3.1 requires ext-mcrypt * -> the requested PHP extension mcrypt is missing from your system.\n    - slim/slim 2.3.0 requires ext-mcrypt * -> the requested PHP extension mcrypt is missing from your system.\n    - Installation request for slim/slim 2.3.* -> satisfiable by slim/slim[2.3.0, 2.3.1, 2.3.2, 2.3.3].\n(I wish composer were more explicit by default)\n. I already had the mcrypt extension installed and enabled, but the php5/{cli | apache2}/conf.d/mcrypt.ini link where missing; simply linking those to the mods-available/mycript.ini have resolved the issue.\nI'm not sure why it was missing, I assume apt-get fault.\nMany thanks for your support!!\n. Well.. I have created a branch explicit-flow-control but the commit went somehow into develop\nPlease let me know if that's an issue, and I will look into fix/resend this\n. ",
    "IlanFrumer": "bindTo would only work if you have php > 5.4\n. a pull against the develop branch\nThanks a lot\n. this line is written in the test suite 7 times\nphp\n$this->assertSame($callable, $route->getCallable());\nThe problem is that bindTo returns a new created Closure object....\n. What i ended up doing is extending the slim class like so:\n``` php\nnamespace Slim;\nclass SlimX extends Slim\n{\nprotected function mapRoute($args)\n{\n    $pattern = array_shift($args);\n    $callable = array_pop($args);\n    if (is_callable($callable)) {\n        $callable = $callable->bindTo($this);\n    }\n    $route = new \\Slim\\Route($pattern, $callable);\n    $this->router->map($route);\n    if (count($args) > 0) {\n        $route->setMiddleware($args);\n    }\n\n    return $route;\n}\npublic function group()\n{\n    $args = func_get_args();\n    $pattern = array_shift($args);\n    $callable = array_pop($args);\n    $this->router->pushGroup($pattern, $args);\n    if (is_callable($callable)) {\n        $callable = $callable->bindTo($this);\n        call_user_func($callable);\n    }\n    $this->router->popGroup();\n}\n\n}\n```\nThan using the extended class\nphp\n$app = new \\Slim\\SlimX();\nThanks a lot.\n. ",
    "elgenie": "This fixes SlimHttpUtilTest::testEncodeAndDecodeSecureCookie* when run with HHVM.\n. ",
    "JoelMarcey": "Any update on if we can get this pull request merged? Thanks.\n@cc ptarjan\n. @codeguy Thank you very much for this merge!\ncc: ptarjan\n. ",
    "dongilbert": "So, there is a potential downside, and that is if someone has overwritten the request with their own implementation, @property wouldn't necessarily match anymore.\n. Sorry - had to fix the ordering. It goes \n@property \\Slim\\Environment $environment\nnot\n@property $environment \\Slim\\Environment\nOops\n. ",
    "brushmate": "Version is 2.2.0. I see that 2.3.5 is the current version, but if I run composer update it says that everything is up to date.\nThis is my composer.jsonfile:\n{\n  \"require\": {\n    \"slim/slim\": \"2.*\"\n  }\n}\nI just cloned the repo and now it works. Thanks so far. Maybe someone forgot to update the composer package?\n. I set the version in the composer file to \"2.3.*\" and now composer gives me some output which says that I don't have mcrypt installed.\n. I'm using XAMPP which ships with mcrypt, but I have installed another copy of php, too. The version without mcrypt comes first in my PATH, so I just added the XAMPP php before the other one. But thank you nevertheless.\n. ",
    "gzzglc89": "My Slim app is running with the file index.php in a subdirectory called public.\nI have two .htaccess files, one in the root folder and one inside the public folder, as described in the pull request.\nMy issue was that with this configuration, all request are served by the default \"/\" route, and if the url is longer than the public folder name (6 chars) then app returns an 404 error.\nDebugging the file Environment.php i found that url passed to it was already without the \"public\" prefix, but app try to remove it.\nMy fix remove the subdirectory prefix only if is present.\n. I have tried with 2.3.5 on apache 2.4 and the issue still remains.\n. I have updated to Slim 2.4.0 and Apache 2.4.6, same configuration ad problem remains.\nAfter adding this fix all works.\n. ",
    "shashankmehta": "@codeguy Hi. I am facing a similar issue. My directory structure is as follows:\n|-- application\n|   -- test.php\n|   -- foo\n|       -- index.php\napplication folder consists of the app that is served at example.com. Apache serves the parent folder of application. That is, there is an htaccess file that converts example.com/test to application/test.php.\nNow I am trying to serve an app at example.com/foo using Slim.\nTaking an example for a URI request as example.com/foo/hello, I expect Slim to match this request to /hello.\nOn L143 of Environment.php, in my case the values of variables are as follows:\n$requestUri = '/foo/hello';\n$physicalPath = '/application/foo';\nHowever, Slim expects $physicalPath to be /foo which is not in this case. So the value of $env['PATH_INFO'] becomes an empty string to which / is appended in L145.\nHence, Slim sees the path as / and not /hello\nI tested the patch in this PR and it is not the right fix. If such a case cannot be supported by Slim, the workaround that I'll be using is that right in the start, run this:\n$_SERVER['REQUEST_URI'] = '/application' . $_SERVER['REQUEST_URI'];\nIf it is somehow possible to figure out the root folder, application in my case, through variables in $_SERVER, that would be the best possible solution. Otherwise, I think this should be allowed via an option when instantiating Slim.\nI hope I have been clear enough. Let me know if you need any further clarification. Thanks!\n. ",
    "ctsstc": "Glad to see this fixed up :) \nThis should beat my hacky fix, and fix the problem I was having as well\n. I have this exact some problem and tracked it down the the same file and location\nFor example I'm using Nginx with:\n```\nlocation /staging/insomnia/ {\n    try_files /index.php?$args /staging/insomnia/web/index.php?$args;\n}\nlocation ~ ^/staging/insomnia/(css|images|img|js|svg|fonts)/(.*) {\n    try_files /staging/insomnia/web/assets/$1/$2 =404;\n}\n```\nI also have a public folder which is\n\n/var/www/phpliteframework.tk/web/staging/insomnia/web/\n\nand a private folder with slim, includes, etc\n\n/var/www/phpliteframework.tk/web/staging/insomnia/private/\n\nSo the site loads up via:\n/staging/insomnia/\nRuntime Hitting Route: /staging/insomnia/memoryUse/\nProduces the following variables in the Environment //Virtual Path\n$requestUri =>    \"/staging/insomnia/memoryUse/\"\n$physicalPath => \"/staging/insomnia/web\"\n$env['PATH_INFO'] => \"/oryUse/\"\nThe patch andrew-forest provides does fix this issue, but I'd still like an option to set the base path during Slim initialization which would override the $physicalPath, that way I could pass in \"/staging/insomnia/\" for my case, which would return \"memoryUse\" for the path_info/resourceUri.\nWith andrew-forest's patch all my routes then require: \"/staging/insomnia/\" before all the routes\nEdit\nI'm sure the whole environment variables can be overridden it looks like, but all I want to do is change that single variable, rather than write the whole environment myself.  Maybe a middleware could be combined with andrew's fix, but I'd still rather not if there's a way around this, and I'd rather not make a global variable like $prefixRoot='/staging/insomnia/' that would be prefixed to every route.\nEdit2\nWhat about rewriting the constructor to act like the mock function how it array_merge's the passed settings into the pre-built, this way only environment variables that want to be overwritten can. Toss out the if check in the constructor, default the parameter to $settings=array() then toss in the array merge at the end.\n. ",
    "JonEngle": "Nah, go ahead and make the change.  Thanks though!\nJon\nOn Nov 20, 2013, at 2:01 PM, Josh Lockhart wrote:\n\nDo you want to send a PR or do you mind if I make this change? Want to make sure you receive credit if you want.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "ptarjan": "This is a problem with Slim's unit test in tests/Middleware/SessionCookieTest.php, so indeed the fix should be in this repository. It is assuming that I haven't touched my error reporting level in my system's php.ini or else it fails.\nI ran into this issue when testing slim on HHVM since we have different default error levels than PHP (we emit notices by default).\n. @cbschuld I've just been running small sample apps to make sure your framework works on HHVM (they've all worked). I'm not using it for any actual deployments, I work on HHVM and just wanted to make sure other users can use HHVM with slim.\n. ",
    "matthewbaggett": "Time for a cuppa, I think.\n. This is the Worst Wurst. I miss Burgermeister Q_Q\n. ",
    "frnco": "I'm inclined to believe this is By Design.\n. ",
    "freen": "I can't imagine why Slim routes would enforce that no query strings exist, or why it would throw 404s when they're present in the URL.\nOr, even if this was enforced, why it would happen for some routes, but not others, where there is no apparent difference between their definition.\nAs far as I can tell, my route's regular expressions are properly formed. I'm only matching against the beginning of the URL, so the query string shouldn't be affecting the behavior in my opinion.\n. Not sure what the version is, only the checksums.\nThe sample app isolated the problem to the .htaccess :) See below.\nThanks for listening!\nhttp://pastebin.com/zXHZhdCZ\n. ",
    "ysangkok": "Installing using composer, I get slim/slim suggests installing ext-mcrypt (Required for HTTP cookie encryption). How can this be, if mcrypt was removed?\n. @akrabat I guess the difference is that you can store the data on the client if you use encrypted cookies...\n. ",
    "OptimusCrime": "It is still present in composer.json in the 2.x branch: https://github.com/slimphp/Slim/blob/2.x/composer.json\n. Slack > Gitter any day of the week.\n. You can pretty easily implement this by using https://packagist.org/packages/symfony/event-dispatcher .\n. Can see how this is Slim's responsibility to check/validate?\n. Why IIS, WHYYYY\n. You don't include - in your regex for the name param? Should be something like this [A-Za-z\\-]+\n. What web server are you using?\n. Then it is indeed very weird. I suggest closing as not an issue with Slim. There is an error in the setup or configuration somewhere.\n. Do you use URL rewrites? That should fix the problem.\n. They dont match any of the gallery routes? '/galleries/{id:[0-9]+}' matches /galleries/[id here], such as /galleries/1 or /galleries/2345212. Adding a colon before the ID does not match the regex.\n. So....? Fixed?\n. I agree, that SIlex feature is very nice.\n. You do great work for the open source community in PHP, @akrabat :)\n. @adiramardiani The issue you have here is not related to Slim, but FastRoute. Their GitHub repository is located here: https://github.com/nikic/FastRoute\nEdit: It might be worth noting that most GitHub repositories does not help like this in their issue section. You will either need to fix this yourself, or get someone to answer your StackOverflow question. GitHub is not really used for guidance like this.. Yes, I ment you. Sorry.. I thought nginx needed configurations to be able to handle \"friendly urls\"? Apache needs it, and it will not work without htaccess or edits to the Apache config file(s). Because nginx lacks something similar to htaccess-files, there is no other way to do this?\nI might be wrong.\nUps, @akrabat already stated that in his answer.\nMy question @grikdotnet, is how you want to fix this? As far as I can tell, there is no way to get Slim to work with URL patterns that Slim operates with? In addition, I'd like to remark that people that are familiar with nginx knows this for sure. As a Apache user I know that you either need to supply rewrite with htaccess or change the config files. Neither web server provides this by default, and that's been the case forever.\nOne option could be for Slim to handle ugly urls too, where the actual path is hidden in a GET param, for example index.php?q=my/path/goes/here would be rewritten to my/path/goes/here after rewrite. I know MODX does it this way and you can toggle what way the system should generate/read URLs.\n. @Lewiscowles1986 Looking at what is posted above, they were talking about the build in PHP server, where \".\" by design indicates a static file, so it is neither Slim nor Fastroute's fault. It is PHP. I don't think Fastroute has a problem with \".\" in URLs as far as I know?\n. Looks like an error in coveralls or something. These two files have identical coverage:\nhttps://coveralls.io/builds/6341055/source?filename=Slim%2FDefaultServicesProvider.php\nhttps://coveralls.io/builds/6390776/source?filename=Slim%2FDefaultServicesProvider.php\nSo does these:\nhttps://coveralls.io/builds/6341055/source?filename=Slim%2FApp.php\nhttps://coveralls.io/builds/6390776/source?filename=Slim%2FApp.php\nThe first of each is the current coverage in master (the last push) and the last is the coverage for this pull request.\n. Not a Slim related problem? Suggest closing this issue.. This syntax is odd to me. It works in Javascript, but in PHP it just looks wrong.\n. Still, I am all in favor of having a consistent behavior. What would happen today?\n. ",
    "arsenetar": "I use:\nphp\n$app->redirect($app->urlFor('routeName', array('param' => 'value'));\nThis does require named routes though as in the docs#Route Names.\nI'm not sure if you would always want the application to add the base url to every redirect method not starting with http(s):// as then you would end up needing a http/https helper.  Probably best to use urlFor() as that is what it is for.\n. ",
    "foush": "To follow up: it appears from this question that the correct way of getting data is by using $app->request->getBody() to get the params for such an instance\nhttp://help.slimframework.com/discussions/questions/393-interpret-json-data-with-in-app-put\nIn a future release, it would be ideal for the posted data to appear in when using $app->request->post()\n. ",
    "hh0210": "Hello, i facing this same problem on nginx.\nhttp://localhost/user?id=23, it cause 404 error.\nNginx Config:\n    location / {\n      try_files $uri $uri/ /index.php?$args;\n  }\nPlease help.\n. ",
    "vyanez": "Hello everyone, I have been in trouble setting up Slim framework on my server running nginx 1.4.6.\nif I run this query (http://api.scyllas.com/ http://api.scyllas.com/index.php) everything works work. The problem is when I try to get response from another method like http://api.scyllas.com/foo or http://api.scyllas.com/index.php/foo\nI have done many configurations on my nginx server but nothing has worked.\nhere my nginx config file:\nserver {\n    listen 80;\n    server_name api.scyllas.com;\n    root /home/ftpuser/sites/apiscyllas;\n    index index.php index.html index.htm;\n    passenger_enabled on;\ntry_files $uri $uri/ /index.php$is_args$args;\n location /index.php {\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n    fastcgi_connect_timeout 3s;     # default of 60s is just too long\n        fastcgi_read_timeout 10s;       # default of 60s is just too long\n        include fastcgi_params;\n        fastcgi_pass 127.0.0.1:9000;    # assumes you are running php-fpm locally on port 9000\n    }\n\n}\nif I add a .htaccess file nothing happens as well.\nPlease help me!!!. ",
    "kperry42": "Nah, that's OK, go ahead and do it.  I'm not set up to do that yet.\nOn 12/7/2013 3:02 PM, Josh Lockhart wrote:\n\n@kperry42 https://github.com/kperry42 Do you want to submit a PR so \nyou can get credit for the fix? If not I can go ahead and do this, but \nwanted to check with you first.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/codeguy/Slim/issues/694#issuecomment-30063378.\n. \n",
    "poison": "Also posted by someone else: https://github.com/codeguy/Slim/pull/718 I think there's a need for this! +1\n. +1 I need the underscore as well :)\n. I like this too! +1!\n. ",
    "itsgoingd": "Ah, I completely forgot about this. Closing in favor of #718 which has the same fix + unit test.\n. ",
    "daniel-dressler": "That is a reasonable request, but I'm hesitant to do that since I'm assuming regular usage will have been tested thus I'd need to bi-sect my code. On the other hand if you see the full thing (excluding the templates its maybe <200 lines) you might be able to spot the issue right away.\nI have nothing sensitive in my app so could I zip and email it to you in private? I promise to change the secret key afterwards.\n. Sure, I'll go package it up. There should be no special steps that I know of. The app is running off my localhost and I'm deving on ubuntu 13.10 with debian's apache and php.\n. Thank you codeguy, I'll mark Wednesday on my calendar and I promise to nudge you if needed.\n. I should mention that if you need to please feel free to show the app to the other maintainers. It's less that I want to keep it private and more that I have yet to talk with my group members and the pwg's chairman if it can be open sourced. The app itself is related to pwg.org, in case curiosity hits.\n. Thank you codeguy that would explain it. I had assumed the secure refereed to if the session got encrypted. Of course my localhost is all http.\nSo how would I turn on encryption?\n. Thank you codeguy! Sorry for missing this!\n. ",
    "marcioAlmada": "OK :smile:\n. Oops, just noticed develop is now related to a future version. Branch 2.4.1 looks quite different from develop, but no big deal.\nI'll port this from App to Slim class ~~after I recover from Christmas dinner~~ ASAP.\n. @codeguy, finally I had some time for this, ready for 2.4.1.\n. It seems travis building is failing on hhvm runtime (errors are not related to this pull request).\n. You can also use this configuration to test against hhvm runtime but allowing erros:\nyml\nmatrix:\n  allow_failures:\n    - php: hhvm\n. +1 for aura, in case of a non distant decision.\n+1 for waiting for the HTTP PSR, I've been waiting for this PSR for a long time, hope it comes soon.\n. hey, @qyanu \nThank you, I would never notice it.\n. Ok, I'll see if I can send you a pull request to your develop branch and then we merge both commits at once.\n. Well, it seems @codeguy already has commits from #715 on develop branch so your other pull request is all set :smile:\nAnyway, thanks for pulling stuff to v2.4.3 again.\n. Middleware stack works just like an onion. If you put a middleware as the outer \"layer\" of the stack it will be the first one to be reached by the incoming request.\n. Yes, with express we usually just pipe stuff from one place to another. With slim stack every layer contains a reference to the next layer but nothing is piped, just inspected and modified when the middleware has the chance to.\n. Look at what I've found: http://www.sitepoint.com/working-with-slim-middleware/. Maybe it could appear listed on some \"useful links\" section in docs :smile: \n. ",
    "prisis": "hey, if i try that pull i get a error like that: \"Fatal error: Uncaught exception 'InvalidArgumentException' with message 'Passed variable is not an array or object, using empty array instead' in /Slim/Collection.php:167 Stack trace: #0 /Slim/Collection.php(167): ArrayIterator->__construct(NULL) #1 Slim/App.php(1224): Slim\\Collection->getIterator() #2 Slim/App.php(1081): Slim\\App->finalize() #3 /index.php(116): Slim\\App->run() #4 {main} thrown in Slim/Collection.php on line 167\n. I didn't use composer, i included all files manually \"pimple and slim\" in my index.php, it worked before, but if included your code i get that error\n. Of course ;), \nautoloadManager is something like composer.\nAnd now after i added the new changes i get a white page.\n$autoloadManager = new autoloadManager();\n$autoloadManager->setScanOptions(autoloadManager::SCAN_ALWAYS);\n$autoloadManager->setSaveFile('System/_Storage/_autoload/_cache_autoload.php');\n$autoloadManager->addFolder(realpath(dirname(FILE)) . '/System/Vendor');\n$autoloadManager->register();\n/\n|--------------------------------------------------------------------------\n| Turn On The Lights\n|--------------------------------------------------------------------------\n|\n| We need to illuminate PHP development, so let's turn on the lights.\n| This bootstraps the framework and gets it ready for use, then it\n| will load up this application so that we can run it and send\n| the responses back to the browser and delight these users.\n|\n/\n$brain = new Pimple();\n$brain['app'] = new App();\n$brain['app']->run();\n. http://help.slimframework.com/discussions/questions/1214-slim-30-and-composer\n. ping @codeguy\n. if you like you can you my config loader, https://github.com/n-brainwave/config. I will make some small changes today so it should work with slim\n. function addDomain($name, $ip_address = \"118.199.115.21\", $client)\nand the url\n$app->post('/domains', function() use ($app, $client)\nwere do you include the main.php? \nSlim is not wordpress...\nOr you make a new class. \nExample: \n``` php\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nclass test {\nprotected $client;\npublic function __constructor {\n$this->client = new Client([\n    'base_url' => $apiUrl,\n    'defaults' => [\n        'headers' => ['Content-Type' => 'application/json'],\n        'auth'    => [$apiToken,'']\n    ]\n]);\n}\npublic function addDomain($name, $ip_address = \"118.199.115.21\") {\n$data = [\"name\" => $name, \"ip_address\" => $ip_address];\n\ntry {\n    $res = $this->client->post('domains', ['body' => json_encode($data)]);\n    http_response_code($res->getStatusCode());\n    echo $res->getBody();\n}\ncatch (RequestException $e) {\n        http_response_code($e->getResponse()->getStatusCode());\n        echo $e->getResponse()->getBody();\n}\n\n}\n}\n```\nand route\nphp\n$app->post('/domains', function() use ($app) {\n    require_once 'include/do/main.php';\n    $body = json_decode($app->request->getBody());\n   $test = new Test();\n    $test->addDomain($body->name, $body->ip_address);\n});\n. :+1:\n. can you rebase you changes?\n. Can you please rebase your changes an make a new pull request? \n. nice :+1: \n. i don't see any point to do it, because we can only get true or false.\n. I did use slim for my framework, ok is not more really slim and i did remove all strict results, and it works fine :)\n. If you like, but only for dev branch :)\n. Use this\nexemple:\nget('/books/:one/:two', function ($one, $two) {\n    echo \"The first parameter is \" . $one;\n    echo \"The second parameter is \" . $two;\n});\n. did you try get('facebook:? [or] 'facebook:(?), function..., sorry i cant test it right now...\n. Nope, still working.\n. try this https://www.proxysite.com/process.php/jtWQpjY3J1S_2BXV0z2go_2B4wOif53VZqVE5YY_3D/b7/fnorefer/\n. np.\n. Pls change your pull request to develop!\n. You can try to use https://github.com/FriendsOfPHP/PHP-CS-Fixer is much faster to get the right coding style :)\n. Maybe you can create a \".php_cs\" so all of us can use it, if @codeguy like the idea\n. Or we can use styleci.io :) to check if all pull request are PSR-2\n. +1 for gitter\n. You dont follow the container Interface \nhttps://github.com/container-interop/container-interop\n. Maybe you like this package from me, it has all status codes. https://github.com/narrowspark/http-status\n. ",
    "mcuelenaere": "@codeguy Any comments?\n. @codeguy Any comments?\n. Sure, see #779\n. Similar to #721 \n. What if a user calls $route->setCallable([new Foo, 'bar']); ?\n. Similar to #718 \n. Why not just change this to $cParts = explode('=', $c, 2); ?\n. ",
    "aledelgo": "I'm sorry for the crosspost but the discussion on this problem gone forward on the official forum:\nhttp://help.slimframework.com/discussions/problems/5954-no-way-to-make-slim-work-in-a-subdir\nYou can find there, logs and other test i've done.\nto summarize, actually the apache config is calling the right index.php with correct (i hope) server variables (request uri give the correct original url requested) anyway Slim seems to ignore it...\n. ",
    "anlutro": "Definitely this. I guess the \"fix\" for the broken test is to make foo() return something and do an assertEquals on $route->dispatch().\n. The hard dependency to the Request/Response classes do not need to encompass the entire application. As long as your handle method accepts and returns the correct objects, you can do any amount of transformation and abstraction in-between.\nFor example, you could write a proxy class that has an underlying Symfony Request/Response object but provides a simplified or more framework-tailored interface, and then just call a method that returns the underlying Symfony response object before handle returns it. The application's route controllers could then deal with these response/request classes instead of the symfony ones (which are quite clunky).\nAnother huge advantage of the HttpKernelInterface is how easy it becomes to write functional tests for your application. See Silex's WebTestCase as an example - this way of setting up a test will work with any application that implements the HttpKernelInterface.\nI don't know how far off the PSR is, but I imagine that if/when it is implemented, it will work similarly to how symfony's response/request objects work currently, so if one were to implement symfony's classes now, transitioning to the PSR ones later on would be pretty easy.\n. Perhaps it could be defined in the global namespace, but only if the class already does not exist?\nCould also be extracted into a separate package. Maybe it already exists.\n. What's saying you can't conditionally define interfaces? https://eval.in/121449\n. ",
    "haroldkyle": "This works much better, and helps the memory footprint a lot. +1\n. ",
    "scottux": "+1\n. +1\n. :+1: \n. ",
    "leonjza": "You need to define the 404 handler. See the docs for more information here http://docs.slimframework.com/#Not-Found-Handler\n. ",
    "evivz": "@th3l33k  Thanks a lot. This is what I was searching for.\n. ",
    "deefour": "@codeguy Have I done something wrong causing this to get closed without comment?\n. ",
    "mike-marcacci": "Good to know; thanks for the reply!\n. No explanation for the close? I think this would be a pretty useful feature!\n. Ah, sounds fair. Cheers!\n. ",
    "zergin": "I see that MCRYPT consts should be defined by App.php ( https://github.com/codeguy/Slim/blob/develop/Slim/App.php#L35 ) but it is not the case for tests. So may be this patch should be changed to reflect that. What is your recommended way?\n. Wouldn't that defeat the purpose of checking code when there is no mcrypt extension? If tests always work with the extension present then there is a risk of not caching some dependency.\n. Hi, any chance of merging this into current release? \n. Many thanks ;-)\n. It should and it's already fixed - it was an artefact after git cherry-picking when switching base branches.\n. ",
    "sarciszewski": "If mcrypt isn't loaded, this falls back to null. Would it be better to also support openssl? Or is this irrelevant with Zend\\Crypt?\n. @vik-singh \n``` sh\ngit remote add upstream https://github.com/slimphp/Slim.git\nAnd then...\ngit fetch upstream develop\ngit checkout develop\ngit rebase upstream/develop\nThen, if there are no conflicts...\ngit push --force origin develop\n```\n. Why are you storing session state in the hand of the client in the first place?\nI'd hate to be self-referential, but see similar work I've done for Kohana and CodeIgniter: https://scott.arciszewski.me/research/view/php-framework-timing-attacks-object-injection\nThey had a similar problem, except they were using hash functions (poorly) to detect tampering. It's still a bad idea. Use server-side storage:\n- Files (default) are okay.\n- Memached is faster.\n- Databases are a good choice if you have thin web servers and a big database.\nCookies are doom.\n. > Totally agree, but some people may need them for some reason. \nOkay. Who needs them and what are they doing that requires such a poorly designed feature? PHP supports file storage out of the box.\n- Using Memcache or a database allows you to scale webservers horizontally. \n- Replacing the session save path with a samba share allows load-balancing (though is not fault-tolerant; if the share goes offline you lose everything).\nPeople are going to use sessions for secure data. ['user_id' => 92, 'is_admin' => false] Hmm, gee, I wonder how I could exploit that?\n. # NO\nhttps://github.com/slimphp/Slim/issues/1035 - I do not trust the framework authors to implement encryption properly after reading Slim\\Http\\Util\n. https://github.com/slimphp/Slim/blob/develop/Slim/Crypt.php#L128\nhttp://php.net/manual/en/function.hash-equals.php\n. I said \"NO\" because you shouldn't be storing session state that the server processes and depends on, on client machines. An identifier to fetch it from the backend? Sure. Even with JWT, you're going to run head-first into the 4KB limit (which is down to 3 KB with base64 encoding, and even less with the HMAC).\nYou're literally cutting yourself off at the knees with this strategy.\nWant to make everyone insecure because a few morons think storing session state on the client is okay? Do what you want; I look forward to seeing your spools on Full Disclosure.\n. > So it sounds like you're OK with this, if implemented in a secure fashion.\nYes, like PHPSESSID over HTTPS (assuming TLS v1.2). That's a secure implementation.\n. > Specifically, I'm talking about storing a user token with information as to which user the client is authenticated (or even whether they are at all).\nCongratulations, you just reinvented PHP's session storage.\n. Yes, the data is stored serverside, but the identifier is stored in a cookie.\n. > The identifier is useless to a system which doesn't have access to the serverside information. \nYeah, that's kind of the point. Do I need to draw you a diagram of the OSI model?\n. > The cookie is encrypted to avoid someone tampering with its values\nI still see a problem here. Encryption is not authentication. Since the session state is in the hands of the client, they get unlimited tries. It takes an average of 128 tries (worst case: 256) per byte to break CBC and forge the contents. Encrypt-Then-MAC or doom.\n\nSending this hash on each request, \n\nWait, is it encrypted or hashed?\n@ircmaxell I see your point. If they can implement JWT competently (my history with other frameworks reinvention the session wheel has not made me optimistic about this) this issue can be considered closed.\n. > an actual compromise using unserialize() could result in arbitrary code execution on __wakeup() if I'm not mistaken.\nYeah, that's the crux of this issue.\n. @mattsah If you use Firebase's implementation rather than rolling your own, then I won't complain. (Instead, I'll go review that.)\nEDIT: Their library looks good at a glance.\n. Well, the develop branch has adopted Zend\\Crypt so it should be fine. I haven't reviewed that library at all but others have.\n. ```\n4096\n- 64 (HMAC-SHA-256, hex-encoded)\n4032\n* 3/4 (base64)\n3024\n- 2 ('a=' for example)\n3022\n```\nIf you're fine only being able to store up to 3022 bytes of information in your session state of information per user ever, then by all means keep at it.\nI'd recommend adopting a more modular approach. Let people choose their session backend, don't lock them into the cookie-based one. If they're fine storing it the default PHP way, it should be trivial to do so.\nEDIT: Also, please don't use compression to try to get around this. https://www.isecpartners.com/blog/2012/september/details-on-the-crime-attack.aspx\n. > The default implementation uses native session storage.\nThat wasn't obvious to me when I was looking at the code.\n. Oh, thank you. This is probably a lot less critical than I imagined, then.\n. > Just wanted to chime in here. First, I truly appreciate the scrutiny here. I really do, be it overly harsh or not. It only makes Slim better. \nOkay, that's basically the best response I could have asked for.\n\nAs for the 2.x code, if you see anything that needs improved, fixed, etc. please send a pr against the master branch. This branch is only accepting hotfixes and security updates.\n\nI'll poke around. In the meantime, swapping out unserialize()/serialize() for the appropriate JSON features will stop the PHP Object Injection (which can result in remote code execution) vulnerability and you can focus on implementing JWT in develop.\nEDIT: I've also edited the issue message to clarify my misunderstanding.\n. @ircmaxell Would this do the trick?\nphp\n    $from_type = mb_detect_encoding($data, 'UTF-8', true);\n    if ($from_type !== 'UTF-8') {\n        $data = mb_convert_encoding($data, 'UTF-8', $from_type);\n    }\n(I'm going to guess that the answer is \"no\", but I'm curious why it won't. Maybe I should make a SO post?)\n. > No. Encoding detection is incredibly unreliable at best.\nOkay.\n. > I'm really concerned on the consequences of rolling this change as is in the next minor release.\nEnjoy getting 0wned then.\nMaybe wrap non-UTF8-encoded data in urlencode() and urldecode() before/after storage (respectively) if you're ever going to store it anywhere.\n. See also #1037\n. Please post a security@ contact address and PGP key on the project website then.\n. ",
    "calmdev": "I can reproduce this on 2.4.0 as well.\n. Ok, I was wondering if it was intentionally left out for some reason or just overlooked.\nI'd like to use your PR #743, so hope it's merged :+1:\n. I can also reproduce this on 2.4.0 and can confirm that the PR resolves it.\n. FWI, I've cherry-picked commit into a fork and it's working good for me.\nIt's a small change, but it feels so much cleaner now, ha.\n. Hrm...this only appears to be working with static methods for me?\n. @mvader here's my branch with the cherry picked commit and below is what I'm running into when visiting a bogus URL to test the notFound handler.\nRoutes:\nphp\n// Define routes.\n$app->get('/', '\\App\\Controller\\Home:index');\n$app->notFound('\\App\\Controller\\Home:notFound');\n$app->error('\\App\\Controller\\Home:error');\nController:\n``` php\nnamespace App\\Controller;\nclass Home {\npublic function __construct() {\n    $this->app = \\Slim\\Slim::getInstance();\n}\n\npublic function index() {\n    $this->app->redirect('/users');\n}\n\npublic function notFound() {\n    $this->app->render('404.tpl');\n}\n\npublic function error(\\Exception $error) {\n    $this->app->render('500.tpl', array(\n        'message' => $error->getMessage()\n    ));\n}\n\n}\n```\nError:\n\nIf I alter the controller like this it works:\n``` php\nnamespace App\\Controller;\nclass Home {\npublic function __construct() {\n    $this->app = \\Slim\\Slim::getInstance();\n}\n\npublic function index() {\n    $this->app->redirect('/users');\n}\n\npublic static function notFound() {\n    $app = \\Slim\\Slim::getInstance();\n    $app->render('404.tpl');\n}\n\npublic static function error(\\Exception $error) {\n    $app = \\Slim\\Slim::getInstance();\n    $app->render('500.tpl', array(\n        'message' => $error->getMessage()\n    ));\n}\n\npublic function logout() {\n    $this->app->user->logout();\n}\n\n}\n```\nLet me know if you want more information. Maybe I'm making a mistake, but hope it's not just me making noise in here for no reason. This place is always so damn quiet. I appear to get stuck on these two lines - not making it to the next else if which is what we want I think?\n. Nice work @mvader.\nBoth the error and notFound handlers are working perfectly for me now.\nI just noticed something with Slim which completely caught me off guard while testing the custom error handler. Check out these lines. If you are running in debug mode then the custom error handler never gets called. It will invoke Slim's default error handler instead. I'm not sure if this desirable for folks who have defined their own - not really the behavior I was expecting. In my application if debug mode is enabled it does more verbose logging, but as it is now I lose the custom error handler. @codeguy is it intentional behavior?\nIMO, if it was to change this PR would be a good spot for it since it's related. Thoughts?\n. This would be nice. I always run into the need for this when sending emails that need to provided a full URI so folks can click to access the application.\n. ",
    "lectrotext": "Bump. When's this getting into a point release?\n. This would make for better unit testing.\n. ",
    "danielgsims": "Awesome. This will help out a lot.\n. The set params option is a better way to go about it than using the Singleton instance. The approach at least decouples the dependency. I would prefer to have it available for constructor dependency injection instead of during the method call. The constructor DI approach would cut down on ceremony. Maybe the approach of a follow up function would be good if the controller class was lazy loaded and we could use a setConstructorParams method in addition to setParams. This would still involve extra ceremony, which I am ok with, but it would allow constructor DI which is ideal. Maybe this approach would be good for the Slim 3 with the lazy loading efforts.\n. @designermonkey is this the lazy loading controller work? This would make it a lot better.\n. @silentworks I like the idea of being able to designate dependencies for multiple routes that use the same controller. I would like to use the DI sugestion from @lalop however, the route doesn't have scope of the pimple container. I think the Route needs to have it's own setConstructorParams method so that one would still be able to directly add DI to the controller without having to use the Slim instance. For example, someone might want to use Slim routing without the Slim application ala Symfony HTTP Foundation. \nWhat would happen if we used setConstructorParams and an $app->inject method?\n. Also, what about adding a setConstructorParams on a Route Group? It stands to reason that shared routes within an API that use controllers might inherit from a base controller. Shared dependencies would be injected via the constructor. Methods that have unique dependencies could inject those dependencies through the setParams method. \n. @silentworks I don't understand. You want to add your Route the container the same time you add it to the Router so you can modify it after the fact?\n. @silentworks To keep the Route unaware of Application, you could just instantiate your Routes directly and add them to $app->router manually. You could keep them in pimple.\n. It would preferable to dictate which dependencies you want. If you want your controllers to framework agnostic, you won't want to have Slim as a dependency. It's so easy to make it customizable, why would you want to lock yourself into the default.\n. You're using \\Some\\Controller:action' within the router. Your controller class is not aware of that. Say for example that you want to customize the Slim framework. Say you decide not to extend Slim, but to create an Adapter around it. If the controller expects you to use Slim as a dependency, you would not be able to pass your new Slim Adapter as a dependency. Those assumptions locked yourself into a corner. It's much more developer friendly to give us some way to inject dependencies into controllers without relying on Slim as a service locator to do so.\n. Check out my solution in #822 \n. @codeguy Any feedback Josh? \n. #739 was closed in favor of #721. I will look at redeveloping this with #721. \n. I was hoping for more feedback!\n. I canned this because there were two different solutions to Lazy Loading of Controllers: #721 and #739. #721 fixes this by creating a callable closure at the time of Route construction. #739 fixes this by only creating the controller when it was called. The way #739 went about this allowed me to create a setParams method to create a list of dependencies that could be used when the controller was constructed. However, since #721 created the callable immediately, there would be no time to handle a setParams method. I'm reviewing the code now, and there doesn't seem to be an immediately identifiable solution to me with this code review. I have some ideas brewing, however they require more heavy lifting than this solution which is no longer applicable :(\n. I created an alternative solution in #822 \n. Test failure was due to testing an invalid callable and throwing an InvalidArgumentException. That was something I would like to ask about. That responsibility would now be a part of the Resolver. With the Route, do we want to type hint callable for setCallable.\npublic function setCallable(callable $callable)...\nOr, do we want to keep the InvalidArgumentCheck in place when !is_callable($callable).\n. Here is a gist using the Container Resolver:\nhttps://gist.github.com/danielgsims/b9e5ad85cf30a5c5ece7\n. And the Dependency Resolver!\nhttps://gist.github.com/danielgsims/84efe4c10ac97c56b18c\n. @designermonkey Do you have any input on naming this thing? Do you like \"Resolver\"?\n. @silentworks That's great to hear. I will implement the pattern for the current version of Slim too when we get feedback from @codeguy \n. Yeah absolutely. I'll get it in over the next couple of days\n. @silentworks @codeguy there we go guys\n. @ecoreng It's really the difference between Dependency Injection and Service Location. Your solution doesn't actually allow you to inject dependencies, it just gives you access to a service locator through Pimple. Unfortunately, even with a service locator your Controller still has the responsibility of getting it's own dependencies. It seems like it might be splitting hairs, but by actually injecting dependencies, you get the benefits of typehinting and everything that comes with it, polymorphism etc. Also, it's easier to unit test!\nIn this PR, I made it so that you can customize how you inject things. You can inject Pimple and use a service locator, or you can use Pimple as a dependency injection container.\n. @silentworks - Pulled in latest changes so tests pass. Have you heard any feed back yet. :)\n. Thanks @connerbw. It's better to not inject the container, but I think many users are going to want to do it. I would absolutely suggest that everyone uses the Dependency Resolver. It helps your application be tested more easily.\n. Hey guys, I've been swamped but I'm going to pick this back up. Give me a day or two to get this resolved.\n. Okay guys, here's the update. I think it would be best to ditch the Resolve trait and stick with a class that we can overwrite if we want to change how route resolving works. I ditched two of the Resolvers that I wrote because that functionality was deprecated and replaced in trait code. I edited the final Resolver to use the majority of the logic from the Resolve trait. I was able to pull the trait successfully out of App and it's using the Resolver class fine. The trait is still being used in Route however when adding middleware.\n. My main complaint, and something I tried to avoid in this initial proposal, is that it's shouldn't be the Route's responsibility to figure out how to interpret something into a callable. It should just take a callable.  Something else inside of App or the Router should know how to make it happen.\n. @akrabat \nI created a new branch that makes the Route unaware of the container. I took the Resolver functionality out of App but now, the Router needs an instance of the ResolverInterface. The good news is the Router isn't aware of the container either because it's encapsulated behind the Resolver, and if someone really wanted to get away from Pimple, they could create their own Resolver. And again, if someone wants to change the functionality at all, they would just up something with the ResolverInterface.\nMy only concern with this method is changing the constructor signature for Router\nHere's the diff:\nhttps://github.com/slimphp/Slim/compare/slimphp:develop...danielgsims:RouterResolver?expand=1\n. Hey @lalop.\nI'm not too crazy about making the resolver an aggregate by default. I think it might be confusing. What if two resolvers could resolve the same string differently? It could be a mess. \nWe could inject the resolver with a setter though. It would make the code in the Router slightly more complex though, but nothing too crazy.\n```\npublic function map($methods, $pattern, $handler)\n    {\n        if (!is_callable($handler)) {\n        if (!isset($this->resolver)) {\n            throw new \\Exception(\"Cannot process Route handler\");\n        }\n\n        $handler = $this->resolver->build($handler);\n    }\n\n    //rest of map\n}\n\n```\n. Hey @akrabat - Did you get a chance to check out the diff here yet? https://github.com/slimphp/Slim/compare/slimphp:develop...danielgsims:RouterResolver?expand=1\n. @akrabat I see what you're saying about adding a route directly via the add method. In order to toss a string just at the route, the route has to be aware of the container. I feel like we should be straight forward. If the route needs a callable, give it a callable. I suppose we could switch gears and make the route take the resolver itself instead of the Router, but it seems like a creational responsibility, not a behavioral one, but it could be reasonable. What do you think?\n. I'll whip it up shortly.\n. This happens because Slim doesn't create an exception handler like it does for errors. All exceptions in Slim are handled with try/catch blocks. If you wanted to handle this without a code change, you could write your own try/catch blocks that tunnel up to the Slim error method.\nThis could be satisfied most simply with a try/catch block around the first middleware call in the run method. A more elegant solution would be to create an exception handler that would be applicable to both middleware and exceptions within controllers. This would chiefly require a rewrite of the call method. There is some output buffering going on,t his would need to be refactored and applicable application-wide to handle exceptions globally.\n. I honestly prefer using a single interface whenever possible. If I had any input on the initial design, I would have petitioned for a contract in middleware, but at this point callable middleware are out in the wild and I worry about backwards compatibility. Is there a strong reason to abandon using callable arguments as middle ware? I'd wager not.\n. In a perfect SOLID world, I would prefer to restrict to one contract as well - callable. Most apps I've seen with Slim just use callable and don't bother implementing the middleware interface. Again, I think it would do more harm than good to sacrifice backwards compatibility to remove anonymous functions as a valid option for middleware. \n. I see one problem with this. If you have an object, it will always return the print_r of that object. If the object can be cast a string using the __toString magic method, it won't be triggered by the print_r function.\nhttp://us3.php.net/manual/en/function.print-r.php#111738\nOf course you could always go with something like this:\nphp\nif (is_array($object) || (is_object($object) && !method_exists($object, \"__toString\"))) {\n    $message = print_r($object,1);\n} else {\n    $message = (string) $object;\n}\nThere are a lot of other ways to cast an object to a string out there. This kind of code is an antipattern because you can't cover all of your cases. For example, what if I implement the Json Serializable interface and want to log all of my classes as JSON? I think it's preferable to go one of two paths: handle all objects the same way, or create a user definable way to handle these logging methods. \n. The goal with #822 is so that you can decide what gets injected into your controller. All you have to do is set a config variable. The first option is to load controllers as they do right now, with nothing injected in the controller. The second option is to pass the Slim DI Container into the constructor like @zulrang suggested, but it's injected instead of you having to use the getInstance method. This makes it easier to debug. The third option is to load objects from your DI Container directly. There are some examples with the PR, and I'd appreciate any feedback. Thanks guys.\n. Remove the VERSION constant from App? It's fallen behind. See #1886 \n. Trying to make some progress on unit tests. I'm not sure if I should make this PR against Slim\\Http as well.\n. Testing this message gives us full coverage on the Router. I wasn't sure how others would feel by using a partial mock for testing the map urlFor -> pathFor. I thought it was okay because we don't care about that functionality, because it's tested in pathFor, we just want to make sure the alias works. I'd appreciate any feedback if anyone disagrees.\n. @akrabat Do you know anything about the HVVM Travis build? It looks like the error was converted into an exception, so the test goes on to run the subsequent code which shouldn't run. Any ideas?\n. @dopesong - Thanks for the feedback!\nTo address the '@' - There were two tests, one that tests whether the error is triggered, and another to test the functionality afterwards. I think the suppression operator was necessary because PHPUnit will convert the error to an exception through PHPUnit, right?\nAlso, with that strategy, how does PHPUnit keep that error handler attached? Just for the life of the one test case, the file, or the whole shebang? Do we need to use restore_error_handler in there?\n. I made some changes based on @dopesong's feedback. Closing, please see #1882\n. @dopesong - Writing the error handler this way helped us get around the weird error-conversion issue with the HVVM build on travis too\n. You shouldn't need the annotation and calling set expected exception.\n. I did a quick search on github, and I found some folks using it :(\n. Thanks @akrabat!\n. I decided to add a new class to mock these methods instead of making them private variables within App. I thought it made for better testing, and increases coverage on App. We can accomplish testing the functionality if we want to create internal function wrappers for headers, headers_sent, and connection status. We would just test it using a partial mock, but I think this is better.\nI decided to go with a concrete Mock GlobalUtil class instead of using PHPUnit to try to build a mock. I tried both ways, and the tests turned out more readable and less brittle with a real class to test against. Otherwise, I ended up with a lot of lines like this:\n$this->expects($this->at(1))->method('header')...\nAnd I broke them pretty easily. I'd appreciate any feedback.\n. That's fair, that's why I was asking for some feedback. There are two other options I can think of:\nOne would be creating those private functions in app. Another would be stashing wrappers to those functions in pimple.\nSolution A, which lets you test using a partial mock and is less intrusive:\n```\nclass App\n{\n    private function headersSent(...)\n    {\n          return headers_sent\n     }\npublic function respond()\n{\n     if (!$this->headersSent()) {\n     }\n}\n\n}\n```\nSolution B, put the functions in pimple, and change them with mocks at test time\n$container['headers_sent'] = $container->protect(function() {\n     return headers_sent();\n});\nI'll open both and post a diff link to get some feedback to see which one feels better\n. @akrabat or @silentworks \nHere is a gist of the idea\nSolution A:\nhttps://github.com/slimphp/Slim/compare/3.x...danielgsims:headers-app?expand=1\nSolution B:\nhttps://github.com/slimphp/Slim/compare/3.x...danielgsims:headers-pimple?expand=1\nI like Solution A better because it's simpler and would work better in IDEs, but solution B gets you some dependency inversion. What do you guys think?\n. Here is the documentation on Container Resolution. This is how you store a Controller class in the Container and wire it up to a route:\nhttp://www.slimframework.com/docs/objects/router.html#container-resolution\n. There may be a conflict with type hinting the methods as an array. The FastRoute RouteCollector::addRoute method accepts a string or array of strings of http methods. This is the only place I think we use the Route::getMethods function. So technically, even though the phpdoc documents an array of strings, if you use a string everything should work. This could be a BC break. \n. Maybe go make a note on the Slim 4 road map discussion!\n. I this is an interesting idea! I tinkered with this last night to prototype it, although I started to struggle to decide when and how I should use a tag feature. In your example, you were using the tag to decide when to apply middleware. I think it would be better to just configure your routes to use the middleware that you need, instead of having a stack that checked route tags. I'm just curious, do you have a real life example that you've encountered that this would help you solve?\n. @RyanGittins example makes sense. This is behavior that you can already accomplish, but not easily, and using tags might just be convenient to clean up some code bases and organize it, slightly differently than groups.\n@alexweissman brought up the idea that maybe a key-value store would be better than a list of tags. What does everyone think about that?\n. I whipped this up if you guys want to pull down the branch from my remote and play with it:\nhttps://github.com/slimphp/Slim/pull/1894\nI changed the tag method to addTag to be more consistent with the argument API. \n. @RyanGittins - addTags just calls addTag so we're good with the is_string check! And sure, I'll toss in that app function for you if you want to tinker with it.\n. @RyanGittins you get a list of routes with a matching tag from the router. I didn't expose it through the app yet, so you'll have to fish the router from the container first!\n. @JoeBengalen I think App will inject arguments returned from the dispatcher into the route's prepare function.\n. To expand, the arguments could be over written, which I think would be not ideal.\n. The dispatcher does return route variables that get sent into the setArguments function of the route, right? \n@silentworks is right that you could keep args from being over written by choosing argument / route names carefully, but that not may be immediately noticeable to users. While you could accomplish this with args, I think separating tags vs args clarifies intent and actively prevents collision.\nI wonder whether or not this is something folks would use enough to warrant a solution that is more purposefully exposed in the API. What do you guys think?\n. @JoeBengalen - You're right, the arguments can be used to set default values. When you dispatch, those values will be overwritten. \nphp\n$app->get('/hello[/{name}]', function ($request, $response, $args) {\n    $response->write(\"Hello, \" . $args['name']);\n    return $response;\n})->setArgument('name', 'World!');\nIf you GET to /hello/Joe, name's value will be overwritten to Joe, right? If you used an argument for the tag and it is over written, that could cause some errors. That's the only concern I have. @alexweissman's idea speaks more to the intent of the usage. \n. Absolutely Joe, that's what @silentworks meant when he suggested using clever namespacing, like if you used an argument called \"tags.api\" you would probably be ok. Like I suggested, if this is a common feature folks would like, having a dedicated API would be convenient. \nI just want to summarize the possible solutions that were suggested:\n- Do nothing, arguments work just fine if you're careful!\n- Create an array of values accessible on the route, like the tags PR, but the name is up for debate\n- Create an associative array of values accessible on the route, like arguments, that would be separate from arguments\n. We could take a more broad approach and create a method like findRoutes and return all routes that match a given callback. You could throw standard class properties on the route at that point, as well as anything else you can think of. \nMaybe something like this:\n```\n$app->get('/hello/{name}', function ($request, $response, $args) {\n    echo \"Hello, \" . $args['name'];\n})->tags = [ 'mytag' ];\n$routes = $app->findRoutes(function($route) {\n   return in_array('mytag', $route->tags);\n});\n```\nIt's not the best solution for this particular problem, but it's a broad solution that could help solve several problems.\n. And on my previous note, while it's not very nice to read, you can do that today by just getting the routes first from App.\n```\n$allRoutes = $app->getContainer()->get('router')->getRoutes();\n$routes = array_filter($allRoutes, function($route) {\n   return in_array('mytag', $route->tags);\n});\narray_walk($routes, function($route) {\n   $route->add($mw);\n});\n```\n. I had a hard time deciding when and if I'd use this, I guess we'll just need more feedback.\nOtherwise, I think it would be useful to filter routes more easily to help people solve these problems on their own. Maybe even $app->getRoutes() would help connect the dots without having to dig into the application's structure and avoid that \"train-wreck\" code.\nDynamically pulling the routes and performing operations on them is something I've done in the past in projects quite a bit, so I could see it being super useful to add a little bit of sugar on it.\n``` php\n class App {\n    public function getRoutes()\n    {\n         return $this->container->get('router')->getRoutes();\n    }\n }\n$routes = array_filter($app->getRoutes(), function($route) {\n    return $route->getArgument( 'custom.tag' ) !== null;\n});\n//doSomethingWithRoutes\n```\n. I like using getRoutes and array_filter. If it's warranted, we could use the Collection class to house routes, and then add some of the simple array_* functionality to it. \n$app->getRoutes()->filter($matchesTagCallback)->each($addMwCallback);\n. Is anyone else interested in continuing this discussion? It's been two months. Otherwise I am going to close my open PR associated with this discussion. Thanks!\n. Thanks @silentworks \n. The service locator is used in the documentation, but you don't have to use it. There's support for container resolution now, so you can leverage Pimple to handle your dependency injection.\nHere's an example:\n```\n<?php\nrequire_once \"vendor/autoload.php\";\n$container = new \\Slim\\Container;\nclass Dep {\n    public function getSomething() {\n        return 'test text';\n    }\n}\nclass TestController {\n    private $dep;\npublic function __construct(Dep $dep) {\n    $this->dep = $dep;\n}\n\npublic function index() {\n    return $this->dep->getSomething();\n}\n\n}\n$app = new \\Slim\\App($container);\n//define DI in container\n$container['dep'] = function() {\n    return new Dep;\n};\n$container['foo'] = function($c) {\n    return new TestController($c['dep']);\n};\n//resolve from container\n$app->get('/','foo:index');\n$app->run();\n```\nThat being said, I don't think this is flushed out well in the documentation. . To just reiterate, if you have a string like 'foo:index', Slim will look for the 'foo' entry in the controller and then look for a function called 'index'. You can use a callable too and ditch the colon and second half, for example:\n```\n<?php\nrequire_once \"vendor/autoload.php\";\n$container = new \\Slim\\Container;\nclass Dep {\n    public function getSomething() {\n        return 'test text';\n    }\n}\nclass TestController {\n    private $dep;\npublic function __construct(Dep $dep) {\n    $this->dep = $dep;\n}\n\npublic function __invoke() {\n    return $this->dep->getSomething();\n}\n\n}\n$app = new \\Slim\\App($container);\n$container['dep'] = function() {\n    return new Dep;\n};\n$container['foo'] = function($c) {\n    return new TestController($c['dep']);\n};\n$app->get('/','foo');\n```\nIf you do not have an entry in the container that matches the name, Slim will try to create the class itself and inject the container. \nYou have the ability to skip all that and define everything yourself, which I think is a better . ",
    "shahariaazam": "@petarov I tried in that way you recommended. I also built a solution for that. Have a look Unit Testing for Slim Framework\n. ",
    "thnt": "closed without explain ?\n. ",
    "geggleto": "I didn't think it needed one. His use case does not make sense, and neither does picking and choosing 1 or more cookies to go in plain-text from any point of view.\nHowever the work around would be to set encrypt to false and encrypt the payload yourself.\n. I know this is a bit nit-picky, but if we are going to remove the trait; can you please remove it from the PR repo so that it shows up as removed on the diff. Helps with reading the diff and understanding what is changing without needing multiple tabs.\n. This is a php configuration error not a Slim error.\nYour file is larger than the allowable memory for a php process.\n. https://github.com/geggleto/slimtutorials been trying to put up some information of different patterns.\n. I am going to revive this topic for discussion. What features are we looking for in the middleware ?\nphp\n$app->add(function ($req, $res, $next) {\n    session_start();\n    $next($req, $res);\n});\n. https://github.com/geggleto/SessionMiddleware\nTakes _SESSION injects into Request via Attributes.\n. I don't know of any but I would imagine its built already ?\n. @r3wt @codeguy @silentworks \nMight look something like...\n```\n$app = new \\Slim\\Slim();\n//If we care to parse/sanitize environment variables\n$app->add(new \\Parser\\EnvironmentParser()); \n//If we want to parse/sanitize JSON bodies\n$app->add(new \\Parser\\JsonParser());\n//If we want to parse/sanitize PlainText bodies\n$app->add(new \\Parser\\BodyParser());\n//If we want to parse/sanitize _POST\n$app->add(new \\Parser\\PostParser());\n... etc\n```\nIt does give us more control over the project and makes it a bit more clear at a high level what goes on in our app. At the moment if I were to hand a project to a co-worker there is little way to view the code and KNOW how slim handles input. \nThis would mirror other projects and languages (express.JS comes to mind).\n. I think what this was mainly pointing to would be the ability to inject different Parsers as middleware instead of having them all contained in the app instance.\n. After speaking with @codeguy in IRC, I am going to surface the Parsers out of the request object and set them up as middleware. \n. After looking into using middlewares for the parsers, it does not seem to be possible to abstract them out of the Request class and keep the PSR7 message interface on the middleware as it lacks the ability to reference the Slim\\Http\\Request->registerMediaTypeParser\nWe can get around this limitation by changing registerMediaTypeParser to static, as well as the bodyParser protected variable.\nWe would not need to use middleware, but access the request object after its created to add the parsers. Although this seems really hackish,\n. A little updating is in order with the adoption of PSR-7.\nPSR-7 defines an UploadedFileInterface, which for the most part is pretty straight forward. However it does also support returning the File as a stream. As such we need a more encapsulated Object that implements the StreamInterface (current supported in \\Slim\\Http\\Body).\nI would think that the implementation of the StreamInterface should be extracted from Body into a new class that both the \"UploadedFile\" Object and the Body Object can Utilize.\nThe Linkage is in the ServerRequestInterface where getUploadedFiles() is defined.\n. Hurray! :+1: \n. Sounds like an ContentType issue to me.\n. just on the off chance, you have the json extension installed and configured in your environment ?\nSource Code:\nContentTypes.php\n...\n    protected function parseJson($input)\n    {\n        if (function_exists('json_decode')) {\n            $result = json_decode($input, true);\n            if ($result) {\n                return $result;\n            }\n        }\n    }\n...\n. Run phpinfo() see if there's a Json header\n. RFC 3986 attempts to address this issue.\nReference: https://www.ietf.org/rfc/rfc3986.txt\n6.2.4.  Protocol-Based Normalization\nif they observe that a URI such as\n      http://example.com/data\nredirects to a URI differing only in the trailing slash\n      http://example.com/data/\nthey will likely regard the two as equivalent in the future. .\nReference: http://en.wikipedia.org/wiki/URL_normalization\nAdding trailing / Directories[clarify] are indicated with a trailing slash and should be included in URLs. Example: http://www.example.com/alice \u2192 http://www.example.com/alice/\nHowever, there is no way to know if a URL path component represents a directory or not. RFC 3986 notes that if the former URL redirects to the latter URL, then that is an indication that they are equivalent.\nProbably should be the same, but it doesn't sit well with me. For Example\n/account\nThis route renders a \"My Account\" web-page and\n/account/\nThis route is a API end-point for getting an AJAX request with all of the details for My Account.\n. That is pretty counter intuitive ... Also it doesn't appear to be documented anywhere . Thanks\n. A wrapper around the filter_var makes sense to me.\nI know route parameters can have filters attached, is there any way to extend that functionality to the request body ?\n. @codeguy I'll take this on.\n. https://github.com/geggleto/vms/blob/master/src/Services/vSlim.php\n@dominicbusinaro here is a kinda of beta version that I have been working on\n. https://github.com/geggleto/svl more polished version\n. Slim currently doesn't have a way to filter the raw data currently as the request object is created during bootstrapping where in some instances the request body is parsed automatically.\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Http/Request.php#L147-L152\nThe only way around this is to override the way Slim get's the request object. This seems like a lot of work and likely should be a lot easier to do.\n. This is why I kind of wanted Slim to have factories... we could extend the basic RequestFactory to have FilteredRequestFactory which returns a filtered request object... Can't do this in the 3.0 branch though as it would likely be a BC break.\nin your example the filtered request won't propagate through the system unless you overwrite it.\n$container['request'] = $container['requestFilter']->getFiltered();\n. When I think of a filter, it would be pretty all encompassing. like removing a sql injection attempt or an attempted xss.\n. @akrabat  once parsed the body cannot be reparsed\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Http/Request.php#L936-L941\nAnd unfortunately if you are accepting a POST request from a HTML form the body will get parsed in the bootstrapping of the app, meaning that you can't filter it, unless you recreate the request object itself in your middleware.\n. I don't see a way to current get the raw body data, so we are filtering over the parsed data already?\n. I mainly dislike doing the same thing more than once... it makes most sense to me to be able to filter the body before anything is done. But given slim's current architecture I don't see how that is possible.\n. +1 for this!!!\n. :+1: for this.\n. I think this is actually a mis-use of the contentType. You should only use this when you know the route is going to output that type of content. I realize it might seem logical to group items that have the same content and in such a case you can use a route that passes control rather than a group.\nExample: Not entire sure if this is 100% working code\n$app->get('/json/:optional+', function () use ($app) {\n    $app->contentType('application/json');\n    $app->pass();\n});\n. You could also add a route middleware for this possibly as well. \n. in 2.x there are 2 different types... Route Middleware and Just Middleware.\nRoute Middleware is excellent for auth I have found. See below.\n```\n    public function isAuthed() {\n        return function () {\n            $user = self::get('user');\n        if (!isset($user)) {\n            $this->rejectAccess(\"Login Required\");\n        }\n    };\n}\n\nI use this in Routes like so:\n$app->group('/games', $app->session->isAuthed(), function () use ($app) {\n});\n```\nYou can probably do a similar thing.\n```\npublic function setContentType($type = 'application/json') {\n        return function () use ($type) {\n            $app = \\Slim\\Slim::getInstance();\n            $app->contentType($type);\n        };\n}\n$app->group('/json', $object->setContentType('application/json'), function () {\n    //Your Stuff\n});\n```\n. I am plus one for dropping cookies out of core and putting them as middleware. Seems to have been following the trend ie sessions and lots of other things\n. Actually I think your suggestion might be better. A service provider to parse the header and then middleware to interact with it. For the interaction we can use an interface so you can develop your own and plug in play for additional functionality \n. Is there even any allowances for this via the psr7 interface? I am not up to speed on it yet. But it would seem that, our choices are going to depend on filling that requirement first . \n. Reading that thread gave me chills. The whole point of a framework is to make things easier. I don't see how rawly encoding cookies into header fields does that.\nHmm I think this might be getting out of hand a bit. I am going to bow out for now so I can think on it having 2 more objects seems excessive and not very clean especially given the coupling they are likely to have. \n. +1 for that last suggestion. \n. I personally don't use cookies at all, however I know there are valid use cases. I don't think they will be around forever so having them somewhat optional would be beneficial. \n. How will this work with older apps upgrading to 3.x ?\nI really dislike in the example above the signature change, that for me personally would be an absolute reason why I would not upgrade my current projects.\n. @rkrx My apps have been written to utilize the service locator pattern (at the time it was just easier and faster).\n. Will Do\n. /cc @codeguy #1166 \n. /cc @codeguy\n. /cc @codeguy Updated.\n. @r3wt No, I don't use HHVM in production. I know someone else has benchmarked it, was hoping to get some people to upload their results.\n. They are all disabled ;)\n. Also the core of lumen is in the lumen kernel which is a composer dependency \n. Update as of this morning:\nhttp://104.236.58.25/\nResults\nNote: All tests were done with ab -t 60 -c 5 \n[627.89 req/s] Lumen Results\n[579.61 req/s] Slim 2.6.2 Results\n[488.95 req/s] Slim 3.x - develop **\n[376.28 req/s] Slim 3.x - develop *\nNote: These tests were done with siege using: siege -c 5 -t 30S -b \n[420.65 req/s] Slim 2 \n[411.56 req/s] Slim-Dev ** \n[392.18 req/s] Lumen \n[262.99 req/s] Slim-Dev * \n.  http://104.236.58.25/xhprof/xhprof_html/index.php?run=552fdb96a5eee&source=myapp\nXhprof of current dev branch.\n. /cc @codeguy  Updated with optimized autoloaders... Slim v3 now virtually the same as v2. :+1: \n. http://stats.slimframework.com/\n:+1:  Also great work completed on Slim today!\n. I will post the config files I think, But yeah --no-dev and optimize-autoload are used.\n. :+1: I am with tuupola on this issue. I think its over complicating a framework that was meant to be simple to use. If you want a different DIC, fork slim and have at it.\n. Is it possible to surface this as a configurable option? Then everyone can use whatever they want. I see a lot of back-and-forth on this issue.\n. It is currently how it works, there are talks about re-enabling output buffering support.\n. Slim does not support databases, slim does however catch all exceptions. In this case you can see that there is serving wrong with your database layer as it is throwing a pdoexception \n. They are not inter-changeable. :-1: \nIn slim's instance is_callable is used as a syntax check and not to check to see if its actually an available method.\nOnce significant difference between the two: If an object has the magic __call() method implemented, then is_callable() will return TRUE for any non-existent method, while method_exists() will return FALSE.\n. I agree with this idea in principle, and would like to see this as a long term goal. I think this should be tagged for a 4.0 release as it is a major structural change and we really need to push out 3.0 sooner than later.\n. You are calling it before Slim::run()... so how can you halt something that hasn't happened yet.\n. It returns mixed string or array needs to be casted\n. :+1: \n. If you are extending the functionality it is really not Slim anymore ;) \n. #1260 :+1: \n. You could also just post via ajax then pass a message back with a new URI if the form is successful\n. You need to use flashNow, otherwise itll be available on the NEXT request.\n. in delme.php...\n=$flash['info']?\n. Remove session_cache_limiter(false);\n. //todo @geggleto test pr\n. //cc @opengeek\n\nAdditional Tests Required.\n-- uploadedFileConstructTest\n-- parseUploadedFilesTest\n-- createFromEnvironmentTest\n-- getStreamTest\n-- moveToTest\n-- moveToStreamTest\n-- getErrorTest\n-- getClientFilenameTest\n-- getClientMediaTypeTest\n-- getSizeTest\nAdditional Provider setup to handle slim.files\n. :+1: by me. I think it is solid enough to put up for beta-1\n. @codeguy Is this part of the code responsible for outputting the response body ?\n. I am going to wait to action this as I know the Slim\\Http\\Body object is changing with the UploadedFiles PSR implementation.\n. :+1: \n. close this in favor of #1311 \n. Largely because middleware is application specific and the Middleware class has been deprecated.\n. I still stand firm on all middleware should be contained in the application namespace.\n. @codeguy @ahundiak Is there a way we can have a 3rd party service do this, I would like the ability to keep using the PSR interface in my functions rather than the Slim object.\n. I dont see why withRedirect needs to be there... it is easy enough to accomplish via proper status codes...\nphp\n$response->withStatusCode(301)->withHeader('Location', 'your new uri');\nI would prefer having some sort of Helper that implements these helper functions that implements the functions via the PSR-7 methods so that the Helper is merely reducing the amount of code one has to write and not providing additional functionality over the PSR-7 interface. \nIf you create a helper object that operates only within PSR-7, then you merely have to include that object in another project and you maintain interop.\nOne could make a static helper class with functions that have the signature of either ($request) or ($response)...\nin this case it might be something like...\n``` php\nclass PSRHelper {\nprotected static function $encodingOptions = array();\npublic static function withJSON($request)\n{\n    $request = $request->withBody(json_encode($request->getBody(),$encodingOptions));\n    return $request;\n}\nTo use...\n//Usage ?\n$app->add(function ($request, $response, $next) {\n    $next(PSRHelper::withJSON($request), $response);\n});\n```\nProbably not valid code but I hope this illustrates my idea.\n. :+1:  for option 1.\n. Before and after...\n@designermonkey \nhttps://gist.github.com/geggleto/7249ed53920c8b1618d3\nOr am I not understanding what you mean.\n. What do you mean by after the router exactly.\nAre you talking about middleware that runs after the route callable has been called ?\n. I think this sort of thing is already possible and I don't think you need another stack.\nGranted the details are in how you write the middleware so it is not very readable.\nOrdering I think goes the same way, Last in first executed. So even if you intermixed before and after middlewares it executes as intended.\n``` php\n//Before\n$middleware = function ($request, $response, $next) {\n  //Do Stuff here\n  $newResponse = $next($request, $response);\n  return $newResponse;\n};\n//after\n$middleware = function ($request, $response, $next) {\n  $newResponse = $next($request, $response);\n  // after\n  // do stuff here\n  return $newResponse;\n};\n```\n. Change in middleware signature\n``` php\n//From\nclass AuthMiddleware extends \\Slim\\Middleware\n{\n    public function call()\n    { } \n}\nToo\n$app->add(function ($request,$response,$next) {});\n```\n. Removal of some components from core into separate components\nFlash Messages\nCookies\n. New Route Callback Signature\nphp\n$app->get('/', function (\\Psr\\Http\\Message\\ServerRequestInterface $request,\n                             \\Psr\\Http\\Message\\ResponseInterface $response, $args) {\n//do stuff!\n});\n. Read and parse request bodies based on content type:\n``` php\nrequire 'vendor/autoload.php';\n$app = new Slim\\App();\n//You want to make sure this one is as close to app->run\n//Middlewares are run Last In First Executed\n$app->add(function (\\Psr\\Http\\Message\\ServerRequestInterface $request, \n\\Psr\\Http\\Message\\ResponseInterface $response $response, $next) {\n    switch($request->getHeader('Content-Type')) {\n        case 'your-content-type' : { //Keep in mind slim does define some basic parsers.\n        }\n        default : {\n             $response->withStatusCode(400)->withBody(\"Unsupported Content-Type\");\n        }\n    }\n    return $response;\n});\n$app->run();\n```\n. Hooks:  Should be converted into Middleware.\nRoute Middleware is added differently.\nPreviously\nphp\n$app->get('/', $mw, $mw2, function () {});\nNow\nphp\n$app->get('/', function () {})->add($mw2)->add($mw);\n. To get the container inside a route function, IE to replace the DI from slim 2.\nphp\n$app->get('/', function () {\n    $container = $this->getContainer();\n});\n. @akrabat @codeguy google doc for this?\n//cc @silentworks @lalop \n. Optional Route Parameters need to be solidified\n. SLIM MIGRATION GUIDE   June 27th 2015   Glenn Eggleton geggleto@gmail.com\nRemoval of Stop/Halt\nSlim Core has removed Stop/Halt. \nIn your applications, you should transition to using the withStatusCode() and withBody()\nExample In Slim 2.x:\nphp\n$app->get(\u2018/\u2019, function () {  $app->halt(400, \u2018Bad Request\u2019); });\nAnd now in Slim 3.x:\nphp\n$app->get(\u2018/\u2019, function ($req, $res, $args) { return $res->withStatus(400)->withBody(\u201cBad Request\u201d); });\nHooks\nSlim v3 no longer has the concept of hooks. Hooks were removed as they duplicate the functionality already present in middlewares. You should be able to easily convert your Hook code into Middleware code.\nRemoval HTTP Cache\nSlim v3 no longer ships with HTTP Cache methods in core. It has been moved to its own separate repo (https://github.com/slimphp/Slim-HttpCache )\nChanged Redirect\nIn Slim v2.x one would use the helper function $app->redirect(); to trigger a redirect request.\nIn Slim v3.x one can do the same with using the Response class like so.\nExample:\nphp\n$app->get(\u2018/\u2019, function ($req, $res, $args) {\n    return $res->withStatus(301)->withHeader(\u201cLocation\u201d, \u201cyournewuri\u201d);\n});\nMiddleware\nSignature\nThe middleware signature has changed from a class to a function\nNew signature: php $app->add(function ($req, $res, $next) {});\nExecution\nApplication middleware is executed as Last In First Executed (LIFE)\nFlash Messages\nIn v3.0 the concept of flash messages has been removed. There currently is no planned feature for this, but could likely be a part of the Cookies package\nCookies\nIn v3.0 cookies has been removed from core and moved to a separate component  See (https://github.com/slimphp/Slim-Http-Cookies)\nRemoval of Crypto\nIn v3.0 we have removed the dependency for crypto in core\nPHP Version\nSlim v3.0 requires php 5.4+\nRoute Callbacks\nIn v3.0 we have adopted a new callback signature\nphp\n$app->get('/', function (\\Psr\\Http\\Message\\ServerRequestInterface $request,\n\\Psr\\Http\\Message\\ResponseInterface $response, $args) {\n//do stuff!\n});\nNew Router\nSlim now utilizes a new more powerful router ( https://github.com/nikic/FastRoute )!\nRoute Middleware\nThe syntax for adding route middleware has changed slightly.\nIn v3.0:\nphp $app->get(\u2026)->add($mw2)->add($mw1);\n. @dopesong Yeah I need to update the migrations docs this week.\n. 1) Add Page to explain how the Container works with callables\n2) Add Page to explain what the Immutability of the PSR-7 objects means\n. @silentworks I really just hate switch statements, haha.\n. ## Middleware\nMy problem with an interface is that we will lose the ability without some \"magic\" to do ... \nphp\n$app->add(function (...) {});\nSlim is a micro-framework, and I think we don't need to wrap everything to objects.\n. the optional URL problem is only for calling via urlFor correct?\n//cc @silentworks \n. So to clarify @silentworks \n``` php\n//Given this route\n$app->get('/test/{param1}[/{optional:[A-Za-z]}]');\n//the request \nGET /test/1/abcdefg\n//would work in Slim currently?\n```\n. In v2 the router did support them... \n. I very much rely on the optional parameters functionality. It needs to be in v3.\n. I guess we are at a point where we need to decide if we want to extend FastRoute to include the capabilities we need or use another Router that already has those capabilities.\nGiven the whole, lets not reinvent the wheel. I prefer the latter over the former since Aura.Router has all the features we need as well as strategies for deployment to Production.\n. This was a few hours ago, but I do believe FastRoute does not support optional parameters at all. urlFor is a pure Slim item, which spawned this whole fiasco with FastRoute.\n. Currently in v3 the api for attaching middleware is fragmented. Route groups are handled internally in Slim and not actually in the router and that seems a bit weird when we are using 3rd party components.\nUsing a more feature rich router would likely pull some of the legacy code out of Slim and unify the API :+1: \n. :-1: @akrabat  There shalt be no mention of this removal of a feature cries\nYeah it is a huge convenience thing. Given that it makes it very easy to apply say an authentication layer to an entire slim application. In v3 I do not believe there is pass-thru anymore so that option is also gone as a mitigation. ;(\n. @akrabat looking at\nphp\npublic function group($pattern, $callback, $name = null, $middleware = []);\nI can :+1:  that signature, its not as clean as doing ->add() but at least I don't have to apply middleware to all the subsequent routes.\n. Yeah!!! :100: \n. :+1: \n. The router dependency has been updated. #1289\n. 100% agree, but a hack is required so our users can alpha our development branch.\n. @GrahamCampbell \n- Installing nikic/fast-route (v0.5.0)\n  Loading from cache\nwith ^0.5 ;(\n. Ah ok, that explains the version not found error for ^0.6\n. @GrahamCampbell So we can remove minimum-stability requirement from our project.\n. it just might...\n. #1314 :)\n. :+1: \n. 2)  still required minimum-stability\n. I am okay with renaming it to pathFor.\n. Hmm, I guess one could do that by implementing their own container with stubs... but that seems a bit out of scope for that test.\n. Perhaps I can add a static method that somehow overrides the constructor... but I think that might be a problem for another day :)\n. So in the test case, create your own container and then override it then pass it into App.\nThat should work i guess. Both Environment and Request need to be overridden. \n. Doc's are wrong... as far as I know script_name cannot be empty.\nOffending Code\nphp\n//...\n            // Physical path\n            if (strpos($requestUri, $scriptName) !== false) {\n                $physicalPath = $scriptName; // <-- Without rewriting\n            } else {\n                $physicalPath = str_replace('\\\\', '', dirname($scriptName)); // <-- With rewriting\n            }\n//...\n. Is the real problem not what we get for pattern matching in FastRoute ?\n. @designermonkey only if you have a group at the root level... \n. what version of slim ? is it the 2.x branch or 3.x ?\nThanks\n. This does not sound like a slim bug, but i am not an expert on xdebug either... \n//cc @akrabat @silentworks @codeguy \n. I am on the fence about adding helpers for notFound, Error and notAllowed... but I do see them as helping people migrate from v2 to v3. Having said that I will create a new issue for that discussion.\n//cc @akrabat @silentworks I PR'd the docs repo with the updated code and this can be closed.\n. @JoeBengalen I think its the latter that makes the most sense.\n. @Lewiscowles1986 I can't come up with a valid use case for this... can you provide us a pseudo code example of what you want?\nThe only thing I could come up with, defeats the purpose of PSR-7. which would be a proxy to avoid the would $this['notAllowedHandler'] ... \n. :+1: This should be documented... for that matter I don't know if the Container is explained well enough in the current documentation. This is a prime example of it though :)\n. it is currently unclear in your PR what would happen if... \nphp\n//.... /hello/Alex\n$app->get('/hello/{name}', function ($request, $response, $args) {\n    $response->write(\"Hello \" . $args['name']);\n    return $response;\n})->setDefaultAttributes(['name' => 'Bob']);\nI think it should overwrite Bob...but I would like a test case for this exact situation please :)\nOther than that it looks useful :+1: \n. :+1: \n. Ideally @JoeBengalen it should probably throw ... \\ContainerInterfaceException \n. Also if you would be so kind as to add a test case for that, as there currently is one to test for an exception should something bad be passed in for a container!\n. Yes :) :+1: \n. :+1: This looks good :)\nI am unsure of the name...but not a show stopper\n. .htaccess is 100% independent of slim. .htaccess is an apache thing.\nWhat you need to find out from your provider is if they support Url Rewriting which is what the htaccess file does. Takes all HTTP requests that dont resolve to a file and passes it to the index.php with all query params and such.\nThis is an environment issue, not a slim one. \nI wish you good luck though!\n. @codeguy I know this is jumping the gun a bit... and I figured we would need to wait to see where PSR-11 lands... but this seems to be a good bet imho.\n. Since most of this stuff is internal there should be no user-land BC breaks right?\n. $app->subRequest\nhowever subRequest will be deprecated in slim 4.. What version of slim is this for? \n. What you likely want is a ~~route~~ group middleware.\nGroups are basically wrappers around urls to add middlewares.\n``` php\n$app->group('/', function (...)  use(...) {\n    //Your site's routes\n})->add(function ($request, $response, $next) {\n    $route = $request->getAttribute('route');\n    //do stuff\n});\n```\n. The above solution should be fine if you limit the number of routes in your app by inspecting the Envrionment and only loading routes based upon the resource URI that is being accessed.\nExample (Using $_SERVER):\n```\nif (strpos($_SERVER['REQUEST_URI'], '/auth') !== false) \n{\n    //Load /auth routes here\n}\n```\nThen the cost is not exactly a lot, since you are only applying mw to a subset of the routes, and you are also only ever adding a subset of those routes. You can expect to get a fair amount of performance increase using this type of strategy [in larger applications].\nI hope this helps!\n. The problem would come into play if you tried to make a sub-request to a route that was in a group.\nSo then we would need to keep track of what groups were initialized or not... Another can of worms :)\n. In my use case, I have a simple check to see if the user has the correct permissions to view the resource. I set that an app level and I inspect the request_uri and compare it to what is loaded into that users session.\nIf there is not, I return a 401 and do not continue the chain.\nIt is slight different than your use-case above.\n. @akrabat then are we not just implementing hooks?\nI'm okay with that, I would think that they have some use cases.\nPros: more granularity of the execution of the application\nCons: more complicated dispatch process\nSeems like a non-starter to me\nHooks:\nBefore / After Dispatch\nNot before / after route cause that actually is a middleware\n. :+1: I like this as I do use it in Slim 2, will help migration projects\n. a test for App:Run i have not been able to get to it.\n. Oh so much yes on this... :100: * :+1: \n. https://github.com/slimphp/Slim/blob/3.x/Slim/Http/Stream.php#L181\nshows that the contents of the stream are returned, thus theres nothing left in the string.\nslim uses getParsedBody internally which is why if its a parsable item the body is left empty.\nRewinding does not help because PHP is dumping the content as it reads it as its basically a byte buffer.\nOnly in a file implementation could you rewind since the data is on disk and not in memory.\nI do believe this to be a bug in our implementation.\nUpon Request class initialization the stream should be read in full and stored in a protected attribute, then it can be returned at will via __toString and getContents()\n. For reference: https://github.com/phly/http/blob/master/src/PhpInputStream.php#L38\n. //cc @akrabat \n. Slim has no limit in terms of the length of its response.\n. @LeoLR there are many possible reasons, it would be helpful if you could post more information other than \"it doesn't work\"\n. What version of Slim are you using?\n. The one problem with this fix is that it reads the entire input stream into memory again... Given post_max sizes this is not ideal. However there does need to be a solution for this issue. We might need an additional wrapper around the current stream api implementation of php.\n. That's no problem, thank you for letting us know!\n. It is unlikely that this will merged as we are only accepting security fixes to the 2.x branch.\n. It should be noted if you are using the _METHOD overloads that, this is not an issue iirc.\n. I would just like to note that the attach() is not part of PSR-7.\nTo solve this problem would we not just throw an exception if you are trying to attach on a Stream that already has something attached ?\n. I can't reproduce it. Slim uses Exceptions to control the flow, which is just a quirk of slim 2. \n. +1 for passing array to pimple.\nI want to have all the config in one file, which includes the TwigView\nExample: https://gist.github.com/geggleto/81cd05c5239ed56d70e2\n$this->settings['view'] is where the closure is...\n. This is a non-starter. It is required by PSR-7.\nhttps://github.com/php-fig/fig-standards/blob/master/accepted/PSR-7-http-message.md\n. I can also say that your example code works fine, I am using such things in production.\n. Slim Internals in the middleware department are here....\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/MiddlewareAwareTrait.php#L66\nWhere you will see:\n$request is of ServerRequestInterface type\n$response is of ResponseInterface type\n. I am pretty sure this came about from the discussion about php://input not being seekable \n. //cc @akrabat @silentworks Looks good to me!\n. Simple...\n<input type=text name=emailto[] value=''>\n<input type=text name=emailto[] value=''>\n<input type=text name=emailto[] value=''>\n<input type=text name=emailto[] value=''>\n<input type=text name=emailto[] value=''>\n<input type=text name=emailto[] value=''>\n<input type=text name=emailto[] value=''>\n. well, I was merely pointing out that if you can create a proper request you can have an array of emails.\nThe above example was 1 way to do it.\n. Wrong encoding on the request.\n. screenshot your headers tab\n. Zyles, no.\nIn v3, the callables are only resolved once a route has been chosen to be dispatched.\nHowever you can all of the Route objects through the router.\n$app->getContainer()->get('router')->getRoutes();\n. You are a rockstar :) :+1: \n. @yurevichcv you are free to overwrite the defaults at any time during execution by simply overwriting the default container instance like this.\nunset($container['environment']);\n$container['environment'] = new Environment();\n. Please no more traits... \n. Can confirm this works in 9430d0efc06d0eb27f5c3a4db720a464a613203c\nphp\n$app->get('/test', array(Controllers\\TestController::class, 'test'));\n. Can confirm this works in 6d6d861cb2be2b0a0535aaea61abea6476c87c7d\nphp\n$app->get('/test', array(Controllers\\TestController::class, 'test'));\n. In both cases Test is a public static method on the TestController class.\n. @mrcorex are you using the full namespace of the class in your array syntax ?\n. Maybe he means the defaultConditions from slim2 ?\n. $app->put(      '/blog/{id:\\d+}',   BlogController::class . \":update\")->addMiddleware(SecurityMiddleware::class);\n. Yes. This has nothing to do with slim. Your $update->name is an empty string and that is not allowed by your database.\nedit Furthermore you are using the correct methods to get and parse the JSON body... There must be a problem with your actual Request.\n. 1. You can write unit tests.\n2. You can use Postman (an extension for chrome).\n3. You can use cURL from command line.\nForms do not send data via JSON, unless you are sending them via an ajax form.\n. I assume the reason why we bind the App is to get the closure... you could only then remove the App dependency and replace it with a Container-Interop dependency... I am unsure about the side-effects if you were to ignore at minimum passing the container which slim uses.\n. The functionality was changed a few weeks ago to allow slim users to define container services at the root level.\nI think you hinted on this... it is not possible to define container services \\o/ during construction of the container\nbefore the change\nnew Container(include \"../containerConfig.php\");\nwould place everything into a key 'settings' not allowing for MyClass::class resolution without marking the service ['setting'] in front of it... Making you either access the settings for your app's services (Silly) or define the services after container construction.\nAfter the change you can define services in your config file like...\nYou can even set your own settings by just placing them into the settings key\nreturn [\n   \"settings\" => [\n        //... your settings\n    ],\n    MyClass::class => function ($c) {\n        return new MyClass();\n    }\n];\nRegarding your setting changes... you can see what would happen here.\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Container.php#L96-L98\n$this['settings'] = function ($c) use ($userSettings, $defaultSettings) {\n            return array_merge($defaultSettings, $userSettings);\n        };\nI believe the precedence is right to left so your defaults override the slim defaults.\n. Can we see the actual code ?\nCould be a bug with something, there were recent changes made to the callable resolver things....\n. Yeah I am all for cleaning up the internals... It does appear to be a mess and I dislike reading the router code especially since there is no comments describing what is going on.\nWhy can't we actually just have a RouteFactory that handles the construction of the routes ?\nDependencies can be injected from the container and then the logic for making a route falls in that factory class.\n. Maybe for 3.1 ... Reading through the source it just screams spaghetti  ... there are a lot of optimizations that can be done ... but I know there is quite a push to get it to release atm.\n. I would tag for 3.1 might as well do it proper. Then again others might not care for the Factory methods ;)\n. I dont see why you would think /recipes would match /recipes/{handle}... you did not mark the 2nd route with handle being optional\n. and what route are you accessing? just /recipes ?\n. me thinks its a quirk of FastRoute :D\n. @designermonkey Hey John, I had open a PR for RouteGroups class I added in your request for null on the invoke ( #1475 ). Hope you don't mind :)\n. API Clean Up.\nCurrently we use the container to initialize all of the Slim dependencies. \nI want to move this to a more object oriented design using Factories. \nThe 4 classes I listed have a hard-dependency on the Environment class with those static constructors, and it would be better a better design and make slim classes more adaptable. This goes with #1342 \nThe constructors for some of these classes are extremely difficult to work with.\nExample: \nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Http/Request.php#L169\npublic function __construct($method, UriInterface $uri, HeadersInterface $headers, array $cookies, array $serverParams, StreamInterface $body, array $uploadedFiles = [])\n. Serialize is not required by Slim ... but I have no idea why your app is trying to serialize your collection.\nIs there some sort of middleware going on or?\n. What version of slim is it?\n1411 is a blank space in the head repo.\nbut it might be https://github.com/slimphp/Slim/blob/2.x/Slim/Slim.php#L1412\n. You can flush the buffer.... yourself... http://php.net/manual/en/function.ob-flush.php ... It's a bit of a pain...\n. Updated ... will add more detail later\n. the method signature changed and your route callables are provided with a request and response object.\n$app->get('/', function (Request $req, Response $resp, $args) { });\n. You will need to modify your \\My\\Api::call() to accept parameters. It is not possible with PSR-7 to globally fetch the Request object as any modification to it results in the invalidation of the previous object because PSR-7 request/response objects are VALUE objects and are immutable.\n. No App instances \nNo access to $app->request ... $app->request will pull the original request object from the container, which will NOT have any middleware executed on it.\n. function (\\Slim\\Http\\Request $request, \\Slim\\Http\\Response $response, $params)\nshould give you autocomplete with getParam getParams\n. https://github.com/nikic/FastRoute for router documentation!\n. You do it exactly the same.\nAny change in _SESSION is reflected in the cookie.\n. :+1: \n. what version of PHP do you have? ... \n. These errors point to you not including vendor/autoload.php\n. I am confused with your namespacing.\nYour controller namespace should be Ultimateboard\\Controllers\nThus in your app it should be new (Ultimateboard\\Controllers\\Maincontroller())->index();\nAfter you make the change make sure to dump-autoload using composer\n. please post a GIST of your project's bootstrap files.\n. glad we could help.\n. Your user is false. this results in nothing being displayed.\n. tip of the day, dont use php my admin... use something like sqlyog or mysql workbench when dealing with mysql related stuff.\n. You can do this currently with Slim, no PR needed.\nFor PUT iirc:\n$.post('/mypost', { _method: \"PUT\" }, function (success) {});\n. I guessed he had been doing something in Angular.\n. a middleware would be perfect for this. this is outside the psr7 spec but i\nget taht some people might want it which fits well with middleware in\ngeneral. i would love to see a middleware library that is psr7 compliant\nthat does request modification.\nOn Wednesday, 11 November 2015, T. Thiery notifications@github.com wrote:\n\nSlim is a general purpose api framework. It features method overrides for\nform posts and headers. It does not support query string based overrides,\nwhich is a pity. I do not change my api design and cripple the data model\nbecause of a technology choice (especially since I already have this\nfeature implemented as a slim middleware). I think the slim maintainer\nshould decide yes or no for the feature request. Discussing which client\nframework is used (does not matter BTW its plain jquery) does not help.\nFurther using put and delete is a recommended best practice ... Also for\nclient side webs, spa and apps.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/issues/1562#issuecomment-155947127.\n. I will cook up a middleware to solve this problem.\n. Here we are :)\n\nhttps://github.com/geggleto/method-override\n. https://packagist.org/packages/geggleto/method-override\ncomposer require geggleto/method-override\n. Well Given that in Slim 2 you nearly can't use exceptions at all, we can likely add that in there somewhere.\n. You should be setting your webroot to the public folder, not using an .htaccess to redirect queries.\n. This is such a huge edge case, I am for not doing anything.\n. Quite old, closing :). you can do this as an application developer via your own middleware!\n. An Action could look like this...\n```\nclass MyAction {\n    public __construct( ... my DI stuff )  { }\npublic function __invoke($request, $response, $args)  { \n    return $response;\n}\n\n}\n```\n. I think it should be case insensitive.\n. :+1: meh we discussed this in IRC it, I approve of keeping it simple.\n. I want to write up more stuff regarding the getIp() debacle. It actually broke my production environment, and I need to come up with a good way to do it.\n. I know im a bit late to the parttt-ehhhh, but I just wanted to share some config with y'all.\nin the init code for Twig-View...\nforeach ($c['twigConfig'] as $name => $value) {\n            $view->getEnvironment()->addGlobal($name, $value);\n        }\nAnd in the container...\n'twigConfig' => [\n        'title' => 'My Site Title',\n        'description' => '',\n        'author' => '',\n        //...\n    ],\n. @alexweissman sadly no. Middleware are a type of hook though, the only thing you get in slim 3 is BEFORE or AFTER the route is executed.\nKeep in mind that middleware is executed as a stack, so you can still setup which middleware gets called in what order.\n. I have no idea why you need hooks to be honest.\nCan you provide an example of why you can't use a middleware and require a hook?\n. I'm glad you got this resolved. I hadn't realized people were using Hooks as an event dispatcher. Very interesting!\n. :+1: \n. This  is what I use. This is not fully PSR-7 compliant because I use the getBasePath() Slim internal method on the URI object.\n'notFoundHandler' => function ($container) {\n        return function (\\Slim\\Http\\Request $request, \\Slim\\Http\\Response $response) {\n            return $response->withStatus(301)->withHeader(\"Location\", $request->getUri()->getBasePath() . \"/404\");\n        };\n    }\n. Hmmm No, this was still on RC1 ... let me check rc2.\n. The redirect works for me.\n. The only time this wouldn't work as expected would be if the app is dumping white space to the browser.\nCheck the Content-Length of the HTTP response. Don't just rely on a \"white\" page. There is likely a space or carriage return causing the problem.\n. @tuupola  yeah I have it installed to that directory :) The getBasePath does return the correct path however I was trying to decouple away from Slim's non PSR-7 methods.\n. A possible solution might be simply inspecting the REQUEST_URI attribute of the server envrionment.\n$req->getServerParams()['REQUEST_URI']\n. In App:run .. There is a try-catch \nhttps://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L324-L350 \nIf you are referring to there not being a Stack Trace in the output. In RC2 the stack trace has been disabled by default.\nYou can set this to true in your container config to get the stack trace.\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Container.php#L59\n. @silentworks https://github.com/slimphp/Slim-Website/pull/68/files\n. :+1: \n. @akrabat is that not covered in the '/foo'      '/bar/' /foo/bar/scenario ?\n. @theodorejb  you can apply a middleware to the entire group.\n. @theodorejb This PR fixes that break. It wont be available until RC3. You can switch to bleeding edge to get it immediately though.\n@geekish In the case of a group being simply '/' there really is not any difference at all.\n. I thought the original slim acted as a string concatinator for URIs before passing to FastRoute.\nWhy can't we just simply go back to that, and eliminate all the magic that we are trying to fix.\nLet us assume that if you want to do something like:\ngroup('/foo/' {\n$get('')\n$post('')\n$put('')\n});\nYou know what you are doing.\nWe should stay out of the whole battle between what is proper or not. It is pretty clear through these discussions that everyone has a different idea on what is \"proper\". \nThis also has an added benefit of being easier to understand and document. Is it \"purely perfect?\" No, but who cares lets just make Slim easy to use.\nMy 2cents.\n. I think you might have miss clicked :)\n. @KevinWaterson\nhttp://www.slimframework.com/docs/start/installation.html \ncomposer require slim/slim \"^3.0@RC\"\n. :+1: PLEASE FOR ALL THE NOOBS, just so they can copy paste it somewhere else ;)\n. @sirdiego it's mostly the same since the APP redirects stuff to the container anyway.\n. the thing is, on routes and groups the callables need to be present in order to be added to the stack. Having this would require a significant rewrite of the middleware process, but it is possible.\nI would imagine this could be done for 3.1\n. Furthermore it also follows 'Slim's conventions' given that if you don't initialize your classes in the container we will pass the container to your classes.\n. are you sure that you are not writing to the browser?\nIf you say do a print \"\" or echo \"\" it will over write the content type header.\n. Also Slim's response is initialized with a Content-Type header ...\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Container.php#L132-L137\nOR\nI believe nginx might be adding the content-type header because of this little nugget...\nThe 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields.\nYour browser would lose the extra headers after content-type if it were broken.\nYou can test this by manually adding a Content-Type header to your response. NGinx should let your's go through.\n. That is my understanding as well.\n. Related Code Highlights:\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L538-L540\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L390\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L561\nProbably needs to be switched too...\nphp\nif ($response->getBody()->getSize() > 0)\n. That is how you read a header field.\n. @tw2113 oh I likey...\n. Slim's middleware operates as LAST IN FIRST EXECUTED [LIFE].\nThe output is expected and correct.\n. Interesting way of doing things.\nYou can see through your stack trace that PHP is throwing an error because your closure is in a static context and you cannot reliably bind an instance of an object to it.\nThe solution would be to make a Factory Object from your register method. \nWhich might look something like this ... I totally wrote this IN github so do not rely on its syntax, just its idea.\n``` php\n$container = $app->getContainer();\n$container['SampleFactory'] = function ($c) use ($app) {\n    return new SampleFactory($app);\n};\n$container['Sample'] = function ($c) {\n   return new $c['SampleFactory']->buildSample();\n};\nfinal class SampleFactory {\n    protected $app;\n    public function __construct(Slim\\App $app) {\n        $this->app = $app;\n    }\n    public function buildSample() {\n         return new Sample($this->app);\n    }\n}\nfinal class Sample {\n  private $container;\n  public function __construct(Slim\\App $app) {\n    $this->container = $app->getContainer();\n$app->group('/sample', function () use ($app) {\n  $app->get('/', 'Sample:index');\n  $app->get('/hello', 'Sample:hello');\n  $app->get('/world', 'Sample:world');\n});\n\n}\npublic function index(ServerRequestInterface $request, ResponseInterface $response, array $args) {\n    return $response->write('Hello world!');\n  }\npublic function hello(ServerRequestInterface $request, ResponseInterface $response, array $args) {\n    return $response->write('Hello');\n  }\npublic function world(ServerRequestInterface $request, ResponseInterface $response, array $args) {\n    return $response->write('world!');\n  }\n}\n```\n. I think the above solution is fine. This was just an oversight on our part. I don't think I have seen anyone use the XML portion yet. This could also be somewhat related to the XXE vuln that Akrabat patched,\nIf you could please PR this and add a Unit Test for this as well that would be wonderful.\nThe unit tests obviously did not cover this test case or we would see the build failing.\nGood catch! Thank you!\n. Both imo... I actually created a middleware to handle it, it felt better than having it in the slim source.\n. I am okay with removing support for _METHOD, in favour of a slim middleware\n. @codeguy wanna review this? https://github.com/geggleto/method-override\n. Will update that tonight if I get a chance.\n. @akrabat @codeguy https://github.com/geggleto/method-override/releases/tag/0.1.0 updated to include the header override\n. I leave it up to you guys ;) matters not to me :D\n. @codeguy sounds fine to me.\n@akrabat I would think that 3.1 might be a more proper place to put this. Is there a way to can mark it as going to be deprecated in 3.1 ?\n. I don't know ... that seems like replacing magic with more magic ?\n. Soon (tm)\n. Close, fixed with #1645 \n. $request->getAttribute('route')\n. @p-golovin you can overwrite the the default handlers in the container as long as you keep the same function signature.\n. You can easily do this in a middleware!\nSomething like this.\n``` php\n$app->add(function ($req, $res, $next) {\n    $res = $next($req, $res);\n    $hnd = null;\n    switch($res->getStatusCode()) {\n        case 400: { $hnd = $this->get('400Handler'); }\n        ///.....\n    }\n    if (!is_null($hnd)) { $res = $hnd($req, $res); } \n    return $res;\n});\n```\n. Will hopefully address in 4.0\n. Interesting... :)  Good catch!\n. As @silentworks mentioned\n$app->cache->get(... becomes $this->cache in slim 3.\nThe container has magic method support.\n. Glad you got it sorted.\nIf you could plz open an issue in the slim-website repo with what you did we can put it into the docs under a Strategy section!\n. There is my friend. I see you are using Twig. If you are using Twig-View...\nhtml\n<a href=\"{{ path_for('home') }}\">home</a>\nhttps://github.com/slimphp/Twig-View/blob/master/src/TwigExtension.php#L37\n. > Exceptions thrown by factories (i.e. closures) are not thrown by the container, so I don't see a reason to catch them and rethrow them as ContainerException.\n@silentworks @mnapoli \nhttps://github.com/slimphp/Slim/pull/1663/files#diff-1fe12fa9ad45fa920bf98a8afcf0939eR270\nThis catches and rethrows the exceptions. I think we should remove this, thoughts?\n. @Lewiscowles1986 you can store routes in an array if you want and iterate over that key elsewhere...\n``` php\n//In Container...\n'routetable' => [\n    'verb' => [\n        'pattern' => 'callback'\n    ],\n]\n//someplace else...\n$routetable = $app->getContainer()['routetable'];\nforeach ($routetable as $verb = > $routes) {\n    foreach ($routes as $pattern => $callback) {\n        $app->map([$verb], $pattern, $callback);\n    }\n}\n```\nOr something like that ;)\n. YES PLZ! 1000x :+1: \n. you need to change your code to use the map method, but we still need to allow custom HTTP methods.\nOr at least I think this is what this should look like.\n```\n$app->router->addMethod('AAA');\n$app->map(['AAA'], '/', unction ($request, $response, $args) {\n    $response->write(\"Welcome to Slim!\");\n    return $response;\n});\n``\n. Well Given that we use https://github.com/nikic/FastRoute ... I am not 100% sure.\n. Not to be a stickler.... butdifference between common behaviour and the way slim does` ... we are using a 3rd party router that is very popular ... See my last comment.\n. This is not a bug and is documented in FastRoute.\nFrom the README.md of FastRoute\n```\n// Matches /user/foobar, but not /user/foo/bar\n$r->addRoute('GET', '/user/{name}', 'handler');\n// Matches /user/foo/bar as well\n$r->addRoute('GET', '/user/{name:.+}', 'handler');\n```\nThe correct pattern would be...\n$app->get('/[{name:.+}]', 'App\\Actions\\HomeAction:index')->setName('home-page');\nexample.com// ==> home\nexample.com//foo ==> hallo \nexample.com//foo/bar => matches because of the .+\nexample.com//foo/bar/bas => matches because of the .+\nexample.com///foo => hallo\nexample.com///foo/bar =>   matches because of the .+\nexample.com///foo/bar/bas =>  matches because of the .+\nI am not a regex wizard. But there would be a regex possible I think to do exactly what he wants.\n. Also as a follow-up @akrabat \nFrom FastRoute's documentation...\nphp\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = rawurldecode(parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH));\n. haha...\nThis function is intended specifically for the purpose of parsing URLs and not URIs.\n. Reference: https://github.com/slimphp/Slim/blob/3.x/Slim/Http/Uri.php#L194\n. That solution looks fine to me.\nI was wondering if the output of requestURI was being based into the constructor of the URI but it is not.\n:+1: \n. https://github.com/slimphp/Slim/blob/3.x/Slim/Http/Response.php#L126 offending line \n. @codeguy I found a work around for this issue this morning.\nBy overriding the default container factory for request, it is possible to register a media parser before the App class is created.\nExample:\n``` php\n//...\n// Required to manually create the container\n$container = new \\Slim\\Container();\n// Create new factory \n$container['request'] = function ($c) {\n    // construct request from environment\n    $request = \\Slim\\Http\\Request::createFromEnvironment($c['env']);\n    // add media parser\n    $request->registerMediaTypeParser(\"text/javascript\", function ($input) {\n        return json_decode($input, true);\n    });\n};\n// Construct App\n$app = new Slim\\App($container);\n//...\n```\n. hmm.\n. @codeguy @akrabat @silentworks ... we should look at Groups again.\n. Better documentation of internals, notably describing the call-stack for an execution of a route action.\n. @kwhat I am thinking about dropping subRequest entirely for 4.0 ...\n. @akrabat \ud83d\udc4d What about exceptions though... are we catching Exceptions in an application middleware? If so are we adding it by default but allowing users to remove it?\n. My only problem is that there's no way to check in the App and provide users a notification about it. It could technically silently fail which is bad.\n. @codeguy we have an issue tracker? \ud83d\udc4d \n. Don't merge yet, more tests incoming!\n. I don't see the problem you are solving with this PR. Is there something that __invoke doesn't do that you need?\nTo have a request that isn't created from the PHP super globals you need to patch the container. totally agree with you. https://github.com/geggleto/reactive-slim/blob/master/bin/app.php such a hack :)\n. I think we should fix that...\n. @AndrewCarterUK there is 1 other way to do this.\n$res = $app->run(true);\nhttps://github.com/slimphp/Slim/blob/3.x/tests/AppTest.php#L1558-L1592\n. @stivni its a 4.0 thing ;)\n. There is no way for us to fix it... Slim renders at the end of the application life cycle... if there is another piece of software modifying the content, then its that software's responsibility to update the headers accordingly.\n. Unfortunately due to HTTP protocol, we cannot delegate that responsibility at our package level.\nNot all of our clients use NewRelic, and supplying a HTTP Message without a Content-Type or Content-Length results in a malformed message.\nI would encourage you to look into this further. I have a very hard time believing that a product like NewRelic modifies the message output... there has to be something else going on. That's just my gut feeling.\n. I found the offending code...\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L546-L549\n. @grikdotnet you can easily unset the header. you can run Slim without $app->run() and render the Response object how you want with or w/o headers.\n. @grikdotnet Yeah we are working on adding an option to omit the Content-Type header.\n. If you were using a anon function, the function is bound to the container and you wouldn't have this problem.\nso I am guessing you are using a class, in which case you need to either inject it yourself, or do something like below.\n``` php\nclass YourMiddleware {\n    protected $container;\n    public function __construct(ContainerInterface $container) {\n        $this->container = $container;\n    }\npublic function __get($name) {\n    return $this->container->get($name);\n}\n\npublic function __invoke($req, $res, $next) {\n    //$this->router\n    return $next($req, $res);\n}\n\n}\n```\n. It does not ... \nPlease see this unit test.\nhttps://github.com/slimphp/Slim/blob/3.x/tests/Http/RequestTest.php#L537-L540\n. ``` php\n//Step 3:\nThe route pattern is relative to where your index.php [application entry point] is.\nThat is to say these routes are not abolsute.\n'/example/index.php/myroute' is actually '/myroute'\n```\n. Yes! more type hinting :D :+1: \n. fredw, you can use constructor injection by defining your controller in the application container.\n``` php\n$container[MyController::class] = function ($c) { return new MyController($yourdeps,...); };\nforeach ($urls as $url) {\n    $app->get($url, MyController::class . ':index');\n}\n``\n. @fredw you are re-creating the MyControllercount($urls)times so it will only end up with the last$url` in the constructor because of the way the application lifecycle works.\nWhen $app->get() is called it simply registers the route with the disaptcher. Nothing is executed. Simply registered.\nThe application is executed when $app->run is called.\nI have not been able to figure out what you are trying to do... It looks like some sort of static page controller?\nThis might work but it's kind of ugly...\nphp\nforeach ($urls as $url) {\n    $container->set('\\MyController_'.$url, function () use ($container, $url) {\n        return new \\MyController($container, $url);\n    });\n    $app->get($url, '\\MyController'.$url.':index');\n}\nYou are now registering a \"class\" per URL, which contains that URL in the constructor. then Registering it. The new ClasssUrl Name is registered in the container so slim will find it and use it.\nYou will probably want to do something with $url if it has / or {} in it...\n. @akrabat I would be open to seeing something like ->addMiddlewareStack(array $stack) where all the special logic goes.\nI think adding this functionality to add will get a bit too confusing. Internally the addStack will end up calling the singular version.\n. If someone could clarify. @akrabat @silentworks \nIs this currently valid?\n->add([$instance, 'method']);\nOr are we adding this in this PR as well as handling nested callables as well.\n. As someone who helps lots of people in the Slim IRC channel, I think this might confuse people. So I am with @tuupola. The only way I could see this working is if we had a Collection object that would could pass to add, but if we go that far might as well look at something a bit more beefy like middleware groups.\n. :+1: @SvenRtbg \n. Please provide more information about what you are trying to do.\nYou are modifying your php environment, so can you please tell us what you are doing and specifically the code you are using to do it, so that we can test it locally.\nThank you.\n. You will need to flush the buffer manually via ob_flush() or set the php directive implicit_flush to true.\nhttp://php.net/manual/en/outcontrol.configuration.php#ini.output-buffering\nI hope that helps.\n. It is not a bug. This is defined PHP behaviour.\n. I cannot help you. This is all php behaviour.\n. I think this one slipped through our unit tests.\nI just want to be clear.\nOn IIS 10, REQUEST_URI is not present in _SERVER[] when you are using rewriting?\n. @miitchyy oh thank god. I was going to have to install some form of windows iis 10 to test the fix ;(\n. This seems like it working correctly, because in your route you have nested conditionals.\nThere is no way in Fastroute to bypass the first 2 and just have the 3rd.\nYou could not have business/3 with the route pattern you provided.\nin order to use the page... you must have the previous 2 parameters as well.\n. I am mostly certain that what you are trying to do.. cannot be done... \nThere's no way to know that business/1 is suppose to be page rather than state or city.\nYou could try something like this...\nphp\n$app->get('/businesses[/{state}][/{city}][/{page}]', function ($request, $response, $args) {\nBut that is only going to get you so far... /businesses/0/0/1 == > /businesses/1\n. LOL :+1: \n. @geekish nope. just a bored friday :)\n. @akrabat confirmed, no sense of humour :) \n. @AndrewCarterUK optional, yes.\n. @mbretter You should never get the request from the container. ever. The Request is set in the container once, and once middleware is applied is no longer the valid current request.\n. Works for me\n. This is probably the wrong repo for this discussion.\nIn what order are you adding your middleware. \nMiddleware ordering matters.\n. @akrabat thoughts on just including monolog? \n. I like it. But we as we build new features into Slim you can really start to see some of the short-comings.\n1) Hard-coded content-types\n2) No Handler Interfaces\nThese 2 issues force a user to extend the current class and override the methods instead of simply implementing an interface. I don't think its a big deal breaker, but these sorts of issues should be cataloged somewhere for 4.0\n. you need to have the .htaccess in the same directory as your front controller file [index.php]\n. Likely because you aren't using Apache :)\n. :-1: You should be catching your own errors, it's not Slim's job.\n. Mind adding text/javascript  as well?\n. Needs Unit tests for these new content types\n. I love this.\nYes plz.\n:+1: \n. Should we not put into the container actual Factories for Request/Response/Environment?\n. Do you think I could get #1683  included since you are mucking about? :)\n. PSR-7. even when you grab a single header line, it will return an array. This is by design.\nReference.\nhttps://github.com/php-fig/http-message/blob/master/src/MessageInterface.php#L63-L68\n@return array Returns an associative array of the message's headers. Each\n     *     key MUST be a header name, and each value MUST be an array of strings\n     *     for that header.\n. This was a design decision made for Slim 3. \n. Can confirm on 3.2.1\n$app->get('/test2', function()\n{\n    var_dump($this->request->getUri()->getPath());\n});\nstring(5) \"test2\" when installed in a subdirectory\n. You can put them into the 'settings' key in the container.\nphp\n$container = $app->getContainer();\n$container['settings']['AWS'] = [...];\nFor Eloquent.... I am not sure how to inject additional information.. I do know they have their own container, so you can likely put it there.\n. When you bootstrap Eloquent it does create a container.\nhttps://github.com/illuminate/database\nphp\n// Set the event dispatcher used by Eloquent models... (optional)\nuse Illuminate\\Events\\Dispatcher;\nuse Illuminate\\Container\\Container;\n$capsule->setEventDispatcher(new Dispatcher(new Container));\nI have no idea how you can load the info from Slim's container into Eloquent's. That would be a question for them\n. @rubobaquero I think there are 3 solutions to your problem.\n1) Service Location [phpdotenv]\n2) Dependency Injection [below]\n3) Globals [akrabat]\nWith DI,  you inject your information into an Object either via Setter injection or Constructor injection.\nphp\n$model->set($dependency); //setter injection\nnew Model($dependency); // constructor injection\n. heh, yeah ircloud is just so nice :) :+1: \n. ~~@aimeos you need to change the default foundHandler~~\n. Yep.\nThat's the problem\nThis line.\n$app->getContainer()->get( 'request' )->getAttributes();\nDo not ever pull the request from the container. PSR-7 mandates that the request/response objects be immutable. So they are never updated in the container.\n. The getBody()->write() thing follows the PSR spec\n. This should be in its own composer project.\n. Our implementation is broken.\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Http/UploadedFile.php#L102-L137\nOur implementation flatten's the _FILE structure.\nWe will need to have some form of recursion to maintain the index structure.\nThe fix will be a BC break.\n. What content-type would that request be @tuupola ?\nI am guessing there's a logic error in here.\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Http/Request.php#L972-L982\nWe should have a unit test for this as well.\nedit\nWe could add a guard around line 980,\nphp\nif ($parsedBody === false) {\n    $parsedBody = [];\n}\n. @p-golovin  The if can't have an else that returns null, then nothing would get parsed ;)\n. :+1: @mathmarques \n//cc @akrabat @silentworks @codeguy \nI think either an empty array or null is fine in this situation. I would prefer the array but that is more for my preference than what it actually needs to be. Unfortunately the spec is vague in this area.\n. :+1: looks good.\n. This PR requires a unit test.\n. Another side thought, In the unlikely event that someone extends the container and overrides offsetGet this will no longer work.\nI don't see why would we would want to change it. What was the point of this PR?\n. Well you can do ->withBody() ... https://github.com/slimphp/Slim/blob/3.x/Slim/Http/Message.php#L287-L294\n. Yeah I think that would be a good idea, php-view doesn't but it was something that was being asked for.\n. @dopesong This one is suppose to be for Slim specific render implementations... It seems rather wasteful to have a separate repo for a single interface.\n. @kminek we will still provide renderers by default ;). @kminek traditionally we provide Twig and PHP renderers. In order to facilitate further 3rd party packages we need a defined interface published ;). @geekish would be 100% optional.\nIt will just allow us to keep a standard API between different rendering libraries... ie TWIG, PHP ... etc. Hmm this is an interesting idea... given the nature of Slim you could realistically do this now via Route middleware and basic validation libraries.\n. @JoeBengalen that might be a bug in PHP 7.... \n. Since the problem ultimately lies in the PHP Webserver not setting it's own proper headers, you can get around this by doing it for the web server...\nphp\nif (!isset($_SERVER['SCRIPT_NAME']) {\n    $_SERVER['SCRIPT_NAME'] = '/api.php'; //or whatever entry point you are using.\n}\n. Furthermore.\nWe use SCRIPT_NAME to determine the base-path of the slim installation because this allows Slim to be installed in a sub-directory. Zend expressive doesn't work in a sub-directory w/o 3rd party components.\nIt was a trade-off we choose when we moved from 2.x to 3.x.\nIf we were to \"fix\" this issue in some way we must preserve the functionality we have already established ( slim working out of the box in a sub-directory ). At this current time there is no good way to determine base_path other than using SCRIPT_NAME or REQUEST_URI server params, both of which are not properly set by the PHP Built-in web server.\nWhile this might seem like a cop out, it is merely the reality that we all live in. Previously people have raised these issues to the core php team, and it did not look like the changes were going to be made to the built-in web server regarding these minor problems.\n. https://github.com/slimphp/Slim-Website/pull/178\n. Hmm...\nWhat I have been able to produce using apache+php w/o PHP FPM.\nphp-5.6.3\nBuiltin Server: php -S localhost:8060 -t ./public\n/test\n_SERVER[\"SCRIPT_NAME\"] = /index.php\n_SERVER[\"REQUEST_URI\"] = /test\n/\n_SERVER[\"SCRIPT_NAME\"] = /index.php\n_SERVER[\"REQUEST_URI\"] = /\nBuiltin Server: php -S localhost:8060 -t .\n/\n_SERVER[\"REQUEST_URI\"] = /public\n_SERVER[\"SCRIPT_NAME\"] = /public/index.php\n/test\n_SERVER[\"REQUEST_URI\"] = /public/test\n_SERVER[\"SCRIPT_NAME\"] = /public/index.php\n. I am closing this as iirc it's a problem with the PHP Built-In server which will not be resolved.. :+1: \n. Can you explain why this is required?\n. :+1: No idea where this will land but I like it. Likely the next major release.\n. BEST.\nRESPONSE.\nEVER\n. :-1: you can already do this by doing what @JoeBengalen said.\nSlim accepts any PSR-7 compatible Request/Response strategy.\n\nI am mostly just wanting to extend off of the default classes and add my own methods. Is there an easy way to go about doing that?\n\nCurrently, there is no easy way.\n. It's on the roadmap :)\n. @Raistlfiren you can extend the Slim objects and place them into the container after you create the $app object then :)\n. @mathmarques @akrabat \nThe problem with CORS is that in the pre-flighted requests you need to know what endpoints are registered.\nExample:\nResource: /v1/user \n- Supports: GET, POST, PUT\nThe preflight OPTIONS /v1/user should return a header with \nAccess-Control-Allow-Methods: POST, GET, PUT\nDoing this in a middleware... I have no idea how that could be done.\nIt makes most sense to do it at the router level, as it can inspect the Dispatcher to find routes LIKE this one and construct a HTTP METHOD List for this resource.\n. @silentworks Not sure if it should land in core myself, but its something that I deal with frequently. Perhaps a CorsRouter might be more useful.\n. @lalop true... in order to figure out what ROUTE you are in you will need to use the determineRouteBeforeDispatch setting.\n. The more I think about the OPTIONS problem the more I think we should have a different Router to handle it. If we had a CORS Router that could track routes and the method they are mounted to it would be rather trivial to solve the options problem with CORS. This wouldn't be a BC break as we are adding a new Router for our users to use, and most importantly it would be optional.\nIt would simply require a replace in the container... or we could even have it as a configuration option when constructing the container.\nThe CORSRouter would then extend the Slim basic router and would overload the methods that register routes. A new list would be created to track the routes, with Pattern being the key and verbs added on.\na simple getter to the router with a pattern would suffice to get a list of VERBS supported by your application.\n``` php\n//...  Rough Pseudo Code\nprotected $patterns = [];\npublic function getSupportedVerbs($pattern) { \n    return $this->patterns[$pattern];\n}\nprotected function addSupportedVerb($pattern, $verb) {\n    $this->patterns[$pattern][] = $verb;\n}\npublic function get(....) {\n    $this->addSupportedVerb($pattern, 'GET');\n    parent::get(....);\n}\n//...\n```\n. This will add the ability to pull from the router the HTTP Verbs associated with a given pattern.\nPatterns can be retrieved from a Request Object in a middleare when the determineRouteBeforeAppMiddleware setting is set to true.\nThis then will lead to the ability to use a middleware to accurately provide CORS Support.\n``` php\n///....\n$app->add(function ($req, $res, $next) {\n    $route = $req->getAttribute('route');\n    $router = $this->router;\n$verbs = $router->getMethods($route->getPattern());\n\n$res = $next($req, $res);\n$res->withHeader('Access-Control-Allow-Methods', implode(',', $verbs))\n         ->withHeader('Access-Control-Allow-Origin', '*');\nreturn $res;\n\n});\n```\n. I don't think a separate repo is the proper place.\nThe example to use it is trivial...\n$container['router'] = function ($c) {\n     return new CorsRouter();\n};\n. very cool @tuupola that should go into some sort of service provider then, and we can close this PR\n. Actual answer to your question.\n\nIs there a reason to clone the body when cloning the response?\nPSR-7 dictates it must be cloned.\n\nRef: http://www.php-fig.org/psr/psr-7/#3-1-psr-http-message-messageinterface\n\nMessages are considered immutable; all methods that might change state MUST\n- be implemented such that they retain the internal state of the current\n- message and return an instance that contains the changed state.\n\nNow as to the why it behaves like it does...\nFirst off It's not the first Stream entry that get's deconstructed first... its actually the Last Stream.\nAdditional Debugging.\ndebug_zval_dump();\nhttps://www.irccloud.com/pastebin/zNltCuWg/\nI have added more detailed debug logs here.\nThe order of construction...\n$stream = object(MyGuzzleStream)#2\n$response = object(SlimResponse)#3 - > ref to  object(MyGuzzleStream)#2 \n$respNew = object(SlimResponse)#5 ->  ref to object(MyGuzzleStream)#7\nThe order of the destructors is then...\nobject(SlimResponse)#5 \nobject(MyGuzzleStream)#7 \nobject(SlimResponse)#3\nobject(MyGuzzleStream)#2\nSo you can see it is in fact the last clone that gets cleaned up first. IIRC PHP does variable assignments like a stack, so it just unwinds from bottom to top the opposite to how the script executes. \nAll's okay.\nMoving the parent::__deconstruct to the top of the method...PHP-ISM\nhttps://www.irccloud.com/pastebin/IK0CW1F3/\nIt looks fine to me.\n. Does the problem exist if you use Slim's response object?\n. I always thought it was kinda silly that we \"cloned\" the steam instead of opening a new stream and copying it.\n. Well when you said...\n\nWhen I use Slim Response and Slim Stream classes, I don't have this problems. Because the Slim Stream doesn't have a destructor which closes the stream resource.\n\nI don't really see how we can be of help. On our Response object we don't include a destructor. This issue should be raised to the Guzzle Project. \n. @dopesong Don't forget to squash the commit :D \n. It should be string... https://github.com/slimphp/Slim/blob/3.x/Slim/Interfaces/RouteInterface.php#L28\nstring | null, I suspect. \n. Alternative Approach\nMultiple Slim Apps, one installation\nhttps://github.com/geggleto/hydra\n. I personally think the array-access method of setting is fine.\n. Well put @silentworks :)\n. we should probably drop this const :D /cc @akrabat \n. Oh god no......\n. Slim 2 receives security bug fixes.\nWe still support slim 2 issues, come drop us a line.\n. Works fine locally.\nCode:\n``` php\n$app->get('/test', function ($req, $res, $args) {\n    $check = $res->withStatus(200)\n        ->withHeader(\"location\", \"\" );\nvar_dump($check->getStatusCode());\ndie();\n\n});\n```\nOutput:\nint(200)\n. That's my point :)\nif you forget the return it's so stupid hard to debug because no errors are\nraised ;)\nOn Wed, Jun 15, 2016 at 4:09 PM, Martijn Wennink notifications@github.com\nwrote:\n\nIs the code an exact copy? You forgot a return\n$this->post('/create', function (Request $request, Response $response) use ($post) {        return $post->create($request, $response);    });\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/slimphp/Slim/issues/1910#issuecomment-226304762, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AD100ndmAamvwmPPi6XsvBmfjsx5ARUlks5qMFvogaJpZM4I2vJ9\n.\n. @akrabat sounds like a lot of effort, idk i think it can be covered in 4.0\n. There is no way to change the Action of a Route once it has been created.\n\nReference: https://github.com/slimphp/Slim/blob/3.x/Slim/Route.php\nGetter no Setter.\n. @matthew-dean Slim supports everything that nikic/FastRoute does... https://github.com/nikic/FastRoute ... I don't believe this functionality is supported.\n. The pass method in Slim internally used Exceptions which break's a lot of things. Using exceptions for control flow like that was a bad design.\n. @matthew-dean hmm, I don't know what you are trying to do exactly...\n. You are incorrectly returning from your route actions.\nYou need to return a ResponseInterface.\n. ```\n$json = ;\n$response = $response->withJson($json);\nreturn $response;\n```\nThis is correct.\n. I thought we had stopped that?\n. I would then propose a different Strategy for capturing the buffer output from the callable and pass it down the chain.\nphp\nob_start();\n$callable($req, $res);\n$response->write(ob_get_clean());\n. Or we can possibly modify the current one to include a ob_* capture if the callable doesn't respond with a response interface?\n. I suppose we could make this a 4.0 thing\n. Uh... Can you paste some code that is slim related?\nI have no idea what Unirest\\Request is or what it does...\n. glad you were able to get it resolved :)\n. We still would want to have DI Interoperability... so I guess we would simply create an Interface that people can implement on top of the DI Container of their choice.\n. @JoeBengalen The set class does way more than containter-interop specifies... need to make sure that either\n1.  Slim only uses the ->get() and ->has()\n2. We provide an interface to guide implementors of other container libraries\nExample\nIf slim defines a bunch of services using Set::protect(), then other DI libraries also need to have that wired in.\nThis is loosely related too: https://github.com/slimphp/Slim/issues/1923\n. I personally would prefer a setter approach for Slim settings, instead of having to pass in 2 arrays.\n1) I think it's more readable.\n2) We can likely do it in a chainable way.\n$app = new App($diConfig)\n                    ->setChunkSize(512)\n                    ->setDisplayErrors(false);\n. @silentworks I would prefer having the settings somewhere where they can be type-hinted... I can be very lazy [read efficient] and it's hard to remember the exact spelling of some of the config attributes.\n. tagging @codeguy @akrabat \nThis should be revisited as we are removing the container requirement.. @pyrsmk you need to define the Continer-Interop Interface as well.\nRef: \nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Container.php#L47\nhttps://github.com/container-interop/container-interop/blob/master/src/Interop/Container/ContainerInterface.php\n. $data should be an array and not a string, I think this is a docs bug.\nHaving said that, moving along in the future I think it would make more sense to have views that modify the response.... So Slim would have a JsonView::write($response, array); or JsonView::addHeaders($response)->write($jsonString);\nSimilarly, HtmlView::write(); HtmlView::addHeaders()\nHaving a set few amount of Views then an interface to define more View Classes.\nThen we end up with a good list of View Helpers...\n- TWIG\n- Smarty\n- League\n- Json\n- Html\n- CSV... all come to mind.\nBut I think this is a 4.0 thing not on the 3.x branch\n. @jirkahronik That is the design decision of the PHP-FIG.\n. The solution would be using Dependency Injection.\nYour Middleware requires things to work, so you construct an instance of your middleware.\nStep 1: Make your middleware class\n``` php\nclass MyMiddleware {\n     public function __construct(MyDep $dep) { ... } //setup dependencies\n public function __invoke($request, $response, $next) { ... } // Do work\n\n}\n```\nStep 2: Register your middleware with the Slim Container.\nphp\n$container = $app->getContainer();\n$container[MyMiddleware::class] = function ($c) {\n    return new MyMiddleware( ... );\n};\nStep 3: Use your middleware\nphp\n$app->get()->add(MyMiddleware::class); //on a Route\n$app->add(MyMiddleware::class); //On the entire application\n. `Class::class is the namespace constant\n. ``` php\n$member = function ($role) {\n    return function ($req, $res, $next) {\n        return $next($req, $res);\n    };\n};\n$app->get()->add($member('member'));\n```\n. @sn0rcha this is only valid for v2. The app's job is to process the response and respond to the browser.\nWhile I agree that the App class is long and we can improve it... responding to a request is the primary job of the app class.\nAlso any change made would need to be for 4.x ... where I suspect we can make significant gains in the overall flow of the class.\n. > And just something philosophical: in the end all jobs will be performed within an app, so does that mean that all code should be in the same class?\nI guess we could provide a Psr7-Responder as a community project... It wasn't abstracted out because there's no reason to. We wouldn't want to swap out implementations.\n. There's no harm in it being in a different class... there's just no added benefit aside from marginally easier  unit testing for code coverage.\n. You need to use:\nphp\n$app = new Slim\\App([\n    'settings'  => [\n        'determineRouteBeforeAppMiddleware' => true,\n    ]\n]);\n. This would need to be a v4 change I think...\nSo more or less you are looking for something like...\nphp\n$app->get('/foo/bar/.*', ...)->extends('/foo/.*');\nIs the same thing as ... \nphp\n$app->get('/foo/bar/.*', ...);\n$app->get('/foo/.*', ...)\n. Well I guess we could provide a Removal function in the router currently... that wouldn't be a BC break so it could be included in 3.x ... then using the router I think you could be able to scan the router to see if it already exists and remove/replace as required.\n. @akrabat There ;) Ya Happy Now?\n. White Page means...\n1. Fatal error\nHow to verify:\n- Check Web Server Log Files\n- Enable Error Reporting\n2. No Content\nHow to verify:\n- Use Chrome's developer tools (f12) to verify the status code of the page\n- Blank page with status code 200 means the code path results in no content being outputted to the browser. A status code of 5xx means there is a problem in your PHP code.\n. There is no redirect.\nCan you please list out ALL of the routes you have defined?\n. Okay... but I still need all of your routes... that is only a few of them I suspect ;)\n. Is this project on something like GitHub?\nThere is clearly a problem in your code and without seeing ALL of it, I doubt I can help further.\n. Yup, all of them :)\n. I highly suspect that there is a catch-all route that is getting executed instead of your controller one.\n. There is likely a route like....\nphp\n$app->post(\"/{catch:+}\");\nThat is getting executed before your post Login.\n. Are you uploading your code changes to your production server after you make changes locally.\n. I need you to do 2 things.\n1. List All of the application routes! Hopefully you have them all in one file.\n2. Make sure you update your \"production\" server with all of the code changes you have made.\n. @konskript the recent screenshot you posted lacks some of the routes... please pastebin, or gist your routes.php\nhttps://gist.github.com/\nhttp://pastebin.com/\n. Thank you.\nAt the bottom of that file... remove lines 233 -> all the way to the end and retry plz.\n. :D Hooooorayyyy!\n. Yeah it doesn't look like its rendering your error message but at least it's redirecting ;) more work for you to do!\n. No idea. why are you tinkering with the timezones ?\n. @konskript you didn't comment out the last part.\nYou terminated the php page on line 233... which then lead php to output the contents of 234-> before the framework was started.\nWhen it output the contents of the page it sent out the default php headers which includes as status code, and since you cannot RESEND the status code, the 301 is ignored by php since it had already sent the headers, leading to a blank page which is what the content of the lines 234+ ended up being.\n. konscript, the boostrap docs are really good and modals are completely UI.\nyou can use forms to interact with your API.\nYou should probably read up about REST API Development.\nhttp://www.restapitutorial.com/\nFile upload in Slim v3... https://akrabat.com/psr-7-file-uploads-in-slim-3/\n. Can you check what tag of Slim you are using?\n. Confirming the result on PHP 5.6.3, Also running windows... using: call vendor/bin/phpunit\n. Ah... I believe the problem relates to how slim attempts to log things to the \"error_log\" in Windows.\n. Wrong ~~repo~~ branch my friend ;)\n. The Slim error handler will have caught an internal error before this code is executed...\nWhat exactly are you trying to do... This is not the correct way to handle errors.\n. Sorry, @akrabat has addressed this in the other thread.\n. With something like the following...\n``` php\n    public function makeRequest($method, $url = '/') {\n        $env = Environment::mock();\n        $uri = Uri::createFromString('http://example.com'.$url);\n    $headers = Headers::createFromEnvironment($env);\n    $serverParams = $env->all();\n\n    $body = new RequestBody();\n    $uploadedFiles = UploadedFile::createFromEnvironment($env);\n    $request = new Request($method, $uri, $headers, [], $serverParams, $body, $uploadedFiles);\n    return $request;\n}\n\n$request = $request->withParsedBody([\n    //Your Parsed Body\n]);\n``\n. Can we get a PR? :D. For example: If I have a website A that implements a bunch of end-points... and I install package B that overrides some of the end-points... currently that process is a non-starter.\n. @mathmarques makes more sense to surface it for readability... I thought it was super weird that it was buried.\n. @akrabat I moved the method as well ;)\n. Maybe for 4.x.$url = (string)$request->getUri();` should give you the url!. This is not an error.. Thanks :) But I am going to close this because we really try not to encourage the php built-in webserver as it has a lot of issues.. Closing as resolved.. the app class gets bound to the group.\nphp\n$app->group('/admin', function () {\n    //We are now in the context of $app\n    $this->get('/users', ''); //Example, is the same as $app->get\n});\n. oh well that's interesting....\nUsing DI methods you can inject the router into your class which would allow you to register routes, but I guess it wouldn't be nearly as nice.\n. This is not a slim issue. I think you should use our forums for this type of discussion.. please open an issue on our Website Repo for this :)\nhttps://github.com/slimphp/Slim-Website\n. ty sir :)\n. \ud83d\udc4d . @akrabat can we close this one and ask the author to target 4.x?. @DavidePastore this is the exact reason why we have with/getAttribute on the request object :)\n. $app->redirect(URL . 'list_admission.php?er=' . TAG_RESPONSE_FAIL);\n$app->stop();\n. Closing this as resolved :). The solution is 2 comments up.. works just fine on win 7 .... i do it frequently. This is a pretty complicated issue as we need to preserve BC for SemVer and I think a proper solution would break it.\nMinimally I am +1 for allowing the modification for the $validMethods on the Request object.\nExposing an add method could be done in a new release, and would effectively solve this particular issue.\nThe user base can then add custom XYZ methods by replacing the Pimple Factory in the container prior to App execution ie ($app->run()) with a new factory that returns a Request object augmented with whatever custom HTTP Verbs they require.\nIn this particular instance the LINK/UNLINK was included in a draft spec of HTTP 1.1. It was not apart of the official HTTP 1.1 spec, however it is possible that there are programs/protocol/etc that use the LINK/UNLINK HTTP verb.\nThis particular issue, is uncommon... but seems to occur a few times a year.\nThe current work-around is to extend the Request class and add the required HTTP VERBS to the protected member, then replace the Pimple Factory for the Request object with your modified one.\nThis is related to: #1927 \n. All while preserving BC :D woo!\n. @iansltx I spoke with @akrabat you can PR this if you want ;) \n. If you try to extend router, it's a closure until it get's called for the first time.\nYou would need to do what you did above.\nphp\n$container['router'] = function( $c ) {\n    return new \\Aimeos\\Slim\\Router();\n};\nright after the App is constructed.\n. I can't get behind this idea at all.\nThrowable response will not work in Slim.\nThe idea being that you can immediately terminate from the app strikes me as weird as it's you need to go back through your middleware to complete any actions, throwing response breaks that.. @akrabat do you want to leave the PR open or should be close it?. It sounds like your server isn't running the app at all, do you just get a white screen?\n. Closing this as no updates for months.\nPlease reopen if required.. This is not a bug, it is how middleware is executed which is documented on our site :). Yeah the whole middleware stack can be a bit ... challenging to see. I don't find that in the current setup it is intuitive, but in theory it is documented. Perhaps the docs should be updated.. Closing as the issue is old and I think we had a resolution.. closing this as resolved.. This doesn't look like a slim issue, it must be middleware.\nPlease feel free to reopen if you require further assistance.. You need to move the css to a publicly accessible directory. They are not in the public directory so you cannot access them.. The docs can be pulled in for offline consumption by cloning the Slim-Website Repo (https://github.com/slimphp/Slim-Website)\nGiving a vhost might seem to be logical, but it opens the flood-gates for support.... From FastRoute\n\nFinally, note that applications MAY always specify their own HEAD method route for a given resource to bypass this behavior entirely.\n\n\ud83d\udc4d for me.\n. I'm not a fan of this as the PHP ecosystem has no standard way for registering services. \ud83d\udc4e\n. Theory Code\n```php\n$dic = \\Some\\Container(); //implements ContainerInterop\n$app = new \\Slim\\App(); //Slim maintains all of its own components\n$app->setDIC($dic); //DIC required for Class:method route calls, otherwise slim calls it with a no-argument constructor\n$app->setResponseFactory(new ResponseFactory());\n$request = (new RequestFactory())->buildFromGlobals();\n$response = $app->run($request);\nprint (new Render())->output($response);\n```. @akrabat as I mentioned in another issue, w/o the factories I am not sure how we can fully decouple from our own PSR-7 implementation. The factory approach was the only one I could come up with.. @akrabat Yes :). How do we handle PSR-7 responses with that signature?\n. https://github.com/slimphp/Slim/issues/2047#issuecomment-261964564. @tuupola Yeah there is a PSR in the works for them :). @akrabat because it would be the only way to fully replace the PSR-7 implementation objects.. DIC should be required, imo\n. I don't think it really would simplify it at all. Instead of accessing a service from the container we now need our own dependency management solution for Slim's services. The easiest way is singletons, or we end up with our own internal DIC... which raises the question of why bother. \nThese are the only 2 solutions that I can come up with, so perhaps there are more options that are better.  \n//cc @akrabat @codeguy @silentworks . I floated the idea of removing Callable Resolver to it's own repo. Ideally it can be provided as a static or singleton class inside the DIC. There really isnt a reason for it being a trait.\nMoving it to it's own class should stop some of the jumping across the files.\n. @codeguy Yeah, just ping me when you want to go through it.. yikes.... this one is going to cause a lot of pain...\nI suppose in the end this is a content rendering problem, which can be handled at a twig level.\nWe should at least document a good way on how to extract the base-path in the framework, or provide a function call to do that.\n. I'm still on the fence... While I know most of us will accept this change it will be hard for newer developers to learn Slim in an easy envrionment, ie Windows XAMPP.\nWe will have to make sure documentation is updated to accommodate this change.. What are we going to replace them with ? :) Are we going to just extend from \\Exception or \\Throwable\n. //cc @codeguy @akrabat @geekish Yes this is on my todo list. We should have proper factory classes to make the HTTP Objects.\n. My thoughts are that we need to decouple the App and Rendering Content to the browser.\n- The run method takes a Request object and returns a Response object, and in 4.x we mark __invoke as deprecated and fully remove in 5.x. __invoke then becomes a proxy of run() in 4.x\n- Another Slim class is responsible for Rendering the Response Object to the browser.\nReasoning:\n- We can then more fully unit test Core as currently it's very difficult to do.\n- It also opens up the ability to better run Slim in persistent environments IE ReactPHP.\n. @geekish @codeguy We can still support it as middleware if our users need it. I have never seen Slim used in such a manner unless it was to facilitate unit/integration tests. Which should be fixed by more decoupling of the internals.\n. I must have missed this...\nCan I get some clarification? :)\n. Do we have a working list of what this one might be?\nRequest\nResponse\nContainerInterface ?. @akrabat lateeeeeeee\n. This one is related to FastRoute.... Closing.. This is really not a Slim problem, but an environment problem.\nYou should not need an HTACCESS file to rewrite to your public/ directory.\n. closing this as resolved.. I am going to close this then.. I would prefer this to be a middleware.\nit would be quite simple.\nWould gladly accept a PR on it @Zegnat . I am going to leave this open so we don't forget about it.. This is PHP complaining about something you have done.. Nothing we can do about it.. Closing... if you have any other questions please reopen.. Ugh I know your pain. Unfortunately we wont be able to do anything about it until 4.x.. You are right, should be on slim 4 ;). @1ma 3.x. This looks fine.\nIn answer to your trait question:\nThe trait simply by-passes the requirement of proper Dependency Injection in order to allow our internal classes to resolve a callable signature.\nIn the future, we should be using proper DI to add resolution to our internal classes. Using the trait was probably a better choice at the time to preserve the already existing internal API.\nHowever since we can now \"Break All The Things\", we should be injecting the CallableResolver class instead of using a trait.\n. Output buffering should be part of a view renderer not part of the router. var_dump et al will also end up causing header problems as well. but there is no way around it ;). \ud83d\udc4d :D. I would love the change in Slim 3 @akrabat . I like the middleware option :). Closed via #2166 . I think what you are looking for is here...\nhttps://github.com/PHP-DI/Slim-Bridge. Can you give us an example of the situation that leads to both $_SERVER['SCRIPT_NAME'] equaling $_SERVER['REQUEST_URI'] ?. Yes there is an open problem with the php-cli web server which they have indicated that they will not be fixing.\n@DanKottke Yes we are deprecating it :). I think this is going to make it into v4.. I think he needs to rewind the body after writing to it.\nI hate streams.. hmm... //cc @akrabat @codeguy ... thoughts?\nThe obvious part is that you are trying to shove a square into a circle... The simplest solution would be to create a Wrapper Class which would read the contents of one stream and put it into the body of the other.\nI'm hesitant on your fix just because using @ in production is a very big no-no for me.. ahhh coolio :) if you could mark as closed that would be great :D. PHP-DI injects the route parameters into the function call of the method.\nI don't like hiding everything inside the request object. It doesn't feel right to me.\nI think things here are resolved. So I am going to close it :). Closing as resolved!. has been summoned\nYes @akrabat is correct. I will add this as a todo.\nIf you have any questions please feel free to reopen this issue :). @tafel in theory you could integrate both solutions. You could extend the App class which has an ACL library built in. Then override the get(), post()...etc methods to add them into the ACL automatically... but of course that is outside the scope of Slim. \nAlso if you have any questions and are using my acl library just open an issue on that repo <3.. @Sam-Burns Switching the container is not so simple. \nWe also need to switch the Exceptions the container throws [A call to the get method with a non-existing id MUST throw a Psr\\Container\\NotFoundExceptionInterface.] which will cause a BC break. \nDue to the BC break, we cannot merge this into 3.x and this PR should be rebased to target 4.x.\n. I need some more time to digest this. I think we can do it after seeing what interop did, I just want to be 100% sure that we are not going to be breaking people's production apps by changing the type-hint.\nMy biggest concern is with the types of exceptions. The new interface has new types of exceptions. By changing the type-hint to the parent class of the PSR-Container ... one would expect those exceptions be thrown. I think for 99% of people this will work, it's those 1% whom are not using Pimple or standard containers. . Closing, looks answered.. Look's like you have this solved. Closing :). I'm not sure what this is about.\nCan you give us some details on the problem you are having?. Hey @harikt, I believe you have cleared this up on your end. Slim does not offer at this point in time a stable standalone PSR-7 Implementation. Slim/Http is not considered stable at all. \nThe conflict check does not make a lot of sense as the Slim/Http branch will be targeted at 4.0 and above.. What you are looking for is... https://github.com/PHP-DI/Slim-Bridge\nphp\n$app->get('/{a1}/{a2}', function ($a1, $a2, Response $response) {\n   return $response->write($a1 . $a2);\n});\n. Closing as resolved. Please let me know if you have any other questions!. @mathmarques it's kinda a bug fix though. If you have any other questions regarding this issue, please reopen :). Not that I recommend this. I do not.\nSomething like this should work.\nphp\n$app->get('/{contr}/{act}[/{args:*}]', function (Request $request, Response $response, $args = []) {\n     return $this->get($args['contr'])->{$act}($request, $response, $args);\n});. If you have any other questions, please reopen this issue.. Sounds like a bug in your filesystem or opcache.\nThe class does implement that method.. If/When you can provide more information please reopen this issue. \nPersonally, I have a feeling that it's some kinda bug in PHP or Opcache, but from our point of view there is nothing wrong. . This is not a bug, we do not explode header data. \nThe reason why it says it will return an array, is that you can have multiple new-lines in a header.\n['HTTP_MyCustomHeader' => 'apple\\nbanana' ]\nin which case you will receive your array from the header.\n. While you or even I might agree that it's silly.\nThis comes from the PSR-7 community standard.\nhttps://github.com/php-fig/http-message/blob/master/src/MessageInterface.php#L43-L68. I don't think there's a way that this could ever work.\nThe group function on app acts as a URL builder. It would require a complete rewrite of how we handle grouping.\nImo, if you want a speed up, if it matters... do not use groups at all.\nGroups are great in development as it enables you to rapidly prototype something, but there is an overhead attached as you have mentioned in production.\nYou could possibly use the Cached Router file instead to gain more throughput. \nhttps://www.slimframework.com/docs/objects/application.html#application-configuration \nrouterCacheFile\nFilename for caching the FastRoute routes. Must be set to to a valid filename within a writeable directory. If the file does not exist, then it is created with the correct cache information on first run.\nSet to false to disable the FastRoute cache system. \n(Default: false)\nCautionary note This might not work if you are executing any other code than defining routes in your group callbacks.. I can tun some teats at work on the performance. I have a lot of group calls but i do not notice any slowdown at all.. I agree with @akrabat last comment. :) I am closing this. But please reopen if you feel like writing a PR for this use case.. I'm sorry, I am not totally sure what exactly you are asking here.\nSlim v2 does provide a facility to catch some errors, however due to the nature of php, not all errors will invoke Slim's error handler.. Closing. We are not changing this as I do not have time to fix all of my projects that use it.  \ud83d\udde1 . I will review this later on today :)\nOn Thu, Mar 16, 2017 at 8:28 AM Coveralls notifications@github.com wrote:\n\n[image: Coverage Status] https://coveralls.io/builds/10624444\nCoverage remained the same at 98.149% when pulling b2de657\nhttps://github.com/slimphp/Slim/commit/b2de65715f386b488cc9726e345dbefc4df0d290\non crtl:auto-generated-api-docs into 91afa60\nhttps://github.com/slimphp/Slim/commit/91afa6050372a3888fc4464cfc997473dd3f9377\non slimphp:3.x.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/slimphp/Slim/pull/2171#issuecomment-287042257, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AD100lY7KIfNAVpsG_KYJZBUuRkhsq-tks5rmSsHgaJpZM4MfOqk\n.\n. @akrabat @codeguy @silentworks thought's on merging this into this repo?\n\nI was thinking about how it might be nice to have this on the website too.. I took a quick look, it does not appear to be automated. It would need to be run after we tag a new version.. I'm sorry but this is not a slim core issue. Perhaps try something like Stackoverflow. @RyanNerd the problem with that is that the PSR standards are going to be changing later this year which is why we are building Slim 4.. for the record: for the most part, I am supporting Slim 2 and Slim 3 as I have production applications  in use right now and clients that do not want to upgrade ;). More people in our eco-system the better! your project can be 7+; it's just Slim will be 5.6+ :). Going to close this. 4.x is 5.6+. .... great.. @akrabat we were talking about 4.x being 7.x ... . Slim doesn't have CORS enabled by default.. You cannot do that... you probably want... https://api.mysite.com/upload?addToDropbox=true. But this doesn't actually test the moveTo method ?. You cannot write a file to a directory.\n[routerCacheFile] => ./cache/myCacheFile. You need to specify a FILENAME in your cache folder.. From https://github.com/nikic/FastRoute\nphp\n$dispatcher = FastRoute\\cachedDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/user/{name}/{id:[0-9]+}', 'handler0');\n    $r->addRoute('GET', '/user/{id:[0-9]+}', 'handler1');\n    $r->addRoute('GET', '/user/{name}', 'handler2');\n}, [\n    'cacheFile' => __DIR__ . '/route.cache', /* required A FILENAME */ \n    'cacheDisabled' => IS_DEBUG_ENABLED,     /* optional, enabled by default */\n]);. We do not commit the lock file.. Unfortunately that is not how things work :( having commas in headers is valid. Headers are determined by newline characters. I didn't write the HTTP spec so don't shoot the messanger :D\nNow if you wish; one could write a Middleware that would \"clean\" the headers ... but that would be something a middleware author would write.\nGetLeaderLine() returns the entire header.\nExample:\nX-My-Header: 123,\n456,\n789,\n...\nGet Header Line will return the full string including newline\ngetHeader('X-My-Header') will explode on the NEW LINE character and return a set of headers with the commas.\n. FWIW this is how most PSR-7 implementation works. While I realize it can be confusing ... there was a great deal of thought that went into it.\nI will think about how to better communicate this to our users... it's quite a difficult problem.. @akrabat in theory a password could contain any of those values. I would still think this would be fine as it is a bug-fix.... Yes. Calling a route within a route is not best practice and we will be depricating it in 4.0.\nIn this case you should not be logging the uri to the action but some other information. Like the class and method that is being invoked. if tou are not using classes and methods then you should be refactoring to do so.\nA short term solution would be to modify the reqeust object directly.. What you want to do is wrap those 3 routes in a Class.\n```php\nclass MyExternalAPI {\npublic function __invoke(Request $req, Response $res, array $args) {\n\n}\n\n}\n```\nYou can add it to the container\nphp\n$container = $app->getContainer();\n$container[MyExternalAPI::class] = function ($c) {\n     return new MyExternalAPI();\n};\nFinally add it as a route\nphp\n$app->get('/path', MyExternalAPI::class);\nIdeally you are using proper practices and you have no domain logic in your action methods at all.\nThe reason for this is that you do not want to tie your business logic to your framework. It should be separate. When designing it this way, you can then use this logic in other places in your application [ your use case ].\nExample...\npublic MyExternalAPI:getData($options) => Returns an array formatted data.\nYou can simple access this class from other sub-systems in your app. You can still keep invoke so you can simply return a JSON formatted representation of the data.\nI hope this helps.\nIf this is for a production/money making product both myself and @akrabat provide consulting services on these sorts of System Design problems, if not I would recommend checking out our slack. It's very complex to discuss in a github thread.. @akrabat I was thinking the same thing, but I don't see any harm for the short-cuts.. Can you URL Encode the user too... for obvious reasons X_X. @akrabat this seems like a bug; I wouldn't want it fixed as a middleware.\n@RyanNerd Let me know if you want to make a PR for this :). While I personally haven't discovered this bug.... We should have at minimum 1 unit test to ensure that IPv6 isn't causing problems.. The route only passes the response object back through the chain of middleware... so there is no direct way to do it without accessing a system service outside of that. As @akrabat has explained you might be able to use a container object this way.\nSomething like this...\nphp\nInterface InMemoryRequestAttributes\n{\n    public function add($item, $value);\n    public function get($item, $value);\n}\nIn our route you can access the instance via the Container to add, and in your middleware access it via the container to get.\n. What middleware are you using?. I'm closing this as I have no clue what it's about. Feel free to reopen when you can provide more info.. I cannot think of anything that would do this except for some kind of middleware that is tinkering with the Response Body.. This issue is really old. I believe it has also been answered; so I am going to close it. if you feel as if you still need support please reopen.. @akrabat Do we even need these renderers? ... Why are we even rendering content and not just letting exceptions bubble to where a user can catch and do something with them....\neven in production, this could be a bad thing... what if I want to deregister all of the renderers? \nSeems like a pain in the butt to add more to deploy....\nIt makes more sense to me to have it bubble outside of app and catch it at a global level.\nwe can then decouple all rendering things and App becomes a middleware runner that returns a response or throws an exception.\n. @akrabat I'm not saying we don't render them, it's just I would rather do it in a very decoupled way.\nI think Middleware is at least a good first step.. This issue is covered here :) \nhttps://github.com/slimphp/Slim/issues/2175. This code change doesn't do anything....\nThe if reads as...\nif not empty default_mime-type set to empty.\nIn your hosting environment you will have a default mime-type set.\nhttp://php.net/manual/en/ini.core.php#ini.default-mimetype\n. I'm pretty torn on this.... while this feature might enable slim for you, it does impose a penalty on the rest of the community as if blocks do have a material cost.. @noogen a good rule of thumb is to never use @ ;). I really think it depends on what it is. We will not be developing any new features for 2.x... Currently we are only going to develop security related patches.\n//cc @akrabat . I too dislike the term \"group\"... I kinda liked the verbage of, $app->mount(''). I need to think about it more. The idea of passing App around strikes me as a code smell.\nI understand the desire to fix the problem with route groups, and registering routes and what not.\nI think it would make more sense to only pass through the Router object.\n//cc @akrabat . @silentworks maybe they should be on the router and not the app ;). @geekish I think we should revisit the groups in a different way. :). thank you @geekish  :). I do not think this belongs in Slim's core.\nHowever you may extend Slim's router and add this enhancement your self.\nTo use it in your Slim installation simply replace the $container['router'] with your version.. I am going to close this as I think this belongs in user code.. This is not a bug. This is expected behaviour and default behaviour of web servers in general.. This problem wont exist when using Apache or NGinx. The default apache .htacess that we provide says that the request should go to Slim IF and ONLY IF the path does not exist on the file system.\nThe above problem is a problem with the built-in web server that PHP ships with. it's documentation and the PHP core team have attached a Wont-Fix to it saying basically if you don't like it install an actual web-server.. This is not a slim related. Try stackoverflow!. Check your log files.. @Sam-Burns //poke. as far as I know, it wouldn't be possible to use Slim inside a CodeIgniter project.. @johnrobertporter You can pass in ENV settings into the container before you create slim. This allows you to override the settings.\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Container.php#L95-L97. John :D It's a pimple problem. In 4.x we aren't even shipping with a container!. I would be willing to entertain a new method on Slim's container that is a short-cut to replace a value though.. It will only be addressed in Slim 4 as any serious change in 3.x would cause a BC break which we will not do :). is there any way to just change it for HHVM or does it have to be global for all tests?\nI suspect that the travis-ci dudes are going to run out of trusty servers at some point and builds will take longer.. I don't see that Slim can do anything about this... thank you though for giving it some visibility. The PSR-7 spec is kinda holding us hostage on this point.. I would like to see this PR implement the 2nd possible change.. @akrabat that is not a one-liner ;)\nI am torn on the 2nd point; I could go either way with it.. Your test code is wrong.\nPlease review the documentation.\nhttps://www.slimframework.com/\nA minimal example from the website.\n```php\n<?php\nuse \\Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse \\Psr\\Http\\Message\\ResponseInterface as Response;\nrequire 'vendor/autoload.php';\n$app = new \\Slim\\App;\n$app->get('/hello/{name}', function (Request $request, Response $response) {\n    $name = $request->getAttribute('name');\n    $response->getBody()->write(\"Hello, $name\");\nreturn $response;\n\n});\n$app->run();\n```. In your code example provided you are returning a string from the anonymous function. You need to return a response object.. What version of PHP?. Are you overriding any of the defaults in the Slim App?\nthere are multiple test cases that show that Slim is returning the correct response body.\nhttps://github.com/slimphp/Slim/blob/3.x/tests/AppTest.php#L777-L858\nSomething is chopping up your response. The likely candidates are:\n- some whitespace character in your code\n- A middleware\n- In some rare occurrences New Relic / Content Length header is not set correctly.. @aimeos no since PHP doesn't care about the base url, this is something that you will have to do in your user code.. @aimeos it possibly could be... I have never actually wanted to use an absolute URL in a production app as I just use href=\"/...route/\".\nWe could add something like this for 4.x. If you feel the need for it open a pr on the 4.x branch as I am sure it will be gladly accepted. :). I believe the idea was that in Slim 4 we would be switching resolution to be a middleware; so that Slim simply executes a chain of middleware [last being your route]... But I think @akrabat might know more about that.. This really isn't a slim question... but\nIn short: You cannot / you need to use proper injection / principles... \nAlternatively you can write some kinda adapter for your class that uses PHP Magic methods to grab all of the required parameters to execute the function.\nI hope this answers your question.. Slim 4.x is needs some dev work :) just look at the issues labelled Slim 4.\nCheers!. Hmm... only broken on HHVM .... \ud83e\udd15 . @AhmedBHameed seems like this one has stalled, were you able to figure it out?. I believe this has been resolved. . good catch. feel free to PR :). \ud83d\udc4d congrats on first pull request :). remove what you have in composer.json for slim and retry. I am going to close this as I know composer install of slim works given that I use it daily for production updates. Please reopen if you are still having issues.. ... ah yes. chicken and the egg problem.\n@akrabat Twig-View has a dependency on the Request object... I think this issue should be opened on Twig-View. @Ikke for the reasons Akrabat stated it's not possible to do what you want with Slim 3. PSR-7 clearly states objects must be cloned which causes issues with referencing them.... Slim requires them to be in the container... for BC/Other reasons. Slim 4 will not have this problem.. @akrabat I did notice that there wasn't a specific unit test covering withJson .... @RyanNerd I'll take a look at it. yep :). I'm teetering to tag wontfix for v3 .... but will fix in v4... @akrabat  ?. You should be able to do this via a middleware I suspect. I am not confident that this is a bug; as PHP's environment is outside scope of Slim it's self... I will think about it some more though.. @Finesse Yep. We aren't in charge of the default php headers \ud83e\udd37\u200d\u2642\ufe0f . I would like this to be cherry picked and put against 3.x\nThis is a great PR.\n\ud83d\udc4d . Not to be a ... stickler but I see that there is no test for this method ;). @akrabat this PR needs to be rebased.. Can you just use the default Slim provided HTACCESS to see if that works ;). RewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^ index.php [QSA,L]\n:). ... weird cause it works for me.\nDid you set the VHOST webroot to the public directory?. because life does not revolve around apache ;)\n\nPATH_INFO is related to the Apache Web Server serving PHP pages\n\nWe support any web-server and thus cannot rely on solely PATH_INFO.. @samwilson I find it very odd that you are having this problem. I have not had any problem with Routing and I use it extensively on dozens of projects.. Going to close this as this is Server configuration and out of scope for the repo. If further assistance is required try our slack or discourse community. Thanks!. Yes. I do believe so.. @akrabat thoughts?. It's not reallllly documented anywhere... but yes. I guess for those who do not want to use a web server they use the builtin one.. @WillSkates yep :). Your URL is not valid according to PHP.\nvar_dump(parse_str('http://example.com/payment/tianfubao/notify?cipher_data=S%2FTqbQYcG36j0%2FeEX2%2FdVdTVkwuViUpf12%2BpDexOBfguz%2BgSJyVSmT0JPmuXeOt4bMCnQYGl7VJQbaTaC3vhjhlAaKEfcfSxZP2oFMITX91VdDwW8pwOTNd0wkF51UD%2FJHJNBbOXcM2KgTaPJvnaytPoZ%2B%2F3Ctk%2B04ZJydoQWeMxHIguVzZJJundilntL6%2FrHhKTkQFP3j6t2KPoj60HEbxjg41UKc1fbktwW06l0yyVAfHxPDkygO%2B47%2Fyt2ySYallFKO5%2BBpCpLZfM%2BNTSs%2F9kkGfArA0oiYvXxnTSe1GSio2jpGxUgJJtDdq6DAcZxhq3ocpGBrzZp9xEO9s7fXNyihIyw7saRbepYu9hDl1%2FjAS%2BuaaYawWKnRmCLnup0ziPxH0ndz%2FjL8CZhL4YYeaA3C32O4DUh%2FoYmV6YUuVAxkfJVDA7aVbx7D%2Fod27SJ3EHDmTi6o3wAvpCW2XpgxG5zV1%2BpHtZYqYSQT2T0tHFgt98zQTgdALyjeAaDOyW&retcode=00&retmsg=%B2%D9%D7%F7%B3%C9%B9%A6'));\nReturns\nNULL\n. haha. whoops :). Any update? :). Looks like this is resolved; going to close.. This is a bug in the documentation.\nI assume that your SprawdzanieKlientaPoRefererze::class either accepts the Container as the only constructor argument?. Closing issue :). What are you doing exactly? ... \nRouteGroup extends Routable and implements RouteGroupInterface.\nRoutable is abstract but does not define a method called getInstance\nRouteGroupInterface does not define a method getInstance.\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/RouteGroup.php\n. Closing as old and no follow up. Hello. This is not really a support forum; please use our discourse or stack-overflow. http://discourse.slimframework.com/  https://stackoverflow.com/questions/tagged/slim\nHowever in the meantime the basic debugging steps you can do.\n- Check your server logs for errors\n- Check your application was installed correctly. We already have this baked in.\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Http/Response.php#L48-L118\nI don't see the problem it solves. If you don't know the status code you wish to use then you need to know the name it uses... which often times is not really a name that you think of...  example 418 => 'I\\'m a teapot',. @akrabat Nothing can really be done on 3.x... but this should be raised on slimphp/http. Going to close this here, it's open on Http and we can change the constants in 4.x. I personally don't see any value in providing an interface for those objects as they contain non-PSR-7 methods. IMO it's okay to type-hint Slim's concrete implementations.. Feel free to PR. Can you log the issue here: https://github.com/slimphp/Slim-Website. You should try our discourse; http://discourse.slimframework.com/\nIt's likely a configuration problem.. Server config is outside the scope of our project. If you require config assistance you can try our discourse community or slack.. its not possible to show a better error; :(. Slim 3, v4 might be Q1, Q2 of 2018. Also for the most part I do not think the migration path will be all that difficult.. We are going to provide adapters the last time I spoke with Rob. This question is better asked on our slack and/or our discourse forum http://discourse.slimframework.com/\nYou are in full control of the template data prior to rendering the template to the response object. if you post on our discourse, I'm sure one of our community members can help you out with a concrete code example :). Do we need it? I have felt that our community has been incredibly good in this aspect.. Also; do we as maintainers have the resources to monitor and enforce a CoC?. \ud83d\udc4d LGTM @akrabat . @mahagr we need a test so we can merge this plz :). That is how middleware works...\nStandard Middleware\nphp\nfunction ($req, $res, $next) {\n    //BEFORE\n    $res = $next($req, $res);\n    //AFTER\n    return $res;\n};\n//Short Circuit\n```php\nfunction ($req, $res, $next) {\n    //BEFORE\n    if (cond) {\n        $res = $next($req, $res);\n        //AFTER\n        return $res;\n    }\nreturn $res;\n\n};\n```. Ah; then no you cannot do conditional routing like that.. Yes. You need to mock the PSR-7 request as you have done in your one example / you can look at how we do it in our unit tests :). Unfortunately once you pass control over via the process that is it for Slim.\nI think what you really want is a way to message/listen across the process.\nYou can listen for things inside the process via STDOUT as documented on the popen page.\n\nThis pointer may be used with fgets(), fgetss(), and fwrite(). \n\nAside from this there is nothing we can do at a framework level; popen doesn't generate exceptions from what I can tell in the docs.. Your regex appears to be incorrect; Routing is actually not handled by slim; Slim wraps around FastRoute.. This is not a bug; you cannot forward a HTTP request with anything but at 3xx status code.\n. ...... it should not work in 3.8.1.... Possibly related to https://github.com/slimphp/Slim/commit/dfcd63234d9610c8bfc3c26c8813659212a8c55e. Hey Tom, While I appreciate the amount of work that you have put into this Pull Request, this feature is a non-starter. We couldn't merge this PR as it would be a breaking change. Furthermore we are removing the requirement of having a container for the next major release of the framework.. Furthermore you can use PHP-DI's container if you wish to have auto-wiring!. Related to #2340 . > hi,l feel it is not suitable to use fopen('php://temp','r+') for high performance .\nIt is a memory stream and only switches to disk after a preset limit. I would say 99.9% of Slim users do not run into performance issues because of this; \nIf you wish to change this setting; you may replace the Default Request/Response Object or Bodies at your discretion by overwriting them inside the container.. This is not a bug at all in our code base.\nWe have unit tests that run against every PR and this has not shown up at all.\nYou can see the status of them here: https://travis-ci.org/slimphp/Slim. @akrabat  ... I honestly can't tell if this is a problem in the PSR-7 spec... or not.\n@splitbrain I'll look at other PSR-7 implementations and see what they do; this is very likely a huge edge case that no-one thought of.. yeah looks like a \ud83d\udc1b  \ud83d\udc4d . Depending what version of 4 you are using there might not actually be a container :D. Can you upgrade to 2.6.4 ?... oh there isn't a 2.6.4 release..... 7+ :D. The PSR-15 spec is written for 7+ we haven't updated the 4.x composer json. No they are syntax errors. I don't think using @ is an acceptable solution. This allows things to fail silently which is bad.. I don't think we will be fixing this in v3... but we will probably address this in v4.. This is most likely a configuration error as he mentions that it works locally.. I'm closing this as it's not really a \"slim\" issue. If you have more questions about how to use Slim we have great resources on our https://discourse.slimframework.com/ forum.. before I merge this; I want to discuss dropping hhvm with the other maintainers.. You dont have a content type header?\nIn the previous one you don't have a Location header.. I'm going to guess that it's a problem somewhere in your NGINX configuration. Slim and PHP sets a default header for Content-Type.. Please try opening this question on our discourse community. Github is not the place for asking for help of this type. Thanks.. Going to close this one as resolved.. Thanks :) I will take a good look at this today or tomorrow, I know akrabat is at a conference this week so he might be able to get around to it next. . Not currently no, but we are open to PRs :). Strictly speaking... This stack-overflow response is appropriate.\nhttps://stackoverflow.com/questions/15641694/are-uris-case-insensitive\nIt should also be noted that different web-servers treat URIs differently.\nYou could accomplish this by modifying the super globals before the Slim app has been run. Ofc that means you are going to need to build your own URI Parser as you stated you don't want the route Parameters modified.\n. I mentioned a workaround in my last comment.\nFurthermore, we use FastRoute for route parsing and do not maintain that package. Any change required to the router would need to be made in the upstream package. There could be additional settings in Fastroute that would enable the features you want; I however am not an expert and you should inquire there to find out ( https://github.com/nikic/FastRoute )\n. Thanks :) \ud83d\udc4d . so you would like a getter for the callable on DeferredCallable. yes :). Hmm, HEAD should be GET just w/o a response body.. Minor nitpick but in your example coe you don't forward the status code from the processedResponse :). Yes if you wish the not found handler to be used.\nreturn a 404 is valid since if you are writing a REST API; you can simply return 404 with empty body and that's perfectly fine.. Closing this as resolved. Hmm. I actually can't think of a reason why the first condition of that if would ever be false.. There is no way to solve your problem with Slim directly. I would say what you are doing is a huge anti-pattern regardless of whatever framework / language you are using.. I guess what you could do is cache that file locally at least then it wouldn't pull in something every time. Pimple is a dependency injection container. Only services that are used get created.. Closing as resolved.. closing as resolved with #2398 . Our Request objects pull from data provided from the PHP super globals... if php is being run at port 8000 then that's what we will have.. Closing this as it's a php-ism.. If we change the ordering now, migrating projects is going to be a bit more tricky. We will have to make sure we document the changes extensively.. @conrad10781 we can't change how it works in 3.x (it would be a backwards compatibility break) however we can in 4.. Going to close this one as resolved. We can continue the discussions in the other issue about LIFO vs FIFO.. We could solve the issue by allowing the developer to set with FIFO/LIFO\nIt would make the migration path easier if we decide to default it to FIFO.. We have a router interface already available in Slim 3 @llvdl \nOn another note, please be very careful about benchmarks. There are a lot of people who game benchmarks in order to show bias towards certain projects. The linked article above is a great example.\n\nwith /abc{foo}/123-like patterns, the trailing number going from 0 to 399. Matching URL /abc399/399 topped at 154k match/s. (a bit faster than our reference and inspiration, FastRoute, at 65k match/s.)\n\nThis is a single end-point style, one of which I would not claim has being standard at all. Without additional pattern information it seems like the author is cherry-picking data to fit the narrative of his story. \nIt could very well be that Symonfy's new router is good in some certain cases, but it could also be worse in others. Given people choice is a great idea, so \ud83d\udc4d for being able to swap the Router implementation for 4.x. \nHaving said that, I think I would like to stick with FastRoute as a default implementation. We will also need to make sure that the community knows 1 Router is not the same as others when it comes to defining URL Patterns.. @akrabat Haha yes, I should have worded that better... but we shall provide interfaces for such things!. @odan it would simply mean you replace the instance of \"RouterInterace\" in the container with whatever implementation you want. It wouldn't cause any slowness. @odan the placeholder syntax would not be standardized that would be up to the implementation. @winks the current dependency tracking for Symfony shows that only the requirement of 7.1.3+ is required. \nHowever it does require more symfony packages to bring it up to par with FastRoute.\nNamely: symfony/expression-language. The expression-language component required symfony-cache.\nWe would need this as well I think: symfony/dependency-injection this allows the router to inject route handlers from the DI Container.\nSo in total 3 additional symfony components are required to use their router in a way that matches FastRoute. This is why I find it highly suspicious that they can claim so much speed. I suspect that when they used their benchmarks they highly-optimized their router without doing the same to FastRoute.\nFor the record FastRoute can be set to use a cache-file. Once it is using that cache file it is very very fast. We don't have that documented perhaps very well.\nFrom a maintainer stand-point, if the community wants to switch then fine, but I hope we all understand that there are trade-offs. The Router has and always will be a replaceable component, it's just a matter of writing an adapter to the interface... until there's a PSR for a standardized router :)\n. Closing issue as resolved. It was not a mistype. \nYou can still get the container if you wish via $this->getContainer(). \nThe reason being it ensures that apps that extend Slim can't inadvertently break the container without a lot of effort. The framework itself does a lot of bootstrapping like setting framework dependencies in the container.. I don't know what you are expecting from us, but we will gladly take a look at a PR to solve this problem.. I would not recommend doing this. Please try to use FlySystem https://flysystem.thephpleague.com/docs/adapter/aws-s3/ \n\nOpening the file with an s3 GET object works correctly, but means I have to load the whole file into memory.\n\nYes. That is what you will need to do. Slim supports Chunked output, however it still requires the entire object to be in memory. If you want a proper stream solution, you will need to look into another framework.\n. You will need to add them to the request object via a middleware. Slim 2 never had this kinda support iirc.. @caom92 we don't support this type out of the box, feel free to PR a new media parser for our request object.. @sherwin14 it looked like you resolved your own issue :). Slim wasn't really designed to be run more than once. We attempted to solve this with a few different feature flags.\nThe solution unfortunately is to regenerate a new App instance. \nThis might be something we try to solve in v4.. You aren't pulling in the correct cookie object.\nThis is different \nreturn $response->withHeader('Set-Cookie', $this->cookies->toHeaders());\nThan this\n$cookies = $this->get(Cookies::class);\n return $response->withHeader('Set-Cookie', $cookies->toHeaders());. I don't see an actual problem here?. What you want is to use PHP-DI, it supports auto-wiring.\nhttp://php-di.org/doc/frameworks/slim.html\nWe are removing the default container in Slim 4, so we wont be making any changes to the container and how it works.. Hi,\nThanks for creating an issue, but your particular problem is better suited for our discourse community. http://discourse.slimframework.com I understand that server configuration can be difficult, and there are hundreds of other developers on our discourse that will be able to assist you.. This looks fine for 4. I left it in just in case we wanted to move those methods elsewhere, but if required ill remove them.\n. Yeah it does appear that it will get passed in twice. but only the ['settings'] part of the user provided array.\n. The containers job is to retrieve the value and that's it. If the value throws an exception it's not the containers responsibility to deal with that.\n. ;( I'm on windows too.\n. Needs type checks. \ncallable?, container interface\n. Not 100% sure that this is a valid check\n. :+1: Yeah I don't really like the name either.\nDeferredCallable ?\n. this guard is not required. if we are making a new body then we should reset the Slim request.\n. Ignore my previous comment. for whatever reason we only parse on the Request object and not all messages.\n. The use case /route/{name} where /hello/josh?name=test should throw a router exception.\n. I am very much +0 on this because adding the query params after the pathFor is rather trivial while not ideal.\nAfter reviewing this, I would want this to be a separate method to prevent BC breaks and we can fully document it's pro's and con's... At the next point release we could mark this old method as being depreciated but still give our user base some time to convert over. In addition we should prepare web site content on how to migrate and what the differences are.\n//ping @akrabat @silentworks \n. @akrabat this should be put elsewhere so we can test it properly.\n. I really think these should be put on the actual Http Object.\n. ?? I thought we were going to remove the container ;). it might be nice to have this as a configurations setting.. I honestly think that we can remove it.\nDump and Die will still work, which is I feel what a majority of people do anyway.. @akrabat I think the name of the test should change. This test should be renamed.\ntestEchoingOutputIsEmpty\ntestReturningStringThrowsException ?. grumble. This should only ever return one route.. This is also not an improvement on readability in my opinion.. Yes, it would.. .... why are we casting it to a string? ... my gut says that is a really bad idea.. This test should also assert that the body's content is actually 'Body'\n@akrabat what about multi-byte character sets?. We need a new name for this.. .............. \ud83d\udc4e you can... doBetter. doRouting ... surely we can come up with a better name :P. I would prefer to have everything suffixed .... dispatchRequest ?. I think we should probably be a bit more specific about how this is possible.\nWhat about adding all of us to the Authors list in composer.json?. that's a great question; I think reasonably will end up being what we (maintainers) believe is the correct thing under the context...\nMinimally, I think what this document is saying is: Be Nice, Courteous and Understanding. This isn't required. We should use the class constant here. This however makes the app not extendable and a user cannot replace the dispatcher. It probably should be a class constant. HTTP Methods don't change. I dont think we need to include a package for constants, we aren't javascript.. This seems like some sorta anti-pattern to me... . I feel like there's likely bugs in here just do to the sheer complexity of this method. It would be preferable to split this out into protected / private functions to handle each case which will give us a better ability to test the different situations.. This feels broken as process might implement the middleware interface but does not run the middleware stack ?. ",
    "jpj": "Thanks for the explanation and the fix.\n. ",
    "davestewart": "This would be useful, esp for post routes, i.e. function add_post()\n. Ah... so it has, and much more elegantly... !\n. All done! Tnx.\n. ",
    "ciaranmaher": "I came across a way pass Slim into your controllers without using the Slim singleton. https://github.com/codeguy/Slim/pull/755#issuecomment-35495095\n. Slim doesn't dictate how you structure your own controller classes, that's the beauty of it.\nThe above constructor was just to highlight how you would integrate it, I wasn't suggesting that you'd have to copy it into all your controllers. It's really up to you how you use the above constructor, it can sit in your own base controller or individual controller. \nMyself personally, I have the above code sitting in my abstract base controller class and all my other controllers extend from it.\n. @mvader I get your point about how this would dictate how you structure the constructor within your controller class, although declaring a class constructor is entirely optional. On the flip side of that you could also argue that Slim is currently dictating how your controllers constructor is defined, i.e. it must be declared with no parameters (or else with default parameters set)\nIf I choose to have a constructor in my controller class that accepts any parameters, Slim forces me to set a parameter default otherwise a PHP warning will be thrown. Missing argument 1 for Controller::__construct(), called in Slim/Route.php on line 166\nI approached this PR based on what people were looking for in issue #748 and it's something that I need in all my apps. This approach would allow for better unit testing of controllers avoiding the Singleton approach \\Slim\\Slim::getInstance() (which is to be removed from Slim 3.0)\nAn other option of passing $app to the controllers was mentioned in the help forum by way of a go between class but it doesn't seem that elegant.\nIn saying all that having some sort of BaseController that's part of Slims core would also work very nicely :)\n. @designermonkey I wasn't aware \"Route::setParams()\" was available in 2.4.2\nThat's great news because now I can do something like this:\nIn my routes file:\n``` php\n$app->get('/hello/:first/:second', '\\Hello:sayHello')->setParams(\n    array($app)\n);\n```\nIn the \\Hello class:\n``` php\npublic function sayHello($app, $first, $last)\n{      \n    echo 'Hello ' . $first . ' ' . $last;\n    echo get_class($app);\n}\n```\nThe route /hello/ciaran/maher will output:\nphp\nHello ciaran maher\n\\Slim\\Slim\nIt still would be nice to pass $app to the controllers constructor but this is a nice workaround that will allow me access to $app without using the Singleton method or some kind of go between class!\n. I think that's a great way to do it, just spotted a couple of things in the PR https://github.com/ciaranmaher/Slim/pull/1\n. @codeguy The main reason that I opened this PR was to have the ability to pass $app into the controllers constructor.\nYes, you can instantiate the controller first but then, exactly as @silentworks put it, you'd have to instantiate all your controllers even if they aren't called.\n. Have a look at http://docs.slimframework.com/#Route-Helpers\nBasically halt(), pass(), redirect() and stop() will throw a \\Slim\\Exception\\Stop or \\Slim\\Exception\\Pass exception as a way to stop user code from processing.\n. ",
    "ryan-mahoney": "LOL, I can believe I missed that!  Thanks\n. So, I obtained the dev version.  Right off the bat, the code was generating a few errors.  Those errors could be fixed w/ two changes:\n//parseHeaders expects Environment object\n$headers->parseHeaders($environment);\n//replace expects cookies to be and array, not an object\n$cookies->replace((Array)$cookies);\nAt this point, I wasn't getting run-time errors, but it's returning an empty string for simple predefined routes.  I am using it with ReactPHP... so that could be a factor... will keep testing.\n. ",
    "elephpantech": "Temporal github trouble.\nSolved with: composer install --prefer-source\n. Temporal github trouble.\nSolved with: composer install --prefer-source\n. ",
    "krzksz": "In my opinion this improvement is to important to be left for consideration until 3.x. \n@ciaranmaher's initial idea is just Good Enough\u2122 since it allows us to easily access application object inside every controller without making code more complicated and involving all of the singleton and globals stuff. Every other's solution can be accomplished by already existing methods e.x. dependency injection.\n. ",
    "4nd": "+1 for @ciaranmaher 's solution.  The 'Slim doesn't dictate how you structure your own controller classes' doesn't hold true, when it already dictates how you structure the action method. Although you can use setParams, it always passes the route matched vars, why is this any more acceptable. \nDoes anyone have a problem with always passing the $app in the constructor?  You don't have to do anything with it?\n. Most, if not all, other frameworks I've experienced, pass parameters to the Controller constructor, how about an assumption that if you're using the shorthand '\\Some\\Controller:action' that you're integrating with Slim, otherwise you can use a closure to construct the controller and execute your method? \n. Is this still under development? I know its been discussed before, but some way of getting the App instance into the controller, aside from as a route parameter, is pretty important.\nI'm happy to take a look at it if nobody else is.\n. How do we push this forward, am I missing something?  Is there some way in my controller to access the Slim instance, or its view without this functionality?\n. Could be worth changing this class to store data in JSON format?\n. Totally agree, but some people may need them for some reason.  They're good for long-term client-side configuration storage, no need for objects though, a key/value pair should be enough.  Definitely not for use with secure data.\n. ",
    "pine3ree": "Hello,\ni added a test. There seems to be an issue with travis build with php 5.5 in this test:\nSlimTest::testExpiresAsString\nkind regards\n. yeah, \nthat test is so trivial.\n. Hello @mnlg, yes i noticed that (i use pimple a lot), but the same applies here. \nThe Helper/Set was used both as a parameter(data) container and as a IoC helper.\nThe data part has been moved to Collection, i think.\nThe configuration now has its own class.\nI think it could be useful being able to call a shortcut method:\n$app->config->get('key', 'a default value'))\nto get $app['settings']['key'] if set, or 'a default value' otherwise\n$app->config->set('key', $value) to call $app['settings']['key'] = $value;\nkind regards\n. @silentworks Thank You,\nactually in my applications i use that pattern a lot (sf2 calls it a ParameterBag), even for request get|post|cookie|files. I have a base DataObject / DataSet class similar to Helper\\Set without the ioc methods. I also use it for my quasi-anonymous|quasi-popo(quppo) entity classes.\nBut nowadays, after writing in zf2, sf2, yii, i am rethinking my way of writing php code.\nNow i wouldn't use the container to add an on-demand feature that is always used in every application. Now i use a public property $config (Config)  instantiated in the Application constructor.\nFewer method calls, less overhead. The same goes for request/response/router. Obviously this works when you don't need to extend the $config, $request, $response....\nTo slim it down even more, although using\nphp\n$app->config->get($key);\n$app->request->query->get($key);\n$app->request->cookies->get($key);\n$app->response->header->set($key, $value);\n$app->response->cookies->set($key, $cookieSettings);\nis cleaner and it is what i have always used, I decided to revert back using simple arrays and simpler setter|getter class methods. This saves a few ms. In a framework that runs in 4-5 ms, adding another 4 ms means making it as twice as slow. Let make sure that only the model part of the application do that. \nWhen major frameworks will be available as php c-extensions, i will go back being a good guy, using good programming practices and interface everything it can|needs to be interfaced.\nOf course micro-fmw as slim | flight stands apart: i'm just obsessing about performance right now. I think it will pass sooner or later.\nkind regards\n. what was i looking at?\n. @tuupola \nHello. It does 2 things.\n1.\nit caches urls based on route name and params so if urlFor is called twice with the same arguments the result is taken from cache (memory cache for the current request cycle)\n2.\nit allows you to append a query string to the url generated from all the parameters that aren't matched as route parameters. es\n```\n$app->get('user/index(:/page)', function ($page=1) {\n// implementation here\n})\n->name('user-list'')\n->conditions(array('page' => '\\d+'));\n$url = $app->urlFor('user-list', array('page' => 12, 'sort' => 'firstname.desc'));\n```\nwill give you smt like:\n/user/index/12?sort=firstname.desc\nkind regards\n. @tuupola \nThe generated url cache is useful when you have a rich web application including portlets, areas etc.\nWhen links are generated in different parts of the application chances are that there will be duplicate urls...(imagine a blog post page and portlets displaying latest/featured posts or an ecommerce website with product/category list displayed everywhere).\nCaching them will ensure that generation for the same url will occur only once. But speed tests are meaningful only for that application as they depends on many factor like the complexity of route patterns, the number of duplicated urls, the number of total urls...etc etc..\n. @tuupola \nanyway, i am going to remove caching implementation from this PR as per @silentworks request.\n. @silentworks \nHello,\nin my opinion a third optional parameters looks a bit uglier and the purpose of the PR was also to add some sort of /auto(detection|mation)/\nIf a parameter they is not a route parameter then it's automatically added to the url as a query string parameter. If you change,say remove, any routing parametersin the route definition, you will get all leftover params as qs, so you will always get this (probably useful) extra information with the request, without the need to move it to the 3rd method arg.\nkindly\n. Yes, i have used zf2 url view helper a lot (that's why i tried to avoid the 3rd method argument)\nquestions:\n1) i used the name $options as in zf2. Any better but still short name? naming things always takes me a lot of time.\n2) should we type hint as array $params and $options? (http_build_query also supports objects but i don't think it makes any sense here)\n3) should we add support for url fragments as in zf2 inside the $options arguments?\nkindly\n. queryParams was my 1st choice even if a little longer. \nreadability and semantic are always more important  and i have just remembered i wondered what was the meaning of the $options argument in zf2.\nso => I'll change it instantly\n. yeah, i notice now,....it was added for the 2 dev branch and it was also splitted. I think it's better to move the code to a new PR and close this. \n. in the dev branch there will be no need to update the urlFor proxy method in the main app class\n. #1007\nthere was a travis erro report but the error is found in:\nPHP Parse error:  syntax error, unexpected '.', expecting ',' or ';' in /home/travis/build/codeguy/Slim/tests/Http/BodyTest.php on line 37\nthe same error reported in the next PR\n. tests need more fixes\n. oh sorry, i was trying to understand the error in travis, i forgot to close it. Are those other build issues resolved?\n. you are totally right! :-) a fixing PR would be good\n. @mnapoli \noh right, thanks. i totally missed that. I pulled the latest dev about 30-40 minutes ago..\n(updated) \ngot it! \nUpdating slim/slim dev-develop (d929342 => a18ed21)...a matter of minutes i think...\n. Hello @akrabat \nwhat is your opinion about this?\nAlso, shouldn't we implement middlewares' __invoke() method and route handler against \\Psr\\Http\\Message\\ServerRequestInterface as well?\nregards\n. @JoeBengalen great!\n. Another way could be creating a Route descendant which has an default output buffering capturing  middleware (and why not also a string capturing) as its innermost middleware.\nI had the same doubts and the same needs about ob and string capturing: we are now all about request-response(-next)=>response. But i guess this is what iteroperability needs: a common and easy pattern. @codeguy  Josh adopted this pattern and applied it to the Route cass too. Basically everything, even a route handler (and the handler wrapper in the route mw stack), is a middleware. That simplifies development design and code.\nIn any case allowing any route handler to return something else (even void) would sound like breaking the law a little.\nIn my case, because i also wanted route attributes as first paramaters in the route handler, i had to remove the middleware pattern in the route implementation. It works, it allows me to capture echoed string and returned string. But the resulting code, even if you can still call it clean, is a bit less elegant than the slim way. \nI believe that interoperability will force us to rethink the structure of http-application. We just need to move application business logic elsewhere and let the controllers do what they are really supposed to do: handle requests, return responses delegating what happens in between to other methods or objects.  \nphp\n// pseudo(i-mean-it)-code\n$app->get('/catalog/products/{page}', function ($request, $response, $args) use ($app) {\n    $response->write($app['productReadController']->index((int) $args['page']));\n    return $response;\n});\nHere a productReadController could be a standard mvc framework controller instance where actions are responsible of building the html page with a view renderer etc etc in a more traditional way. $app or any other service locator is responsible of injecting controller class dependencies.\nIn a restful application you would probably do the rendering work inside the route handlers, as you just need to send json encoded data and headers. In any case, little work inside the middleware, just give back a response.\nkind regards\n. @akrabat \nIn my implementation (it started basically as a fork of slim 2.4 with added layers to allow a zf2-like mvc module structure) i have the router instantiated with a $routeClass parameter (st like the objectPrototype in zf2 db-result) which is used by the router when it acts as a route factory. It defaults to the basic namespace\\routing\\Route class. When I want to use the zf2-mvc-like-module layer, I start a namespace\\mvc\\App class which as a default not overwrit(e?)able configuration instantiates the router with a namespace\\routing\\mvc\\Route. This class has one overriden method to intercept route mvc parameters (basically module, controller, action names).\nmaybe we should ask Josh if he is willing to implement something similar, if it's worth doing it.\nOtherwise I believe it will only necessary to have a createRoute($methods, $pattern, $handler) method inside the router.\nWe could extend the Route class (to incude an always attached capturing middlware) and the Router (we would need to override just the createRoute method) and use pimple standard way to override/extend the router service.\n. ...but again, it's still like breaking the contract, as something in the chain (the route handler) will be allowed to return something that is not a response.\n:-)\n. hi @silentworks \nsince nobody else subscribed or commented this proposal i believe you can safely close it.\nor i will wait another 10 days and then i'll close it myself.\nkind regards\n. Hello @lalop \nActually the application run() method calls:\ncallMiddlewareStack()\nwhich in turn creates a new stack for the application middleware using seedMiddleware() sets itself (the application) as the kernel.\nFor the application stack is not that much of a problem since it's done once per request.\nBut I believe it would be better not to create a middleware stack (the process is the same as for the application) for every route if no route middleware are used, i.e. a middleware stack with only the kernel.\nThis would benefit cases in which the numer of routes is significant.\nAnyway the common design (and the consequential use of a common trait) is very clean and simple and (node.js-like) elegant.\n.  Hello @lalop ,\nyes that's right. As for the application, the stack will be created only for the matching route when the run method is called or whenever a middleware is added tot he route. Maybe i misunderstood your comment. What i meant is that seedMiddleware is still called by the app (and by the matching route), but not invoked directly. It's indeed \"lazily\" invoked. So I believe there is no need to call it in the route constructor and it would be better to let only the matching route or routes having middlewares build their own stacks when needed (within the run() method or the add() method which calls the aliased method addMiddleware == trait MiddlewareAware::add, which in turn calls its own method seedMiddleware)\nkind regards\n. @lalop \nI believe we basically agree. :-)\nAt least we agree on the fact that seedMiddlewareStack() shouldn't be called directly in the route constructor. If we avoid that, we would have just 2 middleware stacks in most of the cases. \n1 belonging to the application, 1 to the matching route. \nWe will have 1 more route stack per subRequest in case of subrequest\nWe will have 1 more rote stack creation for every route that has middlewares\nIf we call it DIRECTLY in the route constructor, we will create a stack for every route, which is not needed.\nIn your comment you said: \"indeed App does'nt call it\".\nWhat i meant is that the App doesn't call it directly, but it still calls it indirectly, as it's invoked inside the MiddlewareAware trait methods callMiddlewareStack(...) and add(...).\nWhen you call add(...)/addMiddleware(...) or run(...) from the app or from a route, you call those 2 trait methods and indirectly you will be also calling seedMiddlewareStack to create the stack.\nkind regards\n. Hi @lalop \ntry this:\nphp\n$app->get('/', function ($req, $res, $args) {\n    echo 'Hello';\n});\n$app->add(function ($req, $res, $next) {\n    $res->write('<p>APP-PRE</p>');\n    if ($next) {\n        $res = $next($req, $res);\n    }\n    $res->write('<p>APP-POST</p>');\n    return $res;\n});\nand then this:\nphp\n$app->get('/', function ($req, $res, $args) {\n    return $res->write(\"<p>HELLO</p>\");\n});\n$app->add(function ($req, $res, $next) {\n    $res->write('<p>APP-PRE</p>');\n    if ($next) {\n        $res = $next($req, $res);\n    }\n    $res->write('<p>APP-POST</p>');\n});\nthe second example will catch an exception,\nthe first will result in an unhandled error.\nThe application and the route handler use the MiddlewareAware trait and they are added directly into the stack without a callable wrapper.\nI believe they were not wrapped because they don't really need to acces the $next layer, as they are the last (inner) layer in their own stack. But they are supposed to return a ResponseInterface anyway.\n. @lalop \nYes @akrabat  PR forces \"the\" route to be a \"good\" kernel.\nAs you stated, formally even the kernel should be restricted (and checked) using the same rules of any other middleware in case someone needs to extend slim router/route classes. The only difference with stack kernels is that there is no next (inner) layer.\nI'll leave the PR open as a mere reference to this formali(sm|ty) for the repo managers. \n. Hello @akrabat ,\nI updated the 4 failing tests, i had to extract the $callable by name from the closure \"use ()\" parts as there is no other way (as far as i know) using reflection. \nI rename $stack to $stackable (i could have used $mwAware as well) in the MiddlewareAwareTest as it is less confusing and more precise.\nI also renamed the RouteTest and AppTest methods replacing \"Is\" with \"Invokes\" as app, route and middleware callables are now all wrapped inside middleware closures (the ones which are truly added to the stack) .\n(...sorry for the many commits..with renaming mistakes, i did it online as i had my patch repo is cloned in other pc and it's kind of late here now)\nbest regards ...and good night \n. Hello @akrabat ,\nat the time i added the tests all was working fine. I'll have to check for what was changed afterwards.\n. @geggleto \nI believe it returns an array only when an array subject is provided as argument, the search and replace being computed on every element in that case, but if i am missing a case, please give me an example.\nkind regards\n. oh, you are right ...we work on php 5.4+ now.... :-)\n. No, wait. couldn't it be useful for benchmarking a mocked request?\n. Hello @JoeBengalen,\nI haven't had time to read all your pr, the purpose being interesting. My eyes just hovered on the \n\"There are several methods in the Request class that are not in the psr-7 spec....\" comment.\nJust to share my thoughts\nAt first I had the same feeling about it, but i believe that interoperability means that you can pass a request/response to an external middleware and it will utilize only interface methods to use instances or to return their \"modified\" clones. Any clone will be of the same original (internal) class so any framework method can still be used on the clone. Interoperable components will use the common interface, they will not change the nature of the response/request objects. A component intended to work as a middleware should never use new to create a response of a different class implementing the psr-7 interface, but only use the interface.\nProblems will arise if we try to use a framework application as a middleware. In that case even internally it would need to use only contract methods.\nBut i believe that Slim/App is meant to start the process by itself since it creates the initial request/response instances in the run() method via factories stored in the container.\nPlease share more details on this subject and your point of view.\nkind regards\n. @JoeBengalen \nI - very respectfully - don't agree with that either. \nA slim application is the kernel of its own middleware stack. It instantiates the initial request/response using slim internal implementations. \nphp\n$request = $this['request'];\n$response = $this['response'];\n//...\n$response = $this->callMiddlewareStack($request, $response);\nSo even the application can safely use extra methods. I've seen many diagrams of middleware stacks in which the request-response process initially touch the external layer. In slim it's not the outer layer responsible of request/response instantiation. Nor are those objects instantiated elsewhere. They are first created by the application itself and then passed as arguments to the top-outer middleware. The application could receive request/responses instances (or clones of them) it created itself, so it can safely assume they are implementation of slim request response classes.\nEven so, i also would prefer sticking to interface methods inside the framework implementation, just pointing out is not a must.\nProblems begin if you replace the req/res factories ($['request'], $['response']) to return different implementations of the message interfaces. In that case neither the slim application nor user code will be able to use any extra slim methods. \nThank You for sharing!!! \nPlease reply if you see something wrong or missing in my argumentation.\nkind regards.\n. @lalop \nBut you can't actually (more like practically) use any implemenation in a slim app. I believe the choice was made so that slim could use any 3rdy party psr-7 compliant middleware. The slim app creates the 1st req and res feeded into the stack. 3rd party components use the interface, but return either the same instances or clones of them.\nIf we want to start the stack allowing any other req/res implementation, we could never be safe using slim extra request/response methods as they would not probably be available/implemented.\n. @akrabat \nYes, it's using factories stored in the pimple container (which the app itself  extends) to build those instances. And you can extend (replace) services inside the container exactly like in your example.  By \"you can't\" i meant \"you should not....,  otherwise...\".  If we do that, none of the extra methods makes any sense because we are never certain that it will be available.\nI believe though that the natural process of a slim application is to start from internal classes that implement the standard interfaces and utilize external middlewares. If we want complete portability we need to stick to a strict interface implementation + any number of only protected/private support methods.\nas a side note:\nThere are a number of methods developers commonly use. For instance single parameter getters\nlike getQueryParam('name', $defaultValue) etc etc. fig-group is trying to keep a minimal interface but while we have single getter for request attributes, single getters for server, cookies, query.... are not included. And it feels kind of natural to have them implemented.\nkind regards\n.  @lalop \nyes. If you try @akrabat example, extra methods of the Request instances and clones, will not be present because Matthew's implementation doesn't include them. Any middleware is meant to return the same instance or a new instance \"altered\" by with/without methods. So the nature of the object is not changed (with/without methods clone the original object) only its value, more precisely, being value objects we return clones representing different values not the same instances altered. \nOne way to solve this could be implementing a factory method that takes an input request/response implementation and return an internal implementation instance with the same values, something like:\n$req = Request::fromRequest(\\Psr\\Http\\ServerRequestInterface $req);\nthis would need to be called inside the invoke method of the slim app, so that the route middleware stack receive a request (and response) that are instances of slim internal classes.\nbest regards\nadded comment\nAnother way would be, as suggested to me by Matthew elsewhere (sorry cannot find the reference right now), to have a simple and strict implementations of the interfaces and having internal classes (for the route middleware stack) that implement the decorator/adapter pattern on the stricter ones. the result would be the same: having more utility methods usable inside route handlers.\n. Hi @mnapoli \nsorry I missed your comment (I just got back to this project after a long \"eu-cookie-law websites fixing week\")\n. Hello @akrabat,\nIt's really not about the simplicity of it, but more about the correctness of doing it (and also redoing it) in a container.\nLet's take for instance the private property $defaultSettings. This is about cookie, http message settings or more generally application level configuration/settings. In my opinion a container should only provide new objects or shared services. The actual Container class in slim seems to me more like a not so slim slice cut off from the application cake.\nA different container should only need to implement the get() interop interface method to fit in and replace the current one.\nA class name such as \\Slim\\AppServices composing a simpler replaceable container would seem more sound to me for what it does now.\nThese are just my first impressions, i will re-read and rethink about it next week, maybe after reading other opinions. \nOf course, if it's already been decided for this implementation, you can close the discussion instantly.\nkind regards\nmaks\n. Hello @akrabat \nAlong with You and - I believe - many other developers, I also think that slim should stay as slim as possible (we already have zf2 if we want greater SOLID compliance and more granularity). \nIf we want it slim, then we cannot have too much separation of concerns. \nFor the same reason if I had to choose between having a forced opinionated container and the ability to switch to another one with the condition of having to rebuld all the basic application services i would prefer the first and older way, even if i hate getting \"things\" via array access.\nA better solution to me would be having an internal Slim Container (Service Locator) interface with an added set()/factory() method so that a container  would be a simple has/get/set/factory custom implementation or a 3d-party container bridge. All the basic (lazy) services creation could be moved back to the application constructor and the default slim container implementation could be a simple Pimple\\Container bridge or decorator.\nShortly: switching to a different container should involve only the way or the actor in service creation and retrieval, the container should not be responsible of initializing the application.\nAs of now implementing a different container basically means rewriting the whole application bootstraping process and that also allows a dangerous flexibility. As an example, let's say (we discussed something related in another issue/pr) I implement a container that create an instance of phly/zend-diactoros server request. All the slim request's extra public methods would not be available anymore, and a change of container may result in runtime errors for the same unchanged application code. To have all those extra methods always available, a slim app must always start with its server request implementation and only allow external middlewares returning modified clones of it. The simplest/slimmest way to do that is having the application be the factory of the request instance like it was done before.\nAnother issue: suppose we have parts of the application that use the Pimple container factory() method to store a factory service. If we change the container, the new one may (probably) not have the factory method or may have it with a different signature. Well, since App::getContainer() simply returns a ContainerInterface we shouldn't even think about using the factory() method, so must we register all our factories inside the Container constructor? Simply put: how do i safely add factories to the generic service locator?\nIf we want to allow using different containers we should define a clear slim internal container (or more precisely a service-locator) interface.\nAfter all what popped in my mind I feel that the current implementation of DIC independence adds more complexity and at the same time is taking away useful features that we assumed available when we were sure we were using Pimple (btw, i am not a Pimple fanatic, I just use it in some projects).\nI didn't follow the whole #1179 discussion or other related discussions. If this argument was already largely discussed and \"voted\", feel free to close this. I surely don't want to cause any delay for the milestone release. These are just doubts that came to my mind.\nkind regards \n. @akrabat I was wondering the same thing :-)\n. I'd say that leaving it should do no harm, since the extra parameter should be just discarded by the endpoint request handler. I stumbled upon some reported issues like this one but related to a client request.\nOn the other side including it could be misleading since one could think that he/she can control the charset of the response.\nI was just wondering if the charset parameter was added by design in slim for a specific reason (well, many other frameworks include it as well).\nkind regards\n. Hello @geggleto,\nthe basePath/baseUrl can be set with an early middleware. \nThis also makes the entire application more portable and \"mountable\" inside existing site/applications path.\nThere are 2 ways to implement a basePath middleware:\n1. path/url extrapolation from environment\n2. path/url manually set\nI used to prefer option 1. Lately I use option 2 more often...less overhead. Moving an application is a developer's task, so path/url can be re-set \"manually\" at the same time. Option 1 is still required on some edge cases lile for instance when the same site is hosted on different domains/vhosts with different base paths / urls.\nkind regards\nmaks. Hello @geggleto, @codeguy \nIt would be nice to have a View template renderer interface and a different signature for the render method:\nphp\npublic function render($template, array $data = []);\nI believe that a template renderer should not be aware of nor interact with Psr\\Http\\Message\\ResponseInterface.\nThe response can be written to directly inside middleware using the response interface methods. Something like this:\n```php\nreturn $response->write(\n    $this->view->render('/my/template/file.phtml', [\n        //..key=>value pairs here\n    ]);\n);\n//or\nreturn new HtmlResponse($this->view->render('/my/template/file.phtml', [/.../]);\n```\nkind regards. ",
    "cwhiteley": "http://example.com/res/categories;name=foo/objects;name=green/?page=1\nThis is an example - after the ? are the request params before the ? And after the ; are the matrix parameters..\n. The example above came from here: \nhttp://stackoverflow.com/questions/2048121/url-matrix-parameters-vs-request-parameters\n. In the last paragraph of section 3.3, \nhttp://tools.ietf.org/html/rfc3986#section-3.3\nThe URI specification suggests employing the semicolon ;, equals = and comma , characters for this task. Therefore:\n. ",
    "jamesmoss": "+1\nMaking services act like factories by default is much nicer than having to use share() everywhere.\n. I've wondered about this too as I'm a big fan of HTTP Foundation. Its a pretty comprehensive component but I think it's too heavy for Slim and kinda goes against the projects goal. \n. ",
    "andrewmman": "guys, why would you need to move the Route to the container? Route it's not really a service class and by calling $this['route'] you're already instantiating the route, so it's basically the same.\nThe Route $pattern and $callable constructor parameters shouldn't be optional parameters.\n. @silentworks , you could declare a factory function in Application:\n```\n$this['route_factory'] = function($app) {\n    return function($pattern, $callable) use ($app) {\n        $case = $app['settings']['routes.case_sensitive'];\n    return new Slim\\Route($pattern, $callable, $case);\n};\n\n};\n```\nand in mapRoute do:\n```\n    protected function mapRoute($args)\n    {\n        $pattern = array_shift($args);\n        $callable = array_pop($args);\n        $route = $this'route_factory';\n        $this['router']->map($route);\n        if (count($args) > 0) {\n            $route->setMiddleware($args);\n        }\n    return $route;\n}\n\n```\n. @silentworks mind checking this branch?\nBasically if the callable is a string it creates a callback that will resolve an instance from a defined service in the container or a controller class when the route is dispatched, but it does not support automatic resolution of dependencies for controllers.\n. it just instantiates a controller class, one without dependencies, so didn't see the need to. The Closure that resolves the service or controller is called once per request.\nEvery route that is defined using a string as the callable, the string will be converted to that function. Once the route is dispatched the instance will be resolved.\n. @codeguy, @silentworks would you guys prefer to have the RouteFactory as a dependency of Router?\nApp::mapRoute would then be:\n```\n    protected function mapRoute($args)\n    {\n        $pattern = array_shift($args);\n        $callable = array_pop($args);\n    return $this['router']->makeRoute($pattern, $callable, $args);\n}\n\n```\nand Router::makeRoute:\n```\n    public function makeRoute($pattern, $callable, $middlewares = array())\n    {\n        $route = $this->factory->make($pattern, $callable);\n    $this->map($route);\n\n    if (count($middlewares) > 0) {\n        $route->setMiddleware($middlewares);\n    }\n\n    return $route;\n}\n\n```\n. @designermonkey mainly because it has the App as a dependency.\n@silentworks I made a change, so the factory just calls the Route resolver.\nIf you want to use a custom route, you just change an option and the resolver closure in the container.\n. An alternative could be to use the 'slim.before.dispatch' hook to modify the matched routes callable to the controller instance, but one would need the route to be passed as an argument to the hook.\n. Made a new branch to show the alternative.\n. @codeguy, @silentworks I believe the real issue is allowing the developer to declare how they instantiate the controller, some people want to pass the App or be able to resolve their controllers.\nThe merged P.R that resolves the callable still presents this issue, how a controller is instantiated shouldn't be the reason to modify the Route class.\nI think it would be best if Slim presented a flexible solution, so controllers could be developed in a separate package, declaring an interface, allowing middlewares, etc. It doesn't need to be in the core, a lot of people use Slim without them.\n. First of all, @silentworks sorry for hijacking the P.R. I made the previous comment taking into consideration some P.R and open issues related to controllers. Maybe it's best to open a new issue to discuss it.\n@lalop I mentioned it just as an example of what could be done.\n. ",
    "ramirovjr": "I don't remember if Http Foundation has interfaces for Request and Response.\nIf not, they should be proposed.\n. I think that these methods is what matters most (correct me if I'm wrong):\nRequest\n- References:\n  - http://blog.servergrove.com/2013/09/23/symfony2-components-overview-httpfoundation/\n  - https://github.com/symfony/HttpFoundation/blob/master/Request.php\n- Methods and Properties\n  - create(string $uri, string $method, array $params)\n  - getClientIp()\n  - getMethod()\n  - getPathInfo()\n  - getBasePath()\n  - getRequestUri()\n  - getHttpHost()\n  - getContentType()\n  - getLocale()\n  - getContent() (content body)\n- Questions\n  - Are we going to enable fetching request parameters from the request object (ex.: $request->query->get()) or an outside method?\nResponse\n- References:\n  - http://blog.servergrove.com/2013/09/23/symfony2-components-overview-httpfoundation/\n  - https://github.com/symfony/HttpFoundation/blob/master/Response.php\n- Methods and Properties\n- $headers\n  - set(string $key, string $value)\n  - get(string $key)\n- send()\n- setContent(mixed $content)\n- setCharset(string $charset)\n- setStatusCode(int $status)\nBeside those mentioned, we cannot forget about the HttpKernelInterface, which would be nice to use, as others are also using - Drupal, Laravel, ... - and would enable component switching.\n. I think that this question that I'm going to make, should be moved to a next topic, but let's see:\nLike other components and frameworks, Silex - which is also a microframework - has the StackBuilder, which can be used to enable middlewares (like plugins). What about this same idea in Slim? If we can get to a similar approach, these components will be available for both frameworks.\nAnd please, I'm not saying that this should be implemented - it's just an idea to avoid duplicating components.\n. Ok, no problem.\nIf there's anything that I can help, please don't hesitate.\n. In the issue that I created in the Symfony project, Fabien said it make no sense to create an interface for data objects.\nSo, with this in mind, I think that using the HttpKernelInterface will be hard, because of the Request dependency.\n. I agree.\n. I agree with you.\nCookies and Headers can be used through a method calling a Bag (Symfony way), that can be reused - as abstract - to store those values before flushing them.\nWhat do you think?\n. ",
    "Nilithus": "Perhaps it might be worth looking into Aura's web component to use as a base for request and response's. It seems like a \"slimmer\" (excuse the pun) implementation than the Symfony HTTP Foundation. It doesn't mean it'd be better but I saw everyone talking about Symfony HTTP Foundation and no one seemed to mention Aura's web component so I thought I'd put it out there.\nThanks for Slim by the way @codeguy have used it at work for a number of projects and have loved it every time.\n. ",
    "mackenza": "pretty sure this will require more information than provided to be taken seriously as a bug\n. what are you looking to var_dump in the request->params()?  i.e. what are you trying to get out of it?  For a json request I would expect to get this via getBody() as shown, but if it's not the body you are trying to get, it would help to know what your expected results were.\n. perhaps some further feedback into why Pimple is not a good choice would be in order? You say \"able to set a container by configuration\". Is that the extent of it or are there other reasons? I think @codeguy would probably appreciate some more detail here to distinguish this request from that of opinion or personal bias.\n. ",
    "nicknill": "Steps to reproduse:\n1. Add content types middleware\n2. Send request to slim, for example, in JSON format with setting content type\n3. Look at var_dump($app->request->params()) - it's empty.\nHere is a patch i make for a workaround.\n```\nclass ContentTypes extends \\Slim\\Middleware\\ContentTypes {\n   public function call() {\n    $mediaType = $this->app->request()->getMediaType();\n    if ($mediaType) {\n        $env = $this->app->environment();\n        $env['slim.input_original'] = $env['slim.input'];\n        $env['slim.input'] = $this->parse($env['slim.input'], $mediaType);\n        if(is_array($env['slim.input']))\n            $env['slim.request.form_hash'] = $env['slim.input'];\n    }\n    $this->next->call();\n}\n\n} \n```\n. I see it, but why it is not request params?\n. The main question is why json, xml, etc, is not request parameters? or in other words not in request->params()\n. It's better to not deprecate function post(), but give parsed request body by ContentType.\nAs for me, i think getBody() should always give unparsed body, and params() or post() give parsed params from body\n. ",
    "m1ga": "Sorry for bringing this back up again, but $app->request->params() is still empty in middleware. I found this one: http://help.slimframework.com/discussions/problems/7766-get-postget-parameters-in-middleware?unresolve=true but it would be nice just to use params() to get both GET or POST\n. ",
    "pwhelan": "All the tests passed but I'm still wondering what functionality this change will affect, such as named routes, etc...\n. The algorithm I used for groups in itself could stand to be improved. I tried to rock the boat as little as possible there.\nOne of the bigger problems with fully resolving groups on demand will be inadvertently executing code that is meant solely for that group. This was actually the behaviour which I had expected when adding a group which I sought to support, ie:\n```\n$app->group('/rest', function() use ($app) {\n$app->view(new \\JsonApiView);\n$app->add(new \\JsonApiMiddleware());\n\n$app->get('/people', function() use ($app) {\n    $app->render(200, [ /* a bunch of people .... */ ]);\n});\n\n});\n$app->group('/web', function() use ($app) {\n$app->view(new Slim\\Views\\Twig);\n\n$app->get('/', function() use ($app) {\n    $app->render('template.twig', [ /* some data... */ ]);\n});\n\n});\n```\nUpon executing a group to fully resolve it's routes and get their names it would also unintentionally set the view. This is what happens currently. \nThe complicated solution to this is to use a separate instance of $app to execute the groups. This would not avoid all possible side effects but it would avoid most side effects to Slim itself. I know how to set $this for a closure and how to pass arguments but I have not seen how to manipulate it's scope set with the use keyword before executing or invoking a Closure.\nAdding another group for Router groups to me seems excessive. Waiting for a cache to be filled to use named routes on groups also seems dysfunctional to me (using a cache is a good idea but should be optional).\n. Another solution would be to add a function we can call to check if the group is being routed or not. That way initialization can be executed conditionally, ie:\n``` php\n    $app->group('/rest', function() use ($app) {\n    $app->routed(function() {\n            $app->view(new \\JsonApiView);\n            $app->add(new \\JsonApiMiddleware());\n    });\n});\n\n```\nI'm not married to the actual syntax or even the use of the callback. Any thoughts?\n. ",
    "smmoosavi": "@gmanricks $app->urlFor('foo:bar'); will be better than $app->urlFor('foo_bar');\n. ",
    "qyanu": "PS: the two pull requests where https://github.com/codeguy/Slim/pull/703 and https://github.com/codeguy/Slim/pull/715\n. @codeguy   Hi\n- I have merged the lost release-2.4.1 branch (including all merge-commits) into release-2.4.3.\n- I have closely inspected git diff codeguy/release-2.4.3 codeguy/release-2.4.3 -- and everything allright.\n- I have executed all phpunit tests and saw them all succeed\n- in addition I feel bad for not adding a phpunit test on the occasion of the slim.after bug.\nIn conclusion: I recommend you just accept this pull request into codeguy/release-2.4.3  :-)\nregards,\nMax\nPS:\n- I transmitted the slim.after bugfix onto the develop branch, see https://github.com/codeguy/Slim/pull/787\n- I'm not sure about your policy on how to transfer fixes from release-x.y.z to develop. is it \"foreach($commits as $commit) { cherry_pick($commit); }\"?\n. hey @marcioAlmada   :-)\nmaybe you can also ammend (if possible on github) https://github.com/codeguy/Slim/pull/787 in order to copy your fix onto the develop branch?\nregards,\nMax\n. ping?\n. ",
    "ppvolto": "Thanks for the quick response,\n@designermonkey thanks for the information i hope its possible to use it in the future\nand @mvader i checkout for the pull request the days... \nThanks both of you\n\nI think i can close it with this...\n. \n",
    "BafS": "I cannot find anything related in Slim 3, I don't think that a naming group is available. Can you please confirm ?\nIt could really help to keep a good structure like that:\nphp\n$app->group('/users', function () use ($app) {\n    $app->get('', ...)->name('index');\n    $app->get('/:id', ...)->name('show');\n    $app->post('/:id', ...)->name('create');\n    ...\n})->name('users');\nand to be able to access with users.show for example.. ",
    "fearfullymade": "Another option is to set the content-length in a middleware class:\n``` php\nclass ContentLengthMiddleware extends \\Slim\\Middleware\n{\n  public function call()\n  {\n    $app = $this->app;\n$this->next->call();\n\n$res = $app->response;\n\nif ($res->getStatus() == \"200\" && !$res->headers->has('Content-Length') && $res->getLength() > 0) {\n  $res->headers->set('Content-Length', $res->getLength());\n}\n\n}\n}\n```\n. ",
    "JoshWillik": "Fair enough, I suppose I'm still stuck in the express way of thinking.\n. That makes sense when explained. \nIs it worth a note in the docs maybe?\nThe docs do seem worded that way on investigation, but something more explicit perhaps?\n. Same issue. You can try it yourself at:\nhttp://willik.ca/api/pages/80e295e1\nhttp://willik.ca/api/pages/80e295e1?pageTemplate\nhttp://willik.ca/api/pages/80e295e1?pageTemplate=foo\n. If it makes a difference, localhost is running PHP 5.5.6, and the remote server is running 5.5.14\n. I can't manage to get the the nginx.conf in the Slim docs to work for me. I always end up either downloading index.php as a text file or getting 403'd.\nThe (mostly) working config that I have now, is http://pastebin.com/7aSg2F2L\nThe only issue is that it seems to add the query string on to the end of the request path.\nNot the proper place to ask for configuration help, I realize, but if you see any obvious issues with the config, please point them out. :)\n. You're a life saver.\nI had try_files $uri $uri/ /index.php; instead of try_files $uri $uri/ /index.php?$query_string;\n. ",
    "tboronczyk": "@lrlopez permission granted :)\n. ",
    "alanpich": "That sounds like the right option, only creating it if its needed. Otherwise as it stands any third party library would need to be bridged before it would be compatible.\nCan you define interfaces insideif statements?\n. where does 3.0 (develop) stand on that?\n. So have swapped around the negatives in the variable names so that:\n- Behaviour remains the same as before as default (as in passable routes)\n- Settings routes.passable in configuration to false will enable fast matching (returning the first matched route only, disabling Pass-ing\n. It probably won't cause any issues for newer projects. I can see a small possibility of doing some crazy stuff with fallback urls, but its definitely an edge case.\nAs an example, this would work with passable=TRUE:\n- /foo/:id    ID not recognised, so throw a PassException\n- /foo/:unknownId    Falls through to here, where the invalid ID is logged or something...\n... but wouldn't work with passable=FALSE, so the /foo/:id callable would need to handle both known and unknown foo IDs ...\nI don't think using Exceptions to switch between Routes is the right approach. It works as a nice way to bail out,  but it smells a bit iffy to me...\n. Personally I think the use of Exceptions as a part of the planned process flow is a grubby misuse of the construct. Which is a shame, 'cos I can see the ability to bail out of a route as something that could be useful at some point in the future (I also keep plastic bags and elastic bands in a drawer just in case...)\nMy vote would be to switch FastRouting on by default to give the speed boost out of the box, but leave the setting in for people to enable who still really want to pass(), as its more of an advanced feature anyway\n. This is a PR for the develop branch.\nThe entire API is different (\\Slim\\App vs \\Slim\\Slim), so its already a breaking change and a major bump.\nAlso, I'm not advocating the complete removal of the pass() method, but changing the underlying implementation to not (mis)use Exceptions\n. Have created a new PR (#958) for exception removal discussions\n. Yeah i'll try and carve out some time tomorrow and strip out all the redundant code. I'd say leave this issue open as a reference until I get the PR submitted.\nGlad to see some activity on here again :)\n. OK so after pulling down the latest develop commits to update my branch locally it appears that the unit tests are borked and full of errors... There doesn't seem much point submitting a PR to action this discussion until it can be validated properly.\nAm i missing a setup step, or have the unit tests just been neglected recently?\n. Submit a PR without tests?? :scream: \nAnd also, aren't they the same thing?\n. This change also applies to Router::getMatchedRoutes so would need to run RouterTest also. Haven't had a chance to sync my branch so will try to find some time this week to check out if the tests can run. Do we know why the tests are borked? I've a few other things I want to try but am loath to make any core changes unless I can test fully as I go.\nAlso @silentworks where u been bro?\n. I'm going to try some experiments to benchmark it, but I'm thinking there might be a combination of nested routers & fastroute-style pattern matching that would both speed up matching and also allow for re-usable routing modules (like Express4 on nodejs)\nIf each nested router combined its child routes into a single regex in that way, the total number of regexs run would be reduced, without having to compile a behemoth pattern to encompass the entire site.\n. Can the middleware be split out into separate repos? If i only want the Session handler middleware, i don't want to have to pull in the 10 other middlewares along with it that i'm not going to use.\nMake slim/middleware a collection package of the other repos\n. @harikt nano seconds * millions of requests is suddenly quite a significant number.\nI'm still working on how the route mounting will fit in with the existing structure, I'm a bit worried it will change a large portion of the API so trying to be sensible about it. This is a rough synonpsis of my thinking:\nSlim Submodules (Router Mounting)\nIn Slim v3, 'Route Groups' have been replaced with a module structure that allows for re-usable, portable sub-applications to be mounted onto an application. The main conceptual change is the promotion of the Router to the primary interaction object within the library, and having Slim\\App extend from it directly so as to inherit its behaviours.\nKey conceptual changes\nThe 'Application' ceases to be the central focus of the API, merely being a subclass of the Router (with a few useful additional methods). Once the Application is understood to be the Primary Router, then the relationship between nested routes & middleware becomes much more clear.\nExample pseudo-structure\n```\nApplication (Primary Router)\n- [middleware] SessionHandler\n- [middleware] CORSHeaderMiddleware\n- [route] /foo\n- [route] /foo/:id\n- [mount] /auth  Authentication Module (Child Router)\n     -  [middleware] SomeOtherMiddleware\n     -  [route] /login\n```\nMiddleware stacks & inheritance\nBecause of the nested nature of Routers, and the multiple points at which middleware can be attached to the application the order in which they get executed can get confusing. The way to think of the ordering is to walk down the router tree from the top (Primary/Application router), executing each level's middleware as you go. In the example above, the order of execution for the route /auth/login would be:\n- SessionHandlerMiddleware\n- CORSHeaderInjectorMiddleware\n- SomeOtherMiddleware\n- any other middleware attached directly to the route\nExample use\n``` php\n<?php /*\nNOTE: For the purposes of this example, \\Slim\\App now extends \\Slim\\Router\n/\nuse Slim\\Route;\nuse Slim\\Router;\n/* Top-level route definition, same as existing API /\n$app = new Slim\\App();\n// Add some application-wide middleware\n$app->uses( new CORSHeaderInjectionMiddleware )\n// Define our top-level routes as normal\n$app->get('/foo',function(Request $req, Response $res){\n   // ...\n});\n/*\n * Create a re-usable module to be 'mounted' into a Slim app\n /\n// Create the router for the module\n$myModuleRouter = new Router();\n// Add in some middleware for all routes in this module\n$myModuleRouter\n    ->uses( $myAuthenticationMiddleware )\n    ->uses( $someOtherMiddleware )\n// Define some routes on the module\n$myModuleRouter->get('/baz',function(Request $req, Response $res){\n    // ... do something\n})\n/*\n * Now mount the module into your app's router at the \n * specified URI path. In this example, the module is\n * mounted at /bar, so the module's /baz route will\n * actually match /bar/baz\n/\n$app->mount('/bar',$myModuleRouter);\n// Run the application...\n$app->run();\n```\n. Well crypt would presumably be dropped if the Session handler was extracted to a separate middleware, but I get your point. Would require a massive shift in structure...\n. Cookies as optional middleware? Don't need them for all/every scenario.\n. Exactly, let the developer include as much optional extras as they want, they shouldn't have packages thrust upon them that they might not need\n. ",
    "HelloChrisBrown": "Sorry. Realized I have the wrong branch\n. ",
    "netdust": "Hey\nI allready tried this. it has exatly the same result.\nMaybe I need to add that the app works fine, so\nhttp://localhost/application/page entered in the browser will launch the\nslim route.\nit's just internally, when I try to redirect using ->redirect('/otherpage')\nthat it fails and redirects to http://localhost/otherpage.\nIf I redirect like this ->redirect('otherpage'), it redirects fine at\nfirst, but a second redirect adds to the path so it gives something like\nstart page : /\nredirect('page'): /page\nredirect('otherpage'): /otherpage\nredirect('otherpage/sub'): /otherpage/otherpage/sub\nonce I add a / before to route it just goes to localhost\nStefan\n2014-03-27 16:59 GMT+01:00 John Porter notifications@github.com:\n\nTry setting the RewriteBase directive in your .htaccess.\nRewriteEngine On\nRewriteBase /application\n...\n\nReply to this email directly or view it on GitHubhttps://github.com/codeguy/Slim/issues/800#issuecomment-38822958\n.\n\n\nNetdust[i]std.\nStefan Vandermeulen\nyou can follow me on twitter https://twitter.com/#!/netdust or\ngoogle+ https://plus.google.com/u/0/116430909251309245804/postsgsm:\n+32(0)475 238 704\n.   'HTTP_HOST' => string 'localhost' (length=9)\n'SERVER_NAME' => string 'localhost' (length=9)\n  'SERVER_ADDR' => string '127.0.0.1' (length=9)\n  'SERVER_PORT' => string '80' (length=2)\n  'REMOTE_ADDR' => string '127.0.0.1' (length=9)\n  'DOCUMENT_ROOT' => string 'C:/Users/stefan/Projects' (length=24)\n'CONTEXT_DOCUMENT_ROOT' => string 'C:/Users/stefan/Projects' (length=24)\n  'SCRIPT_FILENAME' => string\n'C:/Users/stefan/Projects/Personal/Kraken/index.php' (length=58)\n'REQUEST_URI' => string '/Personal/Kraken/' (length=25)\n  'SCRIPT_NAME' => string '/Personal/Kraken/index.php' (length=34)\n  'PHP_SELF' => string '/Personal/Kraken/index.php' (length=34)\nthis is a var_dump from $_SERVER\nmy directory structure is as follows:\nAPP ( http://localhost/personal/kraken/ http://localhost/personal/kraken/ )\n- - api ( contains conf etc... )\n- - lib ( contains slim, twig, paris, ... )\n- - www ( contains css, tpl, img )\n-   htaccess\n-   index.php*\nstefan\n2014-03-27 18:07 GMT+01:00 John Porter notifications@github.com:\n\nAh, well, that depends on where Slim is installed, and what the document\nroot is.\nIf the docroot is localhost then yes, it is working fine, but if it's\nlocalhost/application then there is an issue.\n\nReply to this email directly or view it on GitHubhttps://github.com/codeguy/Slim/issues/800#issuecomment-38831918\n.\n\n\nNetdust[i]std.\nStefan Vandermeulen\nyou can follow me on twitter https://twitter.com/#!/netdust or\ngoogle+ https://plus.google.com/u/0/116430909251309245804/postsgsm:\n+32(0)475 238 704\n. ah yes, offcourse. mmm. i assumed slim worked from where it's files are. [?]\nthx for your time\n2014-03-27 20:14 GMT+01:00 John Porter notifications@github.com:\n\nSo @mnlg https://github.com/mnlg was correct as your document root is\nnot the root of your project.\n\nReply to this email directly or view it on GitHubhttps://github.com/codeguy/Slim/issues/800#issuecomment-38848153\n.\n\n\nNetdust[i]std.\nStefan Vandermeulen\nyou can follow me on twitter https://twitter.com/#!/netdust or\ngoogle+ https://plus.google.com/u/0/116430909251309245804/postsgsm:\n+32(0)475 238 704\n. ",
    "woolfg": "I encountered the same problem when using apache aliases. I really bad workaround would be replacing the physical path by the virtual path. It would be really nice if one could specify a base path which is used by slim to extract the routes.\n$_SERVER['SCRIPT_NAME'] = str_replace(\"/www/blablabl/myapp/app/public/\",\"/myapp/\",$_SERVER['SCRIPT_NAME']);\n. ",
    "tbela99": "I just used this and it worked\n$env['PATH_INFO'] = '/' . ltrim(preg_replace('#\\?.*#', '', $_SERVER['REQUEST_URI']), '/');\n. ",
    "asppsa": "The new Guzzle requires PHP 5.4.  Is this break with 5.3 compatibility intentional?\n. ",
    "mondalaci": "Given that this issue doesn't seem to be answered quickly let me copy-paste the relevant errors from my notes:\n- \"standardized interface to interactive with the HTTP request headers\" - The word \"interactive\" should be replaced with \"interact\".\n- \"The response object\u2019s finalize() method returns a numeric array of [status, header, body].\" - This array doesn't seem to contain all numeric values.\n- The comment of the \"$res->isInformational();\" call is \"//Is this an informational response?\" which fails to explain the purpose of this method.\n- There's a \"Rending Templates\" link which is broken.\n. ",
    "rgsone": "Simply remove the parenthesis for the same feature without Slim calls that route twice.\n$app->get(\"/av/\", '\\Controllers\\AdminController:activeVideos')->name(\"name_it\");\n}\n. ",
    "svemir": "Thanks! Travis seems to fail due to unrelated issues right now. I pulled this locally and all the tests pass.\n. ",
    "m90": "Oh, just found out this is an exact duplicate of #768 (minus the tests....). Closing this therefore.\n. ",
    "connerbw": "Hi, I'm coming in from Issue #977 \nThe literature I have read hints that passing the entire Pimple class into your constructor is an anti-pattern. I am talking about the example in Container Resolver posted on May 5, 2014\nprotected $app;\n    public function __construct(\\Pimple $app)\n    {\n        $this->app = $app;\n    }\nSome sources:: \n- https://github.com/silexphp/Pimple/issues/71 \"Never inject the container.\"\n- http://www.mendoweb.be/blog/dependency-injection-service-locator-factory-constructor-injection-dic/\n- http://www.devtrends.co.uk/blog/how-not-to-do-dependency-injection-the-static-or-singleton-container\nSo not sure about that one... It's easy and solves the problem but it's not the best.\nI am into \"Dependency Resolver\" though. That makes sense. +1 for that part of the feature.\nHope this helps.\n. @silentworks Dependency Injection through setters is good enough for me. Either solution is fine. Hope your #822 gets approved. Cheers!\n. Hi @zulrang \nBecause that's not dependency injection, that's a Singleton?\nI'm using Pimple as my \"Service Locator,\" it still does not help. Dependency injection as a feature request, in my case, is specifically for writing testable code. In your example, you are hardcoding  classes in both the constructor and the sayHello method, which goes against the principle of Dependency Injection altogether...\nThanks!\n. Hi @zulrang \nYou are right in that, with a service locator, I can swap objects with Mocks. I already do it with Pimple. It's great.\nIt's more of a pattern issue. My feature request is to do it another way, more standard to the design pattern itself.\nCheers.\n. ",
    "allyraza": "what in particular did you see that cannot be implemented \n. ",
    "cgsmith": "@mattzuba I see that. I think it would be helpful for newbies to Slim to have it here: http://docs.slimframework.com/#Getting-Started\nThere are even people on the forums that follow instructions linearly and are not aware of .htaccess: http://help.slimframework.com/discussions/problems/4781-hello-world-example\n. @silentworks You actually make my point.  Here is the problem with not having it in the getting started section.\n1. New programmers to the framework may not understand this is done through .htaccess\n2. Having it in Route-URL-Rewriting is perfect, but Getting Started should be preferred.\n3. Getting started is the first intro for a user\nIn addition, this doesn't necessarily have to be a .htaccess example.  A simple 'See this .htaccess example in route-URL-rewriting to configure the web server' would be awesome.\nLet me know your thoughts.  I'd submit a PR but am still getting the hang of it ;)\n. Right on! ill submit a pr soon\n. No link is added and this was closed?\n. ",
    "josephdpurcell": "I ran into this same issue. I discovered Josh Lockhart's (@codeguy) comment on the Slim forums.\nThere, he refers to Volker Grabsch's (@vog) comment on PHP manual which explains that PHP only parses the Authorization header for Basic and Digest.\nThe solution suggested there is to have Apache rewrite the header to essentially prefix \"HTTP_\" which will then allow PHP to parse it properly.\nRewriteEngine On\nRewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\nI don't know the backstory on why PHP has such strict regulations on parsing the Authorization header. Hopefully, PHP will at least support OAuth soon as this is a common problem, e.g. the PHP oauth package has reported a related bug.\nI think it would be great if Slim supported this in the mean time by modifying Slim/Environment.php to pull the Authorization header from the request and adding it to the environment. Then, modify Slim/Http/headers.php to add 'AUTHORIZATION' to the special headers.\n. It looks like Mika Tuupola (@tuupola) may have indirectly encountered this issue as well as indirectly noted in PR https://github.com/codeguy/Slim/pull/898 and is using the Apache rewrite rule.\nIt looks like there isn't a really easy solution for this since the only thing you can get from PHP is All The Things!\u2122 (see getallheaders).\n. @tuupola How would you suggest this to work under nginx + php-fpm? Have nginx rewrite the header as well?\n. I did not expect that. getallheaders() is a PHP function (ref). But, it's not available under fastCGI. So, that makes sense.\nOne thing to note is there are security considerations that might suggest this PR should not be merged. I believe the primary consideration is this: should authorization information be put into the environment variables?\nMy personal take is that if your system is compromised because an authorization header was assigned in the environment variables then you have bigger problems at hand. But, perhaps someone with PHP security experience could weigh in. This may be why PHP itself doesn't parse the header.\n. ",
    "craigify": "I'd like to note that with Apache 2.4.7, PHP 5.6.15 with Apache mod_proxy_fcgi PHP-FPM using a ProxyMassMatch directive to send *.php requests over to PHP, setting an environment variable \"HTTP_AUTHENTICATION\" gets mangled by something, and I wind up with $SERVER['REDIRECT_HTTP_AUTHENTICATION'] instead.  I am not sure where the 'REDIRECT' part is coming from, but you might want to also check for this as an edge case.  I haven't figured out why yet, and I've had to add a kludge fix to look for this specifically.\n. ",
    "Procaseycash": "while using this in .htaccess, i got 500 error;\nRewriteEngine On\nRewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]. ",
    "grimgit": "You can allow Apache to forward the Auth header with the directive:\nCGIPassAuth On\nYou can put it in your .htaccess or in the apache configuration\n. ",
    "aronduby": "Guessing that's supposed to be $app->urlFor()? Thanks for pointing that out as I had missed that functionality. The downside with that is now you have to make sure to name anything that you might need to redirect to, so basically I should name everything to be able to future proof it. \nI ended up creating a custom request object to handle this situation which I injected into Slim.\n``` php\n<?php\nclass BasedRedirectResponse extends \\Slim\\Http\\Response{\nprotected $base;\n\npublic function __construct($base){\n    $this->base = $base;\n    parent::__construct();\n}\n\n/**\n * Redirect\n *\n * This method prepares this response to return an HTTP Redirect response\n * to the HTTP client.\n *\n * @param string $url    The redirect destination\n * @param int    $status The redirect HTTP status code\n */\npublic function redirect ($url, $status = 302) {\n    if($url[0] == '/'){\n        $url = $this->base.$url;\n    }\n    parent::redirect($url, $status);\n}\n\n}\n?>\n```\nthen in my index file after creating $app as a Slim instance I do the following to inject the new request object:\nphp\n// override the default Slim\\Http\\Response object\n$app->container->singleton('response', function () {\n    return new BasedRedirectResponse('/f');\n});\nSo now I have a work-around, but still feel the inconsistency system should be addressed.\n. @DavidePastore Sorry, was gone for a while and just now getting caught back up on here. My suggestion would be to make it like @silentworks suggests and the BasedRedirectResponse object in my comment above.\n. ",
    "alexandrubagu": "A custom log writer must implement the following public interface:\n<?php\npublic function write(mixed $message);\nYou must tell the Slim application\u2019s log object to use your custom log writer. You can do so in your application\u2019s settings during instantiation like this:\n<?php\n$app = new \\Slim\\Slim(array(\n    'log.writer' => new MyLogWriter()\n));\n. I think your solution is the best.  I modified the Log.php file to reflect your sulution.\nFor other behavior I think a solution is to define a  CustomLogWriter\n<?php\nclass CustomLogWriter {\n    public function write(mixed $message) {\n}\n}\n$app = new \\Slim\\Slim(array(\n    'log.writer' => new CustomLogWriter()\n));\n. I modified the print_r statement to use true instead of 1(int)\n. ",
    "guice": "Interesting. I didn't even realize there was a PSR specific to logger interfaces.\nI agree with your assessment. The dirty fix doesn't work very well--key issue being when context has data, the interpolate replace blows up with (again) non-string data.\nI would add one more patch in checking \"is_array()\" on $context before assuming array. Php-Console--the logger I was using--and old ZF1 (ZF2? Maybe has changed now), supplied their messages as: ([mixed] $message, [string] $label = null). Supplying a string into $context will cause interpolate call to fail.\n. > services will have to be added to the container, not the app.\nI noticed the app itself puts everything into a container: https://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L79\nThere doesn't actually seem to be a separation of app and container (at least on the surface).\n(oops, did forget the require -- I edited the actual code to remove paths)\n. Awesome. Great news! Thanks @silentworks. :+1: \n. ",
    "bensquire": "This is also causing me some issues as I'm trying to pass an array into my custom LogWriter...\n. This line means I cannot pass an array into my custom log writer or am I missing something?\nhttps://github.com/codeguy/Slim/blob/master/Slim/Log.php#L309\nAlso (and this may be a stupid question) but what do you mean by \"this Slim seems dead\"\nThanks :)\n. @tuupola Thanks for the code example, worked a treat\n. Is there any chance this fix can make it into a tagged release? That would be really useful :)\n. ",
    "hakre": "That shouldn't be an issue, array is converted to string in PHP as \"Array\". Perhaps not what you want or expect, but that's how that code works. I remove my other comments as this Slim seems dead and I don't wanna put any hurdles.\n. @silentworks I'm perfectly OK with that. These PRs were just a stunt and actually I can not take the responsibility which it needs for proper care-taking to play these PRs. That's why I removed them. And that's all. I deleted those in my repos (from local repos I normally keep a backup, so really, feel free to contact me if there are any problems that stuck) and wrote that I'm out (if I were ever in). Github preserves those PRs. Feel free to use the code of my PRs unde the GPL-2.0+ license in case copyright applies.\nFor credits I'm okay with just something as simple as:\nhakre <https://hakre.wordpress.com/>\nif wordpress.com goes down, then be it. you can google my nick anyway ;)\nAnd I'm totally ok if that credit giving is with the source (e.g. just a CREDITS file at the very end if you don't want to put it in file (or if you prefer to put that into file, do it there, it's just I have no favor for this, just suit yourself(es))). The work anyway is getting anything into the code-base, so I don't want you to smaller your credits with all this, just in case someone asks for this and the deletion might look fishy. So please suit yourself(s).\n--signed\n. Nother never made it. This once neither.\n. yeah, and I prefer traction so here goes the delete branch button.\n. this has lived its time.\n. ",
    "nevcos": "+1 for an exception handler applicable to both middleware and controllers\n. ",
    "tiagof": "The reason is simple: there are 2 different implementations for the same \"feature\". The only difference is the scope on which this feature acts on (specific routes or the whole app).\nIn the end I'm more interested in the proposal: http://help.slimframework.com/discussions/suggestions/581-enhancing-route-mdidleware\nthan on the implementation itself.\n. @designermonkey That is a more broader discussion topic. (personally I would prefer to \"restrict\" to the interface since it helps avoiding \"wrong\" usages of the framework).\nDespite any opinion (including mine), at this moment we have 2 types of middleware with different implementations and logic behind them.\n. ",
    "joeyhipolito": "? is for optional trailing slash..\n. ",
    "maldoinc": "I'd also recommend passing true to the print_r function as per it's signature, rather than relying on php's implicit type conversion\n. That is there to help with instantation, the core class is independent of the session superglobal.\n. You are right, that is indeed the correct repo to merge into. I was simply looking for feedback  over here. Will send a PR to the other repo instead.\nCheers\n. ",
    "andrewmunsell": "Well if the environment is the Slim-accepted pattern for storing data, then I'll go ahead and close this. Thanks for letting me know!\n. ",
    "harikt": "@codeguy I assume the user himself have deleted. Not sure whether he himself have written the same though. https://github.com/ghost\n. @codeguy when you see from unknown repository the repo will be deleted by user ;) .\n. Alternatives are https://github.com/DASPRiD/Dash ( zf3 prototype, see https://github.com/DASPRiD/Dash/pull/54 ) , Aura.Router , Symfony router .\n. I am not for league route for see the dependencies  https://github.com/thephpleague/route/blob/5d30947732d0da0998a4174911dc8c63f922b271/composer.json#L18-L23 .\nAs a router, the functionality is only to route, match, generate route back. Dispatching etc is not functionality of router. Again, as Slim is already using Pimple, I don't think there needs more containers to be bought . If you are interested you could take the nikic/fast-route than taking all the containers, symfony/http-foundation etc.\n. @codeguy I just said what I noticed :) . You always have the right to hear and reject :) .\n. @codeguy @silentworks there will not much performance benefits. These are really nano seconds.\n. I would like to point to an old benchmark : https://github.com/c9s/Pux/issues/17#issuecomment-32275754 .\n. nice silentworks :) . \nAlso this is much readable .\n. @codeguy nice. I have been thinking to tell you about src folder. And good to know . Great +1 :) . and thanks!\n. @akrabat src folder is not for psr-4 . Just a convenience of saying source resides here, tests resides here.\n. Interesting @funkatron . That brings me to another place, I like how conduit does this. \nYou can attach a middleware to a route. I hope Slim can also do the same ?\n. nice :) .\nHari K T\nYou can ring me : +91 9388 75 8821\nhttp://harikt.com , https://github.com/harikt ,\nhttp://www.linkedin.com/in/harikt , http://www.xing.com/profile/Hari_KT\nSkype  : kthari85\nTwitter : harikt\nOn Wed, Mar 11, 2015 at 7:27 PM, Josh Lockhart notifications@github.com\nwrote:\n\n@harikt https://github.com/harikt Slim has had route middleware since\n2.0.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/issues/1084#issuecomment-78267198.\n. / cc @weierophinney .\n. localhost/hello/asd and localhost/hello/asd/ are different. So is an expected behavior .\n. I agree with @akrabat . There was also a discussion over https://github.com/auraphp/Aura.Router/pull/4\n. Hey @codeguy , \n\nMay be you could have a look at Aura.Session regarding the security issue opened https://github.com/slimphp/Slim-Csrf/issues/1 . I wonder whether Aura.Session will fit both needs. Not pushing just aura, in case if you like the functionality.\n. Thank you @akrabat .\n. My bad, I was returning a different response object.\nI do recall some discussion where it mentions the injected response is different from that of returned. Not sure where the thread was, and whether it was in Slim itself or not.\nThanks\n. Closing in favor of https://github.com/slimphp/Slim/pull/1153\n. This is why I have made a common api earlier  https://github.com/cocoframework/Cocoframework.Renderer . It can render smarty, twig, aura/view, plates or even mustache.\n. @neoncube2 please provide the code also. It seems the method is not in PDO is called.\n. :+1: \n. Thank you @silentworks and @akrabat . \nSorry that I wasn't able to send a PR than opening an issue :-/ . Got a bit busy .\n. Good work @akrabat . And I do agree with your thought about making it a middleware.\n. @akrabat This actually is a BC break. I wonder how does this actually happened to be in 3.x .. @akrabat sorry for the confusion. I have looked more carefully what are the changes made.\nIt looks you guys are right here as if anyone passing an instance of Interop\\Container\\ContainerInterface will work.\nSorry once again. First look made me wonder about it.. though you cannot swap the container easily for there is something like this https://github.com/shameerc/Slim3-Aura.Di-Bridge/blob/24d6fc36aab84a80973deb84cfe938266ab181c9/src/Container.php#L75-L119. Hey @geggleto ,\nThank you for your response.. may be  good to use withHeader ? .\n. Did you missed the name ?\n. same here. I think this will just copy the file, but not to the name it needs to be.\n. Thank you for clarifying @opengeek .\n. ",
    "opb": "@tuupola Sorry for the lack of clarification, I meant when running \"php mySlimScript.php\". It's just some cli-based commands that I've put together for my Slim app, in a similar way to Laravel having artisan.\n@mnlg Thanks for the suggestions. The issue was highlighted to me when using the default log writer, but seemingly stems from $app->environment producing PHP Notices. As an example:\n``` php\n// testEnv.php\n<?php\nrequire DIR.'/vendor/autoload.php';\nuse Slim\\Slim;\n$app = new Slim();\nvar_dump($app->environment);\n```\nRunning php testEnv.php will give several notices similar to this:\n```\nPHP Notice:  Undefined index: REQUEST_METHOD in /Volumes/UserHomes/oliver2/Development/repos/searchapi/vendor/slim/slim/Slim/Environment.php on line 124\nNotice: Undefined index: REQUEST_METHOD in /Volumes/UserHomes/oliver2/Development/repos/searchapi/vendor/slim/slim/Slim/Environment.php on line 124\n```\nI wasn't sure if this was intentional, or something that should be handled by my PHP setup as opposed to Slim (ignore Notices?), or whether it was something worth reporting.\nThanks again.\n. I actually have Symfony console pulled in, but am using Slim and its container for the basis of my app, so have been making use of it in the console commands.\nThanks for the responses guys, just wanted to flag this up in case it was something that needed looking at.\nCheers\n. ",
    "dmiedema": "I don't explicitly define a GET /v0 route. v0 is a group that contains subgroups, beers, etc.\nSo i have\nphp\n$app->group('/v0', function() use ($app) {\n  $app->get('(/)', function() use ($app) {\n    // accessing this route, v0/, throws a 404 error\n  });\n  $app->group('/beers', function() use ($app) {\n    $app->get('(/)', function() use ($app) {\n      // code that works awesome\n      // v0/beers\n    });\n    $app->get('/:id', function($id) use ($app) {\n      // more code that works awesome\n      // v0/beers/31\n    });\n  });\n});\nthe sub groups inside v0 work fine, so v0/beers/:id works as well as any other routes defined in a subgroup. breweries for example (not typed out) works fine\nHowever when calling a route defined inside v0 (v0/ for example) that is not inside one of its subgroups throws a 404 error\n. Awesome, thanks!\nSince everything else was working fine i wasn't sure if it was my config or not but as long as thats the case then this issue isn't an issue.\nIll double check my rewrite rules & version.\nThanks again for your help\nSent from my iPhone\n\nOn Aug 11, 2014, at 1:08 AM, Mika Tuupola notifications@github.com wrote:\nI just tried this code:\n$app->group('/v0', function() use ($app) {\n  $app->get('(/)', function() use ($app) {\n      print 'v0';\n  });\n  $app->group('/beers', function() use ($app) {\n    $app->get('(/)', function() use ($app) {\n        print 'beers';\n    });\n    $app->get('/:id', function($id) use ($app) {\n        print $id;\n    });\n  });\n});\nRunning the above with php -S 0.0.0.0:8080 and Slim version 2.4.3. When accessing /v0or /v0/ I get result v0. When accessing /v0/beersor /v0/beers/ I get result beers. When accessing /v0/beers/foo I get result foo. So everything seems to be working. Maybe something in rewrite rules or older version of Slim?\n\u0081\\\nReply to this email directly or view it on GitHub.\n. Problem was between keyboard and chair.\nDidn't realize i was attempting to GET from the wrong domain (production instead of staging)\n\nThanks for your help everyone.\n. ",
    "Tropicalista": "Now it's working also for me. Probably a server overload....\nClose\n. ",
    "vik-singh": "Thanks Scott - will do it tonight\nOn Tuesday, March 3, 2015, Scott Arciszewski notifications@github.com\nwrote:\n\n@vik-singh https://github.com/vik-singh\ngit remote add upstream https://github.com/slimphp/Slim.git# And then...\ngit fetch upstream develop\ngit checkout develop\ngit rebase upstream/develop\nThen resolve conflicts...\ngit push --force origin develop\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/pull/878#issuecomment-77063556.\n. @codeguy @sarciszewski - it seems my changes are no longer applicable since we've changed to FastRoute - once this stabilizes I can test again with my app.  I am closing this pull request.\n. Any movement on the release?\n. @codeguy still alive? :-)\n. LOL\n. \n",
    "fredemmott": "Heh, oops, I got my remotes muddled up. replacement PR incoming.\n. Was this fixed? This does cause intermittent failures when continually testing, and means that HHVM tests my fork of Slim instead of the main repository.\n. ",
    "strngr": "I'm sorry. Request was made to master branch instead of develop\n. Your idea seems better.\nI'm not sure about unsetting $data. It's not needed for avoiding conflicts. Btw, $this would be accessible in view anyway.\n. I'd like to say that unsetting $data is senseless if you want to protect data. That data anyway may be accessed in this way: $this->all().\nI have nothing against unsetting $data. It is OK for clearing scope. But this won't protect data.\n. php.net docs:\nis_null\n\nReturns TRUE if var is null, FALSE otherwise.\n\nfunction_exists\n\nReturns TRUE if function_name exists and is a function, FALSE otherwise.\n\nSo what's the point to compare strictly results of is_null and function_exists?\n. I agree\n. ",
    "tim-bezhashvyly": "Then it will \"make\" sense to add /.project for eclipse, /.vagrant/ and /Vagrantfile for Vagrant, .DS_Store for MacOS and who know what else people can commit by mistake.\n. Thanks for taking time for replying. Even though I think this approach to be wrong way to go it is still viable. Issue can be considered closed.\n. ",
    "sgsheg": ":+1: \n. ",
    "cochesaurus": "A book about creating web applications with slim would be great \ud83d\ude0a \n. ",
    "thinkjson": "Any update on this?\n. ",
    "3nk": "Any news ?\n. ",
    "msjyoo": "What's the use case for this?\n. Pull Request #1025 #1026 created that fixes this issue from both the master and develop branches.\n. A note that this will allow the method to be spoofable by users, which is probably not desired. For XF headers a trusted proxies system needs to be implemented, \n. The problem with this is that until this is implemented, halt()'ing with an undefined status code will return \"HTTP/1.1\" in the HTTP response status line (empty status code). Until this is implemented however, you can get around this issue by using Reflection.\n//Fix for https://github.com/codeguy/Slim/pull/993 until new version is released\n$obj = new Slim\\Http\\Response();\n$refObject = new ReflectionObject($obj);\n$refProperty = $refObject->getProperty(\"messages\");\n$refProperty->setAccessible(true);\n$array = $refProperty->getValue(null);\n$array[429] = '429 Too Many Requests';\n$refProperty->setValue(null, $array);\nunset($obj, $refObject, $refProperty, $array);\nEdit: Or forking a custom version of Slim. Either way, same result.\n. Whoops, this fixes #1028. Will close my duplicate.\n. @DavidePastore I think #892 is unnecessary on the new 3.0.0 since the getHost() uses the URI itself not the HTTP_HOST environment variable.\n. It seems that no reasonable proxy actually uses the Forwarded header, so I am leaving that off the todo list for now.\n. @DavidePastore Yes, but is the HTTP_X_FORWARDED_HOST different from the URL host provided in the HTTP request URL?\n. I'm still working on it, I've just had other things to do on my hand.. If you want to take over from here then feel free to checkout what I have and expand on it. If not, then I'll hopefully finish it in about a week or two and make a final PR.\n. @codeguy Unfortunately I don't have time to finish and test this PR - it's nearly finished anyway, so if you would like to just cleanup the code and test / merge then please do. Sorry!\n. Wouldn't there be a chance that the SCRIPT_NAME and HTTP_HOST be overwritten to the incorrect values if it comes after the HTTP_X_FORWARDED_HOST?\n. Edit: Nevermind, didn't notice that there were new composer dependencies added.\n. ",
    "pioter": "Hi,\ni added routes by:\nforeach ($routes as $routeKey => $route) {\n                    $this->addControllerRoute($route['route'],\n$route['controller'] . ':' .\n$route['action'])->via($route['via'])->name($route['alias']);\n                }\ni dont use method AddRoutes. Next i receive warning:\n$this->routeGroups is empty.I should add group routes?\nrouter.php\nprotected function processGroups()\n    {\n        $pattern = \"\";\n        $middleware = array();\n        foreach ($this->routeGroups as $group) {\n            $k = key($group);\n            $pattern .= $k;\n            if (is_array($group[$k])) {\n                $middleware = array_merge($middleware, $group[$k]);\n            }\n        }\n        return array($pattern, $middleware);\n    }\npeter\n2014-09-21 19:59 GMT+02:00 Mika Tuupola notifications@github.com:\n\nIt is a bit hard to understand the question. What are you trying to do?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/codeguy/Slim/issues/899#issuecomment-56306838.\n\n\npozdrawiam\nPiotr\n. ",
    "mfrost503": ":+1:\n. ",
    "jmikola": ":+1:\n. ",
    "dcousineau": ":+1: \n. ",
    "dragonmantank": ":+1: \n. ",
    "philsturgeon": ":+1:\n. LOCK IT DOWN HELP\n--\u00a0\nPhil Sturgeon\nI talk about turtles, bikes and code over here\u00a0philsturgeon.uk\nFrom:\u00a0Michael Beckwith notifications@github.com\nReply:\u00a0slimphp/Slim reply@reply.github.com\nDate:\u00a0January 23, 2016 at 6:13:44 PM\nTo:\u00a0slimphp/Slim slim@noreply.github.com\nCC:\u00a0Phil Sturgeon me@philsturgeon.uk\nSubject:\u00a0 Re: [Slim] Made it wurst. #WurstCon (#900)  \nHow dare you hold the mustard!\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "joshmanders": ":+1: \n. ",
    "SammyK": ":+1:\n. ",
    "Ocramius": "There's not enough wurst in this PR. Where's the variety?!\n. ",
    "corykeane": "remember, no ketchup\n. ",
    "tw2113": "How dare you hold the mustard!\n. Will do, thanks for the feedback\n. Gonna restart this.\n. Welcome, thanks for accepting it :)\n. Recommendation after some talk in IRC.\nhttp://www.apigen.org/\nAs easy as this command from a terminal in the root directory of a checkout:\napigen generate --source Slim --destination ../docs --template-theme bootstrap --title \"Slim Framework\"\nChange the destination to wherever desired and commit afterwards.\n. Example output:\n\n. ",
    "howlowck": "::thumbsup::\n. ",
    "hardlynoticable": "I didn't.  I used Github's web based interface.  Actually I don't use\ngithub often and I found their interface a little confusing.\nStephen J Akins\nhttps://google.com/+StephenAkins/about\nOn Thu, Sep 25, 2014 at 7:09 AM, Mika Tuupola notifications@github.com\nwrote:\n\nNon patch related question. What git client are you using? I have been\ntrying to find out which client makes the default \"Update filename.txt\"\ncommit messages.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/codeguy/Slim/pull/902#issuecomment-56823604.\n. I had another change immediately afterwards that I may not have pushed\nproperly...  I added an extra newline so the last div in the trace closed\nproperly and I made a bunch of little formatting changes including taking\nout the PRE tags as they weren't needed any longer....  Did you see those\nchanges also?  Just wondering.\n\nStephen J Akins\nhttps://google.com/+StephenAkins/about\nOn Fri, Sep 26, 2014 at 9:38 AM, Stephen Akins stephenakins@gmail.com\nwrote:\n\nI didn't.  I used Github's web based interface.  Actually I don't use\ngithub often and I found their interface a little confusing.\nStephen J Akins\nhttps://google.com/+StephenAkins/about\nOn Thu, Sep 25, 2014 at 7:09 AM, Mika Tuupola notifications@github.com\nwrote:\n\nNon patch related question. What git client are you using? I have been\ntrying to find out which client makes the default \"Update filename.txt\"\ncommit messages.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/codeguy/Slim/pull/902#issuecomment-56823604.\n. \n\n",
    "timovanderzanden": "+1\n. ",
    "ha17": "Using your code I was able to see the image. Perhaps you have an errant tab buffered somewhere before the final output?\n. @alycklama -  a lot of people don't use the closing ?> at the end of a file for this very reason. Then PHP won't buffer it to include in the output, it will be ignored as just extra whitespace around the code.\n. ",
    "alycklama": "There was a required_once file that at the end of the php file (?>) had a tab... Thanks a lot for helping me out!\n. ",
    "wadewomersley": "Here's an idea...copy and paste the right code changes and not your test code!\n. Fixed my silly var_dump and added a test.\n. Totally screwed up commit - going to do a new pull request.\n. Re-created against latest - https://github.com/slimphp/Slim/pull/1023\n. Due to my cock-up with merging it's showing multiple commits but the files changed are just the 2.\n. ",
    "flashinnl": "Hi Hachreak,\nYou can use class controllers for organizing your routes, see the changelog:\nhttps://github.com/codeguy/Slim/releases/tag/2.4.0 \nThat way you don't have the bulk of all methods autoloaded.\nAdding a route only registers it, so not much overhead there.\nFor my own use, i have added some abstraction on top of Slim. You could easily add groups to it like your proposal.\n. ",
    "hachreak": "Thanks :)\n. ",
    "elibyy": "yes but it's still make it much easier to load system configurations or make an installation config result file\n. ",
    "marcfielding1": "Hrm this isn't an issue its to do with vhosts not being setup correctly. Sorry just messing with it now!\n. Yep sorry this was to do with AlllowOverride all not being set in vhosts - must read install instructions all the way through!\n. ",
    "roobre": "@tuupola I have already tried defining the route without the slash, and it makes no difference.\nHowever, nyaa.tld/sales/by-rule/?a=0 won't work in any case because there is other route defined:\n$app->get('/sales/by-rule/:id/', array($api, 'authenticate'), array($api, 'matches'));\nwhich captures ?a=0 as :id, which, all being said, it's a weird behavior that should also be corrected.\n. Thanks! It fixed the issue with the second rule activation too!\nThat config should be added to the nginx section in the official docs.\nRegards, Roberto.\n. ",
    "ariariari": "can you post the code?\n. ",
    "DSpeichert": "@tuupola Yes, I am. That's probably why. I need it most of the time - is there any way to really get a raw body with it?\n. Okay, I guess I just hoped there would be a separate method to still get the really \"raw\" request body. I need to work with processed body (deserialized json) but at the same time need to run hash verification on the exact raw unmodified body (cannot json_encode it back).\nMy solution was to simply take file_get_contents('php://input').\n. ",
    "dgmike": ":+1: \n. ",
    "kiswa": ":+1: \n. ",
    "tusharsoni": "That works. Thanks!\n. ",
    "gisheri": "Is there no way to access the parameter inside the group to be used in the group routes?  Like so?\n```\n$app->group('/contest/:id', function($id) use ($API){\n$API->authorize('contest', $id);\n$contest = new Contest($id);\n$app->get('/settings', function() use ($contest, $API){\n    $data = $contest->getSettings();\n    $API->output($data);\n});\n$app->get('/stats', function() use ($contest, $API){\n    $data = $contest->getStats();\n    $API->output($data);\n});\n});\n```\n. Got it, thanks for the reply! \n. ",
    "shanehou": "When you add that middleware, you should no long use $_SESSION. Instead, you may use encrypted cookies. From source code, you can see all functions about session are assigned to some functions that return boolean or empty string.\n. But here I just want to give a response to the ajax call, not refusing.\n. But other route functions are fine with exit. Is it not necessary that I stop the script executing? exit() is actually echo then exit.\n. ",
    "collizo4sky": "I am having trouble persisting session.\nAm using HybridAuth library in a project that requires session_start to work.\nIncluding $app->add(new \\Slim\\Middleware\\SessionCookie()); make things go awry but removing it return things back to normal.\nCan someone please give a break down on how session can be persisted in different routes in slim framework?\n. Figured it out...\n. Since hybridAuth came with its own session handler, I had to use that instead of using that of slim.\n. ",
    "ejrudy": "How did you solve it @collizo4sky ?\n. ",
    "ekoome": "Fixed it by putting double quotes for the query:  \"Select ..\" instead of 'Select ...'  Very obscure error. Thanks lplume for pointing me on the right direction.\n. ",
    "bobdenotter": "@ekoome: I think the error is not really obscure. You tried to use '%' inside a string that also had single quotes. You need to either escape them, or use 'the other kind'. \n. ",
    "m3y": "Sorry, I would be wrong pull-request destination branch.\n. ",
    "louis-she": "I see , but I have review the develop branch source code , it is \"totally difference\" from the master branch\n. Thanks for all the replies\n. ",
    "Klian": "@tuupola yes. My other routes are working fine. The problem is when I append the ?go=go\n@prisis that works, but I need to use the ? mark.\n. @tuupola it works! \nI don't know why I was using that .htaccess... \n. ",
    "Mangulomx": "thanks I solved it\n. ok\n. could review it again? thanks \n. yes, how could do it?. I realize calls in different routes. that\u00b4s ok?\n. With only two queries, but when I do the second redirect, the method is GET. If I do one insert being POST not?\n. the redirect is wrong not with insert\n    $app->redirect(\"/lineorder/insert/$cliente\");\n. ok very much thanks\n. I change a get but my application dont render\n. I make\n```\n    $(\"#insert-order\").click(function(event)\n   {\n       event.preventDefault();\n       $.ajax({\n           type:'GET',\n           url:'/orders/insert'\n       });\n});\n```\n. I go to calling to several routes, the first route is POST\nI use only routes\n. This cannot do, in ajax I think that if. I solved with the form action\n. ",
    "pvullioud": "Great, thanks\n. ",
    "knifesk": "Fuck my ISP... yes.. switched to google's DNS and I can access the site just fine... Sorry for the bother guys!\n. Nope, still cant access the docs.. not even with a proxy :(\nI CAN access the website (www) but not the Documentation (docs.slim....)\n. TY Daniel, that one is working... \n. Yeah, for me too now... Glad it worked fine\n. ",
    "jordanwallwork": "Oh of course, cheers\n. ",
    "cdtweb": "^ LOL\n. ",
    "ThePokyWizard": "Is almost Let Me Google for You lmgtfy.com\n. ",
    "GeeH": "I think that @weierophinney has a library that fixes this \n. Doesn't this break PSR-7?\n(I love the concept BTW and is something I always do in my own projects)\n. ",
    "Miesvanderlippe": "Same error just after trying to print an array with print();\nMy logwriter might be bust or something but I didn't change anything about it.\n. ",
    "honeygoyal": "Did anyone find solution to this problem? https://stackoverflow.com/questions/32473070/slim-framework-fatal-error-uncaught-exception-invalidargumentexception-with-m\nI got this answer on stackOverflow but it didn't help! why this error occurs? since I made no changed to my logwriter.. ",
    "diegoluisr": "I have this problem too, i hack que line\n$env['SERVER_PORT'] = $_SERVER['SERVER_PORT'];\nfrom slim/Environment.php\nand i change this life for\n$env['SERVER_PORT'] = isset($_SERVER['SERVER_PORT']) ? $_SERVER['SERVER_PORT'] : 80;\nThis Problem was reported in 2010, without Google solution.\nhttps://code.google.com/p/googleappengine/issues/detail?id=2818\n. ",
    "garnold": "@codeguy Reopening an oldie but goodie as I just bumped into this issue. App Engine supports HTTP and HTTPS, so defaulting to 80 doesn't always work. A more reliable way to set the default value is to consult $_SERVER['HTTPS']:\nphp\nif (!isset($_SERVER['SERVER_PORT'])) {\n     $_SERVER['SERVER_PORT'] = $_SERVER['HTTPS'] == 'off' ? 80 : 443;\n}. @ahmedkaballo FWIW we run a number of Slim-based apps in Google App Engine (GAE) and thus far have stayed within their generous free tier.  Similar to @tflight 's answer, we install dependencies in our local dev environments and push to GAE.\n. Quick update: request attributes are overwritten by route arguments in Slim\\Handlers\\Strategies\\RequestResponse:__invoke prior to invoking the route callback:\nphp\n        foreach ($routeArguments as $k => $v) {\n            $request = $request->withAttribute($k, $v);\n        }\nThis is unexpected behavior, as the route callback is already passed an array of request arguments, implying that one should retrieve the request attributes using $request->getAttribute() and route arguments from the $args parameter.\nLuckily there is an easy workaround by replacing the foundHandler on the container, however I'd still consider this a bug.\n. @akrabat @codeguy We routinely use HEAD routes to trigger a poll of an external resource without returning the result. We then have a corresponding GET route to trigger the poll and return the result.\nI believe this falls within the guidelines of the HTTP protocol. It would be helpful if Slim included the $app->head() convenience method.. @codeguy Thanks for the quick response!  I thought it might fit in as an Add On / first-party component, but maybe not.  Have you documented Slim's core principles somehwere?\n. Thanks for the pointer @tflight . @akrabat https://github.com/slimphp/Slim/issues/2033#issuecomment-278341137. Possibly relevant: https://github.com/slimphp/Slim/issues/2019. @geggleto How does using routerCacheFile help? Won't the group calls still be invoked during initialization of the app? \nReason I'm ask is we've been experimenting with routerCacheFile and haven't found any noticeable speedup.. FWIW I bumped into what I thought was this issue, but the trouble was actually with Apache.  The fix was to add AllowEncodedSlashes NoDecode inside my VirtualHost:\nhttps://stackoverflow.com/questions/4390436/need-to-allow-encoded-slashes-on-apache\nHope this helps,\nGeoff.. Possibly too late to the party, but Google App Engine Standard Environment only supports PHP 5.5.34. Would you guys reconsider 5.5 support?. @Sam-Burns @silentworks Thanks guys! I figured that would be the answer.\nTrouble is according to Google, GAE SE is not going away anytime soon, yet they have no (public) plans to support 5.6/7.0 on GAE SE.. Thanks for confirming, @geggleto \nI get what you're saying with REST APIs but the default notFoundHandler also handles application/json requests so this can cause inconsistencies in REST APIs (Slim will return a certain 404 message when the route doesn't exist, while controllers will return a different 404 message).. @geggleto Right, but it's an ||. The first condition is likely to be false, but the second condition is likely to be true.. ",
    "german-chosen": "Latest version using composer:\n\"slim/slim\": \"2.*\"\n. ",
    "samlevin": "Thanks for the feedback and perspective. Either way, being pigeonholed into 404 for notFound isn't ideal, and the fix is simple. Glad to see some traction on this. Hope the devs see it. \nBest,\nSam Levin\nSent from my iPhone\n\nOn Feb 5, 2015, at 11:15 PM, Tasso Evangelista notifications@github.com wrote:\nI've seen some discussions around this \"400 or 404\" subject. The RFC 2616 states for 404:\nThe server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. [...] This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable.\nI don't think that 404 is a good status to represent that desired resource doesn't exist because is too generic to say what is wrong with the request URI. Some API developers are using 422 status.\nRegardless this issue, Slim\\Slim::notFound() is not handled like a route; sometimes is annoying.\n\u2014\nReply to this email directly or view it on GitHub.\n. How was this resolved? Can I get some details? I feel like I looked around but didn't see the fix.\n. \n",
    "rhysemmerson": "I solved this by adding a middleware callback that saves the route and makes it available to the route callback. \nIt would be nice if this was part of the core though because getCurrentRoute() isn't very useful at the moment.\n. My apologies, in essence it looks like this.\n``` php\nclass FooController {\npublic $currentRoute;\n\npublic function setCurrentRoute($route) {\n    $this->currentRoute = $route;\n}\n\npublic function index() {\n    if ($this->currentRoute) {\n        echo \"<h1>It Works, \" . $this->currentRoute->getName() . \"</h1>\";\n    }\n}\n\n}\n$fooController = new FooController();\n$slim->map('/', \n    [$fooController, 'setCurrentRoute'], // the middleware callback \n    [$fooController, 'index'] // the route callback\n)->via('GET')->name('Index Route');\n```\nThe middleware gets called like so in Slim\\Route. The route object supplies itself as the argument.\n``` php\n    /\n     * Dispatch route\n     \n     * This method invokes the route object's callable. If middleware is\n     * registered for the route, each callable middleware is invoked in\n     * the order specified.\n     \n     * @return bool\n     */\n    public function dispatch()\n    {\n        foreach ($this->middleware as $mw) {\n            call_user_func_array($mw, array($this));\n        }\n    $return = call_user_func_array($this->getCallable(), array_values($this->getParams()));\n    return ($return === false) ? false : true;\n}\n\n```\n. ",
    "sbreiler": "Could you share your code?\n. For security purpose i needed the current route, for the time being i used this code (disclaimer: realy inelegant):\n``` php\n$app = new \\Slim\\Slim();\nfunction check_user(){\n    $app = \\Slim\\Slim::getInstance();\n$route = ltrim($app->router()->getCurrentRoute()->getPattern(),'/');\n// $route could be \"news\" now\n\n// etc.\n\n}\n$app->get('/news','check_user', function() use($app){\n    // ...\n}\n```\nHowever i think its no good for routes like \"/edit/:id\", in which case i (in my usecase) would need the exact URL passed (like \"/edit/123\"). Maybe i'm gonne tinker with the URL itself ($_SERVER['PATH_INFO'] or $_SERVER['REQUEST_URI']).\n. ",
    "shaundodimead": "Thinking further, I wondered if perhaps the run() which calls the callbacks then starts writing to the end of the output (i.e. setbody,then the function). How about this? \n<?php\nrequire 'vendor/autoload.php';\nglobal $app;\n$app = new \\Slim\\Slim();\n$app->get('/setbodyprob', function () { \n    global $app;\n    print 'foo'; \n    $app->response->setBody('bar');\n});        \n$app->run();        \n?>\nOutput is the same tho, 'barfoo'\n. Thanks Mike,\nI don't know why I didn't see that in the documentation, it is clearly there. It does also say:\nThe HTTP response returned to the client will have a body. The HTTP body is the actual content of the HTTP response delivered to the client. You can use the Slim application\u2019s response object to set the HTTP response\u2019s body:\nI wonder then, what's the point of the Response->SetBody() if it doesn't actually set the body response, it sets part of it. My challenge is my service is calling code which is shared and generates output I don't want.\nI guess I'll get the output generation factored out of the shared code (which it probably should be anyway)\nShaun\n. ",
    "KryDos": "I changed return value to null. Tests are passed. \nIt seems like cosmetic change but anyway, I hope it will allow me to start to contribute more into this framework :)\n. Ahh, first read then do :(\nI had to create pull request to the develop branch. Sorry\n. So, I found that I can push to master :) \n. I think it will break API of how we can get these messages.\nActually you can pass array in your flash message and then you can use this message as multiple values message.\nphp\n$this->messages['next'][(string) $key] = $value;\nHere your $value variable can be array with multiple messages. \nI think nothing should be changed.\n. ",
    "nochso": "Thank you. It may feel cosmetic, but something not working properly because of the implementation differing from documentation is either a bug or improper documentation :)\n. For some inspiration have a look at thephpleague/route which is using nikic/fast-route. I like the idea of different strategies for the callable parts depending on use case or personal choice.\nThen again I haven't looked at Slim's current router implementation yet, so maybe I should compare first.\n. ",
    "craveica": "That's an easy fix, replacing line 380 in Route.php:\ndiff Route.php.old Route.php.new\n```\n380c380\n<             str_replace(')', ')?', (string)$this->pattern)\n\n\n        str_replace(')', ')?', strtr((string)$this->pattern, '0123456789', 'abcdefghij'))\n\n```\n. \n",
    "eko3alpha": "I would also like to see this implemented.\nI am using class based routing and not able to inject dependencies let alone an IOC container.  My current solution is to create a BaseController that will provide the dependencies needed in the controllers.\nBaseController.php\n```\nclass BaseController \n{\n    protected $dependency1;\n    protected $dependency2;\npublic function __construct()\n{\n       $this->dependency1 = new Dependency1;\n       $this->dependency1->initConfig(Config::get('some_config1'););\n\n       $this->dependency2 = new Dependency2;\n       $this->dependency2->initConfig(Config::get('some_config2'););\n}\n\n}\n```\nMyController.php\nclass MyController extends BaseController\n{\n    public function myMethod($param1)\n    {\n        $result = $this->dependency1->doSomething($param1);\n    }\n}\n}\nroutes.php\n$app->get('/get-r-dun/:param1/', 'MyController:myMethod');\nBaseController instantiates my dependencies.  Unfortunately I have no way to access my config values unless I use a registry pattern. \nConfig::get('db_host');\nThe other solution which I don't like is to make the BaseControllers constructor mount $app.\nBaseController\nclass BaseController \n{\n    protected $app;\n    public function __construct()\n    {\n          global $app;  // I HATE this idea  >:(\n           $this->app = $app;\n    }\n}\nThis is my least favorite of the 2.  Id love to be able to inject dependencies, or heck even an IOC.  Any news on this?\n. Excellent! Thanks for the heads up!\nAny Idea when Slim 3 will be ready?\n. ",
    "brandisher": "FWIW, the most correct solution would be to disable the URL decoding done by IIS (if possible) if you're running across multiple web servers.  However, and I don't know if this is advisable, but you may be able to add a callable to the slim.before hook to re-encode the URL before Slim does it's processing.\n. I can't say that I've seen a problem like this before so perhaps a unique problem requires a unique solution!  Glad you've figured it out!\n. Hi @jrborbars,\nThis is very delayed but I had some spare time to contribute.  You can access the values by using $app->request->post('sel').  I stood up a test instance and confirmed this myself.\nAn important thing to note is that if you're getting a POST'd array directly via the request and none of the checkboxes are checked, you simply end up with a null.\n. @jrborbars no problem :-)\nI should've clarified in my original response, I was able to successfully retrieve more than one selected checkbox using $app->response->post('sel').  My tests were:\n0 checkboxes checked -- returns null\n1 checkbox checked -- returns $_POST['sel'][0]=>on\n2 out of 4 checkboxes checked -- returns $_POST['sel'][0]=>on, [1]=>on\n. I believe I'm using the most recent stable version (2.5).  I don't have access to it at the moment so I can't confirm 100%.\nOne other thing you could try is using $app->request->params() or $app->request->params('sel') just to see if that returns anything.  Do you have any of this code in a repo anywhere?  I could probably investigate more thoroughly if I could see the code in full context.\n. So for my own clarification, fixing the typo fixed the issue you are having?\n. Ah, okay.  Without seeing your full code, I don't think I can diagnose any further.  I was successfully able to pass multiple checkboxes with the same name (sel[]) and retrieve them as an array using $app->request->post() and $app->request->post('sel').  This was using Slim 2.4.2.\n. :+1: \n. What version of Slim are you using?\nAlso, looks like you've got a typo in the code.  I assume it should be like this?\n$app->map('/test', function () use ($app) {\n        $t = new \\TestController();\n        $t->test($app);\n})->via('GET', 'POST')->name('test');\nI tested on 2.4.2 and if you define the route as '/test/', both of the following renditions work:\n/test?q=1234\n/test/?q=1234\n. Yes.  Check the docs here\n. You have a typo.  $app = Slim:getInstance(); should be $app = Slim::getInstance();.\n. ",
    "oniric85": "As a temporary solution I've added this piece of code before the Slim app initialization code:\n``` php\n// Patch for IIS handling of URL encoding\nfunction on_iis() {\n    $sSoftware = strtolower($_SERVER[\"SERVER_SOFTWARE\"]);\n    if (strpos($sSoftware, \"microsoft-iis\") !== false) {\n        return true;\n    } else {\n        return false;\n    }\n}\nif (on_iis()) {\n    $_SERVER['REQUEST_URI'] = $_SERVER['UNENCODED_URL'];\n}\n```\nIt seems to get the job done though not very elegant.\n. ",
    "moffe42": "Is there a reason for just closing this???? As far as I can see this is still an issue in the 2.x code base or have support been dropped on the 2.x branch??\n. ",
    "dvikan": "$app->halt(403, 'You shall not pass!');\n. ",
    "Stelian": "@shanehou exit terminates the execution at that very point, so the framework can not send out the headers, which also contain the Cookie information you are settings.\nTo get around this you can do $app->halt(200); which for the client will have the same \"meaning\".\n. ",
    "jrborbars": "Hi cwscribner,\nThanks (a lot) for your reply, but I think that you not \"catch\" my problem. Your solution works well with ONLY ONE value selected in checkboxes. If I select multiple values only the LAST value return (checked with var_dump). And yes, I was checked some checkboxes to receive this values...... I never said that the array was returned empty. ;-)\nEdit (1 min):\nIn plain HTML form and plain PHP this works well. \n. @cwscribner,\nWhat's your version of Slim? I'm using 2.4.2 and can't do this. 8-(\nThe code:\n## HTML\n\n\n\n\n\n\n\n## CONTROLLER/ROUTE\n$sel = $app->request()->post('sel');\necho \"<pre>\";\nvar_dump($sel);\necho \"</pre>\";\n## RESULT\nResult of var_dump:\nstring(1) \"3\"\n## FIREBUG\nPost:\nsel 2\nsel 3\n\nOther inputs in the same form are catched by $app->request()->post() easy (no one have the same name or id!). Other ideas?\nThanks A LOT and best regards.\nEDIT:\nNow I see that you write $app->response->post(). This is a typo?\n. I will try to post it in a gist soon.\nSo I tested to put individual names to each checkbox ('sel1', 'sel2', 'sel3'), and it WORKS. Worked to if names are 'sel[1]', 'sel[2]', 'sel[3]',etc. But doesn't works if names are 'sel' only (for all checkboxes)\n or 'sel[ ]' (without the inner space).\nNOTE: Now I see my typo in the $app->request above. But it works (believe in me ;-). )\nWRONG  ------> $app->request()->post('sel');\nRIGHT     ------> $app->request->post('sel');\n. No. The behaviour still wrong. The checkbox with ONE name must return an array. The \"solution that works\" before is only a workaround that I tried, putting individual names and POST returning individual variables. \nSo, with my typo or not, the POST do the job (with only one name for each variable).\n. Hummmmm.\nThis is very strange. I see with more attention the @tassoevan response, that said that $app->response->post('sel') catch the input of name=\"sel[]\". I tried and the result (var_dump) is NULL. So, this is not a server issue. Oh! Now I remember that I'm using HHVM 3.4.2, not Zend PHP, with a Nginx HTTP server. But this type of post array works with raw PHP and, IMHO, this still not a server issue. Continue in help.slimframework,com.\n. ",
    "rbalik": "Was looking into this more and I think the problem isn't related to the parameters at all. The issue is that /test/ doesn't work at all.\nThis may be related to it being inside of a group so really it's /1/test and /1/test/\n. Hmm, I'm using composer to get '2.*', looks like I'm on 2.5 so maybe this is a regression.\nThat typo was left over from the group.\nHere's an exact snippet that reproduces the problem:\n```\n<?php\nrequire('vendor/autoload.php');\n$app = new \\Slim\\Slim();\n$app->group('/1', function() use ($app) {\n    $app->map('/test', function () use ($app) {\n        echo('testing');\n    })->via('GET', 'POST')->name('test');\n});\n$app->run();\n?>\n```\n. With that code, requesting /1/test works but /1/test/ returns a 404.\n. Oh, I see that you said I should define it as '/test/' and that does work for me. I guess I've been doing it wrong. I'll make that change. Thanks for your help.\n. I just ran into this too as I'm trying to enable JSON input support. The ContentTypes middleware should populate environment['sim.request.form_hash'] instead of just 'slim.input'\nOtherwise, you need two different functions to get fields depending on the content type. If it's JSON you use getBody() and if it's form data you use post(). It would make way more sense to just use post() for everything so that individual endpoints don't need to care about what the content type is.\n. This is with 2.6.2 btw.\n. ",
    "rajibmp": "Thanks for the Merge.... seriously not a troll, learning to contribute to OS projects. Cheers !!!\n. ",
    "benedmunds": "Great job @rajibmp !\n. ",
    "iluuu1994": "Oops, I din't merge from the develop branch, sorry.\n. ",
    "localheinz": "Duplicate of #994.\nHey, @codeguy, since you just applied for membership to PHP-FIG, how about sorting out the PRs stacking up here? :wink: \n. @codeguy \n:+1:\n. ",
    "mrzmyr": "How did you solve it ? \n. ",
    "bjarneo": "Wow, this was all wrong\n. ",
    "toby-griffiths": "Thanks for the reply, @silentworks ... but I'm confused.  It looks like the dispatcher will loop through multiple routes until one returns true.\nThe above suggested solution will only return the first of the matching routes, won't it?\n. Does that make it worth including this minor update?\n. ",
    "raisiqueira": "Thats my solution ->\n$app->get('/admin', function() use($app){\n    $adminView = $app->view();\n    $adminView->setTemplatesDirectory(ADMIN_VIEWS);\n    $app->render('layout.php',array('pagina'=>'login'));\n});\n. ",
    "ptcong": "In almost routing systems it should be same.\n. @codeguy \nI can change to 'cache.default' => ... and 'cache.drivers' => ... but if have many keys, it will be @@ because need copy paste parent key more times.\n. Sorry, missing\nExpect:\nphp\n'cache' => array(\n        'default' => 'File',\n        'drivers' => array(\n            'File' => array(\n                'cache_dir' => STORAGE_PATH.'/cache',\n                'expires'   => 600,\n                'prefix'    => '',\n            ),\n            'Memcached' => array(\n                array(\n                    'host'   => '127.0.0.1',\n                    'port'   => 11211,\n                    'weight' => 100,\n                ),\n            ),\n            'Memcache' => array(\n                array(\n                    'host' => '127.0.0.1',\n                    'port' => 11211,\n                ),\n            ),\n        ),\n    ),\nBut currently, it become\nphp\n'cache' => array(\n        'default' => 'File',\n    ),\n. should use this for tests @silentworks \nMy config has many entry, cache is an entry for cache.\nphp\n$original = array(\n    'cache' => array(\n        'default' => 'Memcached',\n        'drivers' => array(\n            'Memcached' => array(),\n            'File' => array(),\n        )\n    )\n);\n$expected = array(\n    'cache' => array(\n        'default' => 'File',\n        'drivers' => array(\n            'Memcached' => array(),\n            'File' => array(),\n        )\n    )\n);\n$con = new ConfigurationHandler;\n$con->setArray($original);\n$con->setArray(array(\n    'cache' => array(\n        'default' => 'File',\n    )\n));\n$this->assertEquals($expected, $con->getAllNested());\n. ```\n1) ConfigurationHandlerTest::testMergeArray\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n     'cache' => Array (\n         'default' => 'File'\n-        'drivers' => Array (...)\n     )\n )\n....slim/tests/ConfigurationHandlerTest.php:85\nFAILURES!                           \nTests: 9, Assertions: 11, Failures: 1.\ndev:slim ptcong$ \n```\nThis is my resut. i just updated to newest version of develop branch. \n. @silentworks, /cc @codeguy \nI just try to use, it seem works fine.\n``` php\n    protected function mergeArrays()\n    {\n        return call_user_func_array('array_replace_recursive', func_get_args());\n    // $arrays = func_get_args();\n    // $merged = array();\n\n    // foreach ($arrays as $array) {\n    //     foreach ($array as $key => $value) {\n    //         $merged = $this->setValue($key, $value, $merged);\n    //     }\n    // }\n\n    // return $merged;\n}\n\n```\nBut in the case, tests is failed.\n``` php\n        // test 2\n        $original = array(\n            'key1' => array(\n                'sub1' => 1,\n                'sub2' => array(\n                    'E1',\n                    'E2',\n                    'E3',\n                ),\n            )\n        );\n        $expected = array(\n            'key1' => array(\n                'sub1' => 1,\n                'sub2' => array(\n                    'E5',\n                    'E6',\n                )\n            )\n        );\n        $con = new ConfigurationHandler;\n        $con->setArray($original);\n    $con->setArray(array(\n        'key1' => array(\n            'sub2' => array(\n                'E5',\n                'E6',\n            )\n        )\n    ));\n\n```\nIts results is\n``` php\nArray\n(\n    [key1] => Array\n        (\n            [sub1] => 1\n            [sub2] => Array\n                (\n                    [0] => E5\n                    [1] => E6\n                    [2] => E3\n                )\n    )\n\n)\n```\nShould be replace or merge arrays if its keys are integer ? \nI mean, for merge results should be \nphp\n        $expected = array(\n            'key1' => array(\n                'sub1' => 1,\n                'sub2' => array(\n                    'E1',\n                    'E2',\n                    'E3',\n                    'E5',\n                    'E6',\n                )\n            )\n        );\nTell me, i will make a PR for this.\n. Check this here\n. I don't think so @codeguy, this method like array_replace_recursive, but merge when element's key is integer. Not separate settings with _ instead of . ??\n. ",
    "JoeBengalen": "If you want to support both urls (with and without trailing slash) you could add or remove the slash in a middleware layer to make sure it matches the route you expect.\n. Note that the array short syntax requires PHP 5.4. Slim seems to also support version 5.3\n. Ah my mistake. I looked at the master requirements ;)\n. For psr-4 see #1075\n. Also, would you like to add a sub namespace? Most packages start with {vendor}\\{package}\\ as namespace. Would SlimPHP\\Slim\\ fit in this case? Other repos from the Slim Framework could then use the same vendor name (eg SlimPHP\\Session\\)\n. @codeguy, good reason to wait. Shall I close this pull for now? Or do you wanna keep it open.\n. Maybe I am wrong, but I thought the map() was a public method that could be used to set a route to multiple methods: $app->map(['PUT', 'GET'], {route}, {handler});.\nThe mapRoute() was for internal handling of both map() and all other method methods (put, get, delete, etc)\n. I agree method chaining gives the nicest API. \nAltough I do think you need to document this solution well,. Chaining options to add $mw and a name does not become clear when using the $app->get() method, as it does not become visible as an argument.\n. It also says Resposne instead of Response \n. In the method \\Slim\\App::resolveCallable() you perform a method_exists() check on objects created outside of the Pimple, but not on objects that came from the Pimple, which should be done as you cannot  be sure the method you are going to call does actually exist.\nThis PR makes sure that the method being called is checked for existance in both objects coming from Pimple as well as other objects.\n. In case it is not clear what I mean, an example:\n``` php\n$app = new \\Slim\\App();\nclass Foo\n{\n    public function bar($request, $response, $args)\n    {\n        return $response->write('Foo::bar() called!');\n    }\n}\n$app['foo'] = function() {\n  return new Foo();\n};\n$app->get('/test', 'foo:bar');     // This calls Foo::bar()\n$app->get('/test', 'foo:unknown'); // This first resulted in a PHP error, with the PR an InvalidArgumentException is thrown.\n``\n. Also as I created the example, this came to mind: Since theInvalidArgumentExceptionis thrown from within the closure, which will not be called immediately, it should maybe be aRuntimeExceptioninstead?\n. Im not too experienced with PHPUnit, but gave it a shot. Please let me know if the tests are good enough.\n. Maybe Im missing somehting, but Slim 3 middleware MUST be a callable. What does thisMiddleware\\Callback` improve?\nhttp://docs-new.slimframework.com/concepts/middleware/\n. Ah I see. There's a type in the OP then. It says its intended for Slim 3\n. That is because both of them do not return an instance of them selves. This should be changed in my opinion. Chaining as in the example given above should be possible.\nI can make a PR of that tonight if you like @codeguy \n. Haha I noticed ;)\n. On line 375 of App.php there is a typo. It returns the Response, its not throwing.\n. The difference in behaviour of returning and throwing an Exception is if the middleware stack gets called or not. On returning if will travel all the way down and up the stack. On throwing the Exception it will not and go straight to App::run().\nI think returning will be fine, but the difference should be considered. My vote will be returning, as I never liked the way an Exception was used to stop the application heren.\n. The other point @jenssegers made:\nphp\necho new Slim\\Http\\Uri('', 'www.example.com');\n// result -> www.example.com:80/\nThe port 80 is visible because the method hasStandardPort() wont reconize an empty scheme. It only checks for schemes http and https. This is easely solved by:\n``` php\nprotected function hasStandardPort()\n{\n    return (($this->scheme === 'http' || $this->scheme === '') && $this->port === 80) || ($this->scheme === 'https' && $this->port === 443);\n}\n// or more readable\nprotected function hasStandardPort()\n{\n    $defaultPorts = [\n        '' => 80,\n        'http' => 80,\n        'https' => 443,\n    ];\nreturn isset($defaultPorts[$this->scheme]) && $defaultPorts[$this->scheme] === $this->port;\n\n}\n```\nDo you also want this changed? @codeguy \n. But what if no scheme is present? I can take a look at this tomorrow if you like. (Internet is down tonight :S)\nAlso i noticed earlier that getPath() should return '/' if empty in the new psr changes.\n. @codeguy \nphp\n/**\n     * Retrieve the port segment of the URI.\n     *\n     * If a port is present, and it is non-standard for the current scheme,\n     * this method MUST return it as an integer. If the port is the standard port\n     * used with the current scheme, this method SHOULD return null.\n     *\n     * If no port is present, and no scheme is present, this method MUST return\n     * a null value.\n     *\n     * If no port is present, but a scheme is present, this method MAY return\n     * the standard port for that scheme, but SHOULD return null.\n     *\n     * @return null|int The port for the URI.\n     */\n    public function getPort();\nSo if no port AND no scheme are given null MUST be returned. Only problem is: in the current implementation there is no way of knowing if a port was given, or the constructor default of 80 is set.\nThe issue is fixed BTW\n. You mean if $port === 80 assume it's not given?\nThen the it does not work properly at this time:\n``` php\n$uri = new Slim\\Http\\Uri('', 'www.example.com');\nvar_dump($uri->getPort());\n// result -> (int) 80 (SHOULD BE NULL)\n```\n. I tend to agree that the port should be decided on getting it, not on setting. But only for the port as others need to be returned as an empty string anyway.\nI will try this out in a branch and see if you like it.\n. I fucked this up haha\n. Will look at the latest PSR interface and update the Uri in a separate branch!\n. It's maybe not what the Pimple\\ServiceProviderInterface is ment for in the first place*, but it works quite nice I think.\n* ServiceProviderInterface can be used to register some services and parameters on $pimple.\n. @lalop That is exactly what the Pimple\\ServiceProviderInterface is (mis)used for now. To register the container into the route. So you do only have a single instance of Pimple\\Container which is Slim\\App itself.\n. @akrabat That would be a ContainerAwareInterace then, which can be implemented by a ContainerAware trait. But then you are encouraging injecting the container into an object, which is discouraged by pimple itself.\nBottomline: With keeping Slim simple I understand the choice of using the Pimple\\ServiceProviderInterface in this case, just wanted to point it out to keep in mind if the same situation is encoutered again. Then it could be wise to create the ContainerAwareInterface.\n. Not that I can think of. You will always need the Pimple\\Container instance to resolve the 'callable' middleware. Injecting it to the route is indeed the most clean way to do this I think.\n. @lalop Because callable middleware does only need the container if it is a closure.\n. I like the idea of keeping the container outside of the Route, but I certainly do not like the inconsistent API\nHaving to wrap the 'callable' in a extra method is inconvenient. Not because of the typing, but because of the inconsistant API. You are calling the add() method twice. One time you have to wrap it and the other time not. You cannot directly see that the add() method is called on a different object. \nHaving to use the (as it looks) same method in two different ways seems not right to me.\nphp\n$app->add('foo:bar');\n$app->get('/', 'this:that')->add($app->resolveCallback('foo:other'));\nThe difference with the non middleware 'callable' (2nd arg of get()) is less of a concern to me.\n. Agreed!\n. Do not forget to use the callableResolver for App::add() as @jaapverloop pointed out ;) Or should I add this in a separate pull request.\n. Request is following the PSR standard.\n. Your proposal could some in handy indeed. POST always over GET.\nHow do you see the function widthAddedParameter()? Will you append strings to eachother? Adding an array value to a string value. How would that behaviour be? Just some examples.\n. Clear. Would be a nice addition then ;)\n. I don't think $_SERVER should be used in this direct way. Why not use the same structure as cookies and headers?\n. If this is OK I will add tests for the cases shown above.\n. @codeguy Tests updated!\n. Haha I already found that typo. Hooray for unit testing ;)\n. Bit me bein autistic, but it is more consistent :p\n. Or do you want the files collection as a service? Eg:\nphp\n$this['files'] = function ($c) {\n    return new Collection($_FILES);\n};\n. I thought there has been an pull request of this before, but it was denied because the was the expected behaviour as is.\n. Why not simple create middleware for this that updates the Request object? You could use the withParsedBody(array $filteredPostData) and withQueryParams(array $filteredGetData).\n. The whole point about psr7 is that you can swap them out. So the application should expect the psr7 interface, not some slim interface.\n. @jeremykendall You can add the interfaces, but you cannot use them to typehint in Slim objects and expect them to be returned from middleware, else you will still loose the option to swap the psr7 messages objects out for others.\n. I you haven't started yet, I could pick this up tonight if you like!\n. Maybe you could make it optional as the Config object implements ArrayAcces anyway.\nPersonally I do like to Config object and use it for much more than the 6 Slim options ;)\n. Sleepy me got the wrong exception -_-\n. @lalop He did not, codeguy did. If I remember correctly he did it to prepare the separation of the Http classes into its own repo.\nEdit:\nOhw nvm we are talking about the Interface ... But the answer is actualy the same. Codeguy moved the Collection class into Http, so it is consitent to put the Interface into Http as well.\n. I do not see what this gives us ... Why not calling the callable on the returned value? Why does it have to happen within the Request object?\n. Why? Maybe its a good choice, I dont know. Never really used it before. It just feelsa bit weird that the whole Slim framework is about the same size as only the Container being used. I like the small footprint of Pimple.\n. I'd say do NOT implement a common way to configure the container, for the reason you gave; They are all so different.\nFor queston 2 I do not really care. I never use the container trough slim, but use the container directly.\n``` php\nclass Controller\n{\n  public function __construct(Model $model)\n  {\n     $this->model = $model;\n  }\npublic function index($model)\n  {\n     $this->model->doSomething();\n  }\n}\n// Example in Pimple\n$container['database'] = function() {\n  return new PDO(...);\n};\n$container['model'] = function ($c) {\n    return new Model($c['database']));\n};\n$container['controller'] = function ($c) {\n    return new Controller($c['model']));\n};\n$app = new Slim\\App($container);\n$app->get('/', 'controller:index');\n```\n. What does it complicate? using a different DIC is optional.  Default is still pimple here. Only difference here is how you get to an entry. That is different, but certainly not more complicated. Using a specified method instead of array access. \nThe container being a separate object as the app makes it more clear. Different functionality - different class. More separation of concerns.\n. Why did you make the Container final? I hate final classes xD. You will always come up to a point where you want to extend it. Especially in such a framework I would not make a class final.\n. Al right I can get into that \"Make your classes always final, if they implement an interface, and no other public methods are defined\".\nAnother point I want to mention; would it be more elegant to prevent the try catch statement in the get($id) method? I see we have to throw a different exception then Pimple does, but wouldn't is be nicer to check for ourselves (using offsetExists) before calling the offsetGet?\nphp\npublic function get($id)\n{\n    if (!$this->offsetExists($id)) {\n        throw new NotFoundException(sprintf('Identifier \"%s\" is not defined.', $id));\n    }\n    return $this->offsetGet($id);\n}\n. You are mixing to_resolve and toResolve\n. I think I do prefer the : separator. I've seen the dot being used as some sort of namespacing/nested array notation. I would like to be able to define the controller as controller.Foo:home, where controller is used to group all controllers together.\nAside from that, like you said the : looks like the default ::, which make sense to me as it used for the same purpose: defining a callable.\n. Already done in my WIP PR ;)\n. As far as I know Slim does not support ANY database driver at all. There is no code included that has anything to do with a database. So I guess you are using some other database package which is throwing the exception. Can you show the initialization code of conn and the code where the error occurs?\nThe error looks like a response from the MS SQL server though (or the PDO driver). Are you calling a method that is not supported by MS SQL?\n. Another tip for you: Your code doest throw exceptions when there is an error trying to connect. You have to set the attribute on connecting, not afterwards.\n``` php\n// wont throw connection errors\n$conn = new PDO('sqlsrv:server =[info here]; Database = [info here]', '[info here]', DB_PASSWORD);\n$conn->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION );\n// will throw connection errors\n$conn = new PDO('sqlsrv:server =[info here]; Database = [info here]', '[info here]', DB_PASSWORD, [\n  PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n]);\n``\n. The error is in JavaScript I guess? OR did you make a PHP class namedJSON`.\nI do not think the header is the problem. It just tells the requester to interpret the response as json. The error just says you are not returning valid json. Can you post responded string?\nEDIT:\nOn further thought: If you are doing an ajax request from JavaScript without a content type it just act as text, meaning you have to JSON.parse the json response string into an object.\nWhen the json content type is defined the ajax call automaticly detects is is json and turns it into an object for you. So I think you are calling JSON.parse on an already JavaScript object, instead of a json string.\n. Glad to help ;)\n. Is this going to be implemented in v3.0.0?\n. Separation of concerns. Separating running the application and sending the response. Makes it easier to override one of those.\n. Another solution would be to put it into a separate Responder class:\nhttps://github.com/slimphp/Slim/compare/develop...JoeBengalen:feature-responder?expand=1\n. At least we have to wait till psr-7 is Accepted\n. @r3wt Mind explaining why?\n@geggleto I'm okay with putting this up for 4.0.\n@lalop Not sure about traits. They can be handy is some cases, but in this case the object would still be tightly coupled. One reason to separate can be so you can use the functionality optional and separately.\n. Called from where?\n. What else did you expect? It is not called within Slim. The method Slim\\Slim:call() will catch it if you call halt() within the application.\nI think seeing the context you should put this code in middleware layer\n. A I see that's not supported in Slim v2. I have only used Slim v3 where it is possible to add middleware application wide.\nI there no other way to call halt() within Slim?\n. Reading about them that sounds like a good option ;)\n. Correct, the check is left from an earlier version of the psr-7 I guess.\n. @namaless I agree the port should not be included if default, as also stated in the psr-7 specs, but the default port check happens withing the getPort() method now.\n. There are several methods in the Request class that are not in the psr-7 spec. Be aware those cannot be used in the application if you want to keep interchangeability of other psr-7 compliant implementations. Maybe these methods should be listed in the docs? Or make a note in those docblocks?\n- getOriginalMethod\n- isMethod\n- isGet\n- isPost\n- isPut\n- isPatch\n- isDelete\n- isHead\n- isOptions\n- isAjax\n- isXhr\n- getContentType\n- getMediaType\n- getMediaTypeParams\n- getContentCharset\n- getContentLength\n- withAttributes\n- getIp\nSame goes for the Response, Uri and Body classes.\n. Need some input from @codeguy for the other points\nHandling the path in the Uri object. How do you want to implement this? What is exactly the use case of the basePath?\n```\n      (from withPath())\n     * The path can either be empty or absolute (starting with a slash) or\n     * rootless (not starting with a slash). Implementations MUST support all\n     * three syntaxes.\n     *\n     * If the path is intended to be domain-relative rather than path relative then\n     * it must begin with a slash (\"/\"). Paths not starting with a slash (\"/\")\n     * are assumed to be relative to some base path known to the application or\n     * consumer.\n  (from getPath())\n * Normally, the empty path \"\" and absolute path \"/\" are considered equal as\n * defined in RFC 7230 Section 2.7.3. But this method MUST NOT automatically\n * do this normalization because in contexts with a trimmed base path, e.g.\n * the front controller, this difference becomes significant. It's the task\n * of the user to handle both \"\" and \"/\".\n\n  (from __tooString()\n * - The path can be concatenated without delimiters. But there are two\n *   cases where the path has to be adjusted to make the URI reference\n *   valid as PHP does not allow to throw an exception in __toString():\n *     - If the path is rootless and an authority is present, the path MUST\n *       be prefixed by \"/\".\n *     - If the path is starting with more than one \"/\" and no authority is\n *       present, the starting slashes MUST be reduced to one.\n\n```\nHow do you want to implement the UploadedFile handling? I remember you had some ideas about that previously. You also started a repo I noticed. Do you want to use that? Or was that before the UploadedFileInterface was introduced in psr-7.\n. @pine3ree Internally slim only uses method from the psr spec. At least that was/is the the goal. For example $response->write() was replaced with $response->getBody()->write() internally. The extra \"helper\" methods are only ment for the developers building their app on Slim.\nThat aside, I do not think implementing and using methods that are not in the interface is a bad thing. Some of them may come in quite handy in some cases.\nMy point is that you cannot see, without going through the interfaces them selves, those methods are not part of the psr spec. So a developer may not know that he cannot use another response object whenever he wants to. That's why I said it may be a good idea to point that out somewhere. Either in the Slim documentation or within the phpdoc itself (or both).\nAnother option could be to make tweo separate objects. One implementing only the psr spec, and another, extending the first one, adding some useful \"helper\" methods. That way people can choose whether to use the extra methods or just the basic implementation of the psr spec.\nI agree external libraries should only rely on the official interface.\nAll that said, that was not the purpose of this PR haha. I just made some updates regarding the updated version of the psr-7 spec, now that it is almost finalized (currently being in voting stage).\n. @akrabat Ah ok that makes sense about the absolutePath. Also I will add a note in the docblocks for non psr methods.\nI will continue this PR after this weekend ;) \n. Added notes to all non psr-7 public methods, apart from the static factories and constructors.\n. Updated the path handling in Uri. @codeguy @weierophinney, can you please review if this is indeed the expected behaviour? I had some doubts about the base path implementation!\n``` php\n$uri = $this->uriFactory();\n$this->assertEquals('https://josh:sekrit@example.com/foo/bar?abc=123#section3', (string) $uri);\n// add / prefix to path\n$uri = $uri->withPath('bar');\n$this->assertEquals('https://josh:sekrit@example.com/bar?abc=123#section3', (string) $uri);\n// uses the base path as $path is relative\n$uri = $uri->withBasePath('foo/');\n$this->assertEquals('https://josh:sekrit@example.com/foo/bar?abc=123#section3', (string) $uri);\n// ignores the base path as $path as absolute\n$uri = $uri->withPath('/bar');\n$this->assertEquals('https://josh:sekrit@example.com/bar?abc=123#section3', (string) $uri);\n```\n. Psr-7 is final! https://github.com/php-fig/http-message/releases/tag/1.0\n. @akrabat, I'm still not sure about the Uri $path implementation. I just emailed Matthew, so I hope that helps him to confirm the current implementation.\nAbout the fileParams, I made a PR of it before on it ans Josh closed it and said he had his own ideas about implementing it. Not sure if any of this changed, but I want to hear from him before coding it. Also I am afraid I will not have much time in the upcoming few weeks to work on this.\nAside from that I think the PR is pretty much completed. @akrabat can you please review?\n. @weierophinney the email from here: matthew@weierophinney.net\nBut since you are looking here anyway ...\nHellow Matthew,\nWhile updating the Slim v3 framework to the final psr-7 interfaces I came to a point where I was not certain what to do. It involves the handling of the $path in the Uri implementation. I chatted with Rob Allen (@akrabat) and he adviced me to contact you about it, so here I am :)\nSlim has a $basePath in the Uri to link to the index.php file: http://example.com/my-app/, the $basePath is /my-app and '/' is the path used in $app->get('/', \u2026. I guessed \"relative to some base path known to the application or consumer\" was this case.\nI was not too sure how to implement this. Where should the adding of the base path happen? The docblock mentions it in the 'withPath()' method, but I guess 'getPath()' should NOT include the base path. So it makes sense to only add the base path in the '__toString()' method. Am I right?\nCurrently I implemented in the following way. I'd like to get confirmation from you that this is indeed the right behaviour.\n``` php\n $uri = $this->\nuriFactory();\n$this->assertEquals('https://josh:sekrit@example.com/foo/bar?abc=123#section3', (string) $uri);\n// add / prefix to path\n$uri = $uri->withPath('bar');\n$this->assertEquals('https://josh:sekrit@example.com/bar?abc=123#section3', (string) $uri);\n// uses the base path as $path is relative\n$uri = $uri->withBasePath('foo/');\n$this->assertEquals('https://josh:sekrit@example.com/foo/bar?abc=123#section3', (string) $uri);\n// ignores the base path as $path as absolute\n$uri = $uri->withPath('/bar');\n$this->assertEquals('https://josh:sekrit@example.com/bar?abc=123#section3', (string) $uri);\n```\nFYI: the PR in which these changes are done: https://github.com/slimphp/Slim/pull/1228\nCopied from the interface:\n```\n      (from withPath())\n     * The path can either be empty or absolute (starting with a slash) or\n     * rootless (not starting with a slash). Implementations MUST support all\n     * three syntaxes.\n     *\n     * If the path is intended to be domain-relative rather than path relative then\n     * it must begin with a slash (\"/\"). Paths not starting with a slash (\"/\")\n     * are assumed to be relative to some base path known to the application or\n     * consumer.\n  (from getPath())\n * Normally, the empty path \"\" and absolute path \"/\" are considered equal as\n * defined in RFC 7230 Section 2.7.3. But this method MUST NOT automatically\n * do this normalization because in contexts with a trimmed base path, e.g.\n * the front controller, this difference becomes significant. It's the task\n * of the user to handle both \"\" and \"/\".\n\n```\n. I don't know why it was marked as spam, but thnx for the reply.\nFor the interest of others: He answered the examples are 'correct' and 'reasonable', so thats good :)\nAlso he said this about the question of where to add the base path:\n\"The specification has no \"base path\" awareness. So any value you pass\nto withPath() is expected to replace the current path.\nWe allow for both relative paths (those not prefixed with \"/\") and\nabsolute paths (those that are). In the case of a relative path,\nhowever, if you cast the URI to a string, it MUST prefix with a \"/\" in\norder to separate the authority and path components of the URI.\"\nSo again, if this PR is reviewed it will be ready for merge! The $fileParams will have to be added later on.\n. May be worth looking at, but it has to be resolved into a callable before any middleware can be added on top. So not sure if this is possible. Also we are not just talking about controllers, middleware also needs to use the same resolver.\n. You can also get the container once ofcourse.\n``` php\n$container = $app->getContainer();\n$container['foo'] = ...\n$container['bar'] = ...\n. php\n$app = new Slim\\App();\n$container = $app->getContainer();\n$container->register(new SomeServiceProvider($app));\n``\n. I fail to see how it would be a 'workaround' to be honest. Looks like pretty clean code to me.\n. @jenssegers And how would you know what the 'correct' method is in the container to register the service? There is no method for it in the container interface. That's the whole point.\n. you did a composer update? container-interop is a new dependency.\n. Ohw haha thats a stupid mistake xD\n. ShouldOPTIONS` be included?\n. It is indeed, but should it be? Has a whole different meaning compared to the other http methods.\n. True, just not too sure about what would be more useful. \nAlso in Slim v2 there is a method called any. Isn't this the same functionality?\nhttps://github.com/slimphp/Slim/blob/master/Slim/Slim.php#L563\n. +1\n. How do you want to use the second stack? Can you not just do it like this?\nphp\n$middleware = function ($request, $response, $next) {\n  // before\n  $newResponse = $next($request, $response);\n  // after\n  return $newResponse;\n};\nOr do you want the second stack so you can first call the first global stack, then the router stack and finally the second global stack?\n. The wiki is not really being maintaned ...\nMigration guide is in the v3 docs:\nhttp://www.slimframework.com/docs/start/upgrade.html\n. Not sure if it is smart to depend on version dev-master. Why not specify version 0.5?\n. Oh OK, thought it was the update from 0.4 to 0.5. Makes sense now ;) But it would be nice if for the final version of Slim we could depend on a specific version of fast-route.\n. Why can't you just mock the container?\n. Do you mean helper methods to define the error handlers? Or a helper method to call an error yourself from any part of you code.\n. That is the expected behaviour as far as I know.\n. That is by design:\nhttp://www.slimframework.com/docs/concepts/middleware.html\nRouting happens in the app (most inner layer)\n. Should this exception also be more specific?\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L82\n. @geggleto You mean an implementation of this?\nhttps://github.com/container-interop/container-interop/blob/master/src/Interop/Container/Exception/ContainerException.php\n. Not sure if that would be right. Its not being thrown by the container, its an error from the application itself. It also requires slim to have its own implementation of the ContainerException.\nI was more thinking of an InvalidArgumentException, as you should have passed an array or instance of ContainerInterface.\n. maybe change it to a notFoundHandlerFactory?\n. FYI; getContents() does not reset the pointer in the stream and only returns the remaining content. When casting to string it does reset the pointer so the whole body content is returned.\nOh nvm, this seems to be an old issue ...\n. Instead of implemented such logic that makes it just more complicated, can't you just introduce a single  configuration option (something like callMiddlewareBeforeDispatch) to indicate what behaviour you want? This seems to me like a much simpler implementation\n. Well Slim SHOULD parse the header following the psr-7 standards:\ngetHeader() should return string[] and getHeaderLine() should return string (comma-separated string of the values). So I would indeed expect the accept values to be exploded by the comma.\nI can confirm that getHeader('accept') returns:\nphp\narray (\n  0 => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n)\nIn fact is seems no parsing of the headers happens at all. Is this just a forgotten feature or something?\n. Maybe something with the pointer already being at the end after parsing the body?\n. Or look at phly:\nhttps://github.com/phly/http/blob/master/src/PhpInputStream.php\nHe puts every read a cache property so it can be read again from there if needed.\n. Not sure if you're on the right track here. I think no header should result in an error. Now you're just prevented the error instead of fixing the actual problem it seems.\nWhy is the error thrown and what error exactly?\nAlways removing some headers seems like no option to me as sometimes you might need them.\n. If the Transfer-Encoding header really is a problem, why does Guzzle send it?\nI feel like this is not a problem in Slim we should try to solve. Slim does its job apparently: If the Transfer-Encoding header is there it should output it. If Transfer-Encoding causes errors it should not be in the Response object.\n. Will stream_copy_to_stream be faster than appending each string being read to a cache property like phly does?\nhttps://github.com/phly/http/blob/master/src/PhpInputStream.php\n. Should be a Slim\\Exception\\Pass\nhttps://github.com/slimphp/Slim/blob/2.x/Slim/Slim.php#L1057\n. If its just settings (and not pimple services) you want from the config file you can do\n``` php\nconfig.php\nreturn [\n  'key' => 'val'\n];\nindex.php\n$app = new Slim\\App(require 'config.php'); // note the require here that you forgot\n```\nBut like akrabat said; services will have to be added to the container, not the app.\n. That should indeed be\n``` php\n// slim helper function\n$res->write('Bad Request')\n// psr7 proof\n$res->getBody()->write('Bad Request')\n// or a total new body\n$res->withBody(new Body('Bad Request'))\n```\n. @akrabat Which of the above versions would you like in the migration guide?\n. Look to me like your example should work fine.\nYou mean that you GET action is called while you are sending a POST request? That should not be.\n. That means that the result getPath() will be different too. I think following the psr that should not happen? Only specific in the __toString() method.\n. Kinda like the idea of the flexible parameters, although Reflection may impact the performance a bit.\nTherefore I think it should not be the default invocation strategy, but having the option available would be nice.\nAlso maybe a better name would be ParameterBased?\n. Noooo. Object are always passed by reference.\nAlso closures are bound to app, so you do not have to pass $app at all and can just use $this\nEDIT: Not sure about the last line though. This could also be just true for slim v3.\n. This works fine:\n``` php\n$var = new ArrayObject();\n$test = function($value) use ($var) {\n    $var['test'] = $value;\n};\n$test('blah');\nvar_dump($var); // contains the test value\n``\n. Why drop php 5.4?\n. For a server side implementation you should be save to useServerRequestInterface. TheRequestInterface` is meant for client implementation.\n. You could try https://github.com/slimphp/Slim-Flash. Not sure if it is completely compatible yet.\nAt least you have to change $this['flash'] to $this->flash.\nAlso I guess the question should be in the slim flash repo.\n. Wont $request->getUri()->withPath('books') just work? You could remove the query and fragment part, but that has nothing to do with the basePath.\nAlso in your code sample, why do you declare the local $basePath? You are not using it.\n. Ah I think I see the problem now;\npathFor() returns a preceding slash, which is why the base path is ignored when using it directory in $uri->withPath().\n``` php\n$app->get('/test', function ($request, $response, $args) {\nvar_dump((string) $request->getUri()->withPath('books'));\n// -> http://localhost/dev/slim/index.php/books\n\n$path = $this->router->pathFor('books');\nvar_dump((string) $request->getUri()->withPath($path));\n// -> http://localhost/books\n\n$basePath = $request->getUri()->getBasePath();\nvar_dump((string) $request->getUri()->withPath($basePath . $path));\n// -> http://localhost/dev/slim/index.php/books\n\n// ltrim would work here ...\nvar_dump((string) $request->getUri()->withPath(ltrim($path, '/')));\n// -> http://localhost/dev/slim/index.php/books\n\n});\n$app->get('/books', function ($request, $response, $args) {})->setName('books');\n```\nPoint being the pathFor and Uri not working very well in relation to the basePath.\n. Did you run this locally? Build failed:\nPHP Fatal error:  Declaration of Slim\\Handlers\\Strategies\\RequestResponse::__invoke() must be compatible with Slim\\Interfaces\\InvocationStrategyInterface::__invoke($callable, Psr\\Http\\Message\\ServerRequestInterface $request, Psr\\Http\\Message\\ResponseInterface $response, array $routeArguments) in /home/travis/build/slimphp/Slim/Slim/Handlers/Strategies/RequestResponse.php on line 19\n. Well I do not fully understand what you are trying to solve here.\nWhen would the callable lead to a deprecated warning?\nAnd what is handler_order? I cannot find it as PHP function.\n. Ahh, I think I found the problem now.\nSince you are using the syntax class::method PHP will return true for is_callable() whether the method can actually be called staticly or not. This is why CallableResolverAwareTrait::resolveCallable() returns the string instead of a \\Closure.\nFurther on in the InvocationStrategyInterface::invoke() a callable is expected. Now PHP does not reconize the string as callable because the method cannot be called staticly.\nSo the root if the problem lies in that PHP thinks it can call a string formatted as class::method in is_callable(), but not when you typehint for callable.\n. Ah well same thing. Although I do not understand the following code in you example as you are not passing a string:\nphp\nif(is_string($callable) && strpos($callable, '::') !== false){\n    $callable = preg_split('/::/', $callable, 2);\n}\nBut back to the case:\nPHP returns true for is_callable([\\App\\Controller\\Test::class, 'hotelList']), because it only checks if there is a method named hotelList in the class App\\Controller\\Test.\nBu when passed as argument to a method which expectecs a callable (typehint) PHP sees that [\\App\\Controller\\Test::class, 'hotelList'] is not actually callable, because the method is not static and cannot be called.\nDo you see the difference?\nSo CallableResolverAwareTrait::resolveCallable() returns the array as it thinks it is callable. But when the same array is passed to the FoundHandler is finds the array is not callable at all, which is where the error comes from.\n. No, I think InvocationStrategyInterface MUST receive a callable. If you want a different notation you should solve that with a custom CallableResolverInterface implementation.\n. Maybe a final check should happen in CallableResolver::resolve() if $resolved is indeed callable. \nCurrently, anything you pass that is not a string or callable will be returned without modification. And since the resolve() claims to return a callable at all times I think an Exception should be thrown if the resulting $resolved is not callable.\nAlso I agree on getting rid of the CallableResolverAwareTrait, since its not doing much anymore. Just performing a check (that is not even needed anymore?) and calling CallableResolver::resolve() on the passed argument.\nOne problem with your current implementation though! Closures will never be bound to the container since it wont get to the CallableResolver. CallableResolverAwareTrait::resolveCallable() will just return the Closure.\nApart from that I think this is an improvement :) Makes much more sense for the CallableResolver to be stateless (as you called it).\n. @ppetermann, good question ... It didn't change in this PR but was already bound to container instead of app. No sure where and why it was changed.\nAll given examples in de docs assume closures are indeed bound to app.\nEdit; found the confusion: Middleware is bound to the container, route callable bound to app.\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L237\nSo this PR should keep that same behaviour.\nCurrently this PR will break this behaviour.\nFirst in App the route callable will be bound to app: https://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L237\nBut in the CallableResolver it will be bound to the container (and overwriting the previous bound app)\nhttps://github.com/mnapoli/Slim/blob/simpler_callable_handling/Slim/CallableResolver.php#L74\nSo in the end route callable will be found to container instead of app, which if wrong.\nEdit2:\nAs @silentworks noted: RouteGroup binds the closure to app too:\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/RouteGroup.php#L61\n. Is it on purpose you update the basePath instead of the path?\n. So what url are you trying to change?\nEdit; For me this works fine\n``` php\n// requesting: http://localhost/dev/Slim/hello/me\n// where my index is in dev\\Slim\\\n$app->add(function (\\Slim\\Http\\Request $request, \\Slim\\Http\\Response $response, callable $next) {\n    var_dump($request->getUri()->getBasePath());\n    // -> /dev/Slim\nvar_dump($request->getUri()->getPath());\n// -> hello/me\n\nvar_dump((string) $request->getUri());\n// -> http://localhost/dev/Slim/hello/me\n\n$basePath = $request->getUri()->getBasePath();\n$uri = $request->getUri()->withBasePath(strtolower($basePath));\n$newreq = $request->withUri($uri);\n$response = $next($newreq,$response);\n\nvar_dump((string) $newreq->getUri());\n// -> http://localhost/dev/slim/hello/me\n\nreturn $response;\n\n});\n```\nBut I am not sure what you are trying to solve by making it lower case. Because if the directory is has a capital in it, you have to put that capital in the url or he wont find it.\nSo if I called http://localhost/dev/slim/hello/me, I would also get Page not found, because the basePath if not extracted from the path.\n. Yeah that is indeed the current behaviour.\nSlim will not recognize the basePath, because the url does not match the path (as the case is different)\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Http/Uri.php#L198\nBecause windows is case insensitive the index.php is indeed found.\n. Really? For me its the other way around:\nhttp://localhost/dev/Slim/hello/joe - works\nhttp://localhost/dev/slim/hello/joe - fails (aka not found)\n. Its gets to slim because I'm running windows too so case doesn't matter. But I cannot reproduce your situation.\n. For me is fixes it! :)\n. and you have named the parameters including the [] at the end?\n. name them emailto[]\n. I just want to note that issues are meant for problems related to the Slim framework. Not to explain how postman works.\nPlease read the postman documentation.\n. Dont think this is Slim related. Try if you have the same behaviour outside of Slim. Also take a look at error_reporting\n. Ohw you using slim v2. I've never used that version myself so I cannot really help you with that. But looking at the code Slim should respect the error reporting level:\nhttps://github.com/slimphp/Slim/blob/2.x/Slim/Slim.php#L1408\n. handlerErrors() checks the error reporting level before throwing the exception. Try setting the error reporting level to 0 and try again. The exception should not be thrown.\nerror_reporting(0);\nNote. You should not leave error reporting at 0, but just to test it for now.\n. notation should be Controller:method, but that should work yeah.\nAlthough you may find it easier to have single route there with some regex instead of several pointing to the same action.\n. When does it freeze? If wont freeze as long as you do not get anything from the container. Following code works fine:\n``` php\n$app = new Slim\\App();\n$c = $app->getContainer();\n$c['environment'] = function ($c) {\n    return new Slim\\Http\\Environment($_SERVER);\n};\n$c['router'] = function () {\n    return new \\Slim\\Router();\n};\n$app->get('/', function () {\n    echo 'home';\n});\n```\nIndeed if you use the router you cannot override any used service anymore. Following code gives your error:\n``` php\n$app = new Slim\\App();\n$c = $app->getContainer();\n$app->get('/', function () {\n    echo 'home';\n});\n$c['environment'] = function ($c) {\n    return new Slim\\Http\\Environment($_SERVER);\n};\n$c['router'] = function () {\n    return new \\Slim\\Router();\n};\n```\n. Disagree. How do you want to add routes to the router if you want to set the router after setting the routes? Sounds a bit weird to me.\n. You should set your container before you start using any service from it (adding routes)\n. Amazingly enough unset seems to work lolz. But the router can stay the same if you dont you the pathFor method\n. In the docs you can read which settings must be defined:\nhttp://www.slimframework.com/docs/concepts/di.html\n. You can execute any callable, including Controller methods or invokable Actions.\n. So ... How is this Slim related?\n. This works for me:\n``` php\nclass ApiRequest extends Slim\\Http\\Request\n{\n}\n$app = new Slim\\App([\n    'request' => function ($c) {\n        return ApiRequest::createFromEnvironment($c['environment']);\n    }\n]);\n$app->get('/', function ($request, $response, $args) {\n    echo get_class($request); // ->  ApiRequest\n    return $response;\n});\n$app->run();\n```\n. The extended App also is fine for me:\n``` php\nuse Slim\\App;\nuse Slim\\Container;\nuse Slim\\Http\\Request;\nrequire 'vendor/autoload.php';\nclass ApiRequest extends Request\n{\n}\nclass MyApp extends App\n{\n    public function __construct()\n    {\n        $container = new Container([\n            'request' => function ($c) {\n                return ApiRequest::createFromEnvironment($c['environment']);\n            }\n        ]);\n    parent::__construct($container);\n}\n\n}\n$app = new MyApp();\n$app->get('/', function ($request, $response, $args) {\n    echo get_class($request); // ->  ApiRequest\n    return $response;\n});\n$app->run();\n```\n. Those are the only classes declared final. Both can very easily be replaced.\nThe callableResolver implements the CallableResolverInterface which has only a single method. No need to extend that. It can be replaced by registering your own callableResolver service (which must implement the same interface) in the container.\nThe container implements the Interop\\Container\\ContainerInterface and can be replaced by any other container by passing it into the Slim\\App() constructor. There is nothing in the container why you would need to extend it. Every defined service in there can be replaced or skipped by defining your own version of the service.\n. This will put the XML error on a single line instead of being nicely formatted\n. I do not know if it matters. I just wanted to point it out.\nPersonally I never use xml so I cant really be bothered. ;)\n. I think it would just be moving the Request::createFromEnvironment to something like Environment::createRequest(). Is that what you mean?\n. This works for me:\n``` php\n$app = new App();\n$c = $app->getContainer();\n$c['errorHandler'] = function ($c) {\n    return function ($request, $response, $exception) use ($c) {\n        return $c['response']\n            ->withStatus(500)\n            ->withHeader('Content-Type', 'text/html')\n            ->write('Something went wrong!');\n    };\n};\n$app->get('/', function () {  \n    throw new Exception();\n});\n$app->run();\n```\nThis will of course only work for exceptions, not for syntax errors.\n. But on line 84 it will check again?\nhttps://github.com/slimphp/Slim/pull/1515/files#diff-bf51d44b5bda6198e439b2067fc9cfb3L84\n. Why this change? What would is solve? Looks a bit weird to be. You cast the value to a string after you check is_string()?\nAlso this change does not force the value to be an array, which could break array_replace(). On the other hand; the old way could crash if the value cannot be casted to a string.\n. Do you have logs which give more detail?\n. naaaah, I ment the webserver or PHP logs. They most likely tell you what is wrong.\nMaybe its the namespace for the controller? It is in the Controller directory, but Controller is not part of the namespace?\n. Well, I guess that answers the question ...\n. Put the use at the top of the file. Also the part as MainController can be left out.\nBut please do not use this to debug your application. All the errors you got, have nothing to do with Slim.\n. Also I think you would need (new MainController())->index().\n. Pimple will inject $this, so in our case our own extended version of the container:\nhttps://github.com/silexphp/Pimple/blob/master/src/Pimple/Container.php#L113\n. Typo. Wit or with\n. Why the term Aware in the trait name?\n. Nope, look at the interface: https://github.com/php-fig/http-message/blob/master/src/ServerRequestInterface.php#L137\nIf I remember correctly array was chosen over UploadedFileInterface [], because it can be a \"tree\", not just a list of.\n. @gabrielzerbib Read the standard: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-7-http-message.md#16-uploaded-files\nExamples are given ;)\n. @vlakoff Since people are free to provide their own CallableResolverInterface implementation I'm not sure if you can ever be 100% sure if you statement will work. The given \"callable\" could be anything (type mixed)\nTherefore I would discourage the array syntax. If you want to pass multiple middlewares within the same add method, stick with the earlier idea of multiple arguments.\n. @sirber http://www.slimframework.com/docs/concepts/middleware.html\n. How about middleware that removes the index.php from the url?\n. Avoid such hacks ... If its only 3 chars missing check if the response body starts with a BOM.\n. I now have this same problem running on ubuntu with PHP7 builtin webserver\n$ php -S localhost:8080 api.php\nCalling http://localhost:8080/api/v1/hello\n```\nobject(Slim\\Http\\Environment)[109]\n  protected 'data' => \n    array (size=21)\n      'DOCUMENT_ROOT' => string '/home/martijn/Development/private-tables/public' (length=47)\n      'REMOTE_ADDR' => string '127.0.0.1' (length=9)\n      'REMOTE_PORT' => string '39830' (length=5)\n      'SERVER_SOFTWARE' => string 'PHP 7.0.4-7ubuntu2 Development Server' (length=37)\n      'SERVER_PROTOCOL' => string 'HTTP/1.1' (length=8)\n      'SERVER_NAME' => string 'localhost' (length=9)\n      'SERVER_PORT' => string '8080' (length=4)\n      'REQUEST_URI' => string '/api/v1/hello' (length=13)\n      'REQUEST_METHOD' => string 'GET' (length=3)\n      'SCRIPT_NAME' => string '/api/v1/hello' (length=13)\n      'SCRIPT_FILENAME' => string '/home/martijn/Development/private-tables/public/api.php' (length=55)\n      'PHP_SELF' => string '/api/v1/hello' (length=13)\n      'HTTP_HOST' => string 'localhost:8080' (length=14)\n      'HTTP_USER_AGENT' => string 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0' (length=76)\n      'HTTP_ACCEPT' => string 'text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8' (length=63)\n      'HTTP_ACCEPT_LANGUAGE' => string 'en-US,en;q=0.5' (length=14)\n      'HTTP_ACCEPT_ENCODING' => string 'gzip, deflate' (length=13)\n      'HTTP_CONNECTION' => string 'keep-alive' (length=10)\n      'HTTP_CACHE_CONTROL' => string 'max-age=0' (length=9)\n      'REQUEST_TIME_FLOAT' => float 1461626595.2633\n      'REQUEST_TIME' => int 1461626595\nobject(Slim\\Http\\Uri)[110]\n  protected 'scheme' => string 'http' (length=4)\n  protected 'user' => string '' (length=0)\n  protected 'password' => string '' (length=0)\n  protected 'host' => string 'localhost' (length=9)\n  protected 'port' => int 8080\n  protected 'basePath' => string '/api/v1/hello' (length=13)\n  protected 'path' => string '/' (length=1)\n  protected 'query' => string '' (length=0)\n  protected 'fragment' => string '' (length=0)\n```\nFor some reason SCRIPT_NAME contains the path instead of the filename, which results in an incorrect Uri instance.\nChanging it to SCRIPT_FILENAME on https://github.com/slimphp/Slim/blob/3.x/Slim/Http/Uri.php#L200 solves it in this specific case.\n. I don't know, it could be.\n. @akrabat  In a public/ folder\nhttps://github.com/JoeBengalen/private-tables\n. Pimple already has ArrayAccess implemented\nhttps://github.com/silexphp/Pimple/blob/master/src/Pimple/Container.php#L34\nEdit: Nvm I need to read first ;)\nI am against this though, I don't want to implement ArrayAccess on a different container.\n. For support please go to http://discourse.slimframework.com\n. Slim is psr7 compliant, you can easily use a different http implementation. \n. Just overwrite the request and response factories in the container.\nOr you could call the process and respond methods of App instead of run\n. How about setArgument and getArgument?\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Route.php#L216\n. @alexweissman the arguments are not part of the request. It is a property of the route. Exactly the same location as the proposed tags property.\nYou probably confused them with the attributes which are indeed at request level.\n. Just to reference;\nexisting arguments will not be overwritten but url arguments will be appended:\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Route.php#L275\nThere is already an example in the tests which used the arguments to set additional data:\nhttps://github.com/slimphp/Slim/blob/3.x/tests/AppTest.php#L1032\nHere the setter is used to specify a default value for a route argument:\nhttps://github.com/slimphp/Slim/blob/3.x/example/index.php#L37\n. You know upfront which argument name are gonna be set from the route parsing. So if you are not being very silly no problem can happen there.\nIf you really want a separate collection of stuff use a generic name like attribute (same as request), because it is a generic key value collection which can be used to store all kinds of stuff. No just tags.\n. withX is not acceptable if you ask me. withX implies modification if you compare it to psr7. If you create a method with such functionality if should be getRouteWithTag or getRouteMatchingTag or something like that.\n. But getHeaderLine could return empty and the getSize could return null, so isset(null) == false\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L383\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L385\n. bc break\n. Can you check the status in the response object of slim after running the application?  Just to make sure it is indeed slim doing something wrong and not the webserver altering the response status because it recognized the location header. \n. $app->run ($silent = true) returns the final response which you can check.\n. Haha yeah, I reread your post and noticed that.\nI had already removed it, hoping nobody would notice. Guess I was too late :disappointed:\n. No, but you can update the route in middleware before the action is determined.\nBut why would you need to? Just register multiple routes (one for each switch case in your example)\n. Why create an interface? We should implement container-interop/container-interop.\n. The first part sounds alot like zend-diactoros:\nhttps://github.com/zendframework/zend-diactoros/tree/master/src/Response\n. So what is the problem?\n. Just check for null before calling getName()\n. You mean like the PHP-DI Slim Bridge?\n. Throwable  should be handled by https://github.com/slimphp/Slim/blob/3.x/Slim/Handlers/PhpError.php\n. Can you look at this line:\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L341\nThere the choice is made which error handler to use.\n. It could work. I don't know if I will break anything with rawurlencode, other than the slashes.\n. I can try that\nIt has some weird behavior that request _uri \ud83d\ude12\n. whoops, I kinda forgot about this. Will do so tonight!\n. Updated!\nNote that getBasePath encodes the ' into %27\n. I do not like to have to methods doing the exact same logic.\nLike I said; Slim makes it pretty clear it supports PSR-7\nI do agree that adding this to our own docs might help some users. I guess the place to put it is under URI on page request\nBTW; Never retrieve the request from the container. Always use the one given to the callable.\n. You can get all registered routes from the router: Router::getRoutes() : Route[]\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Router.php#L237\nYou can use those to generate something you like.\n. Can you be a bit more specific? What doesnt work? Which version of Slim are you using?\n. Make sure the host supports htaccess and read docs about it. Just uploading the file might not be enough\n. What PHP version?\n. You could create middleware that strips the locale from the url in the request before the route is determined\n. It is supported, there just is no  shortcut method for it.\n$this->map(['HEAD'], $pattern, $callable);\n. Can you show how you set the body?\nAlso what is this? It's neither valid PHP nor JSON.\n'translations\" => \"{\"en\":{\"name\":\"...\",\"short_description\":\"...\",\"long_description\":\"...\"}}'\n. Ah ok, looking at the cURL command, you post invalid JSON. Does it help if you wrap the root key in an object?\njson\n{\"translations\": {\n    \"en\": {\n        \"name\": \"...\",\n        \"short_description\": \"...\",\n        \"long_description\": \"...\"\n    }\n}}\n. Shouldn't this line be inside the respond method instead of being passed along as a param?\n. I do agree separating running the application and responding into two separate methods is a good idea. I just do not see why '$respond' is still declared in run. Maybe you did this op purpose as you saw a use case for this, but if not you can move it.\n. Talking about over complicating ... You want to create a separate provider for each class?\nI do not really see the gain here. You can easily overwrite a registered service in Pimple.\nAlso the whole point of this PR is to be not Pimple dependant. So using their service provider interface would go against that.\n. But how would you do that DIC independent? or do you want to make it pimple specific? If so, what would be the gain?\n. Forgot dollar sign here\n. Good point. Silly mistake.  Should be $clone ofcourse.\n. What do you mean? Null value will still return false in the isset check (line 1195).\n. Why the reference sign? As it seems you are passing in an object, which will always be passed by reference.\nAlso maybe typehint for RouteGroup\n. Same here; No reference needed and typehint for App\n. Why not the magic __invoke() method? This custom invoke() might be confusing.\nAnd why is the container a parameter here? If it is needed for a strategy it can be inserted in the constructor. \n. Not sure if setters should be in the interface?\n. Isnt the $targetPath including the new filename?\n. It worked before because the CallableResolver was never really invoked, so it did not try to find the MiddlewareStub.\n. Docblock is outdated\n. Seems logic to do so, but doesn't change anything for me. For some weird reason when I access http://localhost/dev/slim/index.php/hello/me script name is /dev/slim/index.php , but when I go to\nhttp://localhost/dev/Slim/index.php/hello/me script name is /dev/Slim/index.php.\nBut just to be sure I'll update it\n. ",
    "oanhnn": "I think Slim framework really support this feature from version 2.4.0.\nI used this for my slim-skeleton\nWas I understand your question correctly? @plashenkov\n. You can use:\nphp\n$app->get('/admin', 'Auth::check', 'AdminController:index');\nor\nphp\n$app->group('/admin', 'Auth::check', function() use ($app)\n{\n    $app->get('/', 'AdminController:index');\n    $app->get('/administrators', 'AdminController:listAdmininstrators');\n    // ...\n}\nwith static function Auth::check() .\n. \"Class:method\" is not callable but Slim Framework make it to callable by Route::setCallable() method \nhttps://github.com/codeguy/Slim/blob/master/Slim/Route.php#L162\nYou can modified Route::setMiddleware() method and implement this feature.\nAnd create Pull request :smile:\n. Like :+1: \n. Are you sure that it will run faster? Assign command always is executed even !is_callable($toResolve) && is_string($toResolve) is true. With old code, it isn't executed.\n. Why not do you use traits script for reused ?\n. I have a test about this method and old method to determine content type.\nhttps://gist.github.com/oanhnn/bddebdccb100b337200a\nI will create a PR to:\n- create trait for determine content type\n- implement determine content type by isset() function.\n  What are you think about it?\n. > Why the term Aware in the trait name?\nThe trait named DetermineContentTypeAwareTrait , like MiddlewareAwareTrait and CallableResolverAwareTrait :smile: \n. :worried: \nUsing trait is better for maintenance and using isset() for best performance.\nYou don't want but it is better for end-users, who don't always use middleware for this work.\n. ",
    "plashenkov": "I mean:\nphp\n$app->get('/admin', 'Auth:check', 'AdminController:index');\nor\nphp\n$app->group('/admin', 'Auth:check', function() use ($app)\n{\n    $app->get('/', 'AdminController:index');\n    $app->get('/administrators', 'AdminController:listAdmininstrators');\n    // ...\n}\nI tried this using 2.5.0 as well as new 3.0 and it does not work.\n. That's possible, I know.\nBut if we can use \"Class:method\" as a callable, it is naturally to have an opportunity of using the same syntax for middleware too. If I can pass \"Controller:method\" as a route callable, and Slim instantiates the class if the route was triggered, it is very, very expected to use the same scheme for a middleware.\nFor example, in constructor of a controller class I usually do the following:\n``` php\nclass Controller\n{\n    /*\n     * @var Slim\\Slim\n     /\n    protected $app;\n/**\n * Constructor\n */\npublic function __construct()\n{\n    $this->app = Slim\\Slim::getInstance();\n}\n\n}\n```\nAnd then I use $this->app to access Slim instance inside a class and its successors. In case of using static methods, I need manually call Slim\\Slim::getInstance() in each static method. That is not nice. Besides this, there (in constructor) may be another, more complex logic. This is just an example, but the main argument is to use the same syntax for these \"callable\" parameters (route callables and middlewares).\n. > \"Class:method\" is not callable but Slim Framework make it to callable\nYeah, technically and strictly speaking it is not, I meant \u201ccallable\u201d in a figurative sense.\nFor my app I\u2019ve extended Slim\\Slim class and made using of \u201cClass:method\u201d available for route middlewares as well as for notFound() and error() functions. This issue aims to make this functionality available \"naturally\", out-of-the-box. My humble opinion is that this is necessary. I just fear my implementation is not beautiful/right enough and Slim developers can implement this in their, more qualified and perfect way.\n``` php\nclass App extends \\Slim\\Slim\n{\n    /\n     * Check if variable is a controller method and convert it to a callable\n     \n     * @param mixed $callable\n     /\n    protected function checkControllerMethod(&$callable)\n    {\n        if (is_string($callable) && preg_match('!^([^\\:]+)\\:([[:alnum:]]+)$!', $callable, $matches)) {\n            $class = $matches[1];\n            $method = $matches[2];\n            $callable = function() use ($class, $method) {\n                static $obj = null;\n                if ($obj === null) {\n                    $obj = new $class;\n                }\n                return call_user_func([$obj, $method]);\n            };\n        }\n    }\n/**\n * Route Groups\n */\npublic function group()\n{\n    $args = func_get_args();\n\n    $pattern = array_shift($args);\n    $callable = array_pop($args);\n\n    foreach ($args as $key => $value) {\n        $this->checkControllerMethod($args[$key]);\n    }\n\n    array_unshift($args, $pattern);\n    array_push($args, $callable);\n\n    call_user_func_array('parent::group', $args);\n}\n\npublic function filter()\n{\n    $args = func_get_args();\n    array_unshift($args, '');\n    call_user_func_array([$this, 'group'], $args);\n}\n\n/**\n * \"Not found\" handler\n *\n * @see   \\Slim\\Slim::notFound()\n * @param mixed $callable Anything that returns true for is_callable()\n */\npublic function notFound($callable = null)\n{\n    $this->checkControllerMethod($callable);\n    parent::notFound($callable);\n}\n\n/**\n * Error handler\n *\n * @see   \\Slim\\Slim::error()\n * @param mixed $argument Callable|\\Exception\n */\npublic function error($argument = null)\n{\n    $this->checkControllerMethod($argument);\n    parent::error($argument);\n}\n\n}\n```\n. Some other implementations:\nhttps://github.com/guzzle/psr7 (incomplete);\nhttps://github.com/zendframework/zend-diactoros (don't know, looks like complete but there is not only PSR-7, also other stuff).\nYour implementation of the standard will be extremely valuable for the community. ;)\n. ",
    "nickolasgregory": "Does the signature for Slim\\Interfaces\\RouterInterface::urlFor() need updating too?\npublic function urlFor($name, array $params, array $queryParams);\nI can make a PR if it helps.\n. ",
    "thejw23": "You can do this like that: http://akrabat.com/routing-to-a-controller-with-slim-framework/\n. ",
    "TomasVotruba": "Thanks. Sure: https://github.com/slimphp/Slim/pull/1033\n. Thanks\n. You're welcome!\nI see PHP 5.5 in composer.json.\nAnyway, let me know when you make that step,  I'd be happy to help. ",
    "mattsah": "@sarciszewski \nHow do you feel about storing such data in a cookie as an encrypted JSON Web Token?\n. @sarciszewski \nI wasn't necessarily referring to the context of slim.  https://github.com/firebase/php-jwt/blob/master/Authentication/JWT.php uses PHP's built in hmac and openssl stuff.  Why wouldn't one just use a third party library?  It becomes as simple as, pass it data to JWT encode, pass it a key for encryption.\nNot sure I follow your concern.  You seem to suggest they use someone else's php encryption library to solve that case.  Wouldn't that be fine for JWT?\n. @joepie91 \nAs I believe was already covered, it does make things more scalable.  That is, I think I'd agree with the principle as described in REST, and the client should contain the necessary state to succeed in a given request.  Sessions blur this, and if the session is removed, the client state is affected irreversibly.\nThis is true for memcache as well.  It scales horizontally, but the client application state is still dependent on the state of the server... clear memcache, and the client is suddenly logged out.\nEDIT: Even if you mistook me, I agree that \"session data\" such as a login name can and should be stored client side.  It's part of the client state.  I agree, this means we need a means to do so securely, but the answer to that is not \"move the client state to the server.\"\n. @joepie91 \nIt makes it more scalable for the same reasons redis/memcache/session handler does in one sense, but also makes it more scalable in the sense that client state can be provided to other systems  or services which may not be tied into the back end state.  Sure, it's easy to say, \"just tie them into the backend state,\" but that doesn't seem to really address the issue.\nWhat you're saying is, X service now has to rely on some additional backend component in order to verify client state.  Not only might that be completely unnecessary for some services (you're only making it necessary by mixing server/client state), it obviously increases the requisite resources to make that service usable.\nWhen the client state is stored client side and passed in the request, any service, no matter how disconnected, has everything it needs to complete the request.  It's really that simple.\n. @joepie91 \nI should probably note, I'm not necessarily disagreeing with you with respect to slim.  I'm more making the point on a broader architectural level.\nI would agree that at that scale you're going to be doing custom stuff anyway, and this may not be necessary out of the box, and as implemented, causes all sorts of security concerns for the 90%.\n. > Cookies are hostname- and port-specific, so that will never be directly possible.\nThis is irrelevant with respect to some hierarchical architectures or even more advanced proxies.\n\nThere's a fundamental distinction between 'trusted data' and 'shared data', and the latter simply doesn't belong in session data.\n\nI think you meant the former simply doesn't belong in client data.  But that's an obviously absurd notion for every single application architecture  aside from web applications.  The only reasons it's accepted in web applications is because of arguments like the one you're making, namely that there's just no way to do it securely.\nAll I'm saying is, the \"how do we do this securely?\" is a separate question from \"why/when/should someone do this?\"\nThere are cases for the latter, which means we need solutions for the former.  You seem to be saying that there are no solutions for the former, thus, we should do whatever it takes to avoid the latter.  You've got your problem solving hat on backwards.\nAll I was initially asking in this thread, was whether or not @sarciszewski felt JWT was a relatively secure method to store session data client side (regardless of mechanism, cookie, local storage, etc).  His answer was NO, but it seemed specific to separate concerns in slim, which didn't really answer the question.\n. @sarciszewski \n\nI said \"NO\" because you shouldn't be storing session state that the server processes and depends on, on client machines.\n\nThis sounds more like a lack of proper deliniation between server state vs. client state.  Based on the source you cited in OP, I'd agree.  I was moreso referring to...\n\nAn identifier to fetch it from the backend? Sure.\n\nSo it sounds like you're OK with this, if implemented in a secure fashion.\n\nEven with JWT, you're going to run head-first into the 4KB limit (which is down to 3 KB with base64 encoding, and even less with the HMAC).\n\nIn this specific case, I'd think that would depend on how much you're storing in session, which again, may be an issue of not properly dilineating.\n\nWant to make everyone insecure because a few morons think storing session state on the client is okay?\n\nNo.  But I agree that is what this particular example does.\n. @joepie91 \n\nNo, I meant it doesn't belong in session data, exactly as stated.\n\nThen (as with my previous comment to @sarciszewski), this sounds more like a deliniation issue.\n\nI still have to see them. Can you name one for me?\n\nI have no idea what this means in the context of the quote you quoted.  Can I name one what?  Are you asking if I can show you a specific example of an application running at that level of scale which benefits from client state actually being stored in the client?  No.  I don't know of a single one that's open source.  Do they exist?  Obviously, there were plenty of examples when I worked in Motorola.\n. @sarciszewski \n\nYes, like PHPSESSID over HTTPS (assuming TLS v1.2). That's a secure implementation.\n\nThis is an avoidance of the issue, not an addressing of it.  Again, no clear delineation between client state and server state.  They're on one extreme (all server state is client state) and you're on the other (all client state is server state).\nSpecifically, I'm talking about storing a user token with information as to which user the client is authenticated (or even whether they are at all).\n. @joepie91 \nI believe I responded to your statement as if that's what you were responding to.  So, no, I have no publicly visible examples.  They may exist, but I don't know every enterprise level web application that is open source.  Maybe Bacula?\n. > Congratulations, you just reinvented PHP's session storage.\nSessions are stored serverside.\n. > Yes, the data is stored serverside, but the identifier is stored in a cookie.\nThe identifier is useless to a system which doesn't have access to the serverside information.  I'm not sure what you don't understand about this principle.  It's called client state for a reason.  Perhaps you disagree that which user a client is authenticated as or whether they're authenticated at all is not part of client state?\nCan you explain what use the server has for it without the client?\n. > Okay, what about Bacula makes it so that a Redis server for keeping track of session state is unsuitable?\nWell, for starters I said maybe bacula.  Bacula is not a web (HTTP) based application.  I think the vast majority of examples you would find are not in web based applications for reasons already cited.  That said, HTTP clients generally don't have a good mechanism for this, but that's a flaw in HTTP clients rather than a flaw in the design principle.\nI'm not familiar enough with what Bacula does on subsequent requests, but initially, client authorization is stored client side in the configuration for the client.  I'd be somewhat similar to your password for a website being stored by your browser and just sent to it, rather than some negotiation phase.\nBut you don't need to look at enterprise software to see this principle in action.  A simple IM client stores your password locally and is sent to the server.  Whether they generate a token from that for subsequent requests is irrelevant, so long as the token is all that's needed to verify the user regardless of server state, or if it's not the token can be renegotiated based on the stored password.\nAgain, you're talking about a problem that is essentially non-existent and is assumed solved in every other application architecture other than web applications.\nThe reason I bring up bacula is that there are multiple components, all, which in theory can be hosted independently.\n\nIf you do not have an example, then I wonder how you could've come to this kind of conclusion.\n\nI do have examples (with respect to the web), as I already mentioned, the examples that I'm immediately or intimately familiar with are not open source.  I came to this conclusion based on understanding the principles outlined in Martin Fowler's work and real world experience working with large enterprises which provide hierarchical or horizontally scaled services to common clients.\n\nWhat data points exactly are you using to determine that client-stored session state is a necessity for scaling?\n\nNecessary?  I don't think I ever claimed it was necessary for scaling.  You can almost always scale in other ways.  What this particular principle of REST ensures is that your scalability is not limited by other things like network architecture or amounts of hardware.\nIf your client token always has to be sent to the same central service (note, not server), then that becomes your bottle neck to scalability.  You can't add services to handle additional tasks without scaling your central authentication service as well.  If you're getting 5000 requests a minute that need to be authenticated, and you wish to add a service which is used roughly in parallel to your to your primary service which also requires authentication, you've now got 10,000 requests a minute to your service providing authentication.\nCan you do this?  Of course.  Can you just beef up the service that provides authentication?  Sure.  Can you horizontally scale that service using redis or memcache?  Sure.\nShould you have to scale that service at all in order to scale using other services?  NO\nThat's the point of scalability with respect to this particular REST principle.\nI'm really not sure why you find this so difficult to understand.\n. I should note, you can also bypass the service directly and go to redis/memcache, which would avoid 5000 requests additional on the service, however, still results in 5000 additional requests per minute to your redis/memcache server, you just move the problem, albeit to one that may be more likely able to handle it than something wrapping redis/memcache with PHP.\n. Also, you need to refer to it as \"client stored session state\" is rather strange.  \"Session state\" in most software architectures is necessarily client side.  The idea of a server side session is meaningless without the client.  The fact that PHP has and most PHP developers continue to store client state in server-side sessions doesn't make the phrase more valid.\nWhich user a client is authenticated as or can authenticate as is client state.\nSame question to you @joepie91, can you explain to me what use the server has for this information independent of the client?\n. @ircmaxell \nYes.  That's a good assessment, given that an actual compromise using unserialize() could result in arbitrary code execution on __wakeup() if I'm not mistaken.\n. @sarciszewski just a point to note and for the slim team, JWT still requires separate encryption, initially it's just a hash with signature if I'm not mistaken.  The data itself still needs to be encrypted.\n. @sarciszewski I'm not on the slim team.  If you'd like to review Firebase's implemention, go for it, but please take note of the above with respect to encryption.  Firebase, so far as I know is just supplying stock JWT which gets around the unserialize()/__wakeup() issue and offers some data integrity.  Encryption is still needed.\n. ",
    "joepie91": "@4nd\n\nTotally agree, but some people may need them for some reason. \n\nLike what reasons, for example?\n\nThey're good for long-term client-side configuration storage, no need for objects though, a key/value pair should be enough.\n\nThat's what non-session cookies and local storage are for. This does not belong in a session, end of story.\n. @mattsah Why are you trying to store session data client-side to begin with?\nEDIT: Sorry, mistook you for @codeguy - you are not a contributor, I guess?\n. I don't really see how this makes it more \"scalable\". You may as well run a Redis cluster to keep track of sessions, if you're at the scale where you need multiple backend servers - statefulness doesn't change anything here.\nAnd frankly, if you're running at that kind of scale, you don't need to rely on the default framework configuration, and can easily roll your own session handler - they are pluggable, after all. Hell, even if you can't, there's plenty other solutions like sticky sessions.\nRight now, Slim is shipping in an insecure default for the majority of users, in order to solve an effectively non-existent problem that is an edge case at best. People are not going to read that caveat about secure storage, and cookie encryption is almost certainly going to cause issues later down the line. Not to mention the size limits that are going to bite people.\nTL;DR: It makes absolutely no sense to implement this in a framework like this.\n. > but also makes it more scalable in the sense that client state can be provided to other systems or services which may not be tied into the back end state.\nCookies are hostname- and port-specific, so that will never be directly possible. Data that you want to share between systems should be explicitly shared (even when going through the client) - you can use things like local storage to keep track of this.\nThere's a fundamental distinction between 'trusted data' and 'shared data', and the latter simply doesn't belong in session data. Non-session cookies or local storage are a much better choice for that.\n. > I think you meant the former simply doesn't belong in client data.\nNo, I meant it doesn't belong in session data, exactly as stated. You can keep state beyond session data, including on the client.\n\nAll I'm saying is, the \"how do we do this securely?\" is a separate question from \"why/when/should someone do this?\"\n\nI still have to see them. Can you name one for me?\n. @mattsah Apologies, mis-quoted. Quote should have included:\n\nThere are cases for the latter, which means we need solutions for the former. \n\nI'd like to see one of those cases.\n. > I believe I responded to your statement as if that's what you were responding to. So, no, I have no publicly visible examples. They may exist, but I don't know every enterprise level web application that is open source. Maybe Bacula?\nOkay, what about Bacula makes it so that a Redis server for keeping track of session state is unsuitable?\nIf you do not have an example, then I wonder how you could've come to this kind of conclusion. What data points exactly are you using to determine that client-stored session state is a necessity for scaling?\n. ",
    "padraic": "Before the debate goes crazy... The value drawn from the cookie should be validated. That's even more basic than not passing user values to unserialize() or having all security related functionality audited. You can't just rely on one defense and ignore all the others, they should be layered in shells to afford maximum protection, i.e. Defense In Depth.\n. @defuse Could this not have been reported privately?\n. It just took me 10 seconds to locate an email for Josh. Not all communications require a security@ email address or a PGP key. A normal unencrypted email still has some reasonable degree of privacy that is better than a public github issue. A DM over Twitter can often solicit an email contact.\nThe proverbial cat is running far from the bag, so I'll return the topic to the issue reported.\n. ",
    "ircmaxell": "Storing session state on the client is 100% fine. In fact, for many apps it's not necessary to store anything non-trivial on the server side.\nThe issue here is using serialize, not where the data is stored...\n. utf8_encode isn't the answer to just about any question. It really doesn't do what most people think it does, and while it may prevent errors it doesn't do so in a valid way...\nSuggest avoiding that issue altogether by simply mandating that storage be UTF-8 in the first place.\n. No. Encoding detection is incredibly unreliable at best.\n. @amenadiel utf8_encode() assumes that the input charset is LATIN-1. Which is quite often not the case. \nIn fact, all text is valid LATIN-1. This leads to the problem where codepoints are converted very weirdly (especially if source was UCS2-le - what MS likes to use in their OS's).\nSo significant information can be lost, as it transcodes the 127 LATIN-1 high-point characters to UTF-8. The reverse is even more damaging, since it tries to turn 2^21 into 2^7 (2^21 being approximately the number of possible UTF-8 codepoints).\n. ",
    "defuse": "@padraic I saw no need. This is the development branch and my understanding is that it's not what everyone is using. The crypto everyone is using is actually worse, see #1035.\n. @silentworks I tweeted this to raise awareness about this common problem. Slim is not the first framework I've seen trying to implement this exact same thing, and they are invariably insecure in the exact same ways. I don't \"try to make others work look bad.\" I care only about the technical facts and what I can do to make things more secure, not about the people behind it. If I see something wrong, I will point out the technical details; it's never intended as an attack against the author.\n. ",
    "zoontek": "Slim actually use quite the same routing logic as Symfony (preg_match all routes)\nAdd new dependencies is not an obligation, my suggestion was just to implement the regex matching engine of FastRoute and only one dispatcher of choice (like https://github.com/mrjgreen/phroute do)\n. Slim 3 seems to need at least PHP 5.4, so I guess it's OK\nhttps://github.com/slimphp/Slim/blob/develop/composer.json\n. No problem, not everyone use this indeed.\n. Yep, it's already what I use, with the corrects fixers :)\n. I think it's all good. I don't see another optimisations.\nMaybe PSR-4 autoloading, but in a different PR?\n. No problem, It should be OK.\n. ",
    "nhymxu": "After change . to _ I see slim work well.\n\nprotected $defaults = array(\n    // Application\n    'mode' => 'development',\n    'view_templates' => '../templates',\n    // Cookies\n    'cookies_encrypt' => false,\n    'cookies_lifetime' => '20 minutes',\n    'cookies_path' => '/',\n    'cookies_domain' => null,\n    'cookies_secure' => false,\n    'cookies_httponly' => false,\n    // Encryption\n    'crypt_key' => 'A9s_lWeIn7cML8M]S6Xg4aR^GwovA&UN',\n    'crypt_cipher' => 'aes',\n    'crypt_mode' => 'cbc',\n    'crypt_hash' => 'sha256',\n    // Session\n    'session_handler' => null,\n    'session_flash_key' => 'slimflash',\n    'session_encrypt' => false,\n    // HTTP\n    'http_version' => '1.1',\n    // Routing\n    'routes_case_sensitive' => true\n);\n\nchange from http.version to http_version in Configuration.php and App.php\n=> work\n. I see Lumen composer.json\nIt's using tons of package from laravel (illuminate).\nLumen provide more features than Slim, And I think Lumen can using Laravel package (packalyst)\nWhy lumen using more but faster than slim?\n. without using this, I think core feautures of lumen same as slim v3.\n. Hope slim not only micro-framework to build API server, hope slim can add multi middleware/component to full-stack framework if need <3\n. I don't think anyone want write route very long like this\n. laravel publish faster because Taylor Otwell work full-time.\nCodeguy code Slim in his free time.\nNot same.\n+1 \"you publish a book, but laravel release the lumen. I just use lumen\"\n. congrat, hope slim beta version soon\n. I see Cookie inside Core code. Wait Session with right code format from Josh \n. I want real simple example from Josh to easy modify with right code format. Fuelphp session look great with many storage to save :) \n. Agreed.\n. :thumbsup:\n. I don't agree. Yes, php.net unsupport this, but many many server/ hosting provide continue using PHP 5.4 for a long time. \nI hate Laravel 5.1 because this require high PHP version than shared hosting support\n. I think slim 2 only received security bug fix.\n. ",
    "lfcunha": "I stripped down my application to demo this. Please get it from this repo:\nhttps://github.com/lfcunha/testslim26\n(the app is hardcoded to be served from testslim26 directory: www.example.com/testslim26)\nIf you change slim's version to 2.6.* in the composer.json file and update, you'll see the error.\n. The render method was actually called something else in my app (I did not mean to override render()). However, just removing \"extends \\Slim\\slim\" from the controllers stopped this issue (It was not causing a problem up to version 2.5).\nThank you for your help.\n. ",
    "funkatron": "I added code to show how we hacked around it. It's pretty\u2026 hackey.\n. You didn't ask me, but I'm a big fan of that approach of adding route middleware. Changing what a method parameter does based on the number of params always felt flaky and hard to anticipate to me (jQuery does this a ton and I think it makes it harder to remember the APIs and anticipate behavior).\n. I believe they should not, by default, be considered equivalent. \nFlask handles it like this:\nRoute: \"/foo\": /foo works. /foo/ returns 404\nRoute: \"/foo/\": /foo/ works. /foo redirects to /foo/ (rewriting the URL) if no other match exists.\nThey're different things in HTTP, and I think they should be different things here. Maybe offer Flask-style auto-resolution in optional middleware.\n. Good points made, plus I didn't do a good job of explaining this, and I didn't refer to the issue (#1134) where this was discussed. I'll explain my thinking at least.\nUltimately I think it's a problem that the default action of Request::getParam(s) is to return raw values (of course, this is how almost all frameworks approach this, but I think it's a mistake there, too). I think it makes it more likely to make input handling mistakes. Were I doing what I felt like, I would rename the methods to Request::getRawParam(s), to indicate to the developer exactly what they are getting: raw, potentially unsafe input, and then additional add a suite of accessor methods that apply common sanitizations.\nNote that the intent here isn't to handle data _validation, but for de-fanging potentially dangerous input. I agree with the discussion in #1134 that you're better off handing validation with route middleware._\nThe simple changes here are really a compromise to try to make it a bit easier to implement input filtering, potentially as middleware, and/or on a piecemeal basis.\nHere's my thinking for this approach:\n- I didn't want to change the default behavior and potentially confuse folks, especially so close to beta.\n- I didn't want to impose a set of input sanitization filters on everyone using Slim. Possibly down the road you could include a class that offers sanitization filters that can be applied. I think that would make it super handy to do something like \nphp\n$req->getParam('body_text', Input\\stripHtml);\n- For auditing purposes, this approach makes it a bit easier to check for raw data access -- if there's no second param (or no first param for Request::getParams), we are probably getting raw input, which should raise a red flag.\n- I personally find this approach a fair bit cleaner/less messy than performing it on the return value in the route handler. The use case I imagine would be defining sanitization callables in a separate class or namespace, and reference those callables within the getParam/getParams calls.\nphp\n$req->getParam('body_text', Input\\stripHtml);\nvs\nphp\nInput\\stripHtml($req->getParam('body_text'));\nor\nphp\n$body_text_unsafe = $req->getParam('body_text');\n$body_text = Input\\stripHtml($body_text_unsafe);\nYMMV, of course. As mentioned above, I think auditing the first is easier.\nExtending the Request class is another decent option, although my inexperience with Slim3 means I'm not sure exactly how easy it would be to use that extended Request class by default everywhere. Also, I think most devs won't do this out of the box, and I think this approach encourages more thoughtful consideration of handling input.\nAll that being said, this may be too small of a change/too little value to be worth including. This lays some groundwork, I think, but it could be better to put it off until a more comprehensive solution for safer, explicit input handling can be developed. I'll leave that up to you folks.\nI'm pulling in @codeguy because he initially gave a thumbs-up on the approach 8)\n. I think the service provider idea may be sufficient, because it still\nallows for good auditability -- if anyone is accessing input outside of the\nservice provider, that would be a red flag for detailed review. It would be\neasier to add all sorts of custom functionality this was as well, without\nextending a core class like Request. At some point I think a default (but\noptional) provider could be included in the framework, but you could\nreplace it with your own, or extend it easily.\nI prefer this approach over middleware, where how things are getting\nsanitized is separated from where the input access takes place. I think\nthat makes it a bit harder to know what's happening (\"Why are all my alpha\ncharacters missing!\" 10m later: \"Oh, because this middleware defined\nelsewhere is removing them\"). There are advantages to using middleware in\nsome cases, of course, but I think it's important that the developer think\nand show intent at the point of input access.\nOn Fri, Apr 17, 2015 at 9:28 AM Andrew Smith notifications@github.com\nwrote:\n\nI think this should be provided as a separate component to the framework,\nI like the solution @codeguy https://github.com/codeguy provided above\nbut it wouldn't be sufficient enough for what @funkatron\nhttps://github.com/funkatron has mentioned. As it doesn't actually\noverride the provided Request class, I am also not for ServiceProviders\nimplementing themselves, I think the ServiceProvider class should only\nprovide an interface for an external Library, so this would fit will with\nthe concept of Inspekt.\n@funkatron https://github.com/funkatron if you need some pointers,\ncatch me on irc next week and I will see where I can help out. (Still have\nthe Session Library to work on, before @codeguy\nhttps://github.com/codeguy asks about it again :-))\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/pull/1177#issuecomment-93985985.\n. Seems legit :+1: \n. \n",
    "Xevris": "Might a more descriptive method name like \"middleware\" make more sense?\nWould allowing the same method to accept an array and/or an unspecified number of arguments make more sense than repeated method calls?\n->middleware('mw1', 'mw2');\n. ",
    "gambry": "Thanks @codeguy , however I was trying to understand if there was an [even expected] way to fetch the json parameters from $request->params instead of the manual json decode $request->getBody for application/json request. I understand the answer is no.\nThank you for your help and great job with Slim!\n. Thank you for your time, I'll fork and apply my patch as I really need JSON data to be accessible via params(). (and if you want this on v2 I'll send a merge request as well)\n. @tuupola it parses the content-type, but it doens't make json data available via params().\n. However - just to be completed - I'm already using ContentTypes middleware, which is great BTW, but the problem seems to be on \\Slim\\Http\\Request->post(), as detailed above.\n. ",
    "UrvishSSPL": "There is another issue with the parse_str function. It replaces the '+' symbol with space.\nIf we read sort request from the query string like + for ascending or - for descending, the parse_str will remove the + symbol.\nSo, the request -order_date,+name will become -order_date, name.. ",
    "Allineer": "@JoeBengalen Thanks :)\n. ",
    "r3wt": "I'm running slim on hhvm + nginx. i can use $_GET like so:\ntry_files $request_uri $request_uri/ /index.php?$query_string;\n. @designermonkey Could you explain the benefits of this model? Does this increase modularity of Slim?\n. I'm down\n. Well, looks like i will have to back out of this after all. I checked out the develop branch and i'm not happy with the direction the project is going. I love the current version of Slim php so i'll just stick with that. if you stop supporting it ( The 2.x branch ), i will gladly fork and continue it.\n. I went ahead and pulled my changes.\n. @codeguy It's not immediately clear in the PSR if  getFileParams() is expected to take an optional key as argument. thoughts?\n. Why change the function signature when you can instead just do function($args) use($app){} asi propose in my linked repository. \nThrough the method i've demonstrated in the linked repository, one can write PHP without any headaches at all over variable availability to the closure, because you can use __call() and __get() to access slim/twig/et al. methods from the container class. \n. @akrabat literally everything would live as a property of PlebianPHP\\SlimTwig, eg\n$app->post;, $app->files;, et al.\neven request and response would be directly modifiable, with no need to declare then in the route signature\n. Well, I'll reserve judgement for the time when 3.0 lands. Thank you for your time.\n. I think this approach would be optimal\n. @geggleto Have you tried a benchmark on HHVM in repo authorative mode? Slim 2.6.2 offers much higher throughput on HHVM once compiled.\n. @sclearion yes lumen clearly has very few features in comparison to slim.\n. Disagree. (not that my opinion matters)\n. @JoeBengalen this is just dumbed down version so you can understand it. \n``` php\n$app = new \\Slim\\Slim();\n$ratelimiter = new \\App\\RateLimiter;\n$num = $ratelimiter->calc();\nif($num > 60){\n    $app->halt(429,'Too Many Requests');\n}\n// ... rest of code\n```\n. I expected it to halt the application and return the http response\nI need it run unconditionally before any of the routes are run. Middleware isn't an option. it needs to run for every single route in the application. maybe the slim before hook?\n. @JoeBengalen I resolved it ( i think ) by placing it in the slim.before hook\n. Thanks for the help good sir. You got me to thinking. :)\n\n. @geggleto  there are no usage of slim's pass inside of the controller, which is why i'm here. first thing i did was consult the source.\n. could slim be running out of memory? i'm literally baffled.\n. Oh my god, i need to go to sleep. it was a damn typo, referencing a function that doesn't exist on controller, which propagated to my app, which propagated all the way back to slim\n. Your function signatures define an unused variable $image. The number of route ooacehokders doesn't match the number of arguments to the callback\n. AFAIK there is no way to catch Fatal's.\n. @gkralik removed vendor folder and deleted composer.lock, reinstalled all deps:\nhttp://puu.sh/kAv7o/ba30c1b20e.png\nran it again:\nhttp://puu.sh/kAv4X/2b4b775c7e.png\nRunning: \nubuntu 14.04 / nginx 1.8.0 / hhvm 3.9.1\n. @dopesong @gkralik Thank you for your help guys.\n. @gkralik its ok, i'm working around it for now. fix will land in hhvm soon enough it shouldn't be a problem. thanks!\n. You should probably add attribution to the person who originally authored this code(stack overflow), you can optimize this by inlining the filter function as well\nSent from my Windows Phone\n\nFrom: Rob Allenmailto:notifications@github.com\nSent: \u200e10/\u200e31/\u200e2015 7:29 AM\nTo: slimphp/Slimmailto:Slim@noreply.github.com\nSubject: Re: [Slim] Request::getIp() trusts client headers and PSR-7 helper methods (#1528)\nMy take on middleware that is a better implementation of getIp(): https://github.com/akrabat/rka-ip-address-middleware\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/slimphp/Slim/issues/1528#issuecomment-152732528\n. I recognize the function from a famous answer on stack. I have identical code in many projects, alot of people are using this function. I can't link from mobile but you should be able to find I by searching get up on stack\nSent from my Windows Phone\n\nFrom: Rob Allenmailto:notifications@github.com\nSent: \u200e10/\u200e31/\u200e2015 11:53 AM\nTo: slimphp/Slimmailto:Slim@noreply.github.com\nCc: Garrett R. Morrismailto:stuckinabox@live.com\nSubject: Re: [Slim] Request::getIp() trusts client headers and PSR-7 helper methods (#1528)\n@r3wt: Given that I haven't looked at Stack Overflow, can you point me at the page you think that I've copied?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/slimphp/Slim/issues/1528#issuecomment-152749198\n. I'll link you she I get home\nSent from my Windows Phone\n\nFrom: Rob Allenmailto:notifications@github.com\nSent: \u200e10/\u200e31/\u200e2015 12:01 PM\nTo: slimphp/Slimmailto:Slim@noreply.github.com\nCc: Garrett R. Morrismailto:stuckinabox@live.com\nSubject: Re: [Slim] Request::getIp() trusts client headers and PSR-7 helper methods (#1528)\nI'm confused. You have https://github.com/akrabat/rka-ip-address-middleware/blob/master/src/IpAddress.php#L75-L105 in your projects?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/slimphp/Slim/issues/1528#issuecomment-152750514\n. here's the function in question:\n``` php\nfunction getIP()\n{\n    foreach (array(\n        'HTTP_CLIENT_IP',\n        'HTTP_X_FORWARDED_FOR',\n        'HTTP_X_FORWARDED',\n        'HTTP_X_CLUSTER_CLIENT_IP',\n        'HTTP_FORWARDED_FOR',\n        'HTTP_FORWARDED',\n        'REMOTE_ADDR'\n    ) as $key) {\n        if (array_key_exists($key, $_SERVER) === true) {\n            foreach (array_map('trim', explode(',', $_SERVER[$key])) as $ip) {\n                if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) !== false) {\n                    return $ip;\n                }\n            }\n        }\n    }\n}\n```\ncan't find the original answer on stack overflow. Fyi, i wasn't insinuating anything, just thought that if you copied the same answer i did it would be fair to add attribution since this is open source.\ncheck similarity to https://github.com/akrabat/rka-ip-address-middleware/blob/master/src/IpAddress.php#L91-101\n. Why put it in a sub directory at all? just alias it. i have 3 slim apps running in the root directory along with an angularjs front end that just loads from an html index file, all sharing a backend codebase off in another directory. you should be able to do this same thing in apache i'm sure.\nexample:\n```\nlocation ~ ^/api {\n    try_files $request_uri $request_uri/ /api.php?$query_string;\n}\nlocation ~ ^/admin {\n    try_files $request_uri $request_uri/ /admin.php?$query_string;\n}\nlocation ~ ^/debug {\n    try_files $request_uri $request_uri/ /debug.php?$query_string;\n}\nlocation / {\n    try_files $uri /index.html;\n}\n```\nso in each of api.php,admin.php, and debug.php i have a group wrapping all the routes like so\nphp\n$app->group('/api',function() use($app){\n... routes here\n});\nWhy over complicate things by using an actual directory? i don't see the advantage of that at all.\n. An alternative approach:\n``` php\nnamespace App;\nclass App\n{\n    private $slim            = null;\n    private static $instance = null;\nprotected function __construct()\n{\n    $cfg = \\App\\Config::getInstance();//however you handle getting config. we use an ArrayAccess/Singleton class\n    $this->slim = new \\Slim\\Slim($cfg);\n}\n\n\n//proxy calls to slim\npublic function __call($fn,$args=[])\n{\n    if(method_exists($this->slim,$fn)){\n        return call_user_func_array( [$this->slim,$fn] , $args);\n    }\n    throw new \\exception('method doesnt exist::'.$name);\n}\n\n//proxy all sets to slim\npublic function __set($k,$v)\n{\n    $this->slim->{$k} = $v;\n}\n\n//proxy all gets to slim __get($k)\npublic function __get($k)\n{\n    return $this->slim->{$k};\n}\n\npublic static function getInstance()\n{\n    return (is_null(self::$instance) ? self::$instance = new self() : self::$instance);\n}\n\npublic static function autoload($class)\n{\n    $file =  realpath( __DIR__ . str_replace('\\\\','/', preg_replace('/'. __NAMESPACE__ .'/','',$class,1)) . '.php');\n    if(file_exists($file)){\n        require $file;\n    }\n}\n\npublic static function registerAutoloader()\n{\n    spl_autoload_register(__NAMESPACE__ . \"\\\\App::autoload\");\n}\n\n}\n```\nThis will still allow you to to write code in the \"global\" space instead of needing to place it in an app method. the con is that __call() adds additional overhead to the scope chain atleast, though we are using this setup in many large scale deployments with no problems. as a bonus, you have a built in autoloader for your namespace. \n. bc aliens\n. ",
    "pascaldevink": "$_GET will undoubtedly work, but my main problem is that now the PATHINFO in the Slim/Environment class is also wrong and it thus doesn't match the routes anymore.\nI guess I should've made that more clear in the opening of the issue.\n. And this should teach me to learn a bit more! You were absolutely right @r3wt, thnx.\n. ",
    "psychoticmeow": "It would be good to be able to combine Slim with ReactPHP's HTTP server, so we can have a process that handles asynchonous requests.\n. ",
    "AleksanderKoko": "I don't think ReactPHP is a good idea for Slim @psychoticmeow . Not only for Slim but for PHP in general. That kind of programming is not what PHP is being used for. It is nice to play with it, or to be an option. If you want to have very very good asynchronus applications, you should stay with NodeJS because Node does it better. Was build from the ground up for that purpose.\nDon't forget that may be fast but have other new problems. Anyway, I don't think Slim should have ReactPHP aproach right now. \n. ",
    "opengeek": "I'll take a stab at this shortly.\n. :+1: I definitely would prefer to have optional error handler registration and the ability to avoid it altogether.\n. The parameter is passed to all of the routes defined in the group, not to the callback handling the group itself.\n. As an example of how it currently works:\n``` php\n    $app->group('/:_id', function () use ($app) {\n        $app->any('/', function ($_id) use ($app) {\n            (new \\Foos\\Bar\\Controllers\\Documents\\Document($app))->handle($_id);\n        })->name('Document');\n    $app->group('/foos', function () use ($app) {\n        $app->any('/', function ($_id) use ($app) {\n            (new \\Foos\\Bar\\Controllers\\Documents\\DocumentFoos($app))->handle($_id);\n        })->name('DocumentFoos');\n        $app->any('/add', function ($_id) use ($app) {\n            (new \\Foos\\Bar\\Controllers\\Documents\\DocumentFoosAdd($app))->handle($_id);\n        })->name('DocumentFoosAdd');\n        $app->any('/remove', function ($_id) use ($app) {\n            (new \\Foos\\Bar\\Controllers\\Documents\\DocumentFoosRemove($app))->handle($_id);\n        })->name('DocumentFoosRemove');\n    });\n});\n\n``\n. Agreed \u2014 it took me a little while to realize that is how it worked myself and I stumbled upon the proper way by trial and error.\n. I'm going to have to :+1: this one. This seems like an extremely sensible way to resolve callables, allow a wide-range of DIC usage, and keep the framework agile to a variety of approaches with regard to dispatching. @codeguy Do you have any thoughts here?\n. I don't think this discussion should be closed. I think it is a mistake to be worried about making Router/Route swappable in Slim. If that is the case, perhaps we can just throw together whatever components I want to create my own microframework using exactly the DI container I want, and exactly the routing strategy I want, with no limitation imposed at all by Slim. At some point there are diminishing returns for making things too flexible\u2014in this case I think the DI + Routing is a central part of Slim. I would recommend we keep the interfaces for Router and Route, even look to extend them somewhat. If you want to replace the router then, you would need to implement those interfaces, use an adaptor to another router or extend the Slim router.\n. after further thought, perhaps a solution where the Router defines it's own RouteInterface could be the solution\n. This should address #1099 \n. :+1: for option 1 \u2014Request::createFromEnvironment(). Does it work as[/]`?The real problem IMO, is that the trailing slash should always be optional if defined on the route with matches without the trailing slash redirecting (301) to the URL with the trailing slash. If not always, there should be an option to enable this behavior. It is expected behavior from using Slim v2 and should be easily accomplishable without defining every trailing slash as optional.\n. @silentworks I'm not sure how you envision the change to move the logic inside the Router. That would then require that I pass the App to a similar method inside Router. Is that really an improvement? It feels like I'm just moving the same dependency around, but if you think that is preferable I can make that change. Or if you have another suggestion?\n. See https://gist.github.com/opengeek/c8a2f8952560e226855b for example usage\n. Confirmed\u2014this appears to be a bug. PR shortly...\n. I tried both approaches and did some profiling with them but could not find any significant difference with small, basic payloads. The approach of keeping it an actual stream rather than caching the content should provide more flexibility within middleware usage however, with only slightly more memory usage. Copying it to the temp stream and discarding the original input stream should theoretically save memory usage however, with larger payloads since it uses temp files after 5Mb of memory is used.\nI may try to find a way to test this with some larger payloads to better understand the impact. And now I wonder if I should call this implementation ServerRequestBody.\n. This has nothing to do with attaching a stream. And attach() seems to have been changed to protected for some reason, and is not available to use to attach a new stream anyway.\nThe issue here is simply one of getting stream meta data on demand rather than when the stream is attached. For instance, if you write to the stream, the size changes and would not be the same as when the stream was attached.\n. I think this is just an oversight in the implementation of the default strategy. I have no problems with those type hints being removed. However, it should not be just string as the @param phpdoc. Maybe string|array|callable?\n. Historically, the behavior has been that a trailing slash defined in a route was optional but ultimately canonical. IOW, if you defined a route in 2.x with a trailing slash, requests without the trailing slash still worked, but they 301 redirected to the URL with the trailing slash appended.\nThat said, I think it's valid to allow explicit definition of what is essentially a file versus a folder. I am accepting requests for both forms by defining trailing slashes as optional explicitly in 3.x, e.g.\n$app->get('/test[/]', function($request, $response, $args) {});\nI plan to mimic 2.x behavior by 301 redirecting requests on routes with an optional trailing slash to the preferred canonical URL (either with or without the optional trailing slash) via middleware.\n. Actually, that is a separate issue. A collection would be represented by tests or tests/ \u2014 a single test would be identified in a new segment within the collection, e.g. tests/1 or tests/1/. There are use cases where the representation of tests and tests/ could be different, but in most cases both SHOULD match the same route and SHOULD redirect to the preferred canonical representation.\n. Yes\u20141000% yes. Also, clear documentation on settings like this is needed badly.\n. Hmmm \u2014 I guess I was looking for a section on what settings are available for Slim period. It isn't intuitive to look at the error handler documentation for out-of-the-box configuration settings IMO.\n. For what it is worth, in my opinion we should always import classes, even from global namespace. Otherwise, I agree that unused use statements should be removed and utilized ones organized alphabetically.\n. Good point. Just an oversight.\n. I can't find any usages\u2014perhaps I should remove this from the interface and it could be dependent on a specific implementation?\n. Reference sign was leftover from some silly attempts to get add() to work on the already pushed groups (snicker), never mind that they are popped immediately after evaluation. :(\nThe array of middleware was an artifact of allowing any number of arguments in the call to group(), but this is gone now with add() working.\n. Probably so I could see the methods available on the router which cannot be inferred from the container->get() call. I'll put it back... \n. Noted and reverting.\n. Both suggestions make good sense to me. I'll create another PR unless anyone else sees a problem.\n. The isolation was at Josh's suggestion as attributes really aren't the right place for storing route arguments. Default arguments can be done\u2014even in the default RequestResponse strategy\u2014see latest commits on #1343.\n. Read the issue folks \u2014 it was using the client provided name previously (i.e. the original filename) appended to the targetPath, but targetPath should be the full path including the file name you want to move it to. This change fixes the incorrect implementation.\n. No \u2014 this is the correction to not use the client-provided file name. The intention is that moveTo()'s targetPath includes the file name to move it to.\n. ",
    "gargoyle": "I'd like to get involved in contributing to Slim. Can I claim this and give it a poke and see how I get on?\n. I've sent a PR, but not sure if there is an intention to do something different with Environment? I can see it's initialised only with $_SERVER at the moment, but is the idea for it to be used with other data too?\n. ",
    "kanellov": "@JoeBengalen this class is intended for Slim 2 version. @codeguy is the development of ver 2 frozen? If you are interested in this feature, could you tell from where to start my branch in order to merge right?\nThanks.\n. ok thanks\n. ",
    "siiptuo": "@JoeBengalen oh no... thanks for noticing it!\n. So should the short-circuit also apply to redirect? Or only halt and stop? In point of view of the user hiding the throw exception can be misleading. Is there any way to combine these two approaches?\n. ",
    "jenssegers": "Thanks! Also, even if no port was specified, the Uri will show :80 when casting to a string.\n. To be honest, if the user specifically enters a port, either through the constructor or the createFromString method, then the port should be returned as well. Let me explain; for an API implementation, we require users to sign the url + get/post parameters using a private key (similar to oauth 1). To verify that signature, the servers must sign the received request as well and verify it. So if the client does a request to example.com:80, but the Uri returns only example.com, then the signature would not match.\nI think the constructor should allow a null value for the port, but if a port is specifically requested using the getPort method, it should \"calculate\" it based on the scheme. Or does this go against the PSR?\n. Thanks @codeguy and @JoeBengalen :)\n. What is the main reason you prefer to pass empty strings and 80 to the constructor compared to passing null values?\n. I agree that the with methods are unnecessary. One other suggestions would be to also add a getParameters() method that returns the merged version of GET and POST.\n. Probably because the pattern is registered as /1.0/users/123/property/ which is not picked up for /1.0/users/123/property.\n. I'm used to working with Laravel/Symfony, which handles both of them in the same way.\n. Using $app->getContainer()['foo'] does not really look developer friendly.\nIt can't go much easier than just doing $app['foo'] = ....\n. @silentworks But then your service providers don't have access to application methods. Sorry for my stubbornness, I'm just really used to accessing the container this way from Laravel :)\n. @silentworks For example; you could have a service provider that registers middleware or even routes.\n. @akrabat Service providers are executed immediately right.\nFor example, let's say you want a Clockwork service provider. Then you register a middleware that tracks a bunch of stuff, and add a route for the browser plugin to get the debug information. Eg: https://github.com/itsgoingd/clockwork/blob/v1/Clockwork/Support/Laravel/ClockworkServiceProvider.php\nBut we're deviating from the initial topic a bit now :)\n. @JoeBengalen I know the workarounds. For me it's just a matter of developer friendliness :) If the Slim maintainers decide to do it this way, so be it. But it's now that we are able to discuss about stuff like this now that it is still in development.\n. I would prefer doing this, similar to what Laravel is doing:\n``` php\n$app = new Slim\\App();\n$app->register(new SomeServiceProvider($app));\n```\nThis way you never have to worry about \"Do I have the app instance now, or do I have the container?\"\n. It is up to you guys what you decide, I'm just leaving my opinion about this recent change now that I still have the chance :)\n@silentworks Having ArrayAccess does not limit you to not use multiple implementations of the container. The App class can just call the correct methods from the container interface.\nThe Clockwork service provider was just an example that I know that registers routes and middleware, I'm not using it :)\n. Mh, that is quite a bummer actually. I thought that a container interface would at least have a getter and setter method.\n. ",
    "jaapverloop": "Looks good, but I wonder if it's wise to inject the container into the route\nobjects. Aren't we taught not to do this?\nThe following example shows how to do it manually. Is the code really that\nugly/inconvenient?\n``` php\n$route = $app->get('/', function() {\n    // do something here\n});\n$route->add($app->resolveCallback('foo:bar'));\n```\nOr with method chaining.\nphp\n$app->get('/', function() {\n    // do something here\n})->add($app->resolveCallback('foo:bar'));\nOr introduce an extra optional argument for further configuration of the route \nobject. A closure expecting the route object and bound to the application.\nphp\n$app->get('/', function() {\n    // do something here\n}, function($route) {\n    $route->setName('home');\n    $route->add($this->resolveCallback('foo:bar'));\n});\n. The inconsistent API bothers me too. I'm still trying to come up with a better solution, but it's not so easy! It seems that adding app middleware using 'Class:method' does not work, on purpose or forgotten?\n. I guess you're right! The consistency is very welcome!\nThe following code is what I had in mind.\nSlim\\MiddlewareAware.php\n``` php\ntrait MiddlewareAware\n{\n    protected $callableResolver;\npublic function setCallableResolver(callable $callableResolver)\n{\n    $this->callableResolver = $callableResolver;\n    return $this;\n}\n\npublic function add($callable)\n{\n    $callable = $this->resolveCallable($callable);\n    // ...\n}\n\npublic function resolveCallable($callable)\n{\n    if (null !== $this->callableResolver) {\n        $callable = call_user_func($this->callableResolver, $callable);\n    }\n\n    if (! is_callable($callable)) {\n         throw new \\RuntimeException('Cannot resolve callable');\n    }\n\n    return $callback;\n}\n\n}\n```\nSlim\\App.php:\n``` php\npublic function map(array $methods, $pattern, $callable)\n{\n    // ...\n    $route = $this['router']->map($methods, $pattern, $callable);\n    $route->setCallableResolver([$this, 'resolveCallable']);\n    return $route;\n}\npublic function resolveCallable($callable)\n{\n    // leave as it is\n}\n```\nThanks for the conversation!\n. This one I guess https://github.com/slimphp/Slim/pull/1179#discussion_r30459907\n. +1 for changing all the function signatures for adding routes. As a result, it's not necessary to keep the route objects container aware, right?\nMaybe we could introduce something like https://gist.github.com/jaapverloop/142b2857ee005e91068f\nfor convenience.\n. The provided example seems correct.\nphp\n$app->get('/test', array(Controllers\\TestController::class, 'test'));\n...but, I guess the following line could cause problems: https://github.com/slimphp/Slim/blob/6d6d861cb2be2b0a0535aaea61abea6476c87c7d/Slim/Handlers/Strategies/RequestResponse.php#L41\nSee issue https://github.com/slimphp/Slim/issues/1331 for more info.\nphp\nreturn $callable($request, $response, $routeArguments);\nshould be:\nphp\nreturn call_user_func($callable, $request, $response, $routeArguments);\n. @silentworks I will send a PR\n. > I had a thinker over this and thought its actually bad that we have to re-implement every required service of the framework any time we decide to use a new ContainerInterface.\nI agree with you! But I agree with @ppetermann too!\nThe idea of 2 containers feels a bit strange.\nThe config service could extend the container interface and consume a real implementation of the container interface at the same time (proxy).\n``` php\ninterface ServiceConfigInterface extends ContainerInterface\n{}\nclass ServiceConfig implements ServiceConfigInterface\n{\n    public function __construct(ContainerInterface $container = null, array $settings = [])\n    {\n        if (null === $container) {\n            // We still need a small wrapper around Pimple, because is does not\n            // implement the container interface.\n            $container = new Container();\n        }\n    $this->container = $container;\n    $this->settings = $settings;\n}\n\npublic function get($id)\n{\n    return $this->container->get($id);\n}\n\npublic function has($id)\n{\n    return $this->container->has($id);\n}\n\n}\n```\n. Yeah, you're absolutely right!\nThe app class of this PR depends on both, I tried to remove the dependency on the container interface.\n. As discussed on IRC, I leave a comment here with the same question.\nIs there a specific reason why the error handler does not include the type (class) for xml and json? I expected the same info, no matter the requested format. If it's because of security, we could use this setting you mentioned to hide this kind of information.\n. That's true, but easy to fix in this setup if desired. The reason why is simple (albeit stupid): the json format is not pretty printed too.\nSo if you want it to look nice, I will do it!\n. @JoeBengalen OK, thanks for your review! Lets wait what others think about this.\n@silentworks I noticed, see https://github.com/sebastianbergmann/phpunit/issues/1855\n. @akrabat thanks for your comments.\n\nI really don't see the point in this. The root element in XML is requirement of the XML specification. It's not needed for JSON.\n\nNot a problem to me, but as I said, for consistency. Beside that, whoops, the populair error handler, does it the same way.\nhttps://github.com/filp/whoops/blob/master/docs/API%20Documentation.md#handler-json\n\nNot a fan of this. I find it much easier to parse the heredoc than to deal with a series of sprintf() statements as they don't read left-to-right. If you're determined to get rid of the heredoc, then please use string concatenation.\n\nPoint taken. I will update this PR with string concatenation.\n\nThat's a good point. I suspect that we should do this for all the elements.\n\nOk, working on it.\nOther points/questions:\n- Is pretty output for xml desired? If yes, we could use the JSON_PRETTY_PRINT flag for json as well.\n- Why is the trace splitted in separate divs (html format)? Is the pre tag not enough? Beside that, the closing div tags are missing because it replaces with '\\n' instead of \"\\n\".\n- The values used in html format should be escaped too right? Any html elements in a trace are not visible for example.\n. I agree with @tuupola\n. Make it possible to initialize the error handlers with an optional PSR 3 logger. The current situation forces you to extend the error handlers to work around the error_log function.\n. What do you think about the idea of using service providers, the ServiceProviderInterface provided by Pimple, instead of creating the required components in the container? \n``` php\n<?php\n// Slim\\Container.php\nnamespace Slim;\nfinal class Container extends PimpleContainer implements ContainerInterface\n{\n    private $defaultSettings = [\n        'cookieLifetime' => '20 minutes',\n        'cookiePath' => '/',\n        'cookieDomain' => null,\n        'cookieSecure' => false,\n        'cookieHttpOnly' => false,\n        'httpVersion' => '1.1',\n        'responseChunkSize' => 4096,\n        'providers' => [\n            'router' => 'Slim\\Provider\\RouterProvider',\n            'request' => 'Slim\\Provider\\RequestProvider',\n            'response' => 'Slim\\Provider\\ResponseProvider',\n        ],\n    ];\npublic function __construct(array $userSettings = [])\n{\n    parent::__construct();\n\n    $defaultSettings = $this->defaultSettings;\n    $this['settings'] = function ($c) use ($userSettings, $defaultSettings) {\n        return array_merge($defaultSettings, $userSettings);\n    };\n\n    foreach ($this['settings']['providers'] as $class) {\n        $provider = new $class;\n        $provider->register($this);\n    }\n}\n\n}\n```\n``` php\n<?php\n// Slim\\Provider\\RouterProvider.php\nnamespace Slim\\Provider;\nuse Slim\\Router;\nuse Pimple\\ServiceProviderInterface;\nclass RouterProvider implements ServiceProviderInterface\n{\n    public function register(Container $pimple)\n    {\n        $pimple['router'] = function ($c) {\n            return new Router();\n        };\n    }\n}\n```\nThis makes it easy to swap each component with another implementation. The settings require another merge strategy to change a single component instead of all at once.\n. Over complicating... I don't know, the idea is very simple and a provider for each class is optional I guess.\nWhat I really ment is something similar like the ServiceProvider of Pimple.\n. I do understand your concerns and my intention is not to add any unneeded complexity.\n\nWe are trying to make Slim 3 as flexible as possible to the Container someone will choose without too much added complexity.\n\nAwesome, but that's exactly the reason for my suggestion. IMHO it's not just plug and play if you want to use\nanother implementation of Interop\\Container\\ContainerInterface. You have to register all the required services by yourself. Even if these services remain unchanged! I'm aware this is not a lot of work, just copy and paste. But I hope we're able to address this particular issue in an easy manner.\n. Yes, I know that. The ability to reuse the default service definitions would be beneficial IMHO. I'm open to other suggestions. But it seems I'm the only one bothered by this. Thanks anyway.\n. > So the thing that makes sense is that I distributed a package that configures Slim with a PHP-DI instance preconfigured with all the necessary services.\n@mnapoli I guess it's a better solution indeed!\n. ",
    "felixfbecker": "I can see why a Request should be immutable, but the Response? I have to call with*() for every change, and everytime a new object gets created? Especially since the underlying body stream is of course mutable. PSR should have made Request implement the StreamInterface directly, because response headers are just as much part of the stream as anything else, right? Thats how it is in NodeJS.\n. ",
    "joostshao": "https://groups.google.com/forum/#!msg/php-fig/42WhFKJzgrQ/9YbhKdLEOp4J\nPHP Framework Interoperability Group \u203a\n[CANCEL VOTE] PSR-7: HTTP Message Interface\n. ",
    "weierophinney": "@joostshao We've canceled to make clarifications; the program is far from dead. \n. @joebengalen Where did you email me? I haven't seen anything...\n. It went to my spam. :-(\nI've replied via email (didn't see you'd posted here as well).\n. Go for ServerRequestInterface - that's the one that server-side middleware should be using; without it, you lose important features like the parsed body parameters, cookies, query parameters, etc.\n. :+1: This is the whole reason for the UploadedFileInterface. Of course, now we have to go and do errata to PSR-7, as evidently we documented the actual structure PHP does incorrectly.\n. Since $this->next is `callable, and this PR requires PHP 7 and up, that means you can simplify the above to:\nphp\nreturn ($this->next)($request, $this->response);\nMy understanding is that call_user_func is slower than PHP's native dereferencing in PHP 7, so the above will also be more performant.. Just a heads-up: PSR-15 passed today, though we're waiting to announce it until the packages are on Packagist \u2014 though that should be within the next few hours after I write this. As such, you'll be able to require psr/http-server-middleware instead of http-interop/http-server-middleware, and the above will become Psr\\Http\\Server\\MiddlewareInterface.. Instead of SinglePassMiddleware, may I suggest StandardsBasedMiddleware or PsrMiddleware here?\nI've noted in communicating with ZF folks that many are not clear what is meant by \"single-pass\" and \"double-pass\", despite us having documented it. Having a name that indicates the type of middleware in terms of where you might find a definition helps.\nAlso, I'd add an @see annotation with a link to the accepted standard (we'll have that on the fig-standards repo shortly).. Have you imported this interface within this class file?. ",
    "feryardiant": "What Slim version you use?\n. Hi everyone,\nThanks for your responses. I don't mean to ask Slim to parse header request here anyway, I just want to ask about its behaviour and how do I expect the value should be. As per documentation said that getHeader will return array of strings so I expected that it will return multiple instead just one of string.\nThis morning, thanks to @weierophinney who gave me clue about this issue.\n\nand I think that it should be note in doc as well.\nBut, would be great if Slim also have official component or middleware to parse or sanitize every request objects.\nRegards :smile: \n. @akrabat yes, I've read that right after I saw his tweet. :smile: \n. Hi @silentworks \nThanks for your advice and sure I'll change the namespace from now on. I just think that it should be cool if distributed under Slim namespace, hehehe. :grin: \nRegards.\n. I'm using __get() in my base controller so I can just use $this->view->.. form my main controller\n. Hi @vlakoff, thanks for reply.\nOn my local setup, yes it has but not on my heroku, dunno why. \n. Thanks for your help.\nI'll take a look. Cheers :smile: \n. hi @akrabat,\nI'm using Plates built-in Asset Extension on my base.tpl, it will only return file path without hostname (e.g. /asset/main.css)\n. @vlakoff that's exactly my probem here.\n. Hi @tuupola \nThanks for suggestion, but I don't thing it's a good idea to type it manualy and I was expect it should be retrieved from Uri::getBaseUrl().\n. I use Heroku for the demo with custom domain provided by Cloudflare. The problem is Uri::getBaseUrl() doesn't return correct base url in my setup. When I access it using heroku subdomain which is https://slim3app.herokuapp.com/ I got http://slim3app.herokuapp.com and when I access it from https://slim-app.projek.xyz/ I got something like http://slim-app.projek.xyz:12345 (with extra port). I dunno where it come from, as @vlakoff said\n\nSlim doesn't have support for requests by proxies\n\nI also assumed the same thing.\nSorry, I have poor english.\n. Hi @vlakoff,\nThanks for the link, I'll try both.\n\nBest :)\nFery Wardiyanto\nOn Thu, Apr 21, 2016 at 6:15 AM, vlakoff notifications@github.com wrote:\n\n(disclaimer: currently drunk so can't go into the details)\nThere are middleware for scenarios with middlewares: Proxy Scheme and\nHost detection middleware\nhttps://github.com/akrabat/rka-scheme-and-host-detection-middleware and Client\nIP address middleware\nhttps://github.com/akrabat/rka-ip-address-middleware. They are awaiting\nto be used and improved :)\nIf middlewares can solve this issue, then I think it should be closed.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/issues/1665#issuecomment-212648094\n. Thanks for merging.\n\nAnyway, may I ask. Are you guys has plan to implement it for another repo under slimphp org?\n. Got it :+1: \n. @silentworks yes, you're right. But, can you see the difference between common behaviour and the way slim does?\nI've also expect that slim route should work that way in my setup.\n| Request URI | Response |\n| --- | --- |\n| example.com// | render home template |\n| example.com//foo | render hallo template, with $args['name'] = 'foo' |\n| example.com//foo/bar | return not found |\n| example.com//foo/bar/bas | return not found |\n| example.com///foo | render hallo template, with $args['name'] = 'foo' |\n| example.com///foo/bar | return not found |\n| example.com///foo/bar/bas | return not found |\n. So, anyone have test this case with other framework that use same 3rd party router that is very popular??\n. Hi @piotr-cz.\nYes you're right about whould make codebase more complex but I believe that using Whoops! is way more complex. If I should use external error handler, I rather go with phperror or Symfony Error.\nAnyway, here I actualy wanna ask is Slim had kind of idea or plan? Because some other framework also use it by default for security reason.\n. Hi @akrabat\nYes, I know it already. I meant when the displayErrorDetails settings is\nset to true should we use a relative path in stack trace?.\n\nBest :)\nFery Wardiyanto\nOn Tue, Dec 22, 2015 at 8:01 PM, Rob Allen notifications@github.com wrote:\n\nMaybe similar strategy should be used in Slim core.\nThis is in place. The setting displayErrorDetails defaults to false and\nneeds to be set to true in order to display the stack trace.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/issues/1691#issuecomment-166611362.\n. @wayne712 AFAIK if you use $app->add('Class:method') the argument will be resolved by CallableResolver and will inject the Container object through constructor.\n. What about\n\n``` php\n// Test.php\nnamespace App\\views;\nclass Test\n{\n    private $logger;\npublic function __construct($container)\n{\n    $this->logger = $container->get('logger');\n}\n\npublic function index(RequestInterface $request, ResponseInterface $response)\n{\n    $this->logger->info('log info');\n\n    return $response;\n}\n\n// your __invoke() method\n\n}\n``\n. Sure, you can getlogger` instance using closure, because it bound the container.\nI wonder how could you get the logger instance when you don't want to inject the container to your class.\nBest, Fery.\nOn Dec 30, 2015 13:15, wayne712 notifications@github.com wrote:\n\n@feryardiant , Thank you very much. I don't want to inject the Container myself. Anonymous function case works but object don't\n$app->get('/test', function (RequestInterface $request, ResponseInterface $response) {\n```\n    $this->logger->info('log info');\nreturn $response;\n\n});\n```\n\u2014\nReply to this email directly or view it on GitHub.\n. You're right he said\nwe inject container into the constructor for you.\n\nBut, you still need yo create your class constructor yourself. Right?\nBest, Fery.\nOn Dec 30, 2015 13:49, wayne712 notifications@github.com wrote:\n@feryardiant , thanks. I saw the comments by silentworks,he said \n\"You don't need to inject it yourself if you are using ->add('Class:method') or ->add(new Class). In these cases we inject container into the constructor for you. So you can call $this->container->get('router').\"\nSo I also wonder how it make.\n\u2014\nReply to this email directly or view it on GitHub. \n. Hi @silentworks, Thanks for reply\n\nIt is indeed possible for someone to use Slim in such way\n\nIf so, why do we need to pass them (request and response) as parameter in route callable?\nP.S: Sorry for my english :grin: \nBest.\n. Great. :+1: \n. I think that\n\nmy problem appears to have been caused by the fact that I was running PHP as a CgiModule instead of a FastCgiModule. The REQUEST_URI is present when I configured it correctly.\n\nneed to be documented.\n. ",
    "explorewp": "Have you added slash at the end of the route?\n$app->get('/hello/:name/', function ($name) { //there is slash at the end\n    echo \"Hello, $name\";\n});\nyou need to add it if you want to do http://localhost/hello/asd/ (with slash)\n. ",
    "qiukeren": "I did not added slash..\nOK,Now it is truely a expected behavior..\n. ",
    "dupkey": "This would be so helpful! Thanks @geggleto :+1:\n. ",
    "SimoTod": "@geggleto Any news about the component?\nI think you shouldn't focus on write a new validation component. \nYou could write an interface for adapters, pick a third-party validation library (auraphp/Aura.Filter, Respect/Validation, illuminate/validation, vlucas/valitron, ecc), write the adapter and than write a middleware that use interface methods.\n. ",
    "micoboyet": "@DavidePastore Hi, how do you pass the request parameters into the validators?\n. @DavidePastore Hi, I already know how to pass the parameter but how can we make the parameters more flexible using two dimensional arrays?\nFor example on my payload, i have,\nparams['user']['first_name']\nparams['user']['last_name']\nIn backend I access the parameters like this : \n$params = $request->getParsedBody();\nand I am getting error on \nCall to a member function assert() on array in davidepastore\\slim-validation\\src\\Validation.php line 67.\nI hope that it also supports two dimensional arrays. Btw the validation is great and it really works well using single associative array.\n. ",
    "misilot": "Thanks @geggleto that may work. It just seems like $app->group would define a scope in the code, which it clearly doesn't.\nWe were trying to define a route/group \"/json\" where that is all it was going to output was json.\nThe other place I have seen, is trying to add authentication via adding it to $app->group() inadvertently adds authentication to all routes.\nThanks\n. Doesn't route middleware apply to all routes?\nOn Thu, Apr 2, 2015 at 4:03 PM, Glenn Eggleton notifications@github.com\nwrote:\n\nYou could also add a route middleware for this possibly as well.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/issues/1147#issuecomment-89027399.\n. \n",
    "rkrx": "Just as @akrabat wrote: May be I already use another DI Container\nThis.\n@mackenza: Is that the extent of it or are there other reasons?\nPHP-DI (for example) supports autowiring. That means (for me) that I don't have to ship a DI-Configuration for more then 95% of all classes involved. Autowiring is simply a technique that tries to automatically instantiate depending classes by looking at a method's (e.g. Constructor) signature and it's parameter-types (Interfaces, Abstract Classes, Classes). For interfaces and abstract classes as well as for scalar values you still have to specify by configuration what their counterpart is. That is in some way comparable to include/require vs. autoloading.\nSome more?\n- Lazy instance proxy\n- Sophisticated configuration methods\n- Annotation-based configuration (if you like annotations; i don't)\n- Class factory\nPHP-DI would support a call-Method, with could be interesting for slim, too. So in theory you could use something like:\nPHP\n<?php\n$app = new \\Slim\\Slim();\n$app->get('/hello/:name', function ($name, MyService $service) {\n    $salutation = $service->getSalutationForName($name);\n    echo \"Hello, {$salutation} {$name}\";\n});\n$app->run();\n. @codeguy I have heard good things about Container Interop, but its interface does not explicitly accommodate our current expectation that service factory methods receive the container instance as an argument.\nYou only have to create an extra layer for the DIC internally. Say, we have the following code: \nPHP\n$app->get('/hello/{name}', function ($request, $response, $args) {\n    $this['view']->render('profile.html', [\n        'name' => $args['name']\n    ]);\n})\nAll you need to do is to put some method in the background that activates when you access $this['view']. Could look like this:\nphp\npublic function offsetGet($key) {\n    return $this->dic->get($key);\n}\nBut beware. By using $this['view']->render(...) there is no chance for PHPStorm (et al) to understand, on what object render(...) is invoked. If this is the only way to access services, then you have no change to apply static analysis on the code what makes growing application harder to maintain.\nCurrently, you could already do something like this with PHP-DI:\n``` php\n// Create Slim app\n$app = new \\Slim\\App();\n// Build the DIC\n$builder = new \\DI\\ContainerBuilder();\n$builder->addDefinitions('Config/di.php');\n$builder->useAnnotations(false);\n$dic = $builder->build();\n// Use Twig View service in route\n$app->get('/hello/{name}', function ($request, $response, $args) use ($dic) {\n    $dic->call(function (Slim\\Views\\Twig $twig) use ($args) {\n        $twig->render('profile.html', [\n            'name' => $args['name']\n        ]);\n    });\n})->setName('profile');\n// Run app\n$app->run();\n```\nThis is kind of ugly. What about this (only works with PHP-DI's make-function internally):\n``` php\nuse Slim\\Views\\Twig as TwigView;\n// Create Slim app\n$app = new \\Slim\\App();\n// Build the DIC\n$builder = new \\DI\\ContainerBuilder();\n$builder->addDefinitions('Config/di.php');\n$builder->useAnnotations(false);\n$dic = $builder->build();\n// Optional step. If you omit this, the standard DIC will be used\n$app->setDependencyInjectionContainer($dic);\n// Use Twig View service in route\n$app->get('/hello/{name}', function ($request, $response, $args, TwigView $view) {\n    $view->render('profile.html', [\n        'name' => $args['name']\n    ]);\n})->setName('profile');\n// Run app\n$app->run();\n```\nOr:\n``` php\nuse Slim\\Views\\Twig as TwigView;\n// Create Slim app\n$app = new \\Slim\\App();\n// Build the DIC\n$builder = new \\DI\\ContainerBuilder();\n$builder->addDefinitions('Config/di.php');\n$builder->useAnnotations(false);\n$dic = $builder->build();\n// Optional step. If you omit this, the standard DIC will be used\n$app->setDependencyInjectionContainer($dic);\n// Use Twig View service in route\n$app->get('/hello/{name}', function ($request, $response, $args) {\n    $this[TwigView::class]->render('profile.html', [\n        'name' => $args['name']\n    ]);\n})->setName('profile');\n// Run app\n$app->run();\n```\nBut this again would break with static analysis.\n@geggleto I really dislike in the example above the signature change, that for me personally would be an absolute reason why I would not upgrade my current projects.\nCould you provide more information about how this would break your applications?\n@codeguy I guess we could inject the container into each factory method via use and rely on the get($id) interface method. Messy, but it solves the problem.\nNot really. Currently, no IDE would be happy about this approach. This is all duck-typing.\n. @pmjones It is not necessary to have a ServiceLocator passed around everywhere. Once you have received an object (e.g. Some form of a controller) from the DIC, this object could be already instantiated with all dependencies attached and has no inner dependency to a ServiceLocator anymore. But for the Slim-Layer, this ugly ServiceLocator is the only way of accessing other objects. \n@geggleto That would be no problem as long as slim won't drop the ability to access objects though that $app-container. But why did you even do that? Autowiring is much simpler and for a certain extent  'immune' to drastical dependency-changes in your application's business-objects. \n. @ecoreng That is more or less what I've mentioned earlier. But you also have no solution for the SL-problem. \n. ",
    "pmjones": "@codeguy I started writing a much longer answer, but I realized that the question comes down to this: Do you actually want Dependency Injection proper, where dependencies are always injected into object from the outside? Or do you just want a Service Locator you can pass into objects so they can retrieve their own dependencies?  The answer to that will determine everything else.\n(For the record I am no fan of Pimple, but I can see why it appeals to you given Slim's history of using the Service Locator pattern.)\n. @geggleto Yes, Service Locator is quicker, easier, more seductive. ;-)\n. @rkrx Believe me, I know. I'm more interested in what @codeguy wants here. I'm no fan of SL, but it might be better for what @codeguy sees as the target audience for Slim. \n. ",
    "MarcusSchwarz": "Hi @lalop \nhonestly, I don't know. I found the bug in xhgui and did a quick fix. I never used the Slim Framework. I created the pull request against the dev-branch. I think I shouldn't have created the branch from master :/\n. ",
    "tyurderi": "Oh, didn't noticed the description on README.md, just saw the documentation on slimeframework.com\nWorks perfectly with\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^ index.php [QSA,L]\nThank you anyway.\n. ",
    "zither": "/cc @codeguy #1169\n. Agreed.\n. for option 1, POST values are also part of HTTP body.\n. Maybe you can send a PR.\n. php\n    // https://github.com/slimphp/Slim/blob/3.x/Slim/Http/Headers.php#L52\n    public static function createFromEnvironment(Environment $environment)\n    {\n        $data = [];\n        foreach ($environment as $key => $value) {\n            $key = strtoupper($key);\n            if (isset(static::$special[$key]) || strpos($key, 'HTTP_') === 0) {\n                if ($key !== 'HTTP_CONTENT_LENGTH') {\n                    $data[$key] =  $value;\n                }\n            }\n        }\n        return new static($data);\n    }\nSlim creates headers from $_SERVER, and does not parse each header's value,.\nso you can't fetch expected value with Request's getHeader method.\n. ",
    "alexantr": "PSR-7: vote cancelled\nhttps://groups.google.com/forum/#!msg/php-fig/42WhFKJzgrQ/9YbhKdLEOp4J\n. Without return $response; we have fatal error:\nCall to a member function getStatusCode() on a non-object in .../vendor/slim/slim/Slim/App.php on line 354\nSo sad.\n. ",
    "mariano": "@akrabat forgot to ping you back after that code change\n. @akrabat I forgot to mention, that if this proposal is accepted I'll get the PR ready, with updated tests\n. I'd be +1 for using @\nOn Apr 21, 2015 6:02 PM, \"Matthieu Napoli\" notifications@github.com wrote:\n\nI concur that the . is sometimes used for \"namespaces\" in container entry\nkeys, e.g. module.user.manage_controller.\nI think in Laravel or Lumen they use the @ symbol.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/issues/1181#issuecomment-94942817.\n. @nhymxu i actually agree. I added this because the current form is broken, as callbacks are expected to return the response object now.\n\n@codeguy should this echo sample work as-is then? If so I can fix App so it allows such cases\n. @akrabat ok. What about echo vs Response?\nOn Apr 18, 2015 2:45 PM, \"Rob Allen\" notifications@github.com wrote:\n\nType hinting the $request and $response is optional.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/pull/1183#issuecomment-94186965.\n. @codeguy I'm also pro-bringing back echo.\n\nI can get a PR ready if you like\nOn Apr 18, 2015 4:26 PM, \"Josh Lockhart\" notifications@github.com wrote:\n\nhaha there are vocal people on both sides. Some for echo, some for strict\nPSR-7 and returning the response object. I'll figure out if I want to\nrestore echo before v3 release.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/pull/1183#issuecomment-94193955.\n. \n",
    "dopesong": "You can use for Slim view whatever you want and extend it by yourself. You can look to this example to see how to extend it: https://github.com/slimphp/Twig-View/blob/master/src/Twig.php\n. @designermonkey any news about it?\n. @geggleto there is helper method withRedirect for redirects :+1: \nAlso php version: 5.5+\n. Reported to HHVM: https://github.com/facebook/hhvm/issues/6340\n. Have you tried: withJson method? What you get with it?\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Http/Response.php#L285\n. @silentworks I think we should mention this in docs, because it's common question.\n. Just tested with my broken app. Everything works fine now :+1: \n. +1 for @designermonkey suggestion\n. This case is broken:\nphp\n$app->group('/v1/users/{id:[0-9]+}', function () use ($app) {\n    $app->group('/notes', function () use ($app) {\n        $app->get('[/{count:count}]', 'App\\Modules\\V1\\Users\\Notes\\NotesController:getUserNotes');\n        $app->post('/', 'App\\Modules\\V1\\Users\\Notes\\NotesController:addUserNote');\n   });\n});\nPOST:\nv1/users/1/notes - not working\nv1/users/1/notes/ - working\nReturns\nMethod not allowed. Must be one of: GET\n. See #1597\n. +1 for DoublePassWrapper. Throw exception when not able to create cache file - do not check is dir writable or not. Because like @SvenRtbg said I would prefer to precompile cache file during deploy process :)\n. I think it should be in separate repo - like container-interpop interface.\n. I'm using slim for APIs so it's wasteful for me to have such interface with Slim. I think Slim should stand for its name and should not cary what is not needed. As twig view and your php-view are just 3-rd party libs in my opinion they should implement some interface which works with PSR-7 and should not be attached to Slim. :)\n. So we have Middlewares, we have PSR-7. What's the point of additional interface? Still, can't understand that while you can achieve the same thing with a more global approach. :). This is my nasty way for frozen service:\n``` php\n        $defaultSettings = $this->container['settings'];\n    if ($defaultSettings instanceof \\Slim\\Collection) {\n        $defaultSettings = $defaultSettings->all();\n    }\n\n    unset($this->container['settings']);\n\n    $this->container['settings'] = array_merge(\n        $defaultSettings,\n        $this->container['config']['settings']\n    );\n\n``\n. Yeah, I have the same, but in this case I'm using$this->container['config']['settings']` just for Slim settings\n. In my opinion - there is no point for class like this. There could be two options:\n- Add this functionality to main router.\n- Move it into separate repo as extension.\nAlso your example is lack of information how it should be used, because right now you need to change default router - what adds additional complexity.\n. Correct\n. @tuupola have you checked how it works with routes groups?\n. Will be added + additional to increase coverage \ud83d\udc4d \n. For proper test you should expect for error, not to suppress it.\nExample how to do so:\n``` php\n<?php\nclass MyTest extends PHPUnit_Framework_TestCase\n{\n    private $errors;\nprotected function setUp() {\n    $this->errors = array();\n    set_error_handler(array($this, \"errorHandler\"));\n}\n\npublic function errorHandler($errno, $errstr, $errfile, $errline, $errcontext) {\n    $this->errors[] = compact(\"errno\", \"errstr\", \"errfile\",\n        \"errline\", \"errcontext\");\n}\n\npublic function assertError($errstr, $errno) {\n    foreach ($this->errors as $error) {\n        if ($error[\"errstr\"] === $errstr\n            && $error[\"errno\"] === $errno) {\n            return;\n        }\n    }\n    $this->fail(\"Error with level \" . $errno .\n        \" and message '\" . $errstr . \"' not found in \", \n        var_export($this->errors, TRUE));\n}\n\npublic function testDoStuff() {\n    // execute code that triggers a warning\n    $this->assertError(\"Message for the expected error\",\n        E_USER_WARNING);\n}\n\n}\n```\n. With that strategy you can check if exact error triggered. Also you are correct that error handler must be restored, because set_error_handler is global.\nBetter to expect for error and value returned than suppress it.\n. Glad to see that ;)\n. I know. Trying to understand what is wrong with HHVM.\n. You removed slim.files, not slim.tests :)\n. ```\nFILE: /home/travis/build/slimphp/Slim/Slim/CallableResolver.php\n\nFOUND 0 ERRORS AND 1 WARNING AFFECTING 1 LINE\n82 | WARNING | Line exceeds 120 characters; contains 158 characters\n. Tests missing :)\n. So you don't need to create new PR, just add new commits to existing branch and PR will be updated automatically. :)\n. Which version of slim framework your are using? Any code example?\n. Yeah, but without code example we won't be able to help you :)\n. You should try to debug at which part of request you get blank screen. Maybe errors disabled in server and you can't see any?\n. Try to add logger and debug steps where it stops. Maybe it even stopped at User::create?\n. Duplicate #1941 \n. Its releated with php config, not code: http://stackoverflow.com/questions/13033407/php-ini-default-timezone-vs-date-timezone\n. Change your default timezone in your php.ini :)\n. Because it was answered and its not slim related @konskript \n. Why not to rawurlencode script name and `str_replace('%2F', '/', $scriptName)` instead?\n. So you can use custom exception handler and throw some kind of exception while your custom handler catches it and does what you want to do. :)\n. Coverage decreased (-0.2%) to 97.003% - you should provide tests for this :)\n. Check it here: https://github.com/slimphp/Slim/blob/3.x/tests/Handlers/PhpErrorTest.php#L88\n.\nFILE: /home/travis/build/slimphp/Slim/tests/AppTest.php\n\nFOUND 2 ERRORS AND 2 WARNINGS AFFECTING 4 LINES\n1985 | WARNING | [ ] Line exceeds 120 characters; contains 134\n      |         |     characters\n 1986 | WARNING | [ ] Line exceeds 120 characters; contains 121\n      |         |     characters\n 1988 | ERROR   | [x] Opening brace should be on a new line\n 2006 | ERROR   | [x] Function closing brace must go on the next line\n      |         |     following the body; found 1 blank lines before\n      |         |     brace\n```\n. No description provided. ?\n. Strange. Which php + phpunit version? Because travis passed.. @akrabat should be ok now.. @akrabat +1 for moving error handling to middleware. . But this just changes hardcoded output line: $output = 'Allowed methods: ' . $allow; Easer to extend plain message method than whole __invoke.\n. /ignore @akrabat \n. Copyright?\n. Double empty line?\n. ",
    "nunocodex": "I don't have any knowledge with Smarty but I think is easy to integrate with service provider, for a moment i working only with twig (smarty i think is the bad version of twig) but after complete my base project i can develop a simple service provider for smarty. I think you can check the old version (I think one or more developer already release a smarty service provider) and the update is more easy. If you have the old smarty service provider you can link and i try to help you for porting to slim3.\n. I think not want add the port if the port is standard, in your case you add in any case the port.\nThe mix of all 2 code is:\nreturn ($userInfo ? $userInfo . '@' : '') . $host . (false === $this->hasStandardPort()) ? ':' . $port : '');\n. I like it +1\n. +1 for restore the testing section, I think who working with the frameworks is a developer so know phpunit :+1: \n. I think the best way is remove the settings key and move the options inside example slim.outputBuffering this have more sense and you can use the DI how you want.\n. You cannot access with private method, for trait you need to put public.\n. ",
    "sclearion": "actually it's 7731 loc --no-dev for Slim (I don't think it's fair to count comments). Also if Lumen is faster then I wonder if the composite/extraneous packages are a contributing factor. If they are then it would be misleading to conclude that Lumen itself is faster than Slim. I too am curious about the throughput of Lumen. That being said I love Slim because it is a scalpel and it allows me to stick to true engineering of PHP components rather than being handed a toolbox. The better I got at PHP the more I appreciate tools like Slim. Keep up the great work team and thanks to all the contributors.\n. ",
    "pemedina": "This is what i get in an azure instance running apache 2.4.7 / PHP 5.6.7\nSiege\nsiege -c 5 -t 30S -b http://localhost/lumen/public/abc\nTransaction rate:         344.74 trans/sec\nsiege -c 5 -t 30S -b http://localhost/slim/public/abc\nTransaction rate:         433.96 trans/sec\nApacheBench\nab -t 60 -c 5  http://localhost/lumen/public/abc\nRequests per second:    388.85 #/sec\nab -H \"Connection: close\" -t 60 -c 5 http://localhost/slim/public/abc\nRequests per second:    478.52 #/sec\nI've ran these tests many times each and the results are consistent. Slim 3 is always faster.  Both urls are public:\nhttp://thesysadmin.cloudapp.net/slim/public/abc\nhttp://thesysadmin.cloudapp.net/lumen/public/abc\nNot sure if i'm doing something wrong. The \"Connection: close\" header has to be added to make ab work. This was discussed long time ago: http://help.slimframework.com/discussions/problems/24-high-loading-times-in-apache-bench. \nNot sure if i'm doing something wrong but, slim3 is always faster?\n. ",
    "Jusomeara": "PHP Dependency Injection Container Performance Benchmarks. Note these tests have been performed by the maintainer of Dice. Orno (now league) and Aura have had a few releases since these tests. The conclusion is that Orno is easier to configure than Aura may have changed.\n. ",
    "omarkhd": "If you decide to re-enable it, I'd be glad to help.\n. ",
    "netProphET": "Browsers do not make PUT or DELETE requests from HTML forms. Also, I do not believe that \"application/x-www-form-urlencoded\" is in any way a standard content type for REST requests. It can be used but it should not be assumed.\n. ",
    "Lewiscowles1986": "This is a problem that has been on my mind also, although I am not sure if a Slim problem, or a PHP problem... \nWould it not be more \"intelligent\" for lack of a better term to advise native parsing of POST data be switched off in the PHP ini file, and not parse anything; as it is a default behavior of PHP to assume POST data is form encoded, and not deal with any other formats or methods outside of POST.\nAs a reference, please see http://php.net/manual/en/ini.core.php#ini.enable-post-data-reading\n. > You can safely assume that no one will ever turn off POST parsing.\nActually I do, and it makes my PHP serve requests faster (although marginally); and guarantees me, that if I should want to deal with POST, or any data from request, PHP won't provide a confusing alternative...\nIt seems absolutely mind-boggling to me that you think anyone took the time to implement turning off a feature; (thereby implementing their own feature, likely needing testing) without there being a valid use-case...\nTo quote the manual\n\nThis can be useful to proxy requests or to process the POST data in a memory efficient fashion.\n. This is probably not the right place for this discussion, but it was only introduced as a fairly recent feature, so unless either of us can get numbers I think it's fair to conclude neither has the ability to quote researched numbers; the merits of my case is that I feel the existence and mention of the feature in the manual, as I have written; suggests to me, it's not that niche a feature...\nenable_post_data_reading  \"1\" PHP_INI_PERDIR  Available since PHP 5.4.0\nhttp://php.net/manual/en/ini.core.php#ini.sect.data-handling\n\nN.B. Please do not come back with I run N servers that don't, because I'll just come back with how many servers I use that do, and it will mean nothing, just like the netcraft figures, which don't cover this setting.\n. Or to those like me that try to use the code from the docs for PSR-7 that doesn't work :+1: \nAlso is it lost on anyone that this is 1337 :astonished: \n. Thanks guys!\nUser Story\nAs a PHP developer\nI want to Be able to define custom behaviour for as many application scenario use-cases as possible, with as little effort as possible.\nSo that I Spend less-time focusing on the technology, and am able to service as many request-scenarios as is possible for the applications I build. \n\nN.b I Think should be able to save time working on the lower-level \\Slim\\Container, or other implementation of system detail; and more time adding what I need. (This is a common user-story for me, I can be a tad focused on getting my end-result)\n. > @Lewiscowles1986 I can't come up with a valid use case for this... can you provide us a pseudo code example of what you want?\n\nSure thing\npatch-1 by @LewisCowles1986\nallows me to (Working code using above patch)\nPHP\n$app->notFound( function ($request, $response) {\n    return $response->withStatus(404)\n        ->withHeader('Content-Type', 'text/html')\n        ->write('404: Resource \"'.$request->getUri().'\" not found');\n});\nwhich IMHO is more usable and consistent to the $app->{get|post|delete|...} syntax employed elsewhere.\nI Can take it out of patch and move it to my own repo if you think Slim users won't be interested, or it isn't in keeping with your ideas, but essentially, it can be used for Slim n00bs like me, and even helps current and legacy slim v2 users to achieve very readable and purposeful, familiar code.\n. Hi there! :smile: \nUnfortunately the code you added earlier, and the last comment are not at all what this issue is about.\nAs a PHP developer\nI want to Be able to define custom behaviour for as many application scenario use-cases as possible, with as little effort as possible. _In this case add event handlers for notFound, error, and notAllowed.\nSo that I Spend less-time focusing on the technology _(Adding to container, telling it to use container, using different method to other handlers), and am able to service as many request-scenarios as is possible for the applications I build _(Okay so maybe over-dramatic, I could use notFound, error and notAllowed, but it's harder than it should be, the code looks a little bit of a mess to do something so simple, and it is inconsistent with other similar tasks when coding using Slim.)_  \nCurrently to register the application to handle a get request\nphp\n$app->get('/', function($request, $response) {\n    $response->write('Yo there!');\n    return $response;\n});\nTo add custom 404 not-found-handler _(current)_\nphp\n$c = $app->getContainer(); // lets ignore if we have app or are adding the a container pre-app, either way it works like this\n$c['notFound'] = function ($c) {\n    return function ($request, $response) use ($c) {\n        return $c['response']\n            ->withStatus(404)\n            ->withHeader('Content-Type', 'text/html')\n            ->write('404: Resource \"'.$request->getUri().'\" not found');\n    };\n};\nWhat I am proposing _(included in *__this patch_)***\nphp\n$app->notFound( function ($request, $response) {\n    return $response\n        ->withStatus(404)\n        ->withHeader('Content-Type', 'text/html')\n        ->write('404: Resource \"'.$request->getUri().'\" not found');\n});\nSo basically I am asking if adding helper function(s) would be acceptable to \n- reduce code\n- make overriding built-in handlers simpler\n- promote a consistent format when adding handlers to deal with application scenarios\n- decrease unnecessary knowledge of implementation details such as containers unless necessary.\nWith additional benefits\n- Less code to write\n- Clearer intent\n- similar method name, and addition to v2\n\nApologies if this is still not clear, and if the use of the word error has cropped up anywhere, confusing matters.\n. juriansluiman agreed, and nice article, but I still think needlessly containerizing common use-case parts of code could be a mistake. It doesn't really matter, but it is much less readable; Anyway I seem to be the only person that thinks ->notFound(... is more readable than ->getContainer()[...\n. Surely the subRequest could be replaced with an API call or command pattern; if for example Auth and ACL, session data etc was needed, this would also be more descriptive. Using this command pattern in each route (the /hello/{name} request, and the '/') call a command and can share data from the app's di container. Is this the desired reason for using middleware on subRequest?\n. it is possible, but not using just slim. The point of a micro-framework is to be able to bolt-in other libraries. I recommend https://github.com/jmathai/php-multi-curl. It has some pretty simple syntax, and if you need to add params just implode the values with the relevant separators.\n\nPlease also bear in mind this is not the best solution to calling other URL endpoints, but it will get you motoring, and if you target a specific domain, that has load balancing, it can be a poor man's load distribution.\n. @kminek Sorry I don't understand why you would want to do this. From what maybe is my limited understanding of your goal, or problem, it seems easier to just send another request. Personally I would use command pattern for this rather than a route, then you can set data for the command.\n. First part done, work catching up with me though :+1: \nhttps://github.com/slimphp/Slim-Website/pull/21\n. It looks like I forgot where I was with it... Pull request is still active...\nWhy is this closed?\n. :+1: :wink: oh yeah haha\n. Nothing wrong with IRC per-se, but there can be a certain perception. Also unsure if you use a bot, but if you do probably not a lot of value from Gitter, it basically watches GitHub for issues and PR's and links them, which is nice. Also it's Auth usernames are GitHub usernames\n. buddy @geggleto code was for the browser JS, using X-Form-Encoded, so you'll need to send your JSON body inside another object\njavascript\nfunction send_data(data, url, method, success, error) {\n    method = (method || 'GET').toUpperCase();\n    success = success || function(data){ console.log('Success:',data) };\n    error = error || function(err){ console.log('Error:',err) };\n    jQuery.post( url, { \"_method\" : method, \"json_data\" : JSON.stringify(data) }, success ).error(error); \n}\nusage\njavascript\nsend_data({'some':'json'},'/wherever','PUT');\nthen in your app when you want to use your json data simply json_decode it (perhaps do this in a middleware so it is throughout your app?\nWhat I don't understand is why your HTTP frontend needs to use PUT; API's generally don' connect directly to web-browsers\n. surely in angular \njavascript\n$http.put(url, json_data).\n  then(\n    function(response) {\n      //success\n    },\n    function(response) {\n      //failure\n    }\n);\n. :+1: so closed, or is the dir of middleware going to be added to Slim?\n. Maybe have a clearer laid out Slim\\Exception namespace then? Two different namespace levels?\nSlim\\Exception\\Http\\NotFoundException & Slim\\Exception\\Container\\NotFoundException\n. > I'd be for strtouppering methods. I usually use uppercase only for constants and consider it good practice.\nOf course strings are data, not code, so coding conventions should not affect the use of case in a string...\nSlight other suggestion if the developer wants to use case-insensitive, I think @silentworks suggestion was 100% on-point \n. Hi @akrabat not looking to override the router itself, but asking about handling routes themselves via di instead of require as in your slim3 example\nSo non-trivial complex services that register routes themselves, maybe even middleware also with an application.\n. Thanks @geggleto!\n. What exactly is the problem with the \".\"?\nI'm assuming it's because fastroute uses regex, so you could (if this is the problem) simply escape the dot?\n. Thx, I don't use the built-in server (not sure why anyone would), so IDK, maybe don't use built-in-server could be good advice?\n. @tuupola if you read the initial comment, @grikdotnet is using nginx. While the bug you are talking about is not part of Nginx, the behaviour @grikdotnet is experiencing is both for internal server and nginx...\n. @grikdotnet can you let me know\nOS + release, PHP version, nginx version if it's a VPS or internal PC.\nIf possibly a host-specific issue let me know the host (I'm assuming it's shared, after the comment about dedicated)\nAlso some sample code to reproduce the bug. If it exists I can either squish it or write a doc on how to avoid / work-around\n. I think you might be missing a call to parent::__construct().\nMore importantly I think this might work better as a middleware within a routing group for routes requiring login as it centralizes the login logic.\nNot really a slimphp issue\n. Just a thought, perhaps a time to drop the convinience methods ->get, ->post ->put at the next appropriate major version (4.x or whatever).\nThe idea being that map is about the same number of characters and is much more flexible. Jut an alternative idea\n. ",
    "neoncube2": "Thank you for the feedback, guys :)\nGod willing, I'll look into this within the next few days and get back to you with more details.\n. Okay, the issue appears to be when I try to access a PDO object through a Slim object.\n``` PHP\n$app = new \\Slim\\Slim(array(\n    'mode' => 'development',\n    'debug' => true,\n    'log.enabled' => true,\n    'templates.path' => './',\n    'cookies.encrypt' => true,\n    'cookies.secret_key' => 'CHANGE ME. SERIOUSLY, CHANGE ME RIGHT NOW.',\n));\n$conn = new PDO('sqlsrv:server =[info here]; Database = [info here]', '[info here]', DB_PASSWORD);\n$conn->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION );\n$app->conn = $conn;\nprint_r($app->conn); // This dies with the essentially the same error message as the one that I originally posted\n```\nDoing\nPHP\nprint_r($conn);\nvar_dump($conn)\nyields this:\n```\nPDO Object\n(\n)\nobject(PDO)#2 (0) {\n}\n```\n. Changing method_exists() to is_callable() in\n``` PHP\npublic function get($key, $default = null)\n    {\n        if ($this->has($key)) {\n            $isInvokable = is_object($this->data[$this->normalizeKey($key)]) && method_exists($this->data[$this->normalizeKey($key)], '__invoke');\n        return $isInvokable ? $this->data[$this->normalizeKey($key)]($this) : $this->data[$this->normalizeKey($key)];\n    }\n\n    return $default;\n}\n\n```\nin Slim/Helper/Set.php seems to fix the problem, and perhaps is_callable is better anyway? Thanks to  this article for helping me figure this out  :)\n. Thank you for the suggestions :)\n@JoeBengalen, actually, it seems like the code that I posted does throw exceptions when there's an error trying to connect. In fact, an exception is thrown even when I don't have the below line of code, although I'm not sure why.\n    $conn->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION );\nStill, I've changed to using your method, as your change does seem to make sense. Thank you again for the suggestion :)\nAny chance of the bug fix that I posted making it into the core code?\n. @silentworks, I respectfully disagree :)  It seems to me like using is_callable() instead of method_exists() makes sense because if method_exists() is true, the code calls the method, but even though the method exists, it may not be callable. Wouldn't it therefore make sense to use is_callable() instead of method_exists()?\n. @silentworks, I tried out your code using the singleton and it works. Thank you for it :)\n. ",
    "skywaymsn": "We use MSSQL server via FreeTDS.  It requires PHP be built with --with-mssql=/path/to/freetds\nIn order to support this, we maintain a build of FreeTDS that we bring along with PHP when we deploy.  http://www.popmartian.com/tipsntricks/2014/10/20/how-to-build-non-root-freetds-for-linux/\nConnect via:\n    $dbh = mssql_connect ($config->dbhost, $config->dbuser, $config->dbpass)\nWe actually found it much faster and easier to abstract database queries from the Slim API and instead, have the API reach out to a dedicated SQL gateway.\n. Sure, extremely primitive:\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^ index.php [QSA,L]\nWhich checks to see if a file does not exist, but I'm not sure how Slim manages to convert a method if it does exist.  Apache logs the request as POST, but internally PHP and Slim see 'GET'\n. That's the solution!  I should have known better.\n. ",
    "chasepeeler": "I don't know. I haven't had a chance to dive into v3 that much to determine that. It definitely would not be a straight-forward merge even if it was.\nI understand if you're only doing security fixes, I thought that was the case, but figured it wouldn't hurt to create a pull request just in case.\n. ",
    "michaelvli": "D'oh!  Of course, the error is in Javascript!  Thanks, Joe... guess that's what happens when I code late at night.\nYou're right on - Javascript was having problems with the response (I thought PHP was having problems encoding $response).  But, the root of the problem was from my API - I was sending a json response (content-type in header was set to \"application/json\") while one of my functions was producing an echo.  Because echos output data in string format, the response that the Javascript front-end was receiving was actually string (from the echo) AND json (from $response), which caused the JSON.parse to break.  So, there were two learnings for me: \n1)  Correctly identify the origin of the error (i.e. client-side or server-side).\n2)  Make sure my entire response is actually json (don't mix data types).\nThanks!\n. ",
    "realart": "If I invoke /test, it prints \"some nice output\" and crashes with exception:\n```\nUnexpectedValueException: Middleware must return instance of \\Psr\\Http\\Message\\ResponseInterface'\n0 C:\\projects\\flsite\\vendor\\slim\\slim\\Slim\\MiddlewareAware.php(106): Slim\\App->Slim{closure}(Object(Slim\\Http\\Request), Object(Slim\\Http\\Response))\n1 C:\\projects\\flsite\\vendor\\slim\\slim\\Slim\\App.php(346): Slim\\App->callMiddlewareStack(Object(Slim\\Http\\Request), Object(Slim\\Http\\Response))\n2 C:\\projects\\flsite\\index.php(16): Slim\\App->run()\n3 {main}\n```\nIndex.php\n```\nrequire 'vendor/autoload.php';\n$app = new \\Slim\\App();\n$app->get('/test', function($req, $res, $args) {\n    echo 'some nice output';\n});\n$app->add(function($req, $res, $next) use($app) {\n    $newResponse = $next($req, $res);\n    return $newResponse;\n});\n$app->run();\n```\n. But this will force me to manually do output buffering (start my callable with ob_start and end with writing contents of ob_get_clean into response body) in each and every route callable. Previously this was handled automatically by framework.\nMy applications route definitions are structured like this:\n$app->get('/', function($req, $res, $args) { return include('pages/home.php'); });\n$app->get('/search', function($req, $res, $args) { return include('pages/search.php'); });\n$app->get('/fragments/users', function($req, $res, $args) { return include('fragments/users.php'); });\netc.\nWhere each included file handles everything (setting page title, invoking 404 handler, outputting response body with echo or plain text...)\nHow I use Slim 3.0\nI am not using templating engine. Include files serve both controller and view functionality with plain PHP. This approach actually releaves me of unnecesary overhead of building variable arrays for passing to template object etc. And, believe or not, I am actually somewhat of  a MVC purist :D\nI have two types of routes:\n- \"page routes\" which represent a full page URL that visitor may visit\n- \"fragment routes\" which output HTML of some fragment of a page (think \"partial views\"). These are used heavily with Ajax for various widgets, partial loads etc.\nI use one application middleware callable which looks at the request URL and, if it does NOT start with \"/fragments/\", calls the next middleware (which corresponds to the actual page route callabe), saves its response body in a variable and pastes that variable inside a layout view (think \"master view\"), which, itself is just a plain PHP template and contains the head and body structure of HTML document, site-wide javascript and css references etc.\nFor both page and fragment routes, my single application middleware callable also looks up if there is a corresponding javascript file in my sites js folder (with the same name as the route fragment) and includes it.\nI can also output response of any fragment route inside any other route using subRequest.\n. This functionality is actually very handy - no need to attach group-related middle-ware to each route within a group.\n. ",
    "willrowe": "I don't believe that $s are allowed in urls like that, it should be properly encoded as %24. If you run head$remainingcontent through the urlencode function it will output head%24remainingcontent.\n. ",
    "YeapseRinkado": "Ah, sorry about that, I forgot to transfer it.XD\n. ",
    "rivetchip": "It may be a detail, but isn't it better to not use the final keyword for classes, and use protected over private for props/function ? So that we can more easily extend those classes and access props.\n. @lalop Thanks I haven't seen it, I'll look in more deeply.\n. Everything is indicated in the doc on how to use rewriting on different web-servers ;) \n. @akrabat I have nothing more than a fresh install from Slim3 repo.\n``` php\nrequire 'vendor/autoload.php';\n$app = new Slim\\App();\n$app->get('/', function ($request, $response, $args) {\n    $response->write(\"Welcome to Slim!\");\n    return $response;\n});\n$app->run();\n```\nReproduce : simply do a request with a custom HTTP method, example with CURL :\ncurl 'http://127.0.0.1/Slim-3.x/' -X AAA\n( where \"AAA\" is the custom HTTP method, could be anything not in Http\\Request::$validMethods )\n. I found this when mistyping a method, whatever. I agree, the way it's implemented shouldn\u2019t change.\nWhat I was trying to say is when trying to override the method ( using form[_METHOD] or X-Http-Method-Override header ) and when this method isn\u2019t in the \"acceptable\" list of method ( Http\\Request->validMethods ), it throw an exception, the app catch it then return a response ( the Not-allowed handler ).\nWhereas when directly put a non-valid method ( ABC /folder/ HTTP/1.1 ), the exception is thrown like it always do, but that's all.\nIn this example, the Not-allowed handler is only used when overriding the method while I think it should be used for both.\nSorry, my English is somewhat crappy, I hope you'll get it all :) \n. ",
    "iisurge": "@lalop this did not work\n. ",
    "kminek": "there is often a need to render user-friendly page in case of fatal-error. i thought it would be nice to render response from $app['errorHandler'] like this:\n``` php\nini_set('display_errors', 0);\n$app = new Slim\\App();\nregister_shutdown_function(function () use ($app) {\n    $error = error_get_last();\n    $exception = new Exception($error['message']);\n    $response = $app'errorHandler';\n    $responded = false;\n    $app->respond($response, $responded);\n});\n$app->get('/', function ($req, $res) {\n    fatalerror(); // triggers fatal error\n    $res->write('Something');\n    return $res;\n});\n$app->run();\n```\ni created this PR just as a example, it can be canceled but i think\nsuch separation of concerns is needed\n. @JoeBengalen nice, this looks good :clap: \n. @silentworks done\n. sample code: https://github.com/slimphp/Slim/tree/develop#usage\nit's fatal error\nmy composer.json:\n\"slim/slim\": \"dev-develop\"\n. i am using PHP 5.4.25\nafter googling around:\nlimitation of empty() in PHP versions below 5.5:\nempty() only checks variables as anything else will result in a parse error. \nIn other words, the following will not work: empty(trim($name))\n. works for me too :)\n. i'm against this change, i think App class should not be polluted with more helper methods. it should be clearly documented (with examples) how to overwrite those services in the container.\n. to be honest i would like not to use subRequest at all. i wish something like following was possible:\nphp\n$app->get('/hello/{name}', 'HelloController:hello');\n$app->get('/', 'HelloController:hello')->setParam('name', 'grzes');\n. @Lewiscowles1986 man, i'm not talking about making curl requests. i'm talking about Route class feature that is missing in 3 but was in 2: https://github.com/slimphp/Slim/blob/2.x/Slim/Route.php#L259 \n. @akrabat ok that makes sense now - thx. \n. this is nice \nexactly the kind of feature i was asking here: https://github.com/slimphp/Slim/issues/1339#issuecomment-118484579\n. you can easily achieve what you want. set your custom exception handler via set_exception_handler ($this refers to some generic error class which holds reference to app object):\nphp\n    set_exception_handler([$this, 'handleException']);\nand then ALSO use this handler in Slim's callbacks:\nphp\n    public function errorHandler()\n    {\n        $self = $this;\n        return function ($request, $response, \\Exception $e) use ($self) {\n            return $self->handleException($e, $request, $response);\n        };\n    }\nthis way you'll have single place to handle exceptions and perform desired logic (based on custom exception class type for instance - like RecordNotFoundException or something like that)\n. hmmm i like the idea. moreover instead of the need to define 3 handlers (error, notFound, notAllowed) it could be like single service - exceptionHandler which would return correct response :) btw current NotFoundException name is misleading as it suggests HTTP exception instead of DI container exception :P\n. i totally agree with @dopesong - view renderers are third-party libs. i guess we will have to wait for PHP-FIG interface for view renderer in MVC :). @geggleto  why should Slim provide abstraction for third-party library? if we would like to take that\npath - why not provide abstraction for configuration or database access? Slim is micro-framework\nand as dopesong pointed \"should not cary what is not needed\". i'm against storing settings as plain array. storing settings (and referring to settings) via collection object is better idea as it implements collection interface and objects are passed by reference everywhere. this way i could implement custom settings object which for instance reads json, xml, whatever files and pass it to App. . maybe you are right i am open to corrections, i came up with this method because i needed a way to return slim's error page inside register_shutdown_function, i think this method would be helpful in other situations also\n. ",
    "zz": "I think slim team need work hard, you publish a book, but laravel release the lumen. I just use lumen. Can not wait slim3 always on the way.\n. ",
    "jtwebb": "I'm looking forward to the release too. Fortunately, I have the luxury of waiting.\n@JoeBengalen Waiting for PSR-7 to pass is a non-issue. As of May 5th it met the quorum and all were in favor at that time. So the remaining time and votes are all a formality now. For all intents and purposes, it's passed.\n@zz I agree with @nhymxu, Josh is doing this on his free time and without cost to anyone. So there's no need to tell him to work harder. If you'd like to see 3.0 released sooner, maybe you could give him a hand.\nI AM getting excited to play with the release, though :)\n. ",
    "moerphie": "Do you have a rough date for the release? -- (\"within the next 8 weeks\", \"in September\" or something like that)\nDoes it make sense to build new projects with the current Slim 2.x or should we wait?\n. ",
    "drwx": "Wow, PSR-7 Acceptance, https://github.com/php-fig/http-message/releases/tag/1.0\n. ",
    "russkin": "This issue reproduced in Slim version 2.3.5\nVersion 2.6.2 is correct.\n. ",
    "wudi": "OK Thanks.\nNow can i push to develop branch?\n. @lalop  Where's the push requests for Slim like improving, optimize performance?\n:)\n. ",
    "gabriel403": "@akrabat I added a description, hope that'll help.\n. @akrabat OK that sounds reasonable, hasAcceptHeader\n. @designermonkey have fixed the class suffix!\n. @akrabat is this fixed now?\n. We already have plenty of other simple, many even simpler, header helper methods, look at getContentLength for example. :-1: just because it's possible to do else where doesn't make sense to me, considering the already implemented helper methods. \nThe pseudo code you provided wouldn't work as you'd still need to split the return of $req->getHeader('ACCEPT');\n. Giving up on getting this into slim\n. Some phpunit idiosyncrasies \nWith --process-isolation\nLines:   85.67% (1022/1193)\nWithout\nLines:   84.58% (1009/1193)\nIf anyone has any thoughts what I need to fix for this, glad to hear them!\n. @akrabat i'm quite happy for this to merge and i'll open up further PRs as I create more\n. @akrabat can we close this now?\n. @codeguy I'm happy to have a go at this, but what should we do if it's not writeable?\n. ",
    "elhsmart": "@maldoinc, I think it would be nice to add some doc comments to the methods of your classes and merge whole repo into https://github.com/slimphp/Session-Middleware\n. ",
    "needcaffeine": "That was not an accident. I intentionally removed it. There are no tests when you start off with Slim. Anyone who knows how to write unit tests knows how to use phpunit. It's just confusing for newcomers.\n. Okay, noted. I'll spend a little time making that section be more useful and restore it today. Thank you all for your thoughts on the subject.\n. Here we go.\n. Is there anything further you'd like me to do to get this merged in?\n. Hm, you're right.\n. Fixed both in the README and in index.php.\n. ",
    "elegos": "Sorry for the miswriting, yes - we're of course talking about Route and not Router :)\nNonetheless the RouteInterface is just nuts, it only defines getPattern and __invoke. I can understand the core library doesn't use setName or anything else, but shouldn't be the interface something more than what the core uses? In the documentation it's taken for granted you use setName, getName (via urlFor) etc.\nI know, I perfectly know we're talking about \"style\" in here, but in my personal opinion the interface should guide the developer to a standard way of writing the code, not only interfacing with the core. But I totally understand your point of view (i.e. the interface is the minimum you have to define to let Slim work by its own without using any \"extra\" methods).\n. Reading this discussion again let me think exactly why I opened it. When I did it, I wasn't 100% sure about why I wrote it (yes, I complained about the missing methods). Now that I've got a clearer view of the problem, it's the following: I expected the interface to perfectly match the Slim implementation (which I though was a reference, functional one). So when I tried implementing my own Route using the RouteInterface I was confused why there wasn't setName etc. I know this is more than adding methods in an interface which should, by project and original idea, be as \"slim\" as possible.\nA possible solution though could be to create an extended route interface, for example ExtendedRouteInterface which includes all the extra methods, keeping the core interface clean. What do you think about?\nP.S.\n@akrabat I saw your Slim 3 Primer :+1: \n. ",
    "bcremer": "Just wanted to make sure this change was intentional and will not change. Pull requests are ready.\n. Since all linked PRs are merged this issue can be closed.\n. ",
    "Melbournite": "Definitely.\n. Generally speaking, are there any downsides to using aura over FastRoute? Assuming there's minimal work required to switch them out... I know FastRoute was originally chosen due to its speed. At the same time, optional paramters is an absolute must IMO.\nI can't really find any reliable real world bench marking between the two besides here: https://github.com/tyler-sommer/php-router-benchmark\n. Middleware on groups is more just a convenience thing I guess. I am still interested to see any performance degradation with Aura being used. I'll try do some tests tomorrow.\nIs the general consensus that Aura should be switched in agreed?\n. @zyx-rd \nTo give you some piece of mind, I've been building an application on the dev branch for the past couple of weeks to get my head around how different it all is (things are quite different IMO).\nBesides the optional route bug, I've not found any problems as yet. I don't think there are plans for any new features, either. Generally, the branch is pretty stable. Obviously, developing on a dev branch is of course always a little risky though :)\nWill be interested to see what is decided on the routing bug. Real shame with the optionals not working.\n. Maybe see here: http://docs-new.slimframework.com/concepts/middleware/\n$response->write('BEFORE');\n$response = $next($request, $response);\n$response->write('AFTER');\nTo append something in Twig:\n$app->view->offsetSet('key', 'value');\nReturn:\n{{ key }}\n. The service provider isn't currently completed for cookies. When it's ready it'll be here: https://github.com/slimphp/Slim-Http-Cookies\nIn the meantime I'd suggest using the standard PHP functions. It'll be pretty easy to change over when it is available.\n. In general, I am okay with it. It probably makes sense. But should it wait for a later release?\nI know it's not yet entered beta or any RC stage and this is when we're meant to change stuff, but the fact is people have found it stable enough to start using, myself included. Not only this, there's already a few tutorials, videos etc. floating around with the urlFor() function used. Renaming it now would essentially break them... Easy to fix I realize, but at the end of the day we're only changing a word.\nOn the other hand, the inconvenience is only for early users, rather than potentially many more later down the path.\n. If changed, Twig-View is going to have to be updated too, which relies on urlFor. Not sure if other service providers do also.\n. For me personally, if this is to happen I think deprecating the function with the alias is a nice way to go as suggested by @codeguy.\n. Related question -- Are we going to rename url_for() in Twig-View to match what we named it here? Being I guess path_for() for consistency? Deprecate url_for() and I guess create a uri_for() or similar so that names are aligned with functionality and maintain a level of consistency. \n. ",
    "PSchwisow": "DO EET!!!\n. ",
    "jacobemerick": ":+1: \n. ",
    "dayofr": "Go for it\n. ",
    "rkarkut": "Agreed\n. ",
    "kosgug": "@tuupola Thanks.\n@gpoole Yeah, i will do it with ajax, thanks.\n. ",
    "Boldewyn": "Um, yes, that's what the issue is about. There is nothing displayed on the second (i.e. the next) request, e.g., when I reload the page. The messages never get promoted from the next to the prev queue.\n. Nope. It's always NULL, independent on how often I reload the page. Using PHP 5.5.6, if that is of any significance.\n(No other code at work here. I test with the exact two files, that I wrote above, Slim installed via Composer.)\n. No change, unfortunately. (Also I included it because of a remark in the Slim docs themselves.)\nMy composer.json:\njson\n{\n    \"name\": \"foo/bar\",\n    \"require\": {\n        \"slim/slim\": \"^2.6\"\n    }\n}\nSo it's really only\ncomposer.json\nindex.php\ntemplates/delme.php\nand no flash() messages :(\n. In the route I included a\nvar_dump($_SESSION);\nbefore the $app->flash() call, and it's almost empty:\narray(1) { 'slim.flash' => array(0) { } }\nSo there are no flash messages from the last request stored (but the slim.flash array itself, strangely).\n. OK, I've started diving into the Slim code. Obviously, Middleware\\Flash::save() is called twice after the route execution, and that makes the second save() overwrite the flash messages with an empty array.\n. I've found the problem:\n$app->add(new \\Slim\\Middleware\\Flash());\nIt seems, the Flash middleware is already added per default. This line creates a second instance, clobbering the data of the first one.\n@geggleto Thanks for your help and the patience!\n@codeguy Is that something, that the documentation should state somewhere? I.e., that some middleware is already included and doesn't need to be added separately?\n. ",
    "stratedge": "Totally understand - and in the long run I definitely agree that the best route is the one that fosters interoperability through some standardization.\nI'll take a look at the list of issues and see if there are bugs or improvements to squash in my spare time, that'll probably be more helpful for everyone.\nI'll close out the request so it doesn't linger.\n. ",
    "rszrama": "What about middleware not maintained in the slimphp organization? Could I still use the Slim\\Middleware namespace to organize my own code?\n. :+1: \n. Carpe diem! https://github.com/slimphp/Slim/pull/1320\nI hear ya on the \"it will bother the people using the framework now\", so it seems the best thing to do here will be to just rename the function and not add an actual urlFor(). This allows anyone currently affected to do a simple search / replace and everyone in the future to tighten up their language.\n(fwiw, I've maintained a few projects with a lot of early adopters whose livelihoods I've held in my git repos, so I'm not ignoring the inconvenience; it just seems like now is still the appropriate time for a change like this to be made, and the developers affected will be the most competent to address it.)\n. I just saw that as well. I'm new here, so I didnt know to check the other slimphp repos to assess impact. Are they being kept up to date with develop here?\n. New major versions are the right time for backwards compatibility breaks.\nI would argue that semantic precision is important. It communicates careful thinking to new adopters of a technology. In this case, I believe what urlFor() returns is not a URL. If that's the case, why maintain the dissonance simply because prior versions introduced it?\nI mentioned above the Drupal approach of a parameter overloading the url() function to accommodate multiple return types. I believe this is bad API design that would be better addressed by separate functions.\nThere are plenty of discussions about \"absolute\" vs \"relative\" URLs on the web, however, and I'm willing to admit the case may be made based on the W3C URL draft spec (https://url.spec.whatwg.org) that urlFor() could be described as returning a subset of their conception of a relative URL (which they actually refer to as a \"path\", fwiw, as opposed to a \"scheme-relative URL\" that includes the domain). The IETF doesn't seem to make a similar accommodation (http://tools.ietf.org/html/rfc3986#section-1.1.3), so I believe these bodies are at odds, with the W3C's recommendation being driven by the historic usage of URLs in a tags and their stipulation that in order to be used, a base URL must be in scope.\nAnyways, I think there's solid support in the standards here, just like using named route mappers conforms to the standards for HTTP method definitions. I won't lose any sleep over this, but I will say that I at least as a newcomer was thrown off by the name vs. the return value.\n(And re: BC breaking, I believe there are other changes to the definition of routes / patterns that will require much more accommodation than a search / replace from one name to the next. : )\n. Sweet, my first little commit here. : )\nAlso, never knew about trigger_error(). Ya learn something new every day...\n. Yeah, the question really came up because I was writing middleware for a Slim 3.x application that I also wanted to be framework agnostic. Right now my middleware is compatible with Slim 3.x but would be incompatible with another theoretical framework adopting Slim's signature pattern without its practice of using the more robust interface. I'm not sure any such frameworks do or should exist, but I need to decide if I should continue using ServerRequestInterface in my type hint or refactor my code to accommodate just RequestInterface to maintain interoperability.\n. ",
    "ahundiak": "Here is a proposed implementation.  Figured it might be easier to discuss the design here instead of inside a PR:\npublic function withJson($data, $status = 200, $encodingOptions = 0)\n{\n    $body = $this->getBody();\n    $body->rewind(); // Replace contents instead of trying to append\n    $body->write(json_encode($data,$encodingOptions));\n    return $this->withStatus($status)->withHeader('Content-Type','application/json;charset='utf-8');\n}\nThe default encoding options are my main question.  The smart folks at Symfony have kept their class RFC4627 compliant with:\n$encodingOptions = JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_AMP | JSON_HEX_QUOT;\nwhile PHP targets the newly proposed RFC7159.  My inclination is to just go with PHP.  If someone needs to support old json processors then they can add the encoding options.\nThe S2 version also has a bunch of code to setup an error handler.  I don't see this as being necessary.\nI added charset to the content type because json_encode requires all strings to be utf-8 encoded.\nSuggestions?\n. That is indeed the 64,536 dollar question.  I confess I don't have a clear understanding of the Slim Framework's goal with respect to making inter-operable middleware.  There are a bunch of non-PSR7 methods in the Slim request/response classes.  I only suggested withJson because they already had withRedirect.\nEven worse (in my opinion) than the extra methods is the notion of binding the callables to the application instance.  So now the callables are not only dependent on the request/response objects but on the application object as well.\nYou could of course define withJson to be a service.  But then you have a problem in that your route callable it now dependent on a specific service.  Move to another framework and you still need the service to be available.  So you really have just pushed the problem off to the side.\nI think the Symfony folks have come up with the inter-operable missing piece of the puzzle by implementing the notion of a message bridge: http://dunglas.fr/2015/06/using-psr-7-in-symfony/ Basically, when you call $next the function should check the classes of the source request/response objects against the expected destination objects. If the classes are different then convert them.  I think that will go a long way in solving the inter-operable question but have not really messed around with it.\nSo the bottom line is that I'm comfortable with the notion of having additional non-PSR7 methods.\n. Getting back on topic:  Implemented Response::withJson in PR #1286\n. Going back off topic and returning to the discussion of using non-Psr7 methods in the message objects:\nI understand the perspective of framework developers in that you want your framework to be as fast and easy to develop in as possible.  Hence implementing middleware against specific Slim classes is fine.\nHowever, as an application developer, I would rather write code against interfaces.  I disagree with the notion that you cannot share callables between different frameworks.  You might need an adapter and you might take a slight performance hit but I have shown to my own satisfaction that I can indeed share code between Symfony 2 and Slim 3.\nAs long as Slim middleware type hints against Slim classes then framework Interoperability is a possibility.  And wouldn't be nice to be able to market Slim as a direct competitor against Symfony without requiring Symfony developers to completely rewrite their code?\n. ",
    "jensscherbl": "\nIs this a pattern everyone would be happy with? It seems a little backward to me\n\nDoesn't make much sense to me either. I'd do it like one of the following examples...\n``` php\n// application\n$container->register(new \\Slim\\Flash\\Provider($_SESSION));\n// provider\nclass Provider implements \\Pimple\\ServiceProviderInterface\n{\n    protected $flashStorage;\npublic function __construct($flashStorage)\n{\n    $this->flashStorage = $flashStorage;\n}\n\npublic function register(\\Pimple\\Container $container)\n{\n    $container['flash'] = function ($container) {\n\n        return new \\Slim\\Flash\\Messages($this->flashStorage);\n    };\n}\n\n}\n```\n``` php\n// application\n$container['flashStorage'] = $_SESSION;\n$container->register(new \\Slim\\Flash\\Provider);\n// provider\nclass Provider implements \\Pimple\\ServiceProviderInterface\n{\n    public function register(\\Pimple\\Container $container)\n    {\n        $container['flash'] = function ($container) {\n        return new \\Slim\\Flash\\Messages($container->get('flashStorage'));\n    };\n}\n\n}\n```\n``` php\n// provider\nclass SessionProvider implements \\Pimple\\ServiceProviderInterface\n{\n    public function register(\\Pimple\\Container $container)\n    {\n        $container['flash'] = function ($container) {\n        return new \\Slim\\Flash\\Messages($_SESSION);\n    };\n}\n\n}\n```\n. > Middleware out there. We opt for using __invoke, so maybe an interface would be a good idea?\nFrom my understanding, any callable implementing the expected signature can be a middleware, so not sure if an interface would really be that useful. Same would probably apply to controllers / route callbacks?\nAre there any plans regarding Relay?\n. > NotFoundException is throwable inside my application, and is 'handled' by Slim to display the registered NotFound handler.\nI handled this by returning a notFoundHandler response in my controller action.\n```\nif (!$data) {\nreturn call_user_func($this->notFoundHandler, $request, $response);\n\n}\n```\nThis was pre-beta a few month ago and a bit ugly in my opinion, not sure if this is still up to date.\nBut yeah, what @designermonkey suggests is pretty much what I'd expect as well.\n. > All that is necessary in these situations is to return an appropriate response object. In which case, I'd suggest instantiating and returning an appropriate Response instance.\nSo my example is actually the recommended way?\n. > It's one way. Not necessarily the recommended way.\nWhat would be the recommended way (what would your code look like for handling this situation)?\n. Nice, thanks.\n\ni.e. it's possible that App may be at the bottom of a middleware chain run by Stratigility or Relay rather \n\nAny use case where something like this would make sense? Always thought it would make more sense for Slim itself to use something like Stratigility or Relay internally.\n. Thanks for the answers. So this is mostly a practical thing for working with legacy projects, or for using middleware that's not directly compatible with Slim?\n. ",
    "nikic": "fyi FastRoute now supports trailing optional segments using the syntax /user/{id:\\d+}[/{name}].\n. Is the [\\d:{2}] here intentional?\n. ",
    "HardieBoeve": "@akrabat, ok, i changed it.\n. ",
    "coveralls": "\nChanges Unknown when pulling a5d98f3c511a8ad63c864625cf57023176720575 on HardieBoeve:fix-issue-1290 into  on slimphp:develop.\n. \n\nCoverage increased (+0.2%) to 82.692% when pulling 0204d3e6c683903fa332f9d2349feeac2fea8990 on AlexStansfield:routeAttributes into 50de533fabd4a13ae994f119964accad3d350ffe on slimphp:3.x.\n. \n\nChanges Unknown when pulling 6eebd6ab5f6f428bef37132145e20679ae19375e on yurevichcv:feature/app-responder-fix-alternative2 into  on slimphp:3.x.\n. \n\nCoverage decreased (-0.2%) to 90.036% when pulling ef85550342390fbb8a10b4465a14e46be3a07b7a on ssotomayor:feature/1521-router-pathfor-fullpath into d5a3ef3427fe3138765d821a7500330f5e2b5d79 on slimphp:3.x.\n. \n\nCoverage remained the same at 89.668% when pulling 223ce872e34b45480af61830a44420e2bf42825a on irfanevrens:3.x.ContainerInterface into cb87423b4228a0743270eaa59576753d974e2c8d on slimphp:3.x.\n. \nChanges Unknown when pulling 56ae4474b36ac0fa727b676a49b5fb539a717b6c on aimeos:3.x into * on slimphp:3.x*.\n. \nChanges Unknown when pulling 3bf5be28f19c6d678ddf8cfbe7cd379f09862cdc on aimeos:3.x into * on slimphp:3.x*.\n. \nCoverage increased (+0.004%) to 96.607% when pulling 872a9d0c5f5e6737c89c1ea36fbf39fcfde7ea16 on aimeos:3.x into 805150e058b48471426d2deadc247e00d0f38c76 on slimphp:3.x.\n. \n\nCoverage increased (+0.003%) to 97.315% when pulling c71d8805cddc5262d857fc0f5a27f86e34cbf2f8 on aimeos:3.x into f68e58cee9f6213647f88cfc62fb05240b01e3a7 on slimphp:3.x.\n. \nChanges Unknown when pulling dc4995ac1439cd39fd7986ceaf2f65a1219a0490 on dopesong:coveralls into * on slimphp:3.x*.\n. \nCoverage remained the same at 87.975% when pulling 9d7ea1a93a495cffa6559c7313bb9f37451624a7 on dopesong:default-error-output into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage decreased (-0.6%) to 87.374% when pulling 2068b273f0bb91310a141f68129f122297071e2f on dopesong:default-error-output into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+0.5%) to 88.442% when pulling f100ab90db8b62402edef3c9a8ae2643a255bda2 on dopesong:default-error-output into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+2.6%) to 90.578% when pulling 042cd128100938df3b4ca567f5ad15b9e4de2acd on dopesong:default-error-output into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+2.6%) to 90.578% when pulling 042cd128100938df3b4ca567f5ad15b9e4de2acd on dopesong:default-error-output into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage decreased (-0.03%) to 87.94% when pulling ff147b9d41d330b1b888b923abaa84b45ffaf23b on dopesong:default-error-output into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage decreased (-0.03%) to 87.94% when pulling edef90a08aa1ea817f3ddfa1dcc1df6dc2cb30d7 on dopesong:default-error-output into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+2.5%) to 90.452% when pulling 28b97345dea7883a31f7629436ab4e89a150f0d8 on dopesong:default-error-output into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+2.5%) to 90.452% when pulling 79a49445f0b3d7ab5038dd5459a786b5df73a64e on dopesong:default-error-output into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+2.5%) to 90.452% when pulling b795e5a02ef574f7c3d4f8c15c6184d23e5a4584 on dopesong:default-error-output into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+2.5%) to 90.452% when pulling b79054442ddf9f4f47f7bb1823255d817ca44b38 on dopesong:default-error-output into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+4.5%) to 92.462% when pulling dfe1b061b7a2dd618df05e754a44131634767f6f on dopesong:default-error-output into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+5.4%) to 93.342% when pulling c579f19a0234a2dc56903ac0e3e00137b91e6bb2 on dopesong:default-error-output into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+0.08%) to 88.05% when pulling 3dc2c1448263c04e5626bdbf8ad845b1b84ce83b on tuupola:getallheaders-fallback into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+0.08%) to 88.05% when pulling 76b659835187f86760cc1f0b327caf7a33a554f7 on tuupola:getallheaders-fallback into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+7.8%) to 95.823% when pulling dc3cb6375d717d3217d011a587eb207645384460 on tuupola:getallheaders-fallback into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+0.07%) to 88.043% when pulling b570cec6b0801f5dd2f6ff3896a7d5f52769c71d on llvdl:1838 into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage decreased (-0.06%) to 87.917% when pulling 07410c8894f314e755a7c7e15b69adbd1850d232 on llvdl:1838 into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage decreased (-0.06%) to 87.917% when pulling 2a613144b7d139dcbbc780b99e0e6c785d1b908e on llvdl:1838 into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage decreased (-0.06%) to 87.917% when pulling 4a4c305da22910dbe1096c8d6f38b2533140e3e7 on llvdl:1838 into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+0.2%) to 88.191% when pulling f8d6249be4e66f91a4e5e276555ecec754875354 on llvdl:1838 into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+0.2%) to 88.158% when pulling 2e615a73d9edc9a79413070932f2fcde7a776288 on llvdl:1838 into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+0.2%) to 88.158% when pulling 0f3a41f8f369bd4796c511e4b75836e02d03bbaf on llvdl:1838 into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+0.2%) to 93.785% when pulling 5f7cb0c245eb36bc8aac724773dfeb6dcafeee90 on llvdl:1838 into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage increased (+0.2%) to 93.785% when pulling 0199b88e2639f9f79e2048f83478dd962da9ef47 on llvdl:1838 into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage increased (+3.002%) to 96.603% when pulling 2e5a54beb1b121464917e0aec0c7bca033e28d01 on llvdl:1838 into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage increased (+3.002%) to 96.603% when pulling 388272244ab335f2309448e881fb838abed425f1 on llvdl:1838 into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage increased (+0.2%) to 88.18% when pulling ae663591e0a697a88304b0ef216b53b87ab4d405 on danielgsims:error-loop-bug into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage remained the same at 87.975% when pulling 2a5dc645222a68fd4fbcae7036636c9f083fe7aa on adambro:use_class_constant into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage remained the same at 87.975% when pulling 82a37577c6e1696434c534afec00e3935915c552 on epitomus:fix-infinite-loop-in-exeption-handling into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage increased (+0.3%) to 88.291% when pulling 638bc7b9e2cbe86390a4e626921b79a238bbbcfd on epitomus:fix-infinite-loop-in-exeption-handling into 954472c9d805802a3438d0202fc451282eaa37fc on slimphp:3.x.\n. \nCoverage remained the same at 93.538% when pulling 488dfb9683ba1fe3d9957c061333b6923fbd2e16 on dopesong:abstract-handler-phpunit into 448d9a6b5c0e906ae4ad15c469e79e2d2a067a96 on slimphp:3.x.\n. \nCoverage remained the same at 93.538% when pulling 6330ae910a4f026ee8d60de1fd6ba267eb96b2a2 on dopesong:abstract-handler-phpunit into 448d9a6b5c0e906ae4ad15c469e79e2d2a067a96 on slimphp:3.x.\n. \nCoverage increased (+0.06%) to 93.601% when pulling 89029aecac53ef12a96536411d04ac3178d509d0 on dopesong:abstract-handler-phpunit into fd0228637e75bb9411a16dc170e40cb3c9c9b7c8 on slimphp:3.x.\n. \nCoverage increased (+0.1%) to 93.726% when pulling 131a8f4d4572618219bd6410380d2d7c978f4a0b on dopesong:headers-original-key-test into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage increased (+0.2%) to 93.789% when pulling af5454da48171de20214d679979a01e0c1468a2c on dopesong:headers-original-key-test into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage increased (+1.7%) to 95.295% when pulling fa6e9adce881a269aaa4174933380479fe12fe51 on dopesong:error-handler-phpunit into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage increased (+0.2%) to 93.789% when pulling 5649a78a6e9ca05591433fbb1af7796b5076e908 on danielgsims:router-test into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage increased (+0.2%) to 93.789% when pulling 2900788566c7608b461ad3c5da852efd0c817819 on danielgsims:router-test-alt into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage increased (+0.06%) to 93.664% when pulling 06f85510fdbd87b87e35ac23d238e4dac56bd7ff on dopesong:container-test-wrong-exception into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage increased (+0.06%) to 93.664% when pulling b9d08e99d7aafd36e94d6161ec3b54d7dc7b7823 on dopesong:container-test-wrong-exception into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage increased (+0.06%) to 93.664% when pulling 367677fa96f1ffb8491aa1ac79a43e2d782402c8 on dopesong:container-test-wrong-exception into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage remained the same at 93.601% when pulling 731715c444a7c3cfd97d767699d2181b94d2072f on dopesong:container-test-wrong-exception into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage remained the same at 93.601% when pulling 731715c444a7c3cfd97d767699d2181b94d2072f on dopesong:container-test-wrong-exception into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage increased (+0.06%) to 93.664% when pulling 5a98d09019e0dc05addf0d6e9aaecfc9a5bf594c on dopesong:container-test-wrong-exception into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage increased (+0.06%) to 93.664% when pulling 4de1902a7f64b4f854e00d5ac5fb71b3296fbd96 on dopesong:container-test-wrong-exception into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage increased (+0.06%) to 93.664% when pulling 1e26aef9df408b15b8247d54130353e8ae1d4942 on dopesong:response-status-phrase-test into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage increased (+0.06%) to 95.797% when pulling b7a2f5725da8d867b457ce089d8fe769108dce78 on dopesong:response-status-phrase-test into 55a594568786b6910a308d39ce3869e695781f34 on slimphp:3.x.\n. \nCoverage increased (+0.6%) to 94.228% when pulling fd8db476e21ef0a440f16c4fb93f428df0b3eb4f on dopesong:cookies-improve-tests into 794073a27b2dd9ef492124263038291b7f8daeb3 on slimphp:3.x.\n. \nCoverage remained the same at 96.446% when pulling c5348d1f568bd42fbe8b668a0c6edba1c10307c4 on danielgsims:version-bump into dbd275b11d791635d74df04135cd0ab3dbefdb0f on slimphp:3.x.\n. \nCoverage increased (+0.6%) to 97.084% when pulling d6f0ad38e50fc99ea3588794a6c11d5f63f10086 on danielgsims:test-headers into dbd275b11d791635d74df04135cd0ab3dbefdb0f on slimphp:3.x.\n. \nCoverage decreased (-0.007%) to 96.44% when pulling 7e204ed4c1ab0abe35773e779a1089a7c5e19875 on llvdl:small-fixes into dbd275b11d791635d74df04135cd0ab3dbefdb0f on slimphp:3.x.\n. \nCoverage decreased (-0.007%) to 96.44% when pulling ca50316907624afed880b1d62e5a1926be5272de on llvdl:small-fixes into dbd275b11d791635d74df04135cd0ab3dbefdb0f on slimphp:3.x.\n. \nCoverage increased (+0.06%) to 96.502% when pulling 593280b59598618052b3431623b1ca7656032772 on llvdl:small-fixes into dbd275b11d791635d74df04135cd0ab3dbefdb0f on slimphp:3.x.\n. \nCoverage increased (+0.06%) to 96.502% when pulling 1ac64601141105f25e91deab22000f43ea57b8a6 on llvdl:small-fixes into dbd275b11d791635d74df04135cd0ab3dbefdb0f on slimphp:3.x.\n. \nCoverage remained the same at 96.446% when pulling c097e03d8880fe20b56622a0db24686cb02c1aa6 on akrabat:fix-determine-content-type into dbd275b11d791635d74df04135cd0ab3dbefdb0f on slimphp:3.x.\n. \nCoverage decreased (-0.04%) to 96.406% when pulling 8035f87018713b691d741de5e7098b22f7e02c72 on danielgsims:tags into 48589f7078855ef050251676a26aea0eb69d196a on slimphp:3.x.\n. \nCoverage increased (+0.02%) to 96.468% when pulling 8a39b153a3a485f32c515638e1d242ff75ed1d67 on danielgsims:tags into 48589f7078855ef050251676a26aea0eb69d196a on slimphp:3.x.\n. \nCoverage increased (+0.03%) to 96.479% when pulling 7470db1d720891201b7f80085bb98577bee44a3d on danielgsims:tags into 48589f7078855ef050251676a26aea0eb69d196a on slimphp:3.x.\n. \nCoverage increased (+0.03%) to 96.479% when pulling 12eb42b2dc7440aa5b2c19a4174a41f9b82bc56d on danielgsims:tags into 48589f7078855ef050251676a26aea0eb69d196a on slimphp:3.x.\n. \nCoverage increased (+0.006%) to 96.609% when pulling ab5fa78aef5885989c93d48f4d264386f7611378 on adambro:request_uri_with_params into 30cfe3c07dac28ec1129c0577e64b90ba11a54c4 on slimphp:3.x.\n. \nCoverage remained the same at 96.603% when pulling 7ac36dcdfe75ac53e936920c9ac5b43e704c4149 on phpinfo-in-th:patch-2 into 30cfe3c07dac28ec1129c0577e64b90ba11a54c4 on slimphp:3.x.\n. \nCoverage increased (+0.1%) to 96.718% when pulling 7e41ef5f9573960a49435850312d44b9fa38aa36 on llvdl:gh-1890 into 30cfe3c07dac28ec1129c0577e64b90ba11a54c4 on slimphp:3.x.\n. \nCoverage decreased (-0.002%) to 96.601% when pulling 4010eb58143a48199b406b95e8a09370c0190461 on pine3ree:patch-24 into 30cfe3c07dac28ec1129c0577e64b90ba11a54c4 on slimphp:3.x.\n. \nCoverage decreased (-0.1%) to 96.484% when pulling b49a3fd77c2c1d9bea2ab9abafc6967d726a5ff8 on afief:improvement/route into 30cfe3c07dac28ec1129c0577e64b90ba11a54c4 on slimphp:3.x.\n. \nCoverage increased (+0.002%) to 96.605% when pulling f57f27a3239b568d880a45fc51221e676a301bfb on vicolachips44:dev-3x into 30cfe3c07dac28ec1129c0577e64b90ba11a54c4 on slimphp:3.x.\n. \nCoverage remained the same at 96.603% when pulling 784ffa48212161f59a6b62c9c6387aa48943f7f4 on Setitch:3.x into 30cfe3c07dac28ec1129c0577e64b90ba11a54c4 on slimphp:3.x.\n. \nCoverage remained the same at 96.603% when pulling fa9b968cfd1a354fed6a0b0bde0f5879d431355d on rnamiki:patch-1 into 30cfe3c07dac28ec1129c0577e64b90ba11a54c4 on slimphp:3.x.\n. \nCoverage remained the same at 96.603% when pulling a6165941174b26da97dea561b972bb055b1192c1 on vkhramtsov:fix-namespaces-usage into 805150e058b48471426d2deadc247e00d0f38c76 on slimphp:3.x.\n. \nCoverage increased (+0.3%) to 96.912% when pulling 1932226dbd7a3da24199b82bd7fa1a8e0b87c8b7 on dopesong:3.x into 805150e058b48471426d2deadc247e00d0f38c76 on slimphp:3.x.\n. \nCoverage increased (+0.3%) to 96.912% when pulling bd9d6e99a851643a233ae1c102cf0f7c7471ceca on dopesong:3.x into 805150e058b48471426d2deadc247e00d0f38c76 on slimphp:3.x.\n. \nCoverage increased (+0.6%) to 97.159% when pulling 025a9a140aefd9cfc60ccb9541e0d5ce2ccca21e on dopesong:3.x into 805150e058b48471426d2deadc247e00d0f38c76 on slimphp:3.x.\n. \nCoverage increased (+0.6%) to 97.159% when pulling c3ff2d9f93b233bb13d64b6bbd7147e9446f173e on dopesong:3.x into 805150e058b48471426d2deadc247e00d0f38c76 on slimphp:3.x.\n. \nCoverage decreased (-0.06%) to 96.547% when pulling 3e2088ca4056110c545789c0bbf1a89792c9cacb on rgasch:patch-1 into 805150e058b48471426d2deadc247e00d0f38c76 on slimphp:3.x.\n. \nCoverage remained the same at 96.603% when pulling 0774bff8388409d84c22842c7d2002d2efe1980b on opengeek:fix-moveto-with-stream into 805150e058b48471426d2deadc247e00d0f38c76 on slimphp:3.x.\n. \nCoverage remained the same at 97.159% when pulling 5ad0116ddb84f87abf03e6818309d5186663326e on opengeek:fix-moveto-with-stream into 9ab3603d42d26b5b8fd5d214deae6fed0528611d on slimphp:3.x.\n. \nCoverage decreased (-0.4%) to 96.246% when pulling 48a8d466c7e03ec7ef5ce024aa205a7f05bfee05 on martynbiz:patch-1 into 805150e058b48471426d2deadc247e00d0f38c76 on slimphp:3.x.\n. \nCoverage increased (+0.01%) to 96.615% when pulling d127682dda99243912208ed931cc8cf9b963a36a on martynbiz:martynbiz-patch-add-getCookieParam-method into 805150e058b48471426d2deadc247e00d0f38c76 on slimphp:3.x.\n. \nCoverage increased (+0.6%) to 97.169% when pulling 89a2e47542c21fa39b8ca0af0c76fbb0e480b66d on martynbiz:martynbiz-patch-add-getCookieParam-method into 805150e058b48471426d2deadc247e00d0f38c76 on slimphp:3.x.\n. \nCoverage increased (+0.002%) to 97.178% when pulling ee3f068b459fafe0f32fdecafb2070ad47c1d9bc on JoeBengalen:fix-basepath-space into a63b393a5d5d8ebf774c6716059b5ec151ae7198 on slimphp:3.x.\n. \nCoverage increased (+0.02%) to 97.2% when pulling df1591c944ef9e011029c6221bd8ceb107c4e94d on JoeBengalen:fix-basepath-space into a63b393a5d5d8ebf774c6716059b5ec151ae7198 on slimphp:3.x.\n. \nCoverage remained the same at 97.176% when pulling c63ba65f9a1aaf54f2c195df547bcc7b2325f7ec on luckyrocketshipunderpants:3.x into a63b393a5d5d8ebf774c6716059b5ec151ae7198 on slimphp:3.x.\n. \nCoverage remained the same at 97.176% when pulling a0ec13cd2afd9fad070bb220355cd1bc1631fd7e on p-golovin:patch-1 into a63b393a5d5d8ebf774c6716059b5ec151ae7198 on slimphp:3.x.\n. \nCoverage increased (+0.003%) to 97.18% when pulling 030831938064572c4e4c24a89519aa30e8dfe164 on joelhy:feat/getServerParam into a63b393a5d5d8ebf774c6716059b5ec151ae7198 on slimphp:3.x.\n. \nCoverage remained the same at 97.176% when pulling a9abdf5ab59dcceb113db7f8ea5b181fd820e910 on joelhy:fix/getCookieParam_phpdoc into a63b393a5d5d8ebf774c6716059b5ec151ae7198 on slimphp:3.x.\n. \nCoverage increased (+0.005%) to 97.185% when pulling b4f18109c7352216ac633a644e10b1cede81a5e0 on geggleto:feature-1962 into 1dedd2592c4f7e088ee3a87a7936f5df71cb7593 on slimphp:3.x.\n. \nCoverage increased (+0.003%) to 97.183% when pulling 103269e49e20527ea4fc99bbb13c54b1692f476a on geggleto:feature-1962 into 1dedd2592c4f7e088ee3a87a7936f5df71cb7593 on slimphp:3.x.\n. \nCoverage increased (+0.003%) to 97.183% when pulling 0b4395dcaaa98a1c843feba9939ca731d84268ba on geggleto:feature-1962 into 1dedd2592c4f7e088ee3a87a7936f5df71cb7593 on slimphp:3.x.\n. \nCoverage increased (+0.003%) to 97.183% when pulling 50e06bed4c6c17cd225085d2ce152e9247e8ab12 on vlakoff:routing into 1dedd2592c4f7e088ee3a87a7936f5df71cb7593 on slimphp:3.x.\n. \nCoverage remained the same at 97.18% when pulling 768306fea812f21301e0d7cff120fa0b5eaa8362 on robertprice:1818 into 1dedd2592c4f7e088ee3a87a7936f5df71cb7593 on slimphp:3.x.\n. \nCoverage decreased (-0.002%) to 97.178% when pulling 404321ff1c63b289ee93b2d0f8f947fed77a89ea on robertprice:1818 into 1dedd2592c4f7e088ee3a87a7936f5df71cb7593 on slimphp:3.x.\n. \nCoverage remained the same at 97.18% when pulling 338562af3d5629571c1767a200d197b011c438db on robertprice:mockClassesExist into 1dedd2592c4f7e088ee3a87a7936f5df71cb7593 on slimphp:3.x.\n. \nCoverage remained the same at 97.18% when pulling be8655ed974a230290895d2761609d7acf9fb26d on robertprice:updateMocks into 1dedd2592c4f7e088ee3a87a7936f5df71cb7593 on slimphp:3.x.\n. \nCoverage remained the same at 97.18% when pulling 7c9dc9e4b4d2519fcde4726bdf26292ecfc1d347 on robertprice:updateMocks into 1dedd2592c4f7e088ee3a87a7936f5df71cb7593 on slimphp:3.x.\n. \nCoverage increased (+0.4%) to 97.548% when pulling 1153bf18e3cbe475e523e89c01860cad2985ff23 on robertprice:extraTests into 1dedd2592c4f7e088ee3a87a7936f5df71cb7593 on slimphp:3.x.\n. \nCoverage decreased (-0.2%) to 97.003% when pulling 20471eaecc6349cb141b54486f182fd35e51ebab on Starli0n:3.x into 1dedd2592c4f7e088ee3a87a7936f5df71cb7593 on slimphp:3.x.\n. \nCoverage decreased (-0.2%) to 97.003% when pulling 6de5ae45460abaa4681da83a71df26cebf9621ce on Starli0n:3.x into 1dedd2592c4f7e088ee3a87a7936f5df71cb7593 on slimphp:3.x.\n. \nCoverage decreased (-0.1%) to 97.064% when pulling 3cfd832bf8b543d6c33d0f95e07ed76d0f88db00 on Starli0n:3.x into 1dedd2592c4f7e088ee3a87a7936f5df71cb7593 on slimphp:3.x.\n. \nCoverage increased (+0.002%) to 97.181% when pulling 13b786f082d204763075057b4625909e541667e1 on Starli0n:3.x into 1dedd2592c4f7e088ee3a87a7936f5df71cb7593 on slimphp:3.x.\n. \nCoverage remained the same at 97.18% when pulling 896078fb1abaa3b25f9415e525346aaaf6959f50 on vinkla:patch-1 into 1dedd2592c4f7e088ee3a87a7936f5df71cb7593 on slimphp:3.x.\n. \nCoverage remained the same at 97.18% when pulling 01593e3e0f48b4a0d5864cfed2f7435553c71f00 on luzluna:3.x into 7c33189d2edad8ef5a433c4e2375f5d777bc5c5a on slimphp:3.x.\n. \nCoverage increased (+0.002%) to 97.181% when pulling 842ee392323132ff890dbe96e13b08ed6c78b101 on geggleto:app-1989 into 7c33189d2edad8ef5a433c4e2375f5d777bc5c5a on slimphp:3.x.\n. \nCoverage decreased (-0.04%) to 97.138% when pulling a38edd9c46c7a9a6c8b16a334f7ceef6a42293b9 on geggleto:router-1948 into 7c33189d2edad8ef5a433c4e2375f5d777bc5c5a on slimphp:3.x.\n. \nCoverage increased (+0.02%) to 97.197% when pulling 69a823abf648db9b4483b7d04bcdd9643f595a41 on geggleto:router-1948 into 7c33189d2edad8ef5a433c4e2375f5d777bc5c5a on slimphp:3.x.\n. \nCoverage remained the same at 97.199% when pulling a0c632574384f21a1adca4335c837916b33a150d on mariusvw:3.x into 04e79cd6777a49d540c984f6e8157e15165b387a on slimphp:3.x.\n. \nCoverage remained the same at 97.199% when pulling 2fb459107b2877cb926e46aa046e856660b2aa42 on tflight:patch-1 into 04e79cd6777a49d540c984f6e8157e15165b387a on slimphp:3.x.\n. \nCoverage decreased (-0.06%) to 97.139% when pulling 85a3ad8237715867af89c7c8de8ef9b7fb2e8b86 on akrabat:more-http-codes into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage decreased (-0.06%) to 97.139% when pulling 343b939ec5a0b90670d1ace5326e0a808d9f20b3 on akrabat:more-http-codes into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage increased (+0.002%) to 97.2% when pulling ac7717cbd61a02a8757f7e774d82533213ab2a29 on akrabat:more-http-codes into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage increased (+0.002%) to 97.2% when pulling ac7717cbd61a02a8757f7e774d82533213ab2a29 on akrabat:more-http-codes into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage decreased (-0.05%) to 97.146% when pulling 9109b1379d3027654c6386deaeed856bf71b4ecb on geggleto:enforce-returns into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage decreased (-0.05%) to 97.146% when pulling a15f1c3ef74d76e6d6a763d747525e28c40aac1b on geggleto:enforce-returns into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage decreased (-0.05%) to 97.146% when pulling 4dced97956f2c7f1dcf16a4068a62db5032e2bb4 on geggleto:enforce-returns into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage decreased (-0.05%) to 97.146% when pulling 8fd5f0b78fc9ecf7bc532a175fbf452f59228121 on geggleto:enforce-returns into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage decreased (-0.05%) to 97.146% when pulling 33f648b8943719950c2f6693cdc992aec3de4ca4 on geggleto:enforce-returns into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage decreased (-0.05%) to 97.153% when pulling f79664283cf26662eca6b4460287cdf183eb0676 on geggleto:enforce-returns into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage decreased (-0.1%) to 97.091% when pulling b6540704c01358e0905617f6334ed42142fdfc97 on geggleto:enforce-returns into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage decreased (-0.1%) to 97.091% when pulling b151747d6391e23869b9faf7a767943e628b74dc on geggleto:enforce-returns into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage decreased (-0.1%) to 97.093% when pulling 43a26d5ef925a9fb0104fcff6b9fdb4c65cadbf5 on geggleto:enforce-returns into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage remained the same at 97.199% when pulling 9f31fa8ec96f7a1cad3d2dfcf3f9ef524a98bcb1 on tflight:3.x into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage remained the same at 97.199% when pulling 8271f7adf216417f9123e5fc6110bc97c5b62dc1 on tflight:3.x into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage remained the same at 97.199% when pulling 2b6812d00a62218b3899cfb7226151c7994929f5 on nickdnk:3.x into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage increased (+0.06%) to 97.256% when pulling c65dbadea043c761ec9a5c3fdad93e0906c0a8ac on nickdnk:3.x into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage increased (+0.06%) to 97.258% when pulling 265ddc0f58f541f201b04c9c2db035365b875dd9 on nickdnk:3.x into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage increased (+0.06%) to 97.256% when pulling 2742aa02beeeab18646c1a1af9847717bffd3120 on sbol-coolblue:improvement/parsedBodyParam into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage decreased (-0.06%) to 97.139% when pulling 57ae56068db8a8844a3afef4a6eded7e3063ece6 on chadicus:fea/head-shortcut into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage increased (+0.002%) to 97.2% when pulling 6b9c82fbf25ea63197b0b29b17e83d64465bbba3 on chadicus:fea/head-shortcut into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage increased (+0.002%) to 97.2% when pulling cae06a714e1c40ccca29d3008eba445ad2aad8b2 on chadicus:fea/head-shortcut into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage decreased (-0.1%) to 97.082% when pulling 1ab51cf13903cf055eb52e4079f7c15a1355f077 on amad:remove-code-coverage-ignore into 2f29cc2e3042bfa8c6a9078486ea174acb6a69e8 on slimphp:3.x.\n. \nCoverage remained the same at 97.258% when pulling 368f978c6dce19fc0c6c6886585ab739dc6bce54 on moritz-h:3.x into 66ff172e22ce024b1e144509797dc04575b1671e on slimphp:3.x.\n. \n\nCoverage increased (+0.002%) to 97.259% when pulling 5f6c3bafd1edc41b9105892aca505f6a4cc7e243 on codeguy:4.x-remove-version into 686bfc27ccb5e4c8a4661f5ccf500227f031d78a on slimphp:4.x.\n. \n\nCoverage remained the same at 97.258% when pulling e43ccae25a3ac1e3ee888eeb4cbf9ad1a32fdfab on DavidePastore:fix-phpunit-windows into 686bfc27ccb5e4c8a4661f5ccf500227f031d78a on slimphp:3.x.\n. \n\nCoverage remained the same at 97.258% when pulling 4607a7c29b900f9f4b4b8e35d7fcf3628488f810 on DavidePastore:fix-phpunit-windows into 686bfc27ccb5e4c8a4661f5ccf500227f031d78a on slimphp:3.x.\n. \n\nCoverage remained the same at 97.258% when pulling 3718b876e2afa56b1134ab4535621b538d12a1c4 on johanneskonst:3.x-typo-in-slim-container into 686bfc27ccb5e4c8a4661f5ccf500227f031d78a on slimphp:3.x.\n. \n\nCoverage remained the same at 97.258% when pulling 2a281f62dc0b8e50f8184a427ce5bc6c0851c897 on johanneskonst:4.x-typo-in-slim-container into 686bfc27ccb5e4c8a4661f5ccf500227f031d78a on slimphp:4.x.\n. \n\nCoverage remained the same at 97.258% when pulling 598a6a9cd2266dfe6ebd423ab3407e7ce8cd229b on kevinburke:http-https into 686bfc27ccb5e4c8a4661f5ccf500227f031d78a on slimphp:3.x.\n. \n\nCoverage remained the same at 97.259% when pulling 692934534021f6221828de4149d31cb80e9c2f36 on akrabat:add-changelog into 172aad20758947766135daa38648c1899229839d on slimphp:4.x.\n. \n\nCoverage decreased (-0.02%) to 97.239% when pulling 263ce352ed32df7931f903ed6eeba73949891e74 on codeguy:4.x-remove-subrequest into 76f63d246ddcba432d998636aee0e59e47dc5616 on slimphp:4.x.\n. \n\nCoverage increased (+0.06%) to 97.319% when pulling 03f70d1d58c9bfd7c4bcc9454f444ec9a04af649 on dopesong:3.x into 6088c7247630978beecc16bcfd00d3fd8ff667be on slimphp:3.x.\n. \n\nCoverage increased (+0.7%) to 97.928% when pulling 5db9333ca61083b160c38f7f9fc2d7bf1c715aa6 on dopesong:app-tests into 6088c7247630978beecc16bcfd00d3fd8ff667be on slimphp:3.x.\n. \n\nCoverage increased (+0.7%) to 97.928% when pulling cfab539f8f8b29ace9e7d93a6713c675d7041150 on dopesong:app-tests into 6088c7247630978beecc16bcfd00d3fd8ff667be on slimphp:3.x.\n. \n\nCoverage increased (+0.7%) to 97.928% when pulling 936215c7e54a61fbd9a51a7a96b1b3c601c94192 on dopesong:app-tests into 6088c7247630978beecc16bcfd00d3fd8ff667be on slimphp:3.x.\n. \n\nCoverage remained the same at 97.258% when pulling 3bc13489b1a49b2a8fcd4b6136712113017c6c83 on Achse:patch-1 into 6088c7247630978beecc16bcfd00d3fd8ff667be on slimphp:3.x.\n. \n\nCoverage remained the same at 97.258% when pulling 3bc13489b1a49b2a8fcd4b6136712113017c6c83 on Achse:patch-1 into 6088c7247630978beecc16bcfd00d3fd8ff667be on slimphp:3.x.\n. \n\nCoverage increased (+0.005%) to 97.263% when pulling 101c3728ef039791f670738cc6bd137d1252a2cc on famoser:famoser-mock-post into 6088c7247630978beecc16bcfd00d3fd8ff667be on slimphp:3.x.\n. \n\nCoverage increased (+0.005%) to 97.263% when pulling 3798e1ea181616ebc2e3ea1d4712d3a59a7b7cee on famoser:famoser-mock-post into 6088c7247630978beecc16bcfd00d3fd8ff667be on slimphp:3.x.\n. \n\nCoverage increased (+0.7%) to 97.933% when pulling fe63904500ee728a573bbe0b2d39b328cc973d1a on famoser:famoser-mock-post into 6088c7247630978beecc16bcfd00d3fd8ff667be on slimphp:3.x.\n. \n\nCoverage increased (+0.005%) to 97.933% when pulling e0a67d41aec903bc53021573ac36a1a1c84d05b0 on famoser:famoser-mock-post into ff8233265f2abbfd36b0c4128be8ab6ed327b8af on slimphp:3.x.\n. \n\nCoverage decreased (-0.04%) to 97.195% when pulling adfbd6923c1a7640399d810393bab0c81a69d1b0 on codeguy:feature-remove-baseurl into e8b734321526dd306ca5e877a67ca5928413eec8 on slimphp:4.x.\n. \n\nCoverage remained the same at 97.319% when pulling 1bb44e55e473e986710ffa7dae460781436ec4f3 on daviddallet:ddallet-return_type into 27695c0d8311a409b72781f57050e41eeaeda5c7 on slimphp:3.x.\n. \n\nCoverage increased (+0.007%) to 97.325% when pulling 16c0a220fa2126046a3065d7fdda13b76b2455a1 on 1ma:issue-2091 into 50029c8a625bd3aaf9d6889da4570f9423b8e61a on slimphp:3.x.\n. \n\nCoverage increased (+0.007%) to 97.325% when pulling c265856a1204f8238d6bb3fb52f92aacfcee7ee4 on 1ma:issue-2091 into 50029c8a625bd3aaf9d6889da4570f9423b8e61a on slimphp:3.x.\n. \n\nCoverage increased (+0.005%) to 97.933% when pulling 1f59a450b053ac846c26c96a6c4f19636ac3ecbb on 1ma:issue-2091 into ff8233265f2abbfd36b0c4128be8ab6ed327b8af on slimphp:3.x.\n. \n\nCoverage increased (+0.003%) to 97.198% when pulling bffd1a1fa1ab5062247bd0aa4246d32f4260bc67 on codeguy:feature-resolve-callable-without-container into 12fdb8c75e4dfda3846151d4540988d9c52834ec on slimphp:4.x.\n. \n\nCoverage decreased (-1.08%) to 96.803% when pulling 2f792ba62605240852b2a6d50616035fefe7efe0 on codeguy:feature-refactor-callable-resolver into 0f0c8c5f7a21a3929de141d2d79543aa1f3c564d on slimphp:4.x.\n. \n\nCoverage decreased (-1.08%) to 96.803% when pulling 767a9c929447c72750fe7202346fe1a10f74ad03 on codeguy:feature-refactor-callable-resolver into 0f0c8c5f7a21a3929de141d2d79543aa1f3c564d on slimphp:4.x.\n. \n\nCoverage decreased (-1.0%) to 96.911% when pulling f9f4953aaf960762e91eeefa089c2f5ed7301d98 on codeguy:feature-refactor-callable-resolver into 0f0c8c5f7a21a3929de141d2d79543aa1f3c564d on slimphp:4.x.\n. \n\nCoverage decreased (-0.2%) to 97.639% when pulling dee726946a2d5cb8a11aff2c7604f76159fe2f6d on codeguy:feature-refactor-callable-resolver into 0f0c8c5f7a21a3929de141d2d79543aa1f3c564d on slimphp:4.x.\n. \n\nCoverage decreased (-0.2%) to 97.639% when pulling c9c37a51cbb3bc4a482579f0cbc4b475df31e5cb on codeguy:feature-refactor-callable-resolver into 0f0c8c5f7a21a3929de141d2d79543aa1f3c564d on slimphp:4.x.\n. \n\nCoverage decreased (-0.2%) to 97.639% when pulling cd1a3e330fac1ffce14ea3d0902837bd2432d3db on codeguy:feature-refactor-callable-resolver into 0f0c8c5f7a21a3929de141d2d79543aa1f3c564d on slimphp:4.x.\n. \n\nCoverage decreased (-0.3%) to 97.337% when pulling 30f22b047702b306ef65bb1e6f4a9fb163efb8e0 on codeguy:feature-refactor-container-router into 394732ef6511d4ec12592f7a2d700815b82686be on slimphp:4.x.\n. \n\nCoverage decreased (-0.3%) to 97.328% when pulling 602f0969d219e213c733c8011115245400b331d7 on codeguy:feature-refactor-container-router into 394732ef6511d4ec12592f7a2d700815b82686be on slimphp:4.x.\n. \n\nCoverage decreased (-0.3%) to 97.328% when pulling 602f0969d219e213c733c8011115245400b331d7 on codeguy:feature-refactor-container-router into 394732ef6511d4ec12592f7a2d700815b82686be on slimphp:4.x.\n. \n\nCoverage decreased (-0.3%) to 97.328% when pulling f850464db53e441d7925c930c3bb9abdd10edf01 on codeguy:feature-refactor-container-router into 394732ef6511d4ec12592f7a2d700815b82686be on slimphp:4.x.\n. \n\nCoverage decreased (-0.6%) to 96.993% when pulling e6ac9e067174b384d55a3c2e444baf5d5c58973b on codeguy:feature-refactor-container-settings into 394732ef6511d4ec12592f7a2d700815b82686be on slimphp:4.x.\n. \n\nCoverage decreased (-0.5%) to 97.11% when pulling b6c2927bec93ad9fa3ed58293ccc34742197ee0f on codeguy:feature-refactor-container-settings into 394732ef6511d4ec12592f7a2d700815b82686be on slimphp:4.x.\n. \n\nCoverage increased (+0.01%) to 97.649% when pulling dac7c1f76f35ce9812cb76403fac75f8f09f7506 on codeguy:feature-refactor-container-settings into 394732ef6511d4ec12592f7a2d700815b82686be on slimphp:4.x.\n. \n\nCoverage decreased (-0.1%) to 97.521% when pulling 7a5c616c5e924c9daddc454344871d71b174d209 on codeguy:feature-refactor-container-settings into 394732ef6511d4ec12592f7a2d700815b82686be on slimphp:4.x.\n. \n\nCoverage decreased (-1.009%) to 96.631% when pulling f95710774cb7c48f9d808ec18e007d4ebeb4c223 on codeguy:feature-refactor-container-settings into 394732ef6511d4ec12592f7a2d700815b82686be on slimphp:4.x.\n. \n\nCoverage decreased (-0.7%) to 96.611% when pulling 1db36bc87c1e7c1b143f009233cd1f6b168648da on codeguy:feature-refactor-container-settings into 5abbab075ac7675a715d42d425d4b17112659df0 on slimphp:4.x.\n. \n\nCoverage remained the same at 97.928% when pulling 4add3cf1f37aef9279fe635e74aa53d5a77c48c2 on 1f7:cookie_parser_fix into ff8233265f2abbfd36b0c4128be8ab6ed327b8af on slimphp:3.x.\n. \n\nCoverage remained the same at 97.928% when pulling f27e8fb3bbf1f81c53c3b05578a4640b4185e93b on 1f7:cookie_parser_fix into ff8233265f2abbfd36b0c4128be8ab6ed327b8af on slimphp:3.x.\n. \n\nCoverage decreased (-0.07%) to 97.862% when pulling 6ccc22980b4444d3121c9f9680bfa5366ec74b61 on 0x13a:feature-refactor-callable-resolver into 50f3eef927689b5bbf3cfbf34c8aa8762e549b6c on slimphp:3.x.\n. \n\nCoverage decreased (-0.07%) to 97.862% when pulling fb96f3ba7b3763d2178004cbc9225ff99266301b on 0x13a:feature-refactor-callable-resolver into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage decreased (-0.07%) to 97.862% when pulling 90005977bdd2fbbf5dfda8e9821fa87eae01f46e on 0x13a:feature-refactor-callable-resolver into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.328% when pulling 3603eff826fbb5735d3a2a1156bc2f49f58dbfa9 on misha354:uri-strip-leading-slash-when-running-in-subdirectory into 1ee23aed9facf2300d6a324e37947b9b5673ed9e on slimphp:4.x.\n. \n\nCoverage remained the same at 97.928% when pulling 3f270a208c324aa08a05c78606088316f0c666a7 on tflight:3.x into 50f3eef927689b5bbf3cfbf34c8aa8762e549b6c on slimphp:3.x.\n. \n\nCoverage remained the same at 97.328% when pulling 8e97e21b6344e7da77bd65b587db7511a84d7325 on Sam-Burns:php71 into 1ee23aed9facf2300d6a324e37947b9b5673ed9e on slimphp:4.x.\n. \n\nCoverage remained the same at 97.928% when pulling c76356b4593b811b8fd49a558367aa04c076c93c on akrabat:route-argument-docblocks into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage decreased (-0.06%) to 97.871% when pulling 7ead6d46490bfad54228bf7eb45618106ee6a223 on akrabat:render-previous-errors into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage increased (+0.004%) to 97.932% when pulling 4a6cae0c7cfa84ddca40d3cc0be1214becc4adc2 on akrabat:render-previous-errors into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage decreased (-0.1%) to 97.82% when pulling 2314455a75b871e7dc10204775149b971987a140 on akrabat:silent-xml-body-parser into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage decreased (-0.1%) to 97.82% when pulling be20f3f430b8261996eadab616ff830cc4932610 on akrabat:silent-xml-body-parser into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage increased (+0.01%) to 98.149% when pulling 7e0556cf4e866c2e45f3ae136a5a5b8ecf9084ce on akrabat:silent-xml-body-parser into ef36faa6071f5923e027574f392c4ce3b7fb0438 on slimphp:3.x.\n. \n\nCoverage decreased (-0.06%) to 97.271% when pulling 1e8151b21b259a69ef3cd6c915f4871af225aa60 on railto:feature/2055 into 78c5dabc19033dc92ec62faa57f7ad53247a5cce on slimphp:4.x.\n. \n\nCoverage increased (+0.2%) to 98.111% when pulling fd2768ad1374d53ad2d8fd44688abdd7ab27e186 on akrabat:fix-with-uri-preserve-host into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage increased (+0.2%) to 98.111% when pulling fd2768ad1374d53ad2d8fd44688abdd7ab27e186 on akrabat:fix-with-uri-preserve-host into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage increased (+0.2%) to 98.111% when pulling fd2768ad1374d53ad2d8fd44688abdd7ab27e186 on akrabat:fix-with-uri-preserve-host into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage increased (+0.2%) to 98.111% when pulling a6c2803061272f281b780324bc3976d600eae972 on akrabat:fix-with-uri-preserve-host into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.928% when pulling 42ce8829f351c4fb4b456332a00d8d905a41dd56 on 0x13a:fixed-readme-docs into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.928% when pulling 7b6f5a0ea558cc61ecc72a2140006700b69d1cd3 on hannesvdvreken:3.x into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.928% when pulling eafabd4c7fb24c03a87bcf10a8f304e3c00cea45 on 0x13a:consistent-name-request-response into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.928% when pulling 0e4f58003969275b2cd2aa5ada0e17065874036d on 0x13a:consistent-name-request-response into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage increased (+0.003%) to 97.931% when pulling 7869ac1fbb0a3444519bafb5b308fa3dd5c9bed4 on 0x13a:consistent-name-request-response into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.928% when pulling d9440542266128b0f99c18a01c1a6d5d2959e94e on 0x13a:phpdoc-routable into fb5356a0f16ef027035155067377239c938bb767 on slimphp:3.x.\n. \n\nCoverage decreased (-0.9%) to 96.995% when pulling d74ec815a6803023c27f9da3f4805b1d259bfbf8 on iansltx:issue-2005 into 3623951d99b1fba5702e7d396f81445fbe746471 on slimphp:3.x.\n. \n\nCoverage increased (+0.02%) to 97.956% when pulling 1e4af6de777485acdfe57ba4dbc5169c54b4ed5c on iansltx:issue-2005 into 3623951d99b1fba5702e7d396f81445fbe746471 on slimphp:3.x.\n. \n\nCoverage increased (+0.02%) to 97.956% when pulling f4d6f44e3a4ed7925de8a20572fb0bf4b96eb2d1 on iansltx:issue-2005 into 3623951d99b1fba5702e7d396f81445fbe746471 on slimphp:3.x.\n. \n\nCoverage increased (+0.02%) to 97.954% when pulling abea8101280c87238609a2798f2380e2ae35ab7b on iansltx:issue-2005 into 3623951d99b1fba5702e7d396f81445fbe746471 on slimphp:3.x.\n. \n\nCoverage increased (+0.001%) to 97.956% when pulling 23b8c905a373600f075bbdecd43fccc3a2ae43d9 on sheldonjuncker:3.x into c138554cb16a92156db787143ab1f266dece7c7f on slimphp:3.x.\n. \n\nCoverage remained the same at 97.954% when pulling 8aad757cda75c98947c76470f62c7ac1e60720a9 on sheldonjuncker:http-eol into c138554cb16a92156db787143ab1f266dece7c7f on slimphp:3.x.\n. \n\nCoverage remained the same at 97.954% when pulling c1c2a3ad92b1b525725782ed68d5431ac0adecbc on Sam-Burns:psr-11 into c138554cb16a92156db787143ab1f266dece7c7f on slimphp:3.x.\n. \n\nCoverage remained the same at 97.954% when pulling c0902b33afd2b9c6015f2fc1bd255ef43be2cd85 on dopesong:patch-1 into c138554cb16a92156db787143ab1f266dece7c7f on slimphp:3.x.\n. \n\nCoverage remained the same at 97.954% when pulling 026de43aa40fe799ea7ef18148b65028d2693f7c on harikt:patch-1 into c138554cb16a92156db787143ab1f266dece7c7f on slimphp:3.x.\n. \n\nCoverage remained the same at 97.954% when pulling afe1b95bdf1cc7cebcffde80f63f3a455a523c07 on dhm80:patch-1 into c138554cb16a92156db787143ab1f266dece7c7f on slimphp:3.x.\n. \n\nCoverage decreased (-0.01%) to 97.289% when pulling d2843c430ddc269aee8ca96cde225653c7d55b7e on mnlg:feature/simplify-callable-resolver into 5abbab075ac7675a715d42d425d4b17112659df0 on slimphp:4.x.\n. \n\nCoverage remained the same at 97.954% when pulling 448234d4c5b2566cb451a6d8b96245e27d5295cb on amreladawy:patch-1 into c138554cb16a92156db787143ab1f266dece7c7f on slimphp:3.x.\n. \n\nCoverage remained the same at 97.954% when pulling e4d8308a8bfba23f65599a612f02834372e68faf on Sergo96:3.x into c138554cb16a92156db787143ab1f266dece7c7f on slimphp:3.x.\n. \n\nCoverage decreased (-0.1%) to 96.693% when pulling 9f6e2253b3d99d72772d1edce292db6824bb4aa5 on codeguy:feature-output-buffer-middleware into 724459a2ce304813068f31f65b04c3df3338620c on slimphp:4.x.\n. \n\nCoverage decreased (-0.2%) to 96.613% when pulling a10b833f02383d69a0d5a5d670f62526fccec04c on codeguy:feature-output-buffer-middleware into 724459a2ce304813068f31f65b04c3df3338620c on slimphp:4.x.\n. \n\nCoverage remained the same at 98.149% when pulling b2de65715f386b488cc9726e345dbefc4df0d290 on crtl:auto-generated-api-docs into 91afa6050372a3888fc4464cfc997473dd3f9377 on slimphp:3.x.\n. \n\nCoverage remained the same at 96.809% when pulling 26201b2209072b26b07b6443be547907eb2a3eec on Sam-Burns:slim4-psr11 into 943b0be42525b78d27641cd8ee4f26e363627078 on slimphp:4.x.\n. \n\nCoverage remained the same at 96.866% when pulling 42e91bee807b69b9ad24ce65adb0f6967d8a980e on Sam-Burns:slim4-psr11 into a51018c1044496c6d08a817539402ea08938a3a4 on slimphp:4.x.\n. \n\nCoverage remained the same at 96.866% when pulling 9a04bf9e488eada94125b9e42473830fb645ee32 on Sam-Burns:slim4-psr11 into a51018c1044496c6d08a817539402ea08938a3a4 on slimphp:4.x.\n. \n\nCoverage increased (+0.002%) to 96.217% when pulling 2ab8cba80a407598fa817a90efb66da98b6662d1 on Sam-Burns:slim4-psr11 into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage remained the same at 96.215% when pulling 2ab8cba80a407598fa817a90efb66da98b6662d1 on Sam-Burns:slim4-psr11 into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage remained the same at 96.215% when pulling f742f0f7f2194f00cc22318579dfe3f7450b1242 on Sam-Burns:slim4-psr11 into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage decreased (-0.001%) to 98.088% when pulling 28e9044dece38350132a86a1b70533eb58567a34 on akrabat:revert-1946 into 30888b9c886360f50e7251ec7ea53d7d1f4b211a on slimphp:3.x.\n. \n\nCoverage remained the same at 96.809% when pulling 62b59822400c76fd73b49d865975ca5198bf2a62 on Sam-Burns:php-version into 943b0be42525b78d27641cd8ee4f26e363627078 on slimphp:4.x.\n. \n\nCoverage increased (+0.06%) to 96.866% when pulling 59bdbdd4d3c58b280439b362e06173459d823e16 on Sam-Burns:dead-class into 943b0be42525b78d27641cd8ee4f26e363627078 on slimphp:4.x.\n. \n\nCoverage increased (+0.06%) to 96.866% when pulling 79f97122511c37a0093a6a486e631a889289455d on Sam-Burns:dead-class into 657d71d072c3da9ec97fdc3a773c9d053b333416 on slimphp:4.x.\n. \n\nCoverage decreased (-0.7%) to 96.158% when pulling bef7acc5e62c4f3b7266ee342d1fc1b3c2da894e on mathmarques:Allow-all-valid-HTTP-methods into 943b0be42525b78d27641cd8ee4f26e363627078 on slimphp:4.x.\n. \n\nCoverage remained the same at 96.809% when pulling b4ae937102e81bf7f662088c228eb2b58c52745a on mathmarques:patch-1 into 943b0be42525b78d27641cd8ee4f26e363627078 on slimphp:4.x.\n. \n\nCoverage remained the same at 98.088% when pulling 3b1fb4e5fd0c3124314acbf01c4a37739983618a on mathmarques:patch-2 into 105b56cc0dede54163a7cbb16cc0eee3618b5640 on slimphp:3.x.\n. \n\nCoverage remained the same at 96.809% when pulling 7fad3dd24e71886f4f7c213a4048697eb4b93cbd on mathmarques:phpunit-travis-update into 943b0be42525b78d27641cd8ee4f26e363627078 on slimphp:4.x.\n. \n\nCoverage remained the same at 96.809% when pulling b692918ffd4532688028e093833954bc7321d77d on mathmarques:phpunit-travis-update into 943b0be42525b78d27641cd8ee4f26e363627078 on slimphp:4.x.\n. \n\nCoverage remained the same at 96.809% when pulling bd499af615307a49a78f6c67dffa28f7f41d3cf8 on mathmarques:phpunit-travis-update into 943b0be42525b78d27641cd8ee4f26e363627078 on slimphp:4.x.\n. \n\nCoverage remained the same at 98.088% when pulling 05bdc005c420258e28e438a55692a1bf0630ac46 on mathmarques:travis-fix into 105b56cc0dede54163a7cbb16cc0eee3618b5640 on slimphp:3.x.\n. \n\nCoverage decreased (-0.8%) to 97.312% when pulling c491a0c81ed5c514144d2b47a05cfda2f17fb7c3 on mathmarques:allow-all-http-valid-methods-3.x into 87a55b515fbd4ee1802e97ee4e853583fc3a8e64 on slimphp:3.x.\n. \n\nCoverage remained the same at 96.866% when pulling 053fd2bd55570933c9589f24cb5049efe3d8a88a on Sam-Burns:unused-imports into a51018c1044496c6d08a817539402ea08938a3a4 on slimphp:4.x.\n. \n\nCoverage remained the same at 96.866% when pulling 4d7d517af8fcc7e58a20315fad0d174709e8911f on Sam-Burns:unused-imports into a51018c1044496c6d08a817539402ea08938a3a4 on slimphp:4.x.\n. \n\nCoverage remained the same at 98.088% when pulling 5acc9ecd3daad006eb831e9402fbb6156b5f2f74 on hannesvdvreken:patch-1 into 87a55b515fbd4ee1802e97ee4e853583fc3a8e64 on slimphp:3.x.\n. \n\nCoverage remained the same at 96.866% when pulling c5863c029528dec1006b65326893f8509ddbb164 on Sam-Burns:phpunit6 into a51018c1044496c6d08a817539402ea08938a3a4 on slimphp:4.x.\n. \n\nCoverage remained the same at 96.866% when pulling 9ea9d91fdd050a09d323756c60f6fbddfb5ba546 on Sam-Burns:phpunit6 into a51018c1044496c6d08a817539402ea08938a3a4 on slimphp:4.x.\n. \n\nCoverage remained the same at 96.866% when pulling 29baf5fb35765862869b05631216cc2f0a11eaa5 on Sam-Burns:fix-risky-test into a51018c1044496c6d08a817539402ea08938a3a4 on slimphp:4.x.\n. \n\nCoverage remained the same at 98.088% when pulling d6b3316d1317683a2cd9dce83292ae5babffc635 on basuke:basuke-open-container-to-reuse into 87a55b515fbd4ee1802e97ee4e853583fc3a8e64 on slimphp:3.x.\n. \n\nCoverage decreased (-0.2%) to 97.136% when pulling e6fa3c2977fe8e0089f1f2ba0ba7e86ee7c5d6e9 on amreladawy:patch-1 into 7d62584968691ba2f897e9dafc7f357e80e0c4ca on slimphp:3.x.\n. \n\nCoverage decreased (-0.06%) to 97.255% when pulling 6e0ae5168efe3a3b1c78c5071b536ef6956bfa87 on amreladawy:patch-1 into 7d62584968691ba2f897e9dafc7f357e80e0c4ca on slimphp:3.x.\n. \n\nCoverage decreased (-0.06%) to 97.255% when pulling e5fa3275bbdecb87e73ffa1bb6d027dfcfbdcff3 on amreladawy:patch-1 into 7d62584968691ba2f897e9dafc7f357e80e0c4ca on slimphp:3.x.\n. \n\nCoverage decreased (-0.06%) to 97.255% when pulling e5fa3275bbdecb87e73ffa1bb6d027dfcfbdcff3 on amreladawy:patch-1 into 7d62584968691ba2f897e9dafc7f357e80e0c4ca on slimphp:3.x.\n. \n\nCoverage decreased (-0.06%) to 97.255% when pulling 09e99cd4e6a2c2607789bee44a16bf30d70c98ee on amreladawy:patch-1 into 7d62584968691ba2f897e9dafc7f357e80e0c4ca on slimphp:3.x.\n. \n\nCoverage increased (+0.002%) to 96.217% when pulling bd00363c66310a304ee3b6509dcb54196314a3b3 on Sam-Burns:encode-password into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage increased (+0.002%) to 96.217% when pulling 4e9618da00595d1f08b2e49202e6e36bd8596ebb on Sam-Burns:encode-password into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage increased (+0.004%) to 96.22% when pulling a4b207535a485e9c160b9f5b6c2512b6cb5fd228 on Sam-Burns:encode-password into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage remained the same at 97.312% when pulling 17d02acf5902f462475b3699d87ec7caa1fe4510 on copynpaste:ipv6-noport into 7d62584968691ba2f897e9dafc7f357e80e0c4ca on slimphp:3.x.\n. \n\nCoverage remained the same at 97.312% when pulling f1e4febd5e1af3ec4d515d5c6604884bdba23166 on RyanNerd:fix-2204 into 7d62584968691ba2f897e9dafc7f357e80e0c4ca on slimphp:3.x.\n. \n\nCoverage remained the same at 97.312% when pulling a813d707ee0886b71de77e902b96593ad85f0bc3 on RyanNerd:fix-2204 into 7d62584968691ba2f897e9dafc7f357e80e0c4ca on slimphp:3.x.\n. \n\nCoverage decreased (-2.08%) to 94.138% when pulling a7362be5fc8bea20ef89279fc751bb9209c1534c on akrabat:slim-http into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage decreased (-6.06%) to 90.158% when pulling dfa2a4792f5e65bc07bca35f4cc3d15ee74320d0 on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage decreased (-6.06%) to 90.158% when pulling 0446badea85b7bc8b6743aab4d74e47e1e21c64a on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage decreased (-6.2%) to 90.043% when pulling 686bb43164ff15433b0d91bd1ce4c783730a67b2 on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage decreased (-3.4%) to 92.779% when pulling c2f455a1c829e44b35a6376d1c3c21b75022494a on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage decreased (-2.3%) to 93.914% when pulling fa2e48fa853d731b641c79b07652b1493b72ab13 on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage decreased (-0.05%) to 96.161% when pulling 3454b3a8f07ce906b2d81fb804931f8e3dd09c37 on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage decreased (-0.05%) to 96.161% when pulling 52140aa939cb67e336dd7b6dab458b2c8cd181eb on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage increased (+0.07%) to 96.283% when pulling 4e5fe99f290ab227b3026ba484a5a71f48e76ea4 on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage increased (+0.4%) to 96.648% when pulling 145335a904bb546e6bfe04ce91a666e25575054e on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage increased (+0.5%) to 96.705% when pulling db17f1feba7ca99071a3944e3b311c1e8af6db9c on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage increased (+0.5%) to 96.705% when pulling 025be5df780befc7daa091db329ebd12b6fc6fe1 on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage increased (+0.5%) to 96.701% when pulling e448e173434ad43c19bed8771d79ddcd7482b02a on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage increased (+0.5%) to 96.709% when pulling c9bb1abb98a7ecd8f2aaee9ee5bd463850ef3eaf on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage increased (+0.7%) to 96.959% when pulling 44bcaded3dbbbbf2db7ae4c4b08488545f166f89 on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage increased (+0.9%) to 97.139% when pulling 1aad31847233e2ba6baaa0f03dad3eada9d288ce on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage increased (+0.9%) to 97.146% when pulling a3377933079d20774b5a26a54156a639675db076 on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage increased (+0.9%) to 97.146% when pulling 6fc9102191856afc123a6dcc58e3ebbfcd3b04a2 on l0gicgate:4.x into 54401a4f5df38da67cfcf665051c166ee669a911 on slimphp:4.x.\n. \n\nCoverage increased (+1.9%) to 96.057% when pulling 8dbbaac42064eda6dab094598acc54c1b88c2535 on l0gicgate:4.x into 72eea92845b090ce8c8f56702a571bbbf7fdb01f on slimphp:4.x.\n. \n\nCoverage increased (+2.03%) to 96.163% when pulling 2d2411654a914bed5eeec05b583acc70c3bb38ed on l0gicgate:4.x into 72eea92845b090ce8c8f56702a571bbbf7fdb01f on slimphp:4.x.\n. \n\nCoverage increased (+2.03%) to 96.163% when pulling 24ad11bb9bdb814377a18a016795403d140ee22d on l0gicgate:4.x into 72eea92845b090ce8c8f56702a571bbbf7fdb01f on slimphp:4.x.\n. \n\nCoverage increased (+2.0%) to 95.369% when pulling fbca712e7ac6dcca02d705dafc7f5ab4b6ae9c1b on l0gicgate:4.x into 6f765adb5dad996b586ecf6e362bb2ef7ae64ea4 on slimphp:4.x.\n. \n\nCoverage increased (+1.8%) to 95.19% when pulling 492430ebd14d826c3c839c7b9d6b8c2b64cc0ac2 on l0gicgate:4.x into 6f765adb5dad996b586ecf6e362bb2ef7ae64ea4 on slimphp:4.x.\n. \n\nCoverage decreased (-3.1%) to 91.772% when pulling 60a9ea1d6aecc51ade6c80bd366ec347babd1e5f on l0gicgate:4.x into 6e1d77689f81ce1e383640ea1eafc1847d86cac9 on slimphp:4.x.\n. \n\nCoverage decreased (-1.2%) to 93.73% when pulling e27eca4fccfbec3dddb61d235e01471e54bbe062 on l0gicgate:4.x into 13065707e9fc5a45b6b8a69b2994f60921c6fcfb on slimphp:4.x.\n. \n\nCoverage increased (+0.003%) to 97.315% when pulling 47f038ae2f0e7c352240734163e52f1cac61a0d8 on gregory-gueret:ini_set into d28272231017ae737abeee4b99673cbf29ee4e69 on slimphp:3.x.\n. \n\nCoverage decreased (-0.02%) to 94.118% when pulling 562a683030ddbd00af7a33c61ddea689ea6b1a75 on geekish:feature/group-callable into 72eea92845b090ce8c8f56702a571bbbf7fdb01f on slimphp:4.x.\n. \n\nCoverage decreased (-0.02%) to 94.118% when pulling de333a6ae755dd73f6aac36d3753cd3779b713f2 on geekish:feature/group-callable into 72eea92845b090ce8c8f56702a571bbbf7fdb01f on slimphp:4.x.\n. \n\nCoverage decreased (-1.1%) to 93.035% when pulling f9995d22d96e6ae8f30448a34e87c96b9c6c4cc2 on geekish:feature/group-callable into 72eea92845b090ce8c8f56702a571bbbf7fdb01f on slimphp:4.x.\n. \n\nCoverage decreased (-0.007%) to 94.131% when pulling b5edbfab7b2f25293b2580239b9850fb5c01be02 on theodorejb:minor-optimizations into 72eea92845b090ce8c8f56702a571bbbf7fdb01f on slimphp:4.x.\n. \n\nCoverage remained the same at 94.138% when pulling c4c0f8f3afccdaa2302fecd7ab0c94fee5f3f341 on Sam-Burns:behat into 72eea92845b090ce8c8f56702a571bbbf7fdb01f on slimphp:4.x.\n. \n\nCoverage remained the same at 94.138% when pulling 254dbc1b14a666fca5bccc8b01251cffa2067617 on Sam-Burns:behat into 72eea92845b090ce8c8f56702a571bbbf7fdb01f on slimphp:4.x.\n. \n\nCoverage remained the same at 94.138% when pulling 3d8b2524f7c277f0c149d0b9513c0b59c1698804 on Sam-Burns:behat into c96ace66d9f30c8f5160999af01cee1675b38dff on slimphp:4.x.\n. \n\nCoverage decreased (-0.06%) to 97.252% when pulling cc4cef2452e0fd7303222782e64bfeedf7dcea8a on ipabz:refactorRouterClass into 2f189b2b2965c924bf9410d193b4023a1c5fce9c on slimphp:3.x.\n. \n\nCoverage remained the same at 97.312% when pulling c3c6f54089529c27902f56d830c7eed838d5fd89 on ipabz:refactorRouterClass into 2f189b2b2965c924bf9410d193b4023a1c5fce9c on slimphp:3.x.\n. \n\nCoverage decreased (-0.2%) to 97.082% when pulling 677158ba92ea10892b5318af01e626a456eedc64 on piotr-cz:bugfix/notfound-options into 2f189b2b2965c924bf9410d193b4023a1c5fce9c on slimphp:3.x.\n. \n\nCoverage decreased (-0.2%) to 97.082% when pulling 29d517cfb98df8a173088d1ed69b955bf2b29799 on piotr-cz:bugfix/notfound-options into 698749716d8fe4ca50513d97a1b069bedb314729 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.312% when pulling 2adf65173050bacd9e91e10283a473bd9e988e73 on Sam-Burns:fix-hhvm-build into 2f189b2b2965c924bf9410d193b4023a1c5fce9c on slimphp:3.x.\n. \n\nCoverage remained the same at 97.312% when pulling 59a12c9e2338395bf219a1a39c4f17d13433070d on Sam-Burns:fix-hhvm-build into 2f189b2b2965c924bf9410d193b4023a1c5fce9c on slimphp:3.x.\n. \n\nCoverage remained the same at 94.138% when pulling f92b8c0d1c38d72e4c3f1cc12dc81352bb9d4bc6 on Sam-Burns:fix-hhvm-build-slim4 into 72eea92845b090ce8c8f56702a571bbbf7fdb01f on slimphp:4.x.\n. \n\nCoverage decreased (-0.5%) to 96.849% when pulling 25d59b60d82438ea3bdf3fa1424f9acac541b94d on Grafikart:feat-params into 698749716d8fe4ca50513d97a1b069bedb314729 on slimphp:3.x.\n. \n\nCoverage increased (+0.01%) to 97.321% when pulling dde1ba9afcbb6ea0c431400b564deec160e35c49 on Grafikart:feat-params into 698749716d8fe4ca50513d97a1b069bedb314729 on slimphp:3.x.\n. \n\nCoverage decreased (-0.03%) to 93.379% when pulling 3520c44b2830c3322bb710323e8f4c7244fd58ae on akrabat:content-length-middleware into 4556842f9c4d4fddc4b617d0bbbbcade7c79e3b1 on slimphp:4.x.\n. \n\nCoverage decreased (-0.03%) to 93.379% when pulling b86ef64a1aeb718fc45054813de579ad34a68cbc on akrabat:content-length-middleware into 4556842f9c4d4fddc4b617d0bbbbcade7c79e3b1 on slimphp:4.x.\n. \n\nCoverage decreased (-0.04%) to 93.371% when pulling 54db772afbb34179cbae2c3c866449697186eb9b on akrabat:content-length-middleware into 4556842f9c4d4fddc4b617d0bbbbcade7c79e3b1 on slimphp:4.x.\n. \n\nCoverage decreased (-0.4%) to 93.008% when pulling dce758ec0b2264063f2ab805c95e638d9e8b5769 on akrabat:content-length-middleware into 4556842f9c4d4fddc4b617d0bbbbcade7c79e3b1 on slimphp:4.x.\n. \n\nCoverage decreased (-0.4%) to 93.008% when pulling 6a716f22cd7931923885ffa14099ef1eb430029c on akrabat:content-length-middleware into 4556842f9c4d4fddc4b617d0bbbbcade7c79e3b1 on slimphp:4.x.\n. \n\nCoverage decreased (-0.02%) to 93.008% when pulling 00c31cfb1815a8d91d9b8829b88c98870e06ac70 on akrabat:content-length-middleware into a60a7121a908d5c7233fc404519886f07c0a55ed on slimphp:4.x.\n. \n\nCoverage remained the same at 97.312% when pulling cac852ba929ffc9df07c4a474bc4dce3b0235bdc on oaattia:3.x into 698749716d8fe4ca50513d97a1b069bedb314729 on slimphp:3.x.\n. \n\nCoverage decreased (-0.008%) to 93.394% when pulling 80b3f41d07118e7b4d92737a3afe9531567f9030 on Sam-Burns:minor-perf-improvement into 6f765adb5dad996b586ecf6e362bb2ef7ae64ea4 on slimphp:4.x.\n. \n\nCoverage decreased (-0.02%) to 93.379% when pulling bfadf645a52c368e143d305d6e0a0ec1b9850d60 on Sam-Burns:minor-perf-improvement into 6f765adb5dad996b586ecf6e362bb2ef7ae64ea4 on slimphp:4.x.\n. \n\nCoverage decreased (-0.02%) to 93.379% when pulling bfadf645a52c368e143d305d6e0a0ec1b9850d60 on Sam-Burns:minor-perf-improvement into 6f765adb5dad996b586ecf6e362bb2ef7ae64ea4 on slimphp:4.x.\n. \n\nCoverage remained the same at 93.402% when pulling d54aa700d8af02aa639f6c2751a1155d065e4d19 on Sam-Burns:minor-docblocks into 6f765adb5dad996b586ecf6e362bb2ef7ae64ea4 on slimphp:4.x.\n. \n\nCoverage decreased (-0.4%) to 93.035% when pulling 476d7dc2e34835db13fdb841971fe28fb080007f on Sam-Burns:build-process into 6f765adb5dad996b586ecf6e362bb2ef7ae64ea4 on slimphp:4.x.\n. \n\nCoverage remained the same at 97.312% when pulling 4e998a962401d0ce41b98509f2478907c45a5b77 on 1ma:container-interop-chopchop into 698749716d8fe4ca50513d97a1b069bedb314729 on slimphp:3.x.\n. \n\nCoverage increased (+0.002%) to 97.313% when pulling 259645e0b38c2050507986a4bfcd9dc94d2cc310 on 1ma:container-interop-chopchop into 698749716d8fe4ca50513d97a1b069bedb314729 on slimphp:3.x.\n. \n\nCoverage increased (+0.002%) to 97.313% when pulling 259645e0b38c2050507986a4bfcd9dc94d2cc310 on 1ma:container-interop-chopchop into 698749716d8fe4ca50513d97a1b069bedb314729 on slimphp:3.x.\n. \n\nCoverage increased (+0.002%) to 97.313% when pulling c6d6d10ec7adc8e95cd6fb839135334c3702170e on 1ma:container-interop-chopchop into 698749716d8fe4ca50513d97a1b069bedb314729 on slimphp:3.x.\n. \n\nCoverage decreased (-4.0%) to 93.349% when pulling 6f6af26e1dfccb168b2c28930d94de25c455dae8 on RyanNerd:output-buffering-for-exceptions into 698749716d8fe4ca50513d97a1b069bedb314729 on slimphp:3.x.\n. \n\nCoverage decreased (-4.0%) to 93.349% when pulling d0267f0c8a162f7d6438a1ff8f09c3f4abdd15e1 on RyanNerd:output-buffering-for-exceptions into 698749716d8fe4ca50513d97a1b069bedb314729 on slimphp:3.x.\n. \n\nCoverage decreased (-4.0%) to 93.349% when pulling a4f7c81c104e43e0b4a06961e2298f9cf2fe6176 on RyanNerd:output-buffering-for-exceptions into 698749716d8fe4ca50513d97a1b069bedb314729 on slimphp:3.x.\n. \n\nCoverage decreased (-4.0%) to 93.349% when pulling 054eb76a08f62124892a754580c770c888fafff1 on RyanNerd:output-buffering-for-exceptions into 698749716d8fe4ca50513d97a1b069bedb314729 on slimphp:3.x.\n. \n\nCoverage decreased (-4.0%) to 93.353% when pulling 9c20575c238b040107862086b6b7362d53a7a991 on RyanNerd:output-buffering-for-exceptions into 698749716d8fe4ca50513d97a1b069bedb314729 on slimphp:3.x.\n. \n\nCoverage decreased (-3.9%) to 93.412% when pulling b704536229b7f8ab6e8a2338d0c58445ae74f248 on RyanNerd:output-buffering-for-exceptions into 698749716d8fe4ca50513d97a1b069bedb314729 on slimphp:3.x.\n. \n\nCoverage decreased (-3.9%) to 93.409% when pulling 0f2e111abb796329ff639c8e5cc8fe7be38eb39e on RyanNerd:output-buffering-for-exceptions into 698749716d8fe4ca50513d97a1b069bedb314729 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.312% when pulling 254c45edba0873d105be55ad6d9c4f8c2ed66026 on acfo:routeinterface/setoutputbuffering into 698749716d8fe4ca50513d97a1b069bedb314729 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.312% when pulling 18fce2db64a22fd40ec0138e37142f7840fab685 on RyanNerd:output-buffering-route-interface into f68e58cee9f6213647f88cfc62fb05240b01e3a7 on slimphp:3.x.\n. \n\nCoverage decreased (-0.4%) to 92.978% when pulling 0e00c8114efe7d18780c22f19d579fc67daab39c on RyanNerd:output-buffering-route-interface-4x into 6f765adb5dad996b586ecf6e362bb2ef7ae64ea4 on slimphp:4.x.\n. \n\nCoverage decreased (-0.4%) to 92.978% when pulling 8fd570377bac9b2624fa6af265091cb2c4063239 on RyanNerd:output-buffering-route-interface-4x into 6f765adb5dad996b586ecf6e362bb2ef7ae64ea4 on slimphp:4.x.\n. \n\nCoverage decreased (-0.1%) to 97.192% when pulling 813b3bf6b4b2aad7e0d336ef112fbc3c8077f452 on aimeos:3.x into f68e58cee9f6213647f88cfc62fb05240b01e3a7 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.312% when pulling d6a2d5ab6cee0c0ac5a7dfaecf2176f6984ae429 on superbogy:3.x into f68e58cee9f6213647f88cfc62fb05240b01e3a7 on slimphp:3.x.\n. \n\nCoverage decreased (-0.02%) to 93.008% when pulling 232d073d75785d592a846a944f340b8606fbe182 on bnf:4x-stack-tip into ee32eb61a2c4aa4c6b1594ba1cc3e9d7aaf0bd3f on slimphp:4.x.\n. \n\nCoverage decreased (-0.02%) to 93.008% when pulling 21424dd1308a858c6a1975b9923b6825db2d0685 on bnf:4x-stack-tip into ee32eb61a2c4aa4c6b1594ba1cc3e9d7aaf0bd3f on slimphp:4.x.\n. \n\nCoverage remained the same at 93.191% when pulling e3558a8c681d5af362e929a928e8c757ba4cf6a4 on akrabat:rename-options-rendering into afef745e9f425309f571b107b857fdb3b7374e7a on slimphp:3.x.\n. \n\nCoverage increased (+0.03%) to 93.054% when pulling a170f2a462c4d05dc23825ff82fd1b979dbd6ba8 on akrabat:separate-routing-from-rendering into ee32eb61a2c4aa4c6b1594ba1cc3e9d7aaf0bd3f on slimphp:4.x.\n. \n\nCoverage increased (+0.03%) to 93.054% when pulling a170f2a462c4d05dc23825ff82fd1b979dbd6ba8 on akrabat:separate-routing-from-rendering into ee32eb61a2c4aa4c6b1594ba1cc3e9d7aaf0bd3f on slimphp:4.x.\n. \n\nCoverage increased (+0.03%) to 93.054% when pulling 68d4ba62ff52a5bd53abf5ebb7a479ff5b2f2f8a on akrabat:separate-routing-from-rendering into ee32eb61a2c4aa4c6b1594ba1cc3e9d7aaf0bd3f on slimphp:4.x.\n. \n\nCoverage increased (+0.03%) to 93.054% when pulling eb71f272f1c01c4df0c541a257bbd9a50753a42d on akrabat:separate-routing-from-rendering into a60a7121a908d5c7233fc404519886f07c0a55ed on slimphp:4.x.\n. \n\nCoverage increased (+0.03%) to 93.054% when pulling 058d6847100f9201e5271400b9b1e5b9f68849e4 on akrabat:separate-routing-from-rendering into a60a7121a908d5c7233fc404519886f07c0a55ed on slimphp:4.x.\n. \n\nCoverage increased (+0.03%) to 93.035% when pulling 7ff1c4753046a289f379cf071940e4448d5dc6f9 on akrabat:separate-routing-from-rendering into 2cac1acd71ec60432e5a1a38fc265b58dcfd9812 on slimphp:4.x.\n. \n\nCoverage increased (+0.03%) to 93.035% when pulling 0c3eb5d07d67c51588f34c7d073d4ea708257427 on akrabat:separate-routing-from-rendering into 2cac1acd71ec60432e5a1a38fc265b58dcfd9812 on slimphp:4.x.\n. \n\nCoverage decreased (-0.1%) to 92.924% when pulling cdad3ffc72be5878038992e783ee6ac9ba7b5c44 on Sam-Burns:simplify-container-usage into ee32eb61a2c4aa4c6b1594ba1cc3e9d7aaf0bd3f on slimphp:4.x.\n. \n\nCoverage increased (+1.8%) to 94.798% when pulling b12b87d51ddded77f164415a0affbc0bb5738753 on akrabat:remove-container into ee32eb61a2c4aa4c6b1594ba1cc3e9d7aaf0bd3f on slimphp:4.x.\n. \n\nCoverage increased (+1.8%) to 94.798% when pulling b12b87d51ddded77f164415a0affbc0bb5738753 on akrabat:remove-container into ee32eb61a2c4aa4c6b1594ba1cc3e9d7aaf0bd3f on slimphp:4.x.\n. \n\nCoverage increased (+1.8%) to 94.798% when pulling 1a7e068c0ab86a642424ba39d13662afc0744dcb on akrabat:remove-container into ee32eb61a2c4aa4c6b1594ba1cc3e9d7aaf0bd3f on slimphp:4.x.\n. \n\nCoverage increased (+1.8%) to 94.798% when pulling 0706f076a89fb377ba7ad14e13b24dbdb58a1e62 on akrabat:remove-container into ee32eb61a2c4aa4c6b1594ba1cc3e9d7aaf0bd3f on slimphp:4.x.\n. \n\nCoverage increased (+1.8%) to 94.798% when pulling 8c295e324ee620a9709151ea6c9504f53195e0ff on akrabat:remove-container into ee32eb61a2c4aa4c6b1594ba1cc3e9d7aaf0bd3f on slimphp:4.x.\n. \n\nCoverage increased (+1.8%) to 94.798% when pulling 0b16b20599e9fa663b0925ccf8a6d8d0ddb8b68a on akrabat:remove-container into ee32eb61a2c4aa4c6b1594ba1cc3e9d7aaf0bd3f on slimphp:4.x.\n. \n\nCoverage increased (+1.9%) to 94.872% when pulling 8385ca7ffb4c4e706c663dd441e4b815b4f3440a on akrabat:remove-container into 0dab1d10cf28e50d9e92dd24caa003f86dedae38 on slimphp:4.x.\n. \n\nCoverage remained the same at 93.026% when pulling 5c418b00a802e5aa60607c75764990d53e6d6277 on campersau:outputbuffermiddleware into ee32eb61a2c4aa4c6b1594ba1cc3e9d7aaf0bd3f on slimphp:4.x.\n. \n\nCoverage remained the same at 93.191% when pulling 01114a6f8c23ed48f4c12c42a85d18cf7c6c0495 on zhaohehe:fix-comment into 052952c72df50fbe251c9853d4e61f7ecaf027a4 on slimphp:3.x.\n. \n\nCoverage remained the same at 93.191% when pulling 1ad6ebdf004ae0e74554d855d014ee42ddbe8e5f on RyanNerd:fix-http-2 into a641082cdc08769c6fe195180ed73a63ca828b73 on slimphp:3.x.\n. \n\nCoverage remained the same at 93.035% when pulling 8a7db5af98b0bab3068af34c244d2a0961c7e311 on mathmarques:patch-3 into b1f6c3b9436229242e5257e1696cc41e6353121d on slimphp:4.x.\n. \n\nCoverage remained the same at 93.223% when pulling 14e15f91a13bbbea185b5b583fd5e7e58e9e5051 on akrabat:pass-app-to-route-group into 403b7980e0bc19ca43015f6232259d81479b24b2 on slimphp:3.x.\n. \n\nCoverage remained the same at 92.999% when pulling 3c15feef0818dee55a2ae916c8d2e3e0d3c8fc43 on SergeAx:patch-1 into d1c5b02e94c4df7d3a0d3bfe60fb9dfc660b538c on slimphp:4.x.\n. \n\nCoverage remained the same at 93.223% when pulling a14c78e3949141e544c1b95ef802898a0d6074d8 on kelunik:fix-1730 into 403b7980e0bc19ca43015f6232259d81479b24b2 on slimphp:3.x.\n. \n\nCoverage remained the same at 93.223% when pulling a2c93acf2420a4c6d2d27d4c55349463603a4b6f on kelunik:fix-1730 into 403b7980e0bc19ca43015f6232259d81479b24b2 on slimphp:3.x.\n. \n\nCoverage remained the same at 93.223% when pulling 3e0dd1b52398cb698f1aa260593cb3e4bf84bf39 on luwake:3.x into 403b7980e0bc19ca43015f6232259d81479b24b2 on slimphp:3.x.\n. \n\nCoverage increased (+0.004%) to 93.227% when pulling 706d94f7859efcc6c20aab3b745d7e54eab3b110 on juanpagfe:mock-https-request into 403b7980e0bc19ca43015f6232259d81479b24b2 on slimphp:3.x.\n. \n\nCoverage increased (+0.01%) to 93.235% when pulling ce3eb144ee7dd7843868ccc6274ad601b14ecd18 on juanpagfe:mock-https-request into 403b7980e0bc19ca43015f6232259d81479b24b2 on slimphp:3.x.\n. \n\nCoverage increased (+0.01%) to 93.235% when pulling 63ba6881eb93da4847bdbfb9e150d35a2708dfa6 on juanpagfe:mock-https-request into 403b7980e0bc19ca43015f6232259d81479b24b2 on slimphp:3.x.\n. \n\nCoverage increased (+0.02%) to 93.243% when pulling 4538ba0d0a9dfd04eb9a600fb5c9907ebca9f0e1 on juanpagfe:mock-https-request into 403b7980e0bc19ca43015f6232259d81479b24b2 on slimphp:3.x.\n. \n\nCoverage increased (+0.02%) to 93.243% when pulling 0957d800b8edfaf9b481c799c75b65ee1a115f92 on juanpagfe:mock-https-request into 403b7980e0bc19ca43015f6232259d81479b24b2 on slimphp:3.x.\n. \n\nCoverage increased (+0.02%) to 93.243% when pulling 59d4e73735959f796081e3e0427eb27776b01f14 on juanpagfe:mock-https-request into 403b7980e0bc19ca43015f6232259d81479b24b2 on slimphp:3.x.\n. \n\nCoverage increased (+0.03%) to 93.255% when pulling a3b12b4dfb1bd4b8b6fe8ef7ab2d0ad3b666f2e3 on juanpagfe:mock-https-request into 403b7980e0bc19ca43015f6232259d81479b24b2 on slimphp:3.x.\n. \n\nCoverage increased (+0.03%) to 93.255% when pulling a7802a94e132f4bd1b1fc86498a70c8ea6e5ac96 on juanpagfe:mock-https-request into 403b7980e0bc19ca43015f6232259d81479b24b2 on slimphp:3.x.\n. \n\nCoverage remained the same at 93.223% when pulling ef76b287137537946fd78b653fdae35d3c0f937e on akrabat:code-of-conduct into dfcd63234d9610c8bfc3c26c8813659212a8c55e on slimphp:3.x.\n. \n\nCoverage remained the same at 93.223% when pulling 7add815422a5d21201affdbc75478ac6ad3846be on akrabat:code-of-conduct into dfcd63234d9610c8bfc3c26c8813659212a8c55e on slimphp:3.x.\n. \n\nCoverage remained the same at 97.071% when pulling b44700c0ac313db920a291f3ddcbcefcb2907ca8 on akrabat:code-of-conduct into 71af0cf22a5650decc415db7146d291438ecd4e6 on slimphp:3.x.\n. \n\nCoverage increased (+0.03%) to 93.283% when pulling 72309b227fdbb001d6458e5d93ee25d06fdcad8b on akrabat:encode-user-info into 67a6cb35cca62cd29608628084fcecd3ceb0facc on slimphp:3.x.\n. \n\nCoverage increased (+0.03%) to 93.283% when pulling 72309b227fdbb001d6458e5d93ee25d06fdcad8b on akrabat:encode-user-info into 67a6cb35cca62cd29608628084fcecd3ceb0facc on slimphp:3.x.\n. \n\nCoverage remained the same at 93.283% when pulling e329edfc2bd883f7d37a0876b1ec4bdfb3e3fc93 on ares333:patch-1 into f6884a7425e4ccf031ff8dda30c14e196bb67156 on slimphp:3.x.\n. \n\nCoverage decreased (-0.04%) to 93.24% when pulling e329edfc2bd883f7d37a0876b1ec4bdfb3e3fc93 on ares333:patch-1 into f6884a7425e4ccf031ff8dda30c14e196bb67156 on slimphp:3.x.\n. \n\nCoverage increased (+0.09%) to 94.963% when pulling 8f3747fe5de8b40ecfdfb52ffbf12e3c0bb71c2d on danopz:4.x into 6e1d77689f81ce1e383640ea1eafc1847d86cac9 on slimphp:4.x.\n. \n\nCoverage increased (+0.09%) to 94.963% when pulling df8aa7d4a792cee3d6b65f0bed5fb2dab0fb1b83 on danopz:4.x into 6e1d77689f81ce1e383640ea1eafc1847d86cac9 on slimphp:4.x.\n. \n\nCoverage increased (+0.09%) to 94.963% when pulling bebbc97488bee85fca4038b01775bdd432573e56 on danopz:4.x into 6e1d77689f81ce1e383640ea1eafc1847d86cac9 on slimphp:4.x.\n. \n\nCoverage increased (+0.08%) to 94.948% when pulling e5ee18f6e34284088960c9315ea9ed45d0a98149 on danopz:4.x into e52d3ce3828dc150c7b31e8d7ed1fbc5d64e810f on slimphp:4.x.\n. \n\nCoverage remained the same at 94.872% when pulling 24dc0924179b1adda9b0601e29ec6f06e8659243 on danopz:licence-header into 6e1d77689f81ce1e383640ea1eafc1847d86cac9 on slimphp:4.x.\n. \n\nCoverage remained the same at 93.283% when pulling c7a13159ae42ecaa93a7d3881765bcf100609629 on danopz:licence-header3 into f6884a7425e4ccf031ff8dda30c14e196bb67156 on slimphp:3.x.\n. \n\nCoverage decreased (-0.05%) to 93.228% when pulling 3967420bd621a394a72e8827f1fd88108687253e on mahagr:feature/uri-userinfo into f6884a7425e4ccf031ff8dda30c14e196bb67156 on slimphp:3.x.\n. \n\nCoverage increased (+3.6%) to 96.906% when pulling c0e118c663a9490949e65033de4869c1fcc663b9 on dmelo:phpunit-risky-output-buffer into f6884a7425e4ccf031ff8dda30c14e196bb67156 on slimphp:3.x.\n. \n\nCoverage increased (+0.01%) to 93.294% when pulling d88ad5e05f9c83a98283c97c55c25dfa770cc65d on Rezouce:3.x into f6884a7425e4ccf031ff8dda30c14e196bb67156 on slimphp:3.x.\n. \n\nCoverage increased (+3.8%) to 97.064% when pulling e9b9578b5d328fdbaea80ebbb82ed45f541c66d1 on Rezouce:3.x into f6884a7425e4ccf031ff8dda30c14e196bb67156 on slimphp:3.x.\n. \n\nCoverage increased (+3.8%) to 97.071% when pulling 251f555414715402ed8d418677101aad5b04c368 on Rezouce:3.x into f6884a7425e4ccf031ff8dda30c14e196bb67156 on slimphp:3.x.\n. \n\nCoverage increased (+0.04%) to 93.326% when pulling 87075ca1726ef9f126d8c4dcbd364734468a5623 on TomWright:3.x into f6884a7425e4ccf031ff8dda30c14e196bb67156 on slimphp:3.x.\n. \n\nCoverage remained the same at 93.283% when pulling ec1311c6fcd6e2801374e468143c50046590bcf1 on juanpagfe:regex-simplification-3x into f6884a7425e4ccf031ff8dda30c14e196bb67156 on slimphp:3.x.\n. \n\nCoverage decreased (-0.04%) to 93.24% when pulling c96a4c6f89269b84a141af66262fdeb1b5d4412a on akrabat:fix-redirect-with-200 into f6884a7425e4ccf031ff8dda30c14e196bb67156 on slimphp:3.x.\n. \n\nCoverage decreased (-0.04%) to 93.24% when pulling afef7ad6ee4267197125765fc626e721c1594cbf on akrabat:fix-redirect-with-200 into f6884a7425e4ccf031ff8dda30c14e196bb67156 on slimphp:3.x.\n. \n\nCoverage decreased (-0.04%) to 93.24% when pulling afef7ad6ee4267197125765fc626e721c1594cbf on akrabat:fix-redirect-with-200 into f6884a7425e4ccf031ff8dda30c14e196bb67156 on slimphp:3.x.\n. \n\nCoverage decreased (-0.04%) to 93.24% when pulling 0b40294af2b09af2b62ef2088913395a904853e9 on akrabat:fix-redirect-with-200 into f6884a7425e4ccf031ff8dda30c14e196bb67156 on slimphp:3.x.\n. \n\nCoverage remained the same at 94.872% when pulling 31c89df7df84c3d453e9880fb940591dfcb6ffae on Rotzbua:patch-1 into 6e1d77689f81ce1e383640ea1eafc1847d86cac9 on slimphp:4.x.\n. \n\nCoverage remained the same at 94.872% when pulling 54e356e5dd473675612a21fcbf896b23d7d33d1e on Rotzbua:patch-1 into 6e1d77689f81ce1e383640ea1eafc1847d86cac9 on slimphp:4.x.\n. \n\nCoverage remained the same at 93.24% when pulling 341b39349d986faffa212c0168964c65b16a013f on acinader:stab-at-fixing-contributing into c9a768c5a062c5f1aaa0a588d7bb90e8ce18bfd6 on slimphp:3.x.\n. \n\nCoverage remained the same at 93.24% when pulling 823e55bba4ee439d0ebe53502e5e44698970b65b on acinader:patch-1 into c9a768c5a062c5f1aaa0a588d7bb90e8ce18bfd6 on slimphp:3.x.\n. \n\nCoverage remained the same at 94.872% when pulling dd8fd71a3de11eca4d2746c9df068f6550c4c00f on TomasVotruba:ecs-clean into e52d3ce3828dc150c7b31e8d7ed1fbc5d64e810f on slimphp:4.x.\n. \n\nCoverage remained the same at 97.071% when pulling 6250753f773f574c5f76e851214a3ed2ea2c7819 on RyanNerd:fix-minor-issue-in-small-chunks-stream-mock into 3ab1a154e45546fd8654f87708577096391b50f7 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.071% when pulling fc7dadae66a2f73c2bc9aec9a8bb9e14c62623f5 on mnapoli:patch-1 into 3ab1a154e45546fd8654f87708577096391b50f7 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.071% when pulling fc7dadae66a2f73c2bc9aec9a8bb9e14c62623f5 on mnapoli:patch-1 into 3ab1a154e45546fd8654f87708577096391b50f7 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.071% when pulling d73f41034fc36294b3655e986d925da46582a0d5 on carusogabriel:refactoring-tests into 3ab1a154e45546fd8654f87708577096391b50f7 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.071% when pulling 3c79205ebf02f84e2311631571dd8af577722f8f on danielmadu:patch-1 into 3ab1a154e45546fd8654f87708577096391b50f7 on slimphp:3.x.\n. \n\nCoverage decreased (-0.008%) to 94.94% when pulling 7d9f2264b23e786fa40428a08c8257f8a6150fe1 on RyanNerd:do-not-set-default_mimetype-in-finalize into 13065707e9fc5a45b6b8a69b2994f60921c6fcfb on slimphp:4.x.\n. \n\nCoverage increased (+0.1%) to 95.044% when pulling f5ec341cf808665651148d76405698ee180e2ae5 on bnf:4x-psr-15-v2 into 13065707e9fc5a45b6b8a69b2994f60921c6fcfb on slimphp:4.x.\n. \n\nCoverage increased (+0.1%) to 95.044% when pulling 895817457a3503a624f7d3ae7686c8f5af038308 on bnf:4x-psr-15-v2 into 13065707e9fc5a45b6b8a69b2994f60921c6fcfb on slimphp:4.x.\n. \n\nCoverage increased (+0.1%) to 95.044% when pulling 405bd08a337ab74968eed5aa08fecc72811c872c on bnf:4x-psr-15-v2 into 13065707e9fc5a45b6b8a69b2994f60921c6fcfb on slimphp:4.x.\n. \n\nCoverage increased (+0.1%) to 95.044% when pulling 0c458023c84b99edec5daa0b3eebef13981684f5 on bnf:4x-psr-15-v2 into 13065707e9fc5a45b6b8a69b2994f60921c6fcfb on slimphp:4.x.\n. \n\nCoverage increased (+0.05%) to 97.455% when pulling 950a5416c35411a6d879ceefc66b9adc6fb2bbf9 on bnf:4x-psr-15-v2 into c39d69ad9d57ac4a6774e47a48f9fe0a6f8c3dbe on slimphp:4.x.\n. \n\nCoverage increased (+0.002%) to 97.073% when pulling d5a9c67a4aaac08c9bd4154326bf869db2e1ab92 on mewejo:patch-1 into 3292735fe159ac2d084262db6acfa76a563bb8dc on slimphp:3.x.\n. \n\nCoverage increased (+0.005%) to 97.078% when pulling fa35755a8b2cdec8cd83d81aa1b8d3736ace5082 on sg3s:allow-samesite-in-cookie into 289fd6c74002376779253171d5d73e7eaf7c95ed on slimphp:3.x.\n. \n\nCoverage remained the same at 97.071% when pulling d13ef9a0c1e2b67e8ebef0ee156ba106ec80cbf9 on akrabat:no-hhvm into 3292735fe159ac2d084262db6acfa76a563bb8dc on slimphp:3.x.\n. \n\nCoverage increased (+1.1%) to 96.055% when pulling 8cefb1cd41a737811c54e14788bfb2e3c680b869 on l0gicgate:4.x-ErrorMiddleware into bd6ef95fb99357ea1c03260b2715f085eeac3f0a on slimphp:4.x.\n. \n\nCoverage remained the same at 94.94% when pulling 03262d6def291b907c2c9ee8e38d025fe268d283 on Rotzbua:patch-2 into bd6ef95fb99357ea1c03260b2715f085eeac3f0a on slimphp:4.x.\n. \n\nCoverage increased (+0.2%) to 96.262% when pulling c58a2bbff695bb241351fcad680daf31049529fe on l0gicgate:4.x-DispatcherResults into 77daca61ee271bbd8628bd4a199963bb48fbef21 on slimphp:4.x.\n. \n\nCoverage decreased (-0.1%) to 96.964% when pulling 331d2c83636cfafda5af7e43bed8b7b91badfa2b on fatcat386:patch-1 into d0d9655a66c61e5fd25fdbdc2fc80a6e37af469c on slimphp:3.x.\n. \n\nCoverage decreased (-0.4%) to 96.684% when pulling 0f052d0d95dcd1cc9c6765df06c46bb9bfe0e468 on SmiSoft:3.x into d0d9655a66c61e5fd25fdbdc2fc80a6e37af469c on slimphp:3.x.\n. \n\nCoverage increased (+0.002%) to 97.073% when pulling a5fa26ad52395dca882110a8180fad434ae020f4 on imjoehaines:stop-overwriting-host-header into d0d9655a66c61e5fd25fdbdc2fc80a6e37af469c on slimphp:3.x.\n. \n\nCoverage remained the same at 97.071% when pulling a0d7c8264a3a9e8486d5bc59291907eab40e2a35 on juherr:patch-1 into d0d9655a66c61e5fd25fdbdc2fc80a6e37af469c on slimphp:3.x.\n. \n\nCoverage remained the same at 97.071% when pulling 415cf66b9e8de9aade862065d985a450ee81ba84 on zelding:3.x into d0d9655a66c61e5fd25fdbdc2fc80a6e37af469c on slimphp:3.x.\n. \n\nCoverage increased (+0.4%) to 96.524% when pulling 26e93ca4b720edbedde934a45025351bad0849d3 on danopz:php7 into 6e3dd489a79966487b73fb59a32c8992e1b992d7 on slimphp:4.x.\n. \n\nCoverage remained the same at 96.055% when pulling 13ed7d4c12824d794a5c9d083a922feccad84f8d on danopz:docblock-2018 into b8535416365ef267a076e0bdf63a78362a6da85a on slimphp:4.x.\n. \n\nCoverage increased (+0.02%) to 97.091% when pulling 543bb7a920a4242b78c27996dc6080cb723c211c on sunchuo:3.x_fifo into d0d9655a66c61e5fd25fdbdc2fc80a6e37af469c on slimphp:3.x.\n. \n\nCoverage increased (+0.02%) to 96.075% when pulling 5a321f274c4e3ba702d136aeb2f026735552f381 on ellotheth:redirect-route into f2c46745f4c73557e30f824a3c52f48c36d7ffbf on slimphp:4.x.\n. \n\nCoverage increased (+0.003%) to 97.076% when pulling 41975a8cc2ef316c350bd161999a271e79b9f8d1 on ellotheth:redirect-route-3 into 289fd6c74002376779253171d5d73e7eaf7c95ed on slimphp:3.x.\n. \n\nCoverage increased (+0.02%) to 97.105% when pulling 1f9fb7b4bd9f59c8ecb09c085f4f0aa6d5a43f19 on Dmitry-Kucher:3.x_status_codes into e84150bfbb0db0209bc940554decfde89cc251b5 on slimphp:3.x.\n. \n\nCoverage increased (+0.007%) to 97.088% when pulling 95585bd91556d8989f7bdb99d37d7e763c04ad5f on mathmarques:fix-route-arguments into e84150bfbb0db0209bc940554decfde89cc251b5 on slimphp:3.x.\n. \n\nCoverage increased (+0.002%) to 97.106% when pulling 639af3673d984f8a9be2593df29422952b71106e on sjinks:patch-1 into 0803c9ed901db504a42b1f163850b6d5c7c4694a on slimphp:3.x.\n. \n\nCoverage remained the same at 97.105% when pulling 4a805bac1a7115f14d6462796be3dffed5310a81 on hhovakimyan:patch-1 into 0803c9ed901db504a42b1f163850b6d5c7c4694a on slimphp:3.x.\n. \n\nCoverage increased (+0.7%) to 97.803% when pulling b50414909fbe8b56e3df560667fcc5ab96d9ed61 on akrabat:override-previously-set-headers into 2be185bfa56a37429bb19c90fe00c1c943f0a044 on slimphp:3.x.\n. \n\nCoverage remained the same at 96.075% when pulling 191bac1257528ddd077e5a02780d51496c1887a7 on l0gicgate:4.x-TravisChanges into 83e069e285ef4eaddfbc336752cf468e0e6b6eab on slimphp:4.x.\n. \n\nCoverage remained the same at 96.075% when pulling 4289d0d4fbe3db1bb7eda3d37ec985d4fe873c49 on jonathankowalski:feature.renderer-interface into 77daca61ee271bbd8628bd4a199963bb48fbef21 on slimphp:4.x.\n. \n\nCoverage increased (+0.002%) to 97.106% when pulling d640b572351d92ea50dc42413c3be3d6a4aa26da on yolcuiskender:keepnumericalindexes into 0803c9ed901db504a42b1f163850b6d5c7c4694a on slimphp:3.x.\n. \n\nCoverage remained the same at 97.105% when pulling 2c6ff59300ac5e73a2a903a7db6e5dab3f808b60 on minchao:patch-1 into 0803c9ed901db504a42b1f163850b6d5c7c4694a on slimphp:3.x.\n. \n\nCoverage remained the same at 97.105% when pulling e6917e1996492b6432396aeb0f8e8c2e0b8bb9fb on bakame-php:bugfix/uri-ToString-method into 0803c9ed901db504a42b1f163850b6d5c7c4694a on slimphp:3.x.\n. \n\nCoverage remained the same at 97.105% when pulling 122674f1bc5d5ee2b0bbb24c4b387b708a255eca on voyula:patch-1 into 0803c9ed901db504a42b1f163850b6d5c7c4694a on slimphp:3.x.\n. \n\nCoverage remained the same at 97.105% when pulling f8f4b43d3dc635f7479fe2afd40730e6c5e80c96 on voyula:patch-2 into 0803c9ed901db504a42b1f163850b6d5c7c4694a on slimphp:3.x.\n. \n\nCoverage increased (+0.002%) to 97.106% when pulling 88b86ce27c5a92c6a35cb140cea984165e183383 on voyula:patch-1 into 0803c9ed901db504a42b1f163850b6d5c7c4694a on slimphp:3.x.\n. \n\nCoverage remained the same at 97.106% when pulling d4ab6bb0d1c5400776f695a7b86efa0a08863e11 on voyula:patch-2 into 1ca78596de8f1b0e2389b812a6ce64d1ccd9e49f on slimphp:3.x.\n. \n\nCoverage increased (+0.01%) to 97.121% when pulling f6d49c8fffcb28787de8963fb3b00f693c83541d on MilesChou:add-create-from-psr7-request-method into 1ca78596de8f1b0e2389b812a6ce64d1ccd9e49f on slimphp:3.x.\n. \n\nCoverage increased (+0.01%) to 97.121% when pulling f6d49c8fffcb28787de8963fb3b00f693c83541d on MilesChou:add-create-from-psr7-request-method into 1ca78596de8f1b0e2389b812a6ce64d1ccd9e49f on slimphp:3.x.\n. \n\nCoverage remained the same at 97.106% when pulling 5b485492e6307164b00654470c9fe91bf5f8dd14 on voyula:patch-3 into 1ca78596de8f1b0e2389b812a6ce64d1ccd9e49f on slimphp:3.x.\n. \n\nCoverage remained the same at 97.106% when pulling 65d8f29af5fba3820f62ca9f7f41051e7a65008a on filips123:patch-1 into 1ca78596de8f1b0e2389b812a6ce64d1ccd9e49f on slimphp:3.x.\n. \n\nCoverage remained the same at 97.106% when pulling adcc4db166352ecc8ca022c713fcb62d44ede377 on llvdl:gh-2433 into 1ca78596de8f1b0e2389b812a6ce64d1ccd9e49f on slimphp:3.x.\n. \n\nCoverage decreased (-0.1%) to 96.118% when pulling 22e1519ad1f2fe2f31db5968628b346b13f8f725 on l0gicgate:4.x-HttpSpecializedExceptionFix into 73cf4c390be0b1f68d0c17d99066595f90b16bb0 on slimphp:4.x.\n. \n\nCoverage remained the same at 97.106% when pulling 9586b6d1b28841733b64826d86333062f98a8011 on llvdl:gh-2433 into dcfa982165d6583305f83b7688e37cee5e34a8bc on slimphp:3.x.\n. \n\nCoverage remained the same at 96.118% when pulling 91f8e2ab8122a225426f050cae03632e40e40f5c on akrabat:version-constant into fb087346efbe047ab96de085c3f968ad497d93e6 on slimphp:4.x.\n. \n\nCoverage remained the same at 97.106% when pulling b30e3a792fdf41de40efce81ec1484ca136c66ad on voyula:patch-4 into dcfa982165d6583305f83b7688e37cee5e34a8bc on slimphp:3.x.\n. \n\nCoverage remained the same at 97.106% when pulling 852ebf933b89cbe4ea0583c191048ee9d0385db7 on voyula:patch-1 into dcfa982165d6583305f83b7688e37cee5e34a8bc on slimphp:3.x.\n. \n\nCoverage remained the same at 97.106% when pulling 668abe03359a3d64c31e84686a64267dd583cd48 on voyula:patch-2 into dcfa982165d6583305f83b7688e37cee5e34a8bc on slimphp:3.x.\n. \n\nCoverage remained the same at 96.118% when pulling b5ad32fe9fe4d9f98973ed2814d99afd4fa6fd99 on mnlg:improvement/rename-variable into 0ce13ef555a1ac4b01153cad64874acb826eeb11 on slimphp:4.x.\n. \n\nCoverage remained the same at 96.118% when pulling 2eb4f80ec84374daa5ca97a216e983123f5ac38a on mnlg:improvement/group-callable-resolver into 0ce13ef555a1ac4b01153cad64874acb826eeb11 on slimphp:4.x.\n. \n\nCoverage remained the same at 97.812% when pulling b7811a878977f341024c23d074ae1d25d2bf9078 on piotr-cz:bugfix/chain-setoutputbuffering into 0618c56a3a2c6f6e621a11d2863712969ddc0670 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.812% when pulling 3c6dc83e82207ef60b8df126221ef1f20eacba7b on piotr-cz:test/chain-route-setArgument into 0618c56a3a2c6f6e621a11d2863712969ddc0670 on slimphp:3.x.\n. \n\nCoverage increased (+0.001%) to 97.814% when pulling 77bd8c982a0722e1378fd1e8d5f547f4411b6659 on lornajane:uri-port-defaults into 0618c56a3a2c6f6e621a11d2863712969ddc0670 on slimphp:3.x.\n. \n\nCoverage decreased (-0.2%) to 97.652% when pulling 1ee7afd276b71152ccdf6cde8d82ed1631e04c86 on Jmp00000001:3.x into 79051ab4bf76b9358fafead28390399163e87c92 on slimphp:3.x.\n. \n\nCoverage remained the same at 96.524% when pulling 9b35d68e768c42614474bf557d3ade5885088b12 on l0gicgate:4.x-RoutingResultsVariableFix into 6ec52e34e9e3bc23c6cbdb467b58e17c088d8b15 on slimphp:4.x.\n. \n\nCoverage increased (+1.3%) to 97.799% when pulling ed6a18f96e852e15a2e525b7eec1fb1fe2c4377b on akrabat:override-previously-set-headers-4.x into 6ec52e34e9e3bc23c6cbdb467b58e17c088d8b15 on slimphp:4.x.\n. \n\nCoverage increased (+0.003%) to 97.802% when pulling 7335aa397461e06060b73d84dcb90800459f16fa on akrabat:psr-15-request-handler into d31297c529a9ee929f5d87b4c362daf1e0e0b0ec on slimphp:4.x.\n. \n\nCoverage increased (+0.2%) to 97.966% when pulling 2bd6de1b565ff275eb09788fda558051e05dd5ca on akrabat:psr-15-request-handler2 into 7c1a6728ac0007f6e0c971fa6a26aaadfc79e24d on slimphp:4.x.\n. \n\nCoverage remained the same at 97.802% when pulling f73b15697bb90a8e648bc47c2bb647d05006f02b on vlakoff:changelog into 0b0d61da6ee5466d08ab6c298389684a9915c060 on slimphp:4.x.\n. \n\nCoverage remained the same at 97.814% when pulling caf74f388192933bcd4d1c900d75f394c17967b2 on damianopetrungaro:3.x into 6d347477d09ab7910e625cee74c8108b7b85c7f9 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.814% when pulling 12cc5d2a0626c71073441babe7b06cc3c5c47ecd on meadsteve:docker-for-local-dev into 6d347477d09ab7910e625cee74c8108b7b85c7f9 on slimphp:3.x.\n. \n\nCoverage decreased (-0.6%) to 97.186% when pulling a16312e4ef39529a7486cc96b0857d288daee913 on 1ma:non-buffered-body into 04e7689509b4da94d0dc1c5d16db41cd17456f03 on slimphp:3.x.\n. \n\nCoverage increased (+0.001%) to 97.815% when pulling dd5cd3be902bb0f0fb8c2663f76f0271dff7af1f on Oefenweb:add-phpstan-config-and-some-fixes into 6d347477d09ab7910e625cee74c8108b7b85c7f9 on slimphp:3.x.\n. \n\nCoverage decreased (-0.004%) to 97.385% when pulling 1a63671c8f7d9b455ae42d3b0cf3670cb87a59b3 on JeanPaiva:issue-2500 into 6088d8cbe740ab42113c751d642b36ff7a95299e on slimphp:4.x.\n. \n\nCoverage decreased (-0.7%) to 97.143% when pulling 169190cd0a94920ef9bbc8fc1fe0e7ac13772e8f on doganoo:3.x-route-patterns into 6d347477d09ab7910e625cee74c8108b7b85c7f9 on slimphp:3.x.\n. \n\nCoverage decreased (-0.003%) to 97.811% when pulling d4199f4e8e261cedc58213651b59ae3d410e408f on omarkdev:3.x-remove-else into 6d347477d09ab7910e625cee74c8108b7b85c7f9 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.802% when pulling befc8124544935d79e10c9f02a246b2b08bdc807 on mathmarques:remove-dependency into 5b5675451ae78eab35ca5c58fb4a24bb547fcfb6 on slimphp:4.x.\n. \n\nCoverage decreased (-0.4%) to 97.424% when pulling c5b510bd6138d2adbb1a7c268c6260508e0ecdd2 on mathmarques:patch-1 into 5b5675451ae78eab35ca5c58fb4a24bb547fcfb6 on slimphp:4.x.\n. \n\nCoverage increased (+0.001%) to 97.815% when pulling 0b3209b02874f3e5cb884c14d1889167fb0bee75 on chantron:router-get-base-path into 6d347477d09ab7910e625cee74c8108b7b85c7f9 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.814% when pulling 874bbcbc23be53e2afd5435b92e6d5b583bf2288 on akrabat:tidy-up-header-test-assets into 6d347477d09ab7910e625cee74c8108b7b85c7f9 on slimphp:3.x.\n. \n\nCoverage decreased (-0.1%) to 97.653% when pulling 3769e1e570e0cf2abf87b06993b80fefd9090558 on marcelthole:fix-static-code-analyse-errors into 5b5675451ae78eab35ca5c58fb4a24bb547fcfb6 on slimphp:4.x.\n. \n\nCoverage remained the same at 97.802% when pulling 4c872cdb2bebcd432ec6b88b915ecbb09fdc3238 on marcelthole:add-phpstan-dependency into 5b5675451ae78eab35ca5c58fb4a24bb547fcfb6 on slimphp:4.x.\n. \n\nCoverage remained the same at 97.814% when pulling cc727dff36bcdf730d97150da86fc6a885f124e4 on ugokoli:patch-1 into 6d347477d09ab7910e625cee74c8108b7b85c7f9 on slimphp:3.x.\n. \n\nCoverage decreased (-0.6%) to 97.389% when pulling a62881b29514daaa56825a9b6028ac92f8b9f36f on l0gicgate:PSR7-Decoupling into cf86b1d2b3553ac7fb6722534190077bcc637aca on slimphp:4.x.\n. \n\nCoverage remained the same at 97.814% when pulling 45bd5e91a21eccbd14b611c21503290eb8930897 on tuupola:travis-php73 into c2177436410cebef3405e2010dea74ba51aa55f1 on slimphp:3.x.\n. \n\nCoverage decreased (-32.7%) to 65.149% when pulling edfa559277dd290fa80818f56fd6869765fe464c on tuupola:travis-php73 into 5b5675451ae78eab35ca5c58fb4a24bb547fcfb6 on slimphp:4.x.\n. \n\nCoverage increased (+0.003%) to 97.816% when pulling 013e1e84870c5fbc77d9e1d8d54fb2e3ff6caa9b on NeonPaul:paul/body-parser-patch into 25da5eb7acf878e14d774add16c7c43c313afcd0 on slimphp:3.x.\n. \n\nCoverage increased (+32.9%) to 97.966% when pulling d5f510d2ac3deb9e03c764a9353984097032d71f on akrabat:fix-tests into e13f367c8a3f156299838c190bca7390a4d9d050 on slimphp:4.x.\n. \n\nCoverage remained the same at 97.814% when pulling 52f23a9eabae37abffb8e94d7dc1df66b04ca014 on soren121:psr7-body-read-int into 25da5eb7acf878e14d774add16c7c43c313afcd0 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.385% when pulling 31992a57d6aa662a7b0a46cff6bcf9f62d28f048 on Rotzbua:4.x_test_phpunit7 into 4d8f304bd22e4377ac434767dba7b46e40a65f90 on slimphp:4.x.\n. \n\nCoverage remained the same at 97.385% when pulling 304de36a0dda0c3f9de574ff00a29ae5661e31aa on Rotzbua:4.x_remove_outdated into 4d8f304bd22e4377ac434767dba7b46e40a65f90 on slimphp:4.x.\n. \n\nCoverage increased (+0.02%) to 97.405% when pulling 50c2ec998bfd9ae1bb4f6907427819da0f2d94a6 on l0gicgate:Issue-2386 into 6a7a2c79ca0d1ea876c6d50a9e1c8669b851a75e on slimphp:4.x.\n. \n\nCoverage decreased (-0.4%) to 97.465% when pulling dca44a2203fb0618b0f7955a8524699f2f2ed0e7 on AliN11:3.x into a5a2da92d24c2c30384ff89d90008327f9040cb8 on slimphp:3.x.\n. \n\nCoverage increased (+0.003%) to 97.821% when pulling 060c61b68a6a86d7ce8e508c622d95d5b31c4560 on jobcloud:route-parser-as-service into a5a2da92d24c2c30384ff89d90008327f9040cb8 on slimphp:3.x.\n. \n\nCoverage remained the same at 97.385% when pulling 82e182b9140f7a1c43e0aec726f3b5f05a6eb22b on l0gicgate:Update-Travis into 6a7a2c79ca0d1ea876c6d50a9e1c8669b851a75e on slimphp:4.x.\n. \n\nCoverage remained the same at 97.405% when pulling 5e9177d657dd1c0311b30a2682a16521382a7957 on akrabat:update-example into 94b7634a11ad64e865f66fe821c16f7427e6ea02 on slimphp:4.x.\n. \n\nCoverage increased (+1.1%) to 98.542% when pulling 6fe1b9864e8d2443e398d91fadd63b4a1904aad8 on l0gicgate:Middleware into 0deb322c34ca0cc5e3af46e891e49f4cda4c6f8d on slimphp:4.x.\n. \n\nCoverage remained the same at 97.819% when pulling 1bd7ef2b2c00d8726e8f53fc0eeb43a9e47fd44b on farpat:patch-1 into a5a2da92d24c2c30384ff89d90008327f9040cb8 on slimphp:3.x.\n. \n\nCoverage decreased (-0.008%) to 97.397% when pulling b755a3764aebd0027362179120ba1f7750c1a8d7 on vaga:remove-app-binding-in-route-group into bcf7df5129a3d126999cc73a6c961d35b83fce35 on slimphp:4.x.\n. \n\nCoverage increased (+0.9%) to 98.321% when pulling ed9397952dc4589a2caa18ea0e40f81c2a955160 on RobDWaller:additional-tests into bcf7df5129a3d126999cc73a6c961d35b83fce35 on slimphp:4.x.\n. \n\nCoverage increased (+0.004%) to 97.409% when pulling 42bd5a5047ba7e731e6a20dcd17827b9db2fe268 on lordrhodos:feature/fix-middlware-closure-parameters into bcf7df5129a3d126999cc73a6c961d35b83fce35 on slimphp:4.x.\n. \n\nCoverage increased (+0.02%) to 97.424% when pulling 7299f7af68862f4657cd7d483ca92041a1ed0e71 on mathmarques:route-arguments into bcf7df5129a3d126999cc73a6c961d35b83fce35 on slimphp:4.x.\n. \n\nCoverage increased (+0.008%) to 97.412% when pulling c59792e20f9b6cc69af51c8d803f4698d05d47a9 on jonathankowalski:Issue-2570 into bcf7df5129a3d126999cc73a6c961d35b83fce35 on slimphp:4.x.\n. \n\nCoverage remained the same at 97.819% when pulling 7eaa119c14ea0396b76d712c926a3e7df14fc343 on akrabat:maintainers-doc into f4947cc900b6e51cbfda58b9f1247bca2f76f9f0 on slimphp:3.x.\n. \n\nCoverage decreased (-2.6%) to 95.244% when pulling 9a75f0cb2fd58019dca3bed143ef9e36a2e663c6 on LeafChage:safe_start into 715d1306dd221f016b2f3f1d132a0ada3c3ac9a8 on slimphp:3.x.\n. \n\nCoverage increased (+0.006%) to 97.825% when pulling 25470cb8e6f80f1085a8def15a21302e7e853587 on lordrhodos:2386-fix-for-head-requests into 715d1306dd221f016b2f3f1d132a0ada3c3ac9a8 on slimphp:3.x.\n. \n\nCoverage increased (+0.008%) to 97.432% when pulling 5d87f348e9fcf64628ce5ad7ebe8ac963dfd297f on bnf:4x-request-handler-non-handle into afccb0a050ad5ed4671e3a2b9baa7d7e0c154fba on slimphp:4.x.\n. \n\nCoverage increased (+0.008%) to 97.432% when pulling d86d6eb8e284b5de84d0a949ac651e9a50c0f6df on bnf:4x-request-handler-non-handle into afccb0a050ad5ed4671e3a2b9baa7d7e0c154fba on slimphp:4.x.\n. \n\nCoverage remained the same at 97.424% when pulling 11e3a4d5ca26df4a330134b69aaa05e26ac77bd6 on bnf:readme-trailing-whitespace into afccb0a050ad5ed4671e3a2b9baa7d7e0c154fba on slimphp:4.x.\n. \n\nCoverage decreased (-0.03%) to 97.397% when pulling c97897183c812423066e10a57220cd3841ebd2dd on bnf:no-call-user-func into afccb0a050ad5ed4671e3a2b9baa7d7e0c154fba on slimphp:4.x.\n. \n\nCoverage remained the same at 97.424% when pulling 3d82b9dae5088a9c1317343f36b7020cb5a77507 on bnf:4x-subrequest-tests into afccb0a050ad5ed4671e3a2b9baa7d7e0c154fba on slimphp:4.x.\n. \n\nCoverage remained the same at 97.397% when pulling 2aa57fa7809ccb8c4c6e3680be9df91b0a50f8e1 on skillaug:spelling-correction into 0deb322c34ca0cc5e3af46e891e49f4cda4c6f8d on slimphp:4.x.\n. \n\nCoverage increased (+0.007%) to 97.832% when pulling b4e7bbf50413bc94ae1bc36c8de9f89e7f1f8012 on l0gicgate:3.x-RouterCacheFileImprovement into e97d122a37b854485f39e42b23a72ec245cd276c on slimphp:3.x.\n. \n\nCoverage remained the same at 98.487% when pulling b1cb7c75755a86efe455bafe2478180a0f243e28 on l0gicgate:4.x-RemovePimple into a2f22e1307c409a145b375b3ecc07ef81c74002b on slimphp:4.x.\n. \n\nCoverage decreased (-0.9%) to 98.485% when pulling f735bb69ca66a8cbf7efcf45a586301d2af9a43a on l0gicgate:4.x-RouterCacheFileImprovement into 5311e952552dcd3c8c49a363c438649031965783 on slimphp:4.x.\n. \n\nCoverage decreased (-0.009%) to 99.41% when pulling 12ff35095500c4a7de8b08e36019778494628f92 on l0gicgate:4.x-RemoveSettings into 5311e952552dcd3c8c49a363c438649031965783 on slimphp:4.x.\n. \n\nCoverage decreased (-0.9%) to 98.476% when pulling 093560e11835a444701ad0c750d6afc1f1e32e49 on bnf:refactor-middleware-into-stack into 5c4c4161970f75ba1f718f349ab1e39619e0572f on slimphp:4.x.\n. \n\nCoverage increased (+0.002%) to 98.478% when pulling d94d08dca1ebf5b6f1517fdd96f946825d560002 on akrabat:use-responsefactor-in-redirect into 7dc705dd31eb6abbe6cb0f24bc5fcb15c3eee9af on slimphp:4.x.\n. \n\nCoverage remained the same at 98.487% when pulling 9cb619972896e008e1db361fe6b71c0c7c09e3f4 on bnf:4.x-RemovePimple into a2f22e1307c409a145b375b3ecc07ef81c74002b on slimphp:4.x.\n. \n\nCoverage remained the same at 98.487% when pulling 15468eb1f0769f5d9922e4a051c9b99f36dc6de6 on l0gicgate:4.x-RefactorAppTestProphecy into df28dcc3d813769d3b583b913f1aa72b7a2cf891 on slimphp:4.x.\n. \n\nCoverage remained the same at 98.487% when pulling 1883f60f290f772ba1090b7c921907396f238069 on l0gicgate:4.x-RemoveCopyrightInFileHeaders into 75666e3a7985ff7d4f7ac46b56645d55934ff5db on slimphp:4.x.\n. \n\nCoverage decreased (-0.002%) to 98.485% when pulling 223dd60d53c44619b2715a7c6f53aab581f72ec4 on l0gicgate:4.x-StrictTypes into 8f951520882d56de0daaf83dbde8673ada2038ab on slimphp:4.x.\n. \n\nCoverage remained the same at 98.487% when pulling f6c9fb8e83c681edca77c388b7a104ce6a709320 on l0gicgate:4.x-RemoveUnusedImports into 75666e3a7985ff7d4f7ac46b56645d55934ff5db on slimphp:4.x.\n. \n\nCoverage remained the same at 97.832% when pulling 2cf98e9d760b02401ae399bb128b7de21c1c8c15 on rbairwell:patch-1 into 04e7689509b4da94d0dc1c5d16db41cd17456f03 on slimphp:3.x.\n. \n\nCoverage decreased (-0.001%) to 97.831% when pulling a8c62650b3b82c7ec8aa878f0a29e5ef32464e04 on matijabelec:feature-cleanup-base-collection-implementation into 7b9967fe4393ad4f1811e8f9bb68d1836ca5b4f7 on slimphp:3.x.\n. ",
    "TiagoGouvea": "Found the cause... I used the code above and understand why it are confused. Solved.\nphp\n$app->notFound(function () use ($app) {\n            echo \"Root URI: \", $app->request()->getRootUri(), \"<br/>Resource URI: \", $app->request()->getResourceUri();\n       });\n. ",
    "webkenny": "Not sure if this is helpful but this is the output of my request object when it does 404... In this example, I'm calling /hello/john as a route.\nobject(Slim\\Http\\Request)[32]\n  protected 'env' => \n    object(Slim\\Environment)[29]\n      protected 'properties' => \n        array (size=20)\n          'REQUEST_METHOD' => string 'GET' (length=3)\n          'REMOTE_ADDR' => string '192.168.59.3' (length=12)\n          'SCRIPT_NAME' => string '' (length=0)\n          'PATH_INFO' => string '/hello/john' (length=11)\n          'QUERY_STRING' => string '' (length=0)\n          'SERVER_NAME' => string 'docker.dev' (length=10)\n          'SERVER_PORT' => string '80' (length=2)\n          'CONTENT_TYPE' => string '' (length=0)\n          'CONTENT_LENGTH' => string '' (length=0)\n          'HTTP_HOST' => string 'docker.dev:8080' (length=15)\n          'HTTP_ACCEPT_ENCODING' => string 'gzip, deflate' (length=13)\n          'HTTP_ACCEPT' => string 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' (length=63)\n          'HTTP_USER_AGENT' => string 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/600.6.3 (KHTML, like Gecko) Version/8.0.6 Safari/600.6.3' (length=116)\n          'HTTP_ACCEPT_LANGUAGE' => string 'en-us' (length=5)\n          'HTTP_CACHE_CONTROL' => string 'max-age=0' (length=9)\n          'HTTP_CONNECTION' => string 'keep-alive' (length=10)\n          'slim.url_scheme' => string 'http' (length=4)\n          'slim.input' => string '' (length=0)\n          'slim.errors' => resource(6, stream)\n          'slim.flash' => \n            object(Slim\\Middleware\\Flash)[19]\n              ...\n  public 'headers' => \n    object(Slim\\Http\\Headers)[33]\n      protected 'data' => \n        array (size=9)\n          'Content-Type' => string '' (length=0)\n          'Content-Length' => string '' (length=0)\n          'Host' => string 'docker.dev:8080' (length=15)\n          'Accept-Encoding' => string 'gzip, deflate' (length=13)\n          'Accept' => string 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' (length=63)\n          'User-Agent' => string 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/600.6.3 (KHTML, like Gecko) Version/8.0.6 Safari/600.6.3' (length=116)\n          'Accept-Language' => string 'en-us' (length=5)\n          'Cache-Control' => string 'max-age=0' (length=9)\n          'Connection' => string 'keep-alive' (length=10)\n  public 'cookies' => \n    object(Slim\\Helper\\Set)[35]\n      protected 'data' => \n        array (size=0)\n          empty\n. This was a combination of things and your script was very helpful. The most embarrassing part, perhaps, was that somehow I was using an awkward combination of Slim 2 and Slim 3 (Composer screwed me) - Once I got that corrected, and added in a couple of your tweaks - it worked a treat. I can't thank you enough for pointing me in the direction I needed to go to find it!\nThe only thing I didn't do is your fastcgi_pass line because I'm using Docker containers so my pass had to wire to the container name and port.\nThanks again. Truly.\n. ",
    "rkram71": "I have an issue in routing, router with param goes to 404 page (i.e /users/2)\nHere is my ngnix conf\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n```\nsendfile        on;\nkeepalive_timeout  65;\nserver {\n    listen 80;\n    server_name localhost;\n    root c:/nginx/html/SlimMVC/public;\nindex index.html index.htm index.php;\n\ncharset utf-8;\n\nlocation / {\n    try_files $uri $uri/ /index.php?$query_string;\n}\n\nlocation = /favicon.ico { access_log off; log_not_found off; }\nlocation = /robots.txt  { access_log off; log_not_found off; }\n\n\nsendfile off;\n\nclient_max_body_size 100m;\n\nlocation ~ \\.php$ {\n    fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n    fastcgi_pass 127.0.0.1:9000;\n    fastcgi_index index.php;\n    include fastcgi_params;\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    fastcgi_intercept_errors off;\n    fastcgi_buffer_size 16k;\n    fastcgi_buffers 4 16k;\n    try_files = $uri @missing;\n}\n\nlocation @missing {\n    rewrite ^ $scheme://$host/index.php permanent;\n}\n\nlocation ~ /\\.ht {\n    deny all;\n}\n\n}\n```\n}\n. my .htaccess file is below...Please help me out guys\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^ index.php [QSA,L]\n. ",
    "GrahamCampbell": "\n\"nikic/fast-route\": \"dev-master\"\n\ndev-master is always a bad idea. You should use a proper version constraint.\n. > There isn't a version tag for the feature we need yet\u2026\nSo, you can still use a version constraint?\n. Example. Laravel 5.2 isn't tagged for another 5 months, but you can still install it with 5.2.* provided you either include a dev annotation or lower your minimum stability.\n. Well, you want ^0.6 surely?\n. Hmm, it seems fast route hasn't got any branch aliases. I'll send a PR...\n. @geggleto You need ^0.6, though they've forgotten to add a branch alias. As I said' I've PRed a fix.\n. > The branch alias will not make the branch be considered as stable by Composer or am I missing something?\nNo, the branch alias allows you to install a non-stable version by telling composer what version the branch represents.\n. It doesn't consider it a stable tag. Why would it have to though?\n. >  slim/slim: develop@dev\nNOOOOOO!\n. \"slim/slim\": \"3.0.*@dev\" would be fine. Anything that's not a version constraint is essentially, wrong.\n. 3.0.x-dev is wrong too! That's NOT a version constraint!\n. > And 3.0.*@dev isn't a tag too\u2026\nSo? I'm not talking about tags.\n. Does prefer-stable true do what you want?\n. ",
    "zyx-rd": "it works, Thanks @Codexing\n. Thanks @Codexing @silentworks \n. ",
    "ibrahimch": "Since June, Its not solved, what a slow service\n. But I'm facing problem\nhttps://github.com/dflydev/dflydev-fig-cookies/issues/17\n. I even can't get Or set cookies, you are talking about deleting :santa: \n. I'm using it with a big project, And using controller+models, so its annoying pass $request, $response param every time, I'm getting it from $container, $app->getContainer()->response/request\n$app = new \\Slim\\App();\n$container = $app->getContainer();\n$container['cookies'] = new \\Model\\Cookies($app);\n........................\n```\nnamespace Model;\nuse Dflydev\\FigCookies\\FigResponseCookies;\nuse Dflydev\\FigCookies\\FigRequestCookies;\nuse Dflydev\\FigCookies\\Cookie;\nuse Dflydev\\FigCookies\\SetCookie;\nclass Cookies\n{\n    protected $req;\n    protected $res;\npublic function __construct($app)\n{\n    $this->req = $app->getContainer()->request;\n    $this->res = $app->getContainer()->response;\n}\n\nfunction get($name)\n{\n    $request = $this->req;\n    return FigRequestCookies::get($request, 'theme');\n}\n\nfunction set($name, $value = \"\", $expire = 0)\n{\n    $response = $this->res;\n    $request = FigResponseCookies::set($response, SetCookie::create('theme')\n        ->withValue('blue')\n        ->withPath('/firewall')\n    );\n}\n\n}\n```\nBut nothing can help me, I've tried get and set function with req, res both, but nothing happens\n. As I know, fig cookies are not working through slim framework, Its standalone project, It needs pr7 http message request/response, so I can serve request/response that container had\n. I'm using request from container\n. So I can't use It without passing $req, $res out of router ?\n. Is there any other way that how can I get request response something like Slim\\Http\\Request, Slim\\Http\\Response located hete vendor\\slim\\slim\\Slim\\Http\nSorry for asking it again and again\nOr any other class, package that have Slim Controllers like Laravel ?\n. Thanks @akrabat I'll try\n. ",
    "nisbeti": "It is solved, Ibrahimch, use https://github.com/dflydev/dflydev-fig-cookies \n. I'm using it within a slim3 route callback, as follows:\n``` php\nuse Dflydev\\FigCookies\\FigRequestCookies;\nuse Dflydev\\FigCookies\\FigResponseCookies;\nuse Dflydev\\FigCookies\\SetCookie;\nuse Carbon\\Carbon;\nclass GetLogout\n{\n    public function __invoke(Request $request, Response $response)\n    {\n    $cookie = FigRequestCookies::get($request, 'cookie_name');\n\n    if ($cookie->getValue()) {\n\n        $response = FigResponseCookies::set($response, SetCookie::create('cookie_name')\n            ->withValue(null)\n            ->withExpires(Carbon::parse()->timestamp - 86400)\n            ->withPath($config->get('app.base_path'))\n            ->withHttpOnly(true)\n        );\n    }\n\n```\n. Slim uses fastroute, so here is an article about fastroute's use of regex \nhttp://nikic.github.io/2014/02/18/Fast-request-routing-using-regular-expressions.html\n. ",
    "Robbilie": "\"slim/slim\": \"~2.6.2\"\n. ",
    "flyon": "2.4.2\n. version 2.4.2. Should I try the beta?\n. still the same\n. wasnt able to reproduce in a quick setup, will re-open if I succeed at that later. tnx\n. yes that's the one. no, no other middleware\n. version 2.6.2\n. I store one big Instance of a class with APC, which has plenty of ResourceCollection instances connected to it. So apc_fetch / apc_store will probably call serialize/unserialise, but I guess it always used ArrayObject its native implementation, as it never caused trouble.\nI see APC converts parameters to strings in the call stack, I'm guessing this might cause the problem?\n. ",
    "juriansluiman": "Currently the way the handlers are overwritten are pretty OK to me, as they are a service (which you are used to) which returns a callback which you are used to too. So it's a 1+1 in known components for me.\nIf the issue is about an easy way to handle 404 or 500 errors in your own app, I've written about that before and with a little bit of assumptions in your app, this is really easy to solve in userland.\n. OK, so after reading this again and digging through, you just find the root cause of it all in 1 second here :laughing: \nphp\nif ($request->isPost() &&\n    in_array($request->getMediaType(), ['application/x-www-form-urlencoded', 'multipart/form-data'])\n) {\n    // parsed body must be $_POST\n    $request = $request->withParsedBody($_POST);\n}\nWrong! Actually, any request can have request body data (even GET!) and AFAIK there is no HTTP spec rule which prevents PUT data to send and body, no matter what the media type is. \nThis current implementation makes multipart/form-data unparseable for non-POST requests. Will check out if I can find a solution to add a parser for this type.\n. @akrabat yeah see my first comment. It just took some time to figure out multipart/form-data is parsed via $_POST for POST requests, but in the end there is no multipart/form-data parser to parse the data for non-POST. Now I am checking out if it's possible to write a parser.\n@geggleto well I think for the new FW you shouldn't need to send POST to simulate PUT if you're actually able to send PUT requests ;)\n. @micheh kinda weird answer imho. Slim is a general purpose framework, it should not be opinionated in the case it does not allow PUT or DELETE requests with multipart/form-data bodies. If you want to support all common HTTP verbs and support all common body encodings, it should be part of Slim.\nEither way, I have done like @akrabat said already, it's now a custom parser in my own app. If anyone need this for their own use in the future, just ping me and I'll explain.\n. ",
    "hguiney": "@akrabat Slim 2.6.2. On Windows 7 x64 under XAMPP if that helps.\n@tuupola I did not know about that directive, thanks. I turned it off, but while the endpoints no longer redirect, they only return blank responses with 200 OK. Here are the results of some tests I ran:\n- $app->get('/users/me') + GET /users/me = 200 OK, text/html, blank page\n- $app->get('/users/me') + GET /users/me/ = 404 Not Found, text/html, Slim Error Page\n- $app->get('/users/me/') + GET /users/me = 200 OK, text/html, blank page\n- $app->get('/users/me/') + GET /users/me/ = 200 OK, application/json, JSON results as intended\nThe second and last results are the only ones that make sense.\nIt also seems that turning DirectorySlash on or off has no effect.\n. Why not? Shouldn't developers be able to design their APIs the way they want to? A configuration setting  to turn redirects on or off that defaults to the existing behavior wouldn't break any existing uses, but it WOULD give people a choice to honor REST principles if they are so inclined.\n. ",
    "astax-t": "Won't it be better not to extend the Request class with proprietary methods as this potentially makes any middlewares implemented for Slim depend on this specific implementation of PSR7 standard and therefore less interoparable?\nI understand the methods such as isPost do provide convenience and I wish these were part of the standard (even better - with a trait that implements them, similar to Psr\\Log\\LoggerTrait).\nMay I suggest to have a static utility class with a few methods such as\nphp\npublic static function isPost(ServerRequestInterface $request) {\n    return $request->getMethod() === 'POST';\n}\nI do realize that static classes are generally not considered good things, but this seems to be less evil than adding non-standard extensions to Request and therefore encouraging hidden dependency on Slim's implementation of ServerRequestInterface.\nSorry if it's wrong place to start this discussion - I'm happy to move it to a separate issue, if needed.\n. Sure thing. Decorator does make sense as long as there is no externally-accessible code that relies on it (such as middleware that expects instance of SlimRequest instead of ServerRequestInterface). Such code would compromise interoperability, which was the key point of introducing PSR-7.\nMy worry is that having such convenient decorator will actually encourage writing code tightly coupled to Slim. Or even worse mistake that can be made by inexperienced developers - the code that formally requires standard ServerRequestInterface, but actually uses methods available only in SlimRequest.\n. The pull request https://github.com/slimphp/Slim/pull/1783 would help to mitigate this, if accepted. I'd be able to retrieve the resolved callable and get its parameters using reflection.\nBut really it would be better to call the custom InvocationStrategy from DeferredCallable instead of just passing arguments given to DeferredCallable ::__invoke()\n. Sure. It's not the minimal code to replicate the problem, but pretty much copied from HttpFoundation:\n```\nclass CompatibilityInvocationStrategy implements InvocationStrategyInterface\n{\n    public function __invoke(\n        callable $callable,\n        ServerRequestInterface $request,\n        ResponseInterface $response,\n        array $routeArguments\n    )\n    {\n        if (is_array($callable))\n        {\n            $r = new \\ReflectionMethod($callable[0], $callable[1]);\n        } elseif (is_object($callable) && !$callable instanceof \\Closure)\n        {\n            /* @noinspection PhpParamsInspection /\n            $r = new \\ReflectionObject($callable);\n            $r = $r->getMethod('__invoke');\n        } else\n        {\n            $r = new \\ReflectionFunction($callable);\n        }\n    $arguments = $this->doGetArguments($request, $response, $routeArguments, $r->getParameters());\n\n    $result = call_user_func_array($callable, $arguments);\n\n    return $result;\n}\n\nprotected function doGetArguments($request, $response, $attributes, array $parameters)\n{\n    $arguments = array();\n    foreach ($parameters as $param)\n    {\n        /** @var \\ReflectionParameter $param */\n        /** @var \\ReflectionClass|null $class */\n        $class = $param->getClass() ?: null;\n        if ($class && $class->isInstance($request)) {\n            $arguments[] = $request;\n        } elseif ($class && $class->isInstance($response)) {\n            $arguments[] = $response;\n        } elseif (array_key_exists($param->name, $attributes)) {\n            $arguments[] = $attributes[$param->name];\n        } elseif ($param->isDefaultValueAvailable()) {\n            $arguments[] = $param->getDefaultValue();\n        } else {\n            throw new \\RuntimeException(sprintf('Controller requires that you provide a value for the \"$%s\" argument (because there is no default value or because there is a non optional argument after this one).', $param->name));\n        }\n    }\n    return $arguments;\n}\n\n}\n```\nBut there is another PR to fix this problem. Maybe it's even better.\n. Tested and is working correctly now\n. I agree, https://github.com/slimphp/Slim/pull/1789 is better way\n. It's possible, of course, but DeferredCallable is an implementation detail and my custom InvocationStrategy doesn't need to know about it. So it's reasonable to expect it to get the original callable as the first argument but not some wrapper.\nAlternatively, this should be documented.\n. ",
    "adambro": "IMHO sticking to PSR7-only methods is the responsibility of middleware library author, not the Slim framework creators. On the other hand it makes perfect sense for Slim to be easy to use for application developers which make Slim as their framework of choice.\n. One idea: have base Request and Response objects fully compatible with PSR7 and Slim-specific that just extend the base with convenience methods. It is as easy as using extends keyword and provides an easy option to test middleware with pure PSR7 implementation.\n. The same problem is for creating WebTest class that mocks Slim, creates a request and checks response object. For now I'm using __invoke which works, because I don't have any middleware yet.\n. I guess it's something I was looking for. Got stack trace on 500 error in Slim-Skeleton app as expected. What confused me is the for 404 it does not show stack trace, just HTML error page.\nEDIT: would be good to have it documented somehow. Slim2 docs has got nice paragraph about debug mode.\n. @ppetermann I know, that's why I've mentioned the case for client that does not recognize 201 response properly.\n@AndrewCarterUK I also haven't found it in Slim code.\n. @ppetermann thanks for hint, but 3xx is not really an option - it's interpreted as error by the client. Unfortunately I can't fix that. I'd rather get rid of Location header instead.\n. @ppetermann it's an embedded software system.\n@AndrewCarterUK here's the dump of response:\nobject(Slim\\Http\\Response)#51 (5) {\n  [\"status\":protected]=>\n  int(200)\n  [\"reasonPhrase\":protected]=>\n  string(2) \"OK\"\n  [\"protocolVersion\":protected]=>\n  string(3) \"1.1\"\n  [\"headers\":protected]=>\n  object(Slim\\Http\\Headers)#50 (1) {\n    [\"data\":protected]=>\n    array(3) {\n      [\"content-type\"]=>\n      array(2) {\n        [\"value\"]=>\n        array(1) {\n          [0]=>\n          string(24) \"text/html; charset=UTF-8\"\n        }\n        [\"originalKey\"]=>\n        string(12) \"Content-Type\"\n      }\n      [\"location\"]=>\n      array(2) {\n        [\"value\"]=>\n        array(1) {\n          [0]=>\n          string(13) \"/upload/test2\"\n        }\n        [\"originalKey\"]=>\n        string(8) \"Location\"\n      }\n      [\"content-length\"]=>\n      array(2) {\n        [\"value\"]=>\n        array(1) {\n          [0]=>\n          string(1) \"0\"\n        }\n        [\"originalKey\"]=>\n        string(14) \"Content-Length\"\n      }\n    }\n  }\n  [\"body\":protected]=>\n  object(Slim\\Http\\Body)#48 (6) {\n    [\"stream\":protected]=>\n    resource(61) of type (stream)\n    [\"meta\":protected]=>\n    NULL\n    [\"readable\":protected]=>\n    NULL\n    [\"writable\":protected]=>\n    NULL\n    [\"seekable\":protected]=>\n    NULL\n    [\"size\":protected]=>\n    int(0)\n  }\n}\n. Indeed, I was able to reproduce the issue using @AndrewCarterUK code above. I've got 302 Found and browser redirect afterwards. \nI'm using Apache 2.4 from Docker image php:5.6-apache for the record. Closing as it's not Slim issue.\n. @ppetermann I understand the Interop\\Container interface has got only get() and has() methods defined, but you have to somehow set objects in DI Container. By default Slim uses Pimple, where only way is to use ArrayAccess syntax, which results in code like:\nphp\n$container['notFoundHandler'] = function ($c) {\n    return function ($request, $response) use ($c) {\n        $c['logger']->warning(\"No matching route has been found: \" . $request->getUri(), $request->getParams());\n        return $c['response']->withJson(['msg' => \"No matching route has been found\"], 404);\n    };\n};\nThis is fine as @geggleto mentioned, but Slim provides this magic __get() method, so I can use object property notation. That's personal preference simply. What surprised me is that the same object property syntax does not work for assigning objects in DIC. Example below won't work:\nphp\n$container->dao = new stdClass();\nIt's just the matter of consistency. If we have magic for __get(), what about same magic for __set()?\nIn order to have truly replaceable containers we'd have to define some common way of setting (an interface). Relaying on container implementing ArrayAccess (which is an implicit assumption currently) seems to be good trade-off.\n. I seem to agree with @ppetermann that something is not quite right here. Slim container is in fact Pimple (extends Pimple) and requires ArrayAccess for setting object, as we can see in registerDefaultServices method:\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Container.php#L97\nFew lines below there's another hardcoded dependency on Pimple in exceptionThrownByContainer method.\nI'm not saying it is wrong, actually such integration makes it convenient, so understand that I'm just looking for more convenience in using $container->property = $obj object notation for setting dependencies on DI Container.\n. Maybe it's an idea for Slim 4 (see #1686)?\n. I've meant my own test cases where I use the mock factory to create\nrequest. It is not about tests from framework itself.\nAnyway REQUEST_URI can contain query string parameters so would be nice to\naccount for it.\nOn 26 Jul 2016 11:16, \"Rob Allen\" notifications@github.com wrote:\n\nWhich tests don't set up the Request object correctly?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/slimphp/Slim/pull/1896#issuecomment-235209087, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAnoES8eVt-N5mndIYiehqQXy1fhq0Rjks5qZdBZgaJpZM4IobbU\n.\n. \n",
    "AlexStansfield": "Yeah it would overwrite Bob. Basically it uses the default if nothing else over rules it. This thread gives a more info about my reasons behind it - http://help.slimframework.com/discussions/questions/7376-setting-attributes-in-a-route\nIt's just gone midnight here so will add a test to show default is overwritten by a parameter matched in the url tomorrow.\n. Who needs sleep. Added test case to show default attribute being used and also overridden by named parameter.\n. My use case sees me needing to access the attribute in Middleware. This middleware will be used across many routes, each route will be have different defaults. So it really needs to be set on the route. \nExample: http://help.slimframework.com/discussions/questions/7376-setting-attributes-in-a-route\nAlso if you have a reusable class method for the route (rather than a closure) the same theory applies. \n. Makes perfect sense, sorry I didn't do that first time. Only thing was really wasn't sure the best name for the method that's called in the run to add the attributes. Now thinking addDefaultAttributesToRequest might have been better.\nCrap just saw the php 5.4 error. Will fix.\n. Hmm, that's a very good point. I'd only been looking at it from the point of a Route middleware. But should it also be accessible in App Middleware? I kinda feel it should even though my own use case doesn't need it. Would need to see if that's actually possible or not.\nMethod names make sense, will rename the original method and add the new one.\nThanks for being so quick to reply guys, I only picked up Slim 3 on Monday but really liking it a lot already.\n. Renamed methods and added setAttribute.\nAs the framework executes the App middleware before resolving the route it seems these attributes will definitely not be able to be accessed in App middleware. That also goes for any attributes determined by the url matching (e.g /hello/{name}). I'm not sure if this was by design or a side effect of the order in which things are done.\n. Yeah that's fair enough. I was aware that the route isn't dispatched until after the application middleware is executed, just wasn't aware that the resolving of the route wasn't done until I dived into the code itself. \nIt makes sense, but not sure if maybe the docs just need to make that a bit clearer so users know that any attributes determined by the route won't be available in the application middleware. But then maybe there are no real use cases for that anyway so it doesn't matter.\n. So from the merge last night that introduced a Route Arguments attribute I have rebased my branch and squashed down my previous commits then fixed the tests (attributes now got from $request->getAttribute('blah') rather than $args['blah']).\nHowever, I wasn't sure if you'd prefer these to still be going into the request attributes or if they should be treated as route arguments as before. \nPersonally I prefer the latter as it means they will always be where I expect them. In my route middlewear I could check for a route argument 'name' whether it's value has been defined by /hello/{name} or explicitly on the route with setAttribute('name', 'blah'). \nThe question then is, if we go with route arguments is Attribute really the right term for them now? should it be setRouteArgument (or setArgument) instead?\n. As there is a fair timezone difference (GMT+7 here) I went ahead and changed this to setArguments. I can rollback this last commit if need be.\n. Haha, you guys are really making me work for this feature :stuck_out_tongue: \nWill take a look at you work and see what I need to do.\n. @akrabat, looks like you've pretty much done the work. I need to checkout your branch and test but it looks like you've already added the setArgument public method so in theory you should be able to just add arguments in when defining the route.\nI'm going to add the tests I added for this use case. Not sure how best to do this as your code isn't merged yet. Should I do a pull request onto your own branch?\n. Ok, so not much left for me in the end. I added the setter and getters to RouteInterface. Added the tests to AppTest for the use case of calling setArgument/setArguments in the route definition and I also fixed some type hinting and docblocks (hopefully correctly)\n. Just spotted @silentworks comment about renaming Arguments to Params. Do you want that done in this Pull Request?\n. Cool, then other than the question raised by @JoeBengalen about the setters in the interface I think this is pretty much final version :grinning: \n. Only just gone 5pm here (Bangkok) so will be around for a few hours yet. \nMany thanks to you guys for being so helpful and quick to respond. Look forward to working more with Slim. \n. Many Thanks!!!\n. I appreciate that my example use case was quite simple and it appears there is already a work around. The real case I had for the project in mind is somewhat more complicated and would rely on both arguments set on the route definition and during url matching.\nWhilst I could come up with a set of rules and regular expressions and match it against the URL it would duplicate much of the work the router is doing during dispatch which seems a bit counter productive.\n. Have added URI checking to run dispatch again if the URI has changed before we execute the route. \nNot sure if this is the best solution, but as I said before this is a proof of concept and am happy for any feedback on how to do it better.\n. Also worth considering, could it be the case that the method changes too?\n. It now checks that the method has changed. Again feedback on just how I'm storing the method/path is welcome. I didn't really want to add another request attribute but wasn't sure if putting it in routeInfo was right either.\n. Added a setting \"dispatchBeforeAppMiddleware\" (off by default) to enable this functionality.\nWelcome suggestions of a better name for it and also any other improvements to the code.\n. Have rebased onto latest 3.x commits to make sure there were no conflicts\n. Quick example of how to use it.\n```\n<?php\nrequire 'vendor/autoload.php';\n$app = new Slim\\App(['dispatchBeforeAppMiddleware' => true]);\n$app->add(function($request, $response, $next) {\n    if ($request->getAttribute('route')->getArgument('auth', true)) {\n        $response->write('Authed: ');\n    }\n    return $next($request, $response);\n});\n$app->get('/', function ($request, $response, $args) {\n    $response->write(\"Welcome to Slim!\");\n    return $response;\n})->setArgument('auth', false);\n$app->get('/hello[/{name}]', function ($request, $response, $args) {\n    $response->write(\"Hello, \" . $args['name']);\n    return $response;\n})->setArgument('name', 'World!');\n$app->run();\n```\n. Yeah, you're right it does need context. Was a little worried about the name being too long. Happy to change it to whatever you guys agree on\n. Yippee, thanks a lot guys!\n. My ears were burning :) \nI understand that you can access the request uri from the app middleware, but that is still pretty limiting.\nSo this is a feature I'd really like to see (hence #1357). I'm not sure if it's the best solution or if there are some problems that I overlooked, but would appreciate some eyes on it if I'm not the only one who needs it.\n. @akrabat my solution did that. The route information is put into routeInfo attribute on the request. If once we get into __invoke in the app the routeInfo is missing then dispatch is done again. See https://github.com/slimphp/Slim/pull/1357/files#diff-eb6c3386171c6f5318119100a52f3db7R374\n. @yurevichcv yeah sorry, I didn't read your comment properly as I was responding to @akrabat. But I could modify my PR to check if the routeInfo is missing or if the uri has changed. If either of these then dispatch again.\n. @yurevichcv I've updated my #1357 so that if the URI is changed in middleware then dispatch is run again.\n@poolslick2002 I'm not sure how we've removed any flexibility. \n@JoeBengalen I don't think the solution has really made things more complicated. But I'm happy to go with a configuration option that will allow you to call dispatch before App Middleware so by default it behaves as before.\n. @poolslick2002 I've already added an update to redispatch after changes to the URI or method which allows you to manipulate the URI or Method (the two things the dispatcher uses to find the route).\nThe only remaining issue I see is the two dispatches if you modify the URI or method. Which, if you do this for every request will be expensive. But as I said before I'm happy to go with @JoeBengalen's solution of a configuration option to turn this functionality on.\nedit and you can't change the routes themselves once the dispatch has been done, again using the configuration option that could just be a limitation someone would have to accept if they wanted to dispatch before app middleware.\n. @poolslick2002 sorry, if the tone seemed off I didn't mean anything by it. I'm currently working on the configuration option. Hope to push it once we determine a nice name for the setting :)\n. @poolslick2002 & @JoeBengalen added the setting \"dispatchBeforeAppMiddleware\". Welcome suggestions of a better name. It's false by default, set it to true when instantiating the container or the app in order to enable the dispatch first functionality.\n. Nice, this will come in very handy for what I'm working on :+1: \n. The way I saw it all App Middleware would want to run before any route handlers (even ones for not allowed or not found). \nYou can get the result of dispatch from $request->getAttribute('routeInfo')[0]. \nIf you only want your middleware to run if the route is found then you can just return from it if $request->getAttribute('routeInfo')[0] !== FastRoute\\Dispatcher::FOUND.\n. @silentworks & @akrabat, any thoughts from you guys?\n. You can make changes to the $uri in Middleware if you want and it will work fine. If changes are detected after all the App Middleware have executed then it will run the dispatcher again and find the new route before handling it.\nIt just doesn't execute any route handlers before the App Middleware. It wasn't designed to do that. The idea wasn't to have routes executed before Middleware, but to be able to access any matched route. \nYou can add an app middleware on the outside that calls the notAllowedHandler or notFoundHandler depending on the result of $request->getAttribute('routeInfo')[0]. It seems that would do exactly what you're looking for without having to edit each middleware.\n. To me the setting name suggests that all that happens is it determines the route before the app middleware. Default behaviour is always been to execute the App Middleware before the notFoundHandler or notAllowedHandler. I don't see why this should change because of this setting. \nPersonally I have no use case for this, but this is an open source community project, so if it's an addition you think is important (like how I felt the original feature was important) then submit a PR.\n. For reference the headers I had in the Guzzle response were:\n- Cache-Control\n- Content-Type\n- Content-Length\n- Date\n- Server\n- Transfer-Encoding\n- Vary\n- X-Powered-By\nFor me Content-Type seems one to obviously keep. Date, Server, Content-Length and Transfer-Encoding look like ones to strip and the others I wasn't too sure.\n. Chrome gave me \"Could not get any response\". I stepped through it all and everything is fine. It adds the headers and echoes the response body. Slim doesn't error. Apache just gives me no response. \nIn the App::respond method it goes through all the headers and and calls header() to add them to the header of the response. Once I stopped it doing that with the Transfer-Encoding header everything was fine.\nAs for the other headers. I figured some things we should just let the webserver deal with. Apache will add a Date, Server, Content Length itself.\n. It's Apache returning the header. I get it if I call the same API Guzzle is calling directly from Postman. So Guzzle will include it as part of the response it gives me.\nIt seems a pretty common header (one Apache uses when it's compressing responses and so can't give a content-length). So seems to me that this would be a fairly common problem if apache doesn't send a response if you set this header.\nAs I said I've fixed the problem in my own code, but seems like this could block a really useful feature.\n. Fair enough :)\n. That's a good point and I guess it's a design question. \nShould Slim framework support setting arguments on a route definition (therefore something all route implementations should implement) or should it be a specific feature of the default router only?\nWill happily remove them if the latter is preferred.\n. Good idea, will do it now.\n. ",
    "imdreamrunner": "Thanks a lot. You solved my problem!\n. ",
    "mbretter": "You have to set the mock environment:\n$app->container->singleton('environment', function ($c)\n{\n    return \\Slim\\Environment::mock();\n});\n. You cant use the conventional slim routing features on the console. I make it this way:\n$app = new \\Slim\\Slim();\n$app->container->singleton('environment', function ($c)\n{\n    return \\Slim\\Environment::mock();\n});\n$x = new \\Whatever\\MW1();\n$x->setApplication($app);\n$x->call();\n$x = new \\Whatever\\MW2();\n$x->setApplication($app);\n$x->call();\n...\nI'm invoking the Middlewares manually, without using $app->run()\n. thx!\n. If you are accessing this attribute within an app middleware it's important to set\n'determineRouteBeforeAppMiddleware' => true,\notherwise $request->getAttribute('route') returns null\n. Let's summarize this:\n- Slim\\Container is made final due to some design patterns\n- I'm putting a lot of stuff (database handles, logger, session manager, cache manager, etc) into the Slim\\Container\n- Code completion does not work, because the php doc is missing, the solution would be: every time we are using an item from the container putting it into a local var and write the phpdoc for it, produces a lot of unnecessary code and takes time to write\n- The other solution is copying the whole Slim\\Container, putting this 1:1 into a new Container class and add the phpdoc, everytime Slim is upgraded, the Container has to be manually checked for code changes.\nI always enjoyed Slim and I really like the approach of Slim3, but in this case it would be cool choosing the pragmatic way and remove the final keyword from Slim\\Container ;)\n. great! thanx!\n. great, works thx!\n. I've used Slim2 as a container for a lot of stuff, like\n$app->cache->get(...\nwith slim3 I have to rewrite tons of calls to \n$app->getContainer()->cache->get(...\ncache is in this case not a callable, so the __call() passthrough does nothing in this case\n. most of my code is not directly in the route callback, it's inside classes somewhere else, where I'm getting the app using \\Slim\\Slim::getInstance(); (using a trait)\n. My classes are Singletons, they are not directly instantiated by Slim, this would mean that I have to change the constructor/init of all of my classes and pass the container to all of them. \nWithout accessing the global $app I have to make big changes to my source code.\nOne possibility would be exchanging the content from $app (currently instance of \\Slim\\App) with $app->getContainer().\nIt's not a big thing if you are starting from scratch with a new Slim application, but I'm migrating an existing application, I'm trying to keep the necessary code changes as small as possible.\nHowever I made a subclass of Slim and put the __get() in there.\n. doc issue in website repo opened:\nhttps://github.com/slimphp/Slim-Website/issues/83\n. copying all of the Slim\\Container code just for adding some php doc, really? \n. thx, switching to a different container implementation looks like a good idea ...\n. sure, but I have to put this everytime into a var and write the phpdoc for it, instead of simply wrinting and geting the code completion:\n$container->router->whatever\n. I could put these docs myself by extending the containert, but Slim\\Container has this f*** final keyword, no chance to make a subclass and put my @property-reads there.\nacademic vs. practical solution\n. since the final keyword has been removed, this could be done by inheriting from Container and adding property-reads \n. thx\n. I'm caging my installations using apparmor, so I'm not using /tmp, however 2MB of html/xml/json/whatever output should be enough in most cases. On the other hand, exceeding this limit could result in a critical performance drop, especially on VMs where I/O is definitely a bottleneck.\nMaybe some doc hints would be good, or a config switch?\n. hehehe :D\n. in your code snippet you are passing the container to the constructor of your AppCore class:\n```\nfinal class AppCore\n{\nfunction __construct($c)\n{\n    $this->request = $c->request;\n}\n```\nyour pass directly the request object to your constructor:\n```\n$container = $app->getContainer();\n$container['xcore\\AppCore']=function ($c){\nreturn new xcore\\AppCore($c->request);\n};\nfunction __construct($request)\n{\n```\n. ",
    "denshade": "This fixes https://github.com/slimphp/Slim/issues/1335. But ok.\n. I actually cleaned up a lot of warnings as well. Extracting PrettyExceptionRenderer was probably not necessary. Stuff like\n@var array Lookup hash of all route objects \n => \n-     * @var Route[]\n  Allows for decent auto-completion in most IDEs and is nothing more than changing a docblock. So risk free. Also missing return statements are on my grumpy list. On the other side I understand 2.x is no longer in development. You can also just add the one line with ob_get_clean which will fix the issue. \n. ",
    "AndrewCarterUK": "The next line (195) checks that it's an array of only strings.\n. You wouldn't want to store trusted proxy addresses inside the request message, as they are not part of the request. Maybe something more like:\nphp\npublic function getIp(array $trustedProxies = []);\nI'm personally against the helpers in their current format all together, I think it would be better to move these into a separate class.\nThe way the Slim request is explained in the documentation (http://www.slimframework.com/docs/objects/request.html) is also a bit misleading.\nThe page starts with an example of how to get the request object in middleware, like so:\n``` php\n<?php\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\n$app = new \\Slim\\App;\n$app->add(function (ServerRequestInterface $request, ResponseInterface $response, callable $next) {\n    // Use the PSR 7 $request object\nreturn $next($request, $response);\n\n});\n// Define app routes...\n$app->run();\n```\nAnd then goes on to give code examples like this:\n``` php\nif ($request->isXhr()) {\n    // Do something\n}\n$contentType = $request->getContentType();\n// etc...\n```\nI think that these helper methods should be defined in separate interfaces that extend the PSR-7 interfaces.\n- Psr\\Http\\Message\\ServerRequestInterface\n  - Slim\\Interfaces\\Http\\ServerRequestInterface\n- Psr\\Http\\Message\\ResponseInterface\n  - Slim\\Interfaces\\Http\\ResponseInterface\nThe documentation should encourage developers using the helper functions to type hint using the Slim interfaces and not the PSR-7 ones.\nUltimately though I think it would be better to build a PSR-7 helper component - then it could be used with PSR-7 messages from other libraries.\n. @silentworks being allowed to add non PSR-7 methods to the implementation doesn't make it a good idea to do so. If it is done, these methods should definitely be defined in an interface that applications can type hint against.\nZend Expressive doesn't provide a PSR-7 implementation, it uses Zend Diactoros.\nAs an example of why this is a bad idea,  I've been working on a library that allows developers to write FastCGI applications. It has a Slim v3 adapter (https://github.com/PHPFastCGI/Slimmer) that injects PSR-7 requests into the application. Any code using these helper methods would cause an issue as the requests are created with Zend Diactoros (edit: even if the framework runs, applications using the methods would not). Using a wrapper class would solve that problem.\nAlso, the middleware stack does not guarantee that as the PSR-7 request message is passed along the pipe it will retain the original class type. It is absolutely possible for a piece of middleware to completely replace the request message with one generated by a different PSR-7 implementation. Again, this is solved if a wrapper class is used to provide the helpers.\n[edit] Looking at Zend Diactoros it doesn't appear to provide helper methods. If you read this issue - https://github.com/zendframework/zend-diactoros/issues/44 - the core contributor (and the editor of PSR-7) says \"I feel such stuff should be in add-on packages; psr-7 was written in part to promote such single purpose utilities and prevent writing framework-specific code.\"\n. @akrabat\nWith regards to number 1, what you say is only true if you accept that Slim should add methods to PSR-7 at all, which I think that it almost definitely shouldn't. If developers are going to be encouraged to build against a Slim implementation of PSR-7 that goes beyond the interfaces, they are not bulding against PSR-7 at all, they are building against a custom Slim HTTP library - which completely defeats the purpose.\nAlso, as soon as these methods are included in a 3.x release, they cannot be removed without breaking B/C. If there is doubt over their existence, it would make more sense to start with them removed and then add them in.\nNumber 2, I agree it should be removed. The middleware approach that you have suggested is a good idea - could this work with the other helper methods too?\nI'm not sure I agree with the second approach. To start with, it would be withIp(), and it's also another method that would prevent developers from writing portable code.\nI'm happy to work on a pull request for a helper class or helper middleware that sets attributes on the request if this would be useful?\n. I'll create a new repository using the Slim-Csrf repo as a guide, then you can decide if you want to transfer the repository into the Slim namespace or not.\nI'm also going to include helper classes that would allow the Slim PSR-7 implementations of the Request and Response object to be stripped back to the interfaces, e.g.\nphp\nif ($request->isPost()) {\n    // ...\n}\nBecomes\nphp\nif ($requestHelper->isPost($request)) {\n    // ...\n}\nAt least then can decide whether to include or strip them.\n. @geggleto\n__invoke() also doesn't have the exception handling logic. If __invoke() worked in such a way that doing something like:\nphp\n$request = Request::createFromGlobals();\n$response = $app($request, $response);\n$app->send($response);\nWas the same as doing:\nphp\n$app->run();\nThen that would solve the problem.\n(Edit) - But that sort of change couldn't be made until 4.x because it would break B/C\n. @geggleto That only works if you've patched the container or want the request to be created from global variables.\nIn my project the request is received from a FastCGI connection.\n(edit to clarify: That's not PHP-FPM, the application runs as its own FastCGI daemon)\n. :-1: in current form\nThe 'host' header isn't supported by HTTP/1.0 so you need to make sure you strip it in that scenario.\n. @akrabat The protocol version is hard-coded to 1.1 in the message class (I think).\nI don't actually think this is the wrong approach. The PSR-7 specification is only for the representation of HTTP/1.1 messages, there are features of it that are incompatible with HTTP/1.0 - so I think it's dangerous pretending to support it.\n. Although that said, you can still do withProtocolVersion() :s\n. Reading this I think @abbert is right - I can't see where the protocol version is extracted from the environment?\n. @Atriedes have you tried decorating the container?\n. Need to give a more thorough review, but I think you've got B/C breaks for any code using the MiddlewareAwareTrait as you remove a property and change the type of another.\nedit:\nPHPDoc labels it as an internal class. Not sure if this changes things?\nhttps://github.com/johnstevenson/Slim/blob/stack/Slim/MiddlewareAwareTrait.php#L18\n. The comment on line 592 would be good information for the phpdoc annotation on line 567.\nIt's a protected method so it is potentially public facing and the situation where a method called 'handleException' actually throws an exception is worthy of slightly more formal documentation (IMO).\nThat's all I can really add here - it looks like a good refactor that improves readability.\n. I don't think it requires a name change. Part of the job of handling an exception is possibly to throw it if you can't do anything else with it - it's just behaviour that is significant enough to be included in the main documentation for the method.\n. Why not just add the app object to the container?\n. Posted on IRC, but reposting here in-case anyone else is interested:\n``` php\n<?php\nuse Slim\\App;\nclass AppContainer\n{\n    private static $app = null;\npublic static function getInstance()\n{\n    if (null === self::$app) {\n        self::$app = self::makeInstance();\n    }\n\n    return self::$app;\n}\n\nprivate static function makeInstance()\n{\n    $app = new App();\n    // do all logic for adding routes etc\n\n    return $app;\n}\n\n}\n// Whenever you need it\n$app1 = AppContainer::getInstance();\n$app2 = AppContainer::getInstance();\nif ($app1 === $app2) {\n    echo 'yay, same object' . PHP_EOL;\n}\n$app1->run();\n$app2->run();\n```\n. I did suggest that in IRC.\nAnd before anyone mentions bad design, it's bad design for exactly the same reason that the static access in the above examples is.\n. @thecodeassassin - controllers are passed the container as an argument to the constructor. Is the service you need in the container?\n. This doesn't feel very clean to me, for a couple of reasons.\n1. At the moment there's a memory leak scenario because you don't check to see if a method has already been added before pushing it to the array. In general, maintaining arrays in static state is asking for memory leaks (as the resources will not be freed when objects of that class fall out of scope).\n2. This tightly couples the Slim framework to the Slim PSR-7 implementation. Slim should still be able to run using PSR-7 messages from other vendors.\nThat said:\nZend Diactoros doesn't check to see if the method is one it recognises. Maybe there is a separate pull request here making the Request class allow non-standard methods?\nThat would entirely remove the need for using static state, as the custom methods could be configured and maintained as a private array on the App object.\n. It might be PHP adding that status code once it detects the location header - I tried looking in the source but couldn't see anywhere obvious where the status code would be changed.\n. @adambro can you dump the response object before it gets sent?\nYou should be able to run Slim in silent mode to prevent it actually sending the response:\nphp\n$response = $app->run(true);\nvar_dump($response);\n. I don't think Slim is your problem here.\nMaybe try running a file like this:\n``` php\n// test.php\nheader('HTTP/1.1 200 Ok');\nheader('Location: /my-redirect');\necho 'Hello, World!';\n```\nAnd check what status code you actually get. If you get a 302 from that, you should look into PHP and webserver configuration.\n. I couldn't reproduce your issue.\nThis code:\n``` php\n<?php\nchdir(dirname(DIR));\nrequire 'vendor/autoload.php';\nuse Slim\\Http\\Environment;\nuse Slim\\Http\\Request;\n// Creating request with query params and parsed body\n$request = Request::createFromEnvironment(Environment::mock());\n$request = $request->withQueryParams(['foo' => 'bar'])->withParsedBody(['bar' => 'foo']);\necho 'With data:' . PHP_EOL;\nvar_dump($request->getQueryParams());\nvar_dump($request->getParsedBody());\necho PHP_EOL;\n// Attempting to clear\n$request = $request->withQueryParams(Array())->withParsedBody(Array());\necho 'Without data:' . PHP_EOL;\nvar_dump($request->getQueryParams());\nvar_dump($request->getParsedBody());\n```\nGave:\n```\nWith data:\narray(1) {\n  'foo' =>\n  string(3) \"bar\"\n}\narray(1) {\n  'bar' =>\n  string(3) \"foo\"\n}\nWithout data:\narray(0) {\n}\narray(0) {\n}\n```\nCould you modify this script to reproduce your issue?\n. Confirmed the bug, this is the offending code: https://github.com/slimphp/Slim/blob/3.x/Slim/Http/Request.php#L728-L741\n. Here is a fix for getQueryParams: https://github.com/slimphp/Slim/pull/1732\nThere needs to be a similar PR for getParsedBody.\n. Closed for https://github.com/slimphp/Slim/pull/1733\n. http://www.php-fig.org/psr/psr-7/\nnull, array and object are the allowed values.\nYou could use false as the 'not here' value but I think that would be messy - would be clearer to introduce a new property that acts as a flag (as you suggested).\n. Unfortunately this would be a backwards incompatible change (it would break the code of anyone using this method when they ran a composer update).\n. @silentworks I can see the issue.\nphp\n$response = $response->withStatusCode(404)->withJson([]);\nThis code should return a response with a 404 status code.\n. It 'does' return that status code, I wouldn't say that it should.\nwithJson should just give you your response 'with json'. Changing the status code is a non-obvious side effect that I can see causing problems (it already has enough to trigger this PR).\nAlso, by default the status code would be 200, so it's a truly pointless feature if that was the intent. All it could do is overwrite an implicit change.\n. I strongly recommend not using the request and response entries in the container. The presence of these container entries is a design flaw, and I assume they'll be removed in the next major version.\nBecause PSR-7 request/response objects are immutable, if you are using middleware in your app the request and response objects in the container will not be valid. Again, pretend that these container entries do not exist! :)\n. Would people prefer this as an optional feature?\n``` php\n$configuration = [\n    'settings' => [\n        'httpCats' => true,\n    ],\n];\n$c = new \\Slim\\Container($configuration);\n$app = new \\Slim\\App($c);\n```\n. Good spot!\n. This code could be a bit faster.\njson_encode returns false on failure (so you know if there's an error without calling json_last_error every time).\nI'd try something like\n``` php\n$body->rewind();\n$json = json_encode($data, $encodingOptions);\nif (false === $json) {\n    throw new \\RuntimeException(json_last_error_msg(), json_last_error());\n}\n$body->write($json);\n```\n. potential B/C break?\n. potential B/C break?\n. ",
    "moufmouf": "Hey Rob,\nThanks a lot for your answer.\nI just turned this issue into a pull-request so you can have a look at what I mean.\nPull-request is not 100% complete but it works.\nI was not aware of all the use cases covered by the containerinterop integration. Especially, I was not aware of the CallableResolver class that indeed, needs a ContainerInterface to run.\nSo what I did is this:\n1- Add a configuration object\n2- Allow the user to add a container in that object (for the CallableResolver case)\n\nLazy load objects when required (e.g. notFoundHandler)\n\nThe Configuration object allows this too. Plus, it does not put expectations on the container regarding the naming of the instances which is cool. This way, you could have a container containing several App instances, each bound to different services.\n\nAllow users to swap out our implementation for another choice (e.g. Request)\n\nThe Configuration object allows to do that to (either by using the setters, or by completely reimplementing the ConfigurationInterface)\n\nProvide service location for those users who use closures as route callbacks.\n\nFor this use case, you definitely need to inject a container. You can put it in the configuration using $configuration->setContainer().\nAlso, using a container with Slim becomes way easier, since you don't have to configure it to support the 9 compulsory instances you had previously ('route', 'request', ....).\nWhat do you think about this? Would you like me to continue working on this PR?\n. Just realized I did not give you a use case, so this PR might be hard to read.\nHere is a simple use case:\nphp\n// Nothing changed for default usage:\n$app = new App();\nFor overloading a service used by Slim:\nphp\n$configuration = new Configuration();\n$configuration->setRequest(new Request);\n$app = new App($configuration);\nThis part is the interesting part. With the code above, you can use ANY DI container. You could put an \"app\" instance in your container that requires a \"container\" instance that itself sets the \"request\" instance. Using this design pattern, the container can be the master, i.e. the container can create Slim\\App. This was not possible if the container was passed in the App constructor.\nFinally, if you want to inject a container (for closures as route callbacks), you could do:\n``` php\n$configuration = new Configuration();\n$configuration->setContainer($myContainer);\n$app = new App($configuration);\n$app->get('foo', 'foo:bar');\n```\nAnd as I previously said, there is no need to put any service in this container apart from the controllers you want to use using the CallableResolver.\n. > Maybe you could have a look at https://github.com/container-interop/service-provider ? It has been WIP for some time but it's getting more and more stable. With a final push we could make a 1.0 and it could benefit Slim, just like with container-interop?\nCompletely agree with @mnapoli . What Slim needs is a way to put its services into any container. As long as this is not possible, Slim will have to provide packages with pre-configured containers (like Slimbox). You should definitely have a look at https://github.com/container-interop/service-provider since this will solve this issue for all containers. This is still work in progress. We are currently working on passing PSR-11. As soon as this is done, work on container-interop/service-provider will start again and we are quite close to a 1.0. Also, any help is welcome :). It makes complete sense to me. :+1:. ",
    "yurevichcv": ":+1: Wanted to submit similar PR, but you were faster :) Ability to cache routes is crucial for apps with high load. Actually, it will be nice to have possibility to cache them in memory. @silentworks \n. Ok, thanks. \n. I don't like above solution for few reasons:\n1. I don't want to use \"/\" group for all my routes. Each of my routes has it's own groups (\"/auth\", \"/user\", etc). I guess this way it should be empty group: $app->group(\"\")\n2. This will require to define all routes in one file (or again, set middleware for each group definition).\n3. Not sure about this, but this solution might be not optimal in terms of performance (adding groups, concatenation of patterns, iterations over groups, etc).\nThis is temporary solution I've found for myself, which is far from good (needs iteration over all routes, instead off adding middleware directly to dispatched route):\n$router = $c->get('router');\nforeach ($router->getRoutes() as $route) {\n    $route->add(function (Request $request, Response $response, $next) use ($c) {\n        ....\n        ....\n        $next($request, $response);\n    });\n}\nAny other ideas? :)\n. This way I will require a lot of this \"if\" statements :) On my opinion this logic of optional routes loading should be handled by groups.\nCurrently main problem of $app->group is that it immediately invokes callable. It will be great to implement lazy loading for group callable. This way it will be invoked only during dispatching process and only routes belonging to the group will be loaded.\n. Yes, it will be required to register all groups with their patterns. And invoke their callable if pattern was found either in main request or in sub-request. But you are right, this will definitely require a lot of changes in routing architecture. But it definitely worth to be implemented some day, as it is critical moment for big applications with hundreds of routes.\nStill didn't found good solution for my initial problem.\nAnother interesting idea.\nCurrently Slim architecture works following way if we have App and Route middleware:\nStart -> App Middleware -> Dispatching process -> Route Middleware -> Route -> Route Middleware -> App Middleware -> Finish\nNew approach:\nStart -> Dispatching process -> App Middleware -> Route Middleware -> Route -> Route Middleware -> App Middleware -> Finish\nIdea here is that App Middleware (first part) will run after dispatching process. This way we will always have $request->getAttribute('route'). \nMain question is: are there any possible scenarios that may require to run middleware before dispatching? I can't find any.\n. @tuupola Preferred approach is to use uri only in routes definition. And everywhere else to use route name. Because uri might change in future, and this way you will need to change it only in one place. Also, uri can by dynamic and use different regex patterns and parameters. This is why pathFor and urlFor methods are so valuable, as well as getNamedRoute.\n. @akrabat @geggleto But what do you think about app middleware running after dispatching process? I guess it could have solved a lot of problems for many developers. This way in all Middlewares we will always have $this->getAttribute('route').\nPersonally I can not imagine any possible and necessary scenarios of middleware required after $app->run(), but before dispatching. All configurations of container can be done before $app->run.\n. I see, @AlexStansfield in his pull request #1357 proposed almost exactly the same... I think it is really nice solution.\n. @poolslick2002  For this purposes you don't need Middleware, you need to override Router. Actually, possibility to override Router completely replaces necessity to have Middleware before dispatching.\n. @poolslick2002 You can also use regex and optional params in your routes: \n$app->group(\"[/{lang:en|de|fr}]\", function() use ($app) {\n   $app->get('/about', function() {\n      ...\n   });\n})\n. @akrabat I don't propose complex solution. I just think, that if you want to make any modifications of $uri - you should handle it inside custom Router. In my problem I have ACL-checks and it is not router-related.\nRegarding you proposal about optional param - it is great, but this way MiddlewareAwareTrait will be different for app and routes. As well as it will require 2 middleware stacks for app.\n. On my opinion the best solution will be to put middleware call after dispatching.\nAnd not break backward compatibility it is possible to do the following:\n1. Dispatch route (get route info and set it inside $request->setAttribute('route', $route))\n2. Run Middleware\n3. If after Middleware run $uri was modified - dispatch route again (for people who currently rely on the current behaviour) \n. @AlexStansfield I guess your solution doesn't have backward compatibility. In you code 'routeInfo' will always be in place if someone doesn't set it to NULL explicitly inside Middleware.\n. Thanks!\n. Posted alternative version for this issue - #1385, which I personally like much more\n. The only thing I don't like is code duplication here:\n$statusCode = $response->getStatusCode();\n$hasBody = ($statusCode !== 204 && $statusCode !== 304);\nIf you know how to fix it, please, let me know.\n. @AlexStansfield\n. I guess determineRouteBeforeAppMiddleware = true was designed for people, who don't want to make any changes to $uri in Middleware, but wants to use $route object there instead. And If someone enters http://example.com/flsdkbascdjabcgkds on my website - I want default $notFoundHandler to be fired. \nCurrently I implemented workaround (which I don't like). In each Middleware I make a check:\nif (!$request->getAttribute('route') {\n   $next($request, $response);\n}\n. But main idea is that if I explicitly set determineRouteBeforeAppMiddleware = true it means, that I don't want to change $uri inside Middleware and I want to use $request->getAttribute('route'). \nAnyway, if you think, that current design is correct - I can implement additional Middleware. But I'm almost 99% sure, that every person who uses determineRouteBeforeAppMiddleware = true will need this Middleware.\n. Unfortunately, this PR doesn't have backward compatibility. Before I was able to \"override\" container values before $app->run(). \nBefore I was able to do the following in unit tests:\n```\n$app = new \\Slim\\App();\nConfigurator::configureApp($app); //seudo-code\n$c = $app->getContainer();\n$c['environment'] = $c->factory(function ($c) {\n....\n});\n$c['request'] = $c->factory(function ($c) {\n....\n});\n```\nNow it is not possible, getting following error:\nRuntimeException : Cannot override frozen service \"environment\".\nAnd main problem is that now you freeze almost all container variables during router initialisation:\nBefore it was (worked perfectly):\n$this['router'] = function ($c) {\n     return new Router();\n};\nNot it is:\n```\nif (!isset($this['router'])) {\n            $this['router'] = function ($c) {\n                $router = new Router();\n            $uri = $c['request']->getUri();\n\n            if (is_callable([$uri, 'getBasePath'])) {\n                $router->setBasePath($uri->getBasePath());\n            }\n\n            return $router;\n        };\n\n}\n```\nAs you can see, now you access $c['request'], which automatically freezes almost all essential components in container.\n. Main idea is that essential container components, such as environment, request and response should not be frozen before app run.\nUse case:\n1. I want to configure my application (including all routes, acl, domain services, etc)\n2. Save it to static property or to cache.\n3. Override container's environment, request and response with factories.\n4. Run many tests against the same instance of application.\n. Yes, sorry, you are right. This PR caused the problem - #1443\n. @silentworks Yes, I know how Pimple works. But environment, request and response should not be frozen before app run. This limits flexibility in testing. request is the most essential entry point, and it should be called only once, further it should just be \"travelling\" between middleware and routes.\nThe same issue was in Twig-View extension, where I also sumbmitted my PR against request freezing during initialization phase - https://github.com/slimphp/Twig-View/pull/30\n. The same issue was with Twig-View extension, which was \"freezing\" request object even before $app->run(): https://github.com/slimphp/Twig-View/pull/30\n. ```\n$app = new Slim\\App();\n$app->get('/', function($request, $response, $args) {\n//\n});\n$c = $app->getContainer();\n$c['environment'] = function ($c) {\n    return new Slim\\Http\\Environment($_SERVER);\n};\n```\nIt should be possible to make full configuration of the app before passing any $requests and $environments into it. This is especially essential in Unit Testing.\n. I don't want to set the route after router. I want to set request after routes.\nThe only way to test $app->run() now is to override $c['request'] with a factory.\n. @akrabat Router needs request during dispatching, but it should not need it during routes initialization. Route initialisations are \"rules\". And when this rules defined - I should be able to \"feed\" dispatcher with any request.\n. Before this PR everything was working perfect. What is your solution for testing $app->run() now?\nTake into account, that huge projects can not allow to initialize new App instance every time. This way App with all it's huge configurations (including 200+ routes) should be initialized once, and then it needs to run 300+ different unit tests with 300 different requests. \nBefore it was possible to do it.\n. \"Setting container\" in most cases = configuring the app.\n. Main idea here is that router should not depend on \"current\" request. I should be able to configure everything:\n1. Dependencies\n2. Routes.\n3. Middleware\nAnd only after that feed any request to my app.\n. Request is kinda \"input param\" to the application\nRequest 1 ------> App (configured) -------> Response 1\nRequest 2 ------> App (configured) -------> Response 2\nRequest 3 ------> App (configured) -------> Response 3\nBut in your case it looks like following:\nRequest 1 ------> App (configured using Request 1) -------> Response 1\nRequest 2 ------> App (configured using Request 1) -------> Response 2??\nRequest 3 ------> App (configured using Request 1) -------> Response 3??\n. @akrabat Sure. In unit tests. \nIt allows do decrease time of test case initialization many times. Initialisation includes settings routes, acl, db connection, etc.\nWhen I was looking into $app->__invoke($request, $response) examples in your unit tests I was expecting $app to be reusable against different requests.\n. I can try. But this way I will also need to unset($container['router']), as it was built based on previous request. That's why I want route to be independent. \n. And also re-configure all my routes again.\n. @akrabat Your solution works, but the code now is little bit smelly.\nThis is solution which is much better from architectural point of view:\n```\nif (!isset($this['router'])) {\n    $this['router'] = function ($c) {\n        $router = new Router();\n        if (isset($c['settings']['basePath']))) {\n            $router->setBasePath($c['settings']['basePath']);\n        }\n    return $router;\n};\n\n}\n``\n. This way we have expected behaviour. Yes, I canunset($c['request'])`, but are you going to put this into documentation? How other users will know about all this \"tips&tricks\". Defining \"basePath\" in settings is predictable way. And now router is absolutely independent from current request.\n. At least it is possible to put this info in documentation:\nIf you are using Slim inside subfolder you should define basePath settings like this:\n$app = new \\Slim\\App([\n   'settings' => [\n      'basePath' => '/subfolder'\n   ]\n]);\n. Yes, definitely much better, then current solution :+1: \n. :+1: \n. @akrabat nice solution\n. Hi, tested your PR in my app. All tests are passing. :+1: \n. Added fix for situation when BODY_SIZE % CHUNK_SIZE = 0\n. If $this->file was removed from public access, you should add some getter, I guess.\n. My particular example is importing CSV file using http://csv.thephpleague.com/examples/ library (one of the most popular libraries for working with files). \nI want to import CSV data without uploading file to S3 (I'm using stateless container-based architecture) using following code:\n``` php\n<?php\nuse League\\Csv\\Reader;\n$csv = Reader::createFromPath($uploadedFile->getClientFileTmpName());\n```\nWhere path should be tmp_path from UploadedFile object (which is not available now).\n. Previously I used it this way:\n``` php\n<?php\nuse League\\Csv\\Reader;\n$csv = Reader::createFromPath($uploadedFile->file);\n```\n. Maybe it makes sense to create getter for this field, and make usage of public property deprecated?\n. Done. Sorry, my IDE sometimes does this trick... \n. ",
    "boosis": "For some reason, when I do subReques I get empty response body. \n```\nclass ListAction extends BaseAction\n{\n    public function dispatch(Request $request, Response $response, $args)\n    {\n        if (empty($args['filter'])) {\n            $args['filter'] = 'running';\n        }\n        /* @var Docker $docker /\n        $docker = $this->getService('docker');\n        $query = [];\n        if ($args['filter'] == 'all') {\n            $query['all'] = 1;\n        }\n        $containers = $docker->getContainerManager()->findAll($query);\n        foreach ($containers as &$container) {\n            $container = $container->getData();\n        }\n    return $response->withJson($containers);\n}\n\n}\n```\nIf I hit this route view browser, I get the correct json, but if I do\n$response = $this->app->subRequest($method, $uri);\nvar_dump($response->getBody()->getContents()\nI get \n\"\"\n. I am not using closure for the routes. I have Action classes for each route which app is injected in.\nSo my routes are\n$app->get('/', 'App\\Action\\HomeAction:dispatch')->setName('homepage');\nand \n$app->get('/list[/[{filter:all|running}]]', ListAction::class . ':dispatch');\nAnd in HomeAction I call \n$response = $this->app->subRequest('GET','/list');\nvar_dump($response->getBody()->getContents()\nAnd I get the empty string\n. Ahhh!\nvar_dump((string) $res->getBody()); did the trick :) I thought ->getContents() would return a string\n. Thanks for your time!\n. ",
    "ismnoiet": "Thank you @silentworks for the solution, But when i use subRequest  i get 404 page claiming that the page doesn't exist, by the way i'm using slim 3.0 .\n. Thank you @mathmarques  changing $this to $app worked for me :).\n. What if i just want to grab the result returned from an internal route call(using subRequest)  and use it inside the current route WITHOUT having the the internal route response added to the current route response object.\nExample: \n``` php\n$app = new \\Slim\\App();\n$app->get('/hello', function ($request, $response, $args) {\n    $response->write(\"Hello, World\");\n    return $response;\n});\n$app->get('/', function ($request, $response, $args) use ($app) {\n   $res = $app->subRequest('GET', '/hello');\n   //here use  $res   ...\n// i don't want $res to be added to the current $response object\n   return $response;\n});\n$app->run();\n``\n. @silentworks i'm not getting this human expected behavior i don't know why!\nInstead  it is **prepended** to the current route response object to be specific.\n. Thanks @acidvertigo for your answer and really it did work!, \nbut would you like to give us a reason why overriding the$responsewithnew $responseis needed \nhere?.  \n. @mathmarques  :+1: \n. I've tried a fresh new installation with the previous.htaccessin the same level asindex.phpand it worked for some reasons that i don't know.\n**But** i want to hear an answer from you about the reasons  that may cause this problem and thank you.\n. Yes , but  what i can't understand now is that even if remove.htaccess`  it is working also !!!\n. APACHE.\n. Yes you're right @OptimusCrime\n. I'm using postman for chrome and sometimes curl.\nNow it is working properly :)\n. ",
    "mathmarques": "@ismnoiet \nThis code should work:\n``` php\n$app = new \\Slim\\App();\n$app->get('/', function ($request, $response, $args) use ($app) {\n    $res = $app->subRequest('GET', '/hello');\n    return $res;\n});\n$app->get('/hello', function ($request, $response, $args) {\n    $response->write(\"Hello, World\");\n    return $response;\n});\n$app->run();\n```\n$this on route closure is now the container(was App on beta) and subRequest is on App.\n. The \"\"problem\"\" is here: https://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L494-L496\nIf you don't provide a response object to subRequest, the function will use the response from container(not a good thing, we know, see #1780 for more).\nSo, if you don't want that 'body overriding' you must provide a new response object like:\nphp\n$res = $app->subRequest('GET', '/hello', '', [], [], '', new \\Slim\\Http\\Response());\nHope this help you :)\n. @niranjanwnmt \nRead this: Setting up CORS. callableResolver is a required service:\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Container.php#L230\nIt was missing on doc\n. Got the point!\nMiss that PR... my bad\n. I'm with @geggleto too. Creating rules for URI(or route) sounds like limiting something when we can just concatenate the route as strings. It's simple, intuitive and flexible.\n. You can use something like:\nphp\n$newRequest = $request->withAttribute('user', $user);\n$response = $next($newRequest, $response);\nreturn $response;\nAnd you can get this with:\nphp\n$request->getAttribute('user');\n. @chriseskow\nI made a modification to fix this here:\nhttps://github.com/mathmarques/Slim/tree/lazy-resolving-middleware\nThe change:\nhttps://github.com/mathmarques/Slim/commit/99a85f9f1fbabfde730e160898da0024e56c7bb3\nI'm justing trying to figure out why Slim needs to finalize() all routes via Router->finalize(). We just need to finalize the dispatched route.\nI leave the Router->finalize() because of the Tests.\n. I think it is too @akrabat.\nRoute Middleware on Slim 2(even being a little different) would match my expected order.\nWhat could we do? \nWait for more feedbacks on this?\n. Yes, works fine. I'll try to add some tests 'cause I'm not that good on phpunit stuffs...\n. Added tests\n. I thought about sub requests and I moved the finalized state to Route class on my \"fix\" for Lazy resolving of route middlewares:\nhttps://github.com/mathmarques/Slim/commit/99a85f9f1fbabfde730e160898da0024e56c7bb3\n@codeguy Is it too early for create a PR for change this finalize behavior? :)\n. I just need to work on removing the \\Slim\\Router->finalize() (A lot os unit tests use this function and I just remove the content of it)\nI'll make the changes and open a PR.\n. Show the exception throwed\nJust remember if the controller isn't on your Container, you must use the fully qualified class name. \nsomething like:\nphp\n$app->get('/', '\\App\\Controller\\YourController:method');\n. The container or the dependencies should be inject through class constructor.\nIf you use you class like \"fullyClassName:function\", the container will be inject on constructor automatically.\nOther ways you will have to inject through constructor manually\n. First see: https://github.com/slimphp/Slim/pull/1654\nYou can use this in your code:\nphp\n/* @var \\Slim\\Interfaces\\RouterInterface $router */\n$router = $container->get('router');\n. @bradynpoulsen You can test, just install the dev version like:\n$ composer require slim/slim \"3.x-dev\"\n. I don't think we need to add if it's not part of the RFC.\nIf you're talking about Slim 3 you can use:\nphp\n$response = $response->withStatus(419, 'Authentication Timeout');\n. What about a setting to change the middleware stack(execution) order?\nWe use the \"Last In First Executed\" by default, but we could add a setting to change this behaviour to \"First In First Executed\" like others frameworks.\n. When using directly __invoke, you are ignoring the app level middlewares. I think this is the only problem.\n. If Content-Length is your problem, you can solve it using a middleware.\nLike this:\n``` php\n//Middleware\n$mdw = function($req, $res, $next) {\n    $res = $next($req, $res);\nreturn $res->withoutHeader('Content-Length');\n\n};\n//Add the middleware to app\n$app->add($mdw);\n```\n. The Middleware won't work. Analysing the code, I figured out that the Content-Length header is added after all \"run\" cycle. my bad =/\nBUT you can remove the content-length doing this:\n``` php\n$app = new \\Slim\\App();\n$app->get('/', function($request, $response){\n    return $response->write(\"Test\");\n});\n// Take a look HERE! :D\n$response = $app->run(true); //Silent mode, wont send the response\n$response = $response->withoutHeader(\"Content-Length\"); //Remove the Content-Length\n$app->respond($response); //Now we send the response\n```\n. No, see: https://github.com/slimphp/Slim/issues/1673\n. You will have to re-define everything. Slim cannot register the services on all containers. There is no standard to register services.\nSee: https://github.com/container-interop/container-interop/blob/master/src/Interop/Container/ContainerInterface.php\n. Do you mean show uncaught exceptions?\nphp\n$app = new \\Slim\\App([\n    'settings' => [\n        'displayErrorDetails' => true\n    ]\n]);\n. Change on LICENSE.md too :)\n. This is a Fastroute issue. \nBut you can handle it with some logic.\nphp\n    $app->get('/businesses[/{arg1}[/{arg2}[/{arg3}]]]', function ($request, $response, $args) {\nIf only the first arg is set, this arg is the page\nIf the first and second are set, the first is city and second is page \netc...\n. See: http://www.slimframework.com/docs/concepts/middleware.html\n\nSlim adds middleware as concentric layers surrounding your core application. Each new middleware layer surrounds any existing middleware layers. The concentric structure expands outwardly as additional middleware layers are added.\n\nLIFE: Last In First Executed\n. First things first, $app->get | post | put | map | ... will always be the first layer(so it will always be the last executed).\nSlim have App level Middlewares and Route level Middlewares, and app level middlewares are always executed first than route level middleware.\nIf you take a look here: https://github.com/slimphp/Slim/issues/1622 (now slim execute order is what I was expecting) I think you could understand better how this works.\n. :+1: \nWould this not be a BC break?\nIf someone changes the container request and response object before calling run(), they would expect that Slim uses these objects, but instead, Slim will create a new request and response.\n. I guess everything should work now! \nGood job :+1: \n. @akrabat Wouldn't be good to call createResponse() instead of this:\nhttps://github.com/akrabat/Slim/blob/deprecate-request-response-env-from-container/Slim/App.php#L501-L503\n. We still be causing a BC break. If someone try to get request/response from container before call run.\nGood catch @juliangut, but in that case it won't generate error unless you use view before call run(no problem using inside middleware/route callback).\n. See https://github.com/slimphp/Slim/issues/1616 and https://github.com/slimphp/Slim/issues/831\n. $_FILES will be parsed as an array of UploadedFileInterface\nYou'll need to check the same way you would do with $_FILE.\nSomething like:\nphp\n$image = $request->getUploadedFiles()['file']; //your upload image form name is file, right?\nif($image->getError() != UPLOAD_ERR_OK){\n    //You don't have an image :)\n}\nIf you could have more than 1 image named file: $image will be an array of UploadedFileInterface\n. Everybody talks about https://gitter.im/\nNever used it, but can be an option.\nI'm ok with IRC though\n. I think we could return null, or set parsedBody to null.\nThe unit test that will fail:\n``` php\npublic function testGetParsedBodyNoContentType()\n    {\n        $method = 'GET';\n        $uri = new Uri('https', 'example.com', 443, '/foo/bar', 'abc=123', '', '');\n        $headers = new Headers();\n        $cookies = [];\n        $serverParams = [];\n        $body = new RequestBody();\n        $request = new Request($method, $uri, $headers, $cookies, $serverParams, $body);\n    $this->assertNull($request->getParsedBody());\n}\n\n``\n. :+1:\n. :+1: \n. :+1: \nI think we could extend\\ArrayAccesson this interface to get/set global values (like TwigView)\n. I think this can be closed as discussed https://github.com/slimphp/Slim/pull/2445 . You need to change the nginx settings.\nSee on Slim docs here: \nhttp://www.slimframework.com/docs/start/web-servers.html\n. I think the \"problem\" @grikdotnet is reporting is with thisnginx.config` setting:\nfastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\nSlim need this in order to work properly.\nAnd @grikdotnet said:\n\nWell, as to me, a framework should be compatible as much as possible. The idea of microframeworks is to enforce less constraints. To be embeddable. To assist, not to limit.\nIf Slim requires a dedicated server configuration, the goal is not achieved.\n\nHe thinks it's not a good idea.\nHe claims that others frameworks work without this change:\n\nThere are default commonly used setting for Nginx and PHP. A SCRIPT_NAME parameter is one of them. All other frameworks work with it. \n\nSo @grikdotnet can you please tell which others frameworks?\n. I don't think we should add this on Slim.\nA 'simple' middleware could add CORS Support.\nMaybe we only need a Middleware/Addon section on slim website to index these useful things \n. I don't think that this needs to be a core feature.\nYou can do with $app->group like:\n``` php\n$app->group('', function () {\n    // Front page\n    $this->get('/', function (Request $request, Response $response, $args) {\n        ...\n    });\n// About page\n$this->get('/about', function (Request $request, Response $response, $args) {\n    ...\n});\n\n})->add('pageMiddleware');\n$app->group('', function () {\n    // Retrieve flash messages (JSON format)\n    $this->get('/flash-messages', function (Request $request, Response $response, $args) {\n        ...\n    });\n// Log the user out\n$this->get('/logout', function (Request $request, Response $response, $args) {\n    ...\n});\n\n})->add('apiMiddleware');\n```\nRemember that group pattern can be empty.\nIf the PR didn't get merge and if you want to implement the tag on your application, you could extend \\Slim\\Route and implement the tag feature, then extend \\Slim\\Router and override the map function to use your Route.\n. The \"problem\" was created here: #1866 \nProbably googlebot is sending an Accept header that isn't application/json, application/xml, text/xml or text/html.\nCouldn't find the full googlebot request to see what google send on Accept header.\nTo fix this you could implement your Not Found handler. See here.\n. This is not a Slim issue. It's a PHP header 'feature'.\nSee header manual here.\n\nThe second special case is the \"Location:\" header. Not only does it send this header back to the browser, but it also returns a REDIRECT (302) status code to the browser unless the 201 or a 3xx status code has already been set.\n\nIf you set Location header, you can only change 302 status to 201 or 3xx\n. Because Slim\\App invoke will always be the last App level middleware to be called.\n. Do you have an use case? I can't imagine that...\n. @akrabat $callable is already protected, see here.\n. Route pattern is just a simple concatenation. See this for more information.\nSlim used to do the way you proposed, but it's better without all the \"magic\".\n. This problem isn't related to Slim. It's because php printed the Deprecated message before Slim send the response(causing the header error). You could just change PHP error report config on php.ini or:\nphp\nerror_reporting(E_ALL ^ E_DEPRECATED);\n. Just a comment:\nphp\nclass Middleware1 {\n    public function __invoke(Request $request, Response $response, callable $next) {\n        $foo = $request->getAttribute('foo'); // expected 'bar'; got 'bar'\n        return $next($request->withAttribute('foo', 'baz'), $response)); // set 'foo' to 'baz'\n    }\n}\n// expected 'bar'; got 'bar' is not true. $foo here is null, 'cause only the Route Strategy set the Url Arguments as Attributes(before the call to the route callable).\nSo we could add to docs that Route Strategy may overwrite your previous attributes.. This can be closed, was fixed on #2117 . I think we should allow MyController::method even without DIC. Otherwise we will be forcing users to add all controllers on the DIC (I'm not saying that this is a bad thing).. I think that a class MiddlewareAware composed into App and Route would be better than extends an abstract class.\nIf you want, I can make this change.. Yes, there is a way, see here\n. Just wondering if we should PR this to 3.x. Isn't a BC break?\n. @geggleto \nIf anyone is extending Request and changing $validMethods to only allow some methods they could have a problem. Slim will throw NotFoundException(if I'm not wrong) instead of InvalidMethodException.. Any guess on why Coverage decreased?. Our travis script was using the global phpunit instead of the vendor one(set on composer).\n2185 fix it's for 4.x branch and upgrade phpunit to 5.x.. This test is supposed to move the uploaded file to a stream, so you could check if  moved === true. In theory, this is the problem:\nphp\n$environment = Environment::mock([\n    'SCRIPT_NAME' => '/foo/index.php',\n    'REQUEST_URI' => '/foo_bar',\n    'HTTP_HOST' => 'example.com:8080',\n    'SERVER_PORT' => 8080,\n]);\nBut when the /foo won't be on REQUEST_URI?\nFor me the correct Request URI would be 'REQUEST_URI' => '/foo/foo_bar',. Yes, you can. You can do something like if the route was not determined: \n```php\nuse Interop\\Container\\ContainerInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Slim\\Route;\nclass MidTest\n{\n    private $container;\npublic function __construct(ContainerInterface $container)\n{\n    $this->container = $container;\n}\n\npublic function __invoke(\n    ServerRequestInterface $requestInterface,\n    ResponseInterface $response,\n    callable $next\n) {\n    /** @var Route $route */\n    $route = $this->container->get('router')->getNamedRoute('routeName');\n    $route->setCallable('new callable here');\n\n    return $next($requestInterface, $response);\n}\n\n}\nAnd set the route name like:php\nuse \\Slim\\Http\\Request;\nuse \\Slim\\Http\\Response;\n$app->add('\\App\\Middleware\\MidTest');\n$app->get('/', function (Request $request, Response $response, $args) {\n    //something\n})->setName('routeName');\n```\nIf the route is determined, you can get the actual route from middleware with:\nphp\n /** @var Route $route */\n$route = $request->getAttribute('route');\n$route->setCallable('new callable here');. Is $auth set before $app->group('/login', function(){ ?\nIf the answer is true, it's not the same scope so you must inherit the $auth like:\n$app->group('/login', function() use ($auth){\nSee Anonymous functions. @ursoforte Could you please provide a var_dump of the $_SERVER received on that url on your production server?. Change your .htaccess to:\n<IfModule mod_rewrite.c>\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^ index.php [QSA,L]\n</IfModule>\nand see if the problem persists.. @piernik curl: (18) transfer closed with 20 bytes remaining to read probably means that your application is sending the wrong Content-Length which will cause error on requests.\nTry change the Slim's setting addContentLengthHeader to false.. I prefer the LIFO approach, but if we change to FIFO's way, we could find an easy way to add an setting for that.. This is the same as #2430 , and #2431 should fix it and keep setArgument working.. This is actually a bug. There are cases where we could have to dispatch more than one request on a singles instance. That's one of the reasons the App::process was created. See https://github.com/slimphp/Slim/pull/1688.. @carc1n0gen Not exactly, as I mentioned, see this use case: #1688. @akrabat  It's not more than once for a given route, but process can be invoked more than once for a single Slim's instance. And if one route is matched more than once, this problem will occur.\nAn use case: https://github.com/slimphp/Slim/pull/1688. I don't think so @akrabat .\nAfter app initialization the only way to call setArguments() is after the route is matched, and I think if you use setArguments() at this time it's only for that one request.. This change should fix it.\nCouldn't think another way to solve it. Any better solution?. @akrabat Should I patch this on 4.x? Or maybe raise an issue for review every change on 3.x tests since 4.x was created and add them to 4.x and fix it?. The idea of set cookie, is to set them on response, not the request you received.\nIf you wanna know what cookies have you set, you will have to get with toHeaders().\nbut if you wanna add something that you need to know further on app, you could use $request->withAttribute(). Where is $middleware2 defined?  Is it before $app->group ?\nIf so you should add use ($middleware2), 'cause you are in another scope, like:\n```php\n$app->group('/route1', function () use ($middleware2){\n$this->post('/route2/', function ($req, $res, $args) {\n    //some code\n  })->add($middleware2);\n$this->post('/route3/', function ($req, $res, $args) {\n    //some code\n  });\n})->add($middleware1);\n```\nSee http://php.net/manual/en/functions.anonymous.php. First, a simple string is not a valid JSON object/array, see the discussion #2453\nThis is not a Slim issue, by default json_encode encode special characters to unicode like \\uxxxx\nSee http://php.net/manual/pt_BR/function.json-encode.php \nBut if you want to see those characters use:\njson_encode($response, JSON_UNESCAPED_UNICODE);\nRead about JSON_UNESCAPED_UNICODE here: http://php.net/manual/pt_BR/json.constants.php. I don't think we need --prefer-lowest, we've used it for 5.6 only.\n. Seems like I don't know how to rebase anymore hehe\nClosed this in favour of #2569 \nSrry for the late response here. . This:\nphp\n$response = $this->finalize($response);\nshould be on process(), shouldn't?\n. Response extends Message too. If we remove this line won't throw error but will declare a new property on response object.\nIsn't this a problem?\n. I think it's better to use $newResponse = $this->withBody(new Body(fopen('php://temp', 'r+'))) instead of clone and set.\n. I was just saying to use withBody, cause if we have a method for return a new response with a new body, we don't need to reimplement it.\n. ",
    "acidvertigo": "I have the same issue, adding $response = new $reponse; in the master route does the work\n. ",
    "flanderboy": "Hello everyone, i'm try this\n```\n$this->post('/advertiser/', function ($request, $response) use ($app) {\n            $dataset        = $request->getParsedBody();\n\n            $result         = $this->subRequest('POST', '/programmatic/advertisers/create/', $dataset, [], [], '', $response);\n            $result         = json_decode($result->getBody(), TRUE);\n\n            return $result;\n\n})->setName('programmatic-create-advertiser');\n```\nbut return \nCall to undefined method Slim\\Container::subRequest(). I Rob,\ni'm changes the path \n$config['routerCacheFile']                     = __DIR__ . '/cache/';\nthe dir /cache/ is inside the root of project but does not change.\n. normally not, but in this case i want to try the cache and i put \n/config.php \n/index.php \n/cache/\nin the same place. i write them... \ndrwxrwxrwx 2 www-data www-data /cache/. ",
    "sojimaxi": "@geggleto how do I go about implementing a subRequest when slim4 is out or interestingly any thoughts. Currently developing with slim3  and my need for subRequest is to prevent n+1 request. eg.  GET /me?include=likes,hobies,friends  of which i would like to avoid doing GET /me/likes .... and others. Actually using subRequest makes its slow has it would be faster to just implement an internal handler.\n. ",
    "antxDotDe": "@sojimaxi  perhaps you can solve it via middleware?. ",
    "yemitula": "Is $app->subRequest available in Slim 2?\nI keep getting Call to undefined method Slim\\Slim::subRequest() . ",
    "mgansler": "Works as expected.\n. ",
    "dccampbell": "Slim 3.x, beta1 and latest.\n. ",
    "micheh": "Should be fixed now with #1393 if the original method is POST.\n. @asaokamei Your example creates the expected URI without double slashes. Do you have this issue with the current version?\n. Thanks for the PR. The test passes in a Windows environment, where the directory separator is a backslash. The problem is this line, where the base path is set to /: https://github.com/slimphp/Slim/blob/3.x/Slim/Http/Uri.php#L200\nThis is fixed in #1411 and your test will pass once the PR is merged.\n. @akrabat Sure, rebased onto e10993917f793c32f396890f115814c8bfee8e30\n. In my opinion it is not worth to implement a custom parser for a multipart/form-data encoded body. Instead, if Slim detects this content type in a PUT request it should return a response with 415 Unsupported Media Type.\n- If you have non-binary data: Use the more lightweight application/x-www-form-urlencoded, application/json, ...\n- If you have binary data: Make a PUT request with the binary data in the request body\n- If you have mixed data: POST/PUT the binary data first, then update the non-binary data with PUT\nAnyway, see the rejected parser in Symfony for a possible implementation: https://github.com/symfony/symfony/pull/10381\n. @silentworks I use this in the route callable.\nI didn't know that the route attribute exists, only saw the routeInfo. Can you tell me where this is added to the request?\nEdit: Nevermind, found it in Route::prepare. Great!\n. Integrated test from #1413 (also fixes #1380). cc @asaokamei \n. Just an idea: What if we move this code to filterPath?\n. Use cases:\n- Minimal callable signature and avoid unused parameters (for example if you don't need access to the request and/or response object or if they are already injected in another way, say a Controller constructor). The callable will also be easier to test.\n- Custom parameter order (for example if you set the response as an optional last parameter to be able to call the callable in another context where the callable creates a new response itself).\nNote: I don't propose to use this strategy by default, but in my opinion it is very convenient and it would also provide the same functionality right out of the box as the other micro frameworks.\nSince you use Reflection only once per request, the performance hit won't be that serious. Interestingly, in my Apache Bench tests (-c 100 -n 5000) the Reflection strategy always had a slightly lower mean and median. Not sure why, though.\n```\nRequestReponseArgs :: Connection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        1    2   1.6      2      24\nProcessing:   211  686  80.3    680    1339\nWaiting:      150  685  81.6    678    1338\nTotal:        215  689  80.3    682    1341\nReflection :: Connection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    3   5.6      0      31\nProcessing:   223  674  82.4    669    1154\nWaiting:      194  673  83.8    663    1154\nTotal:        224  677  82.4    671    1154\n``\n. @akrabat Why do you add the base path to the base path? That doesn't seem right. Also, the methodwithBasePath` always adds a root slash, so this statement can probably never be true?\n. ",
    "poolslick2002": "Personally for me it makes sense to have the app middleware before dispatch:\n- dealing with insensitive routes\n- having a lang route segment (/about; /en/about; /fr/about; /de/about) - I can a have a middleware that sets the app lang and removes that first segment before dispatching to \"/about\"\n  etc...\nBut I also agree that it would be nice to have a mechanism to attach an app middleware after the dispatch process and be able to do $request->getAttribute('route') \n. @akrabat this would be an elegant solution\n. There is already middleware that is called after dispatch - it is the route level middleware - there is also a way to attach it to multiple routes - using groups - why remove flexibility by also moving the app level middleware after the dispatch?\nNeed something attached to every route? iterating over all routes makes sense for me.. \nOr lets add another middleware stack (eg: router level middleware) or find a better way to attach them to all routes - but don't modify a perfectly good functionality. \n. @AlexStansfield - In both examples (that I mentioned earlier) - almost every time the dispatch process will happen twice and I think that in a large application with many routes this is very expensive..\nSo running the dispatch process again does not seem like a good solution for me. And by just moving the app middleware after dispatch (without a second dispatch) besides the fact that will break functionality for who is relying on the current behavior will also remove the flexibility of manipulating the route and influence the dispatch process..\nOnly for the language parameter in the route example - I agree that there are a lot of different ways to deal with that - but why use regex and optional params. in every route - for example - when I can keep my application DRY and just add a small piece of code that takes care of that..?\n@JoeBengalen - introducing a configuration option could be a solution\n. @AlexStansfield - please don't get me wrong, I think we have a very constructive discussion - yes I've seen your update (and I appreciate your work) - and I agree with adding a configuration option to turn this functionality on.\n. @AlexStansfield I did not tested the code - but it looks good to me - thank you for your work!\n. ",
    "asaokamei": "@micheh Yes, it still fails with the current 3.x branch. \nSo, I made a PR #1413; I hope that was OK...\nHere's the output from the phpunit. \n``` sh\nvendor/bin/phpunit \nPHPUnit 4.7.7 by Sebastian Bergmann and contributors.\n...............................................................  63 / 357 ( 17%)\n............................................................... 126 / 357 ( 35%)\n............................................................... 189 / 357 ( 52%)\n............................................................... 252 / 357 ( 70%)\n............................................................... 315 / 357 ( 88%)\n.........F................................\nTime: 906 ms, Memory: 7.75Mb\nThere was 1 failure:\n1) Slim\\Tests\\Http\\UriTest::testWithPathWhenBaseRootIsEmpty\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'http://localhost/test'\n+'http://localhost//test'\n/Users/asao/vm/ubuntu1310/shared/www/Slim/tests/Http/UriTest.php:582\n/Users/asao/vm/ubuntu1310/shared/www/Slim/vendor/phpunit/phpunit/phpunit:36\n```\nFYI, the PHP is version 5.6.5\nsh\n php -v\nPHP 5.6.5 (cli) (built: Feb 12 2015 10:39:21) \nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2014 Zend Technologies\n    with Zend OPcache v7.0.4-dev, Copyright (c) 1999-2014, by Zend Technologies\n    with Xdebug v2.2.5, Copyright (c) 2002-2014, by Derick Rethans\n. ",
    "Outfl3sh": "_rewind()_ing didn't help so I don't think that's the problem\n. As @geggleto mentioned according to php.net php://input can be read only once, because right now there is no support for a seek operation. I think there is a really simple solution of just dumping the whole body into a string and then creating a stream from it. Not really a clean solution, but I can't seem to find a better one.\n. Great, thanks for the fix.\n. I'm afraid that I don't have either time and skills for that, at least not right now. \n. ",
    "LeoLR": "So why i didn't have the response? \nThe JSON? \n. Ok,\nIn my API i've before my response->write do a var_dump(count($response)) and that return me 144.\nBut when i let this:\n$resp = $app->response();\n$resp->header('Access-Control-Allow-Origin', '*');\n$resp->write(json_encode($response));```\nIn Postman i've status 200 OK, times 334ms but a white page... \nSo i try to make a var_dump($response);\nAnd that return good information, so i think the problem is on the json_encode\nNo? ^^'\n. The 2.6.1\n. I've maybe find the problem, it was some f... caracters in the database... Like this -> \ufffd\n. It was a problem with encode/decode caracters. \n. ",
    "samparsky": "@juriansluiman Can you please explain by creating a blog post about it and sharing the link. I am having issues with parsing put requests in slim v3.\n. ",
    "caztial": "if you sending data from put method make sure to set the content type to application/x-www-form-urlencoded. ",
    "newbielabs": "You have to set header request Content-Type: application/x-www-form-urlencoded. ",
    "migueldemoura": "application/x-www-form-urlencoded is no good if you want to send binary data.... Closing since it's a duplicate. Thanks, @tuupola.. ",
    "PeterBocan": "If nothing else, this should have been described in the documentation. The caveat is not obvious. . ",
    "pixelchutes": "Makes sense to me. PR updated to target next 2.x patch release.\n. ",
    "Swader": "User error. All work and no play...\nThe form was submitting to /users which didn't have a POST counterpart. So using /users/login was fine in both Get and Post form, but using /users was not.\nSorry all :/\n. ",
    "jbmaisner": "oops problem solved...\nI had a \"var_dump($_SESSION)\" at the wrong place...\n. Hey there,\nI'm so sorry for this late answer but I didn't have time to test again.\nBut yes it's working now ! I don't know what mistake I did before...\nThank you for your help !\n. ",
    "basert": "When using variables via \"use\" the variable will be copied instead of passed by reference. So you need pass the $app explicit by reference with an \"&\"\n$app->get('/redirect', function () use (&$app) {\n    $app->flash('success', 'successfull redirect');\n    $app->redirect('/post/boby');\n});\n. This is true for normal function calls, but not for anonymous functions. Check this: http://php.net/manual/de/functions.anonymous.php\n. Can the phpdoc get fixed?\n. ",
    "campersau": "I think this does not fix #1399 completely because this only fixes getMetadata and not getSize which uses fstat.\n. Maybe it is the same issue as in #1647 or #1743 ?\n. I think you are mixing up getAttribute with request params such as getParam, getQueryParam .... There are two spaces after the first '/'.\n. Nit: Why is this variable named $html instead of $text? The docblock saysRender exception as Text.\n. NIT: Why not \nphp\n$html .= sprintf('Trace: %s', $trace);\nas everywhere else?\n. Nit: remove blank line here for consistency with the code below?\n. What would happen if the url looked like this: /hello/josh?name=test ?\n. Why not adding $this->expectExceptionMessage('Expected a ContainerInterface');?. ContentLengthMiddleware?\nMaybe the OutputBuffering should also be renamed?. ",
    "Nandiin": "\nIt's still possible to install Slim3 on a local machine with PHP 5.5+ and deploy on server running PHP 5.4.\nIt's incompatible now(Slim 3.4.2), it uses ::class and it's a new feature in PHP 5.5\n. \n",
    "sunaryohadi": "Thank you Joe.\n. I have the same question ...\nI guess, it's must implemented on middleware \n```\n$app->add( function ($request, $response, $next)  {\n  // Before\n  // Check cached file, if exist --> send it and exit, \n// Skip to Next\n  $response = $next($request, $response);\n// After\n  // Get content for saving to file ...\n  $body = $response->getBody();\n  $body->rewind();\n  $html = $body->getContents();\n  $size = $body->getSize();\n  // save html to file ..\nreturn $response;\n});\n```\nI'm not so sure, but I have to add $body->rewind() to get the content.\n. ",
    "juliangut": "I fully agree with you, we shouldn't use a method that forces us to use ServiceProviderInterface, so I'm going to drop Interface and register method from PHP-DI bridge container and document the registration process.\nBut this brings me to another related topic, shouldn't we stop using ArrayAccess interface in access examples as it is coupled with how Pimple works? PHP-DI does not and I had it implemented in the bridge class to behave as Pimple does, I see it now as a bad idea.\nTaken from examples on documentation from slim/flash\n``` php\n$app->get('/foo', function ($req, $res, $args) {\n    // Set flash message for next request\n    $this['flash']->addMessage('Test', 'This is a message');\n// Redirect\nreturn $res->withStatus(302)->withHeader('Location', '/bar');\n\n});\n```\nIt should be clearly stated that the example is for Pimple container if you use ArrayAccess syntax to access it instead of ContainerInterface methods (get, has).\nOn the other hand as ContainerInterface does not provide a set mechanism, every container having its own will make the documentation harder as you have to document registration process to every kind of container, or ArrayAccess should be the default to be implemented\nI'm trying to make services truly container independent, don't know if I'm missing something\n. I see this is being removed really fast wow!\nI'm closing this and opening a new issue for the last topic I introduced in the conversation about container assignment\n. Ok :)\n. CallableResolver is used to resolve both middlewares and routes, so either bindTo is moved out from CallableResolver or it needs a parameter to be told what to bind to?\n. The difference is Slim3 ships with Pimple bundled in its core while Expressive does not bundle any container in particular, rather provide documentation for the three they like the most (I guess), Zend ServiceManager, Aura.DI and Pimple, meaning it is container unopinionated as you have to require the dependency specifically\n. @jaapverloop don't know why but so many sprintf one after another doesn't seem right to me\n. @akrabat I always avoid \"unused parameters/variables\" cause they are considered code smells.\nIn Slim docs (and Pimple's) it's stated that closures are passed container as parameter so that is clear to anyone registering services, so IMO there is no reason to keep these unused parameters in an internal closure just to act \"as documentaci\u00f3n\"\n. Sorry for that \"documentaci\u00f3n\" (documentation in spanish, easy one right?) Android spell checker!! \n. About getting services from container it doesn't matter if $c->get() or $c[] is used anytime it is consistent\n. @silentworks In my first comment on this I pointed to a line in the current Container implementation that is already using get() syntax, and it's working right now.\n. ArrayAccess is still a valid way to access services from Slim\\Container (although I'd always go for ContainerInterface::get). I just made container use consistent inside Slim\\Container.\n. On https://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L343 you see that any \\Exception is finally handled by 'errorHandler' service\nphp\n$errorHandler = $this->container->get('errorHandler');\n$response = $errorHandler($request, $response, $e);\nJust replace default error handler with your own and check for exception type in there\nphp\nif ($exception instanceof ForbiddenException) {\n    return $response->withStatus(403);\n}\n. Anyway you might check into verify user credentials early on a Middleware instead of in a route callback\n. The other day I answer a question on how to implement custom Exceptions in routes and how to automatically handle them. I feel this is something that should go on the migration guide, or at least on the docs\n. I agree with your point\n. I'm afraid this is something I forgot to move on #1558 ;(\n. Another thing, @pokmot comments that default is needed so that $output is not undefined BUT as $contentType is determied by an array_intersect $contentType will always have one of $this->knownContentTypes or \"text/html\" anyway. I'm not against default on switch statements of course but I consider it unnecessary when the possible values are all controlled\n. Muy thoughts exactly\n. There is one question I've been wondering for a while, maybe it's obvious but I don't get it. Why keeping the last slash on routes? Can't it be made optional by default?\nI find myself using square brackets for them all the time\nphp\n$app->get('/users[/]', function (...) {});\n. I have to say I'm a little confused about how this gets used in the end, I'm currently developing against RC2 and I'm trying to make my self up on how this PR would change my current routes, and it seems I'm not the only one.\n@silentworks the trailing slash on the group route seems off to me, in my mind it will be resolved by this url for example: GET .../users//10, I have to work against my own mind to understand there are no double slashes. In your table above the groups doesn't have trailing slashes.\nWouldn't this work?\nphp\n$app->group('/users', function () {\n    $this->get('/{id}', 'UserResource::load');\n});\nOn the other hand the use of an \"empty\" group to apply route middleware is really cool\n. Thanks @designermonkey, basic rules is what I felt was needed here, +1\n. I use a combination of both, Request attribute and Container registration depending on the kind of data I want to pass:\n- If it's meant for another middleware I use request attribute and remove it when used\n- If it's meant for the route handler (callback or class) I tend to use the container\nMainly because this way route classes dependencies can be clearly declare rather than just use something coming 'magically' from the request\n. I agree with @akrabat moving headers/body out of __invoke is unnecessary duplication\n. Try with\nphp\nreturn Carbon::instance($this->sailpnos{'date_of_joining'})->format('M j, Y');\n. $body->write returns number of bytes writen, not another modified body object\n. I'm not aware of other Pimple implementations sorry, how would this break them?\n. How about..\nphp\n$container = new Pimple\\Container(Slim\\DefaultServicesProvider::getDefaultServices());\nInstead of creating the object and then injecting the dependencies I prefere the constructor DI when possible. So to accomplish that here default services (in an array) are merged with provided services in $values array and then create the container with them. This avoids the if, if, if, ... list of statements that is present in DefaultServicesProvider::register\nIt doesn't add any extra feature or fixes anything but adds a little bit of clarity (IMO) Haven't even tested if it's faster or not.\nAnyway I understand that anyone used to Pimple that sees a *Provider class might expect it to work as you wrote\n. How would this affect slim/twig-view TwigExtension? It extracts the request from container to retrieve basePath, how would this be done instead?\n``` php\n// Register Twig View helper\n$container['view'] = function ($c) {\n    $view = new \\Slim\\Views\\Twig('path/to/templates', [\n        'cache' => 'path/to/cache'\n    ]);\n// Instantiate and add Slim specific extension\n$basePath = rtrim(str_ireplace('index.php', '', $c['request']->getUri()->getBasePath()), '/');\n$view->addExtension(new Slim\\Views\\TwigExtension($c['router'], $basePath));\n\nreturn $view;\n\n};\n```\n. > However, we need a new pattern as a deprecation notice will be raised.\nThat was what I was refering to :smile:, I see a deprecation notice when there was none as a way of affecting behavior\n. @mcaskill is right\nThere is no \"actual\" problem trying to be solved but the duplication of code, I've tried to abstract as much code as possible without changing the error rendering methods.\nAlso providing abstracted handlers allow developers to focus on their real impletentation and not care about commonalities such as writing to log or detecting content type.\nI didn't consider abstracting the render*Message methods on error handlers but now that I review it I think it should be done the same way writeToErrorLog was, in the end \\Error and \\Exception are both \\Throwable\n. Have a look here https://github.com/oscarotero/psr7-middlewares#trailingslash\n. I add to @RyanNerd question to @geggleto. How are PSR changing later this year? which ones?. Ahh\nIt's not a change in a PSR but the approval of the new middleware PSR (some projects are already using Interop version in preparation).\nI was misled to thinking some approved PSR was going to change and I was like: what?!? Thanks. I've been working on a quite similar solution for Slim3, but in my case I'm relying on exception status code instead of having different classes per HTTP status, i think this gives more flexibility for handling purposes. I'll find some time to benchmark it with and without code running after respond() call\nBut I feel, as you do, it won't make a difference unless you do something afterwards\nAnyway it could be a good addition for the end user, so they can know stuff can be done after Slim without penalizing response time. Oh, I forgot about this sorry. I'll try to put the benchmark together tomorrow. Check test project here: https://github.com/juliangut/slim-fastcgi_finish_request-benchmark\n\nIf you are not performing actions after Slim's run there is absolutely no difference using fastcgi_finish_request whatsoever\n\nIn case you're executing code after Slim's run (a sleep in my example to give a sense of a heavy task)\n\nwith fastcgi_finish_request => browser receives content as if it weren't there, even though the process is still running on server\nwithout fastcgi_finish_request => browser is stalled waiting for server process to finish and then it gets the content\n\nWhat I get from this is that if fastcgi_finish_request is available (only through fastcgi of course) it should be definitely used: it doesn't penalize you if you're not executing code beyond Slim's run but in case you are response is way faster\nPlease point out things I haven't considered. FWIW I'm used to and like LIFO. In here ContainerInterface was being used instead of ArrayAccess\nI just unify the way the container is being used on the rest of the callbacks to this syntax\nShould I replace this line to use ArrayAccess then?\n. What is the use of this method?\n. why check $contentType in the switch and then reassign it to the same value?.\nphp\nswitch ($contentType) {\n    case 'text/html':\n        $contentType = 'text/html';\n}\nIt was previously discussed in another issue that switch's default is not needed; that line was there because of that old default\n. Wouldn't it be better to code against ContainerInterface instead\nAdditionally check for services with that interface instead of ArrayAccess?\nphp\nif (!$container->has('environment')) {\n}\n. ",
    "EgorGruzdev": "Okay, I wanted to show that the use of \"callable\" leads to an error in the future (although not critical).\nI am ready to correct all of the code which uses this interface, if it's interesting.\nIn my project, I made this inetfeys the scope of the framework.\n. When the class is being Route on line 312 or 316 is a call to a function of class building InvocationStrategyInterface, it provides php depricated on callable reporting that function should be static if it is a function of class.\nExample:\n```\nnamespace App\\DependencyInjection;\nuse Interop\\Container\\ContainerInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nclass FoundHandler implements InvocationStrategyInterface\n{\n    / @var \\DI\\Container */\n    protected $container;\n    public function __construct(ContainerInterface $container){\n        $this->container = $container;\n    }\n    /\n     * Invoke a route callable.\n     \n     * @param callable $callable The callable to invoke using the strategy.\n     * @param ServerRequestInterface $request The request object.\n     * @param ResponseInterface $response The response object.\n     * @param array $routeArguments The route's placholder arguments\n     \n     * @return ResponseInterface|string The response from the callable.\n     */\n    public function __invoke(callable $callable, ServerRequestInterface $request, ResponseInterface $response, array $routeArguments)\n    {\n        if(is_string($callable) && strpos($callable, '::') !== false){\n            $callable = preg_split('/::/', $callable, 2);\n        }\n    //TODO \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Request \u0438 Response, \u0442.\u043a. \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b subRequest\n    $args = array(\n        'request' => $request,\n        'response' => $response\n    );\n\n    $args = array_replace($args, $routeArguments);\n\n    return $this->container->call($callable, $args);\n}\n\n}\n```\nError:\nStrict Standards:  Non-static method App\\Controller\\Test::hotelList() should not be called statically in C:\\OpenServer\\domains\\hotelengine\\app\\DependencyInjection\\FoundHandler.php on line 34\nP.S. error_reporting = E_ALL\n. I guess I do not understand something, but my calls have the form:\n$app->group('/api/b2b/v1', function () use ($app) {\n    $app->group('/hotel', function () use ($app) {\n        $app->map(['GET', 'POST'], '/list[/{id:\\d+}]', [\\App\\Controller\\Test::class, 'hotelList']);\n        $app->map(['GET', 'POST'], '/rates', [\\App\\Controller\\Test::class, 'hotelRates']);\n    });\n});\n. Thank you very much, I like the idea to make $callable string|array|callable.\n. Thank you very much, so I did.\n```\nnamespace App\\DependencyInjection;\nuse RuntimeException;\nuse Interop\\Container\\ContainerInterface;\nuse Slim\\Interfaces\\CallableResolverInterface;\nfinal class CallableResolver implements CallableResolverInterface\n{\n/**\n * @var \\DI\\Container\n */\nprivate $container;\n\n/**\n * @var string\n */\nprivate $toResolve;\n\n/**\n * @var callable\n */\nprivate $resolved;\n\n/**\n * @param ContainerInterface $container\n * @param string             $toResolve\n */\npublic function __construct(ContainerInterface $container, $toResolve = null)\n{\n    $this->toResolve = $toResolve;\n    $this->container = $container;\n}\n\n\n/**\n * Receive a string that is to be resolved to a callable\n *\n * @param  string $toResolve\n */\npublic function setToResolve($toResolve)\n{\n    $this->toResolve = $toResolve;\n}\n\n/**\n * Resolve toResolve into a closure that that the router can dispatch.\n *\n * If toResolve is of the format 'class:method', then try to extract 'class'\n * from the container otherwise instantiate it and then dispatch 'method'.\n *\n * @return \\Closure\n *\n * @throws RuntimeException if the callable does not exist\n * @throws RuntimeException if the callable is not resolvable\n */\nprivate function resolve()\n{\n    // if it's callable, then it's already resolved\n    if (is_callable($this->toResolve)) {\n        $this->resolved = $this->toResolve;\n\n        // check for slim callable as \"class:method\"\n    } elseif (is_string($this->toResolve)) {\n        $callable_pattern = '!^([^\\:]+)\\:([a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)$!';\n        if (preg_match($callable_pattern, $this->toResolve, $matches)) {\n            $class = $matches[1];\n            $method = $matches[2];\n\n            if ($this->container->has($class)) {\n                $this->resolved = [$this->container->get($class), $method];\n            } else {\n                if (!class_exists($class)) {\n                    throw new RuntimeException(sprintf('Callable %s does not exist', $class));\n                }\n                $this->resolved = [$this->container->get($class), $method];\n            }\n            if (!is_callable($this->resolved)) {\n                throw new RuntimeException(sprintf('%s is not resolvable', $this->toResolve));\n            }\n        } else {\n            throw new RuntimeException(sprintf('%s is not resolvable', $this->toResolve));\n        }\n    }\n}\n\n/**\n * Invoke the resolved callable.\n *\n * @return \\Psr\\Http\\Message\\ResponseInterface\n */\npublic function __invoke()\n{\n    if (!isset($this->resolved)) {\n        $this->resolve();\n    }\n\n    $args =  func_get_args();\n\n    return  $this->container->call($this->resolved, ['request' => $args[0], 'response' => $args[1]] + $args[2]);\n}\n\n}\n```\n. ",
    "neilmillard": "I would expect this to work. I'm missing something obvious maybe?\n``` php\n$app->add( function (\\Slim\\Http\\Request $request, \\Slim\\Http\\Response $response, callable $next)use($container){\n    $basePath = $request->getUri()->getBasePath();\n    $uri = $request->getUri()->withBasePath(strtolower($basePath));\n    $newreq = $request->withUri($uri);\n    $response = $next($newreq,$response);\nreturn $response;\n\n});\n``\n. yes, the issue I have is Slim running from a subdirectory and for some reason (IIS setup) it is returning 404 if the case is used. \n. This is on a windows server, so in theory the os is case insensitive.\nThe public directory is showing as 'Apps' and the url '/Apps/' or '/apps/' returns okay.\nThe base route '/' works regardless of what case is used in the url;\nwhereas when I specify a route/Apps/oncallgives the Slim page not found 404 (not the IIS one) and/apps/oncallworks.\nSo it is getting to the index.php for Slim. but the router is not able to match the route. The Basepath is not specified in the routes.\nThe 404 function, thevar_dump($request->getUri()->getBasePath());gives a blank string.\non an active route the string is as I would expect. (all lowercase)\nDoes this code need to be invoked before$route->finalize()`\nI am not certain when the valid routes are checked..\n. Would completely agree with you but,\nfilepath=e:\\Apps\\index.php\nuri=localhost/Apps/profile - fails\nuri=localhost/apps/profile - works.\nphp\n$app->get('/profile', 'App\\Action\\ProfileAction:dispatch');\n. yeah, real odd. but in your case is it getting to the Slim app? or the webserver returning 404\n. so Slim should not care about the case of the baseurl, that is for the webserver to worry about. ? \nCan we make it case insensitive?\n. Yes, that fixed it\n. Thanks guys\n. ",
    "hardik99": "Is it required to use form bcoz i direct pass request from ios ?\nAnd i don't need it ....\n. i have check but it only returns last value ...\n. can you provide sample code for that how can i do this ?\n. no ...  i am testing using postman rest client ....\n. \n\n. ok ... it works ... thanks ... \nHow can i upload multiple image using slim ?\n. then how can I ?\n. \n. how can i upload files ?\n. ",
    "petitchevalroux": "@JoeBengalen Thank you for your quick answer.\nOutside of Slim, updating error_reporting does not modify script behaviour\nE_ERROR => halt script\nE_WARNING => does not halt the script\nand that's it.\nI think this may be due to Slim::handleErrors\n. Totally agree with you, but error_reporting should just interfere with error displaying and logging, and imho not changing script behavior.\n. @akrabat can you explain me how to do that ?\nbtw the problem occured with E_USER_NOTICE too if it's is in error_reporting.\n. Overloading errorHandler does not change anything. handleErrors trigger ErrorException stopping the call process\n. @JoeBengalen this what I said before, removing E_WARNING from error_reporting does the job ;)\n@akrabat I was reading the PrettyExceptions middleware in order to write my own error middleware ;)\nDespite i fixed this for my usage, don't you think it's a major issue ?\n. ok and is slim 3 ready for \"end user\" ?\n. Nice, i will give it a try.\nBTW, thank you for your help ;)\n. ",
    "scones": "For the next poor soul landing here and getting the advice to use the deeply nested -thus unreadable- routes object:\n$routes = array_reduce($this->app->getContainer()->get('router')->getRoutes(), function ($target, $route) {\n            $target[$route->getPattern()] = [\n                'methods' => json_encode($route->getMethods()),\n                'callable' => $route->getCallable(),\n                'middlewares' => json_encode($route->getMiddleware()),\n                'pattern' => $route->getPattern(),\n            ];\n            return $target;\n        }, []);\n        die(print_r($routes, true));. ",
    "mrcorex": "I am trying to develop a tool/builder/documentor, which, in large webservice-api's, will take the pain out of many things, like field-handling, query-limitation, versioning, etc. I want to base this on Slim 3. I am trying to develop 2 composer-packages (slimservice and slimbuilder), both PSR4.\nI am not using full namespace, because the service-handling was all about the class-name. I registered an autoloader which would turn i.e. \"SystemKeysService\" into \"/components/system/services/keys/SystemKeysService.php\" and \"SystemKeysTest\" into \"/components/system/tests/keys/SystemKeysTest.php\" and so on.\nI might change this slightly, because I want to add a service-layer as well, but you get the idea....\narray('SystemKeysService', 'run') is a documented way of doing it and is parseable to \"call_user_func\". The suggestion was to do a \"array(new SystemKeysService(), 'run')\" but that would create an instance of the class, when I register it. I do not want that. If I do the other thing \"array('SystemKeysService', 'run')\", it will make the instance when it is called and not before. A kind of lazy loading....\nI know that this was a long text, and some of it might not be interesting, but it should give you an idea of what I am trying to accomplish.\n. Because it is a path and / is a separator ? I am not sure I understand your question?\nReason for asking is that SOME browsers automatically adds the / after url. Some dont. And if people are not aware of this when connecting to a service, then this can create confusion when debug'ing.\nI am trying to determine if it is a design-\"bug\" or if I need to do 2 x $app->get() on the same path every time to be sure that I do not create unnecessary work for myself.\n. [/] is a good solution for me. I understand the difference of with and without the slash, but on a framework with web-services, it is a pain.\nThanks for answer.\n. ",
    "ppetermann": "why would it be the same?\n. Somehow your issue is missing a description of your actual problem,\nand the link you provided seems to forward me to a chinese(?) android store?\n. While I agree that it is kind of annoying to setup the defaults if you add your own container (as i did), and a benefit of your solution is that you don't have to update the defaults in your projects if those change, i feel that this is a bad idea.\nThe job of the container is to solve all dependencies, having two containers makes it confusing to the user, as he will expect to replace even the default dependencies through the container, and as it means for a user that he will have to look into two different places to find where a dependency is coming from.\nIn the end what this is causing is a duplication of logic.\nIn my opinion this gets even worse with the idea that a Class is used as configuration for those services, hence a change of configuration ends up being a change of logic.\nI think a much better solution would be to provide an aid for people to setup their containers with the default values (for example a class that returns an array with key / default value combinations).\nhttps://gist.github.com/ppetermann/7d8f6690a74b6e8e9e0b\n. uhm, doesn't that then completely miss the point?\n. @juliangut not sure how that makes a difference? being able to replace the container and having the documentation seems to enable everyone to go his own way (including myself) \n. can you be a bit more specific, on whats your idea is?\n. Ok, let me ask again: can you be a bit more specific on what your idea is?\nWhat is the factory supposed to do exactly, and what is it supposed to be used for?\nbecause in the end the stuff in the constructor is what is needed, the environment is not hard required by the request itself, and there is a conveniance method that works as a factory for creating it fromEnvironment?\n. not sure how thats an improvement, and i doubt thats what he means ;)\n2015-09-21 16:45 GMT+02:00 Martijn Wennink notifications@github.com:\n\nI think it would just be moving the Request::createFromEnvironment to\nsomething like Environment::createRequest(). Is that what you mean?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/issues/1500#issuecomment-142003570.\n\n\nPeter Petermann\nProtonMail: ppetermann@protonmail.com (encrypted / based in .ch)\nEmail: ppetermann80@gmail.com - get my public PGP key from SKS Keyservers\nPGP Key:\nhttp://pool.sks-keyservers.net:11371/pks/lookup?op=get&search=0x0E6DBD675836A5C7\n. First of all: thats now how you should separate things, \na good example on how to do this would be in akrabats skeleton: https://github.com/akrabat/slim3-skeleton\nSecond: you are missing a return - the return within your required file marks the return value of the require_once, hence you have to \nreturn require_once __DIR__ . '/hello.php';\notherwise you will return the original $response object, and not the new instance created by $response->withHeader(...)\nso, not a bug in Slim.\n. Ok, quick look through the tests:\nthe most common one is undefined method for registerMediaTypeParser. This method is called from within the constructor of the request object, if you replace the request object, it won't be called either (thats the thing with commenting out methods, it doesn't have the same effect, as you'd have to comment out internal usage of 'em as well)\nthen theres a lot where the tests for response/request/uri test their methods, which is absolutely fine, and it is correct that they are failing if the methods are commented out. other psr-7 implementations should have their own tests (usually in the lib they come from)\nThen there is a broken Test, as the test shouldn't be calling write, but use the PSR interface.\n21) Slim\\Tests\\AppTest::testFinalize\nPHPUnit_Framework_Exception: Fatal error: Call to undefined method Slim\\Http\\Response::write() in C:\\Users\\Glenn\\Documents\\GitHub\\Slim\\tests\\AppTest.php on line 850\nand the last oneshould have been fixed a while ago: https://github.com/slimphp/Slim/issues/1420\nnot sure if it resurfaced (as your ticket is newer than the fix), or you used an old version when you run the tests.\n23) Slim\\Tests\\Handlers\\NotFoundTest::testNotFound with data set #2 ('text/html', '')\nPHPUnit_Framework_Exception: Fatal error: Call to undefined method Slim\\Http\\Uri::getBasePath() in C:\\Users\\Glenn\\Documents\\GitHub\\Slim\\Slim\\Http\\Uri.php on line 772\n. i couldn't have done the slim-within-my-framework-with-react-php stunt if it didn't work ;)\n. you mean so people use app as a service locator?\n. +1 on geggleto. public is called public, because it should contain all files exposed to public, as its the projects document root.\n. final classes can not be extended. \nBut you can replace the container used - see documentation\nhttp://www.slimframework.com/docs/concepts/di.html\n. you can easy replace the requests, but you might want to consider another approach:\ncreate a middleware which determines the referer or servername or...\nthen add it as an attribute to the request (see http://www.php-fig.org/psr/psr-7/)\n. Don't!\nthis patch doesn't improve anything, but means you can't just plugin interop- compliant containers.\n. Decorating would work, but it would mean to teach users to access the mandatory slim stuff in a different way then everything else in the container. \nIMHO the @property-read hints shouldn't have been for the container in the first place, the correct way to access those values is\n``` php\n/ @var \\Slim\\Interfaces\\RouterInterface $router /\n$router = $container->get('router');\n```\nas this is using the interop interface and gives you completion on $router.\n. 1) I don't see how that is a slim issue.\n2) install phpdocumentor globally, not as a dependency of your project, your code does not depend on it.\n. HTTP Location is valid with:\n201 - to give the location of a newly created resource\n202 - accepted, when its still being processed\n3xx - for redirection purposes.\nit shouldn't be send with 200.\n. @adambro: use 3xx status code then.\n. what sort of client is that? the 300's are pretty common status codes\n. not sure why, but whoever added the method build it so it accepts a $status as second parameter. Have you tried:\n$newResponse = $response->withJson([\n            'error'=>'Unknown Entity',\n            'code'=>404\n        ], 400);\n. well if you go all typehint in the example, it probably makes sense to use full qualified namespaces..\n. that won't work.\nthe slim container uses a(ny) container that implements the container-interop interface\nthe interface does not contain a \"set\", that is left to the single container implementations\nthus there is no way the slim container could do that without limiting the containers \nwhich can be used.\n. I had a look at the code, and my personal conclusion is that there is something really wrong. \na)  slims container class should use the interoperability container, not extend it. (and for some weird reason I assumed that it was refactored to that way a while ago.)  That would allow the added methods such as __get to be used without breaking everything when replacing the interoperability container. \nb) using the array access is something that is/should only be done when setting up the container. And that is only when using a container that needs to be configured that way. Other Containers than pimple don't necessarily work the same way, and that is fine. \nc) all access during the run time (after the setup)  should be done through methods slims container provides,where slims container should use the interoperability interface to do so. As currently that's not slims container works, working with slims container in your application should always use the interfaces methods,otherwise stuff will break when exchanging the container. This also means in the current state of the container, the magic methods that are there shouldn't be. \n. ",
    "kadimi": "Conventionally speaking, I believe that test/ would point to a directory or listing of tests whereas test would point to a single test, so it makes sense to be able to handle them differently with the framework.\n. ",
    "shamotj": "I check $request->getHeaders(). I wanted to use getHeader('HTTP_REFERER').\nOn Aug 31, 2015 3:42 PM, \"Rob Allen\" notifications@github.com wrote:\n\nHow are you reading the referrer?\n\u2014\nReply to this email directly or view it on GitHub.\n. I tried simple action like this:\n\n``` php\npublic function test(Request $request, Response $response, $args) {\n     return $response->withRedirect('/admin/user/login');\n}\npublic function login(Request $request, Response $response, $args) {\n    var_dump($request->getHeaders());die();\n}\n```\nAnd there is no REFERER header. Can you please confirm you have it there?\n. But withRedirect returns HTTP 302 response with Location in header. Browser then makes new request with that Location. And if it doesn't create Referer, what is the best way to get original location?\n. That will work. I must Google for some best practice for this. Anyway I think this issue is well answered and should be closed. Thanks for replies.\n. My bad, I had error in my NGINX config. I had /index.php?$is_args$args instead of /index.php$is_args$args.\n. ",
    "wouterds": "I'm refering Slim 2 and I mean conditions like so:\n$app->get('/verify/:code', 'Controller:method')->conditions(['code' => '[a-zA-Z]{7}']);\n. ",
    "Abhinav1217": "No,  I copy pasted wrongly here,  Actually,  when It gave 404 error on 4 variables, I decided to replace id and type with just image, and split its extension to get id and type.  I forgot to remove $image when I wrote here. My bad, I will update the code.  But error is there , on 3 and more variable, I need to add a trailing slash or else I get a 404. I can replicate it as many time as you ask. \nMy System\nFedora 22 64bit,\nNginx, php-fpm, (all updated)\n. What server are you using,  I copied the your code and I have to add trailing slash to make it work.\nI am using Nginx with php-fpm.  System is updated.\nAbout $app->run(); I missed it copying.  This was test.php file i keep in my active project to quickly test some random logic or code snippet.  So i didn't  just copied all of it. Just the part I thought was relevant to post here.\n. I ended up using get parameters for my project due to time constraint. I have kept the test app aside. This is what I can gather on my linux system and on my friends windows 8.1 system.  I am using the Apache rewrite rules and Nginx server config from the slim docs itself. http://docs.slimframework.com/routing/rewrite/ \nNginx :  trailing slash is required for more than 3 rest attributes.\nApache : Trailing slash is required for more than 3 rest attributes.\nIt was same on my ubuntu machine also.\nWindows : Apache (AMPPS),  Trailing slash is required after 3 rest attributes.  \nOnly thing I changed in php.ini, was to enable errors. Apache and nginx were what came default.\nI can't think of any other configuration which might cause this. \nLet us remove server from equation.  Tomorrow I will check  if this happens on some other restful micro-framework.  This should confirm server's involvement on this.\n. ok.  I am out of reasons here now. There might be something wrong in my code or my nginx config.  Here is my Nginx config if someone can point something to me. I am open to all suggestions. \n```\nCommon Resources\nserver {\n  listen 80;\n  server_name static.CouponApna.local;\n  root /var/www/CouponApna/Resource;\n          location / {\n              index index.php;\n              try_files $uri $uri/ /index.php?$args;\n          }\n          location ~ \\.php/?(.*)$ {\n              fastcgi_connect_timeout 3s;     # default of 60s is just too long\n              fastcgi_read_timeout 10s;       # default of 60s is just too long\n              fastcgi_pass unix:/run/php-fpm/www.sock;\n              fastcgi_index  index.php;\n              include fastcgi_params;\n              fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n          }\n          location ~* ^.+.(jpg|jpeg|svg|gif|css|png|js|ico|xml)$ {\n            access_log        off;\n            expires           360d;\n        }\n        location ~ /\\.ht {\n            deny  all;\n        }\n\n}\n```\n. ",
    "chantron": "I'm thinking I jumped the gun on this. If so, my bad! \n. Gatdang! I read that over and over again and didn't see it under settings until just now. I'm closing this!\n. ",
    "rrubio": "thanks guys! :+1: \n. ",
    "vinita90": "how can i test my api except doing request from form.\n. ",
    "danopz": "Try to ask such questions on Stackoverflow.\n. php\n$app->get('/foo', function ($request, $response, $args) {\n    //$this is App\n});\n. #1626\nJust register them $app->get('/user[/]', ...\n. @edsgerlin #2421 . May have a look at https://github.com/slimphp/Slim-HttpCache\n. #1364 + #1749 \n. This should be resolved by #2229 . Looks like you are looking for this instead of SlimFramework for PHP.\n. Looks like this is already fixed in Slim-Http. @Rotzbua I'm all for PHP7, too, but your statement is difficult. Of course some should start new projects with PHP7, but what if you are limited because of your company, that does just not have accepted new versions, or your hosting provider?. As we want to build Slim 4 on PSR-15, which now requires PHP 7 (php-fig/fig-standards#950), we will need to require PHP 7 as well. So I would like to reopen the 5.6 vs 7 discussion.. Could you try following, I added a similar matrix into another package\n```\nphp:\n  - 5.5\n  - 5.6\n  - 7.0\n  - 7.1\nmatrix:\n  include:\n    - php: hhvm\n      dist: trusty\n```. Should be user-land IMHO.. This is not related to Slim.. You try to save booked_by=14. The Exception says that you don't have User#14 - so you cannot set this into the foreign key.. booked_by is missing in the query, maybe because of the type? You post a string, but it should be an int, i think.. Would you may directly backport #2229?. Done. ref #2175 . Duplicate + BC break for Slim 3: #2000 . > I would also delete 418 => 'I\\'m a teapot' since wasn't more than an April fools which is not expected to be implemented.\nWe cannot just remove it as it would be a BC break.\nAlso http://save418.com/. > @Dmitry-Kucher I would agree with HTTP_CONTINUE, but only for technical reasons (PHP < 7.0). The rest should be without HTTP_ to make it more consistent.\nNo, all should be either with or without the HTTP prefix, do not mix them.. For me there are the interface referenced, so you should be able to use existing PSR7 requests.\nhttps://github.com/slimphp/Slim/blob/dcfa982165d6583305f83b7688e37cee5e34a8bc/Slim/App.php#L497\nOr is it some custom class?. Slim is correct in type hinting the Interface. The question to me is why are you appending a factory after initialisation? You should define everything on startup:\nphp\n$app = new App([\n    'errorHandler' => function(ContainerInterface $c){}\n]);. You could probably just inject it with something like this:\nphp\n$app = new App([\n'errorHandler' => function(ContainerInterface $container){\n        return new ErrorHandler($container);\n    }\n);. withJson() is just implemented in the Slim response for convenience and has to be implemented yourself in some way when you want to use a different PSR7 implementation.\nThats the reason for this note on the doc-block:\nhttps://github.com/slimphp/Slim/blob/a5a2da92d24c2c30384ff89d90008327f9040cb8/Slim/Http/Response.php#L341. We should not add something like this. It is again some array magic which we have to communicate how this is working, we have to validate the array to give descriptive errors.\nAlso it is just fine to call $app->map(\u2026)->setName($name)->add($mw)->add($mw2).\nSomething like managing routes per config should either be an additional module or directly application logic.. This PR is for Slim4 so BC is implied :wink: . Why do you want multiple return statements?. Could be a potential BC break?. Should be nearly nothing as there is no code between the if and return.. PHP 5 vs PHP 7 #2175 . This is a BC break as people may already use 2.0 as HTTP version, I would just have added 2 instead of removing the .0 part.. Should probably done in an extra PR as this one is just for PHP7. I feel it would be easier to understand if you would do\n```php\nif (!isset($this->bodyParsers[$mediaType]) {\n    $mediaType = 'doSplitTheType';\n}\nif (isset($this->bodyParsers[$mediaType]) {\n    //handle\n}\n```. ",
    "jwyuen": "Hmm I've tried all of the suggestions and the class is still not getting overridden.  I'm using Slim 3.0.0-beta2 fwiw\n. Nevermind, it works on the latest dev commit on the 3.x-dev branch.... (commit a1427aaea68bf490be8481921ec4a07cf2279949)\n. @codeguy Does this mean trailing slashes are not explicitly supported unless defined by the user?  E.g. The two routes below are equivalent\n/user\n/user/\n. @akrabat Ah I see.  Thanks!\n. ",
    "stevenwadejr": "Ok, the CallableResolver isn't a great example, but I think the container should not be final. One could easily implement a new instance of the ContainerInterface, but then you'd have to re-implement all of the configuration setup by Slim\\Container. Without final, one could easily just extend the default container and add some functionality without needing to re-setup the work that Slim has already done.\nWhat's the benefit of declaring final on an open source framework (no sarcasm).\n. @silentworks, specifically I wanted to add a make method, similar to Laravel's, to the container. I was going to play off of your blog post and ADR and have Actions that had dependencies automatically resolved and injected when resolved via the router. The idea was to just extend and add that functionality to the container rather than having to bootstrap the service bindings again. \nI'm sure there are many other uses for extending the container rather than creating a new one. I would just think having final on such a minimalistic framework would limit users. Just an opinion though. Obviously there are work arounds, but just wanted to throw my 2 cents in.\n. I know this is closed and merged, but what about also checking to make sure the class actually does have an __invoke method?\nif (!class_exists($class) || !(new \\ReflectionClass($class))->hasMethod('__invoke')) {\n    throw new RuntimeException(sprintf('Callable %s does not exist', $class));\n}\n. ",
    "npx": "Since you are linking to the RC1 tag from the website:\nThe RC1 tag still has the old readme\n. ",
    "SergeyTsalkov": "I'm using Slim 2.6.2, the latest! I guess this is changing with Slim 3\ncoming out soon?\nOn Sun, Sep 27, 2015 at 2:47 AM, John Porter notifications@github.com\nwrote:\n\nWhich version of Slim are you using?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/issues/1502#issuecomment-143533507.\n. \n",
    "lautiamkok": "I see! thank you very much. I was migrating from slim 2 to 3. I didn't have to use return in slim 2. thanks!\n. Got it fixed.\n. @sunaryohadi thank you very much for the help!\n. My simplest solution:\n```\n// Routes:\n$app->get('/', function (Request $request, Response $response, array $args) {\n// Define the path and name of cached file.\n$cachefile = 'cache/'.date('M-d-Y').'.php';\n\n// Define how long we want to keep the file in seconds. I set mine to 1 hour.\n$cachetime = 3600;\n\n// Before\n// Check if the cached file is still fresh. If it is, serve it up and exit.\nif (file_exists($cachefile) && time() - $cachetime < filemtime($cachefile)) {\n    include($cachefile);\n    echo '<!-- cached page - '.date('l jS \\of F Y h:i:s A', filemtime($cachefile)) . ' -->';\n    exit;\n}\n\n$response->getBody()->write('\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>Page to Cache</title>\n        </head>\n        <body>\n            Hello, World\n        </body>\n    </html>\n');\n\n// Save html to file ...\n// We're done! Save the cached content to a file\n$fp = fopen($cachefile, 'w');\nfwrite($fp, $response->getBody());\nfclose($fp);\n\nreturn $response;\n\n});\n```\n. ",
    "bradynpoulsen": "I think I've figured out a solution to my problem; however, I still would like to know how a middleware would access router parameters or what people think on that being poor middleware design\nFor now I'm just doing the __call() magic method on my controller and making my show action private. Something like:\nphp\n$app->group('/users', function () {\n    $controller = new MyController();\n    $this->get('/', [$controller, 'index']);\n    $this->get('/{id}', [$controller, 'show']);\n});\n``` php\nclass MyController\n{\n    public function __call($name, array $arguments)\n    {\n        list($request, $response, $args) = $arguments;\n        $user = $userMapper->findById($args['id']);\n        if ($user) {\n            $request = $request->withAttribute('user', $user);\n            return call_user_func([$this, $name], $request, $response, $args);\n        } else {\n            // $response now contains 404 response, don't call method\n            return $response;\n        }\n    }\nprivate function show(ServerRequestInterface $request, ResponseInterface $response, array $args)\n{\n    $user = $request->getAttribute('user');  // already loaded by middleware\n    return $response->getBody()->write(json_encode($user)); // varies, but for example\n}\n\n}\n``\n. As a side note, this option does not work for application middleware\n. Is there a timeline for 3.1 to be released? It's kind of a bummer I can't test againstSlim\\Container` until it is released\n. ",
    "kevinmlong": "Agree with @bradynpoulsen that it doesn't work for middleware. Would also be able to access route arguments from within middleware\n. @akrabat - this does solve the problem. Thanks!\n. @akrabat - I sent the other comment to quickly. I suppose I deleted it after you saw it. Thanks!\nA related issue ....\nIn my middleware, I am calling\nphp\n$next($request,$response);\n-- doing stuff --\nAs it goes through the routing methods, it returns a response. In some cases it changes the status to a different code (e.g. 400) like below:\nphp\n$newResponse = $this->response->withStatus(404)\n                                     ->withHeader('Content-Type', 'application/json')\n                                     ->write(...stuff...);\nreturn $newResponse;\nwhen the application returns to the middleware, the response object has a code of 200. When returned, it has the right body, but the wrong status. Thoughts?\n. It's in the route method\nphp\n$app->get('path to route', function ($request, $response, $args) {\n    do some stuff\n    $newResponse = $this->response->withStatus(404)\n                                     ->withHeader('Content-Type', 'application/json')\n                                     ->write(...stuff...);\nreturn $newResponse;\n}\nThe code then returns to the middleware. The code response here is 200 instead of 404. If I return the response, I get the right body from the write(..stuff..) but the code is not 404.\n. @silentworks - that doesn't work. it still returns to the middleware with a 200 code.\n. @silentworks - the response object is getting updated, since the body is being updated correctly.\n. @silentworks - I figured it out. Need to change the middleware to:\nphp\npublic function __invoke($request, $response, $next){\n// do some stuff\n$newResponse = $next($request,$response);\n// do more stuff\nreturn $newResponse;\n}\n. @geggleto - your example of the short circuit doesn't cause the Middleware 3 to be called though. Essentially what I'm looking for is something like:\n```php\n// MIDDLEWARE 2\npublic function __invoke($request, $response, $previous, $next){     \n      if (cond) {\n         // carry-on down the path - MIDDLEWARE 1\n         $res = $next($req, $res);\n         return $res;\n      }\n  if (retreat) {\n      //Go back to MIDDLEWARE 3\n      return $previous($req, $res);\n  }\n\n}\n```. ",
    "HarshVarshney": "Add following line in configuration\n$config['determineRouteBeforeAppMiddleware'] = true;\nIn middleware \n$route = $request->getAttribute('route');\n$arguments = $route->getArguments();\nprint_r($arguments);\n. ",
    "straube": "It's not possible to catch fatal errors, but it's possible to log them using register_shutdown_function. Some frameworks uses the shutdown to handle this kind of errors. Symfony, for example, has a special handler for it: ErrorHandler.php\n. ",
    "RyanNerd": "I've been using Slim 3 with the PHP 7 RC 4 run-time and have not run into any issues other than PHP's awful error handling.\nPHP 7 was supposed to implement a Throwable and Error interface that allowed a Try...Catch to work with fatal errors (see: https://wiki.php.net/rfc/throwable-interface).\nAt first I thought Slim was freezing up on handling these, but I think this is a PHP 7 issue.\n. The problem with fatal errors is that the application is in a faulted state. \nSo if you were to include Slim code to try to send a JSON payload back to the client or even HTML it may not work and can throw more errors. \nEven wrapping a Slim Response Send in try...catch when the application is in a faulted state will not prevent an error from being thrown and then the error from the error from the error recursion situation can happen. One of the reasons that the Slim framework should avoid including this from their base code.\nAnyway, here's an example of capturing fatal errors in PHP:\n```\n<?php\nglobal $fatality;\nclass Fatality\n{\n    public function __construct()\n    {\n        register_shutdown_function( [$this, \"fatal_handler\"]);\n    }\npublic function fatal_handler()\n{\n    // Determine if there was an error and that is why we are about to exit.\n    $error = error_get_last();\n\n    // If there was an error then $error will be an array, otherwise null.\n    if ($error !== NULL)\n    {\n        echo 'An unrecoverable error has occurred' . PHP_EOL;\n        echo 'Error code: ' . (string)$error['type'] . PHP_EOL;\n        echo 'Message: ' . $error['message'] . PHP_EOL;\n        echo 'File: ' . $error['file'] . PHP_EOL;\n        echo 'Line: ' . (string)$error['line'] . PHP_EOL;\n        exit($error['type']); # Exit with the error type code.\n    }\n}\n\n}\n$fatality = new Fatality();\n```\n. You should have gotten a 404 error. Since your URI path of /video-site/public/test isn't a registered route.\nYour code registers a get path of '/test' not '/video-site'\nPHP\n$app->get('/test', function ($req, $res, $args = []) {\n   print $req->getRequestTarget();\n});\nOnly routes that start with /test would be captured with the getRequestTarget() logic.\n. Assuming you are using Slim V3  (Slim V2 is only accepting security updates)\nYou can already do this by overriding the error class via the Pimple container:\nPHP\n    // $sc = Slim DI Container (Pimple)\n    $sc = $app->getContainer();\n    unset($sc['errorHandler']);\n    $sc['errorHandler'] = function() {new MyErrorHandler .... };\n. @pokmot I see now. Sorry I misunderstood your intent.\n. Please, in the name of sanity make PHP 7+ a requirement for Slim 4.0. I'm a user of and a contributor to Slim. The benefits of strict typing alone are self-evident plus the other benefits of version 7 are many. \nAs a user of the framework, I've had to step through the framework code on multiple occasions to make sure what I was having issues with was my own code and not a flaw in the framework. As an example, PHP 7 has type declarations so expected value types are returned from a function and this helps with the concept of least astonishment. If a function argument is expecting a bool type and a string with the word 'guacamole' is passed instead the issue is immediately obvious -- prior versions instead waste my time forcing me to chase duck typing issues.\nIf you go even further and insist on 7.1+ you get:\n- Scoped constants (which perform better than static declarations)\n- Nullable return types\n- Negative string offsets\n- The void return type\n- more\nAnd for any PHP dev that may have been living in a cave for the past two years here are the new features of 7.0:\n- Scalar type hints\n- Return type declarations\n- Anonymous classes\n- The Closure::call() method\n- Generator delegation\n- Generator return expressions\n- The null coalesce operator\n- The space ship operator\n- Throwables\n- Level support for the dirname() function\n- The Integer division function\n- Uniform variable syntax\n. @Sam-Burns good points! I'd like to see Slim 3 become the LTS version (getting security patches and minor bug fixes) with Slim 4 becoming the next stable release that requires the current stable release of PHP.\nNote: Xdebug is one of the first extensions to start exclusively targeting 7+ (only fixing minor bugs or security patches in older versions of the extension). What I'm saying is that Slim would not be alone in requiring PHP 7+.. @geggleto I was unaware of the PSR standards changing and this being the underpinnings of why Slim 4 is being created. Has the specification for the changes been solidified and published? Is this specifically for PSR-7 or ALL PSR standards are getting overhauled?\nAlso, I'm not sure why a change in PSR standards would prevent PHP 7 as a requirement?!?. Also, for the record, I am supporting Slim 2 and Slim 3. My group v1 routes to Slim 2 and group v2 routes to Slim 3 (We deploy Slim 3 which has backward compatibility to Slim 2). We would need to do an in-place full upgrade and deprecate groups v1/v2 if Slim 4 was to not be backward compatible with previous versions.\nI'm okay with doing this if PHP 7 is required -- as the gains from this version of PHP outweigh the pain points for upgrading for me personally -- (I'm a bit grumpy about this because of the time I've spent stepping through the Slim framework trying to determine where things are breaking down knowing if PHP 7 were in place I would have better knowledge and expectations of what is going on inside the framework).\nSince I'm the only person that really matters and all cases should cater to my desires... JK -- I know I'm not the only use case and the whole picture needs to be viewed when it comes to a framework. \nBTW -- Great work everyone on the Slim team! Your framework is a godsend.. Thanks for the clarifications. Still hoping that internally Slim 4 makes PHP 7 a requirement. \nDang. I just recently got my head wrapped around the double pass middleware approach (really liking it) and already a standards proposal that completely does away with the double pass methodology.  Ah well, if you don't like change then the IT sector is not for you.. @damianopetrungaro Thanks for the update. I'm disappointed but understand the decision to keep support at php5.6 for Slim 4.\nSo the debate doesn't linger on, this issue should probably be closed if this is actually the decided resolution. Reopen this as a new issue when Slim 5 is ramping up.. Perhaps the biggest argument for requiring PHP 7 for Slim 4 is how error handling is done. Prior to PHP 7 error handling sucks the big wazzo. Consider this code addition to the main app to add Error/Exception handling as middleware. This is simple as pie:\n```PHP\n    public function run(bool $silent = false): ResponseInterface\n    {\n        // Error and Exception handling is now a part of middleware.\n        $this->add([$this, 'handleThrowable']);\n    // Process the request\n    $response = $this->process($this->request, $this->response);\n\n...\n/**\n * Since this is Last In First Executed (LIFE) it is executed first wrapping ALL processing in a try...catch\n */\npublic function handleThrowable(\n    ServerRequestInterface $request,\n    ResponseInterface $response,\n    callable $next\n): ResponseInterface {\n    try {\n        return $next($request, $response);\n    } catch (\\Throwable $throwable) {\n        return $this->processException($throwable, $request, $response);\n    }\n}\n\n. PHP 7.0 doesn't allow for optional null return type declarations:\n// Not available in 7.0\npublic function foo(): ?SomeType\n``\nWhich is an argument in favor of making 7.1 the minimum requirement.. @akrabat @geggleto Is this still an open issue? If so I can work on it (have some time on my hands right now).... This appears to be an issue with Apache (depending on version). It is Apache that is populatingHTTP_AUTHORIZTION` it looks like the Linux version is populating it with null, and the Windows version appears to be using the empty string.\nThe symphony framework had a similar issue with this and solved it by checking for null and empty string: https://github.com/symfony/symfony/issues/1813 (5th comment for solution).. @akrabat Is this going to be \"solved with middleware\"?\nI'm looking at issues tagged with 'help wanted' so I can possibly pitch in. I obviously don't want to work on something that doesn't need fixing.... @geggleto I'll see if I can come up with a working PR in the next few days. . I just looked at the CI failures. I sincerely did not know that the latest PHPUnit requires PHP 7.x. \nThis PR may be better to target Slim 4.x (if the decision to require PHP 7 for Slim 4.x hasn't been made).. A couple of suggestions (thanks for your work so far):\nRefactoring handleException to perhaps use the switch construct.\nIt also looks like you are missing the elseif ($e instanceof SlimException) logic in this PR:\nThe SlimException is implicitly thrown in the unit tests.. @geggleto At first I thought that HHVM doesn't support var_dump() (it does) but I suspect var_dump() may differ slightly in output. I'm going to change the tests to just do a simple echo and see if that fixes things.. Hmmmm... I wonder if HHVM output buffering is handled differently than PHP. (ob_start() must  be implicit in HHVM or something like that).\nI installed HHVM side by side with PHP on my system at one time. I may try that again just so I can trace through the code to figure things out. This is a bit of a head scratcher. . I have tried a number of methods to get this to work with HHVM and I think this is actually a bug in HHVM. How do I get coverage to pass? I thought that PHPUnit would do the trick. What am I missing?. @akrabat Thanks. Yes the unit tests are very thorough.. @geggleto Does this test provide adequate coverage?. Does this test offer coverage?. The related issue turned out to be a red herring and there are unit tests for testing withJSON()\nClosing.. @cacharrin Sometimes composer goes stupid -- Destroy your vendor folder and composer.lock file. \nRemove your \"provide\":{\"ext-mcrypt\": \"*\"} from composer.json\nThen run composer require phpseclib/mcrypt_compat and see if that fixes your issue.. This has been merged PR #2357. Closing.. I am unable to duplicate your issue. I am using PHP 7.1.12 and suspect that the issue you are having may be in your web server configuration and not within Slim itself.  Tarball of working test of your sample code (including using DI Slim Bridge v1.1)\nRun php -S localhost:8082\nPostman GET request returns expected results (status 406 direct):\n\n. @akrabat if you are asking me it appears to be Slim 3.9.2. Running composer require php-di/slim-bridge output:\nUsing version ^1.1 for php-di/slim-bridge\n./composer.json has been created\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nPackage operations: 10 installs, 0 updates, 0 removals\n  - Installing psr/container (1.0.0): Loading from cache\n  - Installing container-interop/container-interop (1.2.0): Loading from cache\n  - Installing nikic/fast-route (v1.2.0): Loading from cache\n  - Installing psr/http-message (1.0.1): Loading from cache\n  - Installing pimple/pimple (v3.2.2): Loading from cache\n  - Installing slim/slim (3.9.2): Loading from cache\n  - Installing php-di/invoker (1.3.3): Loading from cache\n  - Installing php-di/phpdoc-reader (2.0.1): Loading from cache\n  - Installing php-di/php-di (5.4.6): Loading from cache\n  - Installing php-di/slim-bridge (1.1.2): Loading from cache\nphp-di/php-di suggests installing doctrine/cache (Install it if you want to use the cache (version ~1.4))\nphp-di/php-di suggests installing doctrine/annotations (Install it if you want to use annotations (version ~1.2))\nphp-di/php-di suggests installing ocramius/proxy-manager (Install it if you want to use lazy injection (version ~1.0 or ~2.0))\nWriting lock file\nGenerating autoload files. * I am in favor of this implementation. Including the work-around for 3.x.\n Absolutely phase out routeInfo in 4.x\n I am in favor of the plural for the attribute: dispatcherResults\n* I am in favor of DispatcherResults  (if the attribute is also plural). I'd also be okay with DispatcherInfo. @jdrieghe Looks like you are correct. Probably a hiccup. Closing.. Thanks @l0gicgate and @akrabat Very helpful. I'm closing this issue as you answered my questions.. @l0gicgate Can I get an invite to Slack? It does not appear to be open to the public.\nTIA. I like @sunchuo 's approach. Have a default but let the user configure this via settings.\nWhen I first started trying to use Slim 3.x I really had a time with getting my head wrapped around LIFE (Last In First Executed). Having a choice would be a nice addition to the framework.. @theodorejb This is why I said to have a default stack method -- but allow the user to define the stack methodology.\n@sunchuo 's code is untested but if it works and if this is the only needed change to the code then this is a simple change. If allowing user configuration for the stack is a complicated change then I see your point and completely agree with you.\nMy experience with the stack code is that @sunchuo 's code is the only place that would need to change.. I rescind my original vote for this to be configurable and instead vote to follow the standard set in Slim 3 (stack based LIFO/LIFE middleware)\nI've changed my opinion on this and agree with @theodorejb that Slim 4 should be stack based (Last In First Executed). \nI've looked into other frameworks supporting middleware such as React's Mobx and Redux and these all appear to be stack based (at least by default).\nBy making this configurable it will add unneeded complexity and litter Slim 4 with if (configuration==='stack') then [stack based code] else [queue based logic] code blocks.\n. I'm in favor of switching routers to Symphony as long as:\n1. The Symphony router must be encapsulated and doesn't bring all of Symphony and the kitchen sink with it.\n2. The performance is the same or better than fastroute. Note: fastroute dispatcher mechanism is strange -- so much so that #2405 was created as a work-around . If Symphony's router performs as well and gives expected and reasonable output then...\n3. As @geggleto pointed out the placeholder syntax should be consistent with how Slim currently operates (or be prepared for lots of griping when 4.x doesn't work \"out of the box\" like 3.x does).. @zscally I'm not opposed to your suggestion, but want to avoid NIH syndrome. Also, if we were to build our own using R&D (Rob & Duplicate) from Symphony one of the downsides is that what we built would not have as much wide use as a popular Symphony component and therefore would not be as mature or robust.. Try changing this section:\nlocation /api {\n      rewrite ^/$ /public/ break;\n      rewrite ^(.*)$ /public/$1 break;\n   }\nTo\nlocation /api {\n    root /var/www/api/public;\n    rewrite ^/api/(.*)$ /$1 break;\n}. @newbie14 I'm not an nginx expert. This is beyond my experience. I suggest posting your question on Stack Overflow (in the context of mimicking config changes from Apache to nginx). \nSomeone in the Slim group may have more experience with this as well, and SO is an excellent resource for issues like these.. Look here https://www.slimframework.com/docs/v3/objects/request.html at the section that describes Media Type Parsers.\nIt's not clear in the docs if you can override the existing application/json handler (below). I've not tried it but it appears that as long as you register 'application/json' after the Request object has been instantiated it will use your function instead of the built-in one:\nSlim/Http/Request.php\nphp\n        $this->registerMediaTypeParser('application/json', function ($input) {\n            $result = json_decode($input, true);\n            if (!is_array($result)) {\n                return null;\n            }\n            return $result;\n        });. This is what my code looks like that handles CORS. \nNote: that I've subclassed Slim and $this really means $app\nImportant: the CORS middleware is wrapped in a try...catch(\\Throwable) that only works in PHP 7+ and is an easy way of overriding all Slim error handling into your custom error handlers. You should be able to remove the try...catch code. Also I do not allow DELETE so this is missing from the Access-Control-Allow-Methods header.\nTwo more important points: the middleware add() for options allowing all requests and the CORS middleware must be the last code executed. Middleware works by LIFE (Last In First Executed) so it is essential to handle the CORS crazyness as the last add() in your code.\nHope this helps:\n```\n// Accept all routes for options\n$this->options('/{routes:.+}', function (Request $request, Response $response, $args) {\n    return $response;\n});\n// Override the CORS stupidity and Slim's exception handlers via Middleware LIFE\n$this->add(function(Request $request, Response $response, callable $next): ResponseInterface\n{\n    try {\n        /* @var Response $response /\n        $response = $next($request, $response);\n    return $response\n        ->withHeader('Access-Control-Allow-Origin', '*')\n        ->withHeader('Access-Control-Allow-Credentials', true)\n        ->withHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Accept, Origin, Authorization')\n        ->withHeader('Access-Control-Allow-Methods', 'GET, POST, PATCH, OPTIONS')\n        ->withHeader('Content-Type', 'application/json');\n} catch (\\Throwable $throwable) {\n    $handleErrors = new HandleRuntimeError();\n    return $handleErrors($request, $response, $throwable);\n}\n\n});\n```. @akrabat What's Slim's policy as far as type checking goes (for 3.x)?\nI can create a PR for this but don't want to spend time on this if the burden of type checking is on the user and not on Slim.\nThis can be accomplished by either asserts or throwing an InvalidArgumentException or both.\nSee also: #2508 . @l0gicgate it appears that #2555 is for Slim 4.x -- What about 3.x?\nIt appears that 3.x has some manual type checking -- for example here:\nhttps://github.com/slimphp/Slim/blob/e97d122a37b854485f39e42b23a72ec245cd276c/Slim/Http/Uri.php#L142\nThis is why I was asking about the policy for 3.x -- How much manual type checking should there be in 3.x? \nIn other words should Slim\\Routable::add($callable) be manually type checked? If the answer is yes then this begs the question of where else should manual type checking exist? (see #2508)\nThis may need discussion on the Slack channel.. @akrabat I was just thinking that assert() could be used but I think that PHP versions prior to 7 have a cost associated with them.\nThis is a feature that will be included in 4.x so probably best to close this issue as will-not-fix since the next version of Slim is slated to have this feature baked-in.. This may be helpful or muddy the water. In short the most accepted suggestion is that a license file is all that is needed and to follow the specifics of the license (MIT in the case of Slim) which in part states (emphasis mine):\n\n...copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe MIT license does not require every module to have a license header; just the substantial portions. Also, these are instructions to those who wish to distribute the software; not necessarily the creators of the software.\nI'm leaning toward @l0gicgate 's suggestion that this be removed from all files.. Just my two cents. Are there any places in Slim that use duck typing? For example: An argument in a method that could be a string or an array? (It seems I've run into this a few times in the Slim code).\nAny methods that can not be strictly typed should probably be refactored to not do that, or if that isn't possible then this is a case where a detailed Doc Block should exist.. Why are you using return $handler(...$params); for the handleException() method, but in the handlePhpError() method you implicitly list the parameters: return $handler($request, $response, $e);  ?\n. ",
    "terrylinooo": "Thanks a million for saving my time.. ",
    "gkralik": "With Slim 2.6.2:\n``` php\n<?php\nrequire 'vendor/autoload.php';\n$app = new \\Slim\\Slim();\n$app->map('/post_test',function() use ($app) {\n    if($app->request->isPost()){\n        pretty($app->request()->post());\n        pretty($_POST);\n    }else{\n        $html =\n        '\n        <!DOCTYPE html>\n        \n\n\ntest\n\n\n\n\n        ';\n        for($i=0;$i<20;$i++){\n            $html .=''.$i.'';\n        }\n        $html .= '';\n        echo $html;\n    }\n    })->via('GET', 'POST');\n$app->run();\nfunction pretty($what)\n{\n    echo ' ';\n}\n```\nproduces:\n```\nArray\n(\n    [regions] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n)\nArray\n(\n    [regions] => Array\n        (\n            [0] => 1\n            [1] => 2\n        )\n)\n```\nAlso, I couldn't write a failing test for the behaviour you describe. Which version do you use?\n. Ah, ok, you're using HHVM. Just tried with 3.9.1 on Arch Linux. Now I got a failing test. Something seems to be broken on the HHVM side...\n. Ok, so it seems that  HHVMs mb_parse_str() implementation differs from PHPs:\n``` php\n// this behaves the same way in PHP and HHVM\nparse_str('foo[]=bar&foo[]=baz&abc=123', $out)\n/\narray(2) {\n  [\"foo\"]=>\n  array(2) {\n    [0]=>\n    string(3) \"bar\"\n    [1]=>\n    string(3) \"baz\"\n  }\n  [\"abc\"]=>\n  string(3) \"123\"\n}\n/\n// this not\nmb_parse_str('foo[]=bar&foo[]=baz&abc=123', $out)\n/\narray(2) {\n  [\"foo[]\"]=>\n  string(3) \"baz\"\n  [\"abc\"]=>\n  string(3) \"123\"\n}\n/\n``\n. @dopesong thanks\n. @r3wt the PR has been rejected as it's not a bugfix/security fix. If you really need a fix, see the PR for a workaround.\n. I'll check that...\n. Yes, but it's in\\Slim\\Http\\Uriin Slim 3.\nWill take care of it and create another PR.\n. A simple fix would be to check for HHVM and don't callmb_parse_str()`. But this would (possibly) break multibyte support.\nSee #1508 for the related issue.\n. Maybe something like this:\nphp\nif (function_exists('mb_parse_str') && !defined('HHVM_VERSION') \n    && !isset($this->env['slim.tests.ignore_multibyte']) \n) { \n    mb_parse_str($this->env['slim.input'], $output);\n} else {\n    parse_str($this->env['slim.input'], $output);\n}\nAt least it doesn't break any existing tests....\n. upstream bug for reference: facebook/hhvm#6340\n. Maybe some method on the Request to set trusted proxy addresses?\nAdditionally, the X-Forwarded-For header can contain multiple addresses, eg:\nX-Forwarded-For: client, firstProxy, secondProxy\nSo we should probably check for that too and only return the client IP address if the proxy addresses are trusted.\n. :+1: \n. Just pushed a fix ;)\n. AFAIK they need to be there for HTTP_HOST. They shouldn't be in SERVER_NAME though (and that's where some servers choke).\n. ",
    "pokmot": "My gut feeling is that something like $router->internalPathFor() would be appropriate; it would make it clear whether the path is returned with or without getBasePath() prepended.\n. I've made a suggested code change (#1551) - unfortunately I won't have a chance to update any unit tests, but hope it helps/is useful.\n. Yes, I already do override the error handler. The issue here is that I currently need to recreate the whole class, and I would prefer to extend the existing class and just override a single method in the class to provide the output I need. That way I would benefit automatically from the framework improving the error handling class, whilst retaining the ability to customize the message.\n. Hold on before merging - I just realised it may be very beneficial to have the Request object available to the rendering method.\n. Agreed.\n. @silentworks Question - the request method is used to display the homeUrl in NotFound.php - what would be the best way to handle this?\nShould we make the render message generic rather than including the homeUrl and then expect people to override it? I could easily override the __invoke, set a protected $request variable in my class, and read this in the render method, so that's easily handled.\n. I am happy to complete the trio by proving a PR for NotFound.php. However, as mentioned the current message uses request which is passed through invoke.\nWhat do you suggest is the best way of handling handling this?  Just remove the \"homeUrl\" from the message? Avoid refactoring it? Pass through 'request' to the method?\n. I currently resolve this issue in the following way:\n```\n// Register Twig View helper\n$container['view'] = function ($c) use ($app) {\n  $view = new Twig(\n      $app->settings['view']['template_path'], [\n          'cache' => $app->settings['view']['twig']['cache'],\n          'auto_reload' => $app->settings['view']['twig']['auto_reload'],\n          'strict_variables' => $app->settings['view']['twig']['strict_variables'],\n      ]\n  );\n// We need to adjust the base URL a little when the script name is included\n  $requestScriptName = parse_url($c['environment']->get('SCRIPT_NAME'), PHP_URL_PATH);\n  $requestUri = parse_url($c['environment']->get('REQUEST_URI'), PHP_URL_PATH);\n  $uri = $c['request']->getUri();\n  if (stripos($requestUri, $requestScriptName) === 0) {\n    $uri = $uri->withBasePath(dirname($uri->getBasePath()));\n  }\n$view['BaseUrl'] = $uri->getBaseUrl() . '/';\n// Instantiate and add Slim specific extension\n  $view->addExtension(new TwigExtension($c['router'], $uri));\nreturn $view;\n};\n```\n. Although they might be related, I don't think they are exactly the same.\nMy issue here isn't regarding rewriting to a different folder, but rather the physical path matching the browser URL, causing /index.php to appear in getBaseUrl() in that specific scenario.\nSo:\nhttp://localhost/ -> getBaseUrl = /\nhttp://localhost/testurl -> getBaseUrl = /  (Addtional example)\nhttp://localhost/index.php -> getBaseUrl = /index.php\nand when using getBaseUrl to retrieve the path it will sometimes include the file name. The only way I can see around it is to carry out the same match as is done in Slim to remove the index.php part.\n. I can't see an easy code fix - it will either cause problems for those not using rewrites, or potential problems for those using them.\nProviding a \"getVirtualBaseUrl\" method doesn't seem to be easy as the environment is not available to the method.\nAt the end of the day, I think it's easier for those using rewrites to resolve the issue, potentially through a redirect if the script is accessed directly, or using the method I described above, than to introduce this complexity into a great and elegant framework.\nI am happy for the issue to be closed as it is relatively easy to fix in own code.\n. @akrabat I just realised that the following produces an incorrect output:\n```\n$uri = \\Slim\\Http\\Uri::createFromEnvironment(\n    \\Slim\\Http\\Environment::mock(\n        [\n            'SCRIPT_NAME' => '/foo/index.php',\n            'REQUEST_URI' => '/foo/index.phpXYZ',\n        ])\n);\nprint $uri->getBasePath();\n// Produces /foo/index.php - correct output should be /foo/  \n```\nThe issue is the use of stripos on line 197 in Uri.php - as long as you include the file name of the currently executing script you can add anything you like - and the file is returned.\nPresumably strcasecmp would be better than stripos? It can be substituted directly and it will work.\nif (strcasecmp($requestUri, $requestScriptName) === 0) {\n. Before merging - I will also make the Request object available to the rendering method\n. As discussed with @silentworks no further changes are planned for this PR\n. Apologies - a copy and paste gone wrong. It is used for the output in line 49 so plain text output also can be customized.\n. $this->knownContentTypes is a protected property and may be overridden. In that case, there may be instances where $output is left undefined unless there is a default.\nAs I am not planning to change $this->knownContentTypes I am happy to remove the default, but I thought it better to plan for someone who forgets/doesn't understand and therefore preventing the framework producing a notice.\n. @geggleto made a great point. One of the reasons I love Slim is that it allows me to do what I want, rather than forcing me to do it the way the framework wants.\n. ",
    "Serhioromano": "That is I know. But let's say\nphp\n$app->get('/', function (Request $req, Response $resp, $args) { \n    \\My\\Api::call()\n});\nhow do I get POST params in my \\My\\Api::call() if I cannot pass $request there?\n. My real project is more complicated than an example. It is high level modular API framework. I will not explain why and paste all code here, but the fact is - I need a way to get access to $request object without having it injected into method.\nThe $app->request is still there. What about $app instances?\n. Is it a limitation of RC or is it a concept? Is there configuration like it used to be for debug and template path?\n. before I used request->params() which returned parameter sent by POST or GET. But how there is no such a parameter and my universal parameter aggregator looks like this.\nphp\n$get  = (array)$request->getQueryParams();\n$post = (array)$request->getParsedBody();\n$req  = array_merge($get, $post);\nAm I on the right track? The code looks a little weird to me, but this is only what I have managed to do. Is there more elegant way?\n. This is true. It works. There was no autocompletion/intellisense for that. So I did not know that this exists.\nI am runing it like this\n``` php\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\n$app->map(['POST', 'GET'], '/{module}/{group}/{action}[/{id}]',\n    function (ServerRequestInterface $request, ResponseInterface $response, $params)\n```\nIs it correct or there are Slim's instances?\n. Thank you everyone. It is working now. \n. Still the same. \n. Very simple. This is my whole file as it is now.\n``` php\n<?php\ndefine('_API', 1);\n$loader = require '../vendor/autoload.php';\n$app    = new \\Slim\\App();\nuse App\\Lib\\Language;\nuse App\\Lib\\Util;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\n$app->map(['POST'], '/{module}/{group}/{action}[/{id}]',\n    function (ServerRequestInterface $request, ResponseInterface $response, $params) use ($app)\n    {\n        /*\n         * @var $module string\n         * @var $group  string\n         * @var $action string\n         * @var $id     string\n         /\n        extract($params);\n    try\n    {\n        $body = $request->getParsedBody();\n        if($body === NULL)\n        {\n            throw new \\Exception(\"Cannot get Params\");\n        }\n\n        Language::init($module, $body);\n\n        $data = Util::apiExecute($request, $response, $app, $params, TRUE, $body);\n\n        $content_type = 'text/html;charset=utf-8';\n\n        if(is_array($data) || is_object($data) || $data == '1')\n        {\n            $content_type = 'application/json;charset=utf-8';\n            $data         = json_encode(array(\n                'error'  => FALSE,\n                'result' => $data\n            ));\n        }\n\n        $response->withStatus(200)\n            ->withHeader('Content-type', $content_type)\n            ->write($data);\n    }\n    catch(Exception $e)\n    {\n        $data = json_encode(array(\n            'error'   => TRUE,\n            'code'    => $e->getCode(),\n            'message' => 'Error: ' . $e->getMessage(),\n            'module'  => $module,\n            'group'   => $group,\n            'file'    => $e->getFile(),\n            'line'    => $e->getLine(),\n            //'trace'   => $e->getTrace(),\n            'action'  => $action\n        ));\n\n        $response->withStatus(200)\n            ->withHeader('Content-type', 'application/json;charset=utf-8')\n            ->write($data);\n    }\n});\n\n$app->run();\n```\nAnd I did try withJson instead of \nphp\n$response->withStatus(200)\n    ->withHeader('Content-type', $content_type)\n    ->write($data);\nBy the way @silentworks if I try your example it does work fine. I do not understand what is the difference.\n. Hey!! Yes it works now. Although strange that it doe snot work like this\nphp\n$response->withStatus(200)\n    ->withHeader('Content-type', $content_type)\n    ->write($data);\nreturn $response;\nBut it works like this\nphp\nreturn $response->withStatus(200)\n    ->withHeader('Content-type', $content_type)\n    ->write($data);\n. ",
    "p3ym4n": "@geggleto all that document are talking about how to define routes. \ni'm looking for a way to pass the matched route from inside it and i think it doesn't relates to the route component.\nso tell me if i'm wrong \ud83d\ude03.\n. i finally find it , its $app->subRequest() method .\n. \ud83d\udc4d\n. ",
    "okaprinarjaya": "Hi @silentworks , \nYou do not understand what i mean. The app does not work on FIRST run. When accessed via subdirectory or http://localhost/slim_app_dir . I received Slim's 404 Page Not Found. \nEvery web app need a root url routing -->  / as a their main page. In my case, the main root url routing can not  be a / string. So.. in order to be able to have a root url routing as a main page, i must use /slim_app_dir/ as my root url routing to show my main page.\nI'm not talking about handling http 301 redirection, including assetss (css, js, images) . I talk about accessing the app at FIRST run. The app failed to run at first. I received Slim's 404 Page Not Found. But, everything is ok when i access the app via virtual host. But i really really need to access the app via sub directory or http://localhost/slim_app_dir\nthis is my print_r($_SERVER);\n[SERVER_SOFTWARE] => Apache/2.4.16 (Win32) OpenSSL/1.0.1p PHP/5.6.12\n    [SERVER_NAME] => localhost\n    [SERVER_ADDR] => 127.0.0.1\n    [SERVER_PORT] => 80\n    [REMOTE_ADDR] => 127.0.0.1\n    [DOCUMENT_ROOT] => C:/xampp-php56/htdocs\n    [REQUEST_SCHEME] => http\n    [CONTEXT_PREFIX] => \n    [CONTEXT_DOCUMENT_ROOT] => C:/xampp-php56/htdocs\n    [SERVER_ADMIN] => webmaster@vhost\n    [SCRIPT_FILENAME] => C:/xampp-php56/htdocs/dev-spirit-back/webroot/index.php\n    [REMOTE_PORT] => 51552\n    [REDIRECT_URL] => /dev-spirit-back/\n    [GATEWAY_INTERFACE] => CGI/1.1\n    [SERVER_PROTOCOL] => HTTP/1.1\n    [REQUEST_METHOD] => GET\n    [QUERY_STRING] => \n    [REQUEST_URI] => /dev-spirit-back/\n    [SCRIPT_NAME] => /dev-spirit-back/webroot/index.php\n    [PHP_SELF] => /dev-spirit-back/webroot/index.php\n    [REQUEST_TIME_FLOAT] => 1444270624.65\n    [REQUEST_TIME] => 1444270624\nI guess Slim 3 router depend on [REQUEST_URI] => /dev-spirit-back/ . So Slm 3 recognize /dev-spirit-back/  is the root url .  Fyi, CakePHP Perfectly handle access via sub directory.  \nHere's how to reproduce it \n- just create a Slim 3 app skeleton \n- .htaccess setup\n- create root url routing $app->get('/', function () { .... \n- then access it by http://localhost/the_slim3_app\n  You will receive Slim's 404 Page not found, until you rename / to /the_slim3_app/ . \nThank you :)\n. @silentworks , \nwowww.. serious? did you use virtual host? you are not using virtual host, right? \nI don't want to use virtual host. \nOk, this is my app structure\ndirectory skeleton structure\nC:\\xampp\\htdocs\n---- slim3-app\n-------- libraries\n-------- protected\n-------- public\n------------ .htaccess\n------------ index.php\n-------- vendor\n-------- .htaccess\n-------- index.php\n.htaccess at slim3-app/\n```\nRewriteEngine On\nRewriteRule    ^$    public/    [L]\nRewriteRule    (.*) public/$1    [L]\n```\nindex.php at sli3-app/ \nphp\n<?php\nrequire 'public/index.php';\n.htaccess at slim3-app/public\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^ index.php [QSA,L]\nindex.php at slim3-app/public\n``` php\n<?php\nif (!defined('ROOT')) {\n    define('ROOT', dirname(dirname(dirname(FILE))));\n}\n/\n * The actual directory name for the \"app\".\n \n/\nif (!defined('APP_DIR')) {\n    define('APP_DIR', basename(dirname(dirname(FILE))));\n}\nif (!defined('DS')) {\n    define('DS', DIRECTORY_SEPARATOR);\n}\nif (!defined('FULL_APP_PATH')) {\n    define('FULL_APP_PATH', ROOT.DS.APP_DIR.DS);\n}\nrequire FULL_APP_PATH.'vendor'.DS.'autoload.php';\nrequire FULL_APP_PATH.'libraries'.DS.'PlatesTemplate.php';\nrequire FULL_APP_PATH.'libraries'.DS.'Validator.php';\nrequire FULL_APP_PATH.'libraries'.DS.'PlatesUriExtension.php';\nrequire FULL_APP_PATH.'libraries'.DS.'PlatesFlashMessageExtension.php';\nrequire FULL_APP_PATH.'libraries'.DS.'PlatesFormHelperExtension.php';\nrequire FULL_APP_PATH.'libraries'.DS.'Hash.php';\n$settings = require FULL_APP_PATH.'protected'.DS.'settings.php';\nsession_start();\n$app = new \\Slim\\App($settings);\nrequire FULL_APP_PATH.'protected'.DS.'dependencies.php';\nrequire FULL_APP_PATH.'protected'.DS.'common-data'.DS.'common-data-functions.php';\nrequire FULL_APP_PATH.'protected'.DS.'login'.DS.'login-functions.php';\nrequire FULL_APP_PATH.'protected'.DS.'dashboard'.DS.'dashboard-functions.php';\nrequire FULL_APP_PATH.'protected'.DS.'membership'.DS.'membership-functions.php';\nrequire FULL_APP_PATH.'protected'.DS.'adm'.DS.'users'.DS.'users-functions.php';\nrequire FULL_APP_PATH.'protected'.DS.'middlewares.php';\n$app->run();\n```\nMay i get your .htaccess configuration? and other configuration ? that work without virtual host. \nThank You :)\n. aahhh thank you very much @r3wt and @silentworks , my problem solved!\nit's because Garret advises me to not over complicate things.. hahahaha thx by the way :)\nNow my ap structure looks like below :\nC:\\xampp\\htdocs\n---- slim3-app\n-------- libraries\n-------- protected\n-------- public\n------------ css\n------------ js\n------------ images\n-------- vendor\n-------- .htaccess\n-------- index.php\nThe source of the problem is putting index.php and .htaccess in slim3-app/public aahh bad..bad..\nsoo.. i remove index.php and .htaccess in slim3-app/public and then use only one index.php and .htaccess in slim3-app/\nmy .htaccess \nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^ index.php [QSA,L]\ni'm so sorryy.. I've been prejudiced that this is Slim 3 router bugs. \nThank you very much guys :)\n. ",
    "cristianodpp": "@okaprinarjaya, Yep, it works for me and I fix it like you said. Thanks!. ",
    "erolando": "@okaprinarjaya, it works for me  Thanks!. ",
    "junerockwell": "@okaprinarjaya Your solution worked for me on Bitnami Mamp.. ",
    "odan": "I have a very simple fix for you to get Slim 3 running in a subdirectory:\nI will show you how to fix the slim/slim-skeleton app:\n\n\nCreate a new project (or take your existing project)\ncd c:\\xampp\\htdocs\\\ncomposer create-project slim/slim-skeleton slim3-app\n\n\nCreate a new file: c:\\xampp\\htdocs\\slim3-app\\.htaccess\n\n\nContent of .htaccess\nRewriteEngine on\nRewriteRule ^$ public/ [L]\nRewriteRule (.*) public/$1 [L]\n3. Fixing the script path\nOpen: c:\\xampp\\htdocs\\slim3-app\\src\\dependencies.php\nAdd this lines to fix it:\n```php\n<?php\n// ....\n$container['environment'] = function () {\n    // Fix the Slim 3 subdirectory issue (#1529)\n    // This fix makes it possible to run the app from localhost/slim3-app\n    $scriptName = $_SERVER['SCRIPT_NAME'];\n    $_SERVER['REAL_SCRIPT_NAME'] = $scriptName;\n    $_SERVER['SCRIPT_NAME'] = dirname(dirname($scriptName)) . '/' . basename($scriptName);\n    return new Slim\\Http\\Environment($_SERVER);\n};\n// ...\n```\nNow you can open the app via: http://localhost/slim3-app.\n. It would like to define Controller actions like a native callable. This would make the action methods compatible with the PhpStorm refactor functionality.\nExample\nphp\n$app->get('/user', \\App\\Controller\\UserController::class . ':indexAction');\nInstead I would like to define a route like this:\nphp\n$app->get('/user', ['App\\Controller\\UserController', 'indexAction']);. @silentworks Ah ok, I saw this feature in PHI-DI and thought it would be nice to have it directly in Slim 4 (only in the context of routes).\n\nAdditionally you can call:\n\nname of invokable classes: $container->call('My\\CallableClass')\nobject methods (give the class name, not an object): $container->call(['MyClass', 'someMethod'])\n\nIn both case, 'My\\CallableClass' and 'MyClass' will be resolved by the container using $container->get().\n\nBut anyway, this special kind of callable (non-static method as callable) has been deprecated since PHP 7  https://3v4l.org/ORMQ3. My question can therefore be considered as closed. Thanks :-). Hi @trasher Pimple is not dead and still alive. \nHere is a statement from fabpot: https://github.com/silexphp/Pimple/issues/243. Hi! \nAccording to the accepted PSR-15 specification the new signature should look like this.\n```php\n$app->get('/foo', function (ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface {\n    $response = $handler->handle($request);\n// Do something...\n\n// Return response object\nreturn $response;\n\n});\n```\nIs this correct? Will the signature in Slim version 4 look like this?. Let's take a look at the Ubuntu LTS releases. \nPHP 7.0.4 is the default PHP package in Ubuntu LTS 16.04 (Xenial Xerus)\nEnd of Life date: April 2021 !\nPHP 7.2.x could be the default PHP package in Ubuntu 18.04 LTS. \nRelease date: April 2018. \nI believe there is a big LTS user base and we should not just ignore this group.\nSymfony 4.0 requires PHP >= 7.1.3\nLaravel 5.6.0 requires PHP >= 7.1.3\nZend 2.4.13 and Zend Expressive requires PHP ^5.6 || ^7.0\nPHPUnit 6 requires PHP >= 7.0\nPHPUnit 7 requires PHP >= 7.1\nPHPUnit 8 (not released) requires PHP >= 7.2\n. @luispabon You are right. I'm tending to PHP >= 7.1.3.. Maybe add a (optional) middleware for that?. The following steps are necessary for your Slim application to work within subdirectories.\nDirectory structure: \n\npublic/      Web server files (the DocumentRoot on your prod server)\n.htaccess   Apache redirect rules for the front controller\nindex.php   The front controller\n.htaccess    Internal redirect to the public/ directory\n\nThe content of the file: .htaccess:\nRewriteEngine on\nRewriteRule ^$ public/ [L]\nRewriteRule (.*) public/$1 [L]\nThe content of the file: public/.htaccess:\n```\nRedirect to front controller\nRewriteEngine On\nRewriteBase /\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^ index.php [QSA,L] \n```\nAdd this container entry to the file: dependencies.php:\nphp\n// Activating routes in a subfolder\n$container['environment'] = function () {\n    $scriptName = $_SERVER['SCRIPT_NAME'];\n    $_SERVER['SCRIPT_NAME'] = dirname(dirname($scriptName)) . '/' . basename($scriptName);\n    return new Slim\\Http\\Environment($_SERVER);\n};\nNow you can open the app via: http://localhost/slim3-app.\nEdit: I copied the content from my StackOverflow answer. I would simplify the .htaccess file a little bit and move the SSL check and redirect to a middleware.\nContent of .htaccess\n```htaccess\nRedirect to front controller\nRewriteEngine On\nRewriteBase /\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^ index.php [QSA,L]\n```\nMiddleware\n```php\n// Redirect HTTP traffic to HTTPS\n$app->add(function (Request $request, Response $response, $next) {\n    $uri = $request->getUri();\n    if($uri->getScheme() !== 'https') {\n        // Map http to https\n        $httpsUrl = $uri->withScheme('https')->withPort(443)->__toString();\n    // Redirect to HTTPS Url\n    return $response->withRedirect($httpsUrl);\n}\n\nreturn $next($request, $response);\n\n});\n```. @cacharrin Try this:\nInstall the mcrypt_compat polyfill\ncomposer require phpseclib/mcrypt_compat\nAdd this entry into composer.json\n``json\n\"provide\": {\n  \"ext-mcrypt\": \"*\"\n}\n````\nRuncomposer update`\n. > This function has been DEPRECATED as of PHP 7.1.0 and REMOVED as of PHP 7.2.0.  Relying on this function is highly discouraged.\nhttp://php.net/manual/de/function.mcrypt-module-open.php\nYou are using PHP 7.1, which means that the PHP mcrypt extension should still exist, but will display a warning. Thats why the phpseclib/mcrypt_compat polyfill will only work for PHP 7.2+.\nYou could completely disable the PHP 7.1 mcrypt extension in the php.ini file (restart the webserver service) and try to install the phpseclib/mcrypt_compat polyfill via composer again.\nSecond option: Upgrade to Slim 3 :-). Ok, in this case mcrypt is compiled statically with the PHP binaries. There is no .dll  any more you can disable. Sorry, my mistake. Can you update to XAMPP with PHP 7.2?. Is the environment container entry still available in Slim 4?. Hi @edudobay. I'm not sure whether I get your question right. Have you tried to implement a custom slim error handler? There you have the possibility to decide which (and when) error details are displayed to the client and can log all errors in detail using a logger (e. g. Monolog).\n. The problem is, that in Slim 4 the method writeToErrorLog is getting only called if displayErrorDetails is true. See here. That means overwriting the writeToErrorLog method in a extended class will not work in Slim 4.\nHave you tried to implement a custom ExceptionMiddleware? \nExample:\nphp\n// Exception middleware\n$app->add(function (Request $request, Response $response, $next) {\n    try {\n        return $next($request, $response);\n    } catch (Exception $ex) {\n        // logging etc...\n    }\n});\n. @l0gicgate Now, that the PR #2222 has been closed, my previous answer is not valid anymore. I think the new Error middleware #2398 is the way to go. I will review it and give you a feedback as soon as possible.. Hi! \nI have some questions / ideas about this PR and the error handling in general.\n1) If Slim 4 will provide a new Error middleware like in this PR, why do we still need the setErrorHandler() and setDefaultErrorHandler methods in the App class? There should be only one style how to add middleware to the stack and not multiple different methods. This is important, because I want to decide in which order I place my middleware handlers. \n2) I don't like the PHP_EOL magic constant because the response will be different on windows/linux. The Response should be exactly the same for all platforms.\n. The name of the middleware ErrorMiddleware implies that it handles PHP errors. But in PHP there is a small difference between Exceptions and Errors. If this middleware handles \"only\" Exceptions and no \"Errors\" then the it should be renamed to \"ExceptionMiddleware\".\nThe question is how to handle PHP errors (extended from Throwable)? Are you planning a new separate Middleware (e.g. ErrorMiddleware) or a generic \"ThrowableMiddleware\" for Exceptions  and Errors together?\n. Maybe mixing error handling and error logging violentes SRP. What do you think about splitting this into 2 Middleware classes? (Just an idea)\nFor example. \n\nnew ExceptionMiddleware(bool $displayErrorDetails)\nnew LogExceptionMiddleware($logger)\n\nLog all exceptions from your middlewares. When your middleware throw exception this middleware catch it, log it and throw again. You will newer miss any exception. Example. > The last middleware layer added is the first to be executed.\nI would be happy if the the order of the middleware stack changes in v4. I think the first middleware must be the first to be executed. That would just be more logical.. The unit tests are failing here:\n```\n1) Slim\\Tests\\AppTest::testExceptionOutputBufferingOff\nRuntimeException: Unexpected data in output buffer. Maybe you have characters before an opening <?php tag?\n/home/travis/build/slimphp/Slim/Slim/App.php:612\n/home/travis/build/slimphp/Slim/Slim/App.php:324\n/home/travis/build/slimphp/Slim/tests/AppTest.php:2245\n/home/travis/build/slimphp/Slim/vendor/phpunit/phpunit/phpunit:52\n```\n. Definitely FIFO (\"first in, first out\") :-)\nThe code goes from top to bottom, so the middleware should also run in the same direction. \nReading the middleware settings would make it easier for the developer to read and maintain, as it corresponds to the mental and natural order of code and logic.\nShowing code of a middleware stack in a training or presentation (slide) is better understood by everyone. Because everyone reads the code from above and can therefore follow the sequence better.\nFIFO simplifies the writing of tests which have to consider the sequence of the stack. etc...\nFIFO has become standard in the PHP community and in all other middleware based frameworks (see Zend Expressive). . This issue is a nice example of how the router should be implemented as middleware in the future. Then you would have the possibility to add some kind of \"InternationalRouteMiddleware\" one step ahead of the core router into the stack. As a result, the core framework could be kept \"slim\" and the custom routing middleware could be placed where and when necessary.. Hi @SmiSoft The slim router uses nikic/FastRoute and my first thought would have been to solve the problem right there. But then I found this issue 154. \nNikic is unfortunately not willing to solve this problem within his library. Here are the reasons:\n\nFastRoute expects a decoded URL. As shown in the README, this can be achieved using a call to rawurldecode().\n\nThen I tried this litte workaround and it works :-)\nphp\n$app->get('/' . rawurlencode('\u043d\u043e\u0432\u043e\u0441\u0442\u0438'), function ($request, $response) {\n    // it works\n});\nUnfortunately, this is not mentioned in the documentation of FastRoute. Apparently in Slim, the regex pattern, is not automatically urlencoded. See Route.php, which could be considered a bug. \nBut I also believe that such a major change in the encoding of Slim could lead to compatibility problems with existing projects. The problem is that suddenly something doesn't work anymore seems to me very big.\nHere is a shorter function to encode the pattern:\nphp\nfunction encodeUrlPattern($url)\n{\n    return preg_replace_callback('~' . '[\\x7F-\\xFF]' . '~', function ($match) {\n        return urlencode($match[0]);\n    }, $url);\n}\nEdit: Maybe this should be documented in Slim too?. The Symfony 4 RouterCompiler has a option for 'utf8' encoded routes.\nhttps://github.com/symfony/routing/blob/master/RouteCompiler.php#L103\nMaybe Slim could implement such a new option too?. I took a look at the new Symfony RouteCompiler.php class.\nhttps://github.com/symfony/routing/blob/master/RouteCompiler.php#L95\nNow I ask myself: How can this regex/substr/in_array \"orgy\" be faster then Nikic/FastRoute?\nDoes anyone know about current performance tests? Symfony 4 Router vs. FastRoute?\n. At first glance, it sounds great. On the other hand, every router offers different features. There is also no common standard how to define the route paths, placeholders and route conditions. All this would have to be abstracted/mapped by Slim, wouldn't it? In this case, the complexity would shift to slim and thus slow down.. @geggleto In this case the interface is just fine. (As long a the route placeholder syntax ({id} vs. [id])  is the same). . Sometimes I need some \"preprocessing\" before the router is getting executed. Why not implement the router/dispatcher as middleware? . Hi @RobDWaller! You could implement a middleware.\nEdit: Here is an example (not tested):\n```php\n$app->add(function (Request $request, Response $response, $next) {\n    if ($request->hasHeader('authorization')) {\n        $authHeader = $request->getHeaderLine('authorization');\n        if (preg_match('/^Bearer\\s(.*)$/', $authHeader, $match) !== false) {\n            $request = $request->withAttribute('bearer_token', $match[1]);\n        }\n    }\nreturn $next($request, $response);\n\n});\n``. You are welcome :-) Please close this issue.. @crtl Slim is often used for RESTful APIs and the default data type is JSONapplication/json. Why wouldn't Slim support that by default? A change (to the regex) would be minimal and very useful.. @akrabat Sorry, my mistake. I'm using theAcceptheader and not theContent-Type. I just updated my first question.. Thanks @akrabat The problem was caused by another request for a not existingbootstrap.min.js.map` file (error 404). Unfortunately, the Google Chrome Developer Toolbar does not display such requests.. Thanks for the PR. :+1: \nStatusCodes sounds very (too) generic.\nWould it be possible to give it a more specific (and singular) name like: HttpStatusCode ?. @akrabat I agree, but in the context of a controller / action method the Http prefix is not redundant because it's not clear which status code you mean. You first have to check the use statements on top of the PHP file to know what a StatusCode is.\nExample: Here it is clear:\nphp\npublic function __invoke(Request $request, Response $response) \n{\n    return $response->withStatus(HttpStatusCode::NOT_FOUND);\n}\nAnd here it is not clear:\nphp\npublic function __invoke(Request $request, Response $response) \n{\n    return $response->withStatus(StatusCode::NOT_FOUND);\n}\nBut anyway, I'd be happy to call the class at least singular. :-). @Dmitry-Kucher Yes, all the ::HTTP_ constant prefixes are quite redundant, because this class is only responsible for HTTP status codes, right? But yes, this depends on the class name of course.\nAnother question: If at all, should this class not be part of the slimphp/Slim-Http package?. > So, maybe HTTP is redundant for constant contains more than one word in their names\n@Dmitry-Kucher I would agree with HTTP_CONTINUE, but only for technical reasons (PHP < 7.0). The rest should be without HTTP_ to make it more consistent.. Hello @wmelton \nI have tested your routes on my local server and it works like expected. \nTested with PHP 7.1 and PHP 7.2. / Slim ^3.10\n```php\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\n$app->get('/dashboard/{site_id}', function (Request $request, Response $response, array $args) {\n    return $response->getBody()->write('dashboard:' . var_export($args, true));\n});\n$app->get('/dashboard/{site_id}/{campaign_id}', function (Request $request, Response $response, array $args) {\n    return $response->getBody()->write('campaign:' . var_export($args, true));\n});\n```\nMy .htaccess file\n```htaccess\nRedirect to front controller\nRewriteEngine On\nRewriteBase /\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^ index.php [QSA,L]\n```\nhttp://localhost/dashboard/8aj3j1c -> dashboard:array ( 'site_id' => '8aj3j1c', )\nPlease check your Apache webserver settings.\n. Hello @anant-svc \nWe have already discussed this question in other issue: https://github.com/slimphp/Slim/pull/2409\nThis should do the trick:\n```php\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\n$app->get('/' . rawurlencode('\u266a'), function (Request $request, Response $response) {\n    return $response->getBody()->write('Sing with me!');\n});\n```\nOpen: http://localhost/\u266a -> Sing with me!\n. I can't reproduce it, even with the latest version of phpstan v.0.10.1 and level=max\n\nCan you give us more details and examples?\n. > Cannot access offset 'errorHandler' on Psr\\Container\\ContainerInterface.\nAh, a few days ago I got the same error in phpstan. I think this is because the container does not contain the ArrayAccess interface. Strictly speaking, without ArrayAccess you can't access an object like an array. Maybe the Slim Container implemention should implement the ArrayAccess interface too.\nphp\n$this->container['errorHandler'] = ... // <-- invalid array access on a container interface\n. Hi @samtny According to PSR-7 (HTTP message interface) only the ServerRequestInterface has a withAttribute method. The ResponseInterface has no withAttribute method.. @tuupola Maybe RewriteBase is a little bit to \"unflexible\", because it's a hardly coded path and may change from development machine to development machine and from server (test, staging, prod) to server.\nI think Slim 4 should handle this issue, like Symfony and other Frameworks can handle it.\nIn Slim 3 I do a little \"hack\" by...\n\nchanging the SCRIPT_NAME in the $_SERVER super global variable:\n\n$container['environment'] = function () {\n    $scriptName = $_SERVER['SCRIPT_NAME'];\n    $_SERVER['SCRIPT_NAME'] = dirname(dirname($scriptName)) . '/' . basename($scriptName);\n    return new Slim\\Http\\Environment($_SERVER);\n};\n\n... and then I add a second .htaccess file above the public/ directory. The second .htaccess file only makes an internal redirect to the public/directory, but only if Apache DocumentRoot does not point to the public/directory (e.g. in my development environment).\n\nRewriteEngine on\nRewriteRule ^$ public/ [L]\nRewriteRule (.*) public/$1 [L]\nI hope that in Slim 4 this \"hack\" is no longer needed. :-). Thank you very much for this great feature.\nMy question is: Will Slim 4 be delivered with a \"default\" PSR-7 implementation or do we have to make this decision ourselves now?. @l0gicgate I am surprised that the Slim \"inhouse\" PSR-7 implementation slimphp/Slim-Http is not listed. What reason is there for not using slim/http? What does this mean for the future of Slim-Http library? Is it possible to use use the slim/http library in Slim 4 or is it not recommended?. I'm developing under windows and linux and if I would run my api integration test under windows the tests would fail because the response is not the same like under linux. So please never use PHP_EOL because it will complicate thinks, especially in combination with windows and integration tests.. Use \\n instead of PHP_EOL to make integration tests compatible with windows.. Add use RuntimeException on top to remove the backslash.. There'd be plenty of room to put this statement in one line.\nif (($renderer !== null && !class_exists($renderer)) {. This extra variable ($e) is not really necessary.. What for values can be passed here?. On a production server I have to log all errors (into a file), but for security reasons I am not allowed to show the users any error details. Therefore, it is still necessary to be able to configure both options (displayErrorDetails and logging) independently of each other. . @l0gicgate Sounds good. ",
    "calguy1000": "Thanks very much,  this solved it for me too.   I am operating on a test server with lots of different projects under the document root.   So my public url URL is like http://server/appName/public and I wanted everything to appear as if it is coming from http://server/appName/   \nI wanted the public directory to have nothing but a simple index.php file and other assets.  and this solves it.. ",
    "aalfiann": "Because the slim will set main base dir start from where you run the slim app. . Slim3 is recommend you to show output response in json. \nTry to change your code into this:\n$app->get('/', function (Request $req, Response $res, $arg) {\n    $body = $res->getBody();\n    $body->write(json_encode([ \n        'test' => 'a',\n        'message' => $res->withStatus(406, \"Reason\")->getReasonPhrase()], JSON_PRETTY_PRINT));\n    return $res\n            ->withStatus(406, \"Reason\")\n            ->withBody($body);\n    });\nThis will output header 406 and get the message of reason phrase.\nActualy i've test your code it run perfectly on my server, there is no 500 internal error. Maybe the problem is only on idea hosting, you should create a ticket to idea hosting about this problem.. > For what it's worth, this is not a recommendation of the Slim project. Slim can be used to output content in any media type.\nI've read in somewhere says that slim3 is for json rest api. Yes you right. actually im not really agree with that after I know how to render in php or html using twig. . ",
    "zmip": "FWIW, the withJSON helper function that was added to Slim 3 can only return application/json which causes problems in certain versions of MSIE when it is a response after an upload (IE will just download the JSON as a file, go figure...). So being able to set the Content-Type as an option would be a nice addition.\n. ",
    "EwertonDutra": "I have this problem too.\nDoes not work:\n\"return $ response-> withJson ('Erro na remo\u00e7\u00e3o', 400);\"\nIt only works like this:\n\"return $ response\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 -> withStatus (400)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 -> withHeader (\"Content-Type\", \"application / json; charset = utf-8\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 -> write ('Erro na remo\u00e7\u00e3o'); \". Thank you for clarifying this question.. ",
    "pdscopes": "Improved the reliability of current route being restored to it's initial value after the routing has been completed.\nAnd added extra functionality to know which route was dispatched.\n. ",
    "minhchu": "I tried your command but it still shows the same error.\n. Thank you @SamNicholson you save my day.\n. ",
    "SamNicholson": "I think you already pimple version 1 installed via composer. Slim requires version 3, so you need to update your pimple version to get it.\n. If you are looking for a file based caching solution for slim 3, I recently wrote a simple one, which I used for one project where I only wanted to cache specific routes - \nhttps://github.com/SamNicholson/slimfilecache\n. ",
    "samwilson": "+1 for Gitter.\n. I was also having this issue, but have not been able to fix it other than to create extra routes in my application, pointing to the same code as other routes. Not the best solution perhaps, but it works. There seems to be no way to change REQUEST_URI without, well, changing the request URI (and I don't want it to change, from the user's perspective).. @geggleto it's because I was trying to rewrite another URL, but not change it, and so Slim was only seeing the original, non-routed REQUEST_URI.. ",
    "jasteele12": "+1 for Gitter\nSuper easy to implement, you don't need to create a \"team\" like in Slack.  A simple link from the repository is all it takes: https://gitter.im/slimphp/Slim\nI think Slack serves a different audience/purpose...\n. ",
    "ssotomayor": "Hi @akrabat i was referring to issue #1521. Altough now that i think about it, perhaps it would be better to have another method to return the route to work with subRequests.\n. ",
    "ryanscherler": "To be clear, this is working with Slim 3.0@beta\n. It seems that if I set ->withStatus(400) at the end of my controller rather than in my provider (above) I get the right header. Can I only set the status headers directly on the returned response?\n. I've added the current instance of the response as a dependency in my service provider as I thought this might work?\n```\n<?php\nnamespace App\\Providers;\nuse Slim\\Http\\Response;\nclass JsonProvider\n{\nprivate $response;\n\npublic function __construct(Response $response)\n{\n    $this->response = $response;\n}\n\n/**\n * Render a JSON response\n *\n * @param object $response\n * @param mixed $data\n * @param int $code\n */\npublic function render($data, $code)\n{\n    $this->response->withStatus((int) $code)\n        ->withHeader('Content-type', 'application/json;charset=utf-8')\n        ->withJson($data);\n}\n\n/**\n * Provide a standardized JSON success response\n *\n * @param object $response\n * @param mixed $data\n * @param int $code (200 OK)\n */\npublic function ok($data, $code = 200)\n{\n    return $this->render($data, $code);\n}\n\n/**\n * Provide a standardized JSON error response\n *\n * @param object $response\n * @param mixed $data\n * @param int $code (400 Bad Request)\n */\npublic function error($data, $code = 400)\n{\n    return $this->render([\n        'error'   => true,\n        'code'    => $code,\n        'message' => $data\n    ], $code);\n}\n\n}\n```\n. Then in my controller I have...\n```\n[...]\n        // Send success message\n        $this->json->ok($message);\n\n    } catch (NotFoundException $e) {\n        $this->json->error($e->getMessage(), 404);       \n    } catch (ParseException $e) {\n        $this->json->error($e->getMessage(), 500); \n    } catch (\\Exception $e) {\n        $this->json->error($e->getMessage());\n    }\n\n    return $response;\n}\n\n```\n. Yeah - I have that in my JSON provider, but seems to still return 200 when returning the $response in my controller. \nLooks like I'll have to do this when returning the response in a controller method:\n```\n            // Send success message\n            return $response->withJson($message);  \n    } catch (NotFoundException $e) {\n        return $response->withJson($e->getMessage())->withStatus(404);       \n    } catch (ParseException $e) {\n        return $response->withJson($e->getMessage())->withStatus(500);\n    } catch (\\Exception $e) {\n        return $response->withJson($e->getMessage())->withStatus(400);\n    }\n\n``\n. Since it seems I cannot change its state once created.\n. That makes sense. I actually ended up just directly calling on the $response [example](#issuecomment-150699257) abovereturn $response->withJson($e->getMessage())->withStatus(404);rather than use a provider for JSON formatting / output. Simpler this way for now until I need to have a more defined structure for API JSON responses (maybe use something like Fractal).\n. Hi @svanlaere - I ended up doing that - but was hoping to not have to do that sort of thing and rather just have the optional argument.. I ended up implementing some route middleware to parse the path and add apage` argument if needed. See here: https://github.com/ryanscherler/alpine/blob/master/app/src/core/PathPaginationMiddleware.php\nIt requires this setting in Slim:\n'settings' => [\n  ...\n  'determineRouteBeforeAppMiddleware' => true,\n  ...\n]. ",
    "mahdera": "tnx. this helped me a lot.\n. ",
    "aneek": "Ahh, this seems appropriate. Only thing is that to enable this type of content negotiation we have to add this middleware. However, I still think a helper method to get proper accept header would be great. But yes, since a middleware exists this can be closed.\n. ",
    "imarshmultani": "can you please tell me how i can log in slim ? currently i do not have any log.\n. @JoeBengalen yup let me check the logs and paste then here from my server log\n. these are the last logs i have:\n[28-Oct-2015 12:25:20 Europe/Rome] PHP Fatal error:  Undefined constant 'Ultimateboard\\MainController' in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 15\n[28-Oct-2015 12:25:21 Europe/Rome] PHP Fatal error:  Undefined constant 'Ultimateboard\\MainController' in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 15\n[28-Oct-2015 12:25:33 Europe/Rome] PHP Fatal error:  Undefined constant 'Ultimateboard\\MainController' in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 15\n[28-Oct-2015 12:25:34 Europe/Rome] PHP Fatal error:  Undefined constant 'Ultimateboard\\MainController' in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 15\n[28-Oct-2015 12:33:18 Europe/Rome] PHP Fatal error:  Undefined constant 'Ultimateboard\\MainController' in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 15\n[28-Oct-2015 12:45:11 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 15\n[28-Oct-2015 12:45:12 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 15\n[28-Oct-2015 12:56:36 Europe/Rome] PHP Parse error:  syntax error, unexpected '\\' (T_NS_SEPARATOR), expecting identifier (T_STRING) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 15\n[28-Oct-2015 12:56:37 Europe/Rome] PHP Parse error:  syntax error, unexpected '\\' (T_NS_SEPARATOR), expecting identifier (T_STRING) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 15\n[28-Oct-2015 13:39:32 Europe/Rome] PHP Fatal error:  Class 'MainController' not found in /Applications/MAMP/htdocs/drive/vendor/slim/slim/Slim/Route.php on line 171\n[28-Oct-2015 13:39:35 Europe/Rome] PHP Fatal error:  Class 'MainController' not found in /Applications/MAMP/htdocs/drive/vendor/slim/slim/Slim/Route.php on line 171\n[28-Oct-2015 13:39:36 Europe/Rome] PHP Fatal error:  Class 'MainController' not found in /Applications/MAMP/htdocs/drive/vendor/slim/slim/Slim/Route.php on line 171\n[28-Oct-2015 13:39:47 Europe/Rome] PHP Fatal error:  Class 'MainController' not found in /Applications/MAMP/htdocs/drive/vendor/slim/slim/Slim/Route.php on line 171\n[28-Oct-2015 13:39:48 Europe/Rome] PHP Fatal error:  Class 'MainController' not found in /Applications/MAMP/htdocs/drive/vendor/slim/slim/Slim/Route.php on line 171\n[28-Oct-2015 13:39:48 Europe/Rome] PHP Fatal error:  Class 'MainController' not found in /Applications/MAMP/htdocs/drive/vendor/slim/slim/Slim/Route.php on line 171\n[28-Oct-2015 13:41:25 Europe/Rome] PHP Fatal error:  Class 'Slim\\Slim' not found in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 10\n[28-Oct-2015 13:42:28 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:42:29 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:42:29 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:42:29 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:42:30 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:42:30 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:42:30 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:42:45 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:46:36 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:52:04 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 20\n[28-Oct-2015 13:52:07 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 20\n. also updated the routes with :\n$app->get('/',function() use ($app){\n  use \\Ultimateboard\\MainController as MainController;\n  new MainController->index();\n});\n[28-Oct-2015 12:56:36 Europe/Rome] PHP Parse error:  syntax error, unexpected '\\' (T_NS_SEPARATOR), expecting identifier (T_STRING) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 15\n[28-Oct-2015 12:56:37 Europe/Rome] PHP Parse error:  syntax error, unexpected '\\' (T_NS_SEPARATOR), expecting identifier (T_STRING) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 15\n[28-Oct-2015 13:39:32 Europe/Rome] PHP Fatal error:  Class 'MainController' not found in /Applications/MAMP/htdocs/drive/vendor/slim/slim/Slim/Route.php on line 171\n[28-Oct-2015 13:39:35 Europe/Rome] PHP Fatal error:  Class 'MainController' not found in /Applications/MAMP/htdocs/drive/vendor/slim/slim/Slim/Route.php on line 171\n[28-Oct-2015 13:39:36 Europe/Rome] PHP Fatal error:  Class 'MainController' not found in /Applications/MAMP/htdocs/drive/vendor/slim/slim/Slim/Route.php on line 171\n[28-Oct-2015 13:39:47 Europe/Rome] PHP Fatal error:  Class 'MainController' not found in /Applications/MAMP/htdocs/drive/vendor/slim/slim/Slim/Route.php on line 171\n[28-Oct-2015 13:39:48 Europe/Rome] PHP Fatal error:  Class 'MainController' not found in /Applications/MAMP/htdocs/drive/vendor/slim/slim/Slim/Route.php on line 171\n[28-Oct-2015 13:39:48 Europe/Rome] PHP Fatal error:  Class 'MainController' not found in /Applications/MAMP/htdocs/drive/vendor/slim/slim/Slim/Route.php on line 171\n[28-Oct-2015 13:41:25 Europe/Rome] PHP Fatal error:  Class 'Slim\\Slim' not found in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 10\n[28-Oct-2015 13:42:28 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:42:29 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:42:29 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:42:29 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:42:30 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:42:30 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:42:30 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:42:45 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:46:36 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 19\n[28-Oct-2015 13:52:04 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 20\n[28-Oct-2015 13:52:07 Europe/Rome] PHP Parse error:  syntax error, unexpected '->' (T_OBJECT_OPERATOR) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 20\n[28-Oct-2015 13:57:16 Europe/Rome] PHP Parse error:  syntax error, unexpected 'use' (T_USE) in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 18\n. @geggleto 5.5.10\n. @JoeBengalen did add 'use' at the top of file but same thing it keeps : 500 server error , but if i use router e.g: \n$app->get('/testing',function(){\n  echo 'testing works';\n});\nit works. \n. this is last log after making the changs you said : \n[28-Oct-2015 14:04:19 Europe/Rome] PHP Fatal error:  Class 'Slim\\Slim' not found in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 11\n[28-Oct-2015 14:04:21 Europe/Rome] PHP Fatal error:  Class 'Slim\\Slim' not found in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 11\n[28-Oct-2015 14:04:21 Europe/Rome] PHP Fatal error:  Class 'Slim\\Slim' not found in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 11\n[28-Oct-2015 14:04:21 Europe/Rome] PHP Fatal error:  Class 'Slim\\Slim' not found in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 11\n[28-Oct-2015 14:04:21 Europe/Rome] PHP Fatal error:  Class 'Slim\\Slim' not found in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 11\n[28-Oct-2015 14:04:22 Europe/Rome] PHP Fatal error:  Class 'Slim\\Slim' not found in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 11\n[28-Oct-2015 14:04:22 Europe/Rome] PHP Fatal error:  Class 'Slim\\Slim' not found in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 11\n[28-Oct-2015 14:04:22 Europe/Rome] PHP Fatal error:  Class 'Slim\\Slim' not found in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 11\n```\nlet's say my router.php looks like this : \nuse \\Ultimateboard\\MainController;\n/\n@Routes.php\n Set your app routes target your routes with your controllers here.\n/\n/\n Setting up the slim framework class. and calling it's required functions\n*/\ndefine('APP_DIR',dirname(FILE));\n$app = new \\Slim\\Slim(\n  array(\n    'view'=> new \\Slim\\Extras\\Views\\Twig(), //calling twig template engine class.\n    'debug'=> true, // debug option (change it inside config.php)\n    'log.enabled' => true\n  )\n);\n$app->get('/',function() use ($app){\n  (new MainController)->index();\n});\n$app->get('/testing',function(){\n  echo 'testing works';\n});\n$app->run();\n```\n. @geggleto   my index:\n```\nrequire 'vendor/autoload.php';\nrequire 'app/loads/routes.php';\n```\n. @geggleto  \n[28-Oct-2015 14:14:07 Europe/Rome] PHP Fatal error:  Class 'Slim\\Slim' not found in /Applications/MAMP/htdocs/drive/app/loads/routes.php on line 10\n. Resolved all :D ,,, thanks alot ,,, \n(new Ultimateboard\\Controllers\\Maincontroller())->index();\nthis worked \nalso class slim resolved , it was permission error from the folders ,, don't know why it changed it was working before , \nbtw thanks :+1: \n. ",
    "errodr": "Thanks much!\n. ",
    "shashvattrip": "Nope, this is the code when the user is false. I had omitted the code for brevity. To be clear, this code replaces comment with [0]\n$appResponseMessage = \"Unauthorized\";\n$app->response->setStatus(401);\n$appResponseJson = json_encode(array('message' => $appResponseMessage));\n $app->response->body($appResponseJson);\nSo that is not the problem. The user is true and this code executes for sure.\n// Do something here [2]\n        $appResponseMessage['message'] = \"loggedIn\";\n        $appResponseMessage['role'] = $role;\n. No the problem wasn't in PHP code. It was a weird problem in phpmyadmin. I was copy-pasting some value in a column(VARCHAR 255) through phpmyadmin which as being queried in the PHP code. When I remove that row with copy-pasted value, and typed it manually, the select query started to work and php code ran fine.\nWhich leads me to believe that there is an issue with the text I was pasting. However, I was simply copying about 150 characters with no special characters apart from punctuation. I still don't know what's wrong and as I am on a deadline, I decided to just type out the text. \n. That's the thing. Error logging was enabled. Even then it failed silently.\n. Yup, lesson learnt on special characters.\n. ",
    "sankalpsans": "Have a look at your else block. You're trying to assign a value to $appResponseMessage['some_index'] assuming that $appResponseMessage is an array, which it is not (yet). So, try this:\n$app->post('/login', function () use ($app) {\n  try {\n    $user = Sentinel::authenticate($userCredentials);\n    if ($user == false) {\n      $appResponseMessage = \"Unauthorized\";\n      $app->response->setStatus(401);\n      $appResponseJson = json_encode(array('message' => $appResponseMessage));\n      $app->response->body($appResponseJson);\n    } \n    else {\n      $loggedIn = Sentinel::login($user);\n      $role=$user[\"roles\"][0][\"slug\"];      \n      $userId=$user[\"id\"];\n      $appResponseMessage = array();\n      if ($role == \"roleA\") {\n        //Do something here[1]\n        $appResponseMessage['message'] = \"loggedIn\";\n        $appResponseMessage['role'] = $role;\n      } \n      else {\n        // Do something here [2]\n        $appResponseMessage['message'] = \"loggedIn\";\n        $appResponseMessage['role'] = $role;\n      }\n      $appResponseJson = json_encode($appResponseMessage);\n      $app->response->body($appResponseJson);\n    }\n  }\n  catch(Exception $e) {\n    $appResponseJson = json_encode(array('message' => $e->getMessage()));\n    $app->response->body($appResponseJson);\n  }\n});\nI've just initialized that array as $appResponseMessage = array();\n. In that case, it is possible you made a syntactical error. Maybe a single / double quote here and there. Enable error logging to be verbose and read through them.\n. Could you paste your code snippet with the exact characters that cause it to fail?\n. ",
    "tthiery": "I just tried sending as part of my JSON request a property with name _method. Is not recognized. Also the Slim Framework code - as far as I understand it - does not parse the JSON. The MethodOverride middleware reads the $req->post() methods ... which again reads the _POST in case of content-type other than form data (I have not debugged, just read the code here). Maybe I missed a line (i send here text/plain instead json content-type ... but i have not seen this affecting it).\nPOST /blaba\nAccept:/\nAccept-Encoding:gzip, deflate\nAccept-Language:en-US,en;q=0.8,de-DE;q=0.6,de;q=0.4\nConnection:keep-alive\nContent-Length:100\nContent-Type:text/plain\nUser-Agent:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36\n{\n   foo: \"bar\",\n   _method: \"DELETE\"\n}\n. Slim is a general purpose api framework. It features method overrides for form posts and headers. It does not support query string based overrides, which is a pity. I do not change my api design and cripple the data model because of a technology choice (especially since I already have this feature implemented as a slim middleware). I think the slim maintainer should decide yes or no for the feature request. Discussing which client framework is used (does not matter BTW its plain jquery) does not help. \nFurther using put and delete is a recommended best practice ... Also for client side webs, spa and apps.\n. @geggleto btw: Thanks for the Middleware. have not upgraded yet to Slim with PSR-7 Middlewares .. but it is on the list ;).\n. ",
    "EmadAdly": "thanks you tuupola \nJust that only ,ha ha ha I try a hour ago to make them work through the filter or Middleware\nprofile here by mistake \nthanks\n. ",
    "c-neves": "Hmm. Thanks. The documentation under Request -> The Request URI misled me.\n\nYou can fetch the PSR 7 Request object\u2019s URI with its getUri() method:\n$uri = $request->getUri();\nThe PSR 7 Request object\u2019s URI is itself an object that provides the following methods to inspect the HTTP request\u2019s URL parts:\ngetScheme()\ngetHost()\ngetPort()\ngetPath()\ngetBasePath()\ngetQuery() (returns string)\ngetQueryParams() (returns associative array)\n. \n",
    "losttheplot": "Given the URI https://www.whatever.co.uk/api/getEvents/&foo=red&bar=green, neither $request->getQueryParams() nor $request->getUri()->getQuery() return any values. Am I doing something wrong please, or is this a bug? What is the correct way to extract the values for foo and bar from the URI please?\n. Thanks. I tried that first off but got a Page Not Found. However, having now changed $app->get('/getEvents/{args]', function ($request, $response, $args) { to $app->get('/getEvents/', function ($request, $response, $args) { it works fine. Sorry, I'm brand new to Slim3 and just needed a nudge in the right direction :)\n. I'm new to OOP, APIs and routes but not to how URIs normally work. As I was getting a Page Not Found using '?' I thought that Slim might work differently to what I expected. Needless to say, I now feel like a total noob, which I am not. Time for a beer me thinks - thanks ;)\n. ",
    "vikkio88": "I am terribly sorry, I just realize that I was missing some files and so was not a route problem. thank you the same, and apologize \n. ",
    "mikicaivosevic": "Yea, ofcourse. \nI just wanted to suggest to add clickjacking protection middleware in \"Add Ons\", the same as CSRF protection middleware.\n. ",
    "orykami": "@geggleto Well, it's Slim\\CallableResolver which construct our Callable via Strategies with ($request, $response, $args). So __construct() with no arguments right ? \n. @akrabat I'm on 3.0.0-RC1, that's why i mentionned it.\n. I will try to implement something with it. \nI'll be back ! :coffee: \n. ",
    "geekish": "I've been using the trailing slash middleware in oscarotero/psr7-middlewares for this reason. :)\n. How is that any different than app-level middleware then?\n. What @designermonkey said, except I think that 1) yes routes should begin with a slash, 2) routes may end with or without a slash, but groups should NOT end in slashes, since they are prefixes. Trailing slashes should be handled via middleware. Just my opinion though.\n. > It implements an interface. See https://ocramius.github.io/blog/when-to-declare-classes-final/\nFrom that article:\n\nFinal classes only work effectively under following assumptions:\nThere is an abstraction (interface) that the final class implements\nAll of the public API of the final class is part of that interface\n\nSlim\\Container implements methods not defined in the implemented interface...\n. Is it April already?\n. I see no problem in having one extra interface in Slim as long as it is completely optional to use.. @geggleto Just had to throw my two cents in since it seems there are a few against this. I see no problem with one extra interface when the alternative is creating a separate package just for the interface. I know Expressive does this but they have some helpers in there IIRC.. You have a Collection class in Slim, why not use it for a Settings class? I did.. > And by \"supported containers\" I mean what @geggleto means: containers that have the default services registered.\n+1 for this. Especially since I just released Slimbox.\n. It's up to you to create and return them, which is why a ResponseFactory of some sort is going to be very useful.. @akrabat Since the Response object is not already available as it was previously, it provides an easy way for users to create the Response, and it gives you a place to put some of the non-PSR-7 methods currently in Response. See my comment on #2056.. If you're going to continue using the array $args by default I'd recommend not adding them as request attributes. See #2019 \n. Wouldn't a ResponseFactory be better than making a Response class for every possible status?\n. Looks like they're trying to create a PSR for HTTP factories, think something like this:\nhttps://github.com/http-interop/http-factory-slim/blob/master/src/ResponseFactory.php\nBut with some methods like:\nphp\npublic function createRedirectResponse($url, $status = 302) {\n    return (new Response)->withHeader('Location', $url)->withStatus($status);\n}\npublic function createJsonResponse($url, $content) {\n    // basically the code Response->withJson() does\n}\n. You mean into this repository?\nWould you still use Jekyll? Just curious.. The latest issue (#2130) has me thinking about docs again.\nLooking at the 4.0 roadmap (#1686) I think this issue was actually about moving the docs from the website repo into this one, as per your second-to-last bullet point there:\n\nMove documentation into main repo and publish to website on each new release. That way we can insist on documentation with the PR.\n\nI definitely think this is a good idea:\n\nIf 2.x docs are also moved, all docs will have a unified build, and can be served together; very useful for when 4.x is released or even while it's still in development\nDocumentation can be added with PRs here, which should help with \"documentation missing\" issues\nIt will probably be easier to add API docs to the build (#1617) and mayyybe PDF? (#2130 again)\n\nThe only problem I can see from this is if docs are moved from their separate homes to a unified one, links will be broken. I have no idea if/how Jekyll/Github Pages handle redirects.. Isn't __invoke there so you can run the App itself as a middleware?\nAre you planning on removing that functionality entirely or will you replace it with process(ServerRequestInterface $request, DelegateInterface $delegate)?\n. The use case I have in mind is best explained here:\nhttps://zendframework.github.io/zend-expressive/cookbook/common-prefix-for-routes/\nMight be time for me to test the differences between using route groups and apps as middleware.\n. Going off of my earlier comments, in my testing the __invoke method is only usuable as a middleware inside of Slim. I had to make a wrapper class that calls the current process method instead. I would like to Slim as an actual middleware itself.. Just chiming in with a suggestion... it might help to suggest that devs use vendor/bin/phpunit instead of a global install so everyone is writing and running tests on the same(-ish) version. Definitely run into this before.... Agreeing with @kminek here... I use an extended Collection class for the settings so I can use my container of choice to inject it where I need it (example).. Can't output buffering be handled in a middleware? Users could simply register the middleware on the routes, groups, etc. that you want it on... it'd have to be registered first though I suppose.. The determineContentType() method (link) does get the content-type from the request, but Slim can only handle so many content types (note the recommendation in the docblock to use willdurand/negotiation if your needs are more complex).\n@geggleto \n\nWhen an invalid page is requested with the header application/json a return type of text/html is given.\n\nIt looks like the regex the determineContentType() method is using only matches content types with +json, so text/html is returned when application/json is provided. Improved regex would solve this issue.. I would definitely prefer that we pass Router through instead and get rid of the helper methods on App, but that would be out of the scope for this PR.\nBesides that, I don't see how passing App through is any smellier than binding the closure to it; that kind of magic seems pretty smelly to me.. I've re-added the closure binding, but didn't add a trigger_error - I agree there needs to be some way to notify the user about the deprecation but that would trigger on every route using a closure whether the user utilizes the bind or not.. ",
    "piernik": "Oh with return - thanks\n. If, according to RFC, they are always uppercase it could be case insensitive. It would be easier for developer.\n. header(\"HTTP/1.1 406 Reaon\");\nOutputs 500 error - it's something with server:/. I do think it's bug in docs. I'm using slim 3.8.1.\nAs I posted in edit I think it's related to https://github.com/slimphp/Slim/issues/2377\nI'm trying to isolate it...\nEdit:\nI've updated to 3.9.2. It's isolated. I'll continue issue in  https://github.com/slimphp/Slim/issues/2377. Ok. I updated slim library to 3.9.2. And now it is even worse. I always get Option phase.\nI've created github project: https://github.com/piernik/slimError\nHere is my frontend: https://alpha.infirma.pl/auth/login/\nThere are two buttons: Fetch from dummy source which leads to https://api.infirma.pl/2.6.0/dummy/backend. I get Options failed error.\nBut fetching in it browser url works: https://api.infirma.pl/2.6.0/dummy/backend.\nI don't think it's CORS issue.\n. I don't know what to do with that info :). wow addContentLengthHeader solved problem for me. \nThank You very much. Happy New Year ;). ",
    "TimoDJatomika": "I don't have the  'withRedirect' function:\nI get the following error:\n Fatal error: Call to undefined method Slim\\Http\\Response::wihRedirect()\nWhat did I wrong \n. oh sorry my bad\nNow it works :+1: \n. ",
    "niranjanwnmt": "Hi,\n//in controller\nreturn $response->withRedirect('/checkParams');\nthis is not working in controller.\n//route\n$app->post(\n    '/checkParams',\n    'ValidatorController:checkParams'\n);\nis there anything more to be done while using in controller?. @akrabat Wow that was lightning fast response. Thanks for super quick response. I will change my route to GET.. @akrabat \nI got it working as expected when I turned POST to GET. Now what I am finding challenging is allow cross domain request. Let me explain my scenario in brief.\n1. my web app domain say http://mywebapp.com will call my API end point at http://myapi.com/process/\n2. the internal working of the ProcessController API will be as follows\n  a. process method will do some work and will redirect to other controller method ValidatorController:checkParams\n  b. ValidatorController:checkParams will check parameters and will redirect to another controller say ExecutorController:executeprocess.\nNow if request to API call is from same origin then it works like charm. Complete redirections work as expected and I get final result.\nBut in case of cross domain call, My ProcessController method gets called but it halts execution where I redirected it to ValidatorController:checkParams with no error or warning.\nFollowing changes I have made.\nin index.php of API codebase\nif (isset($_SERVER['HTTP_ORIGIN'])) {\n    header(\"Access-Control-Allow-Origin: {$_SERVER['HTTP_ORIGIN']}\");\n    header('Access-Control-Allow-Credentials: true');\n    header('Access-Control-Max-Age: 86400');    // cache for 1 day\n}\n  // Access-Control headers are received during OPTIONS requests\n  if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {\n    if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD'])) {\n        header(\"Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS\");\n    }\nif (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS'])) {\n        header(\"Access-Control-Allow-Headers: {$_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']}\");\n    }\n}\nmy redirection code in ProcessController which should redirect to ValidatorController:checkParams\n$qryParams = http_build_query(['requestlogID'=>$result]);\n                $uri = $request->getUri()->withQuery($qryParams)->withPath($this->_router->pathFor('checkParams'));\n                return $response->withStatus(200)\n                        ->withHeader(\"Access-Control-Allow-Origin\", $_SERVER['HTTP_ORIGIN'])\n                        ->withHeader(\"Access-Control-Allow-Credentials\", true)\n                        ->withHeader(\"Access-Control-Max-Age\", 86400)\n                        ->withHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\")\n                        ->withHeader(\"Location\", $uri);\ncan you please guide what am I doing wrong?\nThanks. ",
    "bbmattieu9": "Redirecting not working...Someone please help debug\nHomeController has---> \n$app->get('/', 'HomeController:index')->setName('home');\nAuthController has --->\nreturn $response->withRedirect($this->router->pathFor('home'));\nNot working...keeps redirecting back to auth/signup instead of index page\n. index.php.zip\nAttached here-with is an index file containing my source code. i hope this will help you debug the code. thanks in advance. @akrabat Attached here-with is an index file containing my source code. i hope this will help you debug the code. thanks in advance\nindex.php.zip\n. ",
    "cleartext": "Thanks guys, that doesn't work as is. I don't see an addGlobal in Twig-View at all, although the pointer to $this->get('view') helps a lot in that at least now I have a valid View object. Will keep trying.\nWill also feedback any other issues I have, with my amateur hat on :)\n. There's something very odd happening here, I have;\n// Create container\n$container = new \\Slim\\Container();\n// Register component on container\n$container['view'] = function ($c) {\n    $view = new \\Slim\\Views\\Twig('views/');\n    $view->addExtension(new \\Slim\\Views\\TwigExtension(\n        $c['router'],\n        $c['request']->getUri()\n    ));\n    return $view;\n};\n// Create app\n$app = new \\Slim\\App($container);\n$app->add(function ($request, $response, $next) {\n    $response = $next($request, $response);\n    $host = $request->getUri()->getHost();\n    $this->get('view')->getEnvironment()->addGlobal( 'host', $host );\n    return $response;\n});\nThen in my template;\nExperimental Project 55 {{ host }}\nJust to test for now... still no joy. All runs fine, but 'host' appears to be empty.\nJust ran a composer update to be sure I have the latest, I did get a small twig update, but no change. I think I need to leave this for a day and come back to it, been spending too long thinking too hard I think!\n. Ah, that fixed it. I knew I'd been looking at this far too long.\nI should probably get into the habit of returning $next($request, $response) maybe?\nA disadvantage of working from home, no-one close by to turn around to and ask for a quick look, thanks for spending the time on this for me Rob and Andrew. \n. That helps, penny drops on 'middleware' now, that's the first time I've seen it explicitly said that 'is code that sits between request and response'.  v3 Docs could explain this a bit better, I will re-read v2 docs as well. rgrds, David.\n. ",
    "alexweissman": "This is actually one of the main things holding me back from upgrading to Slim 3 (everything else looks really great!)\nIf there is some equivalency between hooks and middleware, would it be possible to implement generic Slim2-style hooking functionality as a piece of Slim3 middleware?\n. Hmm, so, for those of us building applications that require a means of hooking-in functionality (to support plugins, themes, etc), should we implement our own hooks then?  Is there a good third-party package for this?\n. Well, you said so yourself - middleware \u2282 hooks, but not the other way around.  Lets take my framework UserFrosting, for example, which is built on Slim.  I have a \"register account\" route, which might have the following pseudocode:\n$app->post('/account/register/?', function () use ($app) {    \n    // Validate user data\n    ...\n    // Hash new user password\n    ...\n    // Create new User model\n    ...\n    // Store new user to database\n    ...\n    // Send confirmation email to new user\n    ...\n});\nSuppose I want to allow third-party developers to easily hook into register, and modify some aspect of the registration process before sending the email to the new user (let's take, as an example, setting up a gravatar icon or something).  In Slim 2, this was easily done via:\n```\n    // Store new user to database\n    ...\n    // Send confirmation email to new user\n    ...\n$app->applyHook('registration.send_confirmation_email.before');\n\n// Send confirmation email to new user\n...\n\n```\n. Thanks!  That looks like a good alternative.  Maybe this package could be an official recommendation in the Slim3 docs, as a replacement for those who truly need hooks?\n. Ahhh, I see!  Like many things, this is an issue of vocabulary ;-)  I'm not sure if the use of the word \"hook\" in this way was invented by Wordpress, but it certainly was popularized by it:\n\nMany WordPress Plugins accomplish their goals by connecting to one or more WordPress Plugin \"hooks\". The way Plugin hooks work is that at various times while WordPress is running, WordPress checks to see if any Plugins have registered functions to run at that time, and if so, the functions are run. These functions modify the default behavior of WordPress. \n\nNot that WP is a paragon of good programming and software design practices (it's definitely not), but WP refugees are everywhere, and would likely understand \"hook\" to mean \"event dispatcher\".\n. > If the leading / is missing, then the base path is set.\nDo you mean \"base path is set\" -> \"leading / will be stripped\"?\nAlso, what is the motivation behind this behavior?  Is this part of PSR-7?. so, what would be the proper way to use Monolog with Slim 3?  Right now I'm experimenting with injecting a Monolog Logger object into a custom error handler, and writing to the Logger instead of using error_log.\n. I like Gitter, and use it for my own Slim-based project.  However, be warned that gitter public chat logs are search engine indexed by default (though this can be disabled by the chat owner), and that they prevent messages from being deleted after 5 minutes or so, effectively making anything you say in chat permanent.  See this issue.\nI deal with this \"feature\" by providing a disclaimer in my chat.  There are alternative chat platforms out there that could be self-hosted, but I'm not sure if they are as easily integrated with Github.\nOn StackOverflow, you should consider upvoting my recommendation to merge the slim and slimframework tags.  Alternatively, they can be merged as tag synonyms.\n. I actually just ended up registering a separate service (with blackjack, and hookers), keyed to config:\n```\n    // Site config object (separate from Slim settings)\n    $container['config'] = function ($c) {\n        // Create and inject new config item\n        $config = new \\UserFrosting\\Config\\Config();\n    $config->setPaths([\n        ...\n    ]);\n\n    $config->loadConfigurationFiles('production');\n\n    return $config;\n};\n\n```\nSo, I let Slim use settings for its internal features, but any other configuration my application requires is accessed through $container['config'].\n. So, my use case is that I have a Slim application that contains routes for both fully-rendered HTML pages, and routes for a JSON API.  I would like to apply a certain piece of environment-checking middleware to the fully-rendered pages, but not the JSON API.  In each of these types of routes, I also have some routes that need to be access-controlled, and some that should be \"public\".  Again, I'd like to use middleware for this.\nAs you can see, I'd have to either use route-level middleware, or I'd have to break it up combinatorially into groups (page-auth, page-public, api-auth, api-auth).  I guess route-level middleware is the best solution at the moment, but I can imagine situations where I want to convey additional information to the middleware about a certain route.  Conversely, this could also be useful in something like CSRF-guard, to whitelist specific routes when global middleware has been applied.\nNow that I think about it, we could make this feature even more generic.  Instead of route \"tags\", we could simply have route properties.  This would be an associative array of metadata to be associated with a route.  This would be distinct from the contents of the request itself.\n@JoeBengalen I wouldn't really consider these to be part of the request, or even a modification of the request, so I don't think setArgument and getArgument would be right.\n. @mathmarques using groups works in the simple case, but suppose I want to apply some authentication middleware to /about and /flash-messages.  Groups constrain us to a many-to-one relationship.  I'd have to choose which middleware is \"important enough\" to deserve groups, and any other middleware would have to be applied on the per-route level.\nAs @danielgsims and @RyanGittins mentioned, something like tags or properties would make a clear semantic distinction.\n. Yes!  @RyanGittins sums it up perfectly.  Or, in the \"properties\" variation:\n$app->getRoutes()->withProperty('isPage', true)->add( $addHeaderFooterWrap );\n$app->getRoutes()->withProperty('isPopup', true)->add( $addEmailCaptureModal );\n...\nI could even imagine some crazy CMS that someone comes up with in the future, where they allow the user to dynamically enable middleware on certain types of routes.\nif ($flagRateLimitAjax)\n    $app->getRoutes()->withTag('ajax')->add( $rateLimiter );\nMaybe something like this would be better done in the middleware itself, but you get the idea.\n. I am!  Though, I think I've pretty much expressed my ideas already.\n. Well, my main interest for now is to be able to override exact-match routes:\ncore.php\n$app->get('/foo/.*', ...)\nplugin.php\n// Overrides the definition in core.php\n$app->get('/foo/.*', ...)\nThe ability to override or extend with more specific routes would be nice, but yeah that could wait until Slim 4.\n. yeah, that would probably help a bit.  It would be better if overriding were built-in though, because otherwise I am essentially replicating Slim's wrapper and list of routes with yet another list :wink:\n. It looks like it would be pretty easy to do, actually.  In this function: https://github.com/slimphp/Slim/blob/3.x/Slim/Router.php#L156-L158\nAll we'd need to do is check if a route with the same methods, pattern, and group already exists, and then replace it in $this->routes with the same identifier, rather than incrementing to a new identifier.\nSome clever indexing when adding routes (for example, a unique signature) would make this more efficient as a simple array lookup, so we don't end up with an O(n^2) complexity.\n. Ok, I've come up with a very basic way to support overriding exact-match routes, by overriding Router::map: https://github.com/userfrosting/UserFrosting/blob/dev/app/core/src/Router.php\nUnfortunately, it only allows overriding routes via an exact match of methods and pattern.  If for example, you define a multi-method route earlier (e.g. [GET, POST]), you wouldn't be able to override just GET later on - you'd have to redefine the entire [GET, POST] route.  The same goes for overriding a subset of a wildcard pattern.\n. @l0gicgate do you have any experience with whoops?  I wonder if Slim could just delegate all error-handling to this library.. > I dislike the fact that they are tightly coupled together.\n@l0gicgate Are you talking about my CoreErrorHandler, or Whoops?\n. ",
    "ArtemGordinsky": "Thanks!\nIt's weird but it doesn't seem to be working for me:\nHTTP/1.1 200 OK\nDate: Fri, 13 Nov 2015 13:27:18 GMT\nServer: Apache\nX-Powered-By: PHP/5.6.10\nContent-Type: text/html; charset=UTF-8\nAre you using RC 2 too?\n. Yep, a stray whitespace was the culprit. Thanks a lot for your help!\n. ",
    "michaelboke": "Thanks.\n. Having the same issue since 3.2 my auto wiring isn't working anymore.\n@irfanevrens i added a pull request on #1783 that now passes the resolvedCallable result to the foundHandler. Restoring the old behavior.\n. ",
    "AdamGold": "Great, thank you very much.\n. ",
    "theodorejb": "Why would anyone make a group containing only a blank string or slash? What's the point of a group in that case?\n. @geggleto Ah, that makes sense. Why not always require a slash, though, if it means the same thing as a blank string?\nMy typical use case is to have a group like '/users' with a routes inside like GET '/{id}' and POST '/'. Previously the POST route resolved to '/users', but in RC2 it changed to '/users/' and I had to make the POST route a blank string for my API to continue working as expected. If this pull request makes both the blank string and slash mean the same thing, why even allow blank strings? I'd rather enforce consistency in how routes are defined.\n. @silentworks The description for this PR says \"Routes and Route Groups are expected to always start with a slash\", but above that there are a bunch of examples of routes and route groups with a blank string. If a slash is expected, shouldn't routes and route groups that don't start with a slash produce an error?\n. I have to agree with @geggleto on this. Too much magic makes the behavior more confusing and difficult to predict (not to mention error/bug prone). By default I think Slim should just concatenate the strings for nested groups and routes. Middleware could optionally be used to enforce conventions for different projects.\n. So do we want to keep the current behavior in RC2, then, rather than this pull request? Personally I am okay with this - I have already updated my apps to work with RC2 and it is working well.\n. Here's a basic example app: https://github.com/theodorejb/slim-group-performance.\nIt's not the performance of Slim's route matching that's a problem, but simply the fact that Slim runs all the code in group/subgroup callbacks even when the group doesn't match the active route.\nIn a real-world app, the code for generating routes in a group callback can be non-trivial and take several milliseconds to run. When it has to run for scores of different groups that don't contain the requested route, this has a negative impact on performance.. @akrabat I've never used urlFor() and I'm not sure what the use case for it would be. Couldn't a user just create their own mapping between names and routes if they wanted to reference a route path in multiple places?\nI'm not sure what you mean by \"use strings rather than closures in $app->get().\" Each set of route callbacks relies on a unique class inherited via its use() construct - a static callable wouldn't have this info. I updated my example app to make this clearer.\nThe performance issue isn't from calling Slim's group() method, but from executing the function returned by endpointFactory() hundreds of times for subgroups that don't match the requested route.. > What we are asking is if you use a string as your route callback then you shouldn't have performance issue.\nHow can I pass a class name to the route callback with this approach? You can see a real-world example of this here: https://github.com/theodorejb/phaster/blob/v1.0.2/src/RouteHandler.php#L67.. > a route callback will always execute when the app is initialized, because this is used for urlFor() as noted before. This is something I make heavy use of\nIf a feature that not everyone uses makes the library 50x slower, IMO the cost is greater than the benefit. Would it be possible for Slim to only run all the callbacks if urlFor() is actually used, so those who do not use it won't have to pay the performance penalty?. @silentworks $class is a string containing a class name which the route callback constructs to handle the request.. I tried out this approach in my test repository: https://github.com/theodorejb/slim-group-performance/blob/da1d1dc4b1cea81d352e60752463c1a048b2ccbd/init.php.\nUnfortunately, it doesn't improve the performance in any meaningful way (average response time went from 0.33 seconds to 0.32 seconds). I think the reason is that the overhead of creating a closure has just been swapped with the overhead of calling setArgument on every route.. Only the group callbacks are invoked. Your example doesn't use groups.. Our real-world app has many subgroups inside of groups, just like this example. The example does generate a higher number of groups and subgroups than our real-world app currently has, to simulate expected performance as our API continues to grow.\nI could manually write out all the code for group/subgroup callbacks in my example repo, but I don't expect that this will change performance much compared to using the loop. The slowdown isn't from looping, but from registering thousands of routes in groups/subgroups that don't match the requested route.. Either LIFO or FIFO is fine with me as long as it is clearly documented. I would be in favor of whichever one has the simplest implementation, to keep Slim as slim as possible. \ud83d\ude03. Making it a configurable option may sound nice, but it would make the code even more complex and also make it harder to contribute to other projects that use Slim, because it wouldn't be clear whether their middleware is LIFO or FIFO without looking at their configuration settings.. Would switching to the Symfony router fix #2165?. Can you also include an example using Guzzle/psr7?. Was it intentional to rearrange these use statements? It seems like it would be better to keep them in alphabetical order. It looks like this was changed in a bunch of different files.. ",
    "KevinWaterson": "I am guessing you are correct ;)\nHow can I download RC2 ?\nThanks\nKev\nOn Fri, Nov 20, 2015 at 2:58 AM, Glenn Eggleton notifications@github.com\nwrote:\n\nI think you might have miss clicked :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/pull/1600#issuecomment-158099629.\n\n\n\n\"Democracy is two wolves and a lamb voting on what to have for lunch.\nLiberty is a well-armed lamb contesting the vote.\"\n. This is not a documentation issue. This is a deployment issue.\nThe application no longer works out-of-the-box.\nMany who use Slim are new to API/PHP and have little to know idea of configuring htaccess or even that it exists.\nQuite simply, when the application is first installed, it seems to be broken.\n. If it is not a deployable application, \u00a0why is there an index.php?\nSent from Samsung Mobile\n-------- Original message --------\nFrom: Piotr notifications@github.com \nDate:21/11/2015  12:19  (GMT+00:00) \nTo: slimphp/Slim Slim@noreply.github.com \nCc: Kevin Waterson kevin.waterson@gmail.com \nSubject: Re: [Slim] .htaccess (#1601) \n\n\nThis repository is a library (installed into /vendor/slim/slim folder), not a deployable application with a public folder.\nWhile one don't have to use composer and can put everything into a public folder, it should be considered is a bad practice. I see no reasons to expose metadata files like composer.json, CONTRIBUTING.md to public access other than to show which architecture that was used to build an app.\nBut I think that the slimphp organisation should have own Slim v3 skeleton app repository, similar to @akrabats work, like it has for Slim v2\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "ximex": ":+1: \n. ",
    "sirdiego": "Hey @geggleto,\nI know that it is mostly the same, but it isn't exactly. On the container you can access the stored entries by $container->get('name') and $container['name']. For the application you have to use $this->name, because the get method is already used for the routes and the array access dies with this exception:\nFatal error: Cannot use object of type Slim\\App as array\nThat's why I started thinking about the reasoning behind the different bindings.\n[edit] Oh by the way, the container also has no magic __get implemented, so there is no $container->name possibility. So I have to be aware of the exact context I'm in to use the right way of getting to the entry.\nNotice: Undefined property: Slim\\Container::name\n. Awesome, thanks!\n. Okay, nevermind. My custom resolver now looks like this. It's not what I had in mind in the first place but I guess it's okay.\n``` php\nclass CallableResolver implements CallableResolverInterface\n{\n    /*\n     * @var ContainerInterface\n     /\n    protected $container;\n/**\n * @var CallableResolverInterface\n */\nprotected $resolver;\n\n/**\n * @param ContainerInterface $container\n */\npublic function __construct(ContainerInterface $container)\n{\n    $this->container = $container;\n    $this->resolver = new \\Slim\\CallableResolver($container);\n}\n\n/**\n * @param mixed $toResolve\n * @return callable\n */\npublic function resolve($toResolve)\n{\n    if (is_string($toResolve) && class_exists($toResolve) && method_exists($toResolve, 'execute')) {\n        $toResolve = $toResolve . ':execute';\n    }\n    return $this->resolver->resolve($toResolve);\n}\n\n}\n```\n. ",
    "bmutinda": "@danielemontesi  Got any solution for your issue?\n. @tuupola Thanks it works. I am using apache. Does this also fix if am using nginx?\nFor apache server, this is how I had hacked it :dart: \nphp\n$headers = apache_request_headers();\n$headers[\"Authorization\"];\n. ",
    "rbairwell": "Yep, I'm, sure. I've just done new test case which consists of a single file:\n```\n<?php\n// file /var/www/test/index.php\nrequire DIR.'/vendor/autoload.php';\n$app=new \\Slim\\App();\n$app->get('/204test',function ($request,$response,$arg) {\n    $response = $response->withStatus(204, 'No Content');\n    return $response;\n});\n$app->run();\n```\nwith my nginx configuration being:\n```\nserver {\n    listen 88;\n    server_name \"\";\n    root   /var/www/test/;\nlocation / {\n    try_files $uri $uri/ /index.php$is_args$args;\n}\n\ninclude php.conf;\n\n}\n```\nand /etc/nginx/php.config being:\nlocation ~ \\.php {\n        include                  fastcgi_params;\n        fastcgi_keep_conn on;\n        fastcgi_index            index.php;\n        fastcgi_split_path_info  ^(.+\\.php)(/.+)$;\n        fastcgi_param PATH_INFO $fastcgi_path_info;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_intercept_errors on;\n        fastcgi_pass             unix:/var/run/php-fpm.sock;\n    }\nand a test curl transaction is:\n```\nvagrant@host:/vagrant/project$ curl --raw http://127.0.0.1:88/204test -v\n Hostname was NOT found in DNS cache\n   Trying 127.0.0.1...\n* Connected to 127.0.0.1 (127.0.0.1) port 88 (#0)\n\nGET /204test HTTP/1.1\nUser-Agent: curl/7.38.0\nHost: 127.0.0.1:88\nAccept: /\n< HTTP/1.1 204 No Content\n Server nginx/1.8.0 is not blacklisted\n< Server: nginx/1.8.0\n< Date: Tue, 24 Nov 2015 16:47:22 GMT\n< Content-Type: text/html; charset=UTF-8\n< Connection: keep-alive\n< X-Powered-By: PHP/7.0.0-dev\n<\n Connection #0 to host 127.0.0.1 left intact\n```\n. I've amended the test script to add a\n\n$response=$response->withHeader('Content-type','text/plain');\nbut if the status code is 204, Slim (in App->finalize) still strips it out: causing ngnix to add the text/html Content-type back in (I've even tried add body content to see if it makes a difference: it doesn't) [changing the status code to 200 does give my text/plain content type and the body].\nChanging App->finalize to:\nif ($this->isEmptyResponse($response)) {\n            return $response->withoutHeader('Content-Type')->withoutHeader('Content-Length')->withHeader('Content-Type','');\n}\ndid work (i.e. no Content-Type header was actually sent by nginx).\n(as an aside, /etc/nginx/nginx.conf has application/octet-stream as the default_type )\n. @akrabat That's how I read it as well. I believe nginx is trying to be \"helpful\" and if there is absolutely no Content-type header set, it is adding one - however, if a Content-type header is set, but empty, \"it trust you know what you are doing\" but won't send the blank content-type (but also will not add its own content-type)\n. Just doing some tests on an Apache server and the inbuilt PHP server with a very very basic script:\n- No Content-type setting at all: Apache, PHP and nginx all add Content-Type: text/html\n- With Content-Type setting: All provide the coded Content-Type\n- With Content-Type:'' (empty string): Apache, PHP Web server and Nginx do NOT provide a Content-Type heading.\nIt's looking more like, to achieve what Slim is trying to do by unsetting the Content-Type header, it is better off setting a blank content header (similar to \"header('Content-Type:');\") which will stop the content-type line being sent on all three tested servers. Counter intuitive, but works on two of the major web servers and the inbuilt one. Is there a platform where this \"hack\" doesn't work?\n. Ah - thanks. Didn't see that. Cheers!\n. I actually got half way througg writing my own middleware too: but keyed\noff slightly different fields: then found out if _METHOD was set in the\nbody it would always override my call to setMethod.\nI would personally prefer this sort of \"magic\" to be non-core\nOn 1 Dec 2015 16:39, \"Glenn Eggleton\" notifications@github.com wrote:\n\nBoth imo... I actually created a middleware to handle it, it felt better\nthan having it in the slim source.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/slimphp/Slim/issues/1637#issuecomment-161025334.\n. All I can say is sorry guys for starting this tricky conversation... My primary preference is to rip out the \"magic\" and replace it with middleware, my second preference is to remove the \"Force method override recalculation\" setting in Request::withMethod (so Slim always uses what is \"forceabiliy set/set by other code\") - the second option allows \"patching\" of the existing code, but a way for devs to \"bypass\" it on preference (which isn't possible atm).\n. Yep, but string typehint is only PHP 7+ . map takes array, string, callable.\n. Ah, sorry, so it does. My mistake. I'll see if I can do a PR to make it clearer (document it as callable|string or keep it as \"mixed\" and add comment that can be string or callable?)\n. FIFO for the intuitive point, but ideally (and I know this may be outside scope), an optional priority/\"before\" option (ie 3rd party code may register authentication middle ware first, but API design needs CORs headers checked before authentication).. \n",
    "ienev": "On Apache 2.4 (before 2.4.13) with PHP-FPM this rewrite would work\nRewriteRule .* - [env=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\nbut it will result in a REDIRECT_HTTP_AUTHORIZATION header which is still not accessible by \n$request->getHeader(\"Authorization\")\nApache 2.4.13 introduced a CGIPassAuth directive that would allow passing the Authorization header to the script although I haven't tested this myself.\nFor now the only workarounds are to either access $_SERVER['REDIRECT_HTTP_AUTHORIZATION'] or use a custom header name.\n. Thanks I was only searching for Slim 3. Any chance a similar PR would be accepted for 3?\n. ",
    "ianrussel": "@akrabat \nI have this issue and cant solve it. I am using nginx and Slim 3 heres my route\n`$app->get('/api/private/offers', function($request, $response, $next){\n//$headers = apache_request_headers();\n$headers = $request->getHeaders();\nvar_dump($headers);`\n\n})\nHere is the output\n`array (size=11)\n 'HTTP_COOKIE' => \n array (size=1)\n  0 => string 'PHPSESSID=p8r0lrt3ujkj24jac72hnh1fqs' (length=36)\n 'HTTP_ACCEPT_LANGUAGE' => \n  array (size=1)\n  0 => string 'en-US,en;q=0.9' (length=14)\n  'HTTP_ACCEPT_ENCODING' => \n  array (size=1)\n  0 => string 'gzip, deflate' (length=13)\n  'HTTP_ACCEPT' => \n  array (size=1)\n  0 => string \n  'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8' (length=85)\n   'HTTP_UPGRADE_INSECURE_REQUESTS' => \narray (size=1)\n  0 => string '1' (length=1)\n   'HTTP_USER_AGENT' => \narray (size=1)\n  0 => string 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36' (length=114)\n    'HTTP_CACHE_CONTROL' => \narray (size=1)\n  0 => string 'max-age=0' (length=9)\n    'HTTP_CONNECTION' => \narray (size=1)\n  0 => string 'keep-alive' (length=10)\n    'Host' => \narray (size=1)\n  0 => string 'offline-report.test' (length=19)\n   'CONTENT_LENGTH' => \narray (size=1)\n  0 => string '' (length=0)\n    'CONTENT_TYPE' => \narray (size=1)\n  0 => string '' (length=0)`\n\nNotice that 'Authorization' header is not included\nI enabled the CORS as per Slim Docs\n`$app->options('/{routes:.+}', function ($request, $response, $args) {\n    return $response;\n});\n$app->add(function ($req, $res, $next) {\n    $response = $next($req, $res);\n    return $response\n            ->withHeader('Access-Control-Allow-Origin', '*')\n            ->withHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Accept, Origin, Authorization')\n            ->withHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n});`\nTrying \n    //$headers = apache_request_headers();\n\nStill same result\nBut  I return it to console, its there, I am so confused.\n    return json_encode($request->getHeader('Authorization');\n\n    0 <font color='#888a85'>=&gt;</font> <small>string</small> <font color='#cc0000'>'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik9VTTFSVEk1TVVaQ01FRkJPVFkxUkVReE5rUXdNelEwT0VFd1FVSTVSVGsxTkVaRU5ESXdRUSJ9.eyJpc3MiOiJodHRwczovL2NoZWF0c2hlZXQuYXV0aDAuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTA2ODQ2MTU0MzE1OTcxNTU5NjczI\n\nDo you have in idea for this? I am using NGINX. ",
    "tflight": "Automated way to Generate API [docs] to Github pages via Travis?\n. You could also pull in something like vlucas/phpdotenv and load them into an environmental variable, which also gives you the ability to exclude the file with your credentials from version control, but that has its own issues.\n. Pick number 2! :+1: \n. :+1: the above.\n- Review and/or replace the wiki.\n. Do you mean something like this?\necho $app->getContainer()->get('router')->pathFor('home');\nSee the route names section of the docs for another example. And if you are using Twig, there is an extension there so you can do something like this:\n{{ path_for('home') }}\n. @netmou, see Inserting a path to a named route in a php-view template?\n. Hi @farazappy,\nThis is better suited for the help/support forum than here in the issue tracker, but have a look at openid/php-openid or Auth0 and if you need more help I'd ask over in Slim's help forum.\n. It doesn't matter if or how much the hosting company charges, what matters is only if the host meets the System Requirements. The requirements are very minimal so Slim should work just about anywhere.\nIn many cases, \"free\" hosting or shared hosting will not allow command line (shell) access. In which case you wouldn't be able to install Slim or its dependencies with composer, however you could still install and build it locally and then upload with S/FTP.\n. Sorry, meant to send the copyright update as a separate PR. :(\n. Use a Route Placeholder for the locale when creating the route. The pathFor() method accepts an array of route placeholders as the second argument.\nphp\n$app->get('/{locale}/action', function ($request, $response, $args) {\n    echo \"Hello, \" . $args['locale'];\n})->setName('hello');\nThe pathFor method in a controller might look like this.\nphp\necho $app->getContainer()->get('router')->pathFor('hello', [\n    'locale' => $this->view()->getLang()\n]);\n. Sure, you could use the setBasePath method of the Router. Then you could write a very simple middleware, the language to the constructor, setting the base path, and forwarding along the request.\n. I've never played around with setBasePath before, but I just tried it in a simple middleware and it seems to work as I'd expect. Once it is set, you don't need to modify the request as any URL you construct with pathFor will include the basePath set. Here is an example of a middleware I tested with.\n``` php\n<?php\nnamespace App\\Middleware;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Slim\\Router;\nclass LocaleMiddleware\n{\n    protected $router;\npublic function __construct(Router $router)\n{\n    $this->router = $router;\n}\n\n/**\n * Locale middleware invokable class\n *\n * @param  \\Psr\\Http\\Message\\ServerRequestInterface $request  PSR7 request\n * @param  \\Psr\\Http\\Message\\ResponseInterface      $response PSR7 response\n * @param  callable                                 $next     Next middleware\n *\n * @return \\Psr\\Http\\Message\\ResponseInterface\n**/\npublic function __invoke(Request $request, Response $response, $next)\n{\n    $this->router->setBasePath('de-de');\n    $response = $next($request, $response);\n    return $response;\n}\n\n}\n```\nWhen I did that, all of my pathFor URLs include de-de, for example http://example.com/de-de/user\n. You are getting a route not found because neither of your two routes match that pattern. /de-de/test/ doesn't match either '/' or '/test. You will need something like this.\nphp\n$app->get('{locale}/', 'MyController:method1');\n$app->get('{locale}/test', 'MyController:method2');\nYou could also use a regular expression to make sure the locale is set properly. I'm not great with regex, but perhaps something like:\nphp\n$app->get('{locale:[a-z][a-z]\\-[a-z][a-z]}/', 'MyController:method1');\n. You could also add the locale part as a route group to avoid repeating it through your app.\n. In order for a route like /de-de/something to be routed, it needs to match a route. So regardless if you use the placeholder or not, the URL needs to match the route.\n. @garnold While it hasn't been updated in several years, there are a few goals listed here that are likely still applicable today-- though I can't speak to that.\n. With PHP-DI, you would accept the URL parameter like this.\nphp\npublic function execute($request,$response, $id)\n{\n    echo $id;\n}\nSee Request Attribute Injection in the docs:\n\nAs you can see above, the route's URL contains a name placeholder. By simply adding a parameter with the same name to the controller, PHP-DI will directly inject it.. I believe that is the way it is supposed to work. That's the way the PHP-DI documentation suggests it should work.. See the Slim docs for Route Strategies. Note the part about alternative strategies that implement \\Slim\\Interfaces\\InvocationStrategyInterface. Then see where PHP-DI implements the strategy.\n\nYou can still access attributes in the body from something like\nphp\n$request->getParsedBodyParam('user_email');\nand route segments from something like \nphp\n$request->getQueryParam('id');`. It would be convenient for me in some instances, but the current implementation is not a pain point.. @majoess check out the Slim Container Resolution section of the docs.. @majoess , see https://github.com/akrabat/slim-bookshelf/blob/master/app/src/Bookshelf/AuthorController.php. @crtl have you seen https://github.com/slimphp/Slim/issues/1617 ?. FWIW, I use Tracy in most of my web apps, with Slim, and I don't have 'addContentLengthHeader' => false set. While I'm not using Nette Forms, I did put your long country list into a <select> list and didn't have an issue.. I can see cases where this could be more confusing. I commonly have a selection of routes which have no route pattern prefix, but share middleware so I put them in a group. By name, it sounds less natural to add middleware to a prefix, especially when there might not be a route pattern prefix.\nThe word group seems to cover both use cases better than prefix does. If I was writing the docs, this doesn't read as well:\n\nIf you have multiple routes which share middleware, consider putting them in a prefix with an empty route pattern. You can then add the middleware to the entire prefix.\n\nI'm not saying I oppose this, just thinking it through.... Are you using Slim CSRF? When you refresh the error page is it sending a GET or POST request?. I recall Slim CSRF regenerates the CSRF code on each request. See the Token Persistence section of the docs for more info. I suspect that is what you are running into.. Times I've seen other people encounter that exact error they were running 5.5.x versions of PHP. (Sometimes they thought they were running a newer version, but phpinfo() convinced them otherwise.). See Route Placeholders and Container Resolution in the docs.\nThe route:\nphp\n$app->get('/api/courts/{id}/{date}', '\\App\\Controllers\\AvailabilityController:getCourtAvailability');\nThen in your controller:\nphp\npublic function getCourtAvailability($request, $response, $args) {\n    $id = $args['id'];\n    $date = $args['date'];\n    return $response; // your real response\n}. Does your ajax request have this header? X-Requested-With: XMLHttpRequest. When the environment is mocked, the SERVER_PORT defaults to 80 and then array_merge is run with the mocked environment options. So if SERVER_PORT is not set when mocking the environment, port 80 will always be set regardless of scheme/protocol.\nLooks like the documentation is incorrect, or at least misleading. The documentation can be fixed, or we could change the way mock works to check if HTTPS is not null and SERVER_PORT is null... and if so default to port 443 instead of 80... or something like that.. That is typically a setting within your webserver (Apache, Nginx, etc) not within Slim. You can typically have a look in phpinfo() and see what it says under upload_max_filesize.. Depending on the type of users you have, I will often check the upload_max_filesize setting and present it to the user before they upload. That avoids the issue altogether, but isn't possible in all scenarios.. Which version of PHP are you running under?. See this discussion as it may pertain to your issue.. Slim's response object does have a convenience method for write, seen here. So the example does work, but doesn't conform to PSR-7. Therefore you couldn't swap out Slim's response with another PSR-7 response with the existing example and your example would be needed.. I don't disagree with you though. We probably should be using PSR-7 compatible examples whenever possible and at least those two examples should be consistent.. @mnapoli reading my response again, it might not be clear what i was trying to say. I think your PR is valid and is better than the existing example.. Two possibilities come to mind. First, is a different route matching than the one you are expecting? Second, are you using OPcache in your webserver, and if so, what are the settings? OPcache could certainly produce those symptoms. Slim itself doesn't have any caching attributes that would explain what you see aside from routercache which defaults to false if you don't set it up.. With FIFO, which order would the middlewares run after $app? (It really doesn't matter much to me, I'm just curious.). > In the hypothetical situation that Symfony 4 Router would support all of the route patterns and features in Slim 3 and hopefully a significant performance boost as well as unicode capabilities, would you be in favor of switching for Slim 4?\nYes. \ud83d\udc4d\ud83c\udffb. Hi @sduduzog,\nThis isn't an issue with Slim, so it would be best handled in our Slim Support Forum our in our Slack channels.\nCheck if your PHP version has GD enabled, and/or check if the function exists.\nphp\nif (!function_exists('imagecreatetruecolor')) {\n    echo 'No GD';\n    exit();\n}\necho 'GD exists';. Hi @mariapesm,\nThis doesn't sound like an issue with the Slim Framework. If it is, you may need to show us some code to understand what you are trying to do.. Hi @xiao872380658,\nSupport requests are better handled in our discussion forums or slack. Your route doesn't look right, you probably want something more like this, but may not be exactly right for your setup.\nphp\n$app->get('/index', '\\Controller\\Home\\GoodsController:showGoods');\nHave a look at the container resolution section of our docs.. ",
    "ertogs": "Hi there, \nthis can be automated with travis ci quite easy. \nalso see https://github.com/slimphp/Slim-Website/pull/214\nI will create a new PR with setup instructions in a few minutes. \n. ",
    "TakeMeNL": "And what about just a simple webhook triggering the build?\nI'm used to have a deploy script that handles this stuff for me.. @edsgerlin @danopz #2175. ",
    "jeremygiberson": "I sent a pull request for consideration as an alternative for this, please see #1716. \n. I'd like to see something like a ModelResponseInterface with the following definition:\nphp\ninterface ModelResponseInterface {\n    /**\n     * @return mixed\n    */\n    public function getModel();\n}\nRight now because the framework requires a Response to be returned from middleware it makes it difficult to do things like writing content-type middlewares that marshal models into json/xml/etc. Officially supporting a response type that provides a container to pass models/objects back to middlewares for processing would be really nice. This could be it's own package too. I just think there should be recommended package at least. That way we will hopefully start seeing HAL rendering middlewares and similar things pop up.\n. $test->assertSame($container, $this); makes sure that the closure has been bound to the container. \n$assertCalled sets up an expectation that $assertCalled->foo() must be called once. This makes sure the test fails if the closure is never executed (since assertSame would only execute if the closure was invoked). assertSame makes sure the two compared objects are the same instance.\n. ",
    "flavioheleno": "@geggleto: Thanks for the suggestions! I think the lack of samples took me to take that approach and the fact that it works even though it throws warnings made me feel comfortable using it. I'd love to write project samples if I have guidance.\n@akrabat: I'll be moving over to PHP7 as soon as it's released as I think this approach is a bit more organized than what @geggleto suggested. I tried to use $this->get instead of use ($app), but it doesn't seem to work inside register()'s static context.\nThank you both for help! It's very much appreciated!\n. Just for future reference, I did some digging and found the bug fix adding supporting on PHP7: https://bugs.php.net/bug.php?id=68792\n. As you're using func_get_args() rather than the $callable parameter, I guess you should remove it from the function signature.\n. ",
    "tssvl": "Page not found 404.\n I suppose it means - no exceptions. In this particular case I didn't use namespaces. Fully qualified class name exactly YourController:method\nI want to say that application worked well and after last update (using composer) I have problems and for now I can't continue developing my app.\n. Sorry guys. I mistaken. Just tested my case on pure slim/slim (3.0.0-RC3) installation. \nRouting doesn't work at all. \nWorks only $app->get('/' pattern.\nFor example: $app->get('/test' gives Page Not Found.\nMy code:\n``` php\n<?php\nrequire DIR . '/src/vendor/autoload.php';\n$app = new \\Slim\\App;\n$app->get('/', function ($request, $response, $args) {\n    return $response->write(\"It works... only\");\n});\n$app->get('/test', function ($request, $response, $args) {\n    return $response->write(\"It doesn't works...\");\n});\n$app->get('/hello/{name}', function ($request, $response, $args) {\n    return $response->write(\"Hello \" . $args['name']); //doesn't works too\n});\n$app->run();\n```\n. I switched to older version\n- Removing slim/slim (3.0.0-RC3)\n  - Installing slim/slim (3.0.0-RC2)\nNow all work just fine. \nIf it's my apache/.httaccess configuration problem I can give you all data you need. \nBut it seems very strange then.\nMy configuration:\nWindows 10\nXAMP\nApache/2.4.16 (Win32) OpenSSL/1.0.1p \nPHP Version 5.6.11\nRewrite module endbled and AllowOverride All (it does not matter )\nFrom apache access log:\n::1 - - [02/Dec/2015:11:58:30 +0200] \"GET /slim3/api.php HTTP/1.1\" 200 6 \"-\" \"Mozilla/5.0\n::1 - - [02/Dec/2015:11:58:34 +0200] \"GET /slim3/api.php/users HTTP/1.1\" 404 886 \"-\" \"Mozilla/5.0\nafter I switched to (3.0.0-RC2)\n::1 - - [02/Dec/2015:12:44:55 +0200] \"GET /slim3/api.php HTTP/1.1\" 200 6 \"-\" \"Mozilla/5.0\n::1 - - [02/Dec/2015:12:44:59 +0200] \"GET /slim3/api.php/users HTTP/1.1\" 200 2634 \"-\" \"Mozilla/5.0\n. Yes. For example route from my current app: \nhttp://localhost:8081/slim3/api.php/users\n. ",
    "dukeatcoding": "I can confirm the issue too. Running the project with lighthttp \nRolled back to RC2\n. ",
    "elshobokshy": "Is there a fix? I'm having this same problem. Only my root path works, but anything thing else '/xxx' doesn't work... :(. ",
    "bestis": "And right after submitting that I was thinking, well I can always check on my own log method that if given message is instance of object do things based on that and even add it to context... \nSo even if there wasn't any reason, I don't think people needs that really :)\n. ",
    "irfanevrens": "I am using this as handler on a production app. Is component mean middleware? How can I implement it, any example or docs? \n. There is no perfect decoration and will not indeed. PSR-7 learn it's decoration rules from php ecosystem, such as Slim.\n. I try, it writes what it is in write function.\n. Thanks for your info.\n. Congratulations.\n. It is a foundHandler, the container does not injected on constructor. I think there is no need $request and $response if $container will given. am I right @akrabat \n. Thanks.\n. Thanks for reply, I know final classes can not be extended. Why it is final? What is the aim?\n. I think slim framework should has extendability with all classes. I extended \\Slim\\Http\\Request class and customize it with adding some helper function such as function getReferer(), function getServerName()\n. @ppetermann all server variables in getServerParams() as array. I created this function my extended Request class.\nphp\nprivate function getServerParam($key)\n{\n    return isset($this->getServerParams()[$key]) ? $this->getServerParams()[$key] : null;\n}\nBut my firstly problem is final keyword on \\Slim\\Container. I think slim framework are not a final product. Again I think \\Slim\\Container class should be extendable.\n. Added on 43b693480028d48f387a620a34a9cafdfebcc767 then removed on 02b629c63632c02c7b0a44b340130bd85791f4eb. It was my local file.\n. Used Interop Container Interface many times in code base. This is not good for \"code completion\". If we use our extended Interface we can set properties for \"code completion\" on it.\n. I simplified function body and deleted some \"else statements\" and separate logics. I do not know why coverage decreased.\n. @mbretter I started use league/container as container. Using this service provider class. You can customize it what you need.\n``` php\n<?php namespace App\\ServiceProviders;\nuse League\\Container\\ServiceProvider\\AbstractServiceProvider;\nuse Slim\\CallableResolver;\nuse Slim\\Collection;\nuse Slim\\Handlers\\Error;\nuse Slim\\Handlers\\NotAllowed;\nuse Slim\\Handlers\\NotFound;\nuse Slim\\Handlers\\Strategies\\RequestResponse;\nuse Slim\\Http\\Environment;\nuse Slim\\Http\\Headers;\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\nuse Slim\\Router;\nclass SlimServiceProvider extends AbstractServiceProvider\n{\n    /*\n     * @var array\n     /\n    private $settings = [\n        'httpVersion'                       => '1.1',\n        'responseChunkSize'                 => 4096,\n        'outputBuffering'                   => 'append',\n        'determineRouteBeforeAppMiddleware' => false,\n        'displayErrorDetails'               => false\n    ];\n/**\n * @param array $settings\n */\npublic function __construct(array $settings = [])\n{\n    $this->settings = array_merge($this->settings, $settings);\n}\n\n/**\n * @var array\n */\nprotected $provides = [\n    'settings',\n    'environment',\n    'request',\n    'response',\n    'router',\n    'foundHandler',\n    'errorHandler',\n    'notFoundHandler',\n    'notAllowedHandler',\n    'callableResolver'\n];\n\n/**\n * Use the register method to register items with the container via the\n * protected $this->container property or the `getContainer` method\n * from the ContainerAwareTrait.\n *\n * @return void\n */\npublic function register()\n{\n    $this->container->share('settings', function() {\n        return new Collection($this->settings);\n    });\n\n    $this->container->share('environment', function() {\n        return new Environment($_SERVER);\n    });\n\n    $this->container->share('request', function() {\n        return Request::createFromEnvironment($this->container->get('environment'));\n    });\n\n    $this->container->share('response', function() {\n        $headers = new Headers(['Content-Type' => 'text/html; charset=UTF-8']);\n        $response = new Response(200, $headers);\n\n        return $response->withProtocolVersion($this->container->get('settings')['httpVersion']);\n    });\n\n    $this->container->share('router', function() {\n        return new Router();\n    });\n\n    $this->container->share('foundHandler', function() {\n        return new RequestResponse();\n    });\n\n    $this->container->share('errorHandler', function() {\n        return new Error($this->container->get('settings')['displayErrorDetails']);\n    });\n\n    $this->container->share('notFoundHandler', function() {\n        return new NotFound();\n    });\n\n    $this->container->share('notAllowedHandler', function() {\n        return new NotAllowed();\n    });\n\n    $this->container->share('callableResolver', function() {\n        return new CallableResolver($this->container);\n    });\n}\n\n}\n```\n. I am agree with @astax-t and I also use a custon InvocationStrategy.\n. Environment and Headers are in the same namespace, Slim\\Http.\n. ",
    "lexakozakov": "@silentworks  Thank you, man. Finally I got it. \n. Set in the app config - 'determineRouteBeforeAppMiddleware' => true\n$request->getAttribute('route')->getName()\n. ",
    "Motard": "I am having some trouble with this. I am getting null when i do $request->getAttribute('route')->getName(). And I have also the determineRouteBeforeAppMiddleware' => true in the settings.php.\nAnyone has any suggestion?. Thx @akrabat. The problem was the missing ->setName() after declaring the route.. ",
    "p-golovin": "It will be great to be able create and inject own error handlers without modifing or extending Slim\\App. And extending them from base ErrorHandling class, redefining only messages for html/xml/json formats and http code.\n. @geggleto I talk not about owerwriting existing handlers, but about adding new one. For example: BadRequest (400 http code). But for now I can't call them for given type of exception without rewriting \\Slim\\App::handleException function.\nAnd also there may exists different handlers with same logic of defining content-type, but only difference in message text in output.\nSo it will be great to have smth like this\n``` php\nclass Handler\n{\n    protected $message = [\n        'html' => '...',\n        'xml' => '...',\n        'json' => '...',\n    ];\nprivate function determineContentType(...)\n{ ... }\n\nprotected function renderJsonOutput(...)\n{ ... }\n\n...\n\n}\nclass NotFound extends Handler\n{\n    // redefine $message\n}\n```\nAnd be able configure map between exceptions and handlers via container for this\nphp\n    protected function handleException(Exception $e, ServerRequestInterface $request, ResponseInterface $response)\n    {\n        if ($e instanceof MethodNotAllowedException) {\n            $handler = 'notAllowedHandler';\n            $params = [$e->getRequest(), $e->getResponse(), $e->getAllowedMethods()];\n        } elseif ($e instanceof NotFoundException) {\n            $handler = 'notFoundHandler';\n            $params = [$e->getRequest(), $e->getResponse()];\n        } elseif ($e instanceof SlimException) {\n            // This is a Stop exception and contains the response\n            return $e->getResponse();\n        } else {\n            // Other exception, use $request and $response params\n            $handler = 'errorHandler';\n            $params = [$request, $response, $e];\n        }\n. I send POST request from jQuery. It may contain body or not, depending on user data:\njs\n$.ajax({url: '/' + CHAMP.vote.id + '/vote/send/' + voteId + '/', method: 'POST', data: requestData, dataType: 'json'});\nIn controller I want to validate data from this request and use getParsedBody function for this:\n``` php\npublic function sendVote(Request $request, Response $response, array $args)\n{\n        $validator = [\n            'g-recaptcha-response' => Validator::optional(Validator::regex(\"/^[\\w-]*$/\"))\n        ];\n    try {\n        $params = Functions::validate($validator, $request->getParsedBody());\n    } catch (NestedValidationException $e) {\n        throw new NotFoundException($request, $response);\n    }\n\n```\nI expect to receive array or null, but receive false in case of empty POST body and no Content-Type header.\n. May be add else for this (https://github.com/slimphp/Slim/blob/3.x/Slim/Http/Request.php#L972-L982):\nphp\nelse {\n    return null;\n}\n. @geggleto \n\nThe if can't have an else that returns null, then nothing would get parsed ;)\n\nYes, in case of non-existent mediaType. But I agree, that it is bad solution.\n. Works fine now. Thanks.\n. ",
    "andrewpros": "There must be a reason, i've even traced it to https://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L390 and the echo returns the whole string, so i don't know where is the problem, it is the most basic simple script.\nI will do some checks now.\n. Ok it works with the latest php 7.0.0 ts x64 from dec 3.\n. Ok, it is something with my php setup, but any other script works fine, not sure why there is problem with slim3.\n. Thx man, found it.\nThe response was\n```\n   Trying 127.0.0.1...\n Connected to localhost (127.0.0.1) port 8000 (#0)\n\nGET /api.php HTTP/1.1\nHost: localhost:8000\nUser-Agent: curl/7.45.0\nAccept: /\n< HTTP/1.1 200 OK\n< Host: localhost:8000\n< Connection: close\n< X-Powered-By: PHP/5.5.12\n< Content-Type: text/html; charset=UTF-8\n< Content-Length: 9\n<\n Excess found in a non pipelined read: excess = 3, size = 9, maxdownload = 9, bytecount = 0\n\u00b4\u2557\u2510xxxyyy Closing connection 0\n```\n\nSo i immediately noticed the extra signs, never seen them before, the file was UTF-8, i double checked that before i even posted here, even with show all sings in notepad++, phpstorm was not complaining either, but it turns out it was with BOM, converted to utf-8 without BOM and that was it.\nStill not sure if slim3 should be affected by that, but i know the reason at least.\n. ",
    "MehdiRaash": "Well done\n. ",
    "Cyrillius": "Thanks for the quick answer. This is exactly the problem. \n. ",
    "daniel-mueller": "https://github.com/slimphp/Slim/pull/1735\n. ",
    "fyfey": "This caught me out as well, I was expecting the latter.\nIt uses a SplStack under the hood, so think of it as each time you add one, you're adding to the stack, Slim then takes middleware from the top of the stack.\n. ",
    "leandroruel": "yes! i'm using twig-slim \n. ",
    "Sam-Burns": "Referring to the ContainerInterop specification on exceptions\n. The docblocks copied into Slim from the Interop ContainerInterface already suggest we are throwing an exception which complies with the standard, but none exists in the repo.\nThe intention behind having a consistent type of ContainerException is to allow the user clarity that it was specifically their DI config that caused the problem.\nThe PR goes further, adding the service ID to the message and making the previous exception accessible via getPrevious() - allowing easier debugging.\n. I've rewritten it to take this into account.  Exceptions thrown explicitly by the container are now recast, but exceptions thrown in a factory closure are not.  This is captured by the unit tests added.\nThe only thing that can actually go wrong while retrieving a dependency (where has() would return true) is if there is a problem with the DI configuration.  At present, if a dependency factory closure tries to obtain another, non-existent, dependency from the container, it throws an \\InvalidArgumentException.  The spec says that if the container explicitly throws an exception, it has to be an implementation of ContainerException, so something has to be done here.\n. @akrabat I have changed the new exception class to preserve BC as discussed\n. @silentworks The issue the class is trying to fix is that things like this line in Pimple aren't compliant with the Container-Interop standard.  Wouldn't it be reasonable for a user to expect to be able to catch Interop\\Container\\Exception\\ContainerException and handle or log that differently from other exceptions, if we're saying the container complies with the standard?\n. :+1: \n. @akrabat I've changed the base branch to 3.x. Is there any news on this?  Does anyone have any feedback or questions?. @geggleto Referring to the Container-Interop standard, Interop\\Container\\Exception\\ContainerException extends Psr\\Container\\ContainerExceptionInterface.\nI think the Slim container is already PSR-11 compliant.  This PR is intended to allow instances of the parent interface to be used instead.  Put simply, it means that containers like the Symfony Service Container can be used with Slim without an adapter, and this is achieved without breaking backward compatibility.\nIf I've misunderstood you, please do point me in the right direction.  Thanks for taking the time to review my PR!. The pull request simply allows additional containers, such as the Symfony container, to be used in Slim without writing a custom adapter.  This is done by changing the typehint of the incoming container to the parent interface.  I don't think there is any need for concern that this will change the type of exceptions thrown by a container already in use.. @akrabat will do :+1:. @akrabat ref https://github.com/slimphp/Slim/pull/2174 .. Ok, well if I can't persuade the team to go PHP 7 only, perhaps this PR might be of interest.. With basic security support for PHP 5.6 and 7.0 ending next year, and bug-fixing for PHP 5 already gone, it would be nice to see Slim users encourage to upgrade.  For those who can't, maybe a good period of support for Slim 3 might be an option.  Perhaps this could be an alternative to developing the latest version of the Slim framework in an old language version?. @garnold I can't speak for the project's core maintainers, but much of the recent discussion has been as to whether to support PHP 5.6 or just put the minimum version to PHP 7.0, so I'm afraid it seems unlikely for Slim 4.\nPlease note that the project's core team, when I've spoken to them, have seemed very committed to supporting Slim 3 long-term, and it will remain an excellent choice of micro-framework after Slim 4 is released later this year.\nPHP 5.5 critical security support died in the middle of last year, so I'm surprised to learn Google Cloud haven't upgraded yet.  I am even now planning a miffed tweet.. @piotr-cz We're aware of the build problem.  It is addressed by https://github.com/slimphp/Slim/pull/2245.. No, it's a global setting.  The build time doesn't seem to be a problem.. So should I leave it like this, or try the matrix thing?. @akrabat I'm pretty sure it uses an older version of Guzzle, but that the v4-6 versions are differently namespaced.  Do let me know if you notice any issues, but I don't think it's a problem.. @akrabat Sounds like they're working on tagging a stable release without it.  In the meantime, as it's a dev dependency, you only get the warning when you clone Slim.  It doesn't happen if Slim is a dependency in your Composer file.. @1ma Working on the 4.x branch w.r.t. the container now.  Will bear that in mind.  I'll add you as a reviewer when there's a PR.. I'd suggest pinning to Pimple 3.1 in dev at a minimum, to try and fix the Travis warning.. @akrabat The docblock says it is a Interop\\Container\\Exception\\ContainerException.  What would your suggestion be?  Would you prefer to see Slim\\Exception\\ContainerException extend \\InvalidArgumentException to preserve backwards compatibility?  I can change it if so.\n. @ivandokov There is an issue discussing language versions here: https://github.com/slimphp/Slim/issues/2175.  So far, the only agreement is that support for PHP 5.5 should be dropped, hence the pull request.  But I agree it would be good to support PHP 7 only in the new version.. The Travis build's passing in PHP 5.6-7.1 and HHVM - think we're all good on that front.. Things like this unfortunately cannot be done in Slim 3, as it would break userland code catching Interop\\Container\\Exception\\ContainerException.  It has already been done in Slim 4.. ",
    "vlakoff": "One step forward from Slim to Enterprise software (pun intended).\n. Seriously, IMHO, don't put band-aids like this just to forcibly adhere to some standard. It's a mess, just use Pimple as it is, it will adhere to the standard when time comes.\n. I just say catching exceptions and trying to identify some of these to redefine them is not a good solution, IMHO.\nI have nothing against this standard. It's just not implemented upstream (i.e. Pimple), so let's deal with it for now.\n. As I noted above, to not potentially lose the exception:\nphp\ntry {\n    return $this->offsetGet($id);\n} catch (\\InvalidArgumentException $exception) {\n    if ($this->exceptionThrownByContainer($exception)) {\n        throw new SlimContainerException(...);\n    }\n    throw $exception; <-- this should be added\n}\n. Maybe the trace could be used to make the detection robuster?\nAs a quick example:\n$trace = $exception->getTrace();\n$trace[0]['class'] === 'Pimple\\Container';\n$trace[0]['function'] === 'offsetGet';\n. Does that server have $_SERVER['HTTPS'] set?\n. I suppose it's because Slim doesn't have support for requests by proxies.\nUnfortunately this isn't straightforward to implement if you want it to be thorough, and secure (proxies whitelist).\nThe best implementation by far is Symfony's, see:\n- Request function isSecure\n- RequestTest function testGetPort\n- IpUtils for IP range support\n. - I see href=\"/styles/main.css?v=...\" in page source, and my browsers (Firefox, Chrome) load the file through https, as expected.\n- Plates should provide full URIs as they are much more reliable (e.g. with application installed in server subdirectory).\n. @feryardiant You may want to try Proxy Scheme and Host detection middleware :raising_hand:\n. @piotr-cz Could you please provide an example?\nAlso, I think manual setting of base URL should be considered as a very, very last resort.\nIf it is technically possible to detect the base URL, we should do it to avoid delegating the work to the user.\n. There are middleware for scenarios with proxies: Proxy Scheme and Host detection middleware and Client IP address middleware. They are awaiting to be used and improved :)\nIf middlewares can solve this issue, then I think it should be closed.\n. You could avoid code duplication by doing:\nif (!is_array($callable)) {\n    $callable = [$callable];\n}\nforeach ($callable as $current) { ... }\nBut more importantly:\n- What if someone does ->add([$instance, 'method']) or ->add(['class', 'method'])? These callables are also recognized as arrays.\n- App->add() should be kept sync.\n. To fix this PR:\nif (!is_array($callable) || is_callable($callable)) {\n    $callable = [$callable];\n}\nforeach ($callable as $current) { ... }\n. As a reminder, don't forget to apply the same changes to App::add method.\n. Adding a method would defeat the purpose of this PR, simplifying the API. Having a new method to remember would be worst than just doing ->add()->add().\nI assume most of the time middlewares are added using strings,\nand ->add(['FirstMiddleware', 'SecondMiddleware']) looks pretty neat to me.\n. To make sure, does anyone think of a case where the if (!is_array($callable) || is_callable($callable)) test would give wrong result?\n. - That's a good point. This would break isolation and copy some of CallableResolver logic into App/Router. Here is some idea to handle this\u2026 but I don't like it:\n```\n// new method in shipped CallableResolver\n// check if argument is supposedly a callable/middleware\n// note the string validity is not checked (no RuntimeException)\npublic function isResolvable($toResolve)\n{\n    return is_callable($toResolve) || is_string($toResolve);\n}\npublic function add($callable)\n{\n    if ($this->isResolvable($callable)) {\n        $callable = [$callable];\n    }\nforeach ($callable as $closure) {\n    $closure = $this->resolveCallable($closure);\n    if ($closure instanceof Closure) {\n        $closure = $closure->bindTo($this->container);\n    }\n    $this->addMiddleware( $closure );\n}\n\nreturn $this;\n\n}\n``\n- A caveat with the variadic approach, it avoids adding some method parameters in the future.\n- FYI, Laravel allows passing an array of middlewares\u2026 but middlewares can only be defined as strings, so it's easier for them:is_string($middleware) ? /middleware/ : /array of middlewares/`\n. Considering JoeBengalen's very relevant point above, I have changed my mind and would hold on this change. It's the price in exchange for being liberal in how we can define the callable, up to even allowing a custom resolver.\nThus, I would rather implement a addMany method, which would be simple and robust. Even better, I think the application code would be more readable this way, as we would be much more easily noticing the method call is adding several middlewares.\n. TBH, just calling ->add() several times doesn't look that bad. I even think it's clearer than calling it once with an array. See example in first message. So the only remaining option would be an ->addMany() method, but is it worth it?\nA bigger improvement would be middleware groups, as Laravel did. But please open a separate issue if you want to discuss about it.\n. I don't see what is wrong in the snippet you posted (by any chance, didn't you confuse with __call?)\nNevertheless, can you please clarify by posting a ->middleware() call?\nOther points:\n- I think __invoke is a \"no, do not use it\" thing. Maybe with the exception of middleware $next().\n- Looks like this is a very edge case. Unless you prove otherwise by showing an use in ->middleware().\nFinally, as I stated above, considering the multiple ways of providing a callback, I think it would be better not to add complexity to the middleware method.\n. Gotcha your example (even if it seems quite improbable). Nevertheless, we do agree overloading the add method isn't a good idea.\nSo, if we decide to go further, we could implement a method addMany or addSeveral, which could without problem accept both array and variadic.\n. See the subsequent #2345.. I agree having the services registered in the container class looked very strange at first glance.\n. I vote for setting name routerCacheEnabled rather than routerCacheDisabled, considering Slim doesn't cache by default, and FastRoute cachedDispatcher caches by default but has to be explicitly chosen.\n. What are the performance gains? If they are not significant I would favor simplicity too (one less thing to manage).\n. Refs Proxy Scheme and Host detection middleware and Client IP address middleware.\n. Actually this seems to be already tested, in ContainerTest.php see testGetWithDiConfigErrorThrownAsContainerValueNotFoundException and testGetWithDiConfigErrorThrownAsInvalidArgumentException whereweareexpoectinga ContainerExpception.\n. I had thought about a test like is_a($trace['class'], 'Pimple\\Container', true), but currently Slim Container \"hard extends\" Pimple Container and cannot extend a different class.\n. Got your point.\n- If this custom offsetGet makes use of Pimple and the latter throws an exception, it will be detected as well.\n- If this custom offsetGet throws exceptions by itself, they should extend Interop. Otherwise, there is just no way to properly detect them.\n. Wow, that's an impressive testing suite!\n. Yes this \"no magic\" approach seems to have many advantages. I'll live with the leading slash.\nThanks for pointing this out.\n. About your suggestions:\n- Is there any reason this property is private?\n- Seems a bit tricky to me, for example could the custom request have a different construct signature?\n- Seems more reasonable than #2, imho\n. Sure thing, but there are exceptions to this. In this situation, exceptions play really nice.\n\nOtherwise you have to propagate returns all the way up, which sometimes isn't even doable.\nThese exceptions allows fine-grained and centralized handling (error handling, logging, and much more).\nFeatures like Laravel's terminable middlewares free you from the sequential flow constraint.\n\nAs a result, you have a really great application flow that wouldn't be possible without these exceptions.. Populus locutus est, closing as there is a clear consensus, no need to pursue.. This has been undone later, in #2472.\nThus, there is a line in the changelog that should be removed.. (by the way, that's an example it's not good to mix different changes in the same PR :). self::EOL would be a better pick. Maybe even static::EOL (one shouldn't have to override it, but who knows).. https://www.ietf.org/rfc/rfc3986.txt [Page 53]:\n\nThe mark characters that are typically unsafe to decode,\nincluding the exclamation mark (\"!\"), asterisk (\"\"), single-quote\n(\"'\"), and open and close parentheses (\"(\" and \")\"), have been moved\nto the reserved set in order to clarify the distinction between\nreserved and unreserved and, hopefully, to answer the most common\nquestion of scheme designers.. Note it's a negated character class. The characters it contains are not* escaped.\n\nBecause the other characters \u2013 ! ' ( ) \u2013 from my quote above are also omitted, I guess the omission of * is on purpose.. I tickled on the [^\\Z] and indeed, \"Anchors cannot be used inside character classes\".. Also,\n there is no need to escape \":\"\n \\A \\z don't seem useful (btw, rather \\z than \\Z)\n* I haven't checked thoroughly, but your changes match on two colons (e.g. \"Foo::bar\") so maybe it broke regular callbacks, which are handled just after in the code.\nTo summarize, this could do the job: ^([^:]+):([^:]+)$. @akrabat What about the issues I pointed above? Namely, the incorrect class [^\\Z] and the false positive on \"Foo::bar\".. On a related note, I love how the function just returns the unencrypted data if extension mcrypt isn't loaded. This could be pretty fun if one moves its application to a different server.. Refs #1316.\nActually, the name urlFor was not that wrong, as an URL can be relative (i.e. the scheme and autority are optional). Meanwhile, the \"path\" is a very specific part of the URL, which doesn't include the query string and the anchor.\nI'd suggest:\n adding a method fullUrlFor (easy to remember I think),\n and replacing again pathFor with urlFor (mainly because \"url\" is by far the most used name in other PHP frameworks). In Slim 3, allow both pathFor and urlFor (removing the deprecation notice, to ease migration), and in Slim 4, deprecate pathFor.\nAs a result, in Slim 4 we would have urlFor and fullUrlFor, and we could use fullUrlFor already in Slim 3.. \"Be resilient in what you receive, and strict in what you send\".\nPHP user code and HTTP header sent are not the same \"layer\" and don't have to be that tied.\nI'd bend keeping this strtoupper.. Shouldn't the issue be titled \"Remove HTTP method case-insensitivity from Router\"?. My comment above had been too fast.\nI hadn't understood there is no change for the simple use case: the user will continue to do $app->get().. @JeanPaiva In theory yes, but it depends on the HTTP server, which may be tolerant on the case. But in practice, yes, they seem to follow the specs, and reject the request.. Most of the time, people only use a settings key, but I'm pretty sure there are cases where the developer passes other data (i.e. additional keys) to the container being instanciated.\nAs it's a major version bump, I'd bend forward l0gicgate here. Such an upgrade is not a \"no-brainer\", it requires applying a migration procedure, and this change is quite fast and easy to make on user code.\nIMHO, just doing the breaking change would be way better than adding confusion with a compatibility layer, which also is not 100% sure as it does some guessing that may be wrong (see my first sentence).\nNote a similar change had been done when switching from Slim 2 to Slim 3.\nLast but not least, this way you don't forbid to the user the settings key name, which may be a convenient key name for him.. People, please stop with this \"no else\" trend. The current code is fine.\nJeffrey Way should make an official statement to urge people to stop with this.... If (! $this->exceptionThrownByContainer($exception)) the exception is silently discarded, it should be re-thrown.\n. description should be identical in both files\n. (nitpick) Final dot should be escaped \\.\n. Do we need this test? The else line 657 tells us the container doesn't have environment.\n. ",
    "nmpribeiro": "So, with the help of @akrabat on #slimphp freenode channel I accomplished this making a setter in Slim's Routable.php;\n/**\n     * Set the route pattern\n     *\n     * @set string\n     */\n    public function setPattern($newPat)\n    {\n        $this->pattern = $newPat;\n    }\nI suggest this to be implemented in the code.\n. User case:\ni18n dynamic assignment through named routes.\nconfiguration driven urls\n...\n. ",
    "avramir": "Hello guys,\nI will be adding support to define custom HTTP method, which will solve part of the issue described here and provide additional functionality to the framework. I will go about it in a similar fashion as geggleto proposed in above post.\nLooking forward to thoughts, feedback and comments once I submit a pull request later this week.\n. Agreed on point 1. I had the array in the same form like standard methods, avoiding the need to check for duplicates, but changed it from keys to values later on and missed on that, making the slip. Give me a few hours to get onto that and resubmit.\nLet me check on point 2.\n. ",
    "cristiammercado": "I have the same problem, any solution?\n. Serious? Well, it's not a good point in v3 release. :(\n. ",
    "mkovalen": "Sorry to reopen, but here's a use case:\nWhen a domain computer with Windows 7 Enterprise is browsing via Samba for network shares to the computer with Slim 3.1.0, it makes the following request to port 80:\n\"PROPFIND / HTTP/1.1\" 200 1146 \"-\" \"Microsoft-WebDAV-MiniRedir/6.1.7601\"\nApache's error log posts the following: \n[:error] [pid 169185] [client x.x.x.x:57097] PHP Fatal error:  Uncaught exception 'InvalidArgumentException' with message 'Unsupported HTTP method \"PROPFIND\" provided' in /var/www/html/vendor/slim/slim/Slim/Http/Request.php:327\\nStack trace:\\n#0 /var/www/html/vendor/slim/slim/Slim/Http/Request.php(179): Slim\\\\Http\\\\Request->filterMethod('PROPFIND')\\n#1 /var/www/html/vendor/slim/slim/Slim/Http/Request.php(146): Slim\\\\Http\\\\Request->__construct('PROPFIND', Object(Slim\\\\Http\\\\Uri), Object(Slim\\\\Http\\\\Headers), Array, Array, Object(Slim\\\\Http\\\\RequestBody), Array)\\n#2 /var/www/html/vendor/slim/slim/Slim/Container.php(131): Slim\\\\Http\\\\Request::createFromEnvironment(Object(Slim\\\\Http\\\\Environment))\\n#3 /var/www/html/vendor/pimple/pimple/src/Pimple/Container.php(113): Slim\\\\Container->Slim\\\\{closure}(Object(Slim\\\\Container))\\n#4 /var/www/html/vendor/slim/slim/Slim/Container.php(266): Pimple\\\\Container->offsetGet('request')\\n#5 /var/www/html/vendor/slim/slim/Slim/App.php(299): Slim\\\\Container->get('request')\\n#6 /var/www/html/public/index.php(16): Slim\\\\App->run()\\n#7 {main}\\n  thrown in /var/www/html/vendor/slim/slim/Slim/Http/Request.php on line 327\nWould be nice not to have random errors in the log.\n. ",
    "robertprice": "I've noticed the same exception being thrown in production by something calling the \"PROPFIND\" method. I think it would be good to catch this gracefully.\n. I've put a pull request in for this. The code is along the lines @dudewithamood suggested.\n. Merging #1978 will fix the php7 failing tests.\n. Yes :-)\nOn Sunday, 4 September 2016, Rob Allen notifications@github.com wrote:\n\nAh - Replaced with #1978 https://github.com/slimphp/Slim/pull/1978\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/slimphp/Slim/pull/1977#issuecomment-244592000, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABXCBY32toitOfmFlucbtItvKi5WVkihks5qmovogaJpZM4JzwJj\n.\n. This requires #1978 to be merged to fix the php7 build issues.\n. This has now been merged into Slim.\n. You need to update testMustSetReasonPhraseForUnrecognisedCode in ResponseTest.php as it's testing for 499 as an unrecognised code, but as this has now been defined a new code is needed. This will get the phpunit tests passing again.\n. Do you have anything automatically adding a trailing slash to a request, perhaps in a .htaccess file?\n. I think @mathmarques makes a good point. withBody clones and sets the body, so it's the same code really. It may make more sense to do this instead of duplicating code.\n. I was testing decoding of objects, but I can't remember the reasons now. \n\nI think it's safe for you to ignore this, and for me to learn to write better commit messages.\n. ",
    "dhm80": "Same here... with \"PROPFIND\" request method \"hack\".\nWould like to be able to use methodNotAllowed handler instead.\n@robertprice I added a hack in my Request child class... maybe it helps ;)\nhttps://github.com/ansas/php-component/blob/93b085481a5730010af171627d7172baa6bb9a0f/src/Slim/Http/ExtendedRequest.php#L30-L51. ",
    "thescientist13": "I'm actually on 2.8.2, is there a way with 2.x to do the same?\n. ",
    "nmhnmh": "@akrabat Thank your for your advice, middleware seems to be a good solution at the moment. \n. ",
    "zzgab": "Thanks\n. @JoeBengalen What kind of tree shall we expect? Do you have an example in mind, that could help me understand the construct of such tree? Thanks a lot.\n-- edit:\nDon't bother: I re-read the doc http://www.php-fig.org/psr/psr-7/\nAnd inded, they provide an example there.\nThanks.\n. (yep :) )\n. Sure, I see your point. Thank you. PR modified.\n. ",
    "llvdl": "Either document slim.files option for Route::createFromEnvironment and add tests or remove the Environment argument and rename the function to Route::createFromGlobals [BC break] (see #1899)\n. A third option would be to throw an error or emit a warning if ob_get_length() is not 0.\nAs a note: neither options will work for content that is being added after App::finalize() has completed. That content will still be truncated by the browser. I don't know when or how New Relic content is added, so this may not be an issue.\n. It seems to content is not actually cut off by Slim, but instead by the browser.\nTL;DR When outputting content, a Content-Length header is set and the browser (not Slm) will disregard content after that set amount of bytes. Either disable the header, or write all output the request body. \nI tried your example in PHP 5.6 using the PHP built-in webserver and I got the following result in my brower:\nAAA12\nFetching the page with curl on the command line gives:\n```\n$ curl -v localhost:8000\n Rebuilt URL to: localhost:8000/\n   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 8000 (#0)\n\nGET / HTTP/1.1\nHost: localhost:8000\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 200 OK\n< Host: localhost:8000\n< Connection: close\n< X-Powered-By: PHP/5.6.11-1ubuntu3.1\n< Content-Type: text/html; charset=UTF-8\n< Content-Length: 5\n< \n Excess found in a non pipelined read: excess = 6, size = 5, maxdownload = 5, bytecount = 0\n Closing connection 0\nAAA12\n```\n\nCurl (when setting the verbose flag), states that there is excess data, which is the data that is not displayed. To see that the output is actually rendered, I used telnet:\n```\n$ telnet localhost 8000\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nGET / HTTP/1.1\nHost: localhost:8000\nHTTP/1.1 200 OK\nHost: localhost:8000\nConnection: close\nX-Powered-By: PHP/5.6.11-1ubuntu3.1\nContent-Type: text/html; charset=UTF-8\nContent-Length: 5\nAAA12345BBBConnection closed by foreign host.\n```\nAs you can see on the last line, all characters are sent. It's the browser that discards content after the first 5 characters (the size set in the Content-Length header).\n. The header is indeed sent by the framework. The framework can't determine how many characters are sent before or after it runs, so in hindsight it makes sense that the Content-Length set does not match the actual length of the content (I was surprised out the outcome as well).\nPerhaps this should be addressed in the Slim documentation?\n. I guess using a framework for creating a HTTP response means you don't add content to the response outside of the framework. But this is a question probably better answered by the project maintainers.\nOne way to work around this, is to extend \\Slim\\App and override the finalize method to omit the Content-Length header, e.g.\nprotected function finalize(\\Psr\\Http\\Message\\ResponseInterface $response)\n{\n    return parent::finalize($response)->withoutHeader('Content-Length');\n}\n. I guess this is because the chunked reading, in the case of a known content length, assumes that when reading a chunk, the chunk will always be the given size:\necho $body->read($chunkSize);\nAs the documentation for StreamInterface::read states, the size could be less than $chunkSize, and the amount of data will fall short of the expected amount. Instead of counting chunks, the amount of received bytes should be counted or the amount of chunks to read should be recalculated based on the actual amount of bytes read.\nI am  also not sure why there is a different implementation for reading chunks when the content length is known. I would expect the simpler way you mentioned to work for both cases.\n. I think the underlying issue is that calling fstat on the file pointer returned by popen returns a size of 0.\n$fh = popen('ls', 'r');\nprint_r(fstat($fh));  //   prints  [size] => 0\nThis causes $stream->getSize() to return 0. I also tried \\Slim\\Http\\Stream instead of \\GuzzleHttp\\Psr7\\stream_for, but to no avail.\nAccording to the PHP documentation for popen, the file handler should be closed using pclose not fclose. Both Guzzle and Slim stream implementations use fclose. So it seems the Stream class is currently not made for working with popen file pointers. \nAs a workaround, you could create a class that implement StreamInterface to properly handle the popen file pointer, returning null when calling getSize() and pclose() on close().\nSince you are using Guzzle, you may want to take this up with the Guzzle developers as well.\n. I have created a pull request that checks for a pipe and if the stream is considered a pipe then:\n- pclose is used instead of fclose\n- getSize() returns null\n- isSeekable() returns false\n- seek, rewind and tell throw a \\RuntimeException\n. The current solution assumes that if the stream is a pipe, then the stream is readable pipe. Normally, checking the readability of a stream is determined using stream_get_meta_data, but this method does not work for pipes in hhvm.\nA pipe can be either readable or writable, depending on the mode given when creating the pipe (this mode cannot be determined in hhvm afterwards).\n. Stream are abstracted by the StreamInterface interface, which doesn't have a method to read the contents and stream and print it directly. Both StreamInterface::read() and StreamInterface::getContents() return a string.\nSince there is no method to get the underlying stream, fpassthru can't be used.\n. If I found the request at issue 1669. I'll leave it up to you to judge whether the use case is justified :) \n. references #1669 \n. This is a fix for #1836 where not all data is read if StreamInterface::read returns less than the request amount of bytes.\n. The unit tests run without problems on my local environment (Xubuntu 15.10, PHP 5.6.11), but fail on Travis. \nIf you could help me reproduce the failing test locally, then I would appreciat it. I can probably get on IRC tonigh (CET).\n. Thanks!\n. Hmm.. installed php5-mcrypt, but the test still succeeds.\n. mcrypt does not show up, I will investigate why.\nThe fix you suggested seems to do the trick! Thanks for looking into this.\n. Thanks for the feedback, @ddalek.\nI replaced isSeekable() with your version, but then multiple unit tests fail, so I reverted to the version I submitted before.\n. For some reason the tests fail on the hhvm machine: RuntimeException: Could not seek forward in stream is raised when trying to read from the pipe.\n. I removed the check for && !$this->isPipe() and the test still pass, so it seems you are right, @ddalek .\n. @I created a virtual machine with hhvm and could reproduce the failing tests. The cause was isReadable() returning false in hhvm. I added a unit test and a check for isPipe() and the tests \nI removed the seekForward implementation for now, as it doesn't seem to work for pipes in PHP. \nUpdate: the reason isReadable() returned false with hhvm is that the mode is empty when using stream_get_meta_data() on a resource opened with popen():\n``` php\n<?php\n$fh = popen('echo 1', 'r');\n$meta = stream_get_meta_data($fh);\nvar_dump($meta['mode']);\nstream_get_contents($fh);\npclose($fh);\n```\nResult using PHP (version 7.0.4): string(1) \"r\"\nResult using hhvm (version 3.13.1): string(0) \"\"\nApparently, the mode for the stream cannot be determined using stream_get_meta_data() in hhvm in the case of pipes. For what it's worth, the manual does not mention streams using popen(), so the behaviour of hhvm is technically not incorrect.\nAlso, although the metadata provided by hhvm using stream_get_meta_data() on a pipe states that the stream is seekable, a fseek($fh, 1, SEEK_CUR) seems to always return an error (-1) and does not change the stream pointer.\nWith the current behaviour of hhvm, I think it will be hard to get pipes supported by Stream correctly.\nUpdate: I have reported the issue at hhvm: https://github.com/facebook/hhvm/issues/7089\n. @danielgsims, thanks for looking into this. The framework seems to consistently call Route with an array of methods, but the Route constructor is public, so this could be BC.\nI have removed the typehint and added a check in the constructor to convert the parameter to an array if a string is passed. This way Route::getMethods always returns an array, as stated in the docblock. The docblock of the constructor is changed so it is clear that either a string or an array can be used.\n. Is this for testing an application that uses Slim?\nslim.files is not used by Slims internal tests. If I remove the slim.files part, the tests still succeed.\n. The lines of code with the $valid static variable that where in the function withProtocolVersion had code coverage. Those lines have been taken out and the total count of lines with code coverage has decreased because of this (static class variables don't count for code coverage).\n. Can you provide the contents of $env that is passed to URI::createFromEnvironment?. I created a public/index.php file with the following content\nphp\n<?php\nvar_dump($_SERVER);\nand started a PHP built-in web server in the directory above public. I get the following output:\narray (size=23)\n  'SERVER_NAME' => string 'localhost' (length=9)\n  'SERVER_PORT' => string '8000' (length=4)\n  'REQUEST_URI' => string '/public/foo_bar' (length=15)\n  'SCRIPT_NAME' => string '/public/index.php' (length=17)\n  'PATH_INFO' => string '/foo_bar' (length=8)\n  'PHP_SELF' => string '/public/index.php/foo_bar' (length=25)\n  'HTTP_HOST' => string 'localhost:8000' (length=14)\n  ...\nPerhaps other servers (Apache, Nginx) return a different value for REQUEST_URI?. Are you using the PHP built-in webserver? It seems $_SERVER['SCRIPT_NAME'] is used to determine the base path. When running the PHP buit-in web server. this path is relative.. What do you see when you output $_SERVER? Particularly in the SCRIPT_NAME and REQUEST_URI parts?. The headers are taken from the $_SERVER variable. As per the CGI/1.1 specification:\nMeta-variables with names beginning with \"HTTP_\" contain values read\nfrom the client request header fields, if the protocol used is HTTP.\nThe HTTP header field name is converted to upper case, has all\noccurrences of \"-\" replaced with \"_\" and has \"HTTP_\" prepended to\ngive the meta-variable name.\n\nIf I call a test script with curl and send the header A_a-a, it is stored in PHP in $_SERVER as:\nArray(\n    [HTTP_A_A_A] => test\n)\n$request->getHeaders() returns the header as PHP passes it through $_SERVER:\n[\"HTTP_A_A_A\"]=>\n  array(1) {\n    [0]=>\n    string(4) \"test\"\n  }\nFrom what I gather, there is no original case to be retrieved. The headers in $_SERVER are already stored in uppercase before Slim starts. getallheaders() does seem to contain the headers in the original case, but I don't think that function is available on all web servers, e.g. Nginx.\nChanging $request->getHeaders() to return the headers without the HTTP_ prefix looks like the right thing to do to me, but I it would break backwards compatibility for Slim 3. Perhaps fix this only for Slim 4?\n. Given the router has the same features and ease of use, I have no objection to moving to another router implementation for Slim 4.\nI like how I can swap out the container implementation in Slim 3 to use for example PHP-DI or league/route. Perhaps we can create a router interface and then adaptors can be created for different router implementations?\n. It seems to be confusing. I think the author meant to use numbered placeholders, not padded strings. I propose just using plain placeholders (%s). I have added a PR.. Good call. Slim-Http needs to be updated as well. I will create a PR for Slim-Http after work.. I think that would break the ability for middleware to replace or alter the response.\nI think a generator as a body would be a good fit here. If Slim could be altered to allow a generator as well as a Psr\\Http\\Message\\StreamInterface instance, then the following code could be used:\nphp\nclass NonBufferedAction\n{\n  public function __invoke(Request $request, Response $response): Response\n  {\n    return $response\n      ->withBody(function (): Generator  { // won't work now, as Slim expects a StreamInterface instance\n        foreach (['alpha', 'beta', 'gamma', 'delta'] as $data) {\n          sleep(1);\n          yield $data;\n        }\n      });\n  }\n}\n. That would collide with the isPipe method\n. The value is cached. If null the value is determined and then set in isPipe().\n. In Stream::detach()\n. I didn't know that :)\n. I expanded the comment\n. Because FastRoute supports both a string parameter and an array of string. Because there is no array typehint on $methods, string was already supported. I updated the docblock to reflect this. \nAlso, when setting Route::$methods in the constructor, the value is set to an array, so Route::getMethods() always returns an array as stated in the docblock.\n. ",
    "marcelbonnet": "Hi, suggestion: allow us to set our own \\Slim\\Route impl . See #1906 . By now (3.4.2), it is possible, but at risk to break something (since we need to alter part of the Slim\\Router::map function to point to our own Route impl)\n. @vicolachips44 , I also was looking for a way to set my own implementation of \\Slim\\Route . Good one, I'll try it later. \nBut, @codeguy , @silentworks  is this ok for merge? It would be much better to use this approach as a Slim official release, so we would not break compatibility in near future official releases, please!\n. @akrabat , thanks for your question! See the piece of code below. IMHO, it push us to change to much core code just to insert a new function to the inherited class. \nI am concerned about overriding map:\n- what if changes occour to Router::map in near future? It would break the approach\n- we have to create two new classes, an inheritance of Router and Route, because we do not have direct access to change the way Router instantiate a type of Route (see below)\n- and all this work just to instantiate another Route (like the example, RouteB) ?\nThat is why I agree with this merge request. Seems reasonable. Correct me if I'm wrong.\n``` php\nclass RouteB extends \\Slim\\Route{\npublic function allow($roles){\n    //my new function\n}\n\n}\nclass RouterB extends \\Slim\\Router {\n    /\n\n     * {@inheritDoc}\n     * @see \\Slim\\Router::map()\n     /\n    public function map($methods, $pattern, $handler)\n    {\n        if (!is_string($pattern)) {\n            throw new InvalidArgumentException('Route pattern must be a string');\n        }\n    // Prepend parent group pattern(s)\n    if ($this->routeGroups) {\n        $pattern = $this->processGroups() . $pattern;\n    }\n\n    // According to RFC methods are defined in uppercase (See RFC 7231)\n    $methods = array_map(\"strtoupper\", $methods);\n\n    /* ******************************************************\n             * Is this approach ok just to instantiate RouteB instead of Slim\\Route ????? \n             *******************************************************\n            */\n    $route = new RouteB ($methods, $pattern, $handler, $this->routeGroups, $this->routeCounter); \n    $this->routes[$route->getIdentifier()] = $route;\n    $this->routeCounter++;\n    return $route;\n}\n\n}\n$container['router'] = new RouterB();\n```\n. > You'll still have to do this.\nbut the point is: All we need is just to tell Router what kind of custom Route implementation we want. We don't want to change other parts of Router::map. \nIf  Router::map make a call to a new function Router::createRoute($methods, $pattern, $callable) , it is done, no more map code replication :)\n. ",
    "kwhat": "I would like to see subRequest or at least some way to check a uri for a route match and then dispatch that request though the router. \n. @geggleto I dug through the router code (Slim + FastRoute) and it looks like subRequest can be completely replaced in my use case.  +1 for deleting it and also +1 for removing SlimException ;)\n. Invalid, the code is never reachable. \n. ",
    "nickdnk": "Fix error 500 bubble to top on when using unsupported HTTP method https://github.com/slimphp/Slim/issues/2005\n. I did configure my notAllowedHandler. But that seems to only handle those methods recognized by Slim. I cannot control what methods will be used, as those are generated by the client. The error description reads: Unsupported HTTP method \"BDMTHD\" provided - I cannot prevent this. BDMTHD is obviously short for \"Bad Method\" which is what the vulnerability scan intentionally uses to see how the server responds. I believe Slim by default should respond with \"Bad request\" instead of throwing an exception. Edit: Because there is no case where you'd use an unsupported HTTP method anyway.\nMy notAllowedHandler is configured like this:\n$container['notAllowedHandler'] = function ($c) {\n    return function ($request, $response) use ($c) {\n        /** @var Slim\\Views\\Twig $c ['view'] */\n        return $c['view']->render($response, 'templates/partials/notFound.twig')->withStatus(404);\n    };\n};\nI just display the same notFound.twig as I do when someone requests a resource that does not exist, but again, this only works for valid request methods.\n. Hey\nUnless you fixed it and I missed it, yes.\nIt's not more of an issue than en error log each request. I still think it should display a 404 for a bad route, since technically you're asking for a resource that doesn't exist (and never will). Or perhaps 400. Anyway I think an exception is unnecessary.\nSent from my iPhone\nOn 1 Oct 2016, at 14.11, John Porter notifications@github.com<mailto:notifications@github.com> wrote:\n@nickdnkhttps://github.com/nickdnk is this still an issue for you?\n\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/slimphp/Slim/issues/1927#issuecomment-250909175, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AIBYslv_QQfUBJUZm9-oyzrgIf67W046ks5qvk3qgaJpZM4JD_rl.\n. Why are we adding custom methods? We have no idea what the method might be, hence my conclusion: If you send an HTTP method that is not part of the HTTP specs, the server should respond with 400 bad request or 404 not found. There is no reason a malformed request from a client should throw an Exception in the server code? I can't follow that logic at all.\nIf you specifically use a nonstandard method in your app, then I agree that it should be possible to extend allowed methods. But I'm taking about a HTTP methods/verbs that you cannot control.\nI have no interest in using the method BADMTHD, but I don't think my server should handle such a request by throwing an exception.\nI hope this makes sense. I had a few beers, honestly.\nOn 1 Oct 2016, at 21.42, John Porter notifications@github.com<mailto:notifications@github.com> wrote:\nI've just had a look to re-familiarise myself with the code responsible and I can see a possible issue from my perspective.\nI can understand why the code is as it is: HTTP spec allows for a specific set of methods, and the codebase follows specification. If the specification doesn't have those methods, then it is seen as a runtime exception.\nThere are a couple of solutions I think.\n-   One is to allow a method to add additional HTTP methods to the Request instance. Something like withCustomMethod.\n-   The other is to extend the Request object with a custom version, allowing for custom methods.\nMy preference would be to add the method, so only the container definition would need changing. This would fit well with the composition over extension principle (I think I wrote that right, correct me if wrong).\nLet's ask for opinions from @akrabathttps://github.com/akrabat and @silentworkshttps://github.com/silentworks.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/slimphp/Slim/issues/1927#issuecomment-250933022, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AIBYsm4j9OPVJHCyXg2M-KqTSeAh4HcHks5qvreJgaJpZM4JD_rl.\n. Any news on this? :)\n. Cool. Just checking. I'd do it myself if I had the slightest clue how to fix it correctly.\n. Just FYI I have written the test. I argue for 400 and not 405 because 405 indicates the server knows the method but does not allow it on the endpoint.\n. Hey Ian\nGreat job fixing this :) I will admit I don't have the knowledge with Slim to go over the code, though.\nBut what's the argument for 405 and 404 in the tests?\n405 indicates that the server knows the method but doesn't support it on the endpoint. Wouldn't it be 400 when using an unsupported method?\nI realize that this hardly matters. Just curious.\nOn 4 Feb 2017, at 05.07, Ian Littman notifications@github.com<mailto:notifications@github.com> wrote:\nIt took long enough, but I've got a 3.x compatible fix (with BC!...unless you were catching an InvalidArgumentException at App::run() outside of the standard error handlers) for the 500s. I haven't touched the routing side of things due to the potential perf impact and the potential of breaking the way folks have overridden this issue in the past (by extending Request and swapping out the container request impl).\nSee my commit notes for more detail on why I implemented the way I did. PRing in a sec.\n-\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/slimphp/Slim/issues/2005#issuecomment-277417130, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AIBYsmLE-Jhgq42zS8Mbo14oZlkhQ1Xkks5rY_l2gaJpZM4KM53F.\n. Hey Ian\nGreat job fixing this :) I will admit I don't have the knowledge with Slim to go over the code, though.\nBut what's the argument for 405 and 404 in the tests?\n405 indicates that the server knows the method but doesn't support it on the endpoint. Wouldn't it be 400 when using an unsupported method?\nI realize that this hardly matters. Just curious.\nOn 4 Feb 2017, at 05.07, Ian Littman notifications@github.com<mailto:notifications@github.com> wrote:\nIt took long enough, but I've got a 3.x compatible fix (with BC!...unless you were catching an InvalidArgumentException at App::run() outside of the standard error handlers) for the 500s. I haven't touched the routing side of things due to the potential perf impact and the potential of breaking the way folks have overridden this issue in the past (by extending Request and swapping out the container request impl).\nSee my commit notes for more detail on why I implemented the way I did. PRing in a sec.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/slimphp/Slim/issues/2005#issuecomment-277417130, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AIBYsmLE-Jhgq42zS8Mbo14oZlkhQ1Xkks5rY_l2gaJpZM4KM53F.\n. I'm sorry, but what does that mean? Ian told me to write this test to draw his attention to fixing it. He has an issue open for it, as do I.\nTesting is not my strong suit.\nSent from my iPhone\nOn 18 Nov 2016, at 09.14, Rob Allen notifications@github.com<mailto:notifications@github.com> wrote:\n@nickdnkhttps://github.com/nickdnk Can you address the PHPCS issues please?\n\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/slimphp/Slim/pull/2031#issuecomment-261473206, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AIBYsmfnHUy80tPZW2G1sG-XrI18B9KEks5q_V5QgaJpZM4Ko0lq.\n. Aha okay. I'll have a look at that when I can.\nThis means the actual code is fine but it has to do with new lines, indents and so on, correct?\nSent from my iPhone\nOn 18 Nov 2016, at 11.48, Rob Allen notifications@github.com<mailto:notifications@github.com> wrote:\n@nickdnkhttps://github.com/nickdnk If you look in CI section on here, you'll see: \"Some checks were not successful\".\nOpening up, you see that this PR failed the Travis checks. Clicking on \"Details\" takes you to https://travis-ci.org/slimphp/Slim/builds/173057833.\nPick the 5.6 one, click into it and scroll to the bottom and you'll see what @dopesonghttps://github.com/dopesong posted earlier. This is the list of errors created by phpcs.\nSpecifically in AppTest.php, there are problems with lines 1988 and 2006.\n\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/slimphp/Slim/pull/2031#issuecomment-261503084, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AIBYsnP1B_PJTQ8_NmNZI1Gs2UeD_468ks5q_YJjgaJpZM4Ko0lq.\n. Aha okay. I'll have a look at that when I can.\nThis means the actual code is fine but it has to do with new lines, indents and so on, correct?\nSent from my iPhone\nOn 18 Nov 2016, at 11.48, Rob Allen notifications@github.com<mailto:notifications@github.com> wrote:\n@nickdnkhttps://github.com/nickdnk If you look in CI section on here, you'll see: \"Some checks were not successful\".\nOpening up, you see that this PR failed the Travis checks. Clicking on \"Details\" takes you to https://travis-ci.org/slimphp/Slim/builds/173057833.\nPick the 5.6 one, click into it and scroll to the bottom and you'll see what @dopesonghttps://github.com/dopesong posted earlier. This is the list of errors created by phpcs.\nSpecifically in AppTest.php, there are problems with lines 1988 and 2006.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/slimphp/Slim/pull/2031#issuecomment-261503084, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AIBYsnP1B_PJTQ8_NmNZI1Gs2UeD_468ks5q_YJjgaJpZM4Ko0lq.\n. I think it's good now, yes?\n. Done\n. Ah, okay. Perhaps this would be a good reason to add one then. If not for anything then just to avoid other similar questions.\n. I don't agree. I think we should add the missing shortcuts instead. Since they're mapped to the defined HTTP protocol verbs I don't see any reason to not have them. They are very convenient and make the code easily readable in my opinion.\n. The same as when needing any other route method I guess. I just think it's weird that we have shortcuts for some http verbs but not for others. It's inconsistent in my opinion. I suppose the argument against it is that an endpoint supporting HEAD should also support some other method, and hence use map. But if you group methods into something and allow POST, GET and HEAD on the root within that group, you will need the HEAD shortcut or use map with only 1 method.\nSent from my iPhone\nOn 18 Nov 2016, at 09.19, Rob Allen notifications@github.com<mailto:notifications@github.com> wrote:\n@nickdnkhttps://github.com/nickdnk What's your use case for needing a separate HEAD method?\n\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/slimphp/Slim/issues/2033#issuecomment-261473996, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AIBYshwGvwVh8DWbBv4re3Pici2fe13Xks5q_V-RgaJpZM4KtBwK.\n. Aha, okay. I thought the logic in a HEAD request might differ from that of a GET as in \"use head to check for something on and endpoint but return no body\". I didn't know they were supposed to be identical. In that case I guess it's not an oversight.\nNo ask no learn :)\nSent from my iPhone\nOn 18 Nov 2016, at 11.42, Rob Allen notifications@github.com<mailto:notifications@github.com> wrote:\nThe thing is: HEAD is exactly the same as GET, except that the body is omitted. Slim already supports that.\nSo writing an $app->head() would imply a special use-case.\n\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/slimphp/Slim/issues/2033#issuecomment-261501931, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AIBYsknWHvYZx65e9IASgMnCU-SYh7oLks5q_YENgaJpZM4KtBwK.\n. May I suggest using === for comparison:\nif (200 === $clone->getStatusCode() && 'location' === strtolower($name)) {\n    $clone = $clone->withStatus(302);\n}. ",
    "chadicus": "\nMove documentation into main repo and publish to website on each new release. That way we can insist on documentation with the PR.\n\nRecommend adding PHPDoc requirements to the coding standard for this. It would make it much more enforceable. \n. @codeguy I just saw the issue discussion and thought I'd lend a hand by adding the method. I have no use case for HEAD requests. Feel free to reject the PR.\n. What's the actual error?\n\nWhen i tried to get the params from the request $data = $req->getParams();\n\nRemember that getParams is not PSR-7 so don't expect it to exist on the guzzle request object.\nAlso, i've noticed a few slight differences between the  Request class that comes with the core slim/slim package and the Request class that comes with the slim/http\nIt would also help to know which version of Slim and Guzzle you are using.. @SananGuliyev  I'm not sure if this helps, but you can define the controller construction within the container\n```php\nuse Psr\\Container\\ContainerInterface;\nuse Some\\Controller;\n$app->getContainer()[Contorller::class] = function (ContanierInterface $container) : Controller {\n    return new Controller($container->get('someService'));\n};\n$app->get('/',    Controller::class . ':someMethod');\n```. PHP 5.6. ",
    "SergeAx": "Just a thought: Is it possible to distinct middleware type by it's signature and implement some kind of autowiring to preserve compatibility?. @akrabat , sorry, hadn't checked out current progress. So I just wait for #2290 to be merged, right? Is there any time estimates? . ",
    "mhndev": "It would be great If we could run the whole application through cli .\nIn my opinion application is separate from how it is going to be called.\nIn most cases the initiator is a http request from a web server, but each action and each route should be callable though cli commands.\nso I think actions shouldn't receive Http Request and Http Response as argument at all.. thanks for your help,\nwith this line of code :\nset_error_handler(function ($errno, $errstr, $errfile, $errline ,array $errcontex) {\n    throw new ErrorException($errstr, 0, $errno, $errfile, $errline);\n});\n\nat the very beginning of my code, now it catches all errors and exceptions.\nbut my next issue is in my sentry dashboard, It doesn't group same exceptions as one record.\n. ",
    "michaeldnelson": "Some of these things might just be middleware or documentation opportunities.  I also agree with one of the previous posters that slims \"Unique selling proposal\" is performance and minimalism so take all of this with a grain of salt.\n\nAccess to subdomain patterns in routing. e.g. {workspace}.myproject.com\nRoute binding, I end up writing a lot of boiler plate to get objects/variables from routes, php-di-slim bridge does some things here, would like something like laravel explicit route model binding which should be model/orm agnostic\nI would to add data to a route that can be accessed in middleware, for example,  $route->addData([\"required_scopes\" => [\"user\"], \"name\" => \"myroute\"], then you could write middleware that uses scopes for auth or checks against the name for something.\nDocument an example or recommended async pattern for slim.  Async is just not optional anymore, it can definitely tip the scales in a framework decision if one framework has robust documented async pattern and another does not.. \n",
    "ndobromirov": "A big :+1:  on the last point from @michaeldnelson.. @mhndev this is where you should use something like https://github.com/php-pm/php-pm/blob/master/bin/ppm and your Slim app works with PSR messages.. @Zegnat, $request->getProtocolVersion() === '1.0' &&\n        $response->getProtocolVersion() !== '1.0' is always false.... So if I am understanding it correctly the current policy is:\nLatest stable -> new features + bug fixes + security fixes.\nLatest stable (- 1)  -> bug fixes + security fixes\nLatest stable (- 2)  -> security fixes\nLatest stable (- 3)  -> no support\nEvery transition is roughly 2 years. so to put this into a real example: \nCurrent stable is Slim 3\nSlim 2 will continue to get fixes and security until Slim 4 is out.\nWhat's the current state of Slim 1 - security only?\nWhen Slim 4 is out: (some time this year?)\nSlim 3 will get bug-fixes + security fixes.\nSlim 2 will get only security fixes.\nSo to answer my question (very roughly), Slim 2 will die when Slim 5 comes out. (some time 2019+).\nI'd love to make a PR with that info, but first validate my thoughts.\nAlso if you can give me some concrete dates I can base the calendar on :) and also where the docks should be located in the repository.\n. Ok, so Slim 2 EOL comes with Slim 4 (or very close after it), just as Slim 1 is not supported currently?. Well the support is if there is a security issue in Slim 4 and one year after it's release it is found and fixed in 4 and 3 and it's affecting 2. How does this affect Slim 2 at that point? \n - Wait for a random eventual PR, the thing you've stated above.\n - Back-port / implement a fix.\nI've started this conversation due to an audit of a particular Slim 2 application. That was done in early 2015 (just before Slim 3 was out). As it is kind of important to use supported software, I will need to know  the time-frame for them to migrate to newer version (3 or 4).\n. Ok, so now that this was cleared the documentation PR should be against this this repository?\nhttps://github.com/slimphp/Slim-Website\nI will try to make a draft sometime this week based on the information gathered here.. I will be marking this as closed and open a new issue against the other repository. Thanks! :). On top of that 7.0 is ending support before 5.6 :). Why use curl directly and not some abstraction library like Guzzle?. Proposed version...\n```php\n    /*\n     * Get data value with key\n     * @param  string $key     The data key\n     * @param  mixed  $default The value to return if data key does not exist\n     * @return mixed           The data value, or the default value\n     /\n    public function get($key, $default = null)\n    {\n        if ($this->has($key)) {\n            $item = $this->data[$this->normalizeKey($key)];\n            $isInvokable = is_object($item) && method_exists($item, '__invoke');\n        return $isInvokable ? $item($this) : $item;\n    }\n\n    return $default;\n}\n\n```. ",
    "edsgerlin": "Any plan to bump the minimal PHP version to 7.x+ and add scalar type hinting for everything?\n5.6 should reach EOL when Slim 4 been released.. ",
    "thangl3": "What time is the Slim 4.x release? I hope it soon.. ",
    "sinitsa": "native domains and subdomains patterns in routing with easy caching would be nice i think..\nthanks for your work guys). And on top of that all, async queue implementation option could be very useful, i think) ...at least in 5.x). ",
    "filips123": "When will stable Slim 4.x be released?. How can we now use dependency injection for tools like Monolog?. @akrabat So I could set my own container, include dependencies (like Monolog) into it, and then access dependencies with $app->container->dependency?\nThis could be in the documentation for v4.. It could be for some text based or CLI websites and applications.. No. This is just an idea, but it may be usable for someone.. What can I do if I want that unhanded errors will be send using application/vnd.api+json content type?\nI don't want that all responses are JSON because I also want to support other formats. So I want to send same content type as request, but format depending on type.. Ok. Thank you.. ",
    "stivni": "\nLooks good to me and maybe is that start of removing request and response from the container.\n\n@akrabat is there an issue for that?\n. > The app's job is to process the response and respond to the browser.\nIn ideal circumstances, I would indeed only use the App, but in legacy systems, I probably want to start using parts separately until all pieces of the puzzle fall in place.\n\nresponding to a request is the primary job of the app class.\n\nI'm not asking to isolate how the app responds to a request, but how the response itself is put on the wire. In a true object oriented way, we would ask the response to output itself or at least output itself to a given output stream. Because PSR-7 we don't have any method for that to implement, so it would make sense to have an isolated part of the application that does that.\nAnd just something philosophical: in the end all jobs will be performed within an app, so does that mean that all code should be in the same class?\n. ",
    "derekjones": "Thanks for the quick reply @geggleto, and for the great work on Slim in general.\n\nThere is no way for us to fix it... \n\nI'm not sure I agree, since PHP can't be sure it's the last link in the chain. That header doesn't have to be sent, or Slim could allow a developer to disable that header.\nBut I understand it's your prerogative to consider it external, and I'll file an issue with New Relic as well. As this will affect any high-performance app built on Slim that wants to use New Relic or a similar server-side injected real-user monitoring script, that's limiting the framework in my opinion, but that's your call. \nFor anyone encountering this while searching for the same problem, you can disable New Relic RUM for your Slim app, which of course negates all of the benefits of RUM, but at least allows content to be sent in full:\nif (extension_loaded('newrelic'))\n{\n    newrelic_disable_autorum();\n}\nor you can extend the \\Slim\\App class and replace the finalize() method with one that doesn't add that header, which will allow you to keep the server-side injected RUM enabled.\n```\nclass MyApp Extends \\Slim\\App {\nprotected function finalize(\\Psr\\Http\\Message\\ResponseInterface $response)\n{\n    // stop PHP sending a Content-Type automatically\n    ini_set('default_mimetype', '');\n\n    if ($this->isEmptyResponse($response)) {\n        return $response->withoutHeader('Content-Type')->withoutHeader('Content-Length');\n    }\n\n    return $response;\n}\n\n}\n$app = new MyApp;\n```\n. >  I have a very hard time believing that a product like NewRelic modifies the message output...\nIt does, see How does it work?. Its agent injects JavaScript by replacing the closing </body> tag of your server's output. It's rather brute force, but allows it to work on all HTML pages on the server, regardless of the delivery mechanism, and without requiring application modification.\nContent-Length is a \"should\" not a \"must\" header by spec, and without it my understanding is that the server sends the output in chunks without any noticeably deleterious effect. But as there are workarounds (thanks @mathmarques for the middleware tip) to this niche issue, no worries. Thanks!\n. Just a note that the middleware solution does not seem to work. The middleware is executing on the requests way in to the app, but not on the way out, so the App is still setting that header.\n. Ah, much cleaner than extending the base App class, thanks!\n. ",
    "kgustine": "I was having a similar issue where the last character of my JSON was missing!\nThe app had been working and all the sudden it wasn't.\nI finally pasted the raw JSON into Notepad++ and sure enough, the character count was +1 greater than the content-length header.  For some reason, I looked back at the beginning of the string and noticed there was a space before the opening character.  I soon realized that someone either left an echo statement active or injected a space into PHPs output buffer unintentionally.\nI finally found the culprit by placing an exit; statement at the very beginning of myindex.php page and walking it down until I found the source code with a space before the opening <?php tag.\nProblem solved! (mine at least)\nSeems like if Slim expects to take total control of the response, it should make sure the output buffer is empty.\n$size = $response->getBody()->getSize();\n        if ($size !== null && !$response->hasHeader('Content-Length')) {\n            ob_clean(); // <-- Clean the buffer!\n            $response = $response->withHeader('Content-Length', (string) $size);\n        }\nOtherwise, add the buffer length to the content length\n$size = $response->getBody()->getSize() + ob_get_length(); // <-- Add buffer length!\n        if ($size !== null && !$response->hasHeader('Content-Length')) {\n            $response = $response->withHeader('Content-Length', (string) $size);\n        }\n. I actually agree with @llvdl.  If the output buffer is not clean, slim should throw an error due to the difficulty of troubleshooting the side-effects.\n. ",
    "grikdotnet": "Sending the content-length header without being implicitly asked to do it leading to impossibility to integrate Slim into other application.\n. @geggleto thanks for the advice. I opened the issue to support other users in case the authors will want to solve it. I will use Symfony microkernel and Lumen, they don't have integration limitations.\n. I suppose, skipping the extra content is a correct behavior. And it's not an application that sends the header. PHP does not send this header on it's own, so it's a framework that sends the wrong value.\n. Perhaps the framework should not set the header value if it does not know it, and let the application developer do it if required.\n. I see. Well, as to me, a framework should be compatible as much as possible. The idea of microframeworks is to enforce less constraints. To be embeddable. To assist, not to limit.\nIf Slim requires a dedicated server configuration, the goal is not achieved.\n. A brief test shows that native PHP embedded server behaves the same way.\nIt is not possible to customize a SCRIPT_NAME value. It's a common development and debugging environment.\ngri$ php -t wwwroot/ -S localhost:8080 bootstrap.php\nPHP 7.0.2 Development Server started at Mon Mar 28 15:50:21 2016\nListening on http://localhost:8080\nDocument root is /opt/www/krossovki/wwwroot\nPress Ctrl-C to quit.\nvar_dump($_SERVER);\n\n/opt/www/krossovki/bootstrap.php:25:\narray (size=22)\n  'DOCUMENT_ROOT' => string '/opt/www/krossovki/wwwroot' (length=26)\n  'REMOTE_ADDR' => string '127.0.0.1' (length=9)\n  'REMOTE_PORT' => string '65480' (length=5)\n  'SERVER_SOFTWARE' => string 'PHP 7.0.2 Development Server' (length=28)\n  'SERVER_PROTOCOL' => string 'HTTP/1.1' (length=8)\n  'SERVER_NAME' => string 'localhost' (length=9)\n  'SERVER_PORT' => string '8080' (length=4)\n  'REQUEST_URI' => string '/products/qweqwe.123' (length=20)\n  'REQUEST_METHOD' => string 'GET' (length=3)\n  'SCRIPT_NAME' => string '/products/qweqwe.123' (length=20)\n  'SCRIPT_FILENAME' => string '/opt/www/krossovki/wwwroot/bootstrap.php' (length=40)\n  'PHP_SELF' => string '/products/qweqwe.123' (length=20)\n  'HTTP_HOST' => string 'krossovki.dev:8080' (length=18)\n  'HTTP_CACHE_CONTROL' => string 'max-age=0' (length=9)\n  'HTTP_CONNECTION' => string 'keep-alive' (length=10)\n  'HTTP_ACCEPT' => string 'text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8' (length=63)\n  'HTTP_USER_AGENT' => string 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/601.5.17 (KHTML, like Gecko) Version/9.1 Safari/601.5.17' (length=116)\n  'HTTP_ACCEPT_LANGUAGE' => string 'ru' (length=2)\n  'HTTP_ACCEPT_ENCODING' => string 'gzip, deflate' (length=13)\n  'HTTP_DNT' => string '1' (length=1)\n  'REQUEST_TIME_FLOAT' => float 1459169615.382\n  'REQUEST_TIME' => int 1459169615\n. It is not related.\nThe $_SERVER['SCRIPT_NAME'] is set to the URL value, and the routes are not processed with ANY URI.\n. Difference is in the ticket - they work with default settings.\nZF and Cake are dead, so the comparison is a bit funny.\n\nGuys, if you wrote Slim for your own needs - I'm totally OK with that. If you want it to be popular - this report is for you. Don't take it personally please.\nI will retest the issue with a builtin php server a bit later. Thanks.\n. I am here not to argue, sorry. Which words in particular I can help you with?\n. @akrabat unfortunately, yes, there is one important thing. \nIn most projects Nginx settings are defined by devops team, and developers can't change that. Microframework is intended to be a part of a large application and be integrated or embedded. There are default commonly used setting for Nginx and PHP. A SCRIPT_NAME parameter is one of them.\nAll other frameworks work with it. Slim does not. I spent half of a day finding the reason and provided links to the exact lines of code showing why it happens.\nI don't ask you to follow that. I have a feeling you don't like what I write, I guess I'll better leave. \nThanks, and sorry for inconvenience.\nGrigori\n. :D Guys, it's unrelated to dots in a URL. When I remove a line fastcgi_param SCRIPT_NAME $fastcgi_script_name; from Nginx config, it works fine with dots in URLs.\nThe issue is in processing of a SCRIPT_NAME parameter passed to PHP from a web server. \nI will write you the values of a URL and a baseUrl.\n. Everything included in default PHP setup is common. Php embedded server installation and user base exceeds Slim in something like 1000 times. A fly near an elephant. But supporting a feature or not is on a personal author will. I use a link to this discussion as an argument for avoiding Slim in favor of another framework.\n. The issue is that it does not work, and the links with explanation are provided.\nMaybe you can ask some question on what I can clarify?\nThe discussion flow is not that the report is unclear, but that it should not be fixed because the team don't need it to work. If you want to, if you have a question, I will be glad to assist and explain.\n. ",
    "wiserweb": "Using this sample\n```\n<?php\nuse \\Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse \\Psr\\Http\\Message\\ResponseInterface as Response;\nrequire 'vendor/autoload.php';\n$app = new \\Slim\\App;\n$app->get('/hello/{name}', function (Request $request, Response $response) {\n    $name = $request->getAttribute('name');\n    $response->getBody()->write(\"Hello, $name\");\nreturn $response;\n\n});\n$app->run();\n```\nIt seems that out-of-the box anyone using MAMP on OSX, XAMPP (Windows, Mac, Linux) or even a custom LAMP installation will encounter 'Page Not Found' if no .htaccess exists with at least these directives.\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^ index.php [QSA,L]\n. ",
    "phpinfointh": "The reason I thought this was a typo is ...\nIf someone uses array data that name key is missing (maybe mocking data), this will result in PHP notice.\n. ",
    "SvenRtbg": "I'd think that dealing with a client that is unable to properly parse HTTP does not warrant implementing a configuration settings for ALL Slim applications to change behavior for ALL clients.\n. @vlakoff \nI constructed a case where is_callable() will incorrectly fail:\nhttps://3v4l.org/6GkRS\n```\nclass Foo {\n    function __invoke() {\n        return 1;\n    }\nfunction trim() {\n   return 1;   \n}\nprivate function drum() {\n    return 1;\n}\n\n}\n```\nAssume that you want to add Foo::__invoke as a callable together with a call to the function trim, this detection would go wrong and detect a callable to Foo::trim.\n. > To make sure, does anyone think of a case where the if (!is_array($callable) || is_callable($callable)) test would give wrong result?\nI think the discussion is about allowing either add(SingleCallableMiddleware) or add([MultipleCallableMiddleware,MultipleCallableMiddleware]) and how to detect them. A valid callable can be an array itself, and elements of that array can also be callable themself.\nIf the user provides an array with a reference to an object that implements __invoke, and a string with a function that also is a valid method on the object as well as exists globally, you cannot distinguish between \"use object's __invoke and the global function\" and \"use object's method\".\nMy example probably failed to correctly display it, here's another one: https://3v4l.org/LGlf0\nMy point is: Don't overload methods with argument variants. Adding a new method that explicitly expects an array (or maybe any traversable) and adds all contained elements as another middleware is dead simple to write - messing with detection (that can go wrong in edge cases) is not.\n. I have two thoughts:\n1. More configuration in an array? Is there no other way?\n2. Caching the routing is great, but what I really need is a way to deploy a precompiled cache file, because I don't like writeable directories on a production server. Currently there is such a check in Slim, so in production the directory has to be writeable even though the file is already there.\n. The \\FastRoute\\cachedDispatcher() function does not explicitly check whether the cache file is writeable. It also does not throw an exception itself, it would probably trigger a PHP error if file_put_contents() cannot write to the cache file. However, if writing to a cache fails, it should not really affect the operation. \nIf Slim wants to add nicer behavior and notify the user about the problem, it should check if the cache file exists - it not, the directory should be writeable. Also, an existing cache file should be PHP code returning an array... in fact there are so many details that the FastRoute code takes care of, I think dealing with details of caching should be the task of FastRoute. If the current implementation does not correctly report the problem, send a pull request to FastRoute to deal with it more nicely, and then just use it.\n. Is there any benefit in keeping initialization that short? Reading this somehow suggests that $segments and $params have something important in common, but all I see after looking at it a bit longer is that they are simply set to an empty array. What about using two lines instead of one?\n. ",
    "palanik": "I have to disagree. It is not my intention to affect ALL Slim applications. That is why I specified this as an optional settings.\nThe option is also not arbitrary. It is part of the standard spec. & I wanted the flexibility.\nAs I stated earlier, if I could change the client, I would have.\nYou know that not all clients of Slim server are browsers. \nA simple mistake by a fellow programmer without foresight affects us all.\nThanks for looking into this.\n. @akrabat Respect your decision. Thanks.\n@tuupola Thanks. Will try it out.\n. ",
    "songyanho": "Noted; Thank you for your help!\n. ",
    "abbert": "@AndrewCarterUK Yes indeed. That's why I thought it needed to be implemented. Also, this comment is from the MessageInterface: The version string MUST contain only the HTTP version number (e.g., \"1.1\", \"1.0\").\n@akrabat when I delete the lines of code I added in the constructor of Request the test will fail..That means the protocolVersion is never overwritten with the version in the actual request\n. No problem :)\n. ",
    "xu42": "Sorry, It's my error.\nBecause I used the tuupola/slim-basic-auth, but I incorrect use of it.\nhttps://github.com/tuupola/slim-basic-auth#setting-response-body-when-authentication-fails\nI'm sorry for my issue.\n. ",
    "norkunas": "This works:\n$app->get('/[{path:.*}]', function($request, $response, $path = null) {\n    return $response->write($path ? 'subroute' : 'index');\n});\nAbout optional part you can read here: http://www.slimframework.com/docs/objects/router.html#any-route and https://github.com/nikic/FastRoute/blob/master/README.md\n. #359 \n. ",
    "ionescuvalentinadrian": "Thank you.\nIt worked.\n. ",
    "praswicaksono": "@mathmarques I mean, i shouldn't have to re define the default service such as response and request object, since the default service is defined in Container level so I have to re-define it when I tried to use another container other that pimple\n@AndrewCarterUK Im not decorating but replace pimple container to other container that already implement container interop.\n. well here is my initial thought\n``` php\nnamespace Slim;\nclass App\n{\n    private $container;\npublic function __construct($container = [])\n{\n    if (is_array($container)) {\n        $container = new Container($container);\n    }\n    if (!$container instanceof ContainerInterface) {\n        throw new InvalidArgumentException('Expected a ContainerInterface');\n    }\n    $this->container = $container;\n\n    // register default service\n    $this->registerDefaultService();\n}\n\nprivate function registerDefaultServices()\n{\n    // all default service definition moved here instead defined in Container\n}\n\n}\n```\nthe container class will be more simpler since default service has defined in App class\n``` php\n<?php\nnamespace Slim;\nclass Container extends PimpleContainer implements ContainerInterface\n{\n    public function get($id)\n    {\n        if (!$this->offsetExists($id)) {\n            throw new ContainerValueNotFoundException(sprintf('Identifier \"%s\" is not defined.', $id));\n        }\n        return $this->offsetGet($id);\n    }\npublic function has($id)\n{\n    return $this->offsetExists($id);\n}\n\n}\n```\n. Ah my bad, i just notice that container interop doesn't have contract for registering service in container. I guess it solved now I have to redefine the default service if I want to use my own container.\nthanks for your response\n. ",
    "wayne712": "@silentworks Sorry,  I am using ->add('Class:method') or ->add(new Class) and both failed to get container in slim3\n. @feryardiant Thanks for reply. I am still got the problem.   My sample are below.\n``` php\n// routes.php\n$app->get('/test', new \\App\\views\\Test());\n// or route\n$app->get('/test', '\\App\\views\\Test:index');\n// Test.php\nnamespace App\\views;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nclass Test\n{\n    public function index(RequestInterface $request, ResponseInterface $response)\n    {\n        $this->logger->info('log info');\n    return $response;\n}\npublic function __invoke(RequestInterface $request, ResponseInterface $response)\n{\n    $this->logger->info('log info');\n    $response->getBody()->write('Hello world');\n    return $response;\n}\n\n}\n```\nNotice: Undefined property: App\\views\\Test::$logger in \\App\\src\\views\\Test.php \n. @feryardiant ,  Thank you very much. I don't want to inject the Container myself. Anonymous function case works but object don't\n``` php\n$app->get('/test', function (RequestInterface $request, ResponseInterface $response) {\n        $this->logger->info('log info');\n    return $response;\n});\n\n```\n. @feryardiant , thanks. I saw the comments by  silentworks,he said \n\"You don't need to inject it yourself if you are using ->add('Class:method') or ->add(new Class). In these cases we inject container into the constructor for you. So you can call $this->container->get('router').\"\nSo I also wonder how it makes.\n. @feryardiant , thanks.  Base on your replied.  I think I understand now. \n. ",
    "dewey92": "Indeed, I have set up my middleware to handle the trailing slash as in the doc:\n```\n$app->add(function (Request $req, Response $res, callable $next) {\n    $uri = $req->getUri();\n    $path = $uri->getPath();\nif ($path != '/' && substr($path, -1) == '/') {\n    // permanently redirect paths with a trailing slash\n    // to their non-trailing counterpart\n    $uri = $uri->withPath(substr($path, 0, -1));\n    return $res->withRedirect((string) $uri, 301);\n}\n\nreturn $next($req, $res);\n\n});\n```\nThe middleware is okay with the other routes but for the group routes like above, unfortunately, it still returns 404.\n. ",
    "ajaykr089": "Hi akrabat, \nThanks for your quick response, \nI am unable to use SSH in my server because i am using shared hosting, So they will not provide me SSH access,\nIs there any other way to make it work? I have used your previous release on the same server without using composer. So i am sure there would be another way.\nPlease help me with it.\nThanks,\nAjay Kumar \n. Thanks :+1: \n. ",
    "TrySound": "@akrabat What if I don't want to use composer?\n. ",
    "johnstevenson": "Thanks @AndrewCarterUK. I composed it like this (rather than decorating the existing MiddlewareAwareTrait properties in some way) because of the explicit nature of the PHPDoc comment:\n\nThis is an internal class that enables concentric middleware layers. This\nclass is an implementation detail and is used only inside of the Slim\napplication; it is not visible to\u2014and should not be used by\u2014end users.\n\nAs I said in my introductory note, I have gone about this completely the wrong way! \n. > I think that SlimException was named incorrectly and we should have called it StopException ...\nPossibly, although I could see that causing some confusion because it is used differently from the exceptions that extend it (in that it requires a final response to have been created), so maybe a more generic name is better. Who knows? Whatever, it would be nice if it was documented (which I don't mind helping with).\n\nIs is that we can't write an errorHandler that knows about the current request/response?\n\nCorrect. And that makes it inconsistent with the notFound and notAllowed handlers.\n. Glad you like the handleException refactor. It certainly makes things a lot more readable. I can do a separate PR for this on it own if you wish (if it becomes the final outcome of this PR) - or you can just incorporate it yourself.\n. Thanks @AndrewCarterUK. It does mention this in the general comment line 559, but I agree that it is certainly worth including with the @throws annotation. I also need to correct the Response annotations to ResponseInterface so I'll do them all together.\n\nwhere a method called 'handleException' actually throws an exception\n\nGood point - that bit went completely over my head. Do you think it would be worth changing the method name, and if so, to what?\n. @akrabat. The refactor could also be used in App::__invoke(), although it is a bit clumsy in that it passes $request and $response params into handleException that are not actually used. Let me know if you want this included in the PR.\n``` php\n    /\n     * Invoke application\n     \n     * This method implements the middleware interface. It receives\n     * Request and Response objects, and it returns a Response object\n     * after compiling the routes registered in the Router and dispatching\n     * the Request object to the appropriate Route callback routine.\n     \n     * @param  ServerRequestInterface $request  The most recent Request object\n     * @param  ResponseInterface      $response The most recent Response object\n     \n     * @return ResponseInterface\n     * @throws MethodNotAllowedException\n     * @throws NotFoundException\n     /\n    public function __invoke(ServerRequestInterface $request, ResponseInterface $response)\n    {\n        // Get the route info\n        $routeInfo = $request->getAttribute('routeInfo');\n    /** @var \\Slim\\Interfaces\\RouterInterface $router */\n    $router = $this->container->get('router');\n\n    // If router hasn't been dispatched or the URI changed then dispatch\n    if (null === $routeInfo || ($routeInfo['request'] !== [$request->getMethod(), (string) $request->getUri()])) {\n        $request = $this->dispatchRouterAndPrepareRoute($request, $router);\n        $routeInfo = $request->getAttribute('routeInfo');\n    }\n\n    // Run the route if it has been matched and return the response\n    if ($routeInfo[0] === Dispatcher::FOUND) {\n        $route = $router->lookupRoute($routeInfo[1]);\n        return $route->run($request, $response);\n    }\n\n    // Route not matched so create an exception to pass to handler\n    if ($routeInfo[0] === Dispatcher::METHOD_NOT_ALLOWED) {\n        $exception = new MethodNotAllowedException($request, $response, $routeInfo[1]);\n    } else {\n        $exception = new NotFoundException($request, $response);\n    }\n\n    return $this->handleException($exception, $request, $response);\n}\n\n```\n. ",
    "ilijastuden": "Yes, understood. No BC breaks until next major release. I'll see what I can do about the docs.\n. ",
    "thecodeassassin": "@AndrewCarterUK i honestly cannot find a way to statically retrieve DI values\nbtw i know how to fix the problem for myself, but i would really like to hear why this method has been removed.\n. @designermonkey @akrabat \nI made a library (https://github.com/thecodeassassin/slim-routing-manager) and i cannot port it to Slim 3 because of this missing method. What is an alternative to App::getInstance() to get an instance of app in the following generated file that works out-of-the box without adding your own static method? \n``` php\n<?php\n/\n * Generated with \\Slim\\Routing\\Manager\n \n * on 2016-01-12 09:19:53\n /\n$modTimes = array (\n  '/var/www/src/project/Controller/IndexController.php' => 1452590345,\n);\n$app = Slim\\App::getInstance();\n$app->map(['GET'], \"/\", \"\\Slim\\Controller\\IndexController:indexAction\");\n```\nI can of course fix this for my own app or ship the library with a custom app but that will drastically reduce the portability of this library. What i am trying to achieve here is make annotation based routing available for Slim 3.\nThanks.\n. @akrabat so what is the point of having the ability to specify a class method a the callback for a route when you cannot access the App instance in that class?\n. @AndrewCarterUK  wonderful! did not realise this, probably should have looked into the map method a bit more. Having the container there actually pretty much solves all of my problems because i needed access to shared services. I will update the library later.\n@designermonkey yeah i think i understand the pattern you guys went for here :)\n:+1: \n. ",
    "mazeeblanke": "@akrabat is there a downside to using global $app ?. ",
    "fredw": "@geggleto I already did it using Aura.DI container as I said before:\nphp\n// ...\nforeach ($urls as $url) {\n    $container->set('\\MyController', function () use ($container, $url) {\n        return new \\MyController($container, $url);\n    });\n    $app->get($url, '\\MyController:index');\n}\nNormaly, outside a loop with any other parameter it works, but not in a loop.\nIf I access the /url1 and debug $url variable on my controller, the value is urlN.\n. @geggleto I don't want to create a controller per url. I have particular reasons to have unique controller for all this dynamics urls. This example I mentioned is just to understand the problem.\n@akrabat Thank you, it works perfeclty. Here is the right called methods:\nphp\nclass MyController\n{\n    public function index($request, $response, $args)\n    {\n        $url = $request->getAttribute('route')->getPattern();\n        // ...\n    }\n}\n. ",
    "DJCMBear": "I updated the code to accept an array instead of multiple arguments, hopefully it will be added as it would make adding multiple middleware easier.\n. To me personally I find it nice that you only have to remember one method name and can pass it one or more middleware routines, it also allows for quick code edits if you want to convert a single add routine into adding multiple routines without changing method names.\nHowever on the other hand I can see why different method name would make things easier to read while skimming through the code and can see quickly that this method is being passed multiple routines where as add is just adding a single routine.\n. From my tests the current slim accepts ->add([$instance,'method']); and is valid, the same goes for this branches code, this code only adds the ability to pass multiple middleware routines using one add method instead of using an add method call for each middleware routine.\n. @vlakoff I agree with everything you said, the code change I am proposing fits with what you are saying but adds the extra ability to use more than just strings. it doesn't affect how the code works currently, it just extends the functionality for those who want to use just one add method while giving them the ability to still use the method in the same way.\nThe current code in this PR allows this to work...\n\n-> add( [\n\u00a0\u00a0\u00a0\u00a0SomeClass::class,\n\u00a0\u00a0\u00a0\u00a0SomeOtherClass::class,\n\u00a0\u00a0\u00a0\u00a0'SomeMethod',\n\u00a0\u00a0\u00a0\u00a0new ClassName,\n\u00a0\u00a0\u00a0\u00a0'SomeClass::SomeMethod',\n\u00a0\u00a0\u00a0\u00a0[ 'SomeClass', 'method' ],\n\u00a0\u00a0\u00a0\u00a0[ $instance, 'method' ],\n\u00a0\u00a0\u00a0\u00a0function ( [args here] ) { [code here] }\n] )\n-> add( new ClassName )\n-> add( [ $instance, 'method' ] )\n-> add( 'SomeMethod' )\n-> add( SomeClass::class )\n-> add( 'SomeClass::SomeMethod' )\n-> add( [ SomeClass, 'method' ] )\n-> add( function ( [args here] ) { [code here] } );\n. Anyone else got a way like @vlakoff which he may like more, I am open to anything which everyone is happy with.\n\nI just feel that allowing the developers who use the Slim framework to have the ability to create systems with it faster and easier while keeping everything working is the way to move forward with adding to / modifying the framework, even though it only removes a small number of characters when adding middleware to a route, those less characters would add up to less time spent to develop a system with Slim.\n. Would we still not be in the same position with addMany as we are with add if we decide to go that route, surly adding a new method which is using the current way this PR is using will just be adding to the problem we are trying to solve.\nThat is unless you are talking about switching from an array to multiple arguments like I originally opened this PR to request, if you are on about multiple arguments then surly modifying the add method to extend the number of arguments it can take is more easier to do than creating a whole new method.\n. @tuupola good point but just a thought to keep in mind, v2 had a much nicer way to add middleware just by doing $app -> get('/','mw1','mw2',function); so to say allowing multiple arguments to be passed to the add method isn't anything that Slim hasn't been able to do in the past. Maybe if this feature isn't added now it might be nice to see it be added at some point.\n. I love the idea of middleware groups, we currently can only do this via adding middleware the group method to cover everything within that group but you also need to pass a base path to the route, having a middleware group could solve that.\nI will open a discussion about that a little bit later so others can give their thoughts on the subject. Should I mark this as closed or do you think this needs more of a discussion still?\n. SSE's basically create a socket like request over HTTP, however the connection doesn't close unless you ask it to be closed, if the browser hears it close it automatically reopens the connection to begin listening again.\nThey are an HTML5 alternative to web sockets, long polling and short polling, some may say they are still polling but with the added extra of having the browser handle them instead of the developer.\nif you open the browsers dev tools and reload the example, you will see the request to stocks.php and the request doesn't have a http response but instead it has a eventstream auto updating with the data it receives from the server.\nExample: (Uses SSE to update stocks live)\nhttp://demo.howopensource.com/sse/\nInformation / Tutorials:\nhttp://www.howopensource.com/2014/12/introduction-to-server-sent-events/\nhttp://www.htmlgoodies.com/beyond/reference/receive-updates-from-the-server-using-the-eventsource.html\nhttp://www.w3schools.com/html/html5_serversentevents.asp\nEDIT: Additional link with spec information and a note\nhttps://html.spec.whatwg.org/multipage/comms.html#server-sent-events\nNOTE: IE doesn't support EventSource so the Slim endpoint for SSE will need to also allow for a fallback, http://stackoverflow.com/questions/24498141/is-there-a-microsoft-equivalent-for-html5-server-sent-events\n. Just wanted to see if this should be considered for the v4.0 milestone or not, I would like to see this be a built-in feature of version 4 so developers can use SSE's without much work to get it working, something Slim is really good at, writing little but being able to do a lot.\nWhat are everyones thoughts on including this in the v4.0 milestone?\nEdit: one solution ca be found here ... http://discourse.slimframework.com/t/how-to-use-html5-server-sent-events-sse/879/5. I thought that but to keep in with Slim coding standards instead of allowing no arguments to be passed with no errors being thrown, keeping it in makes sure at least one argument is always present. \n. I updated App.php to match docblock in Routable.php \n. ",
    "phm46": "Slim 3\n. Thanks a lot! :) Have a nice day\n. Yes, that is true. But this bug happens only if you use normal request with query and body params. If you manualy set these params with\nphp\n$request = $request->withQueryParams(['foo' => 'bar'])->withParsedBody(['bar' => 'foo']);\nit works corectly.\nTry this code:\n``` php\n<?php\nchdir(dirname(DIR));\nrequire 'vendor/autoload.php';\n$app = new \\Slim\\App;\nuse Slim\\Http\\Environment;\nuse Slim\\Http\\Request;\n$app->get('/', function($request, $response, $args){\n    echo 'With data:' . PHP_EOL;\n    var_dump($request->getQueryParams());\n    var_dump($request->getParsedBody());\necho 'Without data:' . PHP_EOL;\n$request = $request->withQueryParams(Array())->withParsedBody(Array());\nvar_dump($request->getQueryParams());\nvar_dump($request->getParsedBody());\n\n});\n$app->run();\n```\nand call it from browser as script.php/?foo=bar&bar=foo\n. ",
    "iansltx": "Seems like we could work around that behavior though, based on:\nhttps://github.com/php/php-src/blob/a51cb393b1accc29200e8f57ef867a6a47b2564f/main/SAPI.c#L814-L827\nSo the PSR-7 message format starts doing what you'd expect it to do.\nBasically you'd have to treat the Location header uniquely, passing the response code along with the redirect.\nJust checked RFC 7231: https://tools.ietf.org/html/rfc7231, and while it mentions 3xx and 201 explicitly, it also doesn't say that other status codes can't be used with the Location header. See: https://tools.ietf.org/html/rfc7231#section-7.1.2. So this is a case of the runtime being overly \"helpful\", removing fidelity from the PSR-7 representation.. FWIW this also works:\nphp\n<?php header('Location: /foo'); http_response_code(202);\nSo revising App::respond() to include an explicit http_response_code() call at the end should clean this up, if we don't want to start handling individual headers differently.. Yeah, catch with the valid methods add piece is you have to hook into the from-env factory, since you're calling it and the valid methods array isn't static. Feels like, if we're going to only look at that as the use case, not doing anything and documenting the request container override option makes more sense (3 lines on container setup plus a class definition with the array override).\n...and moving createFromEnvironment() into its own factory class doesn't remove the need to declare a new extended class to make this work, so that's no better.\n. Got hit with a load of work over the past few weeks. May be a bit before it lets up. Still planning on revising, but can't give a timeframe quite yet :(\n. @nickdnk Writing a (currently failing) test may help (aka light a fire under me...and save me some coding time) move this along. If you're game, hop on the slimphp Slack and maybe we can talk those bits through :)\n. It took long enough, but I've got a 3.x compatible fix (with BC!...unless you were catching an InvalidArgumentException at App::run() outside of the standard error handlers) for the 500s. I haven't touched the routing side of things due to the potential perf impact and the potential of breaking the way folks have overridden this issue in the past (by extending Request and swapping out the container request impl).\nSee my commit notes for more detail on why I implemented the way I did. PRing in a sec.. Fair question.\nMain reason I lumped this in with 404/405 is that allows the bad method and not found handlers to be used as declared, which is where you'd expect to handle cases where, respectively, a route doesn't exist or a route doesn't support a particular HTTP verb. Adding in a special \"return a 400 if the method isn't on the list\" case would either require adding another exception handler logic block (and tweaking the InvalidMethodException a bit from the way I have it now) or hard-coding a 400 response in a way that would be less configurable. So I went with the way that, if you make a CHICKEN call, you'll get back the same response as if you made a TRACE call (since effectively no one ever implements TRACE).\nI can go into a little more detail on the above, but I feel like I'm blathering on already :p\nNow, re: 400 vs. 404/405 specifically, there are decent cases for remapping the built-in notFoundHandler to return a 400 rather than a 404 anyway if you're working with an API, because the client is giving you a bad request (namely to a route pattern that isn't actually a thing). But semantically the notFoundHandler, which spits out a 404 by default now, is more of a routeDidNotMatchHandler so dumping things into there in this case seems to make sense...and then you can override that to get your 400 :). I'll work on improving coverage back to where it should be. No need to merge until I do that.. ...and by \"improving coverage\" I actually mean \"fixing a completely broken first implementation\", as it turns out. Now we're good to go though :). I assume that means duplicating $response = $this->container->get('response'); to maintain existing application flow?. Existing flow gets the request before the response so I wanted to maintain that order of execution. But sounds like we're cool with swapping order since the two should never be related anyway. Will push a rev once this talk's over.. Cleaned up! Keep up with the feedback :). ",
    "kelunik": "\nThis is a PHP feature. From the header manual page:\n\nIt's rather a bug than a feature. ACME is one example that requires sending a location header for a 200 response, see https://tools.ietf.org/html/draft-ietf-acme-acme-07#section-7.3.1.\nIt should at least be ignored if an explicit status code is set, which seems to be handled when looking at the code @iansltx linked.. See #2309 for a PR.. ",
    "GHKEN": "Thank you for the comment.\nI thought that default status code to null is better if we need backwards compatibility.\n. ",
    "jacklynmatts": "That would be a better solution. Unfortunately, after thinking about this a little further, I'm not sure even that fully solves the problem.\nIt's absolutely possible to call Route::setName multiple times.  This means that the route name could change even after map is called - and I can't think of any way to observe that inside of Router. This is, to be a fair, an edge case.\nI think the simplest way to solve that would be to completely eliminate namedRoutes, unless you can think of something else?\n. Thanks @n0o0bSina , perhaps I should have been more clear.  I wasn't suggesting that the named routes feature be removed.  Rather, I'm now suggesting that getNamedRoute loops through each Route object in routes on every call, as this seems the only way to ensure we're working with accurate, current information. This would result in removal of the Router::namedRoutes property, since it would be unused.\nSure, it's less performant, but that seems like a secondary concern to being correct. Does it make sense to just correct the error, and address any performance issues in another PR?\nI've updated the pull request taking this conversation into consideration.\n. Thanks!\n. ",
    "sharifzadesina": "hi\nThe only way for fixing this problem is removing Route::setName method and insert a feature for registering named routes like other routes in App class.\nfor more info see elegantweb/framework routing in github :D\nRoute class and RouteCollection class\n. @jacklynmatts there is more better way if you don't like standards :D You can inject Router class into each Route then set key in both Route and Router.\n.  @0x13a\nYou want quality? you can't find it in famous PHP projects as I saw!. @0x13a\nBecause I am working on one and I am seeing what the hard is writing a standard framework, see Laravel there are many design problems in it which bring us many limitation, for example you can't add custom dependent rules to validation. for writing my own framework for my own job I have read many source code none of them are standard so don't waste your time ;). According to PSR-7 this is also right.\n```php\n[...]\ninterface RequestInterface extends MessageInterface\n{\n    [...]\n/**\n * Return an instance with the provided HTTP method.\n *\n * While HTTP method names are typically all uppercase characters, HTTP\n * method names are case-sensitive and thus implementations SHOULD NOT\n * modify the given string.\n *\n * This method MUST be implemented in such a way as to retain the\n * immutability of the message, and MUST return an instance that has the\n * changed request method.\n *\n * @param string $method Case-sensitive method.\n * @return static\n * @throws \\InvalidArgumentException for invalid HTTP methods.\n */\npublic function withMethod($method);\n\n[...]\n\n}\nTnx for reporting.\n. @Zegnat All bug fixes are BC breaks, but slim have huge community so I don't think we can have this in 3.x, slim 4 will come soon, we can have this bug fix in version 4.. First: You should use `rawurlencode` not `urlencode`.\nSecond: Take a look at [RFC3986](https://tools.ietf.org/html/rfc3986#section-3.2) you will get that your encoding is wrong.\n. @akrabat \nYou must use a function like below one for encoding:php\n[...]\n    /\n     * Sets the URI user information.\n     \n     * @param string      $user\n     * @param string|null $password\n     /\n    private function setUserInfo($user, $password = null)\n    {\n        $this->userInfo = '';\n    if ('' !== $user) {\n        $this->userInfo = self::encodeUserInfo($user);\n        if ('' != $password) {\n            $this->userInfo .= ':' . self::encodeUserInfo($password);\n        }\n    }\n}\n\n/**\n * Encodes URI user information.\n *\n * @see https://tools.ietf.org/html/rfc3986#section-3.2.1\n *\n * @param string $string User information\n *\n * @return string Encoded user information\n */\nprivate static function encodeUserInfo($string)\n{\n    return preg_replace_callback(\n        '#(?:[^' . self::CHAR_UNRESERVED . self::CHAR_SUB_DELIMS . ':%]+|%(?![A-Fa-f0-9]{2}))#',\n        function ($matches) {\n            return rawurlencode($matches[0]);\n        },\n        $string\n    );\n}\n\n[...]\n``. I don't like this PR, there is no reason to addAppto the route group, routing and application are separate packages.. @silentworks of course you are, and I know this will solve the sequent injection of theAppclass, but this is not good design, imagine router withoutApp` class, what will happen? your router will be useless.. @silentworks Maybe, but by this PR you are making the bad design bigger and bigger. anyway this is just my idea.. ",
    "ammoriz": "I'm sorry my fault :) I have to post the Q on the right place :+1: \n. ",
    "jimsproject": "im trying to return record from my postgresql (using PDO) . when the php enveiroment still default(ouput_bufffer=4096) i get ouput:\n    {\"status\":1,\"total\":23,\"limit\":2,\"page\":1,\"data\":[{\"id\":\"32020b3bed87475793e48925ba001a4f\",\"first_name\":\"jimbo\",\"last_name\":\"carter\",\"country_id\":\"ID\",\"address\":\"kemang timur\",\"phone\":\"+628384848\",\"currency\":\"IDR\",\"active\":true},{\"id\":\"37475d5ae45f4e448fd8c62fa260c8ee\",\"first_name\":\"jimbo\",\"last_name\":\"carter\",\"country_id\":\"ID\",\"address\":\"kemang timur\",\"phone\":\"+628384848\",\"currency\":\"IDR\",\"active\":tru\nthe ouput is missing the some character.\nbut when i disable then output_buffer it give normal output. \n. so is it a bug? why the response behave like that?\n. ok , thank you\n. Hi Geggleto,\ni have try to flush manual. and is not truncate now.\ni have another issue when i use flush . i can't set the http response code. \n thank you\n. i'm using utf-8.right now solving by forcing flush() before return the response. but for the header response code i must using http_response_code(). \n@akrabat  I have try set output buffer false in php.ini itu solve the truncate but  i can't set the response code. i thought the issue also the mismatch count the body length. in function read class stream.  i will try to set the content length manual.\n. i have find the cause of this problem, i have include php class that '<?php' not at the begining file.  there is 3 white space before that tag. and it cause the output truncate.\n. ",
    "matthewtrask": "What is your database set too, UTF-8, or something else?\n. do you have a .htaccess file in the root?\n. I like the onion style as well. \nBut I also think @geggleto has a point, although that could be entirely dependent on amount of work required. . ",
    "miitchyy": "@geggleto @OptimusCrime @silentworks \nSo funnily enough, my problem appears to have been caused by the fact that I was running PHP as a CgiModule instead of a FastCgiModule. The REQUEST_URI is present when I configured it correctly.\nCan confirm everything is working under the standard install of Slim with this handler mapping configured correctly.\nMy bad.\n. ",
    "rss1": "Could you suggest any solution, which allows using parameters as I want? \nI tried to find some more Fastroute documentation regarding multi optional parameters but the example provided was the only one I stumbled upon. \n. ",
    "abr4xas": "Hi there, my issues is relate to this.\nMy route to view a post\nphp\n$app->get('/post[/{id:[0-9]+}[/{name:[A-Za-z]+}]]',\n function ($request, $response, $args) \n use ($container) {\n....\n})->setName('post.detail');\nWhen i try to access this url: post/1/lorem-ipsum-dolor-sit-amet-con get 404\nAny advice?\nps: i don't know how access this 2 params :(\n. This work for me :smile: \n``` php\n$app->get('/post/[{id:[0-9-]+}/[{name:[A-Za-z-]+}]]', \nfunction ($request, $response, $args)\nuse ($container) {\necho $args['id'];\necho '<br>';\necho $args['name'];\n\n})->setName('post.detail');\n```\n. ",
    "paragonie-scott": ":+1:\n. ",
    "lupo-lupov": "I totally agree with you, but don't you think we'll lose consistency with actual FastRoute parameters? Isn't keeping their names the same, makes it more clear, that they are passed straight to the FastRoute function?\n. Sorry for my last post (it was not from my personal, but my company account).\nHere are the unit tests.\nAny additional proposals are appreciated.\n. Yes KISS principle.\nI had a doubts, is it against slim philosophy or not...\nAlways dealing with cache and log directories on deployment is a little bit tricky.\nMaybe it's not worth when managing light projects, but from the other side, the developer should know what he/she's doing and such option should make him think :)\n. Hi\nAbout 1 - it's Slim style default configuration - my personal opinion is also the same (better array configurations instead of specific configuration class/object)\nAbout 2 - you are right, I understand your case, but what if someone enable cache, but directory is not writeable... he'll never understand that actually is not using cache - any suggestions ?\n. ",
    "lubomirsl": "I'll do my best for the tests :)\nWhat exactly do you mean \n\nThis setting may not exist if someone is using their own Container.\n\nIf I understand, if someone is using their own Container, he/she should add instance of Router (\\Slim\\Interfaces\\RouterInterface) and if he\\she wants to use cache, the way is to use public method Slim/Router::setCacheFilePath to do it.\n. ",
    "pokakhoaitay": "A also create a middleware (referrence to this https://github.com/akrabat/slim3-skeleton/blob/master/app/dependencies.php  ):\n- Index.php\n\n  $container = $app->getContainer();\n  $container['xcore\\AppCore']=function ($c){\n  return new xcore\\AppCore($c);\n  };\n  \n- Utils.php\n  \n  use Psr\\Http\\Message\\ServerRequestInterface as Request;\n  use Psr\\Http\\Message\\ResponseInterface as Response;\n  final class AppCore\n  {\n  function __construct($c)\n  {\n  }\n  public function AllowRoutePass(Request $request, Response $response)\n  {\n      $reqMethod =$request->getUri()->getPath();\n      if (in_array($reqMethod, AppConfig::IGNORE_ROUTES))\n          return true;\n      return false;\n  }\n}\n\nBut i still have error and unable access $request/$response object.\nAnyway, any solution for me that access $request/$response object without create a middleware?\nThanks!\n. I have a middleware, similar to this:\n\n<?php\nclass ExampleMiddleware\n{\n   public function __invoke($request, $response, $next)\n    {\n        //I want to use some methods from my own Helper class (maybe used in other projects) at here. How can i use $request, $response object in my class?\n        //Ex: MyHelper->CheckSomethingWhichNeedRequestAndResponseObject();\n        //I don't want to pass parameters to my helper methods like this: \n        //Ex: MyHelper->CheckSomethingWhichNeedRequestAndResponseObject($request, $response);\n        $response = $next($request, $response);\n        $response->getBody()->write('AFTER');\n        return $response;\n    }\n}\n\nMy problem is how can i re-use my helper class but still can access $request, $response from Slim 3 framework. In other word, I want MyHelper class able to use any where-any time.\nPlease give me advice!\nThank you!\n. oh, you mean i should create a  $request variable in my class and assign to it from the consrtuctor. and the methods in my class will read the $request variable. Sound like my class now not a 'helper' class, it's a 'dependency'. Because I want to make my class look like 'portable', it should be have not any variable inside, even i want the methods in my class are static, that mean i no need create an instance whenever i use my class. hmm...maybe i can't do that in Slim!!?\nThank everyone, I have workaround by implemented my class like this: https://github.com/brtriver/slim3-controller/blob/master/src/Controller/Controller.php, like @mbretter suggested and more understand about @akrabat's  slim-skeleton project. It working now. But it is not my intention as my describe above. Perhaps i temporary implement my class like that first.\n. Exactly what i want. Can you please close this topic. Thank you!\n. ",
    "clemens-tolboom": "\nYou should never get the request from the container. ever. The Request is set in the container once, and once middleware is applied is no longer the valid current request.\n\n@geggleto the documentation has no warning for this. Can we improve this somehow?\nI checked here https://www.slimframework.com/docs/v3/concepts/di.html#required-services\nI need the applications basepath and both request and router provides this. Guess the latter is best.\nphp\n$router = $app->getContainer()->router\n[edit]But that has not getter for basePath :-([/edit]. ",
    "sirber": "please close, wrong project :)\n. ```\nACL\n$app->add(function($request, $response, $next) {\n    # Verify login\n    $route = trim($request->getUri()->getPath(), \"/\");\n    if ($route != 'user/login') {\n        if (!isset($_SESSION['user_id'])) {\n            // redirects to login\n            return $response->withRedirect($this->router->pathFor('user-login'), 303);\n        }\n        else {\n            // refresh user info\n            $datas = $this->db->select(\"user\", \"*\", [\"id\" => $_SESSION[\"user_id\"]]);\n            # session\n            $_SESSION[\"user\"] = $datas[0];\n            # Add user info to templates\n            $this->view->offsetSet('user', $datas[0]);\n        }\n    }\nvar_dump($request->getAttribute('csrf_name'));die();\n\n# Verify ACL\n## todo\n\n# Process normal route\nreturn $next($request, $response);\n\n});\n```\nNULL\n. ```\nMiddleware\nCSRF protection\n$app->add(new \\Slim\\Csrf\\Guard);\nACL\n$app->add(function($request, $response, $next) {\n    # Verify login\n    $route = trim($request->getUri()->getPath(), \"/\");\n```\nWhat would be the right repo?\n. if I reverse the two middleware it works. So the last middleware added is the first used?\n. ",
    "mcaskill": "Reviewing my application, indeed this was a silly proposition.\nKeep up the great work with the framework!\n. The current error handlers are well made and very useful since they can respond to different content-type requests. One downside is that they also duplicate a lot of code between. The presence of an abstract handler allows this to be mitigated. Also, having a common base class (or interface) allows for better testing and customization in projects.\nThis pull request provides a better basis for developers to extend and customize their own handlers while still benefitting from Slim's without having to duplicate too much code.\nI had plans on submitting a similar pull request for abstract handlers. We've implemented our own for the Charcoal web framework.\n- App\n  - \\Charcoal\\App\\Handler\n  - \\Charcoal\\App\\ServiceProvider\\AppServiceProvider\n  - app/handler/default.mustache\n- Admin\n  - \\Charcoal\\Admin\\Template\\HandlerTemplate\n  - admin/handler.mustache\nIn our case, the enhanced handlers tie into our view renderer and allows a developer to define template and view controller options. The NotFound handler is the best example of a view that ideally needs to be branded.\nThis enhancement also allows us to more easily customize those same handlers when dealing with a module, such as an administration dashboard that would have its own templating features (using Pimple's extend feature).\n. ",
    "kristijandraca": "In this scenario status code is 200 \n. @programster I try your example but I get\nPHP Catchable fatal error:  Argument 1 passed to Slim\\Http\\Message::withBody() must implement interface Psr\\Http\\Message\\StreamInterface, integer given, called in .../index.php on line 29 and defined in .../vendor/slim/slim/Slim/Http/Message.php on line 287\n. here is full code \n$app->group('/users', function () {\n    $this->group('/login', function () {\n        $this->get('/id', function (ServerRequestInterface $request, ResponseInterface $response) {\n            $body = $response->getBody();\n            $modifiedBody = $body->write('No user found'); \n            return $response->withBody($modifiedBody)->withStatus(400);\n        });\n    });\n});\n. I change code to\n$app->group('/users', function () {\n    $this->group('/login', function () {\n        $this->get('/id', function (ServerRequestInterface $request, ResponseInterface $response) {\n            $modifiedBody = $response->getBody();\n            $modifiedBody->write('No user found'); \n            return $response->withBody($modifiedBody)->withStatus(400);\n        });\n    });\n});\nand my response is still same, missing last two char\nNo user fou\n. I think that I found problem.\nI try this https://github.com/slimphp/Slim/issues/1743#issuecomment-175813194\n'No user found' have 13 chars, and when I put:\n$response = $response->withHeader('Content-Length', 14); \non more then needed I can see full text. But problem is that my response have linebreak before\n\n. No, I don't have\n. @akrabat I create new index.php\nand rewrite whole thing, and it was blank space somewhere in the code. Tnx you all for your help\n. ",
    "pabloroca": "This works too.\n```\n$response->getBody () ->write (json_encode($result));\n$responsenew = $response ->withStatus(400);\nreturn $responsenew;\n```\n. ",
    "programster": "The response object is immutable. All methods (as far as I've seen) return a copy of the object that has modifications rather than altering the object itself. This is why one needs to either perform all the methods in a single chain like:\nreturn $object->method1()->method2();\nor one needs to use several variables:\n$modifiedObject1 = $object->method1();\n$modifiedObject2 = $modifiedObject1->method2();\nreturn $modifiedObject2;\nIn this second case, $object, $modifiedObject1, and $modifiedObject2  are all different.\ngetBody is somewhat different because I believe it doesn't return the response object, but a copy of it's body.\nI would try:\n$body = $response->getBody();\n$modifiedBody = $body->write('No user found'); \nreturn $response->withBody($modifiedBody)->withStatus(400);\nOr maybe I've misunderstood the problem here?\n. ",
    "G4MR": "Thanks for the response @mathmarques, clears that up.  Though I wish there was a way to reverse it from inner to outer.\n. @schnittstabil options are nice\n. ",
    "schnittstabil": "\nThough I wish there was a way to reverse it from inner to outer.\n\n@G4MR Why? Maybe I'm too used to the onion style, but it makes perfect sense to me:\n``` php\n$app->group('/product/{id:[0-9]+}', function () {\n$this->get('', function ($request, $response, $args) {\n    // no auth needed\n});\n\n$this->delete('', function ($request, $response, $args) {\n    // auth needed\n})->add($injector->make(Authenticated::class));\n\n})->add($injector->make(SomeMiddleware::class));\n```\n. @betweenbrain Slim also supports:\n``` php\n$app->add(function ($request, $response, $next) {\n    return $next($request, $response)->write(' Baz ');\n});\n$app->get('/', function ($req, $res, $args) {\n    return $res->write(' Bar ');\n});\n```\n. This bug is quite annoying, especially because zend-expressive with fastroute is not affected by this.\n@akrabat Sure, your last example works as expected.\nBut to reproduce the error you have to change index.php to e.g. api.php, and execute php -S localhost:8888 api.php.\nAs a result the built-in web server changes 'SCRIPT_NAME' => '/index.php' to 'SCRIPT_NAME' => '/api/v1/hello', which in turn breaks the $basePath determination.\n. @ckressibucher Personally, I just set $_SERVER['SCRIPT_NAME'] = '/app.php'; in my app.php \u2013 I don't see a real benefit of creating an additional entry point for each production entry point, in particular because my development environment should match  as accurately as possible my production environment. \n. > @grikdotnet to this very day no one understands what your issue is and you haven't explained it clear enough for anyone to attempt to fix it if its a bug.\n\n\u2026\n I am yet to see you provide any of what he has asked but continuously say you have explained it already.\n\nAre you sure? :angry:\n@silentworks, @akrabat:  To sum up the discussion above, I've created a repository: https://github.com/schnittstabil/slim-issue-1829\n. > not sure if this is the same issue @grikdotnet is having\n@grikdotnet titled this issue \u2026embedded PHP server and default nginx\u2026 and mentioned in his very first comment:\n\nThe default Nginx value of SCRIPT_NAME parameter sent to PHP-FPM is:\nfastcgi_param SCRIPT_NAME $fastcgi_script_name;\n\u2026\nThe default value of $fastcgi_script_name is a request URI.\n\nThat's very similar to PHPs built-in server.\n\n\nthis just means that there is no rewrite available on these servers\n\nAt least  zend-expressive with fastroute is not affected by this, which is also based on the PSR-7 middleware idea, and also uses fastroute \u2013 greping a default setup tells me that expressive doesn't use SCRIPT_NAME at all\u2026 Thus, there must be a better way to determine the $basePath.\n. ",
    "betweenbrain": "\nLIFE: Last In First Executed\n\nI'd like to suggest adding that to the docs. Thinking in terms of concentric layers, I would expect to be able to do the following:\n```\n<?php\nrequire 'vendor/autoload.php';\n$app = new \\Slim\\App();\n$app->add(function ($request, $response, $next) {\n    $response->getBody()->write(' Foo ');\n    return $next($request, $response);\n\n});\n$app->get('/', function ($req, $res, $args) {\n    echo ' Bar ';\n});\n$app->add(function ($request, $response, $next) {\n    $response->getBody()->write(' Baz ');\nreturn $next($request, $response);\n\n});\n$app->run();\n```\nand get Foo Bar Baz as a result, but instead get Baz Foo Bar.  To get my desired result, and effectively ensure that I can guarantee that a specific middleware is executed last, I need to do:\n```\n<?php\nrequire 'vendor/autoload.php';\n$app = new \\Slim\\App();\n$app->add(function ($request, $response, $next) {\n    $response = $next($request, $response);\n    $response->getBody()->write(' Baz ');\nreturn $response;\n\n});\n$app->get('/', function ($req, $res, $args) {\n    echo ' Bar ';\n});\n$app->add(function ($request, $response, $next) {\n    $response->getBody()->write(' Foo ');\nreturn $next($request, $response);\n\n});\n$app->run();\n```\n. @schnittstabil thanks! That's a great tip.\n. @akrabat the example code I cited is based on the example at http://www.slimframework.com/docs/concepts/middleware.html#application-middleware. I'll create a PR against Slim-Website to correct it. \nI'll also include the addition of LIFE: Last In First Executed as I think that's an import statement to make as it very eloquently sums up the middleware execution order.\n. Thanks! I wasn't aware of that.\n. ",
    "vrxj81": "1 customer handler for 10(or more) different Exception? I'd like to seperate the handling.\n. I know, but it offers a mechanism.\n. ",
    "pentagonal": "@OptimusCrime yep I use URL rewrites\nBut not all fix problems,\nclient also allowed access domain.com/index.php/a -> same with domain.com/a\nURL rewrite is not better idea to handle this, if script still detect /index.php ( or script name) as basePath\nand now I found how to make it without change the core, to change thiis case we must change the Environment of SCRIPT_NAME from uri Environment set it on \\Slim\\App container setting\nbecause the uri environment will be use as Script name if first of word of REQUEST_URI and SCRIPT_NAME on position of 0 \nphp\n/**\n * on line 209 \\Slim\\Http\\Uri\n * variable take from slim environment\n */\n...\nif (stripos($requestUri, $requestScriptName) === 0) { \n...\n1. first we could set \nphp\n// set additional cached variable for $_SERVER\n$reqServer = $_SERVER;\n// add first of slash on keyname : SCRIPT_NAME\n$reqServer['SCRIPT_NAME'] = \"/{$_SERVER['SCRIPT_NAME']}\";\n/**\n * Add Overide on Application initial\n * set container request with new value of \\Slim\\Http\\Request\n *  with new values \n */\n$app = new \\Slim\\App(\n    array(\n        'settings' => array(\n           // .. set your settings \n        ),\n       // set container request as custom $_SERVER , that only change SCRIPT_NAME \n        'request' => \\Slim\\Http\\Request::createFromEnvironment(\n            \\Slim\\Http\\Environment::mock(\n                $reqServer\n            )\n        )\n    )\n);\nthis help for use path as basePath of Uri Routing Segmentation.\nafter route parsed (inside Route not in route group - if use group route make sure set after route mapping) , you could u re - set the Request Environment with \nphp\n// example of route mapping\n$app->get('/', function() use($app) {\n    $container = $app->getContainer();\n    $container['request'] = \\Slim\\Http\\Request::createFromEnvironment(\n        \\Slim\\Http\\Environment::mock(\n              $_SERVER\n        )\n    )\n   ... call next\n});\n$app->run();\nthis my way :laughing: \nhow about other?\nor if you dont want re - set the environment use original GLOBALS of $_SERVER for SCRIPT_NAME\nand if you want use SCRIPT_NAME from environment you could use replace double slash with single slash on start of value.\n. @JoeBengalen BTW I was very new on Slim 3 , maybe just 2 days work (till now - started 3 hours before posted this issues).\n\\Slim\\App::run , it will be direct to processing request & response to \\Slim\\App::proccess() , \non process method , middleware stack called after\\Slim\\Http\\Uri` (that take from request class) .\non \\Slim\\App::proccess method with line contain :\nphp\n... checking request uri basePath & router setBasePath Method\n$router->setBasePath($request->getUri()->getBasePath());\nBut maybe best recommendation ffor me :)\nI will try set uri base Path on middle ware :)\n. @JoeBengalen : \nis use this for middleware \nphp\n$app->add(function ($request, $response, $next) {\n       // clone environment , using clone prevent to overide\n    $env = clone $this->environment;\n    $env->set('SCRIPT_NAME', '/'.$env->get('SCRIPT_NAME'));\n    $this->request = \\Slim\\Http\\Request::createFromEnvironment($env);\n    $response = $next($this->request, $response);\n    return $response;\n});\nnot all nested  \\Slim\\Http\\Request::uri property setted with same value ,\nbut maybe this enough,\nbecause application getting URI object from \\Slim\\Container->Request->getUri()\nthanks for suggestion :)\n. ",
    "Big-Shark": "@geggleto @akrabat Fix Error and PhpError, done. Add tests, done. \n. @akrabat Yes, I think @tuupola offered a good option, but you need time for rewrite media parser, and why would you don't merge this commit, and start rewrite for next version?\n. @akrabat hahaha, this is my code now, but I think as long as we try to make decisions, many people may face with this problem, as jsonapi quite popular format.\n. @akrabat :+1:  Cool\n. @akrabat https://github.com/akrabat/Slim/commit/4f4c65d91a25bfec459f3ac73a2707522ea5a3f1 DRY?\nMaybe we should use trait?\n. ",
    "nagaraj1245": "which is the main slim framework file?..\n. ",
    "mindyk": "yeah never mind, it was my fault all along. My .htaccess was not in the web-root folder but one higher. That explains it then. Sry for bothering you \n. ",
    "parfumix": "If you look to the \\Slim\\Container class you will see in the constructor that part of code\n$this->registerDefaultServices($userSettings);\nIf think that code broke SOLID - the \"S\" principle. For example i was try to pass League/Container which implement container-interpop and all the application is broken because in \\Slim\\Container is injected DefaultServiceProvider which boot required settings.\nThat's why i propose to register service providers using App class.\nThx.\n. K, i pass my container \n`\n$app = (new App(\n    new League\\Container\\Container\n));\n$app->get('/hello/{name}', function ($request, $response, $args) {\n    return $response->write(\"Hello \" . $args['name']);\n});\n$app->run();\n`\ni got error like Fatal error: Uncaught League\\Container\\Exception\\NotFoundException: Alias (router) is not being managed by the container in ...\n. Thanks, results that the container register needed services. Why don't giving that responsabillity to the Application class?\n. Thx\n. Thank you!\n. ",
    "Melindrea": "Thanks =) Alright, so I\u2019d misunderstood what the interface demanded.\nThis can be closed\n\n2 mars 2016 kl. 17:36 skrev Matheus Marques notifications@github.com:\n$_FILES will be parsed as an array of UploadedFileInterface\nYou'll need to check the same way you would do with $_FILE.\nSomething like:\n$image = $request->getUploadedFiles()['file']; //your upload image form name is file, right?\nif($image->getError() != UPLOAD_ERR_OK){\n    //You don't have an image :)\n}\nIf you could have more than 1 image named file: $image will be an array of UploadedFileInterface\n\u2014\nReply to this email directly or view it on GitHub https://github.com/slimphp/Slim/issues/1792#issuecomment-191317346.\n. \n",
    "xorik": "@akrabat nope, on the dev result is '/hottest2', on prod \"/test2\"\n. I think that path must be same, not depending on script location, isn't it?\n. ",
    "misha354": "Pull request #2115 fixes this in Slim 4. ",
    "rubobaquero": "I geggleto, thanks for your quick answer. My problem is how to access them from an Eloquent Model (or any other class that i use on my code).\nFor example, with the action controllers i know that i have to pass the container to the constructor:\n``` php\nfinal class ApiAction\n{ \n    protected $container;\npublic function __construct($container){\n    $this->container = $container;\n}\n\n}\n```\nBut, how i do the same in other classes where i can\u00b4t pass the $container as an argument to the constructor? For example, in my User model class:\nphp\nclass User extends \\Illuminate\\Database\\Eloquent\\Model\n{\n    public function send_activation_mail()\n    {\n        // How do i access here to $container['settings']['AWS'] ???\n    }\n}\nThanks again in advance for your help!\n. Hi geggleto,\nThanks once again for your answer. The Eloquent ORM is just an example, but this is happening to me with other classes. What i would like to know is if does exist any way to load the container info without having to pass it as an argument to the class constructor or to the class method. In other frameworks there is a static $config var or similar so you can access it from any part of the code.\n. Hi,\nThanks a lot to everybody for giving me different options to choose for. I think i will choose the second one proposed by geggleto. We already have a solution for not storing the passwords on the VCS. The problem is that i am used to code with Kohana Framework (that have a Kohana::$config var) and i was looking for a similar way of doing things. One of the first things that i learned when i started coding is that using global variables is a bad practice, but never heard anything about static class vars and the global coupling problem that mentions akrabat.\n. ",
    "aimeos": "We are using Slim 3.1. For the unit tests, we tried to create a mock environment like this:\n```\n$app = new \\Slim\\App( array(\n    'settings' => array( 'determineRouteBeforeAppMiddleware' => true )\n) );\n$app->group( '/{site}/', function() {\n    $this->map(['GET'], 'detail/{d_prodid}', function( $request, $response, $args ) {\n        return \\Aimeos\\Catalog::detailAction( $this, $request, $response, $args );\n    })->setName( 'aimeos_shop_detail' );\n} );\n$c = $app->getContainer();\n$env = \\Slim\\Http\\Environment::mock( array(\n    'REQUEST_URI' => '/unittest/detail/1'\n));\n$c['request'] = \\Slim\\Http\\Request::createFromEnvironment( $env );\n$c['response'] = new \\Slim\\Http\\Response();\nreturn $app->run( true );\n```\nWe haven't found any code in Slim3 that populates the request attributes at some point, so\n$app->getContainer()->get( 'request' )->getAttributes();\nalways returns an empty array.\n. OK, we've fixed this by passing the $args parameter from the route around. Thanks for your help!\n. Any news for this issue besides if the initialization should be different?\n. For us, the separation of $data and $queryParams is rather artificial because it limits what our users (developers using the Aimeos e-commerce library) can do. This is most apparent in the generated URLs if you want to create an online shop based on Aimeos.\nWe have a few fixed parameters like site, locale and currency which fits very well into the $data array to create URLs like http://localhost/shop1/en/. But then, there are dynamic parameters too like the f_catid, f_name and f_sort for the list pages or d_prodid, d_name and others for the detail pages. These parameters do not only depend on the page but also on the used parameters in the concrete implementation.\nTo get nice looking URLs, the default routes provided in the aimeos-slim package to to fit for most cases but can be adapted by the developer, e.g.\n/list[/{f_catid:[0-9]+}[/{f_name}]]\n/detail/{d_prodid:[0-9]+}[/{d_name}]\nAs we don't have any control over the needed parameters for the $data array, we simply push all query parameter into $data. But if they are not used in the URL, they must be added as query string as well. There's no known way to find out if a parameter will be used as URL or query parameter so our URLs currently look like\n/list/1/Home?f_catid=1&f_name=Home&f_sort=price\n/detail/1/Test?d_prodid=1&d_name=Test&l_pos=0\nwhich are very ugly and no one would like to use that in his online shop. We can't leave out the query parameters completely because then no product sorting would be possible and some parts wouldn't work at all.\nOur use case is probably not the most common one where a single developer has full control over everything but we think it's a valid use case. In the current form, nobody will build an e-commerce application based on Slim and use the Aimeos components due to the URLs.\nWe can only ask you to rethink your decision. There's no compelling advantage of separating URL and query parameters for URL generation, but only major drawbacks like shown above. Also, no other framework does such a separation.\n. In that case, the implementation can be simplified :-)\n. @silentworks What are your thoughts? This change is rather important for us :-)\n. @silentworks @akrabat Any decisions how to proceed with this issue?\n. @silentworks Wouldn't an additional optional parameter for the relativePathFor() and pathFor() methods be a better alternative? The router class shouldn't depend on any external configuration settings IMHO and using a setCombinedParameter() seems to be only the second best option.\n. @silentworks The current one to avoid BC breaks. Using the new behavior has to be enabled explicitely.\n. @silentworks @codeguy @akrabat Maybe we've found a very elegant way to extend the functionality without the need to change the interface. It uses only a subtle, undocumented difference when handling route attributes: Instead of dropping surplus route attributes silently, they are added as query parameters.\nYou now have these behaviors (route, data, queryParams -> result):\n- /{name} + ['name' => 'josh'] + [] -> /josh (same as before)\n- /{name} + ['name' => 'josh'] + ['a' => 'b'] -> /josh?a=b (same as before)\n- /{name} + ['name' => 'josh', 'c' => 'd'] + ['c' => 'e'] -> /josh?c=e (same as before)\n- /{name} + ['name' => 'josh', 'c' => 'd'] + [] -> /josh?c=d (new, before: /josh only)\n- /{name}/{c} + ['name' => 'josh'] + ['c' => 'd'] -> exception (same as before)\nWhat do you think? If it's still too much of a change, we can still add the additional parameter to activate the new behavior.\n. @silentworks Are you fine with the approach?\n. Unfortunately, it doesn't overwrite the existing router:\n```\n$settings = require DIR . '/../src/settings.php';\n$app = new \\Slim\\App($settings);\n$container = $app->getContainer();\n$container['router'] = function( $c ) {\n        return new \\Aimeos\\Slim\\Router();\n};\n. Sorry, doing it right after `new \\Slim\\App($settings)` worked but I hadn't noticed the difference.\nThanks\n. No, this is an Apache and PHP FPM setup. Apache talks to the FPM process using a TCP connection. This is printed by the PHP FPM process:\n[USER] => www-data\n\u00a0 | [HOME] => /var/www\n\u00a0 | [SCRIPT_NAME] => /test.php\n\u00a0 | [REQUEST_URI] => /test.php\n\u00a0 | [QUERY_STRING] =>\n\u00a0 | [REQUEST_METHOD] => GET\n\u00a0 | [SERVER_PROTOCOL] => HTTP/1.1\n\u00a0 | [GATEWAY_INTERFACE] => CGI/1.1\n\u00a0 | [REMOTE_PORT] => 38876\n\u00a0 | [SCRIPT_FILENAME] => /...../slim.demo.aimeos.org/public/test.php\n\u00a0 | [SERVER_ADMIN] => aimeos@aimeos.org\n\u00a0 | [CONTEXT_DOCUMENT_ROOT] => /...../slim.demo.aimeos.org/public\n\u00a0 | [CONTEXT_PREFIX] =>\n\u00a0 | [REQUEST_SCHEME] => http\n\u00a0 | [DOCUMENT_ROOT] => /....../slim.demo.aimeos.org/public\n\u00a0 | [REMOTE_ADDR] => ...\n\u00a0 | [SERVER_PORT] => 80\n\u00a0 | [SERVER_ADDR] => 85.25.49.53\n\u00a0 | [SERVER_NAME] => slim.demo.aimeos.org\n\u00a0 | [SERVER_SOFTWARE] => Apache/2.4.18 (Ubuntu)\n\u00a0 | [SERVER_SIGNATURE] => Apache/2.4.18 (Ubuntu) Server at slim.demo.aimeos.org Port 80\n\u00a0 | \u00a0\n\u00a0 | [PATH] => /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\u00a0 | [HTTP_COOKIE] => PHPSESSID=...\n\u00a0 | [HTTP_ACCEPT_LANGUAGE] => de,en-US;q=0.8,en;q=0.6\n\u00a0 | [HTTP_ACCEPT_ENCODING] => gzip, deflate\n\u00a0 | [HTTP_DNT] => 1\n\u00a0 | [HTTP_ACCEPT] => text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/;q=0.8\n\u00a0 | [HTTP_USER_AGENT] => Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\n\u00a0 | [HTTP_UPGRADE_INSECURE_REQUESTS] => 1\n\u00a0 | [HTTP_CONNECTION] => keep-alive\n\u00a0 | [HTTP_HOST] => slim.demo.aimeos.org\n\u00a0 | [proxy-nokeepalive] => 1\n\u00a0 | [SCRIPT_URI] => http://slim.demo.aimeos.org/test.php\n\u00a0 | [SCRIPT_URL] => /test.php\n\u00a0 | [FCGI_ROLE] => RESPONDER\n\u00a0 | [PHP_SELF] => /test.php\nThis is the result when printed by mod_php in Apache:\n[HTTP_HOST] => servername.tld\n\u00a0 | [HTTP_CONNECTION] => keep-alive\n\u00a0 | [HTTP_UPGRADE_INSECURE_REQUESTS] => 1\n\u00a0 | [HTTP_USER_AGENT] => Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\n\u00a0 | [HTTP_ACCEPT] => text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/;q=0.8\n\u00a0 | [HTTP_DNT] => 1\n\u00a0 | [HTTP_ACCEPT_ENCODING] => gzip, deflate\n\u00a0 | [HTTP_ACCEPT_LANGUAGE] => de,en-US;q=0.8,en;q=0.6\n\u00a0 | [PATH] => /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\u00a0 | [SERVER_SIGNATURE] => Apache/2.4.18 (Ubuntu) Server at servername.tld Port 80\n\u00a0 | \u00a0\n\u00a0 | [SERVER_SOFTWARE] => Apache/2.4.18 (Ubuntu)\n\u00a0 | [SERVER_NAME] => servername.tld\n\u00a0 | [SERVER_ADDR] => 85.25.49.53\n\u00a0 | [SERVER_PORT] => 80\n\u00a0 | [DOCUMENT_ROOT] => /var/www/html\n\u00a0 | [REQUEST_SCHEME] => http\n\u00a0 | [CONTEXT_PREFIX] =>\n\u00a0 | [CONTEXT_DOCUMENT_ROOT] => /var/www/html\n\u00a0 | [SERVER_ADMIN] => aimeos@aimeos.org\n\u00a0 | [SCRIPT_FILENAME] => /var/www/html/test.php\n\u00a0 | [REMOTE_ADDR] => ...\n\u00a0 | [REMOTE_PORT] => 38880\n\u00a0 | [GATEWAY_INTERFACE] => CGI/1.1\n\u00a0 | [SERVER_PROTOCOL] => HTTP/1.1\n\u00a0 | [REQUEST_METHOD] => GET\n\u00a0 | [QUERY_STRING] =>\n\u00a0 | [REQUEST_URI] => /test.php\n\u00a0 | [SCRIPT_NAME] => /test.php\n\u00a0 | [PHP_SELF] => /test.php\n``\nThere doesn't seem to be much difference besides inside PHP FPM, more information is available..$request->getUri()only returns the current URL. What we need is to generate an absolute URL for the next page andpathFor()` doesn't seem to do that. So what's the way to do this in Slim?. @geggleto Seems like a missing feature as all other frameworks (Laravel, Symfony resp. Lumen, Silex, etc.) can generate absolute URIs on request without bothering the application code with the details.\nTo me, the simplest solution is to change getBasePath() to getBaseUrl() here:\nhttps://github.com/slimphp/Slim/blob/7aabd47614448326ecb3908eec2a6440f36b50b9/Slim/App.php#L359\nhttps://github.com/slimphp/Slim/blob/7aabd47614448326ecb3908eec2a6440f36b50b9/Slim/App.php#L323. That's an edge case that can't be supported if the implementation should be more compliant to other frameworks.\n. ",
    "merumelu": "It is possible to get the temp path with $uploadedFile->getStream()->getMetadata('uri'), but this is rather verbose. A simple getter would be nice.\n. ",
    "KuroThing": "While i'm not entirely sure if my opinion on this will change anything, but i'm better off expressing it than not. Fore warning, this is in reference to the edge case of the second iteration. I do not know (or care to check, since if it still exists, the comment will be relevant) if the third iteration will have this edge case as well.\nI'm personally against such a change, because at the core level you are essentially denying the usage of certain Query Parameters, purely because they have the same name as something in the Route Parts, as shown in the edge case of /user/{name} having problems with /user/john?name=test in the second iteration.\nIn relation to the third iteration, one of the tested examples was not the edge case of a Route Param and Query Param having the same name like /{name} + [\"name\" => \"john\"] + [\"name\" => \"test\"] = ??. Only missing a route part and trying to provide it in query params was shown.\nEven if the worst case scenario was avoided and @geggleto's (imo) horrible suggestion of \"throwing a Router Exception because the Request data had a key that is the same a routes part key\" isn't implemented, the edge case of which gets what still exists with the second iteration still exists, however if the fore mentioned test solves this problem with the third iteration, and more extensive tests are conduct when provided keys that exist in the route parts as query params are done, than i see no problem, however since the entire problem about this issue is that providing the data for both the Route Part and Query Params produces duplicates in the url, as expected, i doubt that it will work as it currently does (Which would make it a BC change, since it would break existing applications that have the same key in both route parst and query params).\nWhile this is kind of irrelevant, it does explain my opinion on this matter, and why i'm against it. The way the routes are setup for this example usage, in my opinion, goes against the entire routing philosophy of slim, which has always been SEO friendly urls, even if urls that were not SEO friendly were supported it was never documentation, shown, or even mentioned anywhere. So while this is a perfectly good example of using optional parts, trying to polyfill them with Query Params to make them optional goes against what i believe, and what appears to be the routing philosophy of slim.\nI'm sure i've said some things here that some people will not like, and i'm arguing the entire point of this Pull Request that the core maintainers have pretty much accepted, but none the less thank you for reading my comment, and opinion on this matter. \nAlso @aimeos sorry, but i, personally, don't think Slim will benefit from adding this, and \"just because everyone else is doing it you should too\" is not a valid reason, and i do believe it's just peer pressure. Maybe you should consider another approach, like extending the Router, and providing your modified relativePathFor function to uses, which would just entail using $container->extend(callable) to inject it into Slim.\n. The base concept which i quite like (But i doubt it would actually use) of creating isolated route categories like $forum and $blog is rather easy to implement. This is a simple implementation that attempts to modify as little as possible.\nStep 1) Extend the App class, and add the following code:\n``` php\npublic function mount($group, Router $routes) {\n    $app = $this;\n    return $this->group($group, function() use($routes, $app) {\n        foreach ($routes->getRoutes() as $route) {\n            $groupedRoute = $app->map($route->getMethods(), $route->getPattern(), $route->getCallable());\n        $name = $route->getName();\n        if (!empty($name)) {\n            $groupedRoute->setName($name);\n        }\n\n        $middlewares = $route->getMiddleware();\n        if (count($middlewares) > 0) {\n            foreach ($middlewares as $middleware) {\n                $groupedRoute->add($middleware);\n            }\n        }\n\n        $arguments = $route->getArguments();\n        if (count($arguments) > 0) {\n            $groupedRoute->setArguments($arguments);\n        }\n\n        $buffering = $route->getOutputBuffering();\n        if (!empty($buffering)) {\n            $route->setOutputBuffering($buffering);\n        }\n    }\n});\n\n}\n```\nThis adds the mount function to your app object, allowing you to call $app->mount(\"/group\", $router); later on. It simply loops over every route in the provided Router, within the prefix provided via the $group parameter. It also tries to bring over all metadata, but i may have missed something and there may be an easier way to do this.\nStep 2) Use your new App class rather than Slim. This is as simple as changing the definition of your $app (or whatever you call it!) variable to point to your new App class!\nStep 3) Extending the Router, and adding this function to it\n``` php\nprivate $validMethods = [\n    \"GET\",\n    \"POST\",\n    \"PUT\",\n    \"PATCH\",\n    \"DELETE\",\n    \"OPTIONS\",\n    \"ANY\",\n];\npublic function __call($key, $arguments) {\n$method = strtoupper($key);\nif (!in_array($method, $this->validMethods)) {\n    return; // ?? Not sure what to do here?\n}\n\nif ($method == \"ANY\") {\n    $method = array_splice($this->validMethods, 1, 5);\n}\n\nreturn call_user_func_array([$this, \"map\"], array_merge([$method], $arguments));\n\n}\n```\nRather than manually mapping all supported HTTP Methods into the Router object like Slim did in the main App object, i opted to use a simple magic method that checks to see if it's a valid method (And converts Any into all of them), than calls the Router->Map(); function with an array of Methods, and the Pattern / Handler.\nStep 4) Profit. You are technically complete, create a new instance of your Router (Yes, it has to be new, or you'll have your old routes left in there!), set any routes you want on it, and than load it into the application via $app->mount();\n@DavidePastore I'm not sure if this will get you want you want, but it should be close!\n. Ignoring the fact that the provided code doesn't meet PSR-2 Standards that the main Slim project uses and the slight performance overhead of using a magic method rather than actually defining the methods properly, I'm not entirely sure it's worth adding to the main repo.\nI say this, because the main repo alread has the Group method, which is literally all this is doing (Running a group callback behind the scenes), to change the way you define groups. I also don't know if there are any side effects from the Router object having Get, Put, Post, etc methods that may be unintended.\nIf the core maintainers have no problems with the duplicating existing functionality, and the Router having the HTTP Method functions, i'll fix the two issues i mentioned in the first paragraph and send a PR.\nEdit: I would also need to create unit tests, which would be a new one for me.\n. What is the scope of a Module? Your example \nphp\n//If Applicable\n$slimModuleManager->addModuleRoutes($app, $authModule);\nimplies that a Module would handle the rendering of pages as well? How would that work?\nIf you want your site to be rendered using PHP-View, but your Auth Module rendered pages using Twig-View, that seems kind of silly and ludicrous.\nThere is also the problem of consistency in the styling of the page, since Slim is a framework and doesn't have an existing CSS class selection to abide by, Modules could implement anything, and require CSS which conflicts with your actual sites CSS.\nWhile it sounds like a nice idea, imo it seems kind of out of scope of what a Micro Framework should offer? At Least for your example.\n. You are already implementing non-interface access methods, to replicate the functionality of get(...) and has(...), and expecting \\ArrayAccess to set objects. What's more, the \\Slim\\Container was once upon a time declared final, so extending wasn't even possible and to use a new container you just re-defined the existing elements in a container, so if a container doesn't support these methods they can ether be extended in, or not override the \\Slim\\Container, and polyfill the required services.\nI don't see the problem in implementing further non-standard access methods that improve consistency between access methods (Either Array or Object syntax), but if you are going to insist that this change shouldn't be implemented, even if it's just to proxy to the offsetSet() of \\ArrayAccess, than shouldn't the existing Magic Methods be removed for violating whatever __set() would?\nIf you want to maintain full interoperability between containers, you should not be presuming that the container implements \\ArrayAccess, you should run through a list of common setters for Containers, and using method_exists($this, \"...\"); to check to see if the method exists, not assuming it does, or using something like Acclimate.\nSorry in advanced if this is too 'aggressive', but the fact that some magic methods are fine, but others are not is serious case of hypocrisy. It should be All or Nothing, unless a valid reason is provided.\n. @silentworks I had not considered that the reason the magic methods for __get and __isset were only implemented because they match the Container-Interop interface, sorry.\nI also realize that it's just code, but i find it rather silly and even hypocritical that there is inconsistencies between access methods for no reason (Which is not the case here). I was also quite joyed when the \\Slim\\Container was no longer final, because it made my life a lot easier, even just being able to use __set and PhpDocs.\n. Exceptions as control flow are generally considered an anti pattern, there is some discussion about it on stackoverflow.. And exceptions are not not designed for this kind of control flow.\nIn a website that has thousands of hits an hour, using Exceptions as Control Flow is terrible performance wise, and doesn't scale. At all.\nWhy encourage bad design? . ",
    "Ninestein": "Awesome, thanks\n. ",
    "netmou": "is there a way to access path_for in php-view\n. very thanks ,\ni do it like this\n// view renderer\n$container['renderer'] = function ($c) {\n    $settings = $c->get('settings')['renderer'];\n    $renderer = new Slim\\Views\\PhpRenderer($settings['template_path']);\n    $renderer -> addAttribute('router',$c->get('router'));\n    return $renderer;\n};\n. metoo\n. this is mylocal env: http://localhost/rzxsgl/public/index.php\nconsole output my basepath :/rzxsgl/public/index.php\nhere are some code in a phtml\n\n. finall i do it like this \n// use midware to define APPPATH used in templates-file\n$app->add(function ($request, $response, $next) {\n    if(!defined('APPPATH')){\n        $baseDirName=dirname($request->getUri()->getBasePath());\n        define('APPPATH',rtrim($baseDirName,'/').'/');\n    }\n    $response = $next($request, $response);\n    return $response;\n});\n. \u611f\u89e6\uff1aphp slim\uff0c\u6211 \u6700\u521d\u88ab\u5176\u8def\u7531\u7279\u8272\u4ee5\u53ca\u8f7b\u91cf\u7ea7\u6240\u5438\u5f15\uff0c\u540e\u9762\u53d1\u73b0\u5751\u6709\u70b9\u591a\uff01\u8fd9\u662f\u4e00\u4e2a\uff0c\u53e6\u4e00\u4e2a\u662f\uff1a\n//expose router into render\n$container['renderer'] = function ($c) {\n    $settings = $c->get('settings')['renderer'];\n    $renderer = new Slim\\Views\\PhpRenderer($settings['template_path']);\n    $renderer -> addAttribute('router',$c->get('router'));\n    return $renderer;\n};\nmy english is just so so ,\n. ",
    "DavidWiesner": "@akrabat that's isn't a good solution! Set withBody than schould call reparseBody automatically. In  #1804 I also described getBody()->write()  should also invalidate the content of parsedBody automatically. You can also set a new ContentType with withHeader which also should result in re-parsing the body. The easiest solution would be to parse the body every time when getParsedBody will called. That would leed to a discussion how often getParsedBody will called and how expensive this will be in contrast to more and more guards and checks.\n. Indeed there is another issue with parseBody and this solution. I can modify the existing body with getBody()->write(). So one option to solve also this might be to add an guard that check the modification of the body. E.g.: calculate a hash value and compare to the previous hash of the Body. I don't know if there is another option to check if the body was modified. \n. Another option to also resolve the issue with directly modifying the body. Is to make RequestBody immutable. So isWriteable return false and only allow to set a new body using withBody\n. Ok, then you have to check if the body was modified in parseBody \n. ",
    "timwattenberg": "@akrabat Agreed, returning objects is not exploitable. A middelware could check if anything else than an object is returned and provide the workaround in this case.\n. ",
    "AmibeWebsites": "Okay, so my first example would work and I use $request->getAttributes() in the middleware method to access it? I shall attempt it immediately. Thank you for the fast response.\n. Fantastic, it worked. For the record, this was the code:\nFor my route:\n$app->get('/users', 'App\\UserController:get')\n    ->setName('user-list')\n    ->setArgument('allow', ['admin'])\n    ->add( 'App\\AuthMiddleware:authorize' );\nFor my middleware:\n```\npublic function authorize($request, $response, $next)\n{\n    $route = $request->getAttribute('route');\n    $allow = $route->getArgument('allow');\n// Code to check auth here\n\n$response = $next($request, $response);\nreturn $response;\n\n}\n```\n. Looking at the code, rewind is doing exactly what it's supposed to do: \"Seek to the beginning of the stream.\"\nSo if the intention of the Response withJSON method is to replace the response body (as I believe it is) then it's not working as intended.\nSo perhaps replace:\n$body = $this->getBody();\n        $body->rewind();\nwith\n$this->body = $body = new Body(fopen('php://temp', 'w+'));\nNot sure if anything would be lost this way, like body meta, that should be added back in?\nAnd should clone be used instead, like this?\n$clone = clone $this;\n        $clone->body = new Body(fopen('php://temp', 'w+'));\n        $clone->body->write($json = json_encode($data, $encodingOptions));\n. I've discovered why it's happening. I have two route groups. If I remove an entire group the repetition disappears. I suspect when I add more groups the repetitions will increase accordingly.\nSo it appears the entire middleware process is called for each route group. Is that what it is meant to do?\n. I'm closing this as it's stopped happening. Unfortunately I have no idea what's changed as I don't believe I did anything in particular other than observe it. Then, as they say...\n. ",
    "atraianovschi": "Hello,\nI don't see why this issue was closed because the current method ->withJson() is just overwriting the stream and not replacing the current body with the new JSON. And I really think this is the approach that everyone is expecting from this method. \nFor example I have a middleware that should filter the response based on some rights. The ->withJson() method works perfectly when I create the response and when it goes to the middleware I should filter that response and replace it with the filtered version of it, with same method ->withJson().\nIf the method withBody is replacing the content, and withStatus is also replacing the status, why withJson should not replace the content ?\n. ",
    "denismitr": "``php\n$client = new Client();\n$configuration = [\n    'settings' => [\n        'displayErrorDetails' => true,\n    ],\n];\n$c = new Container($configuration);\n$app = new App($c);\n$app->any('{path:.*}', function(ServerRequestInterface $req, ResponseInterface $res) use ($client) {\n    $response = $client->send(\n        $req->withUri(\n            $req->getUri()->withHost('m-marittima.ru')\n        )\n    );\nreturn $response->getBody()->getContents();\n\n});\n```. That works for me. ",
    "shinji62": "Thanks. We can close that :). ",
    "rachellcarbone": "Are we able to create custom views currently without this interface? I just upgraded from v2 to v3 and am trying to re-implement a custom JSON view that uniformly formats all responses. I'm having a hard time figuring out how to connect it to the API. \n. @silentworks Hello! It was called by $app->render manually in each route to complete the method. I was hoping to implement it in a similar way. \n. @silentworks Thank you I was able to figure out how to add it as a container view and use render by looking at the PHP-View. Thanks for the help!\n. Thank you I'm going to try this out. I don't understand what the ::class refers to though in the $container[MyMiddleware::class] and ->add(MyMiddleware::class); lines though.\n. Hello again, I've been playing with this but I still cant figure out how to pass a custom parameter to this middle-ware.\nI need to pass a string (like 'public', 'member' or 'admin') to this authentication method. The method then logs in the user and checks to see that they have the appropriate rights to see.\nThe goal is to call $authenticateForRole('member') or add this as middle ware on a route or group basis so that each route can have individual permissions.\n. Ohhhhh.... lol I was over complicating it.\nThank you so much for the help @geggleto !\n. ",
    "bochoven": "I don't want to hijack this thread, but is there a way to have 'unlimited' optional parameters?\n. Ha, thanks!\n. ",
    "developer239": "Cool :)\n. Thanks a lot.\n. I am so blind. Sorry. Thank you.\n. ",
    "adiramardiani": "Hai @akrabat and @all\nFirst, sorry if I ask here (and bad english), a try in stackoverflow but someone not answer\nI have a route with optional data argument like this\nphp\n$app->get('/books[/{name}[/{section}[/{to}]]]', function ($request, $response, $args) {\n     ...\n     var_dump($args);\n     ...\n});\nI dump with link\nphp\n<?=$router->pathFor('books', ['name' => 'book-a','section'=>1,'to'=>2])?>\nThe result is correct : \n{ [\"name\"]=> string(6) \"book-a\" [\"section\"]=> string(1) \"1\" [\"to\"]=> string(1) \"2\" }\nThis link generate url like : books/book-a/1/2\nBut how to generate url like : books/book-a:1-2 ?\n(the section and to data argument (':1-2') is optional, books give list book, book-a only give detail book-a, if add :1 give book-a section 1, if add :1-2 give book-a section 1-2) ?\nI use : \nphp\n$app->get('/books[/{name}[:{section}[-{to}]]]', function ($request, $response, $args) {}\nbut when i var_dump the result is not like a write above, but\n{ [\"name\"]=> string(10) \"book-a:1-2\" }\nmy purpose is still\n{ [\"name\"]=> string(6) \"book-a\" [\"section\"]=> string(1) \"1\" [\"to\"]=> string(1) \"2\" }\nwhat route pattern to create scheme like that ?. Can you help me about this case (with reference link or some code) or must leave this issue to ask someone again ?. @OptimusCrime adriencarbonne do you mean me (adiramardiani) ?\nThanks. Oke, thanks\nMy case is done\nOnce again, thank you all :D. ",
    "Loic-Rameau": "I did as i say earlier. \n``` .php\n/*\n * @var Slim\\App $app\n /\n$this->get('/{slug:[a-zA-Z0-9_-]+}/agencies[/dpts/{dpts:\\d+}]', function (Request $request, Response $response, $args) use ($database, $slug, $app) {\n        $entity = Entity::getItem([\n            [\n                'column'=>$slug,\n                'operator'=>'=',\n                'value'=>$args['slug']\n            ]\n        ]);\n        if($entity === false){\n            return $response->withJson([\n                'error'=>'Unknown Entity',\n                'code'=>404\n            ], 400);\n        }\n    $response->getBody()->write(Agency::getItemsJson(\n        $where, 'cp'\n    ));\n    return $response;\n\n});\n```\nThe responses have the good data but not the status.\n. .json\n{\n            \"name\": \"slim/slim\",\n            \"version\": \"3.3.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/slimphp/Slim.git\",\n                \"reference\": \"939f2e85d57508de9cff241d10091cd972f221c3\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/slimphp/Slim/zipball/939f2e85d57508de9cff241d10091cd972f221c3\",\n                \"reference\": \"939f2e85d57508de9cff241d10091cd972f221c3\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"container-interop/container-interop\": \"^1.1\",\n                \"nikic/fast-route\": \"^0.6\",\n                \"php\": \">=5.5.0\",\n                \"pimple/pimple\": \"^3.0\",\n                \"psr/http-message\": \"^1.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^4.0\",\n                \"squizlabs/php_codesniffer\": \"^2.5\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Slim\\\\\": \"Slim\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Rob Allen\",\n                    \"email\": \"rob@akrabat.com\",\n                    \"homepage\": \"http://akrabat.com\"\n                },\n                {\n                    \"name\": \"Josh Lockhart\",\n                    \"email\": \"hello@joshlockhart.com\",\n                    \"homepage\": \"https://joshlockhart.com\"\n                },\n                {\n                    \"name\": \"Gabriel Manricks\",\n                    \"email\": \"gmanricks@me.com\",\n                    \"homepage\": \"http://gabrielmanricks.com\"\n                },\n                {\n                    \"name\": \"Andrew Smith\",\n                    \"email\": \"a.smith@silentworks.co.uk\",\n                    \"homepage\": \"http://silentworks.co.uk\"\n                }\n            ],\n            \"description\": \"Slim is a PHP micro framework that helps you quickly write simple yet powerful web applications and APIs\",\n            \"homepage\": \"http://slimframework.com\",\n            \"keywords\": [\n                \"api\",\n                \"framework\",\n                \"micro\",\n                \"router\"\n            ],\n            \"time\": \"2016-03-10 21:37:40\"\n        }\n. OOH ! I didn't tough of that. I found the guilty one !\n.php\n$app->add(function (Request $request,Response $response_,callable $next) {\n    $response = $response_->withHeader('Cache-Control','no-cache, must-revalidate');\n    $next($request, $response);\n    return $response;\n});\nThank you for the help, and sorry for the bother.\n. You can achieve this by overriding the default Request and Uri class in the container.\nFirst override the Request::createFromEnvironment method to get your Uri class and then override juste the Uri::createFromEnvironment method.\nSo you will have the same default behavior but with a custom Uri definition.\nOr alternatively modify directly the environment in the container after is initialization. And add your logic to make the REQUEST_URI or SCRIPT_NAME as if Slim was on root directory.\n. ",
    "ImIOImI": "I think this is, possibly, related to an issue I've found. In my haste (aided by phpstorm's auto complete functionality), I seemed to have found a new and creative way to break stuff. I accidentally used the wrong container interface in the constructor of a controller like:\n`use Zend\\Memory\\Container\\ContainerInterface;\nuse \\Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse \\Psr\\Http\\Message\\ResponseInterface as Response;\nclass User extends Controller\n{\n    protected $ci;\nfunction __construct(Zend\\Memory\\Container\\ContainerInterface $ci)\n{\n    $this->ci;\n}\n//...`\nobviously this is wrong, and I know how to fix it, but the error was unintelligible.\nBelow I've attached a file from my screen output. I traced the output back to where the error was being thrown and did a var dump of the container above the content that Slim echos to the screen (I drew a blue line on the pic to make the demarcation obvious).\n\nI have output buffering disabled, but I believe that because xDebug added all the extra stack trace info to the error message that Slim didn't expect, it cut it off. \nSorry if I'm off base... but this issue looked close enough for me to post here rather than opening a new issue.\n. ",
    "forty1": "@akrabat I tried it your way too, but didn't work for me. What worked for me is this dirty, little hack\n$response->withHeader('Content-Length', strlen($jsonData) + 3)\n. ",
    "ckressibucher": "I think nginx and php built-in server are two different problems. I have the same problem with the php built-in server, but only when using dots in the url path. To reproduce @akrabat \n// define 3 routes:\n        $app->get('/', function ($request, $response, $args) {\n            die('home');\n        });\n        $app->get('/no-dot', function ($request, $response, $args) {\n            die('no dot');\n        });\n        $app->get('/with.dot', function ($request, $response, $args) {\n            die('with dot');\n        });\nStart server: php -t public -S 127.0.0.1:8080 public/index.php\nCall the 3 routes:\n```\n\ncurl -# 127.0.0.1:8080\nhome\ncurl -# 127.0.0.1:8080/no-dot\nno dot\ncurl -# 127.0.0.1:8080/with.dot\nhome\n```\n\nThe last one should show 'with dot' instead of home. The reason is that slim does not work correctly when SCRIPT_NAME is set to the same value as REQUEST_URI, which is the case with the php server when the url contains a dot.\nIn Symfony, they use an additional router script which wraps the application's entry point. This script sets SCRIPT_NAME as well as PHP_SELF to this entry point:\nhttps://github.com/symfony/framework-bundle/blob/master/Resources/config/router_dev.php#L37\nFor the php built in server I would suggest to provide a similar wrapper script. Because I think it's very uncommon behavior to set SCRIPT_NAME to the URL path if the url contains a dot...\nAs I said, nginx is probably another topic, I haven't tested yet.\n. For the php built-in server, I suggest to provide a special \"router\" script which wraps index.php, and which does the \"hacks\" that @vit1251 probably means. Please have a look at my gist for this purpose: https://gist.github.com/ckressibucher/e37520cf2f1d08ec56d250c54d96ed72 (it's not specific to slim, but shows the idea). The approach is explained in more depth in an article I wrote about that \"problem\".\nI think it's really the cli server which has some weird behavior, so I wouldn't want to change core logic to support this kind of behavior.\nIf you agree with this approach, I would offer to write that script and provide a PR.\n. @schnittstabil That's what I did before. The question is if we want to support the uncommon behavior of the php server in the same file that we ship to production, or in a separate -- dev only -- file. In my opinion, the latter solution is cleaner, as it separates the \"normal\" entry point (which works in most of the common production environments) from the \"hacks\" that are required to support the PHP dev server.\n\nin particular because my development environment should match as accurately as possible my production environment.\n\nThat is a valid point. However, I think in this case you should not use the PHP dev server at all. Because its behavior is fundamental different than that of your production server.\n. @JoeBengalen I do want to implement it on a different container, and likely there are others too. I don't know the slim framework very well, but at first sight there are no problems introduced by this change, at least the tests are all passing.\nIf the change introduces problems, then the comment should be fixed (because I just did what the comment says...)\n. Ok, didn't know that, then I agree with @akrabat \nNonetheless, I'd be thankful for a minimal interface with a setter to be able to reuse the service provider. (The interop container only provides get and has methods).\nSo my suggestion would be:\n1. Write an interface Slim WritableContainerInterface extends \\Interop\\Container\\ContainerInterface and define an addittional offsetSet.\n2. Rewrite the service provider to use that interface\nIn my project, to use a different container, I would then just need to write a Bridge class which implements this simple interface (whereas I now need to implement / extend the Slim container).\nThe other Slim code would not need to use this additional interface, as long as they only need the get and has methods defined by the interop container.\nWhat do you think about this?\n. To show the problems, here is a script and its output:\n```\n<?php\nrequire '../vendor/autoload.php';\nclass MyGuzzleStream extends GuzzleHttp\\Psr7\\Stream\n{\npublic function __destruct()\n{\n    echo \"\\ndestructing guzzle stream \" . spl_object_hash($this) . \" ; following the stream resource which gets closed:\\n\";\n    try {\n        print_r($this->getMetadata());\n    } catch (\\Throwable $t) {\n        echo PHP_EOL . $t->getMessage() . PHP_EOL;\n    }\n    parent::__destruct();\n}\n\n}\nclass SlimResponse extends \\Slim\\Http\\Response\n{\n    public function __destruct()\n    {\n        echo 'destructing ' . get_class($this) . ' hash ' . spl_object_hash($this) . \"\\n\";\n    }\n}\n$stream = new MyGuzzleStream(fopen('php://temp', 'r+'));\n$response = new SlimResponse(200, null, $stream);\n// copy (clone) response: Slim also clones the body stream\n$respNew = $response->withHeader('Content-Type', 'text/plain');\necho \"\\nfinish... clear up resources...\\n\";\n```\nAnd the output:\n```\nfinish... clear up resources...\ndestructing SlimResponse hash 0000000062e2bd95000000002bd2a9da\ndestructing guzzle stream 0000000062e2bd97000000002bd2a9da ; following the stream resource which gets closed:\nArray\n(\n    [wrapper_type] => PHP\n    [stream_type] => TEMP\n    [mode] => w+b\n    [unread_bytes] => 0\n    [seekable] => 1\n    [uri] => php://temp\n)\ndestructing SlimResponse hash 0000000062e2bd93000000002bd2a9da\ndestructing guzzle stream 0000000062e2bd92000000002bd2a9da ; following the stream resource which gets closed:\nWarning: stream_get_meta_data(): supplied resource is not a valid stream resource in /home/claudio/dev/php-qatrends/qatrends/vendor/guzzlehttp/psr7/src/Stream.php on line 236\nUnsupported operand types\n```\nNote that we have 2 different guzzle streams, due to cloning. When the first instance is destroyed, it closes the stream (before that I return the metadata, which works). When the second instance is destroyed, getting the metadata does not work anymore, because the underlying stream has been closed before. This causes the Error.\n. Thanks for testing.\nPSR7 requires to clone the reponse when changing state of the response. As I understand it, it does not require a deep clone. Actually, I didn't see it anywhere else...\nMoving parent::__destruct to the top helps because guzzle then does not try to access the resource anymore -- it knows it's already outdated. My test script was written in a way that shows the problem arising from the fact that there are 2 different PSR7-Stream objects in memory, which use the same underlying php resource. This is not an issue as long as nothing happens with the \"old\" object (the old response, in this case). But as soon as this old instance gets destructed, and in case of the guzzle Stream implementation, this causes to close the underlying stream, it also has an effect on the current Response object (which uses the same underlying stream). With moving the parent::__destruct call you \"fixed\" my test script, to not show the real world problem anymore, which still exists :-)\nBy the way, the problem I encounter in my real project is an endless loop when sending the response, because Slim checks for eof of the stream in \\Slim\\App::respond, and guzzle's implementation for this is: return !$this->stream || feof($this->stream);. If the stream (the underlying php resource) still exists, but has been closed by another, destructed, object, this returns false because feof fails (with a warning, because the stream has been closed). Slim is happy and continues to \"read\" from the stream (which kind of works, because guzzle does not check the state of the real resource, but its own readable property, which does not yet know the resource has been closed by another object). Please do not waste time debugging this issue, it's just a background info so you see how important it is to find a solution to the root cause for this problem. Which in my opinion is clearly, that it is possible to create 2 instances of Stream objects which use the same php resource.\n. > Does the problem exist if you use Slim's response object?\nDo you mean the Slim's Stream object?\nWhen I use Slim Response and Slim Stream classes, I don't have this problems. Because the Slim Stream doesn't have a destructor which closes the stream resource.\n\nI always thought it was kinda silly that we \"cloned\" the steam instead of opening a new stream and copying it.\n\nThis would solve the issue, however, I'm not sure about the impact on performance...  If you have lots of data in the streams and you copy it over to a new one on every withXYZ method call... This is probably much worse than just instantiating new objects.\nI don't understand the immutability required by the PSR spec as a deep immutability, so I think it would be ok to just copy over the reference of the Body Stream when cloning the Response object. All PSR7 implementations I saw until now do it like this.\n. @geggleto The reason of psr standards is to ensure interoperability. So you should care about compatibility with other implementations.\n. @akrabat \n\nand given that we can't assume that any given implementation has implemented stream_copy_to_stream() in their StreamInterface's __clone() method, Slim probably shouldn't be cloning the StreamInterface object.\n\nExactly. That's what I tried to explain. Regarding the stream_copy_to_stream inside the StreamInterface object's __clone method: I have not seen any implementation so far that does it. (Slim does it in  Slim/Slim/Http/RequestBody.php but not in the response).\n. ",
    "bertrandmalet": "I think i have the same problem with the build-in PHP server. My setup is with a catch all route define at the end of all routes :\nphp\n$app->get('/{route:.*}', 'Help:run');\non the run method i'm using \nphp\n$request->getUri()\nThe getUri return 2 differents results with Apache and php build-in server.\nFor exemple, with http://127.0.0.1/idontexist on Apache $request->getUri() will return /idontexist with build-in php it will return /\nThat's because SCRIPT_NAME is set to /index.php with Apache, with build-in php it's set to /idontexist so Slim define different basePath\nhttps://github.com/slimphp/Slim/blob/f762309527e5180689be7d543c8f6b6d27290ef8/Slim/Http/Uri.php#L209\nHope it's help\nUPDATE : my bad, i didn't set the -t option when running php build-in server : \nphp -S 127.0.0.1:8080 public/index.php\ninstead of \nphp -S 127.0.0.1:8080 -t public public/index.php\n. ",
    "vit1251": "Yep. I am already have issue with embeded PHP developer server.\nBut I make simple hack in index.php: set up value $_SERVER['SERVER_NAME'] from different variable.\nIt workaround but it works.\n. ",
    "dangerousdan": "So that we can reuse the trait in middleware to dispatch the router.\nThis is useful as it enables us to have outer middleware that manipulates the route, and inner middleware which has access to the chosen route.\nIt's possible to do this already by copying the contents of app::determineRouteBeforeAppMiddleware, but this isn't DRY.\n. ",
    "andrey900": "thanks)\n. I generate routes on the fly from a database, but I want to be able to change the default behavior of the controller, depending on a URL. I thought that there will use middleware. I'll try use, the pattern strategy for the controller.\n. ",
    "Rudloff": "The problem seems to come from here: https://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L386\nIf I remove the first condition and use the simpler way (without $totalChunks), it seems to work correctly.\nCould it be a problem with the way Slim calculates the chunks?\n. OK so for some reasion $body->read($chunkSize); only reads 1631 bytes, even though $chunkSize is 4096.\nIf I set it to something lower like 1024, it seems to work fine.\nI guess it only reads the content of one packet so the whole chunk size thing is not really relevant here.\nOne solution would be to check $response->getBody()->getMetadata()['stream_type'] to see if the stream has a distant source.\n. It works, thanks!\n. While waiting for the issue to be fixed in \\GuzzleHttp\\Psr7\\Stream or in \\Slim\\Http\\Stream (if it can be fixed), I followed your advice and created a very basic class that extends \\GuzzleHttp\\Psr7\\Stream: https://github.com/Rudloff/psr7-process-stream\n. @akrabat Yes, it seems to work correctly.\n. Note that the W3C HTML validator also complains about this if such an URL is used in a href attribute.\nBad value http://foo:b@ar@example.com for attribute href on element a: User or password contains an at symbol (\"@\") not percent-encoded.\n. I can't use STDOUT since it is already used to return the data that will be streamed to the browser.\nI guess the only thing we can use is the exit code, so I was thinking about something like this:\n```diff\ndiff --git a/Slim/App.php b/Slim/App.php\nindex 587e6710..42e79914 100644\n--- a/Slim/App.php\n+++ b/Slim/App.php\n@@ -439,6 +439,13 @@ class App\n                     }\n                 }\n             }\n+\n+            if ($body->isPipe()) {\n+                $exitCode = $body->close();\n+                if ($exitCode > 0) {\n+                    throw new \\Exception('Process did not exit correctly. Exit code: '.$exitCode);\n+                }\n+            }\n         }\n     }\ndiff --git a/Slim/Http/Stream.php b/Slim/Http/Stream.php\nindex 27c7a764..80167957 100644\n--- a/Slim/Http/Stream.php\n+++ b/Slim/Http/Stream.php\n@@ -212,13 +212,15 @@ class Stream implements StreamInterface\n     {\n         if ($this->isAttached() === true) {\n             if ($this->isPipe()) {\n-                pclose($this->stream);\n+                $exitCode = pclose($this->stream);\n             } else {\n                 fclose($this->stream);\n             }\n         }\n     $this->detach();\n\n+\n+        return $exitCode;\n     }\n /**\n\n```\nwhich would at least throw an exception if the process didn't exit correctly.. ",
    "jasonlam604": "Awesome! thx!\n. ",
    "ddalek": "Size of 0 is expected for pipes. They are unidirectional, you can't do seek, tell or size on them (I mean, you can, but don't expect meaningful results). But fstat works and it tells you that you're dealing with pipe, like so (tested on Debian, OpenBSD and Windows 7):\nfunction is_pipe($file) {\n    $mode = fstat($file)['mode'];\n    return ($mode & 010000) != 0; // This is octal as per headers\n}\nSo basically what Slim and Guzzle implementations of StreamInterface should do is:\n- switch to pclose() instead of fclose() when pipe is detected\n- return null from getSize() as per PSR7\n- throw \\RuntimeException on rewind()\n- decide on a consistent behavior for seek(), tell() and isSeekable()\nSeek and tell are interesting as you obviously can't seek back (\\RuntimeException) but does this mean that isSeekable() == true? :) Tell is probably implementation dependent as most (not sure if all) OSes have special error code for tell on sockets and pipes.\n. Since Slim's implementation has methods beyond what's in StreamInterface anyway, I'd add isSeekableForward() and seekForward() for completeness. If one's dealing with pipes, he/she might need them anyway.\n```\n    /\n     * Returns whether or not the stream is seekable forward.\n     \n     * Note: This method is not part of the PSR-7 standard\n     * and is provided for Stream's compatibility with pipes.\n     \n     * @return bool\n     */\n    public function isSeekableForward()\n    {\n        return $this->isSeekable() || $this->isPipe();\n    }\n/**\n * Seek forward in the stream.\n *\n * Note: This method is not part of the PSR-7 standard\n * and is provided for Stream's compatibility with pipes.\n *\n * @param int $offset Stream offset\n * @throws RuntimeException on failure.\n */\npublic function seekForward($offset)\n{\n    // Note that fseek returns 0 on success!\n    if (!$this->isSeekableForward() || fseek($this->stream, $offset, SEEK_CUR) === -1) {\n        throw new RuntimeException('Could not seek forward in stream');\n    }\n}\n\n```\nI'd also change isSeekable() implementation - there's no need for isPipe() call, I think, as 'seekable' metadata is guaranteed to be 1 in case of seekable handle and something else (typically 0 but undef for pipes) in other cases.\n```\n    public function isSeekable()\n    {\n        if ($this->seekable === null) {\n            $this->seekable = false;\n            if ($this->isAttached()) {\n                $meta = $this->getMetadata();\n                $this->seekable = ($meta['seekable'] === 1);\n            }\n        }\n    return $this->seekable;\n}\n\n```\nHTH.\n. Argh, I misinterpreted print_r() output. My comparison was unnecessary, the value returned is bool, not int. This will teach me not to rely on print_r(). :)\nStill, 'seekable' meta should be false for pipes (despite SEEK_CUR working) and && !$this->isPipe() in isSeekable() adds the cost of fstat() to the first isSeekable() call on verifiably seekable streams. But that's just a tiny perf nitpick (if I'm not talking out of my back again).\n. Cursory search through their issues shows quite a few historical incompatibilities around files and streams, including a new one around fseek() so I'm not terribly surprised. I'll take the time over the weekend to see if there's anything that can and should be done in Slim or if it's HHVM problem.\n. ",
    "RusAlex": "But I cant neither replace $response->body nor attach new resource to it (attach is protected method) . \n. Thank you so much. \n. @mgirouard @akrabat \nSuppose there is no any error in docs. Response::withJson just pass $data as input to json_encode function. \n\nPHP implements a superset of JSON as specified in the original \u00bb RFC 4627 - it will also encode and decode scalar types and NULL. RFC 4627 only supports these values when they are nested inside an array or an object.\n\n$data can be also be an object which then will be encoded to json. \n. @oliverut could you cut your minimal working example which can be run by just copy-paste to simple   Slim application ?\n. Just tested and have not found the bug.\nhttps://gist.github.com/RusAlex/baf97b94f5a43ad8bf2b8a4551c9bf89\nthis code works well for me.\nOn Wed, Sep 27, 2017 at 11:24:15AM +0000, Bogus wrote:\n\ni'm doing like this\n   $app->get('/ftp-users', Edis\\Api\\VhostsController::class .\n   ':getFtpUsers')->setName('getVhostFtpUsers');\n   and have no problems at all.\n   did you include the class with 'use' statement?\n\u2014\n   You are receiving this because you are subscribed to this thread.\n   Reply to this email directly, [1]view it on GitHub, or [2]mute the\n   thread.\nReferences\n\nhttps://github.com/slimphp/Slim/issues/2306#issuecomment-332490704\nhttps://github.com/notifications/unsubscribe-auth/AAW2yujrx4tiJGeOu84d8VRvOtImFGXgks5smjBfgaJpZM4Pj6jB\n. \n\n",
    "farazappy": "@tflight Thanks! Didn't knew about the forum's will post there about the same! Thanks again!\nUpdate: I just tried to post there but it said my account has been blocked. Any possible reason why?\n. @silentworks Thanks for doing so!\n. ",
    "Raistlfiren": "I am mostly just wanting to extend off of the default classes and add my own methods. Is there an easy way to go about doing that?\n. True, but that is a lot of work to just add a few methods to the UploadedFile class. For instance, my scenario is say I want to add the method getExtension to UploadedFile or maybe I want to use Symfony's UploadedFile class. There isn't an easy way of switching that out without overwriting the whole request object. Should it really be that hard to do that?\n. > Currently, there is no easy way.\nExactly, this would enable us to overwrite that class easily.\n. but bUT BUT, I neeeeeed it now ;) \n. @akrabat I suppose my problem/annoyance is that I can't override the default classes without replacing the Request object in the container or using middleware.\n. The problem with using the middleware as you displayed is that you are not only executing the previous UploadedFiles code/class as well, but now you are using your own class to parse $_FILES. In essence you are duplicating code with that middleware.\n---Edit---\nIn this instance the middleware would be a hack in order to resolve a bigger problem, right?\n. @akrabat Absolutely, which does work just fine. I am just proposing that we get rid of this step and allow users to define their own MyUploadedFile class.\n. @akrabat Is that really all that complex? In my sample, which I know is incomplete, allows you to do what I am asking for in a few lines of code. It requires the static build method to look for that unique setting and call a different class. \nThere aren't to many classes that you need to override with Slim 3. Most of them can be overwritten pretty easily like the Request object that you displayed. Those Http classes are just more difficult because they are called statically.\n. slim.files is used for testing purposes. You can view the comment here - https://github.com/slimphp/Slim/issues/1099#issuecomment-83735868\n. ",
    "Alex-PK": "The main problem I had in implementing CORS in Slim was (is) the absence of the Origin header in $request->getHeader*()\nSame thing happened with Authorization (for OAuth2). I had to use a SetEnvIf in htaccess to have access to it.\nA way to add \"whitelisted headers\" in Headers' $special array before the createFromEnvironment() would be great, IMHO. \nRight now the call to it is hardcoded in Request, so you can't even override it in Application. You need to extend Request and rewrite its createFromEnvironment from scratch.\nWhile I'm on it, a way to extend Request's $validMethods would be nice too, as I had (still, for CORS) to use PROPFIND (or create a new INFO method) where I used OPTIONS, because the latter is hijacked by CORS.\n. Sorry, forget what I said about the Options header. It's a bug in my Postman. The Origin header gets correctly parsed by Slim.\nIt would still be nice to have a way to customize $validmethods. :)\n. ",
    "Demonslay335": "I don't quite understand what you mean by the Slim instance being accessed by http. If I run this code on my local Apache setup (e.g. http://localhost)  getUri() returns https as I would expect.\nThe host is determined by two different environment keys in the next logic block, so I would propose a similar chained approach to determining the scheme.\nAdding more middleware is a bit overkill in my instance TBH (just used to make an HMAC hash, so I hacked a str_replace() on mine since SSL is forced anyways via server config), but thanks for the code. Definitely would come in handy if I needed it in a bigger project.\n. @tuupola Thanks for the explanation. Excuse my ignorance with how the SSL proxy part works, my hosting is off of someone else's sub-domain, so I've never actually managed CF myself.\n@akrabat I agree it would be too much work for the core now that I have re-evaluated with the comments here. Thanks for the link, surprised I never came across that middleware while looking into this, very useful! I might just pull that into the project to make things nicer than my aforementioned str_replace().\n. ",
    "madsem": "I just ran into the same issue, hosting behind an ELB on Amazon.\nX-Forwarded-Proto is trustworthy as long as the instances are not accessible via public and security groups allow access only via load balancer.\nThe problem with the middleware solution I see is that middleware runs much later so that until this point the application still generates http urls.\nIMHO it should be possible to add trusted headers directly to the environment, because this is not an edge case but a very common use case.\nPS: Just tried it with Middleware, but the problem remains that Slim\\Http\\Uri generates http urls, also when \nPSPS:\nI ended up writing a service provider (because I use php league container) and create the environment like this:\n```php\n$this->container->share('environment', function () {\n        $server = $_SERVER;\n\n        // fix the secure environment detection if behind an AWS ELB\n        if (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https') {\n            $server['HTTPS'] = 'on';\n            $server['SERVER_PROTOCOL'] = 'HTTP/2.0';\n            $server['REQUEST_SCHEME'] = 'https';\n        }\n\n        return new Environment($server);\n    });\n\n```\nNow for my application this is sufficient, because it is not accessible publicly and only though the aws elb, so I know those headers are 100% from the elb. Now the request object builds using the environment data and all urls taken from the request also have https even though slim runs \"officially\" under http on the instance.\n. Hey @akrabat thanks, will look at it again. But I already tested your middleware earlier and the problem was that the IP addresses are unknown (AWS ELB). But I give it a whirl again, maybe there is a way that I didn't see if I only want trusted proxies to be X-Forwarded-For. nice! Thanks for that tip :) Have a nice sunday. ",
    "francoism90": "You need to inject the Container into the class.\ndeps.php:\n<?php\n$ci['render'] = function ($ci) {\n  return new \\Path\\To\\Controller($ci);\n}\ncontroller.php:\n```\n<?php\nnamespace ..\nclass Controller {\n  private $ci;\npublic function __construct($ci) {\n    $this->ci = $ci;\n  }\npublic function myMethod($request, $response, $args) {\n    return $this->ci['render']->method();\n  }\n}\n```\n. ",
    "RyanGittins": "I think this sort of scheme would be useful for adding middleware to groups of routes which you don't wish to actually group using the $app->group('/segment', ... notation.  Oftentimes, I don't want to actually group some routes under the same URL segment, but I do for the purposes of applying middleware.\nFor instance, consider a Slim project which has some routes which produce a page and some which are API endpoints.  It would be nice to be able to do something like $app->getRoutesWithTag('endpoint')->add( $isXhrCheck ); or $app->getRoutesWithTag('page')->add( $addHeaderAndFooter );.\nThe above situation is something I run in to often.  I usually group the endpoints under /api or something similar using route groups, but I don't want to do the same thing with pages and produce a useless /page URL segment.  I think this is the sort of thing Alex is getting at.\nJust some thoughts from the outside!  Thanks for all your hard work.\n. That looks pretty good, @danielgsims!\nWould it be possible to implement something like I described above, like $app->getRoutesWithTag('endpoint')->add( $isXhrCheck );?  I think the most value of tags would be adding middleware to all routes with a given tag.\nSyntactic sugar, I know, but I think it would make for extremely readable code.\nEDIT: You may want to perform the same is_string() check in the foreach loop in the addTags() function as you do in your addTag() function.\n. @danielgsims Doy, my bad!  Must still be morni... 12:49pm.\nI appreciate it, Daniel.\n. @danielgsims - I just ran it through a little test on this end.  Flawless!\nI really think this will be a feature that'll help Slim projects scale (at least given the way I build them), as we can now apply the same middleware to routes that are spread across files in a DRY way.  Thanks!\n. In all honesty, using arguments for something like middleware assignment seems like a big hack\u2014at least from the perspective of someone who uses Slim and has done no work on Slim itself.  I think @danielgsims nailed it when he said that the intent of usage matters.\n. I think one of the few areas where Slim projects seem to grow less DRY with time is in middleware assignment.  When you have hundreds of different routes with different access levels, API endpoints, AJAX endpoints, etc, all split across multiple files, groups don't work as well for common middleware assignment.\nAs @alexweissman said, groups constrain us to a many-to-one relationship.  When you have a route requiring many levels of middleware, grouping them only alleviates us from having to assign the ones they all have in common.  Think of a Venn diagram with a dozen circles\u2014if you group them all, you can only assign common middleware to the group.\nHere's an example of the kind of functionality I'm vying for:\n``` php\n$app->getRoutes()->withTag('page')->add( $addHeaderFooterWrap );\n$app->getRoutes()->withTag('popup')->add( $addEmailCaptureModal );\n$app->getRoutes()->withTag('ads')->add( $addBannerAds );\n$app->getRoutes()->withTag('auth')->add( $authenticationCheck );\n$app->getRoutes()->withTag('admin')->add( $adminCheck );\n$app->getRoutes()->withTag('superadmin')->add( $superAdminCheck );\n$app->getRoutes()->withTag('secure')->add( $sslCheck );\n$app->getRoutes()->withTag('ajax')->add( $xhrCheck )\n                                  ->add( $rateLimiter );\n$app->getRoutes()->withTag('api')->add( $apiKeyValidCheck )\n                                 ->add( $apiKeySetCheck )\n                                 ->add( $rateLimiter )\n                                 ->add( $applyBlacklist );\n```\nI think the above accomplishes in fewer than fifteen consecutive, neatly-packaged lines what would normally be scattered across all routes in each route file.  At a glance, you can see what middleware applies to which routes, as long you name your tags sanely.  This allows for a readable, concise, encapsulated way to assign middleware\u2014totally agnostic to how you structure your routes in different files and route groups.\n. ",
    "lcharette": "Anyone got news on this feature or a way to implement ourselves using custom recipe? It would be really useful for sending per route argument to a common middleware. . ",
    "skeagy": "As a novice user making my first enterprise web application using SLIM, I really like the approach taken by @danielgsims and @RyanGittins. It seems the most clear for helping others who might follow me to understand the code I wrote. My use case that led me to search for this:\nI have a bunch of GET routes for HTML content, with ajax calls embedded.\nI have a bunch of GET routes for JSON content, in a route group setting JSON content type via middleware\nNow I want to add a bunch of POST routes within the JSON content, and have a middleware just for those to check authentication or do some other stuff... oops, they have the same URL base as all the other JSON routes. Hit the 1-to-many issue. And I would prefer not to muck with my URL scheme which is already established and have to touch other stuff I already wrote. There is probably a better way to do it, a more clean way I should have designed it, but the tags and \"get all routes with this tag\" approach would seem an elegant way to put all the routes in one file and middleware in another file, and enable people to solve these problems without doing a major refactoring.. ",
    "adamaltman": "The problem is that the change in #1866 (part of 3.4.1) is integrated as a bugfix release if semantic versioning is followed, and it's breaking its contract by now throwing an UnexpectedValueException.  This might have been identified as a breaking change.\n. ",
    "jonathankaiser": "I went and did some further digging with the headers coming from the google bots. The HTTP_ACCEPT is \"text/plain,text/html\". Inside determineContentType(), $selectedContentTypes is generated with an index of 1 instead of 0.\nArray\n(\n    [1] => text/html\n)\nHere are the headers coming from the google bot\nHTTP_CONNECTION Keep-alive\nHTTP_ACCEPT text/plain,text/html\nHTTP_USER_AGENT Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\nHTTP_ACCEPT_ENCODING    gzip,deflate,br\nThe reason this is popping up now is because I don't have a robots.txt file at the root of my site which I could easily add but google won't be able to crawl a Slim site without it which was still possible in 3.3.0.\n. It's hitting the NotFound handler because it's trying to find a /robots.txt file at the root of my site.\n. ",
    "l1905": "isset(null) == false may be unreadable code, why not use is_null(null)?\n. ",
    "MegaBedder": "Why?\n. ",
    "wollanup": "OK, thank you for your fast answer, I'll wait for 4.0\n. ",
    "Setitch": "Oh, sorry for no unit testings, i just saw you answered me here:(\n. ",
    "hhihi": "Yes, for sure. What would be the best way to do that? add a middleware?\nImmediately after the calls to withStatus and withHeader it does look like the status is correct:\n```\n        $check = $response->withStatus(HttpStatus::NO_CONTENT)\n            ->withHeader(\"location\",$location );\n    var_dump($check->getStatusCode());\n    die();\n\n```\n\nint(204)\n. ",
    "kdubuc": "It limit the benefits to use an app as middleware \ud83d\ude15  Because, it can't be in the middle actually ..\n. I want to moduralize every generics modules of my app (like oauth2, errors, policies and user agreements, user devices ...). I want to do that with middlewares. But with enriched middlewares. For example oauth2 : it must have routes (/oauth2/authorize ; /oauth2/access_roken), other middlewares (access token checker), services (oauth2 server), models (client, consumer, tokens) etc etc ..\nSo, I want to encapsulate this into one big app middleware.\n. What do you think about a Kernel which can be provided in the Slim constructor.\nI build one : https://github.com/kdubuc/api/blob/master/src/Kernel.php\n\nContainer-interop powered\nCan be fill with an array\nReusable (can be use outside slim, in a cron / bus consumer to expose the same configurations / services)\nStrict definitions\nCan initialize the services thanks to ServiceProvider\n\nThe code isn't finalized, it is under active development, but the foundations are here \ud83d\ude09 . https://github.com/slimphp/Slim/issues/1923 is related, no ? \nAnyway, I copy paste my reply here :\nWhat do you think about a Kernel which can be provided in the Slim constructor.\nI build one : https://github.com/kdubuc/api/blob/master/src/Kernel.php\n\nContainer-interop powered\nCan be fill with an array\nReusable (can be use outside slim, in a cron / bus consumer to expose the same configurations / services)\nStrict definitions\nCan initialize the services thanks to ServiceProvider\n\nThe code isn't finalized, it is under active development, but the foundations are here \ud83d\ude09 . So, the query string should be normalized to be handled correctly by getQueryParams()\nGET /api/users?id=1,2,3 (or id=1&id=2, or whatever) \u27a1\ufe0f  GET /api/users?id[]=1&id[]=2\nThe normalization can be happen in Slim\\Http\\Ur: createFromEnvironment ? . Indeed, cool idea, like Middleware\\UriNormalizer. Thanks all !. ",
    "menismu": "Just a thought as this is remembering me an application I\u00b4ve developed where a feature needed to be executed always after the logic of each web service, and as Slim\\App is the last bit executed was not possible.\nLet\u00b4s say we have an application with a couple of middleware to be executed like:\nmiddleware 1 -> app -> middleware 2\nMiddleware 1 could be token validation middleware 2 could be something like audit feature where I need to get all responses tracked. Also, if I would need different implementations of the middleware 2 depending on the environment or to be reused is telling me a middleware is a better option than something implemented in the app.\nThis could be inline with @kdubuc comment and I'm wondering which would be the best approach to this in Slim.. Reading PSR-15 double-pass is based in a signature including request, response and next callable:\nfn(request, response, next): response\nCurrent middleware signature in Slim already includes request, response and next callable in the stack as the doc guide shows:\npublic function __invoke($request, $response, $next)\nI could be wrong but if I\u00b4m understanding well the idea would be to implement single-pass signature and set as default in Slim and keep double-pass as an alternative, is this the case? I\u00b4m asking because I\u00b4m interested in develop this enhancement and I want to do right.. I\u00b4ve discovered in #1686 below comment by @akrabat:\nSupport http-interop (PSR-15). This will change the signature of middleware to:\nfunction (RequestInterface $request, DelegateInterface $next);\nHence add() will change to support callables of the format:\n$app->add(function($request, $next) {} ):\nWhich means we need to support the current middleware format.\nThere are two choices:\n$app->add(new DoublePassWrapper(function($request, $response, $next) {} )):\nor:\n$app->addDoublePassMiddleware(function($request, $response, $next) {} ):`\ni.e. we either wrap the middleware before calling add or provide a new method for middleware of this format.. ",
    "anthonymassard": "My route definition accept POST of course : \n$app->post('/users', 'UtilisateurController:createUser' )->setName('create_user');\n. ",
    "fetzi": "Do you have looked into this issue?\n. ",
    "thefangbear": "Hi, I'm sorry that I still couldn't understand... :0 Shouldn't I be able to return data directly from the callback function? Or do I need to do\n$json = <my data>;\n$response = $response->withJson($json);\nreturn $respons;\nThank you again for the reply!\nBest, \nAlex\n. Thanks! Problem solved!\n. ",
    "madcyph3r": "Unirest is a lightweight HTTP request library.\nHere is some code (Old code, which i want):\n$app->post('/Deliveries', function (Request $request, Response $response) {\n        // send the whole body, because of the complexity from the object\n        $parsedBody = $request->getParsedBody();\n        // $articleList is an array. the max size is 125 objects.\n        // all object over 125 are not in the array\n        $articleList = $parsedBody['articleList'];\n        foreach ($articleList as $article) {\n               // do what ever\n        }\n}\nNew code (works, but not really nice)\n$app->post('/Deliveries', function (Request $request, Response $response) {\n        // read the json string\n        $body = $request->getBody();\n        $parsedBody = json_decode($body);\n        $articleList = $parsedBody -> articleList;\n        // now $articleList has all Objects\n        foreach ($articleList as $article) {\n                // do what ever\n        }\n}\n. Hello, i tried another framework (Httpful), there it works without problems ;). So i close this issues now.\n. ",
    "vkhramtsov": "@silentworks  I think it's better to use code style. Sometimes you are using classes from global namespace with adding them to use (like Exception), sometime you use just \\Exception without importing (also you can compare Collection class and CollectionInterface). It looks like you use different code style in different files.\nAlso I see obsolete use statements in some files. I think that it's better to remove them instead of keeping garbage in source code. What do you think?\n. And again, should I remove uses for classes from global namespace and add \\ for this classes in code or just remove obsolete use statements? I'm asking this because after adding \\ in type hints, I have to update phpDoc blocks.\nMay I sort use statements by alphabet?\nThank you.\n. ",
    "maxmeffert": "I personally don't mind the current state, but I would welcome a separation of settings and DI configuration with two constructor parameters.\n. Why not keep separation throughout the whole application?\n``` php\n$container['PiwikTracker'] = function ($container, $settings) {\n$piwikSettings = $settings['piwik'];\n\nreturn new \\PiwikTracker(\n    $piwikSettings['idSite'],\n    $piwikSettings['apiUrl']\n);\n\n}\n```\n. ",
    "ivandokov": "You may consider adding https://github.com/vlucas/phpdotenv\nIt's super convenient to use. I don't have project without this package. . This is waaay to specific. I think it will be great used as external package.. Slim 4 is under heavy development, not released.. php\n$data = array('name' => 'Rob', 'age' => 40);\n$newResponse = $oldResponse->withJson($data, 201, JSON_NUMERIC_CHECK);. I guess this is a mistake? Slim 4 is still work in progress.. Oh I totally missed the target branch. Then @geggleto brings a good point. There were discussions for php 7.*. ",
    "lezhnev74": "Recently I tried this InteropConfig package: https://github.com/sandrokeil/interop-config\nLooks promising, since I can manage my config independently under known rules. \nI feel that this package may fit the Slim well.. ",
    "it-all": "I'm using 2 config files, not including the slim settings: config.php and env.php:\n// in case of collision, env.php value overrides \n$config = array_merge(require APP_ROOT . 'config/config.php', require APP_ROOT . 'config/env.php');\n(not sure if it's better to have config last to override env - maybe you want to change some config values depending on your environment, but maybe some config values shouldn't be overriden)\nhttps://github.com/it-all/BoutiqueCommerce/blob/master/config/env-sample.php\nslim settings.php can then access $config\n. Yes. It is refreshing a POST.. Thanks! That must be it. . Yes, it works now.. Ok, thanks. \nIt works when I remove the status and header lines and simply redirect:\n//Override the default Not Found Handler\n'notFoundHandler' => function ($container) {\n    return function ($request, $response) use ($container) {\n        return $container['response']\n            ->withRedirect($container->router->pathFor('pageNotFound'));\n    };\n}. ",
    "chezzy": "Much better then\n$userSettings = isset($values['settings']) ? $values['settings'] : [];\n$this->registerDefaultServices($userSettings);. ",
    "kevincolten": "Updated to 2.6.1 and it resolved itself\n. ",
    "jordanbardsley7": "You mean this? https://github.com/slimphp/Slim/blob/3.x/Slim/DefaultServicesProvider.php#L172 If you look here the method must be one of https://github.com/slimphp/Slim/blob/3.x/Slim/Http/Request.php#L116 which is why you get that exception\n. ",
    "AlexDanault": "I'd also add that getCookieParam should be after getCookiesParams and not before, to be consistent with getQueryParam (which is after getQueryParams) and getParsedBodyParam (also after getParsedBodyParams)\n. ",
    "martynbiz": "Hi, thanks for the feedback. Sorry, I'm a little new to creating PR. I hope I've done it correctly here - https://github.com/slimphp/Slim/pull/1929 - let me know if there is anything I've missed or done incorrectly. Thanks :)\n. What's went wrong here? I see a few tests are being skipped, but that was the case before I made changes. Is that what's prevent 1 check from passing?\n. Thanks for the screenshot, I think it's OK now?\n. ",
    "mgirouard": "Thanks for the reply. That's all reasonable.\nDo you want me to close this and file a docs bug instead? I can also just PR it since it's going to only be a 1 line diff.\n. ",
    "jirkahronik": "Can you please expand on why the response object shouldn't be modified on its way through middleware stack? I actually find it a very interesting feature - e.g. setting default headers to the response that can be overridden in the route callable.\n. ",
    "christopher-bonitz": "\nWhy the sudden reliance of 3. party libraries?\n\nBecause some things have been solved better than we can. Autoloading is a good example. Composer's is much better than Slim 2's.\n\n\nJust went through your old slim.php, and yes, its a bit long.\nWould it be possible for you to take the autoloading part from composer, then isolate the logic that is needed to create a re-implementation of slim.php?\nIt just seems strange to me that auto loading would be the only reason for relying on Composer.\n. We have to agree to disagree on that.\nNo any PHP framework / subsystem can claim to be the only way of the future, it will depend on the situation.\nIn this situation we have our own autoloader repository framework, and Composer is just not compatible with it... yet.\nWe could put a lot of time and effort into making it compatible, but there is no guarantee that it wont happen again with another framework / subsystem.\nThis forces me to make a choice based on price and practicality.\nI can either ditch slim for another PHP restfull API implementation, or I can use the old version limiting future updates.\nSince it seems there will not be taken action to actually free Slim from the composer dependencies I will close this issue, unless something comes up in the next two days.\nThank you for your time.\n. ",
    "sowmyanadimpally": "No errors logged regarding this issue. It is not getting redirected to the given path when I use withAttribute(). I just want to know that, can I redirect to a path along with arguments.\n. Ok. Give me an example code where I can redirect along with arguments\n. Redirection is done perfectly but it is not passing any array values to views after redirecting. Can I pass any array values through pathFor to the view(html) page. \n. Ok. Thank you\n. ",
    "sn0rcha": "hmm... this doesn't seem to be working with the latest version of slim 3 - i get:\nMiddleware must return instance of \\Psr\\Http\\Message\\ResponseInterface\nwith the above function. Any ideas?. ",
    "potievdev": "I sent PR https://github.com/slimphp/Slim-Http/pull/72. You can disable deprecated warnings: \nerror_reporting = E_ALL & ~E_DEPRECATED. @akrabat  I suggest set upper compatible version of php less than 7.1 for branch 2.x. Because this issue cannot be solved without breaking backward compatibility or the solution will be very complex.. @akrabat This issue is not actual, You can close it.. ",
    "l0gicgate": "This issue will be resolved when merging #2529. This was solved with #2222.. Closed as per #2555. Closed as per #2555. Closing, this has been resolved. Slim-Psr7/pull/27 has been merged.. I'm removing the Slim 4 label from this as it is not an issue there. URI comes from ServerRequestInterface which is determined by the PSR-7 implementation that you choose since #2529 was merged.. @alexweissman I also have had those thoughts when looking at the error handling in the app class and thought it was a bit clunky.\nI'm going to throw a PR together that implements your concept within the next couple days here and submit it for review.. @geggleto @alexweissman looking further at the source, I see that the notFoundHandler and the notAllowedHandler give insight into the error itself and that's why those handlers were probably created in the first place.\nDo we really need to render these in the specific content type? The handlers have capabilities of rendering in HTML, XML and JSON. I'm going to boldly say that I suggest scratching all of that and decoupling the error rendering from the error handling.\nWe could give the option to the user to pass in a renderer if need be. We could also include by default HTML, JSON, XML and Plain Text renderers.\nI dislike the fact that they are tightly coupled together.. @alexweissman whoops seems like a great library. I'm not sure though if @geggleto @akrabat want to depend on that.. @alexweissman @geggleto @akrabat see PR #2222 . @alexweissman I'm saying that I dislike the way the handlers in Slim 3.x are tightly coupled to the rendering of the exception. There's a lot of code that is being repeated between NotFoundHandler, NotAllowedHandler and the default error handler. \nWe should continue the discussion in my proposed PR #2222 and close this issue.. I think that we should go with 7.1. Slim 4 introduces a few breaking changes already. \nThis reminds me of Internet Explorer support (which all front end devs still suffer from), there is absolutely no point in supporting 5.6/7 after EOL. Slim 4 isn\u2019t on track to be released before Q1 2019 at this pace anyway. \nIf your hosting provider doesn\u2019t let you use PHP 7.1, then you should switch as it is a security concern. And for people who are going to migrate projects from Slim 1/2/3 you\u2019re already refactorIng the whole project. Just do it the right way. . You should have on notFoundHandler that handles both cases but provides a different response for each.\nWhen a handler is being invoked, it gets passed Request, Response and Exception. You could have logic that looks at the Uri and decides whether it returns a JSON formatted response or calls your renderer to display some HTML depending on the path.\n```php\nclass ErrorHandler\n{\n    public function __invoke(Request $request, Response $response, $exception)\n    {\n        $uri = $request->getUri();\n        $path = $uri->getPath();\n        $payload = [\n            'code' => $exception->getCode(),\n            'message' => $exception->getMessage();\n        ];\n    if (strstr($path, '/api') !== false) {\n        return $response->withJson(\n            $payload,\n            $exception->getCode(),\n            JSON_PRETTY_PRINT\n        );\n    } else {\n        return $this->renderer->render($response, \"/myError.php\", $payload);\n    }\n}\n\n}\n```. Would you be able to post a sample of your middleware so we can better understand what it does? I have a feeling that some code may not be in the right place hence why you'd have to duplicate it in the error handler. . I think that you are using the wrong approach here.\nI would use global middleware instead of route specific middleware\nIf you could put a gist with all the moving parts together I would be able to assist you better also.\nHere is an example:\n```php\nclass ContentTypeMiddleware\n{\n    private $defaultContentType = 'application/json';\n    private $allowedContentTypes = [\n        'html' => 'text/html',\n        'xml' => 'application/xml',\n        'json' => 'application/json',\n    ];\npublic function __invoke(Request $request, Response $response, $next)\n{\n    $request = $this->resolveContentType($request);\n\n    /**\n     * Process All Middleware\n     */\n    $response = $next($request, $response);\n\n    /**\n     * Set Accept Header Before Responding To The Request\n     */\n    $contentType = $request->getAttribute('contentType');\n    $response = $response->withHeader('Accept', $contentType);\n\n    return $response;\n}\n\nprivate function resolveContentType(Request $request)\n{\n    $contentType = $this->defaultContentType;\n    $resolvedContentType = $request->getParam('format');\n\n    if (\n        $resolvedContentType\n        && isset($this->allowedContentTypes[$resolvedContentType])\n    ) {\n        $contentType = $resolvedContentType;\n    }\n\n    /**\n     * Here we add an attribute to the request object \n     * in case we need to modify the final content type elsewhere in our application\n     * The final Accept header will be set from this variable\n     */\n    $request->withAttribute('contentType', $contentType);\n\n    return $request;\n}\n\n}\n/*\n * Add our middleware globally so every request will be processed with it\n * You could also use this middleware per route if you chose not to add it globally\n * eg.: $app->group(...)->add(new ContentTypeMiddleware);\n /\n$app = new \\Slim\\App($settings);\n$app->add(new ContentTypeMiddleware);\n/*\n * Routes\n /\n$app->group('/api', function () use ($renderer) {\n    $this->get('/platforms', function ($request, $response) {\n        $data = [];\n        $response = $renderer->render($request, $response, $data);\n        return $response->withStatus(200);\n    });\n});\n/*\n * Run App\n /\n$app->run();\n``. Did you setdetermineRouteBeforeAppMiddlewaretotruein yourApp` settings?\nThat way you will have access to the route object in your middleware. \nAlso, if you did a gist with the relevant parts of your code, it would be much easier for me to help. \nThere's absolutetly no need to repeat code.. By using Exceptions as objects you mean like it carrying request/response or extra details like allowed methods for said route?\nWhat are my actionable items here @geggleto?. @akrabat\n\nWill do\nIt's \"optional\" because not everybody cares about the parameter $displayErrorDetails. I passed it in just in case people needed to use it for a dev/prod scenario where they would want to handle the errors differently. It still gets passed to the handler always, you as a developer can choose to use it in the signature, or not. That's all I meant by \"optional\". . @juliangut I think named exceptions are better because they are explicit. Status codes aren\u2019t. . @akrabat what are we doing with this? Is that something you want to implement for Slim 3/4?\n\nThe benchmarks aren't all that convincing. 4ms vs 7ms isn't a large enough difference to justify this in my opinion, but your opinion may differ.. @lazharichir are you using the lastest version of the Slim 4 branch?\nI suspect that you may be using an older version of that branch. If so, update to latest version. Notice that the error handlers are being set via shortcut methods App::setErrorHandler(), App::setPhpErrorHandler(), App::setNotFoundHandler() and App::setNotAllowedHandler().\nNote that error handling is being moved to middleware. Please refer to PR #2398. Feel free to use the code base from my forked version for enhanced error handling capabilities. It is located here\nThe following code will let you implement what you're trying to do with the current error handling in the current 4.x master branch.\n```php\nuse Slim\\App;\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\n$app = new App();\n$handler = function (Request $req, Response $res, $exception) use ($app) {\n    return $res->withStatus(500)->withJson($exception->getMessage());\n};\n$app->setErrorHandler($handler);\n$app->get('/foo', function ($req, ResponseInterface $res) {\n    throw new \\Exception('My message.');\n});\n/*\n * This will output the string \"My message.\" and have a status code of 500.\n /\n$app->run();\n``\n@geggleto you can close this.. @bnf are you moving forward with this PR? I'm curious as I will tackle it after my next couple of PRs if you aren't.. Closing this as we are moving forward with #2555. Thank you for your contribution @bnf . Fixed with #2547 for Slim 4 and #2576 for Slim 3. @odan despite not being a viable solution in Slim 4, someone will be able to simply extend theAbstractErrorHandler` and stub the constructor and do whatever they want. \n2222 has been closed. The concepts of that PR have now been implemented in #2398.\nIf you have any suggestions, feel free to comment on that PR!\nThanks. Thank you @asheliahut for the code review. I'm aware this is a large PR and I really appreciate you going through everything. I have made the suggested changes besides the suggestion you made for the AbstractErrorHandler::logError() method, If people want to implement logging they can simply extend the class and replace the ::logError() method. That's the main reason why I've left it abstract.. @odan \n\nI am going to replace all instances of PHP_EOL to \\n. Thanks for pointing that out.\nThe App class does not contain setErrorHandler() and setDefaultErrorHandler() anymore. The first commit on this PR removes all that.\nDefinitely open for proper naming suggestion for the middleware's name. It does handle both Exception and Throwble by default.\n\nThank you for reviewing this PR!\n. @edudobay Thank you for your suggestions. I will refactor AbstractErrorHandler accordingly.\nErrorMiddleware will take 2 parameters for the constructor $displayErrorDetails and $logErrors which will both be passed down to the default ErrorHandler that Slim ships with.\nI will also implement a way to pass a custom callable to ErrorHandler so it stubs the default error_log() usage.. @edudobay as per the commits after our discussion. The error logging has been decoupled from displayErrorDetails. I updated the PR documentation to reflect how custom logging can be done as well.. @designermonkey the whole reason for having standalone error renderers is so they can be used by the end user as well if they decide to implement their own error handlers. Using global values from the containers would bind those renderers to the container which is not something I want to do. Am I misunderstanding what you're proposing?. @designermonkey I refactored the ErrorRendererInterface after our discussion in this commit I however did not split the methods for displaying/not displaying error details.. @akrabat what I meant by that is ErrorMiddleware should be the last one to be added. In the example RoutingMiddleware should be added first, but I don't mean that it should be added first in your whole application.. @akrabat @geggleto what are your thoughts here. Perhaps a lot of the community doesn't quite understand what this thread is about since it's not something that's relevant to them. If you two approve, I'll start a PR, it should be a fairly small one.. 1. Yes the current 4.x branch is in a working state\n\n\nContainer has been replaced from Pimple to PSR-11 Container and you can simply drop in your own container such as PHP-DI in there or any other PSR-11 compatible containers. Simply use the $app->setContainer($yourPSR11CompatibleContainer) \n\n\nI suggest you join the Slack server slimphp.slack.com to discuss with the active community.. @RyanNerd I'm sorry I forgot about the invitation process. Go to this link to join.. This is the correct behavior, the reason being is that the group's path will be matched first before the final route's path. And then middleware ordering works the same while being nested (last in, first out).\n\n\nThis is the way it'll work:\nphp\n/*\n * These will all be executed prior to routing being done\n * Unless you set `determineRouteBeforeAppMiddleware`  to `true` in your App settings\n * Then these would execute after routing in the same LIFO order (3, 2, 1) which means\n * Middleware 5, 4, 7 and 6 would execute first and then Middleware 3, 2 and 1\n */\n$app->add(new Middleware_Test(\"Middleware1\"));\n$app->add(new Middleware_Test(\"Middleware2\"));\n$app->add(new Middleware_Test(\"Middleware3\"));\nphp\n/*\n * As for the middleware added here, as mentioned above the $app->group path will match first\n * which will cause Middleware 5 and 4 to be executed\n * Then the $this->get(\"/{testing}\") path will be executed after which will cause\n * Middleware 7 and 6 to be executed.\n */\n$app->group(\"/some/path\", function ()  {\n    $this->get(\"/{testing}\", function ($request, $response, $args) {\n        return $response->write(\"Middleware Test Response\");\n    })->add(new Middleware_Test(\"Middleware6\"))->add(new Middleware_Test(\"Middleware7\"));\n})->add(new Middleware_Test(\"Middleware4\"))->add(new Middleware_Test(\"Middleware5\"));\nHope this answers your questions.. @conrad10781 you are correct actually. That setting does not affect how the middleware stack is being run.\nI just wrote two test cases. My assumption was in fact correct though in the way the middleware is being executed, however I was wrong about the setting. All the setting does is provide the $request object with the attribute routeInfo and doesn't change the way the middleware stack is being run.\nHere are the test cases I wrote and for the record the second test fails:\n```php\nclass Middleware\n{\n    /*\n     * @var string\n     /\n    protected $name;\n/**\n * Middleware constructor.\n * @param $name\n */\npublic function __construct($name)\n{\n    $this->name = $name;\n}\n\npublic function __invoke(Request $request, Response $response, callable $next)\n{\n    $text = $request->getAttribute('text', '');\n    $text .= \"MW {$this->name}, \";\n    $request = $request->withAttribute('text', $text);\n    return $next($request, $response);\n}\n\n}\nphp\nclass MiddlewareOrderTest extends TestCase\n{\n    public function testMiddlewareOrderWithDetermineRouteBeforeAppMiddlewareOn()\n    {\n        $app = new App([\n            'settings' => [\n                'determineRouteBeforeAppMiddleware' => true,\n            ],\n        ]);\n    $mw1 = new Middleware('1');\n    $mw2 = new Middleware('2');\n    $mw3 = new Middleware('3');\n    $app->add($mw1);\n    $app->add($mw2);\n    $app->add($mw3);\n\n\n    $mw4 = new Middleware('4');\n    $mw5 = new Middleware('5');\n    $mw6 = new Middleware('6');\n    $mw7 = new Middleware('7');\n    $app->group(\"/foo\", function () use ($mw6, $mw7)  {\n        $this->get(\"/bar\", function (Request $request, Response $response, $args) {\n            $text = $request->getAttribute('text');\n            return $response->write($text);\n        })\n            ->add($mw6)\n            ->add($mw7);\n    })\n    ->add($mw4)\n    ->add($mw5);\n\n    $request = $this->requestFactory('/foo/bar');\n    $response = new Response();\n    $response = $app->process($request, $response);\n    $app->respond($response);\n\n    $this->expectOutputString(\"MW 3, MW 2, MW 1, MW 5, MW 4, MW 7, MW 6, \");\n}\n\npublic function testMiddlewareOrderWithDetermineRouteBeforeAppMiddlewareOff()\n{\n    $app = new App([\n        'settings' => [\n            'determineRouteBeforeAppMiddleware' => false,\n        ],\n    ]);\n\n    $mw1 = new Middleware('1');\n    $mw2 = new Middleware('2');\n    $mw3 = new Middleware('3');\n    $app->add($mw1);\n    $app->add($mw2);\n    $app->add($mw3);\n\n\n    $mw4 = new Middleware('4');\n    $mw5 = new Middleware('5');\n    $mw6 = new Middleware('6');\n    $mw7 = new Middleware('7');\n    $app->group(\"/foo\", function () use ($mw6, $mw7)  {\n        $this->get(\"/bar\", function (Request $request, Response $response, $args) {\n            $text = $request->getAttribute('text');\n            return $response->write($text);\n        })\n            ->add($mw6)\n            ->add($mw7);\n    })\n        ->add($mw4)\n        ->add($mw5);\n\n    $request = $this->requestFactory('/foo/bar');\n    $response = new Response();\n    $response = $app->process($request, $response);\n    $app->respond($response);\n\n    $this->expectOutputString(\"MW 5, MW 4, MW 7, MW 6, MW 3, MW 2, MW 1, \");\n}\n\n/**\n * @param $requestUri\n * @param string $method\n * @return Request\n */\npublic function requestFactory($requestUri, $method = 'GET')\n{\n    $env = Environment::mock([\n        'SCRIPT_NAME' => '/index.php',\n        'REQUEST_URI' => $requestUri,\n        'REQUEST_METHOD' => $method,\n    ]);\n    $uri = Uri::createFromEnvironment($env);\n    $headers = Headers::createFromEnvironment($env);\n    $cookies = [];\n    $serverParams = $env->all();\n    $body = new RequestBody();\n    $request = new Request($method, $uri, $headers, $cookies, $serverParams, $body);\n\n    return $request;\n}\n\n}\n```\nThe output from PHPUnit on the second test case:\n```\nThere was 1 failure:\n1) Tests\\MockRepo\\AppTest::testMiddlewareOrderWithDetermineRouteBeforeAppMiddlewareOff\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'MW 5, MW 4, MW 7, MW 6, MW 3, MW 2, MW 1, '\n+'MW 3, MW 2, MW 1, MW 5, MW 4, MW 7, MW 6, '\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1.\n```. I think that FIFO makes more sense, it's easier to comprehend for the end user. I also believe that Slim 4 is a new direction where we introduce new concepts and do things differently. There are already breaking changes, we should steer in the direction that makes the most sense. For the handful of users that will migrate entire projects from 3 to 4, we can provide support. . @damianopetrungaro I'm not the one merging, @akrabat will take care of that!. Order remains LIFO like it was in Slim 3.x. Closing as we just merged #2555. I'm not in favor of the proposed fix as I believe there would be a performance hit having to iterate over the route patterns and replace characters versus using a regex tree like Symfony 4 Router does. . @geggleto after looking a little deeper into Symfony's router, it would be a bit of an undertaking to write an adapter for it and as you mentioned a few more dependencies would be required and a base PHP version bump as well from what was currently agreed for Slim 4.\nI think the only thing we should do for Slim 4 is ensure we support routes with international characters in them and we're good to go. I did run some benchmarks locally and FastRoute is very fast with 5000+ routes and nested groups I was able to get a response sub 1000ms.\nI think we should aim to increase other routers to be dropped in when PSR agrees to a standard.\nClosing this. Thanks all for your input.. We should just refactor the entire Uri component based on Nyholm/psr7/Uri. Closing this issue as there has been no activity since October, 2018. The solution proposed by @Vaalyn works. Please join our Slack channel for further assistance if required.. @unguul we can't use the callable type hinting as we are still supporting Slim 2 style Class:method callables.. #2555 implements this and test coverage has been implemented there as well. Follow issue there.. SERVER_PORT will return the port that's being accessed when making requests to the PHP application.\nIn this case, it should return 8080 since your PHP server is listening on 8080. There's no way for the server to know that it's being tunneled to unfortunately. \nAnd https://github.com/slimphp/Slim/blame/3.x/Slim/Http/Uri.php#L184 is the correct behavior. Environment::get() get method takes two parameters get($key, $default) as shown here https://github.com/slimphp/Slim/blob/3.x/Slim/Collection.php#L63 \nIf the $key you are trying to get is nonexistent it will return the $default parameter. . Reading the docs will be required to migrate from Slim 3 to 4. I think we need to make the migration guide as clear and concise as possible. As mentioned in our Slack discussion, I dislike throwing exceptions or deprecation warnings as you have to carry that code through forever/until next major release.\nClear migration documentation is the solution here in my opinion.. I ran the Doctrine coding standards that @akrabat mentioned on the 4.x branch of my latest PR and these are the errors that were found\nA few things I dislike:\n- They want you to drop suffixes like Exception and Interface\n- Comments require full stops, question marks or exclamation\n- Strict type hinting is enforced on everything, which may interfere with some existing extension of classes such as GroupCountBased from the FastRoute package.\n- It puts comments on single lines for object properties which I think is less readable\n- It aligns all defining statements = operator. Somehow doesn't do it for constructors or doc blocks tho. Something to get used to.\nI do like:\n- Strict type hinting is enforced on everything. This is both a pro and a con, mostly a pro tho.\n- It removes author and copyright information from doc blocks, which I think we should do since they're just painful to maintain. We should simply have a copyright file with all that information, that's how Doctrine does it\nI could probably get over both of those after some time. Good news is, not that many things to fix.. Where are you at with this @1ma do you need more feedback?\nJust a couple things from my end:\n- Test coverage is incomplete for NonBufferedBody\n- I can do the docs PR if you you can summarize the functionality in detail\n- Class naming is adequate in my opinion\nThanks!. Closing due to no activity since end of September. Follow issue in #2577 or join our Slack Channel for further assistance.. Closing this issue due to no activity since end of September. Please join our Slack Channel for further assistance.. This should be moved to Slim-Psr7 repo along with #1964 . @tuupola wouldn't it be better to make it server environment independent somehow? We could maybe add a setting to App which appends a path prefix to all the routes when they're mapped maybe?. I don't believe nginx has this problem since when you setup fastcgi you have to set the base path like so:\nserver {\n    # FastCGI Parameters\n    location ~ \\.php$ {\n        fastcgi_pass    unix:/var/run/php-fpm.sock;\n        fastcgi_param   SCRIPT_FILENAME /var/www/html/foo$fastcgi_script_name;\n        include fastcgi_params;\n    }\n}\n@akrabat better documentation perhaps? This cannot be fixed at the Slim level from my understanding.. This will be fixed with #2529. Reviewed, looks good to me!. This PR needs to be directed to the Slim-Website repo. I opened an issue there. See #331. Closing this issue as there has not been activity since end of October. Please join our Slack Channel for further assistance.. @odan you have to make the decision yourself as to which PSR-7 implementation you choose. However Slim-Skeleton will ship with Nyholm/psr-7 and Slim-Http decorators.. > Can you also include an example using Guzzle/psr7?\n@theodorejb I added it as the last example and in the README. @akrabat would you like to include that into Slim 3/4? . @akrabat Slim-Http or Slim-PSR7 or both \ud83d\ude02 . I think this has to do with the .htaccess in your setup with Apache. This problem isn't encountered with Nginx.\nSee issue #2512 for further information about this.\n. This is 3 months old, closing due to no activity from @douglasnoronha. The code in the docs work, please join us via our Slack Channel if you need further assistance. . @akrabat I'm fine with this change. It's very minor, provides slightly more flexibility to end user for customization. Let me know if you're fine with merging this as well.. Yeah that can\u2019t be done in Slim 4 via the container. You can instantiate router with a different parser though no need to extend. . I agree @akrabat actually. You should simply replace the entire Router inside of the default service provider instead. I don't think you need to offer this kind of granularity via the default service provider. Replace the Router if you need to access those settings.. Closing as per @archi-tektur's request. @lordrhodos thank you for reviewing this PR. These methods were put in place as per the pre-PR discussion with @akrabat. I think they need to be left in for the end user to be able to migrate easier, while this is still a BC change, I believe they still need to be there and deprecated on the next major release.. > I think that add() needs to support DI lookup.\nOkay so you want the DI lookup to be done right then and there inside App::add()? Because we can't do a deferred callable for this since it isn't an invokable.\n. @akrabat I added support for deferred PSR-15 middleware instantiation as per your request.. @lordrhodos I ended up adding detection logic for PSR-7 middleware and removing the addLegacy() methods. You can now basically throw any type of middleware at the add() method and it will handle it.. > 1. pass a shared response object to all the PSR-7 middleware\nI think we're going to have to go with option #2. It is less user-friendly for migration but it increases the chances that they'll go read the docs and understand that PSR-7 is only partially supported.. @bnf ultimately I would like a cleaner codebase and I\u2019m personally fine with dropping Double Pass middleware as well if @akrabat sees this as an option \nI see Slim 4 as a clean slate, at some point we\u2019re going to drop Double Pass middleware support so why not now?\nThe migration process from 3 to 4 already has a few BC changes, let\u2019s break everything now instead of later and not have to carry the technical debt. \nWe\u2019re going to have unhappy users no matter what we do. There\u2019s nothing wrong with sticking with Slim 3.x if the advantages from Slim 4 don\u2019t seem to outweigh the cons of having to refactor your code. I don\u2019t think adoption will suffer all that much. \nAlso, in this PR I migrated all the core middleware from double pass to single pass and it wasn\u2019t hard at all, it only took about an hour. \n. @akrabat yes that is possible. That function will get wrapped with an adapter though. . @akrabat I don\u2019t think many people use anonymous functions as middleware a whole lot.\nI also think having a typed add() method is safer. It adds a roadblock when migrating. Otherwise as @bnf said it may introduce bugs in existing callable usage that expects the 3 parameters. . @bnf the main reason is cleaner call stack, the second reason was originally to enable the possibility of multi-mode queue (FIFO and LIFO). \nI also believe that the queue is much more explicit than the stack based, which makes it easier to read and understand as a developer not that this should be the reason to adopt queue over stack though. \nThat being said I do understand the drawbacks that you\u2019ve presented.. @bnf I agree on the return type. I also agree on the name ClosureMiddleware over the sugar function middleware(). . > This would become very ugly for a lot of lazy middlewares.\nThis is exactly what DeferredResolutionMiddleware in this PR does. However at the moment the App::add() method is in charge of instantiating it and passing the container to it.\nTo come back to the App::add() method I think it needs to be typed because people who migrate from Slim 3 could pass it a Closure which would then fail when they execute because the signature doesn't match. We need to BC the method to force the user to go look at the docs or pass it the correct interface.\nSlim 4 Middleware Closure:\nphp\nfunction (ServerRequestInterface $request, RequestHandlerInterface $handler) {...}\nSlim 3 Middleware Closure:\nphp\nfunction (ServerRequestInterface $request, ResponseInterface $response, callable $next) {...}. > Do we need to provide an adapter from doubleness middleware to PSR-15 or do we just document it?\nI'm not sure I understand, I thought we agreed to drop double pass middleware support. People are just going to have to migrate to single pass.\nI really strongly believe we need to type add(). In a normal code base, how many different middleware will you have to migrate? 10 maybe? That'll take you 30 minutes. It's really not the end of the world.\nAs for deferred resolution we should force the end user to wrap it in a PSR-15 compatible class like DeferredResolutionMiddleware from this PR. We can maybe provide automatic container setting when it gets added via add(). All I'll do is detect that it's an instance of DeferredResolutionMiddleware then check if the container has already been set on it, if it hasn't then we'll set it automagically so the synthax becomes a bit more sugary\n(We can change the name DeferredResolutionMiddleware to LazyMiddleware or something shorter if need be)\nphp\n$app->add(new DeferredResolutionMiddleware(MyClass::class));\nOr as @bnf suggested, we could add a helper method which does the wrapping of DeferredResolutionMiddleware for you\nphp\n$app->addLazy(MyClass::class);. Perhaps we should add a windows build @akrabat? You can do that as of October, 2018.\nI cannot replicate this issue in my dev environment and I'm running Windows 10 Pro x64. Closing due to PR #2560 fixing the issue. The Response object needs to be created in the handler, hence why it isn't being passed. Also with the migration to PSR-15 Middleware the Response object won't be available at all via ErrorMiddleware anymore after #2555 is merged.. See comments on #2564.. This can be closed, we're going to merge #2555 before end of week here hopefully. Thank you for contributing!. I just fixed this logic error on #2555 with this commit. I also added a setContainer() method on CallableResolverInterface so you can set the container on the fly which App::setContainer() is now using.\nGood catch! Let me know if you want to close this or if you want me to.. Here's a simple script to create a route cache file in Slim 3:\n```php\n!/usr/local/bin/php\n<?php\nrequire_once DIR . '/vendor/autoload.php';\n$app = new App();\n$container = $app->getContainer();\n$router = $container->get('router');\n$routeCollector = new \\FastRoute\\RouteCollector(\n    new \\FastRoute\\RouteParser\\Std(),\n    new \\FastRoute\\DataGenerator\\GroupCountBased()\n);\nforeach ($router->getRoutes() as $route) {\n    $method = $route->getMethod();\n    $pattern = $route->getPattern();\n    $handler = $route->getIdentifier();\n    $routeCollector->addRoute($method, $pattern, $handler);\n}\n$outputFile = DIR . '/route.cache';\nfile_put_contents($outputFile, '<?php return '  . var_export($rc->getData(), true) . ';');\n```\n@akrabat would you like to create some sort of helper method to dump out a compiled router cache file? I don't think this should go into core.. @akrabat the only thing I could find about routerCacheFile is here in the docs all the way at the bottom.\nIt describes the setting but it doesn't define on how to generate the cache file. Would you like me to migrate this issue to the Slim-Website repo?. > Why?\nIt is not the App's responsibility to generate the router's cache file. A utility package should be built for that.\n\nIn Slim/Router.php class, in setCacheFile method checked is_writable\n\nWe need write permissions on the directory because if the routerCacheFile is set but doesn't exist FastRoute detects if file exists and if it doesn't it will create it/keep it up to date when instantiating the cachedDispatcher.\n@akrabat we could change that logic up a bit actually. We need to check if the file exists, if it exists check if it's writable. If it doesn't exist, we need to check if the directory is writable. \nOn a side note, looking at the behavior from FastRoute, it will automatically generate the cache file if the file is set but does not exist. So the need for a method to generate the file is useless. We just need to document the behavior better.\n. Sounds good, I will PR that for 3.x and then 4.x a bit later. Will also update docs on my end. @garipovazamat the issue being fixed by my PR. If the file already exists, it performs an is_writable check on the file, if it doesn\u2019t exist it does a check on the directory instead because FastRoute will try and create the file if it doesn\u2019t exist so it needs write permissions. \nAs I pointed in the PR, in order for FastRoute to generate the cache file without having to write any code, you simply need to point it to a file that doesn\u2019t exist in a directory where you have write permissions.\nSo I suggest that you nest your cache file in a directory that you own/can write to if you don\u2019t have write permissions on your root directory for whatever reason. \n. > If I want to use Router only for reading cache file, without rewriting it, and I dont have permission to write it\nFastRoute always tries to overwrite the file when you instantiate FastRoute\\cachedDispatcher() this is why we need write permissions on the existing file or directory. \nhttps://github.com/nikic/FastRoute/blob/master/src/functions.php#L65-L70. > In FastRoute checked file_exists and if it exists will return new $options['dispatcher']($dispatchData);\nYou are correct. I missed that bit! I will change one of the two checks to is_readable instead of is_writable if the file exists! \nThank you for pointing that out\n. Merged. Thank you for your contribution @mathmarques . Fixed by #2571. Why are you calling the App::run() method twice?\nThere is no need to add this to the existing code base.. Okay, well it sounds like that's an issue on your end due to the logic that you're utilizing.\nYou can always extend the App class and overload the App::run() method to use your code or fork the repository and modify the code according to your use case.\nI'm closing this PR.. A couple of things:\n\nYou will need to clear out the existing Response body in App::finalize();\nAdd the test case from the 4.x branch as seen here\n\nThank you!. @akrabat I already did this for Slim 4 see #2547 . @RyanNerd it's on the list of todos once #2555 is merged before we release beta. We are going to type everything.. My bad @RyanNerd I thought this was a 4.x issue. I don\u2019t have the answers unfortunately. . I'm a bit perplexed by the existing RequestHandlerInterface logic that we have in CallableResolver. It's getting really messy in there, handle() shouldn't even be supported to be honest. The logic is so implicit, we need to stop including all this magic to make it easy and force the developers to make decisions and create adapters for existing mechanisms that don't necessarily fit their usage.\nThese are all gotchas that nobody actually knows about unless they read the code in CallableResolver or thoroughly scan our docs. \nIn any case, I think that @bnf's logic is the better behavior. However this should be removed altogether from CallableResolver.. > https://github.com/bnf/Slim/blob/834fd687938d84cea6f7a7f0c6858158f02c870b/Slim/CallableResolver.php\nThat looks much better, after #2555 is merged you can open a different PR and refactor the entire CallableResolver as in the link you provided or you can use this PR and refactor once the merge happens but you'll have to rebase.\n@akrabat we need to hold off on all merging before #2555 is in. I've rebased twice already.\n. @bnf we are aiming to merge #2555 before the end of the week as @akrabat told me via Slack earlier this week. I understand your frustrations with #2379 being open for so long then closed but if I recall you didn't reply until mid January when I asked you back in October if you were going to rebase your PR. \nI really appreciate all your contributions to the project in the recent weeks, I'm pushing hard so we can release Slim 4, please be understanding of my decisions of doing things in a certain order.\nThank you. @bnf actually in October your PR needed rebasing because some changes had been made to the 4.x branch since you had opened it back in August. That's what I meant by \"are you moving forward with this PR\".\nAs for my behavior, I've been almost solo dev'ing the 4.x branch and tackling all the major core functionality that needed to be reworked. While you may dislike my impatience you need to understand that it is frustrating to have roadblocks constantly holding up further development when the finish line is in sight.\nYou're more than welcome to be more involved, I need all the help I can get but please don't take offense on my decisions to direct the focus to an area that I believe needs to be prioritized. This isn't about feelings, it's about reaching a milestone in a timely manner.. We need to merge #2555 first before this is merged. You're most likely going to have to rebase. Thank you.. Closing as this is already fixed by #2555. Thank you for your contribution @skillaug . @akrabat we\u2019re not extending Router, that component stays the same. \nWhat I\u2019m proposing is creating a RouterProxy class that App and RouteGroup can extend. Perhaps we can just make RouterProxy a standalone object as well which App and RouteGroup can interact with instead of extending it. \nRealistically all RouteGroup does is provide App and the group\u2019s base of path to its callable when it is invoked. \nI can probably do a PR with my concept once we merge #2555 and you\u2019ll be able to see more clearly what I want to do. . How often do encrypt/decrypt get called? Isn\u2019t this just a utility file?\nThe performance hit is probably manageable. . Okay, so close #2363 as won't fix?. Okay and what about the code coverage bit @akrabat? This is more so just for developer user experience, it's annoying when I start a new branch I have to update .gitignore every time, I do generate coverage locally to make sure I've done all the required tests.\nAt the minimum we should at least add a predefined coverage-html output directory to .gitignore. I'm definitely in favor of using Prophecy instead of PHP Unit Mocks. Thanks to @bnf  for turning me onto it in #2591 \ud83d\ude04 \n@akrabat looks like you have some learning to do \ud83d\ude02 . Will refactor with Mocks instead and re-open. . > would be better to publish a summary and the result of the discussion. A link reference would also be sufficient.\nFair point, it's just that not all discussions happen via the GitHub repository. We have a private channel on Slack where we have some internal discussions.\nI do agree though that it should maybe be discussed in issues instead of on our private channel. I apologize for that.\n. @akrabat @froschdesign I just added the details in the description of this PR as well. . > @l0gicgate @akrabat\n\nPlease do not misunderstand me, this is only a hint that referring to a (private) discussion without details or link in a public issue tracker does not work.\n\nI completely agree, I will make sure going forward that everything is documented here as much as possible if we do have internal discussions. I normally open issues so we can track it, in this instance I did not and I should have. My apologies.. > Please update the CHANGELOG :)\nDone @akrabat . There\u2019s more changes coming to Route/RouteGroups/Routable that is upcoming as I discussed in #2583. It will deal with all of this. . Closing #2591 has been merged. Also please make sure that Travis CI build passes. Thank you.. Please add test coverage on:\nhttps://coveralls.io/builds/21930483/source?filename=Slim%2FApp.php#L112\nhttps://coveralls.io/builds/21930483/source?filename=Slim%2FRoute.php#L292\nhttps://coveralls.io/builds/21930483/source?filename=Slim%2FRouteGroup.php#L69. Closing as this thread has been re-opened on the discourse forum. @akrabat sounds good! I\u2019ll remove all the dated copyrights and link!. Do you mean after it's been added? If so, why? \nYou can define the invocation strategy when you instantiate Route. Right now there is no setter on Route for that property though, in order to do that you'd need to set the InvocationStrategy on Router, then add your route. \nI think it might be something that we need to add into the router proxy methods from App, when you add a route you could specify the invocation strategy like so:\nphp\n$app = new App(...);\n$app->get('/', function () {...}, <Your Optional Invocation Strategy>)\nI don't think we need to provide the option of changing the invocation strategy after the Route object has been instantiated though.. This change is addressed in #2604. finalize() is being folded into prepare(). Please follow discussion there.. > My suggestion is not to duplicate the type declaration of the parameters and omit everything if no additional description is added.\n\nCan be omitted if no descriptions are added and it often duplicates the type declaration of the parameters.\n\nThe biggest problem with that is that you end up with random doc blocks in the code base. What's the purpose to even have them. Let's just get rid of them altogether since everything is going to be typed anyway. \n\nvariable names aligned using tabs\nThis will not work with IDEs like PhpStorm. You can only align parameters and tag comments but you can not define the spaces between them.\n\nI'm not sure I understand what you're saying, my tab characters in PHPStorm is defined as 4 spaces for PHP. I guess I should have said spaces (1 tab = 4 spaces). It does require a bit of manual work to make it look pretty but that's fine it doesn't take that much effort to do it.\nI was browsing for posts on this subject and found the following:\nhttps://localheinz.com/blog/2018/05/06/cost-and-value-of-docblocks/\nY'all should give it a read.\n. @RyanNerd from my understanding, that is currently our goal. As little duck typing as possible, unfortunately some methods cannot be typed but we are trying to minimize those as much as possible. . @bnf please re-review. Just fixed all the requested changes!. @bnf I would like your input on this when you get a minute. Thank you!. This is an implementation issue. Please direct those type of questions to our forum https://discourse.slimframework.com.. I think that retrieving the keys from a Collection is functionality that is relevant/usable even though it is unused in the project. It\u2019s a no from me, what are your thoughts @akrabat?. What are the other cases? Or what should the default be, throw an exception?. Originally, when an exception was thrown you couldn't access a reference of the request at the stage where the exception was thrown. It would pass you a reference of the request that hadn't been passed through the middleware cycle so if any data or properties were bootstrapped to the request during the middleware cycle, you wouldn't be able to access them. \nI believe that's a problem for developers as it doesn't reflect the state of the request at the time the exception was thrown. \nHope that makes sense. \n. My memory is a bit foggy about that but I remember reading through the code comments and there was something about a \"recoverable\" flag. For example a 500 is most likely not recoverable while another type of exception may be. \nAt this moment I don't believe it is being used and could be taken out. . From what I recall there is no difference between the output of displayErrorDetails true/false for the plain text renderer. \nIf there is a difference in format please enlighten me. . What do you want the exception message to say? I'm clueless.\nI was thinking something like: 'Unknown routing error occurred.'. Actually, all that logic has been changed and can be found in AbstractErrorHandler.php\nAn OPTIONS request may demand a different content-type than text/plain which wasn't honored before and I fixed that. You can now request JSON output from an OPTIONS request and it will honor the content type.\nSee https://github.com/l0gicgate/Slim/blob/4.x/Slim/Handlers/AbstractErrorHandler.php#L118-L146\nThis change is not required.. Thank you for pointing that out, I will refactor the interface accordingly!. I don't understand your question. Can you clarify?. You do have a point. I can modify this so it\u2019s always displaying the error details when writing to log if everyone is in favor of this option!\n@odan @designermonkey @akrabat @asheliahut @geggleto. So how about I decouple $displayErrorDetails from the logging and add another parameter $logErrorDetails which can be enabled or disabled. So for instance you may not want to display the error details to the end user but you may want to have them displayed in your log. . @odan I've implemented $logErrorDetails in this commit. Removed and added tests for those methods.. Removed and modified run() signature to take in an optional $request parameter for test purposes.. Done.. Done.. Done.. Done.. Done.. I don't think that's a good idea. Users might be using these exceptions within their applications and having to keep request in scope all the time when throwing one of these named exceptions is annoying. I use these exceptions a lot in the API that I am building at the moment and I would be hindered by having to pass $request every time.. Done.. Refactored.. Absolutely right. Refactored.. Done.. Removed.. Refactored as discussed.. Done.. Done.. Done.. This may be a bit too fancy. I could concatenate $title and $description and concatenate it into $message. I really outdid myself here \ud83d\ude02 \nAs for $details, I thought it would give a user the chance to add onto the exception. Right now it also stores allowed methods when HttpMethodNotAllowed is being thrown. But it can be used to store any data the end user wants.\nphp\nclass HttpForbiddenException extends HttpSpecializedException\n{\n    protected $code = 403;\n    protected $message = 'Forbidden.';\n    protected $title = '403 Forbidden';\n    protected $description = 'You are not permitted to perform the requested operation.';\n}\nCan we settle on:\nphp\nclass HttpForbiddenException extends HttpSpecializedException\n{\n    protected $code = 403;\n    protected $message = 'Forbidden. You are not permitted to perform the requested operation.';\n}\nThoughts?. Actually, what if during the middleware progression a user did attach headers to the response, example if a CORS middleware appended headers, wouldn't we want to have the response object that reflects the correct state at the time the time the exception was thrown?. Actually the Router can be extended and this method overridden. When instantiating the RoutingMiddleware you can pass a router to it which could be the router of your choice. An alternative would be to pass settings to the Router constructor. . The routeStatus is what comes from Fastroute. We can convert those to constants. Should the constants be on the Dispatcher or Dispatcher results and what should they be named? FOUND, NOT_FOUND, NOT_ALLOWED?. Actually, no need to make changes. This PR extends FastRoute\\Dispatcher\\GroupCountBased class which implements  FastRoute\\Dispatcher interface which has those constants. They can be used as Slim\\Dispatcher::FOUND, Slim\\Dispatcher::NOT_FOUND, Slim\\Dispatcher::NOT_ALLOWED\nI will amend the comment in DispatcherResults to reference where those integers come from.. If anywhere, this should be on the Slim\\Http package.. This is what is currently being done https://github.com/slimphp/Slim/blob/4.x/Slim/Middleware/RoutingMiddleware.php#L66. As per one of our previous discussions, this avoids the initial performance hit of looping through every single route. It is being returned on demand instead of initially doing it every time we dispatch. This is also the way Fastroute does it.. What kind of exception would you like to be thrown here? Just a regular exception or RuntimeException. As per our discussion on slack, we're leaving this as is.. This commit cc0c0b3 applies the requested change.. You are correct, I made a mistake. I fixed this logic in latest commit. Good find!. This is an abstract class, other exceptions such as HttpMethodNotAllowedException extend this class and have preset $message properties. Without that if statement in the constructor that message gets nulled and rendered useless. . $routeHandler refers to the route's identifier that's correct. The variable is in fact a string.. $routeIdentifier sounds pretty descriptive, what do you think?. It was, I usually will do 3rd party dependencies ordered alphabetically followed native by dependencies ordered alphabetically.. It\u2019s a fact, so yes I feel it\u2019s important. That\u2019s as per the benchmarks reported on Nyholm/psr7 it\u2019s public knowledge. . Because PHPStan complains.. Good catch!. Well the Psr7MiddlewareWrapper effectively wraps around a callable and mimics a PSR-15 MiddlewareInterface.\nI\u2019m definitely open to suggestion on wording, I couldn\u2019t think of another word to describe what was happening. . Drop the word \"Wrapper\" from DeferredResolutionMiddlewareWrapper and use \"Adapter\" instead of \"Wrapper\" for Psr7MiddlewareWrapper maybe?. This discussion happened on Slack between @akrabat and I. We are doing partial PSR-7 middleware support for this release, meaning that the Response object will not be passed in the middleware pipeline but simply provided to make it easier for people to return a Response from their existing PSR-7 middleware implementations. ServerRequest should be used to passed data in the middleware pipeline instead anyway. That being said, support for PSR-7 will most likely entirely be dropped in Slim 5.. I've looked at #2379 and like I said, @akrabat and I have had this discussion on Slack already and that's the way he wanted things to be done for Slim 4. \nAnd yes, that's what I meant. Double-pass style middleware support will be dropped entirely in Slim 5.. You will need to make this if case insensitive. This will fail with lower case method 'head'.. this also needs to be a case insensitive if case.. It\u2019s always the first middleware in the middleware runner queue as it is added in the constructor where you commented saying it feels like an anti-pattern. \nThe app adds itself to the middleware queue as the first middleware (which gets called last because LIFO). \nIt\u2019s the exact same thing as what was happening in MiddlewareAwareTrait. I understand your concerns though, but this is a reflection of App::__invoke() which also didn't run the middleware stack, it's just part of it. \nI do dislike that we have to expose this as a public method though.. I can split it sure. \nAs for bugs, there\u2019s additional tests written for this to cover all the cases shown below. \nIf you can think of additional cases, let me know and I\u2019ll write tests for those as well. . As per Slack comments, I ended up separating App::process() into its own middleware and removing the interface implementation. It makes much more sense, now App does not expose methods to the end user that are solely for internal purposes. Great catch @geggleto.. Fixed with  dc52640. Can you give me a concrete example as to why one would run the middleware queue twice?\nI don\u2019t even know how that would be possible. I could explicitly lock the run method while queue is in progress and automatically rewind at the end if necessary. \nIn any case there was no explanation on #2044 as to why subRequest functionality was dropped and I\u2019m not sure if subRequest support still exists or not. . Very good point. I will implement that without using clone. I will also merge the tests from #2581 first and rebase this PR on that to make sure that it passes that test.. > I would like add() to accept a closure too and wrap it in ClosureMiddleware.\nDone. This would be a bit cleaner imo\nphp\n$expires = $properties['expires'];\n$timestamp = is_string($expires) ? strtotime($expires) : (int) $expires;. @akrabat as you can see I had to add these methods Router::isCacheFileReadable() and Router::isCacheDirWritable() because I cannot redefine the global functions is_writable() or is_readable(). Which made unit testing almost impossible.\nOriginally, I tried creating the directory/files required and setting the permissions correctly to hit those test cases but it was not working on the CI or my local windows build, only on local unix builds.\nThis way at least I can stub this method and make it return what I need to hit those test cases. Let me know if you have a better solution.. why? if it's invalid, an exception is thrown anyway so it doesn't matter that it is set.. removed that just now. That was in place because of the setMiddleware() method. Can be removed if we throw from there. This is also why we need generics. . Couldn\u2019t we use spread operator here? ...$methods? We should definitely type that property. Though i\u2019m in favor of that. Nobody instantiates routes manually anyway it\u2019s all internal work done by the router so. . This should be a separate setter. No logic should be in constructor.. This method should throw, not return a boolean.. No class declaration inside functions like this, separate it, helps with testability as well.. Same comment as before, no class declaration inside functions like this.. Same comment as before, no class declaration inside functions like this.. This method name should be something else, lazy isn't a good word. Use deferred as we already agreed upon that and the terminology is used elsewhere in the repo.. All the logic contained in this method should be in a resolve method instead. Also, use the logic from DeferredResolutionMiddleware as @akrabat and I already agreed upon it.. No null parameters before a required one, put $invocationStrategy first.. The plural of middleware is still middleware and not middlewares. Please refactor that.. This should be ContainerInterface|null as well. This should be ContainerInterface|null. I'm not a huge fan of this, the Router's responsibility to handle requests. If @akrabat agrees then sure. I just don't think it belongs here.. I don't see the need to add an entire mocking framework for these tests.. Just as an FYI, we are getting rid of Pimple entirely as a dev dependency. See PR #2587. You will need to refactor those tests.. This should be ContainerInterface|null also. This should be ContainerInterface|null. Okay, well I'm requesting that you change it. Thank you.. I'm requesting that you separate those classes. Thank you.. If PHPUnit drops the dependency unexpectedly, then our build fails. So you have to include it in our composer.json if you're using it. It's a no from me, but @akrabat can make the final decision.. Cool, @akrabat can make the call on this one.. > A condition is already a logic and is used in many constructors. \ud83d\ude09\nThere's 2 constructors in this entire repository with an if condition. I would like to keep the constructors free of logic as much as possible.. We have a discussion in #2502 about coding standards we\u2019d like to implement. It\u2019s in the works! You\u2019re more than welcome to join the discussion!. That was mainly my point, you\u2019re explicitly using that namespace which means we should add it to our composer.json file regardless if PHPUnit uses/provides it or not.\nOn another note, if we\u2019re going to use that style of testing (Prophesizing interfaces) then we should slowly migrate the entire test suite to do this so we maintain cohesiveness. \nPlease add input on #2585 @bnf. That's correct @akrabat. If the container resolves to a class name and not an instantiated object then this will not instantiate the object as was being done in DeferredResolutionMiddleware\nphp\n$container = new Container();\n$container['myClass'] = MyMiddleware::class; // Not instantiated\nAs I said, the logic from DeferredResolutionMiddleware should be implemented.. It's the same behavior as CallableResolverInterface as seen here https://github.com/slimphp/Slim/blob/4.x/Slim/CallableResolver.php#L73. \nThis case only usually happens in the event that no container is present. So the instantiation of the object is deferred to when it gets resolved. It could happen with a container as well but very rarely would a user intentionally do this however some do.\nAlso see issue #2592 we need to pass container in there to duplicate the callable resolver behavior. I created that issue because someone who's doing testing on 4.x said that they didn't understand why the same behavior from CallableResolver wasn't being replicated in DeferredResolutionMiddleware (passing the container to the instantiated object's constructor). See original message from Slack Discussion. That makes me thing this feature is being used.. I think that we should separate the current Router into 2 interfaces. RouteCollectorInterface and RouteDispatcher interface.\nThe first interface will be RouteCollectorInterface:\n```php\ninterface RouteCollectorInterface {\n    public function map(array $methods, string $pattern, $handler): RouteInterface;\npublic function pushGroup(string $pattern, $callable): RouteGroupInterface;\n\npublic function popGroup();\n\npublic function getNamedRoute(string $name): RouteInterface;\n\npublic function lookupRoute(string $identifier): RouteInterface;\n\npublic function relativePathFor(string $name, array $data = [], array $queryParams = []): string;\n\npublic function pathFor(string $name, array $data = [], array $queryParams = []): string;\n\npublic function setCacheFile(?string $cacheFile): RouterInterface;\n\npublic function setDefaultInvocationStrategy(InvocationStrategyInterface $strategy);\n\n}\n```\nAnd a RouteDispatcherInterface:\n```php\nuse Psr\\Http\\Server\\RequestHandlerInterface;\nuse Slim\\RoutingResults;\nclass RouteDispatcherInterface extends RequestHandlerInterface {\n    public function dispatch(ServerRequestInterface $request): RoutingResults;\npublic function setDispatcher(Dispatcher $dispatcher): RouteDispatcherInterface;\n\n}\n```. @akrabat I agree.\nApp should be in charge of these concerns:\n- Collecting routes using RouteCollector\n- Then we should have App create a RouteResolver which takes in the RouteCollector, creates the FastRoute\\Dispatcher.\n- Then we need to remove DispatchMiddleware (Router::handle() in this PR) and simply run middleware signature detection in App. We can simply have the App::addMiddleware() method look to see if RoutingMiddleware has been added to the queue or not, if it hasn't been then we add it to MiddlewareRunner right before we call $this->middlewareRunner->handle($request) in App\n- After the MiddlewareRunner finished its job App can run the appropriate route and return the response.\nAnd voila. You now have gotten rid of all the problems and separated concerns properly, Let me fork this PR and show the changes I would apply.. @akrabat see PR on @bnf's forked repository https://github.com/bnf/Slim/pull/1\nI separated Router into the appropriate components. Now you have the following components:\n\nRouteCollector which collects the routes\nRouteResolver which creates the dispatcher, computes the RoutingResults and resolves the appropriate Route when queried\nRouteRunner which is added as the kernel of MiddlewareDispatcher to see if Routing has been done\n\nRefactored all tests accordingly.\nIt's much cleaner now. \n. Those are good points @akrabat & @bnf. I can live with the internal class declaration, I'll just close my eyes xD. @bnf we\u2019re going to go with \u201cmiddleware\u201d. I don\u2019t care about what wikipedia says. Just like we don\u2019t say \u201csoftwares\u201d or \u201chardwares\u201d, the word \u201cmiddleware\u201d is uncountable as stated in the wiki you linked. You can leave it, I\u2019ll just change it myself later. . Ok, I\u2019ll PR it myself later. Don\u2019t worry about it. . Should use the keyword \"Deferred\" instead of \"Lazy\":\ntestDoesNotInstantiateDeferredMiddlewareInCaseOfAnEarlyReturningOuterMiddleware(). Should use the keyword \"Deferred\" instead of \"Lazy\":\ntestThrowsExceptionForDeferredNonMiddlewareInterfaceClasses(). We need to have ArrayAccess implemented on the class unless you want to force usage of the ContainerInterface::set() method . I misread your question. We can mock a container for that specific test sure. We have a MockContainer though so why not use it. Yes @akrabat \n```php\n    public function testGetRouter()\n    {\n        $responseFactory = $this->getResponseFactory();\n        $routerProphecy = $this->prophesize(RouterInterface::class);\n        $app = new App($responseFactory, null, null, $routerProphecy->reveal());\n    $this->assertEquals($routerProphecy->reveal(), $app->getRouter());\n}\n\n. No need to mock the router in this instance since we're just mocking the getter on `App`.. The `CallableResolver` isn't being passed into `App`. This test should be:php\n    public function testGetCallableResolver()\n    {\n        $responseFactory = $this->getResponseFactory();\n        $callableResolverProphecy = $this->prophesize(CallableResolverInterface::class);\n        $app = new App($responseFactory, null, $callableResolverProphecy->reveal());\n    $this->assertEquals($callableResolverProphecy->reveal(), $app->getCallableResolver());\n}\n\n``. @bnf what is the purpose of doing that I'm curious? Since all those parameters are typed, why wouldAppattempt to retrieveRouterfromContainerInterface?. Fantastic! Thank you. I have no problems doing that. I've actually come around on the anonymous class issue, it just really triggers my OCD but that's my own problem. I will refactor to use an anonymous class! Thanks. Oh okay, gotcha. I'm new to using Prophecy, I will change the usage ofArgument::exact()to just the string. Let's go with the easier to type version!. Haha I didn't think of that! I will change it. That's great!. Yeah for sure, that would be much cleaner. I will refactor to do that instead.. fixed. done. refactored to useshouldHaveBeenCalled()`. fixed. Fixed. ",
    "dareenzo": "Going again through the docs, I found out this was already documented on the Router page, under the Container Resolution section.\n. Slim supports it as an external pluggable dependency (which is easy to add)in the same way it supports any other database, not as something that is built-in.\nOn the First Application Walkthrough page, in the documentation, it is explained how you can add the dependencies required by your app.  You can use the examples shown there and easily adapt them to mongodb.\nHope it helps\n. ",
    "lwiwala": "I use it. I see this error when route not exist for request url.\n. http://lwiwala.ct8.pl/asdf I would like to show 404 page\n. Use this\n```php\n$app->any('[/{params:.*}]', function ($request, $response, $args) use ($container){\n    $params = explode('/', $request->getAttribute('params'));\nreturn $response->write(var_export($params, true));\n\n});\n```. ",
    "edhaase": "It certainly could. Plus if we went that route, we could probably replace my really simplified reflection with a more powerful  solution like PHP-DI/Invoker, a container agnostic library which provides almost all the functionality, just short of the callable resolver and invoker strategy.\n. Very much, except Slim Bridge is tightly coupled to the PHP-DI container, and what I'm proposing is much of the same functionality, but in a library that doesn't care which container you choose to use. So a bit like a stripped down Slim Bridge, sure.\n. ",
    "konskript": "@dopesong  the latest version. slim v3.0 \nI follow the tutorial of codecourse authentication slim 3. \nhere is some reference for the videos. https://www.youtube.com/watch?v=RhcQXFeor9g\n. Well, I can give you the code. but where do I start? from routing or the index? .htaccess? \n. no. there`s is no errors nor in server errors. the path_for() is good. \n\n. It works perfectly fine. After I submit the button. It created another data in my database. But it still redirect me to the same pages with blank content..\n. @akrabat  yes~! I set it into true.. .. It was perfectly fine in my local before I make it live website.\n\n. @rocketpastsix yes, I was following the tutorial of codecourse: Authentication Slim 3\nhere is some reference videos. https://www.youtube.com/watch?v=RhcQXFeor9g\nIt was perfectly fine in my local before I make it live website.\n. @akrabat here is my live website. \nhttp://web-pos.kolwebs.com/login \nusername: 123123\npassword: 123123\ncode for my LoginController.\n\n\n. @Tpojka Its still not working. \n. @froschdesign  do you want me to record things? or to see if my login page is working? if its 404 responds?\nHere is the image of my screenshot about dev. tools\n\n. @froschdesign yes! Login page is working. Its just that it returns me blank page. And the Url was still in the /login.. This is just my theory, myy problem was redirecting to another page after submitting a form.. \n. @froschdesign  Well, sad to say. Im still not familiar using dev. tools.\n. @akrabat Ok, Im going to try it..\n. @akrabat I dont know if this is the correct way..\nSee if it does.\n\nThe result.\n\n. Anyone? I need some help!\n. @geggleto How to verify it? Should I click the submission form first or after the load of the php?\n. @geggleto I don`t know what kind of problem it is. Because there is no page display. And in Dev. Tools. It display status 200.. \nIf you dont mind. Can you try it?\nHere is my site.\nhttp://web-pos.kolwebs.com/login\nusername: 123123\npassword: 123123\n. @akrabat yeah I know. I inspect element it. And it returns that. I dont know where is the error. But my theory is that, it has a problem with redirect..\n. @geggleto \nHere is some of my codes of LoginController.php \n\n\nHere is some routes.\n\nHere is my Home page\n\nHere is some of my forms..\n\n. @geggleto  what do you mean all routes? \nDo you mean by this.. \n\n. @geggleto Well, this is a project of Authenticate Slim 3 from codecourse. I was trying to use his code to build an app for myself as a start to this micro framework..\n. What do you mean? Can you elaborate it that even newbie can understand..\n. Well, Im new to this framework. And this is my first time framework.. So I hope if you dont mind, can you tell me more about it? I still have a difficulties on understanding this..\n. I`m not coding in local right.. I was changing every code in the production stage.\n. 1.) All my application routes was in my routes.php\n2.) I was coding in production now.\n. @geggleto how to send the gist to you?\n. @geggleto https://gist.github.com/konskript/b190e88a1b57aff7346f5e8e4a42ece9\n. It works. ! Thanks. WOW! It was a stupid of mine.\n. Thanks! but there is still a problem. :(\n. @geggleto yeah. Its good now like in my local.Big help!\n. @geggleto When I submitted my form.. There is this default_timezone_get() and when I change it to set.. and set it to default_timezone_set('Manila/Asia')\nit appears me this.. \n\n. wait. I will printscreen the first error it made.. It happen everytime I create a new user or a submission form has been trigger..\n. Okay. Sorry.. My bad. But before my routes.php fix.. It happened that the carbon.php line 172 must set a default timezone.. Well nevermind. As long as it was perfectly fine.. Thank you!\nAnyway. Why is that a problem in my routes.php that I commented at the last part?\n. Ohhh..I see, thanks for the info.\nSir, @geggleto Do you have any idea about file upload with the use of slim framework, and as well an Ajax with use of bootstrap modal.. I hope you can suggest me some of tutorials related with it..\n. @geggleto  thanks for the referral..\n. @tuupola thanks for referring.\n. @dopesong thanks for referrering.\n. @dopesong but still, I dont quietly understand this things..\n. Why it has been closed? @akrabat\n. @dopesong well, its in slim vendor right?\n. @akrabat well, I see, I thought, I should not revise anything in the vendor.. Because If I change anything from vendor.. It would destroy under those code that I changed.. Well anyway. Sorry, my bad for asking not related to slim. But thanks anyway, I learned a lot.. :+1:  I`m still learning this slim. :D\n. Ok, I see.. Thanks @akrabat, @dopesong and @tuupola ! You guys are a big help to the community. :+1: \n. ",
    "Tpojka": "Try to follow method naming convention. It is pathFor().\n. ",
    "froschdesign": "@konskript \nYou can check the redirects with the Developer tools of your browser. For example with Chrome or Opera.\n. @konskript \n\nor to see if my login page is working? \n\nIs working after you submitted the button.\n. @konskript \n\nmy problem was redirecting to another page after submitting a form\n\nYou should check this with the browser developer tools. There you can see, if a redirect is performed.\n. In a future version I would add links to the documentation for each step.\nApart from that: LGTM and it works! \ud83d\udc4d . @archi-tektur \n\n\u2026why don't you create SlimResponseInterface that will extends PSR7 implementation?\n\nThis would be against the idea of PSR and interoperability.\nSuggestion: create a separate JsonResponse class which implements the PSR-7 interface for response.\n(Compare with zend-diactoros and the custom responses: https://docs.zendframework.com/zend-diactoros/v2/custom-responses/). @bnf \nhttps://github.com/zendframework/zend-stratigility/tree/master/src/functions. @l0gicgate \n\n\u2026as per discussion @akrabat\n\nUnfortunately, this information is useless because nobody knows where to find this discussion. It would be better to publish a summary and the result of the discussion. A link reference would also be sufficient.. @l0gicgate @akrabat \nPlease do not misunderstand me, this is only a hint that referring to a (private) discussion without details or link in a public issue tracker does not work.. @l0gicgate \n\nThey provide absolutely no information or serve no purpose\u2026\n\nI'm sorry, but this wrong. The header contains important informations:\n\nthe name of the licence\nthe link / reference to this licence\nthe copyright\n\nThe problem is another: if the copyright and / or licence information is missing, your software can not be used by default because nobody knows if it's allowed.\nBut I'm not a lawyer or jurist and without someone with this expertise, the discussion is a waste of time \u2013\u00a0in my opinion!\nHere my suggestion for this problem: https://github.com/malukenho/docheader. @l0gicgate \nMy suggestion is not to duplicate the type declaration of the parameters and omit everything if no additional description is added. \n\nFor class, interface and trait declaration...\n\nCan be omitted if no description is added and do you really need @package?\n\nFor class constructor declaration...\nFor function declaration...\n\nCan be omitted if no descriptions are added and it often duplicates the type declaration of the parameters.\n\nvariable names aligned using tabs\n\nThis will not work with IDEs like PhpStorm. You can only align parameters and tag comments but you can not define the spaces between them.. @akrabat \n\nOne thing I would like is an explanation of why this class exists. i.e. what's the point of it?\n\nThat would be great and should be a must.. @l0gicgate \n\nI'm not sure I understand what you're saying, my tab characters in PHPStorm is defined as 4 spaces for PHP.\n\nYou misunderstood me. Not the tab-size is a problem, but the automatic formatting with tools like PhpStorm. In PhpStorm you can not set the a tab to align the variable names. Please look at the help of PhpStorm (direct link to Code Style for PHPDoc) or at the screenshot:\n\nBtw. an IDE is only one (easy) option for contributors. Any other coding standard fixer should also support the preferred format.\n\nIt does require a bit of manual\u2026\n\nThe goal should be no manual work! \ud83d\ude09 \n\nY'all should give it a read.\n\nAlready read last year and therefore my suggestions to avoid duplicates.\n. @akrabat \nI do not think so! \ud83d\ude09 . I see the word \"wrapper\" in (class-)names as problematic, because \"wrapper\" is nameless and without any technical meaning.\nCall a spade a spade: If it is a decorator, call it a decorator.. @lordrhodos \n\n\u2026think this is not a decorator more an adapter\u2026\n\nSorry, I haven't read the entire code in this pull request, but you are right if the DeferredResolutionMiddlewareWrapper and Psr7MiddlewareWrapper adds no additional functionality to the wrapped classes.. > No logic should be in constructor.\nA condition is already a logic and is used in many constructors. \ud83d\ude09 . @l0gicgate \n\nIf PHPUnit drops the dependency unexpectedly\u2026\n\nIt's never unexpectedly. Everything else means you used the \"death star version constraint\" on PHPUnit in your composer.json. \ud83d\ude09 . I found 4 constructors in the 4.x branch here on Github! :stuck_out_tongue_closed_eyes:. Regardless, it would be better to document these requirements in a coding standards. Otherwise, such things will appear again and again \u2013\u00a0in pull requests and reviews.. ",
    "oliverut": "this definately appears to be a revert issue. This change allows the standard slim problem handler to work:\nprotected function renderHtmlException($exception)\n    {\n        $title = 'Slim Application Error';\n//more exciting code\n. I have that class, but it does not appear to be getting involved at any point. This is a pretty fresh install (only a month old) with no previous alterations to error handling so it should be using the defaults, so I am confused if anything else is occurring.\n. My version of that method looks correct. I tested the catches and found this error is being caught by the Exception handler. The $e object type dumps as PDOException with the message \n\nGeneral error: could not call class constructor\n\nWhich has allowed me to determine that the problem is being inherited from a base class a few layers away at least. (We're migrating our model layer from another framework and it isn't entirely bug free yet).\nThis doesn't explain why Slim is triggering a fatal error though. From what I can see, the problem is pretty likely in the Error class.\n. OK, this is a relatively minimal example:\nIn routes:\n```\n//for orders and related systems\n$app->group('/order', function() {\n    $this->get('/errorHandleTest', function($request, $response, $args) {\n        $pdo = $this->ro_db;\n        $orderId = 'UT025SON60.66';\n    $baseDataQuery = $pdo->prepare('\n        SELECT o.*\n        FROM orders AS o\n        WHERE o.orders_id = :orderId\n    ');\n    $baseDataQuery->execute([':orderId' => $orderId]);\n    $baseData = $baseDataQuery->fetch(); //using Assoc fetch mode - this makes sense in the full version\n\n    $order = \\Models\\Slim\\OrderTest::loadFromRow($baseData, $pdo);\n    $response->write('page');\n    return $response;\n\n});\n\n});\n```\nIn the fetched Model:\n```\nphp\nnamespace Models\\Slim;\n\n<pclass OrderTest\n{\n    private $id;\npublic function getId() {\n    return $this->id;\n}\n\npublic function setId($id) {\n    $this->id = $id;\n    return $this;\n}\n\npublic function addItem($item) {\n    return true;\n}\n\npublic function initialise($pdo) {\n\n    $orderItemsQuery = $pdo->prepare('\n        SELECT * FROM orders_items\n        WHERE orders_id = :orderId\n    ');\n    $orderItemsQuery->setFetchMode(\\PDO::FETCH_CLASS, '\\Models\\Slim\\OrderItemTest');\n    $orderItemsQuery->execute([':orderId' => $this->getId()]);\n    $this->addItem($orderItemsQuery->fetchAll());\n\n    return $this;\n}\n\n\npublic static function loadFromRow($row, $pdo)\n{\n    $order = new OrderTest();\n    $order->setId($row['orders_id']);\n\n    $order->initialise($pdo);\n    return $order;\n}\n\n}\nclass OrderItemTest {\npublic function __construct()\n{\n    parent::__construct(); //deliberate error\n}\n\n}\n```\nThis all basically fetches a row and drops it into a class and then runs an additional query to populate some objects our old model (which is being extended in the real version), which it requires to function. For some reason I couldn't replicate the effect by causing the error in the OrderTest constructor.\nI've run out of time to remove the PDO, I'll strip it out if you need me to (although I suspect the PDO is fundamentally the cause).\n. ",
    "thiagodp": "@oliverut I think the problem is in your OrderItemTest. You should't call parent::__construct() when you don't extend any class.\nSince this problem has no relation with Slim, I would suggest you to close this issue.\n. @mathmarques  Please try to comment the line always_populate_raw_post_data in your php.ini to see what happens.\nThe warnings are not the problem. This line is (Slim\\App.php, line 552):\n<b>Fatal error</b>:  Uncaught exception 'RuntimeException' with message 'Unexpected data in output buffer. Maybe you have characters before an opening &lt;?php tag?' in C:\\...\\vendor\\slim\\slim\\Slim\\App.php:552\n. @mathmarques Adjusting the error reporting the way you informed also does the trick. However, when this report option is not set, the problem occurs. So, I think Slim could check for both, in order to inform better about problems like these.\n. Of course not, and I didn't ask for this. But Slim could include some common problems in their checkings or, at least, in the documentation (Getting Started, FAQ, or whatever). This can save developers' time and avoid unnecessary Issues.\n. ",
    "chrisemerson": "I'm having this issue now.\nIt appears to be a problem when you have an Exception that was triggered by a PHP Error. The renderHtmlErrorMessage() method in Slim\\Handlers\\Error loops around rendering previous exceptions (lines 82 - 85), only it is coming across a PHP 7 Error object instead and then attempting to call renderHtmlException() with it, causing this error.\nChanging the typehint on line 110 (for the renderHtmlException method) from 'Exception' to 'Throwable' fixes this. Alternatively some code could determine the type of Throwable that is set as 'previous' on the current Exception, and call the right handler..     $app->get('/test', function ($request, $response, $args) {\n        try {\n            //Trigger a PHP error - Exceptions since PHP 7, but not a subclass of \\Exception, which is the issue\n            $myClass = new NonExistantClass();\n        } catch (Throwable $ex) {\n            throw new Exception(\"Some new exception wrapping this one\", 0, $ex);\n        }\n    });. The issue is that Errors are now exceptions in PHP 7, but while they implement Throwable, they don't extend Exception. A third party library I was using caught an error (which was in fact trying to use a class that wasn't loaded I think) and wrapped it in an Exception. The Slim exception handler in Slim\\Handlers\\Error loops around previous exceptions and tries to render them, but the method that does this type hints for Exception rather than Throwable, so when it gets to the PHP Error at the bottom of the stack it fails the type hint. Changing the type hint to Throwable works, because this covers Error and Exception.. The other option is to delegate the rendering back to whatever code picks which of the handlers to use for each error type with a flag to indicate that it's not the first in the stack so it can render 'Previous Exception' correctly, but removing the type hint might be easier!. You could simplify this by hinting for Throwable instead - both Error and Exception implement this interface. Ah of course, I had forgotten about the support requirements!. ",
    "skyzyx": "Let me try to share in pieces. I'm building a JSON-only API, so I've overridden the handlers that default to sending HTML back.\nbootstrap.php:\nphp\n...\n$config['errorHandler'] = new Application\\EventHandler\\Error\\ErrorHandler($config);\n...\nApplication/EventHandler/Error/ErrorHandler.php:\n``` php\nnamespace Application\\EventHandler\\Error;\nuse Application\\Dictionary\\Http as HttpDict;\nuse Application\\Util\\Url;\nuse Throwable;\nuse GuzzleHttp\\Psr7;\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Slim\\Container;\nclass ErrorHandler extends AbstractHandler\n{\n    public function __invoke(Container $c)\n    {\n        /\n         * @param \\Psr\\Http\\Message\\ServerRequestInterface $request   PSR7 request\n         * @param \\Psr\\Http\\Message\\ResponseInterface      $response  PSR7 response\n         * @param \\Throwable                               $exception The exception thrown.\n         \n         * @return \\Psr\\Http\\Message\\ResponseInterface\n         /\n        return function (Request $request, Response $response, Throwable $exception) use ($c)\n        {\n            $error_code = $exception->getCode() ?: 500;\n            $error = HttpDict::getStatus($error_code);\n            $error['message'] = $exception->getMessage();\n            unset($error['standard_message']);\n        $request_id = $request->getHeaderLine('X-Request-Id');\n\n        // Clear the body.\n        $response = $response->withBody(Psr7\\stream_for(''));\n\n        $response = $response->withJson([\n            'error' => [\n                'errors' => array_merge($error, [\n                    'resource' => Url::getCompleteUrl($request),\n                ]),\n                'code'   => $error_code,\n            ]\n        ], $error_code, $this->config['json_options'])\n            ->withAddedHeader('X-Request-Id', $request_id);\n\n        $this->logRequest($request);\n        $this->logResponse($response);\n\n        return $response;\n    };\n}\n\n}\n```\nIn short, it happens when $exception->getCode() (error code 111) is passed as the second parameter to $response->withJson(). Slim goes to look it up, but it can't.\n\nApplication\\Dictionary\\Http is my own HTTP dictionary which includes pre-written messaging for various types of HTTP statuses, and isn't particularly relevant here.\nApplication\\Util\\Url is a set of utilities for messing with URLs, and is also not relevant here.\n. Nginx, Memcache, MySQL, cURL, and lots of other software return this code when a connection has been refused. But I cannot find a canonical source of information which suggests that this is an HTTP code, so I'll let this go. Perhaps it's simply an error code that all major web software implements.\nsigh\nThanks for taking a look at this.\n. ",
    "SusanthCom": "@akrabat  Thank you Very much. Now working.\nWill do more research before posting here. \nSorry \ud83d\ude22\n. @silentworks  Done \ud83d\udc4d https://github.com/slimphp/Slim-Website/pull/169\n. @silentworks  Minor Fix Done. https://github.com/slimphp/Slim-Website/pull/170\nPlease Approve.\n. @geggleto \nAm trying to provide custom Error message under all circumstance, so that no default message appear under any circumstance.\nphp\n $app->get('/', function ($request, $response, $args) {\n        $this->callNonExistingMethod(); // Intentionally Creating an error\n        return $response->getBody()->write(\"Hello to Slim ... \");\n    });\nSorry, am new to Slim. Please guide, if am doing the wrong way.\nThanks in advance.\n. Thank you @akrabat \ud83d\udc4d  and @geggleto \ud83d\udc4d \nphpErrorHandler was the key \ud83d\ude04  . Now Works perfectly.\nphp\n    $container['phpErrorHandler'] = function ($c) {\n        return $c['errorHandler'];\n    };\nphpErrorHandler  was not found in Slim Doc http://www.slimframework.com/docs/handlers/error.html\nWill dig more at https://akrabat.com/overriding-slim-3s-error-handling/\nThank you all \ud83d\udc4d \n. Yes. @JoeBengalen,\nAt the minimum, documenting it there, will bring better visibility to this feature; especially to beginners.\nThank you\nSusanth K\n. ",
    "dmelo": "It worked. Thank you very much\n. This issue seems related with the PR #2333 .. Thank you for clarifying.. ",
    "oscarr-reyes": "My bad, it was my fault for not doing enough research.. it worked and thanks alot for your reply\n. all routes are defined, and /login has only one POST route defined\n. the routes are defined like this:\nPHP\n$app->get(\"/accounts\", function($request, $response)\n{\n    $query = $_GET;\n    $filter = [\n        \"LIMIT\" => isset($query[\"limit\"]) ? $query[\"limit\"] : 10\n    ];\n    $model = Account::model()->findAll($filter, \"batch\");\n    $response = $response->withJson($model);\n    return $response;\n});\nas long as the middleware process passes the validation\nthis is the route i am having problems with:\nPHP\n$app->post(\"/login\", function($request, $response)\n{\n    $data = $request->getParsedBody();\n    $model = Account::model()->findByAttributes([\n        \"username\" => $data[\"username\"],\n        \"password\" => $data[\"password\"]\n    ]);\n    $result = [];\n    if($model)\n    {\n        $result = (Object) [\n            \"username\" => $model[0][\"username\"],\n            \"user_id\" => $model[0][\"user_id\"],\n            \"access_token\" => $model[0][\"access_token\"]\n        ];\n    }\n    $response = $response->withJson($result);\n    return $response;\n});\nthe middleware code is actually defined just before all routes are defined.. i tried on defining this after the routes.. but as expected the result doesn't change because routes are returning the responses directly rather than returning the callable middleware, this issue was not happening before. this code was being worked on another system and literally both systems have the same settings, i would like to check if the other system would have this issue as well but currently is unavailable to use, but all the code seems fine atleast for me, the application works without the middleware so the problem comes from there\n. that code looks fine and i tried it, but now for some reason the code gives other errors now\nPHP\nif(count($route->getArguments()) > 0)\n{\n    $methods = [\"GET\", \"PUT\", \"DELETE\", \"OPTIONS\"];\n}\nthis error is only thrown for the route /login, the error thrown is Call to a member function getArguments() on null.. at this point i have to set the allowed methods on the route depending if the request has URI parameters like account/:id\n. i just found the solution.. i had to define a OPTIONS method for route /login, that made everything else work\n. ",
    "rodekker": "You have my vote. Yep. Thx.\nOn Sun, 16 Sep 2018, 14:21 Rob Allen, notifications@github.com wrote:\n\nI suspect that this would be solved id #2481\nhttps://github.com/slimphp/Slim/issues/2481 is implemented?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/slimphp/Slim/issues/1959#issuecomment-421756316, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AKyv8-Rg4PNlSH3bYjyp1FaRq4pDs-Usks5ubkJlgaJpZM4Jj5Tn\n.\n. \n",
    "elvispdosreis": "Yes the parse_str function converts the data $ _GET\n. the var_dump has the same output of slim however in debug appears as sent.\ncheck the picture\nvar_dump\narray (size=2)\n  'user_name' => string 'Elvis' (length=5)\n  'user_city' => string 'Rio Preto' (length=9)\n\n. thanks\n2016-08-15 13:53 GMT-03:00 Rob Allen notifications@github.com:\n\nAh yeah. Here we go: http://www.php.net/manual/en/\nlanguage.variables.external.php#language.variables.external.dot-in-names\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/slimphp/Slim/issues/1961#issuecomment-239858284, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AOj3JzbSTQUwmhMNuUIKqXhHnXhUX5ckks5qgJmBgaJpZM4Jkaiz\n.\n. \n",
    "Vesuvium": "Sorry about that, accidentally pressed enter :S \n. ",
    "adriano-ghezzi": "imho there should be a better error message.\nI lost a lot of time to check files for \"unexpected\" characters.\nby the way I tried all the workarounds\ncommented out or set to on|off|-1 ;always_populate_raw_post_data\nand set error_reporting(E_ALL ^ E_DEPRECATED);\nNothing to do error still remains\nI was an happy user of Slim 2.0 never had any problem.\n. ",
    "mrdarrengriffin": "Update:  Here is the code I had when it wasn't working\n```\n    use MrDarrenGriffin\\Article\\Article;\n$app->get('/article/:seoName',function($seoName = \"contents\") use ($app){\n\n   $article = Article::where('url',$seoName)->first();\n    if(1 == 1){\n    $app->flash('error','That article was not found');\n        $app->response->redirect($app->urlFor('home'));\n        }\n   print_r($articles);\n\n    })->name('article');\n\n```\nIt seems that if there is an error present after the flash and redirect, the flash will not show (I don't know why).\nSee that when I print $articles, I should be printing $article.\nTypo, yes. Expected behaviour of Slim, unsure...\nThought this update may help others who face the same issue\n. ",
    "vasilevich": "Ok , I was wrong up there, this doesn't work for the situation I mentioned too\n(when you don't want slim to be at the root of the domain)\nHowever here is a fully tested solution example:\n```\nserver {\nserver_name example.com;\nindex index.php index.html home.html;\nroot /www/examplecom/;\n\nlocation /api {\n            #Important part for this to work\n    root /www/examplecom/api/;\n    try_files $uri $uri/ /index.php?$query_string;\n}\nlocation ~ \\.php {\n           #Important part for this to work\n    root /www/examplecom/api/;\n    try_files $uri =404;\n    fastcgi_split_path_info ~(.+\\.php)(/.+)$;\n    fastcgi_read_timeout 9999m;\n    fastcgi_param QUERY_STRING $query_string;\n    fastcgi_param REQUEST_METHOD $request_method;\n    fastcgi_param CONTENT_TYPE $content_type;\n    fastcgi_param CONTENT_LENGTH $content_length;\n    fastcgi_param SCRIPT_NAME $fastcgi_script_name;\n    fastcgi_param SCRIPT_FILENAME $request_filename;\n    fastcgi_param REQUEST_URI $request_uri;\n    fastcgi_param DOCUMENT_URI $document_uri;\n    fastcgi_param DOCUMENT_ROOT $document_root;\n    fastcgi_param SERVER_PROTOCOL $server_protocol;\n    fastcgi_param GATEWAY_INTERFACE CGI/1.1;\n    fastcgi_param SERVER_SOFTWARE nginx;\n    fastcgi_param REMOTE_ADDR $remote_addr;\n    fastcgi_param REMOTE_PORT $remote_port;\n    fastcgi_param SERVER_ADDR $server_addr;\n    fastcgi_param SERVER_PORT $server_port;\n    fastcgi_param SERVER_NAME $server_name;\n\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    fastcgi_param SCRIPT_NAME $fastcgi_script_name;\n    fastcgi_index index.php;\n    #Some way to connect to your php, it can be the TCP way, doesn't matter.\n    fastcgi_pass unix:/run/php-fpm/php-fpm.sock;\n}\n\n}\n```\nI really hope you address this somewhere in your guides, I scratched my head for hours trying to get this to work, thanks for checking it out and please let me know your opinion.\n. alright, just tried to leave an advice, I think it is important to know how to use slim in a more versatile way, rather than attaching it to the root of the site, which is not always wanted, its not specific to my setup, it should be as generic as your example, but allow not beeing attached to the root folder, either way I'll leave my two cents here maybe it'll help someone good luck.\n. hi @czmarcos please make sure that at the path : \n/var/www/html/api/v1/\nthe file \"index.php\" of your API exists.\nif it does let me know,\nalso check NGINX access logs rather than error logs aswell perhaps you will get a clue.\nGood luck!\n. hey there @czmarcos friend\nlets build a working example together, so you have a starting point as an example, and you can try to build from there into your own app:\nperform the following steps:\nlets say your domain name is\nwww.example.com\n   1.lets make directories with the following path:\n          api/v1\naka:  www.example.com/api/v1\n   2. make sure the directory works ok put index.html with text in it and with the following nginx config:\nserver {\n        server_name www.example.com;\n        root path/to/www.example.com/;\n}\nand make sure it works.\n3. now lets put our index.php in it, here is my example, my composer is in the root directory\naka: path/to/www.example.com/vendor\nthe slim php sample that i will put in path/to/www.example.com/api/v1\nlooks like this:\n```\n<?php\nrequire_once DIR . \"/../../vendor/autoload.php\";\n$app = new Slim\\App();\n$app->get('/hello/{name}', function ($request, $response, $args) {\n    return $response->write(\"Hello, \" . $args['name']);\n});\n$app->run();\n?>\n```\nand if you use ordinary nginx config, with normal php support without rewriting,\naka: this is my default php config that doesnt support slim rewrities:\n```\nserver {\nserver_name www.example.com;\nroot path/to/www.example.com/;\nlocation ~ \\.php {\n\n    try_files $uri =404;\n    fastcgi_read_timeout 9999m;\n    fastcgi_param QUERY_STRING $query_string;\n    fastcgi_param REQUEST_METHOD $request_method;\n    fastcgi_param CONTENT_TYPE $content_type;\n    fastcgi_param CONTENT_LENGTH $content_length;\n    fastcgi_param SCRIPT_NAME $fastcgi_script_name;\n    fastcgi_param SCRIPT_FILENAME $request_filename;\n    fastcgi_param REQUEST_URI $request_uri;\n    fastcgi_param DOCUMENT_URI $document_uri;\n    fastcgi_param DOCUMENT_ROOT $document_root;\n    fastcgi_param SERVER_PROTOCOL $server_protocol;\n    fastcgi_param GATEWAY_INTERFACE CGI/1.1;\n    fastcgi_param SERVER_SOFTWARE nginx;\n    fastcgi_param REMOTE_ADDR $remote_addr;\n    fastcgi_param REMOTE_PORT $remote_port;\n    fastcgi_param SERVER_ADDR $server_addr;\n    fastcgi_param SERVER_PORT $server_port;\n    fastcgi_param SERVER_NAME $server_name;\n    fastcgi_pass unix:/run/php-fpm/php-fpm.sock;\n    #fastcgi_pass 127.0.0.1:9000;\n}\n\n}\n```\nthis should already show you the default slim \"page not found\" at www.example.com/api/v1/, but rewrites should not yet work.\n\nnow lets replace the php with slim support so instead of the nginx config in step 3,\nlets try this config instead:\n\n```\nserver {\nserver_name www.example.com;\nroot path/to/www.example.com/;\n\nlocation /api/v1 {\n\n    index index.php;\n    try_files $uri $uri/ /api/v1/index.php?$query_string;\n}\nlocation ~ \\.php {\n\n    try_files $uri =404;\n    fastcgi_read_timeout 9999m;\n    fastcgi_param QUERY_STRING $query_string;\n    fastcgi_param REQUEST_METHOD $request_method;\n    fastcgi_param CONTENT_TYPE $content_type;\n    fastcgi_param CONTENT_LENGTH $content_length;\n    fastcgi_param SCRIPT_NAME $fastcgi_script_name;\n    fastcgi_param SCRIPT_FILENAME $request_filename;\n    fastcgi_param REQUEST_URI $request_uri;\n    fastcgi_param DOCUMENT_URI $document_uri;\n    fastcgi_param DOCUMENT_ROOT $document_root;\n    fastcgi_param SERVER_PROTOCOL $server_protocol;\n    fastcgi_param GATEWAY_INTERFACE CGI/1.1;\n    fastcgi_param SERVER_SOFTWARE nginx;\n    fastcgi_param REMOTE_ADDR $remote_addr;\n    fastcgi_param REMOTE_PORT $remote_port;\n    fastcgi_param SERVER_ADDR $server_addr;\n    fastcgi_param SERVER_PORT $server_port;\n    fastcgi_param SERVER_NAME $server_name;\n    fastcgi_pass unix:/run/php-fpm/php-fpm.sock;\n    #fastcgi_pass 127.0.0.1:9000;\n}\n\n}\n```\nthis seems to work for me,\nplease let me know if this micro tutorial works for you\ngood luck!\n. ",
    "czmarcos": "hi @vasilevich, thanks a lot for your effort!\nI have a situation similar that you proposed. \nMy website files are located at /var/www/html and I'm creating an api that is located at /var/www/html/api/v1 and I tried to adapt your config but it doesn't work, all api/v1/{...} pages are returning 404. \nI checked my nginx error logs and it doesn't return anything related as well..\n```\nserver {\nserver_name XXX.XXX.X.XX;    \nindex index.php index.html home.html;\nroot /var/www/html;\n\nlocation /api {\n    root /var/www/html/api/v1/;\n    try_files $uri $uri/ /index.php?$query_string;\n}\nlocation ~ \\.php {\n    root /var/www/html/api/v1/;\n    try_files $uri =404;\n    fastcgi_split_path_info ~(.+\\.php)(/.+)$;\n    fastcgi_read_timeout 9999m;\n    fastcgi_param QUERY_STRING $query_string;\n    fastcgi_param REQUEST_METHOD $request_method;\n    fastcgi_param CONTENT_TYPE $content_type;\n    fastcgi_param CONTENT_LENGTH $content_length;\n    fastcgi_param SCRIPT_NAME $fastcgi_script_name;\n    fastcgi_param SCRIPT_FILENAME $request_filename;\n    fastcgi_param REQUEST_URI $request_uri;\n    fastcgi_param DOCUMENT_URI $document_uri;\n    fastcgi_param DOCUMENT_ROOT $document_root;\n    fastcgi_param SERVER_PROTOCOL $server_protocol;\n    fastcgi_param GATEWAY_INTERFACE CGI/1.1;\n    fastcgi_param SERVER_SOFTWARE nginx;\n    fastcgi_param REMOTE_ADDR $remote_addr;\n    fastcgi_param REMOTE_PORT $remote_port;\n    fastcgi_param SERVER_ADDR $server_addr;\n    fastcgi_param SERVER_PORT $server_port;\n    fastcgi_param SERVER_NAME $server_name;\n\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    fastcgi_param SCRIPT_NAME $fastcgi_script_name;\n    fastcgi_index index.php;\n    #Some way to connect to your php, it can be the TCP way, doesn't matter.\n    #fastcgi_pass unix:/run/php-fpm/php-fpm.sock;\n    fastcgi_pass unix:/run/php/php7.0-fpm.sock;\n}\n\n    location ~ /\\.ht {\n        deny all;\n    }\n\n    location ~ /.well-known {\n        allow all;\n    }\n\n}\n```\nI am currently working with php 7, nginx/1.10.3 (Ubuntu) and Slim 3.6.\nDo you have any possible ideia of the issue or how can I discover it?\nThanks in advance!. Hi @vasilevich, yes my app index.php is located at /var/www/html/api/v1\nI tried to check the access logs, but it doesn't show anything useful as well. \nI tried with this config below, which separates the static pages of my website (location / with the router.php) from the api (location /api/v1).\nWith this config if I hit X.XXX.X.XXX/api/v1 , then the api is returning the correct result, however if I hit any other endpoint (eg /api/v1/users), it is returning 404.\n```\nserver {\n    listen 80;\n    server_name X.XXX.X.XXX;\n    root /var/www/html;\nindex index.php index.html;\n\nlocation /api/v1/ {\n    #alias /var/www/html/api/v1/;\n    try_files $uri $uri/ /api/v1/index.php?$query_string =404;\n\n    location ~ \\.php$ {\n       try_files $uri /index.php =404;\n       fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n       fastcgi_index   index.php;\n       fastcgi_pass    unix:/run/php/php7.0-fpm.sock;\n       include         fastcgi_params;\n       fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;\n     }\n}\n\nlocation / {\n    #try_files $uri $uri/ /router.php?$query_string;\n    rewrite ^/([a-zA-Z0-9_-]+)$ /router.php?pid=$1;\n    rewrite ^/([a-zA-Z0-9_-]+)/$ /router.php?pid=$1;\n    rewrite ^/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)$ /router.php?pid=$1&pid2=$2;\n    rewrite ^/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/$ /router.php?pid=$1&pid2=$2;\n    rewrite ^/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)$ /router.php?pid=$1&pid2=$2&pid3=$3;\n    rewrite ^/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/$ /router.php?pid=$1&pid2=$2&pid3=$3;\n    rewrite ^/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)$ /router.php?pid=$1&pid2=$2&pid3=$3&pid4=$4;\n    rewrite ^/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/$ /router.php?pid=$1&pid2=$2&pid3=$3&pid4=$4;\n    rewrite ^/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)$ /router.php?pid=$1&pid2=$2&pid3=$3&pid4=$4&pid5=$5;\n    rewrite ^/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)/$ /router.php?pid=$1&pid2=$2&pid3=$3&pid4=$4&pid5=$5;\n}\n\nlocation ~ \\.php$ {\n        try_files $uri /index.php =404;\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        fastcgi_index   index.php;\n        fastcgi_pass    unix:/run/php/php7.0-fpm.sock;\n        include         fastcgi_params;\n        fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;\n}\n\n}\n```. Awesome @vasilevich, the simplified example worked! I'm going to work on it and add what I already have! thanks! . ",
    "nicolas-wallerand": "Thank you :-)\n. ",
    "AydinHassan": "Only if it is a closure: https://github.com/slimphp/Slim/blob/3.x/Slim/RouteGroup.php#L41-L43. I was trying to use an invokable class. \n. ",
    "Disane87": "Even with expected params?\nMit freundlichen Gr\u00fcssen / Kind regards\nMarco Franke\n** Von meinem iPhone gesendet\n\nAm 03.09.2016 um 20:01 schrieb Martijn Wennink notifications@github.com:\nYou van het All registered routes from the router\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. oh sorry, didnt noticed you had some links. Sorry for my first respond. Will check you link soon :)\n. \n",
    "cpats007": "I don't think there's a way of doing it automagically - but if this is something you're going to do regularly, you could use a config array to register your routes and then parse this array in a function to write your docs? Admittedly a lot longer than a quick fix you may have been hoping for but once done once, should be reusable in other projects?\n. ",
    "ahmedkaballo": "i'm using version 2.3.5 , the main thing that causes the problem is redirecting (i.e it doesn't redirect me to the index.php) though it works well in local host . i'm using the following .htaccess file\n\ni'm hosting the web app at infinityfree.com\nthey use php version 5.6.23 .\n. ok thanks alot\nsorry but can i show you my code ? maybe the problem from slim not from redirection .mainly i have a chat app and when i open the main page it loads the chat rooms but it says \"unable to fetch topic messages\"\nhere is my index.php\n\nand this is the function \"getChatroomMessages\"\n\nand this is the DB_handler that selects the messages from database\n\n.  @tflight thanks for claryifing\n. ",
    "rrpadilla": "Following the documentation http://php.net/manual/en/language.errors.php7.php#119652, we should \"add a catch block for Exception AFTER catching Throwable first\".\nJust switch catch blocks:\ntry {\n        ob_start();\n        $newResponse = $handler($this->callable, $request, $response, $this->arguments);\n        $output = ob_get_clean();\n    } catch (Throwable $e) {\n        ob_end_clean();\n        throw $e;\n    } catch (Exception $e) {\n        ob_end_clean();\n        throw $e;\n    }\n. ",
    "Starli0n": "I put Throwable first.\nThanks\n. @dopesong \nI added a test coverage for PHP7 only.\nI do not know how to do better as far as Throwable appeared in PHP7.\n. As far as the coverage is performed in PHP5 and following the documentation http://php.net/manual/en/language.errors.php7.php#119652, the catch (Throwable $t) code is never reached in PHP5\nphp\ntry\n{\n   // Code that may throw an Exception or Error.\n}\ncatch (Throwable $t)\n{\n   // Executed only in PHP 7, will not match in PHP 5\n}\ncatch (Exception $e)\n{\n   // Executed only in PHP 5, will not be reached in PHP 7\n}\nTherefore I added @codeCoverageIgnore statement\n. ",
    "safaa-alnabulsi": "yes, thank you. sorry\n. ",
    "bigHosting": "Issue found in the geoIP code. Sorry.\n. ",
    "moritz-h": "so that middleware has the option of changing the $request if the route attribute is null so that it can then be dispatched\nThis makes sense.\nBut then the documentation is wrong: The route is always available in route middleware.\nhttps://www.slimframework.com/docs/cookbook/retrieving-current-route.html\nPR for documentation fix: https://github.com/slimphp/Slim-Website/pull/209. @dmelo \n2333 does only address the implementation within the Error handler, I think it is generally a bad idea to handle Output buffering in an Error handler, because when you use your own Handlers you must know about output buffering, which I think is a framework internal thing.\nI think #2337 looks like a good solution. This makes the buffer interaction optional within the Error handler. The frameworks cleans the buffer by itself, you don't need to do this in a (custom) Error Handler by default. But optionally if you want access to the buffer you can just use ob_get_contents(). @akrabat I think this more a design bug what I reported. It is clear where the problem comes from. With 3.9 Slim closes the output buffering in the Error handlers. When I now replace the Error handlers with custom ones, I need to know that I also have to handle the closing of output buffering.\nThe above mentioned problem is gone when I copy the outbuffer handling from Slim Error handlers to my custom ones. But I think this is bad design as I think you see the Error handlers as replacable modules.(At least the documentation makes me think this)\nI like the discussion in #2337 This should fix what I reported here.. @Rezouce Would it make sense to also use ob_get_contents() instead of ob_get_clean() here: https://github.com/slimphp/Slim/blob/3.9.0/Slim/Handlers/Error.php#L61-L64\nand remove it here: https://github.com/slimphp/Slim/blob/3.9.0/Slim/Handlers/Error.php#L68\nOtherwise I think in the finally block the buffer would be destroyed a second time in exception case.. The $outputBuffering constructor parameter was just recently added with Slim 3.9.0. All usages within the handler are also removed with this PR.\nBut on calling the constructor the parameter should then also be removed:\nhttps://github.com/slimphp/Slim/blob/3.9.0/Slim/DefaultServicesProvider.php#L157. ",
    "RTCeables": "Sure\n. ",
    "DracotMolver": "I'm running v5.5.38\n. I fixed the issue. It was a misunderstood using regex expression in routes.\nI have several routes and some of them with some regex like {patente:[A-Z0-9]+}, {anio:[0-9]+} and so on. The thing was the + which of course is gonna look for any matching from here to the \"infinite\" lol. So I don't know if you could add this thing as a warning or something in the doc, so people can be aware of it. \"Don't abuse of regex, it is a dangerous power.\" :)\n. duh!, I can't use true or false xdxd. My mistake, sorry  :)\n. ",
    "musaev-haybulla": "There I already asked. And just in case asked here too, maybe someone have encountered.\n. ",
    "luzluna": "if route defined like this\n$app->get('/hello/{name}', function (Request $request, Response $response) {\n    $name = $request->getAttribute('name');\nand request is '/hello/+apple'\nnow\n$name is ' apple'\nif apply this patch\n$name is '+apple'\n. ",
    "johnhunt": "I'd definitely say this is a BC break. It might be a better idea to add a second argument to getAttribute() to return the value using rawurldecode():\n$app->get('/hello/{name}', function (Request $request, Response $response) { $name = $request->getAttribute('name', true);\nHowever, this might be a bit too uglifying..\n. I feel as though this belongs in slim 4, the implications of putting it in the 3.x branch could be pretty severe. Does anyone else agree?\n. Rob suggested rewriting validateMethod() to use a regex along these lines: https://regex101.com/r/f80dzN/2. thanks for helping @tflight !! \ud83d\udc4d  \ud83d\udcaf  \ud83e\udd47 . ",
    "MayurRIIT": "@geggleto  Sorry but can you please tell me how you solve this issue or please tell me possibility of this issue.. @geggleto  I used this solution but getting same issue. Can you please tell me alternative solution or please tell me reason why this issue occurs. This issue occurs on dedicated server, so whether any other settings required on dedicated server to run slim project.. ",
    "Paratron": "Well, thats sad. I'll continue with Slim 2 then. Thanks for the heads up.\n. Agreed. Why don't you offer a download package where the 3rd party router is included?. I don't want any other possible libraries - I just want to run slimphp. But don't worry - v2 still works fine and I just used it in another project. I don't care about composer and really don't plan to use it anytime soon :). ",
    "phil123456": "yep, just becos of this, I'll skip that slim thing, it's php, why on earth would it need dependencies. well call me back when composer installs fine on windows 7 :-). ",
    "ja-weber": "On this site you can download all PHP Frameworks without composer. And of course Slim is also available: https://php-download.com/package/slim/slim-skeleton. ",
    "acgrid": "Yeah you reminded me, suggestion 2 may be awful with different constructor signature.\nThen it seems that the first option is most straightforward, so I also want to question \"Is there any reason this property is private?\" \n. Thanks for your reply. I've edited my code to avoid subRequest() and no impacts so far.\n. ",
    "QQizi": "@geggleto The app is running, when i'm using echo or whatever else it is working, my routes are available. The problem is just in getting the POST params, i get the args params in GET tho.\n. @tuupola here's the curl request : \ncurl -X POST -H \"Cache-Control: no-cache\" -H \"Postman-Token: 6affc27d-dd25-5967-d119-c756647abf43\" -H \"Content-Type: application/x-www-form-urlencoded\" -d 'paramkey=paramvalue' \"__url_api__/__method__\"\nHere's the response : \nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nEach array correspond to the var_dump that i display in my first message.\n. ",
    "robwittman": "http://www.slimframework.com/docs/objects/request.html#the-request-headers\nYou should be able to access it using $request->getHeader(\"X-Access-Token\")[0];\nNotice that getHeader($key) returns an array, as multiple values can be supplied for a given header. Here I'm presuming you need the first one \n. ",
    "cyrildewit": "Take a look at issue  #2023 :)\n. ",
    "danielbarenkamp": "Thanks for the suggestion, but isn't there an other way instead of writing the {locale} every time at the start of the route? Maybe by modifying the basePath or the routing functionality?\n. Thank you for the fast support - I really appreciate it.\nI tried creating a Middleware like you said, but I am not able to get it work ...\n```\n<?php\nnamespace lib;\nclass LocaleMiddleWare\n{\nprivate $container;\n\npublic function __construct($container) {\n    $this->container = $container;\n}\n/**\n * Middleware to set the right Locale\n *\n * @param  \\Psr\\Http\\Message\\ServerRequestInterface $request  PSR7 request\n * @param  \\Psr\\Http\\Message\\ResponseInterface      $response PSR7 response\n * @param  callable                                 $next     Next middleware\n *\n * @return \\Psr\\Http\\Message\\ResponseInterface\n */\npublic function __invoke($request, $response, $next)\n{\n\n    $this->container->router->setBasePath('de-de');\n\n    return $next($request, $response);\n}\n\n}\n```\nI have set the basePath, but how can I modify the request?\n. Why is this working for you but not for me .. this drives me nuts!\nThe Middleware is exactly the same as you have instead that I use namespace lib.\nHow I initialize the Middleware\n$app->add(new lib\\LocaleMiddleware($app->getContainer()->router));\nMy routes: \n```\n$app->get('/', 'MyController:method1');\n$app->get('/test', 'MyController:method2');\n```\nMy Controller\n```\n<?php\nnamespace controller;\nuse models;\nclass MyController extends \\controller\\Controller {\npublic function method1($request, $response, $args) {\n      // Sample log message\n      $this->c->logger->info(\"Slim-Skeleton '/' route\");\n  $teachers = new models\\Teachers();\n\n  // Render index view\n  // $this->c->view->setMasterView('adminMasterV2.php');\n  return $this->c->view->render($response, 'login.php', $args);\n\n}\npublic function method2($request, $response, $args) {\n        echo \"test\";\n   }\npublic function method3($request, $response, $args) {\n        //your code\n        //to access items in the container... $this->ci->get('');\n   }\n}\n```\nWhen I try to access www.domain.com/de-de/ I get a page not found. When I try www.domain.com/de-de/test/ I also get a page not found ... \n. Hmm, but my inital Question was if I could create routes without the {local} parameter ... is this not possible?\n. @JoeBengalen How can I modify the request when there are only private variables and no method to modify the URL value? Do you have an example for me?\n. ",
    "jdmcalee": "If you just want it to work either way:\n$app->get('/user/upload[/]', function ($request, $response, $args) {\n. ",
    "jricher-dev": "Hum ok in other server it work.\nis it possible that the problem is the .htaccess file?\n. this is index.php :\n```\n<?php\nrequire 'vendor/autoload.php'; \nuse \\Slim\\App;\n$app = new App();\n$app->get('/', function($request, $response, $args){\necho '<p>bienvenue</>';\n\n});\n$app->get(\"/i18n\", function($request, $response, $args){\n    echo \"i18n working\";\n});\n$app->get(\"/I18n\", function($request, $response, $args){\n    echo \"I18n working\";\n});\n$app->get('/i18n/{filename:[A-Z_]+}', function($request, $response, $args){\ninclude 'google_OAuth.php';\n$fichier = $args['filename'];\n\n$response = $service->files->listFiles(array(\n\n'q' => \"name contains '$fichier'\",\n'spaces' => 'drive'));\nforeach ($response->files as $file) {\n\n    if ($file->name == $fichier ) {\n\n    echo 'le fichier distant ' . $fichier . ' existe sur google Drive';\n    }\n    }\n\n});\n$app->get('/download/{filename:[A-Z_]+}', function($request, $response, $args){\n        include 'google_OAuth.php';\n    $fichier = $args['filename'];\n\n    $response = $service->files->listFiles(array(\n\n            'q' => \"name contains '$fichier'\",\n            'spaces' => 'drive'));\n    foreach ($response->files as $file) {\n\n    $content = $service->files->export($file->id, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', array(\n      'alt' => 'media' ));\n\n    file_put_contents('tmp/' . $fichier . '.xls', $content->getBody()->getContents());\n\n    header('Location: /');\n    exit();\n    }\n\n});\n$app->run();\n```\nthis is .htaccess : \n```\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(.*)$ index.php [QSA,L]\n```\n. i have test it with : \necho getenv('SCRIPT_NAME');\nvar_dump($_SERVER);\ndie('stop');\nin my index.php and for http://0.0.0.0:8080/I18n  i have : \n```\narray(22) {\n  [\"DOCUMENT_ROOT\"]=>\n  string(28) \"/home/xxx/nx-i18n-storage\"\n  [\"REMOTE_ADDR\"]=>\n  string(9) \"127.0.0.1\"\n  [\"REMOTE_PORT\"]=>\n  string(5) \"37180\"\n  [\"SERVER_SOFTWARE\"]=>\n  string(45) \"PHP 7.0.8-0ubuntu0.16.04.3 Development Server\"\n  [\"SERVER_PROTOCOL\"]=>\n  string(8) \"HTTP/1.1\"\n  [\"SERVER_NAME\"]=>\n  string(7) \"0.0.0.0\"\n  [\"SERVER_PORT\"]=>\n  string(4) \"8080\"\n  [\"REQUEST_URI\"]=>\n  string(5) \"/I18n\"\n  [\"REQUEST_METHOD\"]=>\n  string(3) \"GET\"\n  [\"SCRIPT_NAME\"]=>\n  string(10) \"/index.php\"\n  [\"SCRIPT_FILENAME\"]=>\n  string(38) \"/home/xxx/nx-i18n-storage/index.php\"\n  [\"PATH_INFO\"]=>\n  string(5) \"/I18n\"\n  [\"PHP_SELF\"]=>\n  string(15) \"/index.php/I18n\"\n  [\"HTTP_HOST\"]=>\n  string(12) \"0.0.0.0:8080\"\n  [\"HTTP_USER_AGENT\"]=>\n  string(76) \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:49.0) Gecko/20100101 Firefox/49.0\"\n  [\"HTTP_ACCEPT\"]=>\n  string(63) \"text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\"\n  [\"HTTP_ACCEPT_LANGUAGE\"]=>\n  string(14) \"en-US,en;q=0.5\"\n  [\"HTTP_ACCEPT_ENCODING\"]=>\n  string(13) \"gzip, deflate\"\n  [\"HTTP_CONNECTION\"]=>\n  string(10) \"keep-alive\"\n  [\"HTTP_UPGRADE_INSECURE_REQUESTS\"]=>\n  string(1) \"1\"\n  [\"REQUEST_TIME_FLOAT\"]=>\n  float(1476974903.1569)\n  [\"REQUEST_TIME\"]=>\n  int(1476974903)\n}\nstop\n```\nbut for http://0.0.0.0:8080/i18n i have : \narray(21) {\n  [\"DOCUMENT_ROOT\"]=>\n  string(28) \"/home/xxx/nx-i18n-storage\"\n  [\"REMOTE_ADDR\"]=>\n  string(9) \"127.0.0.1\"\n  [\"REMOTE_PORT\"]=>\n  string(5) \"37186\"\n  [\"SERVER_SOFTWARE\"]=>\n  string(45) \"PHP 7.0.8-0ubuntu0.16.04.3 Development Server\"\n  [\"SERVER_PROTOCOL\"]=>\n  string(8) \"HTTP/1.1\"\n  [\"SERVER_NAME\"]=>\n  string(7) \"0.0.0.0\"\n  [\"SERVER_PORT\"]=>\n  string(4) \"8080\"\n  [\"REQUEST_URI\"]=>\n  string(5) \"/i18n\"\n  [\"REQUEST_METHOD\"]=>\n  string(3) \"GET\"\n  [\"SCRIPT_NAME\"]=>\n  string(5) \"/i18n\"\n  [\"SCRIPT_FILENAME\"]=>\n  string(38) \"/home/xxx/nx-i18n-storage/index.php\"\n  [\"PHP_SELF\"]=>\n  string(5) \"/i18n\"\n  [\"HTTP_HOST\"]=>\n  string(12) \"0.0.0.0:8080\"\n  [\"HTTP_USER_AGENT\"]=>\n  string(76) \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:49.0) Gecko/20100101 Firefox/49.0\"\n  [\"HTTP_ACCEPT\"]=>\n  string(63) \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"\n  [\"HTTP_ACCEPT_LANGUAGE\"]=>\n  string(14) \"en-US,en;q=0.5\"\n  [\"HTTP_ACCEPT_ENCODING\"]=>\n  string(13) \"gzip, deflate\"\n  [\"HTTP_CONNECTION\"]=>\n  string(10) \"keep-alive\"\n  [\"HTTP_UPGRADE_INSECURE_REQUESTS\"]=>\n  string(1) \"1\"array(21) {\n  [\"DOCUMENT_ROOT\"]=>\n  string(28) \"/home/xxx/nx-i18n-storage\"\n  [\"REMOTE_ADDR\"]=>\n  string(9) \"127.0.0.1\"\n  [\"REMOTE_PORT\"]=>\n  string(5) \"37186\"\n  [\"SERVER_SOFTWARE\"]=>\n  string(45) \"PHP 7.0.8-0ubuntu0.16.04.3 Development Server\"\n  [\"SERVER_PROTOCOL\"]=>\n  string(8) \"HTTP/1.1\"\n  [\"SERVER_NAME\"]=>\n  string(7) \"0.0.0.0\"\n  [\"SERVER_PORT\"]=>\n  string(4) \"8080\"\n  [\"REQUEST_URI\"]=>\n  string(5) \"/i18n\"\n  [\"REQUEST_METHOD\"]=>\n  string(3) \"GET\"\n  [\"SCRIPT_NAME\"]=>\n  string(5) \"/i18n\"\n  [\"SCRIPT_FILENAME\"]=>\n  string(38) \"/home/xxx/nx-i18n-storage/index.php\"\n  [\"PHP_SELF\"]=>\n  string(5) \"/i18n\"\n  [\"HTTP_HOST\"]=>\n  string(12) \"0.0.0.0:8080\"\n  [\"HTTP_USER_AGENT\"]=>\n  string(76) \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:49.0) Gecko/20100101 Firefox/49.0\"\n  [\"HTTP_ACCEPT\"]=>\n  string(63) \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"\n  [\"HTTP_ACCEPT_LANGUAGE\"]=>\n  string(14) \"en-US,en;q=0.5\"\n  [\"HTTP_ACCEPT_ENCODING\"]=>\n  string(13) \"gzip, deflate\"\n  [\"HTTP_CONNECTION\"]=>\n  string(10) \"keep-alive\"\n  [\"HTTP_UPGRADE_INSECURE_REQUESTS\"]=>\n  string(1) \"1\"\n  [\"REQUEST_TIME_FLOAT\"]=>\n  float(1476974974.0782)\n  [\"REQUEST_TIME\"]=>\n  int(1476974974)\n}\nstop\nso , i can't use i18n word ? \n. I have fix my issue with this : https://github.com/slimphp/Slim/issues/359#issuecomment-185519730\n\nOverriding it by setting $_SERVER['SCRIPT_NAME'] to /index.php at the top of index.php fixes the problem ...\n\nthank you :+1: \n. ",
    "nicowernli": "@3HMonkey copied and pasted your code and works fine to me. Which version of Slim are you using? Are you using any middleware that could be replacing the $request object?\n. ",
    "udf2457": "Well yeah... you would love a PR for that feature.... now that I've found .... that feature.\nHow about all the other ones you haven't bothered documenting ?  You know your source tree better than I do.  I'm certainly not going to be reading through all your source code and try to correlate it all myself.\nThat's my point.  There's not much point merging a new feature if you're not going to merge an update to the docs at the same time !\n. \"However, as an open source project, not all contributors provide a docs PR when they write a feature. \"\nI'd call that sloppy coding.  There should be a \"no doc, no merge\" policy.\nYes I agree, its a perennial problem with opensource problems that people prefer hacking away at the code instead of writing the docs.  But I don't think that's an area where you want to proudly follow the status quo.\nBut that's why opensource is so frustrating.  The project maintainers will go tell you to RTFM and then you go RTFM and there's nothing there because the project maintainers/contributors/whatever don't UTFM. \nAnyway.  Rant over.  ;-)\n. ",
    "sbol-coolblue": "You're welcome, and thanks for accepting my little contribution!\n. Fair enough. Thanks for the feedback!\n. ",
    "amad": "I take your point about why added. But is it still the case? Because coverage report generated.\n. Fair enough :+1:\nIMO I don't see difference between ignoring and leaving. either way is not green on this report.\nBut of course it's not big deal at all and I just send it because I didn't realize the reason behind it in the first place.\nThanks \n. ",
    "far-blue": "out of curiosity, are sub-requests being superseded by something 'better' or just considered a bad idea?\nI am currently investigating using sub-requests to support multiplexed update requests via PATCH  - where the PATCH payload is actually a batch of partial updates to possibly multiple different records and which need to be unpacked and dispatched as if they were individual PUT / POST / DELETE requests. Kind of like https://tools.ietf.org/html/rfc6902 but for REST requests. This reduces the number of individual REST requests.\nIf not sub-requests, any suggestions on how this could still work?. I guess it's the changed fingerprint of the middlewares that concerns me most and the resulting need for middlewares and controllers to create a response object rather than one being passed up the pipeline. I guess it would be possible to do this in Slim3 so as to reduce the problems of migrating to Slim4 - the method calls might change but the architecture will look the same.. Adaptors are great for using old code in new apps but I'd not want to put the effort into migrating lots of code over to a middleware architecture only to then have to refactor it again or forever rely on an adaptor layer.\nUnless you were suggesting an adaptor for Slim3 that allows the use of PSR-style middlewares - in which case I could use the adaptor and then ditch it when moving to slim4. thanks for everyone's thoughts :) Most appreciated!. ",
    "0x13a": "Why not using an automatic dependency injection, auto dependency resolution instantiation ? like https://github.com/rdlowrey/auryn. I'd go for the first class collection approach as @kminek said. gotta add full test coverage. @akrabat yes thanks I know. Just wanted to keep the PR list clean, as it will take some time, before I can work on it. I will reopen it soon. The un-covered line here it seems to be like a dead code, and moreover it's not appearing on my local phpunit 4.8.33 running with PHP7 7.0.14, where I've 100% code coverage for the Slim Callable Resolver. Any ideas ?. @akrabat someone already made some refactoring https://github.com/slimphp/Slim/pull/2157. Hi,\nI was asking myself, why should we use two statements for doing something that can be done in one? At least in the example.\nIt\u2019s going to be a lean example to show, on how simple and straightforward is, to use (setting up the Hello World) Slim, isn't it? Compared to other PHP micro frameworks, it looks like we have to do extra work to return a response. Why using more code than what is actually needed?\nI understand that in the way you used in principle, it's clear for beginners, that the closure should always returns a valid Response, but that\u2019s also clear from the well done documentation Slim has. I hope it\u2019s not a stupid argument. WDYT? :)\n . @akrabat makes sense? :). @sharifzadesina why not?. Thanks for the feedback @akrabat, I wanted know if I could help. I will submit small PRs from time to time. . ping @night-cypher . yes, i need to setup the psr2 sniffer.. Anyway ready to merge @akrabat . thanks @tuupola . @akrabat Ready for review \ud83d\udc4d . Doesn't it make more sense to have\n```php\n$app->get('/route', Controller::class)\n    ->add(AdminMiddleware::class);\nclass AdminMiddleware {\n    public function __invoke($request, $response, $next) { ... }\n}\n```\na custom middleware for admin users/routes? In my opinion Object behaviour must not be configurable, that's the point OOP encapsulation.\nMore for middlewares in Slim https://www.slimframework.com/docs/concepts/middleware.html\nBTW. this question doesn't belong here, you should have posted on StackOverflow. Then if you have more complexity as you specified, you should implement a basic ACL or definitely, don't reinvent the wheel and use something like this \n\nhttps://packagist.org/packages/geggleto/psr7-acl\nhttps://packagist.org/packages/slimphp-api/slim-acl. Hey,\nI don\u2019t think it\u2019s going to affect the behaviour, since as we must return a valid callback, when a method is not provided, the class must be invokable.\nGiven that, we return a callable defined as array which has at index 0 the class and index 1 the method to be invoked, which we explicitly define to be __invoke\u2019 https://3v4l.org/Uvj29\n\nI\u2019m going to test it deeply, but I\u2019d say wouldn\u2019t be an issue, isn\u2019t it? :). do you have any benchmark suite ?. ",
    "kadevland": "feature propose : add a namespace by default ( by setting)\nlike App\\Controllers\n$app->get('\\','HomeController::index')  ==> App\\Controllers\\HomeController\n. @akrabat thx for this astuce. ",
    "XedinUnknown": "I really would appreciate this too, but I guess that this would require a major version bump.. ",
    "railto": "Any objections to me working on this?. Not sure how this has caused the test coverage to drop, tho appears to be such a small amount.. Throwing in my \u20ac0.02, I personally think FIFO makes more sense for reading as you can take a 'top down' approach. ",
    "1f7": "Suggest add array to items collection\nhttps://github.com/slimphp/Twig-View/pull/66\nneed to collect items from different classes that not have Response\nnot important as it will be called offsetAdd or addGlobal or like on another\n. .htaccess in public live as is in slim skeleton\n.htaccess in public_html  try like that\n```\nRewriteEngine On\nRewriteBase /public/\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^assets/(.) /public/assets/$1 [QSA,L]\nRewriteRule ^ index.php [QSA,L]\n``\nbut better change your apache .confDocumentRoot /path/to/your/public_html/public. delete space^ css/(.)=>^css/(.*)`\nrepeat:\n\nbut better change your apache .conf\nDocumentRoot /path/to/your/public_html/public. \n",
    "johanneskonst": "@akrabat quick q: you merged #2070 but left this one open, does that mean that you don't accept pulls on 3.x branch, or are all changes done to 4.x with that milestone-3.7 being merged to 3.x when releasing 3.7?\nOr better, if I want to contribute some more should I only concentrate my work on the 4.x branch and let you lot worry about what ends up where or do both 3.x and 4.x like I did this one?\nBtw: i might have missed some docs on this (only read the CONTRIBUTING.md which was a bit puzzling) so apologies if this is already somewhere...\nThx!. ",
    "antoniomerlin": "I am getting in apache errorlog\n\nRewriteRule: bad flag delimiters\n\n`RewriteEngine On\nRewriteBase /public/\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^ css/(.*) /public/css/$1 [QSA,L]\nRewriteRule ^ index.php [QSA,L]`. yup my final solution is to create symlink of public directory to public_html. As i don't have access to modify apache.conf. how ?. thanks.. ",
    "majoess": "Really important, never use 0.0.0.0 if the computer is public reachable.. exact. Hey,\nthanks for you reply. How can I create a Controller? Please give me some example.\nBest regards,\nmajoess. Hello,\ni don't know how to autoload my Controller with namespace. they are located under /controllers/informationController (+ public function) and informationController.php is in\nnamespace miroAPI\\Controllers. ",
    "kevinburke": "Note that MongoDB instances that listen on 0.0.0.0 are currently being taken over & held for ransom\nhttp://arstechnica.co.uk/security/2017/01/more-than-10000-online-databases-taken-hostage-by-ransomware-attackers/. ",
    "alecapu80": "Found the bug!. ",
    "Achse": "When I raise some exception (for example: PostNotFoundException, UserDoesNotExistsException), it's handy (especially for inner APIs) to provide aditional info about error into response body.\nWith this you can inhert your own NotFoundException (with meta info - message text for example) and in your presenters repack your domain exceptions into this one.\nApi 404 responses now can be richer with some body info.. Also - it's expects you to have your own NotFoundHandler.. A can update default one to take this exception in declaration but as it wont be used - im not sure its the right thing to do.. ",
    "Zegnat": "I don't think adding header() calls is the right way to do this, instead you would want to add this header to the PSR-7 Response and let Slim's respond() method actually send it.\nIf this is a header that is always needed, I propose adding it to the response in the finalize() step. Something like adding this right before the isEmptyResponse() check:\nphp\nif (!$response->hasHeader('Connection') &&\n    $_SERVER['SERVER_PROTOCOL'] == 'HTTP/1.0' &&\n    empty($_SERVER['HTTP_CONNECTION'])) {\n    $response = $response->withHeader('Connection', 'close');\n}\nThough it would probably be preffered to access the $_SERVER data some other way. getServerParams() on the Request might do the trick, but finalize() is only given the Response.. @geggleto, I don\u2019t mind drafting a PR, but I am not clear on exactly what you\u2019d like. As far as I can see Slim does not ship with any predefined middleware, and I would hesitate to add any to the stack from the framework.\nI can do a PR for updating finalize() (on either Slim 3.x or 4.x, whichever you would prefer), but that still leaves the problem of passing an instance of ServerRequestInterface to it.. Oh, I guess Slim 4.x will try and replace finalize() code with middleware, as per #2043? Is there any example of how Slim is planning to ship (optional) default middleware?\n\nEdited to add, I think this should work as middleware:\nphp\n/**\n * When the client sends an HTTP 1.0 request, and the server is not sending\n * an HTTP 1.0 response, include a Connection header with value \"close\".\n *\n * @link   http://cogframework.com/findings/http-slim-and-apachebench\n *\n * @param  \\Psr\\Http\\Message\\ServerRequestInterface $request  PSR7 request\n * @param  \\Psr\\Http\\Message\\ResponseInterface      $response PSR7 response\n * @param  callable                                 $next     Next middleware\n *\n * @return \\Psr\\Http\\Message\\ResponseInterface\n */\nfunction closeHttpConnection($request, $response, $next)\n{\n    $response = $next($request, $response);\n    if ($request->getProtocolVersion() === '1.0' &&\n        $response->getProtocolVersion() !== '1.0' &&\n        !$response->hasHeader('Connection')) {\n        $response = $response->withHeader('Connection', 'close');\n    }\n    return $response;\n}. > $request->getProtocolVersion() === '1.0' && $response->getProtocolVersion() !== '1.0' is always false...\n@ndobromirov it wasn\u2019t at the time I wrote the above code. Have taken a break from Slim so maybe it changed, but the $response used to be created as version 1.1 even if the $request was of version 1.0. The $response being of a different version to the $request was the entire crux of this issue\u2026\nOr maybe you just misread and thought I was checking the protocol version on the same object? Because that would\u2019ve always been false, yes.. That regular expression (/^[[:alnum:]!#$%&\\'*\\/+\\-.^_`|~]+$/i) seems wrong to me. It allows for / within a method, but this doesn\u2019t seem to be allowed as per RFC 7230.\nThe method in the Request Line is defined in section 3.1.1.:\nmethod         = token\nToken is defined in section 3.2.6.:\n```\n     token          = 1*tchar\n tchar          = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n                / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n                / DIGIT / ALPHA\n                ; any VCHAR, except delimiters\n\n``\n(DIGITandALPHA` are defined by RFC 5234, the ABNF syntax.)\nThe correct regex is: /^[[:alnum:]!#$%&'*+\\-.^_`|~]+$/i.. @akrabat you will want to use double-backtick to encapsulate inline code that includes a backtick itself.\nOther then the slight reorder and exchanging the POSIX [:alnum:], that one looks the same as mine. I was just dropping in to make sure the previously mentioned one wouldn\u2019t get used and then needed to be changed.. @akrabat against 3.x or 4.x?. I\u2019ll see if I can get you a regular expression based PR by today then!. I am running into some scheduling conflicts and haven\u2019t gotten around to working on this much. For the current 3.x branch, the following patch should be enough, but someone would still need to fix the tests:\n```patch\n--- Slim/Http/Request.php\n+++ Slim/Http/Request.php\n@@ -111,23 +111,6 @@ class Request extends Message implements ServerRequestInterface\n     protected $uploadedFiles;\n /**\n\n\n\n\nValid request methods\n\n\n*\n\n\n@var string[]\n\n\n*/\nprotected $validMethods = [\n'CONNECT' => 1,\n'DELETE' => 1,\n'GET' => 1,\n'HEAD' => 1,\n'OPTIONS' => 1,\n'PATCH' => 1,\n'POST' => 1,\n'PUT' => 1,\n'TRACE' => 1,\n\n];\n\n/**\nCreate new HTTP request with data extracted from the application\n\nEnvironment object\n  *\n@@ -349,7 +332,7 @@ class Request extends Message implements ServerRequestInterface\n     }\n$method = strtoupper($method);\n-        if (!isset($this->validMethods[$method])) {\n+        if (preg_match(\"/^[!#$%&'*+.^_`|~0-9a-z-]+$/i\", $method) !== 1) {\n     throw new InvalidMethodException($this, $method);\n }\n```\n\n\n\n\nIf someone wants to pick this up before I have time again: please.. Thanks for referencing PSR-7, @sharifzadesina. I am more knowledgable of the HTTP spec than PSR-7. Can we treat this as a bug then, and fix it against 3.x, even if it might cause BC breaks?. I am trying to establish what is and isn\u2019t worth working on for #2156, for 3.x, and what could better be postponed for 4.x.. > [\u2026] if anyone is currently testing against getMethod(), they are doing a simple == against an uppercase string. This stands a good chance of breaking.\nTo be honest, if they are receiving a post request and checking for the expected POST, this should break. Those two types of requests cannot be assumed to be the same.\nAs long as they are targeting browsers as UA, chances are they will never notice the change. Those that would break would be custom HTTP client implementations that for some reason have been sending lower-case methods when they meant to be sending standardised methods.. As this pull is only against 4.x, it might be worth also implementing #2169?. ",
    "reinir": "I agree with your decision to leave this open.\nThis seems to be one of those things that is easily missed, so a reminder is a good idea.. ",
    "nyamsprod": "@geggleto a quick question why close the issue if other people stumble on the same issue leaving it open even with a wontfix status may help find it ? . ",
    "famoser": "I had to add another exception for MOCK_POST_DATA in Request. I am not quite satisfied with the result now, it seems to me there should be a more elegant way to do this.\nI'd be very helpful if someone could give some feedback; if this feature is even supposed to be inside Slim, and if there's a better to do what I tried to accomplish. . There is\u00a0already a\u00a0way to archive this;\u00a0some nice guy over at http://discourse.slimframework.com/t/mock-slim-endpoint-post-requests-with-phpunit/973/7 was able to help me.\u00a0The code to archive what I needed to:\n``` php\n//setup environment vals to create request\n$env = Environment::mock();\n$uri = Uri::createFromString('/1.0/testnode/');\n$headers = Headers::createFromEnvironment($env);\n$cookies = [];\n$serverParams = $env->all();\n$body = new RequestBody();\n$uploadedFiles = UploadedFile::createFromEnvironment($env);\n$request = new Request('POST', $uri, $headers, $cookies, $serverParams, $body, $uploadedFiles);\n//write request data\n$request->write(json_encode([ 'key' => 'val' ]));\n$request->getBody()->rewind();\n//set method & content type\n$request = $request->withHeader('Content-Type', 'application/json');\n$request = $request->withMethod('POST');\n//execute request\n$app = new App();\n$resOut = $app($request, new Response());\n$resOut->getBody()->rewind();\n$this->assertEquals('full response text', $resOut->getBody()->getContents());\n```. ",
    "1ma": "I think I could manage a PR for that, just need to know the proper branch to submit it :). Presto.. (string) $request->getUri()\nIt won't include the port if it runs on the standard 80 or 443 ports, though. If it is that important maybe you can build something up with UriInterface::getScheme(), UriInterface::getHost(), UriInterface::getPort(), UriInterface::getPath() and UriInterface::getQuery(). I'm cool if these changes are already in the 4.x branch (didn't know, here's the commit for reference: https://github.com/slimphp/Slim/commit/f742f0f7f2194f00cc22318579dfe3f7450b1242 btw thanks :sweat_smile: )\nMaybe we could still bump pimple/pimple to ^3.1 or ^3.2 and remove the explicit require of psr/container in 4.x?. The current LIFO model certainly adds some cognitive overhead for me.. I submitted a PR with a possible implementation, but I'd like to have a bit of input from the mantainers and/or other community members before doing the rest of the gruntwork (mostly documentation).. I believe it is, yes.. My problem is that I don't see a satisfactory way to test the NonBufferedBody::write() method, as it has an echo.\nFor this kind of thing I'd usually wrap the system under test in a ob_start()/ob_get_clean() pair and make assertions on the returned string, but this write() method needs precisely to end any active output buffers, so the echoed data always goes straight to STDOUT. Do you have any ideas?. I don't think so, because if we put two different copies of the same header in $data both will be returned by the getHeaders() method, which would also violate PSR-7.\nHowever I can close this PR and submit it again against the 4.x branch, which has no stable release yet and can handle breaking changes wrt 3.x. I think that might be the best course of action.. Right, it didn't occur to me that someone might be catching these exceptions.. ",
    "aldas": "Would it not bloat microframework? there are very capable validator frameworks out there ala https://github.com/Respect/Validation that can do proper error messages etc. only thing you need to do is to build validator, validate controller $args and respons json with validation errors.\n```\nuse Respect\\Validation\\Validator as v;\n...\n$validator = v::key('text', v::stringType()->alnum()->length(1, 255))\n    ->key('offset', v::intVal()->positive(), false);\ntry {\n    $validator->assert($args);\n} catch (NestedValidationException $e) {\n    return $response->withJson(['messages' => $e->getMessages()], 422);\n}\n```\nthat try catch can be even in application error handler so you only need to build validator and assert args in controller. ",
    "damianopetrungaro": "ATM i do not see any advantage about using it and imho should not be not added to the core, the userland may use your package instead.. Copy and paste from Postman app.\ncurl -X PUT -H \"Content-Type: application/json\" -H \"Cache-Control: no-cache\" -H \"Postman-Token: 0fafa1de-47a0-ca43-d2ca-90d2e7ecebb0\" -d '{\"translations\":{\"en\":{\"name\":\"...\",\"short_description\":\"...\",\"long_description\":\"...\"}}}' \"http://api.gateway.dev/translations/id\". Same result...i tried more than once in those days \ud83d\ude04 . @JoeBengalen \nThe body is sent by a browser request.\nI simply pass the Slim request to Guzzle Client.\nAnyway this is the JSON i sent:\n{\"translations\":{\"en\":{\"name\":\"...\",\"short_description\":\"...\",\"long_description\":\"...\"}}}\nSorry but i pasted wrong \ud83d\ude04 . @JoeBengalen  there's also a cURL https://github.com/slimphp/Slim/issues/2111#issuecomment-268495682. @JoeBengalen updated the cURL.\nThe json is correct anyway in the cURL, the error is when i pass the Slim request to Guzzle Client.. Of course $req->getParams(); is not a psr method, but i use it one the server request.\nBrowser(as Client)  -> Gateway(as Server) -> Build a new Request(as Client) -> Microservice(as Server)\nWhen building a new Request from the gateway i must do:\n``` php\nprotected function call(RequestInterface $apiRequest)\n    {\n        // Rebuild the request from Slim to Guzzle\n        try {\n            // Get method, body, uri, headers by request\n            $method = $apiRequest->getMethod();\n            $body = $apiRequest->getBody()->getContents();\n            $uri = $apiRequest->getUri();\n            $headers = [];\n        // Clean up all headers\n        foreach ($apiRequest->getHeaders() as $key => $value) {\n            $headers[$key] = $value[0];\n        }\n\n        $request = new Request($method, $uri, $headers, $body);\n\n        return $this->client->send($request);\n    } ...\n}\n\n```\nAnd i can't do \n``` php\nprotected function call(RequestInterface $apiRequest)\n        {\n            try {\n                return $this->client->send($apiRequest);\n           } ...\n        }\n```\n. Someone knows why there's this incompatibility?. I'll try to give you a little codebase, so you'll can check the problem.. I am writing it in my free time, I hope to post it during this week.\nIl mar 17 gen 2017, 20:43 Rob Allen notifications@github.com ha scritto:\n\n@damianopetrungaro https://github.com/damianopetrungaro any luck in\nproducing a small reproducible case?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/slimphp/Slim/issues/2111#issuecomment-273277340, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AIiS5xgg4-Ed6qOYD1yEbjtw20LOoWvdks5rTRnqgaJpZM4LS0pb\n.\n. Sorry i can't reproduce it locally :/. I do not see any problem with the actual error handler.\nIt's pretty simple and easy to use and override for your custom behavior.\n\nIn the ex agency where i was working i build this very simple boilerplate with a custom error handler\nYou may also built your own \"main\" exception handler as we did because our provider didn't support php 7.x and invoke it for grab all the exception.\nNot an elegant one, but it was helpful.\nAnyway imho the container is the perfect place where bind this stuff. I don't see any possible issue on that :/. @ncou I ask you:\nWhy should you prefer a set_exception_handler function instead of using the one that is in the container?. I do not agree using set_error_handler, i prefer it to be implemented by userland (if needed).\nBtw the point (at least i see it in this way) is that the Slim application should catch any possible exception from the router.\nIf you have errors outside of the execution of the application middleware stack, it's up to you catch it.\nI like the way Slim do this job about it, so i do not see any real benefits about it.\nYou can try/catch around the fw run, or use set_error_handler if you prefer, i don't see any limit about it.\nOf course imho \ud83d\ude04 . Change \"router exception\" in \"middleware stack exception\" and i agree ahahah \ud83d\ude04 . @silentworks i answer here about #2223\nSure php 5.6 is still supported, but will php 7 introduce many feature that makes it so much more stable and the scalar/return type declaration are the main one imho.\nSee that Slim 4 is the \"next\" version of Slim 3 i would like to see as more as possible support for the really \"next\" php version.\nPHP 5.6 is going to die next year, and supporting it right now, will garantee a very important BC.\nIf we add a PHP 7.X only support there will be also less tests for wrong parameters/return type.\nIf PR is needed i can help to add scalars type and return type.\nI am supporting so much the scalar/return type declaration feature because is the main one that will be apprecciated and will give us a really good support for stability and mantainability. Nobody reply to this important topic?. @akrabat  how are you going to handle the end of support of PHP 5.6 in the Slim4?\nBecause it will bring a lot of BC/refactoring imho.\nIn my mind is better think to this stuff now and not after.. The discussion continued in the slack channel, and @akrabat & @silentworks at the moment don't think is an essential feature.\nThe solution is that Slim 4 will support php5.6 and a possible Slim 5 will drop the 5.6 support, and will be refactored using php7 new features.\nThe \"php7 only support\" will possibly be introduced only if a lot of users require it.\n\ud83d\ude04 \nAt this point i agree with the two tagged maintainers, is not an \"evil\" idea their point of view.. As i said:\n\nThe \"php7 only support\" will possibly be introduced only if a lot of users require it.\n\nSo imho it can stay open \ud83d\ude04 . All those stuff has been discussed in slack channel.\nThe point is that the Slim maintainers want to give the opportunity to still use php 5.6 on Slim4 for help developers to migrate from 3 to 4.\nAs i said imho the Slim 4 should be the \"slim of the future\" dropping 5.6 support and type hinting as more as possible, as OOP good practices suggest.\nAnyway i am not a maintainer, and the maintainers are not stupid people, they know what they're doing \ud83d\ude04 . Also related to this: #2259, opened some time ago . PSR-15 requires php >=7.0, we can go with PHP 7.0 and do not use nullable types.\nIt depends when we are going to release the v4, if it's 2019 PHP 7.1 imho it's ok otherwise 7.0.\nAs said few months ago i am pretty free to add all types and signature to the codebase, in an half days it may be done.. I agree with @tflight. The group term is also used for set a middleware to a group of routes.\n. @silentworks i imagine a method \"addMiddleware\" to the prefix, but it sound very 'hacky'.\n$app = new \\Slim\\App();\n\n$app->prefix('', function () {\n\n    $this->get('/', function ($request, $response, $args) {});\n\n    $this->get('/posts', function ($request, $response, $args) {});\n\n})->addMiddelware(function(){});. IMHO group is a good name, it specifies the real intent.\n\nWe may discuss on an implementation like this:\n$app = new \\Slim\\App();\n\n$app->group(function () {\n    $this->get('/', function ($request, $response, $args) {});\n    $this->get('/posts', function ($request, $response, $args) {});\n})->prefix('prefix-here')->addMiddelware(function(){});\n\nIt's just an idea for split the two concepts and have a easy way for maintains it.\n@silentworks  what do you think about it?\nAnyway i like the \"group\" concept that is implemented at the moment.\nIt's easy to use and do its job \ud83d\ude04 . I don't think is a \"slim topic\", is more a generic one. Anyway credential in .htaccess are really fast to create, but no so a good approach.\nI recommend you to move on a JWT/OAuth2 for authorization, and a simple login implementation for authentication.. @akrabat \nAs discussed on Slack for the AppTest:\npublic function testAddSettings()\n{\n    $app = new App();\n    $app->addSettings(['foo' => 'bar']);\n    $this->assertAttributeContains('bar', 'settings', $app);\n}\n\npublic function testAddSetting()\n{\n    $app = new App();\n    $app->addSetting('foo', 'bar');\n    $this->assertAttributeContains('bar', 'settings', $app);\n}\n\nwith this it works \ud83d\ude04 . Or even better:\npublic function testAddSettings()\n{\n    $app = new App();\n    $reflection = new ReflectionProperty(App::class, 'settings');\n    $reflection->setAccessible(true);\n    $reflection->setValue($app, []);\n    $app->addSettings(['foo' => 'bar']);\n    $this->assertSame(['foo' => 'bar'], $reflection->getValue($app));\n}\n\npublic function testAddSetting()\n{\n    $app = new App();\n    $reflection = new ReflectionProperty(App::class, 'settings');\n    $reflection->setAccessible(true);\n    $reflection->setValue($app, []);\n    $app->addSetting('foo', 'bar');\n    $this->assertSame(['foo' => 'bar'], $reflection->getValue($app));\n}. Fixed by #2379 , still waiting @akrabat ahahaha. @akrabat\n\n\nThe main advantage I've seen has been clarity of expectations. Anecdotally, on other projects, we've had devs say to us privately that they only considered submitting a PR because the CoC gave them the confidence that they wouldn't be attacked in the comments.\n\nReally?!\nAnyway if we have this kinda issue i totally agree to integrate a CoC.\nFor me it's ok Contributor Covenant.. As @geggleto said: https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.4. @akrabat btw we may add a cs fixer and automate all those processes.. I can work on it tomorrow if is it ok for you.. @l0gicgate btw before merging could you please squash all your commits?. You can do it also on your local branch:\ngit rebase -i HEAD~{number of commit to squash} and clean a little bit the history for this PR \ud83d\ude04 \n. Great work @l0gicgate !. @akrabat  \"I'm confident that Slim won't provide more than one Router. Any alternatives will be provided by third parties.\"\nIt's ok, but we should implement interfaces for making them interchangeable.\n@l0gicgate  I am ok with any possible implementation if it will be small and easy to swap, so it depends on the implementation.. @imageslr I suggest you to inject DB into each controller instead of using Facade, that is harder to test.\nIf you prefer you may inject the container into the constructor of the controller and use db from there.\nBUT:\ntry using a repository layer and inject the repository into the Controller so it will be easier to maintain in the future, i am not fun of the other 2 approaches.\n. @l0gicgate \nI do like the most of the thing that you dislike, but apart from it (we may discuss it on slack if you want), I don't want to use that specific code style fixes because it will introduce a lot of BC in the codebase that are not needed.\nI didn't have more time to investigate on it, if you want to help me you're welcome and we can communicate using Slack if you want to \ud83d\udc4d . This is used in https://github.com/slimphp/Slim/pull/2395/files#diff-5cbcc564b9520431aac614f483da529cR312\nBut use the backslash, so you may remove it or use the backslash here.. What do you think about using an Enum for this $routeStatus or if it's an overhead use constants instead of comments for valid statuses?. Avoid nested statement:\n```\nif (!$urlDecode) {\n    return $this->routeArguments;\n}\n$routeArguments = [];\nforeach ($this->routeArguments as $key => $value) {\n    $routeArguments[$key] = urldecode($value);\n}\nreturn $routeArguments;\n``. Wdyt about addinghttps://github.com/php-fig/http-message-utilto avoid hardcoded HTTP methods?. I always include it in for descriptive HTTP status codes and it contains have HTTP methods too.\nSeen that is a FIG package I'm ok with it.\nBut I get your point of view so it's not a big deal \ud83d\ude04 . Yup, class constant or Enum will be more explicit so for me both are good.. 1:FOUND,NOT_FOUND,NOT_ALLOWEDsounds good to me.\n2: You use them inDispatcherResultsso it may be the right place (imho use an Enum and inject it is the best approach). UseDispatcher::classinstead of hardcoded namespace, if it will change we have to change it in a lot of places. @l0gicgate  Here namespace too \ud83d\ude04 . @l0gicgate  Here namespace too \ud83d\ude04 . @l0gicgate  Here namespace too \ud83d\ude04 . Are we including it as dependency?\nWe may use namespace here too instead of hardcoded \ud83d\ude04 . @l0gicgate  Here namespace too \ud83d\ude04 . wdyt about using adataProvider` and trying to pass the test using \"strange\" values too?. ",
    "liko28s": "I think that if you have active the determineRouteBeforeAppMiddleware config set to true You should be able to overwrite the args In Middleware an then pass to the next as you want\n$middleware = function ($request, $response, $next) {\n    $args = $request->getArgs();\n    //Do what you like with args\n    $customOrProcessedArgs = new Custom();\n    return $next($request, $response, $customOrProcessedArgs);\n};\n$app->get('/', function(Request $request, Response $response, Custom $args){\n    //Do what you like with customized args\n        return $response;\n    })->add($middleware);\nAt least receive or pass additional parameters in $next\n. ",
    "DanKottke": "Hey, sure, though I'm not sure in what way you mean for an example. I'll give you all I know. When I halt execution right before the return of Uri::createFromEnvironment(), I can verify that both of those server variables equal (these are dummied, but the same sort of thing I'm seeing) \"/documentation/api/view\", which is the route entered into, let's just say for clarity, a normal GET route in a browser to \"/documentation/api/view\". At this point, basePath is \"/documentation/api/view\" and path is \"/\".\nApache-wise, we're using virtual hosts with mod rewrite in place to route to appropriate routing scripts. So, for instance:\nRewriteCond %{REQUEST_URI} ^/documentation\nRewriteRule .* /www/<stuff here>/documentation/routes/main.php [NS,L,QSA]\nThis file, main.php, is where the Slim\\App is instantiated, configured with paths to respond to, and where run() is called on it.\nAnother thing I've noticed is that in version 4.x, the references to basePath have been reduced. I'm hoping this means that the concept is being phased out? One of the critical places where basePath still factors in on 4.x is in URI::createFromEnvironment() at the part relevant to this ticket:\n```\nif (stripos($requestUri, $requestScriptName) === 0) {\n            $basePath = $requestScriptName;\n        } elseif ($requestScriptDir !== '/' && stripos($requestUri, $requestScriptDir) === 0) {\n            $basePath = $requestScriptDir;\n        }\n        if ($basePath) {\n            $virtualPath = ltrim(substr($requestUri, strlen($basePath)), '/');\n        }\n```\nI'd like to mention that the solution that I've employed locally is actually commenting out this entire block and therefore completely gutting this basePath/virtualPath distinction.. ",
    "starlight36": "Hi, this problem occurred when I was using php-cli server in my develop environment. When I access to /aabb.txt, the SCRIPT_NAME is /aabb.txt, others are /index.php. To fix this problem, I have to manually write a line such as $_SERVER['SCRIPT_NAME'] = '/index.php' in my index.php file.\nI was referred to the implementation in Symfony HttpFoundation, usingSCRIPT_FILENAME and SCRIPT_NAME in the same time is a good idea to avoid this problem.. ",
    "jackwilsdon": "I am still having this problem with apache2.4.27-2ubuntu3 and Slim 3.9.0.\nI am using this rewrite;\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^ index.php [QSA,L]\nAnd all URLs are resolving to / and not being routed where they should be.\nHere is my $_SERVER;\nArray\n(\n    [SCRIPT_URL] => /basket\n    [SCRIPT_URI] => http://127.0.0.1/basket\n    [HTTP_HOST] => 127.0.0.1\n    [HTTP_USER_AGENT] => Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:57.0) Gecko/20100101 Firefox/57.0\n    [HTTP_ACCEPT] => text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n    [HTTP_ACCEPT_LANGUAGE] => en-GB,en;q=0.5\n    [HTTP_ACCEPT_ENCODING] => gzip, deflate\n    [HTTP_COOKIE] => XDEBUG_SESSION=XDEBUG_ECLIPSE\n    [HTTP_CONNECTION] => keep-alive\n    [HTTP_UPGRADE_INSECURE_REQUESTS] => 1\n    [HTTP_CACHE_CONTROL] => max-age=0\n    [PATH] => /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n    [SERVER_SIGNATURE] => <address>Apache/2.4.27 (Ubuntu) Server at 127.0.0.1 Port 80</address>\n    [SERVER_SOFTWARE] => Apache/2.4.27 (Ubuntu)\n    [SERVER_NAME] => 127.0.0.1\n    [SERVER_ADDR] => 127.0.0.1\n    [SERVER_PORT] => 80\n    [REMOTE_ADDR] => 127.0.0.1\n    [DOCUMENT_ROOT] => /var/www\n    [REQUEST_SCHEME] => http\n    [CONTEXT_PREFIX] => \n    [CONTEXT_DOCUMENT_ROOT] => /var/www\n    [SERVER_ADMIN] => webmaster@localhost\n    [SCRIPT_FILENAME] => /var/www/index.php\n    [REMOTE_PORT] => 38632\n    [GATEWAY_INTERFACE] => CGI/1.1\n    [SERVER_PROTOCOL] => HTTP/1.1\n    [REQUEST_METHOD] => GET\n    [QUERY_STRING] => \n    [REQUEST_URI] => /basket\n    [SCRIPT_NAME] => /basket\n    [PHP_SELF] => /basket\n    [REQUEST_TIME_FLOAT] => 1513643368.615\n    [REQUEST_TIME] => 1513643368\n)\nAs you can see SCRIPT_NAME is not correct, which leads the path to be incorrect during routing. Is there a solution to this which doesn't involve manually setting SCRIPT_NAME  in my PHP? (feels like a hack). ",
    "mmelvin0": "This is still an issue out of the box with the latest Slim skeleton. This issue should really not be closed IMHO since all the instructions say to use the PHP built-in development web server and it is apparently also happening to @jackwilsdon w/Apache.\nAn easy but ugly workaround is to add this in index.php:\nphp\nif (strpos($_SERVER['SCRIPT_FILENAME'], $_SERVER['DOCUMENT_ROOT']) === 0) {\n    $_SERVER['SCRIPT_NAME'] = substr($_SERVER['SCRIPT_FILENAME'], strlen(rtrim($_SERVER['DOCUMENT_ROOT'], DIRECTORY_SEPARATOR)));\n}\n. ",
    "paolomainardi": "I confirm the same bug with the latest slim version.. ",
    "sjzurek": "Try using\n$body = $apiRequest->getParsedBody();\nHave a look there:\nhttps://www.slimframework.com/docs/objects/request.html#media-type-parsers. ",
    "acid24": "I ended up extending \\Slim\\Http\\Body and overriding the isSeekable method with the code in my previous comment. In other words I worked around the issue so this is not a problem for me anymore. Also the guys from mongo-php-library said that they \"have an implementation of seeking for readable streams\" coming up in version 1.2.0 which would also fix the specific GridFS issue I was having.. ",
    "vistiyos": "@tflight Thank you very much, you have saved my day, but still I think it might be an issue in Slim, don't you think?. @tflight my concern is that if getAttribute method does not work if PHP-DI bridge is included, at least something should be said related to that. . @campersau you are right, it's a typo in my comment.. +1 for @cdekok . ",
    "cdekok": "This is kinda annoying if the pattern changes especially if you want to create something reusable.\nImplementation X won't work in application Y because the interface is different because it uses the bridge.\n. ",
    "roydekleijn": "I totally missed that\nOn Mon, Jan 9, 2017 at 1:15 PM, Matheus Marques notifications@github.com\nwrote:\n\nYes, there is a way, see here\nhttps://www.slimframework.com/docs/objects/router.html#container-resolution\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/slimphp/Slim/issues/2123#issuecomment-271270611, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABPP1dpPDNXONXQdT28Nmx-X9b7pEQrJks5rQiTPgaJpZM4LeGyL\n.\n\n\n-- \n[image: --]\nRoy de Kleijn\n[image: http://]about.me/roydekleijn\nhttp://about.me/roydekleijn?promo=email_sig\n. ",
    "pachico": "Thanks for your reply.\nNo, I don't have a use case (yet?) but there's something that feels fishy to me where the same (or a child) exception is handled differently if thrown by the system or by a user.\nSomehow, it feels like a lack of consistency but once again I don't have a use case to support any change of behaviour.\nCheers. Fair enough.\nCheers. Hi there. It seems you're trying to use the dependency container, which in Slim3 is accessible by doing:\nphp\n$app->getContainer();\nTry by doing:\nphp\n$app = new \\Slim\\App();\n$container = $app->getContainer();\n$container['auth'] = function () {\n    return new Foo();\n};\nHope that helps.. It really seems like a good candidate for a middleware.\nIn your case you could implement a middleware that just modifies the response\nIn pseudo code:\n```\nfunction (request, response, next) {\nresponse = next(request, response)\n   newResponse = modifyYourResponseWithYourArrayData(response)\n   return newResponse\n}\n```\nRefer to the docs for real world examples.\nCheers. I fail to see how is this related to Slim. You might want to use another forum for your issue.. You might want to have a middleware that will just validate xml and, given a malformed xml, return a custom error to client.\n. While I understand the issue, I don't think it should be the framework's responsibility to deal with it, especially being a \"micro\" framework.\nBy doing what you say, the framework should make business assumptions, which, in my opinion, goes against the beauty of it.\n. Hi,\nCould you specify what URL are you calling?\n(as a side note, please consider markdown code when embedding snippets for better readability.)\n. You should never write in the vendor directory. That folder is entirely managed by composer (it shouldn't even be in your source versioning control system).\nNow, if you are familiar with DDD, you might find that Infrastructure (or one subfolder, like Infrastructure/ExceptionHandler/*) is a suitable path.\nAnyhow, as you know, it won't magically be used by placing it there since you have also to register it.\nCheers\n. tl;dr.\nActually, you could show a better error but it's up to you, and not to Slim, to implement a custom error handler (http://php.net/manual/es/function.set-error-handler.php).\nIt is also a good way to have all your logs centralised in the same way/place, otherwise you will get your custom logs written where you specified (in case of the typical file error Monolog) and the rest of your logs (like this one) written where your nginx/apache configs are set to write to.\nIn addition, this would allow you to throw exceptions on notices and warnings, which is a good thing if you don't want to have unexpected behaviours (like automatic casting non-existing array key values to null, which might lead to nightmare debugging nights).\nImplementing it shouldn't take you more than a couple of hours, tests included :). Interesting, I made some PoC during the last weeks and I had amazing results.\nWhat you have to do is to pick environment and request data from Swoole Request object and create a Slim request based on that.\nDuring the week I will post an example, but it's really simple.. You're exploiting the potential of an event driven application as Swoole with your approach.\nIdeally, what you want to avoid is having to bootstrap your entire application at every request. This means you have to create your app once, then pass it to Swoole's \"on(\"request\")\" event handler and process that particular request.\nI took the liberty of writing a sample which I didn't try so it might have some bugs but it illustrates what I mean.\n```php\n<?php\nrequire ROOT . '/vendor/autoload.php';\nuse Slim\\Http\\Environment;\ndefine(\"ROOT\", getcwd() . '/..');\ndefine('APP', ROOT . '/app');\n// load functions\nrequire APP . '/functions.php';\n$http = new swoole_http_server(\"0.0.0.0\", 8888);\n// Instantiate the app\n$settings = require APP . '/config.php';\n$settings['environment'] = function () use($request) {\n    $server = [];\n    foreach ($request->server as $key => $value) {\n        $server[strtoupper($key)] = $value;\n    }\n    return new Environment($server);\n};\n$app = new \\Slim\\App($settings);\n// Register routes\nrequire APP . '/routes.php';\n$http->on(\"start\", function ($server) {\n    echo \"Swoole http server is started at http://0.0.0.0:8888\\n\";\n});\n// You use the already created and bootstrapped app in every request\n$http->on(\"request\", function ($request, $response) use ($app) {\n$slimRequest = \\Slim\\Http\\Request::createFromEnvironment(\n        new \\Slim\\Http\\Environment([\n            'SERVER_PROTOCOL' => 'HTTP/1.1',\n            'REQUEST_METHOD' => $request->server['request_method'],\n            'REQUEST_URI' => $request->server['request_uri'],\n            'SERVER_PORT' => $request->server['server_port'],\n            'HTTP_ACCEPT' => $request->header['accept'],\n            'HTTP_USER_AGENT' => $request->header['user-agent']\n            ])\n);\n\n$body = new \\Slim\\Http\\Body(fopen('php://temp', 'w'));\n$body->write($request->rawContent());\n$body->rewind();\n$slimRequest = $slimRequest->withBody($body);\n\n$processedResponse = $app->process($slimRequest, new Slim\\Http\\Response());\n\n// Set all the headers you will find in $processedResponse into swoole's $response\n$response->header(\"foo\", \"bar\");\n\n// Set the body\n$response->end((string) $processedResponse->getBody());\n\n});\n$http->start();\n```\nOf course, this opens up another way of programming which PHP developers didn't have to suffer from, like:\n If your application registers dependencies or services in you container at each request and not during bootstrap, it will complain;\n you will need to implement policies for opening, reopening and closing database connections (some combinations of DB + DBAL do this automatically);\n If you are using some kind of correlation ids, they will have to be created per request, rather than per bootstrap;\n you will need a supervisor that will monitor if Swoole is running and, if not, start it.\n* and many more you will find down the road.\nNeedless to say, numbers are amazing once you take this in consideration.\nI did some tests with one of our micro-services  (simple restful app connected to MariaDB) which had an increment of x10 in throughput.\nSo, summarizing, all you need is a translator from Swoole's request to Slim(PSR)'s request and then from Slim(PSR)'s response a Swoole's response and flush it. Then, rather than doing $app->run() you do $app->process($slimRequest, new Slim\\Http\\Response());. (You might be familiar with this if you are doing functional tests).\nHope this helps.\nCheers\n. Indeed, nor any headers from the response nor all possible request headers.\nI just wanted to illustrate what the overall process was supposed to be. I guess a simple library that will do these transformations could be a good work for a rainy week-end.\nCheers. Challenge accepted. @salamander-mh I have started the library. I didn't give it a lot of thought so let me know what you think about it.\nhttps://github.com/pachico/slim-swoole\nOf course, contributions are always welcome.\nCheers. I think this issue can be closed.. One of the main reasons we opted for Slim is the reduced number of dependencies: I wouldn't like to see see how this framework starts to grow as others did.\nIn addition, I still have to see a realistic benchmark that shows that replacing FastRoute really makes a difference.\nPlease, keep Slim as it is: fast and simple.\n. I would also delete 418 => 'I\\'m a teapot' since wasn't more than an April fools which is not expected to be implemented.. Not for 3.*, I agree, but it could for 4.0. In my opinion, it's just a silly and childish joke that got far more attention than it deserved and made its way to libraries implementations (and it clearly states that should NOT be implemented).. ContainerInterface (https://www.php-fig.org/psr/psr-11/) says nothing about ArrayAccess.\nAs far as I know it's a (handy but custom) implementation of Pimple.\nYou shouldn't rely on:\nphp\n$stuff = $container['my_key'];\nif you think you might change container.\nAnd this is me thinking out loud: ContainerInterface is a good but incomplete attempt to standardise the containers world. Each one has its own API to register services/dependencies/etc., so the FIG proposal could only cover half the reality of it, which is how to retrieve stuff, which, to me, seems a half-baked solution.\n. Regardless of if this feature will be implemented or not, please correct to:\nphp\npublic function getParams(array $only = null)\nYour unit tests should have probably tested also non expected inputs.\nCheers\n. ",
    "fluffywaffles": "Thanks, @pachico. Perhaps we can update the Upgrade Guide docs to reflect this? They currently suggest that you can just... slap stuff onto $app. Which apparently you cannot.\nI've tried your suggestion now, and I am getting a new error.\n```php\n// in index.php...\n$app = new \\Slim\\App();\n$app->getContainer()['auth'] = function () {\n  class auth { \n   public function authorize() {\n     return 'SomeThing::SomeMethod';\n   }\n   // etc.\n  }\nreturn new auth();\n};\n```\nphp\n// in routes.php...\n$app->get('/...', function () {\n  // ...\n})->add($app->auth->authorize());\nNew error message:\nNotice: Undefined property: Slim\\App::$auth in /Users/.../routes.php on line xx\nSo, it occurs to me that maybe I need to change the line $app->auth->authorize() to be $app->getContainer()->get('auth')->authorize()). Which was not clear to me from the docs - which repeatedly state some version of \"$app['x']\" for getting \"x\" out of the container. So I tried that, instead:\nphp\n// in routes.php...\n$app->get('/...', function () {\n  // ...\n})->add($app->getContainer()->get('auth')->authorize();\nThis, finally, appears to work -- but maybe we can update the docs to more clearly state how to put things into, and get them out of, the application container?. Thanks, @akrabat! I'm not so well acquainted with Slim 3 to feel comfortable offering to edit the docs, but I'd be glad to look at an update if you want an outside opinion on whether things get clearer. :). ",
    "JustSteveKing": "An option for this could be to star the project and read through the docs in github pages? If you follow the project (as the docs are github hosted) it will be easy to read on all devices :). I would recommend any book on SOLID principles or Dependency Injection. If you have time you can download PHP: The Right Way by Josh Lockhart (also the main contributor to Slim).\nOne thing to bear in mind is that Slim is just PHP. You do not have to earn anything in-particular like you do with other frameworks. You have the freedom to do things yourself, just make sure you understand the middleware / DI container and you will be fine.. Perhaps an extension of group which take a in an array of options, such as prefix and middleware to add?\nI'd write a code sample but on mobile currently. Similar to what Dan said however group could take 2 arguments instead of bolting to the end of the declaration?. Perhaps a better solution would be to merge headers when we call withHeaders() ? So we over write any previous headers being set? Would add flexibility to setting headers. FIFO would be beneficial for readability, also if the adding was extended to accept arrays - readability would be key.\nLIFO would make sense on the after hook, FIFO makes sense on the before hook. But hey - smarter minds and the collective will prevail . ",
    "the94air": "You are right but is there any book that can help me throw. Because i usually does not have internet connection (Stupid ISP New prices ). can you suggest any any book that i can use.. ",
    "hornta": "But why do the PSR have that?. ",
    "jdrieghe": "Would love to see this one released. It would improve type hinting in the project I'm working on.. According to PSR-7, getHeaders() MUST preserve the original case. \n\nDespite that headers may be retrieved case-insensitively, the original case\nMUST be preserved by the implementation, in particular when retrieved with\ngetHeaders().\n\nHowever, the spec doesn't state we should preserve the HTTP_ prefix.\nThat said, the following section makes me believe the philosophy of the spec is to preserve whatever the user intended.\n\nNon-conforming HTTP applications may depend on a certain case, so it is useful\nfor a user to be able to dictate the case of the HTTP headers when creating a\nrequest or response.\n\nI'm not sure if that means we should remove the HTTP_ prefix though. I'll leave that to @akrabat :)\nIf it turns out we want to make changes here, feel free to shoot me a message and I'll create a PR. . I think this works fine again? May have been a temporary hiccup:\n\nCan this issue be closed?. ",
    "hannesvdvreken": "Thanks, Rob!. ",
    "nyl9488": "thanks, i solved it using curl request. ",
    "winks": "I was just trying to repro some more and I think this an Apache2 ProxyPass onto a CLI server..\n```\nworks\ncurl -XPOST http://localhost:9090/status -d \"xx=y\"\narray(1) {\n  [\"path\"]=>\n  string(7) \"/status\"\n}\n```\n```\ndoesn't work\ncurl -XPOST https://example.org/nano/status -d \"xx=y\"\narray(1) {\n  [\"host\"]=>\n  string(6) \"status\"\n}\n```. Sorry, was still editing for clarity.\nI think this can be closed as \"nobody uses php -S behind ProxyPass unless for testing\"\n. Yes, but I'm a firm believer that example code should work out of the box ;)\nBut 100% my fault not testing with localhost:9090, it boils down to\n```\nincorrect\nProxyPass /folder http://0.0.0.0:9090/\ncorrect\nProxyPass /folder/ http://0.0.0.0:9090/\n``\nand then$_SERVER['REQUEST_UTI']would be//subdirinstead of/subdirand of courseparse_urltakes it as short forhttp://subdir/`.. Not a hardcore Slim user, so not a real stake in this, but I do think it's important that there are alternatives which don't heavily rely on Symfony components. I haven't researched in depth how many dependencies the Symfony router has, but it looks like it would blow Slim's dependencies quite a bit. ",
    "mohammadreza": "@akrabat Thanks so much.. ",
    "sheldonjuncker": "Yeah, the tests passed on my Windows system where PHP_EOL is \"\\r\\n\"! I've fixed the tests, so I guess I create a new pull request and close this one?. When I first made changes, I made them on my fork's master branch instead of the branch that I created specifically for this pull request. (I'm new to contributing to others' repos.) \nI think it'll be easier if I just create a pull request for the correct branch.. Thanks for the help! I'll check it out.. ",
    "tafel": "Thanks for your answer. The point is I have multiple rights (admin, session.list, session.edit, session.remove, workshop.list, workshop.edit, etc.). I wasn't so sure that creating a class for every single use-case was a good idea.\nMaybe I can cheat a little, writing method in route like AuthCheck:isSessionList using public function _call () and \"guessing\" which right to test :-)\nIt's maybe a bit hacky... In the end, what you suggest is to create a class for each right, or at least one method per right in a class?\nThanks. Interesting. So it means two routes definitions. Something like this:\n```php\n// somewhere in bootstrap...\n$slimapp->group('/api', function () use ($slimapp) {\n    $slimapp->get('/users', 'UserCtrl:getList');\n    $slimapp->post('/users', 'UserCtrl:create');\n});\n// elsewhere in bootstrap (with slimphp-api/slim-acl)\n$acl_configure = [\n    // ...\n    'guards' => [\n        'routes' => [\n            ['/api/users', ['user'], ['get']],\n            ['/api/users', ['admin'], ['post']]\n        ]\n    ]\n];\n```\nSo I should more or less define my routes twice, one time for defining controllers and not-acl-middlewares, and one time for acl-middlewares. I think that's why I started to \"reinvent the wheel\". Because I'm trying to keep all my route definitions in one place.\nIs it \"better\" to write routes multiple times, depending on which middleware you use (here ACL)? I'm feeling more comfortable with everything concerning routes written in the same script.. ",
    "svanlaere": "Have you considered using unlimited parameters?\n$app->get('/[{params:.*}]', '\\App\\Controllers\\PageController:page');\n$params = $request->getAttribute('params');\nThen explode the $params array and use its parts.. Untested:\n$app->get('/blog[/{page:\\d+}]', '\\App\\Controllers\\PageController:page');\n. ",
    "drnasin": "My bad. Misunderstood the documentation! Works as expected!. ",
    "amreladawy": "Here is a pull request to add LINK/UNLINK \nhttps://github.com/slimphp/Slim/pull/2161. Updated the unit test to cover the new functions.. I want to add LINK and UNLINKto the list of methods in the function any() but I am not sure if this would match the approach of avoiding literally listing allowed methods just like PR #2156 . ",
    "kcloze": "can it  be done?\n$app->get('/default/{act}', '\\app\\controllers\\DefaultController:{act}');. ",
    "jmattheis": "the \\n or \\r\\n  doesn't make any difference, it just returns an array with one entry with an linebreak,\nWhat would be a usecase for that, I do not see any.\nAlso I find that some phpDoc is missleading, something like this: (in getheaders()\n*     // Represent the headers as a string\n     *     foreach ($message->getHeaders() as $name => $values) {\n     *         echo $name . \": \" . implode(\", \", $values);\n     *     }\nand for Message::getHeaderline\n* NOTE: Not all header values may be appropriately represented using\n     * comma concatenation. For such headers, use getHeader() instead\n     * and supply your own delimiter when concatenating.. @tuupola I thought that too.. @akrabat in the RFC its defined that it should be a comma separated list\n\nMultiple message-header fields with the same field-name MAY be present in a message if and only if the entire field-value for that header field is defined as a comma-separated list. \n",
    "tallona": "@geggleto I think the question above it that Slim 2.x is throwing fatal errors on notices when a notice shouldn't throw an error.. ",
    "aromka": "Had the same issue, this helped - https://github.com/slimphp/Slim/issues/1454#issuecomment-132616067. ",
    "preflight": "@akrabat - You're right; thanks for reviewing. ",
    "ncou": "just a silly question, but why Slim doesn't use the built in \"set_error_handler\" and \"set_exception_handler\" functions from PHP ? \nFor example, with the set_exception_handler() function doing a call to the \"app->handleException()\" function.\nActually if an exception/error is throw in the respond() function it will not be catched.\nAm i missing something ?. i think you can keep using the container with some pseudo code like below, and you could handle the cases for \"trigger(E_USER_ERROR)\", as a side effect, no more try/catch in the Slim Application.php file, and if there is an error/exception in the respond() function it will be catched :\n```php\nset_exception_handler([$this, 'handleException']); // use the existing function (searching in the container) as the callable.\nset_error_handler(function($e) {\n     throw new ErrorException($e->message, $e->severity....etc);\n});\n```. Yes actually Slim mainly catch the ~~\"router exception\"~~ \"middleware stack exception\", it's not acting like a \"debugger\".\nI suppose it's the intention since the set_exception_handler is not used.\nI wanted to have a confirmation, that it's the direction/philosophy wanted by slim framework.. Hi,\njust my 2 cents opinion, but i believe this modification could break some applications who use multiple header. I think for example to the header Content-Security-Policy you could use multiple headers with cumulative policies. With this modification only the first header will be sent. But this case is probably rare...\nKeep up the good work.. hummm i think i am starting to understand (or perhaps not :)). In fact this patch will replace (one time) the header if it's already present in the header() list. To sumup it will overwrite the possible headers added by the server (like for example the \"Cache-Control\" header). And for the Set-Cookie it will do an exception and not replace the first occurrence, because it could be added by the server (i suppose it's to handle the case with the session cookies).\nAm i right ? . thank you it's more clear. :+1: . ",
    "crtl": "@akrabat its not, you would have to generate them manually. But its only one command (the one in my post). You have to register your own error handler as stated in the documentation for System Error Handler. ",
    "tabuna": "Require support for PHP 7 reasonably. ",
    "Rotzbua": "@damianopetrungaro Here, need php7. I do not think that many people start new projects with an old php version. Also the new debian 9 release use php7.. I proposed a pull request #2404 increasing php version to 7.0. So we can make the first step and get rid of 5.6 for slim4.. The best solution is to replace mcrypt with openssl. For new ciphers, eg. poly, you need sodium.. ",
    "rotexdegba": "Why not keep Slim 3 active until Dec 2018 as per http://php.net/supported-versions.php (PHP 5.6 stops being supported on Dec 31st 2018 and PHP 7.0 stops being supported on Dec 3rd 2018). \nSlim 4 can be developed with a release date of Jan 2019 in mind, this will make it easy to have PHP 7.1 as the minimum required PHP version for Slim 4 and Slim 4 will be able to take advantage of the latest and greatest PHP 7 features. Companies and hosting providers still running PHP 5.6 or PHP 7.0 by Jan 2019 will be running a version of PHP with possible security flaws that won't be fixed and would be under pressure to have at least PHP 7.1 on their servers (by this time anyone still stuck with PHP 5.6 or 7.0 can conveniently keep using Slim 3).\nJust my two cents on this issue.. @geggleto I still believe the slim eco-system can still support people in the PHP 5.6 & 7.0 (and even PHP 5.5) camps by making Slim 3.X an LTS release (with an EOL date of like December 31st 2020) that supports PHP 5.5+ (as it currently does) and actively maintaining it with bug & security fixes and maybe a few lightweight new features. While the new Slim 4.0 would target PHP 7.1+(as per http://php.net/supported-versions.php).\nHowever, if PHP 5.6+ is the final verdict for Slim 4, I will always still be a Slim fan. . http://php.net/supported-versions.php. Php 7.0 is no longer going to be supported starting December 2018. This is a very good reason to make php 7.1 the minimum version for slim 4.. ",
    "luispabon": "I would agree with @rotexdegba . Slim 4 is a good opportunity for exactly the sort of breaking changes this thread is about.\nIn my experience, places that deploy Slim tend to be rather technical and use self-deployed hosting. As a contractor, I haven't used PHP5 once in a single project for a year.. I know it's not exactly an argument, but other frameworks have skipped 7.0 altogether, like symfony (and by extension laravel), also phpunit requires 7.1 now. There's no point today in starting any new projects in 7.0, and slim 3 works just fine with it.. Also, I think it's important to point out that keeping up with php updates is not what it used to be due to a lot of places switching to docker based deployments. Again, people locked up in php7.0 because of problematic server upgrades or shared hosting still have slim 3 available and working perfectly.. Ubuntu 16 users still have slim 3 available. If slim 4 released today, I'd totally get the point, but how close are you guys to RC status?\nI guess the main question is whether you want to burden yourself with maintaining compatibility with versions of PHP that are to be deprecated fairly soon. \nNullable types in 7.1 are great, but the void return type is more to the point IMO, especially when tightening up interfaces.. As a user I always found middlewares being LIFO something I tend to forget about from one project to the next. It's counter intuitive IMO.. As a user I would prefer not having the ambiguity of having both old and new available, and have this change clearly stated on migration docs.. ",
    "uaruscom": "The growth of the version and the growth of requirements.\nThis is the only correct way.\nSlim 3 ^ 5.6 || ^ 7.*\nSlim 4 ^ 7.2. Try this https://github.com/pllano/slim4-skeleton\nThe stable version will be after the release Slim4. ",
    "zelding": "My vote is on 7.1+\nJust the scalar type declarations are a good start, but imho the return type declarations are not good enough without the ability to define them nullable\nthat is my main reason. Thank you for the info, I'll do it the proper way than \u00d7). you can always create continerAware Controllers, and pull your dependencies \"manually\". that is the intended behavior; if you are troubled by the fact that the interface doesn't contain your own methods and properties, you can always annotate they type or check $container instanceof 'YourContainerClass'\nmaybe extend the default App class, and override the getContainer method. I think in general, if you have to add a comment that contains the word 'hack', you are doing something wrong. Alright, no offense taken, but I would like to argue against some of the ideas/methods:\n\nextract obfuscates the code. the function definition array $route doesn't tell anything specific,\n  and in the next lines you are just using variables that came seemingly from nothing.  \nI know for a fact the PHPStrom (and probably other ide's) will complain about the undefined variables.\nspecifically: $route = $this->app->map($via, $url, $controller);  it is not obvious where the $url is coming from; maybe add all options to an example or update the default_route_data\nthe controller doesn't specify a controller method, is it supposed to be a callable class ?\n\nI would either go through the route definition array (key by key) and do what needs to be done with them, or define a simple RouteDefinition class that handles the array and use that in the following steps.\nI like the idea of separating the configuration and the definition\n. Looking forward for PSR-66 :D. ",
    "adelowo": "This error is from your end.. Is your index.php file in /public ?. ",
    "JCarlosR": "@adelowo Yes. I can see the http://localhost:8080/employees.json right.\nBut I can't read it using /employees.json in the file_get_contents.\nI finally got it working, but in a different way:\nfile_get_contents(__DIR__ . '/../public/employees.json');\nThere is no a variable like the DIR but pointing to the public directly?\nThank you.. @akrabat Thank you.\nI got it working.. ",
    "egonom": "Sorry, what kind of content would you like?\nThe request uri from $_SERVER is \"/public_idea/1\"\nand the chunked path is \"_idea/1\" as above.. I'm so sorry! It was my mistake, but interested:\nI've got from our SA a test host with config pointed for the web directory. When I looked it, the SA were on holiday, so I created a simple .htaccess file, rewrite all request (without condition) for the /public directory. And it's remain...\nSo my SCRIPT_NAME was /public/index.php against /index.php (wo the .htaccess rewrite).\nAND... so the URI::createFromEnvironment() do that, what I wrote: it chunks the part of route which eq the rewrited target directory's name.\nThank you for the help!. ",
    "arimourao": "I guess the better approach is to use each as different projects. You develop your API using SLIM, then you can consume it using your CakePHP project. . ",
    "AlgyTaylor": "Just noticed that I'd put the form on to save as a \"PUT\".  Don't believe this to be a slim framework bug. Ah, an error in user!  Hadn't realised it needed to be a 3xx code.  I've learnt something new today.\nThanks both :1st_place_medal: . ",
    "adjenks": "Ah, alright. I wasn't considering receiving many of the same header. I suppose I just have to stick with exploding it myself.\nIt seems silly that the web supports multiple headers, each containing lists.. @tuupola \nAfter further reading I think the behavior I expected may still be correct.\nAccording to rfc2616-sec4:\n\nMultiple message-header fields with the same field-name MAY be present in a message if and only if the entire field-value for that header field is defined as a comma-separated list [i.e., #(values)]. It MUST be possible to combine the multiple header fields into one \"field-name: field-value\" pair, without changing the semantics of the message, by appending each subsequent field-value to the first, each separated by a comma. The order in which header fields with the same field-name are received is therefore significant to the interpretation of the combined field value, and thus a proxy MUST NOT change the order of these field values when a message is forwarded. \n\nSo, because it MUST be possible to combine them into one, which is what I was expecting, I believe it should return a list of strings, explode()'d on the comma, representing all of the data in all of the headers. I don't think it should include a list of strings each representing one header all together including commas, since there is usually only one anyways and the standard says they must be able to be combined.\nAlso, does this then mean that Slim's getHeaderLine() should return an array, each containing one line from each of the received headers with the same name if present? If so, it would be going against the standard since PSR-7 says that getheaderLine() returns the following:\n\n\n@return string A string of values as provided for the given header\nconcatenated together using a comma. If the header does not appear in\nthe message, this method MUST return an empty string.\n\n\n\n\nBased on Slim's behavior of getHeader(), getHeaderLine() should return an array of strings. Which is basically what getHeaderLine() does. So then what would the purpose of getHeaderLine be?\nSo I would like to reaffirm that I believe getHeader should return: An array of strings, containing no commas, containing all the separate values of the headers. If there were multiple headers, their values should be combined in order.\n. I guess it is a \"Slim\" framework.. @AmirHosseinKarimi and those interested, change the environment in the container like so:\n```\n,'environment' => function(ContainerInterface $c){\n$env = $_SERVER; // The super duper environment global.\n$env['REQUEST_URI'] = strtolower($env['REQUEST_URI']);\n\nreturn \\Slim\\Http\\Environment::mock($env);\n\n}\n```\nMore info: https://github.com/nikic/FastRoute/issues/175. I use it. It's good. Minimal learning curve. Not too opinionated. Easy to swap out parts.. ",
    "X-Tender": "I don't know if the output of the user:password@ values are still necessary or \"up to date\" because in Chrome you get an Deperacation error and the whole website don't work because Chrome blocks all traffic which goes through the base url.\n[Deprecation] Subresource requests whose URLs contain embedded credentials (e.g. `https://user:pass@host/`) are blocked. See https://www.chromestatus.com/feature/5669008342777856 for more details.. I use it for temporary locks, no production. I use JWT for normal logins like a user or admin area.. ",
    "basuke": "Well, I am writing a library inspired by Slim very much, so I is very natal to me using Slim\\Container other than other ContainerInterface compatible containers \ud83d\ude03 \nIf I can't use Slim\\Container as the super class of my Container, I will extend them from Pimple with the features of:\n- Psr\\Container\\ContainerInterface\n- property getter as an alias of get().\nThe latter is what I think good for separation of concern, on configuration and on runtime. But anyway with those features, I have no idea I can write shorter and cleaner code than current Silm\\Container.\n. Well I don't want to copy them, but I understand the policy. Thanks.. That sounds good and a little bit of worry. Besides this topic, I am interested on v4 architecture design. Is DI Container optional on v4? Or just removing those reliance? If latter, What is the alternative to supply those information to an app?. ",
    "eneropp-dave": "Thanks @geggleto, can you explain why it's not good practice please? \nIn this case I have 3 routes which are used for specific purposes to wrap and call 3rd party APIs and are used individually by, however a seperate requirement of the UI is orchestrate all three calls in certain circumstances, in which case having one route that fires the other three seems quite logical. So in this case I want to log the route call and parameters, when they are called directly, and also when they are orchestrated.\nI am using classes and methods for some aspects of the code, however in this case I don't see the need to refactor 3 classes only for the purpose of orchestrating calls to the other routes, seems like extra complexity for little gain.\nCan you provide some guidance on where/how to modify the request object as per your last comment please?\nDeprecating the ability in future versions is fine, but when people want to do it, then we can obviously just go around the framework by using something like Curl to make a call to outside the current app, seems better to facilitate it in a way that make sense in the framework rather than have people work around it particularly if they have already coded against the current solution.. Thanks for the clarification, that helps a lot.. Thanks @geggleto  will do. ",
    "hefengxian": "@tuupola I'm not sure about this, I was using Ubuntu to write code, deploy on Windows then I found this problem and I got nothing special setup with Apache. ",
    "pengu-fr": "I have a problem with this implementation...\nRemoving the ob_get_clean from the \"catch(s)\" of Route::__invoke() breaks the ob_levels, as Route::__invoke() start the OB, but never close it in case of error. If we don't use Slim's default errorHandler, we have to know/implement Slim outputBuffering setting again, and close the OB correctly if needed... and I don't think it should be implemented in the errorHandler\nIMO it's not the error handler responsability to handle the output buffer started by the Router. It should not even know about the outputBuffering setting.\n. ",
    "tchapi": "Ok understood, thanks a lot for your answers . Hi \u2014 thanks for your response. It definitely works but I can't use my middleware that does the same thing for normal pages, so it feels like duplicating the code for nothing. I was hoping that one could attach the handler per group or per route, a bit like a middleware.\nGuess I'll create a kind of general service to stay DRY\nthanks again\nBR. I'm using https://github.com/akrabat/rka-content-type-renderer to render different formats, and I would like my notFound or notAllowed handler to use them too, for the /api group, not for the other routes (not written here, but I have some other routes apart from the api routes).\nHere is some code so you can understand the whole picture. The part I have a feeling I will need to duplicate is the middleware, that checks the format header, modify it according to params in case and do a few more things to the response afterwards\n $this->slimApp->group('/api', function () use ($renderer) {\n        $this->get('/platforms', function($request, $response) {\n             $platforms = /* some array with data */\n             $response = $renderer->render($request, $response, $data);\n             return $response->withStatus(200);\n       });\n       /* more api routes & methods */\n  })->add(function ($request, $response, $next) {\n        $request = $request->withHeader('Accept', 'application/json'); // default\n        $format = $request->getParam('format');\n        if ($format) {\n            $mapping = [\n                'html' => 'text/html',\n                'xml' => 'application/xml',\n                'json' => 'application/json',\n            ];\n            if (isset($mapping[$format])) {\n                $request = $request->withHeader('Accept', $mapping[$format]);\n            }\n        }\n\n        $response = $next($request, $response);\n\n       /* Some other things I do on the response */\n\n        return $response;\n  });\n\nThanks a lot for your time !. Thanks for the code, I understand the concept of the $contentType var that can be modified in the route to change the behavior, but my problem is within the notFound handlers, not the conventional routes.\nIn fact the underlying problem is that the notFound handlers do not have access to the route (it's empty, by design), so I cannot decide whether or not the notFound was triggered inside the api group or not. That's why I wanted a notFound handler per group, but it doesn't exist;\nBasically I'll do something like that in the middleware and in the notFound Handler I guess, though it's clearly not ideal : \nphp\n$isApiRoute = (substr($request->getUri()->getPath(), 0, 4) === 'api/');\nBut it works. I have to duplicate the code, that's what I wanted to avoid but it seems unavoidable in my case.\n. ",
    "designcise": "@silentworks yeah but for people looking for a quick-start, it's not really friendly. Think of it this way, why would anyone want to show 'Slim' brand on their website? I'm just saying a user should easily be able to overwrite the 'slim' name across the framework with a simple setting. Please do reconsider, thanks!. @silentworks ahh, totally slipped my mind, but I can still imagine some scenarios where it may be useful such as demonstrating to a client in development mode, or making a presentation. Customization is never a bad thing.. ",
    "ramonberrutti": "Solved, I just have anothe method /users/add that conflic with this.. ",
    "alexweltman": "Thanks guys! Disabling the content-length header didn't fix it.  Next I will try disabling all my middleware.. ",
    "jasonetwork": "Yup, that's exactly what I landed up doing, and it works fine with the middleware. It just seems wrong to have to make a \"patch\" for something like this. This problem doesn't exist when using JSON data. It just seems so buggy the way it is right now. I actually think the solution is a simple fix. If malformed XML is detected, it should simply return null for $request->getParsedBody(). This would fix the problem, IMO.. Well, if that's the case, then there shouldn't even be a getParsedBody method. With your logic, we might as well just retrieve the raw body data and validate it ourselves in all cases. I don't think its asking too much to simply return null if malformed XML is being submitted. . @akrabat, I'm using the latest version 3.8.1. Hmm. Interesting. Composer shows that the version installed is 3.8.1. Nice catch. I'll have a look into that.. For some reason, in my composer.json file, it showed that I was running 3.8.1, when in fact it was an older version. Not sure what went wrong there. Removed and reinstalled Slim, and now working as expected. Thank you much @akrabat for pointing that out!!!!! . ",
    "VPageDevelopment": "Thanks for your awesome reply. Sorry for the delay in response. I had no idea about that and i need to contact them for that info ... Thanks for your awesome reply. thank you so much .... ",
    "Mariyo": "Yes, its working now! Can you describe me shortly, what is the issue when its enabled? Just for educational purposes.\nThx. Ok, clear now, this I've checked in Headers of my response. \nI am just confused, why it was truncating data only in some cases, like in case with selectbox of some (bigger) size. In other cases Tracy was there even with Content-Length header.. @tflight I actually tried to replace Nette Forms Selectbox by normal <select>, but problem continued.. Yes,\nthis way I extend Slim\\Router with mine, where I added my enhancement. But I thought, it would be nice to have, because its not big deal to implement and it improves router a lot. . ",
    "gregory-gueret": "thank you for your reply,\nBut my need is do not run ini_set, but I can set a default default_mimetype in php.ini. Yes ini_set is disabled for internal security reasons and this simple modification will make it possible for me to use Slim. ",
    "noogen": "How about a compromise by using the @ symbol?  @ini_set('default_mimetype', '');. I did not know that.  Saw it uses in other places for handle the same situation.  Did some reading on it.  Now I know.  Thanks @akrabat . ",
    "Holzberg": "I created a group with a path of '' (empty string).  That's not really a prefix, but in essence is a grouping.  I did this to assign scopes around my routes for chadicus/slim-oauth2-middleware. Yes please.  This would allow people to get the underlying Middleware they added if they wish.. ",
    "giftnuss": "Is there a way to give the route the precedence. At least I forgot to mention, that at end the default Route matching '/' is used for me.\n. My opinion is this should be an independent package. Behat is nice but I dont't think it should be a dev dependency by default.. ",
    "odrik": "ok thx. ",
    "taw34923904": "See it as resolved for me.\nJust set $_SERVER['SCRIPT_NAME'] = '/api/'; before initiating the Slim object and everything works as expected. I guess that's why we can't have nice things.. ",
    "TKDBB84": "I think there's something else at play in your codebase, I'm fairly certain slim isn't forcing a cache header.  To test this I spun up a very quick Slim only application from packagist slim/slim\nrequire __DIR__ . '/vendor/autoload.php';\n$app = new \\Slim\\App([]);\n$app->get('/', function ($request, $response, $args){ \n    $body = new Slim\\Http\\Body(fopen('php://temp', 'r+'));\n    $body->write('foo');\n    return $response->withBody($body);\n});\n$app->run();\nWhich yields the following headers:\n```\ncurl -vvv http://localhost:8000\n Rebuilt URL to: http://localhost:8000/\n   Trying ::1...\n* Connected to localhost (::1) port 8000 (#0)\n\nGET / HTTP/1.1\nUser-Agent: curl/7.41.0\nHost: localhost:8000\nAccept: /\n< HTTP/1.1 200 OK\n< Host: localhost:8000\n< Connection: close\n< X-Powered-By: PHP/7.0.19\n< Content-Type: text/html; charset=UTF-8\n< Content-Length: 3\n< \n* Closing connection 0\nfoo\n```. \n",
    "rkkoszewski": "Hi, thanks @TKDBB84 for the code snippet.\nI tried it out and indeed the Cache-Control and Pragma headers were gone. And I was able to find out what is causing the issue, altough I have no idea how to fix it.\nIt seems that the PHP function \"session_start()\" is causing the headers to be created. Seems like here somebody has posted a similar question here: https://stackoverflow.com/questions/40320221/php-session-adding-headers-pragma-no-cache\nThank you again for helping. Greetings.. Hi, so I've found what was causing the issue. The method that was giving me the error had a complex POST request, and therefore in order to test it manually I used an other method that can be accessed by a simple GET request, so I could debug the result. The reason why both ways were showing for me the same result is because it was the same. I was in belief that I was using the same code snippet, and I didn't notice that the POST method I was using the $request instead of the $response to call the withJson method. Both $request and $response look visually similar and that's why I didn't notice that I was using the wrong variable. So it was throwing an exception actually, but I've never seen it because I was testing it on the GET method.\nI would like to thank everybody who commented and tried to help me solve the issue. At the end it was just my fault. Everything seems to be working perfectly fine now.\nGreetings and thanks.. ",
    "ywqyuan": "ok  tks  !!! change the php version. it's work!. ",
    "Grafikart": "I don't get the change in coveralls % since my changes are covered by new tests :(. I can implement the 2nd possible change but do I keep the \"first argument as array\" ? or only the spread operator ?. Fixed. ",
    "ayushav12": "Virtual host : bady.dev\nURL : bady.dev/api/courts/1/2017-06-25. @akrabat excluding the typo of \"(double quotes), what am I doing wrong?. @akrabat It shows me the same error.. Yes, that works fine\n . I resolved the error. It was with my virtual host.\nWhile working on php development server, end-points were working fine.. @copynpaste Sorry for posting a wrong issue.\nAnyhow, you know the solution??\n. But i have User#14 created in my database.\nAnyway, thanks man.. Thanks man for the help!!. I figured out the problem!! A stupid mistake.\nNo need for : $logger = new Monolog\\Logger('logger');\nInstead use : $logger = new Logger('logger');\nAnd all the other places where i have made such mistake... Thank you for your help again @akrabat !!\nDo I need to define the service provider in Container??\n. ",
    "gpredl": "second argument passed to 'get' must be a callable, not array. \nright syntax:\n$app->get('/api/courts/{id}/{date}', '\\App\\Controllers\\AvailabilityController:getCourtAvailability'); \nor\n$app->get('/api/courts/{id}/{date}', \\App\\Controllers\\AvailabilityController::class . ':getCourtAvailability'); \nand you have a double-quote in your code:\n$app->get('/api/courts/{id}/{date}',['' <<<<. i'm doing like this\n$app->get('/ftp-users', VhostsController::class . ':getFtpUsers')->setName('getVhostFtpUsers');\nand have no problems at all.\ndid you include the class with 'use' statement?\n. ",
    "jakelehner": "Is the error you're getting a slim error, or generic not found from the web server?\nPerhaps your web server config isn't sending all routes through you slim app. Try the previous \"hello world\" example with /api as the URL. . ",
    "jeremiecourlivant": "It's the same thing with the example of the documentation.. Ok.\nBut with your exemple, the same thing appends.. 7.0 for the web server. I have research about Content Length header and I find this topic . At the end, I find the solution : put addContentLengthHeader in false in the settings. Now it works.\nThank you for your help.. ",
    "paperscissors": "Got it--- apparently Slim was adding a super long Content-Length header size to the $response and it was making the request take a lot longer to load.\nI changed the initialization to this and it fixed the problem:\n$api = new Slim(['settings' => [\n        'addContentLengthHeader' => false,\n    ]]);\nConfirmed that the full render + load time is now 113 ms instead of 10,000ms.\nThanks!\n. ",
    "AhmedBHameed": "Hi Akrabat,\n\nPlease check this link it is a single file application to demonstrate error handling\nRepository\n\nI solve the issue by wrapping my app with try...catch and use my error class called inside the catch using throwable with php 7 and exception with php less than 7 (5.6)\nit works perfectly with all but i was wondering what is wrong if i use the built in error handler of Slim framework!!\nExtra link for heroku web hosting\nIn this app the default php interpreter is 7.1.3\nwhen i go to theis link it show me the error response with 500 only with no explicit response like i programmed.\nHope that will be clear to you. \nThanks in advance.. Hi @akrabat \n- Did you test the single page project ?? waiting your answer. Also please advice me if i should go with try and catch approach or there is something wrong with my code that prevent PHP7 from using slim built in error handler.\nThanks . Awww, really sorry sir\nDon't worry i will be patient.\nWishing you all the best from my heart.\nSorry again.\nHave a nice holiday.. @geggleto sorry i did not get you point do you mean about solution? . ",
    "joeygallegos": "+1. I made some modifications and switched the order of the rewrite conditions and that somehow helped me achieve what I needed (even though I needed to test it in production).\nCan anybody maybe just explain why it works now for me? I'm thinking the priority of the conditions is what was throwing the whole request off.\n```\n\n\n        Options -MultiViews -Indexes\n    \nRewriteEngine On\n\n# Move traffic from www to non-www domain\nRewriteCond %{HTTP_HOST} ^www.(([a-z0-9_]+.)?example.com)$ [NC]\nRewriteRule ^(.*)$ http://example.com/$1 [L,R=301]\n\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^ index.php [QSA,L]\n\n\n```. ",
    "juanpagfe": "Hi @AhmedBHameed.\nThe problem is pretty simple, since PHP 7 classname Error is predefined and used internally.  You could change the Error name to ErrorHandler.  Checkout the documentation for this: http://php.net/manual/en/class.error.php. @akrabat Of course, I'll create a PR in a minute.. @geggleto I think it is always needed.  Even if it has not been needed.  Better to have it and don't need it than need it and don't have it.. ",
    "talyguryn": "@juanpagfe please fix the link in your comment \ud83d\ude2c. ",
    "acfo": "fix for issue #2272. ",
    "karsasmus": "Did you write slim / slim? \nTo install slim via composer you have to write slim/slim \ud83d\ude09 . ",
    "cgarrotti": "I typed:  composer require slim/slim\nBut the error is: \nProblem 1\n    - The requested package slim/slim No version set (parsed as 1.0.0) is satisf\niable by slim/slim[No version set (parsed as 1.0.0)] but these conflict with you\nr requirements or minimum-stability.\nInstallation failed, reverting ./composer.json to its original content.. No worked. I think is my PHP.ini is not configured properly. What i need enable to use slim?. The output is:\nPHP 5.6.31 (cli) (built: Jul  5 2017 22:25:43)\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies. ",
    "Ikke": "Yes, I've already used that attribute in middleware, and that's working alright. But now I'm trying to get the current route in a Twig extension (somewhat like is_current_path in Twig-View), but that's already setup before $app->run() is executed. . @geggleto I just used Twig-View as an example. That extension itself does not need the current route, as it is just looking at the paths, so it can just do with the router and request object.\nBut I'm trying to match on the route name instead of its path. That way you don't need to provide the path params. But getting the current route proves to be difficult.. @geggleto Alright, thanks. Then I'll use my work-around for now.. ",
    "Finesse": "@JustSteveKing I don't know whether browser sees a difference between\nCache-Control: no-store, no-cache, must-revalidate\nCache-Control: max-age=86400, public\nand\nCache-Control: no-store, no-cache, must-revalidate, max-age=86400, public\nActually it is not so important. The goal is to overwrite default HTTP headers added by the server.. @geggleto How to do via a middleware? Call header_remove('Cache-Control') in a middleware?. @geggleto Why? Other PHP frameworks replace the default header when an application sets a header and Slim doesn\u2019t.. @akrabat I don\u2019t know. I use Apache and I get this extra header when I run the code from the issue description.\nAlso you can run this simple code with Apache and get the extra header:\n```php\n<?php\nheader('Cache-Control: public, max-age=86400', false);\necho 'Hello';\n```\n. @akrabat Session is started in the Slim Skeleton index.php apparently.\nI think that caching and sessions can be used together.. ",
    "Fritofour": "Hi, \nIs there a release planified for this issues?\nThanks a lot!. ",
    "bnf": "I actually tested it with 3.x as well (can be cherry-picked without conflicts) and it run's fine. But I think it could be considered as a BC break, for applications that use MiddlewareAwareTrait's $stack property somehow. That's why I didn't even ask for merging into3.x.. Slim\\Collection and Slim\\Interfaces\\CollectionInterface seem to be unused with this change applied. May those be removed as well?. Hi @akrabat, hi @l0gicgate,\nSorry, I missed your comments/thoughts. Therefore now my (very late) reaction:\nI still think this is the right approach and actually considered it ready. Therefore I didn't do more work on this, because I was waiting for it to be merged. It's actually used in production as a backport for slim v3: https://packagist.org/packages/bnf/slim3-psr15\nThe main motivation for sticking with the old middleware dispatcher is the $response object. It needs to be handed over all the way from the first double-pass style middleware to the very last one.\n\nI'd like to explore if we can make PSR-15 the default internally and \"wrap\" the current signatures\n\nGoing with a pure PSR-15 solution and adding a wrapper for double pass middlewares (as in #2555) results in (hard to detect) breaking behaviour, as the wrapper has to create a new $response object for every double pass middleware. That means upgrading to Slim v4 will be a bit of a pain. (IMO)\nTo illustrate that: The following code will no longer work with #2555, as the $response will not be passed, but rather silently dropped:\n$response = $response->withStatus(403);\nreturn $next($request, $response);\nExisting middleware code that expect to be able to pass a modified $response to the $next middleware will fail with that change. I know that it's a technical limitation due to the changes in PSR-15.\nFor exactly that reason I decided to keep the existing dispatcher instead of creating a new pure PSR-15 one.\nIf you find that limitation of dropping $response to be ok, than please go ahead with #2555 otherwise I'd ask you to reconsider this approach.\nThanks, Benjamin. For technical reasons I would prefer LIFO. With FIFO Slim could not [1] implicitly build the recursive middleware stack when calling add (see MiddlewareAwareTrait) [2], but would need to cache the list of middlewares first, to create the stack (by reversing the cached middleware list) when the stack is executed.\nWhile FIFO might be more convenient, I think LIFO fits better for Slim \u2013 well, because it should be slim.\n[1] Switching the middleware implementation to a queue based one (where each middleware's $next points back to the Middleware Dispatcher which then calls the next middleware) would allow to keep the implicit building functionality, but requires managing a middleware index (I personally prefer the current implementation)\n[2] A middleware needs have a reference to the next middleware. In FIFO the next middleware is not yet known when calling App:add.. > We have two choices here:\nOr maybe we have a third one:\n\nDrop support for legacy (in this thread sometimes also called PSR-7) middlewares at all\n\nThere is no technical need for Slim to bundle the incompatible (as seen from the BC view) implementation, as wrapping a PSR-15 middleware by injecting a new ResponseInterface for every middleware can be done outside slim for both, normal and lazy middlewares. (Bundling this support is technically really only necessary if we would try to stay compatible, as #2379 did.)\nAdvantages:\n * Slim stays clean (and well, slim)\n * It becmomes very clear that it is not Slim's fault when the legacy and non-recommended pattern (altering the ResponseInterface on the way down the middleware stack) now breaks (as the developer is aware of what the wrapping does, when using a wrapper class, as opposed to some magic wrapping that happens behind Slim's doors)\n * Upgrade documentation could provide a simple example of a PSR-15 middleware adapter which creates a new response. This will probably actually result in quicker adoption of the PSR-15 interfaces. Why? I think it's really easy to understand how to rewrite an existing middleware when looking at a simple wrapper/adapter class. (Well, there is one exception: when the response was altered you get a problem, but that's the intention: The developers need to detect this pattern upfront, and then rewrite the code, before getting into production (where is silently fails and becomes hard to debug).\n\nI think we're going to have to go with option 2\n\nDon't think s;, option 1 is valid: As this pull request is using a queue a stateful dispatcher is needed anyway ($this->stages), so adding another state (shared Response) would be possible.\nPS: The name \"PSR-7 middleware\" is quite misleading (as there are no middlewares in PSR-7 and as PSR-15 middlewares do use PSR-7 interfaces, this sounds as if the new middlewares are referenced. Yes, naming is hard. Double vs Single pass is quite unknown. But maybe \"legacy\" or \"classical\" or \"slimv3 middlewares\" is better than?. @akrabat Well, very good question. Pseudo PSR-15 closures would offer the same BC problem, as we \"silently\" change the signature (though that's easier to detect, as the previously passed third parameter now becomes null and results in hard errors when trying to be used as callable).\nIt's a bit of a pity that sth like the following is a bit clumsy to write:\n$app->add(new class implements MiddlewareInterface {\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        return $handler->handle($request);\n    }\n});\nBut it's something I use rather often, as seen in the README for https://github.com/bnf/slim3-psr15\nSo when dropping the legacy middlewares I'd probably add a proper type declaration on App::add to accept only MiddlewareInterface.. Can you elaborate why the middleware runner/dispatcher uses a queue based approach instead of the previous stack based one, that slim used to use?\nMaybe I start with a comparison, to depict the difference of queue and stack based dispatching, so we know what we are talking about here:\nLegend:\nM = Middleware\nD = Dispatcher\nH = Request Handler\nC = Intermediate handler \u2013 might be a closure ($this->tip = function for slim v3, would be an anonymous RequestHandlerInterface for a native PSR-15 implementation)\nStack based (as in slim v3):\nD -> C1 -> M1 -> C2 -> M2 -> C3 -> M3 -> C4 -> M4 -> R\nThe stack based dispatcher D wraps every middleware Mn into an intermediate handler Cn which is passed to \"previous\" middleware (that is the $next closure as known from slim v3, would be a PSR-15 RequestHandler for a native approach in v4). It could also be seen as recursive graph:\nD -> C1 -> (\n  M1 -> C2 -> (\n    M2 -> C3 -> (\n      M3 -> C4 -> (\n        M4 -> H\n      )\n    )\n  )\n)\nThis reverse way of passing a reference to the \"next\" middleware (e.g. M3) to the \"previous\" middleware (e.g. M2) using a helper closure C3 is the reason that slim v3 middleware order is LIFO (and not FIFO), as the dispatcher needs to know the last middleware (M4) first, to be able to pass a reference to pass the intermediate helper C4 to M3.\nQueue based (as in this pull request)\nD (has $stages) -> M1 -> D -> M2 -> D -> M3 -> D -> M4 -> R\nThe queue based dispatcher manages an array (or ObjectStorage) to store the available middlewares and uses a counter (or modification of that array/ObjectStorage) to keep track of the position in the dispatch cycle we currently are. The counter is increased (or as in this pull request the next middlewares is removed from the queue) on every call(back) to D from a Middleware Mn. All middlewares therefore call back to the dispatcher. That means this approach does not need intermediate closures/handlers and looks a bit cleaner from the call stack point of view \u2013 but to store the ordering and list of middleware this dispatcher needs to keep track of the middleware in a queue on the heap, which is susceptible for concurrency issues (think of subrequests).\nThat means for subrequests it's important that the dispatcher creates an independent state (a new Runner instance or a clone of itself), to prevent conflicting states.\nI'ld like to understand whether the queue based approach is used for a (good) reason or because it was easier to implement, more obvious, or because you want this implementation to be able to support FIFO?\nI personally find the stack based approach looks cleaner (looking with theoretical computer science eyes here) as state is nicely isolated in a intermediate closure/handler and because the call stack does all the job of managing the state for us.\nMaybe that is the drawback of that approach, because the call stack may become (too) huge? I don't know\u2026 I don't have numbers\u2026 Slim used to use the approach of using a clean and simple dispatcher which is hard to \"break\". If we change that, we should know why. I wouldn't like Slim to switch to the queue based approach only because all the others do it that way.. > This is why it's used in so many tutorials for SDKs and libs for other components. We need to not lose that.\nGoot point. So talking about simplistic syntax sugar, maybe:\n```php\nuse function Slim\\middleware;\n$app->add(middleware(function($request, $handler) {\n    return $handler->handle($request):\n}));\n```. Ah, didn't know the ZF functions.\nMinor thing: I don't like that they type declare a return type of Zend\\Stratigility\\Middleware\\CallableMiddlewareDecorator, one should really declare to return \\Psr\\Http\\Server\\MiddlewareInterface, as that's what the user of that function should (only) expect to receive here, every change of that return type would be a BC break, other than that, that's pretty much what I meant.\nStill, my proposal (which is not mine as we see now) was for pure syntax sugar, in case of readability I personally prefer explicitly instanciating classes, instead of functions that wrap class instanciation into a shorter syntax. (as functions returning objects are hard to grasp mentally without an IDE, but I know that's not a focus for most)\nI find the following more readable:\nphp\n$app->add(new ClosureMiddleware(function($request, $handler) {\n    return $handler->handle($request):\n}));\nBut sure, this doesn't look \"sexy\" in code examples.... I think that when we use a mixed argument for add() anyway (to support lazy instantation), then it's fine to support closures as well. As we \"lost\" the advantage of a proper type declaration anyway, it's fine to support Closure. I agree that BC is not a big issue here.\nOn the other hand, an alternative could be the following:\nIn another project I used two separte signatures for the instanciated and lazy registration case:\n```php\ninterface MiddlewareDispatcher {\n    /* Adds a middleware to the stack /\n    public function add(MiddlewareInterface $middleware);\n/** Adds a lazily instanciated middleware to the stack */\npublic function lazy(string $identifier);\n\n}\n```\nBut I figure that a generic method name lazy() would probably be inappropriate for the generic App class \u2013 and an ugly camel case method name like lazyAdd() doesn't sound very \"slim\".. > Or am I missing something here?\nYes, the adapter example is a bit simplified. It actually would need a reference to the container in most real world cases (to be able inject dependencies into the middleware):\nphp\n$app->add(new MiddlewareAdapter(MiddlewareClassName::class, $container));\nThis would become very ugly for a lot of lazy middlewares.. @akrabat I see three usecases/reasons:\n\nThe main usecase is backwards compatibility:\nWhen class:method dispatched method in previous version for classes that implement RequestHandlerInterface, it should stay that way (if possible).\n\nThe usecase for implementing RequestHandlerInterface in that scenario could be the following:\nIf the route target wraps some PSR-15 middleware internally, it passes itself ($this) to the middleware process function to achieve, that the wrapped middleware calls back to it's handle method. In this case the handle method is implemented to perform some internal work, but not meant to be dispatched by slim. The developer explicitly defined that by specifing a method in class:method. He really only wants to call handle if he specifies class as target (or defines the method name to be handle).\n\n\nProbably a very bad reason, but I still name it.\nHaving multiple methods in a controller where handle() is the main action, that has some additional action that could be invoked when subsequent requests or so. (As said, this is an ugly usecase and should probably be split into multiple classes)\n\n\nBeing compliant to the documentation:\nIf someone defines a string class:method it is expected be honored, instead of being silently ignored (an alternative to silently ignoring :method would be an exception, but I'd vote against that).. > It's getting really messy in there\n\n\nWell, I agree on that. For that reason my next pull request would have been to heavily refactor that class into smaller, type safe functions, that are way easier to grasp:\nhttps://github.com/bnf/Slim/blob/834fd687938d84cea6f7a7f0c6858158f02c870b/Slim/CallableResolver.php\nThe related branch is here: https://github.com/slimphp/Slim/compare/4.x...bnf:improvements-experiment-v3\nSo maybe it's not a matter of removing that functionality, but rather cleaning the code up.. > @akrabat we need to hold off on all merging before #2555 is in. I've rebased twice already.\nI think that's a bad attitude. #2555 is far from being ready to merge. Rebasing is a regular developer task, nothing to be mentioned as a burden. Blocking all other improvements for that reason is selfish and prevents progress, sorry.\nThis patch (in combination with the followup as shown in https://github.com/slimphp/Slim/compare/4.x...bnf:improvements-experiment-v3) and #2580 are actually preparatory improvements from the other PSR-15 patchset #2379 that you just closed. I re-added these as separate pull requests, as they would have been lost otherwise. What I want to say: these patches (in combination with the original PSR-15 patch #2379) do already wait way longer than your PSR-15 patch to be merged.. > when I asked you back in October if you were going to rebase your PR\nYou didn't ask for a rebase. You asked:\n\nare you moving forward with this PR?\n\nThere was nothing to move \"forward\", it was ready for a very long time. ;)\nAgain, @akrabat was talking about exploring an alternative approach (native PSR-15 dispatcher). Now you proposed one, but I'm not convinced that it is the right one (I raised those complaints: stack vs queue dispatcher), and I don't see a public final decision on that. Therefore my assessment: It's far from being ready to merge.\n\nplease be understanding of my decisions of doing things in a certain order\n\nA project like this in not just you and your current patch and your decisions. Please think about that. I saw the same behaviour when your error handling refactorings took long to be reviewed. You became quite impatient. Technical reviews take time and are not about personal feelings, or the invested time, but about raw facts.. I like the idea to remove the pimple dev dependency by mocking ContainerInterface in unit tests.\nI personally would prefer mock generators like the phpunit MockBuilder or Prophecy over implementing separate Mock* classes, as mock classes basically become yet another implementation, and mock generators allow assertions (without static call counters).\nNow, when comparing MockBuilder and Prophecy mocks, I'd propose to go with Prophecy for four reasons:\n\nProphecy is stricter than MockBuilder. It does not allow to create mixed proxy/stub/mock classes. That means: No hidden (proxy) calls to real functions of the mocked class, which happens when one method was not listed in the MockBuilder's setMethod but is called from the tested code. (Note: This problem could be \"solved\" by permitting $this->createMock() only, and not $this->getMockBuilder(\u2026))\nIt may be easier to understand: There is one object (ObjectProphecy) and a separate mocked instance (as generated by ObjectProphecy::reveal). There is no mixture in types, as in MockBuilder.\nI think it is more flexible. It allows to define promises that mutate state \u2013 which is much easier to write than other approaches do (call order prediction) and describes the dependency in a very formal way (of course that's opinionated). I think that's better than predicting the order of calls, like usually done with phpunit MockBuilder. Please see the following commit, how this can be used to mock the behaviour of withAddedHeader for PSR-7. I think that would allow to remove the specific PSR-7 implementation from unit tests as well (if we want that):  https://github.com/slimphp/Slim/commit/e53dc953582a980ef4bff7be6e5c2b7ac4e2279d \nSebastian Bergmann wrote \"If I were to create a new mocking framework today it would probably look a lot like Prophecy. Which is why PHPUnit 4.5 introduced out-of-the-box support for it.\" https://thephp.cc/news/2015/02/phpunit-4-5-and-prophecy and also \"I'll probably recommend Prophecy over PHPUnit's own implementation at some point, yes.\" https://twitter.com/s_bergmann/status/536440940102438912\n\nI've prepared a pull request in #2602 to demonstrate how that change would look like when using Prophecy.. Well, I personally prefer a name that describes the functionality. With PsrMiddleware it's not that clear whether the middleware is implementing PSR 15 or (as in our case) adapts a PSR-15 middleware.\nAnyway, I've no strong objections against PsrMiddleware so i'll push a patch that renames that one (consistent naming across frameworks is probably not that bad).. I used call_user_func since that was used throughout the Slim codebase. I think those occurrences should be changed in one go. Will push a patch for that.. I missed that one, will fix.. Yes, I pushed a patch for the switch to psr/http-server-middleware.. The is not the signature of the (classic) double pass middlewares, it actually is:\nfunction (ServerRequestInterface $request, ResponseInterface $response): ResponseInterface\nYes I know, you can drop unused argments, but this kinda hides the fact that $response argument (which will be passed as second paramter) is thrown away by this wrapper. The double pass middleware is degraded to be a single pass middleware.\nThat effectively means that a middleware that uses this $next callable will no longer be able to do the following:\n$response = $response->withStatus(403);\nreturn $next($request, $response);\nThis means the double pass middleware is changed to work like a single pass layer. I think it would be better to drop support entirely, than providing double pass middleware support which is broken.\nTherefore #2379 suggested to keep the old middleware dispatcher as it allows to pass the $response objects through all middlewares (skipping PSR-15 ones, without throwing the $response away).\nSo either we live with this limitation (which is rather sad), or go with the apporach in #2379, or store the $response out of band (which is ugly, but would keep compatibility).. > ServerRequest should be used to passed data in the middleware pipeline instead anyway.\nYes, I fully agree on that, but that policy is kinda new and arised due to PSR-15. Prior to that initiative, it was common to pass a modified response from outer middlewares to inner ones. \nAgain, why do you want to provide a legacy layer which clutters the code and doesn't even bring full backwards support as benifit with it?\nPlease look how easy the changes in #2379 are. It allows for quick and safe adaption to Slim v4 and then Slim v5 can drop the old dispatcher and can become a pure PSR-15 implementation.\n\nsupport for PSR-7 will most likely entirely be dropped in Slim 5\n\nPSR-7 be removed in Slim 5? I doubt ;) I guess you mean double-pass style middlewares.. In order to support subrequests, run() needs to create a new runner on every run (that may be new class that is instanciated or a clone of itself).\nrun() currently has side effects: it stores the state ($this->stages) of the current run in the (singleton) class, that means a second call to run  \u2013 which might happens during the first run \u2013 would result in conflicting states that are tried to be stored in one (singleton) instance of this class.\nNote, handling this explicitly is (now) necessary as this patch switches to a queue based dispatcher, away from the previous stack based on, where workarounds like that were not needed as the sequence of the middlewares was stored implictly thanks to the closures ($this->tip = function (\u2026) use ($callable, $next) \u2026) that connected these middlewares by wrapping them in a recursive call chain.\nI know #2078 removed support for App::subRequest, but I think the pattern of support subrequests has not been dropped(?). The usecase are sub requests. Think of a backend context that renders a preview of the frontend, or whatever. See https://github.com/slimphp/Slim/pull/2581 for a patch that adds the missing test for this case.\n\nI could explicitly lock the run method while queue\u2026rewind at the end if necessary.\nWouldn't help, as the invocation might happen during the invocation of a middleware.\n\nIf we really go with the queue based dispatcher we should create a new runner (cleaner than clone) in run. Just saw also zf switched to that approach (they used clone before, and I wanted to reference them for that as \"bad\" example \u2013 anyway, good that improved already): https://github.com/zendframework/zend-stratigility/commit/04d418adbfca1a1a769261c8a044be087548aae6#diff-26f56039a32365ad4c575dca7b275c56. Well, I disagree. Its fine to put constructing logic into the constructor.. No, testability is as easy as with seperate classes. Anonymous provide the same level of testability as closure, which we used for the use cases pre #2555.. yup. It's part of phpunit. Really no issue here.. I'm a huge fan of this. The current approach of misusing middlewares for this is actually wrong. The router dispatches the request to a route. It is the RequestHandler.. yes, these tests are copied from the previous DeferredDispatcher tests.. I included them this way to keep it reviewabl.\nNew tests (as in the second commit) therefore do not the pimple container, but rather mock the container (and request and everything) using prophecies.. phpunit provides prophecy through its TestCase::prophesize() method. That means it's mostly an implementation detail, and could only be removed in a major release, which requires changes to slim's composer.json to update. No unexpected build fails..\nAnyway, because I'm explicitly using the namespace Prophecy here, I'm fine to include prophecy as require-dev dependency \u2013 still, this is not a classic transitive dependency issue, as phpunit provides prophecy as part of its API.. yup, I agree and will adapt.. To get this discussion resolved for this thread I've dropped this part from the constructor. It was mostly used for tests anyway, which means it's actually unneeded.. Yup, fixed.. Hm.. I understand that this seems strange. So let me name my argument: A router actually routes something, this is what it does with handle now. Previously the router was only a route-calculator, but not a router. To reflect this change I actually updated the RouterInterface.\nTo sum up: We have two operations: route calculation and route dispatch. That means one middleware and one dispatcher. I changed the Router to be a dispatcher now.\nMaybe the naming is the problem here. We should probably put the route calculation logic directly into the RoutingMiddleware and then have a RouteDispatcher and no Router at all.. I've added the dependency to composer.json now.. You are right and I have no problem with implementing that (and did so for now), but well, may I ask: what is the usecase to return a string or a Closure from a DI container that needs to be instantiated manually with new then? If one actually adds something to a container, then a proper object implementing MiddlewareInterface should and can be easily used, no?\nI'm really fine with keeping the current behaviour with this patch, but maybe this behaviour should be revisted within another patch?. fixed.. Yup, fine by me.. No, it's middlewares. See https://en.wiktionary.org/wiki/middleware\n\nmiddleware (usually uncountable, plural middlewares). $invocationStrategy actually is nullable, no need to refactor this one.. I think that is out of scope for this patch, as @akrabat already said question regarding resolving should be handled in another issue.. Ok, fine by me. Changed that to be addDeferred.. That's exactly the reason why I thought anonymous classes would actually be the right choice here. There is really only one reason for using a class at all: We need to fullfill the RequestHandlerInterface requirement of PSR-15 middlewares. So the anonymous classes are just an implementation detail of the MiddlewareDispatcher here (and don't differ much from the Closure that we used in slim v3).\nThese classes are basicly closures (of course I do not refer \\Closures here, just the semantic meaning) that implement an interface, and the language construct to implement that is new class.. @akrabat ok, fine. I've moved the dispatch logic out of the Router again and moved it into a separate RouteDispatcher which implements RequestHandlerInterface.\n\nNo need to fork this pull request... No, sorry, I definitely overlooked that slim always used middleware as plural. I've updated my changes to reflect that.. An alternative to passing null would be to inject a ContainerInterface mock that asserts that the router isn't retrieved from it, e.g.:\nphp\n$containerProphecy->has(Router::class)->shouldNotHaveBeenCalled();\n$containerProphecy->get(Router::class)->shouldNotHaveBeenCalled();\nWhat do you think?. The intention would be to assert that the class doesn't use the container as service locator (for direct dependencies), but only for lazy (dispatching) work. Anyway, that assertion would be a better fit for a separate test. (will push a commit that does that with a test method called testDoesNotUseContainerAsServiceLocator)\nStill, I think the container should be passed here to verify thatApp injects the container into the Router that it creates.\nBut, I figure that we have two different cases here: Router injection and router creation. Will push a patch to test both cases.\nFor the second case (router creation, which testGetRouter currently tests for), it's important to pass ContainerInterface to assert that App actually forwards the ContainerInterface injection to Router.. Yup, that test is missing (though I'd use assertSame instead of assertEquals to verify that the same object is referenced), but I think that the current test is also a valid one (with another name), as it tests the creation of the CallableResolver. I've pushed a commit that adds both, see https://github.com/slimphp/Slim/pull/2602/commits/9cb619972896e008e1db361fe6b71c0c7c09e3f4. Hm.. I know we had our debate about anonymous classes, but I personally quite dislike MockBuilder::setMethods for its different semantics (of course that call to setMethods is required here, because we are mocking an non existent class/method, i don't doubt that). Also mocking a non existent class is a bit of a hack (I know it was the same before, when using stdClass).\nWould you mind to use an anonymous class here?. Argument::exact is implicit when defining non \\Prophecy\\Argument arguments, so that $containerProphecy->has('handler')->willReturn(true); would be the same, but shorter.\nThe phpspec/prophecy uses the latter in its documentation.\nI think it would be good, when we use one of these consistently.\nI don't have a strong opinion on this, but I'd go with what is easier to type and what the documentation suggests.. As we can mutate state in a promise this should do sth like the following instead of modified a bound boolean:\nphp\n$this->eof()->willReturn(true);. We should try to mutate state here. Something like:\nphp\n$body = $this->reveal()->getBody();\n$this->getBody()->willReturn($body . $args[0]);\nWill send a PR to your branch.. This could (maybe even should) use the upperCaseRequestMethodsProvider that you introduced for testGetPostPutPatchDeleteOptionsMethods.\nSomeone once told me that tests shouldn't use loops. It made sense to me, therefore I'd avoid them here as well.. Would be nice to add a type declaration for $request as well.. double space. We could use named data provider entries which allow to use phpunit --filter flag in case one needs to debug the tests e.g.:\n['empty group with segment route that does not end in a slash' => [\n    '', '/foo'], '/foo'\n],\nYou could automatically convert your current format using some substitutions (vi here):\n:'<,'>s/\\[\\(.*\\)\\], \\/\\/ test\\(.*\\)$/'\\2' => [^M                \\1^M            ],/\n:'<,'>s/\\([^']\\)\\([A-Z]\\)/\\1 \\l\\2/g\n:'<,'>s/'\\([A-Z]\\)/'\\l\\1/g. Slim\\Routable has a getPattern() method, that means the Reflection is not needed here. :)\nThis may just be: $this->assertEquals($pattern, $route->getPattern());. Same as before, Slim\\Routable has a getPattern() method.\nThis may just be: $this->assertEquals($expectedPath, $route->getPattern());. Would be nice to use the prophecy method shouldBeCalled (or even shouldHaveBeenCalled) instead.. Would be nice to use the prophecy method shouldBeCalled (or even shouldHaveBeenCalled) instead.. Missing spaces between name, => and foo.. Why do you remove the ServerRequestInterface type declaration here (also in following test methods)?. Would be nice to use shouldBeCalled (or shouldHaveBeenCalled) instead.. ",
    "MauriceW2": "Thanks, guys! With your help I found the source of the problem.\nI changed this code:\nif (function_exists(onAddSubscriber)) {\n    onAddSubscriber($email_list_id);\n}\ninto\nif (function_exists('onAddSubscriber')) {\n    onAddSubscriber($email_list_id);\n}\nNeeded to wrap the function name in single quotes.\nProblem solved!. ",
    "sfn": "It seems to be more of a problem with your .htaccess than a problem with Slim routes.\nI think you should set the RewriteBase directive in your .htaccess, something like this:\n```\nRewriteEngine On\nRewriteBase /src/public/\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^ index.php [QSA,L]\n```. ",
    "odahcam": "Even with this .htaccess code, it's still not working. When I try domain/subfolder/auth I got:\n```\nNot Found\nThe requested URL /src/public/index.php was not found on this server.\n``. Do you mean this.htaccess` https://www.slimframework.com/docs/start/web-servers.html? . Doesn't even gets close to work. \ud83d\ude05\ud83d\ude2d. I believe that this should work:\nRewriteEngine on\nRewriteBase /src/public/\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^(/.*)?$ index.php$1 [QSA,L]\nBut it doesn't.\nFile structure (from root):\n\nBrowser:\n\nI'm currently using EasyPHP to simulate a production environment.\n. @geggleto unfortunately I'm a newbie to VHOSTs, so as you can suppose, I didn't even configure one.. In this point of view, this is a problem with my config, but in the point of view of the approach I tryied, if Slim just make use of PATH_INFO instead of REQUEST_URI, all the problem would be solved.\nI'll keep trying to adapt my approach to the approach that you'r tellin' me to use, but I gotta ask, why Slim doesn't make use of PATH_INFO?\nTA. ASAP I'll make tests with my server document root.. Very well resolved. Thx! Please, tell me if creating a question in StackOverflow to document this would be nice.. ",
    "Johardmeier": "Thank you @odan. Your solution led me to a more general one, that works for different levels of nesting. \nI ended up with this in the bootstrap sequence:\n //Create the App with settings\n $app = new \\Slim\\App(['settings' => settings()]);\n //correct routes\n $_SERVER['SCRIPT_NAME'] = $app->getContainer()->get('settings')['scriptURI'];\n\nThe Setting['scriptURI'] is the actual URI of the base script index.php:\nhttp://localhost/app1/index.php ---> /app1/index.php\nhttp://localhost/index.php ---> /index.php\n. ",
    "olignyf": "Yes I was using just a native XMLHttpRequest object. I will add that\nspecial header and retest. I thought the browser was responsible to add it.\nMany thanks.\nOn Tue, Aug 22, 2017 at 10:35 AM, Glenn Eggleton notifications@github.com\nwrote:\n\nYes. I do believe so.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/slimphp/Slim/issues/2295#issuecomment-324046057, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABGeBuRYeSSfUbFj7LbKh7HqvHATl4tuks5saudNgaJpZM4O8tHK\n.\n. Thanks, adding X-Requested-With as I did below in my code made it work !\n\nvar xhr = new XMLHttpRequest();\nxhr.open(type, encodeURI(url));\nxhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n...\n. ",
    "WillSkates": "@akrabat That's interesting. I might do that.\n@geggleto do you mean the inbuilt development server \"php -S\"?. @geggleto The inbuilt dev server is unfortunately still a 'web server'. Running requests through the app kernel has been faster and more stable for me.\nIf I need to use a headless browser or selenium I'll spawn a server. It's good enough to start with.. ",
    "kafene": "@geggleto  parse_str always returns null\nthe \"return value\" has to be provided as a 2nd argument that's filled by reference... because PHP \ud83d\ude44 . ",
    "mariusklocke": "I tried to reproduce this issue. But it seems to work for me. I wrote this little CLI script which should cover the use-case @springleng mentioned.\n```php\n<?php\nrequire_once 'vendor/autoload.php';\n$uriString = \"/payment/tianfubao/notify?cipher_data=S%2FTqbQYcG36j0%2FeEX2%2FdVdTVkwuViUpf12%2BpDexOBfguz%2BgSJyVSmT0JPmuXeOt4bMCnQYGl7VJQbaTaC3vhjhlAaKEfcfSxZP2oFMITX91VdDwW8pwOTNd0wkF51UD%2FJHJNBbOXcM2KgTaPJvnaytPoZ%2B%2F3Ctk%2B04ZJydoQWeMxHIguVzZJJundilntL6%2FrHhKTkQFP3j6t2KPoj60HEbxjg41UKc1fbktwW06l0yyVAfHxPDkygO%2B47%2Fyt2ySYallFKO5%2BBpCpLZfM%2BNTSs%2F9kkGfArA0oiYvXxnTSe1GSio2jpGxUgJJtDdq6DAcZxhq3ocpGBrzZp9xEO9s7fXNyihIyw7saRbepYu9hDl1%2FjAS%2BuaaYawWKnRmCLnup0ziPxH0ndz%2FjL8CZhL4YYeaA3C32O4DUh%2FoYmV6YUuVAxkfJVDA7aVbx7D%2Fod27SJ3EHDmTi6o3wAvpCW2XpgxG5zV1%2BpHtZYqYSQT2T0tHFgt98zQTgdALyjeAaDOyW&retcode=00&retmsg=%B2%D9%D7%F7%B3%C9%B9%A6\";\n$uri = \\Slim\\Http\\Uri::createFromString($uriString);\n$request = new \\Slim\\Http\\Request('GET', $uri, new \\Slim\\Http\\Headers([]), [], [], new \\Slim\\Http\\Body(fopen('php://input', 'r')));\nvar_dump($request->getQueryParams());\n```\nThat produces the following output on PHP 7.1.3 with Slim 3.9.2\nphp\narray(3) {\n  [\"cipher_data\"]=>\n  string(512) \"S/TqbQYcG36j0/eEX2/dVdTVkwuViUpf12+pDexOBfguz+gSJy\nVSmT0JPmuXeOt4bMCnQYGl7VJQbaTaC3vhjhlAaKEfcfSxZP2oFMITX91VdDwW8pw\nOTNd0wkF51UD/JHJNBbOXcM2KgTaPJvnaytPoZ+/3Ctk+04ZJydoQWeMxHIguVzZJ\nJundilntL6/rHhKTkQFP3j6t2KPoj60HEbxjg41UKc1fbktwW06l0yyVAfHxPDkyg\nO+47/yt2ySYallFKO5+BpCpLZfM+NTSs/9kkGfArA0oiYvXxnTSe1GSio2jpGxUgJ\nJtDdq6DAcZxhq3ocpGBrzZp9xEO9s7fXNyihIyw7saRbepYu9hDl1/jAS+uaaYawW\nKnRmCLnup0ziPxH0ndz/jL8CZhL4YYeaA3C32O4DUh/oYmV6YUuVAxkfJVDA7aVbx\n7D/od27SJ3EHDmTi6o3wAvpCW2XpgxG5zV1+pHtZYqYSQT2T0tHFgt98zQTgdALyj\neAaDOyW\"\n  [\"retcode\"]=>\n  string(2) \"00\"\n  [\"retmsg\"]=>\n  string(8) \"\u0279\"\n}\n@springleng: Does this issue still occur on more recent Slim versions?. I think it should not be configurable. It would add unnecessary complexity, where clear documentation would solve the problem. If we speak about a \"middleware stack\", the word \"stack\" already tells me it is LIFO. So I suggest keeping LIFO.. ",
    "jvitoroc": "@mathmarques problem solved, thanks :D. ",
    "mahagr": "To me, error codes are more clear than the titles of the errors. So no, it will only make things worse.. Why not use REQUEST_SCHEME which is either http or https?. @akrabat Any change making the same change into Uri class:\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Http/Uri.php#L169-L170\nMostly because of HTTPS isn't always available.. See discussion in:\nhttps://github.com/getgrav/grav/commit/a9c82710a6f33b636a84cc42e4d0b1964d7c1483\nhttps://github.com/getgrav/grav/issues/1698. Just a note: filterUserInfo() has /u modifier, but filterPath() and filterQuery() do not. Should they all have the modifier?. Also another thing... Should __construct() also escape user and password?. And from your example: hostname isn't filtered either.... You can use Uri class outside of request to build a new URL to be shown your page.. Sorry, I've been super busy lately. Thanks @splitbrain for the test!. Yeah, this one was an issue I fixed for some time ago. Reverting back to 3.8 also fixes the issue.. :+1: . I think you can modify the URL by $uri->withPort(null).. It is really easy to implement in your end. Just remove the extension yourself and make it a variable available for your controller.\n``php\n        // Ignore file extension (.html, .json etc).\n        $this->app->add(function (Request $request, Response $response, callable $next) {\n            $uri = $request->getUri();\n            $path = $uri->getPath();\n            $cleanPath = preg_replace('([^/])(.\\w+)$`i', '\\1', $path);\n            if ($path !== $cleanPath) {\n                $uri = $uri->withPath($cleanPath);\n            // Then make the extension available somehow...\n\n            return $next($request->withUri($uri), $response);\n        }\n\n        return $next($request, $response);\n    });\n\n```\nIn above example, I'm dealing with the file extension elsewhere, so it's not there.. ",
    "ursoforte": "Sorry. I think that I not can this. Do you want a specific param?\nThe above case, is a doubt. My easy solution with: in production\nif( isset($param['type'])){\n    //rum\n    }\nIgnoring the first parameter.. Understand. I using Apache 2. and no special settings.\nOut a htaccess\n<IfModule mod_rewrite.c>\nRewriteEngine on\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^(.*)$ index.php?$1 [L,QSA]\n</IfModule>. @mathmarques you're right. This RewriteRule ^(.*)$ index.php?$1 [L,QSA] I have caught in another local. Thanks. It Work.\n. Hi @joeygallegos I undertend.\nYou can see more details in https://github.com/phanan/htaccess \nThere's a lot of cool stuff.. Show me an example of your code, please.. Why you do not use cURL class for PHP \ncomposer require curl/curl\n$curl = new Curl\\Curl();\n$curl->get('http://www.example.com/');\nAnd simplify much of your code? :smiley: \n. ",
    "tobiasstadler": "What web server are you using in production?\nWe are using nginx which we configerd to pass the path as an query param, e.g we have \nfastcgi_param  QUERY_STRING       $uri$query_string;\nin our nginx.conf. ",
    "mangopeaches": "Hey @joeygallegos,\nThis seems more a pure apache question than a Slim question, but I think I can help clarify the behavior of your rewrite rules.\nIt looks like your initial set of rules:\n```\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_URI} (.+)/$\nRewriteRule ^ %1 [L]\nMove traffic from www to non-www domain (WORKING)\nRewriteCond %{HTTP_HOST} ^www.(([a-z0-9_]+.)?example.com)$ [NC]\nRewriteRule ^(.*)$ http://example.com/$1 [L,R=301]\n```\nWhat the first block is doing is essentially checking for an incoming request that's not for a direct file and the request uri ends with a /. If both of those conditions are matched, the page is redirected to that same page, without the trailing slash. So http://www.example.com/free-music/ would be redirected to http://www.example.com/free-music. If your route was always using the trailing slash, then that's probably why this condition was rewriting to index.php instead of the free-music/ route.\nThere's also something important to note about your rewrite rule. The L in the flags basically tells apache to stop processing rules at this point, so your 301 redirect happens and the following two rules newer are checked.\nMoving on to your updated rule set:\n```\nMove traffic from www to non-www domain\nRewriteCond %{HTTP_HOST} ^www.(([a-z0-9_]+.)?example.com)$ [NC]\nRewriteRule ^(.*)$ http://example.com/$1 [L,R=301]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^ index.php [QSA,L]\n```\nNow the first rule set is checking for a request into www.{any-subdomain}example.com and then if that's true it's redirecting tp http://example.com/ and carrying over the request uri and query string. Again, notice the L flag on this rewrite rule, so in the case where this rule is matched apache does a 301 redirect and never scans the next set of rules.\nHopefully that helps explains what was going on with your rewrite rules and it now makes more sense and is less apache magic. Let me know if you have any additional questions.\nBest,\nTom. ",
    "aurmil": "thanks, did not say more as I did not know if code or docs was to be changed. FIFO is more natural when coding but I vote for the lightest solution (see @bnf comment above), Slim should stay as simplest / lightest / fastest as possible. ",
    "adappter": "Thank you this was the problem! \nCould it be possible to show a correct error? . Thank you guys for the help. I close the ticket :). ",
    "ChangePlaces": "For now, I believe user error. Resending parses the data, so something must be a bit funky elsewhere.. ",
    "chris48s": "\nDo we need it? I have felt that our community has been incredibly good in this aspect.\n\n@geggleto One of the findings from GitHub's open source survey was that\n\n\"Documentation that clearly explains a project's processes, such as contributing guides and codes of conduct, is valued more by groups that are underrepresented in open source, like women.\"\n\nWhile it is amazing that the existing Slim community is fortunate enough not to have issues with poor behaviour which need to be addressed, adopting a code of conduct may remove a barrier to some potential contributors which you may not be aware is a problem for them.. Its an edge case, but RFC 7159 defines a string as valid json, and json_decode() will parse it:\n```\n$ php -a\nInteractive mode enabled\nphp > var_dump(json_decode('\"foo\"'));\nphp shell code:1:\nstring(3) \"foo\"\n```\nThis behaviour in Slim does appear to be a conscious design decision though. See https://github.com/slimphp/Slim/commit/dc5092cfbc7e7f332c541d6603746ab2e3e0d655. Oh I see. Looks like PSR-7 is a rock and RFC7159 is a hard place on this one ;). ",
    "kjhatis": "Log Path? there is no log or temp or any storage folder exist. do i need to manually create?\n$stmt = $this->con->prepare(\"INSERT INTO questions(question,description, askedby, status,created_time,update_time) values(?, ?, ?, '1', NOW(), NOW())\");\n            $stmt->bind_param(\"sss\", $data['question'], $data['description'], $data['imei']);\nThese two statement causing the error, and i am getting internal server error. even for undefined functions or class it is showing internal server error. . My Actual Problem Was \"Internal Server Error\". for wrong sql statement it should not show Internal Server Error.\nand take a look at the Parameters again one is expecting 3 params and i passing 3 also that is correct.. this issue i have resolved. i enabled the errors by adding this on the top of v1/index.php\nerror_reporting(-1);\nini_set('display_errors', 'On');\nmysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\nnow i am able to catch if any exception raised.. ",
    "piotroxp": "Hello Kjhatis\nAs Ive noted when using slim, you need to know where your logs are (you can set that in three places, in a config file when using Loggers with slim, in your webserver config and in php.ini for pure php errors).\nI dont really know if you are using eloquent, but I am 100% sure you are missing a comma or mixed something wrt to your database table. Error 500s with database connections are common if you dont use models.\nRead the below \nhttps://www.google.pl/url?q=https://www.slimframework.com/docs/cookbook/database-eloquent.html&sa=U&ved=0ahUKEwiV94XiuKTXAhVJqxoKHYJrDsMQFggLMAA&usg=AOvVaw33cKZsF9AklfAThVJJRPQy. ",
    "4e4y": "Hi guys,\nI do not know if this is resolved but here are my observations:\nKjhatis is executing 2 PHP statements:\n$stmt = $this->con->prepare(\"INSERT INTO questions(question,description, askedby, status,created_time,update_time) values(?, ?, ?, '1', NOW(), NOW())\"); \nand\n$stmt->bind_param(\"sss\", $data['question'], $data['description'], $data['imei']);\nFirst one is expecting 3 bind parameters (the ? symbols) while in the second one 4 parameters are passed.\nKjhatis,\nPlease check this and pass proper bind parameters and let us know if this solves your issue.\nBest regards.. ",
    "ares333": "I closed it because just one character was included in the patch and I didn't check the rfc very carefully.So I am not sure about it.\ud83d\ude13. ",
    "travisdetert": "I can confirm that this is still a bug.  I think it's fair to say that unsetting the handler via your docs: \nunset($app->getContainer()['errorHandler']);\nunset($app->getContainer()['phpErrorHandler']);\nSHOULD disable it, but it does not.  Output buffering is truncated.  This really should be fixed since your error handling doesn't handle all errors anyway.. Error handling is disabled, but simply overriding error handling (admittedly not using your handler functionality, as that was not obvious per the docs), buffer output is truncated.  Error handling should not have any impact on output buffering in this context.. ",
    "m9rco": "It's my testAppPostSessions functions\npublic function testAppPostSessions()\n    {\n//        $env = Environment::mock(array());\n//        $uri = Uri::createFromString('https://example.com:443/foo/bar?abc=123');\n//        $headers = Headers::createFromEnvironment($env);\n//        $cookies = [\n//            'user' => 'john',\n//            'id' => '123',\n//        ];\n//        $serverParams = $env->all();\n//        $body = new RequestBody();\n//        $uploadedFiles = UploadedFile::createFromEnvironment($env);\n        $header   = $this->getDefaultHeader();\n        $form     = array ('pn' => '13131313131');\n        $cookie   = array (\n            'A' => 'u%3D360H2918298534%26n%3D%26le%3D%26m%3DZGt1WGWOWGWOWGWOWGWOWGWOAQV5%26qid%3D2918298534%26im%3D1_t01288d5fc5d17da208%26src%3Dpcw_home%26t%3D1',\n            'C' => 's%3D46658c5991802d920d5ea041035af520%26t%3D1509611887%26lm%3D%26lf%3D2%26sk%3D6070ed8617f2f3fdc6d7cf91eff64374%26mt%3D1509611887%26rc%3D%26v%3D2.0%26a%3D1'\n        );\n        $response = $this->runApp('POST', '/smart/v1/sessions', $form, $header,$cookie);\n        echo $response->getBody();\n        $this->assertEquals(200, $response->getStatusCode());\n        $this->assertNotContains('Hello', (string)$response->getBody());\n    }\nit's my runApp\n```\n public function runApp(\n        $requestMethod,\n        $requestUri,\n        $requestData = null,\n        $requestHeader = null,\n        $requestCookie = null)\n    {\n        // Create a mock environment for testing with\n        $environment = Environment::mock(\n            [\n                'REQUEST_METHOD' => $requestMethod,\n                'REQUEST_URI'    => $requestUri,\n            ]\n        );\n    // Set up a request object based on the environment\n    $request = Request::createFromEnvironment($environment);\n    // Add request data, if it exists\n    if (isset($requestData)) {\n        $request = $request->withParsedBody($requestData);\n    }\n    if (isset($requestHeader)) {\n        foreach ($requestHeader as $key => $val) {\n            $request = $request->withAddedHeader($key, $val);\n        }\n    }\n    if (isset($requestCookie)) {\n        $request =  $request->withCookieParams($requestCookie);\n    }\n\n    var_dump($request->getCookieParams());\n    // Set up a response object\n    $response = new Response();\n\n    define('APPLICATION_PATH', __DIR__ . '/../..');\n    // Use the application settings\n    $settings = require __DIR__ . '/../../config/settings.php';\n    require __DIR__ . '/../../src/bootstarp/Initialize.php';\n\n    $app = new KidsApp($settings);\n    $app->bootstrap();\n\n    // Process the application\n    $response = $app->process($request, $response);\n\n    // Return the response\n    return $response;\n}\n\n```\n. ",
    "Rezouce": "@moritz-h you are right, I didn't see that the output buffering management was duplicated in the error handler.\nInstead of duplicating the logic in both the route and the error handler, I chose to move the output buffering management at the app level instead.. I removed the unnecessary output buffering from the AbstractError, thank you @RyanNerd and @moritz-h for your inputs.\n@akrabat I don't think removing this extra parameter will provoke any breaking change. Some people may continue to provide it but that shouldn't be a problem.\n. ",
    "launcelot66": "@geggleto Can you help me with this? (some example how to include FastRoute to slim 3.9). ",
    "TomWright": "Thanks for the quick response.\nI had only ran phpunit locally so wasn't aware of the phpcs formatting errors yet. Other than those though I had attempted to make it backwards compatible.\nI appreciate that you can get the auto-wiring functionality by using PHP-DI but thought it may be useful to have similar functionality out of the box. If you don't agree then that's fine also and I'll stick to using PHP-DI!\nThanks for your time.. ",
    "bonesnap": "Thanks a lot! =]. ",
    "jessedp": "Your worries are misplaced in this context. Using \n$fp = fopen('php://temp','w+');\nis essentially the same as using \n$fp = tmpfile();\nIn both cases, the temp file created will have a unique file name and automatically be unlinked either once fclose($fp) is used or the script terminates.\nQuick POC you can test that with is below. Simply note that the temp file is created, rewound, read from, and not closed ... then check your configured temp directory to see there are no extra lingering temp files.\n<?php\n$tmp = fopen('php://temp', 'w+');\nfwrite($tmp, \"test!\\n\");\nrewind($tmp);\n$str = fread($tmp, 1024);\necho '>>'.$str;. ",
    "QusaiFarraj": "I have two versions 5.6 and 5.4. I found out that I'm using the older version.. ",
    "splitbrain": "The Interface comment says:\n\nPassword is optional, but the user information MUST include the user; an empty string for the user is equivalent to removing user information\n\nI would interpret this as removing all user information including the password, when an empty user is passed.\nSome info on the background: My application runs behind mod_kerberos which sets PHP_AUTH_USER and PHP_AUTH_PW which are used in createFromEnvironment. I my application I then need to pass the baseUrl to my Twig template handler, however getBaseUrl now returns urls with the password in clear text which are then added to all my links. So I need  a way to pass a baseUrl without the credentials. I worked around this by doing a parse_url myself, but it would be nicer to simply unset the authentication on the Uri object.. I just noticed that this seems to be fixed by #2332. For one of the use cases (creating email templates) it might very well happen that this mechanism is called without a request context when emails are generated from a command line script or from a task queue.\nThere is no way to automatically build the base URL without a Request object. So instead of just throwing an Exception here, it would probably be helpful to be able to configure the base URL from a config setting and fall back to it if no Request is available.. ",
    "emilorol": "Thank you.. ",
    "cacharrin": "Hi @silentworks, I already require it, with no luck. Same error is thrown.\n. Any updates on this?. > if you create a backwards compatible PR that solves this problem, I'm prepared to entertain it.\nI don't know how to solve this :(. Hi Daniel, I just did it, with no luck.\nI already required phpseclib/mcrypt_compat\nI added\n\"provide\": {\n  \"ext-mcrypt\": \"*\"\n}\nto composer.json and run \"composer update\", but it throws:\ncomposer update Loading composer repositories with package information\nUpdating dependencies (including require-dev) Package operations: 0\ninstalls, 13 updates, 1 removal [InvalidArgumentException] Package is not\ninstalled: ext-mcrypt-7.1.11.0 update [--prefer-source] [--prefer-dist]\n[--dry-run] [--dev] [--no-dev] [--lock] [--no-custom-installers]\n[--no-autoloader] [--no-scripts] [--no-progress] [--no-suggest]\n[--with-dependencies] [-v|vv|vvv|--verbose] [-o|--optimize-autoloader]\n[-a|--classmap-authoritative] [--apcu-autoloader] [--ignore-platform-reqs]\n[--prefer-stable] [--prefer-lowest] [-i|--interactive] [--root-reqs] [--]\n[]...\n2018-03-19 8:53 GMT-05:00 Daniel Opitz notifications@github.com:\n\n@cacharrin https://github.com/cacharrin Try this:\nInstall the mcrypt_compat polyfill\ncomposer require phpseclib/mcrypt_compat\nAdd this entry into composer.json:\n\"provide\": {\n  \"ext-mcrypt\": \"*\"\n}\nRun composer update\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/slimphp/Slim/issues/2362#issuecomment-374218944, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABQsKUdOQwdnUEUkkYGPH88FSjVZFRWXks5tf7hbgaJpZM4Q4fP3\n.\n\n\n-- \nFelipe Botero Londo\u00f1o\nIngeniero de Sistemas y Telecomunicaciones.\n. Just did it,\nSame error:\n[InvalidArgumentException]\n  Package is not installed: ext-mcrypt-7.1.11.0\nI tried to do: composer require ext-mcrypt\nand then, composer update.\n\"Error: Package is not installed\" is gone...\nBut initial error persists:\nFunction mcrypt_module_open() is deprecated in D:\\Project\\vendor\\slim\\slim\\Slim\\Http\\Util.php:106\n. How to disable mcrypt extension?\nI just searched for:\nextension=php_mcrypt.dll\nin my php.ini file with no luck.\nThere is just the configuration section with default values:\n```\n[mcrypt]\n; For more information about mcrypt settings see http://php.net/mcrypt-module-open\n; Directory where to load mcrypt algorithms\n; Default: Compiled in into libmcrypt (usually /usr/local/lib/libmcrypt)\n;mcrypt.algorithms_dir=\n; Directory where to load mcrypt modes\n; Default: Compiled in into libmcrypt (usually /usr/local/lib/libmcrypt)\n;mcrypt.modes_dir=\n```\n. ",
    "iamravimane": "anybody got the solution?. ",
    "ledian-hymetllari": "I had the same error, but as temporary solution I added @ before every mcrypt that shows the issue. \n@mcrypt_module_open \n. ",
    "pinsoneatra": "Just change from:\n$this->_handle = mcrypt_module_open($cipher, '', $mode, '');\nto\n$this->_handle = @mcrypt_module_open($cipher, '', $mode, '');\nwith \"@\" hope it can help. ",
    "jbalbert": "My bad it seems I was mistaken for the division by zero. ^_^. Ohhh Okay. Thank you. ",
    "MarioBlazek": "Not sure what do you mean @geggleto https://github.com/slimphp/Slim/blob/4.x/composer.json#L31. Cool, tnx for the clarification.. ",
    "gieboyz": "hello @ursoforte .\nthis is my code. \nNB: this is my directory\npublic\n activity\n    .htdocs\n    index.php\n schedule\n    .htdocs\n    index.php\nThat error show only if i calling API on my server, but in localhost that's running well, all setting already check it and it's working before.\nin folder schedule  > index.php\n```\nfunction call_api_post_internal($url, $postdata) {\n  $ch = curl_init();\n  curl_setopt($ch, CURLOPT_URL, HOST.$url);\n  curl_setopt($ch, CURLOPT_POST, 1);\n  curl_setopt($ch, CURLOPT_TIMEOUT, 30);\n  curl_setopt($ch, CURLOPT_POSTFIELDS, $postdata);\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n  $response = curl_exec($ch);\n  if (curl_error($ch)) die(\"Connection Error: \".curl_errno($ch).' - '.curl_error($ch));\n    curl_close($ch);\nreturn json_decode($response);\n\n}\n$app->post('/new', function (Request $request, Response $response) {\n try\n {\n  $param = $request->getParsedBody();\n  / some process insert to database here /\n$actiivity = array();\n  $activity['schedule_id'] = $id;\n  $activity['log'] = 'some message';\n  call_api_post_internal('public/activity/insert', $activity); \n  return $response->withStatus(200)->withHeader('Content-type', 'application/json')->withJson(array('id'=>$id, 'message'=>'Schedule has been inserted'));\n}\ncatch(Exception $e)\n{\n  return $response->withStatus(400)->write($e->getMessage());\n}\n});\n```\nin folder activity > index.php\n```\n$app->post('/insert', function (Request $request, Response $response) {\ntry\n {\n  $param = $request->getParsedBody();\n  /do something process insert here/\n  return $response->withStatus(200)->withHeader('Content-type', 'application/json')->withJson(array('id'=>$id, 'message'=>'Schedule has been inserted'));\n}\ncatch(Exception $e)\n{\n  return $response->withStatus(400)->write($e->getMessage());\n}\n});\n```\n. @ursoforte ah...nice idea...thank you ursoforte...i will try it..\nand thanks for everyone.. \ud83d\ude04 . ",
    "UchennaPrudensia": "Thank you. This is the output I get... \n\nHTTP/1.1 301 $s\nServer: nginx/1.13.7\nDate: Thu, 14 Dec 2017 16:26:04 GMT\nConnection: keep-alive\n: /login: . Ahh Yes you are right when I curl -I http://localhost/login, I get this output: \nHTTP/1.1 200 $s\nServer: nginx/1.13.7\nDate: Thu, 14 Dec 2017 16:30:31 GMT\nConnection: keep-alive\n: text/html;charset=utf8: \n\ncurl command is  curl -I http://localhost/login\n. thank you.  Where do I set the content type header and location header...\nI did curl -v http://localhost/login and I got this output: \n\nTrying ::1...\nTCP_NODELAY set\nTrying 127.0.0.1...\nTCP_NODELAY set\nConnected to localhost (127.0.0.1) port 80 (#0)\nGET /login HTTP/1.1\nHost: localhost\nUser-Agent: curl/7.54.0\nAccept: /\nHTTP/1.1 200 $s\nServer: nginx/1.13.7\nDate: Thu, 14 Dec 2017 16:45:40 GMT\nTransfer-Encoding: chunked\nConnection: keep-alive\n: text/html;charset=utf8: \n<!DOCTYPE html>\n\n\n\nChat Application: Login\n\n\n\n\n\n\n\n\nLogin\n\n\n\nUsername\nclass=\"form-control\">\n                  \n\nPassword\nclass=\"form-control\">\n                  \n\n                       Log in\n                   \n\n\n\n\n\n\n\n. wow, I just realized that. Let me check my Nginx config file. . I fixed the header issue. My output for curl -D- http://localhost is \nHTTP/1.1 302 Found\nServer: nginx/1.13.7\nDate: Fri, 15 Dec 2017 05:13:37 GMT\nTransfer-Encoding: chunked\nConnection: keep-alive\nLocation: /login \n\nThe content-type is not showing up at all. When I curl -D- http://localhost/login (file that I want to be redirected to...) I get the following output: \n\nHTTP/1.1 200 OK\nServer: nginx/1.13.7\nDate: Fri, 15 Dec 2017 05:21:32 GMT\nContent-Type: text/html;charset=utf8\nTransfer-Encoding: chunked\nConnection: keep-alive\n. You are right. It is working now. Thank you so much . \n",
    "cholthi": "I found it, the issue was php storm caching project files, so the changes\nwere not synced to the web server\nOn 15 Dec 2017 2:41 pm, \"tflight\" notifications@github.com wrote:\n\nTwo possibilities come to mind. First, is a different route matching than\nthe one you are expecting? Second, are you using OPcache in your webserver,\nand if so, what are the settings? OPcache could certainly produce those\nsymptoms. Slim itself doesn't have any caching attributes that would\nexplain what you see aside from routercache\nhttps://www.slimframework.com/docs/objects/application.html#slim-default-settings\nwhich defaults to false if you don't set it up.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/slimphp/Slim/issues/2371#issuecomment-351985548, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AEQcixnC_gtlTYhVxpuWQnpCF0Rt56caks5tAlrQgaJpZM4RDQFh\n.\n. \n",
    "xymz": "Thanks! And, do you feel the pseudo code follows your design policy? . I thought LIFO is better. cuz It covers some contextual problems. For instance, once some middlewares were enabled, they could affect each same global context, like a monkey-patch(yes, not a good design). And FIFO doesn't guarantee same contextual environment. (e.g If B middleware performs only A was enabled, it gonna be crushed on FIFO). ",
    "mrceperka": "Will close this, because I am ok with guzzle solution. I won't do tracing now.. ",
    "AmirHosseinKarimi": "This mean no way to fix this?. ",
    "lordrhodos": "I did some research for the 3.x code. \n\nTodo:\n\nmake sure that the user can detect a HEAD request inside the route callable that's attached to a GET request\n\n\nAs the PSR-7 request is passed to the callable it is no problem to check manually if this is actually a HEAD request, e.g.\nphp\n$app->get('/', function (Request $request, Response $response, array $args) {\n...\n    $isHeadMethod = $request->getMethod() === 'HEAD';\n...\n});\n\n\nEnsure that we don't send the request body if it's a HEAD request.\n\n\nThis is kind of tricky. The mentioned Response::isEmpty method just checks for a response status code that should not contain a body:\nhttps://github.com/slimphp/Slim/blob/715d1306dd221f016b2f3f1d132a0ada3c3ac9a8/Slim/Http/Response.php#L376-L382\nI think we need to integrate this at Slim\\App::isEmptyResponse and add a check if we are dealing with a HEAD request, which will leave us with another fix that we need to attend here:\nhttps://github.com/slimphp/Slim/blob/715d1306dd221f016b2f3f1d132a0ada3c3ac9a8/Slim/App.php#L617-L619\nHere we need to check if this is not a HEAD request before returning a response with removed headers.\n. thank you @l0gicgate for the work. I have just started playing around a little bit with the 4.x branch and hit the middleware issue when setting up a first base application. Your PR fixed that \ud83d\udc4d \ud83c\udf89 \nAfter reading through the changes I have some remarks, event though I am not really into the Slim internals:\nI would suggest to remove the addLegacy functions. From what I can tell Slim aims in its core for a clean and simple code base. Easy to read and understand as a developer with a focus on simplicity and performance. I love those things about it from what I learned so far. IMO adding the addLegacy functions just adds duplicate funcionality which is not needed. I do not think convenience support for BC updates justifies these methods. If people need to upgrade to 4.x they should do this manually by wrapping the legacy middleware. How to do this should be well documented and for BC convenience you could provide an update script/task that automates the wrapping.\nJust my 0.0002 cents \ud83d\ude1c . > I ended up adding detection logic for PSR-7 middleware and removing the addLegacy() methods.\n@l0gicgate this sounds great in terms of providing backwards compatibility!!! I like the decision.  Maybe you should discuss if PSR-7 support should be deprecated for a next major version 5 though, to slim down the code base.. I am not so deeply involved in the topic as you guys are, but I like to add some points from the outside:\n\nI ususally expect an incremented major version to introduce breaking changes (semantic versioning) and the need to update the code on my end. If I want to use the fancy features of the next major version I need to get my hands dirty. I do not expect my code to run without any changes. An upgrade guide / documenation is mandatory!\nSlim should stay slim, drop (all) legacy stuff thats tries to ease the upgrade pain. Instead offer first class documenation for a) the new major release and b) the upgrade process. If documentation is not enough, provide tools to ease the upgrade. If you need support for LegacyMiddlewareAdapter move this to a dedicated library and document the usage. I think @l0gicgate is right about breaking things now and get rid of the technical debt. Highly appreaciated as I have no Slim3 projects in production \ud83d\ude09 \nI think @bnf is right about the naming of Slim3 middleware format, so I suggest you agree on an official term for it. I personally think double vs. single pass is valid as this is referenced in the PSR-15 meta docs, although it may not be known amongst so many developers.  . @akrabat \nwhy not combine your two thoughts into one clean approach?\n\n\nDo we need to provide an adapter from doubleness middleware to PSR-15 or do we just document it?\n...\nphp\n$app->add(new DoublePassMiddlewareAdapater(MyOldMiddleware::class)):\n\nuse a general adapter, e.g. MiddlewareAdapter\n\nThis means that add() will take one of:\n\n\na class that's an instance of PSR-15's MiddlewareInterface\n\n\na string to be resolved to an instance of PSR_15's MiddlewareInterface when the middleware is invoked.\n\n\n(TBD) a closure of the format function($request, $handler)\n\n\n\nlet it handle all the internal resolving part and type hint to MiddlewareInterface in App::add method. Use the mixed argument in the adpaters constructor to keep the flexibility. \nIMO this would lead to the cleanest way, e.g. pass in a PSR-15 middleware\nphp\n$app->add(new Psr15Middleware());\nPass in non PSR-15 middleware using the adapter:\nphp\n$app->add(new MiddlewareAdapter('LegacyMiddleware:custom'));\nOr am I missing something here?\n. from what I can see this error is known and came up in August 2018 the first time. \n\ntflight [21:06 Uhr]\nseems like parse_url will work with utf-8 URLs in some instances on Ubuntu and other Linux flavors, but not under MacOS or Windows. That could be why it is working under Travis.\nhttps://github.com/symfony/symfony/issues/16776\nhttps://bugs.php.net/bug.php?id=52923. @l0gicgate thx for pointing this out. I missed this in your PSR-15 middleware branch I guess. I was stumbling across this in the current 4.x branch. . @l0gicgate should this be closed or should it stay open until #2555 is merged?. just saw that the middlware PSR-15 PR https://github.com/slimphp/Slim/pull/2555\n\nis dealing with this (https://github.com/slimphp/Slim/pull/2555/files#diff-eb6c3386171c6f5318119100a52f3db7R123) which I think creates another issue. Imagine something like:\nphp\n$container = new Container();\n$callableResolver = new CustomCallableResolver();\n$app = new Slim\\App($responseFactory, null, $settings);\n$app->setCallableResolver($callableResolver);\n$app->setContainer($container);\nIn this case the CustomCallableResolver would be overriden by Slims default CallableResolver or am I wrong?\n. \ud83d\udc4d nice! Hope you get #2555 merged soon, seems like it is growing and growing \ud83d\ude04 \nI'll close it.. I think you've got the order wrong here, or is this the new LIFO phpdoc param style ? \ud83d\ude09 . @froschdesign Agreed with a wrapper could be anything, but I think this is not a decorator more an adapter technically speaking or not?. ",
    "sg3s": "I do not know why Travis failed on hhvm, not familiar with either and the errors look vague to me.\nIf it is something I can fix I would love to hear suggestions.. Thank you for the feedback. \nI can rebase & push quite easily, but looking back on my code I see that I have mistaken 'non-strict comparison' for 'case-insensitive comparison'. Which is a dumb mistake. To compare I need to normalize the input properly.\n\nUse strtolower or ucfirst (or something else?) on the input? (the used case doesn't actually matter for setting the cookie flags)\nWant a specific test for that case?\n\nCookies don't seem to be documented in v3 (I'm guessing the class shouldn't be present, it is mentioned in the v3 upgrade guide that it was removed) so where should I put this?\nI will cherry-pick the patch to Slim-Http/v4 after figuring out the above.. @akrabat My apologies, I think I've missed the previous comment and I have been quite busy so I wasn't checking up on it either. \nUpdated, added test & rebased. I think I've done that correctly, feedback is welcome :). ",
    "salamander-mh": "This is my example:\n```\n<?php\nuse Slim\\Http\\Environment;\ndefine(\"ROOT\", getcwd() . '/..');\ndefine('APP', ROOT . '/app');\nrequire ROOT . '/vendor/autoload.php';\n// load functions\nrequire APP . '/functions.php';\n$http = new swoole_http_server(\"0.0.0.0\", 8888);\n$http->on(\"start\", function ($server) {\n    echo \"Swoole http server is started at http://0.0.0.0:8888\\n\";\n});\n$http->on(\"request\", function ($request, $response) {\n    // Instantiate the app\n    $settings = require APP . '/config.php';\n    $settings['environment'] = function () use($request) {\n        $server = [];\n        foreach ($request->server as $key => $value) {\n            $server[strtoupper($key)] = $value;\n        }\n        return new Environment($server);\n    };\n    $app = new \\Slim\\App($settings);\n    // Register routes\n    require APP . '/routes.php';\n// Run app\n$slimResponse = $app->run(true);\n$headers = $slimResponse->getHeaders();\nforeach ($headers as $name => $values) {\n    $response->header($name, implode(\", \", $values));\n}\n$response->header(\"X-Powered-By\", \"Salamander\");\n$response->end($slimResponse->getBody());\n\n});\n$http->start();\n```\nit works.. @pachico \nwaiting for your works^_^(maybe your library can be name slim-swoole like others). ",
    "oakbani": "Do you mean that is it Okay for Slim to initialize just every service in container for every single request? How does slim work with professional apps? \nI have been working in Python Flask, which is also a microservice framework, and it does provide static persistence. . @edudobay  and @akrabat Thanks a lot for the explanation. ",
    "edudobay": "This has nothing to do with the design of Slim, but with the typical lifecycle of PHP-based applications. Everything is initialized on every request. It is a \u201cshare-nothing\u201d architecture, which has its pros and cons. Long initializations are better off with some kind of caching - it\u2019s up to you to choose the more appropriate mechanism, be it a flat file, Redis, Memcached, some RDBMS.\nAs an example, Doctrine Cache is a component that wraps common cache backends such as Memcached and Redis (and it\u2019s not to hard to implement an adapter for another backend you may need) and provides a simple common interface for them all.. Hi! Yes, I had no problem implementing a custom error handler, but to keep things simple I wanted to reuse the logging behavior that Slim already provides out of the box. The problem is that I can't reuse just the logging part because it's coupled to the rendering part. If I turn on error rendering, logging gets turned off and that\u2019s what I\u2019d like to change.\nMy current solution is an ugly subclass that \u201cfakes\u201d the displayErrorDetails setting when delegating to the log writer. Of course this is coupled to the Slim implementation; the proposal for Slim 4.x at #2222 (AbstractErrorHandler) would break this, for example.\n```php\nclass ErrorHandlerWithLogging extends \\Slim\\Handlers\\Error\n{\nprotected function writeToErrorLog($throwable)\n{\n    $oldValue = $this->displayErrorDetails;\n    $this->displayErrorDetails = false;\n    parent::writeToErrorLog($throwable);\n    $this->displayErrorDetails = $oldValue;\n}\n\n}\n```\nThe most obvious \u201cpretty\u201d solution for me would be for the constructor to take two flags, say displayErrorDetails and writeToErrorLog - and the latter could default to the opposite of the former when not provided, to guarantee backwards-compatible behavior. Something like this:\n```php\nclass Error extends AbstractError\n{\n    public function __construct($displayErrorDetails = false, $writeToErrorLog = null)\n    {\n        if ($writeToErrorLog === null) {\n            $this->writeToErrorLog = !$displayErrorDetails;\n        } else {\n            $this->writeToErrorLog = (bool) $writeToErrorLog;\n        }\n    // ...\n}\n\n}\n```\nAm I going too far suggesting this? Or is it possible that Slim could have this separate setting, at least configurable from the constructor of the Error handler class?\n. Hi! As I started to point out at #2393, I believe that there should be a separate writeToErrorLog (or similar) setting, that doesn\u2019t need to subordinate to displayErrorDetails. A couple reasons for that:\n\nNewcomers might be confused when they turn of display of error details and things stop going to the error log.\nAnyways we might need to keep a log of errors even though they were displayed to the client (maybe the client was an API so we couldn\u2019t really see the output).\nWriting to a log and rendering the error to the client seem like separate concerns to me. These could even be dealt with by separate classes; but anyway it seems to me that it would be more logical to have separate settings for separate (independent) behaviors.\n\nIf you agree with these concerns, you can refer to #2393 for some remarks I\u2019ve already made and I\u2019ll be happy to help with the implementation. (I already have a draft but it is written for Slim 3.). Maybe the details should always be displayed in the error log? To me it doesn\u2019t make sense to log a generic \"Application error\" without details.\n(Maybe we are starting to cross boundaries and violating SRP as @odan pointed out?). ",
    "sridesmet": "Yep, that's where the magic happens. But the all() function in Headers, uses the original keys:\nhttps://github.com/slimphp/Slim-Http/blob/master/src/Headers.php#L100. It should preserve the original case, but it doesn't. e.g. \nI try to send header with name A-a-a,\n$request->getHeaders() contains HTTP_A_A_A.\nphp's getallheaders() contains A-a-a and so does $request->getHeader('A-a-a')\nEven worse, when I try to send the header A_a-a (with a lower dash). \nThe $request->getHeaders() does not contain the header at all. \n$request->getHeader('A_a-a') does, and getallheaders() does too.\nSo there are clear workarounds, but in my opinion getHeaders() and getHeader() should at least be consistent :). This is because of the  $_SERVER variable.\nSee:\nhttps://github.com/slimphp/Slim-Psr7/issues/11\nhttps://github.com/slimphp/Slim/issues/2400. Would it be enough to use this middleware in Slim 3? Because that's what I'm doing now to create a reverse proxy. https://gist.github.com/sridesmet/a3e0a6f3a3515aaf5d5b4b42479e8c67. ",
    "conrad10781": "@l0gicgate , thanks for the clarification. Regarding:\n\nThese will all be executed prior to routing being done\n * Unless you set determineRouteBeforeAppMiddleware  to true in your App settings\n\nIf you change the app declaration to :\nphp\n$app = new \\Slim\\App(\n    array(\n        \"settings\" => array(\n            \"determineRouteBeforeAppMiddleware\" => true,\n        )\n    )\n);\nin the code I provided, it yields the same order ( 3,2,1,5,4,7,6 ). I'm testing with 3.9.2. Meaning, determineRouteBeforeAppMiddleware doesn't seem to have an impact. \ndetermineRouteBeforeAppMiddleware = true is what I had set locally when initially running into this problem and I noticed that regardless of the value it yielded the same results, which is why I didn't included it in the original code. Sorry for not clarifying that.\nProvided determineRouteBeforeAppMiddleware = true yielded the results you were describing, that would at least be closer to the experience I was expecting with the LIFO approach.. If there is a vote, mine would be for FIFO by default.\nI don't think it really creates a lot of issues after seeing the order in which Middleware is executed now in Slim 3. \nFor anyone migrating to Slim 4, it would still execute app, route group, route as it does now, just the order in which you ->add() Middleware only on those levels would change.\nIf it was changed to be more LIFO where it was route, route group, app, it seems to get a bit more hairy when considering users who are migrating because it's the same terminology but actually behaves different. Especially if that is relying on, or affected by the \"determineRouteBeforeAppMiddleware\" setting, or it's equivalent in Slim 4. Meaning, the idea that this setting could affect the order of Middleware execution seems like it would potentially create it's own issue.\nSo even if someone just read FIFO in the Slim 4 docs and thought \"this changes everything\". If they went back to Slim 3 and saw what was reported here, they would see it wasn't really that big of a change. As currently it's LIFO of FIFO declaration, and a change to FIFO would just be FIFO of FIFO declaration.. @geggleto \n\nIf we change the ordering now, migrating projects is going to be a bit more tricky. We will have to make sure we document the changes extensively.\n\nPlease see https://github.com/slimphp/Slim/issues/2403#issuecomment-366967671 if you haven't already. I don't personally think this is going to be a huge change. Provided again it remains in the same order it does now of app, route group, route. The only change anyone would need is the ordering on those individual \"levels\", because currently it's LIFO of FIFO declaration, and a change to FIFO would just be FIFO of FIFO declaration. For me at least, this is more confusing.\n. @geggleto , sorry for the confusion. I wasn't implying to change it for 3, just that if it changed in 4, despite it sounding like a huge change, it really wouldn't be if the declaration hierarchy order ( App, Route Group, Route ) stayed the same. Because as it is, it's LIFO of FIFO declaration, which honestly didn't match the expectation I had at least when reading the documentation and implementing.. ",
    "fatcat386": "Thanks for your answer!\nTo reproduce problem we need just call this from controller:\nheader('Content-Type: application/pdf');\necho SOME_PDF_CONTENT;\nAfter that we can get two possible results:\n1. page with raw pdf code if outputBuffering is 'append' or 'prepend' and additional header from default response which break application/pdf.\n2. a blank page if outputBuffering is false, and additional header from default response which break application/pdf. We lose all echos here starting from 3.9.1, earlier it works and headers was correct as default response can't mess them after echo.\nBut nevermind, exit helps me, shame on me)\nMaybe it must be in documentation somewhere). ",
    "SadeghPM": "FIFO mode is more natural and Zend expressive also using FIFO mode.. ",
    "jupitern": "FIFO. More intuitive for me. . ",
    "hedii": "FIFO is definitely the more intuitive, less confusing.. ",
    "svpernova09": "Would prefer FIFO as more intuitive (like others have said) also easier to parse and understand when looking at it because you can change the order of $app->add(...) to change the order they're applied.. ",
    "trendschau": "FIFO for me, too, because it feels more natural, if you don't eat onions every day. I remember that I struggled with LIFO because i didn't read the Slim3-documentation carefully enough. . ",
    "richardjh": "I know it is LIFO so I work with it as it is and that is fine for me. Perhaps what is most important is that it is really clear in the docs what is used. Personally when I started I expected FIFO and only realized I misunderstood when my tests failed.. +1 for @theodorejb \"keep Slim as slim as possible\".. ",
    "adigaaa": "I prefer FIFO.. ",
    "teoria": "FIFO by default !. ",
    "brayniverse": "I prefer FIFO myself. . ",
    "sunchuo": "FIFO\nset $this->container->get('settings')['middlewareFifo'] = true;\nSlim/MiddlewareAwareTrait.php\n```php\nphp\n/**\n * Slim Framework (https://slimframework.com)\n *\n * @see      https://github.com/slimphp/Slim\n *\n * @copyright Copyright (c) 2011-2017 Josh Lockhart\n * @license   https://github.com/slimphp/Slim/blob/3.x/LICENSE.md (MIT License)\n */\n\n<pnamespace Slim;\nuse RuntimeException;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse UnexpectedValueException;\n/\n * Middleware\n \n * This is an internal class that enables concentric middleware layers. This\n * class is an implementation detail and is used only inside of the Slim\n * application; it is not visible to\u2014and should not be used by\u2014end users\n /\ntrait MiddlewareAwareTrait\n{\n    /\n     * middleware call stack\n     \n     * @var callable\n     /\n    protected $stack = [];\n/**\n * Middleware stack lock\n *\n * @var bool\n */\nprotected $middlewareLock = false;\n\n/**\n * Add middleware\n *\n * This method prepends new middleware to the application middleware stack\n *\n * @param callable $callable Any callable that accepts three arguments:\n *                           1. A Request object\n *                           2. A Response object\n *                           3. A \"next\" middleware callable\n *\n * @return static\n *\n * @throws RuntimeException         If middleware is added while the stack is dequeuing\n * @throws UnexpectedValueException If the middleware doesn't return a Psr\\Http\\Message\\ResponseInterface\n */\nprotected function addMiddleware(callable $callable)\n{\n    if ($this->middlewareLock) {\n        throw new RuntimeException('Middleware can\u2019t be added once the stack is dequeuing');\n    }\n\n    if (empty($this->stack)) {\n        $this->seedMiddlewareStack();\n    }\n\n    $this->stack[] = $callable;\n\n    return $this;\n}\n\n/**\n * Seed middleware stack with first callable\n *\n * @param callable $kernel The last item to run as middleware\n *\n * @throws RuntimeException if the stack is seeded more than once\n */\nprotected function seedMiddlewareStack(callable $kernel = null)\n{\n    if (!empty($this->stack)) {\n        throw new RuntimeException('MiddlewareStack can only be seeded once.');\n    }\n    if (null === $kernel) {\n        $kernel = $this;\n    }\n    $this->stack[] = $kernel;\n}\n\nprotected function prepareStack()\n{\n    $handler = array_shift($this->stack);\n    if (!empty($this->stack)) {\n        if (isset($this->container) && isset($this->container->get('settings')['middlewareFifo'])\n            && $this->container->get('settings')['middlewareFifo']) {\n            $this->stack = array_reverse($this->stack);\n        }\n\n        foreach ($this->stack as $callable) {\n            $next = $handler;\n            $handler = function (\n                ServerRequestInterface $request,\n                ResponseInterface $response\n            ) use (\n                $callable,\n                $next\n            ) {\n                $result = call_user_func($callable, $request, $response, $next);\n                if (false === $result instanceof ResponseInterface) {\n                    throw new UnexpectedValueException(\n                        'Middleware must return instance of \\Psr\\Http\\Message\\ResponseInterface'\n                    );\n                }\n\n                return $result;\n            };\n        }\n    }\n\n    return $handler;\n}\n\n/**\n * Call middleware stack\n *\n * @param ServerRequestInterface $request  A request object\n * @param ResponseInterface      $response A response object\n *\n * @return ResponseInterface\n */\npublic function callMiddlewareStack(ServerRequestInterface $request, ResponseInterface $response)\n{\n    if (empty($this->stack)) {\n        $this->seedMiddlewareStack();\n    }\n    /** @var callable $stack */\n    $stack = $this->prepareStack();\n    $this->middlewareLock = true;\n    $response = $stack($request, $response);\n    $this->middlewareLock = false;\n\n    return $response;\n}\n\n}\n```\n4.6.2018 update.\ntested!!!!\n```\n[root@localhost Slim]# php vendor/bin/phpunit UnitTest ./tests/MiddlewareAwareTest.php\nPHPUnit 4.8.36 by Sebastian Bergmann and contributors.\n.......\nTime: 603 ms, Memory: 4.00MB\nOK (7 tests, 7 assertions)\n```\n. @RyanNerd \n@theodorejb \n@ellotheth \n@matthewtrask \nsorry for post untested code. there are some stupid errors. all were fixed.\nnow it works well and passed the ./tests/MiddlewareAwareTest.php\nsorry for have no time to do better.\n2423\n. ",
    "hkodavid": "I prefer LIFO (3.x style) at default, the onion model is very spectacular and logic.. ",
    "ellotheth": "I like onion-style LIFO because it seems more consistent with the $app->group()->add() construction, where ->group() becomes the innermost middleware. Also I like onions.. @akrabat Righto, done!. Yup, and I'll add the docs. Should be be done by tomorrow night.. ",
    "Machigatta": "I like it FIFO style. But i feel like the developer should be able to decide which way he want's to organize his code and middleware.\nThe default should stand on LIFO, just to have lesser migration works for older-projects. (I'm just lazy and don't want to check back on some parts of my code \ud83d\ude06  ). ",
    "citadelnetworks": "I would say go with FIFO. I've just begun using Slim3 as a framework and at first I didn't realize the LIFO model and then when writing my own middleware and wondering why the second middleware wasn't getting the correct attributes, I realized the LIFO model. But by reading the code, I assume you read come from top to bottom, FIFO would make more sense.\nDon't know if this is possible, but if we can set LIFO or FIFO as the default, and have an option when start the $app to change it to the other.\nSo if it's LIFO by default, you can change toe FIFO; vice versa. . ",
    "auroraeosrose": "I know we want slim to be - well - slim\nBut a queue is different from a stack\nAnd you have to factor migration pain into this\nI'd argue the middleware iterator should be injectable and match an interface\nProvide a default implementation of queue and stack (FIFO and LIFO)\npick one as a default ( I don't really care, just name it right and document the heck out of it  - I'd mildly recommend a script to help with migration that recommends the BC version perhaps? )\nWith that you open up\n1. The default case works as expected out of the box with no configuration\n2. the second most common use case works out of the box with simple configuration\n3. Really complex cases become available by plugging in a custom implementation\nMy 2 cents :). Do the handlers have a specific call signature that is important (types, parameters, return types) that makes them more than any generic PHP callable?\nThat's generally my personal naming reason for naming a callable anything but callable\nI'll often phpdoc mark the special callable's signature somewhere and then use that unique variable name everywhere a specific callable type is used.  If only php had delegates (callable definitions). ",
    "unguul": "\nShould Slim 4 change to the FIFO model?\n\nNo.\n\nShould Slim 4's middleware be LIFO or FIFO?\n\nNeither.\nI'd make it configurable defaulting to LIFO for an easier migration path.\nI find @auroraeosrose 's suggestion to be the best approach.. Maybe take advantage of that type hinting and say \"handler of type callable\".\nmap(...  callable $handler){...}\nConsistency with the PSR is kept. We know it's a callable because of its type and we know it handles that route because it's called \"handler\".. @l0gicgate Good point. Thank you!\nThis makes $handler an even better choice then as $callable suggests the parameter is expected to be a php callable when that's not the case.\nI suggest the following: Route definitions have handlers which can be php callables or Class::method strings, container keys, etc. \nWe stick to the PSR and we remove some potential for confusion. Win win.. ",
    "johnrhunt": "100% FIFO. We implemented something to reverse the reversed order ourselves as backwards makes no sense to laypeople like myself. But yeah, something that's changeable would be good too.. I don't think I could even assign a label at all.. This helps us spot errors in the patch and also enables us to share information about the project with the maintainers team.. (suggested change). ",
    "SmiSoft": "Sorry, but I think, you are wrong. For example, authentification module should be external module (not included in kernel), because there exists site, that don't require authentification. The database support module may be external, there are not many sites, that don't use databases, but they may exist. The same is ORM, template engine, captha generator, logger and many other useful modules. But as for me, UTF-8 router must be included in kernel unconditionally, because most browsers (or we won't count IE as a browser?) encode URL in UTF-8 and it is a de-facto standart of the internet.. @odan: thanks for constructive comment. Certainly, FastRoute shouldn't be affected by this change. URLEncoding is not an option, I told in my first comment to pull request:\n\nOne of the possible solutions is to url-encode all patterns, but in such case, some special for patterns characters, like curly braces will be encoded too early and the pattern wouldn't work.\n\nSo, I offer my solution. Rather controversial, but this problem should be raised.\n\nHere is a shorter function to encode the pattern\n\nA great solution. I test it here: http://pastebin.ru/X2AQrqcs Results:\nInput data: nothing to encode\nencodeUrlPattern=0.15625 225000\npatternEncode=2.0625 225000\nurlencode=0.078125 245000\nInput data: very many chars to encode\nencodeUrlPattern=6.3125 825000\npatternEncode=19.546875 825000\nurlencode=0.078125 955000\nSo, your function is 3...10 times faster, than mine. But it cannot be compared to standart encoder, that is more than 280 times faster. Tests was performed on my ten years old notebook, but the absolute value was not the target, only relative values.\n\nperformance hit for people using ASCII only routes\n\n6.3 seconds for 5000 routes (for @odan solution, which is faster)... Reasonable. Maybe, it's really worth to enable this optionally? But router (where this option logically required) has no access to DI container with 'settings'. The only visible way is to move patternEncode to App\\map method. Maybe, I missed something?\nAfter some time, I found an intresting thing. In Uri.php file I found the function filterPath:\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/Http/Uri.php#L642\nI add a rawurldecode to the call:\n\nreturn rawurldecode(preg_replace_callback(\n\nPerfect! UTF-8 route works perfect at this point. To complete change, it seems, that this foreach should be commented:\nhttps://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L569\nbut I'm not sure. More, I don't found pitfall of this solution, they should be, as my ass sense :-)\nI think, it's worth to discuss this kind of solution (maybe, it even worth to close this pull request and switch it to Issues branch?).. ",
    "drewm": "If the Symfony 4 Router provides additional functionality with an increase in performance, then I'd be in favor.\nThe downside would any BC changes for those moving from Slim 3 to 4. I see the issue there to be less with defining routes (that happens typically in one place, so can be confidently updated) but more about maintaining the signature of the pathFor helper, whose use is peppered throughout a project.. We have the project's own claims:\n\nIn practice, combining all regular expressions improves URL matching performance by almost two orders of magnitude. In our benchmarks, Symfony 4.1 URL matching is 77 times faster than in previous Symfony versions. This also means that Symfony 4.1 router is now the fastest PHP router, beating FastRoute and all the other routing libraries.\n\nhttp://symfony.com/blog/new-in-symfony-4-1-fastest-php-router\nThat also links to a technical explanation of the approach, which includes comparison to FastRoute in particular:\n\nhttps://medium.com/@nicolas.grekas/making-symfonys-router-77-7x-faster-1-2-958e3754f0e1\nhttps://medium.com/@nicolas.grekas/making-symfony-router-lightning-fast-2-2-19281dcd245b. \n",
    "zscally": "Why cant we write our own leveraging some of the ideas from Symphony?. ",
    "dominikzogg": "I prefere to keep slim as simple as possible (without having bad design), in my point of view the symfony router is more complex than needed and its not using PSR7. @akrabat the problem with an opinionated choice to change is that it forces users to change their opinion too. So suggest to do it as @TiMESPLiNTER mentioned. ",
    "TiMESPLiNTER": "I'm also for an interchangable router(interface) with bridges to integrate them (symfony router/fastroute) but definitely not for the symfony router as a default router for slim.. ",
    "AlexNodex": "Perhaps some performance metrics (not just speed) but also scalability (i/e resources used - mainly ram) should be investigated?. ",
    "RobDWaller": "Yeah that is roughly what I was looking for, I think that will suffice, thank you. We can probably close this issue if you want to.. Ok will do, am happy to write some more tests so will bear that in mind for next time. . ",
    "juherr": "@slimphp Hi, can I have any feedback on my PR? \nCurrently, I am converting space to '+' which is not really logic.\nTravis is failing on php7.1 without any reason.. @danopz Oh! I didn't find the duplication, sorry!. ",
    "caom92": "That's what I thought, I believe this should be managed by the framework, though, and not by the programmer. . ",
    "sherwin14": "I found that my error is on  validity of tmp files in php.\nWhen putting the upload code on app\\routes.php the moved status value is FALSE\nobject(Slim\\Http\\UploadedFile)#67(8){\n    [\n        \"file\"\n    ]=>string(24)\"C:\\xampp\\tmp\\php9C02.tmp\"[\n        \"name\": protected\n    ]=>string(8)\"test.png\"[\n        \"type\": protected\n    ]=>string(9)\"image/png\"[\n        \"size\": protected\n    ]=>int(354057)[\n        \"error\": protected\n    ]=>int(0)[\n        \"sapi\": protected\n    ]=>bool(true)[\n        \"stream\": protected\n    ]=>NULL[\n        \"moved\": protected\n    ]=>bool(false)\n} \nAnd in app\\src\\Controller\\_Controller.php  is moved = true.\nobject(Slim\\Http\\UploadedFile)#67(8){\n    [\n        \"file\"\n    ]=>string(24)\"C:\\xampp\\tmp\\php639A.tmp\"[\n        \"name\": protected\n    ]=>string(8)\"test.png\"[\n        \"type\": protected\n    ]=>string(9)\"image/png\"[\n        \"size\": protected\n    ]=>int(354057)[\n        \"error\": protected\n    ]=>int(0)[\n        \"sapi\": protected\n    ]=>bool(true)[\n        \"stream\": protected\n    ]=>NULL[\n        \"moved\": protected\n    ]=>bool(true)\n}\nhope this help. Thanks in Advance!. @geggleto  Hi Sir Good am! May I know what is the main problem of this issue?. @geggleto actually as of now I can't resolve the issue, then I switch to other framework and now it is perfectly running.. ",
    "Dmitry-Kucher": "@pachico It was in original Response file so to keep consistency I added it to my class. Deletion maybe isn't a good idea if someone wants to use it for Easter egg in API.. @odan agreed with you. 100% about singular naming, but not absolutely about HTTP prefix for class name.\nIn my case code would be different:\nphp\npublic function __invoke(Request $request, Response $response) \n{\n    return $response->withStatus(StatusCode::HTTP_NOT_FOUND);\n}\nHTTP already presented in constant name. If everyone will agree I can remove HTTP prefix from constant and move it to classname. @odan Am I right that this package is for Slim 4.x, but my PR is for 3.x. I also can make a PR for slimphp/Slim-Http package if needed. > Yes, all the ::HTTP_ constant prefixes are quite redundant, because this class is only responsible for HTTP status codes, right? \nAgreed, but it's not true for all constants. CONTINUE constant doesn't work for php < 7.0\nSo, maybe HTTP is redundant for constant contains more than one word in their names. Not sure that it's related only to technical reasons. Statuses OK, FOUND, ACCEPTED and so on looks not so informative.\nEven:\nphp\nHttpStatusCode::OK\nLooks not so good, because it means something positive, but FOUND also means positive and it's not clear what's difference.\nphp\nStatusCode::HTTP_OK\nMore clear that it's about 200 status.\nMaybe it's related only to personal taste. @clue I saw Symfony implementation before suggested my PR. I made the separate class for StatusCode because it should be a Enum, maybe more suitable would be to use something like php-enum, but include huge amount of status codes into response isn't elegant way, that's why my PR looks as it looks.\nAnother reason why I'm not using Symfony http-foundation is double standards \ud83d\ude04 Not sure why they are add constants for status codes and not using them in messages . ",
    "clue": "@Dmitry-Kucher I appreciate the effort (both for Slim and for @ReactPHP where we're considering similar suggestions) :+1: \nMaybe this has been discussed before and I'm missing something, but I wonder what's the motivation for moving this to a separate class StatusCode (or HttpStatusCode)? Has defining them as part of the Response class been considered?\nIt's my understanding that HTTP response status codes are likely used in combination with a response object, so a separate reference and import seem to be a bit odd to me. Also, if you're looking at sites such as https://httpstatuses.com/200, you can find some references that other libs/languages use. In particular, Symfony happens to use the same Response::HTTP_OK naming convention. Personally, I'm not a Symfony user and I'm not saying compatibility is a must, but it's certainly a nice property and probably something worth considering.. ",
    "carc1n0gen": "@odan \nuse Slim\\Http\\StatusCode as HttpStatusCode\n\ud83d\ude03 . Are you reinstanciating the app for each call? I ask because that's what would happen in a real world scenario, every single request instanciates the app.. @joke2k  Because of the lifecycle of any php app, you're going to need to reinstanciate the app before the seconds, third, etc. request.  I had to something similar when testing an app of my own.\nphp in invoked, the app is created, the request is processed, the response is sent, and then php quits, which makes all the state stuff - parameters, headers, cookies disappear.  The next request starts it all over again.  The only way to emulate that with a unit test (since you're invoking multiple requests in a single unit test) is to reinstanciate the app before another request\nHere is my test with just the important parts\n```php\n<?php\nnamespace Tests\\Feature;\nuse Tests\\TestCase;\nuse Slim\\Http\\Environment;\nclass UnshortenALinkTest extends TestCase\n{\n    protected $app;\npublic function setUp()\n{\n    $this->app = $this->createApplication();\n}\n\npublic function testThatItRedirectsWhenAShortlinkExists()\n{\n    // Setup the mock environment\n    ...\n\n    // Run the app\n    $response = $this->app->run(true);\n\n    // Make some assertions\n    ...\n\n\n    // This is the important part\n    $this->app = $this->createApplication(); // re-init the app\n\n    // Setup the mock environment again\n    ...\n\n    // Run the app again\n    $response = $this->app->run(true);\n\n    // Make some more assertions\n    ...\n}\n\n}\n``. @mathmarques I don't believe that is this specific issue.  OP explained that he is indeed executingApp::runmore than once.. @geggleto Sorry, that was a typo on my part when converting my code into simpler snippets.  I've updated the question.  I injectCookies::classin to the constructor of my middleware and store it in$this->cookies`. It would be nice to be able to read cookies that have been set so far later on in the chain (like in a twig extension for example), but I guess I'll take another approach as suggested, thanks.. This is how dependency injection works.  If you would like it to happen through magic, you will want to look in to PHP-DI, which supports autowiring\nhttps://github.com/PHP-DI/PHP-DI\nhttps://github.com/PHP-DI/Slim-Bridge. People usually get around this type of thing by having the proxy/tunnel add a header to the request containing the port, then on the slim side you can retrieve that port number from the header.  I don't have an example for Ngrok because I am not familiar with it.. @akrabat Thanks for clearing that up. ",
    "joke2k": "\nAre you reinstanciating the app for each call?\n\nNo, actually I create one instance of App in setUp, but for a functional test I do more then one request with this app instance:\n```\npublic function setUp()\n    {\n        $this->app = (new App())->get();\n    }\nprotected function createRequest($method = 'GET', $url = '/', $data = [], $envs = [])\n    {\n        $method = strtoupper($method);\n        $env = [\n            'REQUEST_METHOD' => $method,\n            'REQUEST_URI'    => $url\n        ];\n        if (in_array($method, ['POST', 'PUT'])) {\n            $env['CONTENT_TYPE'] = 'application/x-www-form-urlencoded';\n        }\n        $env = Environment::mock(array_merge($env, $envs));\n        $request = Request::createFromEnvironment($env);\n        if ($method === 'GET') {\n            $request = $request->withQueryParams($data);\n        } else {\n            $request = $request->withParsedBody($data);\n        }\n        if ($this->xhr) {\n            $request = $request->withHeader('X-Requested-With', 'XMLHttpRequest');\n        }\n        return $request;\n    }\n```\nthen I execute it with:\n```\nprotected function executeRequest(RequestInterface $request)\n    {\n        $container = $this->app->container();\n        $headers = new Headers(['Content-Type' => 'text/html; charset=UTF-8']);\n        $response = new Response(200, $headers);\n    $container['response'] = $response->withProtocolVersion($container->get('settings')['httpVersion']);\n    $container['request'] = $request;\n    return $this->app->run(true);\n}\n\n```\nEverything works except those cached route's attributes.\n\nI ask because that's what would happen in a real world scenario, every single request instanciates the app.\n\nIt makes sense obviously, but it's more simple if we could do more then one request.. ",
    "fiskie": "This is indeed a problem you will run into if you try to use Slim under PPM/ReactPHP, so this would be appreciated\nHowever spellcheck Proccess in your unit test method names, or consider shorter names (testOptionalArgTransience, testOptionalArgTransienceWithSetArguments). ",
    "pabloalcaraz": "Thank you! It works!. ",
    "SakuraSa233": "I have switched to 3.x branch. It seems that all is ok. Thank for guys' reply.. ",
    "SananGuliyev": "@zelding thanks for your reply. I know it but I do not like to pass the whole container to the controller. It is not good practice I think. It looks like to buy market for getting one chocolate :). @chadicus thanks for the suggestion. I currently use this approach in one of my projects. Using controller as the dependency is a good solution but after some time it grows dependency container because you should have the dependency for every single container. That's why it would be nice to keep the DI slim, too. \nTo be honest I already overwritten the `\\Slim\\App' for that need. I want to know maybe the others also want to have something like this. Then maybe we can contribute to that functionality.\nFor example:\n```\n    /*\n     * @param string $pattern\n     * @param callable|string $callable\n     * @param array $dependencies\n     * @return \\Slim\\Interfaces\\RouteInterface|void\n     /\n    public function get($pattern, $callable, $dependencies = [])\n    {\n        $this->resolveCallable($callable, $dependencies);\n        parent::get($pattern, $callable);\n    }\n/**\n * @param string $callable\n * @param array $dependencies\n */\nprivate function resolveCallable($callable, $dependencies = [])\n{\n    if (is_string($callable)){\n        $methods = explode(':', $callable);\n        $container = $this->getContainer();\n\n        if ($container->has($methods[0]) === false){\n            $arguments = [];\n\n            foreach ($dependencies as $dependency) {\n                $arguments[] = $container->get($dependency);\n            }\n\n            $container[$methods[0]] = function () use ($methods, $arguments){\n                return new $methods[0](...$arguments);\n            };\n        }\n    }\n}\n\n```. ",
    "imageslr": "Thank you sincerely! I will look in these approaches.. ",
    "jonathankowalski": "Sure ! Due to this issue : https://github.com/slimphp/Slim/issues/2065. ",
    "yolcuiskender": "Hello John!\nThank you very much for the extended comments on my request, I truly appreciate it.\nI'm testing it with following code::\nroutes.php\n$app->post('/test/{foo}', function (Request $request, Response $response, array $args) {\n\n    $data_post = $request->getParams();\n    $data_query = $request->getQueryParams();\n\n    echo '<pre>';\n\n    echo '<h2>getParams</h2>';\n    print_r($data_post);\n    echo '<h2>getQueryParams</h2>';\n    print_r($data_query);\n\n    echo '<h2>$_POST</h2>';\n    print_r($_POST);\n    echo '<h2>$_GET</h2>';\n    print_r($_GET);\n\n    echo '</pre>';\n\n    die();\n\n});\n\nHere are the results:\nCurrent:\n\nProposed solution:\n\nThe current solution already mixes the wrong parameters into getParams. As you can see there are the keys 0 and 1 inside getParams which in reality are 123 from query params as 0 and  and 123 from  body as 123 which have lost their numerical indexes.\nThe proposed solution currently favours the post array but I don't think this should be an issue in this case as it wasn't functioning properly in the previous version.\nI'm using slim for a long time but obviously you guys are the ones with more experience in this project so I always consider that I might be wrong. \nNevertheless I'll be more than happy to help!\nThank you. @akrabat yes sir, I'm just having problems writing the test. I didn't want to disturb. I'll be writing the correct test once I've figured out.. I've added the tests sir.. Thank you too sir, sorry for keep you waiting.. ",
    "newbie14": "Hi Ryan,\n             I tried is the same I keep getting 404 not found when I got to http://myip/api. Then what I added was in the /var/www/html I added an index.php so when I press this http://myip/api it shows me this index file only. Then when I tried say http://myip/api/token it say This site can\u2019t be reached.  The root I change to /var/www/html/api/public you miss the html also the same with and without. What else could be wrong is really difficult to check from the log. . Hi Ryan,\n              Thank you for kind help. Yes I will try to post on SO. . ",
    "wmelton": "Oddly enough, if you add trailing slashes to the routes, only the correct route is matched. \nE.g.: $app->get('/dashboard/{site_id}/', \\App\\Controllers\\SitesController::class . ':render');\nand\n$app->get('/dashboard/{site_id}/{campaign_id}/', \\App\\Controllers\\SitesController::class . ':renderCampaign');\nNo middleware or configuration has been put in place to change the default behavior concerning trailing slashes. This project was built from slim-skeleton. \nThis is not consistent with the online documentation, so I'm still curious if this is related to the PHP Version somehow.. This is on Apache 2, PHP 7.2 (tried on 7.1 too). \nhttp.conf directory setting: \nOptions Indexes Includes FollowSymLinks MultiViews\nAllowOverride All\nOrder allow,deny\nAllow from all\nHtaccess is setup per documentation: \nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^ index.php [QSA,L]\nIf there are specific config settings needed, let me know. Happy to supply. ",
    "kip-13": "What server do you use ? the built-in ? If is other, what is the config of that ?. Your first request is not a valid JSON and when Slim try to parse it, it doesn't recognized and return null.\nhttps://github.com/slimphp/Slim/blob/0803c9ed901db504a42b1f163850b6d5c7c4694a/Slim/Http/Request.php#L206-L212. @chris48s see this from RFC 7159\n\n\nExamples\n\nThis is a JSON object:\n  {\n    \"Image\": {\n        \"Width\":  800,\n        \"Height\": 600,\n        \"Title\":  \"View from 15th Floor\",\n        \"Thumbnail\": {\n            \"Url\":    \"http://www.example.com/image/481989943\",\n            \"Height\": 125,\n            \"Width\":  100\n        },\n        \"Animated\" : false,\n        \"IDs\": [116, 943, 234, 38793]\n      }\n  }\n\nIts Image member is an object whose Thumbnail member is an object and\n   whose IDs member is an array of numbers.\nThis is a JSON array containing two objects:\n  [\n    {\n       \"precision\": \"zip\",\n       \"Latitude\":  37.7668,\n       \"Longitude\": -122.3959,\n       \"Address\":   \"\",\n       \"City\":      \"SAN FRANCISCO\",\n       \"State\":     \"CA\",\n       \"Zip\":       \"94107\",\n       \"Country\":   \"US\"\n    },\n    {\n       \"precision\": \"zip\",\n       \"Latitude\":  37.371991,\n       \"Longitude\": -122.026020,\n       \"Address\":   \"\",\n       \"City\":      \"SUNNYVALE\",\n       \"State\":     \"CA\",\n       \"Zip\":       \"94085\",\n       \"Country\":   \"US\"\n    }\n  ]\n\nHere are three small JSON texts containing only values:\n\"Hello world!\"\n42\ntrue\n\nYou are right, is a valid syntax that json_encode() must recognize and not show any error but is not a JSON text that represent a JSON object or JSON array is only a single value(primitive type).\nHow do you can parse an single value that isn't an structure ? But if you read again:\n\nJavaScript Object Notation (JSON) is a text format for the serialization of structured data.\n\nI think you can only get a structure (as @akrabat said \"getParsedBody () returns an associative array\") from another that can be analyzed like that...\n. ",
    "Sixtisam": "I can confirm this issue.\nThe problem is the following code in \\Slim\\Http\\Uri on line 211 - 215:\nphp\n        if (stripos($requestUri, $requestScriptName) === 0) {\n            $basePath = $requestScriptName;\n        } elseif ($requestScriptDir !== '/' && stripos($requestUri, $requestScriptDir) === 0) {\n            $basePath = $requestScriptDir;\n        }\nAs @veeveEdwardHalls already mentioned, when starting the PHP Built-In Server with a router script (see  https://secure.php.net/manual/en/features.commandline.webserver.php), the two condition will always be true. This causes, that Slim assumes the entire Path as the basePath. As a consequence, the route / will always match, for any path.\nI dont know really how to fix this properly.\nCurrently, I'm fixing it by placing\nphp\nif(php_sapi_name() == 'cli-server') {\n    $_SERVER['SCRIPT_NAME'] = '/bootstrap.php';\n}\non top of bootstrap.php.. ",
    "ProPheT777": "\nYour first request is not a valid JSON and when Slim try to parse it, it doesn't recognized and return null\n\nIt's not better to throw an exception rather than fail silently here ? In that way it's can be catch from errorHandler to transform it into 400 bad request instead. And we need to explicitly catch the error to handle it from controller rather than the opposite logic (checking each time if it's not null)  \n. @designermonkey yes it's acceptable at this time, my point it's that could be improved for furtur version. In php 7.3 json decode can throw exception rather than failing silently, failing silently is not a good practice and php core fixed it. But again, I understand the point that slim should not do too much. Reconsider this later to follow next json_decode implemention from core. \n@akrabat indeed, what's your point about that, IMO it should throw an \\InvalidArgumentException like  withParsedBody - I know it's not slimphp scope - I have open discussion to have more detail and challenge the current signature against that case - https://github.com/php-fig/fig-standards/pull/1071 May be I miss something \n. @akrabat didn't see it before, but you already broke it : https://github.com/slimphp/Slim/blob/1ca78596de8f1b0e2389b812a6ce64d1ccd9e49f/Slim/Http/Request.php#L1044 . Ok, let's think differently, if we move decoding part outside of request object scope, and fill it via withParsedBody instead ? then getParsedBody becomes anemic, and decoder are free to throw exception on error. We need to move the decoding logic when request is created. \nIn that way, we fixed current exception and the bad content issuen, What do you think ? \n. Yep, that's why closure are not a bad choice in getParsedBody. Another line of throught, if we already broke the psr7 interface, we could do it twice for a good reason (yes there is no good reason, ssht :stuck_out_tongue:) My point is if we throw an exception, does it solves more problem than it creates, or as popular OSS project should we strictly follow PSR-7 or could we make a little exception do handle it in best manner for us. . > The only potential problem I can see is that we may end up doing parsing work that isn't needed if we pre-parse and then the user doesn't call getParsedBody() which would slow down the request.\n@akrabat the response of @weierophinney in https://github.com/php-fig/fig-standards/pull/1071#issuecomment-419982991 could be a good solution to that problem, plus with PSR15 support in v4 it's match. Hey, \nYou should declare it very earlier, before filling the container. \n```php\n$app = new App($settings);\n/* @var Container $container /\n$container = $app->getContainer();\nif ('dev' !== $container->get('settings')['app']['env']) {\n    $sentry = new \\Raven_Client('xxxx', [\n        'environment' => $container->get('settings')['app']['env'],\n        'release'     => $container->get('settings')['app']['version'],\n        'site'        => $container->get('settings')['app']['domain'],\n        'sample_rate' => 0.5,\n    ]);\n$sentry->tags_context([\n    'php_version' => PHP_VERSION,\n]);\n\n$sentry->install();\n\n} else {\n    $sentry = null;\n}\n$container['sentry'] = function (ContainerInterface $c) use ($sentry): ?\\Raven_Client {\n    return $sentry;\n};\n$container['logger'] = function ($c) {\n    $settings = $c->get('settings')['logger'];\n    $logger = new Monolog\\Logger($settings['name']);\n    $logger->pushProcessor(new Monolog\\Processor\\UidProcessor());\n    $logger->pushHandler(new Monolog\\Handler\\StreamHandler($settings['path'], $settings['level']));\n$handler = new Monolog\\Handler\\RavenHandler($c->get('sentry'));\n$handler->setFormatter(new Monolog\\Formatter\\LineFormatter(\"%message% %context% %extra%\\n\"));\n\n$logger->pushHandler($handler);\n\nreturn $logger;\n\n};\n // container declarations ... \n```\nArrange the code as your need ofc, it's from one of my apps. \nIn your case It's not working because you declare it inside a closure which may not be executed until a service require it to start. e.g : $container->get('logger'); will resolve the closure and raven will be instanciated.\nBy declaring it much earlier as you can, sentry is already instanciated and wired to php and can track all errors, without side effect of DI. In your script, sentry is started only if the DI (you assume the DI can't bug at runtime, which is wrong) do not throw an error, it's not perfect for monitoring purpose.\nYou can also start it before calling $app = new App($settings); in my case, it's trivial code that can't \"bug\", depends of what you do.\nHope it's solve your problem\n. ",
    "mhf-ir": "This method seems be not applied\n$slim = $app->slim();\n        $env = Environment::mock([\n            'REQUEST_METHOD' => 'GET',\n            'REQUEST_URI'    => $swagger['basePath'] . '/jwt',\n            'QUERY_STRING' => 'l=' . $level,\n        ]);\n        $req = Request::createFromEnvironment($env);\n        var_dump($req->getQueryParams());\n/*\narray(1) {\n  'l' =>\n  string(1) \"1\"\n}\n*/\n        $slim->getContainer()['request'] = $req;\n        $response = $slim->run(true);\nBut on server side $_GET is []. \"slim/slim\": \"^3.10\". Seems be superglobals dosnt change like $_GET  ... just $request object changes will be apply. . ",
    "anant-svc": "Thanks again to @odan \nSolved my problem.. ",
    "voyula": "Not yet. This is patch, removes unnecessary directory scan for the better performance.. Please see this. @akrabat \nhttps://getcomposer.org/doc/articles/scripts.md#writing-custom-commands\nNote(Official) in getcomposer.org;\nIn this example no matter if the phpunit binary is actually in vendor/bin/phpunit or bin/phpunit it will be found and executed.. Please see \"composer.lock\" file.. ",
    "Vaalyn": "You are actually not forced to use the $_FILES variable. You can use the getStream method of the Slim/Http/UploadedFile to retrieve the file as a stream and then use the readStream, writeStream, putStream and updateStream methods from League/Flysystem. You have to use the detach method of the stream that getStream gives you to get the underlying resource object and supply that to the Flysystem methods.. ",
    "estelsmith": "I'm not having any issues extending Slim\\App in my project.\n```php\nclass MyContainer extends \\Slim\\Container\n{\n    public function __construct(array $values = [])\n    {\n        parent::__construct($values);\n    $this['settings']['determineRouteBeforeAppMiddleware'] = true;\n\n    $this->register(new MyCustomServiceProvider());\n}\n\n}\nclass MyApp extends \\Slim\\App\n{\n    private $hasBooted = false;\npublic function __construct(MyContainer $container)\n{\n    parent::__construct($container);\n}\n\npublic function boot()\n{\n    $booted = &$this->hasBooted;\n    if ($booted) return;\n    // @TODO Do some bootstrappy stuff if needed\n    $booted = true;\n}\n\npublic function run($silent = false)\n{\n    $this->boot();\n    return parent::run($silent);\n}\n\n}\n```\nI'm not sure if you've tried this method, but it works fairly well without having to hack up Slim.\nYou can do one-time bootstrap work in MyApp::boot(), or wire up routes and services in MyContainer or MyCustomServiceProvider.. ",
    "Abdillah": "Seem I was too hard on pushing the ExtendedApp immutable (to make it testable) and unaware of just (1) extends, (2) getContainer(), and then (3) modify in place. But, I have successfully restructure my tests by compositing the Slim\\App inside other class and doing (2) and (3).\nIf I retain the immutability, means that every container must be cloned before modified, then assigned into cloned app. Something like this:\nphp\n// In ExtendedApp\npublic function addDependency($key, $value)\n{\n    $container = clone $this->container;\n    $container->set($key, $value);\n    $self = clone $this;\n    $self->container = $container; // Not possible, due to the privatization\n    return $self;\n}\nTo make it possible, I \"copy\" the whole Slim\\App but the Slim\\RouteGroup too tightly coupled.\nBut, well, the real goal has been achieved and \"extension\" is possible, easier. I use your method, happily ever after... except once my curiosity woken up. Thank you.. ",
    "MilesChou": "In my case,  I want to refactoring from Slim, and using the following code to transfer Laravel request to Slim:\n```php\n// Laravel 5.6\nRoute::any('/{any}', function (SlimApp $app, ServerRequestInterface $request) {\n    $slimRequest = Request::createFromPsr7Request($request);\nreturn $app($slimRequest, new Response());\n\n})->where('any', '.*')->name('slim');\n```\nBecause the legacy code is:\n```php\npublic function __invoke(Request $request, Response $response)\n{\n    // \\Slim\\Request\n    $params = $request->getParams();\n// ...\n\n}\n```. I used custom class:\n```php\nclass MyHandler\n{\n    public function __invoke(Request $request, Response $response)\n    {\n        // \\Slim\\Request\n        $params = $request->getParams();\n    // ...\n}\n\n}\n$slimApp->get('/foo', new MyHandler());\n// will see the fatal error: \"method getParams not defined\"\n$slimApp(new StandardPsr7Request(), new StandardPsr7Response());\n```\n. ",
    "marcelloh": "```\n        $this->container = $app->getContainer();\n        $this->container['errorHandler'] = function ($container)\n        {\n            return function ($request, $response, $exception) use ($container)\n            {\n                // not in use\n                $request = null;\n                $response = null;\n            $error = $exception->getMessage();\n            $result = $container['view']->fetch('src/Common/views/error.twig', ['error' => $error]);\n\n            return $container['response']->withStatus(500)\n                                ->withHeader('Content-Type', 'text/html')\n                                ->write($result);\n        };\n    };\n   $this->container->get('errorHandler');\n\n```\nline 2 and the last line will cause:\nCannot access offset 'errorHandler' on Psr\\Container\\ContainerInterface.\n. That's why I think it should return a container, which is an implementation of an Interface.\n. ",
    "rsd1234": "I cant get the answer. ",
    "samtny": "Thanks, guys.. ",
    "pvermeil": "Thank you so much. I can't believe this was that trivial. Just typo inside post function parameters. I close the topic, have a nice day/night. ",
    "lotarbo": "did you try $client = new \\Raven_Client(...); ?. ",
    "flowdee": "You're right, this worked out! . ",
    "o5": "OK, thanks!. ",
    "JeanPaiva": "@akrabat can I get this one?. Now $router->map(['get'], '/foo', 'foo:bar'); will return Slim\\Exception\\HttpNotFoundException.\nIt's correct?\nPR #2507 . I agree with @luispabon. If the user wants to use the key name, he just needs to pass the array directly. $app = new App($arr['settings']);. What would be this the correct way to test this PR?\nhttps://github.com/slimphp/Slim/pull/2507/commits/d54b5bac81a5d6874c79ba9ff24f5a8392403208. ",
    "sduduzog": "@tflight Thanks for the response, I'll definitely do so. I have been working with GD before using Slim on the same machine. I even tried injecting gd functions as services with no luck. Turns out my php.ini file had some errors, fixed and thank you for the heads up @tflight . ",
    "doganoo": "Hey, I can understand :)\nI will try to add if i find time for that. Thank you!. ",
    "hidehalo": "Same error. ",
    "alffonsse": "Wow that was a quick response !\nThank you for the explanation :smiley: . ",
    "BoGnY": "\ud83d\udc4d . ",
    "ObeeWanKenobee": "Thanks @akrabat. ",
    "marcelthole": "oh sorry. There is already a phpstan PR #2505 - my fault. oh sorry. There is already a phpstan PR #2505 - my fault. ",
    "ilyachase": "Thanks! Would be great to see this example in the docs.. Will do.. Sorry it was already in the docs. My bad.. The idea is that routes are static entity and they are hardcoded in app source code. Therefore, cache file for routes should not change in a runtime. So we wanted to add another step in our deploy pipeline to create cache file once for current release package, but for some reason framework forced this file to be writable (and even its base directory).\nGlad you guys figured it out, thanks!. ",
    "webvikrant": "Thanks Rob for such a quick response.. ",
    "slischka": "I found typo in my nginx configuration:\nlocation ^~ /api/v1 {\n        index api.php;\n        try_files api.php /api.php?$is_args$args;\n    }\nbut i stil think Slim should handle this propery even if query string starts with ?.\nBut this should be closed.. So this should be close. Thanks. . ",
    "malithmcr": "@douglasnoronha  It worked for me perfectly. Could you share your response?  My CORS settings looks like this : \n$app->add(function ($req, $res, $next) {\n    $response = $next($req, $res);\n    return $response\n        ->withHeader('Access-Control-Allow-Origin', 'https://website.com')\n        ->withHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Accept, Origin, Authorization')\n        ->withHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');\n});. ",
    "ovimughal": "@douglasnoronha It would be better to handle CORS in .htaccess. ",
    "archi-tektur": "Okey, but still - it's not in the interface so IDEs and Rich text editors will throw a warning, why don't you create SlimResponseInterface that will extends PSR7 implementation?. Okay, thanks, to be closed then. ",
    "farpat": "Firstly sorry for my English, I'm French.\nYou use Zend\\Diactoros\\Stream@read where you send the parameter $length being a string (even if this one contains a number like \"138\") and when fread is called - a few lines later - a fatal error is triggered.\nThis is why I purpose this fix.. The fatal error is provoked in line ~277 of file \" vendor/zendframework/zend-diactoros/src/Stream.php \" => $result = fread($this->resource, $length); \n$length must be an int not a string.. Sorry, I fix the the filename in my previous comment => https://github.com/zendframework/zend-diactoros/blob/master/src/Stream.php#L277. Sorry, I did not investigate enought to say it but I can search this if you want.. This concern surely the line $chunkSize      = $settings['responseChunkSize']; as you talk.\nAlso, you'are right => My previous commit does not fix this but my second commit must be fix the issue normally.\nThanks for your patience.. ",
    "mbohal": "@akrabat Should I update the https://github.com/slimphp/Slim-Website/tree/gh-pages-4.x to reflect this change? \nI'm not sure what is going to happen with the docs when Slim 4 gets released and I do not want to introduce any conflicts.. I see.That would probably work. I will use it now.\nIMHO it is boilerplate code though. If these lines must be part of each project that wants to follow best practices, then they might as well be part of the framework.\nOr is there some reason why not having set_error_handler in the framework is the better option?\n. @ akrabat Would you accept a PR to the documentation describing the solution suggested by @chriseskow?\nI've spent quite a bit of time with this and I had to look through the source code to figure out whats up. I understand your decision, but it might make users life easier if it is documented. \nWhat about the skeleton app?. @akrabat \nI would put it in the skeleton app, because I'm used to treating notices and warnings as errors during development and testing. I think it helps to write cleaner code.\nBut then again if it was up to me I would put it in the framework itself. So should I make a PR against the skeleton app?. ",
    "tomkyle": "IMHO Nobody will take the \"hack\" word too literally. The above was meant as a roughly outline \u2026 did'nt want to trigger you or someone else. Sorry for that :beers:. @zelding Your points are valid; I realize the extract is no good means for examples. \nMay I give it a second try \u2013 with the vars named according to the Slim User guide \u2018vocabulary\u2019 and source code. Also I felt it is necessary to not force a user to use a route name. I personally like them a lot and have my routes in a YAML map, but others may have their routes in a DB. \nRoute data $route_data requires these keys:\n- 'pattern'\n- 'callable'\nOptional keys in $route_data:\n- 'methods' (optional, defaults to GET)\n- 'name' (optional route name, overrides array's name entry)\n- 'middleware' Array with middleware\n```php\nclass App\n{\n/* \n   * Most generic route: Just GET, no middleware stuff. \n   /\n  public $default_route_data = array(\n    \"name\" => null,\n    \"methods\" => [ \"GET\" ],\n    \"middleware\" => [ ]\n  );\n/*\n   * @param  array  $route_data \n   * @param  string $route_name Optional: custom route name\n   * @return RouteInterface\n   /\n  public function route( array $route_data, string $route_name = null  )\n  {\n    // Enable user omitting defaults\n    $route_data = array_merge($this->default_route_data, $route_data);\n// Create route instance\n$route = $this->map(\n    $route_data['methods'],\n    $route_data['pattern'],\n    $route_data['callable']\n);\n\n// Name it (parameter name overrides route data)\n$route_name = $route_name ?: $route_data['name'];\nif ($route_name):\n    $route->setName($route_name);\nendif;\n\n// Add route middleware\nforeach( $middleware as $mw_callable ):\n    $route->add($mw_callable);\nendforeach;\n\nreturn $route;\n\n}\n}\n```\nThe route method is just a per-route wrapper around \u2018eat this, then call map method\u2019. It creates one route as do get, map and their friends. IMHO by itself it does not need further validation, as anything thrown in map (and later) will bubble.\nzelding's RouteDefinition idea: Why not, a RouteDefinition class can help dealing with route defaults, shortening the method logic. On the other hand, it also would add complexity elsewhere since the instances have to be created somehow after YAML or DB retrieval. Anyhow, the route method could then accept both array or RouteDefinition. \u2013 Standardization is good, PSR-66 Routes perhaps ;-). \n--\nEdit: Removed surfluous \"->app\" in example.\n. ",
    "wdolek": "@akrabat Thanks for quick reply! :) Yes, I noticed that request is immutable, just needed your post to realize connection between container and pipeline... (doh) I'm happy this is not a bug && sorry for polluting github issues.. ",
    "garipovazamat": "\nI don't think this should go into core.\n\nWhy?. In Slim/Router.php class, in setCacheFile method checked is_writable\nif ($cacheFile !== false && !is_writable(dirname($cacheFile))) {\n     throw new RuntimeException('Router cacheFile directory must be writable');  \n}\nI have already file, where I will write, and it writible, but not all directory. So, I had to override this method.\nMay be checking directory if only file doesn't exist is better way?. If I want to use Router only for reading cache file, without rewriting it, and I dont have permission to write it then checking is_writable won't allow me to use this file. May be is better to check is_writable when we want to write in file?. > FastRoute always tries to overwrite the file when you instantiate FastRoute\\cachedDispatcher()\nIn FastRoute checked file_exists and if it exists will return new $options['dispatcher']($dispatchData); without rewriting file.\nhttps://github.com/nikic/FastRoute/blob/66cc306f8360f4d9a7a5b9ad8b3c9a85d12b6e5c/src/functions.php#L55. ",
    "ghola": "Thank you for pointing out the related issues. Closing this one.. ",
    "LeafChage": "@l0gicgate \nIt is my mistake.\nBut I was supposed to prevent, if it can not run twice.. Thanks. ",
    "iongion": "Not really a framework issue, just that I do not find the proper idioms for this. Will close the ticket!. ",
    "devtom30": "Thanks!\n@RyanNerd You're right, it's an improvement and not a bug.\n@l0gicgate Great!\nHave a nice day!. ",
    "shyim": "Internal Webserver from php \ud83d\ude06 . ",
    "rndm2": "Sorry, I have no time now. \n. ",
    "mducharme": "@juliangut I ported the service code exactly as it was previously in the container.\nI don't disagree with the idea; I just think that it's a bit outside the scope of that PR.\n. ",
    "jony4": "How about this?\n```\n    public function getCookieParam($key)\n    {\n        $cookies = $this->cookies;\n        if (isset($cookies[$key])) {\n            return $cookies[$key];\n        }\n        return false;\n    }\n```\n. ",
    "crocodile2u": "Because introduction of a new method to the interface (setDefaultInvocationStrategy) is a BC break for user implementations, it has to be mentioned in the docs as well.. So it's a proper time to add this info to UPGRADING.md. Smth like \"If you're using a custom router implementing Slim\\Interfaces\\RouterInterface, please note that you will have to implement a new method - setDefaultInvocationStrategy()\". ",
    "asheliahut": "null === $this->request is better here no overhead of function call.. should stay ===. you can just return before the else and have this html set as a second return lowering cyclomatic complexity by 1.. if someone passes an exception code of 0 this will never execute.. if someone sets a message of '0' it also will fail to run.. what about 0 here too. and '0' here too. May want to exchange \\n for . PHP_EOL for working with windows support.. you can just return the parent constructor otherwise do $this->details = $details\nthus removing the else.. this can be an if and not an else if because of the return will stop it anyways.. null === $this->details. Please verify the URI and try again.. either -> one of the following. null ===  $renderer. null === $renderer. change to if because of return. I feel like this error log should also be able to take in an outside error logging, as in be able to take in a logger middleware of some kind.. either-> one of the following. === null. !=== null. either should be \"one of the following\". ",
    "imjoehaines": "Removed. ",
    "tersmitten": "Some example config, to show how to ignore certain (found) errors. Allow failure. It's only at level 1 now, this can be increased over the time. ",
    "candrianarijaona": "\nthe slowest\n\nIs it important to mention it here? . ",
    "PaulKiddle": "Good call. Have updated this.. "
}