{
    "leah": "Does the demo app work for you okay? Are you customizing the text or label?\n. Hmm... I changed the demo to a UITabBarController instead of a UINavigationController and it still worked okay. Maybe there's a naming conflict? Do you have another label called \"refreshLabel\"? Also, does the text show up when you start pulling on the view, or does it never show up at all?\n. Thanks! I've updated the code with your fix.\n. I assume you could just alter and restore the original content insets? You'll have to modify the code, but that's okay.  \nOn Thursday, August 30, 2012 at 11:23 AM, leoncfu wrote:\n\nI noticed this wipes out any content insets that existed on the table. Could this be modified to preserve them?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/leah/PullToRefresh/issues/26).\n. \n",
    "renegade78": "Yes, the demo works perfectly! I've left the text and label code as is - I will be customising it later.\nI'm wondering if it's to do with the appdelegate as mine is different to yours as I have a tab bar controller.\n. I don't have another label with that name. The text never shows! But the arrow does! Don't worry, I'm obviously doing something wrong!\n. Thanks for your help, I sorted it. I moved setting the text from the viewdidload method. Thanks though!\n. ",
    "jonhull": "I had the same issue. I think it is because I loaded the view via a xib, and the label strings are set in initWithStyle:.  I moved it to viewDidLoad and everything works now... \n. ",
    "lucaslain": "YES! Thank you @Jonhull! I had the same problem. Moved the labels to \"viewDidLoad\" and everything works =). \nps: @leah ... great work :)\nLucas. \n. ",
    "andmej": "+1.\n. ",
    "gabr10": "This works beautifully with all the init methods implemented. Kudos!\n. ",
    "ghost": "I'm super clumsy with GitHub, I'm sorry. Anyway, thank you so much for making this open-source and available to everyone. I'll look for a way to fix this and I'll post it if I find it.\n. ",
    "nehalvpatel": "Ran into the same problem, try this:\n// insert your own data update code here\n[self.tableView reloadData];\n[self performSelector:@selector(stopLoading) withObject:nil afterDelay:1.0];\n. ",
    "thedaniel": "I'm working on an adaptation of this code to do just that, thought as part of a custom view controller that's not a UITableViewController subclass.. I'll try to clean up my changes and submit a pull request when I'm done.\n. ok - it was a pretty simple modification. I'll see if I can clean it up & submit a pull request when I go to work tomorrow.\n. ",
    "iliaskarim": "I would be very interested in this feature as well!\n. ",
    "iheart2code": "aaronpk's commit fixes this as well\n. ",
    "Hackmodford": "This is exactly what I needed Thank You!\n. ",
    "zadr": "performSelector:withObject:afterDelay: is non-blocking and will defer to the runloop. I suspect (but haven't bothered benchmarking) that spawning a new thread, and then dispatching back to the main runloop is actually more expensive than letting the runloop handle things outright.\n. ",
    "macintosh264": "It is useful when executing network requests, and thus is better than letting it run on the main runloop.\n. ",
    "monzonj": "Actually, the refresh method should be replaced by a delegate that performs whatever request is needed to update this table view. This controller is generic and should be oblivious about implementations details\n. ",
    "endoze": "I think I did this right.  New to git and github.  I've been using Subversion for a long time so just now getting the hang of the differences.\n. ",
    "Vinnie1991": "Love your update!\nI hope one day the author of this project will wake up, and pull you're commits in the project!\n. ",
    "iprebeg": "Hi Noriaki!\nYou probably have to call stopLoading: selector after updating either failed or finished\n. I'm not sure what you actually load but here you are assumimg that loading takes exactly 2 sec, which is probably wrong. \nBetter way to do it is calling this selector with no delay on event that signalizes that loading is done or failed, e.g. connection:didFinishLoading or connection:didFailWithError:\n. ",
    "hardreggaecafe": "Absolutely!\nI didn't write below line.\n[self performSelector:@selector(stopLoading) withObject:nil afterDelay:2.0];\nThanks for your advice.\n. ",
    "coryallegory": "It might be safer to implement a check for which os version is running, to maintain support for ios5 and earlier as well\n. ",
    "Miguel86": "Where did you added this?\n. ",
    "TUNER88": "@Miguel86 inside\n- (void)viewDidLoad{\n  }\n. "
}