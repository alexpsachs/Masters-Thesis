{
    "mmalecki": "This has been fixed in 0380d69a30c9d512bf807ca52ef6ca87f1179a7a\n. Is this still planned? It would be great to make ws a stream with no need to wrap it. \nI'd love to help, if it's still in the pipeline.\n. @3rd-Eden maintaining current API and making it streaming would result in enormous amount of bloat. What about a minor/major release with streaming API only?\n. ",
    "Kumamon38": "Ok, thanks\n. ",
    "einaros": "I'm afraid I haven't tried compiling the modules in Windows. I can't even say for sure if VS2005 is supported for compiling node.js, which would be the first step you'd have to take in order to get 'ws' to compile as well.\n. The native components are there to make sure the performance is as high as possible. WS is built to maximize throughput and minimize resource consumption, and is currently (by a decent margin) the fastest websocket implementation for node.js.\nThere are other modules around which do not use such native components, and can consequently be used on Windows as well.\n. @abans, I wrote the websocket code for socket.io, so I know quite well how it's built and what it's built on :)\nThe native aspect of node modules is something that is likely to go through some change in the future, and it's a big part of the push to make node.js more available on platforms such as Windows. Before that I may add javascript replacements for the binary bits of WS, but I won't make any promises right now.\n. Taken care of in v0.4.0.\n. Awesome, thank you both!\n. Thank you! I'll look into this and get back to you.\n. Sorry for taking so long to respond to this one. It makes sense to have it there.\nWould you mind adding a test case for it as well? Just dupe one of the ping event tests, and it should be good to go.\n. Which version of Safari are you using?\nOn Mon, Jan 16, 2012 at 12:19 PM, jrstanley <\nreply@reply.github.com\n\nwrote:\nI am trying to connect to a WebSocketServer. Using Chrome this works fine,\nbut using Safari I am getting an error saying a status code 400 is\nreturned. I believe this might be something to do with the protocol\nversions, does this library support detecting and using the appropriate\nprotocol for browsers?\nThanks\nJames\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/13\n. Right. Looking at http://en.wikipedia.org/wiki/WebSocket#Browser_support, it seems Safari is still lagging behind, and only support the horribly outdated hixie drafts.\n\nws won't be supporting hixie, as that specification really just has to die.\nwebsocket.io, on the other hand, which falls back to using ws' fast parsers for updated protocols, does support hixie. I suggest you try that :)\n. Could you try reinstalling 0.4.1 now? It seems the build cache had been included in the npm package.\n. Shouldn't happen again. Thanks for the heads-up!\n. I don't see slow clients as being an issue. When the client eventually finishes sending a message, the websocket will emit an event.\nIn a future version, and sooner rather than later, I will be adding options to limit the amount of data a client can receive per frame / per message.\nRight now, from version 0.4.6, the client stream can be paused for clients who are sending a lot of data. This will, however, not be truly useful until I also add an indicator of the bandwidth consumed by each client.\n. The problem here is that non-fragmented binary packets are allocated from a pool which isn't necessarily reallocated between received packets. With this patch, buffers which have been emitted from the receiver may be overwritten / corrupted in subsequent receives.\n. The bufferpool will be much, much faster than allocating a buffer straight up for packets larger than roughly 1024 bytes (and also depending on memory usage otherwise). Below this, the node internal buffer pool will be used. Above this, actual memory allocation will happen.\nI do have a possible optimization in mind, though, which could kill a few more allocations, but it isn't quite as straight forward as this changeset. Nevertheless, thank you a bunch for looking into it :)\n. I think that's a very natural direction for the api to take at this point.\n@3rd-Eden added an emulation layer for the .onmessage, .onerror etc. events, which also has an event object rather than the message being passed as first parameter for message events. Expanding the event object to hold more information (including a flag for binary) is one thing I'd like to do. Adding addEventListener-support, as you propose, is another.\nWould it be a fair middle way to introduce a proper event object for .onmessage and addEventListener('message', ...), but keep the current signature for the on('message', ...) callback? That should ensure that most (if not all) current users suffer no breaking changes.\n. @aslakhellesoy, exactly. I don't see any problems with that. I'd welcome a pullreq, or alternatively look into it myself later this week.\n. Great, thanks!\n. Thanks, I'll look into it in a few.\nOn Feb 6, 2012 9:44 PM, \"cmgit\" \nreply@reply.github.com\nwrote:\n\nServer code\nvar WebSocketServer = require('ws').Server\n , wss = new WebSocketServer({port: 1337});\nwss.on('connection', function(ws) {\n   ws.on('message', function(message) {\n       console.log('received: %s', message);\n   });\n});\nCode from Mozilla scratchpad\nvar ws = new MozWebSocket(\"ws://localhost:1337\");\nws.onopen = function()\n{\nfor(var i = 0; i < 10000;i++)\n   {\n       ws.send(\"had a little lamb\");\n   }\n};\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/20\n. Alright, I've dealt with this issue and published 0.4.4 to npm. See if that helps on your end as well.\n. To listen on two different addresses on the same port, you need to pass\nyour own web server instance to ws. What your example tries to do is\nimpossible.\n\nSee the websocketserver test cases for examples.\nEinar\nOn Feb 9, 2012 6:24 AM, \"Eiji Kitamura\" \nreply@reply.github.com\nwrote:\n\nFollowing code fails:\njavascript\nvar WebSocketServer = require('ws').Server,\n   a = new WebSocketServer({port:8080, path:'/a'}),\n   b = new WebSocketServer({port:8080, path:'/b'});\nreturn;\nI receive error as follows:\nnode.js:201\n       throw e; // process.nextTick error, or 'error' event on first tick\n             ^\nError: listen EADDRINUSE\n   at errnoException (net.js:632:11)\n   at Array.1 (net.js:733:26)\n   at EventEmitter._tickCallback (node.js:192:40)\non node.js 0.6.6 with latest ws.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/21\n. wss.clients has been there for some time: https://github.com/einaros/ws/blob/master/lib/WebSocketServer.js#L79-L81\n. Which node version and platform?\n\nIs there a bufferutil* within ws/build/default?\n. Ok, thank you -- I'm looking into it now.\n. In the mean time, 0.6.10 does work. I've yet to figure out exactly what fails with 0.6.11.\n. Right, this is the reason: https://github.com/joyent/node/commit/4672872ddde70e079670d2a12079cb303ef41dbb\nThe prebuilt OSX package now targets ia32 (rather than mostly x64 in previous releases). The immediate fix is to compile node from source from now on. Other than that I'll have to update my build scripts to figure out which architecture node was built for, although that's not an optimal (or straight forward) solution either.\n. Yeah, that's a good point (although the 0.1ms won't be the tipping point at 100k). I'll add this to the next release, which is coming as soon as I've finalized extension support.\n. Thanks, I'll merge this (and add the same for the Hixie transport).\n. It is supported in the sense that socket.io (and others) depending on ws\ncan supply their own web server instance to ws and either use the common\nlistener or handleUpgrade for specific control.\nOn Feb 23, 2012 5:25 PM, \"Joel Martin\" \nreply@reply.github.com\nwrote:\n\nweb-socket-js is the Flash based polyfill/shim for browsers without native\nsupport. Flash sockets implement their own form of CORS in the form of a\nFlash policy response (on port 843 and then on the target port). Answering\ninline on the same port is supported in Socket.IO and websockify, etc. It\nwould be nice if einaros/ws supported answering Flash policy requests so\nthat it could be used with web-socket-js.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/28\n. @ypocat ws definitely will stay lean and mean. This is, as you point out, easily implemented by abstractions utilizing ws or other transports.\n\n@kanaka What would you like me to mention? There are three options with regard to server: have ws create it itself, supply a server or use handleUpgrade directly. Between the three it should be possible to handle most scenarios.\n. This has been taken care of along with extension support (which has been a\nmajor undertaking). Expect everything to land within a week :)\nOn Feb 23, 2012 5:29 PM, \"Joel Martin\" \nreply@reply.github.com\nwrote:\n\nThe protocol header can include multiple sub-protocol values in the\nrequest. In order to properly support sub-protocols, there needs to be some\nway for the server to select the protocol from the list that it supports\n(because the response needs to have only one).\nThis may require a separate callback handler so that the server using 'ws'\nhas the opportunity to select the one it wants to use before the connection\nis fully established (i.e. on-connection is too).\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/29\n. @kanaka I know. It has been dealt with along with the extension upgrade.\n. Not the friendliest request I've ever seen, regarding something that's\nbuilt and maintained free of charge in someone's spare time - but yeah,\nI'll publish a working fix next week.\n. Yeah, I've seen the chatter. The reason why I merged and then reverted your changes was that it broke a few of my internal uses. What's really missing to most pullreqs are tests. I can't add anything like this without tests, and so I am often stuck writing the tests myself - something I'm not even remotely free enough to do at present.\n\nI'm not intentionally trying to be neither difficult nor slow about these things, so my apologies for giving off that impression. \n. Do you happen to have a ping on an interval?\n. Rater rude of the server to ping you and then disconnect. But point taken, I'll mask the error from automated pongs.\n. Thanks, this and much more related to connection setup and teardown has\nbeen fixed in a coming version with extension support. Likely to go live\nthis week.\nOn Feb 26, 2012 11:20 PM, \"Juraj Vitko\" \nreply@reply.github.com\nwrote:\n\nBased on the WebSocket spec, section Feedback from the protocol, the last\npart reads:\n\n\"When the WebSocket connection is closed, ...\n2. ...  fire a simple event named error ...\n3. Create an event ... with the event named close ...  and dispatch the\nevent\"\n\nNow, when using the WebSocket object to initiate a connection to a remote\nWebSocket server, in multiple cases only the error event is emitted, but\nno close event.\nI have mapped the cases and the relevant source locations. So, this\nhappens:\n1. When the server closes the connection, the listeners are cleaned from\n   the WebSocket too early, and the close event is not delivered, see here,\n   line 485\n   (perhaps it's OK to leave the listeners there, for either the user or the\n   GC to clean them)\n2. When the client is connecting to a server which is not listening, only\n   the error event is emitted, see here, line 451\n   (this is ambiguous in the spec, because it says when the connection is\n   closed and here the connection wasn't established, but indeed all browsers\n   emit a close here)\n3. And the last one I haven't experienced, but by the looks it's the same\n   case, when the server key is invalid, see here, line 462\n   (again, I think this should be consistent, e.g. when a user reconnection\n   code waits for a close event, it should get it)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/31\n. I'll make sure that all the cases you mention are covered :)\n\nOn Feb 26, 2012 11:20 PM, \"Juraj Vitko\" \nreply@reply.github.com\nwrote:\n\nBased on the WebSocket spec, section Feedback from the protocol, the last\npart reads:\n\n\"When the WebSocket connection is closed, ...\n2. ...  fire a simple event named error ...\n3. Create an event ... with the event named close ...  and dispatch the\nevent\"\n\nNow, when using the WebSocket object to initiate a connection to a remote\nWebSocket server, in multiple cases only the error event is emitted, but\nno close event.\nI have mapped the cases and the relevant source locations. So, this\nhappens:\n1. When the server closes the connection, the listeners are cleaned from\n   the WebSocket too early, and the close event is not delivered, see here,\n   line 485\n   (perhaps it's OK to leave the listeners there, for either the user or the\n   GC to clean them)\n2. When the client is connecting to a server which is not listening, only\n   the error event is emitted, see here, line 451\n   (this is ambiguous in the spec, because it says when the connection is\n   closed and here the connection wasn't established, but indeed all browsers\n   emit a close here)\n3. And the last one I haven't experienced, but by the looks it's the same\n   case, when the server key is invalid, see here, line 462\n   (again, I think this should be consistent, e.g. when a user reconnection\n   code waits for a close event, it should get it)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/31\n. Regarding your point #1 above, I remove the listeners from the underlying socket, not the websocket itself. This shouldn't influence the delivery of close messages. Have you observed different behavior?\n. Should be dealt with along with other issues now.\n. I know there have been some potential races with node 0.4.x. I'll look into it, thanks.\n\nAny particular reason why you're not updating to 0.6.x?\n. Oh, ws 0.4.x. Sorry about that. I'll look into it :)\n. Ok, the issue is that websocket.io (or similar) runs close() after the connection has been closed already. I suppose it would be harmless to not throw an error when you close an already closed connection.\nWill add that to the next release.\nIn the mean time you should just handle uncaught exceptions, so that your app won't die. See http://debuggable.com/posts/node-js-dealing-with-uncaught-exceptions\n. Nice. The less I have to do, the better ;)\nThere's still the case of Windows without a compiler installed. Previously ws has jimmy rigged this by use of a make.bat file which simply copies javascript replacements to the correct folder. How will that act with your bindings module?\n. Binding looks to build? Then why is out ignored? :)\nIn either case; great, I'll verify when I'm back by a computer.\nThanks!\n. Cool, thanks Nathan! I'm merging this very soon.\n. That took some time, but all merged now. Thanks again, Nathan!\n. I have most of this ready. Expect it to land shortly.\nOn Feb 28, 2012 7:16 PM, \"Ben Vanik\" \nreply@reply.github.com\nwrote:\n\nSpec is here:\nhttp://tools.ietf.org/html/draft-tyoshino-hybi-websocket-perframe-deflate-05\nThis just landed in WebKit/Chrome. Here's the CL:\nhttp://trac.webkit.org/changeset/108731\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/34\n. I am still working on it. Will land mid August.\n. I wish I could have this stuff out there sooner, guys, but I've been caught\nup with real-life work for months now. I really am hoping to be able to\nfinish this soon, and tidy up everything else as well, but it's not trivial\nto do so when I can't spend any day-job hours on it.\n. Awesome bug report :) That makes it an easy fix for me. Thanks a bunch!\n\nOn Feb 29, 2012 4:17 AM, \"Chris Shoemaker\" \nreply@reply.github.com\nwrote:\n\nIt has been very difficult to narrow this bug down, but it is 100%\nreproducible.  To reproduce:\n1. The server needs to be sending messages faster than the client can\n   receive them.  I need to generate at least 100 messages from server to\n   client, but 200 is more reliable.\n2. The length of the messages needs to be very consistent but gradually\n   increase.  This is so you can observe a long sequence of identically\n   repeating frame headers.  I accomplished this by embedding a counter\n   integer in the message, so when the counter was less than 9, the integer\n   serialized into one byte; when it was between 10 and 99, it required two\n   bytes, etc.  For example, my first 9 messages were each 207 bytes long,\n   then messages 10-99 were each 208 bytes long, then messages 100+ were (or\n   would be) each 209 bytes long ( which would only be correct for a message\n   with counter > 99 ).\n3. What you can observe, either through packet sniffing or by\n   instrumenting the client, is that the frame headers received by the client\n   show a frame length of 207 for 9 message, then 208 for messages 10-99, etc.\n   At least, that's what you should see.  What actually happens is that,\n   under the right conditions, the receiver will consistently receive an frame\n   length that corresponds to a later message along with the message body for\n   the current body.  In my example, somewhere between message 70-73 (that is,\n   still with a two digit counter in the message body) the sender will use the\n   message length of 209 bytes.\n4. The problem is here:\n   https://github.com/einaros/ws/blob/06121f89f5ab52a242717f68e4d9dc36fe771f2a/lib/Sender.js#L126\n   The problem goes completely away if I force this line to always create a\n   new Buffer(totalLength).\n5. If I inspect the contents of the outputBuffer just before the call to\n   Socket.send, (\n   https://github.com/einaros/ws/blob/06121f89f5ab52a242717f68e4d9dc36fe771f2a/lib/Sender.js#L172)\n   I see correct values, but when the bytes actually hit the wire (as\n   measured using wireshark) the incorrect value is sent.\n6. The eventual symptom in my case was a \"invalid utf8 sequence\" error,\n   because the message length was one byte too high, so it would read the\n   first byte (129 = finalFragment | opcode) of the next frame and try to\n   validate it as utf8.\n7.  Of course, there's a one-liner fix that works, but avoids the use of\n   the _sendCache Buffer.  How important is this cache?  What are the\n   synchronization mechanisms for avoiding this bug?\nNote: I cannot reproduce this using a single machine.  I have to use a\nremote server.\nNote2: The actual trigger points are sensitive to the message lengths.\n With shorter messages, I can get it to fail around message 80-85, and with\nlonger messages, I can get it to fail around message 60-65.\nnode version: 0.6.10\nws version: 0.4.7\narch: x86_64 linux\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/35\n. Could you try 0.4.8 and see if it still reproduces?\n. I had been pondering exactly why I added this lately. At some point (perhaps earlier in 0.6) I did see a perf gain from running it. With 0.6.11 and a newly written throughput benchmark, no perf difference could be found at all.\n. You're right. Strange that I missed that one. Will add to next release :)\n. I'm not entirely sure I follow. You're using the websocket-client package, and call close on that, which 'ws' handles incorrectly somehow?\n. This isn't necessarily easy to circumvent. Are you running this through some custom installer?\n. To start with the end: I need a makefile on non-windows systems to build the native extensions. The native extensions, in turn, makes ws much faster than it'd be with plain JavaScript, in addition to providing actual utf8 verification of the incoming stream.\n\nRegarding a preinstall script, this is possible as well, but it would require some finesse. In specialized build environments such as the one you are using I can't even guarantee that node is in the path, so executing a preinstall.js could fail for completely different reasons.\nThis will all change in future versions of node (0.7+), when the gyp build system replaces node-waf. Any sort-of-working hack would thus just be temporary, and probably not be a catch-all in either case. I think I'll just have to say that any specialized build system will have to be adapted (such as adding . to the path, or actually running npm install from within the actual project directory).\nIn either case, I'll get back to you on this in the morning. I may decide to work around it.\n. I pushed a new version now, which solves this issue. Reinstall from npm and confirm.\n. It is trivial to implement this on the client side, using the server's clients property.\nSomething along the lines of:\njs\nserver.clients.forEach(function(client) { client.send('hi'); });\n. Great report, Nico. You are onto something when you say that each connection consumes a lot of memory. I pool rather aggressively, in order to ensure high speed. The 'ws' library is written to be as fast as possible, and will at present outperform all other node.js websocket libraries, for small data amounts as well as large.\nThat said, I will deal with this, to push the memory use down. An alternative is to introduce a configuration option which allows the user to favor either speed or memory consumption.\nIn your test above, are you sending any data for the 10k clients? How large would you say the largest packet is?\n. For 10k users sending an initial 10k (in a single payload), the consumption would be at least 10.000 * 10k.\nI agree that the pools should be released. Adding a set of timers to do that without negatively affecting the performance for high connection counts will require thorough consideration before being implemented.\nThank you for your continued work on this. We'll get to the bottom of it :)\n. Each pool is released as the client closes, yes.\n. @nicokaiser, I wrote the \"old\" websocket.io hybi parsers as well, so this is all my thing to fix in either case :)\n. I've found a couple of issues now, which takes care of leaks visible through the v8 profiler's heap dump. With my recent changes, I can spawn up 5k clients to a server, send some data, then disconnect the users, and the resulting heap dump will look more or less as it did before any clients connected.\nI can't yet get the rss to fall back to a reasonable size, though, but I'm looking into it.\n. @3rd-Eden, for js Buffer/SlowBuffer instances, they should show up in the heap dump. I figured it may be due to allocations in my native extensions, but the results were exactly the same with those disabled.\n. I can't help but think that the remaining issues are caused by something within node leaking native resources, probably triggered by something I am doing. And I'm guessing that something is the buffer pool. Now the question is how the buffers are handled / used wrong, and how they wind up leaking native allocation blocks.\n. @nicokaiser, I'll have another look at the bufferutil and see what I can find.\n. @nicokaiser, I disabled my native extensions again, to no avail.\nWill go pick a fight with the buffers now.\n. Well it is definitely the buffers. The question is how / why they are released by v8, but the native backing isn't.\n. Well I'm not saying it's my buffers, just node Buffer buffers. I'll just have to find if this is something specific to what I'm doing, or that it's an actual node bug.\n. You can't avoid Buffer objects for binary network operations.\n. Ah, all this fancy talk while I'm sleeping. I need to get my alarm clock hooked up to Github somehow.\n@nicokaiser You actually confirmed that it doesn't leak without the bytesReceived property? That's, at first glance, completely haywire.\n. Where do we stand on this now? Any news from your servers, @nicokaiser?\n. The parsers in socket.io are pulled from ws. The rest is specific to\ns.io.\nFrom: Nico Kaiser\nSent: 4/17/2012 17:05\nTo: Einar Otto Stangvik\nSubject: Re: [ws] High memory usage (or memleak?) (#43)\nSocket.IO uses a different websocket implementation (early predecessor\nof ws). I tried to abstract its implementation and use it in\nWebSocket.IO, but this combination also leaked, as well as the\n(completely different) websock implementation.\nSo I don't think it's a problem of those libraries or our\napplications, it must be node... but I cannot prove or help the node\ndevs to find and fix the leaks.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/43#issuecomment-5177296\n. Do note that the RSS rise is normal in itself. Unless the process actually crashes, this is all the same issue @nicokaiser reported to the v8 team.\nOn Apr 24, 2012, at 6:35 PM, Camilo Aguilar wrote:\n\nI have the same issue in production as @nicokaiser. V8 heap looks fine and stable now but the RSS memory keeps growing. I guess it's gdb and valgrind time. :/\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/43#issuecomment-5308910\n. See the other notices I've made about the RSS in this thread. :)\n. What I mean is that high RSS isn't necessarily a sign of a memory leak. It may just be the allocator not immediately releasing pages. If and when the OS needs the memory for other processes, the RSS will fall again.\n. Any word on your other memleak reports yet, @nicokaiser?\nFrom: Nico Kaiser\nSent: 4/26/2012 10:36\nTo: Einar Otto Stangvik\nSubject: Re: [ws] High memory usage (or memleak?) (#43)\n@crickeys I think (!) mtrace only traces heap allocation.\n\nAs @einaros said, currently the \"leak\" seems not that bad \u2013\u00a0memory in\nmy server processes went from ~200mb (with 20k clients) to 1.5gb,\nsuddenly fell to 1.2gb for no reason and now rises again. I'll observe\nif it crashes or swaps.\nHowever I agree @crickeys that this is not normal, the obviously\nunused memory should really be released by node...\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/43#issuecomment-5351930\n. @nicokaiser Have you had any memory related crashes lately?\nI think it's time to summarize where we are at with this again. With the latest node version and latest ws version - are anyone seeing any actual crashes due to out of memory errors?\n. The fact that it doesn't keep growing beyond the numbers seen there could suggest that there isn't actually any leakage anymore. At the same time, there could be a tiny leakage (anywhere), which over a greater extent of time than measured here could cause a crash.\nAt some point I need to build a stress testing environment to see how it reacts to sustained loads from more than 50k clients..\n. Since this hasn't been brought back up, I'm (temporarily) concluding that the issue has been covered by the fixes as of late. The lingering memory seen in graphs right now are due to free'd memory not being released immediately.\nShould anyone actually get a process crash due to running out of memory, we'll have to revisit it. Judging from the lack of talk here lately, that hasn't been the case in quite some time.\n. @nodenstuff, thanks for reporting. Since nothing much has been changed in ws over the last few months, I'm not immediately jumping to the conclusion that this is caused by the ws parsers. If there wasn't a crashing leak four months ago, but there is today, that's a regression in another component - or a breaking change in node which ws will have to be updated to work with.\n@kanaka, are you using socket.io?\n@nicokaiser, how has your situation been lately? Any crashes?\n. Was the bufferpool change intentional? :)\n. Awesome - thanks!\n. Thank you, Johannes!\n. Published now :)\n. Fantastic, thank you!\n. Could you remove 9886085 from the pullreq, though? :)\n. Just add a commit removing your previous if (.. block :)\n. That won't work. You'd return a buffer from the pool, which may be reused at any point.\nThe Receiver has a rather intricate way of dealing with buffers, based on whether there's any masking, if the message is fragmented and so forth. The same story applies for the Sender. An example: for strings, the messages are masked in place, for buffers they are copied, then masked. The total amount of buffer creations are kept at a minimum, but a few do have to be there.\n. Which xcode are you using now?\nEinar\nSent from my iPad\nOn 3. apr. 2012, at 00:50, Zachary Cohenreply@reply.github.com wrote:\n\nCan't Install on Snow Leopard without Xcode 4.0+.\nYou run into the following error:\n[1/4] cxx: src/validation.cc -> build/Release/src/validation_1.o\n[2/4] cxx: src/bufferutil.cc -> build/Release/src/bufferutil_2.o\ncc1plus: error: unrecognized command line option \"-arch\"\ncc1plus: error: unrecognized command line option \"-arch\"\nThis is fixed with XCode 4.0+. However, there is no way to get XCode 4.0+ for Snow Leopard.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/51\n. Hrm. Could you try building with node-gyp rather than node-waf, and see if that resolves things?\n. Please try reinstalling the lastest stable node from src, then install npm as instructed from npmjs.org. I see that your build / install fails for more than just ws, so there may be some inconsistencies with outdated versions of some components.\n. Feel free to pullreq ;)\n\nOtherwise it'll be added eventually, but it's currently in the back of the line.\n. Moving this discussion to the pull req you sent :)\n. The downside to this is that if an error happens on a socket that has been established, the resource release in WebSocket.js won't trigger.\nA few tests will have to be written for this, and other scenarios, checking that socket.emit('error' causes closeSocket to be called .. and that closeSocket isn't called recursively in case of closeSocket causing an error .. causing closeSocket to be called .. causing an error .. causing ... yeah, you get the idea :)\n. The error handler remains set, however, so should an error occur after proper connection establishment, the cleanup routines won't be run. My point being: If any code within WebSocket.js runs, closeSocket() should be run when a socket is shut down.\n. Which other error handler? :) WebSocket.js has none.\n. WebSocket.js should have its own on('error' handler. I know the code for destroy emits close, but since the docs are silent on the matter (while it's mentioned for other calls), I don't trust it to remain like this.\n. The forced recreation of the unfragmented bufferpool is probably unnecessary. I believe this was used briefly while I experimented with releasing bufferpool bufferes for use by the end client (rather than creating a new buffer during concat). It can probably be safely disabled.\n. I say that this buffer is such a small amount of memory to dedicate to\neach connection, that it should be done. Testing I've done with far more\nintricate benchmarking solutions than the one I've included in WS has shown\na clear advantage with it enabled.\nTo be able to configure the size of this initial buffer, however, is well\nfounded.\n. Please try upgrading your node and npm install. Build node from source (see http://nodejs.org) and install npm as suggested at http://npmjs.org.\n. I'd prefer to keep it as it was for public properties, but given #43, this is a reasonable change. I'll test and merge in not too long.\n. Great, thanks!\n. Great catch, thanks!\n. Thanks for bumping this again. I'll deal with it today.\n. I've made quite a few changes now - could you try the current master and see if that improves things on your end?\n. I would prefer that socket.io soon made the switch to use websocket.io. Websocket.io uses the ws parsers internally.\n. @nicokaiser I included a similar fix in WebSocketServer, and pushed v0.4.15. Hopefully this will improve things for you this following week.\n. Eagerly awaiting the results :) Hopefully things will be at least a little bit better.\n. Where do we stand on this now? Does the latest connection shutdown fixes deal with this?\n. Sure we can remove those. They were going to be placeholders for size optimization options to come, but right now it seems like the receiver will be the only affected part.\n. Install a stable node from source, not 0.7.9, then the latest npm. Also\nmake sure you have an updates Xcode version\nFrom: Toby Sutton\nSent: 4/27/2012 4:52\nTo: Einar Otto Stangvik\nSubject: [ws] install errors on snow leopard (#66)\nhttps://gist.github.com/2505271\nI tried compiling node from src as suggested in a similar issue, but, no dice...\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/66\n. Should be fixed for 0.4.14. Reopen otherwise.\n. Thanks!\n. Thanks, fixing in version being pushed now.\n. Fragmented sends are made through the streaming apis. The send call should be kept as similar to the api interface as possible.\nI may accept a pullreq for this, though, if you feel like adding (and testing) it :)\n. I've included a fix for this in the latest release, which will be pushed soon. Thank you!\n. Hixie doesn't support binary, so buffers are pointless. :)\n. So what you are doing is manually fragmenting utf8 strings, and then you assemble them again when all bytes have arrived? If that's the case I can see why the current hixie implementation doesn't work (the assembled strings could be broken).\nHow do you handle this on the other side? I can't see how you can have a browser send partial utf8 strings.\n. > This --ws:native option is not deployment friendly and doesn't work when ws is installed as a dependecy down in the tree.\nRegarding the deployment, I'd say that all depends on how and where you deploy. In terms of ws being a dependency down the tree, which is the case for socket.io, that works very well. npm install socket.io --ws:native - try it and see.\n\nI just read #4. It would be better to have the native modules built by default on all platforms supporting them, and fall back to JS on other platforms.\n\nThat's how it used to be done. The catch: npm will fail if the compilation fails. I suppose the build script can attempt to detect whether or not ws can be built - that has been down-prioritized in anticipation of npm supporting the best-of-all options: binary deployment.\n. I've made a few changes to this now. Rather than requiring the --ws:native param, a native compile will be attempted first. If unavailable, it will fall back to pure javascript.\n. Thank you - I manually incorporated this in the codebase, and will push shortly :)\n. Does #75 work for you? I have a different fix brewing, which seems to be a more long-term way to handle this issue. That'll take me a couple of hours to implement, though.\n. Closing this - let's reiterate if the current fixes aren't sufficient :)\n. Ah, yeah. I'll complete my fixes on this tonight, and include that patch as well. Sorry for the long delay!\n. I manually included updates which resemble the ones you've included here. Could your setup to master and see if stability improves?\n. Closing this - let's reiterate if the current fixes aren't sufficient :)\n. @mscdex, node.exe isn't in your path?\n. Oh, sorry, now that I actually read the error .. Well in order to build with native extensions on windows you will have to have Visual Studio and node-gyp installed.\n. Well ok. Since you have an environment setup for compiling it would be tremendously more helpful with a pullreq for a fix than just an npm log slapped in the face ... Bu I'll see what I can do.\n. Alright, I should have fixed it now. Try reinstalling.\n. Ok, added.\n. js\nvar WebSocketServer = require('ws').Server\n  , wss = new WebSocketServer({host: '0.0.0.0', port: 8080});\nwss.on('connection', function(ws) {\n    ws.on('message', function(message) {\n        console.log('received: %s', message);\n    });\n    ws.send('something');\n});\n. Ah, great! Thank you!\n. Cool, thanks!\n. wss.clients will always be the list of current clients. There's no such thing as a session which lives beyond an actual connection for WebSockets, so if you need to recognize the same client over and over again, you'll have to rely on parsing incoming cookies - or an initial handshake.\nSimilarly there's no such thing as an id - but neither should there be. If your application requires an id, you can easily add it as you show above. It makes perfect sense.\nRegarding some recipes you are absolutely right. Some time should be spent writing documentation for different scenarios. I'll bring that into consideration for future versions!\n. I'll consider that for the next version :) Shouldn't be a problem.\n. First of all you shouldn't touch the mask option unless you know exactly what you're doing.\nSecond: what exactly are you trying to do? You are sending a floating point array, but receiving a buffer. What do you expect the output to be, exactly?\n. Whatever you are installing depends on an old version of ws. The master is\nfully 0.7 compatible.\nFix the dependency, or stick with a stable node version :)\nOn Jun 13, 2012 5:04 AM, \"gametbt\" \nreply@reply.github.com\nwrote:\n\nnpm install ws\n\nws@0.4.8 preinstall /opt/sites/nodejs/node_modules/ws\nmake\nnode-waf configure build\nChecking for program g++ or c++          : /usr/bin/g++\nChecking for program cpp                 : /usr/bin/cpp\nChecking for program ar                  : /usr/bin/ar\nChecking for program ranlib              : /usr/bin/ranlib\nChecking for g++                         : ok\nChecking for node path                   : not found\nChecking for node prefix                 : ok /usr/local/node-v0.7.10\n'configure' finished successfully (0.384s)\nWaf: Entering directory /opt/sites/nodejs/node_modules/ws/build'\n[1/4] cxx: src/validation.cc -> build/Release/src/validation_1.o\n[2/4] cxx: src/bufferutil.cc -> build/Release/src/bufferutil_2.o\n[3/4] cxx_link: build/Release/src/validation_1.o ->\nbuild/Release/validation.node\n[4/4] cxx_link: build/Release/src/bufferutil_2.o ->\nbuild/Release/bufferutil.node\nWaf: Leaving directory/opt/sites/nodejs/node_modules/ws/build'\n'build' finished successfully (2.853s)\nnpm ERR! notsup Unsupported\nnpm ERR! notsup Not compatible with your version of node/npm:\ncommander@0.5.0\nnpm ERR! notsup Required: {\"node\":\">= 0.4.x < 0.7.0\"}\nnpm ERR! notsup Actual:   {\"npm\":\"1.1.25\",\"node\":\"0.7.10\"}\n\nnpm ERR! System Linux 2.6.18-308.8.1.el5\nnpm ERR! command \"/usr/local/node-v0.7.10/bin/node\"\n\"/usr/local/node/bin/npm\" \"install\" \"ws\"\nnpm ERR! cwd /opt/sites/nodejs\nnpm ERR! node -v v0.7.10\nnpm ERR! npm -v 1.1.25\nnpm ERR! code ENOTSUP\nnpm ERR! message Unsupported\nnpm ERR!\nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /opt/sites/nodejs/npm-debug.log\nnpm ERR! not ok code 0\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/83\n. Listening on all interfaces would already be possible by passing in '0.0.0.0', but I do see your point :) Thanks!\n. That isn't ws, it's websocket-node. Someone added a ws benchmark as well,\nbut the suite hasn't been rerun yet.\n\nFurthermore I found a protocol error in their erlang websocket client,\nwhich was likely skewing the results for the old benchmark that post links.\nOn Jun 17, 2012 12:58 AM, \"Ryan Dahl\" \nreply@reply.github.com\nwrote:\n\nhttp://news.ycombinator.com/item?id=4120967\nplease investigate\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/85\n. Sneaky typo. Thanks!\n. I throw for immediate errors, and emit (and also optionally fire a callback with error argument) in case of async errors. EventEmitter error handlers are necessarily very difficult to handle in the same scope as the call to the error-causing function.\n\nIf you have any feelings about specific throw instances, I'd love to hear them.\n. Pullreq, please :)\nOn Jun 25, 2012 6:13 PM, \"Eirik Albrigtsen\" \nreply@reply.github.com\nwrote:\n\nDue to dependency of  commander@0.5.x which specifies engine <0.8.\n0.6.1 has removed this restriction, so bumping should fix it.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/88\n. published!\n. Great, thanks :)\n. Either ws.socket.bytesWritten or ws._socket.bytesWritten.\n. The two aren't meant to be used together. Use either onmessage or on('message').\n. I'm handling this in an offline dev version I've been working on, which also deals with websocket extensions :)\n\nThanks!\n. Thanks, should be fixed in the latest release.\n. Backwards compat can be a pita, but I think we should favor spec\nconformance. In either regard, 0.5 is around the corner, so a \"breaking\"\nchange is ok.\n. Good grief. Strange that I've missed that one for so long :) Thanks!\n. I don't see this happening. The nodejs command is a problem with the package manager, not node.js nor ws.\nIf anything, npm should be updated to enable launching install scripts with a placeholder / variable which refers to the node executable used to launch npm in the first place.\n. @abalzac, when \"install\" isn't defined in package.json, the install script isn't run .. So no, I don't find that a better option.\nAgain, though, this really is an issue with the package manager who deploys node as nodejs, but I don't believe there is a crossplatform fix to be made outside of npm itself.\n. I've opened a pullreq for npm, which would fix this. In the mean time, I'm guessing you're using CentOS or similar? The package manager you used to install node also has another package to setup correct symlinks; consider installing that.\n. Hmm, I'll dig into this shortly. Sorry for the delay - vacation time and such :)\n. Thanks, I'll test this and include in the next version!\n. Will include this in the next version. Thanks for the heads up!\n. Could you post your code as well?\nAnd just to confirm: you're seeing the same behavior with an entirely different websocket server as well?\n. Since you're seeing that consistently across servers, and ditto for clients, I'm inclined to say that it's something else entirely. I've never seen any such slowdown for my tests with very large files passed through the ws file example.\nCould you try with another client / server computer, and/or disable any antivirus and firewall you've got running?\n. What exactly happens when you run it? Did you check the ssl examples in the test sets?\n. The same example is confirmed to work well here. I suspect that you're running an outdated version of node.js - please update to 0.8.x!\n. Could you include the error? I would like to fix that one regardless.\n. What traffic load are you experiencing? And what data are you sending?\nThere's nothing in particular with ws which should cause a high load. That said, a busy server will necessarily incur some CPU load, since packets are being decoded and masked/unmasked intensively.\n. This is being added in the next major version.\n. The docs page is being rewritten. Thanks for the heads-up!\n. I've tested this on Windows 7 x64 and had no trouble running it whatsoever. Are you sure you have access to the folder you are working with? Could you try reinstalling a fresh node and npm version?\n. Moving this discussion to https://github.com/LearnBoost/socket.io/issues/1072.\n. It works with cluster in so much that it will handle upgrade requests as they are emitted by the various http instances on the various workers. There is however nothing built into WebSocketServer or WS as such to handle shared data between cluster nodes. This is something you will have to implement yourself, and frankly belongs closer to the application level than at a low level kind of library level.\n. The raw socket is available as websocket._socket - you can read the address\nfrom there.\n. Which version of express are you using?\n. Have not been able to reproduce this.\n. This is something I'm hoping to capture with a few new integration tests. Thank you for your input!\n. Thanks, I'm merging it now.\n. WS is a barebone kind of communication library, there's no room support built into it as such. If you need high speed or binary support, using WS directly is likely a better fit. For a chat application, socket.io or the alternatives will be more than fast enough to work well.\nHave you run into any actual cases where socket.io hasn't been sufficiently performant?\n. Thanks! Would you mind adding a few tests as well, and cleaning up the console.log calls? :)\n. Great, thanks!\n. Merging - thank you!\n. Try reinstalling node.js, and do the 'npm install' from the node.js command prompt. This has worked for others with the same problem.\n. There's also this external issue: https://github.com/joyent/node/issues/4083\n. Could you try upgrading your node version to the latest version?\n. Go to nodejs.org. 0.6 should work, but is rather old, so I wouldn't be surprised if 0.8 works better.\n. I requested a change to npm some time ago, where the scripts section would be able to reference the currently used node executable path (the one used to spawn npm itself). That would clear this, and many other issues up.\n@isaacs, did this ever make it in? Any chance it will?\n. iOS 5 has been supported for a long, long time - I am guessing that the issue you are having is something else entirely. Could you check the communication with the developer console for iOS Safari, and perhaps even do a Wireshark dump of the traffic to the web application?\nIf you do the latter, please attach the pcap here.\n. I've verified that it works with IE 10 final on Windows 8 - so I am assuming that this is an issue with the preview build.\n. Sorry for the delay here guys; easter and all.\nI am looking into it now.\n. Which versions of Node are you guys running?\n. Great, thanks, I'll check with that on Win8, and also pull down a Win7 image to check there.\n. Strange stuff. This is what it looks like for me, on a fresh virtual install of Win7, with the latest IE10 and ws installed from npm: http://player.vimeo.com/video/63040542\n. Could someone show me a header dump of the handshake that fails?\n. Weird stuff. Strange that I didn't see this behaviour when I tested with IE10. I did my testing on Win8, though - did all of you with problems use Win7?\n. It's been a long time coming - and one of few changes, such as extension support, that doesn't involve me investing 30 more hours to complete. Thanks for reporting!\n. Thanks!\n. Thank you!\n. Thanks :)\n. I never had any ws vs socket.io benchmarks, since those are the same thing. Using socket.io, or any other abstraction, obviously does incur a performance penalty, but I never looked into exactly what that is.\n. Merged, thanks!\n. Merged!\n. There is no 'open' event. When a the 'connection' event is raised, the channel is open.\n. No, that documentation is for the WebSocket client.\n. Try installing ws now. I'm curious to see if the quickpatch for 0.4.24 resolves this issue.\n. Right, reinstall node. And don't install it from any of the ridiculous package manager, which sets up a binary name like 'nodejs' or somesuch.\n. I'm guessing there should be a wiki entry for things like this. Leaving the post open, and will add that.\n. Cool, thanks!\n. That's a very valid point. Remnant from very early implementation - but not really important, since it just works as it is. I'll keep this issue open, though, and deal with it during a cleanup run.\n. That isn't an error.\n. I am guessing there's something wrong with your environment variables. Could you try starting the Visual Studio command prompt for x64, and see if the build works any better with that?\n. This has to be a OS configuration issue - otherwise other's would be experiencing the same problems. Try reinstalling your dev env, or launch npm from a command prompt which has the correct path setup for platform sdk libraries.\n. Different endpoints are supported as it is, supplied to the path option of WebsocketServer. For more advanced namespacing, you'll have to use socket.io or the likes :)\n. Ah, yeah, good catch. Thank you!\n. Why would you want to do this? Two server instances cannot handle the same connection attempt.\n. That's already possible. Create a http server, listen on a shared port, give it to WebsocketServer with the path option set to whatever you like, then do the same with a new WebsocketServer instance, and another path.\n. Sure, but since you're in control of the code which creates the WebSocketServer, you can easily update it to use an independent http server.\n. function handler(data, flags) {}\nws.on('message', function(data, flags) { handler(data, flags); });\nsetTimeout(function() { handler = function(data, flags) { /* i am another handler*/ }; }, 5000);\n. You can handle the initial request and pull any header you'd like. WS does not retain that header, though.\n. Thanks for looking into it, though. Have you sent a pullreq to the joyent/node repo?\n. @3rd-Eden, I'm good with that. I'll merge it later today.\nAlso, you've got push access to the repo now, so you are free to make such changes as well :)\n. Well, sure, but ideally you'd do that prior to handling the upgrade with a WebSocket instance. For load balancing purposes, having a central http server detect the request, then pass it on to another cluster node, is a sane approach. Nothing in WS will prevent that from working, so long as you detect the upgrade yourself, pass it to the other process and call WebSocketServer.handleUpgrade from there.\n. I'd love to see some tests around this, other than that I will merge.\n. Great, thanks!\n. Will look into this in the morning. Thanks for reporting!\n. Great, thanks!\n. Thanks, @abalandin. The reason why I haven't already committed the previous pullreq is the lack of tests. I'd be much more comfortable allowing this in if some were added :)\n. Superb, thank you!\n. I'll look into this one. Thank you!\n. Thanks a heap!\n. I hope what @sequoiar wrote helps, since I can't aid much in languages outside of norwegian and english :)\n. Thank you, will push this momentarily.\n. Could you try starting the x64 command prompt shortcut which installs with VS2012?\n. Ah, VS2010 SP1. Do you have x64 C++ build tools installed?\n. That's the problem then. This isn't really an error, though. ws will still function completely. It would be nice if node-gyp could detect / hide this warning. \nHas there been any work on that @TooTallNate? It would be nice if the binding.gyp file could say something like \"softfailure\": true to indicate that a compilation error can be safely ignored. This is the case for ws at least.\n. Well I can recommend it in so much that it's a combination that works. But to get ws to build its native extensions you could just as easily install the x64 cpp dev tools for vs2010.\n. No, that issue was introduced with the TLS support. I've fixed it locally and will push later today.\n. This should have been fixed now.\n. What does builderror.log say?\n. Hrm. Is this a node-in-general type issue? Have you seen any discussion on it elsewhere?\n. Great, thanks!\n. Sorry for the delay. Thank you!\n. Great, thanks!\n. I suggest upgrading to the newest version of node 0.10. There have been issues with a few of the earlier 0.10 versions, and I doubt anyone will want to spend time adapting ws to work with all of their quirks.\n. Great, thanks!\n. I haven't seen this issue myself. Are you still experiencing it with the newest version?\n. You're trying to use ws as a server for signalr? I don't see how that is supposed to work.\n. Bumped - sorry for the delay.\n. Minor glitch there. Fixed now :)\n. Which version of node are you running?\n. Not at all.\nLooks good.\nOn Aug 14, 2013, at 11:06 PM, Arnout Kazemier notifications@github.com wrote:\n\nIt looks solid to me, @einaros do you mind the dependence on NAN?\n\u2014\nReply to this email directly or view it on GitHub.\n. I actually killed node v4 support in my local dev version months ago. So definitive +1 from me.\n. Ideally I'd say we keep the newest, along with the previous popular \"stable\". But those who stay behind on previous node versions are also likely to not update ws, so we might as well just focus on current stable.\n. Regarding the Options pullreq, I can accept it, but at first glance it seems unnecessary. When references to an Options instance are released, everything - including the closures - should be gc'd.\n. Not entirely sure I like this exact addition, but I'll let it enter along with the rest if you add tests for the pullreq :)\n. \n",
    "abans": "Can not function in the bufferuilt.cc use js to achieve? Thus eliminating the need for compilation step\n. \"socket.io\" and \"express\" are all code written in JavaScript, socket.io also support websocket, but it did not support the version of your many, I hope you can use JavaScript to write out a full, easy to use windows, windows version is now gradually Microsoft's attention, I believe windows platform will be developed rapidly\n. ",
    "benvanik": "I'd like to see a JS fallback for the native code for environments that don't support or make difficult the use of native modules for various reasons (heroku/other cloud platforms, Windows, etc). I'd love to use this library vs. faye-websocket-node, so another vote here, and if I get some spare time I may send a pull request...\n. Nice! You rock :)\n. ",
    "polidore": "+1\n. ",
    "tricknotes": "Great!\nIf that's the case,  ready state may be as well to be accessible property.\nHow about my patch?\n. ",
    "jrstanley": "I have tried using Safari 4.1.3 and 5.1.2 on Mac OS X\n. ",
    "absynce": "I had to run npm cache clean.  Then it worked.\nThanks!\n. ",
    "twojcik": "@einaros I was thinking about a case when I want to stream large chunk of data (for example file from s3) to browser(s) and was curious how ws module would behave in case when browser clients are slow , will it read all data from s3 stream(httpstream) to memory or it can work more in stream->stream manner (piping data). \n. ",
    "kazuyukitanimura": "I see. Thanks for the clarification. What if assigning a new buffer instead of bufferpool? I did not see performance degradation for that.\n. Gotcha. The idea was to avoid copying twice if new buffers were allocated. As you mentioned, it is more complicated than I thought. I will also try to see if I can write such code for my next hack time :)\nThanks for the awesome module! \n. ",
    "3rd-Eden": "This is mostly browser vs node talk. Which API do you want to adopt and support?\nI would personally just keep the .addEventListener as a regular node.js event emitter and not some odd browser based API which wraps data in silly objects.\nAnd just use the .onmessage as a browser compatibly layer. So you have clear separation between the two different API's and not an odd mix of both\n. @ikhattab Why would we remove it? The functionality still exists.\n. https://github.com/websockets/ws/blob/master/doc/ws.md#optionspermessagedeflate\n. And you are not leaking any buffers? As they are shows in RSS and not in the V8 heap\nOn Friday, March 30, 2012 at 10:29 AM, Einar Otto Stangvik wrote:\n\nI've found a couple of issues now, which takes care of leaks visible through the v8 profiler's heap dump. With my recent changes, I can spawn up 5k clients to a server, send some data, then disconnect the users, and the resulting heap dump will look more or less as it did before any clients connected.\nI can't yet get the rss to fall back to a reasonable size, though, but I'm looking into it.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/43#issuecomment-4838425\n. That could certainly be the issue here, as there also countless reports that socket.io on 0.4 leaks less memory than socket.io on node 0.6.\nSo it could be that node is leaking buffers somewhere as well.\n\nOn Friday, March 30, 2012 at 10:48 AM, Einar Otto Stangvik wrote: \n\nI can't help but think that the remaining issues are caused by something within node leaking native resources, probably triggered by something I am doing. And I'm guessing that something is the buffer pool. Now the question is how the buffers are handled / used wrong, and how they wind up leaking native allocation blocks.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/43#issuecomment-4838641\n. Node will transform strings to Buffer automatically anyways, so even if we didn't do binary network operations it would still be impossible (if I remember correctly)\n\nOn Friday, March 30, 2012 at 11:13 AM, Nico Kaiser wrote:\n\n@einaros yes, but on a high-traffic websocket server, ws is the place that naturally generates many many Buffer objects. So if we could avoid this (by using strings and making some inefficient, slow operations with them), we could test if the memory problem disappears then.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/43#issuecomment-4838977\n. Maybe @mraleph could give us some information on why this happening :) I have seen simular changes with node 0.4 before.\n. Yeh, there have been countless reports on the Socket.IO mailing list before that node 0.6 suffers from bigger memory leaks than 0.4.\n\n@nicokaiser you could try compiling Node.js with the latest V8 which also uses the new incremental GC (I don't think node 0.6 has that yet)\n. Thanks for the heads up, seems like I missed this issue when closing a bunch of things.\n. Fixed with the commit issued above.\n. I'm closing this due to inacitivity, if you have a valid reproducible test case for this, feel free to re-open. I've seen various servers using https with ws so it should function as intended.\n. @mmalecki If you can make it work, while retaining the current API, i'll be more than happy to merge it in.\n. @mmalecki The problem I see with that is that this module can currently be used for sharing WebSocket code with the front-end and the back-end as this module follows the same API as defined by the RFC. If we remove that api, we will also remove one of the major benefits of ws. But that's my just my opinion.\n@einaros what's your opinion on this?\n. @superjoe30 Code sharing, one example of this is Engine.IO which doesn't require any code changes in order to run on node or the browser. Same as the sockjs-client-node\n. Ideally, we should just split ws in to multiple modules\n- A module with wscat\n- The parsers\n- ws\n- ws-rfc/stream/whatever\n. @einaros I think it makes sense to pull this anyways, as it's probably going to take a while before node fixes their shit.\nI've seen great reduction in memory usage for the http-proxy without any side affects in terms of latency or handshake performance.\n. @einaros Yeah, thanks for that :) Just wanted to get your opinion on this.\n. This would be node-gyp issue instead of a ws issue as far as I can see. So if the latest version of node-gyp doesn't fix this, I suggest opening an issue there (it's a dependency of npm)\n. Just a heads up, i'm gonna take your pull request and a small test for it. So this will be in the next release so people can send proper cookie headers.\n. This is now officially out of the control of this module as well, as the output is caused by node-gyp which is executed by npm. Adjusting the log level of npm should resolve this.\n. Fixed with the commit issued above.\n. This is out of the scope of the project. If you want reconnect, implement something like that on top of WebSockets by reopening the connection after it has been closed.\nIf you don't want to implement this your self I would suggest looking at libraries that already does this for you like primus does.\n. @superjoe30 I haven't as @einaros said he would look in to it. But if you can update the pull request (it cannot be merged in to master) I'll be more than happy to look at it as long as it comes with tests that demonstrate this issue.\n. ~~This is not a documentation bug. This is something that it should just support according to the tests. It's also the reason why the tests are failing.~~\n@dmose It doesn't make any sense supply a callback when you pass in a server. Because you will be the one that calls the server.listen method.\nBut i'll update the docs.\n. Fixed in dce4634e022b69522bdb53f7f97e48843c24a17b\n. @nicokaiser did the change you suggested in #181 resolve this?\n. @nicokaiser according to the docs, destroy should only be called when an error occurred. So I'm wondering if there's something else that keeps these sockets open (which would be a leak?).\n. I'm not running 0.10 yet, i'm waiting until the dreadfull crypto performance is fixed.\n. There aren't any incompatible changes described in the upgrade list as well; https://github.com/joyent/node/wiki/API-changes-between-v0.8-and-v0.10\n@isaacs are you aware of any issues like this?\n. Was skimming through the node-redis changelog today and noticed; https://github.com/mranney/node_redis/issues/419 so i'm wondering if changing our stream.end calls to stream.destroySoon would resolve this.\n@nicokaiser could you see if https://github.com/einaros/ws/blob/master/lib/WebSocket.js#L688 -> destroySoon resolves it for you?\n. @nicokaiser They do, but it's an internal method; https://github.com/joyent/node/blob/master/lib/net.js#L410-L418 what it does it try to end nicely when possible or destroy it when it's allowed to.\n. I know, but forcefully destroying a socket isn't either.\n\u2014\nTwitter: @3rdEden\nGithub: @3rd-Eden\nOn Wed, May 15, 2013 at 9:53 AM, Nico Kaiser notifications@github.com\nwrote:\n\n@3rd-Eden don't know if it's a good idea to rely on internal node methods here...\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/180#issuecomment-17924622\n. Good catch.\n. I've added a ENV var to the make file, which fixes point 1. I've briefly looked at 2, it's odd that it doesn't emit any event at all.\n. @silverwind The tests are run under node, not in a browser :)\n. Closing this as tests do run on 0.10\n. Closed, duplicate of #34 \n. If this makes it easier to discover packages that use binary, why not. Should be in the next release.\n. Thanks for your contribution :+1: \n. @GoNode5 Thanks for that link, i've updated the README so the original blogpost can still be read\n. @ralphtheninja Can this be closed now that your patch has been merged in to master?\n. Thanks for the pull request, it looks solid. The node 0.10 failure is indeed happening in master as well, so i'm pulling this in as it's a welcome addition. I've experienced simular issues while I was building a web socket client.\n. Why not supply it with your own server if you want a custom notImplemented page?\n. @jholster which is the same as not supplying a port.\n\njs\nhttp = require('http').createServer();\nhttp.listen();\nconsole.log(http.address().port)\n. @sunweaver I'm starting to tag all future releases in git. Tracking down all older releases and tagging them would be a pain, so I'm not gonna waste my time on that. But thanks for the heads up, i'll keep my eyes on this :)\n. See #216 for the code snippet.\n. There's currently only one 1 test failing under node 0.10 and I have no idea how we can hack around that.\n. It looks good, could you add some tests for it?\n. Why don't you check for cookies before request is processed? \n. I was looking at how engine.io does this, and they feed the upgrade events manually in to ws which gives greater control over the upgrading process.\nEmpty ws server:\nhttps://github.com/LearnBoost/engine.io/blob/master/lib/server.js#L44\nUpgrade handler:\nhttps://github.com/LearnBoost/engine.io/blob/master/lib/server.js#L240-L253\nWhich is attached here:\nhttps://github.com/LearnBoost/engine.io/blob/master/lib/engine.io.js#L128-L142\n. @maxogden FYI: There's also an other way of accessing the request object;\nhttps://github.com/einaros/ws/blob/02b12c184c87c643ecac1a9e8e0bdea63acd4f18/test/WebSocketServer.test.js#L1091-L1100\n. Can you add a test for this?\n. @Aktau Could you add a test for this?\n. It looks good to me, but I don't know if we're gonna lose data this way as we assign the data event after the next tick.\n. I don't think so either, as JavaScript is executed atomically. So moving it to the last line on the function could just prevent data missing and fix your issues.\n. Can you add a test for this?\n. Thanks for the tests and the fix!\n. Fixed in master.\n. Why does it need to exist if it's so simple to implement?\nOn Sunday, July 28, 2013 at 5:24 PM, stefano cudini wrote:\n\nI'm trying this solution:\nserverws.broadcast = function(data) { for(var i in this.clients) this.clients[i].send(data); };  \nI wonder why this simple method does not already exist?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/einaros/ws/issues/216#issuecomment-21685097).\n. @stefanocudini Could you write something about it? I would love to add it to the README\n. It looks solid to me, @einaros do you mind the dependence on NAN?\n. @kkoopa Why isn't it released to npm yet then? It makes much more sense to reference it directly from npm now then to accept this pull request and continuously monitor the NAN repo to see if there a package.json we can leverage.\n. @kkoopa @einaros I'm just gonna merge this in as all test pass. We can always migrate to npm at a later point in time this way we actually test node 0.11 correctly for modules that depend on ws\n. @kkoopa For some odd reason, there we're some tests broken that Travis didn't report:\n\n```\n 1) Validation isValidUTF8 should return false for an erroneous string:\n     AssertionError: expected true to be falsey\n      at Object.ok (/Users/V1/Projects/einaros/ws/node_modules/should/lib/should.js:242:10)\n      at Context. (/Users/V1/Projects/einaros/ws/test/Validation.test.js:12:58)\n      at Test.Runnable.run (/Users/V1/Projects/einaros/ws/node_modules/mocha/lib/runnable.js:184:32)\n      at Runner.runTest (/Users/V1/Projects/einaros/ws/node_modules/mocha/lib/runner.js:296:10)\n      at /Users/V1/Projects/einaros/ws/node_modules/mocha/lib/runner.js:340:12\n      at next (/Users/V1/Projects/einaros/ws/node_modules/mocha/lib/runner.js:224:14)\n      at /Users/V1/Projects/einaros/ws/node_modules/mocha/lib/runner.js:233:7\n      at next (/Users/V1/Projects/einaros/ws/node_modules/mocha/lib/runner.js:181:23)\n      at /Users/V1/Projects/einaros/ws/node_modules/mocha/lib/runner.js:201:5\n      at process._tickCallback (node.js:415:13)\n      at Function.Module.runMain (module.js:499:11)\n      at startup (node.js:119:16)\n      at node.js:901:3\n2) Validation isValidUTF8 should return false for erroneous autobahn strings:\n     AssertionError: expected true to be falsey\n      at Object.ok (/Users/V1/Projects/einaros/ws/node_modules/should/lib/should.js:242:10)\n      at Context. (/Users/V1/Projects/einaros/ws/test/Validation.test.js:19:81)\n      at Test.Runnable.run (/Users/V1/Projects/einaros/ws/node_modules/mocha/lib/runnable.js:184:32)\n      at Runner.runTest (/Users/V1/Projects/einaros/ws/node_modules/mocha/lib/runner.js:296:10)\n      at /Users/V1/Projects/einaros/ws/node_modules/mocha/lib/runner.js:340:12\n      at next (/Users/V1/Projects/einaros/ws/node_modules/mocha/lib/runner.js:224:14)\n      at /Users/V1/Projects/einaros/ws/node_modules/mocha/lib/runner.js:233:7\n      at next (/Users/V1/Projects/einaros/ws/node_modules/mocha/lib/runner.js:181:23)\n      at /Users/V1/Projects/einaros/ws/node_modules/mocha/lib/runner.js:201:5\n      at process._tickCallback (node.js:415:13)\n      at Function.Module.runMain (module.js:499:11)\n      at startup (node.js:119:16)\n      at node.js:901:3\n```\nI'm running this on Node 0.10.15 on Mac OSX \n. @kkoopa Nevermind, after deleting my node_modules it seems to be resolved.\n. Looks great. Thanks for your contribution!\n. My bad as well for not spotting it. It looked solid.\n. Would be nice to see a test for this new functionality\n. @superjoe30 I think that is legacy (tm) code. As according to travis it should only ran on 0.6/0.8/0.10 (which fails for some shitty cert reason)\n. @TooTallNate Want to create a pull request for the tests?\n. @TooTallNate never mind, I took the .patch file from the commit and applied it. Thanks again for these fixes. I'll see if we can do another release this week.\n. @einaros Do you still want to support the older versions. Like 0.6 and even 0.8?\n. Allright, I'll see if I can do some cleaning soon.\n. @maxogden The native dependencies are already optional, they don't need to be loaded. The only reason that they are used is for utf-8 validation which should be as part of the specification and for a boost of performance. \n. Thanks for taking the time to incorporate this!\n. Fixed in the commit referenced above. I opted for full header control instead of introducing another option.\n. @stefanocudini Thanks!\n. @TooTallNate Yes, it doesn't follow the specification but it would be the only way to do this cleanly. If you want to support node and browsers in 1 file, why not check the .length of the constructor? It would tell you exactly how much arguments it can use.\njs\nif (WebSocket.length === 1) {\n  var ws = new WebSocket('ws://echo.websocket.org');\n} else {\n  // require('ws').length reports 2 :)\n  var ws = new WebSocket('ws://echo.websocket.org', { options });\n}\n. While you might expect that browser report 2 arguments as it allows 2 arguments to be used. It seems that they hide optional arguments from the .length method. I've tested this in Chrome, FireFox and Safari. They all report a length of 1 in browsers.\n. @TooTallNate I'll be more then happy to pull that in. Because we want to close the WebSocket API as closely as possible.\n. Duplicate of #229\n. Does it crash or just close the connection. In addition to that, what node version & ws version are you running?\nSent from my iPhone\nOn Aug 25, 2013, at 18:32, Radhakrishna Sanka notifications@github.com wrote:\n\nThe connection closes abruptly when the {binary: true, mask: true} options are passed along with the send() method.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks @mcollina \n. Thanks!\n. Yes, there are some old tags missing. But as I expressed in #196 -- Tracking down correct tags for each release would be a painful and time consuming progress which I honestly don't feel like it's worth doing. All future releases will be and are tagged correctly.\n. @TooTallNate I was thinking about downloading each version from NPM, checking the files included and tag based on that as package.json version change doesn't always indicate a release. So I don't know how accurate that is.\n. Latest release have all been tagged, it's not worth it to do it for these old historical tags anymore. \n. Thanks for spotting!\n. I dont see an error, i only see a succesful build\n\nSent from my iPhone\nOn Sep 4, 2013, at 22:10, maximkott notifications@github.com wrote:\n\nI was trying to install the latest version of TowerJS. It failed because of an error that ws was causing. Then I tried to install ws first, and thats the result:\n$ sudo npm install -g ws\nnpm http GET https://registry.npmjs.org/ws\nnpm http 304 https://registry.npmjs.org/ws\nnpm http GET https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/nan\nnpm http GET https://registry.npmjs.org/tinycolor\nnpm http GET https://registry.npmjs.org/options\nnpm http 304 https://registry.npmjs.org/tinycolor\nnpm http 304 https://registry.npmjs.org/options\nnpm http 304 https://registry.npmjs.org/nan\nnpm http 304 https://registry.npmjs.org/commander\n/usr/local/bin/wscat -> /usr/local/lib/node_modules/ws/bin/wscat\nws@0.4.30 install /usr/local/lib/node_modules/ws\n(node-gyp rebuild 2> builderror.log) || (exit 0)\nCXX(target) Release/obj.target/bufferutil/src/bufferutil.o\nSOLINK_MODULE(target) Release/bufferutil.node\nSOLINK_MODULE(target) Release/bufferutil.node: Finished\nCXX(target) Release/obj.target/validation/src/validation.o\nSOLINK_MODULE(target) Release/validation.node\nSOLINK_MODULE(target) Release/validation.node: Finished\nws@0.4.30 /usr/local/lib/node_modules/ws\n\u251c\u2500\u2500 tinycolor@0.0.1\n\u251c\u2500\u2500 options@0.0.5\n\u251c\u2500\u2500 commander@0.6.1\n\u2514\u2500\u2500 nan@0.3.2\nI couldn't find anything in google, or in the issues section here. There were some similar errors like this one, but without a solution.\n\u2014\nReply to this email directly or view it on GitHub.\n. @superjoe30 Well, actually, ws comes with wscat as binary so if you want that, you need to install it globally. But for normal module usage.. Never install it globally :)\n. Exactly what @superjoe30 said, and it's not something that we, ws can fix. It's now node deals with modules.\n. You should be using the Socket.IO client to connect to socket.io not pure websockets. Socket.IO adds to much things on top of websockets to make this plausable like a required HTTP handshake to retrieve the session id as well as custom message encoding and decoding\n. ws doesn't provide such functionality, if you want custom events and other higher level abstractions consider using https://github.com/primus/primus with the websockets transformer combined with the https://github.com/cayasso/primus-emitter plugin. Or implement something like this your self.\n. And what \"certain\" browsers are talking about? Does this mean you have a reproducible test case?\n. What are you guys sendings over the WebSocket connection? are they small chunks of data, rapid chunks, large chunks of data, binary? Any insight would be welcome. \n. @ktor9 I think i've discovered at least one small race condition in this; I've committed a potential fix it here: https://github.com/einaros/ws/tree/error-before-close\n\nWhat i've been seeing is that the receiver.onerror handler closes the connection before it's an error event. The close methods cleans up some resources and calls the .terminate method of the WebSocket which will do more aggressive cleaning which includes removing all assigned EventListeners.\nSo emitting the error before we close the connection might solve the thrown error as we see above. But that doesn't solve the actual reason why you received the error in the first place. And that is because it recieved an unexpected continuation frame from the browser client as seen on: https://github.com/einaros/ws/blob/master/lib/Receiver.js#L198 so either the browser is sending the wrong frames or we are setting the wrong opcode state internally in the receiver. \nBtw, what platform are you running on? Linux, Windows, Mac OSX? \n. @jeremybanks that's because you're missing error listeners? So ofcourse it's going to throw if you don't have any listeners assigned. it's how node works, no error listener? error? it will throw.\n. You can just use the socket.upgradeReq.url property\n. This is not the best way to fix that. The error should just bubble up to the error listener of the WebSocket. The biggest issue most likely that removeAllListeners is called before the error event is emitted. Causing all EventListeners to be removed.\n. Thanks!\n. Closing in favour of #251\n. Your not providing an callback function to the send method. So you're most likely writing something to a dead connection, which triggers an error. \n. Separating headers using comma's is a bad idea as headers are allowed to have that as value. Like Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS does. Maybe allowing multiple --header params makes more sense. like:\nwscat --connect <url> --header key=value --header foo=bar\n. Maybe you should use ws:// instead of http:? Anyways I'm using ws together with query strings and it runs just fine. So if you have a reproducible test case, that would be great. \n. You're missing a slash at the end of your port number. Change:\nvar ws = new WebSocket('ws://localhost:1234?foo=bar');\nto\nvar ws = new WebSocket('ws://localhost:1234/?foo=bar');\n. Get and Set methods have nothing to do with WebSockets. They are methods that Socket.IO invented and merely store the given key / value in a database and retrieves it. So it's easy to implement that your self. \n. Insta-merge!\nThanks for the pull request!\n. You need to JSON stringify and parse before you send the message. This is out of the scope of ws so you need to implement that your self.\n. If you are looking in to avoiding Socket.IO you could take a look at Primus. Which provides an abstraction on top of engine.io, sockjs, ws, browserchannel and socket.io so you can easily switch between these frameworks without changing your code (switching takes 1 LOC). It has support for plugins, and one of these plugins is primus-room which implements the rooms pattern on top of primus and thus also ontop of websockets.\nYou can learn more about primus at: https://github.com/primus/primus\nEven if you don't care about primus, you would probably still be interested in how the rooms are implemented there: https://github.com/cayasso/primus-rooms The implementation is based/inspired on the Socket.IO rooms functionality and should be fairly easy to understand.\nBut as this is not a ws bug, I'm going to close this issue.\n. What is \"more data\", you can just, if you want to send more data, why not just add more data to your own send call? \nIf you want to learn more about websockets, please read: https://developer.mozilla.org/en/docs/WebSockets\n. The send method doesn't support \"extra\" parameters, except for a callback. There is no way to send extra data with websockets. \n. The tests are failing.\n. Yes, im referring to those\n\nOn Nov 16, 2013, at 22:51, Glen Low notifications@github.com wrote:\n@3rd-Eden, are you referring to the tests for Node 0.6 and 0.8? The stream.Readable appears to be a new API.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks!\n. If you are sending basic auth the details should be in the authorization header, not the url\n\nSent from my iPhone\n\nOn Nov 21, 2013, at 18:03, Tyler Love notifications@github.com wrote:\nWhen I connect from a browser I am passing http Basic auth credentials. I wan't to be able to validate this from the Server connect event, and close the connection if it is not valid.\nThe socket.upgradeReq.url only contains the path.\n\u2014\nReply to this email directly or view it on GitHub.\n. The pull request is failing atm.\n. That is correct, i've merged it and it will be included in the next release. Thanks for the update.\n. You can inspect the headers of the incoming request. The WebSocket has a upgradeReq property that points the HTTP request object.\n. @davedoesdev Could you rebase against master? As there have been some changes in master that dropped node 0.4 support for example which is causing merge conflicts atm. Other than that, it looks good to me.\n. It doesn't bother at all, I personally love to see the history of change as commit messages usually contain extra details on why a change has been made. \n. I agree with @sequoiar here. It makes much more sense to make the protocol either fully configurable or make the protocol dependent on the protocol used in the connection string. As not every single server will just blindly accept HTTP origins.\n. Yes, it can connect to this server if everything is setup correctly. Make sure you have policy file server running before you connect to the server. If you cannot get it to run, please create an issue at web-socket-js\n. Thanks\n. Latest release have all been tagged, it's not worth it to do it for these old historical tags anymore. \n. There is no reason to not have them around. There might be usecases where you do want to support every single websocket protocol available. \n. This is an npm issue, not a ws issue.\n. @codingphil Could you add test to ensure that this isn't broken in future releases?\n. I do have push access but this is just one of 70~ modules i'm trying to maintain. So I think all help is welcome to maintain this module.\n. Thanks for your contribution\n. Yes, it's designed right. After the correct response headers are written a callback is called: https://github.com/einaros/ws/blob/master/lib/WebSocketServer.js#L206-L237 which will emit a connection event: https://github.com/einaros/ws/blob/master/lib/WebSocketServer.js#L72-L75 this all happens before any more data from the client is received. \n. I don't see a failed installation here. Only a failed compilation of an optional binary module. I'm pretty sure your npm installation ended with npm ok instead of a npm not ok. If this is not the case, please post the full installation output.\n. LGTM, thanks for the tests.\n. This change is breaking our tests.\n. Could you add a test for this so we can confirm it works as intended?\n. @Mattijah There is a test folder in the root of this repository which contains the tests. You can run the tests with npm test. To add a test simply open of one of the relevant test files and add your new test there. \n. You can just access the upgradeReq property and read out the headers.\n. Changes without explanations and tests will not be merged. Please clarify what this fixes and add appropriate tests.\n. Thanks for your contribution!\n. I would rather see the functions named as well or the stacktraces will be filled with anonymous function calls.\n. Once the discussed changes are made it can be merged in.\n. Sounds good to me, thanks for the upgrade.\n. This is not an unnecessary dependency or installation that targets ancient-old node problems. It's required to be conform the RFC spec which requires proper UTF8 validation which could be done in JavaScript. In addition to that it improves performance drastically. Which is one of the reasons why ws is still the fastest websocket module for node to date (until proven otherwise ;)). \n\npreinstall and gyp being evil is absolute non-sense, preinstall allows this compilation to be completely optional if the architecture supports it. When compilation fails the install doesn't die but continues and uses an empty function for the utf-8 validation. Gyp is a great build system and nothing in that article states otherwise. If read the article you've linked to you would have seen: This is the only officially supported method for compiling binary addons where they talk about gyp.\nIf you want to make the compilation optional, i'm accepting pull requests for this as it's not something that I would require my self.\n. The only thing that needs to change is the install script in the package.json. We should just find a way to  get windows to stop bitching about a missing tool chain. The binary addon is completely optional and ws will function as intended without it.\nMaybe it makes more sense to spawn it as child process in node, always exit with code 0 so the installation continues (and respect optional env variables or cli flags to disable the compilation). But I have no intentions of making and testing these changes because I have a strong dislike for node on windows as it's not a viable deployment target.\nSo if someone from the community steps up, and creates a pull request for this which will make it degrade gracefully on Windows i'll be more then happy to merge that in.\n. @3y3 I don't see how that would solve the issues? It doesn't allow any conditional compilation as far as I can see.\n. @polkovnikov-ph This issue was closed as the binary addons are moved to the optionalDependencies part of the package.json so if the installation or compilation of these files fail, the installation should still complete. \nIf this is not the case, you should raise an issue in the npm library as they handle the optionalDependency installation. \n. The binary components are also in the organization, they are bufferutil and utf-8 validate. Bufferutil improves the performance of buffer based operations and creating websocket masks while utf8-validate adds missing utf-8 validation so the library is confirm the RFC specification.\n. Would love to see a test against this.\n. Yes it works for HTTPS. As seen in the example provide above you can just provide ws with a valid HTTPS server and it will use that for the connections. \n. Why?\n. Thanks, I totally missed that :p\n. Thanks for the changes!\n. Thanks for your contribution <3\n. Fixed in master\n. Thanks for your contribution.\n. Published 0.4.32\n. Closing this, as I'm unable to reproduce this in the current version so i believe it's fixed. Thanks for reporting. If this still happens please re-open the issue.\n. There is no documentation on this matter as it's out of the scope of this project and it's highly opinionated on how to implement cross messaging between different servers. Most people just create a pub/sub connection. Each server listens to the channel and when they receive the message they send it to the specified users.\n. Not implemented is the default response that the WebSocket serves. If you want to serve your own response you should provide a server instance instead of port number. \n. @beshur that would be possible. But that is already something you can do by supplying your own http server.\n. Please use Stack Overflow or any other message board for your programming questions and only use this issue tracker for bug reports and feature requests. \n. Thanks for the semi colons. \n. This is not a limitation of ws but from your OS. See http://stackoverflow.com/questions/2332741/what-is-the-theoretical-maximum-number-of-open-tcp-connections-that-a-modern-lin\n. You didn't even bother reading my article. It's not unlimited files but the maximum tcp connections per ip. Also as this is not a bug report regarding ws nor is it a feature request, this issue should be closed.\n. Replica of what?\n. Yes, it should, if not it would be bug.\n. Yes.\n. You can just pass the server a server option instead of a port number and it will use that http server to listen to upgrade events. \n. Feel free to create a pull request for it. This module could use some documentation love.\n. This feature does not belong in ws. If you want the x-forwarded-for header you should just read it out of the headers from socket.upgradeReq\n. or ws.upgradeReq.remotePort\n. Closing this as this is not a ws issue\n. Thanks for your pull request, this will land in the next release of ws.\n. @DamonOehlman Any way we could get a test against this?\n. You should use a template language for that or replace contents in the index.html before serving it. But that is out of the scope of this project so I'm closing this issue.\n. I have no intentions to add support for domains in. It's to hard to maintain, can cause memory leaks, is experimental and generally a pain in the butt to correctly implement it's just not worth the effort.\n. Have you confirmed that this is a server side issue instead of a client side issue?  Because it sounds to me that server is working fine but you just have connection failures with your websocket client.\n. Instant merge, thanks for your contribution.\n. Could you create separate pull requests about documentation and code fixes? As you code only removes tests without adding them.\n. :/\n\nOn Nov 25, 2014, at 13:04, I\u00f1aki Baz Castillo notifications@github.com wrote:\nOK @3rd-Eden, just bye. \n\u2014\nReply to this email directly or view it on GitHub.\n. I'm closing this as I'm unable to repoduce this in the current master branch so I assume it's fixed with my upgrade to nan 1.4\n. @compcj with 0.7.1 of ws we've moved the binary addons to optional dependencies so it really shouldn't crash any more. If you still experiance problems please open a new issue with the full npm installation debug output.\n. This patch would still remove all event listeners that we did not add. So it doesn't solve the actual issue. It should be doing a removeListener(event, functionweassingedpreviously) instead.\n. Just checking in, that this issue is still on my radar and that fully tested solution is on it's way. The problem i have with #393 is that it maintains to much state which could lead to memory leaks and sadness. I'll take a stab at a less hacky solution this week. \n. @migounette can you can confirm that master resolves your issues?\n. This is the issue tracker for the ws module, you meant to post this at the slc/strongloop/node-inspector repositories instead. \n. Published as 0.5\n. Great!\n. This should now be fixed in master.\n. Thanks for your contribution.\n. FYI: I reverted this as the README is not proper license file.\n. You're running in to the file descriptor limit of your machine, you should increment this using the ulimit command. See things like http://glassonionblog.wordpress.com/2013/01/27/increase-ulimit-and-file-descriptors-limit/\n. It's probably generated by node-gyp during compilation of the binary add-ons. It's beyond our control. If you want to know more about it I suggest raising an issue at https://github.com/TooTallNate/node-gyp\n. Great presentation, but this has no use in an issue tracker so i'm closing this issue. \n. @leedm777 and that exactly why I haven't looked at it yet. Ideally, this should be something that is solved & stored by npm instead of using these kind of hacks.\n\nI wonder if we could just create ws-<platform> packages and conditionally install them during the install phase so we can still leverage npm. Which might be even a bigger hack, but at least it's cheaper :-P\n. @DavidSouther I'll see what I can do about. Now that we've got ws moved to it's own repository I plan on extracting the binary addons to it's own modules. As use them as optional dependencies in this project so the possiblity of build failures are reduced. \n. @rosskukulinski I don't know if it makes sense to pursue this much longer as we moved away from a silly install script which should have been doing optionalDependencies to the actual optionalDependencies support in npm. The primary reason for this feature was to reduce build failures, which seems to be somewhat solved now.\nThe only thing that I still want to explore is to either have node-gyp-pre publish the binaries to npm's registry or as download files from github so there is hosting overhead and additional accounts needed for contributors to release code.\n. @ErisDS As @lpinca explained, the UTF-8 dependency is used to validate that we're receiving correct UTF8. If this module is not installed, it just accepts all the UTF8. This is not really a big problem as you should be always be validating user input in your application so your application logic will already cover this case. As for the bufferutil it provides the performance boost which makes ws the fastest module for websockets in node.\nIf you are uncertain about the potential impact that ws will have I would suggest taking a look at primus which allows you to transparently switch between different websocket providers and real-time frameworks without having to rewrite your application logic. https://github.com/primus/primus (it also fixes various of browser and implementation bugs so it also results in a more stable connection)\nAs for the node-pre-gyp, I was hoping that this step would no longer be necessary now that ws has fully transitioned to optional dependencies. If the output of a failing installation affects the user experience it will be more an issue of how npm handles it. The output as seen above should really be hidden by default as it's an optional dependency, so it doesn't matter why it failed anyways. \n. Closing based on comment made above.\n. Whoops! Thanks for spotting and fixing it.\n. It would be handy, but that's out of the scope of this project. \n. The last snippet would definitly be better, but I would suggest moving the JSON.stringify(process.memoryUsage()) out of the for loop as well as you're currently doing a stringify and memoryUsage call for every connected client instead of just doing it once. \n. woaaaaahhh @_@\n. @nkzawa I see that it fails on node 0.8 but overall the code looks good and I have no problem merging this and bumping ws to 0.6. \n. Thanks <3 -- Releasing as 0.6\n. The implementation seems to be really unstable, it's causing primus's test suite to fail and people have been reporting bugs of thrown errors as well: primus/primus#319 I'm going to release a 0.6.1 which disables permessagedeflate by default.\n. Whoops! Nice find :p thanks for the correction.\n. Released under 0.6.3\n. Thanks for your contribution!\n. Thanks for your contribution\n. Thanks for the additional documentation.\n. cc @nkzawa\n. Managed to create a minimal test case:\n``` js\n'use strict';\nvar WS = require('ws')\n  , server = new WS.Server({ port: 8080 });\nserver.on('connection', function (socket) {\n  socket.send('hello');\n  socket.close();\n});\nvar ws = new WS('http://localhost:8080');\nws.on('message', function () {\n  process.exit();\n});\n```\nIf you run that, the node instance will never close. If you comment out the socket.close it works as intended.\n. The cleanupWebsocketResources should then somehow know that there's still data in the \"pipe\" some where which needs to be flushed before it can be cleaned up.\n. Thanks a lot for coming up with a fix for this. \n. I highly doubt that this is a bug in the library as all our test pass and write the correct data as expected. Your code on the other hand contains a lot of bugs. For example you loop over an array using for in instead of for, while or forEach etc. \n. @r3wt I'm not the author of this library, i'm merely a simple contributor ;-). I haven't touched/read through the documentation and readme in ages. I just look at the code and see that clients is an array not an object: https://github.com/einaros/ws/blob/master/lib/WebSocketServer.js#L86\nAs for the undefined it makes sense as you check if error is not null in the send callback. That's true, because it's undefined as there is no error, causing you to log undefined\n. Thanks for the fix and the test.\n. Argh, sorry about that. It seems I only did a git push and not an npm publish. Published 552dddaf9bcc5304c22415b81aa748384d82837c as 0.6.5\n. https://github.com/einaros/ws/blob/master/lib/WebSocket.js#L360\naka, ws.bufferedAmount\n. RTD\n. That is out of the scope of this project. If you want such features I would suggest looking at things like Primus or reconnecting-websocket\n. Just create a new instance? \n. Of course, as it's new instance. \n. Test passes, so I see no reason not to merge this in. Thanks for your fix.\n. That's odd, Travis-Ci said all was fine =/\n. This is flaw of cluster, not of ws. Solution is to stop using cluster for load balancing and use a proper load balancer like HAProxy or nginx instead. \n. @silverwind I cannot reproduce this on iojs. All tests seem to pass on 1.0.3 so i'm going to close this issue. \n. If you're using primus, you don't need anything else on the client except for the client library of Primus. Please see https://github.com/primus/primus for the documentation\n. Could you provide the full npm output?\n. @liboshi The reason that the build is failing is because of the (optional) binary addons fail to install and that is probably due to a missing visual studio. The node-gyp that npm uses the build binary addons states:\n- On Windows:\n  - Python (v2.7.3 recommended, v3.x.x is not supported)\n  - Windows XP/Vista/7:\n    - Microsoft Visual Studio C++ 2010 (Express version works well)\n    - For 64-bit builds of node and native modules you will also need the Windows 7 64-bit SDK\n      - If the install fails, try uninstalling any C++ 2010 x64&x86 Redistributable that you have installed first.\n    - If you get errors that the 64-bit compilers are not installed you may also need the compiler update for the Windows SDK 7.1\n  - Windows 7/8:\n    - Microsoft Visual Studio C++ 2012/13 for Windows Desktop (Express version works well)\nI'm in the progress of moving out the binary addons that are build in to this module so we can leverage the optionalDependencies from npm to prevent these kind of build failures in the future.\n. Good one, thanks\n. Is there any way you can write a test against this as obviously all our tests passed making it believe that the old way was the correct way.\n. Thanks for your contribution <3\n. This doesn't seem to use the latest ws build. Can you post the output of your npm ls and the full npm install output?\n. https://github.com/NetEase/pomelo/blob/master/package.json#L31 - It's still using the old socket.io which doesn't depend on ws@0.7. They should upgrade to the latest version of socket.io and engine.io-client should bump to https://github.com/Automattic/engine.io-client/blob/master/package.json#L26 0.7 as well. \n. Provide a full output of the build and the output of npm ls. \n. well if you want to connect with an unknown protocol the connection would be closed by the server.\n. You use exactly the same API as a websocket client. which is the close method. \n. V8's garbage collection takes care of that. If there are no more references to it, it will eventually be removed.\n. Thanks for the pull <3\n. Im guessing because 0.7 has deflation enabled by default\nArnout Kazemier\n\nOn Feb 18, 2015, at 07:51, Andrii Chyzh notifications@github.com wrote:\nEnvironment\nAWS EC2 m3.xlarge with CentOS 6.5 and Node.js 0.12\nSteps\nGit clone repository\nNPM install\nRun benchmark tests from https://github.com/websockets/ws/blob/master/bench/speed.js\nLatest version (0.7.1):\n[root@ip-172-131-202-212 ws]# node bench/speed.js \nGenerating 500 MB of test data ...\nRunning 10000 roundtrips of 64 B binary data:      10.7s        58.22 kB/s\nRunning 5000 roundtrips of 16 kB binary data:      11.4s        6.85 MB/s\nRunning 1000 roundtrips of 128 kB binary data:     15.2s        8.25 MB/s\nRunning 100 roundtrips of 1 MB binary data:        11.8s        8.5 MB/s\nRunning 1 roundtrips of 500 MB binary data:        60s          8.33 MB/s\nRunning 10000 roundtrips of 64 B text data:        11.9s        52.68 kB/s\nRunning 5000 roundtrips of 16 kB text data:        12.7s        6.16 MB/s\nRunning 1000 roundtrips of 128 kB text data:       15.4s        8.14 MB/s\nRunning 100 roundtrips of 1 MB text data:          12.4s        8.09 MB/s\nVersion 0.5.0\n[root@ip-172-131-202-212 ws]# git checkout d242d2b8ddaa32f7f8a9c61abe74615767a91db4\nHEAD is now at d242d2b... [dist] 0.5\n[root@ip-172-131-202-212 ws]# node bench/speed.js \nGenerating 500 MB of test data ...\nRunning 10000 roundtrips of 64 B binary data:       1.9s      331.04 kB/s\nRunning 5000 roundtrips of 16 kB binary data:       1.7s      44.72 MB/s\nRunning 1000 roundtrips of 128 kB binary data:      1.5s      86.03 MB/s\nRunning 100 roundtrips of 1 MB binary data:         1s        100 MB/s\nRunning 1 roundtrips of 500 MB binary data:         6.1s      82.39 MB/s\nRunning 10000 roundtrips of 64 B text data:         1.4s      438.29 kB/s\nRunning 5000 roundtrips of 16 kB text data:         1.9s      41.64 MB/s\nRunning 1000 roundtrips of 128 kB text data:        1.8s      71.18 MB/s\nRunning 100 roundtrips of 1 MB text data:           1.4s      69.59 MB/s\n\u2014\nReply to this email directly or view it on GitHub.\n. That's out of the scope of this library and there already projects who implement this so it makes no sense to add it here as well. \n. Thanks for the pull request. Given the amount of pull requests you've made? Would you like to have full push access to the websockets/* projects?\n. Yeah, sorry for the long wait I was/am traveling to and in US atm so I have limited access to internet and time in general. \n. Closed based on the commented above.\n. @humingchun if you are feeling strongly about this you can create a pull request for it and I have no problem with accepting it (if it's properly tested and documented)\n. https://github.com/websockets/ws/blob/master/doc/ws.md\n\npretty much documents all the things..\n. @Dillybob92 I'm sorry that I didn't link to the part of the documentation where we list the properties but here you go: https://github.com/websockets/ws/blob/master/doc/ws.md#class-wswebsocket and the documentation made the assumption that people know the properties of a http request or know where they can find them or how to google it.. Maybe we should linked the part where it said \"http request\" and link it to http://nodejs.org/api/http.html#http_class_http_clientrequest.\nAs for the remoteAddress not showing up, why on earth are you ranting about that here while it's not even remotely (ooh see what I did there) related to this project as it's clearly something that Node.js does.\n. That is how node's console works, either deal with it or use a different module to output objects to stdout. It's not our fault that node works this way, and there absolutely no reason that we reproduce node's console documentation in this project. \n. Because that's how npm works.\n. @binarykitchen Ideally, yes. IMHO npm should pre-build binary dependencies on various of platforms and download those instead of building binary modules on the users systems. Which is a quite error prone design. There are modules like node-pre-gyp which attempts to solve this but that is not an ideal solution.\n. @binarykitchen but also make sure you upgrade to 0.7 which uses optionalDependencies instead of install scripts for the binary dependencies. \n. @binarykitchen I don't know, I'm not really affected by this bug because I don't npm install . a lot, I only install dependencies but I noticed that your installing 0.6.x instead of the newest 0.7 which does handle binary dependencies differently.\n. Well, the problem here is that you made the assumption that you can just always bluntly write to a websocket connection. This is not the case on the server or browser. Normally you would wrap your write/send api with a readyState check to ensure that the connection open as the browser would also throw an Error if you're writing to a closed websocket.\nI don't know the exact flow of events in the browser but I feel that we should follow it as close as possible to prevent people from writing the same code twice (on server and client)\n. @glennschler are you seriously advising socket.io because there a single if statement missing in the forEach code? I don't even.. \njs\nws.on(\"message\", function(message) {\n  server.clients.forEach(function(client) {       \n    if (client !== ws) client.send(data);\n  });\n});\n@cra0kalo The only thing that your code was missing was a simple if statement to check if the client that you received from the forEach was not the same as the ws client that received the message. \n. @r3wt storing clients in an array makes sense for ws because non of the clients have id's. This makes broadcasting also easy by doing a simple forEach loop over the client's array. But as this structure is not efficient for all the patterns that people come up with there's an option on the server that prevent client tracking called clientTracking: false. This way you can just manually store all clients that connect in a separate object somewhere and remove them again on disconnect.\n``` js\nvar WebSocketServer = require('ws').Server;\nvar server = WebSocketServer({ clientTracking: false });\nvar connections = {};\nserver.on('connection', function (socket) {\n  socket.id = generateAnUniqueIdFunction();\n  connections[socket.id] = socket;\nsocket.on('close', function () {\n    delete connections[socket.id];\n    delete socket.id;\n  });\n});\n``\n. Why would the browser code be the problem here? Browsers don't even support custom headers.\n. If your \"client\" is actually a node script which uses thews's client interface to create a connection then custom headers are possible. If you are referring to client as an actual browser then it's not possible as websockets cannot have custom headers. The best bet you got is to use querystrings to send data from client to server.\n. Query strings will work fine for WebSocket connections as upgrade requests contain the full URL path. On the server you can do something likeconsole.log(url.parse(client.upgradeReq.url, true).query)`\n. Correct. See https://github.com/websockets/ws/blob/master/doc/ws.md#websocketupgradereq \n. Not really a fan of throwing errors for this. I think it makes more sense to just return a new instance. E.g.\njs\nfunction BufferPool(initialSize, growStrategy, shrinkStrategy) {\n  if (!(this instanceof BufferPool) {\n    return new BufferPool(initialSize, growStrategy, shrinkStrategy);\n  }\n. Thanks for the correction. Will be in the next minor release. \n. Yes, it might make more sense to do so.\n. In the node.js variant you can supply an options object with a headers key where you can add the Cookie header your self.\n. You could use an SSL terminator infront of your HTTP server. \n. I would say it comes from your load balancer as 504 is a gateway timeout. Could it be that the server had a frozen event loop or swamped with load?\n. It should just work without any problems. But there no general best practices required here yet. \n. That problem does not apply to websockets as they don't use polling, which requires request tracking and therfore state.\n. There are no broadcasting API's in this module.\n. As you can see, it's not an official API. It just iterates over the connected clients array. It's example how you could implement broadcasting. It's by no means a full broadcast API as there are many optimizations to made in a proper broadcasting API nor does it take multiple servers in consideration like full broadcast API's would. If you need full ledged broadcasting functionality you need to write code for that your self.\n. This looks more like a bug in node core than a bug in ws as none of the stack traces point or originate from ws. Also, it's is known that there issues when using self signed certificates in combination with websockets, safari also has it's fair share of issues with it. And it makes sense for the browsers to kill the connection from a security point of view. \n. But the browser file doesn't include any strict mode so it works. Unless you some how forced strict module globally on all files. Which is recommended by nobody. So as far as I'm concerned, this is a non issue.\nOn Thursday, April 2, 2015 at 12:56 PM, Ilya Kantor wrote:\n\nIt tries to get global from a (function() { ... this }()), but in use strict such functions execute with this = undefined, not window.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/websockets/ws/issues/478).\n. Could you confirm that the browserefactor branch works as expected and correctly resolved your bug?\n\nOn Thursday, April 2, 2015 at 11:37 PM, Ilya Kantor wrote:\n\nThis suddenly became an issue to me, because ES6-modules have \"implicit strict mode\".\nI'm using babel.js for ES6, and it built my project (including ws browser.js) with all-around-strict-modes. So browser.js got \"use strict\" at the top too.\nAfter debugging I found out the reason and excluded browser.js from babel.js compilation (not needed for sure), so the issue was fixed.\nBut in the view of ES6 modules it might be future-proof to make the module strict-mode-compatible.  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/websockets/ws/issues/478#issuecomment-89051348).\n. But in any case, your problem is also more a babel bug then a ws bug. As ES6 strict mode should only be applied to actual ES6 modules and ES6 classes. This file follows non of those patterns and should therefor be excluded from the strict-mode.\n. Thanks for your pull request!\n. Thanks for your pull request!\n. Also, pull requests without tests are accepted. Especially when they introduce new functionality.\n. Thanks for the corrections <3\n. I'm not going to allow extending of native/build-in objects. So I have to decline this pull request as the side affects are worse than the benefits. \n. Thank you for your pull request.\n. Can you confirm that master works as intended?\n\nArnout Kazemier\n\nOn May 7, 2015, at 12:17 AM, Martin Zagora notifications@github.com wrote:\nzaggino-mac:brackets-electron zaggino$ node --version\nv2.0.0\nzaggino-mac:brackets-electron zaggino$ npm install ws\n|\n\nutf-8-validate@1.0.1 install /Users/zaggino/github/brackets-electron/node_modules/ws/node_modules/utf-8-validate\nnode-gyp rebuild\n\nCXX(target) Release/obj.target/validation/src/validation.o\nIn file included from ../src/validation.cc:15:\nIn file included from ../node_modules/nan/nan.h:74:\nIn file included from ../node_modules/nan/nan_new.h:190:\n../node_modules/nan/nan_implementation_12_inl.h:181:66: error: too many arguments to function call, expected at most 2, have 4\n  return v8::Signature::New(v8::Isolate::GetCurrent(), receiver, argc, argv);\n         ~~~~~~~~~~~~~~~~~~                                      ^~~~~~~~~~\n/Users/zaggino/.node-gyp/2.0.0/deps/v8/include/v8.h:4188:3: note: 'New' declared here\n  static Local New(\n  ^\n1 error generated.\nmake: *** [Release/obj.target/validation/src/validation.o] Error 1\ngyp ERR! build error\ngyp ERR! stack Error: make failed with exit code: 2\ngyp ERR! stack     at ChildProcess.onExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:269:23)\ngyp ERR! stack     at emitTwo (events.js:87:13)\ngyp ERR! stack     at ChildProcess.emit (events.js:169:7)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:1009:12)\ngyp ERR! System Darwin 14.3.0\ngyp ERR! command \"/usr/local/bin/iojs\" \"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd /Users/zaggino/github/brackets-electron/node_modules/ws/node_modules/utf-8-validate\ngyp ERR! node -v v2.0.0\ngyp ERR! node-gyp -v v1.0.3\ngyp ERR! not ok\n\nbufferutil@1.0.1 install /Users/zaggino/github/brackets-electron/node_modules/ws/node_modules/bufferutil\nnode-gyp rebuild\n\nCXX(target) Release/obj.target/bufferutil/src/bufferutil.o\nIn file included from ../src/bufferutil.cc:16:\nIn file included from ../node_modules/nan/nan.h:74:\nIn file included from ../node_modules/nan/nan_new.h:190:\n../node_modules/nan/nan_implementation_12_inl.h:181:66: error: too many arguments to function call, expected at most 2, have 4\n  return v8::Signature::New(v8::Isolate::GetCurrent(), receiver, argc, argv);\n         ~~~~~~~~~~~~~~~~~~                                      ^~~~~~~~~~\n/Users/zaggino/.node-gyp/2.0.0/deps/v8/include/v8.h:4188:3: note: 'New' declared here\n  static Local New(\n  ^\n1 error generated.\nmake: *** [Release/obj.target/bufferutil/src/bufferutil.o] Error 1\ngyp ERR! build error\ngyp ERR! stack Error: make failed with exit code: 2\ngyp ERR! stack     at ChildProcess.onExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:269:23)\ngyp ERR! stack     at emitTwo (events.js:87:13)\ngyp ERR! stack     at ChildProcess.emit (events.js:169:7)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:1009:12)\ngyp ERR! System Darwin 14.3.0\ngyp ERR! command \"/usr/local/bin/iojs\" \"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd /Users/zaggino/github/brackets-electron/node_modules/ws/node_modules/bufferutil\ngyp ERR! node -v v2.0.0\ngyp ERR! node-gyp -v v1.0.3\ngyp ERR! not ok\nnpm WARN optional dep failed, continuing utf-8-validate@1.0.1\nnpm WARN optional dep failed, continuing bufferutil@1.0.1\nws@0.7.1 node_modules/ws\n\u251c\u2500\u2500 options@0.0.6\n\u2514\u2500\u2500 ultron@1.0.1\n\u2014\nReply to this email directly or view it on GitHub.\n. Allright, i'll push out a new release.\n. Yes, I just haven't found the time to look at it as i'm currently under some heavy deadlines that have priority over this.\n. Released 0.7.2\n. Thanks for the doc fix!\n. Could you add an additional test against this so it doesn't break in the future?\n. @Kosta-Github Yes, sorry. This will be in the next release which i'll try to do today.\n. Fixed in master.\n. This method was refactored in the delete this part is gone so i'm going to close the issue.\n\nhttps://github.com/websockets/ws/blob/master/lib/WebSocket.js#L102-L136\n. Could you include a test?\nArnout Kazemier\n\nOn Jun 11, 2015, at 5:20 PM, Chad Engler notifications@github.com wrote:\nFixes #511.\nThe type property of the event should refer to the event type that is being fired. Unfortunately type for message events was being used to pass Binary/Text which was not only non-standard but broken applications that relied on the browser behavior.\nThis PR fixes events to have the proper type, and adds a non-standard binary property that has the value of flags.binary.\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/websockets/ws/pull/512\nCommit Summary\nmake websocket events be in line with browser\nFile Changes\nM lib/WebSocket.js (10)\nPatch Links:\nhttps://github.com/websockets/ws/pull/512.patch\nhttps://github.com/websockets/ws/pull/512.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. No, sorry for the delay and thanks for your pull request.\n. You as developer should be limiting the data that YOU are sending. It would be silly to enforce limits on this as there might be valid usecases where sending a few mb as buffers actually makes sense (streaming binary video data or what not for example).\n. @Dillybob92 \nthese forums don't have a ounce of the intelligence compared to SO\n\nFirst of all, these are not forums, but an issue tracker. Seems like your \"superior\" \"intelligence\" missed that part. I'm going to close this issue. Feel free to re-open a new issue if a normal discussion about this problem can take place. \n. There was absolutely no reason for such discussion to take place in a bug report. But lets get back on topic here.\nThere is indeed no way to limit the maximum size of a message. The closed thing to message size moderation are:\n- Looking at the bufferedAmount property of the connection and actively start dropping or blocking connections based on that.\n- Attach an additional data listener to the socket that ws wraps. \n- Add functionality for this directly in to the project, which is probably the received.js file.\n. No where in the code you published here are you actually calling the broadcast method you created.\n. Can't find anything wrong against this patch, so lgtm. The only thing that is missing is a test to ensure that the connection is properly aborted.\n. I agree, if there is usecase for this and we do get timeouts, feel free to make PR to add this functionality. \n. Marking as a bug, thanks for your report. @nkzawa Any idea on why this is happening?\n. You, are amazing. Thanks\n. These kind of questions are out of the scope of this project, I would have to google the answer just as hard as you would. \n. @nkzawa Just like you, I was not aware that ws even worked with \"regular\" arrays. I would have assumed in order to send binary that you needed to send actual binary based types such as TypeArray, Buffers and ArrayBuffer etc. \n. Can't merge it in with all changes and lack of tests, sorry.\n. Thanks for your contribution <3\n. Thanks for the pull request.\n. It doesn't really matter if they compile or not as they are optional dependencies. If a dependency does not compile, an issue should be raised that specific repository. \n. This is an issue with npm not with the ws module. Please open an issue in their repositories instead.\n. Thanks for the patch, these edge case are really hard to test but the pull request looks good to me, so I insta merged it.\n. When IO.js 3.0 is supported.\n. Just added iojs support a few hours ago, so i'll probably kick out a new version today or tmorrow.\n. @ide theres still a small issue with the binary addons not compiling on certain environments. \n. 0.8 was released a while ago.\n. To be honest here, if that part fails, it's really iojs / npm to blame as these are optional binary dependencies that fail to build (work is already being done to get them working on iojs 3). They should just ignore the node-gyp and continue with the installation of the module.. \nI would suggest also reporting these issues at npm/iojs's repositories. Having that said, community members are already fixing parts of the failing code in the related websockets/* repositories.\n. Please confirm that master is working, i've bumped the optionalDependencies now that they support nan 2.0 for iojs 3.0\n. Did you install it using npm install websockets/ws ? Or in a different way?\n. This is my output with the latest iojs:\n```\n$ npm install websockets/ws\n\\\n\nutf-8-validate@1.2.0 install /Users/V1/Projects/node_modules/ws/node_modules/utf-8-validate\nnode-gyp rebuild\n\nCXX(target) Release/obj.target/validation/src/validation.o\n  SOLINK_MODULE(target) Release/validation.node\n\nbufferutil@1.2.0 install /Users/V1/Projects/node_modules/ws/node_modules/bufferutil\nnode-gyp rebuild\n\nCXX(target) Release/obj.target/bufferutil/src/bufferutil.o\n  SOLINK_MODULE(target) Release/bufferutil.node\nws@0.7.2 node_modules/ws\n\u251c\u2500\u2500 options@0.0.6\n\u251c\u2500\u2500 ultron@1.0.2\n\u251c\u2500\u2500 utf-8-validate@1.2.0 (bindings@1.2.1, nan@2.0.5)\n\u2514\u2500\u2500 bufferutil@1.2.0 (bindings@1.2.1, nan@2.0.5)\n``\n. Ok, that just installed the latest published release in npm, not the one from github's master branch.\n. The release is out. Thanks for your patience. \n. Thanks for the pull request <3\n. Would be nice to have test against this.\n. Thanks for your contribution \n. @psorowka Do you have any trace on where the string originates from because I'm pretty sure we're all using Error instances. \n. https://github.com/websockets/ws/blob/master/doc/ws.md#optionspermessagedeflate is what you're looking for.\n. As the binary internals required a refactor to work, the ws version is bumped to 0.8 - but the release is out. Thanks for your patience. \n. Shouldn't node-gyp automatically detect this?\n. The release is out. Thanks for your patience. \n. (And contributions)\n. Upgraded to the latest NaN for IO.js which required a rewrite and major version bump of the binary addons. So yes, it should be safe to upgrade in most cases.\n. I'll be more then happy to support that.\n. Would love to see tests being added for this. It will be impossible to track regressions otherwise.\n. Thanks for the contribution, will be availabe in the next 1.0 release\n. We never published binaries, it was always a compile step during installation. \n. *contributor\n. Thanks for your contirubtion.\n. I don't see how this is awsissue. It looks more like anodeissue to me where it doens't correctly load balance your cluster. I suggest creating an issue in their repository to get this resolved. \n. Thanks for your contribution :trophy: \n. This satisfies my OCD in so many ways. \n. Thanks for the pull request <3\n. @feross This is something thatnpm` should fix. The binary parts are optionalDependencies. If the UX is bad for the user it's because npm makes the ux bad. We as module authors cannot control the output for these modules. \nImho, npm should be pre-building binary addons and bundling them with dependencies during download. Having that said, there's already a pull request that allows building of prebuild binaries in the native modules but the problem here is shipping and installing. \n. @maxogden The 2 binary addons are there for 2 different reasons:\n1. the buffer utils includes performance enhancement for buffer operations and websocket masking.\n2. the rfc specification requires UTF8 validation of messages to ensure that nothing bad or broken can be send over the connection, this utf-8 validation could not be done in JavaScript and needed to be written as binary addon. If this is removed the module will no longer be RFC compliant. \n. An alternate solution would be to publish a new package that only has the native dependencies. A \"ws-native\" and a \"ws\". So we can have the best of both worlds and have authors decide on what they want to use\n\nOn Sep 9, 2015, at 2:11 AM, maxogden notifications@github.com wrote:\nSince both of those cases are currently optional, why not ship it without\nthose and have instructions to install them separately? In my opinion\ngetting of the confusing ux of optionalDependencies is more important (and\neasier to fix here than in npm).\nOn Tuesday, September 8, 2015, Arnout Kazemier notifications@github.com\nwrote:\n\n@maxogden https://github.com/maxogden The 2 binary addons are there for\n2 different reasons:\n1. the buffer utils includes performance enhancement for buffer\n   operations and websocket masking.\n2. the rfc specification requires UTF8 validation of messages to\n   ensure that nothing bad or broken can be send over the connection, this\n   utf-8 validation could not be done in JavaScript and needed to be written\n   as binary addon. If this is removed the module will no longer be RFC\n   compliant.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/websockets/ws/issues/577#issuecomment-138732813.\n\n\nSent from my phone\n\u2014\nReply to this email directly or view it on GitHub.\n. The new keyword is still required if you want to run the same code in browsers. So I cannot merge this.\n. Yes, but people still use this module to provide WebSocket constructor in Node so the code you write is compatible with browser & node. The WebSocket constructor in the browser still requires the new keyword so keeping it is safer than removing it.\n. Bug socket.io about updating their dependencies. Also, it's not a build failure it's an optional dependency that fails to build, the install is still correct.\n. I'll rather just completely deprecate the client aspect of this and have people do:\n\nvar WS = global.WebSocket || require('ws')\n. Closing this as in the 1.0 the client code has been removed from this project.\n. At this point we can't really change the name because there are already so many projects depending on it and articles written about it especially if we take the poor support module renaming in npm which is effectively creating a new package and hoping that it will be picked up.\nSo yeah, it's kinda hard name to find but not much we can do about it -- unless you have suggestions.\n. Closing this as in the 1.0 the client code has been removed from this project.\n. Thanks for your contribution, it will end up in the new minor release.\n. It's using an out of date dependency, please use the latest ws instead and all your issues will be solved.\n. PR will be adressed this week. Sorry for the hold up. \n. Closing this as in the 1.0 the client code has been removed from this project.\n. TY\n. TY \n. This convention is inline with the browser implementation:\njs\nconsole.log(WebSocket.CONNECTING) // 0\n. > Please fix x_x\nPlease make pull request.\n. Adressing this tomorrow \nArnout Kazemier\n\nOn Dec 20, 2015, at 5:43 PM, Guillermo Rauch notifications@github.com wrote:\nTested & works perfectly. No more\nnode: ../src/node_zlib.cc:132: static v8::Handlev8::Value node::ZCtx::Write(const v8::Arguments&): Assertion `!ctx->pending_close_ && \"close is pending\"' failed.\nAborted (core dumped)\n\u2014\nReply to this email directly or view it on GitHub.\n. Release of 1.0 goes out tomorrow. No 0.8.2 -- if you have issues, turning off deflate by default\n\nArnout Kazemier\n\nOn Dec 22, 2015, at 6:33 PM, Damien Arrachequesne notifications@github.com wrote:\nHi! @3rd-Eden could you please release this as version 0.8.2 before the big 1.0?  (the current 0.8.1 is not really usable due to that issue).\n\u2014\nReply to this email directly or view it on GitHub.\n. Is this still an issue in the latest release?\n. Isn't the sender instance create per connection and therefor generating a new masked frame for each client?\n. I guess thats a bug then.\n\nArnout Kazemier\n\nOn Dec 17, 2015, at 4:12 PM, \u0418\u0432\u0430\u043d \u041a notifications@github.com wrote:\nPer connection, it generates a new masking key. The RFC states that it should create a new masking key per frame, not connection.\n\u2014\nReply to this email directly or view it on GitHub.\n. It looks to me at a first glance.\n. @SEAPUNK Could you add a test for this so it's not broken in future updates?\n. It already exists on the received client object/connection; https://github.com/websockets/ws/blob/master/lib/WebSocket.js#L534\n. Which is also, already documented; https://github.com/websockets/ws/blob/master/doc/ws.md#websocketupgradereq\n. :+1: \n. Try installing the master branch, npm install websockets/ws -- this will be released today as 1.0.0 which has all the binary addons removed.\n. Released 1.0.0 -- should fix this issue\n. No, it doesn't work because I removed the client code. See release notes. \n. Thanks for your contribution <3\n. Yes, No, Maybe.\n\nI'm considering doing it after the whole code base has received scrub of old legacy code and a rewrite to ES6.\n. Thanks.\n. Thanks for your contribution.\n. Thanks for your contribution, this will end up in the minor release.\n. It's a devDependency as there is no need to depend on it directly as all require statements that reference the said module are in a try/catch statement with the correct fallback code.\nAs for browserify, there is no client code in this library. Exclude it from your browserify build.\n. No, they are dev dependencies, nothing in this library depends directly on it. The error is somewhere in your own code or the library that consumes this library.\nArnout Kazemier\n\nOn Jan 8, 2016, at 4:02 PM, Ludwig Magnusson notifications@github.com wrote:\nMy app has this library as a child dependency. I can currently not start it since I get errors saying that module bufferutil and utf-8-validate cannot be found. The errors originate from this module I notice that the two dependencies are listed as devDependencies. Could they be included as regular dependencies?\n\u2014\nReply to this email directly or view it on GitHub.\n. @TheLudd It's really a bug in browserify for not understanding conditional imports. \n\nAnyways, i'm going to close this bug for now. If there are concrete fixes that I can do in this module to make bundling easier, feel free to give me a poke.\n. This is a node client, not a front-end library.. Yes. Sorry, not going to bundle any sort of browser code here. Build systems should learn how to ignore optional dependencies instead of forcing packages to become compatible the build systems.\n. I honestly don't know why you are getting this error but it's in no way related to ws. The fs is a core module of node so if that is missing there is something seriously wrong with either your installation or how you are using the code. \n. @alexhultman You are what we call in the Netherlands a \"mieren neuker\". Who gives a rats ass if we used the word fastest. At that time that this library was created it was indeed the fastest. \n. One minor comment, but LGTM otherwise.\n. Thanks <3!\n. Does it continously crash or just randomly?\n. It makes no sense to merge this if starts breaking test suite for no reason, while the current test suite and ports work just fine.\n. Fixed in master.\n. This does not belong in a core library like ws, there are 1000's of ways to implement broadcasting and I don't want to force this implementation or any other upon users. The README already includes a simple broadcasting example as well.\n. You do not. It's done for you. https://github.com/websockets/ws/blob/master/lib/WebSocketServer.js#L266-L270\n. Please pull request :+1: \n. @hassanila97 because we have private life as well.\n. Thanks for your contribution!\n. Could you add a test for this?\n. I was just thinking of a test that just confirms that headers are send before the nonce. But I'm just going to merge this in as I want it in the next release. \n. Thanks for your contribution.\n. LGTM. Thanks a lot for your contribution.\n. @lpinca Why would it make it fail though?\n. Thanks for your contribution.\n. Thanks for your contribution. I'll make a new minor release with this included as this could break code user code who do not expect both events to be emitted.\n. I'm going to close this topic, bashing each other libraries solves nothing in an Open Source environment. We're all working on a common goal here and that is to provide software that we've written or contributed to for others to consume freely.  I agree with @LordMajestros statement and would like to close this topic with a quote from Dan Abramov:\n\nEvery time you diss a competing library, the invisible cost is all the future collaboration that doesn\u2019t happen.\n\n\ud83c\udfa4 \n. They are devDependencies because they are optional binary dependencies. Adding them as optionalDependencies didn't work because npm still cuased the installation to fail when it failed to compile. \nYou should completely ignore this library in your webpack build in order to make it work. There's no client side logic here that can be bundled anyways.\n. TY. \n. I agree with @Sonicmaster13 \n. https://github.com/websockets/ws/blob/master/lib/WebSocket.js#L402-L484\nIt's been in this module for ages already. \n. Might make more sense to dump the options module completely.\n. As for the var self = this -- We're changing to fat arrow syntax so that should be resolved in master.\n. Looks sane to me, thanks for the contribution.\n. Nope, sorry can't do. \nWe cannot depend on buffer util and utf-u validation directly because there environments where binary addons fail to compile causing this module's installation to fail while it would still work as there are JS fallbacks. \nThat's why there's the decision to have users install bufferutil and utf-8 validation manually when they want to have binary addons for their own project.\n. That's indeed true, but if the compilation of the binary addon fails, the whole module will not be installed. So even the fallback code will be not be installed. Thats why it's bundled in ws instead.\n. Thakns for your contribution.\n. Thanks for your contribution, but i'm pretty sure none of the files will validate lol :%\n. Thanks for the correction.\n. +1 on this, Node 0.12 is failing but in all honesty, i don't even want to support that anymore. So i'm gonna nuke it from travis.\n. Thanks for the correction.\n. @JacksonTian I've added you to the owners team that makes it easier to contribute in the future :)\n. Of course deflate is going be slower, it's an extra operation per message that you send. It's a gzip operation so it will be CPU heavy depending on the amount messages that you send. \n. I'm not censoring benchmarks, i'm saying that deflate is of course going to be slower that one without it because of the added CPU overhead if that is not the case, then it's bug.. And you don't have to be dick and start calling people out. This is open source and free software. Don't like? Don't use it. \n. I closed this topic, if you're ready to have normal and civil conversation about this, feel free to create a new topic.\n. I've updated the description.\n\n. Do you have steps to reproduce?\n\nOn Jun 29, 2016, at 1:06 PM, AlexeyLapshin notifications@github.com wrote:\n`buffer.js:791\nconst buffer = this.subarray(start, end);\n^\nRangeError: Maximum call stack size exceeded\nat new Uint8Array (native)\nat Buffer.subarray (native)\nat Buffer.slice (buffer.js:791:23)\nat allocate (buffer.js:186:23)\nat Function.Buffer.allocUnsafe (buffer.js:152:10)\nat new Buffer (buffer.js:96:19)\n`\nv5.12.0\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Your installing an out of date version, update to latest.  \n\nOn Saturday, June 25, 2016 at 3:21 PM, Mehmet Kose wrote:\n\nubuntu 14.04\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub (https://github.com/websockets/ws/issues/763), or mute the thread (https://github.com/notifications/unsubscribe/AABtpwh6c_9i_Sr5uX5jHsjKtijbae_sks5qPStZgaJpZM4I-V-n).\n. Why would you need to change it?\n. Why is it too short, what are you seeing as a result of this that made you want to change it?\nOn Jun 29, 2016, at 3:57 AM, Hisune notifications@github.com wrote:\nBecause I think 30 sec is too short.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. No clue what it was or what commit.\n\nOn Dec 28, 2016, 6:08 PM +0100, Joe Grund notifications@github.com, wrote:\n\nAny update on this? This is many commits behind master now.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub (https://github.com/websockets/ws/issues/768#issuecomment-269507326), or mute the thread (https://github.com/notifications/unsubscribe-auth/AABtp1Ig1vb0qALyYsjY999IABuo61p7ks5rMpeEgaJpZM4JAhTM).\n\n. Lol oops, was a vulnerability that needed silent patching to prevent DDOS attacks. Hence it was not documented for a while as we needed people to move to the latest patch release. It should eventually be added the changelog file now that a significant time has passed.\nOn Dec 28, 2016, 6:13 PM +0100, Samuel Reed notifications@github.com, wrote:\n\nPlease see the link above @3rd-Eden (https://github.com/3rd-Eden), the commit was yours.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub (https://github.com/websockets/ws/issues/768#issuecomment-269508056), or mute the thread (https://github.com/notifications/unsubscribe-auth/AABtp1lg284X066mAFSOJNnO3ivC9zLUks5rMpi8gaJpZM4JAhTM).\n\n. Go for it, the more ES6 we can use the easier it will be to maintain.\n. Thanks for your contribution.\n. Thanks for your contribution <3\n. That's not a WebSocket request. \n. Was about to point out that now that we're using class and other ES6 features in master we might as well add this. \n. Once it's rebased id say it's clear for merging.\n. As for the deletion, people can already do that in the current way it's setup as well. Just clients.length = 0 and everything is broken. I'd say we have some trust in our users and they know what they are doing when they enable client tracking as it's disabled by default. \n. LGTM.\n. +1 and added as contributor \ud83d\udc83 \n. @8alery could you include a test?\n. I am looking for additional maintainers as I can't contribute as much as I've hoped due to health issues. But its not abandoned.\n\nOn Sep 14, 2016, at 9:38 PM, Joshua Wise notifications@github.com wrote:\nThe last commit was on July 28th. The last time the author posted replied to an issue or pull request was July 29th.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. As for the caching, we're not allowed to cache masks because they should be unique each time as far as i'm concerned. As for the sync generation. I would prefer that is done async to prevent event loop blocking when a lot of messages are being send.\n. Once it's rebased, feel free to merge.\n. TY\n. I'm +1 on these changes. The more code we can re-use from external parties the easier it will be to maintain the module. Once conflicts are resolved i'd say there's a green light for merging this.\n. I'm neutral on this change. \n. +1 ty\n. +1 & done. \n. @lpinca And so are you.\n. Ty <3\n. Nice <3\n. Agreed with @lpinca - Typings should just stay in that repo where there actually authors who want to maintain it. Neither me, @lpinca or anyone of the admin is using it our selfs so there wouldn't be really a need from our side to maintain it.. +1. People had long enough to complain ;-)\n. @lpinca Sorry, I thought I already pressed the merge button. \n. nvm, all those other functions are already wrapping all socket calls in try { } catch () {}\n. @lpinca Yeah, thats why I didn't want to merge this yet. I knew you had it working against the current code base. \n. Things are breaking :9\n. @lpinca Yeah, I guess it complains when coverage gets reduced somehow.\n. Well, the statements, branches and lines have less coverage in this branch. \n. But what ever, it's not that important. \n. > I looked here https://github.com/unshiftio/ultron/blob/master/index.js and it does nothing special.\n\nBest compliment a project can get imho. Code that does looks so simple, yet does amazingly useful stuff. :D\n. LGTM. Much cleaner than before <3. People should just use the default API's. Our current master is already breaking a shit ton of things so we might as well nuke this to pieces as well. +1 Didn't even know that this existed =/. tsk tsk, shame on you @lpinca for writing better code ;-). These are optional binary dependencies and should be installed by users them selfs if they want to them or not as they can cause the installation to fail if you do not have the correct tool chain setup. . +1, 3 is about the max amount of arguments we should allow though.. Looks sane to me.. +1. Agreed.. Go for it.\nOn Jan 30, 2017, 10:32 AM +0100, Luigi Pinca notifications@github.com, wrote:\n\nThe first beta version has been released 20 days ago. There have been no bug reports so I assume this version is not totally broken, unless the beta has not been tested at all.\nI would like to release version 2.0.0 today. @websockets/admin (https://github.com/orgs/websockets/teams/admin) what do you think? Are you ok with that?\n\u2014\nYou are receiving this because you are on a team that was mentioned.\nReply to this email directly, view it on GitHub (https://github.com/websockets/ws/issues/981), or mute the thread (https://github.com/notifications/unsubscribe-auth/AABtpzfOi4nbyv0gPRImcE_5kWp2OvqXks5rXa40gaJpZM4LxMKc).\n\n. For the simple reason that binary module don't work everywhere. Adding it as dependency could cause the whole installation of the project fail. It's an optional dependency. But even adding it as optional dependency, if the compilation fails the whole installed dies. So the only solution is to have users install it manually if they want to use the binary addons. . Is it slower than Object.prototype.toString.call(item)?. And as far as I could see there's only 1, which is in sender.. Here's another example; I'm using the React Context API to share the connection between all components: \nhttps://github.com/DestinyTheGame/anubis/blob/master/components/websocket/index.js. What you are looking for is https://github.com/primus/primus which adds all your requested functionality on top of websockets and any other realtime framework. . LGTM.. Can't we just do browser: falseinstead? Because we don't have browser files.. LGTM'd. Thanks for your contribution.. +1. Works as intended, it's ES6 syntax. . ```js\n node                                                                                                                                                                              ~/Projects/ux/ux-charts 1 \u21b5\n\nconsole.log(process.versions);\n{ http_parser: '2.7.0',\n  node: '7.5.0',\n  v8: '5.4.500.48',\n  uv: '1.10.2',\n  zlib: '1.2.8',\n  ares: '1.10.1-DEV',\n  modules: '51',\n  openssl: '1.0.2k',\n  icu: '58.2',\n  unicode: '9.0',\n  cldr: '30.0.3',\n  tz: '2016j' }\nundefined\nconst server = 'foo';\nundefined\nconst example = { server };\nundefined\nconsole.log(example);\n{ server: 'foo' }\nundefined\n```\n\nNode 7.5 repl output.. I doubt you can because it doesn't run node on the device. But I never tried it. . I'm down for it.. This is a major breaking change tho.. +1 . +1 for the sake of API consistency. . Sending JSON would make no sense as it would not be decoded automatically on a WebSocket client.. Didn't I already +1 and merge these ._.?. We might want to check that we're not breaking any \"major\" framework that integrates with us. (Engine.io and Primus) . > This is consistent with the browser behavior where an error is thrown if the URL is not a string.\nI have no strong opinions though.\nThis is no longer the case. Browsers, or at least chrome, supports this.. <3! Thanks for taking the time to contribute <3. Is there any way you could add a test for this?. If the origin of the problem comes from node, it would make sense to fix it there. But i'm not against landing a build-in queue in the mean time. . I agree, found issues in some of my other projects where I upgraded to latest mocha were timers were never cleaned up correctly. If there is nothing more alive in the process, it should just exit automatically. If it doesn't do that we're leaking somewhere. . I really don't want to start endorse a single \"blessed\" module here. There are so many edge cases that you need to consider in the browser file nearly all that are available right now have their own flaws. \nE.g. assuming that global exists or that this is the absolute global. The fact difference in constructor arguments, we require 3 while WebSocket supports 2. So you end up writing your own Constructor function. Which then needs to inherit from WebSocket. And then you realize that in addition to inheriting the prototype you also need to inherit the static properties of WebSocket. The list of potential incompatibilities here is endless. \nSource: https://github.com/websockets/ws/blob/695b0d1fea264a7b364344133044ca519ea0c57c/lib/browser.js\nAnd an ever growing list of issues in our github tracker about the browser file instead of actual bugs with this library.\n. We should probably advertise multiple options, instead of single one. . But I'm indifferent about merging this, so not a +1 but also no -1. . I simply do not know enough of Node.js net code internal to make a comment that will be remotely useful here. \nThe performance loss is acceptable as we finally handle back pressure correctly. We can see if we can performance back in different ways. . @lpinca I agree, I don't think those errors are usefull because it just means that the connection got closed in some way. . +1 kill it with fire.. yeah, sorry, my internet decided to shit it self today :/. I'm fine with this but it might be a major release as there is a chance of breaking people's code if they do a weird fallback like:\njs\nvar WS = require('ws') || WebSocket;\n. async-limiter is not part of ws's dependencies. Something in your node_modules is messed up. I suggest removing your node_modules folder and re-install all your dependencies to see if that resolves your issue. If not, post it in the npm issue tracker as @lpinca suggested. Feel free to make PR with a documentation improvement.. They are handled in order, in sync, single threaded.. I agree with that sentiment. If we start supporting Promises, we should go through the effort of making everything async await compatible.. Correct. It was never emited on the server instance, but it was on the client. . It's missing a } btw.\n. I'm worried that keeping around these references will increase the likelyhood of memory leaks. And a full request/response object is quite heavy\n. Array.isArray() is prefered here over instanceof checks\n. It should be index.js to make sure that people are searching for index binaries instead.\n. Why not check if this.clients is set instead of checking for the options?\n. The only change i'd make here is maybe move the try/catch to the inside of the loop so if one client fails to terminate we still try to kill the rest of them.\n. But doesn't the underlaying node code could be throwing errors.\n. <3\n. @lpinca Now that node 6 is the new LTS, maybe we should use that our minimum which also allows us to use default params.. @lpinca ok, we'll wait another week. Or until node 4 LTS runs out completely.. Do we want to set the cleanupCallback to null here as well? . Not related to this PR, but we need start doing a cleaner way of handling this. Right now valid errors might get swallowed without us knowning. Maybe something like diagnostics/debug would be more useful here so we can at least still log when these errors get swallowed. . Well it makes sense, so just keep it.. closed before the connection is established is a good one as well.. FML, I've been writing to much ES6.. Node 4 doesn't have the URL instance either, so I've opted for adding in some horrible if statements in the test suite :/. ",
    "aslakhellesoy": "I like that idea. This is my understanding of what you are saying:\n- An on API which is simpler to use, more node-idiomatic, but not W3C compatible.\n- An addEventListener/onmessage API that is W3C compatible.\n. @3rd-Eden I agree that the W3C API wrapping messages in an event object is a little cumbersome, but it is the standard, and making this library follow it makes it easier to write portable code.\nI'm not a big fan of the onmessage API, because it doesn't allow multiple listeners, so having a addEventListener function that behaves like W3C WebSockets would be great. Node folks wouldn't use it anyway, they'd just use on.\nIIRC, older node versions aliased on to addEventListener, but this is not the case now, so the APIs wouldn't conflict.\n. Correction - Node's on is aliased to addListener. In any case - no risk of conflicts.\nhttp://nodejs.org/docs/latest/api/events.html#emitter.on\n. ",
    "ikhattab": "So should we remove onmessage from documntation also https://github.com/einaros/ws/blob/master/doc/ws.md#websocketonmessage ?\n. @3rd-Eden oops sorry, my mistake. \n. ",
    "cmgit": "Looks like it's working! Thanks!\n. ",
    "physiii": "Can you link to the test case you are referring to?\nI need to launch a server on the same port with different paths. I don't want to use a proxy for this.. ",
    "thomasfr": "Thanks. Works. Haven't seen this.\n. ",
    "samccone": "node v v0.6.11\nosx 10.7.3\nthis is the file structure that i have ... so no build folder ... only a Release folder ....\nwithin it there is bufferutil.node \nhttp://i.imgur.com/zq8Cx.png\n. here is the build stack\nnode-waf configure build\nChecking for program g++ or c++          : /usr/bin/g++ \nChecking for program cpp                 : /usr/bin/cpp \nChecking for program ar                  : /usr/bin/ar \nChecking for program ranlib              : /usr/bin/ranlib \nChecking for g++                         : ok\nChecking for node path                   : not found \nChecking for node prefix                 : ok /usr/local \n'configure' finished successfully (0.054s)\nWaf: Entering directory /......./node_modules/ws/build'\n[1/4] cxx: src/validation.cc -> build/Release/src/validation_1.o\n[2/4] cxx: src/bufferutil.cc -> build/Release/src/bufferutil_2.o\n[3/4] cxx_link: build/Release/src/validation_1.o -> build/Release/validation.node\n[4/4] cxx_link: build/Release/src/bufferutil_2.o -> build/Release/bufferutil.node\nWaf: Leaving directory/....../node_modules/ws/build'\n'build' finished successfully (0.519s)\nnpm http GET https://registry.npmjs.org/commander/0.5.0\nnpm http GET https://registry.npmjs.org/options\nnpm http 304 https://registry.npmjs.org/options\nnpm http 304 https://registry.npmjs.org/commander/0.5.0\nws@0.4.6 ./node_modules/ws \n. ok great thanks man\n. beast mode achieved :)\n. thanks einaros\n. ",
    "youurayy": "I was just browsing NPM and noticed this small library: https://github.com/siddMahen/hashify\nBasically the Client should not need an extra field id, if its V8 hash was used. But I'm not sure about the performance.\nEDIT: ah, disregard that - the hash is not guaranteed to be unique.\n. If you use Express or Connect, check this package for seamless Flash shim integration (along with the policy server):\nhttps://github.com/ypocat/ws-flash-client\nIt's the same code as web-socket-js (btw. socket.io uses it too for the Flash transport), but repackaged for Express/Connect.\nIf you don't use Express or Connect, you may just use the policyfile one-liner to achieve this:\nrequire('policyfile').createServer().listen(prod ? 843 : 10843[, yourHttpServerIfAny]);\nI would love if ws stayed clean and only focused on the core WebSocket protocol support.\n. @einaros as for writing useful info into the ws README.md - I think for many people who use Express, it would be beneficial to include a link to ws-rpc, which contains a pretty thorough example on how to get ws running with Express with the same (relevant) functionality as socket.io.\n@kanaka I don't think many people use naked Node's http server these days, but the ws-rpc is possible to be used there as well, as is ws-flash-client, but for the flash client I need to update the readme on how to use it without Express.\n. Thanks:) My current workaround works, but it's dodgy, as workarounds are.\nPlease consider adding a link to https://github.com/ypocat/ws-rpc to README. :)\n. Interesting - then I analyzed the reason wrong - but I'm sure I wasn't getting the close event while I was listening on the WebSocket object directly (I'm not listening on the WebSocket._socket object at all).\nYou can have a look if the close event is emitted in the Node client in the case when you kill the server - for me it wasn't.\n. ",
    "kanaka": "@ypocat, yeah, that's perfect (especially after discovering I can force inline only by passing -1 for the port.\n@einaros, you might consider mentioning the option suggested by @ypocat in the README so that people looking to use web-socket-js with einaros/ws will have clear direction.\n. That actually reminds me, I think it would also be helpful to show an example of using ws in combination with an http server. So perhaps you could add another example to the README, something like this:\nHere is an example of combining ws with an http server so that both listen on the same port. In addition the 'policyflie' module is used to answer inline Flash policy requests to support browser clients using the web-socket-js polyfill.\nhttpServer = http.createServer(function (req, res) {\n    console.log(\"got http request\");\n});\nhttpServer.listen(8080, function() {\n    wsServer = new WebSocketServer({server: httpServer});\n    wsServer.on('connection', function (client) {\n        console.log(\"new WebSocket client\");\n    });\n});\n// Attach Flash policyfile answer service\npolicyfile.createServer().listen(-1, httpServer);\n. Probably no longer relevant if you have reworked the protocol handling but the current HyBi code for protocol handling is broken:\n--- WebSocketServer.js.orig     2012-02-23 13:38:44.000000000 -0600\n+++ WebSocketServer.js  2012-02-23 13:39:24.000000000 -0600\n@@ -199,7 +199,7 @@ function handleHybiUpgrade(req, socket,\n     , 'Sec-WebSocket-Accept: ' + key\n   ];\n   if (typeof protocol != 'undefined') {\n-    headers['Sec-WebSocket-Protocol'] = protocol;\n+    headers.push('Sec-WebSocket-Protocol: ' + protocol);\n   }\n   try {\n     socket.write(headers.concat('', '').join('\\r\\n'));\n. @einaros: your week has turned into 7 months. Any update? Without sub-protocol handling the server is not compliant with the standard.\nCan you possibly publish your dev work to a branch even if it's not working yet, pretty please?\n. I apologize if I sounded curt, it certainly wasn't intended that way. I appreciate the good work you've done. \nAnd to clarify, by mentioned the spec compliance I was trying to indicate that this is a bug, not just a \"improvement\" as currently tagged, i.e. the module can't work with any client that relies on sub-protocol selection.\n. @einaros, I just sent a pull request that adds a callback/handler for the application to select a subprotocol. It's similar in form to the verifyClient callback/handler: https://github.com/einaros/ws/pull/126 Also, if no handler is specified then it selects the first subprotocol item by default (in compliance with the spec).\nI realize that you have a pending refactor that adds subprotocol and extension handling, but perhaps if that's not imminent you might consider pulling this in the meantime. Thanks!\n. @einaros, bump.\nYou pulled in this change https://github.com/einaros/ws/pull/126 but then reverted it later. If the mentioned big refactor isn't imminent would you consider accepting an updated version of that pull in the current code-base?\n. @einaros, bump.\n. @einaros bump. I updated the changeset and added several tests. Anything else needed here?\n. I can confirm that our server uses more and more memory over time and eventually crashes when the memory use gets high. The more connections and data transferred the quicker the crash happens.\nnode 0.8.9\nws 0.4.21\nAWS t1.micro running Ubuntu 12.04.1\n. @einaros, no socket.io, it's a very simple server that just uses the ws module directly:\nhttps://github.com/n01se/1110/blob/6c90e0efc3a4afeb099f79d18d471a5936de1d3e/server.js\n. @einaros as @sonnyp notes, can you perhaps merge this patch so that sub-protocol handling is slightly less broken and then merge the more complete fix/dev work when it's ready? Thanks!\n. If the browser crashes, you should get a close event because the OS will see that the app holding the socket is gone and it will notify the remote end that the socket is closed.\nHowever, if the system crashes or the network connection suddenly goes away, the remote end may not get notified right away. One way to force a close is for periodic \"ping\" messages to be sent. This will cause the condition to be detected and a close message will be fired much sooner.\n. Thanks! Any chance of a minor version bump and push to npmjs.org?\n. I don't think there is much value in allowing port 0. Although a TCP packet can technically be formed to use port 0, IANA reserves port 0: https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt\nIn all cases I am aware of (except manually creating raw packets), using port 0 is either an error or it is used to indicate that any other free port should be selected (effectively random). For the server I'm not sure there is much value in having the server pick a free port on behalf of the application.\n. ",
    "richardfburton": "httpServer = http.createServer(function (req, res) {\n    console.log(\"got http request\");\n});\nhttpServer.listen(8080, function() {\n    wsServer = new WebSocketServer({server: httpServer});\n    wsServer.on('connection', function (client) {\n        console.log(\"new WebSocket client\");\n    });\n});\n// Attach Flash policyfile answer service\npolicyfile.createServer().listen(-1, httpServer);\nDoes not work on same port\n. ",
    "dhruvbird": "Is this on current master/release? If so, the docs don't seem to be up to date. Is there an example to show how the websocket server can handle messages of only a certain subprotocol type?\n. @kanaka Please be kind.\n. ",
    "danielwaterworth": "@einaros, No, my code doesn't call either ping or pong. (Obviously the server that I'm connecting to does.)\n. I think the connection was closed on my side.\n. ",
    "ghost": "I'm on node v0.6.11\n. Oke, thnx for the fast response einaros\n. Same issue here Windows 7 64-bit and Node.js version 0.8.9 / NPM version 1.1.6.1\n0 info it worked if it ends with ok\n1 verbose cli [ 'C:\\Program Files\\nodejs\\node.exe',\n1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',\n1 verbose cli   'install',\n1 verbose cli   'ws' ]\n2 info using npm@1.1.61\n3 info using node@v0.8.9\n4 verbose node symlink C:\\Program Files\\nodejs\\node.exe\n5 verbose read json C:\\Program Files (x86)\\VertrigoServ\\www\\node\\package.json\n6 verbose read json C:\\Program Files (x86)\\VertrigoServ\\www\\node\\package.json\n7 verbose cache add [ 'ws', null ]\n8 silly cache add name=undefined spec=\"ws\" args=[\"ws\",null]\n9 verbose parsed url { pathname: 'ws', path: 'ws', href: 'ws' }\n10 silly lockFile 1457b75d-ws ws\n11 verbose lock ws C:\\Users\\John\\AppData\\Roaming\\npm-cache\\1457b75d-ws.lock\n12 silly lockFile 1457b75d-ws ws\n13 verbose addNamed [ 'ws', '' ]\n14 verbose addNamed [ null, '' ]\n15 silly lockFile e88fe629-ws ws@\n16 verbose lock ws@ C:\\Users\\John\\AppData\\Roaming\\npm-cache\\e88fe629-ws.lock\n17 silly addNameRange { name: 'ws', range: '', hasData: false }\n18 verbose url raw ws\n19 verbose url resolving [ 'https://registry.npmjs.org/', './ws' ]\n20 verbose url resolved https://registry.npmjs.org/ws\n21 info trying registry request attempt 1 at 14:47:03\n22 verbose etag \"A1F2TEX12SWPNSPUAXL5ILM0H\"\n23 http GET https://registry.npmjs.org/ws\n24 http 304 https://registry.npmjs.org/ws\n25 silly registry.get cb [ 304,\n25 silly registry.get   { server: 'CouchDB/1.2.0 (Erlang OTP/R15B)',\n25 silly registry.get     etag: '\"A1F2TEX12SWPNSPUAXL5ILM0H\"',\n25 silly registry.get     date: 'Tue, 18 Sep 2012 21:46:56 GMT',\n25 silly registry.get     'content-length': '0' } ]\n26 verbose etag ws from cache\n27 silly addNameRange number 2 { name: 'ws', range: '', hasData: true }\n28 silly addNameRange versions [ 'ws',\n28 silly addNameRange   [ '0.2.6',\n28 silly addNameRange     '0.2.8',\n28 silly addNameRange     '0.2.9',\n28 silly addNameRange     '0.3.0',\n28 silly addNameRange     '0.3.1',\n28 silly addNameRange     '0.3.2',\n28 silly addNameRange     '0.3.3',\n28 silly addNameRange     '0.3.4',\n28 silly addNameRange     '0.3.4-2',\n28 silly addNameRange     '0.3.5',\n28 silly addNameRange     '0.3.5-2',\n28 silly addNameRange     '0.3.5-3',\n28 silly addNameRange     '0.3.5-4',\n28 silly addNameRange     '0.3.6',\n28 silly addNameRange     '0.3.7',\n28 silly addNameRange     '0.3.8',\n28 silly addNameRange     '0.3.9',\n28 silly addNameRange     '0.4.0',\n28 silly addNameRange     '0.4.1',\n28 silly addNameRange     '0.4.2',\n28 silly addNameRange     '0.4.3',\n28 silly addNameRange     '0.4.5',\n28 silly addNameRange     '0.4.6',\n28 silly addNameRange     '0.4.7',\n28 silly addNameRange     '0.4.8',\n28 silly addNameRange     '0.4.9',\n28 silly addNameRange     '0.4.10',\n28 silly addNameRange     '0.4.11',\n28 silly addNameRange     '0.4.12',\n28 silly addNameRange     '0.4.13',\n28 silly addNameRange     '0.4.14',\n28 silly addNameRange     '0.4.15',\n28 silly addNameRange     '0.4.16',\n28 silly addNameRange     '0.4.17',\n28 silly addNameRange     '0.4.18',\n28 silly addNameRange     '0.4.19',\n28 silly addNameRange     '0.4.20',\n28 silly addNameRange     '0.4.21' ] ]\n29 verbose addNamed [ 'ws', '0.4.21' ]\n30 verbose addNamed [ '0.4.21', '0.4.21' ]\n31 silly lockFile 78a691d4-ws-0-4-21 ws@0.4.21\n32 verbose lock ws@0.4.21 C:\\Users\\John\\AppData\\Roaming\\npm-cache\\78a691d4-ws-0-4-21.lock\n33 verbose read json C:\\Users\\John\\AppData\\Roaming\\npm-cache\\ws\\0.4.21\\package\\package.json\n34 silly lockFile 78a691d4-ws-0-4-21 ws@0.4.21\n35 silly lockFile e88fe629-ws ws@\n36 silly resolved [ { author:\n36 silly resolved      { name: 'Einar Otto Stangvik',\n36 silly resolved        email: 'einaros@gmail.com',\n36 silly resolved        url: 'http://2x.io' },\n36 silly resolved     name: 'ws',\n36 silly resolved     description: 'simple to use, blazing fast and thoroughly tested websocket client, server and console for node.js, up-to-date against RFC-6455',\n36 silly resolved     version: '0.4.21',\n36 silly resolved     repository: { type: 'git', url: 'git://github.com/einaros/ws.git' },\n36 silly resolved     bin: { wscat: './bin/wscat' },\n36 silly resolved     scripts: { test: 'make test', install: 'node install.js' },\n36 silly resolved     engines: { node: '>=0.4.0' },\n36 silly resolved     config: { verbose: false },\n36 silly resolved     dependencies: { commander: '~0.6.1', tinycolor: '0.x', options: 'latest' },\n36 silly resolved     devDependencies:\n36 silly resolved      { mocha: '~1.2.1',\n36 silly resolved        should: '0.6.x',\n36 silly resolved        'expect.js': '0.1.x',\n36 silly resolved        benchmark: '0.3.x',\n36 silly resolved        ansi: 'latest' },\n36 silly resolved     readme: '\\n\\n# ws: a node.js websocket library #\\n\\nws is a simple to use websocket implementation, up-to-date against RFC-6455, and probably the fastest WebSocket library for node.js.\\n\\nPasses the quite extensible Autobahn test suite. See http://einaros.github.com/ws for the full reports.\\n\\nComes with a command line utility, wscat, which can either act as a server (--listen), or client (--connect); Use it to debug simple websocket services.\\n\\n## Protocol support ##\\n\\n* Hixie draft 76 (Old and deprecated, but still in use by Safari and Opera. Added to ws version 0.4.2, but server only. Can be disabled by setting the disableHixie option to true.)\\n* HyBi drafts 07-12 (Use the option protocolVersion: 8, or argument -p 8 for wscat)\\n* HyBi drafts 13-17 (Current default, alternatively option protocolVersion: 13, or argument -p 13 for wscat)\\n\\n_See the echo.websocket.org example below for how to use the protocolVersion option.\\n\\n## Usage ##\\n\\n### Installing ###\\n\\nnpm install ws\\n\\n### Sending and receiving text data ###\\n\\njs\\nvar WebSocket = require(\\'ws\\');\\nvar ws = new WebSocket(\\'ws://www.host.com/path\\');\\nws.on(\\'open\\', function() {\\n    ws.send(\\'something\\');\\n});\\nws.on(\\'message\\', function(data, flags) {\\n    // flags.binary will be set if a binary data is received\\n    // flags.masked will be set if the data was masked\\n});\\n\\n\\n### Sending binary data ###\\n\\njs\\nvar WebSocket = require(\\'ws\\');\\nvar ws = new WebSocket(\\'ws://www.host.com/path\\');\\nws.on(\\'open\\', function() {\\n    var array = new Float32Array(5);\\n    for (var i = 0; i < array.length; ++i) array[i] = i / 2;\\n    ws.send(array, {binary: true, mask: true});\\n});\\n\\n\\nSetting mask, as done for the send options above, will cause the data to be masked according to the websocket protocol. The same option applies for text data.\\n\\n### Server example ###\\n\\njs\\nvar WebSocketServer = require(\\'ws\\').Server\\n  , wss = new WebSocketServer({port: 8080});\\nwss.on(\\'connection\\', function(ws) {\\n    ws.on(\\'message\\', function(message) {\\n        console.log(\\'received: %s\\', message);\\n    });\\n    ws.send(\\'something\\');\\n});\\n\\n\\n### Error handling best practices ###\\n\\njs\\n// If the WebSocket is closed before the following send is attempted\\nws.send(\\'something\\');\\n\\n// Errors (both immediate and async write errors) can be detected in an optional callback.\\n// The callback is also the only way of being notified that data has actually been sent.\\nws.send(\\'something\\', function(error) {\\n    // if error is null, the send has been completed,\\n    // otherwise the error object will indicate what failed.\\n});\\n\\n// Immediate errors can also be handled with try/catch-blocks, but **note**\\n// that since sends are inherently asynchronous, socket write failures will *not*\\n// be captured when this technique is used.\\ntry {\\n    ws.send(\\'something\\');\\n}\\ncatch (e) {\\n    // handle error\\n}\\n\\n\\n### echo.websocket.org demo ###\\n\\njs\\nvar WebSocket = require(\\'ws\\');\\nvar ws = new WebSocket(\\'ws://echo.websocket.org/\\', {protocolVersion: 8, origin: \\'http://websocket.org\\'});\\nws.on(\\'open\\', function() {\\n    console.log(\\'connected\\');\\n    ws.send(Date.now().toString(), {mask: true});\\n});\\nws.on(\\'close\\', function() {\\n    console.log(\\'disconnected\\');\\n});\\nws.on(\\'message\\', function(data, flags) {\\n    console.log(\\'Roundtrip time: \\' + (Date.now() - parseInt(data)) + \\'ms\\', flags);\\n    setTimeout(function() {\\n        ws.send(Date.now().toString(), {mask: true});\\n    }, 500);\\n});\\n\\n\\n### wscat against echo.websocket.org ###\\n\\n    $ npm install -g ws\\n    $ wscat -c ws://echo.websocket.org -p 8\\n    connected (press CTRL+C to quit)\\n    > hi there\\n    < hi there\\n    > are you a happy parrot?\\n    < are you a happy parrot?\\n\\n### Other examples ###\\n\\nFor a full example with a browser client communicating with a ws server, see the examples folder.\\n\\nNote that the usage together with Express 3.0 is quite different from Express 2.x. The difference is expressed in the two different serverstats-examples.\\n\\nOtherwise, see the test cases.\\n\\n### Running the tests ###\\n\\nmake test\\n\\n## API Docs ##\\n\\nSee the doc/ directory for Node.js-like docs for the ws classes.\\n\\n## License ##\\n\\n(The MIT License)\\n\\nCopyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\'Software\\'), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be\\nincluded in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\'AS IS\\', WITHOUT WARRANTY OF ANY KIND,\\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n',\n36 silly resolved     _id: 'ws@0.4.21',\n36 silly resolved     _from: 'ws' } ]\n37 info install ws@0.4.21 into C:\\Program Files (x86)\\VertrigoServ\\www\\node\n38 info installOne ws@0.4.21\n39 verbose from cache C:\\Users\\John\\AppData\\Roaming\\npm-cache\\ws\\0.4.21\\package\\package.json\n40 info C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws unbuild\n41 verbose read json C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\package.json\n42 verbose tar unpack C:\\Users\\John\\AppData\\Roaming\\npm-cache\\ws\\0.4.21\\package.tgz\n43 silly lockFile b943f44c-igoServ-www-node-node-modules-ws C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\n44 verbose lock C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws C:\\Users\\John\\AppData\\Roaming\\npm-cache\\b943f44c-igoServ-www-node-node-modules-ws.lock\n45 silly gunzTarPerm modes [ '755', '644' ]\n46 silly gunzTarPerm extractEntry package.json\n47 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]\n48 silly gunzTarPerm extractEntry .npmignore\n49 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]\n50 silly gunzTarPerm extractEntry README.md\n51 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]\n52 silly gunzTarPerm extractEntry install.js\n53 silly gunzTarPerm modified mode [ 'install.js', 438, 420 ]\n54 silly gunzTarPerm extractEntry index.js\n55 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]\n56 silly gunzTarPerm extractEntry lib/BufferPool.js\n57 silly gunzTarPerm modified mode [ 'lib/BufferPool.js', 438, 420 ]\n58 silly gunzTarPerm extractEntry lib/BufferUtil.js\n59 silly gunzTarPerm modified mode [ 'lib/BufferUtil.js', 438, 420 ]\n60 silly gunzTarPerm extractEntry lib/ErrorCodes.js\n61 silly gunzTarPerm modified mode [ 'lib/ErrorCodes.js', 438, 420 ]\n62 silly gunzTarPerm extractEntry lib/Receiver.hixie.js\n63 silly gunzTarPerm modified mode [ 'lib/Receiver.hixie.js', 438, 420 ]\n64 silly gunzTarPerm extractEntry lib/Receiver.js\n65 silly gunzTarPerm modified mode [ 'lib/Receiver.js', 438, 420 ]\n66 silly gunzTarPerm extractEntry lib/BufferUtil.fallback.js\n67 silly gunzTarPerm modified mode [ 'lib/BufferUtil.fallback.js', 438, 420 ]\n68 silly gunzTarPerm extractEntry lib/Sender.js\n69 silly gunzTarPerm modified mode [ 'lib/Sender.js', 438, 420 ]\n70 silly gunzTarPerm extractEntry lib/Validation.fallback.js\n71 silly gunzTarPerm modified mode [ 'lib/Validation.fallback.js', 438, 420 ]\n72 silly gunzTarPerm extractEntry lib/Validation.js\n73 silly gunzTarPerm modified mode [ 'lib/Validation.js', 438, 420 ]\n74 silly gunzTarPerm extractEntry lib/WebSocket.js\n75 silly gunzTarPerm modified mode [ 'lib/WebSocket.js', 438, 420 ]\n76 silly gunzTarPerm extractEntry lib/WebSocketServer.js\n77 silly gunzTarPerm modified mode [ 'lib/WebSocketServer.js', 438, 420 ]\n78 silly gunzTarPerm extractEntry lib/Sender.hixie.js\n79 silly gunzTarPerm modified mode [ 'lib/Sender.hixie.js', 438, 420 ]\n80 silly gunzTarPerm extractEntry doc/ws.md\n81 silly gunzTarPerm modified mode [ 'doc/ws.md', 438, 420 ]\n82 silly gunzTarPerm extractEntry History.md\n83 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]\n84 silly gunzTarPerm extractEntry .travis.yml\n85 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]\n86 silly gunzTarPerm extractEntry binding.gyp\n87 silly gunzTarPerm modified mode [ 'binding.gyp', 438, 420 ]\n88 silly gunzTarPerm extractEntry examples/fileapi/package.json\n89 silly gunzTarPerm modified mode [ 'examples/fileapi/package.json', 438, 420 ]\n90 silly gunzTarPerm extractEntry examples/fileapi/.npmignore\n91 silly gunzTarPerm modified mode [ 'examples/fileapi/.npmignore', 438, 420 ]\n92 silly gunzTarPerm extractEntry examples/fileapi/server.js\n93 silly gunzTarPerm modified mode [ 'examples/fileapi/server.js', 438, 420 ]\n94 silly gunzTarPerm extractEntry examples/fileapi/public/app.js\n95 silly gunzTarPerm modified mode [ 'examples/fileapi/public/app.js', 438, 420 ]\n96 silly gunzTarPerm extractEntry examples/fileapi/public/uploader.js\n97 silly gunzTarPerm modified mode [ 'examples/fileapi/public/uploader.js', 438, 420 ]\n98 silly gunzTarPerm extractEntry examples/fileapi/public/index.html\n99 silly gunzTarPerm modified mode [ 'examples/fileapi/public/index.html', 438, 420 ]\n100 silly gunzTarPerm extractEntry examples/serverstats/package.json\n101 silly gunzTarPerm modified mode [ 'examples/serverstats/package.json', 438, 420 ]\n102 silly gunzTarPerm extractEntry examples/serverstats/server.js\n103 silly gunzTarPerm modified mode [ 'examples/serverstats/server.js', 438, 420 ]\n104 silly gunzTarPerm extractEntry examples/serverstats/public/index.html\n105 silly gunzTarPerm modified mode [ 'examples/serverstats/public/index.html', 438, 420 ]\n106 silly gunzTarPerm extractEntry examples/serverstats-express_3/package.json\n107 silly gunzTarPerm modified mode [ 'examples/serverstats-express_3/package.json', 438, 420 ]\n108 silly gunzTarPerm extractEntry examples/serverstats-express_3/server.js\n109 silly gunzTarPerm modified mode [ 'examples/serverstats-express_3/server.js', 438, 420 ]\n110 silly gunzTarPerm extractEntry examples/serverstats-express_3/public/index.html\n111 silly gunzTarPerm modified mode [ 'examples/serverstats-express_3/public/index.html', 438, 420 ]\n112 silly gunzTarPerm extractEntry Makefile\n113 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]\n114 silly gunzTarPerm extractEntry bin/wscat\n115 silly gunzTarPerm modified mode [ 'bin/wscat', 438, 420 ]\n116 silly gunzTarPerm extractEntry bench/parser.benchmark.js\n117 silly gunzTarPerm modified mode [ 'bench/parser.benchmark.js', 438, 420 ]\n118 silly gunzTarPerm extractEntry bench/sender.benchmark.js\n119 silly gunzTarPerm modified mode [ 'bench/sender.benchmark.js', 438, 420 ]\n120 silly gunzTarPerm extractEntry bench/speed.js\n121 silly gunzTarPerm modified mode [ 'bench/speed.js', 438, 420 ]\n122 silly gunzTarPerm extractEntry bench/util.js\n123 silly gunzTarPerm modified mode [ 'bench/util.js', 438, 420 ]\n124 silly gunzTarPerm extractEntry src/bufferutil.cc\n125 silly gunzTarPerm modified mode [ 'src/bufferutil.cc', 438, 420 ]\n126 silly gunzTarPerm extractEntry src/validation.cc\n127 silly gunzTarPerm modified mode [ 'src/validation.cc', 438, 420 ]\n128 silly gunzTarPerm extractEntry test/autobahn-server.js\n129 silly gunzTarPerm modified mode [ 'test/autobahn-server.js', 438, 420 ]\n130 silly gunzTarPerm extractEntry test/WebSocket.test.js\n131 silly gunzTarPerm modified mode [ 'test/WebSocket.test.js', 438, 420 ]\n132 silly gunzTarPerm extractEntry test/hybi-common.js\n133 silly gunzTarPerm modified mode [ 'test/hybi-common.js', 438, 420 ]\n134 silly gunzTarPerm extractEntry test/Receiver.hixie.test.js\n135 silly gunzTarPerm modified mode [ 'test/Receiver.hixie.test.js', 438, 420 ]\n136 silly gunzTarPerm extractEntry test/BufferPool.test.js\n137 silly gunzTarPerm modified mode [ 'test/BufferPool.test.js', 438, 420 ]\n138 silly gunzTarPerm extractEntry test/autobahn.js\n139 silly gunzTarPerm modified mode [ 'test/autobahn.js', 438, 420 ]\n140 silly gunzTarPerm extractEntry test/Sender.test.js\n141 silly gunzTarPerm modified mode [ 'test/Sender.test.js', 438, 420 ]\n142 silly gunzTarPerm extractEntry test/testserver.js\n143 silly gunzTarPerm modified mode [ 'test/testserver.js', 438, 420 ]\n144 silly gunzTarPerm extractEntry test/Validation.test.js\n145 silly gunzTarPerm modified mode [ 'test/Validation.test.js', 438, 420 ]\n146 silly gunzTarPerm extractEntry test/WebSocket.integration.js\n147 silly gunzTarPerm modified mode [ 'test/WebSocket.integration.js', 438, 420 ]\n148 silly gunzTarPerm extractEntry test/Receiver.test.js\n149 silly gunzTarPerm modified mode [ 'test/Receiver.test.js', 438, 420 ]\n150 silly gunzTarPerm extractEntry test/WebSocketServer.test.js\n151 silly gunzTarPerm modified mode [ 'test/WebSocketServer.test.js', 438, 420 ]\n152 silly gunzTarPerm extractEntry test/Sender.hixie.test.js\n153 silly gunzTarPerm modified mode [ 'test/Sender.hixie.test.js', 438, 420 ]\n154 silly gunzTarPerm extractEntry test/fixtures/certificate.pem\n155 silly gunzTarPerm modified mode [ 'test/fixtures/certificate.pem', 438, 420 ]\n156 silly gunzTarPerm extractEntry test/fixtures/key.pem\n157 silly gunzTarPerm modified mode [ 'test/fixtures/key.pem', 438, 420 ]\n158 silly gunzTarPerm extractEntry test/fixtures/request.pem\n159 silly gunzTarPerm modified mode [ 'test/fixtures/request.pem', 438, 420 ]\n160 silly gunzTarPerm extractEntry test/fixtures/textfile\n161 silly gunzTarPerm modified mode [ 'test/fixtures/textfile', 438, 420 ]\n162 verbose read json C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\package.json\n163 silly lockFile b943f44c-igoServ-www-node-node-modules-ws C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\n164 info preinstall ws@0.4.21\n165 verbose from cache C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\package.json\n166 verbose readDependencies using package.json deps\n167 verbose from cache C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\package.json\n168 verbose readDependencies using package.json deps\n169 verbose cache add [ 'commander@~0.6.1', null ]\n170 silly cache add name=undefined spec=\"commander@~0.6.1\" args=[\"commander@~0.6.1\",null]\n171 verbose parsed url { pathname: 'commander@~0.6.1',\n171 verbose parsed url   path: 'commander@~0.6.1',\n171 verbose parsed url   href: 'commander@~0.6.1' }\n172 silly cache add name=\"commander\" spec=\"~0.6.1\" args=[\"commander\",\"~0.6.1\"]\n173 verbose parsed url { pathname: '~0.6.1', path: '~0.6.1', href: '~0.6.1' }\n174 verbose addNamed [ 'commander', '~0.6.1' ]\n175 verbose addNamed [ null, '>=0.6.1- <0.7.0-' ]\n176 silly lockFile 5c53196d-commander-0-6-1 commander@~0.6.1\n177 verbose lock commander@~0.6.1 C:\\Users\\John\\AppData\\Roaming\\npm-cache\\5c53196d-commander-0-6-1.lock\n178 verbose cache add [ 'tinycolor@0.x', null ]\n179 silly cache add name=undefined spec=\"tinycolor@0.x\" args=[\"tinycolor@0.x\",null]\n180 verbose parsed url { pathname: 'tinycolor@0.x',\n180 verbose parsed url   path: 'tinycolor@0.x',\n180 verbose parsed url   href: 'tinycolor@0.x' }\n181 silly cache add name=\"tinycolor\" spec=\"0.x\" args=[\"tinycolor\",\"0.x\"]\n182 verbose parsed url { pathname: '0.x', path: '0.x', href: '0.x' }\n183 verbose addNamed [ 'tinycolor', '0.x' ]\n184 verbose addNamed [ null, '>=0.0.0- <1.0.0-' ]\n185 silly lockFile 8f23180d-tinycolor-0-x tinycolor@0.x\n186 verbose lock tinycolor@0.x C:\\Users\\John\\AppData\\Roaming\\npm-cache\\8f23180d-tinycolor-0-x.lock\n187 verbose cache add [ 'options@latest', null ]\n188 silly cache add name=undefined spec=\"options@latest\" args=[\"options@latest\",null]\n189 verbose parsed url { pathname: 'options@latest',\n189 verbose parsed url   path: 'options@latest',\n189 verbose parsed url   href: 'options@latest' }\n190 silly cache add name=\"options\" spec=\"latest\" args=[\"options\",\"latest\"]\n191 verbose parsed url { pathname: 'latest', path: 'latest', href: 'latest' }\n192 verbose addNamed [ 'options', 'latest' ]\n193 verbose addNamed [ null, null ]\n194 silly lockFile 479efb46-options-latest options@latest\n195 verbose lock options@latest C:\\Users\\John\\AppData\\Roaming\\npm-cache\\479efb46-options-latest.lock\n196 silly addNameRange { name: 'commander', range: '>=0.6.1- <0.7.0-', hasData: false }\n197 silly addNameRange { name: 'tinycolor', range: '>=0.0.0- <1.0.0-', hasData: false }\n198 info addNameTag [ 'options', 'latest' ]\n199 verbose url raw options\n200 verbose url resolving [ 'https://registry.npmjs.org/', './options' ]\n201 verbose url resolved https://registry.npmjs.org/options\n202 info trying registry request attempt 1 at 14:47:05\n203 verbose etag \"BLXU96T6CKXKGE3T0M7G8KA6U\"\n204 http GET https://registry.npmjs.org/options\n205 verbose url raw commander\n206 verbose url resolving [ 'https://registry.npmjs.org/', './commander' ]\n207 verbose url resolved https://registry.npmjs.org/commander\n208 info trying registry request attempt 1 at 14:47:05\n209 verbose etag \"771VGJS671K1096DMO1OJGDK0\"\n210 http GET https://registry.npmjs.org/commander\n211 verbose url raw tinycolor\n212 verbose url resolving [ 'https://registry.npmjs.org/', './tinycolor' ]\n213 verbose url resolved https://registry.npmjs.org/tinycolor\n214 info trying registry request attempt 1 at 14:47:05\n215 verbose etag \"60UGA74UDLPK94EFSB2ROCLDE\"\n216 http GET https://registry.npmjs.org/tinycolor\n217 http 304 https://registry.npmjs.org/options\n218 silly registry.get cb [ 304,\n218 silly registry.get   { server: 'CouchDB/1.2.0 (Erlang OTP/R15B)',\n218 silly registry.get     etag: '\"BLXU96T6CKXKGE3T0M7G8KA6U\"',\n218 silly registry.get     date: 'Tue, 18 Sep 2012 21:46:58 GMT',\n218 silly registry.get     'content-length': '0' } ]\n219 verbose etag options from cache\n220 verbose addNamed [ 'options', '0.0.3' ]\n221 verbose addNamed [ '0.0.3', '0.0.3' ]\n222 silly lockFile 82d09623-options-0-0-3 options@0.0.3\n223 verbose lock options@0.0.3 C:\\Users\\John\\AppData\\Roaming\\npm-cache\\82d09623-options-0-0-3.lock\n224 verbose read json C:\\Users\\John\\AppData\\Roaming\\npm-cache\\options\\0.0.3\\package\\package.json\n225 silly lockFile 82d09623-options-0-0-3 options@0.0.3\n226 silly lockFile 479efb46-options-latest options@latest\n227 http 304 https://registry.npmjs.org/tinycolor\n228 silly registry.get cb [ 304,\n228 silly registry.get   { server: 'CouchDB/1.2.0 (Erlang OTP/R15B)',\n228 silly registry.get     etag: '\"60UGA74UDLPK94EFSB2ROCLDE\"',\n228 silly registry.get     date: 'Tue, 18 Sep 2012 21:46:58 GMT',\n228 silly registry.get     'content-length': '0' } ]\n229 verbose etag tinycolor from cache\n230 silly addNameRange number 2 { name: 'tinycolor', range: '>=0.0.0- <1.0.0-', hasData: true }\n231 silly addNameRange versions [ 'tinycolor', [ '0.0.1' ] ]\n232 verbose addNamed [ 'tinycolor', '0.0.1' ]\n233 verbose addNamed [ '0.0.1', '0.0.1' ]\n234 silly lockFile 8ace0652-tinycolor-0-0-1 tinycolor@0.0.1\n235 verbose lock tinycolor@0.0.1 C:\\Users\\John\\AppData\\Roaming\\npm-cache\\8ace0652-tinycolor-0-0-1.lock\n236 verbose read json C:\\Users\\John\\AppData\\Roaming\\npm-cache\\tinycolor\\0.0.1\\package\\package.json\n237 silly lockFile 8ace0652-tinycolor-0-0-1 tinycolor@0.0.1\n238 silly lockFile 8f23180d-tinycolor-0-x tinycolor@0.x\n239 http 304 https://registry.npmjs.org/commander\n240 silly registry.get cb [ 304,\n240 silly registry.get   { server: 'CouchDB/1.2.0 (Erlang OTP/R15B)',\n240 silly registry.get     etag: '\"771VGJS671K1096DMO1OJGDK0\"',\n240 silly registry.get     date: 'Tue, 18 Sep 2012 21:46:58 GMT',\n240 silly registry.get     'content-length': '0' } ]\n241 verbose etag commander from cache\n242 silly addNameRange number 2 { name: 'commander', range: '>=0.6.1- <0.7.0-', hasData: true }\n243 silly addNameRange versions [ 'commander',\n243 silly addNameRange   [ '0.0.1',\n243 silly addNameRange     '0.0.3',\n243 silly addNameRange     '0.0.4',\n243 silly addNameRange     '0.0.5',\n243 silly addNameRange     '0.1.0',\n243 silly addNameRange     '0.2.0',\n243 silly addNameRange     '0.2.1',\n243 silly addNameRange     '0.3.0',\n243 silly addNameRange     '0.3.1',\n243 silly addNameRange     '0.3.2',\n243 silly addNameRange     '0.3.3',\n243 silly addNameRange     '0.4.0',\n243 silly addNameRange     '0.4.1',\n243 silly addNameRange     '0.4.2',\n243 silly addNameRange     '0.4.3',\n243 silly addNameRange     '0.5.0',\n243 silly addNameRange     '0.5.1',\n243 silly addNameRange     '0.6.0',\n243 silly addNameRange     '0.6.1',\n243 silly addNameRange     '0.5.2',\n243 silly addNameRange     '1.0.0',\n243 silly addNameRange     '1.0.1',\n243 silly addNameRange     '1.0.2',\n243 silly addNameRange     '1.0.3',\n243 silly addNameRange     '1.0.4' ] ]\n244 verbose addNamed [ 'commander', '0.6.1' ]\n245 verbose addNamed [ '0.6.1', '0.6.1' ]\n246 silly lockFile fa16a2ce-commander-0-6-1 commander@0.6.1\n247 verbose lock commander@0.6.1 C:\\Users\\John\\AppData\\Roaming\\npm-cache\\fa16a2ce-commander-0-6-1.lock\n248 verbose read json C:\\Users\\John\\AppData\\Roaming\\npm-cache\\commander\\0.6.1\\package\\package.json\n249 silly lockFile fa16a2ce-commander-0-6-1 commander@0.6.1\n250 silly lockFile 5c53196d-commander-0-6-1 commander@~0.6.1\n251 silly resolved [ { author:\n251 silly resolved      { name: 'Einar Otto Stangvik',\n251 silly resolved        email: 'einaros@gmail.com',\n251 silly resolved        url: 'http://2x.io' },\n251 silly resolved     name: 'options',\n251 silly resolved     description: 'A very light-weight in-code option parsers for node.js.',\n251 silly resolved     version: '0.0.3',\n251 silly resolved     repository: { type: 'git', url: 'git://github.com/einaros/options.js.git' },\n251 silly resolved     main: 'lib/options',\n251 silly resolved     scripts: { test: 'make test' },\n251 silly resolved     engines: { node: '>=0.4.0' },\n251 silly resolved     dependencies: {},\n251 silly resolved     devDependencies: { mocha: 'latest', 'expect.js': 'latest' },\n251 silly resolved     readme: '# options.js #\\n\\nA very light-weight in-code option parsers for node.js.\\n',\n251 silly resolved     _id: 'options@0.0.3',\n251 silly resolved     _from: 'options@latest' },\n251 silly resolved   { author:\n251 silly resolved      { name: 'Einar Otto Stangvik',\n251 silly resolved        email: 'einaros@gmail.com',\n251 silly resolved        url: 'http://2x.io' },\n251 silly resolved     name: 'tinycolor',\n251 silly resolved     description: 'a to-the-point color module for node',\n251 silly resolved     version: '0.0.1',\n251 silly resolved     repository: { type: 'git', url: 'git://github.com/einaros/tinycolor.git' },\n251 silly resolved     engines: { node: '>=0.4.0' },\n251 silly resolved     dependencies: {},\n251 silly resolved     devDependencies: {},\n251 silly resolved     main: 'tinycolor',\n251 silly resolved     readme: '# tinycolor #\\n\\nThis is a no-fuzz, barebone, zero muppetry color module for node.js.',\n251 silly resolved     _id: 'tinycolor@0.0.1',\n251 silly resolved     _from: 'tinycolor@0.x' },\n251 silly resolved   { name: 'commander',\n251 silly resolved     version: '0.6.1',\n251 silly resolved     description: 'the complete solution for node.js command-line programs',\n251 silly resolved     keywords: [ 'command', 'option', 'parser', 'prompt', 'stdin' ],\n251 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },\n251 silly resolved     repository:\n251 silly resolved      { type: 'git',\n251 silly resolved        url: 'https://github.com/visionmedia/commander.js.git' },\n251 silly resolved     dependencies: {},\n251 silly resolved     devDependencies: { should: '>= 0.0.1' },\n251 silly resolved     scripts: { test: 'make test' },\n251 silly resolved     main: 'index',\n251 silly resolved     engines: { node: '>= 0.4.x' },\n251 silly resolved     readme: '# Commander.js\\n\\n  The complete solution for node.js command-line interfaces, inspired by Ruby\\'s commander.\\n\\n \\n\\n## Installation\\n\\n    $ npm install commander\\n\\n## Option parsing\\n\\n Options with commander are defined with the .option() method, also serving as documentation for the options. The example below parses args and options from process.argv, leaving remaining args as the program.args array which were not consumed by options.\\n\\njs\\n#!/usr/bin/env node\\n\\n/**\\n * Module dependencies.\\n */\\n\\nvar program = require(\\'commander\\');\\n\\nprogram\\n  .version(\\'0.0.1\\')\\n  .option(\\'-p, --peppers\\', \\'Add peppers\\')\\n  .option(\\'-P, --pineapple\\', \\'Add pineapple\\')\\n  .option(\\'-b, --bbq\\', \\'Add bbq sauce\\')\\n  .option(\\'-c, --cheese [type]\\', \\'Add the specified type of cheese [marble]\\', \\'marble\\')\\n  .parse(process.argv);\\n\\nconsole.log(\\'you ordered a pizza with:\\');\\nif (program.peppers) console.log(\\'  - peppers\\');\\nif (program.pineapple) console.log(\\'  - pineappe\\');\\nif (program.bbq) console.log(\\'  - bbq\\');\\nconsole.log(\\'  - %s cheese\\', program.cheese);\\n\\n\\n Short flags may be passed as a single arg, for example -abc is equivalent to -a -b -c. Multi-word options such as \"--template-engine\" are camel-cased, becoming program.templateEngine etc.\\n\\n## Automated --help\\n\\n The help information is auto-generated based on the information commander already knows about your program, so the following --help info is for free:\\n\\n\\n $ ./examples/pizza --help\\n\\n   Usage: pizza [options]\\n\\n   Options:\\n\\n     -V, --version        output the version number\\n     -p, --peppers        Add peppers\\n     -P, --pineapple      Add pineappe\\n     -b, --bbq            Add bbq sauce\\n     -c, --cheese <type>  Add the specified type of cheese [marble]\\n     -h, --help           output usage information\\n\\n\\n\\n## Coercion\\n\\njs\\nfunction range(val) {\\n  return val.split(\\'..\\').map(Number);\\n}\\n\\nfunction list(val) {\\n  return val.split(\\',\\');\\n}\\n\\nprogram\\n  .version(\\'0.0.1\\')\\n  .usage(\\'[options] <file ...>\\')\\n  .option(\\'-i, --integer <n>\\', \\'An integer argument\\', parseInt)\\n  .option(\\'-f, --float <n>\\', \\'A float argument\\', parseFloat)\\n  .option(\\'-r, --range <a>..<b>\\', \\'A range\\', range)\\n  .option(\\'-l, --list <items>\\', \\'A list\\', list)\\n  .option(\\'-o, --optional [value]\\', \\'An optional value\\')\\n  .parse(process.argv);\\n\\nconsole.log(\\' int: %j\\', program.integer);\\nconsole.log(\\' float: %j\\', program.float);\\nconsole.log(\\' optional: %j\\', program.optional);\\nprogram.range = program.range || [];\\nconsole.log(\\' range: %j..%j\\', program.range[0], program.range[1]);\\nconsole.log(\\' list: %j\\', program.list);\\nconsole.log(\\' args: %j\\', program.args);\\n\\n\\n## Custom help\\n\\n You can display arbitrary -h, --help information\\n by listening for \"--help\". Commander will automatically\\n exit once you are done so that the remainder of your program\\n does not execute causing undesired behaviours, for example\\n in the following executable \"stuff\" will not output when\\n --help is used.\\n\\njs\\n#!/usr/bin/env node\\n\\n/**\\n * Module dependencies.\\n */\\n\\nvar program = require(\\'../\\');\\n\\nfunction list(val) {\\n  return val.split(\\',\\').map(Number);\\n}\\n\\nprogram\\n  .version(\\'0.0.1\\')\\n  .option(\\'-f, --foo\\', \\'enable some foo\\')\\n  .option(\\'-b, --bar\\', \\'enable some bar\\')\\n  .option(\\'-B, --baz\\', \\'enable some baz\\');\\n\\n// must be before .parse() since\\n// node\\'s emit() is immediate\\n\\nprogram.on(\\'--help\\', function(){\\n  console.log(\\'  Examples:\\');\\n  console.log(\\'\\');\\n  console.log(\\'    $ custom-help --help\\');\\n  console.log(\\'    $ custom-help -h\\');\\n  console.log(\\'\\');\\n});\\n\\nprogram.parse(process.argv);\\n\\nconsole.log(\\'stuff\\');\\n\\n\\nyielding the following help output:\\n\\n\\n\\nUsage: custom-help [options]\\n\\nOptions:\\n\\n  -h, --help     output usage information\\n  -V, --version  output the version number\\n  -f, --foo      enable some foo\\n  -b, --bar      enable some bar\\n  -B, --baz      enable some baz\\n\\nExamples:\\n\\n  $ custom-help --help\\n  $ custom-help -h\\n\\n\\n\\n## .prompt(msg, fn)\\n\\n Single-line prompt:\\n\\njs\\nprogram.prompt(\\'name: \\', function(name){\\n  console.log(\\'hi %s\\', name);\\n});\\n\\n\\n Multi-line prompt:\\n\\njs\\nprogram.prompt(\\'description:\\', function(name){\\n  console.log(\\'hi %s\\', name);\\n});\\n\\n\\n Coercion:\\n\\njs\\nprogram.prompt(\\'Age: \\', Number, function(age){\\n  console.log(\\'age: %j\\', age);\\n});\\n\\n\\njs\\nprogram.prompt(\\'Birthdate: \\', Date, function(date){\\n  console.log(\\'date: %s\\', date);\\n});\\n\\n\\n## .password(msg[, mask], fn)\\n\\nPrompt for password without echoing:\\n\\njs\\nprogram.password(\\'Password: \\', function(pass){\\n  console.log(\\'got \"%s\"\\', pass);\\n  process.stdin.destroy();\\n});\\n\\n\\nPrompt for password with mask char \"\":\\n\\njs\\nprogram.password(\\'Password: \\', \\'_\\', function(pass){\\n  console.log(\\'got \"%s\"\\', pass);\\n  process.stdin.destroy();\\n});\\n`\\n\\n## .confirm(msg, fn)\\n\\n Confirm with the given `msg`:\\n\\n`js\\nprogram.confirm(\\'continue? \\', function(ok){\\n  console.log(\\' got %j\\', ok);\\n});\\n`\\n\\n## .choose(list, fn)\\n\\n Let the user choose from a `list`:\\n\\n`js\\nvar list = [\\'tobi\\', \\'loki\\', \\'jane\\', \\'manny\\', \\'luna\\'];\\n\\nconsole.log(\\'Choose the coolest pet:\\');\\nprogram.choose(list, function(i){\\n  console.log(\\'you chose %d \"%s\"\\', i, list[i]);\\n});\\n\\n\\n## Links\\n\\n - API documentation\\n - ascii tables\\n - progress bars\\n - more progress bars\\n - examples\\n\\n## License \\n\\n(The MIT License)\\n\\nCopyright (c) 2011 TJ Holowaychuk <tj@vision-media.ca>\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\'Software\\'), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be\\nincluded in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\'AS IS\\', WITHOUT WARRANTY OF ANY KIND,\\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.',\n251 silly resolved     _id: 'commander@0.6.1',\n251 silly resolved     _from: 'commander@~0.6.1' } ]\n252 info install options@0.0.3 into C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\n253 info install tinycolor@0.0.1 into C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\n254 info install commander@0.6.1 into C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\n255 info installOne options@0.0.3\n256 info installOne tinycolor@0.0.1\n257 info installOne commander@0.6.1\n258 verbose from cache C:\\Users\\John\\AppData\\Roaming\\npm-cache\\options\\0.0.3\\package\\package.json\n259 info C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\options unbuild\n260 verbose read json C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\options\\package.json\n261 verbose from cache C:\\Users\\John\\AppData\\Roaming\\npm-cache\\tinycolor\\0.0.1\\package\\package.json\n262 verbose from cache C:\\Users\\John\\AppData\\Roaming\\npm-cache\\commander\\0.6.1\\package\\package.json\n263 info C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\tinycolor unbuild\n264 verbose read json C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\tinycolor\\package.json\n265 info C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\commander unbuild\n266 verbose read json C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\commander\\package.json\n267 verbose tar unpack C:\\Users\\John\\AppData\\Roaming\\npm-cache\\options\\0.0.3\\package.tgz\n268 silly lockFile 219eb0f1--modules-ws-node-modules-options C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\options\n269 verbose lock C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\options C:\\Users\\John\\AppData\\Roaming\\npm-cache\\219eb0f1--modules-ws-node-modules-options.lock\n270 verbose tar unpack C:\\Users\\John\\AppData\\Roaming\\npm-cache\\tinycolor\\0.0.1\\package.tgz\n271 silly lockFile 454ddaf8-odules-ws-node-modules-tinycolor C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\tinycolor\n272 verbose lock C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\tinycolor C:\\Users\\John\\AppData\\Roaming\\npm-cache\\454ddaf8-odules-ws-node-modules-tinycolor.lock\n273 verbose tar unpack C:\\Users\\John\\AppData\\Roaming\\npm-cache\\commander\\0.6.1\\package.tgz\n274 silly lockFile 1e9513ea-odules-ws-node-modules-commander C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\commander\n275 verbose lock C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\commander C:\\Users\\John\\AppData\\Roaming\\npm-cache\\1e9513ea-odules-ws-node-modules-commander.lock\n276 silly gunzTarPerm modes [ '755', '644' ]\n277 silly gunzTarPerm modes [ '755', '644' ]\n278 silly gunzTarPerm modes [ '755', '644' ]\n279 silly gunzTarPerm extractEntry package.json\n280 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]\n281 silly gunzTarPerm extractEntry package.json\n282 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]\n283 silly gunzTarPerm extractEntry package.json\n284 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]\n285 silly gunzTarPerm extractEntry .npmignore\n286 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]\n287 silly gunzTarPerm extractEntry index.js\n288 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]\n289 silly gunzTarPerm extractEntry .npmignore\n290 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]\n291 silly gunzTarPerm extractEntry README.md\n292 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]\n293 silly gunzTarPerm extractEntry .npmignore\n294 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]\n295 silly gunzTarPerm extractEntry README.md\n296 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]\n297 silly gunzTarPerm extractEntry .travis.yml\n298 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]\n299 silly gunzTarPerm extractEntry History.md\n300 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]\n301 silly gunzTarPerm extractEntry example.js\n302 silly gunzTarPerm modified mode [ 'example.js', 438, 420 ]\n303 silly gunzTarPerm extractEntry tinycolor.js\n304 silly gunzTarPerm modified mode [ 'tinycolor.js', 438, 420 ]\n305 silly gunzTarPerm extractEntry lib/options.js\n306 silly gunzTarPerm modified mode [ 'lib/options.js', 438, 420 ]\n307 silly gunzTarPerm extractEntry Makefile\n308 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]\n309 silly gunzTarPerm extractEntry lib/commander.js\n310 silly gunzTarPerm modified mode [ 'lib/commander.js', 438, 420 ]\n311 silly gunzTarPerm extractEntry Makefile\n312 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]\n313 silly gunzTarPerm extractEntry test/options.test.js\n314 silly gunzTarPerm modified mode [ 'test/options.test.js', 438, 420 ]\n315 silly gunzTarPerm extractEntry test/fixtures/test.conf\n316 silly gunzTarPerm modified mode [ 'test/fixtures/test.conf', 438, 420 ]\n317 silly gunzTarPerm extractEntry Readme.md\n318 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]\n319 verbose read json C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\tinycolor\\package.json\n320 silly lockFile 454ddaf8-odules-ws-node-modules-tinycolor C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\tinycolor\n321 verbose read json C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\options\\package.json\n322 info preinstall tinycolor@0.0.1\n323 verbose from cache C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\tinycolor\\package.json\n324 verbose readDependencies using package.json deps\n325 verbose from cache C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\tinycolor\\package.json\n326 verbose readDependencies using package.json deps\n327 silly resolved []\n328 verbose about to build C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\tinycolor\n329 info build C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\tinycolor\n330 verbose from cache C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\tinycolor\\package.json\n331 verbose linkStuff [ false,\n331 verbose linkStuff   false,\n331 verbose linkStuff   false,\n331 verbose linkStuff   'C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules' ]\n332 info linkStuff tinycolor@0.0.1\n333 verbose linkBins tinycolor@0.0.1\n334 verbose linkMans tinycolor@0.0.1\n335 verbose rebuildBundles tinycolor@0.0.1\n336 info install tinycolor@0.0.1\n337 silly lockFile 219eb0f1--modules-ws-node-modules-options C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\options\n338 info postinstall tinycolor@0.0.1\n339 info preinstall options@0.0.3\n340 verbose from cache C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\options\\package.json\n341 verbose readDependencies using package.json deps\n342 verbose from cache C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\options\\package.json\n343 verbose readDependencies using package.json deps\n344 silly resolved []\n345 verbose about to build C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\options\n346 info build C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\options\n347 verbose from cache C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\options\\package.json\n348 verbose linkStuff [ false,\n348 verbose linkStuff   false,\n348 verbose linkStuff   false,\n348 verbose linkStuff   'C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules' ]\n349 info linkStuff options@0.0.3\n350 verbose linkBins options@0.0.3\n351 verbose linkMans options@0.0.3\n352 verbose rebuildBundles options@0.0.3\n353 info install options@0.0.3\n354 info postinstall options@0.0.3\n355 verbose read json C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\commander\\package.json\n356 silly lockFile 1e9513ea-odules-ws-node-modules-commander C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\commander\n357 info preinstall commander@0.6.1\n358 verbose from cache C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\commander\\package.json\n359 verbose readDependencies using package.json deps\n360 verbose from cache C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\commander\\package.json\n361 verbose readDependencies using package.json deps\n362 silly resolved []\n363 verbose about to build C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\commander\n364 info build C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\commander\n365 verbose from cache C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules\\commander\\package.json\n366 verbose linkStuff [ false,\n366 verbose linkStuff   false,\n366 verbose linkStuff   false,\n366 verbose linkStuff   'C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\node_modules' ]\n367 info linkStuff commander@0.6.1\n368 verbose linkBins commander@0.6.1\n369 verbose linkMans commander@0.6.1\n370 verbose rebuildBundles commander@0.6.1\n371 info install commander@0.6.1\n372 info postinstall commander@0.6.1\n373 verbose about to build C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\n374 info build C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\n375 verbose from cache C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\package.json\n376 verbose linkStuff [ false,\n376 verbose linkStuff   false,\n376 verbose linkStuff   false,\n376 verbose linkStuff   'C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules' ]\n377 info linkStuff ws@0.4.21\n378 verbose linkBins ws@0.4.21\n379 verbose link bins [ { wscat: './bin/wscat' },\n379 verbose link bins   'C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\.bin',\n379 verbose link bins   false ]\n380 verbose linkMans ws@0.4.21\n381 verbose rebuildBundles ws@0.4.21\n382 verbose rebuildBundles [ 'commander', 'options', 'tinycolor' ]\n383 info install ws@0.4.21\n384 verbose unsafe-perm in lifecycle true\n385 silly exec cmd \"/c\" \"node install.js\"\n386 silly cmd,/c,node install.js,C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws spawning\n387 info ws@0.4.21 Failed to exec install script\n388 info C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws unbuild\n389 verbose from cache C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules\\ws\\package.json\n390 info preuninstall ws@0.4.21\n391 info uninstall ws@0.4.21\n392 verbose true,C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules,C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules unbuild ws@0.4.21\n393 verbose C:\\Program Files (x86)\\VertrigoServ\\www\\node\\node_modules.bin,[object Object] binRoot\n394 info postuninstall ws@0.4.21\n395 error ws@0.4.21 install:node install.js\n395 errorcmd \"/c\" \"node install.js\" failed with 127\n396 error Failed at the ws@0.4.21 install script.\n396 error This is most likely a problem with the ws package,\n396 error not with npm itself.\n396 error Tell the author that this fails on your system:\n396 error     node install.js\n396 error You can get their info via:\n396 error     npm owner ls ws\n396 error There is likely additional logging output above.\n397 error System Windows_NT 6.1.7600\n398 error command \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"ws\"\n399 error cwd C:\\Program Files (x86)\\VertrigoServ\\www\\node\n400 error node -v v0.8.9\n401 error npm -v 1.1.61\n402 error code ELIFECYCLE\n403 verbose exit [ 1, true ]\n. Vote up. But for me even a single call throws. Even if I call server.close() immediately after the constructor (just to make sure it was not closed by other code) I get this:\n...ws\\lib\\WebSocketServer.js:46\n    this._closeServer = function() { self._server.close(); };\n                                                  ^\nTypeError: Cannot call method 'close' of undefined\n. I added two parameters to my send function but I can't retrieve the second parameter in the client side. And I'm asking how to retrieve them in the client-side.\n. got it. It is \"ws.upgradeReq.headers.origin\"\nThanks!\n. @3rd-Eden  However the close state does NOT delete the socket object from the server, how do we do that? For example:\n```\nvar WebSocketServer = require('ws').Server\n  , wss = new WebSocketServer({ port: 9300 });\nwss.on('connection', function connection(socket) {\n  socket.on('message', function incoming(message) {\n});\nsocket.on('close', function () {\n           socket.close();\n    setTimeout(function(){\n\n            console.log(socket);\n\n\n    }, 1000);\n\n});\n});\n```\nIt will still console.log the socket even after closing the connection, how can we delete that so it's not left in memory?\n. @3rd-Eden how long does it take for V8 to do that though? If a user keeps refreshing the page instantly over and over again the unnecessary memory consumption will be very evident. Is there a way to delete that socket object data upon closing? (Right after) instead of waiting for the V8 GC?\n. Not to snipe, or push my own product, but I have an implementation of a websocket that can support streaming if you don't find an answer using ws\n. Nvm this question guys, I figured it out. I just wish there was a documentation and manual of all the properties in the socket object...\n. No it doesn't There is no documentation for any of the properties in the WS object. And, socket.upgradeReq.connection.remoteAddress is hidden as well. You need to UPDATE the documentation, not tell me it has everything and is working fine.\n(The .remoteAddress property is not even displayed when console logging all the properties of the socket object), but it does work when you do 'socket.upgradeReq.connection.remoteAddress'. That is documentation material to NOTE so users don't have a hard time finding it, right?\n. Huh? I'm not talking about the http request stuff. You can grab the remoteAddress by using the (ws) socket object. But, when you do console.log(socket) (from this ws plugin), it shows this: \nhttp://i.gyazo.com/d192a93bb3f817fd7c4617d8f32421ac.png\nAND\nhttp://i.gyazo.com/d192a93bb3f817fd7c4617d8f32421ac.png\nHell, the property list is so long, you have to download a new console just to read the rest of the properties. Which you have, absolutely NO documentation for is my point...\nAlso here is a copy and paste of socket.upgradeReq.connection:\nGame functions imported and ready!\n{ _connecting: false,\n  _hadError: false,\n  _handle:\n   { fd: undefined,\n     reading: true,\n     owner: [Circular],\n     onread: [Function: onread],\n     onconnection: null,\n     writeQueueSize: 0 },\n  _host: null,\n  _readableState:\n   { objectMode: false,\n     highWaterMark: 16384,\n     buffer: [],\n     length: 0,\n     pipes: null,\n     pipesCount: 0,\n     flowing: true,\n     ended: false,\n     endEmitted: false,\n     reading: true,\n     sync: false,\n     needReadable: true,\n     emittedReadable: false,\n     readableListening: false,\n     defaultEncoding: 'utf8',\n     ranOut: false,\n     awaitDrain: 0,\n     readingMore: false,\n     decoder: null,\n     encoding: null,\n     resumeScheduled: false },\n  readable: true,\n  domain: null,\n  _events:\n   { end: [ [Object], [Object] ],\n     finish: [Function: onSocketFinish],\n     _socketEnd: [Function: onSocketEnd],\n     drain: [ [Function: ondrain], [Function: socketO\n     timeout: [Function],\n     error: [ [Function: socketOnError], [Object] ],\n     close: { [Function] __ultron: 0 },\n     data: { [Function: firstHandler] __ultron: 0 } }\n  _maxListeners: undefined,\n  _writableState:\n   { objectMode: false,\n     highWaterMark: 16384,\n     needDrain: false,\n     ending: false,\n     ended: false,\n     finished: false,\n     decodeStrings: false,\n     defaultEncoding: 'utf8',\n     length: 0,\n     writing: false,\n     corked: 0,\n     sync: false,\n     bufferProcessing: false,\n     onwrite: [Function],\n     writecb: null,\n     writelen: 0,\n     bufferedRequest: null,\n     lastBufferedRequest: null,\n     pendingcb: 0,\n     prefinished: false,\n     errorEmitted: false },\n  writable: true,\n  allowHalfOpen: true,\n  destroyed: false,\n  bytesRead: 734,\n  _bytesDispatched: 175,\n  _pendingData: null,\n  _pendingEncoding: '',\n  server:\n   { domain: null,\n     _events:\n      { request: [Function],\n        connection: [Function: connectionListener],\n        clientError: [Function],\n        error: [Function],\n        upgrade: [Function] },\n     _maxListeners: undefined,\n     _connections: 1,\n     _handle:\n      { fd: undefined,\n        reading: false,\n        owner: [Circular],\n        onread: null,\n        onconnection: [Function: onconnection],\n        writeQueueSize: 0 },\n     _usingSlaves: false,\n     _slaves: [],\n     allowHalfOpen: true,\n     pauseOnConnect: false,\n     httpAllowHalfOpen: false,\n     timeout: 120000,\n     _connectionKey: '4:0.0.0.0:9300' },\n  _idleTimeout: -1,\n  _idleNext: null,\n  _idlePrev: null,\n  _idleStart: 6349714,\n  parser: null,\n  _paused: false,\n  read: [Function],\n  _consuming: true }\nAnd where in the world is .remoteAddress at may I ask? Why is it not there? Do you know, that might be something to list in the documentation? Because quite frankly, I have wasted far too much time trying to find out why and spending countless hours on google trying to find the users IP. It's just sad. I finally found a stackoverflow thread of a user telling me to use .remoteAddress. Well, that's funny because I would of found it INSTANTLY if it were shown in the socket object..\n. Easy, just use the length property of a string inside the .on('message').\nI recommend using https://github.com/jhurliman/node-rate-limiter as well for spammers. And each time they surpass a request, log their IP to a text file. Then, if your server is running under linux, have something check that file every xxx seconds and check for duplicate ip's. And if they exceed a certain amount, block them using IPTABLES. For windows, not sure how you would block them. This would get rid of most at the layer 3 level. (Network) Still susceptible to DDOS Though :(\n. Oh, well we need check it then in Websockets.js or somewhere in the \\apps\\node_modules\\ws\\lib directory. I'm not sure where the message payload is initially received :(. Good catch though, I didn't think about that. I will need to do this as well, I'll play around a bit when I get home from school.\n. Are u talking about an authentication system? Just send the details for authentication at the start.\n. Also, if this is intended.. This would be the worse module ever to work on a production game server.  I cannot imagine the memory usage going through the roof after players have join/left countless of games and entered channels/chatted/etc.. Holy shit. The memory usage would be through the roof. And that's fine.. but if it doesn't go back down and just keeps being incremental, that's a leak..\nEdit: So, I heard Javascript is a ' garbage collected language ' so does it run something every xxx seconds that free's up the memory right? (Heard it from here: http://stackoverflow.com/questions/16721995/memory-leaks-in-nodejs-websocket-server)  Does anyone know what that interval is for this module? :P and is it possible to edit it?\n. Hey guys, I posted this on SO instead:\nhttp://stackoverflow.com/questions/30608110/why-does-nodejs-have-incremental-memory-usage\nI explained my issue there better and tried to be less acetone :)\n. Alrighty, sorry for the quadruplet post. But, I've been using this to close the connections gracefully on the serverside:\n```\nvar WebSocketServer = require('ws').Server\n  , wss = new WebSocketServer({ port: 9300 });\nwss.on('connection', function connection(socket) {\n  socket.on('message', function incoming(message) {\n});\nsocket.on('close', function () {\n           socket.close();\n});\n});\n```\nAnd even when I use socket.close() to end their connection instantly the memory usage doesn't go down. Is there a timeout that this module uses to remove/delete the socket buffer/data for a unused connection? Can we edit that? :P\nEdit: Basically this code causes the leak:\n```\nvar WebSocketServer = require('ws').Server\n  , wss = new WebSocketServer({ port: 9300 });\nwss.on('connection', function connection(socket) {\n  socket.on('message', function incoming(message) {\n});\nsocket.on('close', function () {\n           socket.close();\n    setTimeout(function(){\n\n            console.log(socket);\n\n\n    }, 1000);\n\n});\n});\n```\nConsole.log still shows that socket even if it's closed. How do we delete that socket object so it's not stored in memory?\n. I'd use string.length >  10000 (or whatever) and then close their connection.\nBut, I am pretty much the memory is already allocated as .length needs to read that string. Hmm not quite sure :( Might have to block it at the network layer to prevent abuse (physical firewall) maybe at the software level, not sure i'll keep you updated if I find anything.\n. I posted your question here: http://stackoverflow.com/questions/30817727/is-there-a-way-to-limit-the-maximum-size-of-a-string\nHopefully we'll get a response soon ~\n. @Deathspike You need to post your question on stackoverflow these forums don't have a ounce of the intelligence compared to SO.\nFor your example code above, that can be mitigate by using iptables to limit the number of new connections per ip:  This is why using websockets on a production / linux server is a must.\n```\nAllows Websocket Connections (only 10 attempts by an IP every 30 seconds, drop the rest to prevent  attacks) ~\niptables -A INPUT -p tcp -m tcp --dport 9300 -m state --state NEW -m recent --set --name WEBSOCKET --rsource\niptables -A INPUT -p tcp -m tcp --dport 9300 -m state --state NEW -m recent --update --seconds 6 --hitcount 10 --name WEBSOCKET --rsource -j DROP\niptables -A INPUT -p tcp -m state --state NEW --dport 9300 -j ACCEPT\n```\nyou may also use; https://github.com/jhurliman/node-rate-limiter  is what I use once my player is connected to my gameserver to limit packet spamming.\nThe code you posted above isn't what you explained in your OP. The code you posted is a new connection flooder.  What you explained in your OP is how a user can send a packet with an immense amount of data and it will overflow the memory buffer when .length is checking it which is a problem as well.\nUnless, there is a way to limit the size of data that can be sent over tcp with iptables, I cannot really find a solution. You need to post your question on SO though and give me a link to it so I can watch it, thanks.\nAlso, contact me on skype: dillybob1992 if you have time so we can find a solution for this because I run aRPG web-based gameserver with node as well.\nEdit: Nevermind, I see that you're using the kMaxLength property.. I see what you did there. Yep,  this needs to be fixed and this question needs to be posted on SO as soon as possible.\n. We can use localAddress too.. ws.upgradeReq.connection.remoteAddress does not exist..\n. Ubuntu Server 15. What about the CPU usage? I optimized my script and it takes max 100MB of\nRAM, and about 80-100% of CPU. I ran it on a VPS (Cloud 3) -\nhttps://www.ovh.com/us/vps/vps-cloud.xml . Probably it isn't caused by\nUbuntu, but probably by the machine - there are virtual cores, not real.\nProbably I should buy a server.... Thanks! This topic can be closed for now.. @JacksonTian What version? I use the newest ws library.\n. Added after 3rd line:\njavascript\nws.on('error', function(e) { console.log('Got an error'); });\nand it worked.\n. Done. Each worker listens on the same port.\n. Even if  disable permessage-deflate ,there still  Memory leak, just less.\nfor example \nvar  WebSocket = require('ws');\nvar ws = new WebSocket('ws://www.host.com/path', {\n  perMessageDeflate: false\n});\nvar WebSocket = require('ws');\nvar  wss = new WebSocket.Server({\n  perMessageDeflate: false,\n  port: 8080\n});\nopen the server ,it cost memory usage is 20 MB\nThen  20Kclients connected, memory usage is 400MB\nThen close all clients,\nAfter a few minute,memory usage is 80MB and it dont decrease any more\nIt means there are 60M memory are oppuied and will  not be  clean.\n@lpinca . I dont know what means 'stabilize',is the  60MB  memory will be clean by GC after a period of time?\nNow, i found the Situation is  if  it \"stabilize\",if connnet and close severtime. the memory does not grow every time.just  oppuied 60MB at first time and it not decrease in 10 min.\nAnd  it grows with the number of the clients.    for example,it 20K clients connected and closed. it oppuied 60MB and will not clean by gc.  if 5k clients, it just it oppuied 20MB and will not clean by gc.  and if 50K clients ,it oppuied 140MB and not decrease in 10 min.\nAnd I dont know Is this Situation works as expected and it isnt Memory leak?\n. @lpinca   why  if  a  new client connect to server  and then closed it .it still oppuied some space ? If  the server   cant  clean  it  any more . Now ,it cause a problem , there are many new client connnect to the server and then close. This action cost some memory,  as time when by , the server will lost all memory and have to restart . Is  it true ? if  it is true ,the memory leak still exist , is it right?\n. Ah. Thank you very much! That's convenient because I already create a HTTPS server a few lines up.. Maybe I didn't make it clear, thanks for your answer.\nNow  the question is  server  cant  know  if a client disconnects due to network failure. even if  you use the  ping-pong or hearttime to close the dead connect. but  there will  still lost message if ws.send(message) between  network failure and closed client . \nI know  when  ws.send(message) ,if the network is good ,the client will send an  ack response to server on TCP protocol layer. we can set a timer,if server cant receive the ack response on time.it means the connnect is error.And  make the  callback of ws.send will carry out  when the server cant receive the ack response  but not just  send message to TCP send buffer. because  server can receive the ack response from client in TCP protocol means the connnetc is good ,but just not just  send message to TCP send buffer cant  do it .\nuser your code \n```js\nfunction send(ws, msg, timeout) {\n  let timer;\nws.send(msg, function (err) {\n    //callback will  do until  receive the ack response\n    //but not  just  send message to TCP send buffer\n    //however I dont know how to change it \n    clearTimeout(timer);\n    if (err) handleError(err);\n  });\ntimer = setTimeout(function () {\n    // What to do here?\n  }, timeout);\n}\n```. ",
    "TooTallNate": "Well ideally npm installs a precompiled binary for Windows when the user installs, but that's not yet implemented in npm and may be a ways away.\nBut the bindings module should work fine with your little make.bat thing; it just looks for a file in the ./build/Release dir like you are already doing :)\n. Ya we can change that, the newest node-gyp builds into build, not out. See here https://github.com/TooTallNate/node-time/commit/ec3b2f8137dcb6bb7b88abb59d91418f1abbb731\n. Hey @einaros, I redid this branch and got rid of the unnecessary stuff. Now it only adds the binding.gyp file. I know that Isaac is working on getting npm to automatically compile modules with node-gyp when a bindings.gyp file exists, just like how it does with wscript and node-waf, so that will make the transition a lot smoother once that happens.\n. Thanks @einaros. P.S. the bug is more likely going to be in the tls module, rather than in ws itself, but I'm reporting it here first so that hopefully we can narrow down exactly what the problem is before bugging upstream.\n. @gramakri +1, any chance you'll be able to write up a test case for this today?\n. FWIW, here's a quick gist that I used to manually test the code here: https://gist.github.com/TooTallNate/6253581\nI'll look into automating that test case...\n. @3rd-Eden @einaros @gramakri-intel Here's a standalone test case. I wasn't sure where to put it in the very large arrangement of tests in WebSocket.test.js, but one of the committers can place it in there as necessary. The test times out on the current master branch, but passes with this patch. Hope we can get this merged ASAP! Cheers!\n``` js\nvar assert = require('assert');\nvar WebSocket = require('ws');\nprocess.on('exit', function () {\n  assert.equal(true, addRequestCalled);\n});\nvar timeout = setTimeout(function () {\n  console.error('Timeout!');\n  process.exit(1);\n}, 1000);\nvar addRequestCalled = false;\nvar agent = {\n  addRequest: function () {\n    clearTimeout(timeout);\n    addRequestCalled = true;\n  }\n};\nvar socket = new WebSocket('ws://echo.websocket.org', { agent: agent });\n``\n. I simplified, mochaified and committed a test case in https://github.com/TooTallNate/ws/commit/0714eec1afc9e0e6ebd6cfca3313c2b614192d13.\n. ![](http://i.cloudup.com/nXcPk7xjyN.png)\n. ^ So I guess my 3 arguments idea won't work either :(\n. It would be nice if we didn't have to do any sniffing at all. That's why we've set up [component/ws`](https://github.com/component/ws) which wraps the native WebSocket constructor and ignores the 3rd argument passed to it (for the client-side).\n@3rd-Eden Would you accept a PR for accepting the \"options\" object as the 3rd argument as well as the 2nd (backwards-compat and all that jazz)? Does this module even support the sub-protocols array part of the spec (too tired to check the source ATM)?\n. git bisect points to 28e3628907f6186a2e17d7d51977841c5d5da08a.\n. Looks like socket.bufferSize can be undefined instead of the expected 0. I'll send a patch defaulting to 0 if it's undefined...\n. component/ws should be API-compat at this point. I still need to send a PR for #227, but once that is in then this should work on node and in the browser:\n``` js\nvar WebSocket = require('ws').WebSocket;\nvar socket = new WebSocket('ws://echo.websocket.org', ['some','sub','protocols'], { agent: http.globalAgent });\n// ...\n``\n. @mcollina Justrequire('ws')will work forcomponent/wsas well (and actually you're right!ws.WebSocket` doesn't even exist on this repo).\nI actually don't have any particular opinion on this PR, since we're using component/ws and not this lib/browser.js file anyways.\n. +1 in any case though\n. @shtylman This PR would make lib/browser.js consistent API-wise with node's einaros/ws and web browser component/ws. What's the issue exactly?\n. p.s. I got a little unfocused with whitespace fixes and minor variable placement stuff, but it's all good stuff. Tests still passing.\n. It really wouldn't take that long (git log package.json). I'd PR if I could, but whatevs, not really a huge deal.\n. ",
    "agektmr": "Any news on this?\n. Hi, @einaros \nI'm actually seeing the exact same issue on IE10 Windows 8 running on VirtualBox installed via ievms. The server is running on Mac OS X 10.8 which is the host of the VirualBox.\nAccording to this information, my IE build 10.0.9200.16519 is even newer than the latest available on list and definitely not the preview build.\n. mine was 0.10.1.\n. tried it on v0.8.8 as well which gives same error.\n. ",
    "jacksunsea": "+1\n. ",
    "gauravsri": "Any update on this?\n. ",
    "santiago": "Would love to help on having this ready, let me know\n. ",
    "sberryman": "Any updates?\n. ",
    "gritzko": ":(\n. ",
    "sonnyp": "Last spec is https://tools.ietf.org/html/draft-ietf-hybi-permessage-compression\nperframe has been renamed to permessage and is not limited to deflate anymore, however it is the algorithm used in the spec\n. @einaros could you create an experimental branch with compression support so we can take a look at it and give a hand?\n. http://www.igvita.com/2013/11/27/configuring-and-optimizing-websocket-compression/\n. Support has landed into Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=792831\n. I think this can be closed. per-frame deflate has been obsoleted by per-message compression https://tools.ietf.org/html/draft-ietf-hybi-permessage-compression-19 and implemented in #409 \n. @zz85 it will be in 37, if you wanna play now with it you could try with firefox nightly\n. This fix isn't enough.\nIt sends back the the Sec-WebSocket-Protocol header which is wrong because we should parse it and reply with only one value.\nFor that the user (of the lib) must be able to specify what sub protocol is authorized.\nIf the client doesn't sends an authorized sub protocol then we should fail the handshake as specify in https://tools.ietf.org/html/rfc6455#section-7.4.1\n\"1010 indicates that an endpoint (client) is terminating the connection because it has expected the server to negotiate one or more extension, but the server didn't return them in the response message of the WebSocket handshake.  The list of extensions that are needed SHOULD appear in the /reason/ part of the Close frame. Note that this status code is not used by the server, because it can fail the WebSocket handshake instead.\"\n. Good to know!\nMeanwhile it's landed don't you think you should merge this patch? It still fixes a real bug.\n. Sorry for the duplicate.\n. ",
    "zz85": "+1 for x-webkit-deflate-message support! :)\n. @sonnyp nice! :)\n. @sonnyp looks promising! looks like permessage-compression is also available in blink/chromium https://code.google.com/p/chromium/issues/detail?id=280910 but not yet in webkit https://bugs.webkit.org/show_bug.cgi?id=98840?\n. Firefox 36a2 (developer's edition) does not seem to support permessage-deflate yet.. will check back and see.\n. getting similar errors from testing 0.6.5 in production. could it be related to per-message deflate issues @nkzawa? \n. these errors are suppressed when send(data, { compress: false; }) is used, it could be possible that some browsers or running on TLS is causing this error. \n. Update: here's the repository to my code which test for this. https://github.com/zz85/node-ws-slow-client-buffer-leak\n. > That reduces memory usage on your example by 90%\n@Nibbler999 that is not true.  When perMessageDeflate: false is set, the RSS grows faster in the tests because more memory is being buffered in the sockets' internal queue. In that sense turning on compression can be a good thing.\n\nYou can also use the send callback to avoid overwhelming slow clients\n\nThis is true, however what we are trying to investigate is why node holds on the memory which should be reclaimed after clients disconnect.\n. We are also running tests on the windows nodejs servers, and find that the RSS recovers (though after about 1 minute).\nHere's a heapsnapshot after clients disconnects a buffer build up on MacOS.\n\n. Just an update: there is a fix to address this by @Nibbler999 in nodejs https://github.com/nodejs/node/pull/4773 :)\n. Yes, this issue was discovered many node versions ago, so I think this can be closed. \n. ",
    "adaptabi": "+1\n. ",
    "ChALkeR": "Any news on this?\n. Any news on this?\n. @zaggino Well, of course that works, but it's not very nice to have that in a project.\n. Thanks!\n. ",
    "andrewrk": "I'm volunteering to start implementing this. @einaros mind pushing your branch to github so I can work off of it, or at least view it?\n. Looks like the standard isn't completely solidified yet, and only Chrome has support for one of the extension proposals floating around. I think I'll hold off on working on this until at least Firefox supports an extension too.\n. I'm looking forward to this too. It will make loading a large music library index in Groove Basin take about 1 second instead of 5.\nBut still, not desperate enough to code it myself yet :cactus: \n. Why would you use this on the front end? Use the native WebSocket API.\nTrying to make this work in both the browser and Node is like trying to write code that runs in both IE6 and the latest chromium. Screw that.\n. I'd rather have a node-only library that only acts as a server. What module should I use for that? Primus?\n. @3rd-Eden have you considered this PR?\n. What's that isNode4 code doing there? Does this codebase really attempt to retain support for node 0.4.x?\n. My philosophy, at least until node reaches 1.0, is to only support the latest stable (currently v0.10). Let version locking and semver deal with legacy node versions.\n. pro tip: never install anything with -g. especially not ws.\n. 3rd eden is correct. If you want to use ws from your JavaScript code, -g is the wrong way to go. If you want wscat then you still probably don't want -g since you're presumably using it in the context of a project where ws is in node_modules and so you should use ./node_modules/.bin/wscat instead of globally. This will make it easier for project contributors to install your dependencies. Also ws arguably should have the binary in a separate module because it adds extra cruft and dependencies to the library.\n. Example: https://github.com/andrewrk/groovebasin/blob/31515ff05f543dd05bc5c28388fb154340b8932f/build#L3\nUsing stylus and browserify-lite to create build assets. Still installed locally instead of with -g.\nAnother example: https://github.com/andrewrk/andrewkelley.me/blob/c8edbe1ce0c7675acdece70bd058e5e154e7008c/push#L3\nUsing s3-cli to publish assets to a web server. Still installed locally.\nIn both cases, getting going with the project is as simple as npm install. You don't have to read the readme or anything else to figure out that you needed something globally installed.\n. unless you're looking to install a cli utility, never use install -g.\n. duplicate of https://github.com/einaros/ws/issues/34\n. Well, consider this an offer to help.\n. Windows makes life difficult for developers. If you want to develop on Windows, you're going to have to learn your system and do a bunch of extra effort to get everything working.\nSo you have two options:\n1. Bite the bullet\n2. Don't use Windows\nI know what my solution is.\n. It would be nice if there was a different repository for wscat than for ws. I'm subscribed to ws issues but I don't care about wscat issues.\n. Wow, nice work. You beat me to it.\n. also can remove that isNodeV4 logic now.\n. ",
    "sequoiar": "any update?\n. Does websocket-stream support pause/resume? \n. two server can share the same http server with different path, like \nvar wsa = new  WebsocketServer({server: http server instance, path: '/a'});\nvar wsb = new  WebsocketServer({server: http server instance, path: '/b'});\nin client side:\nvar clnta = new Weboscket('ws://xxx/a');\nvar clntb = new Websocket('ws://xxx/b');\nthe usecase is that we need multiple websocket server listening on the same port and handle different connection and logics.\n. take care 'error' and 'close' event in server side socket\n. see it too. my work around is put try ... catch in message handler\n. it should be \n'Origin': (isSecure ? 'https://' : 'http://') + headerHost,\n?\n. admit\n. @yarax it should be \n-    if (this.options.path instanceof RegExp) {\n-      if (u && u.pathname && !u.pathname.match(this.options.path)) return;\n-    } else {\n-      if (u && u.pathname !== this.options.path) return;\n-    }\n  +\n  }\n. @JoshuaWise incase a cached _randomMask like\nvar mask = this._randomMask || (this._randomMask = getRandomMask());\n. ",
    "dmmalam": "+1\n. ",
    "eprouty": "What is the status on this issue? Is there any support for permessage-deflate at all?\n. ",
    "shoe": "I confirm.  Bug fixed in 0.4.8.\n. ",
    "vinnitu": "tell me please does it work on node 0.8.7? Can you give working example? (pastebin)\n. nothing happens, you can see it with my code on pastebin\ngive me 'true' example with ssl - i will check\n. ",
    "lpinca": "I think a possible way to make this work is to use the noServer mode:\n``` js\nconst wss = new WebSocket.Server({ noServer: true });\nconst httpsServer = https.createServer(options);\nconst httpServer = http.createServer();\nhttpsServer.on('upgrade', (req, socket, head) => {\n  wss.handleUpgrade(req, socket, head, (ws) => wss.emit('connection', ws);\n});\nhttpServer.on('upgrade', (req, socket, head) => {\n  wss.handleUpgrade(req, socket, head, (ws) => wss.emit('connection', ws);\n});\n```\nI didn't test the above code but it should work. Closing for now.\n. Should be fixed on master, WebSocket#send() no longer overrides the fin option.\n. I think it's better to not add an id generator in this lib as there are multiple ways to generate ids and they depend on the application.\nClosing, feel free to continue discussing on the closed thread.. Server now accepts a maxPayload option which specifies the maximum allowed message size.\n. There are cases where the only way to detect that a connection has been closed is via a heartbeat system which can be implemented, for example, by sending pings.. @nalvarezdomingo pings in this context are not icmp packets, but special WebSocket frames as specified by the protocol.. Closing this as it seems that the issue is in IE10 and not in this library.\n. @endel something like this\n```js\nconst cp = require('child_process');\nconst http = require('http');\nconst child = cp.fork('child.js');\nconst server = http.createServer();\nserver.on('upgrade', (request, socket) => {\n  child.send({ headers: request.headers, method: request.method }, socket);\n});\nserver.listen(8080);\n```\n```js\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ noServer: true });\nprocess.on('message', (request, socket) => {\n  wss.handleUpgrade(request, socket, undefined, (ws) => {\n    ws.send('foo');\n  });\n});\n```\nworks but I never used ws in this way.. There should not be any data on the socket during the handshake apart from the headers. The spec says that no data should be exchanged before the 'open' event.\nThe parent process reads the request headers and the child process writes the response headers so I think it's fine also without pausing/resuming the socket.. @endel how about\njs\nserver.on('request', (request, response) => {\n  // This is a regular request.\n});. On second thought that won't work as you can \"send\" the request socket to a child process but then you would need to read/write to the socket directly without all the benefits of the request and response objects.\nAs you said this should be solved upstream but there is no way to know if a TCP socket will be used for a regular request or an upgrade request without reading the headers.. @s1riedel do you have a test case to reproduce the issue?\n. Closing due to inactivity, please reopen if needed.. Port 0 should work now.\n. Closing this as we are going to drop support for older versions of the protocol.\nThanks.\n. Closing this as it has been addressed by #271.\nThank you!\n. Sending typed arrays should work out of the box. They are converted to buffers without copying the data. Data is copied only when the buffer is masked.\n. Refs: #528\n. Fixed by 060b275d978ff7d095a92863fc3a1f7bcea878ed, closing.. Closing this as I think this issue has been \"fixed\" by #885. Please comment or reopen if needed.\n. Yeah NGINX closes the connection if there is no activity on the socket. A possible workaround is to send a message/ping before timeout expires.\nWhen a peer receives a ping frame, it should answer with a pong frame as per spec. What to do with the pong message is up to application.\n. Handling the error event that is emitted on the WebSocket instance should fix this.\nPlease comment back if you still have issues.\n. I close this. Handling the error event on the WebSocket instance should fix the original issue.\nPlease comment or reopen if needed.\nThanks.\n. Closing this as it seems that this change is no longer necessary. Please comment or reopen if needed.\nThank you.\n. Adding a listener for the error event should prevent the app from crashing when these errors are raised.\njs\nwss.on('connection', (ws) => {\n  ws.on('error', (err) => handleError(err));\n});\n. @aleclarson You can also use the rejectUnauthorized option when creating the client instead of using the env variable.\nClosing this as it seems everything has been addressed/solved.\n. @chirgwin thank you. I close this, please comment or reopen if needed.\n. The error should bubble up if not handled.\n``` js\nconst WebSocket = require('.');\nconst wss = new WebSocket.Server({ port: 3000 }, () => {\n  const ws = new WebSocket('ws://localhost:3000');\n  ws.on('open', () => ws.send('throw'));\n});\nwss.on('connection', (ws) => {\n  ws.on('message', () => {\n    throw new Error('damn');\n  });\n});\n```\nThe above code seems to work as intended. Closing this.\n. You can now override the shouldHandle method in order to customize the path matching behavior.\n. Closing as #494 has been merged. Please comment or reopen if needed.\n. Closing this as I think the issue has been fixed, please comment or reopen if it still happens.\n. I've run this example against master. It seems to work fine, closing.\n. Closing this as I think the issue has been fixed, please comment or reopen if it still happens.\n. Closing this as the stream method has been removed in master.\nTake a look at https://github.com/maxogden/websocket-stream for stream support.. The problem seems to be in your server code. When you do s[1]=soc; you overwrite it every time with the latest connection.\n. @codingphil can you please rebase against master and add a test as suggested by @3rd-Eden?\nThanks.\n. Merged as ea50be7ab12ad028b41a315e924aa8c442c095d7.\nThank you!\n. You should definitely get a Buffer instance. Closing as I think it is no longer an issue in newer versions of ws. Please reopen if it is not the case.\nThanks.\n. Closing this as the issue is 3 years old, please comment or reopen if needed.. There isn't a way to automatically do this, you have split the message yourself.\n. It makes sense. @Mattijah can you please rebase against master?\n. Merged as e5a2ab4a9e2921597a835c244b7b284f6e269926.\nThank you!\n. @Mattijah I'm closing this pr as the suggested change is already implemented now. See https://github.com/websockets/ws/blob/0cfa5cc94d50bebd6f85b78ec1094dd9a7a17d62/lib/Sender.js#L182.\nThank you.\n. I close this as a long time has passed and hopefully this is no longer an issue. Please reopen or comment if needed.\n. wscat has moved to https://github.com/websockets/wscat. Can you please resubmit there?\nThank you.\n. cc: @nwwells who is helping maintaining wscat.. I think this is an edge case not worth fixing.\nCurrently a String object is sent as as a binary frame whose payload is zero-filled.\n```js\n\nvar s = new String('foo')\nundefined\nBuffer.from(s)\n\n```\n\nI think it's better to let the consumers of this library handle the edge case.. It probably uses this function but  in the loop obj[i] is a string so it fails silently.\nAlso the length is not correct in all cases:\n```js\n\nvar s = new String('1\u20ac')\nundefined\nBuffer.from(s)\n\nBuffer.from('1\u20ac')\n\n```. It could be used as an ID because the spec requires a compliant client to generate a random key on each and every connection but it really depends on how the client generate that key.\n\nIn my opinion it's better to generate a proper uuid for each connection on the server in the connection listener.\n. I can't reproduce the issue, tests pass also when run with the root user on my machine.\nClosing this, please comment or reopen if needed.\n. What @thedufer said, closing.\n. > For each connection, is there also an \"onclose\" event handler?\nYes.\n\nAnd when it happens, will it be removed from wss.clients?\n\nYes the 'close' listener will remove the client from `wss.clients.\nClosing.\n. Closing this as the issue report is very old. Please comment or reopen if the issue still happens.\n. @oasiz I suggest you to use ws@3.. You can use a callback to catch this error:\njs\nws.send(data, function data(err) {\n  if (err) handleError(err);\n});\n. The example is now available in the examples folder (thanks to @karatheodory).. The send method accept a callback that is called when data is flushed.\n. Closing this as the issue report is very old and I don't know if it is still valid. Please reopen if needed.\n. Closing this as the issue report is very old. The code posted on the issue description should work fine.\n. I think this could be done by using multiple server instances is noServer mode. Similar to this example: https://github.com/websockets/ws#multiple-servers-sharing-a-single-https-server\nI'm closing this. Please reopen or comment if I'm wrong or missing something.. Add a listener for the error event to handle these cases or use a callback as suggested by @GeekLad.\n. Closing as this issue report is very old, if the issue still happens with a recent version of ws please post back.\nThanks.\n. A possible way is to use something like this: https://github.com/websockets/ws#how-to-detect-and-close-broken-connections.\nClosing, feel free to continue discussing on the closed thread.. Add a timer on the client that terminates the connection when it expires, reset the timer every time a ping (or any other data) is received from the server.. Closing this as Node.js < 4 is no longer supported.\n. @nahuel ws works with basic auth, see https://github.com/websockets/ws/blob/9c39adfc9734073c1e949c62d56614f3c315ebee/test/websocket.test.js#L1850-L1863. You can specify username and password in the connection URL or build the header manually.. Closing as this should be fixed in master.\n. I think it has been fixed in browserSync 2.7.1, closing.\n. @DamonOehlman a lot of time has passed, is this still needed?. verifyClient is a technical debt imho and the only reason why WebSocketServer.prototype.handleUpgrade() is async. I would like to remove it completely.\nInstead of using it, use something like this\n```js\nconst http = require('http');\nconst WebSocket = require('ws');\nconst server = http.createServer();\nconst wss = new WebSocket.Server({ noServer: true });\nwss.on('connection', function connection(ws, request, ...args) {\n  // ...\n});\nserver.on('upgrade', async function upgrade(request, socket, head) {\n  // Do what you normally do in verifyClient() here and then use\n  // WebSocketServer.prototype.handleUpgrade().\n  let args;\ntry {\n    args = await getDataAsync();\n  } catch (e) {\n    socket.destroy();\n    return;\n  }\nwss.handleUpgrade(request, socket, head, function done(ws) {\n    wss.emit('connection', ws, request, ...args);\n  });\n});\nserver.listen(8080);\n```\nIt gives the developer a lot of more freedom.. Anyway, adding custom data to the request object as suggested in some comments above, is ok. It's an established pattern in Express and Koa, for example, to pass data between middleware.. @bfailing it is undefined because it is an example. getDataAsync is an example function to get some data you may need.. As @Bacto said the upgradeReq property stores a reference to the upgrade request.\n. https://github.com/websockets/ws/pull/890 should fix this as it checks if the socket is writable and allowHalfOpen is false.\nIt might makes sense to also check if the socket is readable as @ibc did in #379 to handle cases where allowHalfOpen is true.\nThanks for reporting this.\n. I agree with @ibc. The feature is kinda broken when using 2+ server that share the same HTTP server.\nI've also proposed a PR (https://github.com/websockets/ws/pull/885) to remove the broken feature. \n. @ibc I think it has been closed because #885 has been merged.\n. No problem.\n. This should go in wscat issue tracker. Please recreate the issue there if you are still interested.\nThank you!\n. This should go in wscat issue tracker. Please recreate the issue there if you are still interested.\nThanks!\n. It should be fixed on master. Closing.\n. Is this still an issue?\n. Closing due to inactivity, please reopen if needed.. @misha-panyushkin you get a 502 error. If you are using a proxy on your server, like nginx, it's likely that the proxy cannot forward the request.. @misha-panyushkin the server answers with a 404 in this case and that's obviously wrong. It looks like a server / proxy issue to me.. I've never used node-pre-gyp but it should be fun to play with it. The only problem I see here, given the popularity of this module, is how to cover S3 costs.\n. @ErisDS the UI when something goes wrong is horrible, but the optional dependencies have no impact on the functionality of the module.\nThis is the output of npm install ws when VCBuild.exe is not found:\n```\nC:\\Users\\luigi\\gh-402\n\u03bb npm i ws\n\\\n\nutf-8-validate@1.0.1 install C:\\Users\\luigi\\gh-402\\node_modules\\ws\\node_modules\\utf-8-validate\nnode-gyp rebuild\n\nC:\\Users\\luigi\\gh-402\\node_modules\\ws\\node_modules\\utf-8-validate {git}\n{lamb} if not defined npm_config_node_gyp (node \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\node-gyp-bin\\....\\node_modules\\node-gyp\\bin\\node-gyp.js\" rebuild )  else (rebuild)\nCompilazione dei progetti nella soluzione uno alla volta. Per abilitare la compilazione parallela, aggiungere l'opzione \"/m\".\nMSBUILD : error MSB3428: impossibile caricare il componente di Visual C++ \"VCBuild.exe\". Per risolvere il prob lema, 1) installare .NET Framework 2.0 SDK, 2) Microsoft Visual Studio 2005 oppure 3) aggiungere al percorso d i sistema il percorso del componente se questo \u00e8 installato altrove.  [C:\\Users\\luigi\\gh-402\\node_modules\\ws\\n ode_modules\\utf-8-validate\\build\\binding.sln]\ngyp ERR! build error\ngyp ERR! stack Error: C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe failed with exit code: 1\ngyp ERR! stack     at ChildProcess.onExit (C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\lib\\build.js:269:23)\ngyp ERR! stack     at ChildProcess.emit (events.js:110:17)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:1074:12)\ngyp ERR! System Windows_NT 6.1.7601\ngyp ERR! command \"node\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js\" \"rebuild\"\ngyp ERR! cwd C:\\Users\\luigi\\gh-402\\node_modules\\ws\\node_modules\\utf-8-validate\ngyp ERR! node -v v0.12.2\ngyp ERR! node-gyp -v v1.0.3\ngyp ERR! not ok\n\nbufferutil@1.0.1 install C:\\Users\\luigi\\gh-402\\node_modules\\ws\\node_modules\\bufferutil\nnode-gyp rebuild\n\nC:\\Users\\luigi\\gh-402\\node_modules\\ws\\node_modules\\bufferutil {git}\n{lamb} if not defined npm_config_node_gyp (node \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\node-gyp-bin\\....\\node_modules\\node-gyp\\bin\\node-gyp.js\" rebuild )  else (rebuild)\nCompilazione dei progetti nella soluzione uno alla volta. Per abilitare la compilazione parallela, aggiungere l'opzione \"/m\".\nMSBUILD : error MSB3428: impossibile caricare il componente di Visual C++ \"VCBuild.exe\". Per risolvere il prob lema, 1) installare .NET Framework 2.0 SDK, 2) Microsoft Visual Studio 2005 oppure 3) aggiungere al percorso d i sistema il percorso del componente se questo \u00e8 installato altrove.  [C:\\Users\\luigi\\gh-402\\node_modules\\ws\\n ode_modules\\bufferutil\\build\\binding.sln]\ngyp ERR! build error\ngyp ERR! stack Error: C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe failed with exit code: 1\ngyp ERR! stack     at ChildProcess.onExit (C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\lib\\build.js:269:23)\ngyp ERR! stack     at ChildProcess.emit (events.js:110:17)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:1074:12)\ngyp ERR! System Windows_NT 6.1.7601\ngyp ERR! command \"node\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js\" \"rebuild\"\ngyp ERR! cwd C:\\Users\\luigi\\gh-402\\node_modules\\ws\\node_modules\\bufferutil\ngyp ERR! node -v v0.12.2\ngyp ERR! node-gyp -v v1.0.3\ngyp ERR! not ok\nnpm WARN optional dep failed, continuing utf-8-validate@1.0.1\nnpm WARN optional dep failed, continuing bufferutil@1.0.1\nws@0.7.1 node_modules\\ws\n\u251c\u2500\u2500 options@0.0.6\n\u2514\u2500\u2500 ultron@1.0.1\nC:\\Users\\luigi\\gh-402\n\u03bb\n```\nThis https://github.com/iojs/io.js/issues/1010#issuecomment-86105426 explains why the optional utf-8-validate is being used. The other optional dependency (bufferutil) is only used to apply the mask efficiently.\nHave you considered faye-websocket? This is what SockJS/Meteor uses.\n. Closing this as native addons are no longer dependencies of any kind. They must be installed separately.. It has been implemented by @nkzawa in #409.\nThe feature is available in ws@0.6.0.\n. > How would I enable text frame aggregation?\nI don't know but it sounds like it is something that should be handled by the Java library used on Android.\nClosing as I think this isn't a ws issue. Please comment or reopen if needed.\n. We have recently run the latest Autobahn test suite https://github.com/websockets/ws/pull/877#issuecomment-258264774.\nWe will definitely post the results before or soon after releasing the next major release.\nThanks.\n. I just saw #411, testing it now.\n. The above pr fixes the issue, I close this.\n. Hmm I think the error message (not opened) is pretty clear.\nIf we want to add the invalid ready state to the error message we can use the numeric value as the ready state constants are documented.\nAnyway the developer in most cases will just check if the ready state is OPEN\njs\nif (ws.readyState === WebSocket.OPEN) {\n  ws.send('foo');\n}\nso I'm inclined to close this.. I'm going to close this. If you disagree with my decision please comment so we can re-evaluate.. @shellscape this a WebSocket library so I think a basic/minimal knowledge of WebSocket is required. To answer your questions:\n\nThe error is emitted on the WebSocket object so it seems natural to me that the not open thing is the WebSocket object itself.\nBecause the WebSocket could be in CONNECTING, CLOSING or CLOSED state.\nSee 2.. Actually the error is passed to the callback or thrown if there is no callback, not emitted, sorry. Question 1 makes sense.. I'm fine with changing the message and making it more verbose. I just don't see the point.\nFor reference this is the error thrown when you try to write to a closed net.Socket:\n\n```js\n$ node\n\nvar s = new net.Socket()\nundefined\ns.write('foo')\nError: This socket is closed\n    at Socket._writeGeneric (net.js:719:18)\n    at Socket._write (net.js:779:8)\n    at doWrite (_stream_writable.js:387:12)\n    at writeOrBuffer (_stream_writable.js:373:5)\n    at Socket.Writable.write (_stream_writable.js:290:11)\n    at Socket.write (net.js:697:40)\n    at repl:1:3\n    at ContextifyScript.Script.runInThisContext (vm.js:50:33)\n    at REPLServer.defaultEval (repl.js:239:29)\n    at bound (domain.js:301:14)\n```\n\nFeel free to open a PR to improve the error message. It is a semver-major change so it will not be included in any 3.x release.. It breaks tests that check the error message or functions that handle the error based on the error message. Node.js core treats these changes as semver-major.. Here is an example: https://github.com/nodejs/node/pull/3100#issuecomment-201702969\nI actually think it makes sense. You are breaking other people code by doing that.\n\nOn the surface it really looks like you're being intentionally difficult in a passive attempt to dissuade anyone from making a positive change in this case.\n\nOpen a PR, I'm more than happy to merge it and release it in 3.2.1 but I'll redirect any complaint to you \ud83d\ude04. Chances are there are none.. FWIW a similar change (https://github.com/websockets/ws/pull/1036) has been done in a 2.x release with no one ending up complaining.. @shellscape are you suggesting to use custom errors with codes like Node.js?. Yes, I know that, I've reviewed some of those \"migration\" PRs. See https://github.com/nodejs/node/blob/master/lib/internal/errors.js for the actual implementation.\nI'm not sure if it makes sense outside of Node.js though. A major version bump is usually cheap for userland modules.. > I'm assuming that the ArrayBuffer that underlies array gets sent over the wire.\nCorrect, the ArrayBuffer is converted to a Buffer which is then sent over the wire.\nThe issue shouldn't exist as you still get back a Buffer or an ArrayBuffer and it's up to you to handle the endianness if it doesn't align with the server endianness.\n. Is this still an issue?\n. Closing due to inactivity, please reopen if needed.. You can use ws to stream the data for example with something like this:\n``` js\n(function read(readable) {\n  const chunk = readable.read();\nif (chunk === null) {\n    ws.send(chunk, { fin: true });\n    return\n  }\nws.send(chunk, { fin: false }, (err) => {\n    if (err) return handleError(err);\nread(readable);\n\n});\n})(readable);\n```\nbut if files are bigger than the maximum allowed buffer size that won't help much as all chunks are merged together when the stream ends to rebuild the message.\nYou have to split the files into smaller parts and send them individually.\n. I'm going to close this, I also think that a ping/pong keep alive mechanism as the one suggested in the README is more powerful/flexible.\nIf you want the feature suggested in the issue description please open a PR.. It is now possible to limit the maximum size of a message with the maxPayload option.\n. From https://tools.ietf.org/html/rfc6455#section-5.1\n\nA server MUST NOT mask any frames that it sends to the client.\n. You don't need sticky sessions for websockets. The connection is permanent.\n. If a worker dies only the connections of that specific worker will be closed.\n. I just noticed that there is another pull request for this.\n. @yarax can you add a test?\nThank you.\n. @yarax sorry I've seen #483 only now. That may be a better way to handle this.\n. Closing in favor of #483.\n. Closing this as bufferutil and utf-8-validate are no longer installed along with ws.\n. Can you please rebase against master?\nThank you.\n. Merged as ebf86b58f1fb1e96ab96ebf95782bad7bc5ab8ca...d83117d5fbaf2ece7e4ffe575efd486469abc29d.\n\nThanks!\n. There are cases where the only way to detect that a connection has been closed is via a heartbeat system which can be implemented, for example, by sending pings.. @paredesivan https://github.com/websockets/ws#how-to-detect-and-close-broken-connections. @EddieOne's latest comment seems correct to me, closing.. You should add a listener for the error event.\njs\nwss.on('connection', (ws) => {\n  ws.on('error', (err) => {\n    // Handle the error.\n  });\n});\n. We don't have codes for errors but messages and types have been improved in 695c5ea988801ed75c121ad9bc76ed7abd70ccd1. Hope this helps.. In ws bufferedAmount is similar to https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/bufferedAmount but not exactly the same. It is the sum of https://nodejs.org/api/net.html#net_socket_buffersize plus the byte size of any buffer in the Sender queue when permessage-deflate is enabled.\nThe data in the socket buffer (socket.bufferSize) is already framed, so what you get is not the byte size of the original messages but the byte size of the WebSocket frames corresponding to those message.\n10 bytes for a message of 3 ASCII seem a bit too much though. The WebSocket frame size for a message of 3 bytes should be 5 or 7 bytes depending on whether it was masked or not (sent by the server or the client). Perhaps the payload is compressed?. Actually the mask is 4 bytes so the WebSocket frame for a 3 bytes message is 5 or 9 bytes depending on whether the payload is masked or not. The extra byte probably comes from the issue linked above.. I don't know, maybe that's the result of multiple buffered frames (minus the bytes that are written)? Check with plain HTTP first.. Hi,\nI'm not sure why but the same also happens with a plain HTTP server:\n``` js\n'use strict';\nconst http = require('http');\nconst net = require('net');\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World\\n');\n});\nserver.listen(3000, '0.0.0.0', () => console.log('listening on *:3000'));\nserver.close();\nconst socket = net.connect(3000, () => {\n  throw new Error('connected after calling close');\n});\n```\n. If you use\njs\nserver.listen(3000, '::1', () => console.log('listening on *:3000'));\nit works as expected, but if you use\njs\nserver.listen(3000, '127.0.0.1', () => console.log('listening on *:3000'));\nit doesn't and the connection is established.\nAnyway this is not a ws issue. Feel free to file a bug in the Node.js repository.. This can be done by overriding WebSocketServer.prototype.shouldHandle().. Hixie-76 is no longer supported, closing.\n. Is this still an issue?. Ok, please reopen if needed.\nThanks!. Closing this as it's very old. Please comment back if you are still interested in this feature.. Can you clarify what is the issue? delete removes a property from an object, it doesn't delete an object.\n. Closing this in favor of https://github.com/TooTallNate/node-https-proxy-agent or similar alternatives.\nThanks.. @Deathspike The feature you are looking for is available in faye-websocket under the option maxLength, so keep in mind that there are also alternatives.\n. As @Deathspike and @3rd-Eden suggested try to call the broadcast function you created, inside the message listener on the server.\n. You can use verifyClient as suggested by @liviubunda.\n. @r03ert0 \n```js\noptions.verifyClient = (info) => {\n  if (info.req.connection.remoteAddress === IP ) return true;\nreturn false;\n};\n``. Closing this as duplicate of #650.\nThank you.\n. This lib explicitly disables idle timeout on the socket by usingsocket.setTimeout(0);so I think it's unlikely that it will happen.\n. You should add a listener for theerror` event and handle it.\njs\nwss.on('connection', (ws) => {\n  ws.on('error', (err) => {\n    // Handle the error here.\n  });\n});\n. Ref: #787.. Should be fixed on master. Closing, please reopen if the issue persists.. @rradczewski can you reproduce without ws? We call server.close() internally and forward the callback to it.\nAre you calling wss.close() on the same tick?. Yup I was exactly thinking at a race condition between listen() and close(). I guess in Node.js 6 the server is actually bound after the close() call so that's probably why you need that second close() on the next tick.\nThis is just a guess though \ud83d\ude04.. @Xan-Kun no there isn't. In that case you have to stop accepting new connections and close all clients gracefully.\n```js\nconst http = require('http');\nconst WebSocket = require('ws');\nconst server = http.createServer();\nconst wss = new WebSocket.Server({ server });\nserver.listen(3000, () => {\n  // Close all clients with a non default code and reason after 30s.\n  setTimeout(() => {\n    server.close(() => wss.close());\n    wss.clients.forEach((ws) => ws.close(code, reason));\n  }, 30000);\n});\n```. Merged as 060b275d978ff7d095a92863fc3a1f7bcea878ed.\nThanks!. Closing this as duplicate of #551.\n. What @coolaj86 said, closing.\n. Can you please add a test for this? Thank you.\n. @fatelei thank you. LGTM.\n. It seems that you are receiving frames that have reserved bits set to on. This is probably an issue with the client sending malformed frames.\nI close this, please comment or reopen if needed.\n. @binarykitchen the issue you linked is probably caused by NGINX. From http://nginx.org/en/docs/http/websocket.html\n\nBy default, the connection will be closed if the proxied server does not transmit any data within 60 seconds. This timeout can be increased with the proxy_read_timeout directive. Alternatively, the proxied server can be configured to periodically send WebSocket ping frames to reset the timeout and check if the connection is still alive.\n\nClosing this, please comment if needed.. Closing this as it isn't a ws issue.\nI'm not sure how to achieve what you want without using binary frames or adding overhead on both client and server.\n. Closing this as it seems to have been fixed by #566.\n. Closing, please reopen or comment if the issue reappears.\n. Is this still an issue?. Hmm ok, I close this.. Another option is https://www.npmjs.com/package/https-proxy-agent, closing.. Closing this as there is not much to do here.\n. @guymguym thank you for the effort you put here.\nI have one question: Isn't already possible to achieve this with the existing send method?\nThere are some redundant checks but If I'm not wrong it should be possible to do the same by calling send in a loop.\nThe reason I ask this is that I like this feature and I understand its importance but I would like to keep the code base as small as possible. It is already bloated imo.\n. @guymguym you can use the fin option when calling send. For example,\n``` js\nconst bufs = [buf1, bu2, bufn];\nconst opts = { binary: true, fin: false }\nbufs.forEach((buf, i) => {\n  if (i === bufs.length - 1) opts.fin = true;\n  ws.send(buf, opts);\n});\n```\nsends a single message where each buffer is a fragment of the same message.\nThis doesn't work in 1.1.1 as there is bug where the fin option is unconditionally set to true, but it should be fixed in master.\n. @guymguym no, but it should be.\n. @guymguym I think that already works not 100% sure though.\n. 200db3354fed6b97ee0c5bfbf4d37586783fc1c6 slightly improves the documentation for the send method.\n. @guymguym I'm going to close this, sorry. I think that using the fin option is better than adding a new method.\n. It makes sense if the change is not too invasive and does not affect performance.. Sure, thanks!. @dweberlj clients don't have a unique identifier. You can create a unique id in the connection listener and add it to client if you want that.\n. I close this, as this important feature has been already implemented.\nThank you anyway and please comment or reopen if needed.\n. Closing this as I think this is no longer relevant.. Closing as Node.js 0.12 is no longer supported.\n. This happens when there isn't a listener for the error event. You should add one and handle the error:\njs\nwss.on('connection', (ws) => {\n  ws.on('error', (err) => {\n    // Handle the error.\n  });\n});\n. What @McFarts said, closing.\n. I think the best way to work around this is to not specify an encoding when using fs.createReadStream(). In this way each chunk of data is a Buffer which can be passed directly into send. The added benefit is that your data is not converted again into a Buffer inside send() leading to better performance.\nPassing a latin1 (alias for binary) string into send() and checking for the opcode will not have the desired effect as the opcode for a text frame is 1 so you'll end up creating a buffer with utf8 encoding from a latin1 string again which, I think, is not what you want.\n. Closing this, please comment or reopen if needed.\n. By default the server is bound to 0.0.0.0 or any IPv4 address. Can you try using a custom hostname? You can specify it via the host option.\n. Closing this, please comment or reopen if needed.. Closing as this should be addressed in master.. > if (socket_hash[guid1] != socket_hash[guid2])\nis actually very fast and lightweight as you are only comparing two references, way better than comparing two strings.\n. What @varkor said, closing.\n. Fixed in https://github.com/websockets/wscat/commit/4de45ae56f817a37af5a2a689b7e1c59f748e441.\n. This should be rebased and handle cases where readyState is CLOSED, CONNECTING or CLOSING.. Closing for now, please reopen if still interested.. Closing as this has been addressed in 7253f06.. Broadcast performance could be optimized quite a bit.\nCalling ws.send() in a loop will frame the message to broadcast n times where n is the number of connected clients.\nWe could optimize this by framing the message only once and then send that frame to all connected clients. The only problem is that there isn't an API to do this right now.\n. @mafrost yeah, the first step is to extract frameAndSend from Sender to have a standalone function to frame a message. A little work in this direction has already been done in recent changes.\nOnce this is done a very basic \"optimized\" broadcast could be as simple as this:\njs\nconst frame = frameMessage(1, 'message', true, true, true, false);\nfor (const client of wss.clients) client._socket.write(frame);\n. The Sender class now (ws@2.2.0) has a \"public\" static method to frame data. The method returns an array of buffers.\nThis method allows to implement a slightly more efficient broadcast.\n```js\nconst data = Buffer.from('message');\nconst list = WebSocket.Sender.frame(data, {\n  readOnly: false,\n  mask: false,\n  rsv1: false,\n  opcode: 1,\n  fin: true\n});\nwss.clients.forEach((ws) => {\n  if (ws.readyState === WebSocket.OPEN) {\n    list.forEach((buf) => ws._socket.write(buf));\n  }\n});\n```\nThe example assumes that permessage-deflate is disabled. When permessage-deflate is enabled data can be queued so it is not safe to write to the socket directly as this can change the order of messages or even put a spurious frame in the middle of a fragmented message.\nUse this only if know what you are doing.. @ssljivic this shouldn't be an issue. A loop with 500k clients on a single server is already unrealistic.. @ssljivic assume that you have 100k clients. It will take ~2 ms to iterate through them\n```js\nconst arr = new Array(100000).fill();\nconst time = process.hrtime();\nfor (let i = 0; i < arr.length; i++) {\n  arr[i] = 0;\n}\nconst diff = process.hrtime(time);\nconsole.log('%d ns', diff[0] * 1e9 + diff[1]);\n// => 2440435 ns\n```\nmy point is that blocking the event loop for such a small time is not an issue.\nThe library does not force you to use a blocking loop. You can implement an async loop and use it if it's better for your use case.. @adamkaplan nice. There is no API for an optimised broadcast because it really depends on how the data should be broadcasted (https://github.com/websockets/ws/issues/617#issuecomment-283002469).\n\n\npermessage-deflate may be on and in this case there one compressor per socket, so you can't simply broadcast the same frame to all sockets. Also it's tricky to preserve the order of messages unless a queue (like it's done in the Sender class) or sync deflate is used.\n\n\nThe data may need to be changed based on the current socket you are writing to. For example if you are broadcasting data for an exchange, you may need to add additional metadata to specify if any of fills or the placed/closed orders belong to the owner of the socket. In this case you can't blindly broadcast the same frame to all sockets but of course, you can do it for \"anonymous\" sockets.\n\n\nThank you for sharing your experience and code.\nI think the idea behind https://github.com/websockets/ws/issues/617#issuecomment-393400191 is great and an easy to use module to do that (even if it's not cross platform) would be useful to many people.. Agreed, Sender.frame() should be documented (with all caveats), it was added for this exact reason.\nYes permessage-deflate is disabled by default and I suggest to keep it off, see https://github.com/websockets/ws/issues/1369 if you are interested.. No there isn't but you can add a listener for the error event on the server and check for EADDRINUSE.\njs\nwss.on('error', (err) => err.errno === 'EADDRINUSE');\n. Should be fixed on master, closing.\n. @katp4's example should work.\n@EthanRutherford if you use a reverse proxy ws.upgradeReq.connection.remoteAddress will be the IP of the proxy.\n@DubiousDillan the value may be undefined if the socket is destroyed (for example, if the client disconnected).\n. @clearbug wscat has been extracted and moved into its own repo: https://github.com/websockets/wscat.\n. @arkon yes, see https://github.com/websockets/ws/commit/cb1cb6d2e96586c83e908227179daa205b775dbe. Not sure why deploy failed.. This PR offers great flexibility as the keep-alive can be enabled and customized per connection.\nIf the goal is to only find and close no longer active connections, a very simple alternative would be something like this:\n```js\n'use strict';\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\nwss.on('connection', (ws) => {\n  ws.isAlive = true;\n  ws.on('pong', () => ws.isAlive = true);\n});\nconst interval = setInterval(() => {\n  wss.clients.forEach((ws) => {\n    if (ws.isAlive === false) return ws.terminate();\nws.isAlive = false;\nws.ping('', false, true);\n\n});\n}, 30000);\n```\nThe main advantage of this approach is that a single timer is run instead of one per connection.. @john-doherty no but I'm confident that it works ~~, the only gotcha is that ws.terminate() does not make the close event to be emitted immediately (#891). A possible hacky workaround for that is to call socket.destroy()~~.. @websockets/admin what should we do with this PR? Do we want this functionality per connection?\nI would prefer to add something much simpler, similar to the example I posted above, and leave this kind of customization to the user or a wrapper module.\nThe reason I didn't add it yet is because clientTracking can be disabled.\nThoughts?. @elithrar I don't know, I agree that having a built-in keep-alive mechanism would be useful for all users but I'm not sure if it makes sense to customize/enable this per connection.\nI think this level of customization is better suited for a wrapper user land class.\nI prefer to have something simpler which is all or none with the added benefit of running only one timer instead of one per connection.. I'm fine with that.. @elithrar if the failSilently argument is true, ws.ping() does not throw.\nMoreover, if you pull the cord on the client nothing changes on the server, technically the connection is still established on the server. There is no readyState change or anything like that so even if failSilently is false, ws.ping() does not throw.\nThis is why the additional flag, isAlive, is needed in the above example. This is set to false before sending a ping and to true when a pong is received. If isAlive is false before sending the next ping, it means that a pong has not been received and the connection should be closed. . Closing as per https://github.com/websockets/ws/pull/635#issuecomment-291424986. Feel free to continue discussing on the closed thread.. @corporatepiyush it needs to be implemented explicitly.. Take a look at the example in this comment https://github.com/websockets/ws/pull/885#issue-187590719.\n. Closing this as it is fixed in master.\n. This should no longer be an issue. Closing.\n. Hixie-76 is no longer supported. Closing.\n. Closing this as I think this is no longer needed, please comment if this is not the case.. @zz85 is the issue solved? Can this be closed?\n. Closing this as we dropped support for Node.js < 4.\n. I agree with @3y3.\n. @infinity0 can you try with the master branch?\nThanks.. Closing due to inactivity.. @go-oleg Thank you for the report and the test case!\nI can't reproduce the issue in Chrome 55 and Firefox 50.\nMaybe it was a Chrome bug?\nClosing, please reopen if the issue persists.. Ref: #787.. Closing as this isn't a ws issue. You may have better luck asking this on Stack Overflow.\n. A possible way to handle this issue is illustrated here: https://github.com/websockets/ws#how-to-detect-and-close-broken-connections.\nClosing, feel free to continue discussing on the closed thread.. Closing as Hixie-76 is no longer supported.\n. @muxahuk already added a comment in your gist explaining what is wrong in your code, closing.\n. Possible duplicate of #559.\n. I agree with @ericmdantas.\n. @muxahuk are you still interested in adding that static method?. Ok, I close this. Feel free to send a PR if/when you want.. This makes Primus tests fail.\n. The issue is actually in Primus as we are setting arraybuffer also for the Node client. I guess we should fix this in Primus.\n. Did you enable WebSocket on Azure Web Sites?\n. Thanks for the prompt reply, closing.\n. Fixed in 7bec220f9e3650afc5d92c17fb04a949dce0e7fd.\nThanks.. There are cases where the only way to detect that a connection has been closed is via a heartbeat system which can be implemented, for example, by sending pings.. Can you create a test case to reproduce the issue?\nThanks.\n. Closing due to inactivity.. Can you try with ws@beta and see if the issue persists?\nThe bug description is a bit vague but maybe this is a duplicate of https://github.com/websockets/ws/issues/799.\nThanks.. Closing due to inactivity.. Merged as b58f688bf0fa0e87a3cef87c2f5d01bf43590668.\nThank you.\n. It's probably better to fix this in wscat.\nChanging this line https://github.com/websockets/wscat/blob/2a66bd6eebde1b7e6b6803e05fe6e0edc2bb1432/bin/wscat#L178 to\njs\nif (program.protocol) options.protocolVersion = +program.protocol;\nShould be sufficient. Would you mind opening a PR on wscat repo with this change?\nThank you.\n. Fixed in https://github.com/websockets/wscat/commit/4de45ae56f817a37af5a2a689b7e1c59f748e441.\n. Closing as Hixie-76 is no longer supported.\n. It's not a proper changelog but I've added the above link in the releases section for visibility, closing.. Closed as I think this is no longer an issue, please reopen if it's not the case.. Closing this as the stream method has been removed. Take a look at https://github.com/maxogden/websocket-stream for stream support.. @psinghsp yes but you have to queue the \"discrete\" messages if you are streaming another message.\nYou can't mix fragments of different messages, only control frames can be added in the middle of a fragmented message.. @dirkk0 thank you for this patch.\nI find the example a bit redundant as there is a broadcast to all example just above it.\nWhat do you think about adding a sentence to the broadcast to all example explaining that if you want to exclude the sender you have to filter it out from the clients loop?\n. It makes sense. \ud83d\udc4d\n. @dirkk0 sorry to pester but what do you think about changing it to something like this?\n``` js\nvar WebSocketServer = require('ws').Server\n  , wss = new WebSocketServer({ port: 8080 });\n// Broadcast to all.\nwss.broadcast = function broadcast(data) {\n  wss.clients.forEach(function each(client) {\n    client.send(data);\n  });\n};\nwss.on('connection', function connection(ws) {\n  ws.on('message', function message(data) {\n    // Broadcast to everyone else.\n    wss.clients.forEach(function each(client) {\n      if (client !== ws) client.send(data);\n    });\n  });\n});\n``\n. Update the PR when you have time, so we can this merged :)\nThanks.\n. Merged as 78425d0c3360acd67280f33cab89c84a46d3eb0d.\nI hope you don't mind not having \"purple merged status\" on this PR.\nThanks!\n. @eliezergu fixing the example to useexpress@4shouldn't be hard.\nWould you mind sending a pull request?\n. Fixed by #953, closing.. Closing this as @wmsmacdonald explanation is correct, thanks.. @joux3 can you please rebase this?\n. I merge this, it should be easy to revert/fix if we find that something isn't working as expected.\n. Thanks!\n. Is this still needed? We no longer depend onoptionsand are no longer using thevar self = this;` paradigm.. I'm going to close this as there would be a pretty big amount of work only to rebase against master.\nThanks a lot for the effort you put here @andrija-hers.. > Or I must do things simple - because it's almost impossible to sniff traff between web-service and web-server, so all I need is send some secret key in the headers or in the request body?\nI think this is the easiest way. You can also use a query string with a secret:\njs\nconst ws = new WebSocket('ws://myserver.com/?secret=foo');\nyou can then verify the secret with something like this:\njs\nurl.parse(ws.upgradeReq.url, true).query.secret === SERVICE_SECRET\n. Closing this, please post back if needed.\n. I have no idea and it's kinda hard to answer with no background. Can you still reproduce the issue?. Closing due to inactivity.. Is this still a problem? How can we reproduce the issue?. Closing due to inactivity.. @JacksonTian I close this. #874 makes Travis run test coverage.\n. @kurtextrem @stefanocudini do you have a test case to reproduce this issue?. Ops I meant @steffansluis :). Closing due to inactivity.. I agree that the description should be updated but this is kinda funny.\n\nI think I've been pretty much civil he whole time\n\nThis is an excerpt from a deleted comment:\n\nI've read quite a few of these :)\n. Does uws work on all Node.js supported platfroms? Specifically\n|  System      | Support type | Version                          | Architectures        | Notes            |\n|--------------|--------------|----------------------------------|----------------------|------------------|\n| GNU/Linux    | Tier 1       | kernel >= 2.6.18, glibc >= 2.5   | x86, x64, arm, arm64 |                  | \n| macOS        | Tier 1       | >= 10.10                         | x64                  |                  |\n| Windows      | Tier 1       | >= Windows 7 or >= Windows2008R2 | x86, x64             |                  |\n| SmartOS      | Tier 2       | >= 15 < 16.4                     | x86, x64             | see note1        |\n| FreeBSD      | Tier 2       | >= 10                            | x64                  |                  |\n| GNU/Linux    | Tier 2       | kernel >= 4.2.0, glibc >= 2.19   | ppc64be              |                  |\n| GNU/Linux    | Tier 2       | kernel >= 3.13.0, glibc >= 2.19  | ppc64le              |                  |\n| AIX          | Tier 2       | >= 6.1 TL09                      | ppc64be              |                  |\n| GNU/Linux    | Tier 2       | kernel >= 3.10, glibc >= 2.17    | s390x                |                  |\n| macOS        | Experimental | >= 10.8 < 10.10                  | x64                  | no test coverage |\n| Linux (musl) | Experimental | musl >= 1.0                      | x64                  |\nIf not I think the description (fastest crossplatform for Node.js) is still valid as I don't know any other WebSocket implementation for Node.js that have better performance than ws.\nI can't really understand what's the point in comparing Socket.IO with a pure WebSocket server but that's another story.. So now it also properly supports SSL on Windows for Node 4.x? Nice.\nAnyway I've just updated the description to reflect the one in the npm package so hopefully this will come to an end.. > ws doesn't run on AmigaOS so it is not cross-platform either (see the infinite logical error here?)\nHmm no sorry I can't see it. ws runs where Node.js runs (all versions, platforms and features). Anyway we have different opinions so there is no point in keeping this going especially now that the description has been updated.\nGood night.. @KamalAman data can be compressed thus the need for a callback.\nI think this has been fixed in master.. @KamalAman when it's ready\u2122\nI would like to:\n\nComplete the lib/WebSocket.js cleanup and use the class syntax for consistency.\nFix remaining issues when closing the WebSocket connection. Right now if a TCP FIN packet is received while data is being decompressed, that data is lost.\nWrite better docs.\nStart writing a Changelog with all the breaking changes, the bug fixes, etc.\n\nbefore cutting a new release. This is the minimum necessary imho. Other collaborators might disagree or want to add more into the next release.\nThat said any help is greatly appreciated!. Please try ws@2.0.0-beta.0 and report any bugs you come across.. Closing this, please comment or reopen if needed.. There are cases where the only way to detect that a connection has been closed is via a heartbeat system which can be implemented, for example, by sending pings.. @KronKraken Is this still an issue?. Closing due to inactivity.. Look here http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass at the UNIX-domain socket example. The rest of the configuration should be the same.\n```\nlocation / {\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header Host $host;\n    proxy_set_header X-NginX-Proxy true;\nproxy_pass http://unix:/tmp/backend.socket;\nproxy_redirect off;\n\nproxy_http_version 1.1;\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection \"upgrade\";\n\n}\n``\n. Closing this, please comment if needed.\n. I think you question was actually how to make the server listen on a UNIX socket.\nIn that case you can follow the Node.js [documentation](https://nodejs.org/api/http.html#http_server_listen_path_callback) and then pass the server to theWebSocket.Server` constructor.\nHope this helps.\n. @john-doherty yeah an heartbeat system based on server sent pings makes sense. Not before 2.0.0 is released though.. As @michaelsanford said you can use something like this: https://github.com/websockets/ws#how-to-detect-and-close-broken-connections.\nReconnection can be handled with one of the many modules available for this on npm.\nClosing, feel free to continue discussing on the closed thread.. That's correct, there is no auto reconnect.. I've added the compare link in the releases section. It's not a proper changelog but it's better than nothing.. It's the same. From https://nodejs.org/dist/latest-v7.x/docs/api/http.html#http_http_createserver_requestlistener:\n\nThe requestListener is a function which is automatically added to the 'request' event.\n. Can you also show the server code?\nThe close code and reason are set by the other peer via a close frame.. Closing due to inactivity.. @yosheeck thanks. I close this, please comment/reopen if needed.. @lazamarius I recommend to upgrade to ws@2.. @lazamarius it seems that the issue is caused by a wrong? value here https://github.com/websockets/ws/blob/c7bb7306cb0e1d17df141f61a220056eaa5e3502/lib/Receiver.js#L414. Not sure which one though.\n\nIt might makes sense to also use a different Node.js version as it seems, from the comments above, that 6.5.0. was particularly affected.. @FrancooHM socket.io@1.7.3 uses engine.io@1.8.3 which uses ws@1.1.2 not ws@2.. I don't use Socket.IO so I can't really answer.. @FrancooHM if you use ws@>=2 you should be fine will all supported Node.js versions (4+).. Closing this, please comment if needed.\n. Closing this as this is most likely a NGINX configuration issue.. > Should handleProtocols() have access to the upgrade request?\nYes, I think this makes sense.. @Turbo87 a PR for this is welcome.. I've found 2 possible ways to fix this but I'm not sure if they are applicable:\n1 - Remove the this._isServer check from the close method as discussed in https://github.com/websockets/ws/commit/7325d013df15d0a19e8cf049db11a8fa02039e5a#commitcomment-18261193.\n``` diff\ndiff --git a/lib/WebSocket.js b/lib/WebSocket.js\nindex a2f5ff5..767b66a 100644\n--- a/lib/WebSocket.js\n+++ b/lib/WebSocket.js\n@@ -110,7 +110,7 @@ WebSocket.prototype.close = function close(code, data) {\n   }\nif (this.readyState === WebSocket.CLOSING) {\n-    if (this._closeReceived && this._isServer) {\n+    if (this._closeReceived) {\n       this.terminate();\n     }\n     return;\n@@ -125,7 +125,7 @@ WebSocket.prototype.close = function close(code, data) {\n     this._sender.close(code, data, mask, function(err) {\n       if (err) self.emit('error', err);\n\nif (self._closeReceived && self._isServer) {\nif (self._closeReceived) {\n         self.terminate();\n       } else {\n         // ensure that the connection is cleaned up even when no response of closing handshake.\n```\n\n2 - Fake the retrieval of the close frame from the client when maxPayload is exceeded.\n``` diff\ndiff --git a/lib/WebSocket.js b/lib/WebSocket.js\nindex a2f5ff5..8b941ac 100644\n--- a/lib/WebSocket.js\n+++ b/lib/WebSocket.js\n@@ -868,6 +868,7 @@ function establishConnection(ReceiverClass, SenderClass, socket, upgradeHead) {\n   };\nself._receiver.onerror = function onerror(reason, errorCode) {\n+    if (errorCode === 1009) self._closeReceived = true;\n     // close the connection when the receiver reports a HyBi error code\n     self.close(typeof errorCode !== 'undefined' ? errorCode : 1002, '');\n     self.emit('error', (reason instanceof Error) ? reason : (new Error(reason)));\n``\n. The root of the issue is actually the deadReceiver` so I agree with @nkzawa.\n. I've just noticed that the issue happens with any error not only when the maximum payload size is exceeded.\nTest case:\n``` js\n'use strict';\nconst WebSocket = require('ws');\nconst http = require('http');\nconst server = http.createServer();\nconst wss = new WebSocket.Server({ server });\nwss.on('connection', (ws) => {\n  ws.on('error', (err) => {\n    console.log(err.stack);\n    ws.close();\n    server.close();\n  });\n});\nserver.listen(3000, () => {\n  const ws = new WebSocket('ws://localhost:3000');\n  ws.on('open', () => ws._socket.write('foo'));\n});\n``\n. Superseded by #787, closing.. Nagle's algorithm is already disabled, see https://github.com/websockets/ws/blob/4167e5c7997633334fed5ba270567687d4b0b8ce/lib/WebSocketServer.js#L262 and https://github.com/websockets/ws/blob/4167e5c7997633334fed5ba270567687d4b0b8ce/lib/WebSocket.js#L796.\n. @bitliner a client is removed from the list of clients when the ready state is changed toCLOSEDand theclose` event is emitted.\nAfter calling ws.close() a client changes its ready state to CLOSING and starts a closing handshake. This can take some time and if you try to send data when the ready state is CLOSING you get an error.\nAs suggested by @ericmdantas check if the ready state is OPEN before sending data and use a newer version of ws :). I think this is a server issue. The server should send a close frame and wait for a close frame from the client. See https://tools.ietf.org/html/rfc6455#section-7.1.2.\nI think what happens here is that the server sends a compressed frame and then closes the TCP connection. The client receives the frame and starts decompressing it. Then the connection is closed but\n\nThe client didn't receive a close frame\nThe frame has not been decompressed yet\n\nso the WebSocket connection is closed abnormally (1006).\nI think you'll get the same result if you use a different client. Did you try with faye-websocket which also supports permessage-deflate?\nWhen permessage-deflate is disabled the frame is processed before the TCP connection is closed so the message is not discarded but the close frame is still missing and this explains why you still get the 1006 close code.\nThis is kinda bad but I think it is the correct behavior.. > The fact is that data is actually received in both cases (permessage-deflate or not) but the library delivers to the application only when the compression is not used. I spot some inconsistency here...\nYeah I agree, to make it work with permessage-deflate we should ignore the TCP close until all data has been processed or an error while processing occurs. #840 attempted to do this. Now the parser has changed significantly and it may be a bit harder.. cc: @Nibbler999 . @cyrus-and #945 should address this issue. Can you please try installing from gh-799 branch and see if it works as expected on your end?\nThanks.. @mkamioner can you please rebase against master?\nThanks.. @mkamioner sure, take your time!. @mkamioner ping.. Closing this, if anyone is interested please open a new PR.. I think it would be better to turn this into an example and put it in the examples folder.\n@karatheodory are you up for doing that?. I can confirm and reproduce the issue as described by @3490.\nIt happens only when permessage-deflate is enabled and I think the cause is explained here https://github.com/nodejs/node/issues/8871.\n. @leebenson I agree but I think there is not much we can do about it as this is an external issue.. Maybe we should just disable permessage-deflate by default.. @binginto on the first run this is normal, you have to wait for it \"stabilize\". Run it multiple times, if memory does not grow every time, then it works as expected.. @binginto here is an example:\n\nserver.js\n\n```js\n'use strict';\n\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({\n  perMessageDeflate: false,\n  port: 3000\n});\n\nwss.on('connection', (ws) => ws.send('something'));\n\nconst report = () => {\n  gc();\n  const rss = process.memoryUsage().rss / 1024 / 1024;\n  console.log('clients: %d, rss: %d', wss.clients.size, rss);\n};\n\nsetInterval(report, 30000);\nreport();\n```\n\n\nclient.js\n\n```js\n'use strict';\n\nconst WebSocket = require('ws');\n\nlet cnt = 0;\n\n(function create() {\n  const ws = new WebSocket('ws://localhost:3000');\n\n  ws.on('error', err => console.error(err));\n  ws.on('open', () => {\n    ws.send('something');\n    if (++cnt !== 20000) create();\n  });\n})();\n```\n\n\nThis is what I get by starting and killing the process that runs the client multiple times:\n$ node --expose-gc server.js\nclients: 0, rss: 25.859375\nclients: 20000, rss: 202.23828125\nclients: 20000, rss: 171.6953125\nclients: 0, rss: 72.49609375\nclients: 0, rss: 60.27734375\nclients: 18728, rss: 196.94921875\nclients: 20000, rss: 178.66015625\nclients: 20000, rss: 176.77734375\nclients: 0, rss: 73.7890625\nclients: 0, rss: 68.15625\nclients: 19205, rss: 205.9140625\nclients: 20000, rss: 180.65625\nclients: 20000, rss: 175.9375\nclients: 0, rss: 103.140625\nclients: 0, rss: 68.33203125\nclients: 19468, rss: 201.62109375\nclients: 20000, rss: 180.75\nclients: 20000, rss: 177.63671875\nclients: 0, rss: 90.57421875\nclients: 0, rss: 67.6484375\nclients: 19242, rss: 199.44140625\nclients: 20000, rss: 182\nclients: 20000, rss: 177.36328125\nclients: 0, rss: 112.93359375\nclients: 0, rss: 48.7734375\nclients: 0, rss: 48.7734375\nAs you can see memory usage does not grow every time and is stable at ~180 max / ~60 min MiB.. > If a new client connect to server and then closed it .it still oppuied some space ?\nNo, once it is GC'ed the retained memory is freed. You can also verify this by taking heap snapshots.\n\nThis action cost some memory, as time when by , the server will lost all memory and have to restart . Is it true ? if it is true ,the memory leak still exist , is it right?\n\nNo, unless proven otherwise, there is no leak.\nP.S. if you run the above example on Linux with permessage-deflate enabled (perMessageDeflate: { threshold: 0 }), you'll see that there is a leak.. It won't go back to the startup level (~20 MiB), this is how it works.\nThe same happens with a plain HTTP server. When you start the process it uses ~20 MiB. After you use it for a while it stabilizes at ~60 MiB when in idle.. Partially fixed by #1204, closing.. Merged as 078e96a31dd7c1c9fee9f51db806e91db7b5aeac.\nThanks!. @maxcnunes we are getting closer. I don't have an ETA but version 2.0.0 is not too far.. There are already quite a few breaking changes in master. \n\nOn 21 Sep 2016, at 16:56, Joshua Wise notifications@github.com wrote:\nI agree that this should be the case. However, not before the next major version.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Why is a subclass needed?\n. @JoshuaWise I don't get it, mind to write a code example of the issue?\n. I don't see it that way. I think all is needed is documentation. If the end users want to mess with the set they should be free to do so as long as it is a public API. It is already like this with the array.\n. I can't think of a use case atm but I also can't see why it should be forbidden.\nIf you know that a set is returned and you know that it is not a copy it's your responsibility to not mess with it.\n. The verifyClient option should allow you to do this.. @drew-gross you can override isValidErrorCode in the test:\n\n``` js\nconst errors = require('./lib/ErrorCodes');\nconst original = errors.isValidErrorCode;\n// Override isValidErrorCode.\nerrors.isValidErrorCode = () => true;\n// Restore the original value when test is completed.\nerrors.isValidErrorCode = original;\n```\n. Yes, the client does not follow redirects, but if I read the spec correctly \"clients are not required to follow them\".. No, at the moment there is no way unless you monkey patch the code.. @blandinw a possible workaround is to use a proxy which follows redirects.\nA PR to fix the issue is welcome.. If you implement it well I'm more than happy to merge it when I can. As others already said, no one is getting paid to work on this project.\nFYI the WebSocket implementation in most browsers does not follow redirects.. Please take a look at #1490.. I've released 2.0.0-beta.0. Please try it and report any bugs you find.. @bangbang93 is this still an issue in ws@2?. Closing due to inactivity.. @polomsky this is consistent with browsers (at least in recent versions) where both onerror and onclose listeners are called.\nClosing, please comment or reopen if needed. . @8alery I merged it as a432e95fe954ab6eb198cfa3a7dbcab2dcb42709.\nThanks!\n. Closing as this is not supported.. @aryeharmon is this still an issue?. Closing due to inactivity.. I agree with @coolaj86.. It would be nice to see a benchmark but I think it makes sense.\nI would avoid wrapping crypto.randomBytes() in another function though, the mask is only used in one place.\n. The function is probably inlined so yeah there is no overhead but it triggers my OCD :smile:\nAnyway it's up to the maintainers to decide.\n. @JoshuaWise I agree.\n. Merged as 7253f06f5432c76f3e82e2c055fcea08b612d8b2.\nThanks!. I've just created a v1.x branch, can you please submit the PR against that branch?\nThanks.. If we are going to release 1.1.2 I think it makes sense to also backport https://github.com/websockets/ws/pull/810.. Few ideas:\n- [x] Remove support for older versions of the protocol (Hixie ~~and HyBi drafts 07-12~~)\n- [x] Ignore data that is sent along with the upgrade request. If I'm reading https://tools.ietf.org/html/rfc6455#section-1.2 correctly, data transfer should start only when the handshake is completed.\n- [x] Check if the closing handshake (https://tools.ietf.org/html/rfc6455#section-7.1.1) is working as intended (#784).\n- [x] Fix permessage deflate issues (#799).\n- [x] ~~Add proper stream support~~.\n. I don't think we will add proxy support in next release unless someone from the community steps up and makes an awesome PR.\nFor the moment proxy support can be added with a custom agent.\nTake a look a these modules:\n\nhttps://github.com/TooTallNate/node-socks-proxy-agent\nhttps://github.com/TooTallNate/node-https-proxy-agent. ws is quite popular and I wonder if we should go through a beta phase before cutting version 2.0.0. If so I would do it soon so people can start using it and report issues, if any.\n\nThoughts?. @kmansoor cluster already works out of the box.. This is a very simple implementation, but that a look at this example: https://github.com/hashrocket/websocket-shootout/blob/master/js/run-cluster.js. It seems that this issue has been fixed by this commit https://github.com/nodejs/node/commit/b53473f0e7eab68e4bc844474f286d834cbc6fc0.\n. The fix has not been backported to node 4.\n. Closing in favor of #945.. Closing this in favor of #849.\n. It's a bit slower than direct function invocation but the gain with this patch is not that significant.\nAlso there are some deoptimizations that go away with this, check with --trace_opt --trace_deopt.\n. \"Insufficient type feedback for combined type of binary operation\" on expectHeader.\nI should recreate the test as I've deleted it. If you can wait a bit (half an hour or so) I'll do that.\n. [deoptimizing (DEOPT soft): begin 0x1a6a0bb40839 <JS Function expectHeader (SharedFunctionInfo 0x3c5d84dfaf09)> (opt #44) @37, FP to SP delta: 168, caller sp: 0x7fff5fbff218]\n            ;;; deoptimize at 15847: Insufficient type feedback for combined type of binary operation\n  reading input frame expectHeader => node=245, args=3, height=7; inputs:\nThere was another one but I can't reproduce it anymore, the test is simply creating a Receiver instance and adding a binary packet of 200 kb.\n. No, I'm not sure as it seems that expectHeader has nothing to do with function.call() but the other one was on the start function and if I remember correctly it was also complaining about types so I tried with the direct function call.\n. This code has been the same for years so I'm sure there is room for improvements.\n. For completeness here is a benchmark of Function.prototype.call() vs direct call to show that it shouldn't harm anyway:\n``` js\n'use strict';\nconst Benchmark = require('benchmark');\nconst suite = new Benchmark.Suite();\nconst context = {};\nfunction f(a, b) {}\nfunction g(ctx, a, b) {}\nsuite.add('Function.prototype.call()', function () {\n  f.call(context, 1, 2);\n});\nsuite.add('direct call', function () {\n  g(context, 1, 2);\n});\nsuite.on('cycle', function (event) {\n  console.log(event.target.toString());\n});\nsuite.on('complete', function () {\n  console.log('Fastest is' + this.filter('fastest').map('name'));\n});\nsuite.run({ async: true });\n```\n$ node -v\nv6.6.0\n$ node index.js\nFunction.prototype.call() x 43,310,991 ops/sec \u00b10.98% (83 runs sampled)\ndirect call x 61,497,935 ops/sec \u00b10.67% (82 runs sampled)\nFastest is direct call\n. I think that skipping the messageHandler mechanism might change the order of messages.\n. Order is indeed changed. Here is a test case:\n``` js\n'use strict';\nconst ws = require('.');\nconst server = new ws.Server({\n  clientTracking: false,\n  port: 8080\n}, () => {\n  const socket = new ws('ws://localhost:8080');\nsocket.on('message', (message) => console.log(message));\n  socket.on('ping', () => console.log('ping'));\n  socket.on('close', () => server.close());\n});\nserver.on('connection', (socket) => {\n  socket.send('hello');\n  socket.ping();\n  socket.close();\n});\n```\nshell\n$ node gh-848.js \nping\nhello\nWith this said, the overhead added by the messageHandler mechanism is significant and it would be nice to have it turned off when permessage-deflate is disabled.\n. Well one of the nice features of the WebSocket protocol is that the order of messages is preserved. I'm not sure if the order should be respected with ping/pong frames but I would expect that.\n. This is slightly slower on my machine but I like this a lot.\n. > I've submitted some PRs to bl to improve performance.\nNice, that was one of my concerns. If there is a bottleneck in bl we have little control over it. We can only submit patches upstream and hope that they will be accepted.\n. The only thing I don't like about this is that bl is a duplex stream. It may be handy but we are not using it as a stream and it may be a bit too heavy.\nEach WebSocket is an EventEmitter which has a Receiver instance which has a bl instance which is a stream.Duplex stream.\nMaintaining a fork of bl kinda defeat the purpose of using bl in the first place.\nThoughts?\n. @Nibbler999 LGTM \ud83d\udc4d \n. Looks like you are receiving an invalid error code.\nAnyway it shouldn't crash your app if you add an error handler:\njs\nwss.on('connection', (ws) => {\n  ws.on('error', (err) => {\n    // Handle the error.\n  });\n});\n. Yes, removing error handlers is not a good idea.\nAnyway, it seems that client sends an invalid code https://github.com/websockets/ws/blob/c7bb7306cb0e1d17df141f61a220056eaa5e3502/lib/Receiver.js#L682-L685?\n. Rubber stamp LGTM. I think the messageHandlers mechanism was always run to allow more extensions in the future (not only permessage-deflate) but I prefer to refactor later if needed and favor performance now. \ud83d\udc4d \n. This is very elegant but I think that it's better to ignore the data that is passed along with the upgrade request.\nThe RFC says that data transfer should start only when the handshake is complete.\n. Anyway if maintainers want to keep the current behavior this is a nice approach.\n. > The same code is used to handle the upgrade response, so it's worth changing regardless.\nYup, without the unshift \ud83d\ude09.\n. Apart from the comment above (add a reference to the node issue) this LGTM, big +1.\n. The info object should contain a reference to the request object.\n. info.req where req is the full request object. \n. It should be info.req.connection.remoteAddress but if you are using a reverse proxy that is the proxy address.\n. np.\n. Yeah noticed, thanks!\n. @Nibbler999 didn't you receive and invite via email?\n. Now?\n. You can add this info yourself every time a a new connection is established for example using node-uuid.\njs\nwss.on('connection', (ws) => {\n  ws.id = uuid.v4();\n});\nor you can use a query parameter if you want to identify a client when it connects.\njs\nvar ws = new WebSocket('ws://example.com/?token=abc123');\n. @fvukovic \njs\nwss.on('connection', (ws, req) => {\n  const { query: { token } } = url.parse(req.url, true);\n  // ...\n});. @sajadghawami use ws@>=3 or replace req with ws.upgradeReq.. Reread my previous comment, upgrade or use upgradeReq, not both :). Since you are using ws@4 now the original snippet that uses req (https://github.com/websockets/ws/issues/859#issuecomment-362032885) is valid.. Yes that one, on ws@>=3, req can't be undefined so I think there is something wrong with your setup.\nRun npm ls ws to see the installed ws version.. I would say go ahead and merge it.\n. It seems that http.request() does not accept a socket option.\nAm I missing something?\n. @bacek I tried to look into http.clientRequest to see if the socket option was undocumented but I couldn't find it so I applied your patch and tried with something very similar to your example:\n``` js\n'use strict';\nconst http = require('http');\nconst net = require('net');\nconst WebSocket = require('.');\nconst proxy = http.createServer();\nproxy.on('connect', (request, clientSocket) => {\n  const serverSocket = net.connect(80, 'echo.websocket.org', () => {\n    clientSocket.write(\n      'HTTP/1.1 200 OK\\r\\n' +\n      'Proxy-agent: Node.js\\r\\n' +\n      '\\r\\n'\n    );\nserverSocket.pipe(clientSocket);\nclientSocket.on('data', (data) => {\n  console.log(data.toString());\n  serverSocket.write(data);\n});\n\n});\n});\nproxy.listen(() => {\n  const request = http.request({\n    port: proxy.address().port,\n    hostname: 'localhost',\n    method: 'CONNECT'\n  });\nrequest.on('connect', (response, socket) => {\n    console.log(${response.statusCode} ${response.statusMessage});\nconst ws = new WebSocket('ws://echo.websocket.org', { socket });\n\nws.on('message', (msg) => console.log(msg));\nws.on('open', () => ws.send('hello'));\n\n});\nrequest.end();\n});\n```\nThere is no activity on clientSocket so I doubt it works as expected unless I'm still missing something.\n. @bacek { socket } is just a shortcut for { socket: socket } but I tried changing it to the latter and it doesn't make any difference.\n. Closing this in favor of https://github.com/TooTallNate/node-https-proxy-agent or similar alternatives.\nThanks.. It's a callback that is called when the listening event  is emitted on the underlying HTTP server.\n. Closing this. Please comment back if you have more questions.\n. Fixed by #867.\n. Can you please clarify and create an example to reproduce the issue?\nThe above code is kinda messy and hard to read.\nThanks.\n. Closing due to inactivity.\n. @Nibbler999 I didn't look at this yet but applyExtensions was deoptimized. If this works around that results are not surprising.\n. LGTM. We should just make sure that there isn't a performance regression when permessage-deflate is enabled.\n. There is also koa-websocket.. Can you try to disable the permessage-deflate extension?\nPossible duplicate of #804.\n. I'm kinda new to ws codebase so I'm not sure where to look.\nDid you also try to disable client tracking?\nIs it possible to reproduce the issue somehow?\nThanks.\n. @lawlmart were you using ws.onclose = function () {}; on the server?. Can you try with ws@beta and see if the issue persists? Also disable permessage-deflate if you can.\nThanks.. Closing as I can't reproduce the issue. Please post back if you have more info.\nThanks.. @RamIdeas thanks for this patch.\nI think it is better to keep this on hold until the next major version is released. There might be some API changes that should be included in the typings file.\nWhat do you think?\n. It seems that typings are available at https://github.com/DefinitelyTyped/DefinitelyTyped.\nIs there any advantage in adding TypeScript type definitions in this repo?. @elithrar the problem is the same. We don't use TypeScript so the definitions will not be updated by us.\nWe had a similar discussion in Primus https://github.com/primus/primus/pull/537 but definitions there are still broken. Now ws is way more popular so it's totally possible that there will be more involvement. What I don't want is:\n\nmaintain and update the definitions as I'm not qualified to do that.\nship something that is broken.\ncreating patch releases only to fix issues with the definitions (when community find them) as it is a bit tedious. \n\nThis is basically why I prefer to have the definitions in a separate package.. Forgot to say thank you for updating the definitions on DefinitelyTyped.. @websockets/admin yay or nay?\n. I'll merge this tomorrow if there are no objections.\n. Yeah making WebSocket a duplex stream would be the ideal solution.\nWRT this particular change I wonder how many users depend on the removed features. I think not many but I may be wrong.\n. @websockets/admin any more opinions on this?. Another point in favor of this is the existence of modules like https://github.com/maxogden/websocket-stream which has 100k monthly downloads.. dontFailWhenClosed is a boolean argument you can use to prevent ping from throwing an error when ready state is not OPEN.\nIf a peer receives a ping message it automatically responds with a pong message.\n. Autobahn test suite results:\n- server\n- client\n. If I understand your question correctly, you have to create a HTTPS server as specified here https://nodejs.org/dist/latest-v7.x/docs/api/https.html#https_https_createserver_options_requestlistener and pass that server to the WebSocketServer constructor via the server option:\njs\nconst server = https.createServer(options);\nconst wss = new WebSocket.Server({ server });\n. Closing, please comment or reopen if needed.\n. Hi,\nright now you get an ArrayBuffer only when using the addEventListener method, see https://github.com/websockets/ws/blob/95001508cdec29dfe49b9e87a493f9d9f559bcb7/lib/WebSocket.js#L426-L428.\nIf you use on you'll get a Buffer and you have to convert it yourself.\n. I don't understand this issue. Can you please create a reproducible test case?\nThanks.\n. Closing due to inactivity.\n. Closing this as you also filed an issue in wscat repo.\nThanks.\n. The callback is forwarded to the listen method of the HTTP server https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback, so it should just work.\nDo you have a test case to reproduce the issue?\nThanks.\n. Closing due to inactivity.\n. You can use a query string, like this:\njs\nconst ws = new WebSocket('ws://example.com/?id=2JL30&uid=7&name=Johtn');\nthen you can parse the query string in the connection listener:\njs\nwss.on('connection', (ws) => {\n  const data = url.parse(ws.upgradeReq.url, true).query;\n});\n. Whatever works better for you :)\n. @antoniobusrod see the above example. Can't you do that?. \"force new connection\" is a Socket.IO option which has nothing to do with ws.\nI can't reproduce the issue. This code works fine.\n``` js\n'use strict';\nconst WebSocket = require('ws');\nconst ws1 = new WebSocket('ws://echo.websocket.org');\nconst ws2 = new WebSocket('ws://echo.websocket.org');\nws1.on('open', () => console.log('client 1 connected'));\nws2.on('open', () => console.log('client 2 connected'));\n``\n. You have to use a library which implements the WebSocket protocol like https://github.com/theturtle32/AS3WebSocket notXMLSocket.. @websockets/admin WDYT?\n. No problem.\n. In the worst case scenario thecloseevent is emitted after 30 sec, yes, but in normal circumstances the [end`](https://github.com/websockets/ws/blob/e909cf177b3566d638a1aa683640ab1dff32ef6e/lib/WebSocket.js#L785) event is emitted on the other peer.\nUpon receiving this event the other peer closes the connection and this make the same end event to be fired on the peer that called terminate.\ncleanupWebsocketResources is called on the original peer when this event is received and the close event is emitted.\nI agree that this seems cumbersome and unnecessary, especially because terminate is supposed to close the connection immediately. I don't know why it was designed like this.\n. I guess you were using WebSocket.prototype.terminate() to shut down zombie connections as your clients do not send a FIN packet or a close frame right?\nIf so I totally understand your use case.\n. > Is there a problem with ws redirections made by Apache proxy modules?\nYeah this is most likely the issue, but the question is: why the proxy answer with a 302?\n. Can you try to remove this directive?\nProxyPassReverse /wss/ wss://localhost:3333/\n. What is the version of Apache?\nThe first thing to find out is if it is expected for the mod_proxy_wstunnel to answer with a 302 status code.\n. Yes, I use a similar setup in production. The only difference is that I use NGINX instead of Apache and it works as a SSL terminating reverse proxy.\nApache 2.4 is kinda bad as it uses a thread for each WebSocket connection, but this doesn't mean that it shouldn't work. I remember I got it working for a client some time ago.\n. @DigitalLeaves this super simple example works on my machine (no SSL)\n$ httpd -v\nServer version: Apache/2.4.23 (Fedora)\nServer built:   Jul 18 2016 15:38:14\n```\n$ cat 00-proxy.conf \nThis file configures all the proxy modules:\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule lbmethod_bybusyness_module modules/mod_lbmethod_bybusyness.so\nLoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so\nLoadModule lbmethod_bytraffic_module modules/mod_lbmethod_bytraffic.so\nLoadModule lbmethod_heartbeat_module modules/mod_lbmethod_heartbeat.so\nLoadModule proxy_ajp_module modules/mod_proxy_ajp.so\nLoadModule proxy_balancer_module modules/mod_proxy_balancer.so\nLoadModule proxy_connect_module modules/mod_proxy_connect.so\nLoadModule proxy_express_module modules/mod_proxy_express.so\nLoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so\nLoadModule proxy_fdpass_module modules/mod_proxy_fdpass.so\nLoadModule proxy_ftp_module modules/mod_proxy_ftp.so\nLoadModule proxy_http_module modules/mod_proxy_http.so\nLoadModule proxy_hcheck_module modules/mod_proxy_hcheck.so\nLoadModule proxy_scgi_module modules/mod_proxy_scgi.so\nLoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so\n```\nConfig:\n```\n\n  ProxyPass /ws ws://192.168.0.197:3000/\n  ProxyPassReverse /ws ws://192.168.0.197:3000/\nProxyPass / http://192.168.0.197:3000/\n  ProxyPassReverse / http://192.168.0.197:3000/\n\n```\nThe node server:\n``` js\n'use strict';\nconst WebSocket = require('ws');\nconst http = require('http');\nconst fs = require('fs');\nconst server = http.createServer((req, res) => {\n  res.setHeader('Content-Type', 'text/html');\n  fs.createReadStream(__dirname + '/index.html').pipe(res);\n});\nconst wss = new WebSocket.Server({ server });\nserver.listen(3000, () => console.log('listening on port 3000'));\n```\nindex.html:\n``` html\n<!DOCTYPE html>\n\n\n\n\n\nIt works!\n",
    "nicokaiser": "Of course this is a hixie-76 connection, don't know how the server reacts to broken hybi connections, but this is important, we do have lots of broken clients (e.g. by proxies, etc.).\n. This may be because of my own broken patch to #37\n. Update: the 60-minute version is still running, I'll post the results tomorrow. RSS seems to stabilize around 900 MB if I don't stop the clients. Come on, 900 MB (500 of which is garbage!)?! \n. This is 60 minutes with 1 minute pause after each 60 minute run:\n\nMaybe the \"leak\" is no leak but very very high memory consumption...\n. This is WebSocket.IO 10-minute (like the very first chart) with Node 0.6.\nIt's even worse than ws, as it never returns the memory during idle phases.\n\n. @einaros The client ist the one in the Gist \u2013 the client sends 10k at the beginning of each connection. \nA configuration option would be amazing! I'll observe the production server, which is running Node 0.6 right now, if memory usage rise ends somewhere ;)\nI understand that much memory is needed to ensure fast connection handling, however the memory should be freed after some (idle?) time...\n. Well, I open 10,000 clients at the startup, and then open and close 2,000 random clients every minute. So there should be 10,000 clients all the time, but about 20,000 \"connection\" events (and thus, 20,000 initial 10k messages received) during the 10 minutes.\nIsn't the pool released after a client disappers?\n. @einaros then it must be something different (or poor GC), because after each 10 minute period all clients are disconnected, so there should be no buffer left (so even the shared SlowBuffers should be freed by V8)...\n. For comparison, this is WebSocket.IO without ws (backported the original Socket.IO hybi modules) and without client tracking (only clientsCount):\n\nGC seems to run from time to time, but does not catch everything. Maybe interesting for @guille \n. @einaros that sounds great! That's exactly the kind of issues I get \u2013\u00a0growing rss that don't fall back (the difference between heapTotal and rss grow until the process crashes.\n. On the production system, I disabled BufferPools (by using new Buffer - like BufferPool would do with initial size 0 and no growing/shrinking strategy) and validation (by, well, not validating utf8), but this does not solve the problem.\nSo it must be either the buffertool (mask) (I cannot test the JS version from the Windows port, as I'm using Node 0.4) or something else...\n. Another observation:\n- When I make the server do something expensive (e.g. a long for-loop, or sending all connected client objects over Repl) while there are many clients (and many connection open/close operations), the rss tends to be higher after the expensive (blocking) operation. So something might get queued up and never freed...\n. Is there a way to completely avoid the Buffers and e.g. use Strings for testing (I know this is highly inefficient)?\n. @einaros yes, but on a high-traffic websocket server, ws is the place that naturally generates many many Buffer objects. So if we could avoid this (by using strings and making some inefficient, slow operations with them), we could test if the memory problem disappears then.\n. Hm, ok, none of the optimizations had any effect on the very high memory usage \u2013 I assume Node is failing to release unused Buffer memory:\nhttp://cl.ly/1R442g3t2d1T3S152s0i\nDo you think compiling node for ia32 (instead of x64) might change something?\n. Seems like the garbage collector in Node 0.6 is the cuprit:\nhttps://gist.github.com/2362575\n- install weak, ws modules\n- run server: node --expose_gc server.js (to force GC \u2013\u00a0works without but takes longer then)\n- run client a few times: node client.js\n- watch the difference between used objects and GC'ed objects...\n. ... works as expected with Node 0.4.12, but 0.6 seems not to collect all objects but keeps a random count of objects referenced somewhere. This is bad...\n. ... btw, this is no ws problem (websock for example has exactly the same result), but I don't know how to debug this in node ...\n. @3rd-Eden you mean node 0.6? In 0.4 everything works fine for me...\n. @3rd-Eden same for node 0.7.7 (v8 3.9.24.7).\nThe incremental GC is in v8 3.6.5 (node 0.6.14 has 3.6.6) with some improvements in 3.7:\nhttp://code.google.com/p/v8/source/browse/trunk/ChangeLog\nSo this problem will likely stay there in 0.8...\n. @c4milo I'm still trying to get node-webkit-agent running. It's using ws itself, won't this distort the statistics (as I'm trying to debug ws...)?\n. @c4milo can you try these scripts? https://gist.github.com/2362575\nThe server fails to garbage collect some of the socket objects. On the live server (with many thousand connections per minute) this leads to growing memory consumption and makes the process crash after it consumed all RAM.\n. @c4milo: yeah but the question is, in your output, where does the \"13\" come from? why are there 13 objects not being caught by the GC?\n. ... or is this the reference counting errors @bnoordhuis mentions in https://github.com/joyent/node/commit/e9dcfd4bd280fe3e819b2c992f33dad22bb8a967 ?\n. Ok, I found it. It's the defineProperty functions here https://github.com/einaros/ws/blob/master/lib/WebSocket.js#L51\nIf I replace those by regular properties like this.bytesReceived (and don't access bytesReceived through the getter but directly), everything works well without leaks. I'll check this tomorrow as I also have to go now...\n. @einaros: why are you using Object.defineProperty(this, ...  instead of e.g. this.bytesReceived = ...?\n. @guille Or, to protect the keys and prevent them to be changed. However if I change Object.defineProperty(this, 'bytesReceived',  ... to this.bytesReceived = ... all WebSocket objects seem to be garbage collected. \nI'll try to file a node.js bug on this...\n. @einaros No, removing only bytesReceived does not help. I need to replace all Object.defineProperty in the constructor (and use the properties directly in the code). I assume this has something to do with 'self' being referenced in the getters:\nhttps://github.com/joyent/node/issues/3092\nhttps://gist.github.com/2364840\n. I installed ws 0.4.13 on the servers, it seems at least a bit better now. The crashes have gone (default error handlers) and the memory does not grow that fast. \nHowever it's still growing over time, which I account to inefficient Node garbage collector (see node #3097 and #3092 and v8 #2073). I'll keep observing this...\n. @crickeys no improvement with nocrankshaft, I added this switch some days ago.\nThe memory still is not freed \u2013 especially the gap between \"idle server after many connections\" (800mb memory) and \"idle server after restart\" (50-100mb memory) is too high:\nhttp://cl.ly/0Z3r0g1y2V412D3A1Q2b\n(I restarted the server by hand in order to see some improvements I made, but nothing worked. If I keep it running for some days it looks like stairs and crashes when the ram is full (or starts to swap, which is really bad)).\n. @crickeys calling gc() every minute does not help at all, now trying calling it every 10 seconds \u2013 but I don't expect any change...\nAgain, it's mainly RSS memory growing, so I suspect node failing to release buffer memory properly (across all node versions 0.4, 0.6, 0.7). I don't know if this is my application (which I reviewed very carefully) or ws or node. I don't know how to profile RSS memory consumption (heap dumps from webkit-devtools-agent do not help here)...\n. @crickeys Currently the app leaks in 0.4 and 0.6 (but maybe the http/net/ws implementation for 0.4 is buggy). \nBut some months ago I had the same (virtually NO leak at all on 0.4, leak at 0.6). As the current server serves about 20k concurrent clients with 2.000 connection handshakes/closes every minute, node leaks about 100mb per hour, which is very bad for a server I don't want to restart every few hours (as 20k clients would have to reconnect)...\n. Socket.IO uses a different websocket implementation (early predecessor of ws). I tried to abstract its implementation and use it in WebSocket.IO, but this combination also leaked, as well as the (completely different) websock implementation.\nSo I don't think it's a problem of those libraries or our applications, it must be node... but I cannot prove or help the node devs to find and fix the leaks.\n. @crickeys I think (!) mtrace only traces heap allocation. \nAs @einaros said, currently the \"leak\" seems not that bad \u2013\u00a0memory in my server processes went from ~200mb (with 20k clients) to 1.5gb, suddenly fell to 1.2gb for no reason and now rises again. I'll observe if it crashes or swaps.\nHowever I agree @crickeys that this is not normal, the obviously unused memory should really be released by node...\n. Nothing new about the v8 bug: http://code.google.com/p/v8/issues/detail?id=2073 (but maybe this was something different).\nI believe, there are some leaks in node itself, in v8 and in node's http module. Although they are in an acceptable range (as I wrote, currently it's quite ok for me), it's not nice... I think for node 0.9 a rewrite of the http module is planned, so let's wait and see.\n. @crickeys can this make a different if I'm not using https? (only some crypt functions)\nI'm using the bundled libssl (0.9.8 I think).\n. @einaros We changed some things in the infrastructure (split the server, sticky sessions with HAproxy), which causes each server not to have more than ~10.000 connections. The last 2 weeks look like this for one of the servers (node 0.6.16, ws 0.4.13), memory and clients:\n\n\nMemory is at about 1.4 GB per server, with about 9k clients.\nI'll try to keep the servers running (needed to restart them because of an update after these screenshots) to see if memory rises above 2 GB (when swapping kicks in).\n. Update: the installed version I mentioned adds socket.destroy to every socket.end, see https://github.com/einaros/ws/issues/64. Don't know if this makes a difference; I can change one of the servers to use vanilla ws 0.4.14 next week.\n. Confirmed. The process takes lots of memory over time, but this seems like \"node.js is lazy to clean up memory\". A server that actually uses the memory it gets is ok as long as it does not take more than available.\n. @einaros No crashes, but this may be because we reduced the load from our servers and 2 GB memory seem to be enough. \nNo I cannot check this at the moment, but I'm pretty sure, that, while Node allocates 1.5 GB memory, one process will crash if I start another process on this server that uses more than 512 MB.\nFact is that Node, starting from 0.6.x, fails to return unused memory to the kernel, but keeps the RSS (!!) allocated. Which maybe no problem if this Node process is the only thing that runs on the server (and thus is allowed to eat all of its memory), but it's not nice and definitely a bug.\n. No news on http://code.google.com/p/v8/issues/detail?id=2073 by the way ...\n. @3rd-Eden seems to have similar problems: https://twitter.com/3rdEden/status/255327493572132865\n. Maybe related: https://groups.google.com/forum/#!topic/nodejs/KM0Yis-LNpg (thanks @3rd-Eden for the link)\n. @damianobarbati I simplified the application code to avoid retained references, this did already solve the problem. And I switched to uws, which also gave a huge memory advantage.. Hi!\nYes, the GC got much better since Node 6 or 8. I\u2018m trying to remove event listeners on the connection objects etc., but associated data should not be a big problem. You could try to unset these properties in the close event to see if there is a difference, but I doubt there is much impact.\nAlso, disabling the compression made a huge difference back then in my case...\nNico \n\nAm 06.06.2018 um 10:59 schrieb damiano.barbati notifications@github.com:\n@nicokaiser could you show a simplified example about \"avoiding retained references\"?\nI typically associate data to ws object (i.e: ws.token = token) but shouldn't close event and terminate method be enough to have the gc clean up the empty references?\nThanks for helping!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Sorry, I intended to commit the BufferPool change in a different commit. But it does not change anything, but prevents the creation of an empty Buffer object that is replaced by a larger one in the next step anyway, right?\n. I'll try to, currently I'm fighting with git on this...\n. Ok, after some fiddling with git, it should be there now. Sorry for the confusion...\n. Oh ok, so thanks for clarification.\n. ... maybe registering an error handler in 'handleUpgrade' solves the problem of the various \"socket.end\" calls crashing the server when clients unexpectedly close the connection.\n. Well, the errors I'd like to catch are the errors that happen before WebSocket.js is instantiated. This adds only an additional 'error' handler that closes the socket (in case it is not closed by another handler or because the error was fatal). \n. Won't both error handlers be executed when an error occurs?\n. Ok but then it's even more important to have an error handler that shuts down the socket when something goes wrong. After socket.destroy, the \"close\" event is emitted, WebSocket.js will run closeSocket().\n. Ok you're right. But this is a different issue \u2013\u00a0the error I mentioned happens before WebSocket.js is even instantiated, so error handling should be done somewhere in WebSocketServer (as neither the application nor WebSocket.js has the chance to catch the error)...\n\nMaybe add an errorhandler in handleUpgrade and destroy it when WebSocket is instantiated and adds its own handlers?\n. The latest commit removes the \"timeout\" and \"error\" handlers again \u2013\u00a0should be stable without them BUT with the default node http error handlers (node http.ServerRequest automatically sets \"timeout\" and \"error\").\nDoes not remove all error handlers on exit, which prevents strange EPIPE errors that crash the whole application, but removes all handlers that ws adds, so GC should be fine.\n. Ok, so question is still, do we need an initial 1024 byte Buffer?\n. Ok, agreed.\n. As @einaros already mentioned, especially in the handshake sequence, the error handling in ws may have some issues.\nThis is what I observed \u2013\u00a0some connections being stuck in readyState 2, so I added the (quite radical but effective) solution with socket.destroy. This is not very nice (connections should be ended properly) but still better than stuck connection objects.\n. ... see https://github.com/nicokaiser/ws/compare/einaros:master...nicokaiser:95602bcf\n. @einaros I'll update one of the servers tomorrow, looks good!\nI'll then watch if the destroy's I added in WebSocketServer (before a WebSocket object is instantiated) are really needed...\n. @einaros ok, great! I installed ws 0.4.15 (default settings, this time also with default node.js without any nocrankshaft noopt switches), let's see how it behaves.\n. Did not have problems for some weeks now. So considering this as fixed now.\n. Just upgraded to node.js 0.6.18, but I'm not too optimistic... \nI really don't understand when socket.write throws an exception and when it emits an 'error' event. You are try/catching exceptions, so either the write must be delayed, or emitting an error event which is not caught by the default http error handler (https://github.com/joyent/node/blob/master/lib/http.js#L1311) for some reason.\nMaybe a check if the socket is still writable in completeHandshake workarounds this, but I'd like to understand it first...\nLet's see if node 0.6.18 fixes or at least spits out a better backtrace.\n. Update: it crashed again:\n```\nevents.js:48\n        throw arguments[1]; // Unhandled 'error' event\n                       ^\nError: This socket is closed.\n    at Socket._write (net.js:474:19)\n    at Socket.write (net.js:466:15)\n    at WebSocketServer. (/home/wwwdocs/applications/services/webpush/node_modules/ws/lib/WebSocketServer.js:292:16)\n    at /home/wwwdocs/applications/services/webpush/node_modules/ws/lib/WebSocketServer.js:321:25\n    at WebSocketServer.handleHixieUpgrade (/home/wwwdocs/applications/services/webpush/node_modules/ws/lib/WebSocketServer.js:368:3)\n    at WebSocketServer.handleUpgrade (/home/wwwdocs/applications/services/webpush/node_modules/ws/lib/WebSocketServer.js:141:61)\n    at Server.handleUpgrade (/home/wwwdocs/applications/services/webpush/lib/engine/lib/server.js:79:11)\n    at Server. (/home/wwwdocs/applications/services/webpush/lib/engine/lib/webpush-engine.js:47:12)\n    at Server.emit (events.js:88:20)\n    at Socket. (http.js:1521:14)\n```\nNow trying to add error and timeout handlers to the socket before handleUpgrade.\n. So far no crashes, but I'll observe it over the day.\nThese handlers should be in ws as the server should not crash before I (the application) have the chance to react and catch those crashes...\n. Update: still crashes even if I catch the socket's error event. This is really bad.\n```\nevents.js:48\n        throw arguments[1]; // Unhandled 'error' event\n        ^\nError: This socket is closed.\n    at Socket._write (net.js:474:19)\n    at Socket.write (net.js:466:15)\n    at WebSocketServer. (/home/wwwdocs/applications/services/webpush/node_modules/ws/lib/WebSocketServer.js:292:16)\n    at /home/wwwdocs/applications/services/webpush/node_modules/ws/lib/WebSocketServer.js:321:25\n    at WebSocketServer.handleHixieUpgrade (/home/wwwdocs/applications/services/webpush/node_modules/ws/lib/WebSocketServer.js:368:3)\n    at WebSocketServer.handleUpgrade (/home/wwwdocs/applications/services/webpush/node_modules/ws/lib/WebSocketServer.js:141:61)\n    at Server.handleUpgrade (/home/wwwdocs/applications/services/webpush/lib/engine/lib/server.js:79:11)\n    at Server. (/home/wwwdocs/applications/services/webpush/lib/engine/lib/webpush-engine.js:47:12)\n    at Server.emit (events.js:88:20)\n    at Socket. (http.js:1521:14)\n```\n. I have no idea\n- where this happens\n- why there is not 'error' handler (as I'm defining one before handing the socket to handleUpgrade)\nNow I added a check for socket.writable before writing the nonce, let's wait some hours to see if this fixes the problem. Sigh.\n. @einaros: so far it seems so...\nHow would you like to handle it other that that? Seems like node's socket.write is quite a mess, as it can a) throw exceptions b) return false and c) emit an 'error' if something goes wrong... \n. Ok without this patch I get occasional \"Error: EPIPE\" crashes in the application (as the \"write\" happens before the application gets the chance to add an error handler).\nWhen the socket is writable, either the write succeeds, or it fails, but at a time when there is either an error handler (the applications can set one immediately after the handshake) or the connection is already destroyed (invalid handshake, etc.).\n. Ok, but I'm still getting \"Error: EPIPE\" crashes.\n. @einaros You seem to remove all(!) listeners from the socket after closing (in cleanupWebsocketResources), even the default error handler that just destroys the socket. This may cause my occasional EPIPE errors...\nPerhaps (!) this fixes that:\nhttps://github.com/nicokaiser/ws/commit/f5c31d10a69c7075776c3165446adc8cf110472c\nI'll try for a few hours and see if it crashes again...\n. websocket.io does not seem to have this problem, as all sockets are destroyed (!) after close: https://github.com/LearnBoost/websocket.io/blob/master/lib/socket.js#L76\n(while this is not nice at all, this workarounds the above problem)\n. The problem is Socket.end() called in cleanupWebsocketResource does not really close the socket. The socket stays half-open forever.\nhttps://github.com/einaros/ws/blob/master/lib/WebSocket.js#L680\nMaybe this should be if (!error) this._socket.destroy(); as we cannot hope for broken clients properly closing the connection (at least Chrome does not seem to do so)...\n. @3rd-Eden no, #181 did not help here. The destroy() call in #181 only kills broken connections, in this case the end() method is called (which does not end the socket).\n. Yes, I know. So there seems to be a leak. Can you test the server I posted above with Chrome as WebSocket client?\nI'll try to write a test for the ws module, but the tests seem broken for me (DEPTH_ZERO_SELF_SIGNED_CERT)\n. I don't know. Did not find anything usable in other bug reports, and I did not find any information if the Socket.end() behavior has changed since 0.8.\n. @3rd-Eden net.Socket does not have destroySoon, does it?\nChanging the socket.end calls to socket.destroy seems to solve the problem, however completely destroying the socket instead of cleanly ending them is not the nicest way, as @einaros said somewhere else... \n. @3rd-Eden don't know if it's a good idea to rely on internal node methods here... \n. @isaacs The initial issue report can reproduce the problem.\nI did not manage to reproduce the problem with node clients, maybe because node always closes connections cleanly. However if you use the code I posted and make some WebSocket connections from Chrome, then Quit Chrome, the connections stay in CLOSE_WAIT until I restart the server.\n. Example client.js that destroys the socket, leading to a CLOSE_WAIT connection:\n``` js\nvar WebSocket = require('ws');\nvar ws = new WebSocket('ws://localhost:8080');\nws.on('message', function(data, flags) {\n    // the server.js will send us \"something\" on connection,\n    // so we close the connection immediately after we receive this\n//ws.close();\nws._socket.destroy();\n// as we are not a nice client, we destroy the socket,\n// without telling the server via WebSocket protocol\n\n});\n```\nTo reproduce the problem, run server.js (the code in the initial issue report), and run client.js several times.\nThe server will notice that the connections are closed (the close event is fired), but the all the connections stay in CLOSE_WAIT.\nIf the client closes the connection with ws.close() everything works fine, but we cannot assume every client does this (Chrome does not).\n. As @3rd-Eden mentioned, changing the socket.end() in https://github.com/einaros/ws/blob/master/lib/WebSocket.js#L693 to socket.destroySoon() fixes the problem.\nBut I agree on @isaacs using internal functions is not the best way, let's better fix node's socket.end behavior.\n. I'm sorry, I still cannot reproduce this with net.Socket (without ws). \n@einaros can you have a look at the example above? ws seems to use a special combination of callbacks that trigger this problem...\n. ... same for node 0.10.10 ...\n. @piscisaureus Seems like this fixes the CLOSE_WAIT problem.\nHowever there is another thing: when I start the server.js and then client.js it works fine (apart from the CLOSE_WAIT problem for node < 0.10.11). When I start client.js again and again, after some time (maybe 2 or 3 times) the client does not get data from the server.\nDon't know if this is a node bug or something else, would be nice if anyone could try to reproduce this. I'll try this on node 0.8 tomorrow.\n. Yes, joyent/node@e0519ac seems to restore the behavior of node 0.8.x in this case.\n. This seems to be fixed with Node 0.10.11. @brianseeders can you confirm this?\n. @crimsonredmk For me upgrading to Node 0.10.11 helped, so I close this issue.\n. ",
    "martinthomson": "Just running npm.cmd install socket.io.  It's part of a build process that has a controlled environment.  Adding '.' to the path is possible, but not desirable.  Maybe you could create a preinstall.js script that did the necessary magic (I don't fully understand why you need a Makefile) and run 'node preinstall' instead of make.\n. Integrating different build systems is a complicated process.  Obviously, since you have special requirements, you end up with special problems.  Whatever you judge to be the best.\n. ",
    "mraleph": "@3rd-Eden the only suggestion I have at the moment is to repair node-inspector (if it is still broken) and figure out what retains those sockets using heap snapshots.\n. ",
    "c4milo": "@mraleph node-inspector is still outdated. I wrote a module recently to use webkit built-in devtools. It should help them to find this issue.\nhttps://github.com/c4milo/node-webkit-agent\n. uh oh, maybe, although you will find it out analyzing the snapshots.  In my tests running your scripts, server.js seems pretty stable, it didn't go over 28M, client.js is the one that dies.  FWIW, I'm using node 0.6.14 and ws 0.4.12 to run those tests.\n. or maybe I'm missing something, client.js seemed stable too, never went over 35M and I took 8 samples, roughly the same I did with server.js. BTW I'm using these scripts: https://gist.github.com/2152933. Also I think client didn't even died it just reached 10 minutes.\n. @nicokaiser I just profiled the server and only leaked like 1k\nFWIW I'm in OSX.\nconnected: 0, not garbage collected: 0\nconnected: 200, not garbage collected: 200\nconnected: 200, not garbage collected: 200\nconnected: 200, not garbage collected: 200\nconnected: 200, not garbage collected: 200\nconnected: 200, not garbage collected: 200\nconnected: 0, not garbage collected: 13\nsecond run: \nconnected: 200, not garbage collected: 213\nconnected: 200, not garbage collected: 213\nconnected: 200, not garbage collected: 213\nconnected: 200, not garbage collected: 213\nconnected: 200, not garbage collected: 213\nconnected: 0, not garbage collected: 26\nconnected: 0, not garbage collected: 26\nconnected: 0, not garbage collected: 26\nconnected: 0, not garbage collected: 26\n. @nicokaiser in devtools you can compare the snapshots and it will show you the constructors involved in the growth\n. this is how it looks like: http://i.imgur.com/odYea.png . I can help you set up node-webkit-agent if you want @nicokaiser\n. I just saw your messages in irc @nicokaiser, sorry, new irssi installation and I don't have growl notifications yet. Anyway, this link may help you to interpret the results you're getting in the webkit devtools front-end.\n. I have the same issue in production as @nicokaiser. V8 heap looks fine and stable now but the RSS memory keeps growing. I guess it's gdb and valgrind time. :/\n. hm, I doesn't seem normal in my case, v8 heap is 12m and stays around that\nvalue upon every request whereas the RSS size is 200M and keeps growing.\nThat definitely is a leak in C/C++ land.\nOn Apr 24, 2012 1:23 PM, \"Einar Otto Stangvik\" \nreply@reply.github.com\nwrote:\n\nDo note that the RSS rise is normal in itself. Unless the process\nactually crashes, this is all the same issue @nicokaiser reported to the v8\nteam.\nOn Apr 24, 2012, at 6:35 PM, Camilo Aguilar wrote:\n\nI have the same issue in production as @nicokaiser. V8 heap looks fine\nand stable now but the RSS memory keeps growing. I guess it's gdb and\nvalgrind time. :/\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/43#issuecomment-5308910\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/43#issuecomment-5310254\n. yeah, I'm not saying it's a ws thing given that I'm not using it in my server. It seems to be nodejs C/C++ land leaking somewhere. I'll try to dig further once I can have some spare time. \n. It make sense what you are saying but it isn't just normal that a really small http process is holding 1.9G of RSS memory with only 7 clients connected sending messages every second. Something is broken somewhere. The service has been up for about 1 week, it hasn't crashed but it is still holding 1.9G in RSS. It's just no normal.\n. that's a different scenario\n. In this issue we already got rid of the v8 heap leak, the problem is with the RSS weird growth and retention. In issue joyent/node#3179 besides that it's using an external module, @mikeal request, and the client portion of the HTTP module as opposed of the server. The leak is happening in the v8 heap space.\n. nice work @nicokaiser\n. \n",
    "bnoordhuis": "@nicokaiser: It's not related. That was about the event loop aborting prematurely.\n. ",
    "rauchg": "I think he's trying to make the properties non-enumerable. Maybe for spec compliance, but it's definitely not an object you would iterate the keys of.\n. +1\n. <3 @nkzawa \n. @3rd-Eden can you merge please?\n. Haha no worries! I added a check for process.version to not have this happen to anyone. Still a great fix. Thank you @darrachequesne \n. @jancurn probably an older node version? Prior to this patch: https://github.com/nodejs/node-v0.x-archive/pull/7775\n. @SEAPUNK the assertion that crashes the process or an uncaught exception? \n. :+1: \nTested & works perfectly. No more\nnode: ../src/node_zlib.cc:132: static v8::Handle<v8::Value> node::ZCtx::Write(const v8::Arguments&): Assertion `!ctx->pending_close_ && \"close is pending\"' failed.\nAborted (core dumped)\n. ",
    "crickeys": "what happens if you run node without crankshaft on 0.6.* like this\nnode --nocrankshaft script.js\n. What happens if you expose the garbage collector and call gc() every few seconds in a setIntrrval?\n. I've been trying to debug a similar problem in my app for months. If the same code runs in node 4 all is well but as soon as it goes to 6 I have a slow rss memory leak as well. \n. Thats the same type of issue I'm running into. My app is socket.io and I don't think these ws libraries on on the server side yet. Hoping for a common solution.  Very hard to debug memory leaks in node :(\n. Has anyone tried using this to debug?\nhttps://github.com/Jimbly/node-mtrace\n. could it be at all related to this?\nhttps://github.com/joyent/node/issues/3179\n. not if the underlying code is using the http module\n. What version of openssl are you using for these tests? Have you tried with node using a shared openssl 1.0 or greater?\n. according to this: https://github.com/joyent/node/issues/2653   yes\nApparently the crypt function rely on openssl. However, I tried doing this and still have a gradual memory leak with socket.io and websockets enabled. Those also seem to use the crypt functions, but this didn't seem to help there :(\n. Actually, I may not have properly updated libcrypto eventhough I successfully built node with an openssl 1.0.0i. It appears the older 0.9.8 libcrypto is being used by my node. Let me keep playing with this, you may want to try it too as I really don't know what I'm doing here :)\n. Is this problem in socket.io as well?\n. Are there any chances that the fixes you put into the WS library can make there way into the websocket parsers you wrote for socket.io??\n. ",
    "vvo": "Just a quick note the joyent/node#3179 issue does no more use @mikeal request module, just plain http module.\n@nicokaiser Are you saying that my issue is already discussed here : http://code.google.com/p/v8/issues/detail?id=2073 ?\nthanks\n. ",
    "nodenstuff": "Confirmed that its happening again.  Server eventually crashes after running out of RAM.  \nnode 0.8.9\nsocket.io 0.9.10\nExpress 3.0.0.0rc4\n. I enabled flashsocket on 0.9.10 and I didn't run out of ram today.  Might just be a fluke.  But currently hold steady around 2GB total in use, that includes redis and everything else running on the server.  I will update if that changes.\n. ",
    "paiboonpa": "I have just tried with NodeJS 0.9.2 (with a little modification to socket.io 0.9.10 because it cannot find socket.io.js client). This problem still going on. Seem like only way to solve this is use node 0.4.12. :( I want to use native cluster more but seem like I do not have other choice...\n. Good News on rewrite buffer:\nhttps://groups.google.com/forum/?fromgroups=#!topic/nodejs/Vjg7-VHGrnk\nBranch:\nhttps://github.com/joyent/node/tree/crypto-buffers\nBad news:\nThis branch cannot run with MySQL at all. It showed me Access denied even username&password already correct. A hack to fix MySQL issue need and hope it can fix this memory issue.\n. I just setup stud to terminate ssl and now node do not need to process ssl anymore. Now, my memory consumption decrease about 3 times. Maybe this bug relate to using wss via https?\n. ",
    "damianobarbati": "@nicokaiser how did you solve this in the end? I see a very high memory consumption, and when sockets are closed memory is still used (at least most of it).. @nicokaiser could you show a simplified example about \"avoiding retained references\"?\nI typically associate data to ws object (i.e: ws.token = token) but shouldn't close event and terminate method be enough to have the gc clean up the empty references?\nThanks for helping!. @liyuanqiu @lpinca I'm experiencing the same: sometimes when connecting I see the websocket instantiated with readyState=0 but it never emits then a failure in connection, hangs undefinitely.\nAny chance to set a timeout when using new Websocket? \n```\ntry {\n    const websocket = this.websocket = new WebSocket(url);\nconsole.log('done!', websocket.readyState); // sometimes readyState = 0\n\nwebsocket.on('open', this.open.bind(this));\nwebsocket.on('message', this.message.bind(this));\nwebsocket.on('close', this.close.bind(this));\nwebsocket.on('error', this.error.bind(this));\n\n}\ncatch (error) {\n    console.error(error);\n}\n``. Thanks @lpinca, that made the trick \ud83d\udc4d. same here with electron!. Thanks @lpinca !. After reading this past issue https://github.com/websockets/ws/issues/891 I found the following patch but I'm not sure whether it is working or not.\nhttps://github.com/websockets/ws/pull/1033. Why isreconnect()` called twice? \ud83e\udd14\nThe \"close\" event is emitted when my server is restarted and I attempt to reconnect (websocket has to always  be up) right after the \"close\". I see no error in this case (firing again the reconnect()). Oh, this is so bad: there's a \"close\" event also if no \"connect\" was fired/established.\nDo you think the try/catch I just added in the code does prevent this behaviour? No \"close\" handler is attached if the connect triggers error.\nI'm currently temp-fixing the websocket not destroyed behaviour remove handlers from it before reconnect.. ",
    "jwueller": "+1! This is pretty urgent, as socket.io depends on this package an thus cannot be used with node >= 0.7. I created a pull request that fixes this.\n. This got fixed in #47 and can be closed.\n. Are you going to push this change to the npm registry anytime soon? It would make socket.io-client and in turn socket.io compatible with the newer node versions, saving me (and some other people) a lot of headaches :)\n. Awesome, thank you! :)\n. ",
    "rlidwka": "ok\n. ",
    "zacharyc": "Xcode 3.2.6, the latest you can get on Snow Leopard.\n. ",
    "lahwran": "oh also, here is the log file it mentioned: https://gist.github.com/bf825f7206927246ec0b\nit's a bit long, hence why I used gist.\n. ",
    "eagle21st": "Hi,\nI see the issue was posted almost three years ago, is the feature supported now? If so, is it documented anywhere?\nThanks,\n. Second thought this might be an issue for node-gyp, I'm closing this one\n. ",
    "glennschler": "This issue has already been resolved in a previously merged commit which solved several related issues. Includes a passing test \"Custom headers\" in the test/WebSocket.test.js\ncommit 43a0b2b0277d64ffbb58e074b69cb9341923a3d2\nI have been using this custom headers feature in my WS clients without issue, though before realizing this open issue.\n. This happens if you apt-get install nodejs package from Ubuntu. This is not the latest 0.10.x version. Here is a solution which I verified works, as suggested here: project ungit issue 401\nsudo ln -s /usr/bin/nodejs /usr/bin/node\nThough, if you use the recommended Node install procedure for Ubuntu, this issue will also not occur. This will install the latest 0.10.x version, and also resolve your issue.\nJoyent Wiki Installing-Node.js Ubuntu\n. Is it better to instantiate the Websocket with this keepAlive option instead of adding a new public method?\nFor example:\nnew ws.WebSocket(address, [protocols], [options])\n\noptions Object\nkeepAlive Object\nenable Boolean \ninitialDelay Number\n\n\n\nhttps://github.com/websockets/ws/blob/master/doc/ws.md#new-wswebsocketaddress-protocols-options\n. You seem to be doing it correctly. Though, Socket.io already enhances this\nWebSocket implementation with additional support for broadcasting.\nOn Mar 7, 2015 3:51 AM, \"cra0kalo\" notifications@github.com wrote:\n\nHey guys just started using ws how would I only send or broadcast a\nmessage from a client to all other clients except the sender. Theres very\nlittle example code I couldn't find anything.\n//when the client sends a message\nws.on(\"message\", function(message) {\n        console.log(\"Received: %s\", message);\n        server.broadcast(message);\nmy broadcast method has a for each loop currently\nserver.clients.forEach(function(client) {\n        client.send(data);\n}\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/websockets/ws/issues/465.\n. \n",
    "kschzt": "Oh, 'connection' is definitely staying, I just emit the URL-specific one as well, so that I can:\n1. get a server or create a new one\n2. only listen to a particular path in a service and ignore all the others (without having a 'router' in between..)\nThere's no overhead from this if nobody is registered to listen to the URL event.\n. Thanks Einar, I added tests for path-specific 'connection' event and unix socket connections.\n. ",
    "tttthet": "Yup, it seems fixed, thanks!\n. ",
    "kersam-bl": "Yes, of course you are right. The problem that I currently have, is that i receive raw bytes from a socket. The bytes I receive represent UTF-8 strings, but since UTF-8 is a variable length encoding, you will never know if the pieces of bytes you are currently receiving can be encoded as a UTF-8 string. Therefore it would have been handy to just pass the raw bytes to the protocol. It will also be more efficient that to convert the bytes to a string and then again convert the string to bytes.\nFurthermore,  the hybi implementation also supports raw buffers, even if you are sending text messages.\nRegards\n. ",
    "lwille": "I just read #4. It would be better to have the native modules built by default on all platforms supporting them, and fall back to JS on other platforms.\n. ",
    "mscdex": "@einaros I have both installed.\nEdit: I also am able to build other addons just fine.\n. @einaros The problem is I don't see anything wrong with how ws is executing install.js .... I will try and dig some more, but Windows is not my primary platform.\n. That works! Thanks!\n. +1\n. This isn't necessary since npm sets this flag internally and does so when it finds either a \"node-gyp rebuild\" install script or it finds binding.gyp in the root directory of the module.\n. It's because npm is comparing against the exact literal, \"node-gyp rebuild\". IMHO this is a bug in the 'read-package-json' module and that module should be changed to search for the substring instead of performing an exact comparison.\n. I've submitted a PR here.\n. ",
    "chrismcv": "thanks\n. ",
    "michael": "Thanks. That's good to know. I'm working a slightly higher level JSON-based communication protocol to realize realtime applications. Very minimal somewhere between RPC and plain messages, with a straight-forward interface. :)  I'll let you know once a working prototype is ready. I'd be interested in what you think. I could cover some by-example documentation by describing how I solved my problem using the ws module.\nIn order to do a reverse lookup by client-id I need to pollute the ws object, which is not exactly elegant. So I wonder if you'd consider assigning unique client-ids natively (just a counter would be fine). Maybe this makes sense to add to ws directly, shouldn't hurt too much and could be useful in general. What do you think?\n``` js\n// Register client on connect\nopenSession: function(ws) {\n  ws.id = this.numClients += 1;\n  this.clients[ws.id] = ws;\n},\n// Unregister client on disconnect\ncloseSession: function(ws) {\n  delete this.clients[ws.id];\n},\n```\n. Thanks. :)\n. ",
    "vishr": "+1\n. Thanks!\n. Here is the code https://gist.github.com/3405127 (Requires latest express and chrome)\nTo see the behavior you might have to test it over the web.\nPS: That's true, I see the same for a different websocket server (http://autobahn.ws/python)\n. I agree, just now I tested with a different network and the speed is consistent. Probably something to do with network. I am closing the issue for now.\n. ",
    "zsj2145676": "i do need a specefic client id ...   so i could use it after close the client connection\n. ",
    "IonicaBizau": "@einaros Any progress on this?\n. ",
    "gblazex": "+1\n. +1\n. Issue is from 3 years ago.\nDo we have a chance for it to be implemented, or not unless someone from the community picks it up?\n. I've seen this problem come up for about 99% of the people starting to use this library. \nInteresting to note that the WHATWG spec for HTML WebSockets only talks about throwing an error when the socket is in CONNECTING state.\nhttps://html.spec.whatwg.org/multipage/comms.html#dom-websocket-send\n\nThe send(data) method transmits data using the connection. If the readyState attribute is CONNECTING, it must throw an InvalidStateError exception. Otherwise, the user agent must run the appropriate set of steps from the following list: [...]\n. My opinion is that send is inherently asynchronous and it should be left for the callback to handle errors (if needed).\n. +1\n. any update on this or #574?\n. \n",
    "cdupetit": "+1\n. ",
    "Krisa": "I'm doing something very similar, than the example above, just instead of storing a meaningless id, I use the sessionID provided by Express (and then I can do something like clients[req.sessionID].send(...) but this would be great if wss.clients could do that out of the box.\n. I was wondering that too. I'm using express in currently a non clustered environment and everything is fine. But if I cluster the app, this will spawn for each worker a new express server and subsequently a new websocketserver. Unless doing some sticky session, a client connected initially on worker 1, may go on another request on worker 2 and obviously the wss from the worker 2 has actually no clue of the connection initiated on the worker 1 - and it will fail. \nSo, in one of the example in this repository, there is something for the communication between master and its children, and I see that possible that a child send the request to the master, which in turns send that to the client (or to the child where the connection originated from and then to the client) but it feels super complicated for a quite simple problem. Anything easier?\n. @mato75, it's not code specific, but related to how you configure your server. On Heroku, this is how you'd do it: https://devcenter.heroku.com/articles/session-affinity\n. ",
    "XiaoChenYung": "Is there have a solution? Who can give me a URL to lean about this question... ",
    "ry": "sorry, it appears as if this benchmark was not using \"ws\". there is a PR for that https://github.com/ericmoritz/wsdemo/pull/2\n. ",
    "ruxkor": "hmm.. no, I think you are absolutely right, since errors thrown there mean that the module using ws did something wrong, not because of some external factor, but because these modules should e.g. check if the readyState is open before using it.\nthanks for the swift answer!\n. ",
    "clux": "will potentially work very soon :P\nhttps://github.com/einaros/ws/pull/89\n. one more try\nhttps://github.com/einaros/ws/pull/90\nnow it installs, but fails two tests for some utf8 stuff\n. Gotta catcha a train and mocha fails to install as well.\nJudging by the commit log for mocha they should have a fixed version up and running soon. Try pulling then.\n. git clone && npm install work though. @einaros needs to publish a new version : )\n. ",
    "sjonnet19": "This is still not working for me same commander error 0.5.2?\n. Sorry didn't notice the new version hadn't been published +1 for new version.\n. Actually I didn't think of it can you just force a republish of the package. I'll close the pull-request.\n. Thank noticed it was updated.\n. ",
    "Silviu-Marian": "I wasn't using them together. They're just both in the same example but try testing them individually.\n. ",
    "paddybyers": "I'm happy to do a PR, maybe tonight, or happy also if you do it :)\n. ",
    "pje": "Cheers!\n. ",
    "chrisdew": "Solved on StackOverflow: http://stackoverflow.com/questions/11541835/how-can-i-get-expresss-sessionid-for-a-websocket-connection\n. ",
    "jmatthewsr-ms": "reproduced this, pull request: https://github.com/einaros/ws/pull/105\n. Putting this on hold as I believe that a node core fix is the most appropriate.  Buffer can also retain an 8k slab on it's own, ideally node core should emit a buffer that is not backed by any slab.\n. https://github.com/joyent/node/pull/4660\nNot getting very far at the moment though.  If you feel this should be a node core change then please add your comments.  Thanks.\n. Note that this is being worked on in node core: https://github.com/joyent/node/pull/4964. \nThe buffer copy in this fix may not be required once node core buffer is fixed.  The fix here shouldn't hurt performance if left in, but worth checking once node core is updated.\n. ",
    "abalzac": "When I run npm install socket.io, npm complains, \n\nws@0.4.21 install node_modules/socket.io/node_modules/socket.io-client/node_modules/ws\nnode install.js\nsh: node: command not found\n\nSeems like when I try to install socket.io and then it tries to install ws, it strictly runs \"node\" instead of the node binary on the system.\nWhen I do npm config list, it lists the node bin location correctly.\nBy default, when \"install\" is not defined in \"scripts\" in package.json, npm knows to run nodejs, so would you say it is better not to specify this?\n. ",
    "bgSosh": "+1. This could easily block the node message queue, and take down the server.\n. I am seeing this too...\n. +1\n. @3rd-Eden Could you tell me what the binary addons were, and what the performance implications on not using them might be please?  Thanks.\n. Thanks.  So in situations that don't use websocket masks, do you know (very roughly) what kind of a performance gain the binary bufferutil would give over the fallback?\n. +1 would be great.\n. ",
    "euskode": "Agreed. It would also be terrific if we could easily rate limit or delay message processing, via middleware or configuration.\n. ",
    "walterstorm": "+1\n. joaojeronimo I guarantee you that if you pull the network cable the server wont notice\n. OpenGG I wish I could assist you but in fact I am a newbie.\nJust out of curiosity, if you want to accept only text messages (non binary messages) out from the client, what would you do ?\nIf (message) {\n(...)\n?\n. Why not generate a random key ? Timestamp + random stuff\n. please delete this\n. The answer is here: http://goldfirestudios.com/blog/136/Horizontally-Scaling-Node.js-and-WebSockets-with-Redis\n. Port 8100 is set on the Einaros NodeJS WebSocket server.\nI want to allow connections from ws:// only, and disable http:// or any other requests\nThis must be made on server side, not client so the API won't help I would guess\n. Anyone ? I just want to disable this URL http://192.168.64.131:8100\n. delete please\n. ",
    "andvgal": "+1\nIt looks like an easy DoS vector.\n. ",
    "rangercyh": "+1\n. \n\n. ",
    "avesus": ":+1: \n. :+1: \n. The test suite is failing because you have changed some APIs: Receiver (maximumPayload, extensions).\n. Tests have failed because the API is changed. Receiver (extensions) becomes Receiver (maximumPayload, extensions). What is most adequate method to fix that?\n. ",
    "damianb": "Heartbeat check, what's the status of this?  Has this been implemented separately, or is it still to be handled?\n. You should submit a pr with your own example for others to refer to - and the correct way to refer to SSL-protected websockets btw is \"WSS\", if memory serves correct.\n. ",
    "jjp91": "For a server, could it be possible to verify origin of the client connecting and eventually close only one connection that is open.\n. ",
    "nbrownus": "Ping, would be nice to have this.\n. ",
    "possibilities": "looks like this\n    $ sudo npm install meteorite -g\n    npm http GET https://registry.npmjs.org/meteorite\n    npm http 200 https://registry.npmjs.org/meteorite\n    npm http GET https://registry.npmjs.org/meteorite/-/meteorite-0.0.13.tgz\n    npm http 200 https://registry.npmjs.org/meteorite/-/meteorite-0.0.13.tgz\n    npm http GET https://registry.npmjs.org/ddp\n    npm http GET https://registry.npmjs.org/prompt/0.2.3\n    npm http GET https://registry.npmjs.org/underscore\n    npm http GET https://registry.npmjs.org/fstream\n    npm http GET https://registry.npmjs.org/wrench\n    npm http GET https://registry.npmjs.org/optimist\n    npm http 200 https://registry.npmjs.org/ddp\n    npm http GET https://registry.npmjs.org/ddp/-/ddp-0.2.0.tgz\n    npm http 200 https://registry.npmjs.org/prompt/0.2.3\n    npm http GET https://registry.npmjs.org/prompt/-/prompt-0.2.3.tgz\n    npm http 200 https://registry.npmjs.org/underscore\n    npm http 200 https://registry.npmjs.org/ddp/-/ddp-0.2.0.tgz\n    npm http 200 https://registry.npmjs.org/wrench\n    npm http 200 https://registry.npmjs.org/fstream\n    npm http 200 https://registry.npmjs.org/prompt/-/prompt-0.2.3.tgz\n    npm http 200 https://registry.npmjs.org/optimist\n    npm http GET https://registry.npmjs.org/ws/0.4.16\n    npm http GET https://registry.npmjs.org/wordwrap\n    npm http GET https://registry.npmjs.org/graceful-fs\n    npm http GET https://registry.npmjs.org/rimraf\n    npm http GET https://registry.npmjs.org/mkdirp\n    npm http GET https://registry.npmjs.org/inherits\n    npm http GET https://registry.npmjs.org/pkginfo\n    npm http GET https://registry.npmjs.org/read\n    npm http GET https://registry.npmjs.org/revalidator\n    npm http GET https://registry.npmjs.org/utile\n    npm http GET https://registry.npmjs.org/winston\n    npm http 200 https://registry.npmjs.org/ws/0.4.16\n    npm http GET https://registry.npmjs.org/ws/-/ws-0.4.16.tgz\n    npm http 200 https://registry.npmjs.org/wordwrap\n    npm http 200 https://registry.npmjs.org/inherits\n    npm http 200 https://registry.npmjs.org/rimraf\n    npm http 200 https://registry.npmjs.org/graceful-fs\n    npm http 200 https://registry.npmjs.org/mkdirp\n    npm http GET https://registry.npmjs.org/graceful-fs/-/graceful-fs-1.1.10.tgz\n    npm http GET https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.4.tgz\n    npm http 200 https://registry.npmjs.org/pkginfo\n    npm http 200 https://registry.npmjs.org/read\n    npm http 200 https://registry.npmjs.org/revalidator\n    npm http GET https://registry.npmjs.org/read/-/read-0.1.1.tgz\n    npm http 200 https://registry.npmjs.org/ws/-/ws-0.4.16.tgz\n    npm http 200 https://registry.npmjs.org/graceful-fs/-/graceful-fs-1.1.10.tgz\n    npm http 200 https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.4.tgz\n    npm http 200 https://registry.npmjs.org/utile\n    npm http GET https://registry.npmjs.org/utile/-/utile-0.1.3.tgz\n    npm http 200 https://registry.npmjs.org/read/-/read-0.1.1.tgz\n    npm http 200 https://registry.npmjs.org/utile/-/utile-0.1.3.tgz\n    npm http 200 https://registry.npmjs.org/winston\n    npm http GET https://registry.npmjs.org/mkdirp\n    npm http GET https://registry.npmjs.org/i\n    npm http GET https://registry.npmjs.org/async\n    npm http GET https://registry.npmjs.org/deep-equal\n    npm http GET https://registry.npmjs.org/rimraf\n    npm http GET https://registry.npmjs.org/ncp\n    npm http GET https://registry.npmjs.org/colors\n    npm http GET https://registry.npmjs.org/cycle\n    npm http GET https://registry.npmjs.org/eyes\n    npm http GET https://registry.npmjs.org/request\n    npm http GET https://registry.npmjs.org/stack-trace\n    npm http GET https://registry.npmjs.org/options\n    npm http GET https://registry.npmjs.org/commander\n    npm http 304 https://registry.npmjs.org/rimraf\n    npm http 304 https://registry.npmjs.org/mkdirp\n    npm http 200 https://registry.npmjs.org/deep-equal\n    npm http 200 https://registry.npmjs.org/i\n    npm http 200 https://registry.npmjs.org/colors\n    npm http 200 https://registry.npmjs.org/cycle\n    npm http 200 https://registry.npmjs.org/ncp\n    npm http 200 https://registry.npmjs.org/eyes\n    npm http 200 https://registry.npmjs.org/options\n    npm http 200 https://registry.npmjs.org/stack-trace\n    npm http GET https://registry.npmjs.org/options/-/options-0.0.3.tgz\n    npm http 200 https://registry.npmjs.org/async\n    npm http 200 https://registry.npmjs.org/commander\n    npm http 200 https://registry.npmjs.org/request\n    npm http GET https://registry.npmjs.org/request/-/request-2.9.203.tgz\n    npm http 200 https://registry.npmjs.org/options/-/options-0.0.3.tgz\n    npm ERR! error rolling back ws@0.4.16 Error: ENOTEMPTY, rmdir '/usr/local/lib/node_modules/meteorite/node_modules/ddp/node_modules/ws'\n    npm ERR! error rolling back ddp@0.2.0 Error: ENOTEMPTY, rmdir '/usr/local/lib/node_modules/meteorite/node_modules/ddp/node_modules/ws/node_modules/options'\nnpm ERR! Unsupported\nnpm ERR! Not compatible with your version of node/npm: commander@0.5.2\nnpm ERR! Required: {\"node\":\">= 0.4.x < 0.8.0\"}\nnpm ERR! Actual:   {\"npm\":\"1.1.24\",\"node\":\"0.8.8\"}\nnpm ERR! \nnpm ERR! System Darwin 12.1.0\nnpm ERR! command \"node\" \"/usr/local/bin/npm\" \"install\" \"meteorite\" \"-g\"\nnpm ERR! cwd /Users/ion/dev/meteor/my-test-project\nnpm ERR! node -v v0.8.8\nnpm ERR! npm -v 1.1.24\nnpm ERR! code ENOTSUP\nnpm ERR! message Unsupported\nnpm ERR! errno {}\nnpm http 200 https://registry.npmjs.org/request/-/request-2.9.203.tgz\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /Users/ion/dev/meteor/my-test-project/npm-debug.log\nnpm not ok\nMore info here (https://github.com/possibilities/meteorite/issues/26)[https://github.com/possibilities/meteorite/issues/26]\n. ",
    "abh": "commander 1.0.4 installs with 0.8.x, I think this issue can be closed.\n. ",
    "biril": "Agreed, it would be useful (and natural as a design choice I think) to treat WebSocket as a Stream.\n. ",
    "maxogden": "I just wrote this simple wrapper for the client side: https://github.com/maxogden/websocket-stream\nSince I don't see any stream work in this repo yet I'm gonna write a similar wrapper for ('ws').Server connections\n. ok version 0.0.3 of websocket-stream also works on the server, like this:\njavascript\nvar WebSocketServer = require('ws').Server\nvar websocket = require('websocket-stream')\nvar wss = new WebSocketServer({server: someHTTPServer})\nwss.on('connection', function(ws) {\n  var stream = websocket(ws)\n  fs.createReadStream('bigdata.json').pipe(stream)\n})\n. pause-stream does and you can pipe them together\n. yep websocket-stream works in node with ws or in browser with browser\nprovided websockets\nthere isnt currently any off the shelf XHR fallback for streams (e.g. what\nsocket.io provide with its xhr-polling fallback) but hopefully someone\nwrites one soon!\nOn Mon, Feb 25, 2013 at 4:15 PM, Dylan Vassallo notifications@github.comwrote:\n\n@einaros https://github.com/einaros @maxogdenhttps://github.com/maxogdenWhat's the current best practice for using ws (or any node websocket impl)\nas a stream? Is websocket-stream enough?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/einaros/ws/issues/113#issuecomment-14084984\n.\n. P.S. @einaros were you at Web Rebels this year? I was just out in Norway for the first time. Apologies if we met and I don't remember meeting you!\n. I thought about that but it wasn't clear to me how. Can you point me at an\nexample?\n\nOn Sunday, June 16, 2013, Arnout Kazemier wrote:\n\nWhy don't you check for cookies before request is processed?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/einaros/ws/pull/206#issuecomment-19517360\n.\n. ah, OK I see, you have to handle your own server integration manually with\nnoServer. it might help to have an example somewhere showing that in the\nws docs, since the only documentation for noServer is you might enable\nnoServer if you want to pass the requests directly.\n. Here's what I have:\n\njs\n  httpServer.on('upgrade', function (req, socket, head) {\n    var validSession = checkCookies(req)\n    if (!validSession) return socket.end()\n    webSocketServer.handleUpgrade(req, socket, head, function(conn) {\n       // this callback is equivalent to webSocketServer.on('connection',\ncb)\n    })\n  })\nOn Sun, Jun 16, 2013 at 1:26 PM, Max Ogden max@maxogden.com wrote:\n\nah, OK I see, you have to handle your own server integration manually with\nnoServer. it might help to have an example somewhere showing that in the\nws docs, since the only documentation for noServer is you might enable\nnoServer if you want to pass the requests directly.\n. would this get rid of the native dependency on bufferutil too? (e.g. use Buffer.concat instead of Merge) if so then that would be nice\n. @3rd-Eden what would be the downside of removing optionalDependencies from package.json? Users that need the perf boost can still install the optional dependencies manually. Users that don't need it (I would argue this is a larger group) won't see confusing output. Sounds like a win/win to me. \n. Since both of those cases are currently optional, why not ship it without\nthose and have instructions to install them separately? In my opinion\ngetting of the confusing ux of optionalDependencies is more important (and\neasier to fix here than in npm).\n\nOn Tuesday, September 8, 2015, Arnout Kazemier notifications@github.com\nwrote:\n\n@maxogden https://github.com/maxogden The 2 binary addons are there for\n2 different reasons:\n1. the buffer utils includes performance enhancement for buffer\n   operations and websocket masking.\n2. the rfc specification requires UTF8 validation of messages to\n   ensure that nothing bad or broken can be send over the connection, this\n   utf-8 validation could not be done in JavaScript and needed to be written\n   as binary addon. If this is removed the module will no longer be RFC\n   compliant.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/websockets/ws/issues/577#issuecomment-138732813.\n\n\nSent from my phone\n. @mafintosh that's a good idea. The main issue I have with the use of optionalDependencies in this module is that for the numerous modules I maintain that depend on this module I have absolutely no control over it. Would be nice if upstream authors could choose\n. There are also various options ready to go today to handle prebuilt binaries that popular native addons like leveldown, sqlite3 use: https://www.npmjs.com/package/node-pre-gyp https://www.npmjs.com/package/prebuild\nI think using either of the above modules would also help address this issue, but not solve it. I don't think waiting on npm is a good strategy when it can be fixed now.\nI would personally like a way to use ws that never tries to compile anything.\n. ",
    "dylanvee": "@einaros @maxogden What's the current best practice for using ws (or any node websocket impl) as a stream? Is websocket-stream enough?\n. ",
    "olalonde": "Has this been implemented yet? I can't seem to be able to pipe to websocket.\n. I ended up just adding a custom send function that queues messages until a connection exists.\n. No idea... feel free to close :). ",
    "ronkorving": "+1 on this. It's now impossible to stream large amounts of data without the risks that come with the lack of back-pressure knowledge. It doesn't seem to be very hard to make Node run out of memory this way.\n. +1\n. Awesome, thanks!\n. @guymguym actually, that could make a lot of sense imho\n. Overall very happy, but left a few comments. Nothing big.\n. Out of curiosity, will this allow the mixing of strings and buffers over the stream?\n. A pull request is the best way to get this fixed :)\n(but it seems #623 already did this for you)\n. lgtm\n. Should options.binary not be decided for each element in the array instead?\n. I was really going by function logic here, not so much use-case. But an array of strings... unthinkable?\n. It does :+1:\nAwesome job on this PR!\n. I think the \"iovecs\" lingo is not particularly user friendly...\n. You might wanna throw a TypeError instead\n. Are all these comments necessary?\n. ",
    "JoshuaWise": "This functionality is currently implemented by passing a ReadableStream to the ws#send method, or by using the ws#stream method, no? Can we close this issue?\n. I see. I'd like to hear @einaros's 2016 opinion on the issue.\n. It's possible we prematurely closed https://github.com/websockets/ws/pull/602\n. +1\n. This is only the case when you use the WC3 events interface. If you just use the Node.js EventEmitter interface, you can do all the normal event things.\njavascript\nfunction handler(msg) {\n    console.log('received a message.');\n}\nws.on('message', handler);\nws.removeListener('message', handler);\nI guess, for the sake of browser users, there should be a W3C emulated removeEventListener.\n. Pull requests are welcome!\n. I second the importance of this change.\n. The Websockets specification (RFC-6455) dictates that the server MUST NOT send masked data clients, and that clients MUST send masked data to the server. These are the defaults.\nIf you're looking to incorporate some sort of security measure, create your ws server on an HTTPS server.\n. In my opinion, this is the responsibility of application modules or modules that wrap ws. What do others think?\n@3rd-Eden \n@JacksonTian\n. Pull requests are welcome!\n. I agree with using the simple version. I'll check out the PR soon.\n. This is the responsibility of higher-level modules that wrap around ws.\n. If anyone is still experiencing this, please reopen the issue of submit a pull request.\n. +1\n. A server isn't really a server until it's listening for connections. Just don't create the WebSocketServer object until you plan on listening. Alternatively, you can pass your own http.Server object like so:\njs\nvar server = http.createServer();\nvar wss = new WebSocketServer({server: server});\nserver.listen(80);\n. > but if i pass server and port within parametrs it will still create server and would not use mine\nTo make it use your server and not create a new one, you must not pass a port option. Does this help?\n. I'm not sure I understand the problem. Why do you have to pass the port number? If you don't pass the port number, it won't start listening on your server automatically.\n. Ahhh, I finally understand your concern. In order to prevent breaking compatibility, we'd have to add an option like dontListenAutomatically, which would add extra complexity to the already-complex options we have. How about you do something like this:\njs\nvar wss;\ndatabase.connect(function () {\n  wss = new WebSocketServer({port: 80});\n  wss.on('listening', everythingIsReady);\n});\nfunction everythingIsReady() {\n // blah blah blah\n}\n. It seems like your situation was fairly unique, so I'd prefer not to increase the complexity of something that is meant to be a \"time saver\" (the port option). I almost always create my own servers anyways, because it provides me with more flexibility. The port option is really just for the simple cases. Is it alright if I close this?\n. I'm not opposed to something like this. The code is already there, so why not expose it?  I'll write something up later tonight. \n. bump\n. Any objections?\n@JacksonTian \n@3rd-Eden \n. clientTracking: true enables you to use the WebSocketServer#clients property, which is an array of all currently connected clients. The property does not return a safe copy\u2014the array's contents will constantly change as users connect and disconnect.\n. pull requests are welcome!\n. You're looking for server.on('listening', () =>...)\n. This is already supported. It's just not supported by the shorthand .connect method. Use this instead:\nvar ws = require('ws');\nvar option = {\n    headers: {\n        \"WS-Auth-DeviceGuid\": \"xxxxxxxx\",\n        \"WS-Auth-Timestamp\": \"xxxxxxxx\",\n        \"WS-Auth-Signature\": \"xxxxxxxxx\"\n    }\n};\nvar client = new ws('http://api.xxxxxx.cn/websocket/device', option);\nclient.on('open', callback);\n. This sounds like a JavaScript question, rather than a websocket question.\n. Which IP? A server can have many different IP addresses, as there are many different network devices on a typical computer. That's why you have to specify it yourself\n. I agree that this should be the case. However, not before the next major version.\nIn fact, ideally, we make a subclass of Set, where the non-readonly methods are stubbed.\n. Okay, then my next concern it with my comment above:\nIdeally, we make a subclass of Set, where the non-readonly methods are stubbed.\n. I suppose a subclass specifically isn't needed. But the non-readonly methods should be stubbed nonetheless. Otherwise unsuspecting users (people who think the returned Set is a safe copy) won't be at risk of silent memory leaks\n. js\nwss.on('connection', function (client) {\n    wss.clients.delete(client); // I shouldn't be allowed to do this.\n});\n. It's very common for people to expect \"safe copies\" of arrays or sets. Meaning, they expect that the object that is returned will be a copy of the internally-kept original one, which allows them to modify it or do whatever they want with it. However, in our case, this is not the case. The clients object is not a safe copy, so we should explicitly prevent people from modifying the object.\n. When would the user ever want to actually mess with it?\nI know that's how it is with the array\u2014I see it as an oversight that should be fixed\n. I ran sender.benchmark.js...\nBefore:\n```\n  Sender frameAndSend, unmasked (200 kB)\n  3348536.80 ops/sec, 261996 times executed, benchmark took 5.1 sec.\nSender frameAndSend, masked (200 kB)\n  7371.89 ops/sec, 976 times executed, benchmark took 5.085 sec.\n```\nAfter:\n```\n  Sender frameAndSend, unmasked (200 kB)\n  4045681.98 ops/sec, 314701 times executed, benchmark took 5.031 sec.\nSender frameAndSend, masked (200 kB)\n  7438.43 ops/sec, 976 times executed, benchmark took 5.037 sec.\n``\n. What's wrong withconsole.log`?\n``` js\nfunction logData(prefix, data) {\n  if (typeof data === 'string') {\n    console.log(prefix, 'string data:', data);\n  } else {\n    console.log(prefix, 'binary data:', data.length, 'bytes');\n  }\n}\nwss.on('connection', function (client) {\n  client.on('message', function (data) {\n    logData('received', data);\n  });\n  var send = client.send;\n  client.send = function (data) {\n    logData('sent', data);\n    return send.apply(this, arguments);\n  };\n});\n``\n. Sounds like you figured it out. Any objections to closing this issue?\n. I support this gesture. Would like to hear from @JacksonTian \n. After looking into it, we probably can't release another minor version because we've already broken compatibility in many ways when switching to ES6. So our next release will have to be a major version, but we're not yet ready for that yet because there are still things to consider for a major version release. I'll talk to the other maintainers about what we want to include in the major version. In the meantime,npmlets you install specific commits of a GitHub repository, if you really need the work that's been done onmaster`.\n. Oh no! I hope you're okay. You're very important to the JavaScript community, in my opinion. I'd be happy to be a maintainer, if you'll have me.\nHere's a pull request I have on ws, as an example of my code: https://github.com/websockets/ws/pull/811\n. Thank you. I'm happy I can help \ud83d\ude04 \n. try Websocket#ping(), which sends a heartbeat signal to the opposite endpoint. Because it's on the WebSocket layer, it survives through TCP proxies.\n. Ahh, sorry, I misinterpreted your question. You are correct.\n. Nice! Could you run a benchmark before and after so we can see the difference? Surely it will be faster, but I'd like to see by how much. After that I'll merge.\n. Awesome, thank you for contributing!\n. The callback is invoked when the underlying HTTP server is listening for connections. A WebSocket server requires an underlying HTTP server. If you do not supply one yourself (options.server), then one will be created for the given port number (options.port).\n. var WebSocket = require('ws');\n. Oh I see. Good catch. That should definitely be fixed.\n. Using the synchronous version of cyrpto.randomBytes doesn't sit well with me. The event loop could get blocked for as much as a few milliseconds while it waits for sufficient entropy. I think getRandomMask() needs to be refactored into an asynchronous function, to avoid this potential bottleneck.\n. @sequoiar I think that might be a premature optimization. Caching random bytes might be something we do in the future, but we should avoid unnecessary complexity before we've measured the performance impact.\nAs for using the synchronous vs asynchronous version of cyrpto.randomBytes, the synchronous version is almost guaranteed to cause a bottleneck. According to the Node.js docs, a few milliseconds is considered a \"good case\" for how long it might wait for before generating the random bytes. And it could take much longer in \"bad cases\". A few milliseconds is a long time when you're dealing with thousands of connections.\nThe actual generation of the bytes (after it's done waiting for entropy) is likely several orders of magnitude less than a few milliseconds.\n. Ah, you're right, I did misread the docs. Thanks for pointing that out. I'll let the other maintainers chime in if they have any thoughts, but otherwise, LGTM.\n. I agree with @ericmdantas. The function is certainly inlined, and I like self-documenting code.\n. @coolaj86 \nBefore merging I'd like to see the benchmark run before and after this change. Just copy-paste the results here. Surely there will be no noticeable difference, and I think security is more important than performance, but I think it will be nice to see confirmation of what we already suspect.\n. Yeah LGTM. I'll leave this open for another day to give other maintainers the opportunity to chime in. Otherwise I'll go ahead and merge tomorrow.\nThere's a 5% performance loss on the sends that aren't even masked, meaning we can expect at least 5% of random noise. So the 10% loss on the masked sends doesn't worry me. Especially since masked sends are only client-to-server, which are certainly the least important in terms of performance.\n. @3rd-Eden:\n@coolaj86 is right, the system would never run out of entropy and cause an event loop block in this use case (websockets). That being said, there's no harm in making it async to cover our bases and make everyone happy.\n. I think it would be nice for this to be merged before the next big release.\n. Thanks!\n. Those are all good. I'm especially interested in removing support for old protocols (due to security and many other issues). Hopefully the other maintainers agree with me on that.\n. To use WebSockets in a browser, you have to use the native WebSocket global object.\nYou can read about it here: https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n. That's exactly right!\n. Thanks for this!\n. LGTM\n. Thanks!\n. What's wrong with Function.prototype.call?\n. I would think it's faster since direct function calls implicitly pass a thisvariable which is wasted (i.e., the function is passed 3 pieces of data, this and 2 arguments, rather than just this and 1 argument). But I've never tested it, and surely the difference is negligible, so I'll take your word for it. LGTM\n. Before I merge, I'm curious about the deoptimizations. Could you paste the deoptimizations that are removed in this patch?\n. Huh, interesting. I don't think I've ever encountered that deoptimization with Function.prototype.call before.\nSure I can wait for the test.\n. Thanks for do that. It sure does bewilder me though. Do you know why your changes fix that deoptimization?\n. Okay, well my curiosity has been satiated. I'll go ahead and merge now.\n. This looks pretty good at first glance. I'll review it in full tomorrow hopefully.\n. +1\n. Since when was it connection.remoteAddr? The Node.js docs clearly state connection.remoteAddress\n. I fully support this notion.\n. I completely agree.\nHow do you feel about implementing a proper DuplexStream interface to WebSocket? I know there's been a lot of talk about that.\n. This is a Node.js package. Front-end code is expected to use the global WebSocket object, or some wrapper library for it.. Ahh okay, I missed that. Thanks for the clarification.. I thought only compound let statements caused deoptimization?\nsource: http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean. Maybe use === undefined to mirror the behavior of default parameters, so that making the eventual switch doesn't cause any unintended side effects?. Makes sense. I wish there was documentation somewhere for v8's optimizations. It would make things like this so much easier.. ",
    "bmeck": "@JoshuaWise stream doesn't do anything with backpressure / error propagation so idk. At this point though I avoid anything without a real stream interface (this issue is rather ancient).\n. ",
    "dennismartensson": "Is there any example of how to use this with cluster and also multiple servers?\n. ",
    "whadar": "I am looking for the same thing, but can find where to find the IP in _socket. Where is it?\n. _socket.remoteAddress is the way to go\n. ",
    "joaojeronimo": "But the close event will always be fired, even if delayed, when the system crashes or the internet connection goes away right ?\nBecause I'm using it to increment and decrement some counters of users connected to me, and it seems that the numbers are very inflated (I believe there's less people connected). But that also might be because I was not listening to the error event of websockets, and sometimes the app crashed with\nError: Uncaught, unspecified 'error' event.\n    at WebSocket.EventEmitter.emit (events.js:68:15)\n    at Receiver.self._receiver.onerror (/home/node/depl/ss/node_modules/ws/lib/WebSocket.js:542:10)\n    at Receiver.error (/home/node/depl/ss/node_modules/ws/lib/Receiver.js:301:8)\n    at Receiver.processPacket (/home/node/depl/ss/node_modules/ws/lib/Receiver.js:198:12)\n    at Receiver.add (/home/node/depl/ss/node_modules/ws/lib/Receiver.js:93:24)\n    at Socket.firstHandler (/home/node/depl/ss/node_modules/ws/lib/WebSocket.js:500:22)\n    at Socket.EventEmitter.emit (events.js:88:17)\n    at TCP.onread (net.js:395:14)\nSo the app never got to decrement the counters of people who were connected at the time. I hope I stop getting these uncaught errors when I start listening to the error event, because other than that I won't be able to catch the errors...\n. cool! hope to see it working soon.\n. ",
    "martinilevi": "I have the same problem here trying to detect a client that loses connectivity. When there is no proper close on the client side the library just won't notice anything, the ws.send error callback is not called.\n. ",
    "dankle": "We are having a big problem with this in our project as well. Since we can't send PINGS too often we are relying on the ws.send() callback which doesn't work.\n. ",
    "boynet": "+1 \n. thanks, any reason its not got fixed?\n. @3rd-Eden any tips on getting started? just the idea behind it so lets say I have 2 server\nuser1 - connected to server1\nuser2 - connected to server2\nnow user1 do some action and I need to trigger message to user2 how I do this across servers? what the idea of achiving this? in 1 server I just store all users connection in array\n. ",
    "n4ru": "I believe I'm having this issue. non-graceful closes are leading to crashes despite try/catch and on error handlers.\n. ",
    "Mo33n": "+1\n. Y its not still working :-(\n. ",
    "nalvarezdomingo": "You can't be sure of connection sending ping, because this ip can be online but not connected to your websocket.. ",
    "jnardone": "dup\n. Have a few updates to make.\n. ",
    "joemiller": "Any update on this? It doesn't look like this was merged and I don't see any other signs of client SSL cert support yet. Would be a great feature to add.\n. ",
    "machenmusik": ":)\nnote that the sending code here assumes less than 2**14 byte frame length for now\n. hard to test, the only way I've been able to exercise the need for the patches is by hosting a dotcloud application\n. ",
    "slopjong": "I must see what effort has to be done to install a newer version of it than delivered with the brand-new ubuntu.\n. More precisely this is what I was looking for:\nhttps://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager\nBut thanks :-)\n. ",
    "onaclov2000": "just tried npm install ws on ubuntu 12.10, the issue appears to still exist\n. ",
    "pleaseshutup": "Now that IE10 is officially released on windows 7 would you mind giving it a try?\nIt's still busted.\nSCRIPT12008: WebSocket Error: Incorrect HTTP response. Status code 200, OK \n. I have the same results as @Sironfoot \n. Yes IE10 on windows 7\n. ",
    "tmpvar": "I'm seeing the same issue as @pleaseshutup \n. Apparently there must be a trailing slash on the url when creating a WebSocket instance\nOriginally, I was using the following to generate a ws:// url:\nvar wshref = (window.location.protocol === 'https') ? 'wss' : 'ws';\nwshref += '://' + window.location.host;\nBut I was having a hard time filtering it out of the wireshark dump.\nI changed the last line above to wshref += '://' + window.location.host + '/websocket/' (also tried with /) and it now works as expected.\nI tried to find the invalid handshake after getting it to work, and unless I missed something, it appears as though IE10 doesn't even bother making the request unless there is a trailing slash.\n. yeah\n. ",
    "floathybrid": "I am also seeing the same error in Windows 7 IE 10 Version: 10.0.9200.16521IS.  Specifically, I am sending both text and binary messages from server and receiving on client.  Chrome is able to parse okay.\n. Yup, Sironfoot's workaround is working for me too:  trailing slash + characters.\n. ",
    "Sironfoot": "Same problem here. IE10 version is 10.0.9200.16521 running on Windows 7 Pro x64. I have the node.js server running on OSX, with Windows 7 running in a VM (VMware Fusion), so at first I thought it was maybe some sort of network bridge between the host & guest OS's setup by the VM fiddling with the WebSocket connection, but Chrome  & Firefox running inside the Windows 7 VM work fine.\nThe error I get in IE10 is: \"SCRIPT12008: WebSocket Error: Incorrect HTTP response. Status code 200, OK\"\nHow do we get a header dump of a failed handshake?\n. OK, this is weird. I tried tmpvar's suggestion. IE10 seems to insist on something being added after the trailing slash, so...\nws://localhost:3000\n...doesn't work, neither does...\nws://localhost:3000/\n...(note the trailing slash), but...\nws://localhost:3000/xxx\n...does work.\n. ",
    "mrdoob": "That was quick! :)\n. ",
    "sebpiq": "You're welcome !\n. @aaronpropst ! Honestly, I don't remember at all what I did in the end ... don't even remember if I fixed it or not ... really sorry! \n. ",
    "frickelblog": "Oops - duplicate for issue #69\n. ",
    "GoNode5": "ok wrong documentation?\nEvent: 'open'\nfunction () { }\nEmitted when the connection is established.\n. http://web.archive.org/web/20130314230536/http://hobbycoding.posterous.com/the-fastest-websocket-module-for-nodejs\n. ",
    "Gab-Z": "Same problem here, but under ubuntu 12.10.\n\nnode install.js\n\nsh: 1: node: not found\nnpm ERR! error installing ws@0.4.23\nnpm WARN This failure might be due to the use of legacy binary \"node\" \nnpm WARN For further explanations, please read\nnpm WARN /usr/share/doc/nodejs/README.Debian\nnpm WARN \nnpm ERR! error installing socket.io-client@0.9.11\nnpm ERR! error installing socket.io@0.9.11\nnpm ERR! ws@0.4.23 install: node install.js\nnpm ERR! sh \"-c\" \"node install.js\" failed with 127\nnpm ERR! \nnpm ERR! Failed at the ws@0.4.23 install script.\nnpm ERR! This is most likely a problem with the ws package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node install.js\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls ws\nnpm ERR! There is likely additional logging output above.\nnpm ERR! \nnpm ERR! System Linux 3.5.0-19-generic\nnpm ERR! command \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"install\" \"socket.io\"\nnpm ERR! cwd /home/uaio/Documents/node\nnpm ERR! node -v v0.6.19\nnpm ERR! npm -v 1.1.4\nnpm ERR! code ELIFECYCLE\nnpm ERR! message ws@0.4.23 install: node install.js\nnpm ERR! message sh \"-c\" \"node install.js\" failed with 127\nnpm ERR! errno {}\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /home/uaio/Documents/node/npm-debug.log\nnpm not ok\nPerhaps something which only affects people called Gabriel ? :p\n. It failed^^\n\nws@0.4.24 install /home/uaio/Documents/node/node_modules/ws\nnode install.js\n\nsh: 1: node: not found\nnpm ERR! error installing ws@0.4.24\nnpm WARN This failure might be due to the use of legacy binary \"node\" \nnpm WARN For further explanations, please read\nnpm WARN /usr/share/doc/nodejs/README.Debian\nnpm WARN \nnpm ERR! ws@0.4.24 install: node install.js\nnpm ERR! sh \"-c\" \"node install.js\" failed with 127\nnpm ERR! \nnpm ERR! Failed at the ws@0.4.24 install script.\nnpm ERR! This is most likely a problem with the ws package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node install.js\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls ws\nnpm ERR! There is likely additional logging output above.\nnpm ERR! \nnpm ERR! System Linux 3.5.0-19-generic\nnpm ERR! command \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"install\" \"ws\"\nnpm ERR! cwd /home/uaio/Documents/node\nnpm ERR! node -v v0.6.19\nnpm ERR! npm -v 1.1.4\nnpm ERR! code ELIFECYCLE\nnpm ERR! message ws@0.4.24 install: node install.js\nnpm ERR! message sh \"-c\" \"node install.js\" failed with 127\nnpm ERR! errno {}\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /home/uaio/Documents/node/npm-debug.log\nnpm not ok\n. ok thanks, i was wondering if the \"nodejs\" name wasn' cause some problems.\n. ",
    "gaf09": "Now with the upgrade *.24 tells me this:\n\nI try like you said above install nodejs again?\nI installed and uninstalled before but i use the installer of nodejs.org (Windows Installer .msi 64bits), is correctly?\n. @raider5\nForgive the delay in replying. It worked perfectly with System32 in the PATH. Thanks!!!\n. ",
    "raider5": "Hi,\nI'm getting the same issue on Windows 8, is there a fix for this? I'm new to npm errors but the 4 backslashes on this line don't look correct:\n\"npm ERR! command \"C:\\Program Files (x86)\\nodejs\\\\node.exe\"\nHere's my full output:\n\nc:\\ws>npm install ws\nnpm http GET https://registry.npmjs.org/ws\nnpm http 304 https://registry.npmjs.org/ws\nnpm http GET https://registry.npmjs.org/tinycolor\nnpm http GET https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/options\nnpm http 304 https://registry.npmjs.org/tinycolor\nnpm http 304 https://registry.npmjs.org/options\nnpm http 304 https://registry.npmjs.org/commander\n\nws@0.4.25 install c:\\ws\\node_modules\\ws\n(node-gyp rebuild 2> builderror.log) || (exit 0)\n\nCreateProcessW: The system cannot find the file specified.\nnpm ERR! ws@0.4.25 install: (node-gyp rebuild 2> builderror.log) || (exit 0)\nnpm ERR! cmd \"/c\" \"(node-gyp rebuild 2> builderror.log) || (exit 0)\" failed wi\nth 127\nnpm ERR!\nnpm ERR! Failed at the ws@0.4.25 install script.\nnpm ERR! This is most likely a problem with the ws package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     (node-gyp rebuild 2> builderror.log) || (exit 0)\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls ws\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Windows_NT 6.2.9200\nnpm ERR! command \"C:\\Program Files (x86)\\nodejs\\node.exe\" \"C:\\Program File\ns (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"ws\"\nnpm ERR! cwd c:\\ws\nnpm ERR! node -v v0.8.17\nnpm ERR! npm -v 1.2.0\nnpm ERR! code ELIFECYCLE\nnpm ERR!\nnpm ERR! Additional logging details can be found in:\nnpm ERR!     c:\\ws\\npm-debug.log\nnpm ERR! not ok code 0\n. I had another look at this and It turns out the file it can't find is \"cmd.exe\". My PATH environment variable was missing an entry for \"C:\\Windows\\System32\" , I added it back in and all is good. \n@gabrieel09 - You might have the same issue as I did.\n. ",
    "masondx": "I've just been wrestling with this exact issue for about half a day and this is the advice that resolved it for me so a wiki entry would be worth it \n. ",
    "copleykj": "For anyone wishing to still use their OS's package of node the simple solution for this is to determine where node is installed on your OS and then create a symbolic link.\nFor example I had the issue on ubuntu and the install directory is /usr/bin. To create the symlink you can run:\nsudo ln -s /usr/bin/nodejs /usr/bin/node\nin windows you can use the mklink command.. Be sure to open the command prompt as a administrator\n. ",
    "cristianomarjar": "Good! Thanks\n. ",
    "slaskis": "I'm just testing wscat with Chrome 25.0.1364.29 dev and Chrome 26.0.1384.2 canary and both fail with this error:\nWebSocket connection to 'ws://localhost:8081/' failed: A server must not mask any frames that it sends to the client.\nWhat I did was to start with wscat --listen 8081 then using this little snippet:\n```\n  var ws = new WebSocket('ws://localhost:8081');\n  ws.onopen = function(){\n    trace('WS open')\n    ws.onmessage = function(m){\n      trace('WS message')\n      trace(m)\n}\nws.onerror = function(e){\n  trace('WS error')\n  trace(e)\n}\nws.onclose = function(){\n  trace('WS close')\n}\n\n}\n```\nit connects then just enter something in the REPL and press enter and it get's disconnected...\n. ",
    "corysimmons": "I got the same error doing the same thing. Not sure if it's on Meteorite's end.\n. ",
    "hanxue": "Note: I have looked at Issue #76 that unfortunately does not include the details of the error or the solution. I have just performed a clean install of Node v0.8.16 (64 bit) the day before, and able to use npm to build and install other modules. \n. ",
    "wideblue": "@hanxue\nI had a similar error while trying to  \"npm install -g testacular\" . After looking at this http://magic-smoke.blogspot.com/2012/07/building-pyliblo-on-windows-using.html where error C1083 is discused I decided to install VS Express for desktop which includes  C++ compiler. After VS installation  the npm install went without a problem. I know that installation of whole VS was probably an overkill, but I'm not C++ programmer and I don't know all the  catches of setting up C++, so I tried brute force approach.  \nmy system: Win 8 64\n. ",
    "mistaguy": "Finally i was able to create a secure websocket server but i still insist the examples should be on Readme\n. ",
    "aeosynth": ":+1:\n. ",
    "InstantWebP2P": "@einaros \nbut, sometimes the first websocket server created directly instead of http server. \n. ",
    "emidelgo": "Perfect! Thank you!!\n. ",
    "gwebbgit": "This solution seems to be to make a wrapper function, is that correct?\nIf so, does that mean there is no \"native\" way to change or remove handlers, only to assign additional handlers?\nThanks.\n. ",
    "trevnorris": "for anyone who might want to test, the SlabAllocator has been completely removed from my working branch (https://github.com/trevnorris/node/tree/buffer-buffet). Would be interested to know if this fixes the memory leak.\n. ",
    "endel": "@einaros @geoffreyd I have exactly the same question. Sorry for replying to such an old thread, but did you managed to get this working?. Awesome, thanks @lpinca !. This is not strictly related to websockets/ws, but I'd really appreciate if you guys can give me some direction.\nI managed to pass the WebSocket connection successfully in the upgrade callback - it's where I can be sure we have an actual WebSocket connection.\njavascript\nserver.on('upgrade', (request, socket, head) => {\n  worker.send([Protocol.PASS_WEBSOCKET, {\n    headers: request.headers,\n    method: request.method,\n  }, head], socket);\n});\nThe problem, though, is when I have a regular HTTP request and I want to balance it differently. Ideally, I'd use the server.on('connection', ...) callback to pass every connection, but apparently, it's not possible to determine if the connection is a WebSocket at this point.\nI basically need to have different balancing for regular HTTP requests and WebSocket requests. Any idea? \ud83d\ude05 . Not sure if that's the best way to handle this, but I've managed to successfully redirect the \"request\" from master to worker process by re-creating the request in the worker process. \nhttps://github.com/gamestdio/colyseus/commit/cc18f9e7b848a77ba474e54efc14fd706d9648db\nUPDATE: it starts to get a bit hacky to forward the request body as well:\n- master process: https://github.com/gamestdio/colyseus/blob/fd7206f8be3c2ce517c6b3dfdb074eb14f911d2d/src/ClusterServer.ts#L45-L57\n- worker process: https://github.com/gamestdio/colyseus/blob/fd7206f8be3c2ce517c6b3dfdb074eb14f911d2d/src/cluster/Worker.ts#L89-L109\nThis plays nicely with express's request body parsers. Not sure what's the drawbacks of doing this yet. . I like this proposal https://github.com/websockets/ws/issues/1256#issuecomment-355536426\nThe error looks like a bug in the library since it started to happen recently.. The same behaviour can be observed on uws library.. I see, thanks a lot @lpinca! You're always so helpful! <3 . ",
    "elithrar": "Note that I believe you should call socket.pause() prior to child.send \u2014 and then call socket.resume() inside the message event emitted within the child process/worker.\nThis is to mimic the behaviour you would get with net.Server with pauseOnConnect: true, which prevents continuing to read any data in the master process.\n(Correct me if otherwise here). Good point. I'd read the spec before, but hadn't interpreted the handshake\nboundaries as strictly -\n\nOnce the client's opening handshake has been sent, the client MUST\nwait for a response from the server before sending any further data.\n\nOn Mon, May 29, 2017 at 12:17 AM Luigi Pinca notifications@github.com\nwrote:\n\nThere should not be any data on the socket during the handshake apart from\nthe headers. The spec says that no data should be exchanged before the\n'open' event.\nThe parent process reads the request headers and the child process writes\nthe response headers so I think it's fine also without pausing/resuming the\nsocket.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/issues/154#issuecomment-304590365, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AABIcE4wSMfYSkC-yHBgUJbkJhVXaZx1ks5r-nEHgaJpZM4AYjo0\n.\n. @lpinca - I can likely pick up this PR and resolve any outstanding {merge, design} issues, although the example you posted above is arguably a better (simpler) implementation.\n\nMaking it trivial to maintain keep-alives/send pings to the Set() of connected clients would definitely benefit package users.\nThoughts?. To clarify, I'm proposing a mechanism that:\n\nis set up once on server initialization\nautomatically loops over the connected clients\npings them every X seconds\nremoves clients from the set when ws.ping throws\n\n(as simple as possible)\nThis would likely just be implicitly provided when clientTracking: true, but I'm open to making it an additional opt-in (e.g. keepAlive: true or similar).. OK, great (and thanks for the quick replies!). I'll put together a PR shortly.. Working through this and trying to test (manually, at first) whether ws.ping throws an exception - \ne.g. inside the Server constructor itself -\n```js\n        this.heartbeatInterval = 20\n    setInterval(() => {\n        this.wss.clients.forEach(ws => {\n            try {\n                console.log(\"heartbeat event fired\")\n                ws.ping(\"\", false, true)\n            } catch (e) {\n                console.log(\"terminating dead client\")\n                ws.terminate()\n            }\n        })\n    }, 1000 * this.heartbeatInterval)\n\n```\n\nEven if I abruptly cut off a (Node) client or call ws.terminate() I never see an error thrown\nThe heartbeat events do stop, so the client is being cleaned up correctly\n\nWhat am I missing here? Note that this implementation is more naive than the PR here, in the sake of simplicity, as we don't do the ping <-> pong dance with setTimeout/clearTimeout per-client. \n. Just to re-assess this a few months later: the type definitions are out of date, and having them in the library by default can make that easier to identify, fix and review by those most across the codebase.\nI'm going to fix the ones in DefinitelyTyped\u2014many of the events don't have the http.IncomingRequest object added\u2014but I can also create PR here and add the types property to package.json.\n@lpinca Of course, it's your repo, so it's your decision!. @lpinca - understood. I've fixed them here - https://github.com/DefinitelyTyped/DefinitelyTyped/pull/16775 - you are welcome to give them a quick review (if you have the time).. ",
    "FunFetched": "Just tried @lpinca 's solution in my own project, and it works great. There's just one caveat; the following line:\nwss.handleUpgrade(request, socket, undefined, (ws) => {\n... throws the following error for me:\nif (head.length > 0) socket.unshift(head);\nTypeError: Cannot read property 'length' of null\nI was able to fix it by exchanging undefined for []. ",
    "avbel": "Get same error on Windows 8 with Russian locale\n. ",
    "sassembla": "Sorry, It's my misstake!\nI could add \"Origin\"\n. ",
    "isaacs": "Putting off 0.9.9 release for this issue.\n@einaros If you have any insights into what specifically changed in the interface to cause this, please let me know.  Please do not simply work around it, even if it's trivial or easy to do so!  It'll break someone else, as well, I'm sure.\nMy morning is quite a bit later than yours, so if you find anything, I'll see it in the morning, and make sure the fix gets into the 0.9.9 release.\nThanks!\n. This is fixed in node 0.9.9\n. @tarunkohli @3rd-Eden This sounds like potentially a bug in node itself.  Can you please post your example program and test method in a new issue over at https://github.com/joyent/node/issues?\n. Using destroySoon is not a good idea.  We've been planning for a long time to remove or rename that function, because it's really confusing.  But the fact that it fixes the error is good information.\nAgain, can anyone point me at a minimized test case where this happens reliably?  There's mention of such a thing in this thread, but I haven't been able to reproduce it.  I'd really like to get this fixed properly.\n. @brianseeders I'm sure that it is.  Do you have a test case that can reproduce it?  Are you the client or the server?\nIf you'er the client, what server are you connecting to?  If you're the server, where are the connections coming from?\nI'd love to fix this, but don't have anything more than anecdotal reports, so it's pretty hard to track down.\n. ",
    "indutny": "Found the source of problem, I guess StringDecoder/Encoder in streams2 does something incorrectly. Basically, ws is doing odd-job here by calling: .write(new Buffer(...), 'binary', cb), and resulting bytes are not the same bytes that was.\nSee https://github.com/joyent/node/issues/4727\n/cc @isaacs @TooTallNate\n. ",
    "abalandin": "oops! just noticed that i'm not alone :) https://github.com/einaros/ws/pull/157\n. ",
    "nabeelio": "I think I've got this solved, but I can see what's breaking it. My \"base class\" is also an EventEmitter. When I do this:\nthis.ws.onerror = function(err) {\n    self.on_error.apply(self, arguments);\n};\nIt runs fine. Now when I do this:\nthis.ws.onerror = function(err) {\n    self.emit('error', err);\n    self.on_error.apply(self, arguments);\n};\nIt will go with the above behavior and break. I know I'm missing something obvious...\n. So any events emitted out of error cause all of the events to be removed, even though I've instantiated a new EventEmitter that is in the local scope.\n. ",
    "CarloAl": "Sorry to bring back this old issue, but I was wondering if in the meantime something similar to socketIO reconnect has been implemented.\n. ",
    "Bomper": "@CarloAl: 3+ years later, what's the current way to have a socket automatically reconnect using socket.io?\n@3rd-Eden: Primus and socket.io seem overkill for the simple task of reconnecting to a websocket. What are the current thoughts on providing that functionality in ws? Other modules trying to do this, don't always succeed.. @lpinca: that's only for verifying as a server, that the client is still connected. How about reconnecting, as a client, when the connection no longer sends data for a while?. @lpinca: that's what I did in this sample, but it's not that straightforward to reconnect. Not even reconnecting-websocket manages to.. Reconnecting a client has already been discussed in #163.. @Jakobud: this was discussed in #431 . ",
    "pschmerge": "This is great. I getting ready to create a pull request for some changes I made to allow easy configuration of server side TLS/SSL support.\n. ",
    "vojtajina": "@einaros Any updates on this ?\nI can see this failure on my Linux machine as well (Googlified Ubuntu 12.04.1 LTS).\n. It's more likely caused by an NPM bug https://github.com/isaacs/npm/issues/2907\n. You can close this issue. It has been fixed in Node and NPM (since 0.10.2).\n. ",
    "dignifiedquire": "Great. Sorry for the confusion. \n. ",
    "NodeGuy": "Thanks for your contribution.  Please add a test for the new feature.\n. __defineGetter__ is non-standard and deprecated.  You can use Object.defineProperty instead.\n. ",
    "arlolra": "@BallBearing Good point. Tests added.\n. @makkedude #168 was merged a few months ago, though there hasn't been a release. Try running the head of master.\n. bufferedAmount has been implemented already, there just hasn't been a release yet.\nSee: https://github.com/einaros/ws/blob/master/lib/WebSocket.js#L276-L286\nI'm assuming you did,\nnpm install ws\nI'm suggesting you try,\nnpm install git://github.com/einaros/ws.git\nHope that helps.\n. @3rd-Eden Added a test in 81bb913cc.\n. Thanks, fixed.\n. ",
    "cugwyc": "\u975e\u5e38\u611f\u8c22\u554a\uff0c\u6587\u6863\u770b\u5230\u4e86\u3002\n. ",
    "pocesar": "Hmm don't have 2012 installed. I'm using the Visual Studio Command Prompt (2010) (always use this when trying a npm install command)\n. Looks like I don't C:\\Program Files\\Microsoft Visual Studio 10.0 got no VC folder, is it recommended to use VS2012?\n. ah I see. but do you recommend installing VS2012 on Windows 7 64 bits?\n. I just tried that, it's asking me for the vc_(something)x86.msi, looks like it won't let me install. I'll just uninstall 2010 and install 2012. I don't llike things that don't compile lol (even if they work)\n. ",
    "aaronpropst": "@sebpiq,  did you come up with a way around this issue?  I'm finding the exact same behavior, at the 1012'th connection it starts hanging up:\nevents.js:72\n        throw er; // Unhandled 'error' event\n              ^\nError: socket hang up\n    at createHangUpError (http.js:1472:15)\n    at Socket.socketOnEnd [as onend] (http.js:1568:23)\n    at Socket.g (events.js:180:16)\n    at Socket.EventEmitter.emit (events.js:117:20)\n    at _stream_readable.js:919:16\n    at process._tickCallback (node.js:419:13)\n. @sebpiq No problem.  It looks like this may just be general linux system stuff.  \nfor future googlers:\nI needed to up the max number of file descriptors allowed at any one time.  (ulimit -n shows you that)  That let me get above 1012 sockets, but now I'm stuck at around 3000.   my research continues.\n. ",
    "s1riedel": "Did anyone ever find a solution to this problem? I am having the same exact problem. The only workaround I have right now is to restart my servers several times a day, which eliminates the problem, but is not a great solution. I would expect ulimit to only apply to sockets that are currently open, but even with only a few hundred sockets open at a time, I start getting socket hang ups on the client after running for several hours.\nThank you.\n. Yes, we send a ping/pong every 2 minutes through the web socket to keep it alive.\nCould you please clarify what you mean by \"try to use socket through wss://\"? Do you mean when the connection is opened to use the wss:// protocol? If that is what you mean, that is already how I am doing connections.\nThank you.\n. We are using version 0.8. \nThank you for the ideas. I've tried everything I can think of.\n. @mkozjak@mkozjak It does appear that I am using a much older version of the ws module - version 0.6.5. I will try with the newer version.\nThanks!\n. @kamilbiela We have tried having NGINX in front of the requests, and get the following error in the logs:\n2016/06/02 18:51:25 [error] 902#0: 527 upstream prematurely closed connection while reading response header from upstream, client: *..., server: ._, request: \"GET / HTTP/1.1\", upstream: \"http://127.0.0.1:8443/\", host:_ \n(private info hidden with asterisks **)\n. @Geek4IT Sorry, I have not made any progress on this issue. Good luck with this.\n. ",
    "AndreasMadsen": "@einaros yeah, your right. Don't known how I missed that.\n. @einaros Hi, this pull request was merged but the changes do no longer exists. Can you tell me what happened?\n. ",
    "onlywei": "Sorry, I should have included the builderror.log in my previous post.\nWith and without node-gyp installed globally:\ngyp http GET http://nodejs.org/dist/v0.10.3/node-v0.10.3.tar.gz\ngyp http 200 http://nodejs.org/dist/v0.10.3/node-v0.10.3.tar.gz\nAfter looking at this, I now realize that the reason it was \"hanging\" is because it was downloading something. I just jumped the gun by hitting CTRL-C early because:\n(node-gyp rebuild 2> builderror.log) || (exit 0)\nlooks like an error message. Sorry for wasting your time, but please consider changing the message that displays on this step to prevent idiots like me from pre-maturely hitting CTRL-C.\n. ",
    "dmose": "A co-worker convinced me that because of the listening event, this isn't actually racy.  So I think this is just a documentation bug.\n. Ah, that makes sense.  Thanks for clarifying!\n. ",
    "tarunkohli": "I'm facing a similar issue in my app. Node 0.10 HTTP Server(read: NOT WebSocketServer) starts leaving the connection in CLOSE_WAIT stage when I simulate a load of more than 1000 concurrent users. I'm using ab(apache bench) to simulate the concurrent requests to our node.js app.\nI initially thought that it was a problem with our app leaking memory while accessing a Redis cluster and MySQL databases but then I tested this behavior with just a \"Hello World\" app and results into similar behavior. \n. ",
    "brianseeders": "I happened across this thread while trying to diagnose a similar issue.\nFYI, this is also happening for me, except using http.request. All of my connections sit around in CLOSE_WAIT and it seems that I have to forcibly close them. So, maybe it is indeed a problem in node itself?\n. I am the client. I'm connecting to 100s of different hosts (with 10-40 connections concurrent, depending on how I set it). I'm processing URLs coming out of Twitter's stream, so it's a lot of different hosts.\nThe problem actually ends up showing up as DNS errors for me, because DNS lookups don't work. That is because no more connections can be made, even DNS lookups apparently, because of reaching the open files limit.\nI am trying to put together a test case right now.\n. I've created a gist: https://gist.github.com/brianseeders/4f93615c1182e7d76956\nThe IP in that file is a server I spun up, so feel free to execute this against it.\nThe problem seems to depend on the size of the response. Small responses did not seem to produce the issue, but a larger one does.\nRun this code, and check lsof -l | grep -c \"162.209.11.173.*CLOSE_WAIT\". You will begin seeing EMFILE errors once the number of connections begins to reach the open files limit.\nThere's not an explicit call that must be made to end the request, is there? I looked through the documentation and could not find one.\n. ",
    "qzaidi": "For the record, we are also seeing this issue in  0.10.3. We don't use websockets, use cluster+redis+express.\n. ",
    "piscisaureus": "Does https://github.com/joyent/node/commit/e0519ace315c7ce14278d5eaab8d1d72a0a0a054 fix it for anyone?\n. ",
    "mikestaszel": "I'm seeing this on Node 0.10.4, would like to know if bumping up to 0.10.11 or even 0.10.20 would help.\n. ",
    "mkamioner": "I think this fixes the issue: https://github.com/websockets/ws/pull/540\n. I listened to the error event and this no longer happened :-)\n. My pleasure! When do you think this new fix will be released?\n. Is there a timeline on that?\nIf it is not going to be for a while, maybe it makes more sense to make a new version of what exists now?\n. :+1: Thanks @3rd-Eden \n. I think I may have solved this in https://github.com/websockets/ws/pull/801\n. So if you are looking to fail the client, you can use my PR: https://github.com/websockets/ws/pull/801 and return the headers on a failure, but I am not sure that is what you are looking for... Just trying to be helpful...\n. I just took another stab at it - Let me know what you think (https://github.com/websockets/ws/pull/801)\n. Couldn't find a way to conduct a test on the case where the test passed and check the header response...\n. @lpinca - I would be happy to do so! It might take a little bit of time though - hopefully I can it done by end of week. ",
    "niftylettuce": ":+1: any solution?\n. ",
    "silverwind": "Shouldn't the client always connect via wss:// instead of  ws:// when talking to a HTTPS server?\nFirefox gives me \"SecurityError: The operation is insecure.\" when trying to connect via ws://. Using wss:// on the other hand works fine though (with node 0.10).\n. Yeah, that's what I though. I was just pondering why you had this test in the first place, as browsers seem to block mixed content as of lately. Guess I should read the spec.\n. Just saw https://github.com/einaros/ws/commit/571886d6444a6f1c95a8a48d807fff50b444e8fb, will test with HEAD.\n. HEAD still affected it seems.\n. Update: It seems it's working on Linux and iojs 1.0.3, I'll retest on Windows which was showing this issue.\n. Well, I can only tell you that the Upgrade request isn't being responded to at all, pointing to either this library or iojs/node 0.11.x. Here's the packet from the client:\n`Frame 98: 559 bytes on wire (4472 bits), 559 bytes captured (4472 bits)\nRaw packet data\nInternet Protocol Version 4, Src: 127.0.0.1 (127.0.0.1), Dst: 127.0.0.1 (127.0.0.1)\nTransmission Control Protocol, Src Port: 3258 (3258), Dst Port: 8989 (8989), Seq: 1, Ack: 1, Len: 519\nHypertext Transfer Protocol\n    GET / HTTP/1.1\\r\\n\n    Host: localhost:8989\\r\\n\n    User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0\\r\\n\n    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\r\\n\n    Accept-Language: en-US,en;q=0.5\\r\\n\n    Accept-Encoding: gzip, deflate\\r\\n\n    Sec-WebSocket-Version: 13\\r\\n\n    Origin: http://localhost:8989\\r\\n\n    Sec-WebSocket-Key: LCDSLtOtfufP3W706y+1bw==\\r\\n\n    Cookie: s=tJTkrO8mlzGBz/K3HUzcf3TnS5pJbfAJJ8FtzPznnCA=\\r\\n\n    Connection: keep-alive, Upgrade\\r\\n\n    Pragma: no-cache\\r\\n\n    Cache-Control: no-cache\\r\\n\n    Upgrade: websocket\\r\\n\n    \\r\\n\n    [Full request URI: http://localhost:8989/]\n    [HTTP request 1/1]\nYou should be able to reproduce with Firefox and any version of io.js.\n. FYI: https://github.com/iojs/io.js/issues/588\n. ",
    "wolfeidau": "Gday Brian\nIf you run npm info on some example packages you will see what i mean.\nWhen run for ws the only mention is the in the install attribute.\n$ npm info ws | grep 'gyp'\n     install: '(node-gyp rebuild 2> builderror.log) || (exit 0)' },\nWhen run for the leveldown module by @rvagg it is available as a flag in the JSON.\n$ npm info leveldown | grep 'gyp'\n     install: 'node-gyp rebuild' },\n  gypfile: true,\nThis just helps the npm maintainers know which modules are using native code rather than relying on the install attribute which could refer to a custom script or makefile.\nIf you run those commands without the grep you will see what I mean.\nCheers for looking at this btw.\n. Ah ok, I wasn't aware of this check being in npm.\nI have been diligently adding it to my packages unaware there was some magic if it was omitted.\nJust checked the zmq and it is indeed set as it uses the exact node-gyp command as you mentioned.\nReally it is up to you whether you whether or not you want to include this redundantly the reason I brought it up was there was a discussion about shipping binary modules prebuilt, mostly for windows users and yours wasn't in the list.\nThanks again for taking the time to look at this.\n. ",
    "kbateman": "Posterous shutdown a couple of days ago IIRC\nOn 2 May 2013 23:07, \"nekitozzz\" notifications@github.com wrote:\n\nlink in wiki with text \"probably the fastest WebSocket library for\nnode.js.\" on\nhttp://hobbycoding.posterous.com/the-fastest-websocket-module-for-nodejssays that \"Posterous Spaces is no longer available\".\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/einaros/ws/issues/187\n.\n. \n",
    "codetaku": "Yes, it did, but now it looks bad to link to a broken site, even though it was a completely legitimate link.\nThe author seems to have not moved their blog, or if they did, they must not have copied all of their articles. I didn't test exhaustively, but I'm 99% sure there is no longer a complete version of the article on the web. I tested it by finding a page like this: http://www.pagespan.com/hobbycoding.posterous.com which happened to have a fairly large excerpt from the relevant article, scrolled down to halfway or so through, and quoted one sentence into google. I tried this with a few more sentences in case of line-break-related errors. The only results were the pagespan page and a pageinsider page that is exactly the same.\nThe benchmarking data is covered in depth in this excerpt, which is good, but I think the most prudent think would be to remove the article link from the readme and find some other article praising how fast this module is. There are others, by now. Definitively.\n. ",
    "ralphtheninja": "Absolutely. Thanks!\n. FYI. There is one test failing, but that error was there before this fix.\n. Hey guys.  Just a quick question. Any plans of publishing an update on npm in the near future? Cheers\n. ",
    "gagle": "Ok, your right. Then the server.listen() must be done outside the websocket server.\n. ",
    "darcyparker": "FYI: I had a similar problem.  See http://chocolatey.org/packages/Yeoman#comment-898194541 \n. ",
    "heri16": "28\\node_modules\\npm\\bin\\node-gyp-bin....\\node_modules\\node-gyp\\bin\\node-gyp.js\" rebuild\nBuilding the projects in this solution one at a time. To enable parallel build, please add the \"/m\" switch.\nMSBUILD : error MSB4132: The tools version \"2.0\" is unrecognized. Available tools versions are \"4.0\".\n. 28\\node_modules\\npm\\bin\\node-gyp-bin....\\node_modules\\node-gyp\\bin\\node-gyp.js\" rebuild\nBuilding the projects in this solution one at a time. To enable parallel build, please add the \"/m\" switch.\nMSBUILD : error MSB4132: The tools version \"2.0\" is unrecognized. Available tools versions are \"4.0\".\n. ",
    "oberstet": "To see the problem, run server.py together with client.js from here https://github.com/oberstet/scratchbox/tree/master/js/wsnode\n. To see the problem, run client.py together with server.js from here https://github.com/oberstet/scratchbox/tree/master/js/wsnode\n. ",
    "jholster": "Sorry, I wasn't clear. When you assign a port number 0, the OS gives you a free random port. That's why port 0 is useful:\nserver = (require 'http').createServer()\nserver.listen 0\nconsole.log server.address().port\n. ",
    "m4kke": "@arlolra Thank you for the rapid respond. I found the _socket.bufferSize, perhaps that will work fine for the meantime.\nWhat do you mean with \"try running the head of master.\"?\n. ",
    "scriby": "I ran into this problem today as well.\n. ",
    "thisconnect": "The sporadic connection fail doesn't happen anymore on Node v0.10.11 (socket.io-client 0.9.16). Can you confirm?\n. No problem on Node.js v0.10.11 and v0.10.13 (with socket.io-client 0.9.16).\n. ",
    "compulim": "At WebSocket.js line 636, inside \"establishConnection\" function, there is a call to socket.on('data', dataHandler);. On this call, Node.js will flush all buffers to the dataHandler in a synchronous manner.\nIn Node.js (_stream_readable.js:678, or search \"Readable.prototype.on\"). Whenever the first \"data\" event is bound to a handler, all the buffered data will be flushed synchronously and immediately. This is before the caller is able to bind to the WebSocket.on('message') event.\nThe fix would be in WebSocket.js, delaying the Socket \"data\" event binding until nextTick, after process.nextTick(firstHandler);.\n. ",
    "bpytlik": "Sorry for the delay, I can confirm it does not happen anymore in node 0.10.11. They seem to have rolled back the change that caused the issue. I'm not sure whether node wants to put the change back in so I'll leave this open for now. Feel free to close it if you want.\n. ",
    "josephg": ":+1: \n. Thanks!\n. ",
    "aktau": "I'm not really sure how to do that, before this project I had never even touched node.js and even though I knew js I'm not really familiar with the testing frameworks.\nI'm assuming you would have to make a server that:\n1) keeps a request alive\n2) returns a non-recogized status code like 502\nThen you would have to check that the request does not hang. I really have no idea how to this since you can't get at the request (it's rightfully not exposed) and there is no real way to see if it hangs afaik because the only way I noticed it is by seeing that my node process did not exit properly.\nThat said, this is a one-line change that can't (imho) really do much wrong. The request provoked an error, it needs to end anyway, nothing productive can still be done on that request (as far as websockets is confirmed). So it doesn't do any harm to close it.\n. ",
    "davedoesdev": "+1 for fixing this issue.\nIt can also be caused by sending an error status in response to an upgrade request.\nI'll see if I can work out a test.\n. https://github.com/einaros/ws/pull/271\nI fixed it slightly differently in that I expose the request and response in the error object.\nThis:\n- Keeps existing behaviour if nothing else is done.\n- Gives a chance to call request.abort() if required.\n- Gives a chance to read the data from the response (or other header values). This can be very useful when you want to return extra error information!\n@Aktau @3rd-Eden Is this a good approach do you think?\n. What about something like this (see above commit)?\nClose request by default and emit error.\nUnless unexpected-response handler is registered, in which case it's up to that handler to close it when it's done.\n. @3rd-Eden I'm seeing this problem regularly now. Do you have any opinions as to the best way to address this isse?\n. @3rd-Eden  Rebased against master. The diffs are fine and tests pass but history seems a bit long - not sure if that bothers you.\n. Thanks (belatedly).\n. ",
    "saschagehlich": "Another solution is to move the listener to the end of the function. I don't think there's a way to lose data then?\n. ",
    "trygve-lie": "The error message says:\nnpm ERR! node -v v0.8.23\nNo feedback in 5 months, perhaps time to close it?\n. I have Web Sockets on iOS 8.x in Cordova working against this module and have had no problems with it.\nWhat might can be blocking you is the domain whitelist rules in Cordova. Might be worth checking if you \"access origin\" is correctly set.\nPS: I don't think this is a problem with this library. It probably more a Cordova problem if any.\n. You do not need to include the ws library in you html. Most modern browsers have support for WebSockets built in so there is no need for a client side library.\n. There is no library to include in your html with this module. Modern browsers support web sockets out of the box so what you need to do is write the javascript code which connects to your server and acts upon the messages you send back and forth between the server and browser.\nAs a simple test to see if you can connect to the node.js server you've set up you can include this in the html view(s) of your PHP:\njs\n    <script>\n      var ws = new WebSocket('ws://www.your.server.com');\n      ws.onmessage = function (event) {\n        console.log(event.data);\n      };\n    </script>\nThen any messages the node.js sends should appear in the console of the browser.\nHere is documentation on the Web Socket API in browser.\n. This library does come with a server side client so one can do Web Socket connections between servers. Its not a browser client.\n. A new release to npm would be nice. Is it that the tests fail on Travis which stops a release?\n. ",
    "breedx2": "The original inclusion of Host and Origin headers didn't have test coverage, but I can add some.  I think I can test the non-default port cases, but testing the default ports (80/443) will be difficult because it would mean binding to a privileged port which isn't always possible (requires root).\n. How does this look?  Do those tests work, or do you have ideas on how to better test that behavior?  Excited to have this merged...\n. ",
    "kenpratt": "Thanks!\n. ",
    "stefanocudini": "I'm trying this solution:\njavascript\nserverws.broadcast = function(data) {\n    for(var i in this.clients)\n        this.clients[i].send(data);\n};\nI wonder why this simple method does not already exist?\n. would be useful then insert it into the doc\n. @3rd-Eden Thanks to you too\n. ",
    "kkoopa": "NAN will also be available as a module in the future (before 0.12 comes),so it will be easy to keep up to date and simply include it as a dependency and add an include line to binding.gyp.\nSome background material on the transition towards Node 1.0: http://atxconsulting.com/2013/07/06/rewrite-it-anyway/\n. Simply haven't gotten around to it. Preparing for release 0.3.0 which should address all known issues and add some more features. 0.11 is still a moving target and there might be more breaking changes arriving which will have to be worked around, e.g. v8 will deprecate Handle<T> in the future, most likely before Node 1.0 comes, maybe not before 0.12 comes. I needed ws on 0.11.4+ myself, so I wrote this patch and figured I might as well submit a PR. It will still need accepting in one form or another, as simply having the header is not sufficient for making use of it. The alternatives do not make for easy to read code: kkoopa/contextify@561efe01121c8e238c3daadb6fa81374c058cdb2\nIf we get around to releasing 0.3.0 in this week, I can try and set up npm availability too and update the PR, omitting nan.h. I don't suppose you guys are in an actual hurry with this, as 0.12 isn't out yet, Travis is still stuck at 0.11.3 until earliest at next week, and this PR constitutes quite a substantial rewrite of the Node-integration part of the codebase. Simply wanted to give you a heads-up of what is happening.\n. Very good, testing is always good. I can tell that this at least works for engine.io out of the box on both Linux and Windows in 64-bit with both Node 0.10 and 0.11. I can also announce that we appear to have gotten NAN working as an NPM module, it was not completely straightforward how to include a header from a dependency. It will be tested in node-leveldown. I'll submit a new PR when everything has been verified and NAN 0.3.0 is released.\n. It's a known issue with Node 0.10, it always fails. Passes on all other versions, including 0.11.\n. And here I thought 0.8 was old and 0.6 ancient. Is there any legitimate use of 0.4 that keeps its dependencies current? I find it hard to believe, as few projects currently support anything lower than 0.8, let alone 0.6.\n. No problem, I can say the same to you. ;) Happy coding.\n. Is this not covered by a test case? https://github.com/einaros/ws/blob/master/test/WebSocket.test.js#L745-762\n. Wow! That was an insta-merge indeed. You're welcome.\n. I believe the failure in 0.8 to be a random thing, possibly due to overloaded Travis servers. The 0.6 failure is due to https://github.com/rvagg/nan/issues/49, which will be rectified. I'll update the PR once that is done and everything should be working again.\n. This builds after 0.6 was dropped in acb028e68defc5257340b0c446261f9f37fa3aa6. NAN will have 0.6 support again in version 0.7.0, but there's no need for that here any more.\n. 30 minutes to compile? What system are you using? A C=64?\nbash\n$ time node-gyp rebuild\nreal    0m1.165s\nuser    0m0.936s\nsys     0m0.136s\nThis is in a single-core virtual machine of unknown specs.\nSecondly, your current version of 0.10.x is actually the legacy version that is being supported. 0.12 will be almost fully incompatible will 0.10, and a lot of people would be complaining if that support was removed in the coming years.\n. ",
    "gramakri": "Looks like node 0.10 fails with or without this patch?\n. ",
    "gramakri-intel": "@TooTallNate i will write up the test case tomorrow, sorry can't get it done today :( But if you can write one please go ahead.\n. ",
    "jeremykentbgross": "Actually ws.send(array.buffer); never worked for me, and I always did: ws.send(array);  However with node 12 it seems that i must instead do this: ws.send(new Buffer(array));  This took some debugging and playing around to find, but one annoying aspect is that if I read the node documentation correctly the buffer will be copying the array, not using it directly, which creates unneeded overhead for large buffers which I need to send on connect.\n. One addition I forgot to mention, the disconnect code from the websocket when this happens is: 1000 (ie CLOSE_NORMAL).  However as the report indicates, this is certainly not a normal close.\n. Call stack for reference:\nERROR:[2015-03-28T10:27:28.988Z]: [Error: 140351293540160:error:14094418:SSL routines:SSL3_READ_BYTES:tlsv1 alert unknown ca:../deps/openssl/openssl/ssl/s3_pkt.c:1289:SSL alert number 48\n]\n    at TLSSocket._onError (/home/jeremy/Projects/EmpathicCivGameEngine/engine/private/scripts/NetworkServer.js:223:13)\n    at TLSSocket.emit (events.js:129:20)\n    at TLSSocket._tlsError (_tls_wrap.js:428:10)\n    at TLSWrap.ssl.onerror (_tls_wrap.js:337:12)\n. ",
    "RevCBH": "Nevermind, I noticed there were already some people with pull requests to do this that look cleaner. If I have time I'll add some tests to those.\n. ",
    "zwz": "@einaros \nIt is a good example. But what if the clients array is very very long?\nAs I am using ws for my app with nodejs, I am wondering if this may be an issue:\nwhen the app tries to broadcast to so many clients that it just blocked there, since nodejs is single-threaded. \nIf this would be an issue, what  should I do?\nIt seems that socket.io has a built-in broadcast. How does it address the issue?\nAny hints?\n. I have the same problem.\nI debuged my nodejs program, and when the client disconnected,\nthe server did know anything, and kept the connection for a long time\neven after the client reconnected.\nThe weird thing is that even the device is disconnected, when the server tries to send some message to the device, there is no error and the server still has no idea about the dead connection.\nThis is quite annoying, because it could make my data inconsistent.\nBTW, I am using https://github.com/mkuklis/phonegap-websocket on my android 4.0.4 device.\n. @waleedbutt It seems the server will remove them after some time.\n. ",
    "rkrishnasanka": "I'm using ws 0.4.27. Adding the binary and mask variable just made the connection close. No error was thrown, and the 'close' event was fired. The client is an iOS app using Socket Rocket for creating and running the websocket - since I was anyways passing a buffer instance - I just sent the data without the 2 options I mentioned. Works fine as I'm able to read the bytes on the other end. \n. Well your asserts are checking if the data being sent is a float32 array. But I'm sending a Buffer Type object - so I guess I didn't have to set the binary option because I'm getting the data intact. Since I'm new to nodejs I was just following the instructions in the readme (so please add instructions for when sending buffer objects). I'll run the tests on my project and get back.\n. ",
    "mcollina": "Maybe that's my fault, but I don't get why @shtylman did it in that way.\n. @TooTallNate from the readme of ws:\njs\nvar WebSocket = require('ws');\nvar ws = new WebSocket('ws://www.host.com/path');\nThere is no require('ws').WebSocket, just require('ws').\n@shtylman I've got the same code working on both node and the browser with this change.\n. @shtylman @TooTallNate thank you!\n. thank you @3rd-Eden!\n. @refack I do not think opening a bug on the target module is the best approach for core. You should really open a bug in core.. Anyway, as the author of the offending issue I would have loved to know :).\nI'm a bit unsure how I missed that, and why it fails only on AIX and OSX, but not everywhere else. . Anyway, it's confirmed and a fix is on its way.. ",
    "defunctzombie": "This was originally ported from the client side websocket code of engine.io-client which now lives in this repo:\nhttps://github.com/component/ws/blob/master/index.js\nThe goal should be to achieve the same interface on node.js and the browser. I am not against whatever changes need to happen to ensure a consistent interface.\n/cc @TooTallNate\n. @TooTallNate I think it is important for the APIs to be consistent since\nthere are those of us that use browserify. Please don't forget us.\nOn Aug 28, 2013 3:46 PM, \"Matteo Collina\" notifications@github.com wrote:\n\n@shtylman https://github.com/shtylman @TooTallNatehttps://github.com/TooTallNatethank you!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/einaros/ws/pull/231#issuecomment-23454779\n.\n. No issue. Just making sure :) everything will exist in harmony!\nOn Aug 28, 2013 4:17 PM, \"Nathan Rajlich\" notifications@github.com wrote:\n@shtylman https://github.com/shtylman This PR would make lib/browser.jsconsistent API-wise with node's\neinaros/ws and web browser component/ws. What's the issue exactly?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/einaros/ws/pull/231#issuecomment-23456237\n.\n. \n",
    "kapouer": "Meanwhile, you could make sure you tag each new release...\ngit tag v0.4.31 && git push --tags\nIt really helps distributors like debian, fedora, ubuntu, etc...\n. ",
    "fearenales": "Only for further reference, a workaround for this issue is:\n``` js\nvar url = require('url');\nvar WebSocket = require('ws');\nvar address  = url.parse('ws+unix:///var/run/docker.sock');\naddress.path = '/container/71501a8ab0f8/attach/ws';\nvar ws       = new WebSocket(address);\n```\nThis works because WebSocket.js doesn't re-parse the url if it already is in a parsed object.\nTks @nuxlli\n. ",
    "solderjs": "request.js handles it like this:\nhttp://unix:/absolute/path/to/unix.socket:/request/path\nWhat do you think about a pull request that allows that format?\n. It appears that this code for checking paths could be easily adapted to use options.vhost and req.vhost.host:\nhttps://github.com/einaros/ws/blob/master/lib/WebSocketServer.js#L136\nhttps://github.com/einaros/ws/blob/master/lib/WebSocketServer.js#L49\nhttps://github.com/einaros/ws/blob/master/lib/WebSocketServer.js#L80\nhttps://github.com/einaros/ws/blob/master/lib/WebSocketServer.js#L108\nWould you accept a pull request?\n. Don't use self-signed certificates in a server. Instead, self-sign a CA, then use the CA to self-sign your certificate.\nSee this repo and follow the tutorial: https://github.com/coolaj86/nodejs-self-signed-certificate-example\nIf you get it set up like that, it'll work.\n. Also, you need to create your websocket from your server:\n``` javascript\nvar server = require('https').createServer({ /ssl options/ })\n  , app = connect() // or express()\n  , wss = new WebSocketServer({ server: server })\n  ;\nserver.on('request', app);\nserver.listen(port, function () { console.log('Listening...'); });\n```\nIn order to have your test work from your browser you must add a .p12 file to your keychain. I've got an example of that here: https://github.com/coolaj86/nodejs-ssl-trusted-peer-example/blob/master/make-root-ca-and-certificates.sh#L84\n. Well, you probably need to fix the java server so that it isn't using a self-signed cert. (you can use the bash script in the repo I showed to create the correct type of certificate)\nYou probably also need to include the .crt chain in the client app.\nCan you get it working with curl for a normal request?\nCan you get it working with a reference websocket implementation?\nIf you can't get it working with curl or a reference implementation you probably won't get it working with node.\n. Yeah, this is also a problem for me.\n. See https://github.com/coolaj86/ws/commit/42ba0385800565fa11b703adc13493b102605b57\nThen use https instead of http.\nSee https://github.com/coolaj86/nodejs-ssl-example/blob/master/serve.js#L21-L36\n. I patched it such that if the callback is supplied it uses the callback for error instead of emitting.\nhttps://github.com/websockets/ws/pull/614\n. Do you want the simple version or the performant version?\n(I'd recommend doing simple and only switching if the benchmarks later show that the performant version is indeed necessary)\n. https://github.com/websockets/ws/pull/832\n. maybe make a PR with a change for\nelse if (typeof window !== 'undefined') {\n  ws = window.WebSocket || window.MozWebSocket;\n} else {\n  require('ws');\n}\n. @JoshuaWise You may be misinterpreting the docs. the synchronous version is almost guaranteed to never cause a bottleneck, but in the rare cases that it does (i.e. you're generating gigabytes of random data in another process), it may take a few milliseconds to get a normal about of random re-seeded. On first system boot (or when there is no cached random data from a previous boot - not the case to optimize for), it may take slightly longer.\nIf you search around a little bit on the net you'll find people complaining about cases where they run out of system entropy and it's generally A) they're using Arch Linux, haven't started the entropy daemon yet, and are generating large ssh keys as part of setup or B) are generating gigabytes of random data for some particular purpose.\nIf a benchmark shows that 4 bytes of random data a few thousand times every few minutes is killing performance I would not disbelieve it, but I wouldn't jump to assuming that a normal use case would cause unusual performance behavior.\n. Also, the very idea of generating enough random masks to deplete the entropy pool is counter intuitive. How would you be sending and receiving all of this websocket data and not generating entropy from disk and network access in that process?\n. Looks like there's no noticeable difference - just a little noise.\nnode bench/speed.js\nMath.random():\nGenerating 500 MB of test data ...\nRunning 10000 roundtrips of 64 B binary data:   4.2s    150.49 kB/s\nRunning 5000 roundtrips of 16 kB binary data:   6.8s    11.46 MB/s\nRunning 1000 roundtrips of 128 kB binary data:  12s 10.38 MB/s\nRunning 100 roundtrips of 1 MB binary data: 9.3s    10.71 MB/s\ncrypto.randomBytes():\nRunning 10000 roundtrips of 64 B binary data:   4.3s    146.34 kB/s\nRunning 5000 roundtrips of 16 kB binary data:   6.8s    11.46 MB/s\nRunning 1000 roundtrips of 128 kB binary data:  12s 10.42 MB/s\nRunning 100 roundtrips of 1 MB binary data: 9.2s    10.84 MB/s\nnode bench/sender.benchmark.js\nMath.random():\n```\n  Sender frameAndSend, unmasked (200 kB)\n  3044095.19 ops/sec, 251567 times executed, benchmark took 5.073 sec.\nSender frameAndSend, masked (200 kB)\n  5530.86 ops/sec, 557 times executed, benchmark took 5.138 sec.\n```\ncrypto.randomBytes():\n```\n  Sender frameAndSend, unmasked (200 kB)\n  2908586.85 ops/sec, 243897 times executed, benchmark took 5.064 sec.\nSender frameAndSend, masked (200 kB)\n  5008.09 ops/sec, 976 times executed, benchmark took 5.124 sec.\n```\n. (\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b\nMy plea has fallen upon deaf ears.\n1. The benchmarks show that it's (insignificantly) faster\n2. We don't say we wouldn't use node because of the occasional GC pause (which happens very very regularly and is very very very very slow)\n3. Network traffic and disc access generate entropy, so it's not even possible to run the entropy dry with this operation, there would have to be another process draining the entropy pool faster than it's being created\n4. Srsly?!?!?\n. Ah, looks like there's some more detailed documentation in the docs folder that I didn't notice at first:\nhttps://github.com/websockets/ws/blob/master/doc/ws.md#unix-domain-sockets\nThat makes sense.. ",
    "alandoherty": "WebSocket still seems to try and parse it as a URL even if you url.parse beforehand, was this ever implemented?\n. This would be really useful, can't specify a path right now so having to fork and publish a separate version of ws for now.\n. Last minute note, got everything working now.\njs\nvar udsParts = serverUrl.pathname.split(':'),\nneeds to be\njs\nvar udsParts = serverUrl.path.split(':'),\nOtherwise it neglects the query parameter.\n. ",
    "laino": "Nevermind. I think the problem was caused by nginx, not node or your code. \nMy site was configured to tell nginx to cache 404 responses for a few minutes, so they wouldn't be hitting node all the time.\nSo if for some reason a 'normal' http request was hitting /socket, nginx would cache the 404 response and return it for all other clients trying to get a websocket connection.\nI'll still have to test whether this was really the case once I have more than my phone at hand, but please don't pointlessly waste your time with this issue for now.\n. ",
    "randallb": "@binlain close?\n. ",
    "maximkott": "Are you sure? This is the point where my TowerJS installation breaks.\n. Sir, you were right! I assumed that the installation failed because of all that unusual messages and the \"command not found\", as I tried to run n in the console. All I had to do was to install the tower-cli module.\n. ",
    "jcollum-hcg": "@andrewrk  that's a terrible pro tip\npro tip: the -g option is there for a reason. \n. That's a fine argument for pushing wscat to its own module. Not a good argument for \"never install anything with -g\". \n. This is from experience: developing in Node on Windows is a PITA. I went to an Ubuntu VM and am very happy with that decision. \n. ",
    "MichaelPaulukonis": "I also failed to install ws, but got a different error message.\nHere is the relevant chunk of the npm log:\n487 verbose about to build C:\\Users\\mpaulukonis\\AppData\\Roaming\\npm\\node_modules\\ws\n488 info build C:\\Users\\mpaulukonis\\AppData\\Roaming\\npm\\node_modules\\ws\n489 verbose from cache C:\\Users\\mpaulukonis\\AppData\\Roaming\\npm\\node_modules\\ws\\package.json\n490 verbose linkStuff [ true,\n490 verbose linkStuff   'C:\\Users\\mpaulukonis\\AppData\\Roaming\\npm\\node_modules',\n490 verbose linkStuff   true,\n490 verbose linkStuff   'C:\\Users\\mpaulukonis\\AppData\\Roaming\\npm\\node_modules' ]\n491 info linkStuff ws@0.4.30\n492 verbose linkBins ws@0.4.30\n493 verbose link bins [ { wscat: './bin/wscat' },\n493 verbose link bins   'C:\\Users\\mpaulukonis\\AppData\\Roaming\\npm',\n493 verbose link bins   true ]\n494 verbose linkMans ws@0.4.30\n495 verbose rebuildBundles ws@0.4.30\n496 verbose rebuildBundles [ 'commander', 'nan', 'options', 'tinycolor' ]\n497 info install ws@0.4.30\n498 verbose unsafe-perm in lifecycle true\n499 silly exec cmd \"/c\" \"(node-gyp rebuild 2> builderror.log) || (exit 0)\"\n500 silly cmd,/c,(node-gyp rebuild 2> builderror.log) || (exit 0),C:\\Users\\mpaulukonis\\AppData\\Roaming\\npm\\node_modules\\ws spawning\n501 info ws@0.4.30 Failed to exec install script\n502 info C:\\Users\\mpaulukonis\\AppData\\Roaming\\npm\\node_modules\\ws unbuild\n503 verbose from cache C:\\Users\\mpaulukonis\\AppData\\Roaming\\npm\\node_modules\\ws\\package.json\n504 info preuninstall ws@0.4.30\n505 info uninstall ws@0.4.30\n506 verbose true,C:\\Users\\mpaulukonis\\AppData\\Roaming\\npm\\node_modules,C:\\Users\\mpaulukonis\\AppData\\Roaming\\npm\\node_modules unbuild ws@0.4.30\n507 verbose C:\\Users\\mpaulukonis\\AppData\\Roaming\\npm,[object Object] binRoot\n508 info postuninstall ws@0.4.30\n509 error ws@0.4.30 install: (node-gyp rebuild 2> builderror.log) || (exit 0)\n509 error spawn ENOENT\n510 error Failed at the ws@0.4.30 install script.\n510 error This is most likely a problem with the ws package,\n510 error not with npm itself.\n510 error Tell the author that this fails on your system:\n510 error     (node-gyp rebuild 2> builderror.log) || (exit 0)\n510 error You can get their info via:\n510 error     npm owner ls ws\n510 error There is likely additional logging output above.\n511 error System Windows_NT 6.1.7601\n512 error command \"d:\\dev\\nodejs\\node.exe\" \"d:\\dev\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"-g\" \"ws\"\n513 error cwd D:\\temp\\WebText\n514 error node -v v0.10.5\n515 error npm -v 1.2.18\n516 error syscall spawn\n517 error code ELIFECYCLE\n518 error errno ENOENT\n519 verbose exit [ 1, true ]\n. If I run the shell as administrator and attempt a global install, it works just fine.\nThe installation instructions could be updated to reflect this.\n. ",
    "D1plo1d": "So this is a memory leak AFAIK but if you need a quick work around you can call wss.removeAllListeners() after calling close to prevent client connect and client disconnect from firing your previous event listeners.\nEdit: should say, it's a memory leak but a real minor one. That's not the major issue, the major issue is that things aren't removed as expected\n. ",
    "makc": "Here is log in case it helps:\n```\nlocalhost:Documents makc$ sudo npm install -g ws\nPassword:\nnpm http GET https://registry.npmjs.org/ws\nnpm http 304 https://registry.npmjs.org/ws\nunbuild ws@0.4.30\nnpm http GET https://registry.npmjs.org/tinycolor\nnpm http GET https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/nan\nnpm http GET https://registry.npmjs.org/options\nnpm http 304 https://registry.npmjs.org/tinycolor\nnpm http 304 https://registry.npmjs.org/commander\nnpm http 304 https://registry.npmjs.org/nan\nnpm http 304 https://registry.npmjs.org/options\n/usr/local/bin/wscat -> /usr/local/lib/node_modules/ws/bin/wscat\n\nws@0.4.30 install /usr/local/lib/node_modules/ws\n(node-gyp rebuild 2> builderror.log) || (exit 0)\n\nCXX(target) Release/obj.target/bufferutil/src/bufferutil.o\n  SOLINK_MODULE(target) Release/bufferutil.node\n  SOLINK_MODULE(target) Release/bufferutil.node: Finished\n  CXX(target) Release/obj.target/validation/src/validation.o\n  SOLINK_MODULE(target) Release/validation.node\n  SOLINK_MODULE(target) Release/validation.node: Finished\nws@0.4.30 /usr/local/lib/node_modules/ws\n\u251c\u2500\u2500 tinycolor@0.0.1\n\u251c\u2500\u2500 options@0.0.5\n\u251c\u2500\u2500 commander@0.6.1\n\u2514\u2500\u2500 nan@0.3.2\n```\n. I don't get it. -g stands for globally, right? I want to install ws module globally. How do I do it?\n. ",
    "sand123": "With current version of ws and socket.io this snippet worked for me\n```javascript\nconst WebSocket = require('ws');\nconst ws = new WebSocket('ws://server/socket.io/?EIO=3&transport=websocket', {\n  perMessageDeflate: false\n});\nws.on('open', function open() {\n  console.log(\"opened\");\n});\n```. ",
    "JamesNewton": "@sand123 workaround did not work around for me. \nconst chat = new WebSocket(\n  'ws://'+chatserver+'/chat/?EIO=3&transport=websocket',\n  {perMessageDeflate: false}\n)\nchat.on('error', function(e){\n  console.log(\"chat error:\"+e.message)\n})\nchat.on('open', function() {\n  console.log('chat open');\n  //chat.send('name');\n});\nI always get chat error:socket hang up. On the other hand, this is running on a robot with an old version of Ubuntu 12 so maybe that's the issue. I was really hoping this could work because it needs to be lightning fast. Oh well. I wish there had been an open issues or a note that said \"This isn't known to work to connect to a server running Socket.IO\" so I hadn't wasted my time.. ",
    "romansk": "Check for HTTP timeout in NGINX config. Search throught SO_LINGER setting in nginx source.\n. ",
    "ericrini": "We have a similar problem with Amazon ELB. Connections seem to close abruptly, though ironically the issue goes away with nginx (believe it). We're working with Amazon engineers on this, and it is most likely an infrastructure issue on their side.\nHowever, I want to make sure I'm doing the proper diligence on TCP keepalive. Right now I just send a heartbeat message (Socket.send()) to the client every 30 seconds. I noticed in the API there is also the ability to listen for \"ping\" and \"pong\" events on the socket handle.\nDo I need to handle these as well? If I did, would I just reply with Socket.send() or is there some other functionality I'm missing?\n. ",
    "qwerter": "I'm getting same error when using certain browsers, huh!\n. opera 12.16\n. it happens every time with opera, not sure why\n. well, i am sending raw pcm audio chunks (binary data), chunks are not too big (up to 100kb) at 1 second interval\n. but it crashes before sending starts, will try to debug it tonight and will give you more details about what's happening \n. ",
    "julien-f": "Same error here with Safari 5.0.5 on MacOS.\nAs far as I can tell it happens during the connection or shortly after (within seconds).\nUsing your branch does not fix the error but I do get a longer stacktrace:\nevents.js:74\n        throw TypeError('Uncaught, unspecified \"error\" event.');\n              ^\nTypeError: Uncaught, unspecified \"error\" event.\n    at TypeError (<anonymous>)\n    at WebSocket.EventEmitter.emit (events.js:74:15)\n    at Receiver.self._receiver.onerror (/root/xo/xo-server/node_modules/ws/lib/WebSocket.js:717:10)\n    at Receiver.error (/root/xo/xo-server/node_modules/ws/lib/Receiver.hixie.js:153:8)\n    at doAdd (/root/xo/xo-server/node_modules/ws/lib/Receiver.hixie.js:61:14)\n    at Receiver.add (/root/xo/xo-server/node_modules/ws/lib/Receiver.hixie.js:104:22)\n    at CleartextStream.firstHandler (/root/xo/xo-server/node_modules/ws/lib/WebSocket.js:678:22)\n    at CleartextStream.EventEmitter.emit (events.js:95:17)\n    at CleartextStream.<anonymous> (_stream_readable.js:736:14)\n    at CleartextStream.EventEmitter.emit (events.js:92:17)\n    at emitDataEvents (_stream_readable.js:761:10)\n    at CleartextStream.Readable.on (_stream_readable.js:682:5)\n    at WebSocket.establishConnection (/root/xo/xo-server/node_modules/ws/lib/WebSocket.js:733:10)\n    at WebSocket.initAsServerClient (/root/xo/xo-server/node_modules/ws/lib/WebSocket.js:453:72)\n    at new WebSocket (/root/xo/xo-server/node_modules/ws/lib/WebSocket.js:63:24)\n    at /root/xo/xo-server/node_modules/ws/lib/WebSocketServer.js:367:24\n    at afterWrite (_stream_writable.js:270:3)\n    at _stream_writable.js:259:9\n    at process._tickCallback (node.js:415:13)\n    at CleartextStream.Readable.on (_stream_readable.js:679:33)\n    at WebSocket.establishConnection (/root/xo/xo-server/node_modules/ws/lib/WebSocket.js:733:10)\n    at WebSocket.initAsServerClient (/root/xo/xo-server/node_modules/ws/lib/WebSocket.js:453:72)\n    at new WebSocket (/root/xo/xo-server/node_modules/ws/lib/WebSocket.js:63:24)\n    at /root/xo/xo-server/node_modules/ws/lib/WebSocketServer.js:367:24\n    at afterWrite (_stream_writable.js:270:3)\n    at _stream_writable.js:259:9\n    at process._tickCallback (node.js:415:13)\n    at onwrite (_stream_writable.js:258:15)\n    at WritableState.onwrite (_stream_writable.js:97:5)\n    at CleartextStream.write [as _write] (tls.js:388:9)\n    at doWrite (_stream_writable.js:219:10)\n    at writeOrBuffer (_stream_writable.js:209:5)\n    at CleartextStream.Writable.write (_stream_writable.js:180:11)\n    at WebSocketServer.completeHandshake (/root/xo/xo-server/node_modules/ws/lib/WebSocketServer.js:365:16)\n    at onClientVerified (/root/xo/xo-server/node_modules/ws/lib/WebSocketServer.js:397:25)\n    at WebSocketServer.handleHixieUpgrade (/root/xo/xo-server/node_modules/ws/lib/WebSocketServer.js:443:3)\n    at WebSocketServer.handleUpgrade (/root/xo/xo-server/node_modules/ws/lib/WebSocketServer.js:146:61)\n    at $WebServer.<anonymous> (/root/xo/xo-server/node_modules/ws/lib/WebSocketServer.js:72:12)\n    at $WebServer.EventEmitter.emit (events.js:106:17)\n    at Server.<anonymous> (/root/xo/xo-server/src/web-server.coffee:100:33)\n    at Server.EventEmitter.emit (events.js:106:17)\n    at CleartextStream.socket.ondata (http.js:1966:14)\n    at CleartextStream.read [as _read] (tls.js:502:12)\n    at CleartextStream.Readable.read (_stream_readable.js:320:10)\n    at EncryptedStream.write [as _write] (tls.js:366:25)\n    at doWrite (_stream_writable.js:219:10)\n    at writeOrBuffer (_stream_writable.js:209:5)\n    at EncryptedStream.Writable.write (_stream_writable.js:180:11)\n    at write (_stream_readable.js:573:24)\n    at flow (_stream_readable.js:582:7)\n    at Socket.pipeOnReadable (_stream_readable.js:614:5)\n    at Socket.EventEmitter.emit (events.js:92:17)\n    at emitReadable_ (_stream_readable.js:408:10)\n    at emitReadable (_stream_readable.js:404:5)\n    at readableAddChunk (_stream_readable.js:165:9)\n    at Socket.Readable.push (_stream_readable.js:127:10)\n    at TCP.onread (net.js:526:21)\n. Thank you :)\nIt would be nice to put your answer in the releases page in case someone else wonders the same thing.\n. @3rd-Eden Throwing while connecting deviates from the web API in which close() can be used to closes the  connection attempt.\nWhat's the proper way to abort a connection with ws?. My bad, I'm mistaken, close() does not throw.\n@lpinca Thanks for your answer and sorry for bothering you :). What's better with isomorphic-ws is:\n- delimited perimeter: only a small wrapper around ws\n- ws is a peer dependency: the user can choose which version to use\nThough I agree the websocket-stream fallback is better, I will create a PR to improve isomorphic-ws.\nAt the end, I don't care which module to use, but I think there should be an obvious one that as many people as possible gather around \ud83d\ude03 . The module should probably warn that there are limitations but IMHO it's still better than forcing everyone to come up with their own solution.. Yep, I understand you do not want the burden of maintaining this, but I think it would makes sense to help the users who look for something like this.. Done \ud83d\ude03 . Sure thing.. ",
    "vieira": "Hello, I'm also experiencing this problem. It is not easy to reproduce but I know it happened shortly after the connection was established as the client sends a message onopen and this message was not received. The log follows but unfortunately I don't think it adds much :tired_face: \nevents.js:74\n        throw TypeError('Uncaught, unspecified \"error\" event.');\n              ^\nTypeError: Uncaught, unspecified \"error\" event.\n    at TypeError (<anonymous>)\n    at WebSocket.EventEmitter.emit (events.js:74:15)\n    at Receiver.self._receiver.onerror (<proj>/node_modules/ws/lib/WebSocket.js:719:10)\n    at Receiver.error (<proj>/node_modules/ws/lib/Receiver.js:301:8)\n    at Receiver.processPacket (<proj>/node_modules/ws/lib/Receiver.js:187:10)\n    at Receiver.add (<proj>/node_modules/ws/lib/Receiver.js:93:24)\n    at Socket.firstHandler (<proj>/node_modules/ws/lib/WebSocket.js:678:22)\n    at Socket.EventEmitter.emit (events.js:95:17)\n    at Socket.<anonymous> (_stream_readable.js:746:14)\n    at Socket.EventEmitter.emit (events.js:92:17)\n. ",
    "flowersinthesand": "Any update or workaround on this?\n. @Dragonight  Great!\n. ",
    "banksJeremy": "@3rd-Eden Please ignore my newbish stupidity. Thanks for the clarification.\n. ",
    "samsonradu": "@3rd-Eden Please mind my noobish question but I didn't get where should one attach the error listener. The below code still throws the error: \n\nvar socketServer = new (require('ws').Server)({port: WEBSOCKET_PORT});\nsocketServer.on('connection', function(socket) {\n   socket.on('error', function(err){\n            console.log(err)\n        });\n  ...\n});\n\n. ",
    "cklokmose": "I am getting this error (or a similar error) as well. \nIt happens when a browser on the outside network tries to access my node service and establish a websocket connection through our loadbalancer that is not yet setup to handle websockets. I don't seem to be able to catch the error.\nevents.js:74\n        throw TypeError('Uncaught, unspecified \"error\" event.');\n              ^\nTypeError: Uncaught, unspecified \"error\" event.\n  at TypeError (<anonymous>:null:null)\n  at WebSocket.EventEmitter.emit (events.js:74:15)\n  at Receiver.self._receiver.onerror (/home/clemens/Webstrate/node_modules/ws/lib/WebSocket.js:704:10)\n  at Receiver.error (/home/clemens/Webstrate/node_modules/ws/lib/Receiver.js:295:8)\n  at Receiver.processPacket (/home/clemens/Webstrate/node_modules/ws/lib/Receiver.js:181:10)\n  at Receiver.add (/home/clemens/Webstrate/node_modules/ws/lib/Receiver.js:87:24)\n  at Socket.firstHandler (/home/clemens/Webstrate/node_modules/ws/lib/WebSocket.js:663:22)\n  at Socket.EventEmitter.emit (events.js:95:17)\n  at Socket.<anonymous> (_stream_readable.js:746:14)\n  at Socket.EventEmitter.emit (events.js:92:17)\n  at emitReadable_ (_stream_readable.js:408:10)\n  at emitReadable (_stream_readable.js:404:5)\n  at readableAddChunk (_stream_readable.js:165:9)\n  at Socket.Readable.push (_stream_readable.js:127:10)\n  at TCP.onread (net.js:526:21)\n. ",
    "Dragonight": "Information and solution\nThis error still happens on the latest version as of today (2014/11/1).\nStack trace:\nevents.js:74\n        throw TypeError('Uncaught, unspecified \"error\" event.');\n              ^\nTypeError: Uncaught, unspecified \"error\" event.\n    at TypeError (<anonymous>)\n    at WebSocket.EventEmitter.emit (events.js:74:15)\n    at Receiver.self._receiver.onerror (###/node_modules/ws/lib/WebSocket\n.js:704:10)\n    at Receiver.error (###/node_modules/ws/lib/Receiver.hixie.js:153:8)\n    at doAdd (###/node_modules/ws/lib/Receiver.hixie.js:61:14)\n    at Receiver.add (/###/node_modules/ws/lib/Receiver.hixie.js:104:22)\n    at CleartextStream.firstHandler (###/node_modules/ws/lib/WebSocket.js\n:663:22)\n    at CleartextStream.EventEmitter.emit (events.js:95:17)\n    at CleartextStream.<anonymous> (_stream_readable.js:736:14)\n    at CleartextStream.EventEmitter.emit (events.js:92:17)\nReason:\nWhen Hixie protocol is used, together with some invalid data from a crappy browser or bad protocol implementation at client side or evil user who sent bad data on purpose to crash you or any other reason. (started to happen to me when i added wss:// (https server) option in production)\nThis line will fire an error event:\nnode_modules/ws//lib/Receiver.hixie.js : 61\njavascript\n      if (data[0] !== 0x00) {\n        self.error('payload must start with 0x00 byte', true);\n        return;\n      }\nHowever, it happens when creating the connection, before the 'connection' fired.\nThat means we did not have any chance to attach on('error') event handler yet.\nSo... according to nodejs' EventEmitter:\nWhen an EventEmitter instance experiences an error, the typical action is to emit an 'error' event.\nError events are treated as a special case in node. If there is no listener for it,\nthen the default action is to print a stack trace and exit the program.\n( Source: http://nodejs.org/api/events.html#events_class_events_eventemitter )\nWhich is why the whole server crash if error event happens when initializing a connection.\nHowever, because we don't have any access to the new Websocket instance before connection initialized to attach the error listener. I had to modify the library's code itself to fix it !!!!\nI know this is a very bad solution and not future proof (but hey it works!) and this is why I am posting it here, so you can understand the problem and make a better fix for the next version of ws.\nSolution (Hack): node_modules/ws//lib/WebSocket.js:55\n``` javascript\nfunction WebSocket(address, protocols, options) {\nif (protocols && !Array.isArray(protocols) && 'object' == typeof protocols) {\n    // accept the \"options\" Object as the 2nd argument\n    options = protocols;\n    protocols = null;\n  }\n  if ('string' == typeof protocols) {\n    protocols = [ protocols ];\n  }\n  if (!Array.isArray(protocols)) {\n    protocols = [];\n  }\n  // TODO: actually handle the Sub-Protocols part of the WebSocket client\nthis._socket = null;\n  this.bytesReceived = 0;\n  this.readyState = null;\n  this.supports = {};\n// ######### Added by DN at 2014/11/1: to fix a crash if error event happens before 'connection' event fired, we didn't have any chance to set error handler yet\n  this.on('error', function(a,b) {console.error('[WebSocket Error!]',a,b)})\n  // ######### Add End ######\nif (Array.isArray(address)) {\n    initAsServerClient.apply(this, address.concat(options));\n  } else {\n    initAsClient.apply(this, [address, protocols, options]);\n  }\n}\n```\nReproduce:\nChange Receiver.hixie.js:61 to make the error event always fire even on good data, and use Hixie protocol so the program will reach this line. (or find that one specific browser version that sends invalid data)\n. Continue - After rolling out my fix in production, my logs showed a few more errors, not only the one that I wrote about above. So you need to fix the general case, not the specific case that I wrote about.\nMy hack caught all of the uncaught errors that happened during connection establishing (before we had any chance to attach an error listener outside of the library's code).\nAfter the fix my servers did not crash anymore, instead they are printing these lines the to log.\n(Every line means that the server was saved from a crash^^)\n[WebSocket Error!] payload must start with 0x00 byte true\n[WebSocket Error!] payload must start with 0x00 byte true\n[WebSocket Error!] payload must start with 0x00 byte true\n[WebSocket Error!] payload must start with 0x00 byte true\n[WebSocket Error!] no handler for opcode 12 1002\n[WebSocket Error!] reserved fields must be empty 1002\n[WebSocket Error!] payload must start with 0x00 byte true\n[WebSocket Error!] payload must start with 0x00 byte true\n[WebSocket Error!] payload must start with 0x00 byte true\n[WebSocket Error!] payload must start with 0x00 byte true\n[WebSocket Error!] reserved fields must be empty 1002\nI don't know which client is sending the bad data. It started to happen only after I added wss (https) option, so I guess maybe that's have something with wss (websocket secure) that is generating invalid data on a very specific configuration of 1 user (all of other users don't have any problems).\nSo let's assume that an evil person writes a simple script that is sending the right invalid data on purpose to make you crash! - So he can crash any nodejs server that runs \"ws\" for websockets !!!\nIt is very likely to happen now that I posted the exact information of the bug in public... hey I might even do it too... so you should patch it immediately and update all your servers.\nThis bug reported 1 year ago, so I guess all current production servers who use \"ws\" are vulnerable.\nI am not sure how to fix it in the right way, I hope someone who knows the code of \"ws\" in a deep level will create a good commit from my information - please let them know somehow.\nCRITICAL BUG\nThanks,\n- DN\n. My servers started to crash because of the reported \"Error: zlib binding closed\" error every ~5 minutes (have thousands of active users) as soon as i updated ws module from version 0.7.0 to 0.8.1 (latest version on npm as of today 30/12/2015).\nThe servers stopped crashing when I reverted ws module back to version 0.7.0\n(Node 4.2.4 Linux)\nPlease fix x_x\nIf you are there already, please also fix related issue: (set error listener to catch error events BEFORE processing the first incoming user bytes)\nhttps://github.com/websockets/ws/issues/246#issuecomment-61374963\nI see this in my error logs (of version 0.8.1):\n[WebSocket Error!] invalid compressed data 1007\n[WebSocket Error!] invalid compressed data 1007\n[WebSocket Error!] invalid compressed data 1007\n. ",
    "thereals0beit": "```\ns0beit@ubuntu:~/n/node-ws$ sudo nodejs index.js\nconnection\nevents.js:74\n    throw TypeError('Uncaught, unspecified \"error\" event.');\n          ^\nTypeError: Uncaught, unspecified \"error\" event.\n    at TypeError ()\n    at WebSocket.EventEmitter.emit (events.js:74:15)\n    at Receiver.self._receiver.onerror (/home/s0beit/n/node-ws/node_modules/ws/lib/WebSocket.js:704:10)\n    at Receiver.error (/home/s0beit/n/node-ws/node_modules/ws/lib/Receiver.js:295:8)\n    at Receiver.processPacket (/home/s0beit/n/node-ws/node_modules/ws/lib/Receiver.js:192:12)\n    at Receiver.add (/home/s0beit/n/node-ws/node_modules/ws/lib/Receiver.js:87:24)\n    at firstHandler (/home/s0beit/n/node-ws/node_modules/ws/lib/WebSocket.js:658:22)\n    at process._tickCallback (node.js:415:13)\n```\nI'm getting this with a custom client I was writing\n```\nchar handshake[2048];\nsprintf(handshake, \n    \"GET %s HTTP/1.1\\r\\n\"\n    \"Host: %s\\r\\n\"\n    \"Upgrade: websocket\\r\\n\"\n    \"Origin: http://%s:%u%s\\r\\n\"\n    \"Connection: Upgrade\\r\\n\"\n    \"Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\\r\\n\"\n    \"Sec-WebSocket-Protocol: chat\\r\\n\"\n    \"Sec-WebSocket-Version: 13\\r\\n\\r\\n\",\n    path, host, host, port, path);\nprintf(\"=== Sending Handshake ===\\n\");\nprintf(\"%s\", handshake);\nif(send(fd, handshake, sizeof(handshake), 0) == -1) {\n    error(\"send handshake\");\n}\n// Wait for reply...\nchar recvBuffer[1024];\nmemset(recvBuffer, 0, sizeof(recvBuffer));\nif(recv(fd, recvBuffer, sizeof(recvBuffer), 0) == -1) {\n    error(\"handshake reply\");\n}\nprintf(\"=== Got Reply ===\\n\");\nprintf(\"%s\", recvBuffer);\n```\nI get a reply from the server, then I close the connection. This error occurs before the connection is closed, after the reply.\n```\ns0beit@ubuntu:~/n/websocket$ ./websocket1 localhost 8080 /\nConnecting: ws://localhost:8080/\n=== Sending Handshake ===\nGET / HTTP/1.1\nHost: localhost\nUpgrade: websocket\nOrigin: http://localhost:8080/\nConnection: Upgrade\nSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\nSec-WebSocket-Protocol: chat\nSec-WebSocket-Version: 13\n=== Got Reply ===\nHTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=\nSec-WebSocket-Protocol: chat\ns0beit@ubuntu:~/n/websocket$ \n```\n. ",
    "varmando": "My quick'n'dirty hack. Use at your own risk.\n```\n--- ws/lib/WebSocket.js 2015-01-03 12:38:40.666944302 +0200\n+++ ws-patched/lib/WebSocket.js 2015-01-03 12:40:48.570946126 +0200\n@@ -824,7 +824,7 @@\n   self._receiver.onerror = function onerror(reason, errorCode) {\n     // close the connection when the receiver reports a HyBi error code\n     self.close(typeof errorCode !== 'undefined' ? errorCode : 1002, '');\n-    self.emit('error', reason, errorCode);\n+    //self.emit('error', reason, errorCode);\n   };\n// finalize the client\n```\n. ",
    "matghaleb": "@Dragonight Thx very much for your hack :+1:  it's working fine for me.\nHope a fix will be provided soon..\n. ",
    "guillaumepotier": "@Dragonight @matghaleb :+1: \n. ",
    "klinquist": "My API using ws started crashing every day or so, I put in a listener, and see that it's this error (\"reserved fields must be empty 1002\").   I am connecting to it with IPWorks ws client and we're only sending basic json strings, any ideas?\n. Nope.   I put in some code to catch errors, but it's not giving me any insight.\n. The code I inserted was in lib/WebSocket.js:71\nthis.on('error', function(a,b) {console.error('[WebSocket Error!]',a,b)})\nWhat I'm getting out of that is:\n[WebSocket Error!] reserved fields must be empty 1002\nWe're using IPWorks WS:\nhttp://www.nsoftware.com/ipworks/ws/\n. ",
    "rainder": "I get \"Uncaught, unspecified \"error\" event. (reserved fields must be empty)\" when I write raw json object to the socket after connection has established \n``` js\nlet socket = net.connect({\n    port: 2001,\n    host: '127.0.0.1'\n  }, function () {\n    console.log('connected');\n    socket.write([\n      'GET / HTTP/1.1',\n      'Host: localhost',\n      'Upgrade: websocket',\n      'Origin: partner',\n      'Connection: Upgrade',\n      'Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==',\n      'Sec-WebSocket-Protocol: splyt-protocol',\n      'Sec-WebSocket-Version: 13',\n      '', ''\n    ].join('\\n'));\nsetTimeout(function () {\n  socket.write(JSON.stringify({}));\n}, 200);\n\n});\n```\nthat fixes the problem.\njs\nwebSocketServer.on('connection', function (socket) {\n  socket.on('error', function (err) {\n    //handle or ignore the error\n  });\n});\n. Facing the same issue. any help?\n. ws.clients.length returns 0\n. i've done some tests overnight.\nclient.js\n``` js\n'use strict';\nconst WS = require('ws');\nlet counter = 0;\n(function create() {\n  const ws = new WS('ws://10.11.241.244:8081');\n  const data = 'somedata';\nws.on('error', err => console.error(err));\n  ws.on('open', open);\nfunction open() {\n    ws.send(data);\n    process.stdout.write('.');\nif (++counter < 5000) {\n  create();\n}\n\n}\n})();\n```\nserver.js\n``` js\n'use strict';\nconst WebSocketServer = require('ws').Server;\nconst wss = new WebSocketServer({ port: 8081 });\nlet connections = 0;\nlet messages = 0;\nwss.on('connection', function connection(ws) {\n  connections++;\nws.on('message', function incoming(message) {\n    messages++;\n  });\nws.on('close', function () {\n    connections--;\n  })\nws.send('something');\n});\n(function report() {\n  const usage = process.memoryUsage();\n  for (let key of Object.keys(usage)) {\n    usage[key] = Math.round(usage[key] / 1024 / 1024) + 'MB';\n  }\nconsole.log(new Date());\n  console.log('  MEM:', usage);\n  console.log('  STATS:', { connections, messages, clients: wss.clients.length });\n  console.log('');\nsetTimeout(report, 5000);\n})();\n```\nprocess\n\nlaunched server on gcc (node:6.2.1)\nlaunched client and scaled up to 4 replicas\nwaited until 20k connections were established\nkilled client docker containers\nwaited at least 1minute for GC to kick in couple of times\n\nbefore each test server was restarted and code was modified (only ws.send commented or uncommented on client or/and server side)\nresults\n20k connections; no messages (ws.send commented on both client and server)\nrss: 374MB dropped to 114MB (after all connections were closed and gc)\n20k connections; 20k incoming messages (client -> server); 1 message per connection\nrss: 740MB => 364MB\n20k connections; 20k outgoing messages (server -> client); 1 message per connection\nrss: 2306MB => 2022MB\n20k connections; 20k incoming and 20k outgoing messages; 1in/1out message per connection\nrss: 2724MB => 2321MB\nseems like something doggy is going on in ws.send() method on the server side.\n. also, if I run a code which:\n- creates a new connection right after previous was created\n- closes a connection after 30s\n- sends 1 message and receives 1 message from the server per connection\n``` js\n'use strict';\nconst WS = require('ws');\n(function create() {\n  const ws = new WS('ws://10.11.241.244:8081');\n  const data = 'somedata';\nws.on('error', err => console.error(err));\n  ws.on('open', open);\nfunction open() {\n    ws.send(data);\n    process.stdout.write('.');\n    create();\n  }\nsetTimeout(function () {\n    ws.close();\n  }, 30000);\n})();\n```\nthe memory (on both sides!) grows indefinitely until process is killed by os https://jpst.it/MzKj\n. I have managed to reduce leakage by setting 'perMessageDeflate: false'. I've dumped rss mem and found a weird endless recursive call in perMessageDeflate->zlib->_onTimeout->_onTimeout->... method (I don't remember now if these are exact method names, but at least you have a guidance). Didn't had time to dig deeper into zlib implementation. \n. ",
    "fahmi4bd": "\nHi everybody, i need know why the ws client close and open it self in server. And this happend to all client. \nand the script in bottom . ",
    "wildeyes": "+1 Still fails. Would you like me to post the log?\n. ",
    "littlekkk": "why my issues are invisible???\n. ",
    "ma11hew28": "OK. Thank you! :-) I didn't know you could pass a callback function to send. I'll check that out.\n. Sorry for the broken link. It looks like the Stack Overflow moderators deleted my question. I'm not sure why.\nThank you for suggesting I close a connection immediately after it's been accepted.\nThe websocket Node.js module allows you to reject a WebSocket Connection Request before it's accepted. Is this possible with the ws Node.js module? If so, how?\n. ",
    "tolmasky": "Did that send callback thing have anything to do with this? I'm getting the same error when closing from SocketRocket.\n. ",
    "pizthewiz": "@3rd-Eden it appears as though the illegal close code -1 sent by SocketRocket causes this.\nsh\nevents.js:74\n        throw TypeError('Uncaught, unspecified \"error\" event.');\n              ^\nTypeError: Uncaught, unspecified \"error\" event.\n    at TypeError (<anonymous>)\n    at WebSocket.EventEmitter.emit (events.js:74:15)\n    at Receiver.self._receiver.onerror (/Users/pizthewiz/sandbox/mcp/node_modules/ws/lib/WebSocket.js:719:10)\n    at Receiver.error (/Users/pizthewiz/sandbox/mcp/node_modules/ws/lib/Receiver.js:301:8)\n    at Receiver.opcodes.8.finish (/Users/pizthewiz/sandbox/mcp/node_modules/ws/lib/Receiver.js:497:14)\n    at Receiver.<anonymous> (/Users/pizthewiz/sandbox/mcp/node_modules/ws/lib/Receiver.js:478:33)\n    at Receiver.add (/Users/pizthewiz/sandbox/mcp/node_modules/ws/lib/Receiver.js:93:24)\n    at CleartextStream.firstHandler (/Users/pizthewiz/sandbox/mcp/node_modules/ws/lib/WebSocket.js:678:22)\n    at CleartextStream.EventEmitter.emit (events.js:95:17)\n    at CleartextStream.<anonymous> (_stream_readable.js:746:14)\n. PR square/SocketRocket#157 should offer a fix for the bad status code.\n. ",
    "cronopio": "On my case I added the correct error handlers but still get the \"invalid error code\" and the socket turn into non usable, I mean I'm just connect from the iOS and send data and need to wait to data that came from the server, but from the server when I tried .send() I got the error and the answer never reach the iOS app.\nI also commented on the SocketRocket repo https://github.com/square/SocketRocket/issues/127\nThanks in advance any insight\n. ",
    "sveinnfannar": "Yes I agree with you. Allowing multiple --header params is also the way curl does it and should be familiar to most.\nUnfortunately, I don't think commander.js supports multiple instances of the same parameter.\nMaybe replacing commander with node-optimist for parsing arguments would be the way to go.\n. ",
    "ostera": "+1\nOn Mon, Oct 28, 2013 at 5:04 AM, Arnout Kazemier\nnotifications@github.comwrote:\n\nMost people that install ws do not need wscat and the dependencies it\nrequires. It would be cleaner to move it to it's own module and just have\nws be the WebSocket handler.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/einaros/ws/issues/256\n.\n\n\nLeandro Ostera\nWeb Engineer\nI hack at github.com/leostera\nI talk on skype as leostera\nI tweet as @leostera http://twitter.com/leostera\nI blog at blog.leostera.com\nI network at angel.co/leostera\nI video at vimeo.com/leostera\nI play bass at soundcloud.com/leostera\nI'm also on linkedin.com/in/leostera\nAnd yeah, I need a new signature.\n. ",
    "dcousens": "+1, any word on this?\n. @3rd-Eden could you clarify if this module works at all with browserify now?  Or should I just avoid using it?\n. ",
    "aembke": "I've been seeing this issue with the client myself recently too. Using node v0.10.20 I've been seeing the \"Reserved fields must be empty\" error when switching to https. When using http it works fine. Also, I've tried changing the server from pure node to pure sinatra to sinatra proxied by nginx to node proxied by nginx and the client error message is the same regardless of the server configuration. \nIt looks like some other people were having similar issues earlier in this thread (https://github.com/joyent/node/issues/5557) with socket.io. I'm not sure if socket.io uses ws but even if not maybe they're parsing data the same way?\n. ",
    "jaromirmuller": "Works for me. We're using ws@0.4.31 and node@v0.10.24 and node@v0.10.15\n. ",
    "thewazir": "Which client are you using? I've had problems in mobile Safari when the browser would not connect to a secure websocket connection because I was using a self signed cert.\n. ",
    "buley": "I'm having issues using ws@0.4.31 and node@v0.10.26 and node@v0.11.9\nThe client gets an immediate disconnect with nothing but a 1006 CLOSE_ABNORMAL but the (insanely useful) wscat offers this interesting error response:\n\n\u279c  app git:(master) \u2717 ./node_modules/.bin/wscat --connect wss://localhost\n? error: Error: UNABLE_TO_VERIFY_LEAF_SIGNATURE\n\nI'm able to curl OK on 443:  \n\u279c  app git:(master) \u2717 curl -IL https://localhost --insecure\nHTTP/1.1 200 OK\nX-Powered-By: Express\naccess-control-allow-origin: http://localhost\naccess-control-allow-headers: Content-Type, Content-Length, User-Agent\naccess-control-allow-methods: GET,POST,PUT,HEAD,DELETE,TRACE,COPY,LOCK,MKCOL,MOVE,PROPFIND,PROPPATCH,UNLOCK,REPORT,MKACTIVITY,CHECKOUT,MERGE,M-SEARCH,NOTIFY,SUBSCRIBE,UNSUBSCRIBE,PATCH\ncontent-type: application/json\ncontent-length: 16\nDate: Tue, 29 Apr 2014 20:39:39 GMT\nConnection: keep-alive\nI have tried rejectUnauthorized set to false and secureProtocol set to SSLv3_method. \nIf I add to the .bin/wscat file node's equivalent to curl's --insecure flag:\n\nprocess.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';\n\nI get a disconnect like on the client side:\n```\n\u279c  app git:(master) \u2717 ./node_modules/.bin/wscat --connect wss://localhost     \nerror: Error: socket hang up\n\n\n``\n. I had an issue with passingwsmyexpressapprather than myhttpsserver, but once I got that resolved - and fixed my root CA certificate issue - I'm able to get closer to resolution:wscatnow works 100%, as does Firefox 26, but Chrome 32 still disconnects on creating theWebSocket`\n\ncould  @aembke be right (https://github.com/einaros/ws/issues/257#issuecomment-27447241) on similarity to https://github.com/joyent/node/issues/5557? since this seems Chrome-only I would guess  protocol related? other theories http://code.google.com/p/go/issues/detail?id=6121 https://github.com/Worlize/WebSocket-Node/issues/88#issuecomment-19093314 \n. That's how I got past my initial problems as well. Next thing to check: Does it work in Chrome and not just on the command line or in FF? \n. You're the first person to verify my issue report, so - thanks! \nBut yeah, this library is not production ready w/o Chrome support.\nI'm not the best person to offer his time but will do so regardless. If anyone can point me to where I should poke around for this issue, I'd love to use this library in my application and would be happy to spend some time on making Chrome work. \n. ",
    "joealcorn": "I'm also seeing the error: Error: socket hang up error, even when using the ssl example in this repo.\n. Here's the SSL error I'm getting\n$ openssl s_client -connect ws.gorealti.me:9000\nCONNECTED(00000003)\n3924:error:140790E5:SSL routines:SSL23_WRITE:ssl handshake failure:/SourceCache/OpenSSL098/OpenSSL098-50/src/ssl/s23_lib.c:182:\n. Boom. Found the issue, had to add the CA bundle to the options object, instead of bundling them into my cert.\nSo \napp = https.createServer({\n    key: fs.readFileSync(config.ssl.key),\n    cert: fs.readFileSync(config.ssl.cert),\n}, processRequest).listen(config.port);\nbecomes \napp = https.createServer({\n    key: fs.readFileSync(config.ssl.key),\n    cert: fs.readFileSync(config.ssl.cert),\n    ca: fs.readFileSync(config.ssl.ca),\n}, processRequest).listen(config.port);\n. You're right, looks like I celebrated too soon. hmm..\n. I loaded up wireshark to have a closer look and it began working. Very odd..\nWill keep an eye on it\n. ",
    "vinodkumar4a5": "Hi,\n      I need a client which can communicate with the server using socket.io+ssl connection in c++. I got some codes in java but i want in c++.if it is a wesocketclient+ssl(wss) is also fine for me. can any body share the code or information with me please..\nThanks,\nvvk.\n. ",
    "chovy": "I got it working, I wrote about it here for anyone interested: http://www.chovy.com/web-development/self-signed-certs-with-secure-websockets-in-node-js/\n. ",
    "aleclarson": "@chovy Any suggestions on connecting to a server (that uses a self-signed cert) from another server? (eg: another NodeJS process)\n``` js\nvar WebSocket = require('ws');\nvar ws = new WebSocket('wss://192.x.x.x:4443', '', {\n  headers: {token: 'xxxxxx'}\n});\n```\nI can connect to my server from Google Chrome, but not from the terminal.\nError: unable to verify the first certificate\nEDIT: Figured out how to allow self-signed certs (never use this in production):\njs\n// Do this before calling `new WebSocket` on the client server (not the websocket server).\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;\n. ",
    "DavidDurman": "Oh, sorry, I use ws:// of course, I put it wrong in the description.\n. Here is the test case, it's pretty straightforward. (Just did npm install ws before):\nserver.js:\njavascript\nvar WebSocketServer = require('ws').Server;\nvar wss = new WebSocketServer({ port: 1234 });\nwss.on('connection', function() {\n    console.log('good stuff');\n});\nclient.js:\njavascript\nvar WebSocket = require('ws');\nvar ws = new WebSocket('ws://localhost:1234?foo=bar');\nnode server\nnode client  // Error: socket hang up\nnode --version // v0.10.19\n. Thanks! That was it. Didn't realize it's necessary. Works fine in the browser.\n. ",
    "kflu": "I hit the similar error with a completely different bug in my server code. This error showed up from client side. It isn't a useful error at all. Took a lot of my time to find out why. Can we improve it here.\n. ",
    "fvukovic": "@3rd-Eden  Can u explain how to fetch nad use that parameter on the server side ?. @lpinca Can u explain it how to fetch that token parameter on the server side? \nI tried we.token it's undefined?. ",
    "swapnilrohom": "you will get that info in the request - \nCLIENT - \nvar ws = new WebSocket('ws://localhost:1234/?id=1&name=foo');\nSERVER - \n```\nconst url = require('url');\nwss.on('connection', function connection(ws, req) {\n  console.log(url.parse(req.url, true).query); // { id: '1', name: 'foo' }\n});\n```. ",
    "chirgwin": "In case this is still relevant to you or anyone else, the trick is to use server.server, a workaround mentioned here https://github.com/restify/node-restify/issues/717#issuecomment-66122016\nThis simple example using restify v4.0.4 and ws v1.0.1 works for me:\nvar restify = require(\"restify\");\nvar WebSocketServer = require(\"ws\").Server;\nvar server = restify.createServer();\nvar wss = new WebSocketServer({server: server.server});\nserver.listen(8080, function () {\n  console.log(\"%s listening at %s\", server.name, server.url);\n});\n. ",
    "jasonsilberman": "ah ok,\nthanks\n. ",
    "pixelglow": "@3rd-Eden, are you referring to the tests for Node 0.6 and 0.8? The stream.Readable appears to be a new API.\n. OK, fixed it up for 0.6 and 0.8. Did you want me to rebase both to a single commit?\n. @3rd-Eden, it's been 3 weeks\u2026 any further changes you want me to make on this pull request, or is it not appropriate for the project?\n. @3rd-Eden, I've rebased against the latest master.\n. ",
    "thedufer": "Or allow path to be a regex?  This would prevent the path-deduping logic, but that seems like its pretty unnecessary.  You should be able to count on devs to do the right thing there.\n. ping/pong methods send frames that act as ping or pong messages as described by the WebSocket spec.  Most browsers will respond to a ping with a pong automatically, but won't expose to the JavaScript object the fact that a ping or pong has been received, nor does it allow the JavaScript WebSocket object to initiate a ping or pong frame.\n. ",
    "SorJEF": "Wanna add some thoughts related to setting Origin header. Hope this helps\nIn the RFC6455 it is said that Origin header must be sent if a WebSocket connection is performed by browser and it MAY be sent by non-browser clients in some cases. So I think it is not the best way to send Origin header by default if it was not explicitly specified in the options.\nLet me know if I need to open another issue for this discussion.\nHere are the quotes and references from the RFC spec:\n\nThe request MUST include a header field with the name |Origin|[RFC6454] if the request is coming from a browser client.  If the connection is from a non-browser client, the request MAY include this header field if the semantics of that client match the use-case described here for browser clients.\n- Page Link, paragraph 8\nAdditionally, if the client is a web browser, it supplies /origin/.\n- Page Link Section 4.1\nThe WebSocket Protocol uses the origin model used by web browsers to restrict which web pages can contact a WebSocket server when the WebSocket Protocol is used from a web page.  Naturally, when the WebSocket Protocol is used by a dedicated client directly (i.e., not from a web page through a web browser), the origin model is not useful, as the client can provide any arbitrary origin string.\n- Page Link\nThis header field is sent by browser clients; for non-browser clients, this header field may be sent if it makes sense in the context of those clients.\n- Page Link\nThe |Origin| header field [RFC6454] is used to protect against unauthorized cross-origin use of a WebSocket server by scripts using the WebSocket API in a web browser.\n- Page Link\n. \n",
    "tuukka": "The merge of #494 resolved this issue.\n. ",
    "dandv": "Stupid copy/paste error.\n. ",
    "bagbay-sav": "Any luck with this swither?  I'm seeing this as well.  I found this on a forked branch.\nhttps://github.com/jvansteirteghem/streamws/commit/4c37cc3b09a67aa15ab6c7fd8993a473a9be10c5\nif (this.dead) return;\n. Ahhh ok.  I've been calling terminate() as well.  I changed it to close() and so far so good.  I'll run it for a while and see how it goes.\n. ",
    "swither": "In my case the issue was that i used terminate() instead of close() and sometimes it didn't work. \n. ",
    "pwnall": "I ran into this as well, didn't use terminate() anywhere.\nhttps://travis-ci.org/pwnall/w3gram-js/jobs/38731627\n. @stefanocudini I'm not using jwt. Here is what I'm doing.\nhttps://github.com/pwnall/w3gram-server/blob/70a3024527e72f184cfb4d0139de218f96690848/src/ws_connection.coffee#L44\nhttps://github.com/pwnall/w3gram-server/blob/70a3024527e72f184cfb4d0139de218f96690848/src/ws_connection.coffee#L58\nhttps://github.com/pwnall/w3gram-server/blob/70a3024527e72f184cfb4d0139de218f96690848/src/ws_connection.coffee#L22\nI hope this helps.\n. ",
    "amark": "I just hit this when I was doing stress testing on my server. But I think it might be related to me reloading FireFox while operations are still happening (see https://bugzilla.mozilla.org/show_bug.cgi?id=712329 ) that might be triggering stuff. I am using close() onbeforeunload in FF though.\nThanks for such a great module and all the hard work! :)\n. Author of amark/gun here, just wanted to say I'm pretty sure this isn't our fault (maybe?) because the error stack is full ws (no gun source code listed) and Cannot read 'add' of null is a fairly common error when a typecheck isn't handled.\nWould it be helpful if we PRed a patch like:\nthis._ultron.on('data', (data) => this._ && this._.receiver && this._receiver.add(data));\n?. Interesting. Thanks, updating to ws@5 , please close, will re-open if we see it again.. @lpinca you are awesome!!!! :) :) :) \ud83d\udc4d Closing!. ",
    "stken2050": "I forked a very simple repo and refactor for my own use:\nhttps://github.com/kenokabe/WebSocketStream\nhttps://github.com/kenokabe/WebSocketStream/blob/master/main.js\nYou should be able to read the source and refactor for your own need from here.\nIt's basically node stream.Duplex inherits\nrequire('util')\n      .inherits(WebSocketStream, stream.Duplex);\n. ",
    "russplaysguitar": "@kenokabe :+1: \n. ",
    "zhirzh": "@benzmuircroft :+1:\nI too would like an example. Or at least some clarification on what the method does (or doesn't do)\n. ok. I was getting the same error with my setup which is:\n```\nnode 4.4.5\nnpm 3.9.5\nsocket.io ^1.4.8\nsocket.io-client ^1.4.8\nsocket.io-stream ^0.9.0\nwebpack ^1.13.1\n```\nI am using webpack to bind together the aforementioned socketio modules and the final config that worked for me is below:\nvar path = require('path');\nvar SRC_DIR = path.resolve(__dirname, 'src');\nvar BUILD_DIR = path.resolve(__dirname, 'build');\nvar NODE_DIR = path.resolve(__dirname, 'node_modules');\nmodule.exports = {\n  entry: path.resolve(SRC_DIR, 'index'),\n  target: 'node',\n  output: {\n    path: BUILD_DIR,\n    filename: 'bundle.js',\n    publicPath: '/'\n  },\n  module: {\n    noParse: [/json-schema/],\n    loaders: [{\n      test: /\\.jsx?$/,\n      include: SRC_DIR,\n      loader: 'babel-loader'\n    }, {\n      test: /\\.json$/,\n      loader: 'json-loader',\n    }, {\n      test: /\\.scss$/,\n      include: SRC_DIR,\n      loaders: ['style-loader', 'css-loader', 'sass-loader']\n    }]\n  },\n  resolve: {\n    modulesDirectories: [SRC_DIR, NODE_DIR],\n    extensions: ['', '.js', '.jsx', '.json']\n  },\n  externals: {\n    'socket.io': 'commonjs socket.io',\n    'socket.io-client': 'commonjs socket.io-client',\n    'socket.io-stream': 'commonjs socket.io-stream',\n  },\n};\n\nThe main changes in my non-working and working configs are:\n1.\ntarget: 'node'\n2.\nmodule: {\n    ...\n    noParse: [/json-schema/]\n  }\n3.\nresolve: {\n    extensions: [ ... '.json']\n  }\n4.\nexternals: {\n    'socket.io': 'commonjs socket.io',\n    'socket.io-client': 'commonjs socket.io-client',\n    'socket.io-stream': 'commonjs socket.io-stream'\n  }\n\nI hope this helps.\n. :+1: I would also love to have an example on Websocket#stream.\n. ",
    "kulicuu": "I have same error and issue on Ubuntu 13.10.\n. ",
    "benzmuircroft": "the message was probably still traveling on through its route to the sever (having left the clients), then you kill the clients. their message was sent before you killed them so it will still get to the sever. you would have to check that the sender client exists before you decide to do anything with the data..\n. more important, why does the socket die? And can it be revived rather than crashing\n. Ncat: Could not resolve hostname \"siteA.com:8004\": Name or service not known. QUITTING. but the site is view-able in the browser!. nc siteA.com 8004\nNcat: Connection timed out.\n. netstat -an | grep \"LISTEN \"\ntcp6       0      0 :::8004                 :::*                    LISTEN   \n. Yeah, should I close or close later when i paste the solution?. iptables maybe did not like that particular port ... i changed it to 8001 which is also open and it works, why? i don't flippin know lol. ",
    "leeyo": "@benzmuircroft    Your answer seems something like that  the network is not fast enough,so the data is on the route to the server?  the server and clients are in an LAN,with 1 G bandwidth,network delay is time=0.147 ms.But the server still emit message event after i kill the clients in a few minutes.\nIs't possible that all data have been received, but the server is not fast enough to deal with data ,so it will emit message event in a few minutes even though i kill the clients.\nAnd is there any buffer for receiving datas ?\n. ",
    "Mattijah": "Hi, have a look at this:\nhttps://github.com/einaros/ws/pull/298\n. @harshavardhana and what's the point doing that all the time if it can be done quietly inside?\n- In the documentation is not mentioned that data can't be numbers also there won't be thrown any error if a Number was used...\n. Have you seen changes? I don't think that a test is needed. What I did was that I removed declaration of flags because the variable wasn't used in that block at all... and added this declaration above where was missing...\n. What if I will call only cb(false, 500)? Then description is going to be \"Unauthorized\" and it shouldn't be. To specify code & description is quite annoying, restricting and unnecessary as well. What about something like this:\ncode = code || 401;\nname = http.STATUS_CODES[code]; //http://nodejs.org/api/http.html#http_http_status_codes\n. I understand... ,but I don't think that this feature (Ability to set up a custom description & code) will be used a lot, probably not at all. Up to you ;)\n. ",
    "download13": "Does anyone have a preference on a fix for this?\nWould it be better to replace all uses of options.protocol in the client Websocket with the protocols argument? As long as it's there and not being used for anything else (and it does match better to the browser API than using options.protocol) it seems like the thing to use.\nThe other option is to use the protocol option for the client as well as the serverClient, but that seems wrong somehow since we may want to pass an array of protocols into it.\nMy thoughts were to stop using options.protocol on the client end and correctly handle the protocols argument. I can get started on a pull request with the fixes and some tests, but I'd like to know what whoever has final say wants to do.\n. Nobody merge this yet. I just noticed some problems that need fixing.\n. Okay, finally ready.\n. ",
    "englercj": "The library should definitely make use of the protocols argument and be consistent with W3C spec for the WebSocket implementation. Right now I have to use a workaround like:\njs\nvar ws = new WebSocket(uri, protocols, { protocols: protocols });\nSo that it works both using the node and browser implementations.\n. They are exposed on the instance in the browser and in the node lib, I recommend using those to follow the spec.\n. Will do! Was it intentional for these tests to be assignments and not ===?\nhttps://github.com/websockets/ws/blob/master/test/WebSocket.test.js#L709\n. Some random test on node 0.8 failed on that second commit, but not sure how adding a test made that happen O.o\n. Ping! Curious if there is anything else you need from me for this.\n. ",
    "sh4d0wPhoenix": "nope. if I'm not wrong, but I can be, server must send control frame to client before client can start sending data: you can't send data if connection  is not established to you.\n. ws can't guarantees you anything, but protocol - look at protocol specification https://tools.ietf.org/html/rfc6455\n. Developing on Windows systems (can say for ruby, nodejs, python) is pain in ass. Make your life easy install Virtualization tool (like VirtualBox or VMWare) and some linux distr. like Ubuntu, Debian or Gentoo.\n. ",
    "fresheneesz": "So you're saying that ws guarantees that the control frame is sent to the client after the open even is not only emitted, but handled? I'd be surprised if could guarantee that.\n. ws can guarantee that you can set up a message handler before any message can possibly get in if its designed right. The question is: is it designed right?\n. @3rd-Eden How? I don't see anything about that in the docs.\n. Ah I see. Cool! Thanks a lot! Btw, it would be nice if the ws.md docs were just put into the readme.md file - its an overwhelmingly common thing to do on github for docs for small modules. At very least there should be link to https://github.com/einaros/ws/blob/master/doc/ws.md you can click on.\n. ",
    "edufelipe": "@3rd-Eden Do you consider this an interesting functionality to have?\n. @3rd-Eden Shouldn't this be a 400 Bad Request or 406 Not Acceptable? It doesn't make much sense to say the request was unauthorized due to a protocol negotiation error when there are better response codes in the RFC\n. On the other hand, not being able to pass the name stops me from using a custom HTTP code. I'll post a new version the simplifies this a bit.\n. @Mattijah When designing an API, in my opinion, it's better to be through than to lack features. This is completely backwards compatible, includes a test case and has no performance implications, so why not add it?\nIt solves a real problem for me. It allows my API users to differentiate between auth needed (401) and auth wrong (403).\n. ",
    "ivershuo": "@Mattijah, according to the w3c's specification, It defined the WebSocket interface like this:\n\nThe second, protocols, if present, is either a string or an array of strings. If it is a string, it is equivalent to an array consisting of just that string; if it is omitted, it is equivalent to the empty array. Each string in the array is a subprotocol name.\n\nso, I think we should keep the second argument, and just change the line 458 in lib/WebSocket.js to:\nprotocol: protocols.join(',') || null,\n. ",
    "harshavardhana": "how is this different than doing ? \nvar i = 0;\nwsClient.on('open', function() {\n  console.log('connected');\n  wsClient.send(i.toString(), function(error) {\n    if (error)\n      console.log (error);\n  });\n});\n. ",
    "jamesmortensen": "@rdclark Thanks for this!  Was wondering what I was doing wrong.  Hopefully, the maintainers can help you get your pull request accepted...\n. ",
    "tkazec": "Fixed in #753.\n. ",
    "tomalex0": "This fixed issue with stopping server\nws.on('error', function() {\n        console.log('npm ws error');\n});\n. My node app is acting as client to websocket server in java.\nI tried an https request using 'request' module with \nsecureProtocol: 'SSLv3_method\nvar options = {\n        strictSSL: false,\n        rejectUnauthorized: false,\n        secureProtocol: 'SSLv3_method',\n        agent: false,\n        url : 'https://test.com/websock',\n        method : 'GET'\n    };\nrequest(options, function(error, response, body) {\n        console.log(response.statusCode);\n        console.log('its in here');\n });\nand got a response code but using websocket im getting\n{ [Error: socket hang up] code: 'ECONNRESET', sslError: undefined }\nwhat all options do we have in ws to pass ssl configs, i tried all these\nvar ws = new WebSocket('wss://test.com/websock',{ \n    rejectUnauthorized:false,\n    strictSSL: false,\n    secureProtocol: 'SSLv3_method'}\n);\nand still got same hangup issue\n. I'm getting this error while connecting to wss, \n[Error: socket hang up] code: 'ECONNRESET', sslError: undefined\nws works fine\n. This issue is resolved. It has something to do with Jetty installed in websocket server (tomcat). Once jetty was removed, wss worked fine\n. @adityapatadia ,  do you have snippet to share the way you don auto re connect.\nOr did you used primus or reconnecting-websocket modues\n. ",
    "tedgoddard": "Good point; maybe this form:\nvar onMessage = function onMessage (data, flags) {\n. Is this in the master branch?  I still see the WebSocket.js onMessage function declared within the if() (and --use_strict complains about this syntax).\n. ",
    "hanjukim": "I just closed duplicate pull request.. Please merge this.\n. ",
    "oprs": "Can anyone with write access please consider merging this (Ted?), as this minor issue is impacting several other projects.\nCheers.\n. ",
    "3y3": "How about this syntax:\n``` js\nWebSocket.prototype.addEventListener = function(method, listener) {\n  var target = this,\n      wrappedListener;\nif (typeof listener !== 'function') return;\nif (method === 'message') {\n    wrappedListener = function(data, flags) {\n      listener.call(this, new MessageEvent(data, flags.binary ? 'Binary' : 'Text', target));\n    }\n  } else if (method === 'close') {\n    wrappedListener = function(code, message) {\n      listener.call(this, new CloseEvent(code, message, target));\n    }\n  } else if (method === 'error') {\n    wrappedListener = function(event) {\n      event.target = target;\n      listener.call(this, event);\n    }\n  } else if (method === 'open') {\n    wrappedListener = function() {\n      listener.call(this, new OpenEvent(target));\n    }\n  } else {\n    wrappedListener = function() {\n      listener.apply(this, arguments);\n    }\n  }\nwrappedListener._listener = listener;\n  this.on(method, wrappedListener);\n}\n``\n. How about use [node-pre-gyp](https://github.com/mapbox/node-pre-gyp) ?\n. Surenode-pre-gyp` can't solve this problem by himself, it only provide API to download pre built binaries. So, common users (that don't have installed Visual Studio etc.) will receive already builded binaries for their platform.\nBuilding and storing this binaries is a work for maintainers and their Virtual Machines.\n. > The binary addon is completely optional and ws will function as intended without it.\n@3rd-Eden , at current time it's not a true. For example node-inspector project has issue based on problems with building of  ws on Windows.\n. @3rd-Eden , how about add AppVeyor as second cloud CI server?\n. There is no destructive changes. Look like ready to merge?\n. Why we expect this in ws lib?\nThere is no access to private fields, so each user can implement this by himself.\nws should not to be socket.io\n. ",
    "simonratner": "It has been a while. I no longer use this library, nor do I have an OSX machine handy to verify that the patch still works.\nFeel free to take this code verbatim, or modify and merge as needed, if you think this functionality should be in https://github.com/websockets/wscat.\n. ",
    "nwwells": "We'll track this on websockets/wscat#32. @lpinca you can close this if you want, and I'll just reference the commits from there.. ",
    "piranna": "Since the length is correct, I think it's a bug on Node.js Buffer object.\nEl 13/3/2017 9:46, \"Luigi Pinca\" notifications@github.com escribi\u00f3:\nClosed #309 https://github.com/websockets/ws/issues/309.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/issues/309#event-996832325, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAgfvkpT4vX8sJvW6NSFDpsrR0q55xgSks5rlQJ1gaJpZM4B1Vml\n.\n. Sh*t... :-/ I would open an issue for that...\nEl 13/3/2017 10:29 AM, \"Luigi Pinca\" notifications@github.com escribi\u00f3:\n\nIt probably uses this function\nhttps://github.com/nodejs/node/blob/efec14a7d12d9e07e4efcc8e5c0ad7f80c47f83f/lib/buffer.js#L249-L255\nbut in the loop obj[i] is a string so it fails silently.\nAlso the length is not correct in all cases:\n\nvar s = new String('1\u20ac')undefined> Buffer.from(s)> Buffer.from('1\u20ac')\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/issues/309#issuecomment-286055586, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAgfvmbEQb4648tgyTtGPLqWGdyhMCH-ks5rlQyWgaJpZM4B1Vml\n.\n. +1, removeEventListener() needs to be added, I try to use as much as possible the browser API to be sure to be compatible with browsers... :-/\n. Any update on this?. What about adding the shim in the ws source code and add a browser field in package.json? :-). > @piranna it has been removed in e54d45f.\n\nSorry to read that, I can only say that you would have your reasons, but I agree with the others that removing the shim was a bad movement :-(. It would be good to open an issue to evaluate it.... There should be two thresholds, one to enable compression and another to do\nit async... Sometimes, gzip compressed data gets bigger than the original\none for small data chunks, and also there's the CPU usage for the\nconpression.\nEl s\u00e1b., 25 de agosto de 2018 0:46, Alex Hultman notifications@github.com\nescribi\u00f3:\n\nAs websocket usually is used for small chunk of json data I think\nregardless of the memory leak it's better to use sync deflate for small\ndata considering under 1ms operations are neglectable.\nBingo.\nAt these small messages (most users send less than 500 bytes a message)\nthe threading, eventing, copying and synchronization overhead it means to\n\"make it async\" becomes a bigger cost than the actual compression itself.\nMaking it \"async\" only fools oneself as it accomplishes nothing of value.\nI would never put compression as \"async\" because it simply is logically\nimpossible to do so, but I also don't care enough to argue anymore. Setting\na threshold would solve it enough to be usable.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/issues/1369#issuecomment-415901743, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAgfviJ5nirilZGMU4_CHPXS9_BNVwMyks5uUIJjgaJpZM4TgILB\n.\n. > I'll assume that for each length of input, gzip achives maximum efficiency if and only if all input bytes are the same. In this case, and using values from 0\u2026127, the break-even is at 23 bytes.\nInputs shorter than 23 bytes will result in larger outputs. For these, we shouldn't waste any CPU cycles on gzip and the length comparison.\n\nNot sure about the 23 bytes number, but yes, that's exactly what I was talking about :-). > Node.js does not have an official API to use inflate/deflate streams synchronously.\nStreams not, but there's for buffers.. But does compression being done at fragment level? Isn't it message level?. > * There might be issues if an agent is used and the protocol is changed from HTTPS to HTTP or vice versa since HTTPS and HTTP use different agents.\nI would throw an error if changuing from HTTPS to HTTP to notify about security issues by default, and maybe add an option to disable it.. > It should be enabled only when the server is trusted.\nSo do you think just lefting redirections as an opt-in is just enough?. Great! Thank you :-). ",
    "EverettQuebral": "I'm using the same property to keep track of the client.  I agree with maxleiko to have a better interface in getting this value to prevent us from versioning problems.    \nI would also like to add an interface of getting the cookie from the client.        \njavascript\nvar sessionId = Utils.getSession(ws.upgradeReq.headers.cookie);\nvar webSocketKey = ws.upgradeReq.headers['sec-websocket-key'];\n. ",
    "binarykitchen": "Yeah, I agree, a public function to retrieve an unique client identifier would be very useful.\n. this is interesting - but let me clarify something: what when i am on the road with the mobile, having an open websocket connection to the server for app X but loose connection for few seconds during a cell handover? will the above trick resume the same connection or create a new one?\n. why can't we re-use the session when re-connecting? @Spentas \n. hmmm, are websocket sessions really bound to an ip address instead of a token??\n. sure i understand that. reason i am asking all that is because my www.videomail.io app is having issues on androids when you are moving from one cell to another. when reconnected, new streams are instantiated instead of the existing one which makes it very difficult to send data to the same destination on the server side.\n. Okay, but tell me, how can websockets bypass the HTTP authorization then?\n. Okay. What else should I use then to password-protect a site that uses websockets?\n. @ibc hmmmm, cookies? not sure if i can follow you. care to show me an example or some pseudo code? thanks heaps!\n. I see. Do you think we could make this error message a bit more developer-friendly? Something like that:\njs\nif (this.readyState != WebSocket.OPEN) {\n    var err = new Error('Socket not opened. Expected state is OPEN but current state is set to ' + this.readyState.toString());\n    if (typeof cb == 'function') cb(err);\n    else throw err;\n    return;\n}\nwhereas this.readyState.toString() is just an example to print the string expression of the state instead of a number.\nI think that would be nice and will definitely help developers to spot bugs in their own app code.\n. Yeah, the above was just \"pseudo code\".\nWould love to do a PR but have other priorities right now, sorry :(\n. Here you go! :) @ibc \n. Right, my bad - I was wrong about the connection-orientation. In that case I won't need a packet number because all will arrive in order on the server side. Can you confirm and is there a test case for this?\n. Right, of course, all good. Thanks!\n. So, in other words I should discuss this on npm ....\n. Oh @3rd-Eden, v0.7 is out and solves this by default?\n. Ah, I am already using v0.7.1 here but I found out that the websocket-stream package still uses ws v0.6.5 which causes this. I'll ask them to bump this version, see https://github.com/maxogden/websocket-stream/issues/64.\n. Hmmm, maybe I am just confused. Initially I thought the new WebSocket(...) line on https://github.com/websockets/ws/blob/master/lib/browser.js#L33 is calling the constructor at https://github.com/websockets/ws/blob/master/lib/WebSocket.js#L46 which has options for the third argument where you could set custom headers.\nI guess, one is referring to the native browser code, the other one is like a mockup. Or am I interpreting this the wrong way?\nUltimately I am after custom headers between client and server.\n. Yes, I am referring to browsers as clients. I see, I must have misinterpreted that code before. Sorry.\nSo, how can I transfer data from the browser to the client during websocket initialisation? If custom headers are out of questions, what else is possible? Query strings? I cannot picture how query strings here because these are for GET requests only. But not for web sockets. Correct me if I am wrong.\n. Ah, you mean we can amend query parameters to the URL we are passing onto the WebSocket constructor?\nOn the client something like \nnew WebSocket('http://myserver.com/websocket/api/xxx?apiKey=blahblah') \nand on the server side an I can parse this with\nurl.parse(client.upgradeReq.url, true).query?\nThat would be great! Will check this out tonight ...\n. Yes, it worked. Thanks so much man!\n. Maybe it's coming from nginx but I still do not see why. I have a proxy configuration with proxy caching. But I always close the websocket when the user has exited.\nHmmm ... has anyone every configured a nginx proxy cache together with websockets?\n. I think I found the cause @3rd-Eden but am not sure. In nginx I changed the config to:\n```\nlocation / {\n  try_files $uri @proxy;\n}\nlocation @proxy {\n  proxy_pass https://127.0.0.1:$proxy_port;\n# this avoids upstream time outs (110: Connection timed out)\n  # proxy_read_timeout 260s;\n# disables proxy cache completely. does not go well with websockets\n  proxy_cache_bypass 1;\n  proxy_no_cache 1;\n}\n```\nHere, disabling the proxy cache is the answer. Too bad I cannot use them caches for websockets anymore :(\n. For other browsers I cannot say because their dev consoles cannot display websocket frames.\nI doubt that wscat will help because the above issues happen by random.\nFor now, I suggest to improve the error mechanisms around time out handling and to throw errors with good descriptions to assist clueless, poor developers like me ;)\n. @woverton yeah, with wscat it works - but i still cannot access from my app within using ws.\n. wait - can you specify the port via wscat?\n. thanks - i figured out that my machine on ubuntu 15.04 is having very weird networking issues i cannot reproduce nor locate. this has caused these timeouts. difficult to crack. just not related to this issue tracker.\n. yes, absolutely @psorowka, the above code should emit an instance of the error class \n. @psorowka I am still using iojs v2.5 here so please fix the bug. It is getting annoying\nLet me paste a longer stack here:\n$ cat error.log                                                                                                                                                                                            \nTypeError: Cannot assign to read only property 'type' of invalid compressed data\n    at WebSocket.onError (/var/www/videomail/production/source/node_modules/ws/lib/WebSocket.js:426:16)\n    at emitTwo (events.js:87:13)\n    at WebSocket.emit (events.js:172:7)\n    at Receiver.onerror (/var/www/videomail/production/source/node_modules/ws/lib/WebSocket.js:851:10)\n    at Receiver.error (/var/www/videomail/production/source/node_modules/ws/lib/Receiver.js:321:8)\n    at /var/www/videomail/production/source/node_modules/ws/lib/Receiver.js:532:32\n    at /var/www/videomail/production/source/node_modules/ws/lib/Receiver.js:358:9\n    at InflateRaw.onError (/var/www/videomail/production/source/node_modules/ws/lib/PerMessageDeflate.js:226:5)\n    at emitOne (events.js:77:13)\n    at InflateRaw.emit (events.js:169:7)\n    at Zlib._handle.onerror (zlib.js:366:10)\n    ---- async ----\n    at WriteStream._write (fs.js:1856:6)\n    at WriteStream.<anonymous> (fs.js:1852:12)\n    at doWrite (_stream_writable.js:292:12)\n    at writeOrBuffer (_stream_writable.js:278:5)\n    at InflateRaw.Writable.write (_stream_writable.js:207:11)\n    at InflateRaw.Zlib.flush (zlib.js:453:10)\n    at InflateRaw.<anonymous> (zlib.js:449:12)\n    at InflateRaw.g (events.js:260:16)\n    at emitNone (events.js:67:13)\n    at InflateRaw.emit (events.js:166:7)\n    at onwriteDrain (_stream_writable.js:356:12)\n    at afterWrite (_stream_writable.js:344:5)\n    at onwrite (_stream_writable.js:337:7)\n    at WritableState.onwrite (_stream_writable.js:89:5)\n    at afterTransform (_stream_transform.js:79:5)\n    at TransformState.afterTransform (_stream_transform.js:54:12)\n    at Zlib.callback (zlib.js:614:5)\n    ---- async ----\n    at InflateRaw.Transform._read (_stream_transform.js:167:10)\n    at InflateRaw.Transform._write (_stream_transform.js:155:12)\n    at doWrite (_stream_writable.js:292:12)\n    at clearBuffer (_stream_writable.js:396:7)\n    at onwrite (_stream_writable.js:331:7)\n    at WritableState.onwrite (_stream_writable.js:89:5)\n    at afterTransform (_stream_transform.js:79:5)\n    at TransformState.afterTransform (_stream_transform.js:54:12)\n    at Zlib.callback (zlib.js:614:5)\n. @psorowka thanks - just added a small comment there\n. looking good now\n. but i think unit tests are missing and crucial here\n. good job! but probably you will want to remove that console.log(error);\n. great - all good like that. many thanks again\n. @stoffeastrom i am not the maintainer of this package - @3rd-Eden is. \n. oh, @einaros it is then. can you merge this?\n. just search:\nhttps://github.com/websockets/ws/blob/7debd827d39925650bba5a270811ed82616f0eb1/lib/WebSocketServer.js#L242\nhttps://github.com/websockets/ws/blob/7debd827d39925650bba5a270811ed82616f0eb1/lib/WebSocketServer.js#L391\n. this rfc does not mention anything about a timeout but recommends a ping pong mechanism to keep the connection alive: https://w3c.github.io/websockets/\n\n6 Ping and Pong frames\nThe WebSocket protocol specification defines Ping and Pong frames that can be used for\nkeep-alive, heart-beats, network status probing, latency instrumentation, and so forth. These are\nnot currently exposed in the API.\nUser agents may send ping and unsolicited pong frames as desired, for example in an attempt to\nmaintain local network NAT mappings, to detect failed connections, or to display latency metrics to\nthe user. User agents must not use pings or unsolicited pongs to aid the server; it is assumed that\nservers will solicit pongs whenever appropriate for the server's needs.\n\nIn other words, this mechanism should be used instead of disabling the timeout. I think this is correct because disabling the timeout is not a guarantee that the connection is still alive.\n. Exactly. And when ws.ping() is used, then the code line socket.setTimout(0) shouldn't be here. A bit tricky I guess.\n. got it, thanks\n. hmmm, weird, how can i debug best what's invalid about them? are there any specs saying that opcode 7 exactly means?\ni am using them for a heavily used API and am thinking of DOS attacks or other hack attempts. hence very curious here .... Thanks for the link. Chapter 5.8 Extensibility also says they can be used for more capabilities.\nHow would you debug this best? Really curious here about their contents.. Hmmm, thanks. And what about the other question, how can I investigate + debug this best?. Can't say if on purpose or faulty. \nLog as much as I can? I already do but not much on the websocket level. Do you think it would be possible to wrap more information in errors thrown from Receiver.error?\nFor example I am curious who the sender is. What the recent buffer contents were. And so on.. there is also the object argument expected error sometimes when trying to create it. sorry, i wasn't clear. initially we are using the websocket-stream package which uses yours. and it encapsulates everything into a WS class, see https://github.com/maxogden/websocket-stream/blob/master/stream.js#L5 which is then instantiated further down at https://github.com/maxogden/websocket-stream/blob/master/stream.js#L43\nhence addressing this here, since that class is coming from websockets/ws .... ah, it is the ws-fallback.js file, thanks for correcting.\ni think this error happened on old opera v12 something. i see, thanks @lpinca . to be safe i would add a type check here for reason. it might be already an instance of error. only do new Error() when it's a string. and probably add the error code to it for easier debugging?\n. ",
    "martindale": "+1 for a unique client identifier.\n. ",
    "justinjdickow": "In ES6 to keep track of your own connection list you can just use a set:\n``` javascript\nvar connections = new Set()\nvar wss = new WebSocketServer({server: server})\nconsole.log(\"websocket server created\")\nwss.on(\"connection\", function(ws) {\n  connections.add(ws);\nws.on(\"close\", function() {\n    connections.delete(ws);\n  })\n})\n```\nAlso pretty sure WebSocketServer has its own clients property.\nIn any case, I have my own need for a unique client identifier so +1\n. ",
    "nolochemical": "+1 fer a unique or an interface.  Thx @maxleiko  .. I was about an hour in of TNE time. Looks close to stable so not fussing.\nvar wss = new WebSocketServer({ port: process.env.PORT, verifyClient:function(info){\n  console.log(info.req.headers);\n...\n}});\n==out===\n{ connection: 'Upgrade',\n  upgrade: 'websocket',\n  host: 'localhost:8080',\n  'sec-websocket-version': '13',\n  'sec-websocket-key': 'MTMtMTQ2NDA1NzM4MTg3MQ==',\n  'sec-websocket-extensions': 'permessage-deflate; client_max_window_bits' }\n. ",
    "meteormatt": "It has upgrade to 0.4.32 now\nhttp://npmjs.org/package/ws\n. But I found that when the websocket is closed, there is no ws._socket.remoteAddress then. I don't know why.\n. @dkdndes Yes. But I found that websocket can do that.\njs\n    connection.on('close', function(reasonCode, description) {\n        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');\n    });\n. ",
    "mosnicholas": "Hey, I've been stopped by this same bug, but running on Opcode 9 instead of 1.  Have you or anyone else found the fix?\nThanks,\nNick\n. ",
    "oasiz": "Hi,\nI know this is old but I've just had the same.\n```\nC:\\Users\\Administrator\\Desktop\\node\\node_modules\\ws\\lib\\Receiver.js:243\n  if (!this.state.fragmentedOperation) this.unfragmentedBufferPool.reset(true);\n                 ^\nTypeError: Cannot read property 'fragmentedOperation' of null\n    at Receiver.endPacket (C:\\Users\\Administrator\\Desktop\\node\\node_modules\\ws\\l\nib\\Receiver.js:243:18)\n    at Receiver.opcodes.8.finish (C:\\Users\\Administrator\\Desktop\\node\\node_modul\nes\\ws\\lib\\Receiver.js:604:12)\n    at Receiver. (C:\\Users\\Administrator\\Desktop\\node\\node_modules\\ws\n\\lib\\Receiver.js:566:33)\n    at Receiver.add (C:\\Users\\Administrator\\Desktop\\node\\node_modules\\ws\\lib\\Rec\neiver.js:91:24)\n    at Socket.firstHandler (C:\\Users\\Administrator\\Desktop\\node\\node_modules\\ws\\\nlib\\WebSocket.js:759:22)\n    at emitOne (events.js:95:20)\n    at Socket.emit (events.js:182:7)\n    at readableAddChunk (_stream_readable.js:153:18)\n    at Socket.Readable.push (_stream_readable.js:111:10)\n    at TCP.onread (net.js:529:20)\n```\nNo idea what's triggered it though? Let me know if you require more info!. ",
    "kaelzhang": "couldn't agree more.\nIt is unnecessary to support ancient-old node versions by depending on nan which takes more than 30 minutes to compile, that every customer was complaining about that when installing our package.\nscript.preinstall and gyp are really evil, see this article from isz.\n. @3rd-Eden Thanks for your instant reply. But this is still really a problem that I have to fix ASAP.\nI have seen your test case located at test/Validation.test.js. Maybe I have to implement it on my own today.\n. ",
    "klimashkin": "But how can I install it on windows? :)\nIt tells me \nbufferutil.cc\n..\\src\\bufferutil.cc(7): fatal error C1083: Cannot open include file: 'v8.h': No such file or directory [D:\\_PROJS\\myapp\\app\\node_modules\\socket.io\\node_modules\\socket.io-client\\node_modules\\ws\\build\\bufferutil.vcxp\nroj]\n  validation.cc\n..\\src\\validation.cc(7): fatal error C1083: Cannot open include file: 'v8.h': No such file or directory [D:\\_PROJS\\myapp\\app\\node_modules\\socket.io\\node_modules\\socket.io-client\\node_modules\\ws\\build\\validation.vcxp\nroj]\n. ",
    "tohagan": "ws is a wonderful and essential part of NodeJS but because of the serious and constant pain this module creates for Windows deployment, I'm lobbying that it become part of NodeJS CORE library so we can finally bury the need to be compiling anything.  \nSo .. I'm pleading ... Can you please team up with Joyent so we can all rest easy at night knowing we won't have to face another request to install VS 2010 in the morning.  \nThe fact is that now many NodeJS end users who install our node apps ...\n(a) Don't have admin privs on Windows\n(b) Don't have the technical expertise to dodge the ws bullet.\n(c) Are Not developers\n(d) Are Not Visual Studio developers\n(e) Ditched Visual Studio 2010 long ago\nHowever, they can just download and install the next release of NodeJS.  So I think this is where this lib now belongs. \n. And loads more that do!  I have Win/Linux/OSX and node is perfect for doing cross-platform. Just rolled one out - but sadly had to disable socket.io or risk most end users giving up or complaining. It's the most frequent pain point for windows but the rest just rocks.\n. Yes I'm sure there are many in the Node community that think this way as they have only worked on their favourite platform and it's their \"comfort zone\". Same applies for the millions of Windows devs. \nI'm not so much a Windows or Mac or Linux advocate as a \"cross-platform\" advocate for which I'm finding Node is perfect. As I see it, the Node developers have set this as their target \"platform\" and a key element of this is node-gyp and ws so I would argue it needs to be solid on all three sub-platforms. \nFor Node to be wide accepted by enterprise systems admins is needs to be well supported on all three  as this is IMHO of of it's strongest key selling points. At present, the dependency on Visual Studio during deployment strikes it out on this as no system admin would install Visual Studio on a production server.  We've had a long discussion about this on the Joyent site and I think a likely outcome is that non-JS code be deployed as pre-compiled binary to avoid this dependency. \n. Thanks :) \n. ",
    "adam-lynch": "@3rd-Eden \n\nnot a viable deployment target\n\nWhy? Because of long path problems? And if it's not a viable deployment target, people still develop on Windows, isn't that enough? Just wondering, because I see loads of Node projects basically not supporting Windows.\n. ",
    "polkovnikov-ph": "Why this issue has been closed? ws build is not working at Windows, which is still a target for Node 0.12.7.\nnode-gyp has serious Unicode problems (someone forgot it's 2015) and requires Python to build Javascript libraries (this even sounds quite funny), so it cannot be a thing someone needs to build plugins at all. It's a piece of wide-used non-supported crap.\nLong path problems at Windows are easily solved by the \\\\?\\ prefix. A lot of non-Windows guys tell Windows guys to go get better at their Windows magic, because it's Windows that is a source of the pain, but not those non-Windows guys. Sorry, but that's not true. It's not the Windows that Cannot open include file: 'v8.h'. It's a piece of bad third-party software. And no Windows magic can help me at this.\nFor the sake of Node.js community, reopen this. Please.\n. @lpinca So can we add it to README? If it's a required thing to do, why is it absent there?\nEdit. This is totally a good change, but it should be at least documented properly.. ",
    "peterkroon": "Found a similar issue: https://github.com/primus/primus/issues/65\n. I've tried it with the code below but the problem remains. Need to check on a stable channel. I've used FF Nightly.\njs\nwindow.onbeforeunload = function(e) {\n  ws.close();\n};\n. As written in the  manual:\ntry {\n        ws.send(data);\n      }\n      catch (e) {\n        // handle error\n      }\n. ",
    "ch3sn3k": "I am sorry, but I do not understand the result of the test\n. ",
    "josephfrazier": "@3rd-Eden, can you restart the Travis build? It appears to have failed to reasons unrelated to the requested commit, and the tests do not fail on my machine.\nAssuming the rebuild succeeds, can this be merged, or would you prefer additional tests to be written first? Getting this fixed would improve browser compatibility in use cases that require the \"Sec-WebSocket-Protocol\" header. See also https://github.com/einaros/ws/issues/290#issuecomment-50430341\n. bump. Notice that this doesn't affect applications that use the existing API.\n. No problem, thanks for the merge and for releasing 0.6.4!\n. ",
    "prabhatsharma": "my system details\nSystem Linux 3.11.0-12-generic\nnode -v v0.10.28\nnpm -v 1.4.9\n'\nUsing Linux mint 16\n. ",
    "Analogreality": "I imagined that there was some sort of mechanism available to UPGRADE the connection, thereby transparently integrating ws into the existing server.\n. Note that Express 4 is NOT Express 3. \nBroke a few things, it seems...\n. ",
    "alinz": "I did an experiment and it seems working. Here's my code:\n``` js\n    var app = express();\nvar cookieParser = require('cookie-parser');\nvar session = require('express-session');\nvar bodyParser = require('body-parser');\nvar compression = require('compression');\n\napp.use(compression());\napp.use(bodyParser());\napp.use(cookieParser());\napp.use(session({secret: 'HJH#22jh12bKHiu2'}));\napp.use(express.static(__dirname + '/../../public'));\n\nvar server = http.createServer(app);\n\nvar wss = new ws.Server({ server: server, path: \"/websocket\" });\nwss.on('connection', function(ws) {\n    console.log(\"connection\");\n});\n\nserver.listen(4000);\n\n```\nI think we need to set the path to the websocket. Let me know if you still have some problem.\n. The above example uses latest express 4.\n. ",
    "streamnsight": "@alinz example works great, but how is it possible to get session info from ws? \nif I use the verifyClient option on the server to get the request object, i don't have cookies or session info.\nDo you know of any way to do this?\nin other websocket implementations, I see methods like wss.on('request', cb) \nbut this doesn't seem available with ws.\nany suggestion on how to get underlying http session info?\nThanks\n. I think I figured it out, using the server.on('upgrade') gives access to the original req and allow to use sessionParser to generate the session info, which is then accessible to the ws server\n``` js\nserver.on('upgrade', function(req, res, next) {\n    sessionParser(req, {}, function () {\n        console.log(\"REQUEST:\" + req.session);\n        // do stuff with the session here\n    });\n});\nvar verifyClient = function verifyClient(info, cb) {\n    console.log(info);\n    // get session here from info.req.session\n    cb(true);\n};\nvar wss = new ws.Server({ server: server,  verifyClient: verifyClient});\n```\n. @3rd-Eden @irshad-qb \nsame question here: \nI want to send a session cookie to verify the client. \nI managed to get the session info on the server side, but without being able to pass the cookie from the client(script) it is useless.\nany hint on how to do this?\n. @iostreamer-X \nNot sure I understand what you are proposing here:\nI know how to pass my token to the server side. That seems to be what your client side code attempts to do.\non the server side I can validate the token, but I would like to then set a cookie on the RESPONSE from the server. i do not have access to the response object in the verifyClient function, only the request.\nThe only place to set a cookie on the response is in the on('headers'...) event, where I don't get access to the request or the response, just the headers, so i have nowhere to store the session ID to get it and send it in the on('headers'...) event.\n. seems like the problem is I get access to the request in verifyClient, but not the response; so I can't set a response header, Meanwhile in the on('headers') event, it's only the headers that are exposed, not the request or response.\nIs there any way around this?\nThanks\n. @mkamioner thanks for the note and the PR: \nIt seems like your PR only send headers on failure... so it's note really what I want.\nI want to send headers with the response, whether it is a failure or not, so i can set a cookie on the client side, to be used for reconnection (should the connection be closed for some reason).\nJust like a session cookie is used for standard HTTP connections.\n. ",
    "tmx976": "hope this can help: I successfully parsed the session on connection, and used session info on every message. This can secure the connection with the cookie session obtained during user login, and limit the users requests also on server side.\n``` js\nvar WebSocketServer = require('ws').Server\n  , http = require('http')\n  , express = require('express')\n  , app = express();\nvar bodyParser=require('body-parser');\nvar session=require('express-session');\nvar sessionParser=session({\nsecret: 'there is no spoon',\ncookie: { maxAge: null },\n//store: sessionStore,\nresave: true,\nsaveUninitializes: true\n\n})\napp.use(sessionParser);\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: true}));\nvar server = http.createServer(app);\nvar wss = new WebSocketServer({\n    server: server,\n    verifyClient: function (info, done){\n    sessionParser(info.req, {}, function(){\n\n        console.log('VERIFY', info.req.session);\n        // allow connection only if session is valid and a user is logged in\n        done(info.req.session && info.req.session.user && info.req.session.user.id);\n    });\n}\n\n});\nwss.on('connection', function(ws) {\nws.on('message', function(message) {\n\n    console.log(message, ws.upgradeReq.session);\n    if(message.type && canUserDo(ws.upgradeReq.session.user, message.type)){\n\n        // do stuff here and reply to the message\n    }\n}\n\n});\n```\n. Glad to be helpful. \nI don't know which solution is best, maybe adding an example is more reachable.. \nHowever the two are not exclusive: it's OK to make them both.. \nBye. \nInviato da BlueMail\nIl giorno 14:41 19/Lug/2016, alle ore 14:41, Vasily Loginov notifications@github.com ha scritto:\n\n@tmx976 Thank you, the provided example was very helpful for me. Would\nyou mind if I make pull request to the docs with your example? Or,\nmaybe, it is better to just modify one of the examples in the\ncorresponding folder/create a new one?\n\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/websockets/ws/issues/326#issuecomment-233619565\n. \n",
    "karatheodory": "@tmx976 Thank you, the provided example was very helpful for me. Would you mind if I make pull request to the docs with your example? Or, maybe, it is better to just modify one of the examples in the corresponding folder/create a new one?\n. Yes, good idea, will do.. Created new pull request: https://github.com/websockets/ws/pull/1003. ",
    "jixiaofei": "How to realize CoAP over WebSokcet?\n. ",
    "rzr": "More info there:\nhttps://core-wg.github.io/coap-tcp-tls/draft-ietf-core-coap-tcp-tls.html#rfc.section.4\n. ",
    "migounette": "@emmoco \nLook at this: #393 which leads to a leak of fd and ws object event if a gc is run.\nBut this is only linked to node > 0.11.9\nDid you make any progress on it ?\n. @christian-raedel can you tell more on your issue, system (OS), version of ws.\nIf you have a simple test case for reproduction maybe I can help\nIt seems to be related to the native module bufferutil,node compiled on the fly when you install ws\n. I will try to look at it... hope this week-end\n. Yes, this the best solution. But at this stage I followed the logic found in the source, I didn't understand why you tried to remove all listeners that why I proposed to keep all public events in place in order to fix the fd leak.\nBut if you can remove only what you use it is the best approach. \nThis approach fix my issue, because we keep the 'close' event in place. At this stage, we use 0.4.31 (not 0.4.32 !) the version required by  socket.io\nMy 2 cents\n. Can be closed, covered by #392 #393 \nSo far, tests done with PR #393 also fix the fd leak issue, and much inline with the philosophy of node.\n. If it can help, for us this is a critical issue. \nWe use socket.io with a big application, with heavy traffic:\nThe first graph shows the memory leak:\n\nThe same with the fix from @misterdjules \n\nAs you can see the fix shows that the memory leak is fixed.\nRegarding your comment \"maintains to much state which could lead to memory leaks\"\nI don't think so, we did a lot of tests, more than 48 hours. And we have two differents applications that use the socket.io 1.x engine\nMy 2 cents\n. @3rd-Eden Any comment on the fix ?\nOn my side we are waiting for it, whith the out of node 0.12.0 for next week.\nThanks for your lights.\n. @3rd-Eden So far so good, short run is perfect. Waiting the result of 12 hours of run.\nThanks\n. Fix Confirmed.\nNo more memory leak or FD leak after 10 hours of run with high traffic\n\n\n. ",
    "nusofthq": "I have the same question. I've also asked it on StackOverflow:\nhttp://stackoverflow.com/questions/24525397/how-can-i-setup-the-einaros-ws-module-for-nodejs-to-accept-wss-secure-ws-conne\nI could only find this example in the repository but it did not work for me the 1st time I tried:\nhttps://github.com/einaros/ws/blob/master/examples/ssl.js\n. Yes, \njavascript\nwss.on('connection', function(ws) {\n    console.log('New websocket connection from %s:%d', ws._socket.remoteAddress, ws._socket.remotePort);\n});\n. wss.on('connection', function(ws) {\nlogger.info('New websocket connection from %s:%d', ws._socket.remoteAddress, ws._socket.remotePort);\n}\n. ",
    "tlhunter": "The comment incorrectly states 5 seconds, when the actual number is 30.\n. ",
    "shacharz": "Maybe I wasn't clear in my previous post.\nI want to stress test my websocket server by opening lots of websockets from another server, and test messages schemes etc'. So is it possible to create a connection from another server effectively simulating a websocket client on it?\n. mm?\n. Thanks FREEZX!\nHow come you're using http:// and not ws:// when you open a websocket client?\n. For me it doesn't work with ws:// for some reason\n. What do you mean 'client connection within the server connection event'?\nWhen ws.on('connection',function(socket){\n...\n});\nis triggered, I looked at socket.upgradeReq.url and that's only the url of the socket request not that page path.\n. Ok so if the upgradeReq is an incomingMessage - there's no way to retrieve the page url from it.\nI have no problem with parsing, but the information is just not there.\nJust clearing out, the script that starts the ws connection can be on a page like I aforementioned and the ws url will be ws://differentServer.com and the upgradeReq object's url will show only the differentServer.com url since it's an incomingMessage for the ws url.\n. No proxy, There's no referrer header in the upgradeReq.headers.\nOnly origin, host.\nYea the query string is always the last choice.\n. Thanks, actually I wanted it for analytics purposes.\nI already have an id based verification method much like you stated.\nLooks like currently, there is no information about the page path inherented into ws.\nAnd we'll need to transfer it via query string/path to websocketserver or first message of sorts.\nThanks again for the help.\n. > wss.on('connection', (ws, req) => {\n\nconsole.log(req.url, req.headers);\n});\n\nThat's incorrect, the url is the url of the websocket request not the page, and the referrer is not being sent as a header by browsers.\nsee https://github.com/websockets/ws/issues/347#issuecomment-66106654 to work around. Hmm, I can't reproduce it again as well (Maybe it was on an old ws version?). \nI'll close and if I'll run into it again with a good reproduction I'll reopen.\n. Awesome, thanks\n. ",
    "FREEZX": "Check the code i use for benchmarking ws in my project:\nhttps://github.com/FREEZX/SockBench/blob/master/ws.js\n. That's a mistake, but it doesn't seem to make a difference.\n. ",
    "iamblue": "+1 \n. ",
    "petkaantonov": "This bug is affecting us as well, landing this is appreciated\n. ",
    "olealgoritme": "the browser gets disconnected. at the same time the disconnect event is sent to mobile, but because of latency, internet connectivity speed, etc, etc, it get's it very late. so it keeps sending packages to the browser, which is already disconnected. sorry for my  english.\n. ",
    "zag2art": "Got the same error:\n/home/ubuntu/www/idg_v2/production/releases/20140907092659/node_modules/racer-highway/node_modules/ws/lib/WebSocket.js:181\n    else throw new Error('not opened');\n               ^\nError: not opened\n  at WebSocket.send (/home/ubuntu/www/idg_v2/production/releases/20140907092659/node_modules/racer-highway/node_modules/ws/lib/WebSocket.js:181:16)\nI think we should n't kill the app if the error happened!\n. Imo, throwing an error is a good for browser but it's absolutely bad practice for server.\n. ",
    "jlouthan": "Same thing was happening to me. I added a condition on my clients[i].send() event to make sure the socket's open before attempting a send, and it fixed my problem:\nvar length = this.clients.length;\nfor(var i = 0; i < length; i++){\n    if(this.clients[i].readyState != this.clients[0].OPEN){\n        console.error('Client state is ' + this.clients[i].readyState);\n    }\n    else{\n        this.clients[i].send(data);\n    }\n}\n. ",
    "piecioshka": "+1\n. ",
    "GeekLad": "The second parameter for the send method is an error handler.  Do something like this where you're sending messages:\njavascript\nws.send(message, function(error) {\n    // Do something in here here to clean things up (or don't do anything at all)\n});\n. ",
    "JacopoDaeli": "@lpinca adding a listener won't solve the problem. The only way is use the callback, or add a try/catch statement around send():\njs\n// from lib/WebSocket.js\nif (this.readyState !== WebSocket.OPEN) {\n  if (cb) cb(new Error('not opened'));\n  else throw new Error('not opened');\n  return;\n}. I open a PR to fix/add this feature: https://github.com/websockets/ws/pull/1300. @lpinca why doesn't make sense? If we register an error listener, don't we want the error being emitted?. Personally this looks to me more like an application error. It always happen to me after the connection is established. For some reasons, the socket become \"closed\", but the emitter doesn't fired \"close\" event, and once I try to \"write\" something on the wire, it throws. What do you think about it?. \ud83d\udc4d . ",
    "Heck24": "for me this error handling worked:\nsetInterval(()=>{\n        try { if (ws.readyState != WebSocket.CLOSED) { ws.send(${new Date()});} }\n        catch(e) {console.log(e);}\n    });. ",
    "satyaraj479": "that \n\nfor me this error handling worked:\nsetInterval(()=>{ try { if (ws.readyState != WebSocket.CLOSED) { ws.send(${new Date()});} } catch(e) {console.log(e);} });\n\nthat worked for me !. ",
    "anonaka": "Thanks! It worked.\n. ",
    "dkdndes": "Liu,\nwhen you open a \"ws\", a part of the memory is used for the information\nrelated to it. When you close it, its not available/allocated anylonger.\n\nOn Thu, Sep 11, 2014 at 1:50 PM, Liu Xing notifications@github.com wrote:\n\nBut I found that when the websocket is closed, there is no\nws._socket.remoteAddress then. I don't know why.\nwss.on('close', function (ws) {\n    logger.info('New websocket connection from %s:%d', ws._socket.remoteAddress, ws._socket.remotePort);}}\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/einaros/ws/issues/338#issuecomment-55253104.\n. \n",
    "beshur": "Got it.\nMaybe will post a gist a little later.\n. @3rd-Eden, is it possible on http to redirect (for example) the user to the main express server port?\n. @3rd-Eden, I have my own http-server. The question is it possible to redirect the user if they try to reach the websocket server via http?\n. In other words, how can I customize the response of the ws on http?\n. well, did that with a creepy patch on WebSocketServer.js: https://gist.github.com/beshur/d10dc4e07cf1c8278783\n. Well, actually the problem was on the client side - was connecting to a wrong port\n. ",
    "toejough": "I have provided pull request 342 to fix the problem (https://github.com/einaros/ws/pull/342).\nIt's basically the same as pull request 215 from @kenpratt (https://github.com/einaros/ws/pull/215)\n. The best I've been able to do without patching WS is to make sure that prior to calling ws.send, you check the ws.readyState == ws.OPEN.  If it doesn't, you have to handle that error condition yourself.  You could try:\n``` js\nvar client = new ws(url);\nclient.safeSend = function(data) {\n    if (client.readyState == ws.OPEN) {\n        client.send(data);\n    } else {\n        throw new Error(\"could not send - websocket is not open\");\n    }\n};\n// client.send(\"my message\"); // might cause ws to explode, as you have seen\nclient.safeSend(\"my message\"); // will throw an error you can catch and act on\n```\nThis would throw a new error if you tried to send a message when the websocket wasn't open.  You could emit it instead, (client.emit('error', new Error(...));) or log it (console.error(...);).\n. ",
    "tmpfs": "Look at ws.upgradeReq.url in the client connection within the server connection event.\n. I mean what you posted ws.on('connection',function(socket) so in your case socket.\nThe upgradeReq is an IncomingMessage, please read the docs:\nhttp://nodejs.org/api/http.html#http_http_incomingmessage \nAnd in your case it seems you also need to read:\nhttp://nodejs.org/api/url.html\n. Have you tried upgradeReq.headers.referer?\n. If not then your client code can add the referrer as a query string parameter and the server can extract if from that.\n. Are you going through a proxy? You might need to proxy some headers.\n. Shame the spec doesn't allow setting headers to be sent in the upgrade request: http://www.w3.org/TR/websockets/#the-websocket-interface\nAnd I guess browser implementations are not sending referer with the upgrade request which seems like quite a major oversight to me.\nThe other alternative is to perform an initial handshake with the server that sends this info.\n. Ok quickly, this is the third option and the best way, it is how I do it.\nI assume that the reason you want this information is to identify the application making the request and branch the code.\nYou must have access to the client code which I assume you do. When you connect to the server, do not connect to the root (/) connect to an id for your application, you can use document.location.pathname if you like, ie:\nhttp://websocket-server.com/path/to/page.html\nProvided you have not added a path option when configuring the server the upgrade request will be handled.\nImplement the verifyClient option as a function (use arity of 2 for asynchronous handling), quick and dirty sketch for you:\n`` javascript\nvar url = require('url');\nfunction verifyClient(info, cb) {\nvar uri = url.parse(info.req.url);\n// now you have the information you want\nvar referrer = info.origin + '/' + uri.pathname;\n// should also verifyinfo.origin` here\n// and invoke cb(false) if it is a bad origin - the websocket connection will\n// not be established\n// stash the info in the upgrade request, access it later via: ws.upgradeReq.referrer\ninfo.req.referrer = referrer;\ncb(true);\n}\n```\nNow pass verifyClient as an option when creating the server and you are good to go, hope that all makes sense.\nVoila!\n. ",
    "bradisbell": "FYI, ws.upgradeReq is now undefined.... ",
    "diegoddox": "You can find this information on the req\nwss.on('connection', (ws, req) => {\n  console.log(req.url, req.headers);\n});\n. ",
    "Muneem": "I am also facing same issue and i am using latest version of websocket\n. ",
    "adis-io": ":+1: \n. ",
    "waleedbutt": "@zwz But I want web socket for ios to remove the dead connection?\n. Hi humingchun\nThanks for update. Can you please tell me that after set ws._socket.setKeepAlive(true). How socket disconnect those client or delete from connected user list ?\n. ",
    "humingchun": "I had the same issue and after some Googling, here is result:\nWebSocket is based on TCP and TCP uses FIN packet to close the connection. In the case of sudden loss of Internet connection, both the WebSocket server and the phone are unware of the already dead TCP connection because no FIN packet was sent.\nTo address the issue, TCP has a mechanism called keepalive.\nWhat I did to solve the issue is adjusting the TCP keepalive settings in Linux kernel, and invoke ws._socket.setKeepAlive(true).\nI am going to propose a new public method setKeepAlive to ws so it clearly shows a way for ws to use the underlying TCP mechanism to maintain connection or detect dead connection.\n. Hi waleedbutt, for the detailed introduction for TCP keepalive machanism, you could refer to the link I posted before.\nAnd after the keepalive detects the failure of the connection, TCP layer will raise a close event which is forwarded to ws. So you could just listen to ws's close event and do any necessary clean ups.\nFor example, you want to detect a dead TCP connection within 10 seconds, you can set following kenel params:\nnet.ipv4.tcp_keepalive_time=6\nnet.ipv4.tcp_keepalive_intvl=2\nnet.ipv4.tcp_keepalive_probes=2\nIt will add a little more extra network traffic, but you can choose to enable keep alive to specific TCP connection by invoking ws._socket.setKeepAlive(true)\n. Great source for compare WebSocket ping/pong and TCP keepalive :+1: \nSo it's clear WebSocket ping/pong could do much more than TCP keepalive, and even more reliable. But in controlled network (like no HTTP proxy), use TCP keepalive to do dead-pear-detection is much more efficient than WebSocket ping/pong.\nI used this method when I am developing a IoT project which need to show the online status of real device. Using TCP keepalive intead of WebSocket ping/pong adds no coding to exising project and reduces the workload on device side.\n. @glennschler I think keepAlive is more useful at WebSocket Server side, and I don't find any method to pass options to ws instance returned by WebSocket server' connection event.\n. ",
    "Spentas": "binarykitchen,it depends on your client side implementation.As i tested on android, immediately after re-connection it  will close the current session and generate a new one. \n. simply cause your ip address may be changed upon reconnection and the old session is bound to an invalid ip address\n. ",
    "vlivanov": "binarykitchen, websocket is basically a tcp/ip connection, there is no reconnection option. What we do in our android app, we use telephone manager to subscribe on cell change event. If it triggers, we just do the reconnect manually\n. ",
    "theavijitsarkar": "How to implent the fix @humingchun . Where do i set ws._socket.setKeepAlive?\n. Do note, I have tried\n@humingchun https://github.com/websockets/ws/issues/459\nws._socket.setKeepAlive(true,100)\nAlso, one fork by @FlorianBELLAZOUZ\nhttps://github.com/FlorianBELLAZOUZ/ws\n. ",
    "AbrarJahin": "Hi, I am using this library in Node.js - https://www.npmjs.com/package/express-ws\nTo implement websocket.\nBut I am not finding any way of running this code-\nws._socket.setKeepAlive(true)\nCan anyone please help?\n. ",
    "slava-osipov-qs": "Hi,\n\nws._socket.setKeepAlive\n\nYou can found answer here for WS level implementation of disconnect detection.\n. ",
    "kashishkhullar": "Is there any close event that the websockets emit which we can listen to whenever a connection breaks. eg:\nvar sockets = [ ] ; // here i save all the socket\nthen I do this\nsockets.forEach( socket => socket.on('close', console.log(\"Connection closed\"));\nor can I add the same logic whenever a new connection opens?. ",
    "ynkm169": "u didn't even bother reading my post. my OS support unlimited open files. I don't know what other limitation of my OS there are. That was my question\n. your stuff is not helpful and nobody helps...but i helped myself\n1. tried Nginx, HAproxy both load balancer....got both of them to work...but couldn't get either of them work properly.....cuz after some connections they start disconnecting my clients..........T.T....stuck on this one.....I suspect both load balancers or some other things involved in load balancer is treating my test connections as DDOS..........................looking into fixing this one so we can run multiple machines...not just multiple cpus.....\n2. GOOOD NEWS.. i broke 65535 connection barrier....i went over 70k today...\ndid so much research...Hair turned white today lol\ntraced the problem to this one \"nf_conntrack: table full, dropping packet.\"\nfixed the limitation by this command: # sysctl -w net.netfilter.nf_conntrack_max=131072\n\"\nI. What is the meaning of nf_conntrack: table full dropping packet error message\nIn short, this message is received because thenf_conntrack kernel maximum number assigned value gets reached.\nThe common reason for that is a heavy traffic passing by the server or very often a DoS or DDoS(Distributed Denial of Service) attack. Sometimes encountering the err is a result of a bad server planning (incorrect data about expected traffic load by a company/companeis) \"\n. ",
    "L2L2L": "Of websocket... The one in the browser.\nE-S4L\nN-S4L\n\nOn Sep 3, 2014, at 2:36 AM, \"Arnout Kazemier\" notifications@github.com wrote:\nReplica of what?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "yrchern": "ws._socket.remotePort\n. ",
    "ibc": "Chrome does not react to a 401 during a WebSocket handshake. Firefox does, but I would not rely on that at all. Just do NEVER reply a 401/407.\n. They cannot. Don't use HTTP Basic/Digest authentication (RFC 2617) for WebSocket connections.\n. Cookies previously generated after login procedured un the web, custom token with a negotiated value un the WS URI, etc.\n. https://github.com/einaros/ws/blob/master/doc/ws.md#serverclosecode-data\n. I agree that ws must provide a callback for the user to accept or reject the WebSocket handshake (by inspecting the HTTP GET request), but to achieve that users do not need 'socket' or 'head' parameter (but just the HTTP request). And also note that ws.Server does not fire any \"upgrade\" callback (that belongs to http.Server).\nI will place a new issue requesting this feature within ws.\n. > I assume that's the intended use-case because I couldn't figure out any different way of doing it\nIt can be done using the non-documented options.verifyClient. Search for it in lib/WebSocketServer.js.\n. options.verifyClient and options.handleProtocols is now documented. Let's close this.\n. BTW what is ws.WebSocketServer? A WebSocket server that accepts any connection without letting the user inspect a Cookie header, the WebSocket-Sub-Protocol header, Origin or URL parameters?\n. OK, I missed the options.verifyClient optional handler. Sadly it is not documented at all. Even worse, the options.handleProtocols is not even mentioned in the doc.\n. Let's close this issue, but please, document the options,verifyClient and options.handleProtocols.\n. Sorry, I understood from the documentation that, by just inheriting from EventEmitter, any error during emit() would be catched by the domain.\n. @3rd-Eden may you please clarify what is missing in ws for being \"domain\" aware? I've been told in the Node IRC that by just being an EventEmitter the domain implicit binding should just work.\nThanks a lot.\n. Sorry, let me do it again, I will add a fix for #373.\n. Thanks a lot!\n. May you please release a new version?\n. Hi, any comment on this? I'm pretty sure this is a 100% correct pull request that fixes bugs in ws.\n. Hi, AFAIK there is no way to make two different PR from the same repo, and it would require too much time as I should revert too much changes in my fork and so on.\nLet me explain about removed tests:\nI've removed all the tests related to the path parameter because that is buggy. As explained in #381 two ws.Server instances cannot share the same http.Server, having each one a different path value, because socket events fire in both of them producing corrupted data. For example upon a WebSocket connection from a client both servers would send a 101 response over the same socket. The first one works while the second one becomes an invalid/wrong/malformed WS frame.\nTherefore I see no point in adding new tests since my PR just removes a wrong feature.\n. @3rd-Eden any comment please? Will you accept my pull request which clearly fixes ISSUES or not?\nDon't take me wrong, but having to wait more than 10 days for each request/response becomes frustrating.\n. @3rd-Eden will you please provide feedback or whatever on this pull request? what is wrong? It fixes bugs. Please let me know what exactly do you need me to provide.\n. OK @3rd-Eden, just bye. :-1: \n. Inspecting the socket.destroyed  attribute before firing 'connection' should be enough as it is false if the client has closed the connection.\n. This is fixed in Pull Request #379. May you apply and publish a new version please?\n. @3rd-Eden may you please help me with this? my commit does the following:\n- It registers a 'close' handler for the socket so if it is fired while ws is waiting for the app to invoke cb(true) on the verifyClient then the ws.Server does not emit the 'connection' event.\nBut this just works in case the app calls cb(false) in verifyClient() and later it calls cb(true) (which makes no sense, of course).\nBut in case cb is not called during verifyClient() then when the user closes the TCP connection the 'error' handler attached to the net.Socket instance is not fired !!! How can it be?\n. Ok, this is because (I think) the http server (which is created with http.createServer()) sets the socket with allowHalfOpen: true, which means that it does not emit 'close'  until both sides have closed the socket.\n. It is fixed in my existing pull request #379 via the commit https://github.com/ibc/ws/commit/5286c533061349ec3c24e4c64edd56743430c216.\n. Easier: create a http server and a single ws Server with some specific path, and add a log on the 'connection' event.\n- Connect from a browser to the correct path. You'll see the log.\n- Connect from a browser to any other invalid path. You'll see nothing (because ws does nothing in this case).\n- Connect from a browser to the correct path. You'll see nothing!\nSo, this means that if you set \"path\" and any client attempts to connect to a different path, then ws stops working forever. Wow. Not, this feature cannot be tested at all.\n. This is \"fixed\" (I mean, removed) in my pull request #379.\n. To be clear. Sharing the same http.Server on two different instances of ws.Server means that the \"upgrade\" event is called on both, That is a no-go (by testing I've seen even errors in Chrome due to wrong frame received, probably because both ws.Server instances are replying 101, etc.\nSo, my pull request removes all the path stuff from ws. Instead, the user can inspect the HTTP request in the reqUpgrade field of the ws.WebSocket generated instance, exactly the same he must do when dealing with just http.Server. \n. Nice to know, thanks. So sorry for my comment.\n. You can get the socket from wssocket.upgradeReq which is the Node http.IncomingMessage instance (from which you have access to the socket).\nThe upgradeReq does exist in the code but it is not documented. I do that in my pull request #379.\n. Well, the real problem is that the HTTP server closes the TCP connection due to a malformed HTTP GET request:\n127.0.0.1 52434 127.0.0.1    10080 HTTP 242 GET ?qwe=asd HTTP/1.1\n127.0.0.1 10080 127.0.0.1    52434 TCP 56 10080 > 52434 [ACK] Seq=1 Ack=187 Win=146800 Len=0 TSval=300360700 TSecr=300360700\n127.0.0.1 10080 127.0.0.1    52434 TCP 56 10080 > 52434 [FIN, ACK] Seq=1 Ack=187 Win=146800 Len=0 TSval=300360700 TSecr=300360700\nNote the \"GET ?qwe=asd HTTP/1.1\" which is obviously wrong. This may be a bug in Node given how it sets the \"path\" field:\nrequire(\"url\").parse(\"ws://127.0.0.1:10080?qwe=asd\")\n{ protocol: 'ws:',\n  slashes: true,\n  auth: null,\n  host: '127.0.0.1:10080',\n  port: '10080',\n  hostname: '127.0.0.1',\n  hash: null,\n  search: '?qwe=asd',\n  query: 'qwe=asd',\n  pathname: null,\n  path: '?qwe=asd',\n  href: 'ws://127.0.0.1:10080?qwe=asd' }\nIf I add \"/\" to the URL then:\npathname: '/',\n  path: '/?qwe=asd',\nMaybe ws should check pathname instead of path to decide whether to set it manually to \"/\" or not?\n. This is fixed in my pending pull request #379. I hope @3rd-Eden considers including it.\n. Check the source code (lib/WebSocket.js line 181).\n. Well, IMHO \"not opened \"means that the state is not \"open\" :)  but yes, yours would be more friendly. Note that I'm not the author at all, so don't hesitate to send a PR.\nBut you cannot override the toString method of the readyState attribute given that its value is a Number.\n. NOTE: According to the WebSocket API there are no WebSocket.OPEN etc, but instead those keys are properties of each WebSocket instance. Note however that both Chrome and Firefox define WebSocket.OPEN, etc, and some JS libraries rely on those values.\nAlso note that \"ws\" attempts to load them in \"lib/WebSocket.js\" but, for some reason, they are not exposed when moving to the browser native WebSocket implementation.\n. Agreed.\n. > Since websockets are not connection-oriented\nWebSocket are connection-oriented. Not sure what you mean.\n\nBut I wonder if you could add a new option to set a number for each packet?\n\n```\nwebsocket.packetNumber = 0;\nwebsocket.on('message', function(data) {\n   data.number = ++websocket.dataNumber;\n}\n```\n. WebSocket runs on top of TCP, so messages arrive in order and there is not packet loss. There is no need for a test case given that this is the nature of TCP.\n. ",
    "nahuel": "Now all the browsers but Safari works with Websockets + Basic Authentication (but ws doesn't), see:\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=123862\nhttps://bugs.webkit.org/show_bug.cgi?id=80362\nI think this bug must be reopened.. quoting https://tools.ietf.org/html/rfc6455 :\n\n\nThe request MAY include any other header fields, for example,\n        cookies [RFC6265] and/or authentication-related header fields\n        such as the |Authorization| header field [RFC2616], which are\n        processed according to documents that define them.\n. \n\n",
    "felixrabe": "Workaround: Create http server manually, then new WebSocket.Server({server: httpServer});, and then manually call wsServer.close(); httpServer.close(callback);.\n. ",
    "Prior99": "This would indeed be a helpful feature.\n. ",
    "larsthorup": "Try adding this line to your client, before creating the WebSocket instance:\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n. ",
    "ysxlin": "Hello, I am a node.js beginners. can u tell me how to solve this error?thx\n. ",
    "luisrudge": "I'm having this with browsersync+socket.io too :(\n. I had to rollback the browsersync version to ^2.6.4 and it works\n. ",
    "zachfedor": "@luisrudge : I'm having this issue with browserSync as well. Running it through a Gulp task, which occasionally spins up fine, but ultimately crashes because of this error. This might not be the right spot for the issue though... Any ideas?\n. I rolled back to 2.6.0 and it works, too\n. ",
    "fecaleagle": "If you keep track of clients on connect, it's very easily done.  This is more or less a duplicate of: https://github.com/einaros/ws/issues/81\nI took a similar approach to @michael and did something like this on connect, dirtying the ws object with an id...\n``` JavaScript\nvar id = 0;\nvar lookup = {};\nwss.on('connection', function(ws) {\n  ws.id = id++;\n  lookup[ws.id] = ws;\n[...]\n}\n```\nif you want to send a message to the client with id == 0, you'd just call...\nJavaScript\nlookup[0].send('message');\nThere's probably a better way to do this, but it's working fine for me.\n. ",
    "RebelRae": "It seems over my research, I have found ZERO help on this subject so... I came up with what I think is the best solution by far. People almost always seem to forget the basics of js :/ it's times like this that one of the most basic functions of this family of compiled languages comes to the rescue...\nThe for loop!\n``` javascript\nvar Server = require('ws').Server;\nconst portTCP = 8080;\nvar ws = new Server({port: portTCP});\nvar socket = [];\nws.on('connection', function(w){\n  w.on('message', function(msg){\n    var message = msg;\n    for(i = 0; i < socket.length; i++) {\n      socket[i].send(message);\n    }\n  });\nsocket.push(w);\n```\nI kept the array \"socket\" outside of the actual connection so that we may refrence certain connections from within another socket event.\nTo elaborate, the connection is what varies from client to client but the events are global. In order to target a client you need to be able to reach it from another clients event. In this case I used a for loop to iterate through all of the open connections to \"port\" in the array socket[]\nIf you notice I actually add each sockets individual connection to the array AFTER the event and OUTSIDE of it as well. Doing it like this is the only real way to handle this efficiently because you can access connections from ANYWHERE within your server code and therefore any client can communicate with any other client OR the server itself.\nAny questions email me at Rebel@TheDeviantRebel.com\n;)\n. ",
    "DamonOehlman": "I think so - let me have a look at that.\n. So after a quick review, I know what needs to be done.  I'd propose that I create another PR which highlights the error condition (which is only evident when a server doesn't correctly respond, so this is definitely an edge case).\nIn short, doable and will do.  Tomorrow though I think :)\n. ",
    "b-long": "Where is the documentation for server.close?  Is it the same as websocketServer.on('close', ... I assume?  I'd really appreciate a link to the documentation.\n. Ah, I see.  Thanks @ibc !\n. ",
    "jbt": "I for one use it in places to do some logic on the upgrade before passing it to ws, for example:\n``` js\n// server created elsewhere\nserver.on('upgrade', function(req, socket, head){\n  // validate request, maybe decide between one or two\n  // different instances of ws server based on host, url, headers etc\n  // e.g...\n  var wss = wsServers[req.headers.host];\n  if(!wss){ / close gracefully / }\nwss.handleUpgrade(req, socket, head, function(client){ / etc / });\n});\n```\nI assume that's the intended use-case because I couldn't figure out any different way of doing it. I could be wrong though.\n. ",
    "SLyHuy": "I have no idea, but I find a way to make socket open. I open keyboard,\nselect emoji have paging, swype to another page and websocket just open and\nmessage instant.\nAnybody have same issue?\nOn Sunday, October 12, 2014, Arnout Kazemier notifications@github.com\nwrote:\n\nHave you confirmed that this is a server side issue instead of a client\nside issue? Because it sounds to me that server is working fine but you\njust have connection failures with your websocket client.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/einaros/ws/issues/374#issuecomment-58760779.\n\n\nL\u00fd Trung Huy\nFacebook: http://www.facebook.com/lytrunghuy\nSkype: s.lyhuy\nMobile: +84976400806 or +6591404953\n. Nope, that is bug in iOS 8.0.2, when Apple update to 8.1 every work fine.\nThank you.\nOn Sat, Dec 27, 2014 at 9:36 PM, Trygve Lie notifications@github.com\nwrote:\n\nI have Web Sockets on iOS 8.x in Cordova working against this module and\nhave had no problems with it.\nWhat might can be blocking you is the domain whitelist\nhttp://docs.phonegap.com/en/1.9.0/guide_whitelist_index.md.html rules\nin Cordova. Might be worth checking if you \"access origin\" is correctly set.\nPS: I don't think this is a problem with this library. It probably more a\nCordova problem if any.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/einaros/ws/issues/374#issuecomment-68180036.\n\n\nL\u00fd Trung Huy\nFacebook: http://www.facebook.com/lytrunghuy\nSkype: s.lyhuy\nMobile: +84976400806 or +6591404953\n. ",
    "luin": "+1\n. ",
    "rosendi": "+1\n. ",
    "ChrisZieba": "This would be a nice addition. I'm using jwt's in my verifyClient code and it would be nice to cleanly save the decoded result fo use in the connection handler. Something like this:\n``` js\n  const wss = new WebSocketServer({\n    server: server,\n    verifyClient: function(info, done) {\n      let query = url.parse(info.req.url, true).query;\n      jwt.verify(query.token, config.jwt.secret, function(err, decoded) {\n        if (err) return done(false, 403, 'Not valid token');\n    // Saving the decoded JWT on the client would be nice \n    done(true);\n  });\n}\n\n});\nwss.on('connection', ws => {\n   // get decoded JWT here?\n  });\n```\n. ",
    "stellanhaglund": "@pwnall do you store the jwt as a cookie or do you use it as part of the url?\nI'm implementing jwt into my code but I'm not quite sure how to deliver the token.\nAny suggestions?\n. oh and +1 ;)\n. ",
    "dweremeichik": "Perhaps #1099  makes this functionality a little more public? Out of curiosity, how are you handling the invalid token on the client side? Using the 1006 error?. ",
    "cjhowe7": "@ChrisZieba I ended up verifying the JWT in my connection handler as well to get the decoded data. Did you find a better solution?. ",
    "dmax1": "To avoid double JWT encoding, I used global object (pertainInfosThroughConnectionProcess) where I store info\u2019s that I want to retrieve upon opening connection. To distinguish to point right connection as key name I use JWT token itself.\n```javascript\nvar pertainInfosThroughConnectionProcess = {};\nconst wss = new WebSocketServer({\n  server: server,\n  verifyClient: function(info, done) {\n    let query = url.parse(info.req.url, true).query;\n    jwt.verify(query.token, config.jwt.secret, function(err, decoded) {\n      if (err) return done(false, 403, 'Not valid token');\n  // Using jwt as key name and storing uid\n  pertainInfosThroughConnectionProcess[jwt] = decoded.uid;\n  // Using jwt as key name and storing numerous values in object\n  pertainInfosThroughConnectionProcess[jwt] = {\n    uid: decoded.uid,\n    anotherKey: 'another value',\n    oneMoreKey: 'one more value'\n  };\n\n  done(true);\n});\n\n}\n});\nwss.on('connection', ws => {\n  // Now we can use uid from global obejct pertainInfosThroughConnectionProcess\n  // Note: I used 'sec-websocket-protocol' to send JWT in header, so upon opening connection I can access it with ws.protocol\n  var uid = pertainInfosThroughConnectionProcess[ws.protocol];\n  // or if you saved numerous values in object\n  var uid = pertainInfosThroughConnectionProcess[ws.protocol].uid;\n  var anotherKey = pertainInfosThroughConnectionProcess[ws.protocol].anotherKey;\n  var oneMoreKey = pertainInfosThroughConnectionProcess[ws.protocol].oneMoreKey;\n// After retrieving data, we can delete this key value as is no longer needed\n  // Note: delete is costly operation on object and there is way to optimize it, however for this purpose is not too bad\n  delete pertainInfosThroughConnectionProcess[ws.protocol];\n});\n```. ",
    "marcelijanowski": "Is there a better way to do it rather than setting up global var?. ",
    "iatsiuk": "@marcelijanowski yep:\n```js\nverifyClient: function({ req }, done) {\n  req.jwt = jwt.verify(\n    // ...\n  );\ndone(true);\n});\nwss.on('connection', (ws, req) => {\n  const jwt = req.jwt;\n});\n```\n. ",
    "zoltan-mihalyi": "I solved this problem using the request object and a WeakMap.\n```javascript\nconst userRequestMap = new WeakMap();\nconst server = new ws.Server({\n    port,\n    verifyClient: (info, done) => {\n        const user = authenticateUser(info);\n        userRequestMap.set(info.req, user);\n        done(user !== null);\n    },\n});\nserver.on('connection', (connection, request) =>{\n    const user = userRequestMap.get(request);\n});\n```. ",
    "nilfalse": "+1 on this.\nI will most likely end up with mutating info.req approach, but it seems fragile and doesn't play well with TypeScript out of the box. It also requires the on('connection', ...) handler to process the second argument which I wouldn't need otherwise (the same concern as in #1099).\nInstead it would be nice to have some documented way to approach this.\nRight now the async verifyClient can invoke the callback with up to 4 arguments in case when result is false, but the truthy case suddenly doesn't care about the other 3 arguments.\nI'd propose to utilize one of these 3 and have connection object extended with some new property (say, verificationResult), so that whatever the developer passes to the second argument of the callback appears on that new property.\nFor example,\n```js\nconst server = new ws.Server({\n    verifyClient: (info, callback) => {\n        const verificationResult = { userId: 123 };\n        callback(true, verificationResult);\n    },\n});\nserver.on('connection', (connection) =>{\n    const { userId } = connection.verificationResult;\n});\n```\nI'd keep the sync implementation of verifyClient as it is now, because sync computations IMHO either fairly cheep to be repeated inside on('connection', ...) handler or may not be needed there at all. And for those rare cases when the precomputed values may actually be needed, the developer should be able to refactor the code to use the callback instead.\nThis doesn't seem like a breaking change. Any concerns?. I would be glad to investigate & contributing this feature.\nBut until any indication from a maintainer, it doesn't make sense to even start implementing it.. @bfailing this is the code that you would otherwise have in your verifyClient. ",
    "dderevjanik": "@nilfalse that's what i'm looking for ! \nAre there any plans to implement that feature ? It would definetly help...\n. Guys, thank you very much for all answers :) \n@lpinca your answer was especially very helpful... and yes, after implementing it that ways I can understand tech debt behind verifyClient . ",
    "bfailing": "@lpinca getDataAsync is undefined.  What is it doing exactly?. ",
    "Bacto": "Hi,\nYou can get parameters by parsing the upgradeReq.url:\n```\nvar url = require('url');\nwss.on('connection', function(client) {\n    url.parse(client.upgradeReq.url, true).query;\n});\n```\n. ",
    "sushantdhiman": "+1\n. I am having same issue when sharing the WS servers with same express server.\n. Using the latest v1.1.1 along with Node v6.2.0 resolves this issue. But upgrading to Node v6.3.0 make this issue reappear\n. npm install --save ws@latest will do\n. @rkaw92 same dependencies switch to Node v6.3 , I will get buffer errors.  But switch to Node v6.2 everything works.\n. I use nvm to manage the node versions\n. ",
    "yarax": "Hi! I proposed a pull request https://github.com/websockets/ws/pull/481 for using regexp both with string paths\nI hope it would be useful for the issue\n. We balance ws connections among servers, using nginx and key in path (/ws/room1 should go to server1, /ws/room2 to server2)  and in code I just want to know, that it is something like /ws/* comes\nIf you approve feature I'll make tests\n. Another case I'd like to pass some data on handshake in path\nAnd the another reason why I ask pull request is no ability to patch handleUpgrade method with my own one, because of using global functions in module\n. @sequoiar sure, thank you\n. @nkzawa nginx location directive doesn't match query string. So it's impossible.\nAnd the another point is that I shouldn't synchronise balancing logic and code. I just should know that the coming request is suitable for the certain server. Only balancer (nginx) must manage requests. But coming url path to Node.js may occur different \n. ",
    "fulup-bzh": "Searching the code, I found out a solution to access TCP socket at connection time.\nwssocket._socket.remoteAddress +':'+ wssocket._socket.remotePort\nIt's not really clean, but as there it no method that return tcpsocket object, I did not found any other solution that hook to the \"_socket' directly.\n. Solved: Thank you this is cleaner than attaching directly a variable that is supposed to be hidden\n. ",
    "christian-raedel": "Hi @migounette!\nI'm using Arch Linux 64 and ws 0.4.32. To reproduce this issue, clone the repo and run make. But its not a simple use-case...\nRegards,\nChristian\nEDIT: Maybe you can give me a starting point for debugging...\n. Hi @3rd-Eden,\nI'm now using ws 0.6.4 and can't reproduce this issue on TravisCI running node v0.11.14. It appears to be limited to my local development environment...\nDo you have an ideas how I can find out the reason for this error? Thanks.\nRegards,\nChristian\n. ",
    "avaer": "Saw this too (iojs 1.0.2, current git with nan 1.5.x, System is a dockerized ubuntu x64, gcc Ubuntu 4.9.1-16ubuntu6.). So, it's not fixed.\ngdb bt:\n```\n0  0x00007f3e0d552527 in BufferUtil::Mask (args=...) at ../src/bufferutil.cc:97\n1  0x00000000007f8d52 in v8::internal::FunctionCallbackArguments::Call(void (*)(v8::FunctionCallbackInfo const&)) ()\n2  0x00000000008207d2 in v8::internal::Builtin_HandleApiCall(int, v8::internal::Object*, v8::internal::Isolate) ()\n```\nThis is extremely dangerous code in Mask (../src/bufferutil.cc:97), and the casting is probably undefined behavior anyway. That might be being exposed by new node libs/v8/gcc.\n. ",
    "compcj": "I have similar error(node.js 0.12, ws0.7.1, nan 1.6.x, gcc 4.9.1 ubuntu x64 in vmware workstation), debugging core dump showed that error is in BufferUtil::Mask. If this issue is going to be reopened I can provide futher informations.\n. ",
    "aryeharmon": "it fails for ws://somehost.com/somepath?t=fdsfdf%sdfsdfsdf%sdfsdfsf&v=45&ty=sdfsdfsf\nand for it fails for ws://somehost.com/somepath/?t=fdsfdf%sdfsdfsdf%sdfsdfsf&v=45&ty=sdfsdfsf\n. you should have an event to handle that on the server\n. All i needed to do is add an error handler\nsocket.on('error', function (err) {\n    console.log(err);\n});\n. seems like this is only happening on some servers. any ideas?\n. proxy support\n. was was an issue with the proxy agent i was using\n. ",
    "coreybutler": "+1\n. ",
    "alanhoff": "Actuallly you can pass an option to your https server and request the client cert:\n``` javascript\nvar ws = require('ws');\nvar fs = require('fs');\nvar https = require('https').createServer({\n  key: fs.readFileSync('keys/key.pem'),\n  cert: fs.readFileSync('keys/cert.pem'),\n  requestCert: true,\n}, function(req, res) {\n  res.end('Please upgrade the connection');\n}).listen(8080);\nvar server = new ws.Server({\n  server: https,\n  verifyClient: function(info, cb) {\n    console.log(info.req.connection.getPeerCertificate(true));\n    cb(true);\n  }\n});\nserver.on('connection', function(client) {\n  console.log('Connected');\n});\n```\n. ",
    "scaret": "Thank you @alanhoff ! I think it's what I wanted\n. ",
    "misterdjules": "@migounette @3rd-Eden I created issue #392 to describe the same issue and PR #393 to fix it in a way that I think is more robust. Please let me know what you think.\n. @migounette Thank you very much once again for taking the time to test it!\n. @3rd-Eden Nice and clean, thanks!\n. ",
    "the1mills": "crippity crap, thanks anyway\n. ",
    "michaelsanford": "Graag gedaan.\n. I'll send another pull request for this (regarding 81af16a89).\nTo give some insight, the ability to programmatically determine the license type of every package used in a project from package.json is critical for projects that wish to use open-source modules and be certain of their license.\nThe property does not need to point to a license file.\n. Spoke too soon: I see it does exist at the top!\n. ",
    "chussenet": "FYI ,I tested with the client of the websocket module(require('websocket').client;)  and it works .\n. ",
    "melvincarvalho": "Same issue\n```\nvar WebSocket = require('ws');\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\nvar ws = new WebSocket('wss://localhost:443/');\nws.on('open', function open() {\n  console.log('connected');\n  ws.send(Date.now().toString(), {mask: true});\n});\nws.on('close', function close() {\n  console.log('disconnected');\n});\nws.on('message', function message(data, flags) {\n  console.log('Roundtrip time: ' + (Date.now() - parseInt(data)) + 'ms', flags);\n});\n```\nGives\n```\nnode test.js \nevents.js:72\n        throw er; // Unhandled 'error' event\n              ^\nError: unexpected server response (400)\n    at ClientRequest.response (/var/www/ld/test/node_modules/ws/lib/WebSocket.js:674:15)\n    at ClientRequest.g (events.js:180:16)\n    at ClientRequest.EventEmitter.emit (events.js:95:17)\n    at HTTPParser.parserOnIncomingClient [as onIncoming] (http.js:1688:21)\n    at HTTPParser.parserOnHeadersComplete [as onHeadersComplete] (http.js:121:23)\n    at CleartextStream.socketOnData [as ondata] (http.js:1583:20)\n    at CleartextStream.read [as _read] (tls.js:511:12)\n    at CleartextStream.Readable.read (_stream_readable.js:320:10)\n    at EncryptedStream.write [as _write] (tls.js:366:25)\n    at doWrite (_stream_writable.js:223:10)\n```\nOr\n```\nnode test.js \nevents.js:72\n        throw er; // Unhandled 'error' event\n              ^\nError: unexpected server response (403)\n    at ClientRequest.response (/var/www/ld/test/node_modules/ws/lib/WebSocket.js:674:15)\n    at ClientRequest.g (events.js:180:16)\n    at ClientRequest.EventEmitter.emit (events.js:95:17)\n    at HTTPParser.parserOnIncomingClient [as onIncoming] (http.js:1688:21)\n    at HTTPParser.parserOnHeadersComplete [as onHeadersComplete] (http.js:121:23)\n    at CleartextStream.socketOnData [as ondata] (http.js:1583:20)\n    at CleartextStream.read [as _read] (tls.js:511:12)\n    at CleartextStream.Readable.read (_stream_readable.js:320:10)\n    at EncryptedStream.write [as _write] (tls.js:366:25)\n    at doWrite (_stream_writable.js:223:10)\n```\n. ",
    "misha-panyushkin": "Same problem. \nWS Version: \"^1.1.1\"\n`\n    const WebSocket = require('ws')\n    this.ws = new WebSocket(URL)\n    this.ws.on('open', () => this.subscribe())\n    this.ws.on('message', (data, flags) => this.onMessage(data, flags))\n    this.ws.on('close', () => {\n        setTimeout(() => this.connect(), 1000)\n    })\n\n`\nSometimes gives:\n\n. @lpinca same today:\nError: unexpected server response (404)\n16:21:22 0|app      |     at ClientRequest.response (/usr/src/app/node_modules/ws/lib/WebSocket.js:719:15)\n16:21:22 0|app      |     at ClientRequest.g (events.js:260:16)\n16:21:22 0|app      |     at emitOne (events.js:77:13)\n16:21:22 0|app      |     at ClientRequest.emit (events.js:169:7)\n16:21:22 0|app      |     at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:427:21)\n16:21:22 0|app      |     at HTTPParser.parserOnHeadersComplete (_http_common.js:88:23)\n16:21:22 0|app      |     at TLSSocket.socketOnData (_http_client.js:317:20)\n16:21:22 0|app      |     at emitOne (events.js:77:13)\n16:21:22 0|app      |     at TLSSocket.emit (events.js:169:7)\n16:21:22 0|app      |     at readableAddChunk (_stream_readable.js:146:16)\n16:21:22 0|app      |     at TLSSocket.Readable.push (_stream_readable.js:110:10)\n16:21:22 0|app      |     at TLSWrap.onread (net.js:523:20). ",
    "ricardofbarros": "@lpinca I think what they are saying is that it shouldn't throw.\nIf that's the case @misha-panyushkin just add an error event handler ;) and it shouldn't throw anymore.\nthis.ws.on('error', (err) => {\n        console.log('Fluffy error', err)\n    }). ",
    "markito12": "Error: unexpected server response (400)\n    at ClientRequest.response (C:\\Users\\auxfr\\Desktop\\ChatBot_Project-master\\node_modules\\ws\\lib\\WebSocket.js:719:15)\n    at Object.onceWrapper (events.js:277:13)\n    at ClientRequest.emit (events.js:189:13)\n    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:556:21)\n    at HTTPParser.parserOnHeadersComplete (_http_common.js:109:17)\n    at TLSSocket.socketOnData (_http_client.js:442:20)\n    at TLSSocket.emit (events.js:189:13)\n    at addChunk (_stream_readable.js:284:12)\n    at readableAddChunk (_stream_readable.js:265:11)\n    at TLSSocket.Readable.push (_stream_readable.js:220:10). ",
    "mizhiwu": "Thank you so much.\n. ",
    "animedbz16": "@3rd-Eden Thanks for the clarification. I'll open an issue there.\n. ",
    "DavidSouther": "+1, this is hitting me especially  hard in hosted CI environments. The rebuild step can easily take an extra 30 seconds, and rarely outright fails, because of the rebuild.\n. @3rd-Eden @lpinca\nws is getting ~1 million downloads from the NPM registry a month.\nThe two binaries, bufferutil.node and validation.node, are 18kb each. Round that to 40kb per install.\nUS Standard Out pricing is $0.090 / GB. http://aws.amazon.com/s3/pricing/\n40kb * 1 million * $0.090 / Gb = $28.80 / mo\nMy company, ThirdCat LLC, would love to donate $500/year to cover those costs.\n. Nb Node 0.12 and iojs both promise improvements in the native cluster algorithms.\n. You'll need to provide a but more info- can you link to the repo that this is happening?\n. ",
    "rosskukulinski": "@3rd-Eden I've just gone through this same process for node-webrtc. I'd be happy to lend a hand if you'd like to move forward with pre-built binaries.\n. ",
    "ErisDS": "Hi there, I've hunted around for a gitter or IRC to write this - but couldn't find anything, so please direct me elsewhere if there's a better place for this.\nI'm currently researching the feasibility of adding ws as a dependency to Ghost and I'm concerned about the impact this would have on our install process. ws is already a dev dependency, and I've seen a few people run into build failures, although I think the versions of ws that are involved are quite old and may be prior to the changes mentioned.\nEssentially, I'd like to find out (sorry couldn't find this anywhere) what impact the optional dependencies failing has on functionality and whether it is going to cause confusion due to the error messages. More importantly I am wondering if you would consider there being a greater need, and be more interested in potentially using node-pre-gyp, in order to support Ghost's use case?\nnode-pre-gyp has been very large factor in Ghost's success - so we're big fans! I completely understand the overheads it introduces though and would be keen to help minimise those in any way that we can.\n. ",
    "tciuro": "Good call ;-)\nThanks Arnout.\n. ",
    "Akamaozu": "This problem is most likely caused by trying to build the library on a windows machine. From the very little I know struggling with similar issues recently:\n1. There are no in-built C++ bindings available for Node in Windows\n2. The workaround is using node-gyp to create a build file which then uses something in Windows 7.1 SDK to actually do the building. Visual Studio, I believe.\n3. You must use the Windows 7.1 SDK CLI to run npm install if the bundle needs to use node-gyp to build any part of the project.\nHere's my comment on how to get Windows 7.1 SDK up and running on your machine. It's not complete, but I hope it helps.\nhttps://github.com/TooTallNate/node-gyp/issues/361#issuecomment-66871249\nI just installed socket.io which uses ws so I just experienced the matter myself. Here's what it looked like on my machine:\n\n\n\n\n\n\nCheers and Happy Noding! :)\n. ",
    "nkzawa": "@3rd-Eden Thank you for reviewing.  I will fix failing tests ASAP.\n. @3rd-Eden Fixed. Please check again.\n. Ah, I'm sorry. I will tackle the problem.\n. I'll take a look.\n. Umm, this seems because the client websocket stops every operations when the server websocket closes the underlying socket.\nhttps://github.com/einaros/ws/blob/master/lib/WebSocket.js#L738\nThis happens only when perMessageDeflate option is true because it makes consuming data asynchronous.\n. I reconsider the way to fix #419 since this causes to emit close event before finishing to consuming data.\n. thank you for your quick response :)\n. @3rd-Eden it seems v0.6.5 is not released to npm. Could you release it please? \n. @3rd-Eden thx!\n. @andriichyzh\n``` js\n// server\nnew ws.Server({ perMessageDeflate: false });\n// client\nvar socket = new ws.WebSocket('http://localhost', { perMessageDeflate: false });\n// or disable per message\nsocket.send('woot', { compress: false });\n```\nhttps://github.com/websockets/ws/pull/456\n. Yeah, it would be helpful.\n. Thanks for inviting me :D\n. It seems you are using socket.io then check https://github.com/nkzawa/socket.io-stream\n. It seems keepAlive doesn't mean always works well.\nhttp://stackoverflow.com/questions/23238319/websockets-ping-pong-why-not-tcp-keepalive\nSo I think we usually should use ping/pong.\n. I think it might be nice to implement keep-alive using websocket ping/pong instead of just setting tcp keep-alive. \n. No, the doc should be correct. What version of ws do you use?\n. It matters because on browser, ws returns global.WebSocket which has slightly different API. \nYou can use ws.onopen = function() {} form instead.\n. :+1: thx for your PR :smile: \n. I'm not against closing event, but I think this problem happens on browser WebSocket client as well.\nAnd you can catch this error if pass a callback to send like the following.\njs\nsocket.send('foo', function(err) {\n  if (err) console.log('an error happened');\n});\n. I'm curious when you need this.\n. Can't we use query parameters for that? I think it's more appropriate than using path.\nBtw, it seems path option is used in other places too.\nhttps://github.com/websockets/ws/blob/master/lib/WebSocketServer.js#L57 \n. Umm, It seems you can't send TypedArray when perMessageDeflate is enabled. Sorry, I will fix the issue. You can use Buffer instead of TypedArray for the meanwhile.\n. The issue is already fixed through https://github.com/websockets/ws/pull/524, though I think It's not released yet.\n. Ah, I didn't know ws supports sending an array before...\nI'm not sure whether it's the intended behavior or not, since you can always use TypedArray and ArrayBuffer on Node.js. Any idea @3rd-Eden ?\n. Then we should not officially support sending a plain array as binary IMO.\n. The library is for server side. You can just use browser WebSocket on client side.\n. Can I ask where I can find the definition?\n. Sorry, I'd like to know where the definition of the timeout is on RFC.\n. So I think that's the reason of  socket.setTimeout(0), there is no timeout of inactivity except ping pong. You need to call ws.ping() manually, though WebSocket on browser doesn't have ping().\n. socket.setTimout(0) looks good to me since it disables unexpectedly added timeouts. A socket must not have a timeout, and the method call will make that clear.\n. @tresdin Thanks for your report. Can you try https://github.com/websockets/ws/pull/595 if possible ?\n. @tresdin thx!\n@3rd-Eden can you review #595 ?\n. Thanks for your report!  Will fix asap.\n. @3rd-Eden can you merge this too?\n. :+1: awesome\nBut I'm not sure if this is the root cause, since zlib objects should be released with socket instances when no reference exists.\nAnyway explicit cleaning up would be nice.\n. Hi, sorry for the delay. I could reproduce similar results with your scripts, but maybe this means it's not leak? Though I have no idea about the difference of RSS.\n. :+1: It might be better to add a guard to compress and decompress for checking if the instance is already cleaned up, like https://github.com/websockets/ws/blob/master/lib/Receiver.js#L269 .\n. > When maxPayloadExceeded is called, the dead flag is set on the Receiver.\nThis sounds weird since we have to do closing handshake even when any errors occurs.\nIf it's done properly, we don't need to remove this._isServer or something like that IMHO. \n. ",
    "dscherger": "@nkzawa Is there any intention or plan to add support for x-webkit-deflate-frame even though it's deprecated, it would be nice for this to work with safari on ios and osx.. For the record, I've managed to do this with combination of httpServer.on('upgrade' and socket.on('headers' using the Sec-WebSocket-Key and Sec-WebSocket-Accept headers to associate a response with a specific request but a better api allowing this to be done would be great.. I ended up improving on my previous solution to this problem by rewriting the request / response headers from safari with some lua blocks in my nginx config.\n    # request header filter - https://github.com/openresty/lua-nginx-module#rewrite_by_lua_block\n\n    rewrite_by_lua_block {\n        ngx.ctx.webkit_upgrade = false\n        websocket_extensions = ngx.req.get_headers()['sec-websocket-extensions']\n\n        if websocket_extensions == 'x-webkit-deflate-frame' then\n            ngx.ctx.webkit_upgrade = true\n            ngx.req.set_header('sec-websocket-extensions', 'permessage-deflate; client_max_window_bits')\n            ngx.log(ngx.INFO, 'rewrite webkit request headers // ', websocket_extensions, ' // ', ngx.req.get_headers()['sec-websocket-extensions'], ' //')\n        end\n    }\n\n    # response header filter - https://github.com/openresty/lua-nginx-module#header_filter_by_lua_block\n\n    header_filter_by_lua_block {\n        if ngx.ctx.webkit_upgrade then\n            websocket_extensions = ngx.header['sec-websocket-extensions']\n            ngx.header['sec-websocket-extensions'] = 'x-webkit-deflate-frame; no_context_takeover'\n            ngx.log(ngx.INFO, 'rewrite webkit response headers // ', websocket_extensions, ' // ', ngx.header['sec-websocket-extensions'], ' //')\n        end\n    }\n\n. Yes, that's correct. Safari on iOS seems to ask for compression with 'sec-websocket-extensions: x-webkit-deflate-frame' in the request headers and the ws library requires 'sec-websocket-extensions: permessage-deflate; client_max_window_bits' so rewriting the headers before the ws library sees the request seems to work. The associated response headers then need to be rewritten back into something safari understands, which iis 'sec-websocket-extensions: x-webkit-deflate-frame; no_context_takeover'.\nNo guarantees, but this does seem to work for me.. ",
    "formula1": "Thank you for building something amazing\n. ",
    "Kagami": "(Just curious) What shell is it? The problem seems to be because Windows shell can't understand Linux sh syntax (parentheses, pipes, exit) and fails. Have you tried to run npm install ws in cygwin shell?\nI currenty trying to solve the similar problem (make install not to fail on windows) and I'm wondering is there any better method than writing cross-platform wrapper scripts (like it was mentioned in this comment).\nTheoretically it should be possible to find some weird syntax interception between Linux and Windows native shells.\n. Briefly looked through the wiki page and it seems to be that node-gyp rebuild || exit 0 syntax should work in both shells.\n@HansS would you like to test? You will need to clone ws git repo, edit the install command in package.json and run the npm install command in the shell inside the repo directory.\n. I mean (sorry if it was sound unclear) change install script in package.json from (node-gyp rebuild 2> builderror.log || (exit 0) to node-gyp rebuild || exit 0\n. ",
    "HansS": "Hi Haki,\nthe test fails!i did several install tests! The result is always the same with the error message:\"failed install script.... - (node-gyp rebuild 2> builderror.log || (exit 0)\"\nkind regardsHans\nDate: Fri, 9 Jan 2015 09:19:52 -0800\nFrom: notifications@github.com\nTo: ws@noreply.github.com\nCC: hans.schenker@netxpert.ch\nSubject: Re: [ws] npm install ws@latest problem on window 8.1 - node 0.10.29 - npm 2.1.1 (#416)\nBriefly looked through the wiki page and it seems to be that \"node-gyp rebuild || exit 0\" syntax should work in both shells.\n@HansS would you like to test? You will need to clone ws git repo, edit the install command in package.json and run the npm install command in the shell inside the repo directory.\n\u2014\nReply to this email directly or view it on GitHub.\n=\n. Hi Kagami,\nthank you for your message!i correct as you describe, but the error stil remains (see attached file)\nkind regardsHans\nDate: Sat, 10 Jan 2015 04:04:33 -0800\nFrom: notifications@github.com\nTo: ws@noreply.github.com\nCC: hans.schenker@netxpert.ch\nSubject: Re: [ws] npm install ws@latest problem on window 8.1 - node 0.10.29 - npm 2.1.1 (#416)\nI mean (sorry if it was sound unclear) change install script in package.json from (node-gyp rebuild 2> builderror.log || (exit 0) to node-gyp rebuild || exit 0\n\u2014\nReply to this email directly or view it on GitHub.\n=\n. ",
    "manuguerra": "@shacharz I wasn't able to reproduce the issue, can you please provide a sample code where it happens? Thanks!\n. ",
    "r3wt": "try \nws.clients.length\n. @shacharz no prob\n. What the fuck? This clearly didn't answer my question\nSent from my Windows Phone\n\nFrom: Arnout Kazemiermailto:notifications@github.com\nSent: \u200e12/\u200e27/\u200e2014 8:20 AM\nTo: einaros/wsmailto:ws@noreply.github.com\nCc: Garrett R. Morrismailto:stuckinabox@live.com\nSubject: Re: [ws] how do i include ws on the client side? (#423)\nClosed #423.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/423#event-212196066\n. I wanted to use the ws client from this library for congruency on client/server. I'm well aware of the standard web socket implementation, but the way the docs read, it appeared as though this offered client AND server libraries ala socket.io.\nSent from my Windows Phone\n\nFrom: Trygve Liemailto:notifications@github.com\nSent: \u200e12/\u200e27/\u200e2014 8:55 AM\nTo: einaros/wsmailto:ws@noreply.github.com\nCc: Garrett R. Morrismailto:stuckinabox@live.com\nSubject: Re: [ws] how do i include ws on the client side? (#423)\nThere is no library to include in your html with this module. Modern browsers support web sockets out of the box so what you need to do is write the javascript code which connects to your server and acts upon the messages you send back and forth between the server and browser.\nAs a simple test to see if you can connect to the node.js server you've set up you can include this in the html view(s) of your PHP:\njs\n    <script>\n      var ws = new WebSocket('ws://www.your.server.com');\n      ws.onmessage = function (event) {\n        console.log(event.data);\n      };\n    </script>\nThen any messages the node.js sends should appear in the console of the browser.\nHere is documentation on the Web Socket API in browser.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/423#issuecomment-68180495\n. Guess that leaves it to me then.. I'll craft up a 3rd party plugin to mirror functionality\nSent from my Windows Phone\n\nFrom: Trygve Liemailto:notifications@github.com\nSent: \u200e12/\u200e27/\u200e2014 9:39 AM\nTo: einaros/wsmailto:ws@noreply.github.com\nCc: Garrett R. Morrismailto:stuckinabox@live.com\nSubject: Re: [ws] how do i include ws on the client side? (#423)\nThis library does come with a server side client so one can do Web Socket connections between servers. Its not a browser client.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/einaros/ws/issues/423#issuecomment-68181702\n. found it. ws.upgradeReq.headers.cookie gives me the cookies which i can iterate over retrieving whatever cookies i need(for instance the session cookie, or subscribe requests).\njs\nws.on('connection', function(ws) {\n            console.log(ws.upgradeReq.headers.cookie);\n});\n. @3rd-Eden the for/in loop you reference was copied from your examples in the README of this repo. the loop works as the client receives data but its just \"undefined\". same thing is output to console.\n. here i changed the method of iterating over the client array. still same result output to both client and nodejs console. i'm pushing an object literal and trying to json.stringify it.\n\n. proof the error is originating inside of the send function. i'm going to remove the cluster lib and forking and see if that helps. if it doesn't solve it, is there an email address i can mail you the code and instructions to reproduce?\njs\nsetInterval(function(){\n    if(ws.clients.length > 0){\n        var msg = ws.mkt_test_msg();\n        console.log(msg);\n        ws.broadcast(JSON.stringify(msg));\n    }\n},50);\n\n. @3rd-Eden https://github.com/einaros/ws/blob/master/README.md#server-sending-broadcast-data\n. @3rd-Eden  That error check was also in the documentation. I'm a first time Nodester.  so perhaps you can change the error handling best practices to read\n``` js\nif(typeof error !== 'undefined'){\n    console.log(error+\"\\r\\n\");\n}\n```\nalso, fwiw i decided to log the event in the browser console and its straight up undefined. i obviously have no reason to come to github and lie right? \n\n. Edit, i found the problem!\nattempting to use jquery to wrap the event is resulting in some loss of the event's properties. the problem was clientside and not serverside. restoring to vanilla javascript event solves the problem\n\n. ",
    "matanster": "Why then does the example code at https://einaros.github.io/ws/ require the library on the client side?\nAny issues using the built-in browser websocket implementations?\n. @tsm91 a plugin? no\n. ",
    "jakeknerr": "@matanster I think when they are using a require on the client-side they are referring to using the library in a non-browser client, like another node server. Server client to server server type of thing.\n. ",
    "tsm91": "Not only the readme shows the clientside usage, but also the api docs shows methods that are not implemented by the default websockets. For example https://github.com/websockets/ws/blob/master/doc/ws.md#class-websocket the ping method.\nAnd yes, you will get a runtime error if u try to require this on the clientside. \nSo ill have to implement the ping method. @matanster have u wrote a 3rd party plugin?\n. ",
    "santi6291": "https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications. ",
    "titansoftime": "Yea, I found the docs to be confusing. It sure makes it look like you would use node on the browser client...\nWhy not provide a standard use case scenario (browser + server) as opposed to having multiple node servers communicating?. ",
    "Dvisacker": "Quick question about this, would it technically be possible to use this library or at least most of it's functionality on the browser ? \nI'm having trouble with the native websocket API because it's functionality is quite limited. For example, i didn't not find the way to proxy requests with the native websocket API ( new WebSocket('/proxy/') fails because all urls are required to be ws:// or wss:// ). It seems like the ws libraries just from quick testing and from looking at the API, but unfortunately, it doesn't seem to be working on the browser.. ",
    "natrixnatrix89": "@3rd-Eden , Thanks! I had noticed it, but wasn't sure what it's for.\n. ",
    "shellscape": "@lpinca I would like to throw my hat in the ring with a \"disagree.\" This message absolutely needs to be more verbose. It's a usability and developer-friendliness issue more than anything. While I completely understand that it might make total sense to you, as the author/owner, seasoned developers are seeing this message and wondering why they're receiving it. Remember, these folks have no intimate knowledge of the codebase. It's great that we know something isn't open, but the message fails to convey key points:\n\nWhat isn't open? (the socket, the server connection?)\nWhy isn't \"it\" being considered open?\nWhat data indicates a non-open state?\n\nAll three points would help developers find the reasons behind the error. At present we have to scratch our heads and wonder where we should start looking. Be friendly in your output, your users will thank you in droves.. @lpinca I don't believe you're viewing this from a user's perspective. you're pretty clearly viewing it from a maintainers perspective with an intimate knowledge of the library, which is natural. but you're still glossing over the fact that the error message as it stands is not user or developer friendly.\nI honestly don't understand the pushback on making an error message more verbose. It only serves to assist the library's users/devs. It wouldn't add any technical debt, it wouldn't add bloat, and it would only be more helpful. So why the pushback?. @lpinca indeed, notice that the message does specify what is not open. the authors of that core module saw it necessary to create a friendly error message.\nI must disagree though; in no way is updating a string a major semver change. \nVerbatim from semver.org:\n\nMAJOR version when you make incompatible API changes\n\nI understand that you're a contributor to the node core, a member of the org, and have been for some time. So it boggles the mind as to why you'd claim that an update to an error message would be a major version change. On the surface it really looks like you're being intentionally difficult in a passive attempt to dissuade anyone from making a positive change in this case. . Perhaps the node core team should lobby semver to update their descriptions of version indicators then, as nothing close to that specific case appears on semver.org, and isn't in any drafts for future versions as far as I've been able to find. It seems an arbitrary choice at best.. @lpinca I've spoken to quite a few people about the move to error codes and the issues they've run into with error messages. I have some more reading to do on their implementation but I believe now that this should be a more comprehensive change following their lead. . potentially. there is some more discussion and reading needed before making a call on that. see https://twitter.com/JoyeeCheung/status/920118626903928832 for some good bits, replies from maintainers about the error codes. . @lpinca indeed. it warrants more discussion. @goktugyil wow we were both working on this problem at the same time today. See my comment here: https://github.com/nodejs/node/pull/17806#issuecomment-446213378. It appears that Node v10.14.0 introduced some kind of regression. . @goktugyil no clue. on our end, we were able to isolate it to v10.14.x. @lpinca would that be a simpler reproduction that should be posted on https://github.com/nodejs/node/issues/24958?. @lpinca I think this one might have been a premature close. While the situation I'm facing is different, I've been getting the same error approximately once for every 20 new socket servers created. I'm one of the active maintainers of webpack-dev-server and have been refactoring away from SockJS to ws. While the frequency of this error is pretty low, it does happen, and it is an issue somewhere within the library.\n\nFrom what I can tell, this is some kind of concurrency/race issue. Here's our present block that handles the connection event for the server, and wires up some convenience methods:\n```js\n      wss.on('connection', (ws) => {\n        this.socket = ws;\n        this.socket.payload = payload;\n    function payload(type, data) {\n      return JSON.stringify({ type, data });\n    }\n\n    const originalSend = ws.send;\n\n    ws.send = function send() {\n      const args = Array.prototype.slice.call(arguments);\n      log.debug('ws.send:', args);\n      originalSend.apply(ws, args);\n    };\n\n    ws.send(payload('options', this.options));\n\n    if (this.stats) {\n      sendStats(this.socket, {\n        force: true,\n        stats: this.stats.toJson(this.options.clientStats)\n      });\n    }\n  });\n\n  if (callback) {\n    callback.call(this.server, err);\n  }\n});\n\n```\nAt first we thought it was an issue with the proxying of socket.send, as they error was occurring in the same place at originalSend.apply(ws, args); every time. So we removed the proxy and the stack shifted back into the ws for each error, meaning the proxying had no effect. \nIt would then seem that some kind of concurrency issue whereby the socket is created and available in the connection event, but doesn't think it's yet \"open.\" We're going to trap the error and retry the send after a tick to see if that clears up the error, but it's absolutely something that happens on a somewhat regular basis for us.. @lpinca I might be able to put together a test app that reproduces; it'd likely be a combo of express, http, and ws. but you'd have to be open to a reproducible, yet not consistent result set. given the nature of the frequency of this, I doubt you'd get the same number of failures at the same time for each run.\nWe'll implement that readyState check and see how that goes. We're not seeing any close events on the WebSocket server, but I suppose it's entirely possible that the send happens before close is sent, perhaps while the state is in CLOSING. @lpinca thanks for the ping. I'm out of town until Jan 3rd. Not sure what your schedule is for merging and publishing but it'll be a bit before I can sit down to take a look at this.. > The 'headers' event on the client has been renamed to 'upgrade'. Listeners\nof this event now receive only the response argument.\nIt'd be helpful to list the justification (aka reasons) for some of the changes. On the surface it's difficult to tell why that particular change was made.. @lpinca sorry it took me a few more days than anticipated, but I left my comments on there. Huge improvement and I'm sure it'll be much appreciated. I dropped some comments that I think would further add value as well.. @lpinca my pleasure. thank you for giving me the opportunity!. Damn. Do we have any accessors to easily tell if the server is in TIME_WAIT, or any way to abort that?. Hrm. I wonder if this is (another) issue with High Sierra then. If I don't connect a client socket to it, then it produces exactly the same results as your video. With the client connected, I get the results I pasted. Not sure where to look next on this one.. Thanks for looking into it deeper on your end. I'm gonna close this, as it's not the fault of ws. Since you're not getting the EADDRINUSE error, I'll do some more digging to figure out if that's a fault of the OS on my end. . ",
    "adityapatadia": "Ok. Thanks.\n. What about adding at least a connect method for client so that we can re-connect when connection is dropped. I use it in nodejs and reconnection is desired there.\n. What happens to old event listeners then? Do I need to bind them again with .on?\n. Ok, cool. Thanks for quick support.\n. I used simple setTimeout based logic at that time. When connection dropped, I re-connected it again after some delay. But somehow it was not very reliable so I switched to socket.io for my project.\n. ",
    "slidenerd": "Primus is super bloated. you have already emitted an 'unexpected-response' event which further calls an abortHandshake method where you are emitting an 'error' event , what you could do is have an extra option inside ws options in the constructor that tries to establish the initial connection again when 'error' or 'unexpected-response' events are emitted and also a setInterval that checks for 'WebSocket.readyState === OPEN'. @ghost kindly share how you did it if you dont mind. Kind of unrelated to this question but did not want to open a separate issue, when using requests library, there is an option called json which if you set to true, the body from (error, response, body) arrives in JSON form readily but I see that in all the snippets posted when you call ws.onmessage , you have to manually do JSON.parse, isnt there a way to get the message as JSON objects readily instead of strings?. thanks for the clarifying the goals of the lib, from an abstraction perspective, what you say makes sense \ud83d\udc4d . I dont mean to be rude but primus is seriously super bloated for a simple task such as reconnecting. My question is highly related and dont want to open an issue, super appreciated if you can clarify something, I noticed in the source code that error triggers a close\n\n\nAre error and close always triggered together\n\n\nAre there situations where error can be triggered without close and vice-versa?\n\n\nI am trying to call a reconnect method when the connection errors out unless I explicitly disconnected it, having some problems with things happening twice. Just a curious question highly related to this post, to get say orderbook candle and ticker from binance, one needs to open 3 ws connections, are there any limits to how many ws connections can run in a single node process, i could not find any benchmarks for this in bench folder, I intend to also connect to bitfinex which requires 4 more connections in addition to binance, how many such connections can be run inside a single node process, some clarity would be super appreciated, thanks in advance.  I was having this issue but I emitted the error event and handled it. \n\n",
    "jhermsmeier": "Thanks!\n. ",
    "cintolas": "Hi,  \nI am writing an application that gets a large amount of data from a tcp socket  and then sends it using ws\nOur  ws.bufferedAmount becomes very large and will eventually slow down our app crash node.   We want to implement some throttling mechanisms that will  Pause the tcp stream when the bufferedAmount hits a limit, flush the ws buffer, and then resume the tcp stream.  The code looks like this\n//BEGIN CODE SAMPLE\ntcp.on('data',function(data){\n    if(ws.bufferedAmount > 1000000){\n                tcp.pause();\n                //flush the buffer in successive sends  until  ws.bufferedAmount === 0 \n                tcp.resume();\n        }else{\n                ws.send(data);\n        }\n})\n//END CODE SAMPLE\nws.bufferedAmount gives an estimate of the number of bytes in the ws sendBuffer.  However I cannot seem to find a way to access the send buffer so that I can finish sending the data\nI looked at ws.stream, but it seems that from the test, they maintain their own buffer and chunk through it.  Is there a way to flush out the ws buffer in successive sends, or do we need to maintain our own external buffer?\n. not an actual issue\nsend takes a callback once the entire buffer is  flushed.  Stick the resume in the callback to throttle the BW\nif(ws.bufferedAmount > 1000000){\n    tcp.pause();\n}\nws.send(data,function(){\n   tcp.resume();\n})\n. ",
    "futurist": "I've also been experiencing this problem. Info below:\nOS: CentOS 6.6 32bit\nNodeJS: 0.10.36\nServer: express server(port 3000) + ws server(port 8888) + Mongodb\nCode:\nvar WebSocketServer = require('ws').Server;\nvar wss = new WebSocketServer({ port: 8888 });\nwss.on('connection', function( ws ) { .... });\nWorked in the last night, but in the morning, 3000 port is ok, Mongodb is ok, except WSServer(8888 port)\n. ",
    "goldfire": "Do you have the same issue on 0.12? If I understand correctly, we were seeing something similar with sockjs until updating to node 0.12.\n. Do you have any sample code?\n. ",
    "liboshi": "Full npm output:\nC:\\Users\\Administrator>npm install --save ws\n\\\n\nws@0.7.0 install C:\\Users\\Administrator\\node_modules\\ws\n(node-gyp rebuild 2> builderror.log) || (exit 0)\n\nC:\\Users\\Administrator\\node_modules\\ws>node \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\node-gyp-bin....\\node_modules\\node-gyp\\bin\\node-gyp.js\" rebuild\nBuilding the projects in this solution one at a time. To enable parallel build, please add the \"/m\" switch.\nVCBUILD : error : project file 'C:\\Users\\Administrator\\node_modules\\ws\\build\\bufferutil.vcproj' was not found or not a valid project file. [C:\\Users\\Administrator\\node_modules\\ws\\\nbuild\\binding.sln]\nVCBUILD : error : project file 'C:\\Users\\Administrator\\node_modules\\ws\\build\\validation.vcproj' was not found or not a valid project file. [C:\\Users\\Administrator\\node_modules\\ws\\\nbuild\\binding.sln]\nws@0.7.0 node_modules\\ws\n\u251c\u2500\u2500 options@0.0.6\n\u251c\u2500\u2500 ultron@1.0.1\n\u2514\u2500\u2500 nan@1.5.3\nnpm-debug.log\n$ cat npm-debug.log\n0 info it worked if it ends with ok\n1 verbose cli [ 'C:\\Program Files\\nodejs\\node.exe',\n1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',\n1 verbose cli   'install',\n1 verbose cli   '--save',\n1 verbose cli   'ws' ]\n2 info using npm@1.4.28\n3 info using node@v0.10.36\n4 verbose node symlink C:\\Program Files\\nodejs\\node.exe\n5 error Error: ENOENT, stat 'C:\\Users\\Administrator\\AppData\\Roaming\\npm'\n6 error If you need help, you may report this entire log,\n6 error including the npm and node versions, at:\n6 error     http://github.com/npm/npm/issues\n7 error System Windows_NT 6.1.7601\n8 error command \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"--save\" \"ws\"\n9 error cwd C:\\Users\\Administrator\n10 error node -v v0.10.36\n11 error npm -v 1.4.28\n12 error path C:\\Users\\Administrator\\AppData\\Roaming\\npm\n13 error code ENOENT\n14 error errno 34\n15 verbose exit [ 34, true ]\nbuilderror.log\n$ cat builderror.log\ngyp ERR! build error\ngyp ERR! stack Error: C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe failed with exit code: 1\ngyp ERR! stack     at ChildProcess.onExit (C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\lib\\build.js:267:23)\ngyp ERR! stack     at ChildProcess.emit (events.js:98:17)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:820:12)\ngyp ERR! System Windows_NT 6.1.7601\ngyp ERR! command \"node\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js\" \"rebuild\"\ngyp ERR! cwd C:\\Users\\Administrator\\node_modules\\ws\ngyp ERR! node -v v0.10.36\ngyp ERR! node-gyp -v v1.0.1\ngyp ERR! not ok\n. Hi\nI have two questions about the build processes:\n-Must Visual studio be installed?\n-Which version of Visual studio should I use?\n. @3rd-Eden \nI have tested follow your above comments, installation process work fine :-)\nI installed Visual Studio C++ 2008 on my Windows PCs.\nThanks very much!!!\n. ",
    "fillrate": "I added the test 'can handle error before request is upgraded', which attempts to connect to a non-existent local server, then ensures that the socket is cleaned up (readyState is set to CLOSED)\n. ",
    "PrinC": "I change the package.json of pomelo-admin, the output of segmentation fault is with ws 0.7.1\n. npm ls:\n\nbuild:\n\n. And the bt of gdb:\n```\n0  0x00007fffef57b507 in BufferUtil::Mask(v8::FunctionCallbackInfo const&) ()\nfrom /home/princ/workspace/nico-server/node_modules/pomelo/node_modules/pomelo-admin/node_modules/socket.io-client/node_modules/ws/node_modules/bufferutil/build/Release/bufferutil.node\n1  0x000000000082a11c in v8::internal::FunctionCallbackArguments::Call(void (*)(v8::FunctionCallbackInfo const&)) ()\n2  0x000000000084c1ff in v8::internal::Builtin_HandleApiCall(int, v8::internal::Object*, v8::internal::Isolate) ()\n```\n. ",
    "fredrikslattman": "I'm aware of this, I'll update the issue with the server implementation. It's not related to the sub protocol.\nI found the issue and it was that when we terminate the connection the code was still normal. Fixed the issue elsewhere.\n. ",
    "jonixfu": "in timeout state.\nor dead line state. \nthanks\n. ",
    "cra0kalo": "sender.terminate(); ??\n. Thankyou 3rd-Eden got it working sir\nconsole.log(\"Broadcasting: \" + data + \" to \" + server.clients.length + \" clients.\");\nserver.clients.forEach(function(client)\n{\n    if (sender == client) //don't send it to the sender that wouldn't make sense\n        return; \n    client.send(data);\n});\n. ",
    "boucher": "(also, given that there are some changes to the 0.12 Buffer API, perhaps this is not surprising)\nhttps://github.com/joyent/node/wiki/Api-changes-between-v0.10-and-v0.12#buffers\n. Quick update: I removed bufferutil from my npm-shrinkwrap to force it to not include that optional dependency, and everything works again. Should I move this issue to https://github.com/websockets/bufferutil? It seems empty over there.\n. ",
    "wanderer": "also running into a  SIGSEGV (Address boundary error) on node 0.11 . Its crashing bufferUtil.Mask\n. ",
    "oumister": "on Ubuntu 14.04.2 changing the version of gcc from 4.9 to 4.8 solved the problem\n. ",
    "LostInBrittany": "I confirm, the problem is there, and simply removing bufferutil seems to correct it. The issue has been opened in bufferutil for a month, no answer has been given ( https://github.com/websockets/bufferutil/issues/1 ).\nShould websockets remove bufferutil from its dependencies (as it is optional) ?\n. ",
    "petehunt": "+1\n. ",
    "Chocobozzz": "Exactly the same issue here with node 0.12. Removing bufferutil solved it (thanks @boucher).\n. ",
    "andreicristianpetcu": "Not sure if I have the same issue or not but thank you @oumister downgrading from gcc 4.9 to 4.8 fixed my Segmentation fault problem.\nTHIS WORKS:\n``` bash\n$gcc --version\ngcc (Ubuntu 4.8.4-1ubuntu15) 4.8.4\n$npm list ws|grep ws\n\u2502   \u2514\u2500\u2500 ws@0.4.32 \n\u2502     \u2514\u2500\u2500 ws@0.4.32 \n\u2502 \u2514\u2500\u2500 ws@0.7.2 \n\u2502   \u2514\u2500\u2500 ws@0.4.32 \n\u2502   \u2514\u2500\u2500 ws@0.7.2 \n    \u2514\u2500\u2500 ws@0.7.2 \n$node --version\nv0.11.16\n$ndenv --version\nndenv 0.4.0-2-gc669ff2\n$npm --version\n2.3.0\nno bufferutil\n$npm ls bufferutil\nriweb@0.0.0 /home/andreip/Dev/riweb\n\u2514\u2500\u2500 (empty)\nnpm ERR! code 1\n```\nTHIS IS BROKEN (I get segfault)\nbash\n$gcc --version\ngcc (Ubuntu 4.9.2-10ubuntu13) 4.9.2\n$npm list ws|grep ws\n\u2502   \u2514\u2500\u2500 ws@0.4.32 \n\u2502     \u2514\u2500\u2500 ws@0.4.32 \n\u2502 \u2514\u2500\u2500 ws@0.7.2 \n\u2502   \u2514\u2500\u2500 ws@0.4.32 \n\u2502   \u2514\u2500\u2500 ws@0.7.2 \n    \u2514\u2500\u2500 ws@0.7.2\n$node --version\nv0.11.16\n$ndenv --version\nndenv 0.4.0-2-gc669ff2\n$npm --version\n2.3.0\n$npm ls bufferutil|grep bufferutil                                                                                                                        \u2502   \u2514\u2500\u2500 bufferutil@1.1.0 \n\u2502     \u2514\u2500\u2500 bufferutil@1.1.0 \n      \u2514\u2500\u2500 bufferutil@1.1.0\nHope this helps somebody :P\n. ",
    "zemirco": "Thanks @3rd-Eden - \n@zemirco use addEventListener instead? Also on the serverside we also support onmessage etc\u2014 Arnout Kazemier (@3rdEden) February 16, 2015\n\nI'm going to change my code and use websocket.onmessage or addEventListener inside my client.js.\n. ",
    "maxleiko": "@zemirco \nYou can also use a trick in your browser to ensure that browserified module that uses ws with the EventEmitter-like API will work:\n``` js\n// this is an ugly hack to prevent browseryfied github.com/einaros/ws module to throw errors at runtime\n// because the EventEmitter API used in Node.js is not available with the WebSocket browser API\nWebSocket.prototype.on = function (event, callback) {\n  this['on'+event] = callback;\n};\nWebSocket.prototype.once = function (event, callback) {\n    var self = this;\n  this['on'+event] = function () {\n    callback.apply(callback, arguments);\n    self['on'+event] = null;\n  };\n};\nWebSocket.prototype.off = function (event, callback) {\n  this['on'+event] = callback;\n};\n```\n. Note that by doing so, you cannot afford registering multiple listeners on the same event.\n. ",
    "andriichyzh": "Thanks.\nHow I can enable/disable deflation? I can't found this in documentation.\n. @nkzawa thanks for description of parameters and update documentation!\nI added to \"bench/speed\" test script this settings and got:\nbash\n[root@ip-172-131-202-212]# node bench/speed.js \nGenerating 500 MB of test data ...\nRunning 10000 roundtrips of 64 B binary data:       2.5s    249.1 kB/s\nRunning 5000 roundtrips of 16 kB binary data:       2s      39.14 MB/s\nRunning 1000 roundtrips of 128 kB binary data:      1.6s    77.69 MB/s\nRunning 100 roundtrips of 1 MB binary data:         1.1s    94.97 MB/s\nRunning 1 roundtrips of 500 MB binary data:         6.1s    81.61 MB/s\nRunning 10000 roundtrips of 64 B text data:         2.6s    240.76 kB/s\nRunning 5000 roundtrips of 16 kB text data:         2.5s    31.33 MB/s\nRunning 1000 roundtrips of 128 kB text data:        1.9s    65 MB/s\nRunning 100 roundtrips of 1 MB text data:           1.5s    67.52 MB/s\n. With the last settings I got a small degradation of speed compared to version 0.5.0, but this is a valid performance :)\n. ",
    "Jakobud": "Can you point me to some projects that do that? I have only ever seen this client side library: https://github.com/joewalnes/reconnecting-websocket\n. ",
    "mreinstein": "0.7.1\n. I'm using this via browserify, in a browser context. Though I don't think that matters.\n. glad to help, even if it's just a minor note. :) \n. ",
    "jondubois": "I would be nice to have a 'closing' event in addition to the 'close' event in order to support the use case mentioned above.\n. @3rd-Eden If I added a 'closing' event would you accept the PR?\nWould that be the right approach?\nI know 'closing' isn't a standard WebSocket event, but it would be useful on the server. Or maybe there are other clean ways to resolve my problem (without having to wrap every send() call with an if condition to check the readyState)?\nI feel that being able to detect when a connection is 'not open' may be more useful than detecting when it is strictly CLOSED.\n. @nkzawa Good point about clients.\nWhen reading the W3C recommendation for the WebSocket API (http://www.w3.org/TR/websockets/), it doesn't mention a 'closing' event so it would not be W3C compliant :(((\nIt feels like the WebSocket API standard is lagging behind... It would be nice to have an event triggered for every state change possible. Maybe a 'readystatechange' event just like with AJAX.\n. TCP itself offers in-order, exactly-once delivery guarantee so yes WS also does by extension. HTTP doesn't provide this guarantee because HTTP requests may be spread over multiple TCP connections (and this negates the guarantee). Since a WebSocket uses a single TCP connection, this guarantee is maintained.\n. To reproduce the issue, you should:\n1. Create a WebSocketServer in its own Node.js process\n2. Then connect to it using the WebSocket client (running in a separate Node.js process).\n3. Now kill the server process\nThe client socket's  'close' event will be emitted but the status code will be 1000 - This is different from the behavior in the browser where the status code will be 1006.\nThe WebSocket client appears to get an error as expected inside its cleanupWebsocketResources() method, but in spite of this, it incorrectly reports the status code as 1000 (normal).\n. @jtblin Yes, I think a second problem which my solution doesn't solve is that the error is not always raised when it should be.\nAlso my previous patch doesn't fix this issue (which I mentioned in my initial post):\n\".. when I try to connect to a non-existing server ... When running the client in Node.js - The onclose handler is never called - Instead, [only] the onerror handler will be called.\"\nI think in this case both the onerror AND the onclose handlers should be called. This issue was simple for me to work around though without having to change the WS module, this doesn't seem as problematic as the first issue.\n. @jtblin For me, when I kill the server, it's the 'end' event which is invoking the cleanupWebsocketResources function: https://github.com/websockets/ws/blob/master/lib/WebSocket.js#L777\nThis 'end' event comes from ultron which itself wraps a plain TCP/net socket object. This event here: https://nodejs.org/api/net.html#net_event_end\nIt looks like the problem is that currently, the TCP 'end' event is assumed to mean that the connection was closed cleanly. This is true in TCP land, but in WebSocket land this is not the case: If the underlying TCP socket was closed without first having both sent AND received a WebSocket close control frame beforehand - Then that should actually be treated as a failure (1006 code) even though the TCP connection itself was closed cleanly. See here: https://tools.ietf.org/html/rfc6455#section-7.1.2\n. @jtblin @3rd-Eden This should take care of the condition where the socket is closed without having received a close control frame (which happens when you kill the server abruptly). The RFC indicates that the 1006 status code should be used in this case too.\nI made a pull request: https://github.com/websockets/ws/pull/566\n. @3rd-Eden Thanks!\n. @jtblin I made a temporary fork which I'm currently using for my own project - If this fix is important to your case, you can use it in the meantime: https://www.npmjs.com/package/sc-ws - I guess the merge/release cycle for ws is slow because of the sheer number of dependants - Risk management.\n. I just noticed this PR: https://github.com/websockets/ws/pull/650 - It seems to be well tested - l'll leave someone else to decide which is better. Feel free to ignore this PR.\n. ",
    "irshad-qb": "@3rd-Eden :\n\"If your \"client\" is actually a node script which uses the ws's client interface to create a connection then custom headers are possible\"\nIn this case how can I add a custom header in Oauth2 format ( 'Authorization' : Bearer #token) in case of node script which uses ws ?\n. ",
    "iostreamer-X": "@streamnsight \nYou want something like this?\njs\nWebSocket = require 'ws'\nws = new WebSocket 'ws://localhost:8000',{\n        headers : {\n          token: getToken()\n        }\n      }\n. I am sorry I think I misunderstood the problem\n. ",
    "LinusU": "I've been a bit back and forth myself on that matter but after the ES6 spec throws error for their classes I've become set on that approach.\nThe problem with not requiring new is that it there is no way for the user to know if it will work or not, unless it's specifically mentioned in the docs.\nFrom the users (of this library) perspective, omitting the new keyword is a bad pattern since it only works when the library architect has specifically engineered it in. In the cases it dosen't work, it often produces really weird bugs that's not always apparent what caused it. E.g. in my case it was undefined is not a function at the line self.emit('connected');.\nJust my 2 cents.\n. This is also how the WebSocket class in the browsers works (tested in Safari and Chrome).\nIt is also possible to change from requiring it to not at any point in the future, but going the other way breaks compatibility. If we allowed usage without new we couldn't rewrite this using the ES6 class keyword in the future...\n. @3rd-Eden Any comments? :)\n. Thank you :raised_hands: \n. ",
    "tiagoalves": "Thanks for your feedback and the suggestion regarding the rate limiter.\nAs for using the string.length property, if I understood it correctly, this doesn't eliminate the problem. I believe that by the time on('message') is fired, we have already read the whole message into memory, even if it is a 1GB message. That's exactly what I am trying to avoid.\nI think it's necessary to check the message size as it is being buffered and close the connection with error code 1009.\n. ",
    "caub": "What is the node.js variant? still in ws? Could you show a code example please?\n. ",
    "mems": "I think he means in node WebSocket server you can write Set-Cookie header like that:\nconst wss = new WebSocketServer({\n    port: 9000\n});\nwss.on(\"headers\", function(headers) {\n    headers[\"set-cookie\"] = \"SESSIONID=\" + crypto.randomBytes(20).toString(\"hex\");\n    console.log(\"handshake response cookie\", headers[\"set-cookie\"]);\n});\nwss.on(\"connection\", function(ws) {\n    console.log(\"connection request cookie: \", ws.upgradeReq.headers.cookie);\n});\n. @eugen35 You've got something else overriding the Set-Cookie header with the cookie \"repa\" (and a timestamp as value) before sent by the server\n. Just for everybody else, what I use:\nserver.js:\n```\n\"use strict\";\nconst cluster = require(\"cluster\");\nconst numCPUs = require('os').cpus().length;\nif(cluster.isMaster){\n    for (let i = 0; i < numCPUs; i++) {\n        let worker = cluster.fork();\n        console.log(Worker ${worker.id} created);\n    }\n}else{\n    // WebSocket server\n    let wsConfig = {\n        host: \"127.0.0.1\",//default \"0.0.0.0\"\n        port: process.env.PORT || 9000\n    };\n    const GameServer = require(\"./GameServer.js\");\n    let srv = new GameServer(wsConfig);\n}\n```\nGameServer.js:\n\"use strict\";\nconst WebSocketServer = require(\"ws\").Server;\nmodule.exports = class GameServer{\n    constructor(wsConfig, dbConfig, serverCount/* = 1*/){\n        this._wsServer = new WebSocketServer(wsConfig);\n        console.log(`WebSocket server instance listen ${wsConfig.host || \"0.0.0.0\"}:${wsConfig.port}`);\n        this._wsServer.on(\"connection\", this._handleWSConnection.bind(this));\n    }\n    _handleWSConnection(client){\n        console.log(`New client from: ${client.upgradeReq.headers[\"x-forwarded-for\"] || client.upgradeReq.connection.remoteAddress}`);\n    }\n}\n. ",
    "onsamp": "+1 set cookie in node js ? ws \n. ",
    "eugen35": "Hello! \nI need to set cookie. This decision is not work ((( ! \n\nwss.on(\"headers\", function(headers) {\n    headers[\"set-cookie\"] = \"SESSIONID=\" + crypto.randomBytes(20).toString(\"hex\");\n    console.log(headers[\"set-cookie\"]);\n});\nIn console:\n[ 'HTTP/1.1 101 Switching Protocols',\n  'Upgrade: websocket',\n  'Connection: Upgrade',\n  'Sec-WebSocket-Accept: vGkfnvhYceS53qvrDOjE8Clteq0=',\n  'Sec-WebSocket-Extensions: permessage-deflate',\n  'Set-Cookie': 'repa=1461679469325; domain=\"\"; path=/' ]\nBut in client cookie not setted, in ws.upgradeReq.headers (on connection event) is not setted!\nIs there any way to set cookie ( ?\nWhat may be wrong?\nPS: I use WSS\n. No its my experiments with sets of cookie. Any way cookie \"repa\" is felt on client and in response\n. ",
    "andreevWork": "I find solution:\nweb_socket_server.on('headers', (headers) => {\n      headers.push('Set-Cookie: ' + cookie_parser.serialize('testing', 'test')});\n});\nheaders is a Array, not Object, because solution @mems , don`t work.\nUPD: cookie_parser is a npm module: https://www.npmjs.com/package/cookie\n. +1\n. ",
    "whiler": "code example\n```\nvar WebSocket = require('ws');\nvar cookie = require('cookie');\nvar ws = new WebSocket(\n    'http://localhost/auth',\n    [],\n    {\n        'headers': {\n            'Cookie': cookie.serialize('id', '496E66DD')\n        }\n    }\n);\n```\n. ",
    "brenthmiras": "@whiler This worked for me when using ws as a web socket client in nodejs. Can you please provide a link to the documentation?. ",
    "lewispham": "I'm really looking for ws.key and ws.cert options rather than your suggestion. Thank you anyway. \n. @3rd-Eden I have know idea about the cause, otherwise I've done that.\n. It fails with same error.\n. It actually works fine with rebuild but install.\n. No. I use the instructed command npm install --save ws.\n. I got your output with npm install websockets/ws.\n. @nkzawa Sorry for the late reply. I've tried your fix and it works perfectly.\n. ",
    "RWander": "Sorry, but is there somthing like RedisStore for the WS?\n(please see description problem and its solution for soket.io library http://blog.rstack.cc/node_js__using_socket_io_with_cluster_module.html)\n. Thank again for your quick answer! So If I use cluster module, broadcasting will work fine for all connections?\n. Hmm..\nI see in the documentation:\nServer sending broadcast data\nvar WebSocketServer = require('ws').Server\n  , wss = new WebSocketServer({ port: 8080 });\nwss.broadcast = function broadcast(data) {\n  wss.clients.forEach(function each(client) {\n    client.send(data);\n  });\n};\n. ",
    "puppeteer701": "Can you please share you code for sticky sessions?\n. Then what is the purpose of https://github.com/indutny/sticky-session library?\n. How did you do it?\n. ",
    "kiro112": "a clustered implementation of websocket is much appreciated.\nthe sticky-session does not work on my side.\nany hint ?\nthanks\n. @lpinca but when the connection died. all the wss died too.\nis there a way where if the worker died only the wss attached to that specific worker ?\n. ",
    "calzoneman": "I can confirm that I was able to reproduce the issue on Arch Linux with node v0.12.2.  Well, indirectly.  I had a user of my socket.io-powered software complain about this error message, investigated and was able to use a similar setup to what you described to reproduce it.  ~~The real kicker here is that it seems to reset the entire HTTPS server, kicking any clients that were connected before.~~ Actually, it appears to just kill a random other socket.\nI'm also inclined to believe this is an issue with node-- I was able to reproduce it even when forcing socket.io to use long polling rather than websockets, and I was NOT able to reproduce it with node v0.10.35.  I was trying to come up with a minimal test case but had trouble coming up with an example using ws.\n. I agree it makes sense for Firefox to abort the connection. What does not make sense is killing the connection of a random other client on the server.\nIt's worth noting this does not only happen with self signed certificates; when the problem was reported to me it was caused by someone who for some reason didn't have a particular CA in their Firefox trust store.\nThese things said, I think it is likely an issue with node core and we should bring the discussion over to that project.\nCalvin\n\nOn Apr 13, 2015, at 02:20, Arnout Kazemier notifications@github.com wrote:\nThis looks more like a bug in node core than a bug in ws as none of the stack traces point or originate from ws. Also, it's is known that there issues when using self signed certificates in combination with websockets, safari also has it's fair share of issues with it. And it makes sense for the browsers to kill the connection from a security point of view.\n\u2014\nReply to this email directly or view it on GitHub.\n. https://github.com/joyent/node/issues/14818\n. \n",
    "gopat": "There seems to be more movement on this in iojs/io.js/issues/1642.\niojs is (as most of you will probably know) a fork of nodejs, and some changes/fixes are ported from one to another.\n. ",
    "iliakan": "This suddenly became an issue to me, because ES6-modules have \"implicit strict mode\".\nI'm using babel.js for ES6, and it built my project (including ws browser.js) with all-around-strict-modes. So browser.js got \"use strict\" at the top too and stopped to work.\nAfter debugging I found out the reason and excluded browser.js from babel.js compilation (not needed there anyway), so the issue was fixed.\nBut in the view of ES6 modules it might be future-proof to make the module strict-mode-compatible. \n. I totally agree with you.\nI fixed the issue by excluding the file from babel.\nAfter consideration I thought that future-wise it may be better to make the file strict-mode compatible and embeddable in ES6 modules. And posted the issue.\nMy refactorings led me far away, the code which caused the problem is replaced, but I guess it should work.\n. ",
    "utatti": "+1 for the fix too.\nI understand the function-level strict mode is recommended. However, the problem is no longer just of Babel.js or other ES6 preprocessors. From Node.js v4.0, some ES6 features are officially added into the core and some of the features, such as block-scoped declarations, can only be used in the strict mode. In other words, when we'd like to declare a top-level class like below, we need to add 'use strict'; on the top.\njs\nconst ws = require('ws');\nclass A { } // doesn't work\njs\n'use strict';\nconst ws = require('ws');\nclass A { } // works\nI hope you understand that it's really disturbing to create a functional scope every time we declare a class, especially writing a module for Node.js. And if somebody want to use the same module in a browser too, which is extremely common nowadays with Browserify or Webpack, there comes the problem.\nIn summary, I love ws' simple API but not working in the strict mode really stops me from using it. I will upload a PR soon to fix this issue, so please consider accepting it.\nMany thanks for the work :smile: \n. ",
    "michaelmcmillan": "\nAlso, pull requests without tests are accepted. Especially when they introduce new functionality.\n\nDid you mean \"unaccepted\"?\n. Any advice on how I can implement this? I'll happily code it myself.\n. ",
    "auchenberg": "+1 for this FR. \n. ",
    "pukhalski": "+1 for this PR.\n. ",
    "headlessme": "+1\n. I'm seeing the same issue\nTypeError: Cannot read property 'close' of null\n    at InflateRaw.Zlib.close (zlib.js:465:15)\n    at PerMessageDeflate.cleanup (/var/app/current/node_modules/ws/lib/PerMessageDeflate.js:82:46)\n    at WebSocket.cleanupWebsocketResources (/var/app/current/node_modules/ws/lib/WebSocket.js:957:54)\n    at emitNone (events.js:72:20)\n    at Socket.emit (events.js:166:7)\n    at endReadableNT (_stream_readable.js:905:12)\n    at nextTickCallbackWith2Args (node.js:441:9)\n    at process._tickDomainCallback (node.js:396:17)\n. Looks like this might actually be a problem with zlib:\nvar zlib = require('zlib');\nvar inflate = zlib.createInflateRaw(15);\ninflate.on('error', function(e) {  });\ninflate.write('something invalid');\nsetTimeout(function(){\n    inflate.close();  \n}, 100);\noutput:\n```\n$ node inflate-close.js \nzlib.js:465\n  this._handle.close();\n              ^\nTypeError: Cannot read property 'close' of null\n    at InflateRaw.Zlib.close (zlib.js:465:15)\n    at null._onTimeout (/tmp/inflate-close.js:8:13)\n    at Timer.listOnTimeout (timers.js:92:15)\n```\n. ",
    "paredesivan": "@lpinca \nand how can I forcefully close once I detect that it is no longer present?\n. ",
    "Nickolay911": "Apply this solution to me seems successful:\n``````\nvar wss = new WebSocketServer({ port: 8080 });\nwss._server.on('connection', function(socket) {\n    var emit = socket.emit;\n    socket.emit = function (event) {\n        if (event == 'data') checkPolicy(arguments[1]);\n        emit.apply(socket, arguments);\n    }\nfunction checkPolicy(data) {\n    if (data == '<policy-file-request/>\\0') socket.end('<cross-domain-policy><allow-access-from domain=\"*\" to-ports=\"*\" /></cross-domain-policy>');\n    socket.emit = emit;\n    delete emit;\n}\n\n});```\n``````\n. ",
    "EddieOne": "that looks like socket.io, I think you got the wrong repo.\n. I have already made a script to do this. https://github.com/EddieOne/nodejs-flash-socket-policy\nThough I would not recommend using a port below 1000 as it means running the script as root.\n. You could submit a pull request\n. I updated ws to 1.1.1 and had the same problem.\n. I haven't seen this happen recently, I believe it was from a file descriptor leak. The solution was to add a birthTime property to each socket and call ws.close(); on any sockets uncleanly disconnected.\n. ",
    "ysle": "it isn't necessarily socket.io related. Still needed if you want to connect from flash. (as a fallback for the really old browsers)\nTechnically you can host it on the same port, but this approach highly affect the performance of the WS server itself. I would suggest to use teh default socket policy port 843 for these requests with a parallel server. something like \nexports.server = require('net').createServer(function(connection) {\n        connection.setEncoding('utf8')\n        connection.on('data', function(data) {\n            connection.end(data == '<policy-file-request/>\\0' ? socketPolicy : '')\n        })\n    }).listen(config.port)\n. ",
    "swarajcs": "hi, \nam using flash to communicate with websocket. Its showing connected status, but when I am sending any data to server , it closes the connection. I think its some issue with security policy file. This is my server code.\nvar server_port = 4000;\nfunction policy() {\n                        var xml = '<?xml version=\"1.0\"?>\\n<!DOCTYPE cross-domain-policy SYSTEM' +\n                                '\"http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd\">\\n\\n';\n                        xml += '\\n';\n                        xml += '\\n\\0' ;\n                        return xml;\n}\nvar WebSocketServer = require('ws').Server\n, wss = new WebSocketServer({ port: server_port });\nwss.on('connection', function connection(ws) \n{\n           ws.on('message', function incoming(message) \n           {\n                if(message == '\\0')\n                {\n                    var x = policy();\n                    ws.send(x);\n                    return;\n                }\n```\n        });\n    ws.on('close', function() {\n\n\n    });\n\n    ws.on('error', function() {\n\n    });\n\n```\n});\nwhere should I add the policy file?\nAnd my actionscript code is:\n```\n    import flash.net.XMLSocket;\n    import flash.events.MouseEvent;\n    import flash.security.*;\nSecurity.loadPolicyFile(\"xmlSocket://localhost:4000\");\n\nvar client_socket: XMLSocket = new  XMLSocket();\n\nbtn.addEventListener(MouseEvent.MOUSE_DOWN, start_socket_fn);\nfunction start_socket_fn(event:MouseEvent)\n{\n    client_socket.connect(\"localhost\",4000);\n    client_socket.addEventListener(DataEvent.DATA, on_serverData);\n    client_socket.addEventListener(Event.CONNECT, on_serverConnection);\n    client_socket.addEventListener(IOErrorEvent.IO_ERROR,IOerror);\n    client_socket.addEventListener(Event.CLOSE,socketclose);\n    client_socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR,socketsecurityerror);\n}\n\n```\nfunction socketsecurityerror(event:SecurityErrorEvent)\n{\n    msg.text = \"\"+\"socketsecurityerror\";\n}\nfunction IOerror(event : IOErrorEvent):void\n{\n    msg.text = \"\"+\"IOerror\";\n    trace(\"IOerror\");\n}\nfunction socketclose(event : Event):void\n{\n    msg.text = \"\"+\"socketclose\";\n    trace(\"socketclose\");\n}\nfunction on_serverConnection(event:Event)\n{\n            trace(\"connected\");\n            msg.text = \"\"+\"connected\";\n}\nfunction on_serverData(event:DataEvent)\n{\n    msg.text = \"\"+\"errorrrrrrrrrr\";\n    trace(\"errorrrrrrrrrr\"+event.target.data);\n}\nfunction send_data(event:MouseEvent)\n{\n```\n     msg.text = \"\"+\"send......\";\n var o :Object= new Object();\n    o.hello =  \"initial_start\" ;\n    client_socket.send(JSON.stringify(o));\n\n```\n}\nIt seems, I have to add policy file on server and it has to returned to client. Am not sure, what to add and how to fix it.\n. Hi,\nthank you so much for your reply. Actually am not connecting it to .net\nserver. Am trying to connect with websocket or socket.io . If am using .net\nserver, it will work fine.\nOn Wed, Nov 9, 2016 at 11:29 PM, Eddie J notifications@github.com wrote:\n\nI have already made a script to do this. https://github.com/EddieOne/\nnodejs-flash-socket-policy\nThough I would not recommend using a port below 1000 as it means running\nthe script as root.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/issues/485#issuecomment-259480447, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/APi-bNy7RjYYQ0_SVHnLgbNLvLGAJvhlks5q8gnqgaJpZM4ECHbL\n.\n\n\nWarm Regards,\nSwaraj CS\nProject Manager\nInfocom Software Pvt Ltd. \nPalarivattom_ |Cochin 25 |_India\n|(Work 91.484.3107000_|Cell 91.9946850824\n_swaraj@icsoft.in hectosh@icsoft.in * |*http:\\www.infocomsoft.com\n. ",
    "Efreak": "try ws.ping?\n. It seems that this might be the problem? I was under the impression that the 'connection' event happens first, then the 'open' event should happen when communication is possible, so I was waiting on the 'open' event to actually do anything. When I do on('open', doStuff) it works fine.\nI think I got confused by the ws.Server and ws.WebSocket both being documented in the same file...\n. ",
    "fatelei": "You can use this code:\nws.ping('ping', { mask: true, binary: true }, true);\n. The old way: If the client connects with a wrong path, the connection will hang. Both the server and the client can know what hanppened. I think the server should tell to the client what happened.\n. ok\n. @lpinca I have added a test\n. ",
    "daliwali": "+1 for removeEventListener.\n. ",
    "timhuff": "Dear reader of the future: While this issue is still open, removeListener appears to be working.\n. ",
    "jbaudanza": "Looks like this is fixed in #805. I've monkey-patched this PR into my project and it works great. Hopefully this will get merged soon.\n. ",
    "Globik": "@JoshuaWise and when not ws.on('message',...) but an other listener? For examle eventemitter.on('someevent',...)??? How to be?. Here we go. Proof of concept.\nconst WebSocket = require('ws');\nconst http=require('http');\nconst express = require('express');\nconst app = express();\napp.use(express.static('public'));\nconst bserver=http.createServer(app);\nconst webPort = 5000;\nbserver.listen(webPort, function(){\n console.log('Web server start. http://localhost:' + webPort );\n});\nconst wss=new WebSocket.Server({server:bserver});\nwss.on('connection',ws=>{\nws.room=[];\nws.send(JSON.stringify({msg:\"user joined\"}));\nconsole.log('connected');\nws.on('message', message=>{\nconsole.log('message: ',message);\n//try{\nvar messag=JSON.parse(message);\n//}catch(e){console.log(e)}\nif(messag.join){ws.room.push(messag.join)}\nif(messag.room){broadcast(message);}\nif(messag.msg){console.log('message: ',messag.msg)}\n})\nws.on('error',e=>console.log(e))\nws.on('close',(e)=>console.log('websocket closed'+e))\n})\nfunction broadcast(message){\nwss.clients.forEach(client=>{\nif(client.room.indexOf(JSON.parse(message).room)>-1){\nclient.send(message)\n}\n})\n}\nhttps://gist.github.com/Globik/5a63e8683ab1d1c2c72fd25a798ae2d8. There is a nice better approach for this purposes. Based on upgradeReq.url filtering. Just like ws-broadcast.js have implented.\nhttps://github.com/maxleiko/ws-broadcast/blob/master/lib/wsClientHandler.js\nclient.on('message', function (msg) {\n        // broadcast message to all connected clients in the room\n        wss.clients.forEach(function (c) {\n            if (c.upgradeReq.url === client.upgradeReq.url && c.id !== client.id) {\n                if (c && c.readyState === WebSocket.OPEN) {\n                    c.send(msg);\n                }\n            }\n        });\n    });\nSo it is much naturally for a multi user webrtc app.. ws.url=req.url. @cre8 \nYes, it should be.\nPlease use req.url from second parameter.. Like this:\nvar sendtoclients=true;\nif(sendtoclients){\nif(msg.target && msg.target !==undefined && msg.target.length !==0){\n    console.log('sending target message to one user: ',msg)\nwss.clients.forEach(function(el){\nif(el.username==msg.target){\nif(el && el.readyState==1) el.send(JSON.stringify(msg)\n}})\n}. ",
    "aslushnikov": "+1\n. ",
    "diegito": "+1\n. I was feeding data from a chrome extension. It works for some time (like a couple minutes) and then it crashes with this same error. To be honest I was using plain ws and not wss.\nEventually I decided to move to Python and Tornado to serve on a websocket. \n. ",
    "agalazis": "Well I guess you would be better off configuring ssl on nginx rather than configuring your node servers and serve plain ws\n@aslushnikov @diegito did you experience this when using wss as well?\n. ",
    "metabench": "Is get bufferedAmount still not working?\nIf so, would someone please help me with the code that would detect if the receive buffer is full, or how full it is.\nCurrently I am trying to get a connection working where the server is quickly sending large amounts of data in separate paged messages, and I need to have client-side detection of receive buffer size used and size available (or at least it would be very useful, as it may be better than some other workarounds).. ",
    "gooderist": "If I understand the issue correctly, bufferedAmount was reporting +1 size even on an empty buffer. This was a fixed in node v8.8.0 (issue #15005)\nIf that was the issue, then yes, bufferedAmount is correctly reporting zero now after the onmessage. Although, I am still at a loss as to why it took 10 bytes (18 as of v10.8.0) to contain 3 ascii characters. I would love to find out if anyone knows.. Thanks, it makes sense that the mask is accounting for some of the extra bytes. However, on latest (v10.8.0) I'm seeing 18 bytes. And on LTS 8.11.3, I'm getting 78 bytes!!. ",
    "zaggino": "Yes, I can install directly from master just fine.\n. \"dependencies\": {\n  \"ws\": \"https://github.com/websockets/ws.git\"\n}\nworks\n. ",
    "kudos": "@3rd-Eden any sign of that new release? All that needs to change is bumping bufferutil to 1.1.0.\n. ",
    "V1c70r": "I have the same problem too. perMessageDeflate: false helps.\n. ",
    "woverton": "I am running your sample applications with 3000 clients on my laptop and the cpu usage is only about 40%. The issue you're having might be outside of ws and be an issue in your application. Are you doing any big looping over all your clients or anything like that?\n. This is not straight up built in, but you could add it into your program (Note, this will not block the connection from ever happening, more it will allow you to implement a handshake of your own).\n```\nthis.wss = new WebSocketServer({\n    port: process.env.PORT\n});\nthis.wss.on('connection', function(socket){\n    if(!iWantThisSocketToConnect(socket)){\n        socket.close();\n        return;\n    }\n});\n```\nFor example you could check the ip of the socket.  http://stackoverflow.com/questions/14822708/how-to-get-client-ip-address-using-websocket-einaros-ws-lib-in-node-js\nAlso, your link is broken.\n. I am not a ws dev, so there may be a super special undocumented way that is not obvious by looking at the code. However...\nI figured it out! Now gaze upon my ugly test code!\n```\nvar server = function() {\nvar WebSocketServer = require('ws').Server;\nvar http = require(\"http\");\n\nvar server = http.createServer(function(req, res) {\n    res.end(\"Hello\");\n});\n\nserver.on(\"upgrade\", function(req, socket, head) {\n\n    if(iDontWantThemToBecomeAWebSocket()){\n        socket.destroy(); //<-------------------------- Close Connection\n    }\n})\n\nvar wss = new WebSocketServer({\n    server: server\n});\n\nserver.listen(8000);\n\nwss.on('connection', function connection(ws) {\n    ws.on('message', function incoming(message) {\n        console.log('received: %s', message);\n    });\n\n    ws.send('something');\n});\n\n}\nvar client = function() {\nvar WebSocket = require('ws');\n\nvar ws = new WebSocket('ws://localhost:8000');\n\nws.on('open', function open() {\n    ws.send('something');\n});\n\nws.on('message', function(data, flags) {\n    console.log(data)\n});\n\n}\nserver();\nsetTimeout(client, 500);\n```\nYou need to create your own http server and then listen for when it gets upgraded.\n. +1\n. Right, I did a little hunting and found this https://github.com/joyent/node/issues/55\nIt turns out that ws is doing nothing wrong.\nthis_server is a simple node http server, and then ws calls close on it.\nhttps://github.com/websockets/ws/blob/master/lib/WebSocketServer.js#L59\n. I tried making the change. It didn't seem to work however...\nhttps://github.com/woverton/ws/commit/131c5e96dabf4318e1981564bc82058c985e4d56\n. With just http servers it works fine, I tested that once confused.\n. Interestingly:\n```\nvar WebSocketServer = require('ws').Server;\nvar wss = new WebSocketServer({port:9000});\nwss.close(function(){\n    setTimeout(function(){\n        wss = new WebSocketServer({port:9000});\n    }, 10000);\n});\n```\nStill doesnt work. Which means that ws isn't closing it at all....\n. Good thinking but that doesn't seem to help :/\n. Maybe actually. setting my own http server and closing that did work however.\n```\nvar http = require('http');\nvar server = http.createServer(function(request, response) {\n    console.log((new Date()) + ' Received request for ' + request.url);\n    response.writeHead(404);\n    response.end();\n});\nserver.listen(9000, function() {\n    console.log((new Date()) + ' Server is listening on port 8080');\n});\nvar WebSocketServer = require('ws').Server;\nvar wss = new WebSocketServer({server: server});\nsetTimeout(function(){\n    server.close(function(){\n        console.log(\"Closed...\");\n        wss = new WebSocketServer({port:9000});\n    });\n}, 1000);\n```\nThis could mean that the this. _server object is either not getting set correctly, or is accidentally being cloned? or something weird. The callback does get called back, but it appears the close method is no longer linked to the actual http server.\n. Boom ! https://github.com/woverton/ws/commit/8edf58f55daa5ff33c8f93b3321ef94c4db29e65\nWorks for me now :)\nMy test app:\n```\nvar http = require('http');\n// var server = http.createServer(function(request, response) {\n//     console.log((new Date()) + ' Received request for ' + request.url);\n//     response.writeHead(404);\n//     response.end();\n// });\n// server.listen(9000, function() {\n//     console.log((new Date()) + ' Server is listening on port 8080');\n// });\nvar WebSocketServer = require('ws').Server;\nvar wss = new WebSocketServer({port: 9000});\n// var wss = new WebSocketServer({server: server});\n// setTimeout(function(){\n//     server.close(function(){\n//         console.log(\"Closed...\");\n//         wss = new WebSocketServer({port:9000});\n//     });\n// }, 1000);\nsetTimeout(function(){\n    wss.close(function(){\n        console.log(\"Closed...\");\n        wss = new WebSocketServer({port:9000});\n    });\n}, 1000);\n```\nIf you could give it a little test and let me know, the I'll open a pull request\n. hmm, might be better to just bind() the function for this one case.\nDid you get any errors or did you just spot it and think it may cause errors in the future?\n. Did you get this sorted in the end?\n. Do you think you could try an isolate some code which causes the error and post it in this issue?\nAlso, what IOS client are you using?\n. Do you mean that every message is automatically console.log'ed into the console or that it is accessible somehow?\n. Weird.\nOut of interest, does this issue occur in other browsers? Do you always see the same message in those browsers as you do chrome?  What happens if you connect to your web socket server using https://www.npmjs.com/package/wscat ?\n. wscat works via ws. At least that confirms it is not an issue with your node app or server config.\n. Yes with the normal way you would with a url: wscat -c ws://echo.websocket.org:80\n. Do you think you could mock up some code so we can investigate it a bit further?\nThanks\n. It certainly is not expected behaviour. Are you sure all messages are reaching the ws server? Have you incorporated any custom/accidental locking?\n. Mind if I ask the use cases for this? I have been using HAProxy to proxy web sockets with no issues. HAProxy will be faster than node as a proxy.\n. Oh I get you, that's pretty cool. You will probably have to act as a ws server and then be a client to the destination. ws uses secure keys to talk (https://github.com/websockets/ws/blob/master/lib/WebSocket.js#L612) so you would have to really rip ws apart to do this I think.\n(I'm not a ws dev, just did some digging)\n. Just found this: https://github.com/websockets/ws/pull/514\nIt needs some defining before a dev will merge it though.\n. Ah okay, I'll open an issue on that project to fix their npm link.\nThanks\n. I would certainly like to look at your code. Faster is better in my books :)\n. Yes this would work fine.\nMay I recommend putting the game code in a separate file?\ne.g.\napp.js:\n```\nvar cluster = require('cluster');\nvar myGame = require(\"./Game.js\");\nif (cluster.isMaster) {\n    for (var i = 0; i < require('os').cpus().length - 1; i++) {\n        cluster.fork();\n    }\n}\nvar game = new myGame();\n```\n. Yeah you're right. I should have remade my fix after the time I spent tracking it down. Finding the fix took a little longer than it should have. Feel free to drop this and create a PR with your fix in.\n. ",
    "Temptin": "@EddieOne Yeah but that is overkill for a small edit like this. I provided example markup already, to get the ball rolling.\n. ",
    "sam-github": "PRs can be merged by pressing a button, you want busy people to hand edit a README for you, if it bugs you, PR it.\n. Please do this - not using semver causes ripple effects of manual upgrades of 0.x releases through node ecosystem.\nBy \"not using semver\" I mean that a 0.y.z release has _no guarantees_ of any kind on compatibility. The meaning of a bump of the z is not defined, the meaning of a bump of y is not defined, so its hard to depend on it.\n. ",
    "davidburhans": "Tests added. Not a big fan of the way I needed to expose that method to tests due to permissions concerns with running a server on port 80 and 443, but it works.\n. ",
    "Kosta-Github": "Ran into the same issue. Can this PR be merged, please?\n. ",
    "Deathspike": "You're keeping the reference to socket in the scope with that setTimeout. The object that was used to contain the values is not going to be garbage collected while there is something with a reference to it. After the setTimeout callback has ran, there is no reference to socket anymore and it will become eligible to garbage collection. That doesn't mean it's collected immediately, rather, it means that it may be garbage collected at some point. \nWatching the memory usage on your OS is meaningless, as it doesn't show the actual in-use memory but rather the committed memory to that particular application. The same principle applies to other applications, including C#, Java and even non-GC'ed languages like C++. Does the use go down? Probably. But you'll likely not see it any time soon. Perhaps when the OS is starving for memory, a request will be made to applications to release chunks. Start worrying about this if you ever get memory exceptions, and not before that point.\n. So here is a server.js:\n```\nvar WebSocketServer = require('ws').Server;\nvar server = new WebSocketServer({port: 8080});\nserver.on('connection', function(socket) {\n  console.log('Got a connection!');\n  socket.on('message', function() {\n    console.log('Got a message!');\n  });\n  socket.on('close', function() {\n    console.log('Got a close!');\n  });\n});\n```\nAnd a client that allocates a little buffer and sends over n connections at once:\n```\nvar buffer = new Buffer(require('smalloc').kMaxLength);\nvar numberOfConnections = 1000;\nvar WebSocket = require('ws');\nfor (var i = 0; i < numberOfConnections; i++) {\n  (function() {\n    var ws = new WebSocket('ws://localhost:8080/');\n    ws.on('open', function() {\n      ws.send(buffer, {binary: true, mask: false}, function() {\n        ws.close();\n      });\n    });\n  })();\n}\n```\nLeave it running for a while and it will push your server over the edge and crash/get tediously slow (due to swap). Up n to more connections to accelerate/create the effect (depends on system RAM). This is exactly why I want to limit the size of a single message, to avoid malicious behavior like this. There should be something to limit it, right?\n. The point is not from a perfectly controlled environment perspective where every client plays nice and the world is filled with rainbows and unicorns. The reality is that malicious users can forge a gigantic frame and send them to any ws server which then starts to allocate a ton of memory for no good reason. Eventually, that will crash your node process.\nA WebSocket frame is prefixed with a length (see https://tools.ietf.org/html/rfc6455#section-5.2). The server should be able to set a limit based on that length and start dropping connections when a frame is too large. A properly controlled client, thus the one you developed, will respect the limit and handles the responsibility of breaking up content into chunks when applicable. There is no good reason for the server to try and get a message that is larger than the maximum size you came up with.\nI'm not saying that this should be a default or that there are no use cases for frame sizes without a clear limit, but I am arguing that you should be able to limit the maximum size of a frame. This is especially required in use cases such as chat servers and game servers.\n. Edited my previous messages to be a more clear and understandable.\n. That's not the point, either. I'm just creating a bunch of connections to exhibit the problem faster, but regardless of additional security measures, the fact remains that there is no maximum message size. And the question topic \"Is there a way to limit the maximum size of a message?\" is exactly the point of this issue.\nI honestly don't want to debate the merits and cons of iptables, but please note that dropping anything over n connections will effectively rule out multiple connections from a place where there can be multiple clients for good reasons (large companies, internet cafes, schools/universities, LAN parties, etc). Rate limiters have similar pros/cons and are effectively not the point of this issue. Good security practice will almost always have both techniques implemented in some way, though. Still, not the point of this issue; I'm only looking at ws in this issue.\nAnd really, all I'm after is not having nodejs allocate a buffer of a huge size for no reason. Why? Because there is no reason for the nodejs server to allocate and read a huge buffer when I explicitly want to tell it to never ever have a need for that (wasted resources, CPU, network, RAM -- and possibly catastrophic errors, too large buffer exceptions, ram exceeded, starting to swap, etc).\n//EDIT: I was too late in seeing your edit. Glad we're on one line now :+1: \n. I'd be in complete favor for the latter option. The first two options are not exactly straight to the point and therefore will be harder to reason about and/or maintain in future. On top of that, the WebSocket protocol describes the way a message is framed and a message is always framed with the length. Upon receiving this header, we know the size of the payload and whether or not it exceeds our maximum. This is the perfect place to drop the connection when the incoming payload is violation; we don't have to waste any further resources on something that we know is in violation of our constraints.\nFrom a quick glance, I'd say that rule would have to be checked in the getData functions of the binary and text opcode handlers. That is https://github.com/websockets/ws/blob/master/lib/Receiver.js#L423 and https://github.com/websockets/ws/blob/master/lib/Receiver.js#L488. That said, I'm not too familiar with the ws internals and cannot possibly reason about the entire code base from a quick glance. But, that's what make sense to me.\nShould I take a quick stab at this later and see what I can come up with? Or is someone else preferring to do this instead, or has alternatives/better locations and/or issues with the suggested checks at the suggest location?\n. So, I have a pull request open for this issue now. I did not find a good way to figure out what the length is going to be after decompressing. I presume, since it is an extension on the protocol, the decompressed length is not transmitted at all. So, the current version I implemented only supports a check with the pre-decompression length, so the decompressed buffer can still be larger than the maximum payload. At least, you can cut down the 2GB packets back to a reasonable number that (probably) won't get (too) big.\n. Ah, the test suite is failing. The tests don't seem to work on Windows, so I can't actually run them..\n. Because you're not handling the message event sent from the client to the server. You need to handle it on the server. e.g.\nwss.on('message',function(message){\n   console.log('a message! how great');\n});\n. I tried to reproduce this. I couldn't. Could you post some test code to reproduce the issue?\n. ",
    "bigbagboom": "hi, can you tell how to use proxy server with your code? a sample please?\n. ",
    "atian25": "hi @shuky19  any example?  see also #559 \n. node adapter :  target ws server don't support wss , or want to modify res/resp to target server\n. @woverton you're right, and sometime, we need to do some dirty thing in node ws server, then proxy to target server, such as :\n- do special auth at node server on connection\n- modify the response to add some data :  target response {uid:123}  , node query db for uid, then return {uid:123, nickName:'xxx'}\n. ",
    "shuky19": "Ok, so I kind of put it here out of the blue, sorry for that...\nMainly this allows you to reuse an existing socket instead of creating one for the websocket connection.\nThe reason it helps connect a websocket server throug a proxy, is that you can open a socket, send the proxy a CONNECT message and then use that socket later on to negotiate a websocket connection.\nThe final flow will like this:\nOpen connection agains the proxy server\nNegotiate with it using HTTP CONNECT\nReceive 200 ok\nUse that socket to transfer websocket data that will pass through the proxy to the websocket server.\nNow, after doing the same fix for socket.io (localy) I understood the protocol creates multiple sockets in the habdshake period, so we may want to convert this param into a callback so we can create socket on demand.\nI hope this clears things out,\nShuky\n. ",
    "subm": "Still after adding that, no change. Is there some error on client side ?\n. ",
    "liviubunda": "@mattdipasquale \nThere is such a thing, as @woverton mentioned:\n\na super special undocumented way\n\nThe WebSocketServer server constructor accepts a parameter called verifyClient. You can figure out more on how to use this from the WebSocketServer unit tests found here: https://github.com/websockets/ws/blob/master/test/WebSocketServer.test.js\nAlso, if you want to detect in the client that the connection was closed due to authentication/authorization issues, you can use the 'unexpected-response' event. This event is specific to the ws module, other clients may handle this differently or not handle it at all. You can find more details on how to use this in the WebSocket unit tests found here:\nhttps://github.com/websockets/ws/blob/master/test/WebSocket.test.js\n. ",
    "r03ert0": "how would you detect the client's IP, for example, at verifyClient? For example, if you wanted to blacklist them?. ",
    "nolimitdev": "Why following code causes that after first connection with invalid JSON data any other connections are closed (error from chrome: \"WebSocket connection to ... failed: Connection closed before receiving a handshake response\") although JSON data are valid? Is it correct to use \"return\" keyword in onconnection callback?\njavascript\nwss.on('connection', function(ws, req){\n    // validate input\n    try {\n        var data = JSON.parse(decodeURIComponent(req.url.substring(1)));\n    }\n    catch(e) {\n        console.log('connection closed due to invalid JSON input data');\n        ws.close();\n        return;\n    };\n    // input is ok, do something...\n    console.log('Hello');\n}\nIn browser I use somethink like this:\n```javascript\n// to test connection with valid input JSON data\nnew WebSocket('ws://server:port/' + encodeURIComponent(JSON.stringify({ key: 'value' })));\n// to test connection with INVALID input JSON data\nnew WebSocket('ws://server:port/invalidjson');\n```\n. ",
    "leoetlino": "Please close the issue if this is not a bug to avoid cluttering this issue tracker.\n. ",
    "renatoc": "Credits are for Deathspike, just changed code for pass in tests. \n574\n. ",
    "jssuttles": "Can we get this? It looks pretty good.\n. ws@2.1.0\nnode@6.2.2\nmacOS Sierra. Randomly on socket close while on development. Haven't seen it yet on production.. No, to the second question. I'll get back to the first when I get time.. ",
    "kamstrup": "Stack trace from the error:\nTypeError: Invalid non-string/buffer chunk\n    at validChunk (_stream_writable.js:186:14)\n    at DeflateRaw.Writable.write (_stream_writable.js:215:12)\n    at PerMessageDeflate.compress (/Users/kamstrup/wshacks/node_modules/ws/lib/PerMessageDeflate.js:260:17)\n    at Sender.applyExtensions (/Users/kamstrup/wshacks/node_modules/ws/lib/Sender.js:270:54)\n    at /Users/kamstrup/wshacks/node_modules/ws/lib/Sender.js:116:10\n    at Sender.flush (/Users/kamstrup/wshacks/node_modules/ws/lib/Sender.js:256:3)\n    at Sender.send (/Users/kamstrup/wshacks/node_modules/ws/lib/Sender.js:126:8)\n    at WebSocket.send (/Users/kamstrup/wshacks/node_modules/ws/lib/WebSocket.js:262:18)\n    at WebSocketServer.<anonymous> (/Users/kamstrup/wshacks/index.js:25:10)\n    at WebSocketServer.emit (events.js:107:17)\n. Adding perMessageDeflate: false to the server's constructor options seems to make everything work.\n. ",
    "Eeems": "+1 on this. I'm racking my brain currently attempting to figure out a way to wait until it's free. It's causing problems with some hot-reloading I'm trying to get working.\n. @woverton the problem is that there is no exposed way to pass a callback for after the connection finally closes. WS closes it fine, but you run into timing issues due to t knowing if its closed yet or not.\n. Nodes http server has a callback at fires after the port is released. All ws needs to do is expose it. https://nodejs.org/api/http.html#http_event_close\n. Interesting. I've not had problems with it when I'm us in it with http servers manually. What version of nodejs are you using?\n. Unless there is something wrong with your changes. Reviewing them now.\nEDIT: Possibly found it: https://github.com/woverton/ws/blob/master/lib/WebSocketServer.js#L131-L135\nWe need to somehow run cb if the server is not internally created. Possibly like this?\njavascript\n// close the http server if it was internally created\ncb = cb || function(){};\ntry {\n  if (typeof this._closeServer !== 'undefined') {\n    this._closeServer(cb);\n  }else{\n    this._server.on('close',cb);\n  }\n}\n. I'll take a closer look. You could also try throwing some console logging into there to see what happens to _closeServer\nEDIT: one quick question though, have you checked to see if _server defined right before you close when you let it create it's own?\nEDIT2: Another thought I just had was instead of passing cb to the _closeServer call, we just apply it to the server events like so:\njavascript\n// close the http server if it was internally created\ncb = cb || function(){};\ntry {\n  if (typeof this._closeServer !== 'undefined') {\n    this._server.once('close',cb);\n    this._closeServer();\n  }else{\n    this._server.once('close',cb);\n  }\n}\n. Hmm, looks like you have some scope problems. I'd suggest changing it to this:\njavascript\nvar self = this;\nthis._server.once('close', function(){\n    cb.apply(this,arguments);\n    delete self._server;\n});\nif(typeof this._closeServer !== 'undefined'){\n    this._closeServer();\n}\n. Not quite re  bind would be better then once here.\nI spotted it while reading your code. \n. Your pull request is failing the code checks. You'll want to update it to keep from failing. It will hopefully get merged after that?\n. Looks like pull request #611 provides this solution.\nEDIT: Actually, looks like it attempts to solve this. From what I can see it's going to have timing problems though.\n. You are correct, didn't look closely enough it seems.\n. Explain too many clients?\nWould you have any suggestions for broadcasting to all clients other then this? I can't think of any other way to handle sending the same information to multiple different socket connections.\nIf you have a large number of connections there will be some slowdown. In that instance the developer should look into having multiple ws servers, and limit the number of clients per instance. You could also start looking into a more distributed style (ws servers connecting to each other for broadcasting) for this which would add a little lag to some clients for broadcasts, but it would overall increate performance.\n. You could probably setup some sort of lazy send that runs on the next tick instead of immediately.\nhttp://howtonode.org/understanding-process-next-tick\n. Issues #338 and #117 already answer this.\nAre you testing this all locally? If so that's probably why your IP would be 127.0.0.1.\n. You may want to open a pull request instead of attaching a patch file.\n. From what I understand you should just be able to create a https server and pass that over to ws to use.\nEDIT: looks like this issue might have more information for you: #257 \n. We could at least disable them by default and have the documentation showing how to enable them warn the users about the potential risks of enabling them.\n. Which one is the fastest then?\n. Does setting a process level exception handler keep the server from crashing?\n. ",
    "rradczewski": "Hi, looks like this bug is in still/again present on node versions <v7.0.0.\nI checked the changelog briefly but found nothing noting a change in http that could've fixed this.\nUpgrading to node >=v7.0.0 fixes the issue for me.\nDirty fix on Node v6.10.3\nI found that calling server.close() after calling close() on the websocket server fixes this issue:\n```js\nvar WebSocketServer = require('ws').Server;\nvar wss = new WebSocketServer({port:9000});\nconst server = wss._server;\nwss.close(function(){\n    server.close();\n    setTimeout(function(){\n        wss = new WebSocketServer({port:9000});\n    }, 1000);\n});\n``. Hi @lpinca, thanks for answering so quickly and thanks for your work onws`!\nThe testcase above is enough to reproduce the error (just comment out server.close() on node v6.10.3). Apparently it helps to call server.close() twice, once in your implementation and once outside.\nI'm pretty sure this is not related to ws, but I figured I add it to this issue as I stumbled upon it through using ws in my tests.\nI will try to come up with a testcase without ws and then open an issue with node itself.\nCheers!. Soo, looks like that's wanted behavior: The server does not close if it wasn't open in the first place.\nSo yeah, everything is behaving like it should, it's just me using it wrong \ud83d\ude05. \n```js\nconst http = require('http');\nconst launchServer = () => {\n  const server = http.createServer();\n  server.listen(8000, () => {\n    console.log('Listening');\n  });\n  server.close((e) => {\n    console.log('Closed', e); // e is an error here\n    setTimeout(launchServer, 1000);\n  });\n}\nlaunchServer();\n```\nThanks for your time @lpinca !. ",
    "Xan-Kun": "Is there any way to close the server and give a code and reason to the browser? I could not get it to work, the code is always 1006 and the reason always empty.. ",
    "varmalho": "Thanks @alandoherty, that makes sense. I will apply your suggested fix in my local fork :) and push the change to this pull request as well.\n. ",
    "andrewdep": "I looked at #524 and even pulled it and tested it. Unfortunately it does not work with plain old arrays, only with ArrayBuffers. Thus it still broke with our codebase (and with the same error).\n. That makes sense. I'll recommend to my team that we convert our code base to using typed arrays.\n. ",
    "mathiask88": "Sorry, wrong repo. My bad!\n. ",
    "psinghsp": "Change is 2 lines - so it should not have conflicts. If there are any other changes, I can resolve conflicts.\nI can add tests as well.\n. Actually, even just the stream does not have an example. Does the support exist? I see Websocket.prototype.stream() - but I do not see an example for it.\n. The package mentioned in the last comment does not support Websocket streaming and sending discrete messages separately at the same time. The websocket protocol allows implementations to do both.. ",
    "aklaswad": "look this is dupe of #551\n. added some simple test, and fixed a bug.\n. Grr, looks the test doesn't work on travis-ci, though it's fine for my osx.\nAnd each versions of nodejs are throwing different exception...\n. ",
    "devinivy": "@jondubois :+1: nicely said\u2013 thanks.\n. ",
    "jtblin": "Same problem. This is a major issue for us as we cannot handle reconnection properly, see https://tools.ietf.org/html/rfc6455#section-7.4.1 for exit codes.\nIt looks like 0.8.0 is trying to fix the issue by returning 1006 in case of error but from my testing there is no error captured when the server crashes so it doesn't actually fix the problem.\nThe cleanupWebsocketResources is called from the close listener on https://github.com/websockets/ws/blob/master/lib/WebSocket.js#L778 but doesn't seem to have any relevant information.\n. Works like a charm! \n. Any ETA to get this merged in please?\n. ",
    "piwi82": "I used a simple wrapper to get the client to reconnect automatically :\nhttps://github.com/websockets/ws/wiki/Websocket-client-implementation-for-auto-reconnect\n. ",
    "bguiz": "@3rd-Eden +1\n. ",
    "TuckerWhitehouse": ":+1:\n. ",
    "sanemat": ":+1: \n. ",
    "ide": "@3rd-Eden do you feel that io.js 3.x support is ready to publish? People would like to get it from npm soon (#555, #549).\n. @3rd-Eden does the compiler issue affect all versions of Node/iojs or just io.js 3.x? I noticed the Travis tests failed with io.js 3.0 but passed with 1.x and 2.x.\nIf the problem is only with 3.x, would you be open to publishing 0.7.3 because it is still compatible with all the node/iojs versions that work with 0.7.2?\n. The native modules build on io.js 3.x but now there is a core dump at runtime...\n#send\n  \u2713 very long binary data can be sent and received (with echoing server)\n  \u2713 can send and receive text data\n  \u2713 send and receive binary data as an array\n  \u2713 binary data can be sent and received as buffer\n  \u2713 ArrayBuffer is auto-detected without binary flag\n  \u2713 Buffer is auto-detected without binary flag\n  \u2713 before connect should fail\n  \u2713 before connect should pass error through callback, if present\n  \u2713 without data should be successful\n  \u2713 calls optional callback when flushed\n  \u2713 with unencoded message is successfully transmitted to the server\n  \u2713 with encoded message is successfully transmitted to the server\n  \u2713 with unencoded binary message is successfully transmitted to the server\n  \u2713 with encoded binary message is successfully transmitted to the server\n  \u2713 with binary stream will send fragmented data\n  \u2713 with text stream will send fragmented data\nmake[1]: *** [run-tests] Segmentation fault (core dumped)\nmake[1]: Leaving directory `/home/travis/build/websockets/ws'\nmake: *** [test] Error 2\n. It doesn't :(\nThis was the bare minimum that I could use to compile utf-8-validator and bufferutils.\n. Very interesting. Thanks for the pointer about -O2. Maybe bufferutil/ws should just use that.\n. Tried running ws with bufferutil and utf-8-validate built with -O2 but no luck.\n. options.origin is supported: https://github.com/websockets/ws/blob/master/lib/WebSocket.js#L702. You need to explicitly specify it because Node has no concept of the current origin.\n. ",
    "bitliner": "No\n. It did not happen again. I will run more test in the next future, going to investigate more and provide more details if I will be able to repicate it\n. Btw, it looks like if a client disconnect, it is not automatically removed from the list of clients.\nI have to run a check on broadcast.\nIs it the expected behavior?\nMy main question is: why a client is closed? it is because it disconnected for any reason but it is still in the list of clients?\nOr is there any other reason why a client is in the list of clients but its state is not open?\nWill some client loose messages if I ignore the error?\n. Well, I am trying to figure out where the error happens.\nI am using version v0.7.2, that still removes the client on close event. So this version should be fine.\nMy code runs a ws.close() instruction when the client is not authorized anymore (according to my authentication system).\nSo even when the client is not authorized, then the client should be removed from the list.\nBut apparently there is still something that puts the state of client as not ready, but the client is not removed from the list clients.\nDo you have any recommendation on which could be the cause?\nIs there any other not handled event that could cause this issue (aka something that closes the client, but not through the method 'close')?\n. ",
    "psorowka": "I also observe this type of error, when using iojs v3. \nThe error occurs here: https://github.com/websockets/ws/blob/master/lib/WebSocket.js#L425-L429 \nFrom a perspective of ws this happens because the emitted error is a string and not an object of type Error. \nA workaround seems inserting:\n```\nif(typeof event == 'string') {\nevent = new Error(event);\n}\n```\nin the onError function. However, I also haven't figured out yet why the error happens in the first place.\n. @3rd-Eden I see the same trace as @binarykitchen is showing.\nI cannot strictly reproduce the error. For me it happens in test cases of the mosca mqtt broker. In about 30% of the cases, the tests run without error, the rest raises either the above error or the similar variant: \nUncaught TypeError: Cannot assign to read only property 'target' of continuation frame cannot follow current opcode\n      at WebSocket.onError (/app/node_modules/websocket-stream/node_modules/ws/lib/WebSocket.js:422:18)\n      at emitTwo (events.js:87:13)\n      at WebSocket.emit (events.js:172:7)\n      at Receiver.onerror (/app/node_modules/websocket-stream/node_modules/ws/lib/WebSocket.js:832:10)\n      at Receiver.error (/app/node_modules/websocket-stream/node_modules/ws/lib/Receiver.js:317:8)\n      at Receiver.processPacket (/app/node_modules/websocket-stream/node_modules/ws/lib/Receiver.js:208:12)\n      at Receiver.add (/app/node_modules/websocket-stream/node_modules/ws/lib/Receiver.js:91:24)\n      at Socket.firstHandler (/app/node_modules/websocket-stream/node_modules/ws/lib/WebSocket.js:774:22)\n      at emitOne (events.js:77:13)\n      at Socket.emit (events.js:169:7)\n      at readableAddChunk (_stream_readable.js:146:16)\n      at Socket.Readable.push (_stream_readable.js:110:10)\n      at TCP.onread (net.js:521:20)\nIn both cases the argument to onError is definitely a string, which causes the error message in ws.\nI have the impression this occurs in a race condition when a connection is closed while one side is still trying to send data.\nI have no problems with all node-versions, neither on iojs:v1 nor iojs:v2.\nI think what we need is a minimal sample which reproduces the error. I will give that a try.\n. @3rd-Eden actually here:\nself._receiver.onerror = function onerror(reason, errorCode) {\n    // close the connection when the receiver reports a HyBi error code\n    self.close(typeof errorCode !== 'undefined' ? errorCode : 1002, '');\n    self.emit('error', reason, errorCode);\n  };\n(from:  https://github.com/websockets/ws/blob/master/lib/WebSocket.js#L848-L852)\nis the point, where ws itself emits a string rather than an Error Object.\nHowever I could not figure out why this only happens in iojs3..\n. We just discovered the errors in mosca are gone in iojs 3.2.0. \nHowever, I think the ws error handling would still needs a fix, as described in my last post, doesn't it?\n. @binarykitchen for me, the zlib (and similar) errors are gone in 3.2.0, can you confirm this for your case?\n. I have filed a PR for it: https://github.com/websockets/ws/pull/569\n. here you go :)\n. hehe do you still see that? I have already pushed an updated version without it :)\n. you are welcome. thanks for quality enforcement \n. @binarykitchen valid point. although I think that this function is tied closely to the implementation of the Receiver class (which obviously expects a string rather than an error object in its error interface), this is a bit of convenience for future extensions :)\n. ",
    "rupamkhaitan": "I see similar but different error code today.. with node 4.2.3 and ws library 0.8.1\nTypeError: Cannot assign to read only property 'domainEmitter' of continuation frame cannot follow current opcode\n    at WebSocket.emit (events.js:136:24)\n    at Receiver.onerror (/opt/cnmaestro-server/deploy/node_modules/ws/lib/WebSocket.js:851:10)\n    at Receiver.error (/opt/cnmaestro-server/deploy/node_modules/ws/lib/Receiver.js:321:8)\n    at Receiver.processPacket (/opt/cnmaestro-server/deploy/node_modules/ws/lib/Receiver.js:212:12)\n    at Receiver.add (/opt/cnmaestro-server/deploy/node_modules/ws/lib/Receiver.js:95:24)\n    at Socket.realHandler (/opt/cnmaestro-server/deploy/node_modules/ws/lib/WebSocket.js:800:20)\n    at emitOne (events.js:77:13)\n    at Socket.emit (events.js:169:7)\n    at readableAddChunk (_stream_readable.js:146:16)\n    at Socket.Readable.push (_stream_readable.js:110:10)\n    at TCP.onread (net.js:523:20)\n. Nodejs 4.2.4 catches this error properly in domain now and doesnt kill our process.\n. when is the plan to merge this to main branch ?\n. I see this error with Nodejs 4.2.3 and ws library 0.8.1, now one of my process which is using ws library and clients are connected, suddenly we see this error\nTypeError: Cannot assign to read only property 'domainEmitter' of continuation frame cannot follow current opcode\n    at WebSocket.emit (events.js:136:24)\n    at Receiver.onerror (/opt/cnmaestro-server/deploy/node_modules/ws/lib/WebSocket.js:851:10)\n    at Receiver.error (/opt/cnmaestro-server/deploy/node_modules/ws/lib/Receiver.js:321:8)\n    at Receiver.processPacket (/opt/cnmaestro-server/deploy/node_modules/ws/lib/Receiver.js:212:12)\n    at Receiver.add (/opt/cnmaestro-server/deploy/node_modules/ws/lib/Receiver.js:95:24)\n    at Socket.realHandler (/opt/cnmaestro-server/deploy/node_modules/ws/lib/WebSocket.js:800:20)\n    at emitOne (events.js:77:13)\n    at Socket.emit (events.js:169:7)\n    at readableAddChunk (_stream_readable.js:146:16)\n    at Socket.Readable.push (_stream_readable.js:110:10)\n    at TCP.onread (net.js:523:20)\nAnd the process gets killed, even though our process is wrapped inside domain.run()\n. With nodejs 4.2.4 release , this error are now easily caught by domain and doesnt kill our process.\nThanks to Nodejs 4.2.4 release\n. Is this patch for memory leak on the server side?\nWe use ws library to open socket connection on our server side, will this patch have impact on memory leak on server side?\n. Will this create any problem in terms of socket close or any packet loss for long running connection in AWS hosted machine with ELB?\n. Dint understand this feature.. was the close event not emitted all this while?. ",
    "leeyeh": "Also: https://github.com/websockets/ws/blob/9dc7e6b4651711d47bd87bbeddb6446e5aa429e1/lib/WebSocket.js#L724-L733\n. ",
    "craigbroadbear": "No idea.  I stopped using autobahn.. ",
    "Nibbler999": "This is probably https://github.com/websockets/bufferutil/issues/1\n. Deflate is the name of the algorithm and it's enabled by default. You can't use gzip.\n. It was split off into its own module, see #256 \nhttps://github.com/websockets/wscat\n. No, cluster-store needs to update its ws dependency to 0.8.0\n. If you are concerned about memory you should disable compression (perMessageDeflate: false option). That reduces memory usage on your example by 90%. You can also use the send callback to avoid overwhelming slow clients.\n. engine.io-client doesn't support ws 1.1.0 yet.\n. Before:\n```\n  Receiver masked text message\n  219500.07 ops/sec, 16846 times executed, benchmark took 5.021 sec.\nReceiver binary data (125 bytes)\n  240890.52 ops/sec, 18462 times executed, benchmark took 5.046 sec.\nReceiver binary data (65535 bytes)\n  34372.50 ops/sec, 2853 times executed, benchmark took 5.118 sec.\nReceiver binary data (200 kB)\n  12879.60 ops/sec, 1017 times executed, benchmark took 5.107 sec.\n```\nAfter:\n```\n  Receiver masked text message\n  228183.72 ops/sec, 17518 times executed, benchmark took 5.04 sec.\nReceiver binary data (125 bytes)\n  262059.70 ops/sec, 19966 times executed, benchmark took 5.087 sec.\nReceiver binary data (65535 bytes)\n  46598.28 ops/sec, 3645 times executed, benchmark took 5.056 sec.\nReceiver binary data (200 kB)\n  17356.50 ops/sec, 1354 times executed, benchmark took 5.076 sec.\n```\n. Does that matter? I don't think the websockets spec says that order needs to be preserved between ping and data frames. I'm sure not all implementations do so.\n. I've submitted some PRs to bl to improve performance.\n. We could integrate the parts we need into the receiver. https://github.com/Nibbler999/ws/commit/6d99f9e\n. The same code is used to handle the upgrade response, so it's worth changing regardless.\n. What does this mean? I don't see any new options.\n. No.\n. Now I do, thanks :)\n. Benchmarks results are better than I expected\nping message x 340,331 ops/sec \u00b11.52% (82 runs sampled)\nping with no data x 484,084 ops/sec \u00b11.75% (83 runs sampled)\nclose message x 420,477 ops/sec \u00b15.79% (74 runs sampled)\nmasked text message x 258,534 ops/sec \u00b11.24% (89 runs sampled)\nbinary data (125 bytes) x 292,561 ops/sec \u00b11.29% (90 runs sampled)\nbinary data (65535 bytes) x 135,557 ops/sec \u00b10.93% (87 runs sampled)\nbinary data (200 kB) x 62,863 ops/sec \u00b11.13% (84 runs sampled)\nping message x 910,546 ops/sec \u00b11.11% (83 runs sampled)\nping with no data x 4,514,044 ops/sec \u00b11.00% (89 runs sampled)\nclose message x 3,476,559 ops/sec \u00b11.70% (88 runs sampled)\nmasked text message x 644,002 ops/sec \u00b10.99% (88 runs sampled)\nbinary data (125 bytes) x 786,783 ops/sec \u00b11.66% (86 runs sampled)\nbinary data (65535 bytes) x 203,325 ops/sec \u00b11.41% (87 runs sampled)\nbinary data (200 kB) x 81,099 ops/sec \u00b10.91% (89 runs sampled)\n. Tested bench/speed.js with perMessageDeflate enabled - no significant difference with this change.\n. I like it :+1: \n. You should also update the sender benchmark with the new signature.. There are some typos, but looks good otherwise:\ncheckServerIdentify should be checkServerIdentity\nunconditinally should be unconditionally\n. Looks like a zone.js issue - angular/zone.js/issues/508. @lpinca This breaks engine.io - if you try to connect to a server which is down you get an infinite loop because engine.io calls close when you emit the error in close.. You should be able to get it from ws.upgradeReq.headers['x-forwarded-for']. Thor disables masking, see observing/thor/issues/8. Added\n. Why? I'm pretty sure 100 bytes is correct here.\n. I think it happens if the receiver gets data after being reset(). The only time I saw this was in the 'will not crash when it receives an unhandled opcode' test.\n. It's there because of a regression in node I encountered when working on this - nodejs/node#9006\n. That situation cannot arise now as we do everything in the same tick.\n. Removed.\n. We have to enqueue to preserve message ordering. I'll think about length.\n. Yes, we need to be able to accept a number here.\n. The test relies on compression but the payload is below the default threshold size.\n. ",
    "nguyenvanhau": "Also, could you please add some options to use proxy directly. It's so helpful for many server.\nThanks\n. ",
    "felicienfrancois": "@atian25 @woverton You should have a look at http-mitm-proxy.\nThis is a nodejs MITM proxy (i.e. which allow to read and change request and response). It supports HTTPS and WebSocket out of the box\n. ",
    "sincontri": "Sorry it was a bug inside the client verify function, blocking a memcache client we use to verify clients upon connections.\nSorry for posting before a deeper debug. Thanks for the great work.\n. ",
    "guymguym": "see suggested code in #565 \n. I added a benchmark in bench/iovecs.js that runs a comparison for such protocols that require multiple buffers per message. below are the results on my mac-air.\nnotes: \n- for compression I reverted to Buffer.concat() since there is not much gain when inherently so slow\n- for small messages (<32K) the code decided to always merge which is also copyfull\n- for masking that does not require merge, using iovecs provides notable benefit.\n```\nSending messages with 1 buffers of 8 kB (options {\"binary\":true,\"compress\":false,\"mask\":false})\nwithout iovecs: 5s  13.38 MB/s\nwith    iovecs: 5s  15.03 MB/s\nSending messages with 8 buffers of 1 kB (options {\"binary\":true,\"compress\":false,\"mask\":false})\nwithout iovecs: 5s  14.24 MB/s\nwith    iovecs: 5s  14.69 MB/s\nSending messages with 1 buffers of 128 kB (options {\"binary\":true,\"compress\":false,\"mask\":false})\nwithout iovecs: 5s  92.57 MB/s\nwith    iovecs: 5s  117.15 MB/s\nSending messages with 8 buffers of 16 kB (options {\"binary\":true,\"compress\":false,\"mask\":false})\nwithout iovecs: 5s  89.74 MB/s\nwith    iovecs: 5s  109.43 MB/s\nSending messages with 1 buffers of 1 MB (options {\"binary\":true,\"compress\":false,\"mask\":false})\nwithout iovecs: 5.1s    201.12 MB/s\nwith    iovecs: 5s  241.12 MB/s\nSending messages with 8 buffers of 128 kB (options {\"binary\":true,\"compress\":false,\"mask\":false})\nwithout iovecs: 5s  202.38 MB/s\nwith    iovecs: 5s  253.14 MB/s\nSending messages with 1 buffers of 128 kB (options {\"binary\":true,\"compress\":false,\"mask\":true})\nwithout iovecs: 5s  78.33 MB/s\nwith    iovecs: 5s  106.79 MB/s\nSending messages with 1 buffers of 128 kB (options {\"binary\":true,\"compress\":true,\"mask\":true})\nwithout iovecs: 5s  13.83 MB/s\nwith    iovecs: 5s  13.68 MB/s\n```\n. np about tests.\nactually I see now that I could have implemented iovecs in upper layer in lib/WebSocket.js using options.fin=false and finally true similar to how it's done in sendStream(). the benefits would be that it would be handled once for both Sender.js and Sender.hixie.js, and also that it will support all types of buffers/strings mixed together. what do you think @3rd-Eden ?\n. added tests, and moved iovecs handling up from Sender to WebSocket (much shorter).\nsee below the updated benchmark results. \nthe benefit is very noticeable with large buffers.\n```\n$ node bench/iovecs.js \nSending messages with 1 buffers of 8 kB (options {\"compress\":false,\"mask\":false})\nwithout iovecs: 9s  14.2 MB/ss\nwith    iovecs: 9s  13.59 MB/s\nSending messages with 8 buffers of 1 kB (options {\"compress\":false,\"mask\":false})\nwithout iovecs: 9s  14.89 MB/s\nwith    iovecs: 9s  13.21 MB/s\nSending messages with 1 buffers of 128 kB (options {\"compress\":false,\"mask\":false})\nwithout iovecs: 9s  95.99 MB/s\nwith    iovecs: 9s  135.52 MB/s\nSending messages with 8 buffers of 16 kB (options {\"compress\":false,\"mask\":false})\nwithout iovecs: 9s  97.09 MB/s\nwith    iovecs: 9s  100.48 MB/s\nSending messages with 1 buffers of 1 MB (options {\"compress\":false,\"mask\":false})\nwithout iovecs: 9.1s    205.29 MB/s\nwith    iovecs: 9s  316.14 MB/s\nSending messages with 8 buffers of 128 kB (options {\"compress\":false,\"mask\":false})\nwithout iovecs: 9s  212.24 MB/s\nwith    iovecs: 9s  292.58 MB/s\nSending messages with 1 buffers of 128 kB (options {\"compress\":false,\"mask\":true})\nwithout iovecs: 9s  77.77 MB/s\nwith    iovecs: 9s  96.98 MB/s\nSending messages with 1 buffers of 128 kB (options {\"compress\":true,\"mask\":true})\nwithout iovecs: 9.1s    13.57 MB/s\nwith    iovecs: 9s  13.71 MB/s\ndone.\n``\n. @3rd-Eden it would be great to get your review and fix any issues to get this into a release. thanks\n. @3rd-Eden Hi, any idea when is the next planned release and if this PR can be included? Thanks!\n. would it make more sense if this functionality will be added in aws.sendv(iovec_array)instead of overloading the (already overloaded)ws.send(string/buffer/typed_array)function?\n. ok, changed tosendv()`\n. feedback anyone?\n. by the number of open PR's on this project, I probably shouldn't expect a merge too soon :(\n@3rd-Eden feedback from the owners would be helpful.\nthanks!\n. bump :8ball: \n. @3rd-Eden that's a small change for code, but one giant leap in buffers sendv performance...\nwould you consider for next release? any comments?\n. Hi @lpinca, Thanks for reviewing.\nThe thing is that calling ws.send() in a loop will send multiple ws framed messages and will require additional framing to identify in the application level. \nIn ws.sendv() I actually did a similar thing but in a single ws frame by calling this._sender.send() multiple times with fin=false option until the last buffer which is called with fin=true.\n. @lpinca The reason for sendv is that in many cases when you construct large ws messages you end up doing Buffer.concat(multiple buffers) which is copyful and wasteful. sendv is meant to avoid this concat which is only needed since ws requires a single buffer, and not the tcp socket.\n. @lpinca Thanks, sounds like a good option. Is it documented?\n. @lpinca Small suggestion - how about making the API accept the fin option without a buffer so that it would be simpler to write like this:\n```\n// append message buffers without finalizing\nbufs.forEach(buf => ws.send(buf, { binary: true, fin: false }));\n// finalize the message\nws.send(null, { binary: true, fin: true })\n``\n. I agree completely. Thanks.. @lpinca Hey. I am usingfin` and it works great for sender side.\nHowever the receiver still concats fragments before emitting the message.\nSee - https://github.com/websockets/ws/blob/master/lib/Receiver.js#L355-L359\nIn my tests I changed the receiver code locally to emit the fragments array directly instead of concatenation which is copyful, and this makes a very big performance improvement - in my case throughput increased by 50%.\nThe reason is that for binary protocol that is sending fragments it also uses the same fragments when parsing the protocol on the receiver side, and by eliminating the memory copy we get more CPU cycles doing send/receive.\nWould you consider this as a new option?\nOne way is to add a new option like binaryType called receiveType='fragments' or 'messages'\nWhat do you think?. OK, I think it will be pretty easy to keep zero effect when not used.\nShould I will suggest a PR and you can review?. LGTM. @lpinca Hi, would love to get your review.\nSee the Note I wrote above - let me know if you think this is a breaking change or not, and if you think it's a good direction.\nThanks. @lpinca Fixed all comments. Thanks for the review!. Using node v6.10.0\nBefore:\n```\n$ git checkout master\nSwitched to branch 'master'\nYour branch is up-to-date with 'origin/master'.\n$ node bench/parser.benchmark.js \nping message x 1,516,912 ops/sec \u00b10.66% (90 runs sampled)\nping with no data x 14,433,226 ops/sec \u00b11.00% (88 runs sampled)\nclose message x 12,816,502 ops/sec \u00b11.34% (87 runs sampled)\nmasked text message (20 bytes) x 1,010,852 ops/sec \u00b11.13% (88 runs sampled)\nbinary data (125 bytes) x 1,284,809 ops/sec \u00b11.29% (90 runs sampled)\nbinary data (65535 bytes) x 186,970 ops/sec \u00b11.17% (87 runs sampled)\nbinary data (200 KiB) x 69,283 ops/sec \u00b11.10% (86 runs sampled)\nbinary data (1 MiB) x 12,406 ops/sec \u00b10.90% (89 runs sampled)\n$ node bench/parser.benchmark.js \nping message x 1,500,888 ops/sec \u00b10.68% (89 runs sampled)\nping with no data x 13,664,804 ops/sec \u00b11.78% (83 runs sampled)\nclose message x 12,325,815 ops/sec \u00b11.19% (85 runs sampled)\nmasked text message (20 bytes) x 945,751 ops/sec \u00b10.98% (91 runs sampled)\nbinary data (125 bytes) x 1,219,381 ops/sec \u00b11.06% (87 runs sampled)\nbinary data (65535 bytes) x 184,835 ops/sec \u00b11.39% (87 runs sampled)\nbinary data (200 KiB) x 69,053 ops/sec \u00b11.00% (86 runs sampled)\nbinary data (1 MiB) x 12,375 ops/sec \u00b10.96% (87 runs sampled)\n```\nAfter:\n```\n$ git checkout guymguym-receiver-fragments \nSwitched to branch 'guymguym-receiver-fragments'\nYour branch is up-to-date with 'origin/guymguym-receiver-fragments'.\n$ node bench/parser.benchmark.js \nping message x 1,537,659 ops/sec \u00b10.98% (89 runs sampled)\nping with no data x 14,070,824 ops/sec \u00b10.85% (87 runs sampled)\nclose message x 12,873,083 ops/sec \u00b11.19% (85 runs sampled)\nmasked text message (20 bytes) x 944,098 ops/sec \u00b10.89% (87 runs sampled)\nbinary data (125 bytes) x 1,404,478 ops/sec \u00b11.30% (85 runs sampled)\nbinary data (65535 bytes) x 188,281 ops/sec \u00b11.31% (84 runs sampled)\nbinary data (200 KiB) x 70,403 ops/sec \u00b11.05% (86 runs sampled)\nbinary data (1 MiB) x 12,387 ops/sec \u00b10.91% (87 runs sampled)\n$ node bench/parser.benchmark.js \nping message x 1,528,134 ops/sec \u00b10.96% (90 runs sampled)\nping with no data x 14,189,599 ops/sec \u00b10.87% (89 runs sampled)\nclose message x 12,886,198 ops/sec \u00b11.64% (88 runs sampled)\nmasked text message (20 bytes) x 1,048,379 ops/sec \u00b11.38% (89 runs sampled)\nbinary data (125 bytes) x 1,412,051 ops/sec \u00b10.91% (89 runs sampled)\nbinary data (65535 bytes) x 189,763 ops/sec \u00b11.09% (89 runs sampled)\nbinary data (200 KiB) x 70,405 ops/sec \u00b11.15% (86 runs sampled)\nbinary data (1 MiB) x 12,353 ops/sec \u00b10.86% (86 runs sampled)\n``. Travis failed for node v4 but I think it's transient.\nI don't have the option to re-trigger without commit, do you?. np. is it also preferable overutil.isArray()` ?\n. ignore the question, found the answer -\nhttp://stackoverflow.com/questions/22798826/in-node-js-why-is-there-a-util-isarray-and-an-array-isarray\n. Hi @ronkorving Thanks for the comment.\nyou mean in the case that typeof(options.binary)==='undefined'? \nsure, that can be done of course.\nbut there's a weird thing about this case that on the receiver side the message always appears with flags.binary===true even when all iovecs are strings and options.binary===false so I'm not sure how much it makes sense to support iovecs send with options.binary=false at all? or is that somehow expected that the receiver might be flagged that the message is binary although was sent as non binary?\n. in my opinion it's thinkable indeed.\nI'm just not sure if the fact that this is always received as binary makes it a confusing usage...\n. I updated the test to run cases with strings and binary=false.\nnote these things:\n- when you send mix of strings and buffers you must not use binary=true from the same reason that sending a single buffer with binary=false doesn't work.\n- when you send an array of all strings you can use either binary=false or true, and the default is assumed to be true for the entire message.\ndoes that make sense?\n. :+1: Great! and thanks! I hope it makes it smoother for merging...\n. I agree. any suggestions?\nI could only come up with a super explicit sentence -\n \"Sending a message composed of multiple buffers\".\n. I searched github and didn't find any code that quotes this, only appears in repos that copied ws.. In chrome it ignores unsupported values but with a console.warn (see below)\nDo you think we should do console.warn too?\n\n. done. np. \nFor my education - would you mind explaining why this is a case for deoptimization?. Yeah, it makes sense to me too, this is why I tried to suggest it this way.\nIf you want to play extra safe for the other folks then best release as a new major version.. done. done. Thanks. That's good to know.. done. ",
    "polomsky": ":+1: \n. ",
    "BrianGenisio": "Interesting.  Thanks for this update.\nI don't have Python installed on my machine, although installing 0.7.0 does not fail.  0.7.2 fails telling me that I need Python.\nAny idea why one would work, and the other would not?\n. ",
    "stoffeastrom": "Just upgraded to nodejs v4.0.0 and got this error. I copy pasted this solution and it solves the problem. \n. @binarykitchen any ETA on merging this?\n. :shipit: \n. ",
    "peol": "It seems to break compatibility with node.js 4.0, also verified that it seems to fix the compatibility issue.\n. ",
    "ekristen": "+1\n. ",
    "tabone": ":+1:  my pleasure\n. Correct me if I'm wrong but with the changes introduced in PR https://github.com/websockets/ws/pull/572  isn't the new keyword optional?\n. Makes sense :+1: . Thanks for your time. I'll close this PR then. \n. Hi @picarsite ,\nThe HTTP Request the user used to establish a WebSocket connection with your server will be accessible from the user's socket object as documented here.\n```javascript\n'use strict'\nconst { Server } = require('ws')\nconst server = new Server({\n  host: '192.168.1.64',\n  port: 8080\n})\nserver.on('connection', (socket) => {\n  console.log('user ip:', socket.upgradeReq.connection.remoteAddress)\n})\n```\nHope this helps :)\nLuca. ",
    "arjunmehta": "Ah, my bad. I am supposed to ASSIGN the onmessage function! \nBefore I was doing:\njavascript\nws.onmessage(function(event) {\n    console.log('This was not working', event.data);\n});\ninstead of:\njavascript\nws.onmessage = function(event) {\n    console.log('This works', event.data);\n};\n. ",
    "watdafox": "I absolutely haven't looked at the code, but there is probably 2 ways:\n1. Write, rewrite or export in a lib (or inline) in pure JS to act similarly (probably lots of work)\n2. Prebuild for each OS and ship it (heavy and inconvenient for updates)\n. ",
    "rom1504": "1) is already done there , that's what optional dependency usually means\n( same thing here for utf-8-validate )\n. ",
    "karissa": "+1, I'm recommending people not use optionalDependencies tag until they fix the UX. \nQ: Is the module still RFC compliant if it isn't installed  by default? also, @rom1504 just said that the utf-8 validation was done in JS with a link. Is that an acceptable replacement (and if so, why not include that in required deps?)\n. ",
    "mafintosh": "Another solution would be to create a new module that didn't have any optionalDependencies and was pure js and just have ws be a small wrapper around that that includes the native optionalDependencies.\n. @3rd-Eden that would work for our use case\n. ",
    "donaldpipowitch": "\nIt's true that these are optional dependencies... but npm's UX is really bad here. Error messages are displayed to the end user so they usually think something went wrong during installation. I keep getting asked about this.\n\nCrazy. They are optional?! I always wondered why everything works even if I see these errors.\n. > Imho, npm should be pre-building binary addons\nIsn't that planned for npm@3? \"built-in support for precompiled dependencies\"\n. ",
    "feross": "I like the idea of two packages: ws-native and ws.\nAnd I like @mafintosh's suggestion for how to accomplish this. So we publish a new major version of ws that removes the optionalDependencies but adds a way for the user to pass in implementations of bufferutil and utf-8-validate (maybe these options remain undocumented). Then, we publish ws-native that depends on ws and the optionalDependencies and pass them into ws via the options.\nThat way we're not maintaining two parallel codebases.\n. @3rd-Eden What do you think of my last suggestion? Would you accept a PR with those changes?\n. @3rd-Eden Ping! I have some free time now. Would you accept a PR that implements https://github.com/websockets/ws/issues/577#issuecomment-139452165 ?\n. Oooh, nice \u2013\u00a0I see that you just committed this change! Excellent, I will close this issue now.\n. For posterity: https://github.com/websockets/ws/commit/49b11093e9a009e5305dcde7003d3a896b2811dc\n. Fair enough. Out of curiosity, which browsers would lose support if you dropped all but the latest spec implementation?\nWould it be helpful to look up the marketshare of each browser so we know exactly what the stakes are? I'm happy to do the research.\n. \ud83d\udc4f . ",
    "dimitarkolev": "Reinstalling fixed the Segmentation fault\nnpm install --save ws\n. ",
    "fastest963": "I'm also curious about this as well.\n. ",
    "yutakahirano": "https://crbug.com/532424\n. This may be related to #585.\n. ",
    "jokeyrhyme": "With asm.js and V8 improvements lately, is it possible that the JavaScript implementation is close to the native implementation in performance? Beyond performance, are there other reasons to have this optional dependency?\n. ",
    "zaguios": "I figured out how to get it working, I just had to follow RFC's Base Framing Protocol for websockets and all was well. https://tools.ietf.org/html/rfc6455#section-5.2\n. ",
    "jamorton": "Any chance of this pull request being landed? This issue is causing errors with babel + webpack.\n. ",
    "Gray1989": "Instead of adding/changing all you did to make this work, would this simple one-liner not do the trick?\nChange\njavascript\nvar WebSocket = global.WebSocket || global.MozWebSocket;\nto\njavascript\nif(!WebSocket) WebSocket = global.WebSocket || MozWebSocket || global.MozWebSocket;\nTo prevent possible hoisting issues the \"var\" prefix is removed (I actually NEVER do this), however it's meant to be a global object anyways so \"var\" is actually unnecessary in this case.\n. Using the following code, and without modifying the API, I am able to have a completely functioning pipe-able duplex stream with full flow control support to prevent excess back-pressure on the stream (personally tested). I've never made a stream before, and this is my first attempt at it so likely there may be some minor changes before I actually end up using it in production, however it seems to be passing all of the tests that I put it through so-far. I'm probably going to end up implementing it as an NPM module using this one as a dependency. I can understand from the lack of documentation and the way they make the stream communication seem \"weird\" at first being a deterrent from implementation (I wasn't even sure if I would get it to work the way I got it to), however I find the solution to be more than satisfactory, and so either way I need to share. I do hope this goes a certain distance in the road to getting the pipe method working on your websockets ;)\n``` javascript\nvar WSStream = (function(){\n    var stream = require('stream');\n    var util = require('util');\n    var Duplex = stream.Duplex || require('readable-stream').Duplex;\n    var WSStream = function(ws, wsOptions, streamingOptions) { // Only the websocket (ws) is mandatory\n        // Proper duplex stream with automatic flow control (backpressure) management\n        if(!(this instanceof WSStream)) return new WSStream(ws, wsOptions, streamingOptions);\n        if(!(wsOptions instanceof Object)) wsOptions = {binary: false};\n        Duplex.call(this, streamingOptions);\n        this.waitingForData = true;\n        this.writeModBufferEmpty = true;\n        this.webSocket = ws;\n        this.webSocketOptions = wsOptions;\n        this.on(\"finish\", finishEventHandler(this));\n        ws._socket.write = writeMod(ws._socket.write, this);\n        ws._socket.on(\"drain\", drainEventHandler(this));\n        ws._socket.on(\"error\", errorRouter(this));\n        ws.on(\"close\", closeEventHandler(this));\n        ws.on(\"message\", messageHandler(this));\n        },\n    finishEventHandler = function(self) {\n        return function() {\n            if(self.webSocket !== null) {\n                self.webSocket.close();\n                self.webSocket = null;\n                };\n            self.emit(\"close\");\n            };\n        },\n    writeMod = function(nativeWriteFunction, self) {\n        return function() {\n            return self.writeModBufferEmpty = nativeWriteFunction.apply(this, arguments);\n            };\n        },\n    drainEventHandler = function(self) {\n        return function() {\n            self.writeModBufferEmpty = true;\n            self.emit(\"drain\");\n            };\n        },\n    closeEventHandler = function(self) {\n        return function() {\n            self.push(null);\n            }\n        },\n    errorRouter = function(self) {\n        return function() {\n            self.emit.apply(self, [\"error\"].concat(arguments));\n            };\n        },\n    messageHandler = function(self) {\n        return function(data) {\n            if(!self.push(data) && self.waitingForData) {\n                self.webSocket._socket.pause();\n                self.waitingForData = false;\n                }\n            };\n        };\n    util.inherits(WSStream, Duplex);\n    WSStream.prototype._read = function(size) {\n        if(!this.waitingForData) {\n            this.waitingForData = true;\n            this.webSocket._socket.resume();\n            }\n        };\n    WSStream.prototype._write = function(chunk, encoding, callback) {\n        this.webSocket.send(chunk, this.webSocketOptions, callback);\n        return this.writeModBufferEmpty;\n        };\n    return WSStream;\n    }());\n// usage: stream = new WSStream(ws, [wsOptions], [streamingOptions]);\n```\nP.S. Don't mind the semicolon \"decoration\", it's just what I'm used to\n. I will make a fork and update when I have the time\n. @yunong Please check this pull request https://github.com/websockets/ws/pull/602\nYou may also try out the module by installing it with NPM using a little-known command:\nnpm install -i --save https://github.com/Gray1989/ws/tarball/master\n. @yunong I did make an implementation without actually modifying the source-code of ws itself. With this implementation you need to pass an instance of the WebSocket as the first parameter when creating a new WSStream object, and it will return an instance of a stream object you can use. It also has full flow-control/back-pressure support. I think you may like this implementation more as it will allow you to use the ws module as a stream but also be able to update it when necessary without having to re-mod it. I'm sure you'll end up changing it to suit your needs anyways so here it is:\njavascript\nvar WSStream = (function(){\n    var util = require('util');\n    var stream = require('stream');\n    var Duplex = stream.Duplex || require('readable-stream').Duplex;\n    var WSStream = function(ws, wsOptions, streamingOptions) { // Only the websocket (ws) is mandatory\n        // Proper duplex stream with automatic flow control (backpressure) management\n        if(!(this instanceof WSStream)) return new WSStream(ws, wsOptions, streamingOptions);\n        if(!(wsOptions instanceof Object)) wsOptions = {binary: false};\n        Duplex.call(this, streamingOptions);\n        this.waitingForData = true;\n        this.writeModBufferEmpty = true;\n        this.webSocket = ws;\n        this.webSocketOptions = wsOptions;\n        this.on('finish', finishEventHandler(this));\n        ws._socket.write = writeMod(ws._socket.write, this);\n        ws._socket.on('drain', drainEventHandler(this));\n        ws._socket.on('error', errorRouter(this));\n        ws.on('close', closeEventHandler(this));\n        ws.on('message', messageHandler(this));\n        },\n    finishEventHandler = function(self) {\n        return function() {\n            if(self.webSocket !== null) {\n                self.webSocket.close();\n                self.webSocket = null;\n                };\n            self.emit('close');\n            };\n        },\n    writeMod = function(nativeWriteFunction, self) {\n        return function() {\n            return self.writeModBufferEmpty = nativeWriteFunction.apply(this, arguments);\n            };\n        },\n    drainEventHandler = function(self) {\n        return function() {\n            self.writeModBufferEmpty = true;\n            self.emit('drain');\n            };\n        },\n    closeEventHandler = function(self) {\n        return function() {\n            self.push(null);\n            }\n        },\n    errorRouter = function(self) {\n        return function() {\n            self.emit.apply(self, ['error'].concat(arguments));\n            };\n        },\n    messageHandler = function(self) {\n        return function(data) {\n            if(!self.push(data) && self.waitingForData) {\n                self.webSocket._socket.pause();\n                self.waitingForData = false;\n                }\n            };\n        };\n    util.inherits(WSStream, Duplex);\n    WSStream.prototype._read = function(size) {\n        if(!this.waitingForData) {\n            this.waitingForData = true;\n            this.webSocket._socket.resume();\n            }\n        };\n    WSStream.prototype._write = function(chunk, encoding, callback) {\n        this.webSocket.send(chunk, this.webSocketOptions, callback);\n        return this.writeModBufferEmpty;\n        };\n    return WSStream;\n    }());\nUsage: wsStream = new WSStream(ws)\n. You don't need to rewrite it like you did. These changes would work fine:\njavascript\nthis._closeServer = function(cb) { self._server?self._server.close(cb):(cb?cb():null); };\n``` javascript\nWebSocketServer.prototype.close = function(cb) {\n  // terminate all associated clients\n  var error = null;\n  try {\n    for (var i = 0, l = this.clients.length; i < l; ++i) {\n      this.clients[i].terminate();\n    }\n  }\n  catch (e) {\n    error = e;\n  }\n// remove path descriptor, if any\n  if (this.path && this._server._webSocketPaths) {\n    delete this._server._webSocketPaths[this.path];\n    if (Object.keys(this._server._webSocketPaths).length == 0) {\n      delete this._server._webSocketPaths;\n    }\n  }\n// close the http server if it was internally created\n  try {\n    if (typeof this._closeServer !== 'undefined')\n      this._closeServer(cb);\n    else if(typeof cb !== 'undefined') cb();\n  }\n  finally {\n    delete this._server;\n  }\n  if (error) throw error;\n}\n```\nThe if/else was simply shortened and the callback was passed as-is through to the method. Also not sure why you created the closure for simply calling the method and deleting the _server object. Not deleting the _server object when it was originally designed to be deleted could lead to more logic errors further on in the application or in the way people use it so it's always best to try to change as little as possible. Adding functionality is always good but changing the way things work needs to be done with extreme caution.\nOne thing I'm guessing you probably don't know is that it's completely safe to pass undefined variables as parameters to other methods. This is why the solution turned out to be so simple.\n. Actually maybe hold off on this for a bit. The stream will have its own pause and resume methods which is why the ones included aren't necessary. However those will only pause and resume the actual stream's data event and will not modify the state of the underlying socket's pause/resume methods until the internal buffer of the stream is either full or depleted. This should be a simple fix with by overwriting the pause and resume methods that are inherited to call stream.Readable.prototype.pause.call(this) and stream.Readable.prototype.resume.call(this) before calling this._socket.pause() and this._socket.resume(). That should complete the update. However I have more to do as-well and I'm pretty tired. I'll finish it off within 12 hours\n. Sorry for the late fix but everything should be working now. Probably needs some testing but if anyone has any issues pertaining to the added streaming functionality or anything caused by it please just let me know.\n. Why are you passing the connection through to a session handler and grabbing it from the handler before using it within the same call? Seems like unnecessary work. The issue is most likely with your session handling code and not with WS. Have you tried using ws.on('message' instead of session.on('message'?\n. I did a test of my own to narrow down the cause of the issue. It appears as though there is no issue with the WS module. My test uses the following code on the server-side:\n``` javascript\nvar WebSocketServer = require('ws').Server\n  , wss = new WebSocketServer({ port: 8080 });\nwss.on('connection', function connection(ws) {\n  ws.on('message', function incoming(message) {\n    this.send(message);\n    console.log(this.upgradeReq.headers['sec-websocket-key']);\n  });\n});\n```\nI then ran the following code on the client side:\njavascript\nvar ex = [];\nex.push(function(){\n    var exampleSocket = new WebSocket(\"ws://localhost:8080/\");\n    exampleSocket.onopen = function (event) {\n        console.log('Connection Open');\n        exampleSocket.send('This is a test');\n        };\n    exampleSocket.onmessage = function (event) {\n        console.log(event.data);\n        };\n    return exampleSocket;\n    }());\nex.push(function(){\n    var exampleSocket = new WebSocket(\"ws://localhost:8080/\");\n    exampleSocket.onopen = function (event) {\n        console.log('Connection Open');\n        exampleSocket.send('This is a test 2');\n        };\n    exampleSocket.onmessage = function (event) {\n        console.log('Test2: '+event.data);\n        };\n    return exampleSocket;\n    }());\nWhich yielded the following results on the client-side\nConnection Open\nThis is a test\nConnection Open\nTest2: This is a test 2\nThis test also logged different sec-websocket-key values to the console on the server-side, which means that it is performing exactly as expected.\n. ",
    "greggman": "The Chrome team has filed #594 based on the report above\n. Any schedule to push this to a release?\n. ",
    "yunong": "@Gray1989 Do you have this implementation available somewhere? This would be great for us too -- since we'd prefer to just be able to leverage WS as a node.js stream.\n. ",
    "ChandanLal": "i am also getting the same error. Please help me too.\n. ",
    "kamilbiela": "@s1riedel do You have ping/pong mechanism implemented to keep alive connection, etc? also, try to use socket through wss://\n. @s1riedel just to calrify, I'm not maintainer of this project, I have just throw some ideas that might help You. Maybe try to use older/newver version? Also check if You have latest version installed. By default \"npm install\" installs older v0.42 not 0.8 version in my case for some odd reason.\n. maybe problem is in proxy then? also maybe put ngnix in front of node, and log all connections. Also You could try to upgrade node version (or dig through changelog)? Whats Your infrastructure? What server provider You use?\n. ",
    "mkozjak": "+1 on this.\nnodejs version 5.8.0, ws 1.0.1.\nbackend is a qt5 application with QWebSocketServer using SecureMode (same happens with NonSecureMode)\nno errors are reported on the backend. 'ws' client sends an RST packet, which produces the ECONNRESET error.\n. ",
    "Geek4IT": "@s1riedel Hi, have you fixed the prematurely closed  problem? Pls have a look at this:\nupstream prematurely closed connection while reading response header from upstream\nIf you have any idea, pls tell me. Thank you.\n. ",
    "Rayman": "Can I get some feedback about this PR? It's really small in scope.\n. ",
    "rimmartin": "Hi,\nSince this was in conflict with current master branch I tried applying @Gray1989 code above but now the callback gets called twice because another callback was put in at:\nhttps://github.com/websockets/ws/blob/master/lib/WebSocketServer.js#L156\nBest way around this?  and I'd like to see it get pulled in to the master\n. Also there are bug fixes that are essential and not applied to the master yet\n. typeof message\nproduces 'object'; can't tell if it holds binary or not. @lpinca ah thanks. ",
    "aaronryden": "why not assign a GUID for each new connection and store on the ws property? you can store guid -> ws in a map. \n. ",
    "JacksonTian": "-1 from me\n. That's other PR was landed. Fixed it.\n. What's your version? And how to reproduce quickly?\n. :-1: \n. The C++ addon modules caused a lot install issues.\n. You can see more detail : https://github.com/websockets/ws/commit/49b11093e9a009e5305dcde7003d3a896b2811dc\n. LGTM\n. Would you like to do a rebase with master branch.\n. It was simple wrapper that really doesn't belong in a full ledged node.js library. If you want browser support you could just conditionally import it the WebSocket server. \nvar WS = window.WebSocket || require('ws')\n. Closed it. Any question, feel free to reopen it.\n. The change was include in 2a9e027b421332ac\n. It seems OK.\n. @andrija-hers could you rebase it with master\n. I found the bufferutil and utf-8 validation has fallback implementations in itself's package.\n. The node v6 will become to LTS version.\n. I will add some rules and refine code later.\n. Thank you very much.\n. We don't support the version less than v4 in the future.\n. What 's the version of Node?\n. Thanks for your contribution.\n. Get it.\n. Thank you.\n. Thanks for your contribution.\n. @karatheodory the coding style should be keep consistent.\n. Could you provide a test case?\n. Pull Request is welcome.\n. welcome @JoshuaWise \n. @lpinca Let's do a 1.x release. . I am OK.\n. LGTM\n. LGTM\n. LGTM\n. What's version of Node.js.. What's your Node version?. one error will break other clients\n. try catch the this.clients[i].send(msg);\n. how do you process the error?\n. Maybe deprecation should be better?\n. roll backed.\n. ",
    "131": "i came to the same bug & same solution\n. Please merge :+1: \n. ",
    "digital-discuss": "Thanks, I tried with sudo npm install ws latest --save that at least seems to have worked. \n. ",
    "darrachequesne": "Since the feature seems now stable (through https://github.com/websockets/ws/pull/595 and https://github.com/websockets/ws/pull/608), I'll close this! Sorry for the noise :angel: \n. (just to be sure :sunny:) ping @3rd-Eden @nkzawa \n. @nkzawa hi! that's what I thought too, but running the following gist seems to show a different behaviour\n- with perMessageDeflate: false, RSS tends to stabilize around 70 Mo\n- with perMessageDeflate: true (without this commit), RSS tends to stabilize around 180 Mo\n- with perMessageDeflate: true (with this commit), RSS tends to stabilize around 100 Mo\nMeanwhile, the HeapSize goes up and down (which is normal, as GC runs). \nAre you able to reproduce my results? Or is there a problem with my test?\nI mean, the extra memory is normal, as it comes as a cost for compression (as said here). But as said here (that's a lot of links :smile:), memory has to be deallocated by calling deflateEnd() (or inflateEnd()), which is what .close() does here.\nBut it may not be the root cause (and that's where I need your help).\nNote: node -v returns v0.12.7\n. You're right, the term 'leak' was probably wrongly used here, please excuse me.\nI found this https://github.com/nodejs/node-v0.x-archive/issues/4172. Could this be related and explain the difference in RSS? (as we are now explicitly calling .close())\nSource: https://github.com/nodejs/node/blob/master/src/node_zlib.cc#L97\n. Great, thanks!\n. @3rd-Eden hi! could you merge this please? It should fix the build on node v0.8, and prevent @rauchg from killing me.\n. Great, thanks!\n. Hi! It seems to be caused by the use of this._deflate.close but I don't understand why the error is not caught by the listener:\n``` javascript\nvar PerMessageDeflate = require('./lib/PerMessageDeflate');\nvar extension = new PerMessageDeflate();\nextension.accept([{}]);\nextension.compress(new Buffer([1, 2, 3]), true, function(err, compressed) {\n  console.log('compress %s', err);\n  // compress Error: zlib binding closed\n});\nextension.cleanup();\n```\nThe listener is removed there https://github.com/websockets/ws/blob/master/lib/PerMessageDeflate.js#L304, but there should not be any call to this._deflate.write or this._deflate.flush after that. Maybe some kind of race condition...\n. Hi! @DanReyLop @Niceman35 would you be able to test whether this PR https://github.com/websockets/ws/pull/632 does actually fix the issue?\n. Thanks! That should fix https://github.com/websockets/ws/issues/633 too.\n. Hi! @3rd-Eden could you please release this as version 0.8.2 before the big 1.0? :pray: (the current 0.8.1 is not really usable due to that issue).\n. Weird, there must be some kind of race condition here (with https://github.com/websockets/ws/blob/master/lib/PerMessageDeflate.js#L259), since this._inflate is checked against null value just before:\njavascript\nPerMessageDeflate.prototype.cleanup = function() {\n  if (this._inflate) {\n    if (this._inflate.writeInProgress) {\n      this._inflate.pendingClose = true;\n    } else {\n      if (this._inflate.close) this._inflate.close(); //L82\n      this._inflate = null;\n    }\n  }\n  ...\nOne quick fix would be to catch any exception here https://github.com/websockets/ws/blob/master/lib/WebSocket.js#L956\njavascript\nif (this.extensions[PerMessageDeflate.extensionName]) {\n  try {\n    this.extensions[PerMessageDeflate.extensionName].cleanup(); }\n  catch (e) {}\n}\n. You're absolutely right! I'll patch this.\n. ",
    "yuyi": "Maybe this issue is still at #804 .\n. I faced same issue here.\nIt is an very important issue, because it can be used to attack ws server.\nThis code has issue:\n```\n'use strict';\nconst WS = require('ws');\nlet counter = 0;\n(function create() {\n  const ws = new WS('ws://127.0.0.1:8081');\n  const data = 'somedata';\nws.on('error', err => console.error(err));\n  ws.on('open', open);\nfunction open() {\n    ws.send(data);\n    process.stdout.write('.');\n      setTimeout(\n        () => {ws.close();},\n        10000 //DIFFERENT HERE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n      );\n    if (++counter < 10000) {\n  create();\n  //setTimeout(\n  //create, 10);\n}\n\n}\n})();\n```\nand This code has NO issue:\n```\n'use strict';\nconst WS = require('ws');\nlet counter = 0;\n(function create() {\n  const ws = new WS('ws://127.0.0.1:8081');\n  const data = 'somedata';\nws.on('error', err => console.error(err));\n  ws.on('open', open);\nfunction open() {\n    ws.send(data);\n    process.stdout.write('.');\n      setTimeout(\n        () => {ws.close();},\n        0  //DIFFERENT HERE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n      );\n    if (++counter < 10000) {\n  create();\n  //setTimeout(\n  //create, 10);\n}\n\n}\n})();\n```\n[8119:0x1b890b0]   217563 ms: Mark-sweep 81.9 (178.1) -> 33.5 (147.1) MB, 143.0 / 4 ms [Isolate::RequestGarbageCollection] [GC in old space requested].\n[8119:0x1b890b0] Memory allocator,   used: 150608 KB, available: 1348528 KB\n[8119:0x1b890b0] New space,          used:      3 KB, available:  16120 KB, committed:  32248 KB\n[8119:0x1b890b0] Old space,          used:  31987 KB, available:  19498 KB, committed: 107829 KB\n[8119:0x1b890b0] Code space,         used:   2017 KB, available:      0 KB, committed:   3229 KB\n[8119:0x1b890b0] Map space,          used:    300 KB, available:      3 KB, committed:   1070 KB\n[8119:0x1b890b0] Large object space, used:      0 KB, available: 1347487 KB, committed:      0 KB\n[8119:0x1b890b0] All spaces,         used:  34309 KB, available: 1383110 KB, committed: 144377 KB\n[8119:0x1b890b0] External memory reported: 104439 KB\n[8119:0x1b890b0] Total time spent in GC  : 3456.1 ms\nSun Sep 04 2016 00:42:35 GMT+0800 (CST)\n  MEM: { rss: '1007MB', heapTotal: '141MB', heapUsed: '34MB' }\n  STATS: { connections: 622, messages: 30000, clients: 622 }\nThe leaked memory is not in GC Collection... really weird...\n. ",
    "varkor": "You should be able to catch the error with wss.on(\"error\", error => console.log(\"The server encountered an error!\")); (assuming here that wss is your WebSocketServer).\n. ",
    "janpieper": "I have the same problem.\noptions.value.protocolVersion is a string, not a number!\n. ",
    "Ugarz": "Right, thanks to @thauer and @janpieper this worked for me !\nIn file located at /usr/local/lib/node_modules/wscat/node_modules/ws/lib/WebSocket.js:568:11 (i'm using a mac).\nReplace the if statement line 567 by this (just add \"around numbers):\njavascript\nif (options.value.protocolVersion !== \"8\" && options.value.protocolVersion !== \"13\") {\n    throw new Error('unsupported protocol version');\n  }\n. ",
    "oblalex": "I also confirm this.\n. ",
    "nathanboktae": "No #611 is for a close callback on WebSocketServer. This is for one on WebSocket.\nI'd love to see this PR. It's really odd that an asynchronous operation does not have a callback. There is no way to wait on the close of the socket. @coolaj86 could you fix the tests?\n. ",
    "fitraditya": "Socket.io is also use for loop to handle broadcast feature. CMIIW.\nhttps://github.com/socketio/socket.io-adapter/blob/master/index.js#L127\n. ",
    "mafrost": "Such an api would be great. What I would really like is to see:\n- the ability to broadcast to every connected client\n- the ability to broadcast to an array of clients (websocket handles)\nor maybe just supply the ability to prepare a message, and then an alternative to send called sendPrepared.\n. Loving it!\n. ",
    "ssljivic": "I know that this is an old thread, but I just wanted to give my 2 cents.\n@lpinca , I believe that what @diegoaguilar was trying to ask is that in case of a large number of clients, forEach will block the thread in Node preventing it from doing anything else.\nConsider the app with a lot of clients, all listening to the messages coming from the server and only few of them pushing changes to the server. With blocking broadcast forEach, node would be blocked to receive updates most of the time. Doing some kind of async forEach for broadcasting would hep here I guess.\nIt would be also nice to be able to define priorities for sending and receiving, since in many cases I would be interested in getting the message from the client as fast as possible and broadcasting the message to all registered clients with lower priority.\n. @lpinca I agree that single server has its capacity and can handle max N operations per second. That is not an issue. \nThe issue is that broadcasting with for loop is blocking the node until the for loop is done. In a better implementation broadcast iteration over client would be async, thus allowing other ops to be processed by Node in between. \nThe overall server capacity would still be the same, but this would allow some other ops to be executed earlier than later.. ",
    "adamkaplan": "The original topic of this issue is great. I wish I had found it in February before doing a pretty deep investigation to reach the same conclusions: the frame does not change and can be pre-comupted.\nBelow is the code that I am using to power a realtime financial market data feed with many tens of thousands of clients for yahoo finance.\nI will try to submit as a PR when I have a chance, but sharing in case anybody else wants to use it or make the PR + Tests...\n```\n  /\n   * Send the same message to a multiple websockets.\n   \n   * This method is more efficient than calling\n   \n   * websockets.map(ws => { ws.send(message) });\n   \n   * because it is optimized to avoid duplication of the work\n   * required to package a message into an RFC-6455 websockets\n   * wrapper. Basically it does the same intermediate work that                                                                                             \n   * is done in WS.websocket.send and WS.sender.send.\n   \n   * @param websockets An array of websockets\n   * @param message A string (text only) message to send\n   /\n  broadcast(websockets, message) {\n    // Since the message will be the same for all clients, the work to\n    // generate an RFC-compliant websockets frame can be perfomed just\n    // once, yielding potential exponential optimization O(NMSG) to O(N)\nlet data = Buffer.from(message); // only text messages are supported\n\nlet frames = WS.Sender.frame(data, {\n  fin: true, // sending a single fragment message\n  rsv1: false, // don\"t set rsv1 bit (no compression)\n  opcode: 1, // opcode for a text frame\n  mask: false, // set false for client-side\n  readOnly: false // the data can be modified as needed\n});\n\nreturn websockets.map( (ws) => {\n  // Bail if the websocket is not marked as opened. The socket\n  // cannot be assumed to be able to handle messages at this time.\n  if (ws.readyState !== WS.OPEN) {\n    return Promise.resolve();\n  }\n\n  return new Promise( (fulfill, reject) => {\n    ws._sender.sendFrame(frames, (error) => {\n      if (error) { // catch asynchronous socket write errors\n        this.disconnectWebsocket(error, ws);  // <--- custom error logic for your app here.\n        return reject(error);\n      }\n      fulfill();\n    });\n  });\n});\n\n}\n```\nI did benchmark (in microseconds) Promise vs straight callback and did not find that the Promise construction created any significant overhead relative to socket writing.. Non-portable Linux notes for over-optimizers with scaling problems like myself...\nSeparately, I have a proof-of-concept implementation of a \"copy-once\" broadcast. It is similar to the above code that I shared, except that it avoids copying that same byte array (the RFC-6455 frame) to the Kernel send buffers for each client.\nIf you're using broadcast(..) to send a 5KB message to 10,000 clients, you're actually copying that message from User Space (Node/LibUV) to the Kernel buffer every time... so that's actually 50 MB of data transfer. Not huge, but if we're talking about a high frequency broadcasting system, it adds up quickly.\nThe idea is to copy the data to the kernel buffer one time, and then instruct the kernel to send that kernel-data to each client. This is how Apache sends large files to clients, and how Kafka achieves high I/O. Basically you use sendfile(2) instead of write(2) to transmit to a socket. The flow is as follows:\n\nOpen a temp file\nWrite the frame binary into the file handle\nSendfile, like websockets.forEach(ws => { sendfile(ws, file, length, etc....); });\nClose file\nUnlink file\n\nOf course all of these are chained together via callback/promise and the file is never really written to disk because it's deleted too quickly. It just lives in the OS page cache for a few milliseconds.\nI ran this in production for a week and it worked fine. It is implemented as a small Add-on in C++. I was not able to do a proper benchmark while it was live, though it appeared ~20% faster. It's still on my TODO list to benchmark it. Let me know if anybody is interested in the code.... Point taken. If it is not destined to become an API feature, then at least a doc/wiki entry explaining this option. I understand the concern against giving people the loaded gun to shoot themselves. Use requires a very specific set of requirements are met.\nIn my case, the idea is certainly that the message is identical per client (i.e. the price of Apple on Nasdaq is the same for everyone). The data is not changed at all. Your point about per message deflate is very good \u2013\u00a0and I'm going to check this ASAP. I think it's set to off.. Well that was a painful thread.\nYes, per-message deflate is off. My messages, being market data, are extremely compact protobufs anyway (60-100 B). My scaling issues are of the \"firehose\" sort... compression would just slow it down. \nIf 50,000 clients connect, probably 40,000 of them want boring stuff like Apple and S&P500 updates (out of the 100k+ available securities). That's why I'm so interested in broadcast functionality.. ",
    "Endromede": "event.type = 'error';\n^\nTypeError: Cannot assign to read only property 'type' of reserved fields must be empty\nat WebSocket.onError (/app/node_modules/ws/lib/WebSocket.js:426:16)\ni have same problem when i use websocket with proxy ( not all time ).\n. ",
    "NoelAbrahams": "@Eeems, that seems like the logical thing to do, and in fact I tried setTimeout and nextTick and they do not work. \nWhat did work in the end was to fork out a child process.\n``` typescript\nimport * as cp from 'child_process';\nconst worker = cp.fork('./worker');\n// later.\nworker.send('message');\n```\nand do the socket work in worker.js.\nI'm closing this as I've found a resolution. Thanks.\n. According to uWebSockets they seem signficantly faster and more scalable (in terms of memory consumption):\nMemory scaling: \u00b5WS is 52x as lightweight\nConnection performance: \u00b5WS is 21x as performant\nShort message throughput: \u00b5WS is 23x as performant\nHuge message throughput: \u00b5WS is 2x as performant\nThey have also provided details on _why_ they are faster.\n. ",
    "katp4": "This is what i use to get the IP address\njavascript\nfunction getIPInfo(ws) {\n    return {\n        remoteIP: ws.upgradeReq.connection.remoteAddress,\n        family: ws._socket._peername.family,\n        port: ws._socket._peername.port\n    };\n};\n. ",
    "kracekumar": "socket._socket.remoteAddress and socket.upgradeReq.connection.remoteAddress yields 127.0.0.1. Web socket client is connected via mobile client.\nI am running the server behind EC2 load balancer and process is managed by supervisord.\n. ",
    "EthanRutherford": "The value of ws.upgradeReq.connection.remoteAddress is the server's public IP for me, what is going on?\n. ",
    "Niceman35": "Same Error here.\nevents.js:85\n      throw er; // Unhandled 'error' event\n            ^\nError: zlib binding closed\n    at DeflateRaw.Zlib._transform (zlib.js:487:15)\n    at DeflateRaw.Transform._read (_stream_transform.js:179:10)\n    at DeflateRaw.Transform._write (_stream_transform.js:167:12)\n    at doWrite (_stream_writable.js:301:12)\n    at clearBuffer (_stream_writable.js:411:7)\n    at onwrite (_stream_writable.js:344:7)\n    at WritableState.onwrite (_stream_writable.js:105:5)\n    at afterTransform (_stream_transform.js:99:5)\n    at TransformState.afterTransform (_stream_transform.js:74:12)\n    at Zlib.callback (zlib.js:611:5)\nServer restarts about 1-2 times daily. 100 - 200 users online \nNodeJS version v0.12.7\nWS version 0.8.1 (even with latest commit)\n. ",
    "jancurn": "I have a (potentially) related problem, but in my case it's a lower-level assertion fail - see https://github.com/websockets/ws/issues/633\n. @rauchg The server was running Node version v4.2.3\n. sorry I don't know, this error happened to me only once and haven't repeated since then\n. Great, I didn't see this possibility, many thanks for the hint!. ",
    "SEAPUNK": "@rauchg I don't think so: I ran a stress test once w/ compression that sent large amount of data back and forth on Node 5.x, and that same assertion fail (or maybe a different one, I can't quite remember) popped up every so often.\n. @rauchg The assertion that crashes the process. I'll do that test again to get the exact error, but not right now -- I'm investigating a different problem that for some reason is corrupting the data I'm trying to send over websockets.\n. Per connection, it generates a new masking key. The RFC states that it should create a new masking key per frame, not connection.\n. Alright, I'll create a PR for it.\n. @rupamkhaitan I wouldn't think so. The Mocha tests for my PR worked (and I'll write that test I need to write to get the PR merged), and I'll run the Autobahn test suite later.\n. I'll see what I can do.\n. There's a chance that nginx is routing your request to a different location. Make sure that server_name is correct, make sure that the domain for the websocket connection request is correct, and that there is no other domain overriding that config.\n. You'll need to modify ErrorCodes.js manually.\nhttps://github.com/websockets/ws/blob/master/lib/ErrorCodes.js#L11\n. ",
    "DanReyLop": "@darrachequesne Sorry, but I've tried to reproduce the error in the current 0.8.1 version (which should produce the error) and I couldn't. That's the thing about race conditions, impossible to reproduce reliably... I guess you will have to fix blindly in this PR :(\nMaybe @Niceman35 has more luck, if his server restarts 1-2 times a day because of this bug, having him run it with your patch for a few days can give us a more definite answer.\n. I don't know this codebase, but... I think this means that if there is an _inflate.writeInProgress when the connection is closed, the _deflate will never be closed. Instead of returning, this should be rewritten as:\nif (this._inflate.writeInProgress) {\n      this._inflate.pendingClose = true;\n} else {\n      if (this._inflate.close) this._inflate.close();\n     this._inflate = null;\n}\n. ",
    "Ralle": "I am seeing this problem with version 0.8.1. I have Apache running as a reverse websocket proxy. While people are connected through the proxy to a 'ws' socket I get this problem every single time I restart Apache.\nchat_1           | events.js:154\nchat_1           |       throw er; // Unhandled 'error' event\nchat_1           |       ^\nchat_1           | \nchat_1           | Error: zlib binding closed\nchat_1           |     at DeflateRaw.Zlib._transform (zlib.js:484:15)\nchat_1           |     at DeflateRaw.Transform._read (_stream_transform.js:167:10)\nchat_1           |     at DeflateRaw.Transform._write (_stream_transform.js:155:12)\nchat_1           |     at doWrite (_stream_writable.js:301:12)\nchat_1           |     at clearBuffer (_stream_writable.js:404:7)\nchat_1           |     at onwrite (_stream_writable.js:340:7)\nchat_1           |     at WritableState.onwrite (_stream_writable.js:89:5)\nchat_1           |     at afterTransform (_stream_transform.js:79:3)\nchat_1           |     at TransformState.afterTransform (_stream_transform.js:54:12)\nchat_1           |     at Zlib.callback (zlib.js:613:5)\nEDIT: I feel stupid now. Just realised the latest version is 2.1.0. Anyway, this still stands with version 0.8.1. I will try upgrading to 2.1.0 soon.. I had another look at my source code, and indeed, you are right. Sorry for creating this ticket.\nYay, now running ws@4.0.0, awesome!. ",
    "izy521": "Yeah, I saw that and was kind of hoping to avoid doing so, but thank you very much.\n. ",
    "clearbug": "@lpinca Thank you !\n. ",
    "arkon": "The website should probably updated to reflect this.. ",
    "Regul777": "I have this error almost each hour and my node.js is crushes :( Maybe, I can help with this problem?\nI use node.js 5.6.0\n. ",
    "FlorianBELLAZOUZ": "Hi ! \nSo what do you think about this PR ?\nThis need any modifications ?\n. Rebase Done !\n. Nice ! :+1:\n. Document it, and test it !\n. ",
    "LordMajestros": "@FlorianBELLAZOUZ you should rebase this\n. Any thoughts on this @3rd-Eden?\n. Rebased @3rd-Eden \n. @alexhultman which one is faster then?\n. So it is still \"the fastest RFC-6445 Websocket implementation for node.js\" at least until you finish your wrapper. Any plans to support using node-lws with express or koa?\n. I have made a PR with a fix for the reproducible crash in the posted script but it is based off of https://github.com/websockets/ws/pull/681 cc @3rd-Eden \n. Please confirm that this PR https://github.com/websockets/ws/pull/681 fixes all these issues. I've been testing these and I haven't had any errors except Crash 2 Error: not opened which I think is expected behaviour when writing to a closed socket and can be handled with a try-catch block. cc @pulviscriptor @davidmann4 @3rd-Eden \n. Great news @pulviscriptor \n. You can try my PR https://github.com/LordMajestros/ws\nThere is supposed to be some way to this from nginx/haproxy i.e. your front end but I haven't found a way for nginx proxy_buffers seems to limit the connection to the backend not the connection from the client\n. Thank you, no idea on this but this works only with hybi sockets not hixie sockets. No idea when it will be merged.\nAlso there is supposed to be a better way to do this at the edge server i.e. nginx or haproxy as it would be more ideal there. I am still searching for the settings for nginx.\n. @jcalfee It's been merged https://github.com/websockets/ws/pull/650#issuecomment-172607260\n. Added a fix for this (unhandled opcodes) to https://github.com/websockets/ws/pull/681 and a test case cc @3rd-Eden \n. @rkaw92 the socket is closed (line 849 in https://github.com/websockets/ws/blob/master/lib/WebSocket.js) after receiving a payload that exceeds the maxPayload (the assumption is a rogue client attempting a DOS) so it should be invalid after that. My guess is there is a race condition i.e. it receives another message before the cleanup is complete but after deleting the function.\nWhat happens if you add a delay to your client?\nI will see if I can create a PR with a fix.\n. Doing a PR right now to fix\n. @rkaw92 could you please test this and confirm if the issue is resolved? https://github.com/websockets/ws/pull/681\n. @rkaw92 you may need to catch the 'not opened' error in thrown in lib/Websocket.js:218:5 to prevent a crash but this crash is expected behaviour.\nMy modification of your server code:\n```\nvar ws = require('ws');\nvar websocketServer = new ws.Server({\n    port: 7717,\n    disableHixie: true,\n    clientTracking: false,\n    perMessageDeflate: false,\n    maxPayload: 100\n});\nwebsocketServer.on('connection', function(socket) {\n    setInterval(function() {\n        try{\n            socket.send('some notification');\n        }\n        catch(exception){\n        }\n    }, 1000);\nsocket.on('error', function(error) {\n    console.log(\"An error occured\",error);\n});\n\n});\n```\n. Thanks @rkaw92  cc @3rd-Eden \n. cc @3rd-Eden \n. Added fix for https://github.com/websockets/ws/issues/679 and tests cc @3rd-Eden \n. Lol! cc @3rd-Eden \n. @hassanila97 sorry about the delay, don't be angry. It will probably get accepted in the next update cycle, besides you can use the PR while waiting.\n. Glad to help!!\n. Nice, this is what I did. Just make sure reason is a string and add a test perhaps?\n. I always disable hixie clients but I've added the fix to Receiver.hixie all the same. \n. On your client side you need to use the \n{'force new connection':true}\nflag in options. Otherwise it reuses existing connections when connecting to the same server.\n. I'm so sorry, I just realised this was a ws issue not a socket.io issue my answer applies to socket.io.\nIf things are as you say then the problem may be on the server. I'm not familiar with the starscream socket library.\n. I don't think this is an issue. @alexhultman  you are a very good programmer but bashing everyone on the head with the superiority of uwebsockets is not the best way to go about things. You attacked ws and recently attacked libwebsockets too. It's not really necessary. More people are flocking to uwebsockets give it time. Great projects can die because people simply don't like the people behind them. You'll end up making enemies and that will hinder your vision for uwebsockets. That said, great work. I'm substituting uwebsockets for ws(I contributed to the code base) on one of my servers and it's working out really well so far.\n. What browser and version? Have you tried another browser? How do you know it doesn't connect?\n. Let's get the basics out of the way, your node.js server is bound to localhost on port 9007\nYou are running the client and server on the same computer?\n. 9009 or 9007?\n. It might be a CORS issue on the browser. You may have to share some code.\n. Actually I run ws on localhost all the time. The js however usually has to come from the same address it's trying to connect to. Glad you found a solution though.\n. Nice\n. The client library is not for use in the browser. Modern up to date browsers come with their own Websocket Object you can use to create connections. The client library is for use in node.js to create client connections to your server for testing or other purposes.. Are you doing this on your computer or you are connecting to a remote server?\nIf remote then make sure 120.0.0.1:8889 is the right ip:port if on your computer use localhost 127.0.0.1:8889\nwss.on('connnection', function(client){\n//do something with client here\n});. Why do you remove the error calls here? This means that if the max payload is exceeded the message is ignored. Is this safe? This could be an attempt at a buffer overflow attack.\n. Here too\n. Here too\n. True, I missed that. Good catch.\n. \ud83d\udc4d\ud83c\udffd\n. ",
    "pavan4": "Is this included in master ? This is working on windows but it fails for me on ubuntu 14.0.4\nNo matter any interval or timeout you choose - It defaults to 30 seconds on ubuntu. I am not sure why. \n. https://github.com/FlorianBELLAZOUZ/ws/tree/KeepAlive This provides an implementation for the above issue\n. @urosjarc  The implementation I mentioned above does this out of the box for you with pings but it doesnt work on ubuntu 14.0.4 and the timeout on tcp defaults to 30s always. Pings to the client result in error and are crashing the server, I am not able to rely on the pings. \n. I am planning to use https://github.com/theturtle32/WebSocket-Node This package has similar performance as ws and provides a onclose notification when the client disconnects \n. ",
    "arjenvanderende": "@3rd-Eden You're probably quite busy, since I see multiple pull requests on this repository without a response. I'd really like this feature to be merged and released. If I rebase this commit and resubmit it as a new PR, would you have time to look at it and get it merged?\n. ",
    "pdefreitas": "Seriously why this PR isn't merged?!?! +1\n. ",
    "qristin": "+1\n. ",
    "ladytellur": "@FlorianBELLAZOUZ could you please please rebase this PR?\n. Is there something wrong with this PR? What should be improved if so? @3rd-Eden @LordMajestros \n. @Eric24 you could take a look at koa-ws as an example. ",
    "sebblanc": "Great PR. I tried this on ubuntu 14.0.4, it works but as @pavan4 I can't go below ~30/40 seconds no matter the timeout or interval. Do someone has an idea why ? Probably something to configure on ubuntu but I have no idea what.\n. ",
    "john-doherty": "What happened to this? Was it ever merged?. @lpinca have you tried this?. @r-pr how has the above ping/pong code worked out for you? Have you used it in production and if so how many connections? Thanks!. @r-pr I'm going to use a slightly modified version of your concept. I'll let you know how it goes.. Are there any plans to add a keepAlive feature ? The reason I ask is almost everyone using this lib must be implementing their own workaround.. Thanks @lpinca. Is the connecting client expected to respond to the ping or would the browser take care of that?. Thats great, thanks for taking the time to explain it!. ",
    "thermogl": "This PR would be really handy, is there any update on this?. ",
    "iongion": "Can't this be good for both cases ? Both for sweeping inactive connections and for keep-alive purposes, while the main one being the keep alive ?\nThen, clientTracking - The clientTracking option provides access to collection of active WebSocket clients\nBut is it ?  The active is not really active in the sense of this PR's keep-alive functionality.\n\ud83d\udc4d  to this PR!. ",
    "bnielsen1965": "Are the plans for a ping/pong keepAlive implementation dead?\nI would like to see a ping/pong based keep alive option but I think it should  be available in both server and client WebSockets.\nI am using ws for both server and client applications where the client subscribes to an event stream from the server. After a connection and subscription are established the client waits for events from the server. If the connection fails silently then the client is unaware of the need for a reconnect. The server can clean up dead connections that are discovered via the ping/pong keep alive method but this does nothing for the client which established the connection. So the client as well needs a keep alive method.\nWhile this can be implemented at the application level it can be problematic if an application is designed to run in both a browser and node.js. Browsers are not exposing the ping() method and instead seem to implement the TCP keep alive method in the browser client. It would be nice if ws would also implement a keep alive as an option so the application can leave the connection handling up to the connection library.. ",
    "corporatepiyush": "Is PING/PONG after some default interval is implemented or need to be implemented explicitly after starting WS server ?. ",
    "kedicesur": "I guess @lpinca's suggesstion is very nice. I just would like add one thing. Depending on the number of open sockets, the workload of the server or whatnot, one may need to be able to change the pinging interval dynamically. I suppose using a pseudo recursive setTimeout pattern is better than setInterval for this purpose. A pingInterwal property attached to wss (WebSockets server) could be used to alter the pinging interval dynamically.\n```\nfunction keepAliveSockets(wss){\n  setTimeout(wsSet => { wsSet.forEach(ws => ws.isAlive ? (ws.isAlive = false, ws.ping(\"\", false))\n                                                       : ws.terminate());\n                        keepAliveSockets(wss);\n                      }, wss.pingInterval, wss.clients);\n}\nvar wss = new ws.Server(Object.assign({},opts,{server: srv, clientTracking: true}));\nwss.pingInterval = 10000;\nkeepAliveSockets(wss);\n```. ",
    "jacobbogers": "is this already implemented, the idea is from 2016, is this part of the codebase?. excuse me it seems to fail checks on node 4 but node 6 and 7 are ok, please advise\nlocally on my computer it passes all checks. yes I know the property removes all listeners on \"onclose\" set property, \nthat is a good thing, and is compliant with web frontend behavior (like onload , onerror, etc)\nbut hidden \"close\" to cleanup is just piggyback\nbetter to make separate event for cleanup also it intent is made clear,\nalternative you can not work with events but callback functions WebSocket ====> (optionally calls cleanup on callback on)===> WebSocketServer  but it is essentially the same thing . maybe call the event \"remove-from-queue\"?. ok, so you tag a listener with _listener attribute\nI see it in your  return this.listeners(method).find((listener) => listener._listener);\nand when you \"set\" you loop over all existing listener and remove the one with _listener attribute\nSo the hidden 'close' would NOT have the _listener attribute tag\nI understand the solution, you \"tag\" all \"user defined\" listener with _listener property.\nI now see distinction between addEventListener/addListener and removeEventListener/removeListener\nOk, yes , if you choose this route then good to document why you make exception in \nif (listener._listener) statement\nMy style is separate message stream for separate cleanup functionality\n. Is good too  leverage what is already there,  I suggest add 2 lines of documentation one for the \"close\" and one for the if statement. Since we talk about \"clients\" collection, I see you change it too set, my code uses \"Array.length\" because it is array now, so will soon need to change it to \"Set.size\" )))\nCan you abstract what kind of collection you use ?. Shall i make your suggested changed? then i get some kuddos for finding the bug and first fix attempt)))\n. the point is i have to hand over 2 objects instead of one, \nMy main goal is to check http.Server.listening  prop.  is it possible to expose \"listening\" prop from the httpServer , so i know its \"up\" (after for example an error or whatever). Hi,  yeah the wss implements the event  totally differently then the underlying httpserver\nfor example, if i httpServer.close().  it will fire the \"close\" event, the wss server doesnt (call to wss.close() ) do that, its strips the all the eventhandlers from the underlying http server,  \nif the behavior of wss was the same as the http server, that would be wonderfull, since i implement rest calls and websocket together. I Need to make my node restartable (hot) for whatever reason, so how things shut down is kindof important\nI am not going to use \"_server\" because its not part of the documented api, so my code can break in future, never doing such things again. Unless you expose it as  \"server\" (no underscore and put it into documentation)\nWhat i did was just  use your example of explicitly handling upgrade request, also gives me the most flexibility,  so in the end it all worked out.\n. ",
    "mhamlet": "@jaggukaka, did you solved this problem?\n. ",
    "Lawris": "Hi, how did you fixed this ?\nThank you.. ",
    "herkyl": "Seems that this was caused by my logger leaking memory, not the fault of ws\n. Thanks for getting back to me.\nI don't fully understand where the error is emitted. I'm testing it right now and onerror is not emitting anything, if that is what you meant.\nAlso how does wss.on('connection', (ws) => ws.close(1008)); work differently than the Go code?. Interesting. I found that Gorilla often uses a sleep before closing the connection https://github.com/gorilla/websocket/blob/5ade364dff1f03abefdae800ed19074bf707b08f/examples/command/main.go#L77 but it seems kind of dirty.\nMaybe I could instead wait for the close frame from the socket myself. Could you please show me the part in ws that handles this, I will try to duplicate it in Go.\n. Thanks for all the help!\nSince I misunderstood how closing works in the first place I designed an erroneous flow for handling the closing on my part. You are correct, the sleep is simply there to ensure that if the handshake doesn't finish the connection still gets closed.\nI will close the issue.. ",
    "nuclearace": "It requires that you send the request twice.\n. Needed to add an actual error handler.\n. ",
    "wangq8": "on Windows or on Linux?\n. I tested on Windows 7, with 100 connection only takes 60M (working set), should be an issue of Ubuntu?\n. I tested on SUSE Linux 11.13, with 100 connections takes only 57M (resident set), I believe it should be an issue of Ubuntu, or did you use the virtual size as the program memory size, it is not correct.\nWindows 7: working set: 60M, virtual size: 600 M\nSUSE: working set: 57M, virtual size: 700 M.\n. Ah, for percentage of CPU, like 80%-100%, it is no accurate. If CPU is virtual, then it should be less accurate. I suggest you test this in your laptop, no in VM to get CPU usage. or in a real environment.\n. Thank you very much, now it is working.\n. ",
    "egoroof": ":+1: \n. ",
    "neoziro": ":+1: \n. ",
    "diwu1989": "can you make a release? we really need this for Karma to work\n. ",
    "devversion": "Yes, that's really important :+1: \nEdit: Seem's to be there is a new release deployed\n. ",
    "kirylkastko": "+1\nI have the same issue.\n. ",
    "bouzuya": ":+1: \n. ",
    "ItzLevvie": "There're duplicates in some of the files.\n. ",
    "wesleytodd": "See here for where it is included: https://github.com/websockets/ws/blob/7debd827d39925650bba5a270811ed82616f0eb1/lib/Validation.js#L10\n. @JacksonTian Why?\n. Also, just got an email from my team, bufferutil is also causing build failures for us when we npm install in production.  Moved that one over to.\n. That makes a lot more sense.  Thanks for linking that.\n~~The problem is that with browserify bundling socket.io-client -> engine.io-client -> ws we end up with a build error from this module.  And since this is ACTUALLY a run time dependency it SHOULD be specified as a dependency, despite the try/catch around it.~~\n. Ok, so there is clearly no way you should support the possible build tool combinations that might arise.  So I am retracting my statement from before.  The more I think about it this is engine.io's issue for not bumping their major version.  I am going to close this because I can see where you are coming form with this and your solution to it.  Sorry for bothering you!  Good job on the package even though I never knew I was using it :)\n. ",
    "rogierschouten": "Same goes for module utf8-validate\n. See the error message. Apparently, socket.io-client depends on engine.io-client which depends on ws and it includes this code?? Maybe it is an engine.io-client issue then?\n. ",
    "janhoogeveen": "For what it's worth, I had the same trouble in my custom version of https://github.com/erikras/react-redux-universal-hot-example and removing everything related to Socket.IO got rid of all the errors. Maybe worth investigating if they have new minor/patch versions released that got automatically updated.\n. Check https://github.com/socketio/socket.io-client/issues/933\n. ",
    "TheLudd": "Yes I now understand that the error occurs when browserify is used with this project. It does not handle the try-catch around the non existing dependencies. Is there a good solution for handling this?\n. ",
    "wayofthefuture": "Just installed 3.0.0, can't even get it to build with webpack. Same error.\nimport WebSocket from 'ws';\nThis is client-side browser code. Am I not suppose to use the 'ws' lib client-side? Should I use the native browser implementation?\nIs this incorrect?\nThanks for your help.\n. @3rd-Eden So I should just use native websocket?. Thank you for your time.. client.send(msg, errFunc) will always call the errFunc even if there is no error.. ",
    "STRML": "@3rd-Eden ping\n. Why make every browserify/webpack user ignore 'ws' in order to use any\nmodule that requires it? This simple file does not imply support for\nbrowsers, but simply fixes bundling since bundlers cannot know not to\nignore 'ws' without specific instructions, which is why the browser field\nexists in package.json.\nThis is not about optional dependencies, this is about breaking bundlers\nbecause they will try to require all of this module's dependencies, such as\n'fs' and 'tls'.\nOn Jan 9, 2016 12:51 PM, \"Arnout Kazemier\" notifications@github.com wrote:\n\nSorry, not going to bundle any sort of browser code here. Build systems\nshould learn how to ignore optional dependencies instead of forcing\npackages to become compatible with them.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/websockets/ws/pull/661#issuecomment-170269354.\n. This is putting consumers of this module in a bad situation (such as engine-io.client) as they need to upgrade to 1.0.1 asap due to the security bug, but now are forced to make a breaking change not only because of the optionalDependencies, but because the removal of browser.js broke bundlers for no good reason.\n\nExpecting every consumer of this module to blacklist it in their bundlers is unnecessary when it can be easily fixed with this PR. This PR does not imply support, it throws an error if the module is used. It simply fixes bundling.\n. I too am disappointed with how this has been closed with little/no discussion outside of \"we don't want to support it\". Why don't you want to support it, what cost is there to supporting it, and what's wrong with creating a tiny shim that basically says \"don't use this\", but doesn't break browserify/webpack builds like master does currently?\n. This problem is caused by https://github.com/websockets/ws/commit/e54d45fbab3b19c2940e9057ce1e7b8f105873e0, which I've attempted to revert in #661, which will hopefully be reopened and merged.\n. (For reference, here's the compare view)\n. Please see the link above @3rd-Eden, the commit was yours.. Sure, added.. Great - fixed nits.. New commit has fixes for most comments, see note on Object.assign().. Added to the inflate & added test to verify options were passed onto the zlib streams.. Split into two options.. Thanks for the merge.. Hey @lpinca - sorry for not updating you further. I'm happy to contribute a sync patch and put it through our benchmarks for completeness' sake. Even with concurrency=1 we still saw fragmentation-related blowups pretty much daily in production. I have not yet tested if sync will fix it but it rings true. Unfortunately this is a difficult bug to reproduce in test.. Yeah it depends on how you've clustered out your app. If you're doing one app per hyperthread it's already pretty close to counterproductive to thread out zlib, and the fragmentation bug takes it over the edge.. Well they can be. Zlib is a bit of an outlier because the standard task delegated to the libuv pool is IO, not CPU. If you assume that any process can actually spawn 1-5 CPU-intensive processes this completely breaks assumptions when clustering. Ideally you want to spawn one cluster worker per hyperthread otherwise.. The idea was to avoid the Object.assign() if nothing is passed (the far more common case).. Actually no, it won't be, because it's only per-connection, I had erroneously assumed it was per message. Will update.. Updated; one thing to note, setting flush should not be necessary because we pass zlib.Z_SYNC_FLUSH when flushing manually; please correct me if wrong.. There's tons of this file that goes out to 100 characters, does it really matter?. ",
    "dceejay": "Seconded !\n. ",
    "rstacruz": ":+1: on this as well. If it won't be supported, at least make it break. It took me a day to figure out why my project was suddenly having bufferutil and utf-8-validate errors: it turns out ws was a dependency 4 levels deep.\n. okay, hmm... i see there are fallbacks in case they fail to require. maybe the better solution is to define browser fields in bufferutil and utf-8-validate?\n(I'm using ws with browserify.)\n. don't install those. the solution is to not use ws with browserify (or any of the modules that depend on ws).\nThis was a very long debate here: https://github.com/websockets/ws/commit/e54d45fbab3b19c2940e9057ce1e7b8f105873e0\n. ",
    "andyinabox": "+1 yeah to me this seems to be a case of philosophy getting in the way of common usage. i really don't understand the decision to make this module a huge pain to use in the browser via browserify/webpack.. ",
    "bkonkle": "+1 - actively removing conveniences in order to push an agenda hurts developers\n  . ",
    "JoeDawson": "Only happens when I use this library though - hence the reason for the issue. I'll continue to investigate elsewhere :)\n. @hrmoller unfortunately ended up abandoning the library and using navtive WebSockets in the end. Bit of a shame, but I think it was related to my webpack config somehow if that helps point you in the right direction?\n. ",
    "hrmoller": "@JoeDawson Experiencing the same issue here, have you the found the reason?\n. ",
    "zalmoxisus": "Before this one there's another error:\n```\nERROR in /.../~/ws/lib/WebSocketServer.js\nModule not found: Error: Cannot resolve module 'tls' in /.../node_modules/ws/lib\n @ /.../~/ws/lib/WebSocketServer.js 15:10-24\nERROR in /.../~/options/lib/options.js\nModule not found: Error: Cannot resolve module 'fs' in /.../node_modules/options/lib\n @ /.../~/options/lib/options.js 6:9-22\n```\nSo the issue is related to the fact that Webpack cannot require tls and fs (the latter comes from a dependency of bufferutil, which is also required in ws), which are nodejs specific.\n. The problem doesn't appear in 0.8.x as there's a fallback for browser in package.json:\n\"browser\": \"./lib/browser.js\"\n. ",
    "ausrasul": "Incompatibility with webpack should be in README.\nThat would have saved me half a day before going to native ws.\n. ",
    "xxd3vin": "Similar error is https://github.com/webpack/react-starter/issues/3#issuecomment-53395089\nWhen developing isomorphic javascript app, the packages we requireed should have browser field in package.json to tell, for example webpack, to exclude server-side module. I think ws would be nice to add this to package.json:\ndiff\n     \"tinycolor\": \"0.0.x\",\n     \"utf-8-validate\": \"1.2.x\"\n   },\n+  \"browser\": {\n+    \"fs\": false,\n+    \"tls\": false\n+  },\n   \"gypfile\": true\n }\nOtherwise, we could add this to webpack.config.js\ndiff\n         loaders: ['style', 'raw']\n       }\n     ]\n+  },\n+  node: {\n+    fs: 'empty',\n+    tls: 'empty'\n   }\n };\n. ",
    "Vastness": "I'm new to ws,and I just got the same problem today.\nThen I follow the solution as @xxd3vin says,however, I got an new problem as \nhttp://stackoverflow.com/questions/29829597/i-get-a-status-200-when-connecting-to-the-websocket-but-it-is-an-error# mentioned.\nThus, I realized there is something seriously wrong with how we are using the code.\n\nIn the browser, you are using the native WebSocket class and not SockJS !\n\nSo, we should just remove var WebSocket = require('ws'); and change the url to var ws = new WebSocket(yourhost+'/websocket') in the client side js. Finally, solve the problem perfectly.. ",
    "halcwb": "I installed today, but got had to install both utf-8-validate as bufferutil to get things running. @rstacruz.\n. Got it, thanks\n. ",
    "RIAEvangelist": ":+1: \n. ",
    "alexhultman": "\"The fastest\" should be \"A fast\". It is not the fastest WebSocket library for Node.js.\n. I don't know. But it is not ws.\n. There are many libraries written in other (native) languages that are faster, one such is libwebsockets, another is WebSocket++, etc. However, these are not available for Node.js so I am working on bringing libwebsockets to Node.js by wrapping it. node-lws is that project and it is certainly faster than ws.\n. What do you mean by \"finished\"? It is software - it will never be \"finished\". You can run it today, you can benchmark it today. It will be stable in a couple of days.\nBesides, I'm not claiming to be fastest - that is just silly since I cannot scout the entire internet to prove such a thing. The same applies to ws. A better description would therefore be one that does not use superlatives.\n. @chintan39 The C++ (native) server is about 4x faster than the Node.js addon which leaves about 10x remaining difference between ws and uws. 10x is also known as 1000% which is also known as \"one thousand percent\" which in my book means \"no, ws is by far not the fastest\". But that's just me...\n. @NoelAbrahams These memory scaling numbers are a little bit misleading as they only measure user space memory, in reality when taking the fix kernel space memory usage into account the difference between ws and uws in memory usage would be something like 6-10x I guess.\n. Btw, it doesn't really matter. The developers are never going to acknowledge this in any way. The word \"performance\" has been bashed so hard lately it has turned into a buzzword which everyone is now entitled to use. Socket.IO claim to be the fastest pub/sub when this in fact is not true at all, yet nobody cares to even bother checking this up. As a user you would need to actually check things up and not just rely on some ancient blog post filled with bullshit claims.\n. I just filled in some details because of misinformation.\n. @PokemonAshLovesMyTurkeyAndILikeYouTwo You cannot compare one server with permessage-deflate and one without, so the only valid number from your benchmark is the 7x (which is a massive number, we are talking about 700% difference, not 0.1% or something like that).\n. It is documented here: https://github.com/websockets/ws/blob/master/doc/ws.md#optionspermessagedeflate :wink:\n. Not going to argue or repeat myself as I have no gain or need for doing so. I've already posted my hint and you may take it or reject it. Not my business to care for what you do.\nAll I know is the current websockets/ws crashes after three hours in production and cannot be used for this reason while uws does not, in the very same production environment and same OS. If you want to blame Linux that's your problem but like said uws has no problem working with zlib without constantly blowing up on Linux.. Okay, keep it broken and unstable then. Nobody can use permessage-deflate in production as is now since it constantly blows up. Using sync zlib would not \"probably fix it\", it would 100% guaranteed fix it. Not my problem.. We already did test it and uws does not blow up while websockets/ws does, every three hours. The difference is uws does it sync while websockets/ws just builds a mountain of unprocessed copies until it crashes.. Their patches never fixed the issue, it still blows up.\nFrom a purely academic standpoint, what you are trying to do by using \"async\" deflate is the well known \"one producer many consumers\" multithreading problem.\nIf you Google it up, you'll see that you have to block the producer if the consumer queue is full. Problem is, JavaScript is not a multithreading language and does not expose threading fundamentals to solve it. That's why I'm telling you it \"goes against everything Node.js is about\" when trying to hack in proper threading by fooling users it is \"async\". You need to block, it is a very known academic hello world example taught in colleges.. By \"full\" I mean holding as many tasks as you have logical CPU cores. Which is like top 8 today.. Blocking the event loop (with CPU work) is not the same as blocking it with sleep. Blocking with sleep aka \"IO\" is always bad but blocking with CPU work is always happening to some degree and inevitable.. Yep any threading will add allocation, copy, synchronization and free overhead and since Node.js is all about being scaled one process per logical CPU core you only get added overhead which only turns the 1 second of required CPU time up, not down.. \"Delegating work\" is always to some degree blocking, itself. Anyways, you have enough info here to either listen or reject. The point is that websockets/ws blows up when using permessage-deflate and any academic study in multithreading would easily spot why.. It's not arrogant, it's just short and to the point. Remember: I'm here to hint of an improvement nothing else. It gets kind of tiresome just repeating myself over and over when I know for a fact this to work.\n\nThe point is that it's not ws fault.\n\nWell okay then, ignore everything I've said in this thread and keep it broken.. Can't keep reiterating -> I'm off, good luck. Just a side note since I am banned in the nodejs repo:\nI've spent like 6 hours of memory testing \u00b5WS in various permessage-deflate problems and really been hammering it in all kind of ways - I can definitely say that glibc works and is stable however it does grow memory usage in a logarithmic way until it stagnates and goes flatline.\nIt is true that swapping to libtcmalloc as allocator makes \u00b5WS complely flatlined in memory usage under immense permessage-deflate load, for hours, but the same can be said about glibc after a while when it has stagnated in memory usage.\nIt will definitely not continue to grow in a linear fashion like the async deflate example linked in this thread (have you tried running it over and over? It grows linearly!!). Even though glibc is far less likely to return memory to the system, it still manages to pick free blocks of memory from the already large heap (the bigger the heap, the lower the chance of not having a free block).\nSo it definitely is possible to have a working and stable permessage-deflate implementation without any ever continuing memory issues, even with glibc.. > As websocket usually is used for small chunk of json data I think regardless of the memory leak it's better to use sync deflate for small data considering under 1ms operations are neglectable.\nBingo.\nAt these small messages (most users send less than 500 bytes a message) the threading, eventing, copying and synchronization overhead it means to \"make it async\" becomes a bigger cost than the actual compression itself. Making it \"async\" only fools oneself as it accomplishes nothing of value.\nI would never put compression as \"async\" because it simply is logically impossible to do so, but I also don't care enough to argue anymore. Setting a threshold would solve it enough to be usable.. I'm assuming you toss the compressed variant if it turns out bigger than the original...... > As said in https://github.com/websockets/ws/issues/1369#issuecomment-383808666 experimentation (backed by numbers) is welcomed.\nSee https://github.com/websockets/ws/issues/1369#issuecomment-414835835. @lpinca See https://github.com/websockets/ws/issues/1369#issuecomment-383976309 \u2764\ufe0f . > Node.js does not have an official API to use inflate/deflate streams synchronously.\nIf that is the case then first step would be to add that feature in Node.js. Or use something like pako, I don't know.. ",
    "calebboyd": "Great, fixed\n. ",
    "pulviscriptor": "While i was experimenting here, i found that i can crash servers. Uhm...\nserver.js\n``` javascript\nvar WebSocketServer = require('ws').Server\n    , wss = new WebSocketServer({ port: 8080 });\nwss.on('connection', function connection(ws) {\n    ws.onerror = function(error) {\n        console.log('onerror called');\n    };\n});\n```\nclient.js\n``` javascript\nvar WebSocket = require('ws');\nvar socket = new WebSocket('ws://127.0.0.1:8080/');\nsocket.onopen = function() {\n    console.log('onopen called');\n    socket._socket.write(new Buffer([5]));\n    socket.send('');\n};\nsocket.onclose = function(event) {\n    console.log('onclose called');\n};\nsocket.onerror = function(error) {\n    console.log('onerror called');\n};\n```\nServer will crash\nD:\\Projects\\agario-investigation\\node_modules\\ws\\lib\\WebSocket.js:426\n    event.type = 'error';\n               ^\nTypeError: Cannot assign to read only property 'type' of no handler for opcode 5\n    at WebSocket.onError (D:\\Projects\\agario-investigation\\node_modules\\ws\\lib\\WebSocket.js:426:16)\n    at WebSocket.emit (events.js:110:17)\n    at Receiver.onerror (D:\\Projects\\agario-investigation\\node_modules\\ws\\lib\\WebSocket.js:851:10)\n    at Receiver.error (D:\\Projects\\agario-investigation\\node_modules\\ws\\lib\\Receiver.js:321:8)\n    at Receiver.processPacket (D:\\Projects\\agario-investigation\\node_modules\\ws\\lib\\Receiver.js:234:43)\n    at Receiver.add (D:\\Projects\\agario-investigation\\node_modules\\ws\\lib\\Receiver.js:95:24)\n    at Socket.realHandler (D:\\Projects\\agario-investigation\\node_modules\\ws\\lib\\WebSocket.js:800:20)\n    at Socket.emit (events.js:107:17)\n    at readableAddChunk (_stream_readable.js:163:16)\n    at Socket.Readable.push (_stream_readable.js:126:10)\n. @3rd-Eden \nCrash 1 and Crash 2 is random. \nServer crash is reproducible by script that i posted, crashes every time.\n. @LordMajestros\nRunning for about 10 hours, no crashes. \n. @3rd-Eden\nhttps://github.com/websockets/ws/pull/682\n. PR with fix accepted https://github.com/websockets/ws/pull/681\n. Can we please have this accepted?\n. Can i ask when NPM package will be updated?\n. @LordMajestros \nOops. Didn't saw your changes. \nCan you also add fix to lib/Receiver.hixie.js\n. Fixed in https://github.com/websockets/ws/pull/681\nUpdate your agario-client to 1.3.6 and it have fixed ws 1.1.0 and close this issue if it works.\n. ",
    "davidmann4": ":+1: have the same issue using his lib in /agario-feeder-bot/\n. :+1: please fix\n. works for me!\n. pretty please!\n. ",
    "kevdude749": "This really helped! This is the fix that I was looking for. I had the \"Websocket not opened\" error and I thought that it was my code, but I guess it's an issue with the Websockets.js file...\n. ",
    "jcalfee": "Thank you!  That is quite a patch, recent too.  Any idea when this might be merged?  \nMaybe I can wait a bit, we have not released anything yet.\nWe allow a number of IP requests per hour that would potentially lead to a large amount of legit traffic.  So your patch is ideal because we need to look in the message and weed out abnormal activity.\n. ",
    "infinity0": "The tests are passing on node 4 and 5, fail on node 0.12 for some reason. Possibly node 0.12 is using ports 58000-5800x? The ideal solution would be to pick a port dynamically.\n. It doesn't work fine on certain setups, i.e. if you have a service running on port 8008 already (e.g. Apple CalendarServer). I was going to re-patch it to use port 48008 instead of 58008 but had better things to do in the meantime.\n. ",
    "misobytes": "Hi! We're noticing the same behavior using our node.js app.\nI can see there is a similar outstanding issue, opened from last year: #505 \nAccording to https://www.w3.org/TR/websockets/ it seems the expected behavior should include the close event:\n\nIf the establish a WebSocket connection algorithm fails, it triggers the fail the WebSocket connection algorithm, which then invokes the close the WebSocket connection algorithm, which then establishes that the WebSocket connection is closed, which fires the close event\n\nI can see in WebSocket.js:\n```\nvar req = httpObj.request(requestOptions);\nreq.on('error', function onerror(error) {\n    self.emit('error', error);\n    cleanupWebsocketResources.call(self, error);\n  });\n```\n... that there is an error listener for the http request responsible for establishing the socket connection.\nHowever, since the readyState === WebSocket.CONNECTING a close event is intentionally not emitted:\nvar emitClose = this.readyState !== WebSocket.CONNECTING;\nI'm guessing the above statement exists for a reason. Can anyone explain the rationale behind it?\nIt would be possible to emit the close event when an error is detected during connection establishment if we:\n- Removed the conditional check this.readyState !== WebSocket.CONNECTING.\n- Checked the type of error within the request error handler to see if it contains ENOTFOUND or similar. If it does contain such an error then explicitly emit a close event or set the readyState to something other than WebSocket.CONNECTING. \nThanks!\n. Thanks @3rd-Eden ! This is great news. :)\n. ",
    "ThomBogers": "Are you looking for this? https://github.com/websockets/ws/blob/master/doc/ws.md#event-ping\n. ",
    "computersarecool": "That is the event that I am looking for, however, I was wondering if it is possible to listen to this event on the Client Side (i.e. from a web browser).\n. I have read the documentation for the protocol and this does not seem to be possible because of limits of the spec, not the library.\n. I should have looked at the source!.  Thank you very much.\n. ",
    "rkaw92": "Confirmed on Chromium 47.0 (Debian 8), but non-reproducible on Iceweasel (Firefox) 38.5, using your test code.\nChromium bug?\nEDIT: I am not sure what the WebSocket spec says, but what is certain is that client-side differences exist.\n. It appears that even a single message can crash the server: gist.\nFor reference, the original client code is here.\nNo more messages are required. Turning off the maxPayload option (passing zero or undefined) makes the crash go away.\n. Indeed, the fix does work. Apparently, the try {} catch block is also required around the server's .send() - otherwise an \"Error: not opened\" is thrown.\n. Also seeing this with ws@0.8.0 (required by our engine.io version) on Node 6.3.0.\nRangeError: out of range index\n    at RangeError (native)\n    at fastCopy (/home/debian/GEOS/b2b/node_modules/ws/lib/Receiver.js:386:24)\n    at Receiver.add (/home/debian/GEOS/b2b/node_modules/ws/lib/Receiver.js:86:3)\n    at Socket.realHandler (/home/debian/GEOS/b2b/node_modules/ws/lib/WebSocket.js:800:20)\n    at emitOne (events.js:96:13)\n    at Socket.emit (events.js:188:7)\n    at readableAddChunk (_stream_readable.js:177:18)\n    at Socket.Readable.push (_stream_readable.js:135:10)\n    at TCP.onread (net.js:542:20)\nThe final line of the stack trace seems to be doing a call to Buffer#copy(). This is right after an upgrade from Node 0.12.\n. I concur. Upgrading to 1.1.1 (got pulled automatically by npm when upgrading to a newer socket.io release) has resolved this. May be beneficial to close the issue, but leave it here for posterity.\n. @sushantdhiman you sure your dependencies were not reset? I have not seen this behaviour after upgrading to Node 6.3.0.\n. Seeing the same issue, but from the server's side - when a particular event on the server occurs, all clients are notified by iterating over sockets and send()ing a message to each. Suspecting stale sockets and missing clean-up on my side somewhere.\n. In my case, this was an error in our code. I was trying to send to sockets that really were closed (a cleanup routine was broken).\n. ",
    "go-oleg": "@rkaw92, thx for trying it out (and reminding me that I should've included my browser version too).\n. ",
    "hassanila97": "Accept this plz IT WORKS! , can som1 explain why people here don't fucking accept PRs that work 100%,,   I just dont get it  and I love to make PRs but people just dont even reply...   :(\n. @3rd-Eden I know but this lasted 1 month and it was fully working... with noone reporting any bug..\n. Yeah thx\n. ",
    "peradym": "The client side is an iPad using the Starscream WebSocket library. Each connection is established as a separate object using Swift on the iPad. I have verified that two distinct connections are being established as I will describe next.\nWithin wss.on(\"connection\", function connection(ws) { } ); I have printed ws to the console and see two distinct WebSocket objects as each one connects (I have compared these with a text editor and they contain unique information between one another). I can also send messages to each distinct connection and receive them as expected on the iPad to the corresponding WebSocket.\nShouldn't the code as I have written it above be creating two separate event emitters when messages are received from two different WebSockets?\n@LordMajestros Thank you for your response. I greatly appreciate it.\n. I have performed another test. With the code below objectTest contains the unique WebSocket connection distinguished by 'sec-websocket-key' printed to the console. However this.send(message);  and console.log(this); both refer to the first established WebSocket connection even while objectTestMap contains the second objectTest that is unique.\nvar connections = new Map();\nvar idCounter = 0;\nwss.on(\"connection\", function connection(ws) {\n    var connectionID = idCounter++;\n    connections.set(connectionID, ws);\n    var session = connections.get(connectionID);\n    var sendThis = String(connectionID);\n    session.send(sendThis);\n    var objectTestMap = new Map();\n    var objectTest = session.on(\"message\", function incoming(message) {\n        this.send(message);\n        console.log(this);\n    });\n    objectTestMap.set(connectionID, objectTest);\n    console.log(objectTestMap.get(connectionID));\n});\n. @Gray1989 Thanks for the input. I actually started out using ws.on('message' and this is when I discovered the behavior. I added the session handler for testing purposes so that I could track and print the session object to the console at different parts of the code. I wanted to be sure that I was sure a separate object was being created and used at ws.on('message'.\nBelow is a snippet of another test that I performed.\nsession.on(\"message\", function incoming(message) {\n    console.log(session); // This prints the first object that was created even when executed by the second WebSocket connection\n});\nI am beginning to think that WS has a problem differentiating connections from the same source. Out of the very few resources for WS I have not yet been able to find much information about the server differentiating the connections. I have only found mention of saving the WebSocket connections and sending messages to particular connections from the server, which has always worked fine for me.\nI am trying to better understand how WS handles ws.on('message', but I easily get lost through all of the node.js coding patterns.\n. @Gray1989 I have replicated your code and got the exact same result as you, but when I connect using Swift/Starscream on the iPad I run into the problem. So it seems to be an issue on the iPad side of things at this point. I will do some further troubleshooting and post the results.\nThanks a bunch for helping me along!\n. I have resolved the problem and there was nothing wrong with WS. Thanks everyone for the help!\n. ",
    "RajeshwariSiva": "Hi\nI have the same issue . I am trying to implement a web chat using websocket and Er-lang. The whole set up of mine worked well . But now a facing an issue like the connection is getting replaced by latest connection. I'm not able to distinguish between the user. I have implemented in node js. \nMy code is below\nThis is the server side code\nwss.on('connection', function (ws) {\nfunction init(user,pass,loginStatus,id) {\n//To initiate the xmpp connection\nwsURI = \"ws://52.77.212.110:5223/xmpp\";\n//create a new WebSocket object.\nwsss = new webSocket(wsURI, [ 'xmpp' ]);\n```\nwsss.onopen = function(evt) {\n    if(loginStatus===true){\n        login(user, pass,loginStatus);\n    }\n    else{\n        wsss.close(3000,\"Deliberate Connection\");\n    }\n};\nwsss.onclose = function(evt) {\n    var code=evt.code;\n    console.log('connection closed');\n    if(code!==3000){\n        if(loginStatus===true){\n            console.log('connection started');\n            login(user, pass,loginStatus);\n        } \n    }\n};\nwsss.onmessage = function(evt) {\n    processResponse(evt.data, user, domain,id);\n};\nwsss.onerror = function(evt) {\n    console.log('Error Occured');\n    console.log(evt);\n};\nthis.wsss = wsss;\n// \n```\n}\n}\nThe client side code\nvar url = \"ws://127.0.0.1:8087/\";\nsocket = new WebSocket(url);\nsocket.onopen = function () {\nvar user=document.getElementById(\"user\").value;\nvar secretCode=document.getElementById(\"secret-code\").value;\nsetCookie(\"username\", user, 365);\nsetCookie(\"user_id\", getRandomInt(0, 10000), 365);\nvar bool=true;\n//To set the username in session\nvar message = {};\nmessage.user = user.trim();\nmessage.pass = secretCode.trim();\nmessage.id = getCookie(\"user_id\");\nmessage.type = \"login\";\nmessage.connection=bool;\nvar msg=JSON.stringify(message);\nsocket.send(encodeURIComponent(msg));\n};\n. Hi,\nI have got solution for it. Thanks for your response.\n. ",
    "terenceLuffy": "@peradym  What was the problem causing the issue? Would you explain it a little bit? Thanks. @tomdaniel0x01 Thanks for your response. I having the same issue in client too. My case is I have multiple namespaces to same server through web sockets, all namespaces connected and able to emit message successfully, however, only one socket/namespace can receive incoming stream data, did you have the same problem? If so, do you still remember to to fix it?. @tomdaniel0x01  I checked my source and didn't find the same cause you had, and my case is more wired, because everything is working fine in iOS 10, but in iOS 8 & 9, it only get one socket working fine for incoming events.. ",
    "tomdaniel0x01": "Peradym here under a different account. The problem was with my client side code. It's been a while so I can't completely remember the details, but there was nothing wrong with my server side ws implementation.. @terenceLuffy I just reviewed my code. My client handles multiple sessions by creating new objects for each session and storing them as a property. The Swift Starscream library provides delegate methods that are called when a websocket receives data from the server. So for each websocket object, I have 'primarySocket.onData' and secondarySocket.onData' methods that are called depending on which actually received the data.\nI remember that a simple typo in my client code caused all data to only be received on the primary socket. The typo was something like accidentally overwriting the secondarySocket property with the primarySocket object.. ",
    "ForgeableSum": "For me it was a scoping issue. Privatizing this function worked:\n```\nfunction createConnectionAndPingServer(key) {\n    serverList[key].socket = new WebSocket(serverList[key].url + \"?\" + serverOpts.query);\naddSocketMethods(serverList[key].socket);\nreceivePingHandler(key);\n\nserverList[key].socket.onopen = function() {\n    serverList[key].socket.emit('ping_from_client', Date.now());\n};\n\n}\nfor (var key in serverList) {\ncreateConnectionAndPingServer(key);\n\n}\n```\nThe keys in serverList are websocket connection URLs. If createConnectionAndPingServer wasn't a private function, it doesn't work and it's as if Websockets creates the same connection twice instead of two connections. \nI can't understand it though. Everything was saved as a reference in an object so I don't understand why it needed to be privatized. If anyone could shed light on this, I'd be grateful. . I've narrowed down the problem to the server \"onclose\" event. I've tried two different syntaxes, and whenever I have either of these two implemented on the server side, I have the problem described above:\n```\nsocket.onclose = function(reason) {\n}\nsocket.on('close', function(reason) {\n}); \n```\nWhich one of these syntaxes id correct btw, and can i use either? In either case, just having these handlers on the server side (with nothing being executed in them) causes the problem. If I remove them and perform a client disconnect (e.g. ws.close()), I get a clean close with code 1000. \n. So in reality, it had nothing to do with the query parameter. The query parameter determined if the \"onclose\" handler was added, and that's why I thought it had something to do with having parameters. . What a disaster. if i manually close the websocket on the server-side with socket.close(), I get no confirmation of a close on the client (ready state is still 1) and on the server close event, the close event is undefined (in the onclose event handler). No errors. . Could this have something to do with the fact that I modify the socket \"on\" method with:\nso.on = function(mName, fToExecute) {\n    so[mName] = fToExecute;\n\n}\n\nI did this because I transitioned from socket.io and want to use a lot of the same syntax. \n. Yup, that was in fact it! Word to the wise: don't mess with websocket.on. Instead, use a custom method name. I'm still modifying .on on the client side ... but it should be safe to do since .on is not used in the native websocket object. . ",
    "urosjarc": "@pavan4 I have the same issue, your implementation is quite good... I suggest developers to merge in master... :+1: \n. Then what are your suggestions? I know only pings checking if connection is alive...\n. Did you check onclose method for network drop, does it really emit?\n. This is my implementation:\nhttps://github.com/urosjarc/websocketRest.js\nIt's used in production for 1 year +2000 mobile devices connected which are switching connections (wifi, 3G) all the time. We were having many problems with duplicats but now this lib is running 1 year without error.\nThis is the company that use this lib: http://facilityforhotels.com/. I will add additional docs if there will be an interest in this lib.. ",
    "r-pr": "I've got the same problem with detecting connections experiencing network errors. I've tried setting keepAlive, as pointed here, but close event still fired only 10 s after network got down. Finally, I figured out how to use Websocket ping-pong mechanism: \n```\nvar WebSocketServer = require('ws').Server,\n    wss = new WebSocketServer({ port: 4444 });\nvar PONG_TIMEOUT = 1500; //client has 1.5s to respond with pong\nwss.on('connection', function connection(ws) {\n    var lastPongReceived = Date.now();\n    ws._socket.on('data', function(data) {\n        if (data[0] == 0x8a) { //opcode of pong response\n            lastPongReceived = Date.now();\n        }\n    });\nvar x = setInterval(function() {\n    if (Date.now() - lastPongReceived > PONG_TIMEOUT) {\n        console.log('pong timeout elapsed');\n        //...code to run if connection unavailable\n        clearInterval(x);\n        ws._socket.destroy(); //ws.close() won't raise 'close' event, because close message \n                               //cannot be delivered to client      \n    }\n    if (ws.readyState === 1) {\n        ws.ping('.', false);\n    } \n}, 1000);\n\nws.on('close', function() {\n    console.log('connection closed');\n})\n\n});\n```\n. @john-doherty It seems that the mechanism does the job, but I haven't used it in production.. @john-doherty OK. ",
    "zs9024": "has the issue been solved in the latest version?. ",
    "agilethomas": "I'm not sure exactly how to test for the scenario in which an HAProxy server sits between the client and the server. The existing test for Hixie-76 connection passed, so I didn't break anything. Do you have any suggestions on how to test for the issue that I fixed?\n. ",
    "alexjwong": "@Pimeau You can use the https-proxy-agent package (https://www.npmjs.com/package/https-proxy-agent) to route websocket requests through a proxy. (I just tried and succeeded through my corporate proxy).\nHope this helps.\n. ",
    "Xsmael": "Found out the problem was rather a CORS issue and not related to smartphones.\n. ",
    "stavenko": "Sorry, found problem, this is not wss fault.\n. ",
    "ericmdantas": "I'd say that's out of this project scope and you'd have to write the wrapper yourself - which should not be complicated.\n. Maybe add \"stable\" too?\n. Try .on('connection', () =>...).\n. Also, if you want to check if the client is open you can do:\njs\nif (client.readyState === client.OPEN) {\n  // now you can use the client\n}\n. You should check if the client is open, by doing:\njs\nif (ws.readyState === ws.OPEN) {\n   ws.send('hello');\n}\n. Do you have any stack trace, error message or something?\nIt might help if you share the code used in the browser too.\n. This would kill the compatibility with the versions of Node that don't support arrow functions yet, though.\n. Sounds good, then!\n. Yes, all you have to do is have a connection to the server and it should work.\nSomething like:\n``` js\n  angular\n   .module('myApp', [])\n   .run(function($rootScope) {\n      var ws = new WebSocket('ws://127.0.0.1:9999/yo');\n  ws.onmessage = function(info) {\n    $rootScope.$broadcast('ws:msg-received', info.data);\n  }\n\n})\n   .controller('MyController', function($rootScope) {\n      $rootScope.$on('ws:msg-received', function(ev, msg) {\n         console.log(\"and the message is: \" + msg);\n      });\n   });\n```\n. :+1: \n. Working fine for me.\n``` js\n// server.js\n\"use strict\";\nconst WebSocketServer = require(\"ws\").Server;\nconst wss = new WebSocketServer({ port: 2222 });\nwss.on(\"connection\", (ws) => {\n   console.info(\"websocket connection open\");\nif (ws.readyState === ws.OPEN) {\n       ws.send(JSON.stringify({\n           msg1: 'yo, im msg 1'\n       }))\n   setTimeout(() => {\n        ws.send(JSON.stringify({\n            msg2: 'yo, im a delayed msg 2'\n        }))\n   }, 1000)\n\n}\n});\n```\n``` js\n// client.js\n\"use strict\";\nconst WebSocket = require('ws');\nlet ws = new WebSocket('ws://localhost:2222');\nws.onopen = function() {\n    console.log('open')\n}\nws.onmessage = function(ev) {\n    let _data = JSON.parse(ev.data);\nconsole.log(_data);\n\n}\n```\n``` go\n// client.go\npackage main\nimport (\n    \"fmt\"\n    \"golang.org/x/net/websocket\"\n)\nfunc main() {\n    ws, err := websocket.Dial(\"ws://localhost:2222\", \"\", \"http://localhost:2222\")\nif err != nil {\n    fmt.Println(err)\n    return\n}\n\nfor {\n    var m string\n\n    websocket.Message.Receive(ws, &m)\n\n    fmt.Println(m)\n}\n\n}\n. @slidenerd In my opinion, since `ws` is supposed to be a small core lib, it's not meant to have this kind of abstractions, so it's up to the userland to `stringify` and `parse` jsons as they come and go. Not sure if there are other reasonings behind it, though.. js\nif (client.readyState === client.OPEN) {\n   // open\n}\n```\n. If I remember correcly, if you ignore the error, the server will crash because you're trying to write to a not-ready-to-receive-info-socket.\nAs for the list of clients, it should clean itself (ref).\n. Well, cleanupWebsocketResources (ref) calls emit('close'), maybe you could try to check if that's being called and check the params?\nOther than that, I'd try against a newer ws version.\n. I'm guessing this:\njs\nthis.cee.on('sendEvent', function (message) {\n    for (var i=0, l = this.wss.clients.length; i < l; ++i) {\n      this.wss.clients[i].send (message);\n    }\n  });\nShould be:\njs\n this.cee.on('sendEvent', function (message) {\n    for (var i=0, l = this.wss.clients.length; i < l; ++i) {\n      this.wss.clients[i].send (message);\n    }\n  }.bind(this));\nOr:\njs\n this.cee.on('sendEvent', (message) => {\n    for (var i=0, l = this.wss.clients.length; i < l; ++i) {\n      this.wss.clients[i].send (message);\n    }\n  });\nSo you have the same this, in and out of the function.\n. bind is all about javascript, it's not restrict to node. I suggest you search stuff like arrow functions, bind vs call, etc.\n. Looks like the clients array is still full, could you guys log ws.clients.length and share what's shown?\n. > SOP/CORS does not apply to WebSocket, but browsers will send an origin header that contains the hostname of the server that served the HTML with the JS that opened the WebSocket connection. A WebSocket server can then restrict access by checking origin\nref\n. @lpinca \n\nI would avoid wrapping crypto.randomBytes() in a another function [...]\n\nIMHO, it makes sense to leave it as it is, just in case the way the mask is returned changes again.\n. @lpinca, no problem. I'm a bit busy at the moment, but I'll take a closer look when possible. But, from what I've seen, it's good to go.. Wouldn't this break those who use the wsInstance.CLOSE, etc?\n. Well, I wouldn't deprecate it if it was really needed for whatever reason. I guess there's a few people out there who test if a client is ready to go by doing:\nif (client.readyState === client.OPEN) {\n  // send data\n}\nI currently use the above.\n. let?. Use default param value instead?. Use default param value instead?. ",
    "subodh2508": "http://stackoverflow.com/questions/19844060/creating-a-chat-with-nodejs-ws-einaros\nI got the solution from above link\n. ",
    "midnightsyntax": "I wonder so too\n. ",
    "muxahuk": "Well, i could create my own server, but if i pass server and port within parametrs it will still create server and would not use mine + every time, when i want custom listening, i am required to write these:\njavascript\nvar server = http.createServer(function (req, res) {\n    var body = http.STATUS_CODES[426];\n    res.writeHead(426, {\n        'Content-Length': body.length,\n        'Content-Type': 'text/plain'\n    });\n    res.end(body);\n});\nserver.allowHalfOpen = false;\nand pass server variable and then write .listen atc..\nMy solution at 1-st comment woun't break beckwords compatibility and will add these feature of listening on my terms, not after crated websocketserver...\nPlease consider these request and answer why not if u decide not to use it.\nThanks.\n. No.. Problem remains.. the problem isn't that i can't pass port.. problem is that if i pass - i can't control when to start listening.\nIt's like when u wake up u go to school first and only after that u brush your teeths or put your pants on.. nonsens right ? ( aldought u could do that, it's likely you would like to put your pants first and only then go to school.. ) [ going to school is starting listening server ]\nHere's the same problem!\n. well, i don't want to create ( wrote in my 2-nd reply ) code all the time in every project. Especially if you already do that ( u have server creation already, why should i dublicate your code? ).\nI'm passing only port number, but i want to start listening for the server, for example, after i have connected to database. in regular usecases that cannot be acheaved. Imagine these:\n``` javascript\nconst server = new WebSocketServer( { port: 1233 }, () => { console.log( 'listening' ) } );\n// currently here will be logged 'listening'\n// with my preposal from 1-st comment\nconst server = new WebSocketServer( { port: 1233, listen: false }, () => { console.log( 'listening' ) } );\nconst db = new DB( options );\ndb.on( 'ready', () => server.emit( 'listen' ) ); // only on emit( 'listen' ) will be logged 'listening'\n```\n. I already do not remember why ( it's a long time from march now ), but in my case i couldn't do that, but i definetly tryed and failed ( sticked with creating server and not passing port ).\nI think it was becouse i'v needed to pass wss to db in orther to db do something with it ( listen for 'listening' and start making queries i guess ).. shortly - becouse of injections, i think..\n. well, then maybe u could make function like WebSocketServer.createServer() witch will include creation of server (like a static function)\njavascript\nWebSocketServer.createServer = function() {\nvar server = http.createServer(function (req, res) {\n    var body = http.STATUS_CODES[426];\n    res.writeHead(426, {\n        'Content-Length': body.length,\n        'Content-Type': 'text/plain'\n    });\n    res.end(body);\n});\nserver.allowHalfOpen = false;\nreturn server;\n}\nin order for us not to dublicate these code ? ( u could replace creation with these function also ).\nIf no, then u can close these issue.\n. @lpinca well, i think it would save much time, whenever i need to control the server.. but currently i'm in no need of this feature for my projects... ",
    "dorshay6": "Solved Thanks\n. ",
    "lotas": "I think this is the same as #686 and #353 \n. ",
    "ckross01": "Typically this is sent when another application (client, browser, etc.) closes the socket when you are still sending data to it from the server. \nI've had it happen when my browser drops the connection to the server on the socket while I am writing data to it.\n. The readme section on handling errors is pretty solid for when sends throw exceptions.\nhttps://github.com/websockets/ws#error-handling-best-practices\n. ",
    "njam": "What is the recommended way to handle/catch such an error?\ncc @vogdb\n. Sorry, my bad, thanks for the link!\n. ",
    "chintan39": "Please read the disclaimer below the statistics \n\"These results were achieved with the native C++ server, not the Node.js addon. Expect worse performance and scalability when using Node.js.\"\nSo \"Yes\" probably still the fastest and stable WebSocket implementation\n. ",
    "transitive-bullshit": "Also wondering the exact same thing; shouldn't ws package work by default in the browser when included via browserify or webpack?  This shim and accompanying \"browser\" link in package.json made that the default.\n. Thanks!\n. ",
    "LongLiveCHIEF": "If close is called with anything other than close() or close(<Number>), then the preceding code will check to see if there's a custom non-numerical closure code registered.  \nThe line code = code || 1000 is then a way to set the close functions default error code value to 1000, so that if you call close(), it is essentially the same thing as calling close(1000).\n. @pokal4u can you close this issue please?\n. ",
    "tejasmanohar": "my bad, was a separate server implementation erroring here\n. No problem. Lmk when patch has been pushed to NPM.\n. ",
    "Sonicmaster13": "This is not the place for Agar.io related problems. That error looks extremely like it was from using Agario-Client. I suggest you close this issue and post it on that instead\n. ",
    "tothandras": "@3rd-Eden Oh, sorry! :) I haven't noticed.\n. ",
    "nkolban": "+1 please\n. ",
    "fictorial": "https://github.com/websockets/ws/search?utf8=%E2%9C%93&q=clientTracking\n. ",
    "syzer": "\ud83d\udc4d \n. ",
    "kichooo": ":+1: \n. ",
    "pokal4u": "Now connected like:\nvar client = new Paho.MQTT.Client(\"ws://domain.com:8010/websocket\", \"myClientId\" + new Date().getTime());\ngetting response :+1: \n\n\n. I din't understand your point, I am new to hear.\nbut this error not for all users and browsers, some users connected in all browsers some users getting this error in chrome or mozilla and it works for that users when they clear the browser cache. \nSo how can I reproduce the issue?. ",
    "mirik123": "This is great feature. Please update typings (TS) repository as well.. The connection works only when WS client is also running by Node.js\nI want to run it from the browser as a part of the index.html\nP.S. is there npm package for client-side WS like https://github.com/socketio/socket.io-client where all files from lib are combined in one JS file?\n. The browser at its lowest level can use only one API for websockets, the \"WebSocket\" and it still doesn't support sending custom headers, opposite to websocket client run by to Node.js.\nSo, this issue is not relevant.\n. Yes, I see now.\nI just checked native browser's WebSocket API.\nThanks for the answer.. ",
    "dirkk0": "Hi, thanks for your response! Sure, we could do this also this way, but in\nmost of my work the exclusion is rather the default, no?\nSo maybe just one example, with the filter in, commented out with a comment\nsaying 'Uncomment this to exclude the sender'?\nOn Tue, Oct 18, 2016 at 6:35 PM Luigi Pinca notifications@github.com\nwrote:\n\n@dirkk0 https://github.com/dirkk0 thank you for this patch.\nI find the example a bit redundant as there is a broadcast to all example\njust above it.\nWhat do you think about adding a sentence to the broadcast to all example\nexplaining that if you want to exclude the sender you have to filter it out\nfrom the clients loop?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/pull/729#issuecomment-254565013, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAmK8noIR-WNqL80p77hS09ZKpLx1e3nks5q1PVngaJpZM4IdS4U\n.\n. ok, it's a micro patch, but may help.\n. I changed it accordingly.\n\nOn Wed, Oct 19, 2016 at 9:41 PM Luigi Pinca notifications@github.com\nwrote:\n\n@lpinca commented on this pull request.\nIn README.md\nhttps://github.com/websockets/ws/pull/729#pullrequestreview-4946241:\n\n@@ -130,6 +130,8 @@ var WebSocketServer = require('ws').Server\n\nwss.broadcast = function broadcast(data) {\n   wss.clients.forEach(function each(client) {\n-    // use this, if you want to send to everyone else\n-    // if (client !== ws) client.send(data);\nThe only thing I'm not sure is that the reader may wonder what ws is as\nit isn't defined in this example, otherwise looks good.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/pull/729#pullrequestreview-4946241, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAmK8tLc5h1125WRrti0SZzFVOWO_EHTks5q1nKBgaJpZM4IdS4U\n.\n. You are not pestering me at all -  it's me who is wasting your time! :-)\nThis is a great solution, please go for it.\nThanks!\n\nOn Wed, Oct 19, 2016 at 10:06 PM Luigi Pinca notifications@github.com\nwrote:\n\n@dirkk0 https://github.com/dirkk0 sorry to pester but what do you think\nabout changing it like this?\nvar WebSocketServer = require('ws').Server\n, wss = new WebSocketServer({ port: 8080 });\n// Broadcast to all.\nwss.broadcast = function broadcast(data) {\n  wss.clients.forEach(function each(client\n) {\n    client.send(data);\n  });\n};\nwss.on('connection', function connection(ws) {\n  ws.on('message', function message(data) {\n    // Broadcast to to everyone else.\n    wss.clients.forEach(function each(client) {\nif (client !== ws) client.send\n(data);\n    });\n  })\n});\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/pull/729#issuecomment-254925229, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAmK8m4lMADN5xBp1p3YQ_84N2nZnnGfks5q1nhRgaJpZM4IdS4U\n.\n. not at all, thx!\n\nOn Fri, Oct 21, 2016 at 11:29 AM Luigi Pinca notifications@github.com\nwrote:\n\nClosed #729 https://github.com/websockets/ws/pull/729.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/pull/729#event-831791949, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAmK8q0-I3uFClA54CiX5tvR1r4N23Zwks5q2IXwgaJpZM4IdS4U\n.\n. good point.\n. \n",
    "prog112": "I tried Chrome and Firefox newest versions, it doesn't because neither my server logs the connection and the clients return errors WebSocket connection to 'ws://127.0.0.1:9007/' failed: Error in connection establishment: net::ERR_CONNECTION_REFUSED\nAlso, the app works since node clients do, the port is definitely being listened on by the server\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        0      0 0.0.0.0:9007            0.0.0.0:*               LISTEN      2984/node\n. var WebSocketServer = require('ws').Server;\nvar wss = new WebSocketServer({ port: 9007 }); unless there are any more settings to set on the launchup then yeah\nAnd yes same machine \n. I edited the message, I copy pasted the code from older version. The port is 9007 and everywhere set up properly. \n. Sure, but there really isn't much - I tried to cut it down to the simplest form\n```\n$(document).ready(function () {\nvar websocket = new WebSocket(\"ws://127.0.0.1:9007/\");\nwebsocket.onopen = function (event) {\n    websocket.send(JSON.stringify({\n        request: 'getBuckets'\n    }));\n    websocket.onmessage = function (str) {\n        var response = JSON.parse(str.data);\n        $('#test').html(response.buckets);\n        websocket.close();\n    };\n};\n});\n```\nHowever as I said, there is already problem during the connection so the rest doesn't really matter now. \nMeanwhile the following node client code works fine:\n```\nvar WebSocket = require('ws');\nvar ws = new WebSocket('ws://localhost:9007');\nws.on('open', function open() {\n  ws.send(JSON.stringify({request: 'getBuckets'}));\n});\nws.on('message', function(data, flags) {\n  // flags.binary will be set if a binary data is received.\n  // flags.masked will be set if the data was masked.\n        console.log(data);\n});\n```\nPerhaps protocol option parameter has to be specified for the browser version, but no idea what to put there.\n. Pf, neeeeveer mind, I might be retarded. JS is obviously executed on the client side unlike PHP so I had to replace that localhost with an external address lol. \n. ",
    "eliezergu": "it looks like npm won't install express 2.x.\nso what's now???\n. Thank you I followed your instructions  and didn't got the err anymore but i'm still getting other err's you can check it out here  https://github.com/websockets/ws/issues/904\nI'll appreciate \n. Thanks for answering I followed your instructions and now i'm getting a new err\nC:\\Users\\shulem\\Documents\\myWebRTCApp>node expressWS.js\nC:\\Users\\shulem\\Documents\\myWebRTCApp\\expressWS.js:18\nvar wss = new WebSocketServer({server: server});\n                                       ^\nReferenceError: server is not defined\n    at Object. (C:\\Users\\shulem\\Documents\\myWebRTCApp\\expressWS.js:18:40)\n    at Module._compile (module.js:570:32)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.runMain (module.js:604:10)\n    at run (bootstrap_node.js:394:7)\n    at startup (bootstrap_node.js:149:9)\n    at bootstrap_node.js:509:3\nPlease let me know your suggestions thanks for your help \n(BTW: I tried to change  var wss = new WebSocketServer({server: server}); to var wss = new WebSocketServer({server: https});\nBut than i got the second err i mentioned in the issue)\n. Thanks I figured it out already \nhttps://gist.github.com/eliezergu/d13201dd26413a4ed211c0b1f6c9bceb. ",
    "wmsmacdonald": "Your issue is that new ws.Server([options], [callback]) is asynchronous. Put .close() in the callback and it should close properly.\njavascript\nvar WebSocketServer = require('ws').Server;\nvar wss = new WebSocketServer({ port: 8080 }, function() {\n  wss.close(function () {\n    console.log('closed');\n  });\n});\n. @adjohnson916 Although I like the idea of it throwing an error when called prematurely, the silent failure of .close() is consistent with Node's http.Server and net.Server.\nAs an aside, while looking into this I found that rival WebSocket library uWS, which claims to have the same API as WS, failed to terminate even when .close() was in the callback. Therefore there may be some inconsistencies with this method in similar libraries.\n. ",
    "AndersDJohnson": "@wmsmacdonald Ah, thanks, I didn't realize that as I've seen libraries appear to use it synchronously. Would we like to introduce behavior to queue such methods so that they can be called synchronously and are executed later on the next appropriate lifecycle hook? Or at least consider throwing an error when called prematurely to no effect?\n. ",
    "BenV": "Would be great to get this merged, we also noticed the poor compression ratio. \n. I'm not against that, but in this case I think Z_SYNC_FLUSH is \"correct\", it doesn't quite make sense to restart the compression for each packet, if that is the desired behavior it can be controlled with the server/client context takeover options, right? \nNote that the flush level (https://nodejs.org/api/zlib.html#zlib_zlib_flush_kind_callback) is not the same as the compression level. I was actually thinking of doing a pull for configuring the compression level this weekend, as we would like to change ours to fastest.\nMore on the flush modes can be found here: http://www.bolet.org/~pornin/deflate-flush.html, in particular: A full flush degrades the compression efficiency since it removes sequence sharing opportunities for the next 32 kB of data\n. ",
    "joux3": "Done @lpinca. Further review for the Sender.test.js is needed, I just changed the asserts as the actual byte counts changed after my fix. I'm not familiar enough with the codebase and WebSocket framing to verify if that is indeed OK.\n. Done. Though my files look awfully like the ones you just posted.\n. On the other hand the Autobahn report generator also runs on 9001. Maybe I'll add a runtime option for that while defaulting to 9001.\n. ",
    "andrija-hers": "@JacksonTian I'll do my best, asap\n. ",
    "karpotkin": "@lpinca, PM2 cluster mode do not supported. Do you plan to do it?. ",
    "RowanHarley": "@ericmdantas I have that but I want server.on(\"open\", function(){ }); to check if the server started because I've been getting some errors recently about the websocket server not being open\n. ",
    "kurtextrem": "@ericmdantas Thank you, but it still doesn't work. The client (browser) seems to close the connection when I send a message.\n. no stack trace, no error message. I only see, that ws.on('close' is called upon sending a message. I'm unsure however who closes the connection.\nClient side code is here: https://github.com/plouc/mozaik/blob/master/src/browser/stores/ApiStore.js\n. I \"fixed\" it through switching to Socket.IO. \nI've seen that the handshake socket io does also doesn't complete (no server response), but the socket doesn't close and data is sent through XHR requests.\n. ",
    "steffansluis": "I seem to be having the same problem...\n. ",
    "PokemonAshLovesMyTurkeyAndILikeYouTwo": "@3rd-Eden Stop censoring the benchmarks to continue to defend your code. perMessageDeflate is enabled by default, which causes massive performance degradation.\n\nws: The fastest RFC-6455 WebSocket implementation for Node.js.\n\nThis is simply untrue, you are lying and trying to censor / hide other modules that far surpass this module in performance.\nSpecifically:\nhttps://github.com/alexhultman/uWebSockets/issues/152#issue-160389186\nAlmost a 7-8x performance degradation even with perMessageDeflate set to FALSE. \nStreisand Effect will be in full force.\n. +1.\n@3rd-Eden  You are correct about the perMessageDeflate issue and I apologize for my tone on my last issue. It does use more CPU to save the cost of bandwidth. However.....\nThe problem is about this benchmark:\nhttps://github.com/alexhultman/uWebSockets/issues/152#issue-160389186\nThe performance difference between ws and uws is drastic. Even if you disable the perMessageDeflate setting, uws is still around 7-8x faster than ws. And, the perMessageDeflate setting is enabled by default.\nAfter looking at the benchmarks here, and when perMessageDeflate is enabled... the performance difference is around 16x... These results are when perMessageDefault is enabled on ws\nAnd, the description of this module is ws: The fastest RFC-6455 WebSocket implementation for Node.js.. That's just not simply true anymore. @3rd-Eden  It's time to let it go.\n. Oops yeah you're right. I was just assuming since perMessageDeflate is enabled by default (and no documentation about it) -- most people probably wouldn't of known when doing their own benchmarks.\nBut yeah, it's technically not fair. I'll edit my post ty\nEdit: Seems like I'm a retard, it is documented @alexhultman showed below -- my bad\n. ",
    "manast": "It still says fastest actually. \n\n. ",
    "cblair": "0.10.42.\n. Just looking at this stack above, there's multiple entries for a few of the same files/line numbers, so I bet that's a problem. Not sure what the state that causes it would be though:\nat Sender.applyExtensions (/var/www/anyrun/anyrunexp/node_modules/ws/lib/Sender.js:287:5) (x2)\nat /var/www/anyrun/anyrunexp/node_modules/ws/lib/Sender.js:120:10 (x2)\nat Sender.flush (/var/www/anyrun/anyrunexp/node_modules/ws/lib/Sender.js:268:3) (x2)\nAnd this is just the end of the stack, so probably lots more in the full stack trace. Kind of feels like some recursion is being used here, instead of some iteration. That would fix the max call issue, but could be a nightmare to restructure. But at least should give a good place to start looking.\n. ",
    "AlexeyLapshin": "``` buffer.js:791\n  const buffer = this.subarray(start, end);\n                      ^\nRangeError: Maximum call stack size exceeded\n    at new Uint8Array (native)\n    at Buffer.subarray (native)\n    at Buffer.slice (buffer.js:791:23)\n    at allocate (buffer.js:186:23)\n    at Function.Buffer.allocUnsafe (buffer.js:152:10)\n    at new Buffer (buffer.js:96:19)\n```\nv5.12.0\n. Unfortunately not, it happens spontaneously, that's a full stack:\nRangeError: Maximum call stack size exceeded\n    at new Uint8Array (native)\n    at Buffer.subarray (native)\n    at Buffer.slice (buffer.js:791:23)\n    at allocate (buffer.js:186:23)\n    at Function.Buffer.allocUnsafe (buffer.js:152:10)\n    at new Buffer (buffer.js:96:19)\n    at Sender.frameAndSend (/var/www/anyrun/anyrunexp/node_modules/ws/lib/Sender.js:185:22)\n    at /var/www/anyrun/anyrunexp/node_modules/ws/lib/Sender.js:126:12\n    at Sender.applyExtensions (/var/www/anyrun/anyrunexp/node_modules/ws/lib/Sender.js:287:5)\n    at /var/www/anyrun/anyrunexp/node_modules/ws/lib/Sender.js:120:10\n    at Sender.flush (/var/www/anyrun/anyrunexp/node_modules/ws/lib/Sender.js:268:3)\n    at /var/www/anyrun/anyrunexp/node_modules/ws/lib/Sender.js:270:10\n    at /var/www/anyrun/anyrunexp/node_modules/ws/lib/Sender.js:127:7\n    at Sender.applyExtensions (/var/www/anyrun/anyrunexp/node_modules/ws/lib/Sender.js:287:5)\n    at /var/www/anyrun/anyrunexp/node_modules/ws/lib/Sender.js:120:10\n    at Sender.flush (/var/www/anyrun/anyrunexp/node_modules/ws/lib/Sender.js:268:3)\n. ",
    "KamalAman": "Well the recursion is in the flush function: \n```\nSender.prototype.flush = function() {\n  if (this.processing) return;\nvar handler = this.messageHandlers.shift();\n  if (!handler) return;\nthis.processing = true;\nvar self = this;\nhandler(function() {\n    self.processing = false;\n    self.flush();\n  });\n};\n```\nWhere the handler's callback calls self.flush. Therefore if this.messageHandlers length is too large then you will get a stack overflow exception. \nI propose that this is changed to an iterator instead of recursion. \nI don't understand why the messageHandlers take in a callback. It doesn't seem like they are asynchronous since the callback is always called right away. . @lpinca It does seem like it should be fixed on master. Any plans on a release date?. ",
    "konstantinzolotarev": "please release this fix. \nIt's really brings tones of pain on projects with 10k+ users. @lpinca working 2 days - looks good for now.. ",
    "lc00": "awesome.  Thanks for the swift response!\n. ",
    "hd19861028": "thanks. ",
    "hisune": "Because I think 30 sec is too short.\n. sorry, I was wrong. closeTimeout not heartbeat timeout.\n. ",
    "gearintellix": "anyone can tell me how to reconnect this socket?\ni try using like w3c socket,\n```\nvar ws=require(\"ws\");\nvar wsx;\nvar init=function() {\n   wsx=new ws(\"ws://example.com\");\n   wsx.on(\"close\",function() {\n      console.log(\"try to reconnect\");\n      init();\n   };\n}\ninit();\n```\nbut it not worked, no callback after reconnect. ",
    "PArns": "I've the exact same problem! I had to implement my own reconnect handling but more the WebSocket doesn't recognize a connection termination which is not caused by the server (client connection/internet issues). This is really a big problem here :(\nYou can easily debug/test that by connecting to a WS Server and then pulling the LAN cable. ",
    "mitchcapper": "First you could use ping/pong and if no pong is returned within X time assume it failed no?  Also I find on connection issues (with ping/pong) the ready state of the socket will change so reconnecting then.  it would be nice if there was a reconnect or \"open\" call rather than having to create a new web socket (but fairly minor).. ",
    "aleqx": "Sorry for necro. Do i take it that there is still no auto-reconnect feature, @lpinca ? The link you usggested above is when you implement both client and server. I connect to a public wss:// server which doesn't know ping/pong'ing. I just want to continuously try to reconnect when the connection drops, regardless of why it dropped.\nI look for a simple but reliable wrapper code to implement reconnection but didn't find much. I implemented my own, with timeout too, inspired from https://github.com/joewalnes/reconnecting-websocket/blob/master/reconnecting-websocket.js, and I'm leaving it below - please do feel free to point out if it can be made more reliable.\n```js\nvar timeout = 10; // seconds\nfunction connect(address, protocols, options) {\n    let ws = new WebSocket(address, protocols, options);\n    let timerTimeout = setTimeout(() => ws.terminate(), timeout * 1000); // force close unless cleared on 'open'\n    ws.on('open', () => {\n        console.log('Opened. Clearing timeout ...');\n        clearTimeout(timerTimeout);\n        // do your thing here, like ws.send(...);\n    });\n    ws.on('message', data => console.log(data.slice(0, 76)+' ...'));\n    ws.on('close', () => {\n        clearTimeout(timerTimeout);\n        console.error('Websocket connection closed. Reconnecting in %f seconds ...', timeout);\n        setTimeout(() => connect(address, protocols, options), timeout * 1000);\n    });\n    ws.on('error', reason => console.error('Websocket error: ' + reason.toString()));\n    return ws;\n}\n```\nNote to self: error is not emitted if ws.terminate() is called, but close is.. Is the 'close' event emitted if I call .terminate()?. I looked at the code and I gather it emits close if the state is CONNECTING but not otherwise. In the code below abortHandshake() does emit close but then you have this._socket.destroy() which doesn't trickle up to the WebSocket instance ... what am I missing?\n```\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\nif (this._socket) {\n  this.readyState = WebSocket.CLOSING;\n  this._socket.destroy();\n}\n\n}\n```. That's what I missed! Many thanks.. ",
    "jgrund": "Any update on this? This is many commits behind master now.. ",
    "mitevdev": "That's correct. This is the way how I am doing it:\n```\nconst server = http.createServer(app);\nconst WebSocketServer = require('ws').Server;\nconst websocket = new WebSocketServer({server: server});\nwebsocket.on('connection', (client) => {\nclient.on('message', (message) => {\n    console.log(`message: ${message}`);\n    client.send(message);\n});\n\nclient.on('close', () => {\n    console.log('close');\n});\n\n});\nserver.listen(port);\n```\n. ",
    "fippo": "i also saw this, after upgrading to node 6.3.0. The first argument to fastCopy is -1 which is clearly odd.\nAnecdotally I am also seeing a lot of off-by-one errors where the last data byte is not delivered.\n. ",
    "j-mcnally": "upgrading to 1.1.1 resolved this issue for me.\nI will agree that i am on 6.3.0, when i got the error with the < 1.0 ws.\nMy work around was to shrinkwrap and force update ws which otherwise seemed backwards compatible with the code depending on it.\n. Yes best bet is to PR / open issues with packages depending on old\nversions. Kurento in my case.\nOn Thursday, July 14, 2016, Robert Kawecki notifications@github.com wrote:\n\nI concur. Upgrading to 1.1.1 (got pulled automatically by npm when\nupgrading to a newer socket.io release) has resolved this. May be\nbeneficial to close the issue, but leave it here for posterity.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/issues/778#issuecomment-232736355, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AA2d3vOnIwZo9R8g8ZNMGFynr79e12__ks5qVnOHgaJpZM4JKCYP\n.\n\n\nhttp://www.kohactive.com\nJustin McNally\nTechnology Director / Principal\np: 312.273.3074 <+13122733074> | e: justin@kohactive.com | skype:\njustinmcnally211 http://is.gd/UuXAGG\n  https://github.com/j-mcnally  https://twitter.com/j_mcnally\nhttps://www.linkedin.com/profile/view?id=143776726\n. ",
    "MarcBanc": "I think problem is much worse. See this:\nSend ok:\n\n[2016-07-20T12:44:17.705Z] TRACE: ts_lib/11413 on GlobeTwo: Sending data...\n    data: {\"method\":\"virtual.setProperties\",\"params\":{\"virtual\":65429,\"properties\":{\"versionTs\":1469018657705}},\"id\":1847}\n[2016-07-20T12:44:17.757Z] TRACE: ts_lib/11413 on GlobeTwo: Message received.\n    data: {\"type\":\"result\",\"id\":1847,\"result\":true}\n\nserver got it ok:\n\n2016-07-20 12:44:17.705 [info] <0.12884.0>@stl2_api_session:try_parse_incoming_json:257 [<<\"devsuperuser\">>] incomming json: {\"method\":\"virtual.setProperties\",\"params\":{\"virtual\":65429,\"properties\":{\"versionTs\":1469018657705}},\"id\":1847}\n2016-07-20 12:44:17.757 [info] <0.12884.0>@stl2_api_session:send_encoded_response:178 [<<\"devsuperuser\">>] outgoing json: {\"type\":\"result\",\"id\":1847,\"result\":true}\n\nnext:\n\n[2016-07-20T12:44:17.931Z] TRACE: ts_lib/11413 on GlobeTwo: Sending data...\n    data: {\"method\":\"virtual.setProperties\",\"params\":{\"virtual\":934,\"properties\":{\"versionTs\":1469018657931}},\"id\":1849}\n[2016-07-20T12:44:17.932Z] TRACE: ts_lib/11413 on GlobeTwo: Message received.\n    data: {\"type\":\"error\",\"id\":0,\"reason\":\"invalid_json\"}\n\nbecause:\n\n2016-07-20 12:44:17.931 [info] <0.12884.0>@stl2_api_session:try_parse_incoming_json:257 [<<\"devsuperuser\">>] incomming json: {\"method\":\"virtual.setProperties\",\"params\":{\"virtual\":934,\"properties\":{\"versionTs\":1469018657931}},\"id\":1849\n2016-07-20 12:44:17.932 [warning] <0.12884.0>@stl2_api_session:invalid_json_response:441 Received malformed json, detailed error message: {110,truncated_json}\n2016-07-20 12:44:17.932 [info] <0.12884.0>@stl2_api_session:send_encoded_response:178 [<<\"devsuperuser\">>] outgoing json: {\"type\":\"error\",\"id\":0,\"reason\":\"invalid_json\"}\n\nas you see server did not recieved last \"}\" \ni have NodeJS 6.3.0 and updated to lastest socket.io because of \"RangeError: out of range index\" mentioned at start.\n. ",
    "shaniceweiwei": "stupid question... how do i upgrade ws to 1.1.1?\n. @sushantdhiman how to switch back to v6.2? i'm on sw@1.1.1 and node@ 6.3.0... the same problem never goes. :(\n. ",
    "deep9": "I can confirm the problem also on Node v6.5.0, but with ws@0.5.0. Now trying on ws@1.1.0 (socket.io dependency)\n. ",
    "coffenbacher": "@deep9 any luck? I'm getting this as well on Node v6.6.0 and ws@0.8.1\n. ",
    "yosheeck": "Just a report: \nI confirm seeing that quite often with <1.0 version, and I confirm in 1.1.1 it doesn't happen anymore (in the same conditions). I think it's fixed, at least in my environment,. ",
    "lazamarius": "Hi,\nI see this issue again with node 6.5.0 and WS 1.1.1.\nTue, 04 Apr 2017 03:48:03 GMT [Process-app] uncaughtException: out of range index\nRangeError: out of range index\n    at RangeError (native)\n    at fastCopy (/var/execui/node_modules/ws/lib/Receiver.js:414:24)\n    at Receiver.add (/var/execui/node_modules/ws/lib/Receiver.js:94:3)\n    at Socket.realHandler (/var/execui/node_modules/ws/lib/WebSocket.js:825:20)\n    at emitOne (events.js:96:13)\n    at Socket.emit (events.js:188:7)\n    at readableAddChunk (_stream_readable.js:176:18)\n    at Socket.Readable.push (_stream_readable.js:134:10)\n    at TCP.onread (net.js:543:20)\nCan anyone help on this?. @lpinca , thanks, will try that.\nDo you know how I can reproduce this issue to test after the upgrade?. ",
    "frabaglia": "Using \n\"socket.io\": \"^1.7.3\",\n\"ws\": \"^2.2.3\"\nand having the issue: Caught exception: RangeError: out of range index\nOn node v6.6.0. hi @lpinca.\nthanks, for your quick answer. There is a stable setup you could advice for production enviroment ?\nOr there is recomended version dependency list ?. that's ok @lpinca. \nok @MonkeyDo thanks a lot i will try. If a fix i will post my setup here again to the posterity, thanks again everybody.. @lpinca would you recommend to update to:\n- socket.io 2.0.1\n- engine.io 3.1.0\n- ws 2\n- node 6.6.0\n?\nafter reading deeply all this thread i don't really get wich version of node works with ws1.x or ws2.x\n. ",
    "MonkeyDo": "@FrancooHM I've been using an npm-shrinkwrap file to force an adequate version of ws package is use by dependencies. So far no problem.. ",
    "mkschreder": "How about sending server ip as default origin?\nOn 14 Jul 2016 11:25, \"James Ide\" notifications@github.com wrote:\n\noptions.origin is supported:\nhttps://github.com/websockets/ws/blob/master/lib/WebSocket.js#L702. You\nneed to explicitly specify it because Node has no concept of the current\norigin.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/issues/779#issuecomment-232613625, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AERqicTf7I1tF6DCLqYf8WFwipVVj66pks5qVgCCgaJpZM4JKO_v\n.\n. \n",
    "lamaslam": "same problem here, WS only works if I run it on Electron.\nBut after I package it with webpack and host will express, it just don't work with browser (Chrome v52.xxx)\nWhen I dig into that, I found the request is sent with http:// insteads of ws://   is that normal? \nMay be any modules missing? any ideas?\n. ",
    "darkpassenge": "https://github.com/websockets/ws/issues/790#issuecomment-242308095\n@lamaslam I have the same problem. \"request is sent with http:// insteads of ws://\"\nUsing browser it always goes to http.\nDid you get an answer to that?. ",
    "maxjoehnk": "Seems to be a problem that I'm using mqtt and socket.io with the same http server, not sure what exactly is causing it but I will close this issue.\n. ",
    "DSigmund": "I must reopen this, as i have the same error...\nBut i am not using mqtt, just some services using socket.io to send messages and one service, that catches them all and throws this error...\n. ",
    "NoNameProvided": "The EADDRINUSE error means that the specified address (0.0.0.0:8088) is already used by an another process. Try to bind to a different port. \nOn a Mac you can type into your terminal: lsof -i tcp: 8088 which will list the process using using that port. On windows you can use the resource monitor. \nHope this helps.\n. ",
    "SonnyRajagopalan": "I am closing this issue as my question is poorly written. I will open another issue with my question.\n. Yep! Spot on--thanks! Where can I find more information on bind ()? This was something I am totally not aware of, but I am total node noob. I could also not find anything on the Internet but because both bind and node are otherwise well used search terms...\n. ",
    "cyrus-and": "You may want to know that git-bisecting this issue the \"first bad commit\" is a810bfa44f08c84ff3f43cc71327e9bb5fb273ef.\n. Indeed, the issue disappears (still 1006 though) if I set the option perMessageDeflate to false.\n. > I think you'll get the same result if you use a different client. Did you try with faye-websocket which also supports permessage-deflate?\nThat's exactly the case, I just tried with faye-websocket and the behavior is the same.\nWhile I agree that this is an \"abnormal closure\", I'm not sure that the RFC states than an endpoint MUST/SHOULD discard the payload in such case.\nThe fact is that data is actually received in both cases (permessage-deflate or not) but the library delivers to the application only when the compression is not used. I spot some inconsistency here...\n\nThe frame has not been decompressed yet\n\nOf course I'm assuming that the compressed payload contains the whole (final) message. In my case I've 77 byte worth of compressed payload while the plaintext is 83 byte long, which seems legit IMHO.. Yes, I can confirm, it works. Thank you so much!. ",
    "MeirionHughes": "Could this be updated and reviewed please? Seems like a rather important feature. . ",
    "jlaine": "If anyone is wondering : this PR is required to be able to use Basic Authentication. As things stand, it is not possible to add a WWW-Authenticate header to the upgrade response, so the browser just gives up.. ",
    "3490": "node --expose-gc server.js\nAfter call gc(); every 30 sec.\nsetInterval(function () {\n  console.log(\"Before:\",process.memoryUsage());\n  gc();\n  console.log(\" After:\",process.memoryUsage());\n},30000);\n```\nBefore: { rss: 43212800, heapTotal: 35234912, heapUsed: 21054984 } // rss 40MB\n After: { rss: 34332672, heapTotal: 20804448, heapUsed: 16247984 }\nBefore: { rss: 34361344, heapTotal: 20804448, heapUsed: 17081824 }\n After: { rss: 33681408, heapTotal: 21836384, heapUsed: 16218136 }\n// connecting...\nBefore: { rss: 538062848, heapTotal: 131204960, heapUsed: 105930352 }\n After: { rss: 539049984, heapTotal: 132236896, heapUsed: 89826384 }\nBefore: { rss: 849797120, heapTotal: 185897568, heapUsed: 153704744 }\n After: { rss: 818884608, heapTotal: 154956128, heapUsed: 139841496 }\n// close all connections (5000 clients)\nBefore: { rss: 843161600, heapTotal: 197248864, heapUsed: 142158408 } // rss 800mb\n After: { rss: 840036352, heapTotal: 194153056, heapUsed: 84102104 }\nBefore: { rss: 840249344, heapTotal: 195172960, heapUsed: 93208432 }\n After: { rss: 767713280, heapTotal: 121946208, heapUsed: 66619920 }\nBefore: { rss: 767762432, heapTotal: 121946208, heapUsed: 70858376 }\n After: { rss: 714121216, heapTotal: 86860384, heapUsed: 66315040 }\nBefore: { rss: 714420224, heapTotal: 87892320, heapUsed: 66653904 }\n After: { rss: 705867776, heapTotal: 79636832, heapUsed: 66268472 }\nBefore: { rss: 706244608, heapTotal: 79636832, heapUsed: 69060584 }\n After: { rss: 703946752, heapTotal: 77572960, heapUsed: 66125224 }\nBefore: { rss: 704274432, heapTotal: 78604896, heapUsed: 68620712 }\n After: { rss: 703889408, heapTotal: 78604896, heapUsed: 66144408 }\nBefore: { rss: 704372736, heapTotal: 78604896, heapUsed: 66524424 }\n After: { rss: 704102400, heapTotal: 78604896, heapUsed: 66164032 }\nBefore: { rss: 704462848, heapTotal: 80656736, heapUsed: 68852232 }\n After: { rss: 704147456, heapTotal: 79636832, heapUsed: 66150056 } // rss 700mb\nBefore: { rss: 704675840, heapTotal: 79636832, heapUsed: 68907184 }\n```\nTested in node 4.4.7 and node 6.3.1, the result is similar.\n. ",
    "leebenson": "this seems like a pretty major issue... is there an ETA for a fix? or is this is an issue in node proper?. Awesome, thanks @lpinca. I'm surprised I haven't seen this pattern promoted more. IMO, it's a huge win for Websockets to do a session handshake once and allow future messages to re-use it. In my current project, that'd shave ~50ms vs every http request, which is pretty major. Thanks!\n. ah, perfect - thanks!\n. ",
    "binginto": "@lpinca \nLike  this   \nserver \n```js\nvar WebSocket = require('ws');\nvar wss = new WebSocket.Server({\n  perMessageDeflate: false,\n  port:8001\n});\nwss.on('connection', function connection(ws) {\n  ws.on('message', function incoming(message) {\n    console.log('received: %s', message);\n  });\n  ws.send('something');\n});\n```\nclient\n```js\nvar WebSocket = require('ws');\nfunction cerateclient(){\n  var ws = new WebSocket(\"ws://localhost:8001/\");\n  ws.onopen = function() {\n   ws.send('connnect');\n  };\nws.onmessage = function(evt) {\n   console.log(evt.data);\n  };\n}\nfor(var i =0 ; i  < 200000 || i == 20000; i++){\n      cerateclient();\n }\n```\nwhy  after  20000 times connect and close ? Then wait serval hours ,many times of gc cleaned no used memory. The rss  still  will not back to the original level, and it still larger than the original level .Also, the \nmore clients connect  and close .The rss is  larger.  I cant understand this point ,which oppuied the memory ?. ",
    "maxcnunes": "@lpinca any plan publishing it?. In case someone else needs it too. There is a good example here as well: https://github.com/websockets/ws/pull/885#issue-187590719.. ",
    "x13machine": "I care about the \"Host\" header not any other header.\n. ",
    "timjrobinson": "@JacksonTian done. I found the issue happens when you send too many messages while one is still processing. \n. ",
    "zertosh": "@JacksonTian any way you can publish a patch release with this fix? I'd very much appreciate it.\n. ",
    "dwang2": "+1 \nFacing the same issue where \"follow-redirect\" isn't supported. \n. ",
    "danields761": "Hello!\n@lpinca, is there any way to follow them?. ",
    "blandinw": "Not sure how you'll prioritize this, so here's our use case.\n301 redirects are often used when server infra changes, etc.\nIn our case, we absolutely have to redirect, but users of this library will break when we do so.\nPlease upvote the original post if you need this feature. @flavioespinoza I'm not sure what you're trying to achieve, but I doubt you'll succeed with personal attacks. People working on this project do so on their spare time and let you benefit from their efforts for free. \nI understand (and share to some extent) your frustration, but maybe you can channel this energy into a clean pull request to fix this once and for all?\nIn any case, let's try to be civil online, especially on GitHub :-) . ",
    "jklepatch": "I started a fix, in lib/WebSocket.js.\nDuring handshake, if server answer by 301 or 302 status code, initAsClient() is called recursively with updated address. It also store the state isRedirecting in the options object to avoid redirect loop if new handshake attempt result in another redirection.\nI tried the testing code provided on top of this thread, and it seems the socket is created properly. If this approach receive a good feedback, should we also check that the location header provided by server is well formed before trying another handshake? if yes, is there a spec about what is a well formed url for a websocket?\nfunction initAsClient (address, protocols, options) {\n  options = Object.assign({\n    protocolVersion: protocolVersions[1],\n    protocol: protocols.join(','),\n    perMessageDeflate: true,\n    handshakeTimeout: null,\n    localAddress: null,\n    headers: null,\n    family: null,\n    origin: null,\n    agent: null,\n    host: null,\n    isRedirection: false,\nline 654:\n``\n  this._req.on('response', (res) => {\n    if(!options.isRedirection && ((res.statusCode == 301) || (res.statusCode == 302))){\n      options.isRedirection = true;\n      initAsClient.call(this, res.headers.location, protocols, options);\n      return;\n    }\n    if (!this.emit('unexpected-response', this._req, res)) {\n      this._req.abort();\n      this.emit('error', new Error(unexpected server response (${res.statusCode})`));\n      this.finalize(true);\n    }\n  });. ",
    "luislobo": "+1 it should handle redirections, it's a normal use case.. So, https://github.com/websockets/ws/pull/1204 does not fix the issue completely, right?. ",
    "huan": "+1 it should handle redirections, it's a normal use case.\n@jklepatch How about yoru fix, did you finish it?. @lpinca Yes, I understand that it is documented very clearly.\nThis issue comes out because there might be a module using ws, but others module require this module without any knowledge of the limitation of ws.\nIt seems I just sent a duplicated PR very similar to #661. \nMy suggestion is that we should revisit this problem and at least warn the user by throwing an exception.. @lpinca Changed as you request.. @3rd-Eden Thanks for accepting this.\nI feel this will not breaking anything because according to the current code base, the return value of require('ws') will neither be undefined nor null, so the || WebSocket part in the fallback you mentioned will never get chance to be executed.. @lpinca I believe it will not throw in the Node.js environment.\nBecause in Node.js global.WebSocket will be undefined, then WS will be set as require('ws'), which should be right.. Yes, you are right. \nI did not consider the browserify case.. Glad to see that, cheers!. ",
    "flavioespinoza": "@bradisbell Good advice.  I will.  It will take me a few days as I am knee deep in deployment, but I'll fix it and submit a PR.\nHowever, I suspect (as with this thread and this bug) it will be ignored.  But, we shall see.. ",
    "kazuhitoyokoi": "I'm also interested in the redirects.. ",
    "Lolums": "Oh, I've found that this issue only occurs on the second connection from the same browser (haven't tried any more concurrent ones), aka if I open a second tab that connects in exactly the same way.\nIt sends one packet, which gets there and then disconnects due to being in the wrong connection state.\n. Not at all!15.09.2016, 21:21, \"Joshua Wise\" notifications@github.com:Sounds like you figured it out. Any objections to closing this issue?\n\u2014You are receiving this because you authored the thread.Reply to this email directly, view it on GitHub, or mute the thread.\n. ",
    "hedefalk": "As of https://github.com/websockets/ws/blob/master/doc/ws.md#new-wswebsocketaddress-protocols-options. Protocols param is missing.\n. Oh, so sorry, wrong browser tab, wrong repo :)\n. ",
    "donjae": "I realized my silly error. I created another var alias for this.websocket and it created a new instance of the websocket. \n. ",
    "bangbang93": "client written in c++ use https://github.com/dhbaird/easywsclient\nI tried to capture packet from server and client.Maybe client has some bug and send a Unknown opcode 0x05.\n\nws try to close the connection,and emit the close event,but actually no packet was sent(wireshark didn't capture any close opcode packet),so client keeps going ,but server run into unstable.\nclient send two unknown opcode packet\n\n\n. ",
    "8alery": "Hello! \nI removed length check and included a test. Test shows how now we could connect to either 'ws://localhost:8080/?token=qwerty' or 'ws://localhost:8080?token=qwerty'.\n. ",
    "Aleksey-Danchin": "I talk about docs\n. Sorry, WebSocket extend from EventEmitter )))\n. Add reconnection event for sockets.\n. Merge this one! Needed right now =). ",
    "taoqf": "Actually, It is not as simple as we thought, I' afriad you can find the code webpack generated.\nhttps://github.com/mqttjs/MQTT.js/issues/462. https://github.com/webpack/webpack/issues/5367. ",
    "sgress454": "@coolaj86 @lpinca Would you consider backporting this for a 1.1.2 release?  That would allow projects that still need to support Node < 4 to get this security patch.\nI forked and patched the 1.1.1 code here: https://github.com/sgress454/ws/tree/backport-crypto-patch-to-1.0, but not sure if there's any way to make a PR out of that unless there's a 1.x branch to submit it against.. https://github.com/websockets/ws/pull/994\nThanks!. Done!. ",
    "LightningShock": "i second proxy support. ",
    "kmansoor": "Support for node cluster?. Fully aware that this is not the right place to ask this, but I'm in the middle of rewriting a production app (Express 4.x) to use Ajax instead of 'ws' because it started to fail in a node cluster'ed env. Is it possible for you to point me to any docs or example? . Great, thank you so much.. ",
    "Bezdekm": "Ok, thanks. So I can use native WebSocket object in the client library, on the server I will use this WS package and together it will works well?\n. ",
    "semiromid": "Hi, lpinca. I get it error if i use browser on Android Opera 24.0. 1565.82529\n. I get:\nundefined\n[Error: invalid error code]\n[Error: invalid error code]\nws.on('error', (err) => {\n              // Handle the error.\n              console.log(err.code);\n              console.log(err);\n              console.log(util.inspect(err, false, null));\n            });\n. If i remove - ws.on('error', (err).......\n```\nevents.js:154\n      throw er; // Unhandled 'error' event\n      ^\nError: invalid error code\n    at Receiver.error (E:\\Developers\\WebDeveloper\\OpenServer-WebProg\\domains\\ws-\nnodejs\\node_modules\\ws\\lib\\Receiver.js:321:18)\n    at E:\\Developers\\WebDeveloper\\OpenServer-WebProg\\domains\\ws-nodejs\\node_modu\nles\\ws\\lib\\Receiver.js:683:16\n    at Receiver.flush (E:\\Developers\\WebDeveloper\\OpenServer-WebProg\\domains\\ws-\nnodejs\\node_modules\\ws\\lib\\Receiver.js:347:3)\n    at Receiver.opcodes.8.finish (E:\\Developers\\WebDeveloper\\OpenServer-WebProg\\\ndomains\\ws-nodejs\\node_modules\\ws\\lib\\Receiver.js:698:12)\n    at Receiver. (E:\\Developers\\WebDeveloper\\OpenServer-WebProg\\domai\nns\\ws-nodejs\\node_modules\\ws\\lib\\Receiver.js:661:33)\n    at Receiver.add (E:\\Developers\\WebDeveloper\\OpenServer-WebProg\\domains\\ws-no\ndejs\\node_modules\\ws\\lib\\Receiver.js:103:24)\n    at Socket.realHandler (E:\\Developers\\WebDeveloper\\OpenServer-WebProg\\domains\n\\ws-nodejs\\node_modules\\ws\\lib\\WebSocket.js:825:20)\n    at emitOne (events.js:90:13)\n    at Socket.emit (events.js:182:7)\n    at readableAddChunk (_stream_readable.js:153:18)\n``\n.info.request` ?\n. I don't find IP address client on server - \nconsole.log(info.req);\n console.log(util.inspect(info, false, null));\n. lpinca  - Very Thanks You!!! \n. maybe ?\nsetInterval(function() {\nws.pong('pingdata');\n}, 60000);\n. How of clint send on server ping?\n. GoodWork. ",
    "zia942": "Been at this exact spot for 2 hours now! Google, SO, WS docs, everything. :weary: \n- info.req.remoteAddr is undefined\n- info.req.connection.remoteAddr is undefined\n- info.req.socket.remoteAddr is undefined\n- info.req.connection.socket is undefined\n- info.req.socket._socket is undefined\n- info.req.socket.upgradeReq is undefined\nEDIT: My bad... Should be .remoteAddress not .remoteAddr\n. IKR? If req is a copy of the Node.js http.ClientRequest, remoteAddr should be at req.connection.remoteAddr, except it's not...\nnew ws.Server({\n    server,          // (server instanceof http.Server) === true\n    verifyClient(info) {\n        console.log(info.req.connection.remoteAddr);\n        return true;\n    },\n});\nYields\nundefined\non connection.\nCan someone reproduce?\nEDIT: Should be remoteAddress not remoteAddr...\n. Oh damn... I'm embarrassed now! Sorry. My bad. I have been reading that as remoteAddr, even when @Ipinca commented above. So sorry...\n. ",
    "sajadghawami": "@lpinca \njs\nwss.on('connection', (ws, req) => {\n  const { query: { token } } = url.parse(req.url, true);\n                                             ^\n   TypeError: Cannot read property 'url' of undefined\n});. @lpinca \nStill getting same error:\njs\nwss.on('connection', (ws, req) => {\n  const { query: { token } } = url.parse(ws.upgradeReq.url, true);\n                                                ^\n   TypeError: Cannot read property 'url' of undefined\n});\nUsing \"ws\": \"^4.0.0\". Ahh i see :) ... but using the one you posted before didn't work either with ws@4... \nyou mean this:\njs\nwss.on('connection', (ws, req) => {\n  const { query: { token } } = url.parse(req.url, true);\n                                             ^\n   TypeError: Cannot read property 'url' of undefined\n});. ",
    "R0lin": "Use request header 'sec-websocket-key'\n```JavaScript\nwss.on('connection', (ws, req) => {\n      var id = req.headers['sec-websocket-key'];\n  //do what ever you want...\n\n});\n```\n. ",
    "matinsoleil": "wss.on('connection', function connection(ws,req) {\n  var url = req.url;\n  url = url.substring(1);\n  room = 1;\n  ws['room']= url;\n// do any\n});\n. ",
    "bacek": "I'm not sure about documentation, but it does work as expected.\nThere is my log with NODE_DEBUG=net\n```\n19/10/2016, 9:47:14 AM INFO [VoiceSender@session.ts:36:21] Connecting to VoiceService\n19/10/2016, 9:47:14 AM INFO [session.ts:73:25] Connecting to wss://..../ via proxy http://localhost:3128/\n19/10/2016, 9:47:14 AM DEBUG [session.ts:84:25] Proxy options { port: 3128,\n  hostname: 'localhost',\n  method: 'CONNECT',\n  path: '...:443' }\nNET 8570: createConnection [ { host: 'localhost',\n    port: 3128,\n    hostname: 'localhost',\n    method: 'CONNECT',\n    path: null,\n    servername: 'localhost',\n    _agentKey: 'localhost:3128:',\n    encoding: null } ]\nNET 8570: pipe false null\nNET 8570: connect: find host localhost\nNET 8570: connect: dns options { family: undefined, hints: 40 }\nNET 8570: _read\nNET 8570: _read wait for connection\nNET 8570: afterShutdown destroyed=true ReadableState {\n  objectMode: false,\n  highWaterMark: 16384,\n  buffer: [],\n  length: 0,\n  pipes: null,\n  pipesCount: 0,\n  flowing: true,\n  ended: false,\n  endEmitted: false,\n  reading: true,\n  sync: false,\n  needReadable: true,\n  emittedReadable: false,\n  readableListening: false,\n  defaultEncoding: 'utf8',\n  ranOut: false,\n  awaitDrain: 0,\n  readingMore: false,\n  decoder: null,\n  encoding: null,\n  resumeScheduled: false }\nNET 8570: emit close\nNET 8570: afterConnect\nNET 8570: _read\nNET 8570: Socket._read readStart\nNET 8570: onread 39\nNET 8570: got data\n19/10/2016, 9:47:14 AM DEBUG [session.ts:89:29] Connected via proxy\nNET 8570: _read\n19/10/2016, 9:47:14 AM INFO [session.ts:40:25] Got socket [object Object]\nNET 8570: _read\nNET 8570: afterWrite 0\nNET 8570: afterWrite call cb\nNET 8570: onread 233\nNET 8570: got data\n19/10/2016, 9:47:14 AM INFO [session.ts:43:29] Connected to VoiceService\nNET 8570: _read\nNET 8570: afterWrite 0\nNET 8570: afterWrite call cb\nNET 8570: onread 48363\nNET 8570: got data\nNET 8570: _read\n19/10/2016, 9:47:16 AM DEBUG [session.ts:219:29] [1] SPOTTED\n19/10/2016, 9:47:16 AM INFO [session.ts:229:25] Creating VoiceSender \nNET 8570: onread 27025\nNET 8570: got data\nNET 8570: _read\nNET 8570: afterWrite 0\nNET 8570: afterWrite call cb\nNET 8570: onread 43\nNET 8570: got data\nNET 8570: _read\n19/10/2016, 9:47:17 AM DEBUG [onVoiceMessage@session.ts:251:21] [1] onVoiceMessage {\"command\":\"recogniser_connected\"}\n```\n. Hello.\nYour example is slightly different. Can you try to pass { socket: socket\n} to WebSocket constructor?\nOn Thu, 20 Oct 2016, 01:11 Luigi Pinca notifications@github.com wrote:\n\n@bacek https://github.com/bacek I tried to look into http.clientRequest\nhttps://github.com/nodejs/node/blob/92ece8671a3da8910bc8755b16ac121ba300a122/lib/_http_client.js\nto see if the socket option was undocumented but I couldn't find it so I\ntried with something very similar to your example:\n'use strict';\nconst http = require('http');const net = require('net');\nconst WebSocket = require('.');\nconst proxy = http.createServer();\nproxy.on('connect', (request, clientSocket) => {\n  const serverSocket = net.connect(80, 'echo.websocket.org', () => {\n    clientSocket.write(\n      'HTTP/1.1 200 OK\\r\\n' +\n      'Proxy-agent: Node.js\\r\\n' +\n      '\\r\\n'\n    );\nserverSocket.pipe(clientSocket);\nclientSocket.on('data', (data) => {\n  console.log(data.toString());\n  serverSocket.write(data);\n});\n});\n});\nproxy.listen(() => {\n  const request = http.request({\n    port: proxy.address().port,\n    hostname: 'localhost',\n    method: 'CONNECT'\n  });\nrequest.on('connect', (response, socket) => {\n    console.log(${response.statusCode} ${response.statusMessage});\n```\nconst ws = new WebSocket('ws://echo.websocket.org', { socket });\nws.on('message', (msg) => console.log(msg));\nws.on('open', () => ws.send('hello'));\n```\n});\nrequest.end();\n});\nThere is no activity on clientSocket so I doubt it works as intended\nunless I'm still missing something.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/pull/863#issuecomment-254824318, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AABSkeH5nz8p0SQLwGtNlM2dXq3X6onyks5q1iT5gaJpZM4KZRWI\n.\n. \n",
    "PradeepJaiswar": "What is a solution?. ",
    "JDarzan": "What is a solution? Please!!!. i have same error.. ",
    "Eric24": "We ended up using koa-socket, and have been very pleased with the results so far.. ",
    "lawlmart": "Yes, same result just without the deflate calls in the stack.\nI also checked gc and it appeared to be running fine, but I don't have much experience debugging this sort of thing.\n. No, I'm not.. ",
    "schwiet": "I too wonder if it has to do with client tracking, which does not seem to work for me, at least when a client has disconnected. If I print wss.clients.length each 'connection' event and then again each time a client hits onclose, I see something like:\n```\nclient connected:  1 clients\nclient disconnected. 1 clients\nclient connected:  2 clients\nclient disconnected. 2 clients\nclient connected:  3 clients\nclient disconnected. 3 clients\nclient connected:  4 clients\nclient disconnected. 4 clients\nclient connected:  5 clients\nclient disconnected. 5 clients\nclient connected:  6 clients\nclient disconnected. 6 clients\n```\nLooks like clients are not removed upon disconnection, which seems like it would be the expected behavior, right?. #967 possibly related.. ",
    "julien-c": "I would like to second this suggestion as well. To your point on shipping broken code @lpinca, in my opinion the likelihood would be really low considering you already maintain the document at https://github.com/websockets/ws/blob/master/doc/ws.md, and the typings are basically the same document (you can actually probably go from one to the other automatically). Your decision in the end though!. PS: you know this already, but upgrading to ws v4.0 in a large-ish codebase makes me sweat. I can read the breaking changes and skim through my code base, but having synchronized typings and checking if the \"compiler\" reports anything broken would make my life so much more joyful \ud83d\ude07. ",
    "saste": "I confirm that using websocket.onmessage = onMessage; is now working correctly, thanks!\n. ",
    "cmnstmntmn": "thank you, but i ended in this workaround\n``` js\nvar connections = []\nvar id;\nvar connectionIndex = (id) => connections.findIndex(el => el.wsId === id);\nwss.on('connection', function connection(ws) {\nid = ws.upgradeReq.headers['sec-websocket-key'];\n  connections.push({wsId: id});\nws.on('close', function() { \n  log('Disconnected: uid: %s, role: %s',connections[connectionIndex(id)].uid) \n  log(connections)\n\n}); \nws.on('message', function(response) {\n       var r = JSON.parse(response),\n            payload = r.payload;\n    switch(r.type) {\n      case \"join\":\n        connections[connectionIndex(id)].uid = payload.uid;\n        connections[connectionIndex(id)].role = payload.role;\n        connections[connectionIndex(id)].name = payload.name;\n        console.log('%s joined the game as a %s, having id %s',      \n        console.log(connections)\n        break;      \n      default:\n        console.log(\"msg: %s\", r);\n    }\n\n});\n});\n```\nand on the cliend i'm sending the data \n```\nvar S = (type, payload) => ws.send(JSON.stringify({\n  type: type,\n  payload: payload\n}));\nws.onopen = () => s('join', [{data}])\n```\n. ;) thank you\n. ",
    "crislin2046": "Thanks for the great workaround write up!. ",
    "antoniobusrod": "Hi @lpinca , is it possible to keep using different WS servers for different paths with noServer property? It seems it doesn't (I've started to do changes from 2.x in my code).. hi @lpinca , I'm preparing a PR, so let's discuss there. I thought that API should return same callback properties for connection event and handleUpgrade method callback.\nI don't really care, but if you want to accept this feature, I'll should update https://github.com/websockets/ws/blob/master/doc/ws.md#serverhandleupgraderequest-socket-head-callback documentation too.. ",
    "sugir93": "Thanks for the solution (Y). Check my working code.\nvar server = http.createServer().listen(300);\nvar wss_event = new WebSocket.Server({\n    noServer: true\n});\nserver.on('upgrade', function (request, socket, head) {\n    var pathname = url.parse(request.url).pathname;\nif (pathname === '/sim_world') {\n    wss_event.handleUpgrade(request, socket, head, function (ws) {\n        wss_event.emit('connection', ws);\n    });\n} else {\n    socket.destroy();\n}\n\n});. ",
    "mayeaux": "Can this be written somewhere in the docs? Lost a good chunk of time trying to figure out why one server worked but adding another blew up with an Invalid frame header error. I was just figuring there was a setting in the API for it that I couldn't find in the documentation, but yeah I'm using NGINX so I'll look into that, thanks. ",
    "yiakwy": "I am using the pattern. Can anybody explain to me what's meaning of websocket.emit(\"connection\")? can it work together with websocket.on(\"connection\", ws)? It seems that ws should be a handler not a socket for eventemiter\nIf I replace ws with a function named as `connection, I will get an error\n```bash\n[ws.handleUpgrade] emit connection event.\nevents.js:167\n      throw er; // Unhandled 'error' event\n      ^\nError [ERR_STREAM_WRITE_AFTER_END]: write after end\n    at writeAfterEnd (_stream_writable.js:243:12)\n    at Receiver.Writable.write (_stream_writable.js:292:5)\n```\n. Here is my code:\n```js\nfunction connection (socket, req) {\n    /https://github.com/websockets/ws/pull/1099/\n    if ('upgradeReq' in socket) {\n        req = socket.upgradeReq\n    }\nconst loc = url.parse(req.url, true).pathname\nconsole.log(`[server:connection] on connection from ${loc}`)\nif (!originIsAllowed(loc)) {\n    /*\n     * @desc handle unwanted request\n     */ \n    console.warn(`Visit from ${loc} is not allowed.`)\n}\n\nreq.__handled = false \nlet res = new http.ServerResponse(req)\nreq._websocket = ws\n// @see express-ws-router tricks\nres.writeHead = function(status) {\n    if (status > 200) {\n    debug(\"rejected %s, status %s\", loc, status)\n    socket.close()\n    req.__handled = true\n    }\n}\n\nconsole.log(`[server:connection] begin to handle using express router system ...`)\napp.handle(req, res, function() {\n    if (!req.__handled){\n    debug(\"websocket connection %s not handled\", loc)\n    socket.close()\n    }\n})\n/*\nsocket.on('message', function incoming(message){\n    console.log('received: %s', message)\n})\n\nsocket.send(\"connection built successfully!\")\n*/\n\n/*\n * @desc register websocket routers\n */\n\n}\nws.on(\"connection\", connection)\n/\n * @desc This techniques allow multiple websockets used, @see \n / \nfunction onUpgrade(req, HTTPSocket, head) {\n    const loc = url.parse(req.url).pathname\nswitch(loc) {\n    case \"/sim_world\":\n        // WebSocketServer handle it \n        // console.log(`Receive websocket connection request ${stringify(req, null, 2)} from ${loc}`)\n        console.log(`[server:onUpgrade] receive websocket connection request ${req} from ${loc}`)\n        ws.handleUpgrade(req, HTTPSocket, head, (socket) => {\n            // debug(\"ws.handleUpgrade %s, %s\", socket, req) \n            console.log(\"[ws.handleUpgrade] emit connection event.\")\n            ws.emit('connection', socket)\n        })\n        break\n    default:\n        console.log(`Not recognized websocket request ${loc}`)\n        HTTPSocket.destroy()\n}\n\n}\n```\nHere is my output\n```bash\n[server:onUpgrade] receive websocket connection request [object Object] from /sim_world\n[ws.handleUpgrade] emit connection event.\nevents.js:167\n      throw er; // Unhandled 'error' event\n      ^\nError [ERR_STREAM_WRITE_AFTER_END]: write after end\n    at writeAfterEnd (_stream_writable.js:243:12)\n    at Receiver.Writable.write (_stream_writable.js:292:5)\n    at Socket.socketOnData (/Users/lei.wang1/Github/RandomMapGenerator/backend/node_modules/ws/lib/websocket.js:788:35)\n    at Socket.emit (events.js:187:15)\n    at Socket.EventEmitter.emit (domain.js:442:20)\n    at addChunk (_stream_readable.js:280:12)\n    at readableAddChunk (_stream_readable.js:265:11)\n    at Socket.Readable.push (_stream_readable.js:220:10)\n    at TCP.onread (net.js:638:20)\nEmitted 'error' event at:\n    at Receiver.receiverOnError (/Users/lei.wang1/Github/RandomMapGenerator/backend/node_modules/ws/lib/websocket.js:698:13)\n    at Receiver.emit (events.js:182:13)\n    at Receiver.EventEmitter.emit (domain.js:442:20)\n    at writeAfterEnd (_stream_writable.js:245:10)\n    at Receiver.Writable.write (_stream_writable.js:292:5)\n    [... lines matching original stack trace ...]\n    at TCP.onread (net.js:638:20)\n```. I had the same problem when I am developing a customer websocket router based on express routing system.. copy. ",
    "timofverberg": "Neither can I. Closing!\n. ",
    "steffenagger": "Ok, thank you for your answer @lpinca !\nI'm working in an environment where clients rarely gracefully disconnects (they power off), so I'm in the worst case scenario most of the time :)\nI've moved to a different library. So feel free to close/discard this issue, if the current implementation is as intended.\n. Yes exactly.\n. ",
    "DigitalLeaves": "Thanks @lpinca, tried it, but I got the same results.\n. Is there something else I can do? I won't like to switch to a pulling mechanism in my app, but I need to get websockets to work in a HTTPS scenario. If I setup ws as a standalone service (not tied to express) I'm afraid I won't be able to bind the application user+session with the websocket connection.\n. Server version: Apache/2.4.10 (Debian)\nWell, to be honest, I didn't know of that module until websockets refused to work on HTTPS. I was using a simple mod_proxy with the ProxyPass and ProxyPassReverse until I had to make ws work through the proxy. \nHowever, I disabled it and it made no difference. The problem here is that websockets are not really playing nice the with apache proxy redirection... Or Apache is unable to properly handle those redirections.\nI am willing to try any other solution or way of having websockets working through HTTPS in my subdomain api.myserver.com. I guess this is a very common scenario, as node instances usually go through PM2 or similar to keep multiple alive instances, and nginx/apache is used as the webserver, thus needing some kind of proxy to tie node+ws to the https web service.\n. If you could have a look sometime and maybe give me an insight of what I'm doing wrong, it would be greatly appreciated \ud83d\ude0a\n. Hi there! curiously enough, that fixed it \ud83c\udf89. That extra \"/\" was really messing around with the Apache proxy configuration. I'm kind of pissed off of the lack of documentation on this existing on the internet.\nThank you very much for your support @lpinca, you really saved me from hours of banging my head against a wall. I was even thinking on dropping websockets altogether.\nThank you so very much!\n. ",
    "hazel0703": "hello guys how are you?? i am having a similar error and i do not know what to do?\nError during WebSocket handshake: Unexpected response code: 404, it does not connect to my app which is hosted at AWS - EC2 instance!! i would like to know if someone can help me?. @nitin992503  yes, at the end it was a problem with the IP address, you need to pass the public IP through the path (I have no idea what you are doing), also I have to start apache on the server side. ",
    "nitin992503": "https://github.com/websockets/ws/issues/893#issuecomment-326977639\n@hazel0703 \nhey there have you been able to solve it yet.\nI am in same the situation and i am unable to find a way out. ",
    "Jamesoncy": "how about doing this with ssl?. ",
    "icedcoke": "I solved the configuration problem of apache reverse proxy wss, and now publish the configuration parameters.\nLoadModule proxy_module libexec/apache2/mod_proxy.so\n LoadModule proxy_connect_module libexec/apache2/mod_proxy_connect.so\n LoadModule proxy_http_module libexec/apache2/mod_proxy_http.so\n LoadModule ssl_module modules/mod_ssl.so\n LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so\n```\n\nDocumentRoot \"D:/develop/Apache24/htdocs/test/public\"\nOptions -Indexes\n\nSSLEngine on   \nServerName my.server.com:443\n\nSSLProxyEngine On\nProxyPreserveHost On\nProxyRequests Off\n\nProxyPass / wss://127.0.0.1:1234/\nProxyPassReverse / wss://127.0.0.1:1234/\n\nSSLProtocol all -SSLv2 -SSLv3\n\nSSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM\n\nSSLCertificateFile \"D:/develop/Apache24/conf/cert/public.crt\"\n\nSSLCertificateKeyFile \"D:/develop/Apache24/conf/cert/1723000.key\"\n\nSSLCertificateChainFile \"D:/develop/Apache24/conf/cert/chain.crt\"\n\n\nSSLOptions +StdEnvVars\n\n\n\nAllowOverride All\n\nSSLOptions +StdEnvVars\n\n\n\n```\n. ",
    "raminrad": "Thank you for responding. After further investigation, I found that the server is in fact sending the correct number of bytes, and the issue is in fact in the browser, where the audio data is stored in memory and some of the bytes are word-aligned, and I have to unpack the data. \nI have posted this on stackoverflow for additional help. http://stackoverflow.com/questions/40657827/\nSorry for suspecting that the issue was with your code.\n. You are absolutely right! I switched to a different Web Socket node package and the person on stack overflow suggested that I pass the 'binary' encoding to Buffer, and when I did that, it fixed the problem. But after reading what you wrote, I removed the encoding fromfs.createReadStream and also from Buffer and that ALSO worked! Thank you for taking the time to review this. I am switching back to your package. It's so simple to use. Great job and thank you again for your attention.\n. ",
    "rico345100": "Oh, it works. Thanks. But still I need to use addEventListener, instead of on method.\n. ",
    "Emiya0306": "Got it. Now I run this session parse when socket connect event happen. Thanks! \ud83d\ude03 \n. ",
    "GeometricAlgorithm": "@lpinca Care to elaborate? How do I get the cookie/sid saved during verifyClient so that it is available in the connection event?. @lpinca TYVM for the swift response! I have been stuck on this for days.\nRight now I've got my code following the example, but the req object is undefined in the following lines:\nwss.on('connection', (ws, req) => {\n  ws.on('message', (message) => {\n    //\n    // Here we can now use session parameters.\n    //\n    console.log(`WS message ${message} from user ${req.session.userId}`);\n  });\n});\n. ",
    "GrosSacASac": "Good idea. I now see why you chose ultron. Where can I read more about the web socket internal API and how ws works ?. Allright, thanks have a great day ! :). ",
    "icecxh": "server\nindex=1\na=setInterval(function(){\n            var data={info:[[],1,xxx]};\n            var buf=messageSchema.encode(data);\n            for(var i=0;i<clients[index].length;i++){\n                if(clients[index][i].ws.readyState===1){\n                    clients[index][i].ws.send(buf);\n                }\n            }\n        },15)\nclient\nbeforeTime=0;\nws.onmessage()=function(e){\n       console.log(Date.now()-beforeTime);\n    beforeTime=Date.now();\n    var message=messageSchema.decode(e.data);\n        ................\n\nI test it at local area network,with my classmate's computer,thanks!. windows 7,when I test on one computer it's not happen(client and server both run on my own computer) ,but it's  appear when the server run on my computer and the client run on other computer .I found the server send the message as expected. the problem might on client side . And I'm not sure the reason,Maybe it's because of the network?   . I'm so sorry to bother you,the problem might on my computer's WLAN card, I try to test on other computer and it works as expected , thank you very much! . ",
    "AshleyScirra": "This also appears to be occasionally crashing a node server we run in production.\nIdeally the server will not crash if somebody sends it something invalid. This is a pretty nasty DOS vector. Shouldn't the server handle this reliably by default?. ",
    "vitorz": "Hi\nto be honest i was thinking to be in the forked project called streamws(maybe i clicked in the wrong link while i was in their website), the issue is related to forked version of the file that i mentioned. Sorry if it's not relevant for this project.. ",
    "Josema": "```js\nvar WebSocket = require('ws'),\n    wss = new WebSocket.Server({ port:1234 });\n//server\nwss.on('connection', function connection(client) {\n    client.send('something1');\n    setTimeout(function(){\n        serverConnection.close(); // Comenting this something2 will be handle\n        client.send('something2');\n    }, 2000)\n});\n//client\nvar serverConnection = new WebSocket('ws://localhost:1234');\nserverConnection.on('message', function incoming(message) {\n    console.log('received: %s', message);\n});\n``. Any help to disablepermessage-deflate`? Don't know how to do it.. It works! Thank you!. ",
    "WeeJeWel": "@lpinca I'm 99% that doesn't happen. The Remote class is only initiated once, and the this object is also bound to the onOpen method. I haven't seen it occur anymore, and didn't have time to test the snippet unfortunately. I'll close it for now!. ",
    "mercmobily": "Thanks Luigi, apologies for the silly question. I am now using ws a lot and it's working beautifully. Thanks @3rd-Eden . ",
    "lucj": "In verifyClient, I check the token provided in the query string but there is a check I cannot done without having access to ws.\nI then perform this second check (call to external api) within the .on('connection') callback but cannot properly close the socket is it fails:\n- ws.close() does not close the client\n- ws.destroy() is not available\nwhat is the correct way to close a socket from the server ?. @lpinca I need to perform an api call to get a list of ids to which the socket (ws) needs to subscribe to:\n\nin the verifyClient, I get the list (one api call) and reject the socket if it's empty\nin the on('connection') callback I get the list (same api call) and subscribe the socket to the ids\n\nObviously, performing twice the same call is not good, so I'll do it only in the callback and use the terminate() method.\nThanks for your help.. @lpinca I'm sure this will work, and is more elegant than performing twice the same call :)\nThanks, I'll try this approach.. ",
    "subwaystation": "@lpinca Thanks for the tipp above, works like a charm.. ",
    "erikpukinskis": "Disappointing to see you drop Node support! Won't be able to continue on in the 2.0 branch I suppose. Care too much about the installed base. ES6 continues to infect otherwise good projects.. @lpinca That's a great idea! I hadn't thought of that. I'm just going to stay on the 1.0 branch for now, but yours is one of the (extremely) few low level libraries I rely on so I may eventually look into transpiling.\nThanks for your hard work. I think ES6 has destroyed the most powerful aspects of Javascript (simple build tools, ubiquitous runtime, small language) so I am very frustrated with module authors requiring the new heavier build architecture. If my comment seemed aggressive it's just that frustration coming out. ES6 is infecting the entire JavaScript world making it increasingly difficult to run true JavaScript applications.\nBut I really appreciate the time you've put into this module it is excellent.\nIs there any plan for maintenance of the 1.0 branch? What would be a good place to watch for discussions of security updates?. ",
    "emranbm": "Thanks a lot for the help. The problem was of the other peer!. ",
    "dotansimha": "I see. Is there a client for browsers? Or I should use the regular WebSocket object of the browser? . Thanks @lpinca! Do you have an example of how to use the server with upgrade request? (with WebSocket of the browser). Great. Thanks @lpinca . ",
    "ssssssssssss": "Any progress here? Supporting per-frame deflate is a huge win for mobile Safari.. Dear @dscherger Thanks for the response.\nDo you mean we just need to rewrite the request and response headers for ws without modifying the ws source code? . Thank you for the clarify. If that's the case, efforts to support iOS Safari should be relatively trivial than I expected. I just thought the Safari use per-frame deflate.. ",
    "narychen": "My version is 1.0.1. I check the latest release is this version.\nBut I search the current master branch code, there is maxPayload in it.\nIs this feature have not been released yet? . ```\nconst http = require('http');\nconst ws = require('ws');\nconst readline = require(\"readline\");\nprocess.on('uncaughtException', function (e) {\n  console.error(e.stack);\n});\nvar server = http.createServer();\nserver.listen(8888, ()=>{\n  (new ws.Server({server})).on('connection', (ws)=>{\n    ws.on('message', (data)=>{\n      console.log('ws: ', data);\n      throw new Error('fffff'); // The proto will be abnormal after this \n      ws.send(JSON.stringify({proto:'res', data:'res ok'}));\n    });\n  });\n  wsc.on('close', (code, message)=>{\n    console.log('server close', code, message);\n  });\n  wsc.on('error', (error)=>{\n    console.log('server error', error);\n  });\n});\nvar wsc = new ws(ws://127.0.0.1:8888/);\nwsc.on('open', ()=>{\n  console.log('client open');\n});\nwsc.on('message', (data, flags)=>{\n  console.log('wsc: ', data);\n});\nwsc.on('close', (code, message)=>{\n  console.log('client close', code, message);\n});\nwsc.on('error', (error)=>{\n  console.log('client error', error);\n});\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\nrl.question('', function shell(data) {\n  try {\n    wsc.send(JSON.stringify({\n      proto: 'req', data\n    }));\n  } catch(err) {\n    console.log(err);\n  } finally {\n    rl.question('', shell);\n  }\n});\nA simple demo to reproduce this issue.\nYou will see the output\nclient open\nkk\nws:  {\"proto\":\"req\",\"data\":\"kk\"}\nError: fffff\n    at WebSocket.ws.on (/home/ubuntu/code/node-talk/node_test/wsThrow.js:14:13)\n    at emitTwo (events.js:106:13)\n    at WebSocket.emit (events.js:191:7)\n    at Receiver.receiver.onmessage (/home/ubuntu/code/node-talk/node_modules/ws/lib/WebSocket.js:146:54)\n    at Receiver.dataMessage (/home/ubuntu/code/node-talk/node_modules/ws/lib/Receiver.js:389:14)\n    at Receiver.getData (/home/ubuntu/code/node-talk/node_modules/ws/lib/Receiver.js:330:12)\n    at Receiver.startLoop (/home/ubuntu/code/node-talk/node_modules/ws/lib/Receiver.js:165:16)\n    at Receiver.add (/home/ubuntu/code/node-talk/node_modules/ws/lib/Receiver.js:139:10)\n    at Socket._ultron.on (/home/ubuntu/code/node-talk/node_modules/ws/lib/WebSocket.js:142:22)\n    at emitOne (events.js:96:13)\nsdf\n\u250c\ufffd4  \u2502\u250c\ufffd\u2514N\u2592\ufffd\u2264\u252c\ufffd\u2190N\u2518\ufffd\u00b1N4\ufffd\u23bc\nE\u23bc\u23bc\u23ba\u23bc: \u00b0\u00b0\u00b0\u00b0\u00b0\n    \u2592\u251c WebS\u23bac\u2510e\u251c\u2193\u252c\u23bd\u2193\u23ba\u253c (/\u2592\u23ba\u2514e/\u2524b\u2524\u253c\u251c\u2524/c\u23bade/\u253c\u23bade\u2191\u251c\u2592\u250c\u2510/\u253c\u23bade\u251ce\u23bd\u251c/\u252c\u23bdT\u2592\u23bc\u23ba\u252c\u2193\u2518\u23bd:14:13)\n    \u2592\u251c e\u2514\u2603\u251cT\u252c\u23ba (e\u2534e\u253c\u251c\u23bd\u2193\u2518\u23bd:1\u25ae6:13)\n    \u2592\u251c WebS\u23bac\u2510e\u251c\u2193e\u2514\u2603\u251c (e\u2534e\u253c\u251c\u23bd\u2193\u2518\u23bd:191:7)\n    \u2592\u251c Rece\u2603\u2534e\u23bc\u2193\u23bcece\u2603\u2534e\u23bc\u2193\u23ba\u253c\u2514e\u23bd\u23bd\u2592\u00b1e (/\u2592\u23ba\u2514e/\u2524b\u2524\u253c\u251c\u2524/c\u23bade/\u253c\u23bade\u2191\u251c\u2592\u250c\u2510/\u253c\u23bade\u2514\u23bad\u2524\u250ce\u23bd/\u252c\u23bd/\u250c\u2603b/WebS\u23bac\u2510e\u251c\u2193\u2518\u23bd:146:54)\n    \u2592\u251c Rece\u2603\u2534e\u23bc\u2193d\u2592\u251c\u2592Me\u23bd\u23bd\u2592\u00b1e (/\u2592\u23ba\u2514e/\u2524b\u2524\u253c\u251c\u2524/c\u23bade/\u253c\u23bade\u2191\u251c\u2592\u250c\u2510/\u253c\u23bade_\u2514\u23bad\u2524\u250ce\u23bd/\u252c\u23bd/\u250c\u2603b/Rece\u2603\u2534e\u23bc\u2193\u2518\u23bd:389:14)\n    \u2592\u251c Rece\u2603\u2534e\u23bc\u2193\u00b1e\u251cD\u2592\u251c\u2592 (/\u2592\u23ba\u2514e/\u2524b\u2524\u253c\u251c\u2524/c\u23bade/\u253c\u23bade\u2191\u251c\u2592\u250c\u2510/\u253c\u23bade_\u2514\u23bad\u2524\u250ce\u23bd/\u252c\u23bd/\u250c\u2603b/Rece\u2603\u2534e\u23bc\u2193\u2518\u23bd:33\u25ae:12)\n    \u2592\u251c Rece\u2603\u2534e\u23bc\u2193\u23bd\u251c\u2592\u23bc\u251cL\u23ba\u23ba\u23bb (/\u2592\u23ba\u2514e/\u2524b\u2524\u253c\u251c\u2524/c\u23bade/\u253c\u23bade\u2191\u251c\u2592\u250c\u2510/\u253c\u23bade_\u2514\u23bad\u2524\u250ce\u23bd/\u252c\u23bd/\u250c\u2603b/Rece\u2603\u2534e\u23bc\u2193\u2518\u23bd:165:16)\n    \u2592\u251c Rece\u2603\u2534e\u23bc\u2193\u2592dd (/\u2592\u23ba\u2514e/\u2524b\u2524\u253c\u251c\u2524/c\u23bade/\u253c\u23bade\u2191\u251c\u2592\u250c\u2510/\u253c\u23bade_\u2514\u23bad\u2524\u250ce\u23bd/\u252c\u23bd/\u250c\u2603b/Rece\u2603\u2534e\u23bc\u2193\u2518\u23bd:139:1\u25ae)\n    \u2592\u251c S\u23bac\u2510e\u251c\u2193\u2524\u250c\u251c\u23bc\u23ba\u253c\u2193\u23ba\u253c (/\u2592\u23ba\u2514e/\u2524b\u2524\u253c\u251c\u2524/c\u23bade/\u253c\u23bade\u2191\u251c\u2592\u250c\u2510/\u253c\u23bade\u2514\u23bad\u2524\u250ce\u23bd/\u252c\u23bd/\u250c\u2603b/WebS\u23bac\u2510e\u251c\u2193\u2518\u23bd:142:22)\n    \u2592\u251c e\u2514\u2603\u251cO\u253ce (e\u2534e\u253c\u251c\u23bd\u2193\u2518\u23bd:96:13)\n\u23bdd\u00b0\n\u252c\u23bd:  \ufffdQ\ufffd\ufffd\ufffdQ\ufffd\ufffd\ufffd9\ufffd\ufffd\u03dcM\u2500\ufffd\ufffd\u0602\n```. My node.js version is v6.10.2. I've already added try-catch block in my code after finding this issue.\nPut up here just wanna to make sure that if it is a duty of ws package or application code.\nI think it may be dangerous if someone don't realize this issue and forget to put a try-catch block in his large on message event handler. Then if something bad happens, they will be very hard to find out what happened.. You mean that must be caused by other codes, not possible by ws?. OK. I will check the other codes. Thanks.. ",
    "ORESoftware": "thanks!\nWhat I did for now, I put this in the top of my code:\njs\n       ws.once('open', function open() {\n           ws.isOpen = true;\n        });\n:) but thanks, I will probably do it the more canonical way. Also, as an aside, as a nice design pattern for asynchronous constructors, with asynchronous methods you can do this:\n```js\nfunction AsyncConstructor(){\nthis.ready = false;\n this.init = function(cb){\nif(this.ready){\n    return process.nextTick(cb);\n   }\ndoSomeAsyncSetup(err => {\n        this.ready = true;\n        cb(err)\n    });\n}\n}\nAsyncConstructor.prototype.someMethod = function(data, cb){\nthis.init(err => {\n        //handle error\n       doSomeWork(this, cb);\n   }\n}\n```\nI like that pattern. ok, my use case fits this - I just don't know how to tell ws to use an emphemeral port. If I do not supply a port to ws (e.g. wss = new WebSocketServer({ port: null}); )\na) will wss use an emphemeral port?\nb) if (a), how can I retrieve the port # that wss will end up using?\n. ok, do you recommend monkey -patching the ws.send method?\nsomething like this:\n```js\nconst send = ws.send;\nws.send = function(){\n  if(ws.readyState === WebSocket.OPEN){\n     return send.apply(this,arguments);\n  }\nelse{\n  console.error('error - socket closed');\n}\n});\n```\nor maybe if I pass a callback, then error will get passed, instead of thrown?\njs\nws.send('foo', function(err){});\nif this is true, then it would be nice if the error message said \"Pass a callback to prevent this error from being thrown\". Right?\n. sure that's fine. One more question, what is the best pattern to use on the server side, to handle when the client closes the connection (maybe the client process crashes abruptly)? How do I clean up the connection from the server's perspective?. thanks for the info!. ok thx!. ok so if I add this in the browser:\nsocket.close();\nthen the ECONNRESET issue on the server goes away. However, if the browser crashes and the connection is not closed properly, does my server really need to crash?\nI tried adding an error handler:\n```js\nconst wss = new Server({port: 6969});\nwss.on('error', function (e) {\n  console.error(e.message);\n});\n```\nthat didn't prevent the server and process from crashing.. ok will do thanks, that's probably it. nice, ok cool thanks, will close...yeah I am using chrome when that error occurs\n  . ",
    "bdunn44": "Also posted to SO: http://stackoverflow.com/questions/41401360/node-js-socket-io-cannot-read-property-on-of-undefined. Thanks Nibbler, that fix should solve my problem. Unfortunately the latest zone.js release has another issue (angular/zone.js#574) which breaks another project dependency, so I'm in limbo at the moment.. ",
    "DiegoRBaquero": "@lpinca Even after closing using .close() and .terminate() and unrefing the library itself, the TCP socket remains open. The log in https://github.com/socketio/engine.io-client/issues/528 points to it.\nI made sure engine.io-client was calling the terminate() and .close functions. attached onclose listener is even called twice by ws.\n\nIf the socket is the only active socket in the system and nothing else is ref'd then the program will exit normally, as expected: https://nodejs.org/api/net.html#net_socket_unref. It will also help for this issue, if the socket is the only thing keeping the process from exiting because of the timeout: https://github.com/websockets/ws/issues/891. @lpinca Sorry, I haven't really learned to use Mocha. All your test cases call done function on onClose (which is triggered), so Mocha will exit anyways.\nIs there a con by unrefing the socket?. @lpinca Didn't manage to reproduce using ws only.\nThe last line called is this._socket.end(); at:\njs\nTrace: Clean WS Rsrcs f\n    at WebSocket.cleanupWebsocketResources (/XXXXXXX/node_modules/ws/lib/WebSocket.js:993:17)\n    at emitNone (events.js:91:20)\n    at Socket.emit (events.js:185:7)\n    at endReadableNT (_stream_readable.js:974:12)\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\n    at process._tickCallback (internal/process/next_tick.js:98:9)\nWhere does cleanupWebsocketResources come from?\n```js\nfunction cleanupWebsocketResources(error) {\n  console.log('Clean WS Rsrcs')\n  if (this.readyState === WebSocket.CLOSED) {\n    console.log('Clean WS Rsrcs a')\n    return;\n  }\nthis.readyState = WebSocket.CLOSED;\nclearTimeout(this._closeTimer);\n  this._closeTimer = null;\n// If the connection was closed abnormally (with an error), or if\n  // the close control frame was not received then the close code\n  // must default to 1006.\n  if (error || !this._closeReceived) {\n    this._closeCode = 1006;\n  }\n  this.emit('close', this._closeCode || 1000, this._closeMessage || '');\nif (this._socket) {\n    console.log('Clean WS Rsrcs b')\n    if (this._ultron) {\n      console.log('Clean WS Rsrcs c')\n      this._ultron.destroy();\n    }\n    this._socket.on('error', function onerror() {\n      console.log('Clean WS Rsrcs d')\n      try { this.destroy(); }\n      catch (e) {}\n    });\ntry {\n  console.log('Clean WS Rsrcs e')\n  if (!error) {\n    console.trace('Clean WS Rsrcs f')\n    this._socket.end();\n  } else this._socket.destroy();\n} catch (e) { \n  console.error(e)\n  /* Ignore termination errors */ \n}\n\nthis._socket = null;\nthis._ultron = null;\n\n}\nif (this._sender) {\n    this._sender.removeAllListeners();\n    this._sender = null;\n  }\nif (this._receiver) {\n    this._receiver.cleanup();\n    this._receiver = null;\n  }\nif (this.extensions[PerMessageDeflate.extensionName]) {\n    this.extensions[PerMessageDeflate.extensionName].cleanup();\n  }\nthis.extensions = null;\nthis.removeAllListeners();\n  this.on('error', function onerror() {}); // catch all errors after this\n  delete this._queue;\n}\n```\nLog:\njs\ntransport close\nClose called in ws\nWS close c\nClean WS Rsrcs\nonClose triggered by ws\nClean WS Rsrcs b\nClean WS Rsrcs c\nClean WS Rsrcs e\nClean WS Rsrcs f\nThe socket object at that point:\njs\nSocket {\n  connecting: false,\n  _hadError: false,\n  _handle: null,\n  _parent: null,\n  _host: 'localhost',\n  _readableState: \n   ReadableState {\n     objectMode: false,\n     highWaterMark: 16384,\n     buffer: BufferList { head: null, tail: null, length: 0 },\n     length: 0,\n     pipes: null,\n     pipesCount: 0,\n     flowing: true,\n     ended: true,\n     endEmitted: true,\n     reading: false,\n     sync: false,\n     needReadable: false,\n     emittedReadable: false,\n     readableListening: false,\n     resumeScheduled: false,\n     defaultEncoding: 'utf8',\n     ranOut: false,\n     awaitDrain: 0,\n     readingMore: false,\n     decoder: null,\n     encoding: null },\n  readable: false,\n  domain: null,\n  _events: \n   { end: [ [Object] ],\n     finish: [Function: onSocketFinish],\n     _socketEnd: [Function: onSocketEnd],\n     drain: [Function: ondrain],\n     error: [Function: onerror] },\n  _eventsCount: 5,\n  _maxListeners: undefined,\n  _writableState: \n   WritableState {\n     objectMode: false,\n     highWaterMark: 16384,\n     needDrain: false,\n     ending: true,\n     ended: true,\n     finished: true,\n     decodeStrings: false,\n     defaultEncoding: 'utf8',\n     length: 0,\n     writing: false,\n     corked: 0,\n     sync: false,\n     bufferProcessing: false,\n     onwrite: [Function],\n     writecb: null,\n     writelen: 0,\n     bufferedRequest: null,\n     lastBufferedRequest: null,\n     pendingcb: 0,\n     prefinished: true,\n     errorEmitted: false,\n     bufferedRequestCount: 0,\n     corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },\n  writable: false,\n  allowHalfOpen: false,\n  destroyed: true,\n  _bytesDispatched: 311,\n  _sockname: null,\n  _pendingData: null,\n  _pendingEncoding: '',\n  server: null,\n  _server: null,\n  parser: null,\n  _httpMessage: \n   ClientRequest {\n     domain: null,\n     _events: {},\n     _eventsCount: 0,\n     _maxListeners: undefined,\n     output: [],\n     outputEncodings: [],\n     outputCallbacks: [],\n     outputSize: 0,\n     writable: true,\n     _last: true,\n     upgrading: true,\n     chunkedEncoding: false,\n     shouldKeepAlive: true,\n     useChunkedEncodingByDefault: false,\n     sendDate: false,\n     _removedHeader: { connection: false },\n     _contentLength: 0,\n     _hasBody: true,\n     _trailer: '',\n     finished: true,\n     _headerSent: true,\n     socket: [Circular],\n     connection: [Circular],\n     _header: 'GET /engine.io/?EIO=3&transport=websocket&sid=PGiTgxbhbectev0-AAAT HTTP/1.1\\r\\nConnection: Upgrade\\r\\nUpgrade: websocket\\r\\nHost: localhost:3000\\r\\nSec-WebSocket-Version: 13\\r\\nSec-WebSocket-Key: MTMtMTQ4MzM4NzMwMzIzMA==\\r\\nSec-WebSocket-Extensions: permessage-deflate; client_max_window_bits\\r\\n\\r\\n',\n     _headers: \n      { connection: 'Upgrade',\n        upgrade: 'websocket',\n        host: 'localhost:3000',\n        'sec-websocket-version': 13,\n        'sec-websocket-key': 'MTMtMTQ4MzM4NzMwMzIzMA==',\n        'sec-websocket-extensions': 'permessage-deflate; client_max_window_bits' },\n     _headerNames: \n      { connection: 'Connection',\n        upgrade: 'Upgrade',\n        host: 'Host',\n        'sec-websocket-version': 'Sec-WebSocket-Version',\n        'sec-websocket-key': 'Sec-WebSocket-Key',\n        'sec-websocket-extensions': 'Sec-WebSocket-Extensions' },\n     _onPendingData: null,\n     agent: \n      Agent {\n        domain: null,\n        _events: [Object],\n        _eventsCount: 1,\n        _maxListeners: undefined,\n        defaultPort: 80,\n        protocol: 'http:',\n        options: [Object],\n        requests: {},\n        sockets: {},\n        freeSockets: {},\n        keepAliveMsecs: 1000,\n        keepAlive: false,\n        maxSockets: Infinity,\n        maxFreeSockets: 256 },\n     socketPath: undefined,\n     timeout: undefined,\n     method: 'GET',\n     path: '/engine.io/?EIO=3&transport=websocket&sid=PGiTgxbhbectev0-AAAT',\n     _ended: false,\n     parser: null,\n     res: \n      IncomingMessage {\n        _readableState: [Object],\n        readable: true,\n        domain: null,\n        _events: {},\n        _eventsCount: 0,\n        _maxListeners: undefined,\n        socket: [Circular],\n        connection: [Circular],\n        httpVersionMajor: 1,\n        httpVersionMinor: 1,\n        httpVersion: '1.1',\n        complete: true,\n        headers: [Object],\n        rawHeaders: [Object],\n        trailers: {},\n        rawTrailers: [],\n        upgrade: true,\n        url: '',\n        method: null,\n        statusCode: 101,\n        statusMessage: 'Switching Protocols',\n        client: [Circular],\n        _consuming: false,\n        _dumped: false },\n     upgradeOrConnect: true },\n  read: [Function],\n  _consuming: true,\n  _idleNext: null,\n  _idlePrev: null,\n  _idleTimeout: -1,\n  write: [Function: writeAfterFIN] }. This looks like an issue on engine.io completely where the client closes the socket, send the FIN Packet but the client hangs.\nOn the server:\nsh\nengine:transport onClose Called +2s\n  engine:socket closing closed +0ms\n  engine:socket woot +0ms\n  engine:socket clearing transport +0ms\n  engine:transport close +0ms // socket calls transport.close again\n  engine:transport damn +0ms // Was already called, return\nSocket closed // My callback. Agreed, gonna close this.\nOn another topic @lpinca, why not unref all sockets? Googling didn't throw much.. @lpinca I think it's v6+\nhttps://github.com/feross/webtorrent-hybrid/issues/62#issuecomment-279370267\nhttp://stackoverflow.com/questions/36899888/getting-typeerror-this-is-not-a-typed-array-using-buffer-from-in-mocha/36924697#36924697. @lpinca Seems right, worked on 4.7\nThanks for the info!. @lpinca ws._socket is null after construction:\njs\nWebSocket {\n  domain: null,\n  _events: \n   { open: { [Function: onOpen] _listener: [Function] },\n     message: { [Function: onMessage] _listener: [Function] },\n     close: { [Function: onClose] _listener: [Function] },\n     error: { [Function: onError] _listener: [Function] } },\n  _eventsCount: 4,\n  _maxListeners: undefined,\n  readyState: 0,\n  bytesReceived: 0,\n  extensions: {},\n  protocol: '',\n  _finalize: [Function: bound finalize],\n  _binaryType: 'arraybuffer',\n  _finalizeCalled: false,\n  _closeMessage: null,\n  _closeTimer: null,\n  _closeCode: null,\n  _receiver: null,\n  _sender: null,\n  _socket: null,\n  _ultron: null,\n  protocolVersion: 13,\n  _isServer: false,\n  url: 'wss://api.vars.online',\n  _req: \n   ClientRequest {\n     domain: null,\n     _events: \n      { socket: [Object],\n        error: [Function],\n        response: [Function],\n        upgrade: [Function] },\n     _eventsCount: 4,\n     _maxListeners: undefined,\n     output: [ 'GET / HTTP/1.1\\r\\nSec-WebSocket-Version: 13\\r\\nSec-WebSocket-Key: azdBI21yuI0N1s+xlIT3NQ==\\r\\nConnection: Upgrade\\r\\nUpgrade: websocket\\r\\nSec-WebSocket-Extensions: permessage-deflate; client_max_window_bits\\r\\nHost: api.vars.online\\r\\n\\r\\n' ],\n     outputEncodings: [ 'latin1' ],\n     outputCallbacks: [ [Function: finish] ],\n     outputSize: 224,\n     writable: true,\n     _last: true,\n     upgrading: true,\n     chunkedEncoding: false,\n     shouldKeepAlive: true,\n     useChunkedEncodingByDefault: false,\n     sendDate: false,\n     _removedHeader: { connection: false },\n     _contentLength: 0,\n     _hasBody: true,\n     _trailer: '',\n     finished: true,\n     _headerSent: true,\n     socket: null,\n     connection: null,\n     _header: 'GET / HTTP/1.1\\r\\nSec-WebSocket-Version: 13\\r\\nSec-WebSocket-Key: azdBI21yuI0N1s+xlIT3NQ==\\r\\nConnection: Upgrade\\r\\nUpgrade: websocket\\r\\nSec-WebSocket-Extensions: permessage-deflate; client_max_window_bits\\r\\nHost: api.vars.online\\r\\n\\r\\n',\n     _headers: \n      { 'sec-websocket-version': 13,\n        'sec-websocket-key': 'azdBI21yuI0N1s+xlIT3NQ==',\n        connection: 'Upgrade',\n        upgrade: 'websocket',\n        'sec-websocket-extensions': 'permessage-deflate; client_max_window_bits',\n        host: 'api.vars.online' },\n     _headerNames: \n      { 'sec-websocket-version': 'Sec-WebSocket-Version',\n        'sec-websocket-key': 'Sec-WebSocket-Key',\n        connection: 'Connection',\n        upgrade: 'Upgrade',\n        'sec-websocket-extensions': 'Sec-WebSocket-Extensions',\n        host: 'Host' },\n     _onPendingData: null,\n     agent: \n      Agent {\n        domain: null,\n        _events: [Object],\n        _eventsCount: 1,\n        _maxListeners: undefined,\n        defaultPort: 443,\n        protocol: 'https:',\n        options: [Object],\n        requests: {},\n        sockets: [Object],\n        freeSockets: {},\n        keepAliveMsecs: 1000,\n        keepAlive: false,\n        maxSockets: Infinity,\n        maxFreeSockets: 256,\n        maxCachedSessions: 100,\n        _sessionCache: [Object] },\n     socketPath: undefined,\n     timeout: undefined,\n     method: 'GET',\n     path: '/',\n     _ended: false } }. @lpinca Beautiful! Thank you so much!. ",
    "hodanny": "Sounds good. I've updated the fileapi example to work with Express 4.. @lpinca I've renamed it back to the original name. Thought it was a naming convention since the Express 3 serverstats example has an express_3 prefix.. ",
    "duselguy": "Thanks a lot,\nLP\n. ",
    "liyuanqiu": "@lpinca Thank you very much for your reply.\nMy program output shows a random result, sometimes it fails immediately and emits error/close events, sometimes it hangs. I found it maybe a virtualbox nat port forward problem, not ws's problem.\nThank you anyway.. ",
    "hansonw": "Done! I think there's an eslint rule for the spaces-in-objects, btw :). ",
    "cronvel": "You don't like the 'end' event idea?. It still throws an exception. The difference is that the cleanup code bound to the 'close' event would be bound to the 'end' event.\nUsually, that cleanup code removes the client/user from the list of connected clients/users maintained by the application.. Yes that's it ;). ",
    "christopherreay": "\nIf the websocket is not fully closed it shouldn't be cleaned up imo. You may still receive valid data when readyState is CLOSING, the size of your collection will not match the number of connected sockets, etc.\n\nCould you just quickly mention how data can still arrive thats valid during 'CLOSING' state?\nThank you. ",
    "alexions": "ok. Agree that your changes will work faster.. @lpinca you're welcome!. I'd move this block of code to a separate function, like \nmakeBuffer (data) {\n  var readOnly = true;\n\n  if (data && !Buffer.isBuffer(data)) {\n    if (data instanceof ArrayBuffer) {\n      data = Buffer.from(data);\n    } else if (ArrayBuffer.isView(data)) {\n      data = viewToBuffer(data);\n    } else {\n      data = Buffer.from(data);\n      readOnly = false;\n    }\n  }\n\n  return [data, readOnly];\n}\n\nUsage:\n[data, readOnly] = makeBuffer(data);. Agree. Array can make additional overhead... ok :) Speed is better than duplicates :).\n",
    "tdhsmith": "Derp; I was looking at the 2.0.0 docs, wasn't I?\nOK nevermind the docs and the functionality are totally in line. \ud83d\ude04 . ",
    "earthbound19": "I can look at that. First time doing a pull request--would I just make those changes and issue a new request?. Ok. When I get to it and get your review. thx. Nope. I may not get to it. Frankly I think redundant as they may be, any noob would prefer the comments over nothing.. ",
    "voxpopmxadmin": "Have a question....\nWhy am I receiving a \"pong\" event from the client twice? I applyed the example given in this main project page.\n// On pong from the store... keep it alive\nws.on('pong', function heartbeat() {\n    this.isAlive = true;\n    console.log('Pong from store: ' + this.store_id);\n});. ",
    "YarikST": "@voxpopmxadmin \nhello, the server, depending on the implementation, sends a few ping while the connection is alive - and the web for each ping corresponds to pong - in order to keep the connection alive - as soon as it stops responding pong, the server learns that the clip is knocked out. ",
    "NineNineNineIonoSpheres": "Got it. Thank you.\nOn Wed, Jan 25, 2017 at 9:34 PM, Luigi Pinca notifications@github.com\nwrote:\n\nAfter re-reading, I noticed that you get a 302 status code. ws does not\nfollow redirects so the problem could be this, see also #812\nhttps://github.com/websockets/ws/issues/812.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/issues/978#issuecomment-275122912, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AYKzQrXl_qjpLpO9V6JMl-SryIpVpccLks5rV11YgaJpZM4LtUXH\n.\n. \n",
    "Ratismal": "The site itself is rerouted through a nginx reverse proxy. Firefox and Chrome work fine, I've only seen this issue on Chromium. My project is open-source; would it help if I provided you my source code + wss url to help you debug?. As I've said, directly connecting results in this:\nWebSocket connection to 'wss://ip.addr.he.re:8190/' failed: Error in connection establishment: net::ERR_CONNECTION_CLOSED\nRegarding my sidenotes, is there already a system to include this module in a browser using a ",
    "mklimek": "A fix for me was setting these response headers: Host, Connection and Upgrade.\nFor nginx case (socket.io server is behind the proxy):\n```nginx\nlocation /foo/ {\n    proxy_pass http://foobar:3005/;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header Host $host;\n}\n. ",
    "venkateshthallam": "@mklimek This worked great for my setup. Thanks.. ",
    "PassTheMayo": "@mklimek Worked for me! Thank you!. @naknode Read the previous comments, this issue was resolved.. ",
    "naknode": "@mklimek @venkateshthallam @PassTheMayo You guys are commenting on ws library whereas @mklimek mentioned socket.io. What libraries are you guys using?. ",
    "lf1029698952": "nginx don't support websocket\uff0cbut it can proxy websocket connetions\uff0cyou neet config it:\nlocation / {\n    proxy_pass http://backend;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n}\nReference link: \nhttp://nginx.org/en/docs/http/websocket.html. ",
    "xingchen19": "\nA fix for me was setting these response headers: Host, Connection and Upgrade.\nFor nginx case (socket.io server is behind the proxy):\nnginx\nlocation /foo/ {\n    proxy_pass http://foobar:3005/;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header Host $host;\n}\n`\n\nresolved my issue. ",
    "memstone": "@mklimek This worked great for my setup. Thanks.. ",
    "steve2507": "After reviewing this a bit more, I noticed the issue was actually at the server side where a socket was overwritten.. ",
    "CraigglesO": "You're amazing. Thank you.. ",
    "phoboslab": "Thanks!\nPardon my ignorance, but shouldn't the 2nd frame be uncompressed, or is it not allowed to mix compressed & uncompressed frames? Do you have any idea why it would work in Safari/Edge?. ",
    "duwayy": "v7.5.0 (latest I think). It give me the same output as yours.. :/. Is it what you asked for ?\n```\n/var/www/html/agario/MultiOgar-Edited-Instant/node_modules/ws/lib/PerMessageDeflate.js:8\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\n                       ^\nTypeError: this is not a typed array.\n    at Function.from (native)\n    at Object. (/var/www/html/agario/MultiOgar-Edited-Instant/node_modules/ws/lib/PerMessageDeflate.js:8:24)\n    at Module._compile (module.js:410:26)\n    at Object.Module._extensions..js (module.js:417:10)\n    at Module.load (module.js:344:32)\n    at Function.Module._load (module.js:301:12)\n    at Module.require (module.js:354:17)\n    at require (internal/module.js:12:17)\n    at Object. (/var/www/html/agario/MultiOgar-Edited-Instant/node_modules/ws/lib/WebSocket.js:16:27)\n    at Module._compile (module.js:410:26)\n```. I'm using the latest version of it, I tested with original and modified, get the same error\nIs node different than nodejs ? After uninstalling nodejs, when trying to run server it say nodejs not found. I replaced \"nodejs\" by node in Multiogar launcher and it works now\nThank you for your help :). ",
    "vidstige": "Thanks for quick reply. I rather not, using port install nodejs to install which only has 4.3, but might consider later. I could perhaps also downgrade ws?. No, I like ports more. It does have node, but inside another package called node4. But I'll go with that anyway. Thanks fro your help! :). ",
    "n05x": "Hello, I have switched to the gh-990 branch for my noon deployment. I will report back in a few hours if i witness any stack overflows happen. Thanks for the fast patch!. Update: The new branch has been running for 8 hours or so without any stack overflows, I am venturing a guess that the problem is fixed. Thanks!. ",
    "jameslai": "Fair enough, thank you.. ",
    "huangjilaiqin": "@lpinca please help,3q. @lpinca  I use CentOS release 6.5 (Final)\uff0cmy version is 2.0.3, yes mac will not crash with this error,but the terminal like dead after run a while, I test in linux and windows the rss keep growing and crash finally, I doubt gc not recycle momery as fast as used,so lead to crash. Thank for your response! I will keep testing the problem.. I use node-heapdump found there a big array with object wicth contain msg like 'xxxxx.... response from server',  if I chage server code to this : \n```javascript\nws.on('message',function(data){\n  for(let id in clients)\n    clients[id].send(data+'response from server');\n  });\n````. @lpinca but I think I should find where is the  bottleneck, and fixed to make my nodejs server can handle more client and more. #heap out of memory# because v8 has memory limit, but Buffer is not alloc by v8 can we use Buffer to fixed this problem?. @lpinca do you have any idea to solve this problem and not effect the normal client, and this problem make nodejs server easy to attack, just a js file make server to crash.hope to see your idea. ",
    "cbratschi": "Somehow this longer works on 2.x. Could be something else but if I remove the path the client gets a response. Any ideas?\nA different thing I discovered: the latest bufferutil and utf-8-validate modules are not compatible with ws 2.x. Which versions are exactly compatible?. Well, I am registering several paths for the express based server. In my case the connection should stay open and be passed to the next ws handler until the path matches. If there is no match express should return a 404 error and close the connection.\nSo the shouldHandle() call should be done first before doing any further checks which could cause an abortConnection() call.. I see.\nIf several paths are registered then the connection should only be closed if no matching path was found.. The main problem is that we are using several WebSocket servers with different paths but the same express server instance. This was working fine with ws 1.x. Now the first WebSocket server closes the connection if the path would match the path of the registered second WebSocket server. This is a crucial feature because we extend express to allow ws routes which register a WebSocket server using the route's path.. Thanks for the link. I refactored my code and now everything works again.. I have a strange problem with Starscream on iOS:\nhttps://github.com/daltoniam/Starscream\nIf the iOS app sends a message as binary (Data), the Node.js server returns a typeof 'object' and not a Buffer. Stranger, the object is the JSON string I sent as Data on iOS. So why is this getting converted to an Object? Any clue?\nString messages work as expected.. console.dir() displays a fully expanded object, the same as receiving as a string and using JSON.parse(). I would have expected a Buffer.. ",
    "alallier": "@lpinca what if you don't want to attach to the node server? If you create with just a port like:\n```js\nconst WebSocket = require('ws');\nconst https = require('https');\nconst server = https.createServer(...);\nconst wss = new WebSocket.Server({ port: 45676 });\n```\nIs there anyway to run secure WebSockets this way?. Okay thanks. Any examples you can point me too?. ",
    "cyclux": "No, not everyone tracks release notes. So this question was perfectly legit and helped me as well.. ",
    "Ciao121": "I'm going to try this.\nIs it correct to say that ws secure protocol can only be used in conjunction with a http server? Or can it in some way support secure protocol in a \"standalone\" way?. So.. that's why \"everywhere people talk about \"app\", \"https\", \"proxies\" and so on...\".\nThank you!!!. I've found an easier (for me) alternative. Using stunnel.\nStunnel is a daemon that runs in background. It loads ssl certificates, accepts connections on a choosen port and acts like a proxy to another port, decrypting traffic from the client before forwarding it to the ws server (or whatever it is) and vice versa.\nIn this way I have not to alter nginx configuration or add an https server to the nodejs script.\nEasier for me and maybe useful for someone else.. I tried it, but had an \"ERR_INSECURE_RESPONSE\". Most probably because something was wrong with the certificate/proxy_pass value (tried also to use thedomain) or something like this. Surely if I had tried more it would wok. But I prefer to leave nginx conf untouched. Just because I'm new to nginx too :)\nThanks again!\n. ",
    "Native-Coder": "@lpinca  Using your SSL example that's in the repo throws an error\nError: connect ECONNREFUSED 127.0.1.1:3000\n\n. ",
    "josezulu": "@lpinca my apologies to post on a closed thread, but I didn't feel good creating a new one asking for advice, so I thought it would be good to raise my question here as a continuation of this thread:\nI've implemented wss this way per your suggestion on this thread:\nconst server = https.createServer(...);\nconst wss = new WebSocket.Server({ server });\nBut it bothers me the fact that I have to give access to the private SLL cert and key to the user or group (linux) that runs the node module. I believe that could be considered as a security concern?\nI already have Apache2 serving https, so I was thinking of using Apache instead of node, that way I wouldn't have to give the user special access.\nI'd then try the proxy pass option:\nProxyPass /ws ws://192.168.0.197:3000/\nProxyPassReverse /ws ws://192.168.0.197:3000/\nBut I read you mentioning in other issues your concerns on Apache handling these connections, as it would need to spawn multiple threads vs only a single non blocking thread within node.\nWhat do you think about that possible security concern vs the performance that Apache would provide?. @lpinca thank you for your response. I went with node's https server.\nBut now I'm having problems with Avast antivirus on Internet Explorer 11, it blocks the wss connection with error:\n\nSCRIPT12057: WebSocket Error: Network Error 12057, It was not possible to connect to the revocation server or a definitive response could not be obtained.\n\nIt works fine on Chrome. It works fine on IE11 another computer without Avast.\nWhen I disable Avast's WebShield \"HTTPS Scanning\", the problem goes away. But of course users will want that turned on.\nHave you heard of issues like this one?. @lpinca : I have fixed my issue.\nThe https options should include the \"ca\" file. Now I'm not sure if the lack of it breaks any other browser + anti virus combinations, but it solved it with Avast.\nI've noticed that not everyone includes the \"ca\" files in their tutorials, the Node docs also do not include it.\nvar options = {\n  key: fs.readFileSync('/path-to-keys/privkey.pem'),\n  cert: fs.readFileSync('/path-to-keys/cert.pem'),\n  ca: fs.readFileSync('/path-to-keys/chain.pem')\n};\nhttps.createServer(options, ...)\n. Thank you for the clarification.. ",
    "christofferTP": "How do you suggest I get a hold of the connection information in the on close method? . Yes, on the server. Will look at retrieving IP from the upgradeReq. Nice, that worked. Thanks.. ",
    "angel1st": "@lpinca - one more inquiry on this - looking at ping method and the topic referred above, I believe it is expected, once the server sends ping, the client should respond with pong and hence the server will receive pong event. So far so good. In case however such heartbeating system should be implemented, it should periodically go through all server.clients set and execute ping for each on those clients. \nThen once pong event is received I have to find a way to distinct the clients which are not responding and close those. Basically - I am more interested to identify dead sockets than the ones still alive....\nAny hints how this could be implemented?\nBest Regards. ",
    "Edisoni": "Whats return frameMessage? outputBuffer or data ?. But how to get frame for send all clients? i dont understand and sorry for my bad english.. ",
    "kamilsmuga": "That was it! Thanks @lpinca . ",
    "eordano": "This is really annoying. Why isn't bufferutils a dependency instead of a devDependency?. Thanks for your prompt response!\nMaybe I should open a new issue. I run into this on a clean install of express and socket.io. I wasn't aware that this lib was being used under the hood, and even less aware that there was an option for binary addons.\nFor some reason bufferUtils is undefined (the fallback did not work, same stack trace as the OP). I suspect that another package installed bufferutils@2 and somehow that caused the error. But this definitely should not break.. Thanks! I'll ping them.. ",
    "YuliyF": "\"ws\": \"2.2.3\"\nClient connected -> error:\nC:\\Projects\\NodeJs\\WebStormProjects\\WebSockets\\node_modules\\engine.io\\node_modules\\ws\\lib\\Receiver.js:306\n  if (mask != null && buf != null) bufferUtil.unmask(buf, mask);\n\n\"dependencies\": {\n    \"bufferutil\": \"3.0.0\",\n    \"express\": \"4.15.2\",\n    \"socket.io\": \"1.7.3\",\n    \"utf-8-validate\": \"3.0.1\",\n    \"ws\": \"2.2.3\"\n  }\nAll code:\nvar express = require('express');\nvar app = express();\nvar server = require('http').createServer(app);\nvar io = require('socket.io')(server);\nvar PORT = process.env.PORT || 3000;\n// Routing\napp.use(express.static(__dirname + '/public'));\nserver.listen(PORT, function () {\n    console.log('Server listening at port %d', PORT);\n});\nio.on('connection', (socket) => {\n    console.log('Client connected');\n    socket.on('disconnect', () => console.log('Client disconnected'));\nsetInterval(() => socket.emit('time', new Date().toTimeString()), 1000);\n\n});. ",
    "anamanuel": "I've that in my package.json:\n\"optionalDependencies\": {\n    \"bufferutil\": \"^3.0.2\",\n    \"utf-8-validate\": \"^3.0.3\"\n  }\nand  \"ws\": \"^3.0.0\" in dependencies\nIt still doesn't working. @lpinca the version of engine.io is - \"version\": \"1.8.2\"\nBut I don't have this dependency added to package.json. solved. ",
    "shortercode": "As far as i understand websockets are a single http request. The request performs the handshake with the server, then it returns to the client. After that no headers are exchanged ( which includes session cookies ).\nThis means you can only recieve headers/cookies at the very start of the socket creation and only set them during the handshake.\nSo your best bets are:\n\nMake the user sign in via http before creating the socket\nReconnect the socket on the client after login\nAdd session logic to your actual websocket messages (not recommended) . \n",
    "jrgleason": "Thanks I will look into the spec a little more and confirm.. ",
    "pyrorules": "If you get a similar problem just update your Node.js. ",
    "namgk": "I mean it only reflects connection status in ideal cases when server and client are able to talk to each other. With network disconnection, both server amd client are unaware of the situation and I cannot rely on this state variable to determine. \nMy client is also a Node program, not the browser. . ",
    "brenc": "Just upgraded to ws@2.2.0 today and started seeing this (Node v6.10.0, Debian 7). I have haproxy set up to do websocket health checks so it does a quick connect / disconnect every second or so. I detect these types of connections and handle them differently, which includes not assigning handlers including socket errors (hence the crash). \nWhat I was doing was detecting these types of connections and manually running a close() on them. Right before this I checked readyState and it was set to open. I think maybe what happened was the connection was closed / closing in some way by the time close() actually ran.\nAll I had to do to fix this was to setTimeout for a second later, check readyState, and if the connection is still open, I run a close(). Before I was running ws@1.1.1 and had to check readyState before a send as well otherwise I'd get a crash. . Just as I posted this, I decided to try running close() without a readyState check a second after connection, and it worked without a crash. I then tried 100ms later and it worked as well. Seems there is a timing issue such that if I call close() too soon after connection, I get the \"write EPIPE\" error and a crash.. Makes sense. I definitely think that an error listener should always be added. I might have to add one even for these health check connections. . ",
    "crazyyi": "I get this error too when I am writing my multiplayer game. I use the following code to send a message.\ntry {\n    ws.send(msg, function(error) {\n    if(error == undefined)\n        return;\n    ws.close();\n    logger.debug(\"Async error:\"+error);\n    });     \n} catch (e) {\n    logger.debug(\"Sync error: \" + e);\n    ws.close();\n}\nBut I still get the error when I am playing the game normally. \nI have read the source code of Sender.js. I think the problem is in the sendFrame method:\nhttps://github.com/websockets/ws/blob/master/lib/Sender.js#L380\nAs you mentioned we need to add an error listener to the websocket instance. Do I need to do that for all ws.send? Is it so often that I will get an error during websocket  connection? I almost always get an connection error when I play my game for a while.\nFollowing your advice I add an error listener on the virtual connections I make on the server. But I still get the error Async error:Error: write EPIPE following by Async error:Error: not opened, only this time the server doesn't crash.\nThe problem though, is that the client is crashing. Anything I can do to fix this?. How long will it take for a websocket connection to close itself? I have used @Stylesoftware 's code above and the error is gone. However it can log the \"Async error:\" information for a few seconds. Suppose I have an online game, the server may send the information multiple times a second and bad connections appear often for 24/7 the log file will be huge.. @lpinca Ah I see. But after I call callback(true, 555, 'something is worng') at the end of the hook and restart the server I still get an undefined req object at Line 2. Any hints on what is going wrong here?. @lpinca This is very weird. When I create a new project and paste your code in I can display the req object. But in my original project which uses webpack and express the req is always undefined.  I have tried using it with or without express and it makes no difference. I add express in your example code and it still works. However I can see the info.req if I use the verifyClient hook in my code. What could possibly cause this problem? Is there any way I can debug the req (http.incomingMessage) object before it reaches the ws server?\nThis is my code:\n```\nconst WebSocket = require('ws');\nconst WSServer = WebSocket.Server;\nimport app from './http-server';\nconst server = require('http').createServer(app);\nlet wss = new WSServer({\n  server,\n});\nwss.on('connection', function(ws, req) {\n  const ip = req.connection.remoteAddress;\n  console.log(ip + ' connected');\n});\nconst port = app.isDeveloping ? 3000 : process.env.PORT;\nexport const websocketServer = server.listen(parseInt(port), '127.0.0.1', () => {\n  const ws = new WebSocket('ws://localhost:' + port);\n  ws.on('open', () => console.log('open'));\n});\n```\nwondering if the problem could be caused by http-server.js file I will also paste it here:\n```\nconst webpack = require('webpack');\nconst webpackMiddleware = require('webpack-dev-middleware');\nconst webpackHotMiddleware = require('webpack-hot-middleware');\nconst config = require('./webpack.base');\nconst path = require('path');\nconst express = require('express');\nconst app = express();\napp.isDeveloping = process.env.NODE_ENV !== 'production';\nif (app.isDeveloping) {\n  const compiler = webpack(config);\n  const middleware = webpackMiddleware(compiler, {\n    publicPath: config.output.publicPath,\n    stats: {\n      colors: true,\n      hash: false,\n      timings: false,\n      chunks: false,\n      chunkModules: false,\n      modules: false\n    }\n  });\n  app.use(middleware);\n  app.use(webpackHotMiddleware(compiler));\napp.use('/static', express.static(__dirname + '/media'));\n  app.get('/', (req, res) => {\n    res.write(middleware.fileSystem.readFileSync(path.join(__dirname, 'dist/index.html')));\n    res.end();\n  });\n} else {\n  app.use(express.static(__dirname + '/dist'));\n  console.log('Using production build');\n}\nexport default app;\n``\nNow the above two files are basically my setup. I do not understand why I can't get areqobject in theconnection` event. \nI don't actually need the ip address. But if the req object is always undefined in the ws event I worry I may not be able to use the library fully in my project and this could cause further problems later on.. @lpinca thanks that could be the problem. In the new project I created it is ws@3. My original project uses ws@2.3.1. Which version should I use? In both project I run yarn add ws to install ws module, how come the version numbers are different?. @lpinca Thanks that is really a surprise! I have been scratching my head for the issue for the last 12 hours. But which version is the doc for? Is it @3 or @2.3.1? Because I am new to ws I would like to find the tutorial for the correct version.. @lpinca Thanks that really helps. One more question, in previous version I can get the socket id using ws.upgradeReq.headers['sec-websocket-key'];,  if I use ws@3 how can I get the id?. I think it is because I \"require\" the ws module in the browser code. But I hope the project example should point it out that ws module is not required on the client side.. Thanks I know there is a callback. But I need a check before sending the message not after sending it and get a feedback.. Oh nice. I didn't read that carefully.. Now I am using this code:\ntry {\n    ws.send(msg, function(error) {\n            if(error == undefined)\n            return;\n        else\n                logger.debug(\"Async error:\"+error);\n    });\n} catch(e) {\n    logger.debug(\"Sync error: \" + e);\n    ws.close();\n}\nAnd I have the error listener on the virtual client on the server side:\nws.on('error', function error(event) {\n              logger.debug(event.err + '  state: ' + ws.readyState);\n });\nand client side:\nws.onerror = function error(event) {\n          console.log(event.err + '  state: ' + socket.readyState);\n};\nOn server side:\nwss.on('error', function error(err) {\n    console.log('Error: ' + err.code);\n});\nInside wss.on('connection', function(ws, req) {}):\n```\nws.on('error', function(err) {\n      logger.debug('Found error: ' + err);\n});\nws.on('close', function() {\n      logger.debug('connection closed.');\n});\n```\nSometimes the client connection is closed ( I have only one client on a different computer) incidentally while playing the game. But the server keeps running. And the readyState is not opened. What could be the problem?. Thanks for your reply. Sorry to create a new issue but I hope you can have a look at this.\n I already have the error listener. That's why it sends the message on server instead of stopping the server. I just want to know if this is related to client being assumed idle if no data is sent to the server for half a minute.. I have already tried wireshark sniffing before I ask here. But I can't find anything useful as when the connection is closed the server just try to resend data again and again and ignore the ACK message.. That is hard to reproduce using only ws. I need to figure out some other way. But when I am testing it today. I found that after a while all sockets are terminated. I use the following code:\n```\nfunction heartbeat() {\n  this.isAlive = true;\n}\nwss.on('connection', function(ws, req) {\n    const interval = setInterval(function ping() {\n        wss.clients.forEach(function each(ws) {\n            if (ws.isAlive === false) {\n                logger.debug('terminating socket');\n                return ws.terminate();\n            }\n            ws.isAlive = false;\n            ws.ping('', false, true);\n       });\n    }, 30000);\nws.isAlive = true;\nws.on('pong', heartbeat);\n\n});\n```\nAfter a few seconds all of the 30 something connected bots/clients are terminated (with log message \"terminating socket\"). I try to understand the ping-pong example but I think maybe I miss something?\nUPD: After I took this part out of the wss.on('connection') and put it outside of this listener, the terminate thing doesn't happen any more.\nconst interval = setInterval(function ping() {\n        wss.clients.forEach(function each(ws) {\n            if (ws.isAlive === false) {\n                logger.debug('terminating socket');\n                return ws.terminate();\n            }\n            ws.isAlive = false;\n            ws.ping('', false, true);\n       });\n    }, 30000);. Yes. There doesn't seem to be any issue any more.  The error is gone and can not be reproduced again. I don't even know what I have changed.. This is expected but it exposes a problem for me. \nIn my app server I will close a socket connection manually when a user hits some target. I use\nif (ws && ws.readyState === WebSocket.OPEN) in a loop to test if I need to close the connection. The loop runs 10 times a second.\nFor example: \n```\nfor (const [ws, user] of list) {\n    if (userHitsTarget) {\n        if (ws && ws.readyState === WebSocket.OPEN) {\n            list.delete(ws);\n            ws.close();\n        }\n    }\n}\n```\nI test if the readyState equals to WebSocket.OPEN because the connection won't close instantly and the ws object still lingers on the server before it is finally removed. By doing that I don't need to close the connection or delete the socket repeatedly in my code. \nBut if I refresh the browser the connection is closed and the readyState is set to WebSocket.CLOSED. Now if the user still hasn't hit the target it won't trigger the above code. When the user hits the target, the socket readyState is already WebSocket.CLOSED, hence the socket won't be deleted from the list. I can move the delete logic out of the condition check, but this way the delete operation will be called multiple times a second. Is there a neat way to do this logic without doing list.delete(ws);ws.close() repeatedly?. Thank you sorry about that but I have tried asking ws related questions on Stackoverflow.com but rarely get a good answer there. Would love to know where is the best place to ask questions related to implementing WebSocket applications using ws.. ",
    "LYZhelloworld": "Well I think I have found it.\nAfter reading the source code, I realized that I can use ws.upgradeReq.url to get the path of request on connection.. ",
    "vonzimr": "So, it appears you've closed, reopened, then closed this issue. I'm assuming you've solved this problem, then? Wanna enlighten us folks who are still having this problem?. I figured out a fix that doesn't require deleting the if statement.\nin Receiver.js which lives in in the socket.io/node_modules/ws folder, \nset isValidUTF8 = require('./Validation'), \nsee the example here: https://github.com/websockets/utf-8-validate\nI'm pretty sure there's something wrong with the version of utf-8-validate that's being installed for this library though, meaning this issue should still be open?. ",
    "goktugyil": "I'm having a common occurrence of these, what is the suggested method of debugging/finding out the cause? . > This error means that the client is sending a compressed frame but the permessage-deflate extension is disabled.\n\nThere isn't anything actionable to do apart from handling the error.\n\nAnd how would we handle this particular error? \nI've read this https://github.com/websockets/ws/issues/1191#issuecomment-324076671.\nBut I already got the following code running in my server and it doesn't seem to be catching this error:\nwebSocket.on('error', function(error) {\n            console.log(webSocket.id + ':' + error)\n        }). I'm using v10.11.0 in dev environment and v10.10.0 in the server that crashed. Server crashed like 60 times in 2 minutes. And then nothing happened for a day. What do you suggest I do about this?. @shellscape \nI see. :(\nIs there a specific place of origin for this bug? I'm not using permessage-deflate. . > port: wss.address().port,\nHow does this work without init() first?. > @goktugyil here is a quick way to reproduce:\n\n```js\nconst { request } = require('http');\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 0 }, () => {\n  const req = request({\n    port: wss.address().port,\n    headers: {\n      Connection: 'Upgrade',\n      Upgrade: 'websocket',\n      'Sec-WebSocket-Key': 'dGhlIHNhbXBsZSBub25jZQ==',\n      'Sec-WebSocket-Version': 13\n    }\n  });\nreq.end(Buffer.from([0xC1, 0x05, 0x5f, 0xeb, 0xe5, 0xf0, 0x1c]));\n});\nwss.on('connection', (ws) => {\n  ws.on('error', console.error);\n});\n```\n\nI couldn't get this to compile at all. . I'm tracking the disconnections used ws 3.3.1 until 3 March then updated ws to 6.1.4. I am adding the charts.\nConclusion: \n- Updating to 6.1.4 did not solve the disconnect problems. \n- It hasn't seem to make any changes in terms of general disconnections. (Volume of 1001 could be ignored because it is largely dependent on the traffic that day)\n- 1000 errors completely disappeared after updating and 1005 errors started showing up, while previously we didn't have these. (I hope this is the expected behaviour?)\n\n\n. > > 1. How can I debug this problem better?\n\nThere is not much you can do about it because it's not an issue. It's a condition you have to deal with.\n\n\nYou mean it is not an issue with ws, right? \nWhat do you mean there is not much you can do about it?\nWhat do you mean it's a condition you have to deal with? If it is common, how do you or other people generally deal with this issue?\n\n\n\n\nWhat are common cases which might be causing this problem?\n\n\nA close frame is not received, likely because it was not sent.\n\n\nDo you mean that socket server didn't send the close frame to client?. \n",
    "Dorian": "Not sure about that coveralls report, seems completely unrelated. @lpinca Thanks for the review, I updated the code and I think this could help a lot of people setting up / trying websockets and trying to make it work. ",
    "booboothefool": "@lpinca Do you have any advice on how to implement this with this library?\nhttps://github.com/apollographql/subscriptions-transport-ws\nIt looks like I'd do something like this:\nnew SubscriptionServer(\n  {\n    subscriptionManager,\n    keepAlive: 20000,\n    onConnect: async (connectionParams, webSocket) => {\n      webSocket.on('error', err => console.error(err));\n    },\n  },\n  {\n    server: websocketServer,\n    path: '/',\n  }\n);\nwhich does not seem to be helping as the server continues to crash with \"reserved fields must be empty\".. @lpinca Yes, after I made sure the change was in:\nWrong:\nnew SubscriptionServer(\n  {\n    subscriptionManager,\n    keepAlive: 20000,\n    onConnect: async (connectionParams, webSocket) => {\n      webSocket.on('error', err => console.error(err));\n    },\n  },\n  {\n    server: websocketServer,\n    path: '/',\n  }\n);\nCorrect:\nhttps://github.com/apollographql/subscriptions-transport-ws/blob/master/src/server.ts#L96\nrequest.on('error', function (err) {\n                console.error(err);\n            });\nIt is catching the error, and no longer crashing. All is well now. Thanks so much. \n. ",
    "xuset": "Ah that does fix it! The fix does seem to cover up the actual problem though, but I'm lucky that it's only an optional dependency :)\n. Those are all good points. I did have one idea for a general fix though. In BufferUtil.js when bufferutil is required the code assumes the bufferutil version is compatible with the version of ws. Maybe a check could be put in place to only use bufferutil if it's version is compatible with that version of ws. What are your thoughts on this? It wouldn't fix the pinned dependency problem you mentioned, but hopefully most people don't pin down the patch version number. Yeah I see that now. I'm all for that then!. ",
    "normanjaeckel": "It looks like that angular-wamp refers to autobahn 0.9.9 which is outdated and does not exclude ws in the browser field. So I will go ahead here. Many thanks for your answer.. ",
    "smithrobert": "@lpinca Running your code on localhost I get\n100 * 100 KiB: 606.160ms\nWAN connection to my desktop takes a bit longer\n100 * 100 KiB: 2225.619ms\nWhat's confusing me is that pushing the same amount of data on a HTTP/2 connection is much faster (LAN: 330.785ms, WAN: 571.245ms). Are the WS-messages blocking?\n\nServer code (HTTP/2)\n\n```\nconst spdy = require('spdy');\nconst fs = require('fs');\nconst crypto = require('crypto');\n\nconst data = crypto.randomBytes(100 * 1024);\nconst options = {\n  key: fs.readFileSync('keys/privkey.pem'),\n  cert: fs.readFileSync('keys/fullchain.pem')\n};\n\nspdy.createServer(options, function(request, response) {\n  for (let i = 0; i < 100; i++) {\n    response.push('./' + i, {}, function(err, stream) {\n      stream.end(data);\n    });\n  }\n}).listen(443);\n```\n\n\n\nClient code (HTTP/2)\n\n```\nconst spdy = require('spdy');\nconst https = require('https');\nconst url = 'website.me';\n\nconsole.time('100 * 100 KiB');\nvar agent = spdy.createAgent({\n  host: url,\n  port: 443,\n});\n\nvar request = https.get({\n  host: url,\n  agent: agent\n});\n\nvar count = 0;\nrequest.on('push', () => {\n  if (++count == 100) { console.timeEnd('100 * 100 KiB'); }\n});\n```\n\n. The multiplexing reason seems plausible. I'll close the issue for now since there doesn't seem to be a clear solution. . ",
    "marwankhalili": "@lpinca  Disabling permessage-deflate was a huge improvement when testing on localhost:\n100 * 100 KiB: 39.441ms. \nHowever, I still get the same results as before over WAN (e.g. 100 * 100 KiB: 2115.659ms). Any ideas on how to improve the WAN transfers? . ",
    "yurikoex": "moved back to 2.2.0 fixed our issue. ",
    "finscn": "@JacksonTian  Node 6.9.5\n@lpinca , I see , thanks.. ",
    "Binau": "thx !. ",
    "Sybergoth": "Please look at the code below. The req param is passed through info constant which cannot be changed. I tried adding my auth object to it and nothing happend.\nconst info = {\n        origin: req.headers[${version === 8 ? 'sec-websocket-origin' : 'origin'}],\n        secure: !!(req.connection.authorized || req.connection.encrypted),\n        req\n      };\n  if (this.options.verifyClient.length === 2) {\n    this.options.verifyClient(info, (verified, code, message) => {\n      if (!verified) return abortConnection(socket, code || 401, message);\n\n      this.completeUpgrade(protocol, version, req, socket, head, cb);\n    });\n    return;\n  }. Thank you, it worked.\n",
    "revl-ca": "Hey @lpinca ,\nLet's assume that I use the example above, how can I get foo it from a client object?\nwss.clients.forEach(client => {\n  // Any way to get foo?\n})\nThank you. @lpinca works like a charm.\nYou are very responding. I'm truly impressed.\nHave a great weekend Luigi.. ",
    "chemitaxis": "I have the same error.... ",
    "rajiff": "@lpinca Thanks\nAn example would help (it can be incorporated to this if needed as Pull Request https://github.com/rajiff/ws-react-demo)\nThat means, in WS we also don't have support for any channel/room/namespace concept? \n. @lpinca : I update my repo now with working version, please have a look and suggest\nWhat is the suggestion if we want to send data to specific client sockets only? only emit on that socket object alone?. Thanks @3rd-Eden \nI now got it updated https://github.com/rajiff/ws-react-demo/blob/master/public/components/WebSocketClient.jsx, a fully functional react ws client with 'WS' as server\nGoing to try this with socket.io also as i need pvt channels/rooms . ",
    "Stylesoftware": "I Think i fixed this with:\ntry {\n            ws.send(s, function ack(error) {\n                if(error == undefined)\n                    return;\n                ws.close();\n                                log(\"Async error:\"+error);\n            });\n        } catch (e) {\n                        log(\"Sync error:\"+e);\n                        ws.close();\n        }. You should consider using your own ping thru WS, I use client ping and\nserver checking:\nAdd all your user authentication and last ping time and WS connection\nobject to an array of user objects,\nAdd the user array number to the WS connection object\nWhen a new WS event occurs, use the WS.user_array_number to look up the\nuser info for any auth checking, and reset the ping time.\nUse a function with setInterval to check all ping times in your user array,\nif over 6 seconds, kill the WS connection, delete the user_array object\nEnsure all clients send a ping thru ws every 3 seconds or so.\nOn Wed, Jul 12, 2017 at 1:57 AM, Aaron notifications@github.com wrote:\n\nHow long will it take for a websocket connection to close itself? I have\nused @Stylesoftware https://github.com/stylesoftware 's code above and\nthe error is gone. However it can log the \"Async error:\" information for a\nfew seconds. Suppose I have an online game, the server may send the\ninformation multiple times a second and bad connections appear often for\n24/7 the log file will be huge.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/issues/1052#issuecomment-314451862, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AGuzR7W0-ETPFZjfE2FLUgFIsar9ae1Yks5sM39SgaJpZM4MknQr\n.\n. \n",
    "colinligertwood": "Understood. The issue I'm having is WebsocketServer is being bundled in my project with Autobahn.js for the browser, and then fails in Firefox, which until recently considered the for const of invalid.. If you'd rather keep the const, which I also agree is valid, I'll try and find another solution.. Indeed. It's being improperly included in the build by Meteor which ignores 'browser' in package.json if it's an object, as is the case with Autobahn. It's a known Meteor issue. https://github.com/meteor/meteor/issues/6890\nAs I said before, If you'd rather keep the const, I'll find another solution.. Thanks, I've managed to get around it for the time being by simply removing the ws library from the project. It results in a compile time warning, but it still builds and works fine. Since, as you pointed out, it shouldn't be loaded into the browser anyway, and the firefox issue is itself a bug that's been since fixed, I'm happy call it an edge case and work around it for a while.. ",
    "greenkeeper[bot]": "Version 3.19.0 just got published.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.19.0\n\ne09132f Fix: no-extra-parens false positive with exports and object literals (#8359) (Teddy Katz)\n91baed4 Update: allow custom messages in no-restricted-syntax (fixes #8298) (#8357) (Vitor Balocco)\n35c93e6 Fix: prevent space-before-function-paren from checking type annotations (#8349) (Teddy Katz)\n3342e9f Fix: don't modify operator precedence in operator-assignment autofixer (#8358) (Teddy Katz)\nf88375f Docs: clarify that no-unsafe-negation is in eslint:recommended (#8371) (Teddy Katz)\n02f0d27 Docs: Add soda0289 to Development Team (#8367) (Kai Cataldo)\n155424c Fix: ignore empty path in patterns (fixes #8362) (#8364) (alberto)\n27616a8 Fix: prefer-const false positive with object spread (fixes #8187) (#8297) (Vitor Balocco)\n8569a90 Docs: add note about git's linebreak handling to linebreak-style docs (#8361) (Teddy Katz)\n5878593 Chore: fix invalid syntax in no-param-reassign test (#8360) (Teddy Katz)\n1b1046b Fix: don't classify plugins that throw errors as \"missing\" (fixes #6874) (#8323) (Teddy Katz)\n29f4ba5 Fix: no-useless-computed-key invalid autofix for getters and setters (#8335) (Teddy Katz)\n0541eaf Fix: no-implicit-coercion invalid autofix with consecutive identifiers (#8340) (Teddy Katz)\n41b9786 Fix: no-extra-parens false positive with objects following arrows (#8339) (Teddy Katz)\n3146167 Fix: eslint.verify should not mutate config argument (fixes #8329) (#8334) (alberto)\n927de90 Fix: dot-notation autofix produces invalid syntax for integer properties (#8332) (Teddy Katz)\na9d1bea Fix: comma-style autofix produces errors on parenthesized elements (#8331) (Teddy Katz)\nd52173f Fix: don't generate invalid options in config-rule (#8326) (Teddy Katz)\n6eda3b5 Fix: no-extra-parens invalid autofix in for-of statements (#8337) (Teddy Katz)\n6c819d8 Fix: dot-notation autofix produces errors on parenthesized computed keys (#8330) (Teddy Katz)\n2d883d7 Fix: object-shorthand autofix produces errors on parenthesized functions (#8328) (Teddy Katz)\ncd9b774 Fix: quotes false positive with backtick option in method names (#8327) (Teddy Katz)\nd064ba2 Fix: no-else-return false positive for ifs in single-statement position (#8338) (Teddy Katz)\n6a718ba Chore: enable max-statements-per-line on ESLint codebase (#8321) (Teddy Katz)\n614b62e Chore: update sinon calls to deprecated API. (#8310) (alberto)\n0491572 Chore: use precalculated counts in codeframe formatter (#8296) (Vitor Balocco)\n8733e6a Chore: Fix incorrect error location properties in tests (#8307) (alberto)\nc4ffb49 Chore: Fix typos in test option assertions (#8305) (Teddy Katz)\n79a97cb Upgrade: devDependencies (#8303) (alberto)\ne4da200 Upgrade: Mocha to 3.2.0 (#8299) (Ilya Volodin)\n2f144ca Fix: operator-assignment autofix errors with parentheses (fixes #8293) (#8294) (Teddy Katz)\n7521cd5 Chore: update token logic in rules to use ast-utils (#8288) (Teddy Katz)\n9b509ce Chore: refactor space-before-function-paren rule (#8284) (Teddy Katz)\nddc6350 Fix: no-param-reassign false positive on destructuring (fixes #8279) (#8281) (Teddy Katz)\nf8176b3 Chore: improve test coverage for node-event-generator (#8287) (Teddy Katz)\n602e9c2 Docs: fix incorrect selector examples (#8278) (Teddy Katz)\n\n\n\nCommits\nThe new version differs by 0 commits .\nSee the full diff.\n\n. ## Version 2.3.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits .\n\n03b6da8 2.3.1\n85b7ecf Revert \"bump deps\"\n\nSee the full diff.\n\n. ## Version 3.0.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits .\n\n8379587 3.0.0\nf22e513 Revert \"Revert \"bump deps\"\"\n\nSee the full diff.\n\n. ## Version 3.4.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 3.4.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nOhai CRLF...\nFixed a publishing mishap with git's autocrlf settings.\n\n\nCommits\nThe new version differs by 3 commits0.\n\nac0c1c8 v3.4.1\n64d96d3 :ship: Release v3.4.0\n4e3252e Force rebuild of mocha.js on npm version\n\nfalse\nSee the full diff\n\n. After pinning to 1.1.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. After pinning to 5.0.2 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 5.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv5.0.1\n\n196c102 Fix: valid-jsdoc should allow optional returns for async (fixes #10386) (#10480) (Mark Banner)\n4c823bd Docs: Fix max-lines-per-function correct code's max value (#10513) (Rhys Bower)\n\n\n\nCommits\nThe new version differs by 4 commits.\n\ncaeb223 5.0.1\n125dc34 Build: changelog update for 5.0.1\n196c102 Fix: valid-jsdoc should allow optional returns for async (fixes #10386) (#10480)\n4c823bd Docs: Fix max-lines-per-function correct code's max value (#10513)\n\nSee the full diff\n\n. ## Version 5.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\n2d4da6c [dist] 5.0.1\n\nSee the full diff\n\n. After pinning to 4.0.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. After pinning to 5.15.2 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. ",
    "dynek": "Really appreciate it @lpinca - I was able to fix my app!. ",
    "wcoebergh": "Would something like this be correct:\n```\nvar key = {\n    key: fs.readFileSync('path/to/key/key.pem'),\n    cert: fs.readFileSync(path/to/cert/cert.pem')\n};\nvar options = {\n    port: 8080,\n    verifyClient: someVerifyFunction,\n    agent: new http.Agent(key)\n}\nvar wss = new WebSocketServer(options);\n```. Or should it be:\n```\nvar options = {\n    port: 8080,\n    verifyClient: someVerifyFunction,\n    agent: new http.Agent()\n    key: fs.readFileSync('path/to/key/key.pem'),\n    cert: fs.readFileSync(path/to/cert/cert.pem')\n}\nvar wss = new WebSocketServer(options);\n```. I don't know if you can leave the agent options without entering certificate files?. Ah I see now, thanks for pointing out my mistake, and thanks for the link. However, the syntax seems weird, am I missing something? see below code:\n```\nconst server = https.createServer({\n        cert: fs.readFileSync('test/fixtures/certificate.pem'),\n        key: fs.readFileSync('test/fixtures/key.pem')\n});\nconst wsserver = new WebSocketServer({\n    verifyClient: (info) => {\n        success = info.secure === true;\n        return true;\n    },\n    : server\n});\n```\nWhere the MISSING_KEY should be server right. Cool, did not know that yet! Thanks for the support/help! Appreciate the work. By the way, we are binding the websocket server to the general node https server, which for the regular http requests still works fine.. Hmm weird. Could be a docker issue as well. Thanks for the suggestion of the pings. Can I do that from the same server as well :)? Then I will just ping every x minutes from the same machine. ",
    "stefanpoeter": "Well that is way smarter than my approach :+1:  Thanks @lpinca . ",
    "zdila": "Yes, we can easily reproduce it.. OK. Because of this issue we had to downgrade ws to 1.1.4. But now after upgrading it back from 1.1.4 to 2.2.3 to create a testcase we are no longer getting corrupted messages :-o.. @lpinca I couldn't reproduce it anymore. Feel free to close this issue and I'll open a new one if I will be able to reproduce it reliably.. But we are not calling ws.close() in this case. readyState gets to 2 probably because of network (or remote server) problem.. I'll try to collect some more details then.. ",
    "dgrcode": "@3rd-Eden I've just tried with browser: false and it throws the warnings. I don't actually understand the logic behind the browser field, but I think its value can only be a string or an object.\nIf the object is a string, this is the path of the file that will replace the module (in this case ws) when required for the browser.\nIf the value is an object, each key sub-module will be replaced with the file at its value, or ignored if it is false.\n@lpinca I'm using it with node, but the warning only shows when using it for the client. I only know the warning that I get, surely you have a bigger picture perspective.\nThanks both of you for checking it that fast!. @lpinca Correct.\nI'm using new WebSocket.Server() for node, and new WebSocket() for the client. I am using webpack. I can share the config if you want.\nIn my project, I want to use WebSockets instead of AJAX calls, so from the server, I plan to send data to the client and vice-versa. So far I am facing a CORS issue, but that's another story.. This actually fixes everything when bundling.\nHowever, the following code throws an error.\n```js\nconst WebSocket = require('ws');\nconst ws = new WebSocket('ws://www.host.com/path', {\n  perMessageDeflate: false\n});\n```\n\nFailed to construct 'WebSocket': The subprotocol '[object Object]' is invalid\n\nI see that the snippet in ws-browser.js is telling the browser to use the native WebSocket if available. After I change my client code everything works perfectly. Even the CORS issue that I was facing is solved now! :smiley:\nIs this a good approach? I mean using native WebSockets instead of ws.\nThanks for the solution! I'll close the PR then.\n. Great! I have it running already and no warnings when bunlding with webpack.\nThanks!. After a few days working with WebSockets, I came back to the docs and I realised why I tried to use this library in the browser, instead of the native WebSockets. When I read \"client\" I understood \"browser\", but now I think that \"client\" means the back end with the role of the client in the WebSocket communication.\nI know that this was caused only by my lack of knowledge of WebSockets, but do you think we could add a line at the docs stating something like:\n\nNote for use in the browser: you should use the native WebSocket. The client in the docs are a reference to a back end with the role of a client in the WebSocket communication.\n\nMaybe I'm still wrong and this also not the meaning of client in the docs.\nWhat do you think?. ",
    "OrangeChaten": "I'm interested too!\n. ",
    "euroclydon37": "Here is an article that I'm going to try and mimic today for this purpose.\nIt really would be nice to have this implemented into the library itself. It's otherwise a fantastic library.. ",
    "rodel77": "In client side you can use this:\nvar socket = new WebSocket('ws://ip:port')\nIts vanilla JS then handle events with: socket.onopen socket.onclose socket.onerror socket.onmessage = callback. I dont know if this matter but try to add connection listener to server\nwss.on('connnection', function(client){}). Are you sure you are calling the WebSocket.Server var like this?\n```\nconst wss = new WebSocket.Server({ port: 8889 });\nwss.on('connection', (client) => {\n    console.log(client);\n});\n``. And \"WebSocket\" var in client its called wws?\nIn the example i put first isvar socket = new WebSocket('ws://ip:port')then you have to usesocket.onopen = function(){console.log('Callback')};`. ",
    "HomeboxJim": "Thanks @rodel77, but it's not working for me. The callback functions are never fired. :/\n```\nvar ws = new WebSocket('ws://120.0.0.1:8889');\nconsole.log('connecting to server...');\nws.onopen = function open() {\nconsole.log('connected to server!')\n\n};\nws.onmessage = function incoming(data, flags) {\nconsole.log('got a message! ' + JSON.stringify(data));\n\n}\n```. Server:\n```\nconst WebSocket = require('ws');\nconst util = require('util');  \nconst wss = new WebSocket.Server({ port: 8889 });\n```. @LordMajestros - Hmm it's saying, \"wss.on is not a function\". On the server I am, but the problem I'm having is in the client code.. Ah, I think I was entering the ip address wrong. facepalm\nThanks @rodel77. The syntax you gave here is working for me. \ud83d\udc4d . ",
    "jaimehrubiks": "Thanks for your fast response.. ",
    "Starillusion": "Interesting.... But why?. Never knew NPM could install different versions of a module, always thought it installed only the latest version\n. ",
    "lifaon74": "Ok thanks to you. I post here an anwser if it could help others : \njs\n/** CLIENT SIDE **/\nsocket.binaryType = 'arraybuffer'; // to receive arraybuffer instead of blob\n// https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder\nsocket.send(new TextEncoder().encode('some string with special chars : \ud83d\ude01'))\n// https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder => to decode\n. ",
    "jwalton": "I am essentially building a transparent websocket proxy.  So, an upgrade\nrequest comes in, I make a new WebSocket connection to my target host.\nWhen the upgrade reply comes back, though, if there are any extra header\nfields in the reply I should copy them into the upgrade reply to the\nclient.  If there was a set-cookie header in the upgrade reply, for\nexample, it should get passed on.  (I mean, it would be a bit weird for\nthere to be a set-cookie headed, but if it's there, I should forward it.)\n. Actually, RFC 6455 s2 explicitly states \"Additional header fields may also\nbe present, such as cookies,\" so I guess it isn't that weird.  The other\nobvious use case here is parsing cookies from a web site, then.\n. Yeah, ws is definitely not the perfect solution here.  I could just proxy the raw bytes from the request straight through to the server (possibly I'd need to rewrite some headers, but even that is pretty easy - I could just handle the upgrade event straight from node).  But, for my use case I also want to be able to inspect each websocket message as it goes through, or be able to filter out specific messages.  In a perfect world I'd pass the raw bytes through and I'd have some kind of \"ws parser\" library that I could for the data to.  ws seemed like an easy \"this will get me started\" solution, though, and it's working pretty well aside from the fact that I need to do some serious hackery to get the response headers.  :)\nBut, I mean, you provide an API for inspecting and modifying the response headers on the server side, only makes sense you'd have one on the client side too.. node-http-proxy is awesome, and I've used it before, but node-http-proxy doesn't meet my needs for a few reasons:\n\nAFAIK node-http-proxy knows nothing about the contents of the websocket frames being passed back and forth - I can't inspect the contents of the websocket messages, or alter them.\n\nIn my case I have one machine which is receiving the websocket request, then it is tunneling the WS stream to another machine over yet-another-protocol, and node-http-proxy is simply not designed for this use case.. The short version is:\n\n\nBrowser connects to server A, server A has a ws.WebSocketServer that accepts the connection.\n\nServer A calls socket.on('message'), and for each message writes the message to a pipe to server B.\nServer B uses ws.WebSocket to create a websocket connection to the final destination.  Every time server B receives a message over the pipe, it calls websocket.send() to write the message.  Server B also listens for messages from the dest, and pipes them back to Server A, which .send()s them to the original client.\n\nSo here either Server A or Server B has the opportunity to examine, rewrite, or discard any websocket message passing through.  This is a pretty classic hop-by-hop transparent proxy, aside from the fact that it's split across two servers.  I already have a working implementation.\nIt's easy to think up other use cases outside the crazy one I'm outlining here.  If I create a websocket connection to a server, and the sever sends back a set-cookie in the upgrade response, then as a client I want to see the headers so I can add that cookie to my \"cookie jar\" to send in subsequent requests.  ws also provides the means to set custom headers on the server, so if I want to pass an out-of-band message in a custom header, it would be nice if the client could actually see that custom header.\nI'm happy to submit a PR.. Yes, I like that better too, actually.  :P  Or, actually, I wonder if it would make sense to just add the response to the \"open\" event?  That's kind of a natural place for it.. Well, it's never too late to turn 'headers' into an undocumented event\nuntil removing it in 3.x.\nOn Thu, Apr 20, 2017 at 10:36 AM, Luigi Pinca notifications@github.com\nwrote:\n\nThat's goes against the spec. I should have waited a little more before\ncutting a new release.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/pull/1082#issuecomment-295760560, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABsF-0lGR6BscIExfEA_9hKoXDpxIiq1ks5rx21VgaJpZM4NCcCe\n.\n. Should this be true of the 'emits a ping event' and 'emits a pong event' tests above?  That's where I copied it from.  :P. Alright.  I updated this one.  Should be good to go.  Thanks!. \n",
    "oxygen": "Well it didn't work for me in node 7.8 which supports ES6 syntax out of the box.\nNeedless to say, it doesn't make it clear that Server accepts a HTTP server property in the options param.\nI would go as far as write that as const httpServer = and {server: httpServer}.\nHelp documentation needs to be clear as possible, not obscure. \nJust my 2 cents, bye :). Can't remember what I did then.\nI would still make the docs clearer though :). ",
    "lll000111": "So when I use onmessage the callback gets an object with a data property?\nBackground for my question is that I argued with the uWebSockets maintainer over an issue I had opened.... Thank you! I'm trying it out just now.  So if that is so it seems to me that -- see the ticket over at uws that I linked above (link) -- alexhultman, who even threatened to ban me, is incorrect in saying his uws package behaves like ws, and that ws behaves according to the standard.. Ahhhhhh... oh yes, the onmethod. I completely overlooked that. Anyway, I'll switch to 'ws'  now because I don't want to use a package where I'm threatened with expulsion over nothing. Any potential gain in speed isn't worth losing any form of support, including even that I can't even submit pull requests.. Yeah I noticed that, looking at your code and the class you use for the message. Is that actually necessary?. ",
    "nodesocket": "Ahhhhhhhhh. That worked.. Worked. Thanks.. Heads up, in v3.0.0 getting the host ip of a client connection has changed from ws.upgradeReq.connection.remoteAddress to:\nreq.connection.remoteAddress.\n",
    "amirzandi": "it always returns 1.. ",
    "jeremy16601": "wss.clients.size  thanks. ",
    "mcordingley": "I got it working by switching libraries. I don't think there's anything wrong with this one, just some other piece to my larger puzzle. I hate to close this without a full explanation. Thanks!. ",
    "creimers": "I have a similar (if not the same) problem. I copied the express example code from the README and made the following modification:\njavascript\nconst cors = require('cors');\napp.use(cors());\nIn the client I have these lines:\n```javascript\nimport WebSocket from 'ws';\nconst connection = new WebSocket('ws://localhost:8080');\n```\nThe browser throws the following error:\n```\n\nUncaught (in promise) Error: unexpected server response (200)            WebSocket.js:650\n```\n\nWhen skipping the import Websocket from 'ws' part in the browser, thus relying on the native websocket, it works as expected.\nI sure shall be missing something... can you spot it?. @lpinca Sure!\nLike I said, it's almost exactly the express example from the README.\nI got express==4.15.2 and ws==2.3.1 installed.\n```javascript\nconst express = require('express')\nconst http = require('http')\nconst url = require('url')\nconst WebSocket = require('ws')\nconst cors = require('cors')\nconst app = express();\napp.use(cors())\napp.use(function (req, res) {\n  res.send({ msg: \"hello\" });\n});\nconst verifyClient = (info) => {\n  console.log('ding dong')\n  return true\n}\nconst server = http.createServer(app);\nconst wss = new WebSocket.Server({ server, verifyClient });\nwss.on('connection', function connection(ws) {\n  const location = url.parse(ws.upgradeReq.url, true);\n  // You might use location.query.access_token to authenticate or share sessions\n  // or ws.upgradeReq.headers.cookie (see http://stackoverflow.com/a/16395220/151312)\nws.on('message', function incoming(message) {\n    console.log('received: %s', message);\n  });\nws.send('something');\n});\nserver.listen(8080, function listening() {\n  console.log('Listening on %d', server.address().port);\n});\n```. @lpinca Thanks for looking into it. I still can't get it to work here...\nCan you show your complete client code?\nAdditionally, webpack gives me this error:\nWarning in ./~/bindings/bindings.js\nCritical dependencies:\n76:22-40 the request of a dependency is an expression\n76:43-53 the request of a dependency is an expression\n @ ./~/bindings/bindings.js 76:22-40 76:43-53. I have to be honest: I have no idea what's going on.\nI'm on the latest Chrome. If on the client I'm using the native WebSocket object, then what is the require('ws') for?\nMaybe it's all a big misunderstanding. It seemed to me that ws could also be used in the browser, providing enhanced features such ass passing headers and such, as documented here.. @lpinca Thanks for clarifying.. ",
    "zh0uquan": "I have the same error.... hey @creimers did you fix the error or just use the native websocket in the browser with the shim code?. ",
    "JoweiBlog": "has someone fixed the issue?. maybe you can try it:\nlocation / {\n        proxy_pass  http://127.0.0.1:3030;\n        proxy_set_header    Upgrade  $http_upgrade;\n    proxy_set_header    Connection  \"upgrade\";\n    }\nnginx  config\ndone!. ",
    "krtl": "just remove the following line \nconst WebSocket = require('ws');\nin browser code and you will be happy.\n. ",
    "askucher": "same error. wasted time. ",
    "NCal": "also getting this error:\nunexpected server response (503). ",
    "Valen558": "Thank you for the prompt response. Yes I am talking exactly about -the pull the cord- types of disconnects. I thought that send would throw an error of some kind when sending to a client with cord pulled off.\nNow I see how I should deal with this kind of situation with isAlive parameter.\nRelated question - should I use ws.terminate();\nor ws.close();  already does the work at the end of the session with client?\n. I found some idea and code that probably helps to detect hard disconnects on client side in browser (a bit unrelated but still may be useful):\n```\nfunction doesConnectionExist() {\n\u00a0\u00a0\u00a0\u00a0var xhr = new XMLHttpRequest();\n\u00a0\u00a0\u00a0\u00a0var file = \"your_site.net/contest.pgn\";\n\u00a0\u00a0\u00a0\u00a0var randomNum = Math.round(Math.random() * 10000);\n\u00a0\n\u00a0\u00a0\u00a0\u00a0xhr.open('HEAD', file + \"?rand=\" + randomNum, true);\n\u00a0\u00a0\u00a0\u00a0xhr.send();\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0xhr.addEventListener(\"readystatechange\", processRequest, false);\n\u00a0\n\u00a0\u00a0\u00a0\u00a0function processRequest(e) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (xhr.readyState == 4) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (xhr.status >= 200 && xhr.status < 304) {\n        console.log(\"connection exists!\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n    console.log(\"No Internet Connectioin\");\n    }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```\nIt seems to work well  but I am unsure how reliable it is. (Code taken from another place).. Thanks, I see now.. ",
    "projetoarduino": "Hi\nWhere is sec-websocket-key. Thanks my friend.. Hi, this method work, but i need one unique id per client.\nI need send  private messages.\nAnswering my own question:\nThe way I managed to identify the clients was this\nws._ultron.id. Hi use wss.clients.forEach but add one 'if' to compare and send only client you need. \nYou need create one object to store ws._ultron.id and associated to another data you know, one nick or Id \nfunction senMess(get_dest, message){\n    wss.clients.forEach(function each(client) {\n      console.log(client);\n      if (client !== ws && client.readyState === WebSocket.OPEN && client.ws._ultron.id == CLIENTS[get_dest]) {\n        client.send(message);\n      }\n    });. @lpinca Thanks, i tested this and work fine.. ",
    "Josephine7": "Hey @projetoarduino \nSo I am following your train of thought. I also needed unique identifiers for our customers. How did you then send that message to a particular user ?. ",
    "ZaDarkSide": "You are right, but instead of throwing an error like this one:\n\"TypeError: First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.\"\nMaybe instead the error message should be improved at least something like:\n\"If you are trying to send a object please serialize it first with your method of choice, JSON, BSON, etc.\"\nRelated with https://github.com/HenningM/express-ws/issues/72. Yes I understand, but in Sender.js there is already some code that does conversion from ArrayBuffer to Buffer, why not add conversion from Object to Buffer also?. Okay, it's a minor issue for me, closing this.. ",
    "zvictor": "It is great that I find this issue, though. I couldn't figure out what I was doing wrong... Thanks for posting @ZaDarkSide !. ",
    "JSahar": "hello,\nI have pretty same code, I run the server side on Amazon cloud. \nmy problem appears in this part:\nthis.wss.on('connection', function (ws, req) {\n        // Set connection string we can use as client identifier\n        ws.upgradeReq = req;\n        ws.connectString = util.format(\"%s:%d\",\n            ws.upgradeReq.connection.remoteAddress, ws.upgradeReq.connection.remotePort);\nthough the 'connection' function is defined, the client is not able to connect to the server and the error is: \n\nthis is weird because I don't face this issue when my raspberrypi run as the server!\n . ",
    "Droppers": "Oh, I just noticed version 3.0.0 does not have upgradeReq anymore https://github.com/websockets/ws/pull/1099.\nThat is really a major breaking change..\n. That is unfortunate, I will use version 2.3.1 then.\nThanks.. ",
    "sese": "You are right. Sorry for comment, I'll open an issue to autobahn.. ",
    "YUzhva": "Okay.\nServer rendering of the React component (rendering component to string with express server before sending to client) also doesn't help, because ws require live server instead of URL where this server hosted )=\nThank, you for help. There are no any issues with native WebSocket, so will use them.. ",
    "refack": "This is the diff since last passing https://github.com/nodejs/node/compare/171a43a98685d5cca6710d2d6bf4d20008de3426...ad4765a32641277a91efb565e2056abaa6b6a70b\nPrbly https://github.com/nodejs/node/commit/330c8d743e33a83f85389ea8a64e3d3854ea0048. > @refack I do not think opening a bug on the target module is the best approach for core. You should really open a bug in core.\nI usually do, initially I thought it was a load induced timeout.\nNow @lpinca seems to agree https://github.com/nodejs/node/pull/12828#issuecomment-303113552\nP.S. It's CITGM policy to inform module authors https://github.com/nodejs/citgm/blob/master/CONTRIBUTING.md#submitting-a-module-to-citgm. > Anyway, as the author of the offending issue I would have loved to know :).\n\nI'm a bit unsure how I missed that, and why it fails only on AIX and OSX, but not everywhere else.\n\nBig Ack \ud83e\udd26\u200d\u2642\ufe0f \nRe: https://github.com/nodejs/node/pull/12925#issuecomment-303120426. ",
    "youkinjoh": "when ws@2.3.1\n% SWITCH=\"foobar\" node app.js\nfoobar\nExpress server listening on port 3000\n--open--\nws://localhost:3000/foo\n--error--\nws://localhost:3000/foo\nFIN must be set\n--error--\nws://localhost:3000/bar\nunexpected server response (400)\nwhen ws@1.1.4\n% SWITCH=\"foobar\" node app.js\nfoobar\nExpress server listening on port 3000\n--open--\nws://localhost:3000/foo\n--open--\nws://localhost:3000/bar. ",
    "logidelic": "I believe I'm coming up against the same issue. I was investigating why my websockets were closing (on the client side) unexpectedly in some cases. While investigating I noticed that not all server-side connections end with a \"close\" event being emitted. Perhaps, as with the OP, this is because the connection got closed due to some network failure (still trying to figure that part out). In any case, however the ws closes, obviously the server needs to know about it.\nIs there any workaround for this? I guess I could poll the readyState, though that's a bit lame.... Thanks for the response @lpinca. Some notes/questions\n\n\nMy client (regular chrome websocket) pings the server regularly, and the server responds to the pings with pongs. My client will detect an unresponsive server and close the websocket (and try to reconnect).\n\n\nI don't really care if the server is unaware of the broken connection right away, but I was assuming that eventually (i.e. when the browser closes that websocket connection with the server or if the browser window is closed), a \"close\" event would get emitted on the server-side for that connection. Have I misunderstood?\n\n\n\nIs the readyState stuck on CLOSING for more than 30 seconds in your case?\n\nYes, I believe that the \"close\" event never gets emitted in certain cases. I will debug further to to confirm.. Yea, I'm using sending my own ping/pong text. I will test further and report back about the closing state.. ",
    "rsarili": "Hi, I coming up with similar problem, my connection readyState stucks in CLOSING state when server close the connection. Here is my test case,\n- client connects to server\n- after some operations server close the connection\n- client side got the close event\n- I expect close event should be emitted in server-side too. I run server from localhost and from Azure service. In localhost it works but, in Azure service connection readyState stucks in CLOSING state for 30secs. I am not sure if this is a bug of 'ws' since it is work in localhost. This test case result every time like that, so I am not sure if it is a network problem. Do you have and idea of the reason? and Can you suggests to way handle that? . @lpinca  Latter callback is not called in stuck case. It is called after 30secs\n\n\nCheck if this callback is called.\n. it is for only 30 sec, is there way to check FIN packet from code?. I will check those functions, thank you for diagram art.. \n\n",
    "portugaldev": "I have this issue.. ",
    "pl-buiquang": "I also have this issue.. ",
    "miroslavvojtus": "We have a similar issue right now. Until upgrade from v 2.2.2 to 5.1.0 everything worked just fine. \nI mean, in most cases the connection was closed before a heartbeat (ping) was considered dead.\nWhen the client shouted down the connection (power, manual process teardown) it almost instantly disconnected also the server (emitted \"close\" event).\nRight now it newer emits close event until server fails to receive a \"pong\" response. What can take up to 30 seconds.\nWe are fine with it right now as in a case a send fails due to such a half-closed connection, it simply fails and we react to it manually. But still, it would be nice to have the close event as soon as the TCP is down as it currently emits unnecessary warn/error logs.. ",
    "inca": "Same issue here. Server terminated abnormally, and client stuck in CLOSING indefinitely (no close event fired). Here's the WebSocket state I managed to collect:\n\n. ",
    "dalen": "Getting the same issue when using serverless-webpack to package a AWS Lambda that includes ws through @slack/client. Webpack tries to resolve all the modules and package it up into a small file, but it fails as ws includes devDependencies in the files.. ",
    "chengjia0807": "any solution on this?. ",
    "eric-burel": "Hi, I get this issue in the main process of an Electron app. This is a Node process, not a client process.. ",
    "sherikapotein": "worked like a charm!!! Thanks\nPains to just copy/paste a script from such answers without knowing what and how it works. Guess i have a lot to read on Nginx configurations.\nThanks again!!\n. > if you are using the example in this repo you have to set the rejectUnauthorized to falseon the client because the certificate is self signed and is rejected by default.\nCant seem to locate the setting in the client script. Do i need to amend the required settings in the path_to_ws/lib/WebSocket.js file? Thanks for the patience.. Still stuck, but i guess u have answered my question .That calls for a closure. Need to hunt for issues in in other configs.\nThanks! . ",
    "Zane96": "It seems like the error is when client try to connect server. OS Version: macOS Sierra\n. em....\nI found the laste release is 3.0.0.\nI fixed it by upgrade the ws to 3.0.0. \u3002\u3002\u3002fine. ",
    "garyburd": "\nI found that Gorilla often uses a sleep before closing the connection https://github.com/gorilla/websocket/blob/5ade364dff1f03abefdae800ed19074bf707b08f/examples/command/main.go#L77 but it seems kind of dirty.\n\nThe sleep and close calls in the Gorilla example ensures that the connection is closed in the case where the client does not reply to the close message.  If you want to rely on the client replying to the close message, then delete the call to time.Sleep() and ws.Close(). Do not delete the call to time.Sleep() without also deleting the call to ws.Close().. ",
    "takasoft": "@lpinca How can I change port in your example?. I figured out. \nserver.listen(PORT_NUM, function listening () {...}. ",
    "yganatra": "+1\nI got this error when I tried to parse protected zip file.\nCan someone help to resolve it?\n. ",
    "jukben": "Hi there, we have run into the same issue in https://github.com/callstack/haul/issues/429\nI've tried to catch this error by\njs\nwebSocket.on('error', error => {\n  console.log(error);\n});\nbut without luck.\nI think this problem is related due to we are trying to send ~40 MB (42633238b) file over WS. Is it possible?\nIntresting fact is that we are not using perMessageDeflate (it's disabled by default).\nThe most surprising thing is that I can hotfix this and get the expected behavior with options (passed to new Server)\njs \n// maxPayload: 100 * 1024 * 1024 with this I got the zlib issue ~100MB\nmaxPayload: 1000 * 1024 * 1024 // ~ 1GB \u2013 this is way over 40 MB right...\nDo you have any explanation? I would like to help to fix it. But I'm really confused.\ncc @lpinca \n. I've tried to track it down but I wasn't successful. It's absolutely strange. I might try to create some repro repo for you because I really don't know where could be the other place which calls (pako) zlib.js \u2013 and why maxPayload \"solved\" it.. I see! I was able to catch the error \u2013 I had to add the handler to server not the client. My bad.\nAlso, I've realized that we are using ws@2.2.0 ( \ud83d\ude10 ) where perMessageDeflate was enabled by default. Once I have disabled it I got the error max payload size exceeded which is correct because it at least correlates with my other observations. Not sure how the size is computed though. The size of the file we are trying to transport should be around ~45 MB, the default limit is ~100 MB as I can see.\nI will try to upgade our code to latest ASAP. . @lpinca I hope it's text (JSON.strinfigy) in a single frame -https://github.com/callstack/haul/blob/next/src/compiler/worker/initWorker.js#L83. We are using memory-fs (https://github.com/webpack/memory-fs/blob/master/lib/MemoryFileSystem.js#L99). \nThe server part is here https://github.com/callstack/haul/blob/next/src/compiler/createWebSocketServer.js#L42.\nCould you guide me how can I test it? I tried to do some magic with Whireshark but not sure what I'm looking for. (Is it even possible to sniff unix domain socket?)\nEdit: Socat to the rescue; I have to check it out. @lpinca Thanks a lot for this assisted debugging. I've realized that memory-fs is returning Buffer by default so we are serializing a buffer. This another example is in buffer version ~25 MB, when I have converted the Buffer to utf-8 text I got ~7 MB. So that makes sense regarding the size. So I hope there is nothing wrong with ws and it's completely on our side. Thanks for your help \ud83d\ude4f \njs\n{\"type\":\"FILE_RECEIVED\",\"taskId\":0,\"file\":{\"type\":\"Buffer\",\"data\":[105,102,32,40,116,104,105,115,32,38,38,32,33,116,104,105,115,46,115,101,108,102,41,32,123,32,116,104,105,115,46,115,101,108,102,32,61,32,116,104,105,115,59,32,125,59,10,10,47,42,42,42,42,...]}, \"mimeType\": \"text/javascript\"}\n. Thanks again for your help! I feel the same. I don't know why we are stringifying the Buffer anyway I have to get back to the other maintainers of Haul and we will figure it out.  \ud83d\udcaa . ",
    "RovingBit": "Oops, this is my mistake in my 'thin' ws wrapper.\nIssue can't be deleted, so I paste my wrong codes here for reminding others.\n1> yes, ws.send wrap is straight and synchrous\nWebSocket.prototype.msg = function msg(name) {\n    if (this.alive === true && this.readyState === WebSocket.OPEN) {\n        ...... pack name and arguments to data ......\n        var ws = this;\n        ws.send(data, function cb(err) {\n            if (err) {\n                console.log(err);\n                ws.terminate();\n            }\n        });\n    }\n};\n2> and, if I invoke ws.msg on wss.on()'s callback, it's ok\nwss.on('c2s', function(ws, data) {\n        ws.msg('s2c', data);\n}\n3> but, if I invoke ws.msg in a timeout callback, it's not ok\nwss.on('c2s', function(ws, data) {\n        setTimeout(function() {\n            ws.msg('s2c', data); //- (1)       \n        }, 1000);\n}\n4> why? because I have an other time interval loop to monitor all client sockets,\n    in the monitor loop, I tagged every client socket as unalive first, then tag back as alive when any message was received by this socket between a monitor loop.\n```\n// monitor all clients for connection keeping and reconnection\nsetInterval(function monitor() {\n    wss.clients.forEach(function cb(ws) {\n        if (ws.alive !== undefined && ws.alive === false) { ws.terminate(); return; }\n        ws.alive = false;\n        });\n    }, wss.timeout);\n// tag back to alive if any message was received by this ws client\nwss.on('message', function(ws, data) {\n    ws.alive = true;\n    ... etc codes ...\n    });\n```\n   the ws.alive is changed to false in function monitor() after 30 seconds,\n    when WebSocket.prototype.msg was invoked by timeout function in 3>,\n    if (this.alive === true && this.readyState === WebSocket.OPEN) is FALSE\n5> fix\nchange\n    if (this.alive === true && this.readyState === WebSocket.OPEN)\nto\n    if (this.readyState === WebSocket.OPEN)\ndone.\nTWO DAYS WASTED.\nTRIED NODE.JS WITH 6.10/6.11/8.1\nTRIED MONGODB 3.0/3.2/3.4/3.5 WITH DIFFERENT NODE WRAPPERS AND CONFIGURATIONS\nTRIED RETHINKDB WITH DIFFERENT NODE WRAPPERS AND CONFIGURATIONS\nTRIED SEVARAL REMOTE SERVERS WITH DIFFERENT HARDWARE AND BANDWIDTH\nTRIED WS 2.X 3.0 WITH DIFFERENT CONFIGURATIONS\nTRIED PRAY AND MORE.....\n\nCODING IS FUN SOMETIMES, BUT HARD MOST OF THE TIME. ",
    "trusktr": "On top of that, there seems to be no reciprocal .off() method for when using .on, which further adds to the confusion.. ",
    "wyzxxx123": "thx. ",
    "AnubisCode": "hey @lpinca got same error when using ws. interesting that when I use uws this error doesn't happens on server side. looks like there is way to avoid this error.. any idea?. ",
    "ppeccin": "Hello. I'm getting the same error if the client connecting is from MacOS/Chrome, but NOT from Windows/Chrome. What can I do on the Server or Client to be able to connect from MacOS?\nI can't make it work on the Mac. Same code everywhere....   :-(. ",
    "ashbrener": "I am experiencing the same issue on node v8.11.3 and v10.6.0\nnode_modules/ws/lib/receiver.js:167\n      return error(RangeError, 'RSV1 must be clear', true, 1002);\n             ^\nRangeError: Invalid WebSocket frame: RSV1 must be clear\n    at Receiver.getInfo (/node_modules/ws/lib/receiver.js:167:14)\n    at Receiver.startLoop (/node_modules/ws/lib/receiver.js:121:22)\n    at Receiver._write (/node_modules/ws/lib/receiver.js:69:10)\n    at doWrite (_stream_writable.js:397:12)\n    at writeOrBuffer (_stream_writable.js:383:5)\n    at Receiver.Writable.write (_stream_writable.js:290:11)\n    at TLSSocket.socketOnData (/node_modules/ws/lib/websocket.js:795:35)\n    at emitOne (events.js:116:13)\n    at TLSSocket.emit (events.js:211:7)\n    at addChunk (_stream_readable.js:263:12)\n    at readableAddChunk (_stream_readable.js:250:11)\n    at TLSSocket.Readable.push (_stream_readable.js:208:10)\n    at TLSWrap.onread (net.js:597:20)\nHave wrapped ws.send() in a try / catch as well as set perMessageDeflate=false in the client constructor options.. I am experiencing a similar issue on node v8.11.3 and v10.6.0\nnode_modules/ws/lib/receiver.js:167\n      return error(RangeError, 'RSV1 must be clear', true, 1002);\n             ^\nRangeError: Invalid WebSocket frame: RSV1 must be clear\n    at Receiver.getInfo (/node_modules/ws/lib/receiver.js:167:14)\n    at Receiver.startLoop (/node_modules/ws/lib/receiver.js:121:22)\n    at Receiver._write (/node_modules/ws/lib/receiver.js:69:10)\n    at doWrite (_stream_writable.js:397:12)\n    at writeOrBuffer (_stream_writable.js:383:5)\n    at Receiver.Writable.write (_stream_writable.js:290:11)\n    at TLSSocket.socketOnData (/node_modules/ws/lib/websocket.js:795:35)\n    at emitOne (events.js:116:13)\n    at TLSSocket.emit (events.js:211:7)\n    at addChunk (_stream_readable.js:263:12)\n    at readableAddChunk (_stream_readable.js:250:11)\n    at TLSSocket.Readable.push (_stream_readable.js:208:10)\n    at TLSWrap.onread (net.js:597:20)\nHave wrapped ws.send() in a try / catch as well as set perMessageDeflate=false in the client constructor options.. @lpinca thank you for the fast response. This advice was most helpful, the error is on the client and I added the listener as you suggested.\nThis led me to find what I think could be the cause. The server (which also uses ws) is aborting the handshake based on a certain condition (a custom override in our app) using a copy of the abortHandshake function.\nAnd so it is writing the following data to the socket:\n```http\nHTTP/1.1 401 Unauthorized\nConnection: close\nContent-type: text/html\nContent-Length: 12\nUnauthorized\n```\n... which the client receives and throws the RangeError on. Does this make sense?. Its quite possible this is after the 101, my class inherits from WebSocket.Server and overrides the handleUpgrade function to inspect the client IP address and abort the handshake if unrecognized.. ",
    "adipascu": "I am still having this issue in production, can @wyzxxx123 or somebody else reopen it?. ",
    "brubbel": "This may not tell the complete story. \nI found that ws.close() may still execute signal handlers 30 seconds after close() if the network connection is unavailable, while ws.terminate() did not show this behaviour.\nDuring a change of network (e.g. from wired to wireless), when I create a new WebSocket() and registered all signal handlers (onopen/onclose/onerror), I was struggling that the new connection went up, but was consistently receiving 1006/onclose events from the previous socket, which is confusing, but also correct behaviour.\nPlease also refer to https://github.com/websockets/ws/issues/891. ",
    "timanovsky": "@lpinca true, but comparing to HTTP client libraries, which do accept URL, is also relevant. ",
    "cre8": "@Globik using ws.url will return undefined for me with version 3.2.1.. ",
    "quesurifn": "Closing. Removing paths fixed it. The docs don't have mention of this but different stack overflow questions do.. I guess what I was trying to do was to not have it running if no one was connected. It's a portfolio thing so I wasn't too concerned about resources. . @lpinca  Reopening in a new issue. Refactored code and it still occasionally happens and blocks sending all messages until reboot. ",
    "artdude543": "I did some more debugging (after some sleep) to find the issue with a middleware app hacking into WS for some bizarre reason. So nothing wrong with the module here. Sorry for spending your time! D:. ",
    "milosjovac": "Hi,\nJust wondering, when I try\nvar ws = WebSocketServer({ server: wsServer, port: port });\nws.addEventListener('error', (err) => console.log(err.message));\nI get following error: \nTypeError: ws.addEventListener is not a function\nOnly .on('specific_event', fun()) works for me. Any ideas why?\nTnx,\nMilos\n. ",
    "kuangyunsheng": "thanks very much. ",
    "circuitry2": "@zallarak what was the fix?. ",
    "zallarak": "@circuitry2 I didn't find a fix for this. I don't remember closing this and must have done it accidentally.. ",
    "Manusan42": "Yay, finally! Thank you so much!!! I thought about doing it myself, but I've never done this before and GitHub, Typescript, etc... is all quite new to me. So it was probably much easier for you to do it.. ",
    "dnwldbs84": "crazyyi\nIt should be outside of onconnection.\nIf you set it to inside of onconnection then it will be repeated for every socket connection. . ",
    "id0Sch": "@lpinca thanks for the quick reply , I indeed suck at picking out message strings and such.\n. @lpinca thanks for being so helpful and fast moving! \ni'ts been a pleasure contributing to this awesome project! \nkeep up the good work! . I tried that, but for some reason it doesn't work.. No problem, thought since the message is a sentence adding code could be a better way to \"locate\" the error, but all good.. yes. now that it's not used, no problem.. ",
    "ejwaibel": "@lpinca right, that's what I figured, and I was trying that, but this means that where ever I call wss.broadcastAllButMe would need to have a reference to the ws that is sending the broadcast. Is there a solution for this?\nThe problem I'm having is that my configuration for the websockets is in a file called \"websocket.js\" and I want to call a broadcast from an API route in another file called \"players.js\" that doesn't have reference to the websocket client.. \ud83d\udc4d . ",
    "megamindbrian": "Angular universal uses webpack but runs an Express server so it is running on node. When I compile in Dev mode without uglify everything works great. When compiling for production the client side using socket.io-client works, but the server side (running along side express) fails to pack with the error message in the title of this issue. It would seem that ws does not come with a pre-transpiled es5 module for webpack to load. I am not sure how this works but with a lot of libraries I see a lib.js, lib.es5.js, lib.slim.js along side each other. Is there a way to build ws to transpile and include those in the package?\nNot using ws directly but the only error I get is when webpack reaches this dependency. Why would webpack load a bunch of other packages in whatever Target then fail on ws? What is different about ws output from socket.io?\nHere is the branch I am trying to get working with the dependencies I mentioned. Build using npm run build:universal-prod\nhttps://github.com/megamindbrian/universal-1/tree/render-service?files=1\nYou can see from commits I haven't changed much just added some socket.io stuff. Is ws meant to work with uglify?\n. So I should transpile it to ES5 myself and try to include it?\nOn Aug 5, 2017 1:19 AM, \"Luigi Pinca\" notifications@github.com wrote:\n\nIt would seem that ws does not come with a pre-transpiled es5 module\nThis is correct as ws@^2 only runs on Node.js >= 4 so there is no reason\nto transpile.\nYou can try to use socket.io@^1 and socket.io-client@^1 which use an\nolder version of ws written in ES5 and see if this changes something.\nIs ws meant to work with uglify?\nThe uglify-js version used in the package does not support ES6 features\nbut if ws is transpiled to ES5 I see no reason why it should not work.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/issues/1181#issuecomment-320428159, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AX5XbvmFTTnUcrR714aBrA2C6E-eqLyoks5sVCWPgaJpZM4OuVa5\n.\n. I haven't worked on it. But I was going to use babel on ws 2.* And see if I\ngot anywhere with uglify.\n\nOn Aug 11, 2017 7:57 AM, \"windsome\" notifications@github.com wrote:\n\nI also encounter this issue.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/issues/1181#issuecomment-321836373, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AX5XbmJqjgEpHQEri9-bTm9g4eR3FRuKks5sXGvYgaJpZM4OuVa5\n.\n. \n",
    "windsome": "I also encounter this issue.. ",
    "OuuGiii": "\nThe client closes the TCP connection when you refresh the page.\n\nWhere is this information found? How do you know this? please provide a link.\n. ",
    "gilfuser": "Yep. That was it.\nthank you. ",
    "webrtcn": "@lpinca \nThanks\nI will try your code.. ",
    "geek96": "You are right in close event listener client  readystate is 3. But its not updated in clients list, In the clients list its still 1. I have updated the code. I am using default websocket client, Whenever I click on browser reload button. On the server side close listener triggered and that time readystate is 3. As I am broadcasting message every 3000ms , there should be one client in list but clients list increase on each reload from the browser.. ",
    "calidion": "althought i have now hacked it, but it would be good to provide a way to easily provide a session for ws. \nI have integrated the following code into my web framework, and have tested with several express-session based session stores. \n```\n    let cookies = req.headers.cookie;\n    let store =  // getSessionStore\nif ( cookies && store) {\n  let id = cookies.split(\"=\");\n  id = id[1];\n  id = decodeURIComponent(id);\n  id = id.split(\".\")[0].split(\":\")[1];\n  let getSession = promisify(store.get);\n  let session = await getSession.call(store, id);\n  req.session = session;\n}\n\n```\nIt would be somewhat difficult a ws server to integrate with a session.\nBut as i have seen that the ws server creation process has provided a way for session handling, i think it would be good to provide a way to handle a ws session on per connection base.. ",
    "GREEB": "it was an error on our side, sorry about that!. ",
    "DxCx": "Thanks @Ipinca that's a solution as well, and it works \ud83d\udc4d . ",
    "jedwards1211": "@lpinca there's not really a way to use that workaround with ApolloServer.installSubscriptionHandlers; I have to copy a bunch of code out of installSubscriptionHandlers to be able to use that workaround.  It seems way more cumbersome than necessary.\nI wish I could just ask WebSocket.Server to ignore requests to other paths instead of aborting the handshake.  Can we add an option to do that?. ",
    "d3x0r": "The RFC states that clients MUST mask, but does not define behavior if they do not.  The current behavior may be acceptable (that is, if the packet is not masked, do not complain and just use it in the server instance).\nAlthough; if masking is enforce client to server, server side should generate a error if receiving unmasked client data.  \nThese close statuses may be applicable.\n1003\n1003 indicates that an endpoint is terminating the connection\nbecause it has received a type of data it cannot accept (e.g., an\nendpoint that understands only text data MAY send this if it\nreceives a binary message).\n1007\n1007 indicates that an endpoint is terminating the connection\nbecause it has received data within a message that was not\nconsistent with the type of the message (e.g., non-UTF-8 [RFC3629]\ndata within a text message).\n1008\n1008 indicates that an endpoint is terminating the connection\nbecause it has received a message that violates its policy. This\nis a generic status code that can be returned when there is no\nother more suitable status code (e.g., 1003 or 1009) or if there\nis a need to hide specific details about the policy.\n1011\n1011 indicates that a server is terminating the connection because\nit encountered an unexpected condition that prevented it from\nfulfilling the request.. I see :) thanx.  . ",
    "coffee-mug": "@lpinca Thanks a lot for the reactivity !\nOk for the file descriptor limit, I'll google it. \nSo, if I get it correctly, as a mean of defense against someone creating many ws connection, I have to distribute them accrosse network interfaces, using client localAdress. \nWould it be sufficient in your mind to prevent the server from blocking ? . Ok, I'll look at the verifyClientHook then. Thanks a lot @lpinca ! I wish you a great day. ",
    "KyKyIIIKuH": "And then how to determine which client is connected if the array contains wss ?. ",
    "helloIAmPau": "sure, sorry about that.. It looks that the issue occurs when I try to connect to a host behind a firewall. Maybe is some kind of race condition connected to the HTTP timeout. Tell me if you can reproduce this so that I proceed to write some test for the fix.. Thank you, I'll check the issue.\nOn Sat, Nov 4, 2017, 12:54 PM Luigi Pinca notifications@github.com wrote:\n\nClosed #1201 https://github.com/websockets/ws/pull/1201.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/pull/1201#event-1326032632, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA-h2LBCl-ksOv390qGVEIm8b9M0ubvgks5szFBpgaJpZM4PRD1H\n.\n-- \nP.\n. \n",
    "connor4312": "Hey @lpinca I just ran into this today on 3.3.2. The remote server gave a ECONNRESET at a bad time which resulted in this error being thrown (and then swallowing the error event so we didn't reconnect!)\nUncaught error: Error: read ECONNRESET\n    at _errnoException (util.js:1024:11)\n    at TLSWrap.onread (net.js:615:25)\nUncaught error: TypeError: Cannot read property 'aborted' of null\n    at ClientRequest._req.on (/Users/copeet/Github/node-xbl/node_modules/ws/lib/WebSocket.js:634:19)\n    at emitOne (events.js:116:13)\n    at ClientRequest.emit (events.js:211:7)\n    at TLSSocket.socketCloseListener (_http_client.js:363:9)\n    at emitOne (events.js:121:20)\n    at TLSSocket.emit (events.js:211:7)\n    at _handle.close (net.js:554:12)\n    at TCP.done [as _onclose] (_tls_wrap.js:356:7). The \"uncaught error\" is our own message! We use uncaughtException in order to log telemetry about the error to Sentry. It seems odd that that would be incompatible with this library--would that be considered a bug in ws?. ",
    "phaistonian": "@lpinca Figured out this out a moment later after I filed this issue; silly me.\nSorry for the trouble.. ",
    "juzhen21510": "thx. ",
    "dennybritz": "Can be closed, apparently they're having their own websocket implementation which is just a wrapper.. ",
    "paulddrix": "I search for other issues but this was the one that was most similar to mine. if not please point me in the right direction, thank you.\nI am trying to build tests for my api and  when I send error code and messages from the api to the client in the verifyClient function like so:\nwebsocket server code:\n// return error message\ndone(false, 401, 'Invalid or missing parameters.');\nHowever, when I go to check the error message it does not appear, the library only returns the statusCode from the api response. Is there any way to retrieve the reason phrase that was sent.\nclient code:\n/* Error Event Handler */\n   ws.on('error',  (e) => {\n     // need to get both the statusCode and the reason phrase\n     console.log(e);\n     // assert the status code and reason phrase\n     done();\n   });\nnode_modules/ws/lib/WebSocket.js:653\nthis._req.on('response', (res) => {\n    if (!this.emit('unexpected-response', this._req, res)) {\n      this._req.abort();\n      this.finalize(new Error(`unexpected server response (${res.statusCode})`));\n    }\n  });\n. My understanding is if a response is received then the unexpected-response event is triggered, that would mean that if the connection is accepted then there should be no response because the request or connection was upgraded, is that correct. if is is then all status codes that are returned can triggered the event. Thank your for your time.. Let me try that and see if it shows up in the wss.clients, thank you for your fast response.. ",
    "IanChen83": "Sorry, after thoroughly checking the documentation of the websocket server module, I found out that it's the server that closes the connection.. ",
    "donnydarko": "Thanks for answering :)\nThis is what I'm getting now:\n47 45 54 20 2F 77 73 20 48 54 54 50 2F 31 2E 31 ; GET /ws HTTP/1.1\n0D 0A 75 70 67 72 61 64 65 3A 20 77 65 62 73 6F ; ..upgrade: webso\n63 6B 65 74 0D 0A 63 6F 6E 6E 65 63 74 69 6F 6E ; cket..connection\n3A 20 55 70 67 72 61 64 65 0D 0A 53 65 63 2D 57 ; : Upgrade..Sec-W\n65 62 53 6F 63 6B 65 74 2D 4B 65 79 3A 20 72 66 ; ebSocket-Key: rf\n65 47 65 31 69 7A 50 52 71 32 4A 79 6F 6E 57 75 ; eGe1izPRq2JyonWu\n6E 41 51 77 3D 3D 0D 0A 53 65 63 2D 57 65 62 53 ; nAQw==..Sec-WebS\n6F 63 6B 65 74 2D 56 65 72 73 69 6F 6E 3A 20 31 ; ocket-Version: 1\n33 0D 0A 48 6F 73 74 3A 20 6C 6F 63 61 6C 68 6F ; 3..Host: localho\n73 74 3A 38 36 38 33 0D 0A 0D 0A                ; st:8683....\nResult:\n\nupgraded\nclosed\n\nNo error, but the client it self closes immediately after upgrade.\n. yes, \u0399 added an onClose handler  to your code... and at the server side I got an exception of connection closed by client. I solved the problem (using the hardcoded way) by modifying node_modules/ws/WebSocket.js\nLine 596:\nLine 698:\nif (serverUrl.path.charAt(0) !== '/') {\n      requestOptions.path = '/ws';//`/${serverUrl.path}`;\n    } else {\n      requestOptions.path = '/ws';//serverUrl.path;\n    }\nand now it doesn't send GET /%7D/ at the handshake and everything goes smooth.. ```\n    console.log(\"serverUrl=\"+serverUrl.path);\nif (serverUrl.path.charAt(0) !== '/') {\n\n  requestOptions.path = '/ws';//`/${serverUrl.path}`;\n} else {\n  requestOptions.path = '/ws';//serverUrl.path;\n}\n\n```\nResult (at the console):\n\nserverUrl=%7D/ws. It also does the same if I ask something else than /ws\nlet url = `ws://${ip}:${port}}/somethingelse`;\nlet ws = new WebSocket(url);\nserverUrl=%7D/somethingelse. node v8.6.0\nI put your code after all my requires and it returns just /ws. I just installed the latest version v8.7.0 and it does the same issue. omg I'm so silly\nlet url =ws://${ip}:${port}}/ws;\nI had a second } on the url. \n",
    "kevincharm": "Yes, you are right! Those return trues should be removed, along with the flushed expecting a return value from this.enqueue and this.dispatch.\nMy memory is hazy, but I do recall trying the approach you mentioned, by using the callback to throttle socket writes. It seemed to have different behaviour (callback gets invoked when the write returns false - or something like that). Perhaps I need to dig up node's TCP implementation and test it again.\n. I've been able to use the websocket-stream package you linked to detect and handle backpressure in the same way @lpinca. Thanks!. ",
    "albandaft": "@lpinca The reason why the warnings appear is simple: To test if bufferutil or utf-8-validate is installed you just call require('bufferutil') which will through a warning if the library is not there.\nHow to exclude the bufferutil from building?. @lpinca I get this warning during the react command line building, not in the browser. It is not a matter of shim, it is simply a matter of require, which is used to test the presence of the library:\nFrom https://github.com/websockets/ws/blob/master/lib/BufferUtil.js#L35\n```\ntry {\n  const bufferUtil = require('bufferutil');\nmodule.exports = Object.assign({ concat }, bufferUtil.BufferUtil || bufferUtil);\n} catch (e) / istanbul ignore next / {\n...\n}\n```\n. On the browser everything works fine. I need to remove the warnings because eventually a pipeline build process will fail to pass test if the build exit code is not correct. \nI am actually running the bundle in memory in watch mode, dev mode.\nI will try to workaround to exclude them from the building. . None of the above worked. . @lpinca With your example I do not get either the warnings. Here we get those warning in different machines. We will keep trying to understand... . ",
    "waheed25": "is there any solution to remove these warnings???\nbecause none of the above works.. but this is not in webpack this in storybook. ",
    "syang": "Is the warning negligible? Or should we install bufferutil?. ",
    "gosp": "@syang \nwebpack.config.js :: externals: [/node_modules/, 'bufferutil', 'utf-8-validate'],\nfor example:\n```\nmodule.exports = {\n  entry: { server: path.join(__dirname, 'src', 'script', 'index.ts') },\n  resolve: { extensions: ['.js', '.ts'] },\n  target: 'node',\n  mode: 'none',\n  // this makes sure we include node_modules and other 3rd party libraries\n  externals: [/node_modules/, 'bufferutil', 'utf-8-validate'],\n  output: {\n    path: path.join(__dirname, '..', 'dist'),\n    filename: 'server.js'\n  },\n  module: {\n    rules: [{ test: /.ts$/, loader: 'ts-loader' }]\n  },\n  plugins: []\n};\n```. ",
    "KATT": "Or:\njs\nmodule.exports = {\n  // [..]\n  externals: {\n    bufferutil: 'commonjs bufferutil',\n    'utf-8-validate': 'commonjs utf-8-validate',\n  },\n  // [..]\n};. ",
    "u-bits": "I solved this warning by just changing the target in my webpack.config.js to web\nhttps://webpack.js.org/configuration/target/. ",
    "cn007b": "But it won't work(((\nClient:\njs\nconst WebSocket = require('ws');\nconst ws = new WebSocket('ws://localhost:5432/binary');\nws.on('open', function open() {\n  const array = new Float32Array(5);\n  for (var i = 0; i < array.length; ++i) {\n    array[i] = i / 2;\n  }\n  ws.send(array);\n});\nServer:\njs\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 5432 });\nwss.on('connection', function connection(ws) {\n  console.log('Established new binary connection.');\n  ws.on('message', function incoming(message) {\n    console.log('Received message:');\n    console.log(message);\n    console.log(new Buffer(message, 'base64').toString());\n    console.log(Buffer.from(message));\n  });\n});\nResult:\nEstablished new binary connection.\nReceived message:\n<Buffer 00 00 00 00 00 00 00 3f 00 00 80 3f 00 00 c0 3f 00 00 00 40>\n?\ufffd?\ufffd?@\n<Buffer 00 00 00 00 00 00 00 3f 00 00 80 3f 00 00 c0 3f 00 00 00 40>\nMaybe I've missed something... But I just can't find solution.... Now it works! Thank you so much! \ud83d\ude42\nDoes it make sense to add your code into readme file, maybe someone in the future also will be seeking this?\n. Ok, sounds like a plan!)\nJust need to find something reasonable with strings, like pack JSON string into binary on client and unpack on the server side.... ",
    "MylesBorins": "Woot!\nOn Oct 31, 2017 4:11 AM, \"Luigi Pinca\" notifications@github.com wrote:\n\nWe had a race condition: d6934af\nhttps://github.com/websockets/ws/commit/d6934afcf22afed25b1b9fd06bd4b1df66659aae\n.\nThanks though!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/pull/1225#issuecomment-340689539, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAecV6jP8nmKlwP6OzJlZYd8b--axbrOks5sxtYfgaJpZM4QMWRw\n.\n. \n",
    "Hativ": "Does not work too.\nDebug output:\n```\nNET 4912: pipe false null\nNET 4912: connect: find host websocket.example.com\nNET 4912: connect: dns options { family: undefined, hints: 32 }\nNET 4912: _read\nNET 4912: _read wait for connection\nNET 4912: afterConnect\nTLS 4912: start\nNET 4912: _read\nNET 4912: Socket._read readStart\nNET 4912: afterWrite -71\nNET 4912: write failure { Error: write EPROTO 140504342898496:error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure:../deps/openssl/openssl/ssl/s23_clnt.c:772:\nat _errnoException (util.js:1031:13)\nat WriteWrap.afterWrite [as oncomplete] (net.js:873:14) errno: 'EPROTO', code: 'EPROTO', syscall: 'write' }\n\nNET 4912: destroy\nNET 4912: close\nNET 4912: close handle\n{ Error: write EPROTO 140504342898496:error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure:../deps/openssl/openssl/ssl/s23_clnt.c:772:\nat _errnoException (util.js:1031:13)\nat WriteWrap.afterWrite [as oncomplete] (net.js:873:14) errno: 'EPROTO', code: 'EPROTO', syscall: 'write' }\n\nNET 4912: emit close\n```\nShould I open an issue at node repo or do you have an idea?. I got it working with the https module:\n```\nconst https = require('https');\nconst request = https.get({\n  hostname: 'api.fortytwo.cloud.local',\n  headers: {\n    upgrade: 'websocket',\n    connection: 'Upgrade',\n    'Sec-WebSocket-Key': 'rfeGe1izPRq2JyonWunAQw==',\n    'Sec-WebSocket-Version': 13\n  },\n  rejectUnauthorized: false, // <-- For testing with self signed certificate\n  ecdhCurve: 'auto' // <-- Does the trick\n});\nrequest.on('error', (err) => console.error(err));\nrequest.on('upgrade', () => console.log('upgraded'));\n```\nUnfortunately WebSocket does not support the ecdhCurve setting from tls.createSecureContext.\nShould it be added to ws or is there another option?\nAnyway ecdhCurve's default value should be auto, I will suggest this in the node repo.. I will try to implement this.. ",
    "d4rkstar": "Hello Luigi,\nthank you for your feedback. Fortunately i've logs about the error :)\nBefore, i'll give you more informations about my environment:\n\nNODE: nodejs v8.6.0\nWEBSOCKET: ws@3.2.0\nWEBSTOM: webstomp-client@1.2.0\nOS: Debian GNU/Linux 9.1 (stretch) / kernel 4.9.0-3-amd64 #1 SMP Debian 4.9.30-2+deb9u5\n\nUsing webstomp over websocket with SSL:\nlet stomp_url = 'wss://remotehost:8443/ws';\nself.client = webstomp.over(new WebSocket(stomp_url), options);\nThe trace:\n2017-10-24T09:33:14.779Z ERROR uncaughtException: connect ECONNREFUSED xxx.xxx.xxx.xxx:8443\n        {\"date\":\"Tue Oct 24 2017 11:33:14 GMT+0200 (CEST)\",\"process\":{\"pid\":23454,\"uid\":1001,\"gid\":1001,\"cwd\":\"/home/myapp/myapp\",\"execPath\":\"/usr/bin/node\",\"version\":\"v8.6.0\",\"argv\":[\"/usr/bin/node\",\"/home/myapp/myapp/www\"],\"memoryUsage\":{\"rss\":91394048,\"heapTotal\":51220480,\"heapUsed\":38065344,\"external\":239175}},\"os\":{\"loadavg\":[0,0,0],\"uptime\":1794013},\"trace\":[{\"column\":11,\"file\":\"util.js\",\"function\":\"Object._errnoException\",\"line\":1019,\"method\":\"_errnoException\",\"native\":false},{\"column\":20,\"file\":\"util.js\",\"function\":\"_exceptionWithHostPort\",\"line\":1041,\"method\":null,\"native\":false},{\"column\":14,\"file\":\"net.js\",\"function\":\"TCPConnectWrap.afterConnect [as oncomplete]\",\"line\":1175,\"method\":\"afterConnect [as oncomplete]\",\"native\":false}],\"stack\":[\"Error: connect ECONNREFUSED xxx.xxx.xxx.xxx:8443\",\"    at Object._errnoException (util.js:1019:11)\",\"    at _exceptionWithHostPort (util.js:1041:20)\",\"    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1175:14)\"]}\nRegards. Thank you again Luigi. Will change my code and will update or close this issue. ",
    "derwaldgeist": "Having the same problem here when using ws in Electron.. ",
    "accuware": "Having the problem since I switched to the very first version in which you support handshakeTimeout (something around 3.0.2 or so)\nFrom this version on up to the latest: If this sequence goes into \"error\", I'll receive an exception \n```\nTypeError: Cannot read property 'setHeader' of null\n````\na couple of seconds after the error occurs. The first attempt fails as expected after 5s\nError: Opening handshake has timed out\nIf I repeat the sequence then, it immediately fails with \nError: connect EHOSTDOWN 192.168.188.98:8888 - Local (192.168.188.24:57769)\nbut then after 5 s the exception occurs. For me it looks like as if you would not terminate the handshakeTimer on error\n```\n        let server = new ws(argv.ws_uri, {handshakeTimeout: 5000})\n            server.on('open', () => {\n                server.send(JSON.stringify({\n                    id: 1,\n                    method: \"ping\",\n                    params: {\n                      interval: 3000\n                    },\n                    jsonrpc: \"2.0\"\n                }))\n            })\n            server.on('message', (data) => {\n                console.log(data)\n                res.send(\"OK\")\n            })\n            server.on('error', (error) => {\n                console.log(error)\n            res.send(\"ERROR \"+error)\n        })\n\n```. ",
    "perdugames": "I edited with the steps to reproduce, I am using the redis module, but it does not come up against ws. Maybe it's the express?\nand what would be \"bad corking\"?. I'm not sure where it is. But it is true that it can also be on the client, thinking now it is more likely to be on the client, but checking the message on the client returns me as if it was being sent right, so I thought it was server side. But I may be wrong.\nI am using this module for Godot Engine(a game engine) as a client https://github.com/LudiDorici/godot-lws. I think it would be too much code, and I would run out of ws if I post the client code here, so I apologize, I'll do more tests here and also ask about LudiDorici, maybe he knows what might be happening, if the problem is on the side of the customer. If it's actually on the server, I'll come back here with more information.. ",
    "WQHASH": "What's the recommendation for learning WebSockets?. ",
    "svngoku": "That's not a real warning! You can forget it . ",
    "martin-langhoff": "Thanks for the info. I've enabled logging, and expect will have further info soon. At first read, it's not UA-specific. I hope to be able to repro in a controlled experiment tonight.. @lpinca with perMessageDeflate disabled, the server response still contains Sec-WebSocket-Extensions:permessage-deflate. Normal? Expected? . https://github.com/websockets/ws/blob/d96c58cda8fa2e67784cb4e37d375c14b2634fb1/lib/WebSocketServer.js#L241 seems to expose/offer all loaded extensions... . ",
    "geogeorgiev": "Just a thought: I get an \"RSV1 must be clear\" error upon failed verification when I make use of the verifyClient option.. @Ipinca if I simply return true in the callback of verifyClient I stop receiving the error. The process of verification may be somehow involved though. In my case it's just an http request using the request-promise-native lib. As long as my auth credentials were incorrect and hence getting 401 from the auth server and failed verification, the error was thrown. . ",
    "xshyamx": "@lpinca You are right it is a problem with node-agent-base which is a dependency of https-proxy-agent\nAfter some digging around found a clue here where the secureEndpoint is supposed to be set but, is not set.\nBut, adding secureEndpoint to the requestOptions fixes the problem. \nhttps://github.com/xshyamx/ws/commit/b87ffdb3f8572e48b7c84f5f2f37fded9a37b1d4. Thanks @lpinca. Will try it out. ",
    "530140303": "The client sends a message to the server every 300 milliseconds, and the server sometimes receives several consecutive messages, rather than receiving a message every 300 milliseconds.\nIt's amazing. It appears on one computer, every time.Other computers don't have this problem. The computer system is win7.\n. I've only tested three machines, and I'm not sure it will only happen on a particular machine.It must be a buffering problem, so what can i do to make it unbuffered?. The common TCP socket has a setNoDelay method to handle the buffering problem, and I've seen that the ws library does not have this similar method.. I see that this is open by default, but there will be a buffering problem. Is there any other solution or idea?. Ok, thank you very much!!!. ",
    "dcharbonnier": "I agree it's not so important for this property but in general I find it very interesting to have ws that implements Websocket as much as possible and it's already the case :+1: \nconst ws: typeof WebSocket = typeof (WebSocket) !== \"undefined\" ? WebSocket : require(\"ws\");\nMaking this a getter would make ws behave like the WebSocket specifications from what I know and I could remove one test here https://github.com/dcharbonnier/advanced-websocket/blob/develop/src/Waterfall.ts#L49\nWas just to let you know, feel free to close it if you want. . right there is a bug related to the dns that create this problem. the problem was https://github.com/websockets/ws/pull/1246. I would replace if (!hasIPv6) return done(); with if (!hasIPv6) return this.skip(); because the test don't pass it's just skipped.\nAnd with this change the test will be skipped (or succeed without testing anything). My /etc/hosts is standard, there is nothing strange, just a regular linux machine.\nI agree that testing random domain names is not a good idea and passing the test twice is useless, we can add an other variable to skip the second test if the first one was a success, I wanted to keep it has simple as possible but it's not \"nice\". With await it would be wait more easy to make it \"look\" good.\nBtw the test is probably skipped on the CI and it's invisible ;-)\n. For example Red Hat Enterprise Linux 5\n127.0.0.1        localhost.localdomain localhost\n::1              localhost6.localdomain6 localhost6\n. \u279c  ~ salt \"*\"  cmd.run \"ping6 -c 1 localhost\"|grep Cannot|wc -l\n35\n\u279c  ~ salt \"*\"  cmd.run \"ping6 -c 1 localhost\"|grep received|wc -l\n65\n\u279c  ~ salt \"*\"  cmd.run \"test -f /proc/net/if_inet6 && echo 'IPv6 supported'\"|grep supported|wc -l\n100\nbut ok, let's change it with your proposal will see. easier to push your branch :-). Thank you, so now we know this test never pass in the CI ;-). ",
    "killerlayup": "I mean I don't close the websocket on purpose, but sometimes it shows the websocket is closing.  I think it is wired and abnormal, maybe something is wrong with using ws. Do you have meet this situation before?. I mean, why does the client close the connection with no sign? \nwhen  I  start a connection from page like:\nlet ws = new WebSocket('ws://' + ip + ':' + port + '/ws/user');\nws.onopen = function(){\n        if(ws && ws.readyState === 1){\n                ws.send([self.userInfo.headImg, id]);\n        }\n}\n but sometimes ws.readyState is not 1 ( at close status).  I am confused that when is the websocket closed and when is open? \nSorry to disturb you.. OK, I get it.\nHowever I am still confused that the why websocket  client's status is closed?\nhere is my procedure:\n1. let ws = new WebSocket('ws://' + ip + ':' + port + '/ws/user');\n2. ws.send([self.userInfo.headImg, id]);\nIt is quite simple but sometimes it shows error in the console:\nWebSocket is already in CLOSING or CLOSED state.\nWhy WebSocket client is sometimes closed or closing when I instantiate an object ws and try to send message to server.\nThis situation is infrequent, with a probability of about 25%.\nWhat should I do to solve this problem?. ",
    "hopkinskong": "Sorry, wrong repo, i was using express-ws.. ",
    "G-Rath": "Issue is caused by lack of error listener on the socket, and can be fixed like so:\nws.on('error', () => console.log('errored'));\nThis isn't documented in the README.md, and seems to be a pretty big breaking change.. @lpinca  You document that that event is where any errors from underlying net.Socket are forwarded to, but not the fact that a simple client disconnection will cause such an exception.\nTo me, because you have a 'close' event, I'd assume that exceptions caused as a result of a client disconnecting would be handled by this library, since it's something that the library seems to be able to detect and act on.\nI think is a reasonable assumption to make, given that clients disconnecting is a perfectly normal event for a socket server.\n. @lpinca That all makes far more sense; that's a mistake on my part - I didn't test it with another browser, and so assumed that that was something that commonly happens with client disconnections.. ",
    "wangjian1119": "his is the case for the latest Google browsers. ",
    "quigleyj97": "We've been running into this issue as well, but it's puzzling.\nChrome 62 and below do not cause an error using these steps, and neither do any other browsers that I've tested (Firefox 57, Firefox Mobile (57), Chrome Mobile (62)).\nFurther, with Wireshark I wasn't able to observe any significant difference in the close frames. Both Firefox and Chrome send the same 1001 closing code (\"Going away\").\nWith the error handler, it appears when closing a Chrome 63 tab that the error handler and the close handler are called at roughly the same time, but I haven't yet confirmed this.. ",
    "ProgrammingLife": "I'm in the same boat. \n\nws.on('error', () => console.log('errored'));\n\nthis doesn't solve the problem.. ORESoftware, try to put that \"on\" on the ws, not wss. I mean to put it inside 'connection' function (ws.on....).. ",
    "ICarryTheDustOfAJourney": "\nI'm in the same boat.\nws.on('error', () => console.log('errored'));\nthis doesn't solve the problem.\n\nI can confirm this statement, when the handler is applied to the server.  No more crashes when applied to each connection individually.\nThese errors occur quite often on Chrome V 63.0.3239.84 (=latest for my distribution).\nFF 57.0.3 doesn't produce this error at all. Same with Edge on Windows clients.\nNode v8.9.3 ws 3.3.3  ubuntu1~16.04.5 Linux 4.4.0-21-generic (x86_64). ",
    "jkasun": "Hi I had the same issue, \nAccording to websocket specification, it is necessary to send a close frame before disconnecting from the server. That's why after properly closing the socket with sending the close frame this error didn't occur. as @lpinca mentioned.\nwindow.addEventListener('beforeunload', function () {\n  ws.close();\n});\nSo I guess its fair to emit an error that point. Make sure you close the websocket from the client side before disconnecting, this could happen due to closing the browser or refreshing. ",
    "pbarbiero": "So we started having a production server crashing today after a recent deployment moved the latest version of ws to 3.3.3 as well. We do not use it directly, but instead use it indirectly through socket.io v2 and puppeteer. Looking at those repos (socket.io uses it inside of engine.io and engine.io-client) I see them attaching on('error', cb) and now I am confused.\nMy gut instinct is maybe puppeteer is doing something wrong and not socket.io since they do it a little differently than the examples in this issue show. Specifically, right here: https://github.com/GoogleChrome/puppeteer/blob/master/lib/Connection.js#L31\nI would open a ticket against their repo, but I don't even know if they are doing anything wrong yet since they don't use it through a server, and I don't have the knowledge to rule out socket.io either (they attach an error handler here: https://github.com/socketio/engine.io/blob/master/lib/server.js#L380)\n@lpinca I hate to bug you, but can you double check my analysis before I consider opening tickets elsewhere?. Thank you, so now I am stumped. If it throws on the client, how would it crash the node instance? Also, it wouldn't make it to the server logs either, right? . ",
    "dieunguyen95": "please change version of  ionic/app-scripts to 3.1.6. you can see:\nhttps://github.com/ionic-team/ionic-app-scripts/blob/master/CHANGELOG.md. ",
    "ztiandan": "I got this issue too, it made node crash, how could i catch this error, make node does not crash\n[Sat Feb 10 2018 17:34:06 GMT+0800 (CST)] [graceful:worker:4131:uncaughtException] throw error 1 times\n{ Error: read ECONNRESET\n    at _errnoException (util.js:1022:11)\n    at TLSWrap.onread (net.js:615:25)\n  code: 'ECONNRESET',\n  errno: 'ECONNRESET',\n  syscall: 'read',\n  name: 'ECONNRESETError' }\nError: read ECONNRESET\n    at _errnoException (util.js:1022:11)\n    at TLSWrap.onread (net.js:615:25)\nadded onerror and onclose\nthis.onerror = function (err) {\n   console.log('[svc_sdk] h5 websocket onerror:', err.message);\n}\nthis.wsSock.onclose = this.onclose;\nthis.wsSock.onerror = this.onerror;. is there any limits on concurrent websockets? on my system only about 9K+ connections can work, i have opt my system, but don't know what i need to do?\ncpu and memory only use 20%. yes, same machine same address, i'll try you suggestion, could u inform me why only 9k websockts 1 interfaces can not handle? 1 interface can handle 65535 connection? i do really want to understand it.. I was disable selinux, firewall, no iptables installed, does it will affect connection performance?. > it depends on the OS but it's limited to a few thousands\ncould u tell me the name of limit, i wanna research it.\n  . my machine use 10.255.210.84, added 10.255.210.85\n```\n[root@web-1 site_avalokitesvara]# ifconfig \nens160: flags=4163  mtu 1500\n        inet 10.255.210.84  netmask 255.255.255.0  broadcast 10.255.210.255\n        inet6 fe80::997c:fa81:8942:2647  prefixlen 64  scopeid 0x20\n        ether 00:0c:29:6c:74:09  txqueuelen 1000  (Ethernet)\n        RX packets 2685004  bytes 376131435 (358.7 MiB)\n        RX errors 0  dropped 33  overruns 0  frame 0\n        TX packets 3117802  bytes 294231973 (280.6 MiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nlo: flags=73  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10\n        loop  txqueuelen 1  (Local Loopback)\n        RX packets 218  bytes 15171 (14.8 KiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n```\n[root@web-1 site_avalokitesvara]# cat /etc/sysconfig/network-scripts/ifcfg-ens160 \nTYPE=\"Ethernet\"\nPROXY_METHOD=\"none\"\nBROWSER_ONLY=\"no\"\nBOOTPROTO=\"none\"\nDEFROUTE=\"yes\"\nIPV4_FAILURE_FATAL=\"no\"\nIPV6INIT=\"yes\"\nIPV6_AUTOCONF=\"yes\"\nIPV6_DEFROUTE=\"yes\"\nIPV6_FAILURE_FATAL=\"no\"\nIPV6_ADDR_GEN_MODE=\"stable-privacy\"\nNAME=\"ens160\"\nUUID=\"7472eca9-dc67-434f-bc4e-22ecb9274ddb\"\nDEVICE=\"ens160\"\nONBOOT=\"yes\"\nIPADDR=\"10.255.210.84\"\nIPADDR1=\"10.255.210.85\"\nPREFIX=\"24\"\nGATEWAY=\"10.255.210.1\"\nIPV6_PRIVACY=\"no\"\n[root@web-1 site_avalokitesvara]# ping 10.255.210.85\nPING 10.255.210.85 (10.255.210.85) 56(84) bytes of data.\n64 bytes from 10.255.210.85: icmp_seq=1 ttl=64 time=0.028 ms\n64 bytes from 10.255.210.85: icmp_seq=2 ttl=64 time=0.033 ms\n64 bytes from 10.255.210.85: icmp_seq=3 ttl=64 time=0.029 ms\nin node code\n```\nlet wsOpt = {\n    agent: new HttpsProxyAgent(url.parse(this.mod.globals.proxyAddr)),\n    handshakeTimeout: 15000,\n    rejectUnauthorized: false\n}\nif (global.h5ServiceMap.size > 5000){\n    wsOpt['localAddress'] = '10.255.210.85';\n}\nthis.wsSock = new WebSocket(this.wsAddr, wsOpt);\n```\nAfter these changed, i want to find the connections with 10.255.210.85\nnetstat -antup | grep 10.255.210.85\nnot found\nall connections using  10.255.210.84, like this\ntcp        0      0 10.255.210.84:31557     125.211.211.174:23499   ESTABLISHED 1458/node\ntcp        0      0 10.255.210.84:16433     125.211.211.134:18756   ESTABLISHED 1458/node\ntcp        0      0 10.255.210.84:41332     125.211.211.155:19376   ESTABLISHED 1458/node\ntcp        0      0 10.255.210.84:35002     125.211.211.176:21913   ESTABLISHED 1458/node\nanything wrong on my code or sys config?\n9977 ESTABLISHED\n[root@web-1 site_avalokitesvara]#  netstat -na | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}' \nLISTEN 6\nESTABLISHED 9977\nTIME_WAIT 1\nSYN_SENT 2772\nalso added ens160:0, ip is 10.255.210.86\n```\nens160: flags=4163  mtu 1500\n        inet 10.255.210.84  netmask 255.255.255.0  broadcast 10.255.210.255\n        inet6 fe80::997c:fa81:8942:2647  prefixlen 64  scopeid 0x20\n        ether 00:0c:29:6c:74:09  txqueuelen 1000  (Ethernet)\n        RX packets 16012065  bytes 2004116074 (1.8 GiB)\n        RX errors 0  dropped 221  overruns 0  frame 0\n        TX packets 18336280  bytes 1585723859 (1.4 GiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nens160:0: flags=4163  mtu 1500\n        inet 10.255.210.86  netmask 255.255.255.0  broadcast 10.255.210.255\n        ether 00:0c:29:6c:74:09  txqueuelen 1000  (Ethernet)\n. is there a solution for me? use proxy and localAddress same time.. changed my code, seems not working.\nlet virtualIp = '10.255.210.86';\nlet proxyOpt = url.parse(this.mod.globals.proxyAddr);\nproxyOpt.localAddress = virtualIp;\nlet wsOpt = {\n  agent: new HttpsProxyAgent(proxyOpt),\n  handshakeTimeout: 15000,\n  localAddress: virtualIp,\n  rejectUnauthorized: false\n}\n. thanks for u tips, i'll try it.. I have one question, when i pass localAddress to https-proxy-agent, do i need to pass it to ws too?. after test, only use localAddress with ws it works, add https-proxy-agent, did't work, as your mention proxy can add additional params for net.connect function, i had passed localAddress to it, but not work, i don't know what the issue from? Nodejs, https-proxy-agent or ws, and what i need to do, could u give me any suggestion, figure out this issue my project will be done, thank you very much.. I changed proxy from [https-proxy-agent](https://github.com/TooTallNate/node-https-proxy-agent) to [node-tunnel](https://github.com/koichik/node-tunnel), they are all works when without localAddress params with [ws](https://github.com/websockets/ws), [node-tunnel](https://github.com/koichik/node-tunnel) support localAddress by param, but it didn't work as [https-proxy-agent](https://github.com/TooTallNate/node-https-proxy-agent), it confuse me, [node-tunnel](https://github.com/koichik/node-tunnel) support localAddress, [ws](https://github.com/websockets/ws) also, how could i make them work together?. Thank you very very much for your code, maybe anything wrong in my code, i'll research it by your code, is it need proxy server must support any params? like localAddress?. does binaryType support blob?. server work with browser with blob, what type i need to use with node, arraybuffer?. when i set binaryType = \"arraybuffer\", but evt.data still Buffer type, how could i figure it out?. the browser code like this\nconst ws = new WebSocket(url);\nws.onmessage = function (evt) {\n  const fileReader = new FileReader;\n  fileReader.onload = w;\n  fileReader.readAsArrayBuffer(evt.data)\n}\nfunction w() {\n   let e = this.result;\n}\n```\nH5 API FileReader read data from evt.data directly, I debug on the browser, it seems readAsArrayBuffer read lots of times, and then enter w function \nI need to use the same logic on Node. use above code on Node, there is an error will be throw\nif (!file || !file.name || !(file.path || file.stream || file.buffer)) {\n   throw new Error(\"cannot read as File: \" + JSON.stringify(file));\n}. it works, thank u very much.. ",
    "Wawy123": "just add onerror and onclose (inside of wss.on.('connection',...)) to your server : \nws.on('close', function(){\n      console.log(\"client closed connection!\");\n  });\nws.on('error', function(e){\n      console.log(\"error!: \" + e);\n  }). :). idk then. works fine for me.\nmy code(server):\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\nwss.on('connection', function(ws) {\n  ws.on('message', function(message) {\n   console.log(\"msg: \" + message);\n  });\nws.on('close', function(){\n      console.log(\"client closed connection!\");\n  });\nws.on('error', function(e){\n      console.log(\"error!: \" + e);\n  })\nws.send('something');\n});. hope it helps. ",
    "dzek69": "This still happens on 4.0.0, adding both error and close event handlers on ws instance doesn't help.. I'll test it again, but for me the problem is that even when there is an error listener - ws still crashes.\nI prefer it to re-emit the errors, just make sure I'll be able to catch them. Looks like you're right.\nAccording to your message it seems like error is happening on connected client instance, not whole server.\nThat ws and wss wasn't distinguishable enough in the example. That's why I am always using client as name inside connection.\nSo to resolve the issue we should use:\njavascript\nws.on(\"connection\", (client) => {\n  client.on(\"error\", () => {\n    // do something or ignore\n  });\n});\nThis is perfectly fine, I'll always vote for explicit code - this just needs to be explained in README.. ",
    "oop": "Same for me. It was happening in every refresh. But after adding the event listener, it happens rarely and when you refresh too much in a second. But now, the client side says: ' 'WebSocket': Still in CONNECTING state.'.\nProblem isn't solved totally.\nChrome Canary v66.0.3345.0\nNodeJS v8.9.3 / ws library v4.0.0\nthe listener:\nwindow.addEventListener('beforeunload', function () {\n  ws.close();\n});. ",
    "itaysabato": "@lpinca If the error is never re-thrown (not just when there is an errno), can it have a negative effect?. ",
    "kahluagenie": "Spent some time figuring this one out in my unit tests. I had code like this to finish the tests:\nwsClient.close();\nserver.close(done);\nThe problem is that the server tries to close before the event from the client reaches it, hence forcing the close connection and causing the error.\nSo I'm doing this now:\n```\n        if (server.clients.size) {\n            server.clients.forEach(ws => {\n                ws.on('close', () => {\n                    if (!server.clients.size) { // last client\n                        server.close(done);\n                    }\n                });\n            wsClient.close();\n        });\n    } else {\n        server.close(done);\n    }\n\n```. Haha, negative. I was using ws for a project of mine, so was figuring stuff out when I ran across the issue. All good now though!\n. ",
    "cluxter": "What helped me to solve this issue was @lpinca comment here: https://github.com/websockets/ws/issues/1256#issuecomment-364988689\nI was adding the ws.on(\"error\", function (err) { console.error(\"Error: \" + err) } ) at the root of the server code when it should actually be inside the wss.on(\"connection\", ... ) part!\nThe indentation in the comment I provided helped me to see that my code was not in the right scope. Some other comments didn't provide indentation in their examples and this is why I misread them.\nProblem solved, thanks a lot!. ",
    "SinvalMAO": "Most people with problems here are putting the error event in wss that references the instance of WebSocketServer, but you should put in the instance created when the client opens a connection, this happens because you should have tried to listen after the connection was already closed thus taking a DENY of the server, if it does not treat the generated exemption, it will be sent to the parent that is the own generating a shutdown. (Less technical)\n```javascript\n'use strict';\nconst WebSocket = require('ws').Server;\nconst SERVER_PORT = 8081;\nconst wss = new WebSocket({port: SERVER_PORT});\nconst connections = [];\nwss.on('connection', handleConnection);\nwss.on('error', () => {\n    console.log('NOT WORK!!!');\n});\nfunction handleConnection(ws) {\n    console.log('New Connection');\n    connections.push(ws);\n    console.log(connections.length);\nws.on('error', () => {\n    console.log('WORK! =)');\n});\n\nws.on('close', function() {\n    console.log('Connection closed');\n    let position = connections.indexOf(ws);\n    connections.splice(position, 1);\n});\n\n}\nfunction broadcast(data) {\n    for (let connection in connections) {\n        try {\n            connections[connection].send(data);\n        }catch(e) {\n            console.log(e);\n        }\n    }\n}\nsetInterval(() => broadcast(new Buffer('A')), 2000);\n```. ",
    "Hypnosphi": "\nws.on('error', (err) => {\n // Ignore network errors like `ECONNRESET`, `EPIPE`, etc.\n if (err.errno) return;\n throw err;\n});\n\n@lpinca in 4.0, it should be rewritten to this, right?\nws.on('error', ({error}) => {\n // Ignore network errors like `ECONNRESET`, `EPIPE`, etc.\n if (error.errno) return;\n throw error;\n});. ",
    "RebelSyntax": "First, thanks for the great library.  I am testing it out on a really cool IoT prototype.  I love that it does one thing good.  I ran into this error the last couple days.  I am guessing because my headless client timed out it's http connection for whatever reason (don't have ping pong going yet, just a reconnect on the heartbeat.)\nAnyways, I had already set up the error handler in connection event for the connected socket.  So I was a little surprised that the server halted on this error.  I realize that the error is not going to be re-emitted, but I guess I am confused by that.  Why wouldn't that error get handled the way it was intended? . ",
    "EvanCarroll": "@kahluagenie here because of Devskiller interview assessment?\n\nI wonder how many people are coming here because of bad spec tests in timed Devskiller assessments? Here is my theory: I think the ws team is getting played. =P Devskiller's package.json version-fixed to 3.3.3 which has the issue, and all we have three hours to figure out why we're too stupid to scaffold a Web Socket interface (beginner level stuff). The real reason is because they mirror in their .spec.ts a very subtle bug that's only valid on archaic versions of ws\nwsClient.close();\nserver.close();\nor,\nws.close()\nwsServer.close()\nYou have three hours to scour and find the GitHub issue before you get the senior level remote-coffee-shop Node.JS guru position. If you found this issue. Congrats. You won.\nThe funny thing I read this and I wonder if everyone is making this honest mistake, or if we're all here for the same malformed spec/wsServer-api.spec.js. =P\nhttps://devskiller.com/coding-tests/middle-javascript-developer-node-js-server-side-step-tracker/. ",
    "TimothyGu": "Well, this is a bug, and bugs need to be fixed. Just because a fix is semver-major doesn\u2019t mean it can\u2019t get applied. That would be a sad state of affairs. Plus, it is difficult and fragile to monkeypatch this on the user\u2019s side.. Awesome. It's not very urgent but would be nice to get a timetable on it. It's being used in https://github.com/tmpvar/jsdom/pull/2088, which will probably need a few weeks for others to review. ",
    "cymruu": "@lpinca Thank you very much. That solved my issue.\njs\nvar options = {};\nif (fs.existsSync('./certs')) {\n    options.key = fs.readFileSync('./certs/privatekey.key');\n    options.cert = fs.readFileSync('./certs/certificate.crt');\n  if(fs.existsSync('./certs/ca_bundle.crt')){\n    options.ca = fs.readFileSync('./certs/ca_bundle.crt');\n  }\n}\nconst httpsServer = https.createServer(options, (req, res) => {\n  res.writeHead(200);\n  res.end('hello world\\n');\n});\nhttpsServer.listen(1030);\nvar wss = new WebSocketServer({server: httpsServer});. ",
    "dungvu-qe": "I faced off the same error like above.\nHow to you resolve this, @Lisio ?. ",
    "Lisio": "Yes, I was doing some sorting on every event and each sort required more time to complete than it had between those events.. ",
    "rutanika": "req.headers['sec-websocket-version'] is 13, therefor origin is req.headers['origin']. right, but I still don't understand why req.headers['origin'] comes without port and info.req.headers.host comes with port 443 :). Yes, on 1.1.4 origin and host are the same. \nThe client is also the same. The only change is the version of ws and the adjustment for upgradeReq property. . I already printed it and saw that the host has port 443 in 3.3.3 and does not has port at all in 1.1.4.\nI open this github issue only after I printed it and saw the difference. . Hi, \nI will try to isolate the issue and create a standealone example that demonstrates what was done here. \nThanks, \nTali\n. ",
    "delasky": "Thats fair. If i have time this week I might put in a PR to guard with a specific error, but at least now people who search in the issues can see this. Don't think its high priority. ",
    "Hclmaster": "Thanks for the quick reply, but as I add /mqtt pathname to the request url, it gave me the 404 error. It seems very curious, and I can't figure out why this happening :(\n\n. ",
    "schlaubumms": "Hey, sry, tried hard the last time.\nSolved the problem: kill -all node works to close all nodes and the websockets (for clear). A reload will start another instance of node. Plesk... ;). ",
    "forty": "Yes, it seems to work properly with node, but it does not work at least with jsdoc[1] parser it seems. I tried to find out in the spec who was right, but parsing the ECMA spec is not easy...\n[1] http://usejsdoc.org/. Sure! I'll update the PR. ",
    "bioinfo35": "i am using ws v 4.0\nhere is screenshot https://www.screencast.com/t/ESZdbNg5\ni tested it on windows and ubuntu. Thank You @lpinca . ",
    "neophob": "Thanks @lpinca for the fast feedback. No I don't use / catch uncaughtException. But I had two different errors before:\nError: Opening handshake has timed out at ClientRequest._req.setTimeout (/foo/node_modules/ws/lib/websocket.js:631:21) at ClientRequest.g (events.js:291:16) at emitNone (events.js:86:13) at ClientRequest.emit (events.js:185:7) at TLSSocket.emitTimeout (_http_client.js:620:10) at TLSSocket.g (events.js:291:16) at emitNone (events.js:86:13) at TLSSocket.emit (events.js:185:7) at TLSSocket.Socket._onTimeout (net.js:339:8) at ontimeout\nError: connect ENETDOWN 10.0.0.67:1443 - Local (192.168.178.29:56406) at Object.exports._errnoException (util.js:1026:11) at exports._exceptionWithHostPort (util.js:1049:20) at connect (net.js:879:16) at net.js:968:9 at _combinedTickCallback (internal/process/next_tick.js:67:7) at process._tickCallback (internal/process/next_tick.js:98:9) code: 'ENETDOWN', errno: 'ENETDOWN', syscall: 'connect', address: '10.0.0.67', port: 1443 }. > Can you consistently reproduce this?\nWell I'll check if I can - I guess yes. I closed my macbook in the office and opened the lid at home, of course there will be a timeout. I'll recheck if I can reproduce that. \n\nDid you receive those errors in that order?\n\nyes sir. ",
    "pthieu": "Nevermind.\nI had some other code in there that was preventing the event declaration lines.. ",
    "LewisTehMinerz": "It's been a while since I've had to write a test case.\nAnyway...\nI use ws for both server and client, and I cannot get the issue to replicate. I'll keep you updated if it happens again.. \ud83d\udc4c . ",
    "grimkirill": "reference changed if you call ping (data, cb), then you got error\nYou should call method as ping (data, mask, cb)  or ping (cb). ",
    "songzhuang": "Never mind.  I just found a similar note and the answer seems to be to install a newer version of ws.\nAbout to do it now.. New version did solve the above issue. ",
    "Ericbla": "Do you mean don't use the path option at all ?\nMaybe yes, but in this case I would accept an Upgrade from any URL. In my case it is not a real big issue, but  I will have to check the url then after accepting the websocket. . Ah! Sorry I didn't noticed that this method was in the API doc.\nSo yes you are right it is a better approach.\nForget my PR.\nTanks.. ",
    "jaggedsoft": "Actually, this looks like a problem with my library located at https://github.com/jaggedsoft/node-binance-api/ but it might have already been fixed\nPossibly related to this issue https://github.com/jaggedsoft/node-binance-api/issues/81. @slidenerd I believe this comes down more to the operating system limits than javascript limits. i've had several thousand connections open and hear reports of others going beyond 600k connections or even beyond a million. At this point it would depend more on processing speed and probably RAM as well.. ",
    "lzl124631x": "@jaggedsoft  Ah, yes. I mistakenly posted this issue here.\nCurious. How did you find this issue? I just posted it at another repo irrelevant to node-binance-api.\nI just pulled your code yesterday. Are you sure it's fixed?. ",
    "cTn-dev": "Oh, i didn't know :/ thank you very much for the links.\nLoving the module btw!. ",
    "tspn": "@lpinca Can we Merge ? :). It seems like code coverage doesn't see the cover of some test\njs\n    it('throws an error when operating in \"noServer\" mode', function () {\n      const wss = new WebSocket.Server({ noServer: true }, () => {\n        assert.throws(() => {\n          wss.address();\n        }, /^Error: This server is operating in \"noServer\" mode$/);\n      });\n    });. Hey, Thank you so much to complete this PR (you rewrite it all haha) \nYou\u2019re awesome !!. understood. Thank for the guide. :). okidokie. ",
    "heldplayer": "Looks good \ud83d\udc4d . ",
    "basitsattar": "Ok. but how'll I track users who went offline? I mean I have to keep track of them with respect to socket ids too? Also is there a on disconnect event in ws like Socket.io? And how to uniquely identify a socket, through id or what? . Ok I can assign an id to the socket but if I have an id of socket that belongs to user how can I send message via that socket if I only know its id?. I need something like this, https://stackoverflow.com/questions/27055989/socket-io-1-0-x-get-socket-by-id. Haha thanks a lot. Sorry for bothering. I wanted to ask if there is some built in function like socket.io for this. Thanks a lot for helping :) . ",
    "kevindenight": "Well, i copied the content of httpServer.js to webSocket.js, then it works.  emmmm. Find the problem finally, it caused by circular import. @lpinca Thank you for reply anyway!. ",
    "xwa130": "I'm sorry for the delayed reply. I appreciate your help. . ",
    "fxbabys": "Thank you for the response! It works after a while, maybe due to the server cache.. ",
    "ImBundle": "Thanks It work. ",
    "mtharrison": "Thanks, so in your opinion would you expect a consuming library to ignore errors on the socket after open has completed successfully? And only care about the socket close events after that?. Ok, thank you for the information!. ",
    "YxxY": "@lpinca thanks for your reply.\non windows, the error code is ECONNRESET\non ubuntu, the 'error' event handler received nothing, the 'close' event handler as below got 1006\njs\n    ws.on('close', function (err) {\n        console.log(err)\n    }). it works, thanks a lot!. ",
    "comtaler": "Essentially, I can refactor my code and move all the async methods to verifyClient. However, that makes the code logic a bit harder to understand and verifyClient as its name suggested, should be to authorize the client. Here is a summary of the code I have\nwss.on('connection', function (ws, req) {\n  const client = new Client(ws);\n  client.initialize(); // contains async\n  // more async methods\n}\nin client.initialize, I have to add some client related data to redis, clean up previous session data, and subscribe to a client specific channel. Before all of them are successful, I don't want client to send in any data.\nAs you suggested, I could do this:\n```\nfunction verifyClient(info, cb) {\n  const client = new Client();\n  info.req.customData = {client: client};\n  client.initialize(cb);\n}\nwss.on('connection', function (ws, req) {\n  req.customData.client.setSocket(ws); // inside, i start listening to the events.\n}\n```\nIf there is a hook (preHandshakeCompelte), I can move all the original \"connection\" code to the hook and the code and logic is cleaner.. Thanks for helping out. I think I can take the second suggestion. Please feel free to close this issue.. Hi @lpinca I finally have time to implement your second suggestion. But I found that I ran into a problem that client.initialize requires a websocket object to be passed in since each client has to do something using the websocket object. And websocket object is not available until upgrade is finished.. If I would like to pause the socket and resume after I am done with the async calls. Is there anything I need to pay attention to? What I can think of is that internal socket will buffer data, but not emitting it. That may cause overflow on the buffer if too much data is sent to server before server finishes all the async tasks.. Got it. Thanks for the quick reply.. ",
    "SuperOP535": "Ok so forget my old comment ( deleted now ) but when I do this does it pass the ws object if I do like onconnection(ws) { etc... }. Also, can I pass extra arguments because I am using custom IDs to differentiate clients. I'm sorry, I'm new to classes and I thought I would ask here but I won't do it again.. Thanks for helping me :). oh I did not realize that I could set binaryType on the ws client... I did on the server instead lol sorry. ",
    "titoBouzout": "Does this means that client (the browser) will always receive a blob and never an arraybuffer?  Im confused because I been trying to avoid having to convert to arraybuffer.  \nIm doing this which works \nvar data = new Uint8Array(new FileReaderSync().readAsArrayBuffer(event.data)))\nIs possible to avoid having to do new FileReaderSync().readAsArrayBuffer\nThanks!. Nevermind, I understood now. In the browser you need to tell the connection will user arraybuffer as the binaryType. ws.binaryType = 'arraybuffer'\nthen when messages are received event.data will be instance of ArrayBuffer instead of instanceof Blob. ",
    "hervehobbes": "It solved the problem!\nThank you very much.\n. ",
    "Jokero": "@lpinca So, is any way to get these http response code and message?) I guess the only way to pass the reason to the client why WebSocket connection is not established is to set cookie with specific value..  @lpinca What do you think about extending the callback of verifyClient with new param for additional (custom) headers?\nSo abortHandshake will look something like this:\n``js\nfunction abortHandshake (socket, code, message, headers) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    headers = headers || {};\n    socket.write(HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n+\n      'Connection: close\\r\\n' +\n      'Content-type: text/html\\r\\n' +Content-Length: ${Buffer.byteLength(message)}\\r\\n+\n      Object.keys(headers).map(h =>${h}: ${headers[h]}`).join('\\r\\n') +\n      '\\r\\n' +\n      message\n    );\n  }\nsocket.removeListener('error', socketOnError);\n  socket.destroy();\n}\n```\nIn that case I can send cookie to the client and show some message based on its value.. Few :smile: Fixed. Take a look please. Just .idea/?. Also thought about moving custom headers before common. But decided to have common headers before in order to have them at the top of response (although order of headers is not important). ",
    "Altiano": "@lpinca Too bad.. I wonder is it safe to put token in URL?\nWill it be encrypted when using wss? \nAnd is it wrong to put username + password in subprotocol?. Yup. Thanks. Probably shouldn't open an issue, but there is no other way.. ",
    "JulienLeotier": "Hello, \ni have a solution for pass a token in header \nconst headers = Object.assign({\n        'Authorization': 'Token  YourToken'\n      }, headers);\n      const ws = new WebSocket('ws://YourUrl', ['protocole1', 'protocole2'], options={'headers':headers});. ",
    "Paxa": "I was able to do it if first request will end with status 401 and require authorization, then chrome will send one more request with auth headers:\n```js\nconst auth = require('basic-auth');\nfunction verifyClient(info, callback) {\n  if (info.req.url.includes('require_auth=1')) {\n    var adminUser = auth(info.req);\nif (adminUser && adminUser.name == AppConfig.admin_auth.name && adminUser.pass == AppConfig.admin_auth.pass) {\n  callback(true)\n} else {\n  console.log('WS: require basic auth', adminUser);\n  callback(false, 401, 'Unauthorized', {'WWW-Authenticate': 'Basic realm=Authorization Required'})\n}\n\n} else {\n    callback(true)\n  }\n}\n/// ...\nconst wss = new WebSocket.Server({ server, verifyClient });\nwss.on('connection', async (ws, req) => {\n  var user = auth(req) || {};\n  // user <- this will have values\n})\n```. ",
    "kmathmann": "Yes your argumentation makes sense. Adding examples for each framework isn't a solution.\nInstead we should change the ExpressJS example to an general example how to use ws next to frameworks such as express, koa and others. . ",
    "qm3ster": "Sorry for the confusion, I meant types like 'application/json', when sending a message.\nIn a browser this would be achieved by the following:\njs\nws.send(new Blob([JSON.stringify({ test: 1 })], { type: 'application/json' }))\nbut Buffer and such don't have anything like that, so I was looking to sideload it, something like this:\njs\nws.send(new Buffer(JSON.stringify({ test: 1 })), { type: 'application/json' }). ",
    "ryuqing": "it's worked by do this   var ip = ws._socket.remoteAddress. ",
    "thomaszdxsn": "@lpinca \nSorry, what is ws.upgradeReq, I can't found it in API reference.. Thanks very much. ",
    "Uniphix": "Basically what is happening is let's say I am connected via the web socket\nprotocol.  And then all of sudden my application looses internet\nconnection.  The socket is still open however no data can get through.\nWhen internet comes back online it will flood all the ping attempts to the\nserver with a bunch of pong responses.  What I did on my end is just check\nto see if it has pong already and if it has it won't spit out in the\nconsole log.  However that doesn't stop it from flooding.\nIt could get ugly as let's say that socket connection is still open on a\ninternet connection that was once online but goes offline.  The socket is\nstill online.  If I we're to call ping let's say 1 time per second.  And I\nam offline for 60 seconds, it will flood 60 pong response.  which might be\nnot to bad but let's say i'm offline 1 hour, that is 3600 pong responses\nthat would flood the CPU and possibly crash the application.\nOn Tue, Mar 27, 2018 at 12:10 PM, Luigi Pinca notifications@github.com\nwrote:\n\nIf the connection is not closed but no message can be sent and then all of\nsudden it start working again, then it's normal as messages are buffered.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/issues/1337#issuecomment-376640673, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABef2WoGeteDUJPN9NWFJQIjvb878OjAks5tio6bgaJpZM4S9ck3\n.\n. Yup,  after realizing I changed how I was doing it.  Made it so that if it\ndoesn't get a response from a PONG after n amount of time then it would\nresult terminating that connection/closing it and then allow the\n\"auto-reconnect\" logic I have reapply once connection established again.\n\nThanks!\nOn Tue, Mar 27, 2018 at 1:05 PM, Luigi Pinca notifications@github.com\nwrote:\n\nWhy are you keeping sending pings if they don't go through? If you haven't\nreceived a pong I would either force close the connection or clear the\ninterval before sending another ping.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/issues/1337#issuecomment-376656760, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABef2YxY2zAQFNMZGwNLf55dL-bBybo0ks5tiptygaJpZM4S9ck3\n.\n. \n",
    "FlowShowcontrol": "It seems that when using Electron, the resulting buffer created by ws is not recognized by net.js as being a Buffer at all. Is there some conversion needed here?. ",
    "anliting": "Thank you too. ws is a great work.. Okay, I have updated it.. ",
    "summerwollin": "Just tried on v9.10.1, still having the same issue on 5.1.0 but not on 5.0.0.. Yes same issue on 5.1.1. I can try to give you a test case, but I have to modify what I have since it is code my company owns. I am using ws as a proxy between our clients (browser sessions) and our server. Given the following chunk of code that 404 is logged by wsClient.on('error':\n```\nconst wss = new WebSocket.Server({port: 8080})\nwss.on('connection', function (ws, request) {\n  const wsClient = new WebSocket('wss://backendserver/example')\nws.on('message', function (message) {\n    const trySend = () => {\n      if (wsClient.readyState === WebSocket.OPEN) {\n        wsClient.send(message)\n      } else {\n        setTimeout(() => {\n          trySend()\n        }, 3000)\n      }\n    }\n    trySend()\n  })\nwsClient.on('error', function (err) {\n    console.log('wsClient error', err)\n  })\nwsClient.on('close', function () {\n    console.log('wsClient closed')\n  })\nwsClient.on('message', (message) => {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(message)\n    } else {\n      wsClient.terminate()\n    }\n  })\n})\n```\nThe 404 appears to occur during the initial handshake and results in the wsClient closing with code 1006 (abnormal closure). I end up looping in trySend, and yes I know there could be better retry logic here but the point still stands that on 5.1.0 AND 5.1.1 but not 5.0.0 I get this 404 that causes the socket to close. For now I will just lock my proxy to 5.0.0.  Let me know if you have more questions or if there is anything else I can clarify, and I appreciate your help!. Running the above returns an error: Error: getaddrinfo ENOTFOUND which seems likely to be the same 404 from earlier. We use a wildcard cert so SNI is not necessary, and we do not support TLS 1.0 or 1.1, or SSL v2. Are you using TLS 1.2 or better? I don't see how to tell which version that npm package is using.. Actually turns out we do support TLS 1.0 and 1.1. Sorry for the confusion, my IT guy just checked and updated me.. Yes sorry - it's been a busy week here at work. Running the above exactly as written using the core modules returns:\n```\nerr { Error: write EPROTO 140736440177600:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:../deps/openssl/openssl/ssl/s23_clnt.c:794:\nat exports._errnoException (util.js:1033:11)\nat WriteWrap.afterWrite [as oncomplete] (net.js:816:14) code: 'EPROTO', errno: 'EPROTO', syscall: 'write' }\n\n```\nOn 5.0.0, 5.1.0, and 5.1.1. Hostname, path, and port are all identical to what I'm connecting to in my proxy on 5.0.0.. No, same error. Fair, whenever I have time I'll try to figure out the issue. Thanks for looking.. ",
    "generateui": "Just wasted a good amount of time on this, googling for all kinds of weird errors. Infuriating. Especially when the first line reads \n\nws is a simple to use, blazing fast, and thoroughly tested WebSocket client and server implementation.\n\nYes, there is a note, but usually I only read that when implementation details are needed. I may try to see if the referenced fix works in combination with Browserify.. Awesome!\nOn Sat, Jul 7, 2018, 22:30 Luigi Pinca notifications@github.com wrote:\n\nClosed #1344 https://github.com/websockets/ws/issues/1344.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/issues/1344#event-1721608601, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAXi7IczNFcyBJ8yq6ETIIaAIG6RWElEks5uERp-gaJpZM4TCXhj\n.\n. \n",
    "Devoxin": "Yep, It works. is logged to console without issue. Yeah, is that not needed?. If I use ws:// it returns Error: Unexpected server response: 400, and without the ws:// prefix completely I just get Error: getaddrinfo ENOTFOUND 2096 2096:80 (2096 is the port of the websocket server). That second code snippet is also working. Yep, server's publicly accessible, it only seems to be ws that's not able to connect for some reason.. union.serux.pro:2096. ",
    "SridharRamasami": "Just to clarify.  The webserver runs on a local network and connects to a router.  Clients also connect to this router.. Hello Ipinca,\nThanks for the response.  What would happen if data was sent to the broken connection (technically working socket) and it exceeded the buffer?\n. Ok.  Thanks.. ",
    "Lsy-kg": "@lpinca thanks, first. What must the server do to solve this problem? or can only be resolved by the client.. ",
    "evanshabsove": "Hey I'm running into the same problem and was hoping for some help, I have \n// ws catch errors\nws.on('error', function(error){\n   console.log(error);\n})\nInside of my wss.on('connection') method, I think the error is happening when I am sending ping and pong messages between the clients to check if they are still open. \nconst interval = setInterval(function ping() {\n    wss.clients.forEach(function each(ws) {\n        if (ws.isAlive === false) {\n           console.log(\"I am terminating\");\n           return ws.terminate();\n        }\n       ws.isAlive = false;\n       ws.ping(self.noop);\n   });\n}, 30000);\nIs my code sending the ping and inside my wss.on('connection') I have \nws.on('pong', self.heartbeat);\nI'm just wondering where I could add the error handling to catch this. For a bit I included the error handler inside of the ping check but it was still crashing. \n. ",
    "manusrivastav": "START server\ncannot call  http://localhost:3000 0 5 { Error: connect ECONNREFUSED 127.0.0.1:3000\n    at Object.exports._errnoException (util.js:1026:11)\n    at exports._exceptionWithHostPort (util.js:1049:20)\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1085:14)\n  code: 'ECONNREFUSED',\n  errno: 'ECONNREFUSED',\n  syscall: 'connect',\n  address: '127.0.0.1',\n  port: 3000 }. ",
    "sysaxis": "I'll try to explain in samples:\nRequire 2 modules, both are built on top of ws.\n```\nvar mod1 = require('module1');\nvar mod2 = require('module2');\nvar server = require('http').createServer();\nmod1.init(server, '/path1');\nmod2.init(server, '/path2');\nHere's what happens in mod2 init function:\nlet ws = require('ws');\nlet _ws = new ws.server({server});\n// the module handles endpoints of it's own (fallbacks when WebSocket cannot be used in frontend)\nserver.on('request', function() {} ); \nNow we have the problem where ws 'upgrade' to any of the given paths get the abortHandshake.\nWe cannot use this workaround either:\nmod2.init({noServer: true});\n```\nSince mod2 expects an actual server instance.. Sorry, I should've specified it before that module1 and module2 in the example are external modules (packages) just like ws. \nEither I use a customized version of module2 (where I pass the {noServer} to ws) or a customized version of ws (with the changes I proposed), which I am doing now.\n. I think you're right. Although I wonder what is the purpose of defaulting the \"upgrade\" to abort when ws determines that it should not handle it. The default socket timeout of 2 min would kick in anyway if the upgrade request is left unhandled.. ",
    "josdotso": "@lpinca Given the history of this topic, would you recommend avoiding multiple websockets on a single server?  Are there any gotchas remaining?. ",
    "jeroenvollenbrock": "Should be resolved in the next Node.js 8 version as well, presumably 8.11.2 :). ",
    "ztnark": "Sorry, haven't had a chance to take a look yet. I'll give it a shot\ntomorrow.\nOn Wed, Apr 11, 2018, 4:38 PM Jeroen Vollenbrock notifications@github.com\nwrote:\n\nShould be resolved in the next Node.js 8 version as well, presumably\n8.11.2 :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/issues/1354#issuecomment-380603957, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AEsiXbmJMBwToHdBOQzqrVgK2vZHd24Sks5tnnfdgaJpZM4TKgtd\n.\n. @lpinca, good news. I can confirm that upgrading to Node.js 9 (11.1) fixes this issue. I can also test on 8.11.2, when released. Thank you.. \n",
    "danielmurray": "Howdy all,\nAs of today, electron is currently running node@8.9.3 in it's main process. So the solution of upgrading the local node version is not a viable option for electron app developers. \nDan\n. ",
    "Turbo87": "FWIW I'm hitting the same issue with Node 10 too, but I would expect that this is a server-side issue, with a server sending a frame with those flags that should actually not be set.. ",
    "rgranger": "Very nice ! Maybe add that the option { port } will automatically start the internal httpServer (unlike the option server and noServer that waits for the use to call .listen(port).\nOr maybe add the functions .listen(port) and .close() to the WebsocketServer ? That would allow the user to close and open the server without having to create a new instance.. ",
    "Cariaga": "i'm tying to move the code to an SocketController.js basically using  module.export instead of the doing it directly with server.js\nbascially https://nodejs-mongo-persistent-myproject.nip.io/SocketController instead of https://nodejs-mongo-persistent-myproject.nip.io. ",
    "Zolmeister": "It is incorrect to assume a single proxy.\nIt's always a list, a proxy doesn't add itself to the list.. I built a project once that relied on correct ip information for security purposes (e.g. blocking AWS traffic).\nThe test suite passed of course, and it even worked perfectly in production for months.\nLater that year, we migrated to Kubernetes, which introduced a second proxy. It took days to trace the problem back to that line of code, due to it's subtlety and it working locally.. I don't blame the example for my mistake, but to ignore its contribution would be folly as well.. ",
    "vdiez": "Hello,\nI've tried against crossbar.io and wamp.rt, both behaving equally. As a test for wamp.rt (easier to reproduce):\n```\nuser@host:~$ mkdir ws_test\nuser@host:~$ cd ws_test/\nuser@host:~/ws_test$ npm install wamp.rt\nuser@host:~/ws_test$ node\n\nlet wamp_router = require(\"wamp.rt\");\nnew wamp_router({port: 8080});\n\n```\nNow try the initial post lines using 'ws://127.0.0.1:8080' as url. With 5.0.0 you will see \"connected\" and with 5.1.[0-1] you get an unreachable error.\nThanks. I'm using 17.5.2. Let me try latest. Correct, using last autobahn version fixes the issue, sorry I assumed I was using it already. Thanks for your help!. ",
    "Apoorva2405": "As per the websocker-server.js code, it should set both header and ws.protocol:\n  if (protocol) {\n    headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n    ws.protocol = protocol;\n  }\n\nNot sure why it is not happening. @lpinca The client implementation I am currently using is different and doesnt support \"on.upgrade\" event\nIs there any other way to verify if header is set? Either on client/server side\nAlso, do we send headers explicitly in response or is it sent along with the message.Currently from ws server I am sending simple string message\nws.send(\"sample\");. @lpinca : Thanks, it worked. @lpinca So, I am using:\nev.reason\nev.code\nBut getting undefined values in it. ",
    "Craigzyc": "I did try to search the closed. What specifically are you searching for?. Yea that one doesn't help much since it provides no way of later referencing.\n1308 is a little more helpful but still not ideal.\nThank you. ",
    "Throne3d": "Oh. Right. Oops, I completely missed the later part of the documentation: https://github.com/websockets/ws/blob/master/doc/ws.md#websocketonerror.\nI apologize \u2013 this issue was in error. (Thank you!). ",
    "maoueh": "With server:\n```\nconst WebSocket = require(\"ws\");\nconst rxjs = require(\"rxjs\");\nconst wss = new WebSocket.Server({ port: 8080 });\nwss.on(\"connection\", function connection(ws) {\n  ws.on(\"message\", function incoming(message) {\n    console.log(\"received: %s\", message);\n  });\nrxjs.Observable.interval(500).map(i => {\n    ws.send(JSON.stringify({ data: \"test\" }));\n  });\n});\n```\nAnd client (in the browser, running on localhost:3000):\n```\nimport * as WebSocket from \"ws\"\nconst ws = new WebSocket(\"ws://localhost:8080\")\nws.on(\"open\", function open() {\n  ws.send(\"something\")\n})\nws.on(\"message\", function incoming(data: Object) {\n  console.log(data)\n})\n```\nThe browser complains with the following errors:\n```\nGET http://localhost:8080/ 426 (Upgrade Required)\n\nlocalhost/:1 Failed to load http://localhost:8080/: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. The response had HTTP status code 426. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\nlocalhost/:1 Uncaught (in promise) TypeError: Failed to fetch\n``` \nNot sure what's wrong, something is fishy for sure.. @lpinca I double-checked and did not find anything. I will continue investigating but I don't see in my current project build where this would happen (not saying it's not the case though).. I'm not sure I fully understand the problem. What kind of shim should I need for ws (and is it this project ws, I guess).\nAlso, why it wouldn't work out of the box? I mean, why webpack would play with the WebSocket API exactly?\nI tried with plain WebSocket API and sockette and it's working from there. So not sure why ws would not work out of the box?\nThanks for your time \ud83d\ude04though! . So then if I get your code snippet right, that would mean using ws library for the client in a browser environment is useless (i.e. that ws adds nothing at all over the browser WebSocket API). Is that correct?. Ok excellent, didn't understood that, I thought ws client was wrapping the WebSocket API when running in a browser automatically and was adding some goodies which is not the case.\nJust to clarify for sake of others:\n\nyou can't use any other WebSocket library in the browser\n\nIt's possible to use a WebSocket library on the browser as long as the said library is wrapping the native WebSocket API provided by the browser.\nThank you for all your explanations, problem solved to me (not sure for the initial author).. ",
    "rahbari": "After some testing I saw the async version of gzip takes up to 10 times more than the sync version according to the content size. \n100KB: sync version takes 5ms and async version 20ms\n2KB: sync version takes 0.3ms and async version 3ms\nAs size increase the overhead becomes more acceptable.\nAs websocket usually is used for small chunk of json data I think regardless of the memory leak it's better to use sync deflate for small data considering under 1ms operations are neglectable.\nI suggest adding another threshold option for sync compression (syncThreshold maybe) with default value of 10KB or more. this way anyone who wants to go totally sync can increase this value.. ",
    "mk-pmb": "Sorry for not having read it properly a minute ago. :+1: for the threshold option.. I'll assume that for each length of input, gzip achives maximum efficiency if and only if all input bytes are the same. In this case, and using values from 0\u2026127, the break-even is at 23 bytes.\nInputs shorter than 23 bytes will result in larger outputs. For these, we shouldn't waste any CPU cycles on gzip and the length comparison.\nCompression becomes efficient starting at 24 bytes of input. For these we should compare lengths. Maybe even use a threshold a little bit higher, assuming that most messages won't be the same 7-bit character repeated. I see how people might want to tweak this threshold based on their message characteristics.\nExample: If I know that most of my messages will contain at least {\"nick\":\"\",\"msg\":\"\"}, I'd want to not spend extra CPU time for inputs up to 42 bytes long.. I think it would be nicer to run the benchmark some few hundered times in the same nodejs process for warmup, only then collect measurements. v8 might be able to optimize functions, once it knows we want to use them a lot.. ",
    "Sawtaytoes": "So if you don't define an HTTP server, ws defaults to creating one internally?. ",
    "Mathsfly": "The purpose is to make the 'close' event to be official that we can use it in both case.\n`// Create internally, listening automatically\nconst wss = new WebSocket.Server({ port: 3333 });\n//does \nwss.on('listening', function () {\n  // ...\n});\n//behavior given\nwss.close(callback)\n// behavior expected\nwss.on('close', () => {})\nwss.close()`. ",
    "izelnakri": "Is there any way to listen to WebSocketServer close currently?. ```js\nwss.on('close', () => console.log('called!')); \nwss.close();\n```\nthis isnt working, would be nice if we clean up the listeners after the close event. . ",
    "fabiosantoscode": "Thanks!. ",
    "thankjava": "Okey~\nBut I think you can provide a similar API, because more details of the interaction you know best, so we do not have to repeat the wheel.\nThanks.. Yes, this is true for module, thank you for your doubts.. ",
    "SuperXFan": "How do we get information from each client?  like   host  port ...    and i also  want to know about every client  name,type  and so on. ",
    "danfuzz": "Not really, because I'd like to be able to log what ws thinks. For example, with your suggested arrangement, I can't tell what status code or headers ws reported back to the client.. I understand your position. From my perspective, though, I don't want to have to hard-code details of ws's implementation into my code; I'd prefer instead it to have a contract for reporting its actions back to its clients.. ",
    "dannyharding10": "Hi @lpinca, I'm working with @Yrish on this. Just to confirm, the problem we found is when the server goes down, our client continually tries to reconnect (every 1000 ms in our case). When the server comes back online, the client connects successfully, and immediately sends a message to the server. This message from the client is never seen in the callback in ws.on('message', callback). It seems that the code above would not be attempting to connect a socket immediately after the server is started.\nWe believe this is some sort of race condition that happens only when the server is starting up. I will try to reproduce without express-ws and respond here, but let me know if you have any other ideas on this!. Got it! Ok I am currently working on reproducing it, I'll try to have that before it's too late where you are \ud83d\udc4d . hi @lpinca, sorry about the delay! I was unable to duplicate this issue using less code (a very simple server using express-ws and a java client).\nI was however able to use wireshark to track down the missing messages, and they are successfully getting through to the server. The server also responds with an ACK for each message sent. The problem I noticed is that it seems the messages from the client are being sent before the message handler is added to the websocket in the server. We send a new connection message from server -> client immediately upon any new connection, before attaching the message handler. In wireshark I see messages from client -> server before I see this new connection message from server -> client.\nThis makes me think that the error may be with the express-ws library, but I thought I'd share my findings as you have more experience with websockets and may have some insights. Let me know if you have any ideas on this, and I will comment here with anything else I find.. Our code looks like this, but in wireshark I see the messages from client->server before I see 'Some Message'. This makes me think that the handshake is completed before this connectionHandler function is run.\n```\nfunction wsConnectionHandler(ws, req) {\n  ws.send('Some Message')\n//prevent websocket closing from crashing the server\n  ws.on('close', () => {})\n//prevent websocket error from crashing the server\n  ws.on('error', (error) => {})\nws.on('message', message => {\n    console.log('received message', message)\n  })\n}\n``.  I don't follow.. Are you saying that some clients will send data in the initial request? I don't think that our client websocket library is doing that, though it may be possible. I'm going to look more intoexpress-wsto see if the error could be there. I may also look into the [express-session-parse example](https://github.com/websockets/ws/tree/72cf8bee2dcdbdfdc523a5117fb0d82bcfb878bc/examples/express-session-parse) to potentially remove the dependency onexpress-ws`. ",
    "anikethsaha": "@lpinca I got your point . But my node console is showing unable to use the native websocket .I dont know why it is showing like the. I used the isomorphic-ws it is showing the error  Cannot read property 'request' of undefined . its from the apollo side. Yeah...it seems this issue is with apollo-link only and this require('ws').ws is typo error actually. ",
    "symdeb": "Thanks, that worked.. ",
    "Ban44n": "I am using websockets as a network protocol in an untrusted peer-to-peer network. Each peer in this network has a server and client role. Because peers do not trust other peers in this network, there must be a DoS protection on the websocket client interface.\nI am not sure if these changes are of any added value for the project. It may help people that use websockets in an untrusted environment however.. I have included the requested testcase for option.maxPayload. Furthermore, perMessageDeflate in client mode now also works with options.maxPayload.. I did not find a section on maxPayload sizes in the ietf for v13:\nhttps://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-13\nI guess we do not have to bump the protocolVersion for this change.. ",
    "Cinux-Chosan": "@lpinca \nThanks for answering me. \nYes, I had tried the way you said, but I know that no instance of MyWS in my code will process onopen manually,  I just want to define onopen once and share between all instances;\nIt seems that with ES6's class syntax I can't inherit onopen property, also onerror\u3001onmessage and onclose \n```ts\n/// \nimport WebSocket from 'ws';\nexport default class WS extends WebSocket {\n    private msgQueue: any [] = [];\n    constructor(url, opt?) {\n        super(url, opt);\n        this.onopen = this._onopen;\n        this.onmessage = this._onmessage;\n        this.onerror = this._onerror;\n        this.onclose = this._onclose;\n    }\n    _onopen() {\n        this.flushMsgQueue();\n    }\n   ...\n```\nI don't know wether extending onopen is good or not,  but I kown it does not work. \nShould it be mentioned in the document?. @lpinca  Ok, thanks a lot!   (*\uffe3\ufe36\uffe3) . ",
    "geverl": "Of course, the purpose is to have the WebSocket connection open all the time. If I understand you correctly I would have to create a new WebSocket connection after every POST request? That defeats the whole efficiency potential. So my conclusion is that I'll have to do authentication and anything else that modifies the session using the WebSocket connection and avoid HTTP POST.. Yes, I understand. Thanks for the clarification and sorry for posting this as an issue, which it is not.. ",
    "tannineo": "THX @lpinca.\nSo this means to modify web-sockets-controller.ts which is in @nestjs/websockets?\n. Oh sorry I made a mistake by publishing this issue here, it should be in another project.\nSorry for the bothering. @lpinca. ",
    "ziglee": "Thanks @lpinca . I guess the client messed up with the protocol.. ",
    "jorenvandeweyer": "Not going to discuss if it's a bug or not, but ws.ping() should never be called on any closing socket. So it would be an improvement if it would be checked in the library instead of in your own code.. ",
    "n0807701j2d2": "const WebSocket = require('ws');\nconst ws = new WebSocket('ws://www.host.com/path', {\nperMessageDeflate: false\n//cookie: cookieJar\n});\nClarification:\nWhere in this code can I put an option for sending cookies as well?. ",
    "Fxlr8": "this should be documented. ",
    "pabx06": "having the option to reuse request's cookieJar would be a nice feature (path,domains,expire,...) ? it would ease the pain of parsing and handling of cookie to build a raw low level header . ",
    "jabberwock31415": "Could you please reopen this bug\nThis solution did not work--I get the same crash.. Thank you!  I had a typo in my implementation of your solution.  You are correct--this works fine.  Thank you for taking the time to help me.. ",
    "jpambrun": "I didn't realize my commit would get linked here. It says 'fix', but it's really just a poor man's workaround. . Yep, that did it. Thanks for the unbelievably fast response. . ",
    "Merethiel": "Oh okay, so I can simply do,\nwss.ClientUniqueId = UniqueId upon joining, then check that later through the message callback. Is there a way though to remove the message callback from the main connection handler? Does it have to be tied in that same handler?. Thank you! That helped a lot! . ",
    "ddtraceweb": "Yes i trie this, thank for the link.. ",
    "thinkive": "This is my code problem here, the problem is closed. ok ,This problem does not belong to bug, and I will close it. ",
    "artus9033": "Alright, thanks, I found the problem. I was listening for the 'error' event, but I was doing this in a wrapper, which also needed to emit errors, but only non-fatal ones. The line which was causing the crash was this.emit(\"error\", ...) in the wrapper. Thanks again and sorry for the problem. ",
    "vjpr": "Duplicate https://github.com/websockets/ws/issues/659. ",
    "anderspitman": "I realize that this question may apply more to JavaScript's event model than it does to ws specifically. The even more basic question is can an event handler be interrupted mid-execution?. The more I thought about it and googled the more convinced I became that this must be the case. Pretty obvious honestly, but thank you for confirming anyway!. ",
    "recitativo": "In my use case, http request is required in subprotocol selection. In the other motivation, libraries that only support asynchronous processing are increasing recently, I think it is better to promote overall Promise support. Thanks.. Thank you for your suggestion. It's nice idea to override some functions. I have plan to handle each protocol in its plugin, including message processing closely related with authentication. Your suggestion seems to satisfy my requirements. I will try it after summer vacation. Thanks again!. ",
    "MLiranG": "@lpinca \n```js\nconst Discord = require('discord.js')\nconst client = new Discord.Client()\nclient.on('ready', () => {\nconsole.log('working')\n})\nclient.login(fill token)\n```. @lpinca \nThey say that they don't even use self signed certificate. ",
    "goriunov": "Thanks :). ",
    "hansmiller75a": "That's weird, using your code, I get the same error.\nopen mydomain.com:8080:12:11\nThe connection to ws://mydomain.com:8080/ was interrupted while the page was loading.  mydomain.com:8080:9:17\nerror \nerror { target: WebSocket, isTrusted: true, currentTarget: WebSocket, eventPhase: 2, bubbles: false, cancelable: false, defaultPrevented: false, composed: false, timeStamp: 200482, cancelBubble: false, \u2026 }\nmydomain.com:8080:16:11\nclose 1006\nThis happened after around 5 minutes.. @lpinca I've made some tests using the code, and it appears that with pinging the socket every 30 seconds, I see no more disconnects (regardless if I use the test case or my actual application).\nWould that suggest that the error is in Firefox? The reason I haven't experienced the disconnects with socket.io might be because they implicitly send those pings.. That's what I thought too, I originally had the nodejs app behind an nginx proxy. But even running the nodejs server directly on 443, I still get those disconnects.\nAnd as said, I don't experience them in Chromium, with or without the nginx proxy.... ",
    "intpp": "Reproduced with https://github.com/websockets/wscat, Chrome, Safari. ",
    "alexanderkhivrych": "Reproduced also with https://github.com/websockets/wscat Chrome. ",
    "cigzigwon": "I've observed this behavior before and I'm pretty sure Firefox is part of this issue because Chrome seems to work. It is possible that your back end needs to be re-tooled. I think if you are using the express server with socket.io or websocket it seems to handle this. In Elixirlang you may be missing some code that adhere's to websocket spec. I suggest avoiding WS back ends like PHP but have not worked with them. I see above that some languages may not handle this very well. Try Erlang or Elixir and you can gain a better understanding of this world.. @lpinca I second that this is not an issue with socket.io back ends. It is the handling of ping requests in Mozilla. I suspect that alternative back end solution libs are outdated. You need to rev up your backends to something new. Try Elixirlang.\nHere is a bare minimum spec for a handler. This is an Elixirlang case function to send messages back through a looping mechanism after a connected client sends a message. FYI. An underscore in Elixir is a match all. Elixir uses pattern matching to run a case function.\ncase conn |> Socket.Web.recv! do\n  {:text, text} ->\n    # handle text (one message)\n  {:fragmented, :text, text} ->\n    # handle frags (large docs)\n  {:fragmented, :continuation, text} ->\n    # continue frags (large docs)\n  {:fragmented, :end, text} ->\n    # end frags (large docs)\n  {:ping, \"PING\"} ->\n    # send a pong reply\n  {:ping, _ } ->\n    # handle edge cases (Is this the culprit w/Mozilla????) <--- BAD MOZILLA\n  {:close, :abnormal, nil} ->\n    # abnormal closes (server case)\n  {:close, :going_away, \"\"} ->\n    # going away (server case)\n  :close ->\n    # any close event\nend.  @intpp and @alexanderkhivrych Does your server implement PING handling and reply with PONG?\nUpon receipt of a Ping frame, an endpoint MUST send a Pong frame in response, unless it already received a Close frame.\nhttps://tools.ietf.org/html/rfc6455#section-5.5.2. ",
    "dcflow": "Hey @lpinca thank you for your help.\nIt turned out that the problem was I was setting a custom port WebSocket.Server({ server , port: 3005}). \nIt's strange cause with http custom ports work, anyway thanks again :smile:.. ",
    "tedpenk": "It's my mistake\uff0cso I close this issue.. ",
    "Kio-td": "\nTry to just use https://nodejs.org/api/dns.html#dns_dns_resolve_hostname_rrtype_callback and see if it works. I doubt it's a bug in the lib.\n\nI'm sorry, I'm a little confused on what you're asking me to do here.\nI tried to use Firefox's websocket connector, if this helps - \nvar s = new WebSocket(\"wss://direct.loi.nayami.party:2096/anon\");. Well again, IPinca, as I said before, I was able to connect to a minihttp server I setup in place of the original host and port. Besides an exception for an SSC, it let me see the test content I put on there.. Sorry, thats not it either. I have a valid SSL certificate for my domain, I just had to scratch up something quickly because I was too lazy to actually attempt linking my cert.. I can connect to my server with the IP.\nI can connect to the domain and port using a test http server.\nI cannot connect to the server through the domain. . This is all that I know.\nWhen I use WS, I'm unable to connect using the domain, but if I use a regular http server, I can. \nWhen I use WS, I'm able to connect using the IP.. \nError: read ECONNRESET (on wss://direct.loi.nayami.party:2096/anon)\nIt's essential I use the browser... I'm able to connect on the Loopback, but not from anywhere else anymore. This is an outrage. -.-\nJust letting you all know, my IP stopped working now. I haven't touched anything on my firewall (And have no software firewall even - just GCP is set to allow all TCP and UDP traffic for 2096)\nalso, from netstat -peanut\ntcp6 0 0 :::2096 :::* LISTEN 854954831 156626 1620/node. I'm so confused. What're you using?. Mind lending me your code?. \n. I just get resets now- nothing else. My friend reports this aswell- getting no response except for an Connection Reset, and they're over the pacific.. I tried flushing my DNS Cache, Tried changing my dns provider, and tried changing ports (to 2053) - but still I get a connection reset. . That was really odd and uncomfortable. After a travel home, one of the domains work. ^^. ",
    "rptl": "Thanks for your prompt reply. \nDo you see any solution using 'websockets/ws' to handle websocket connection based in the below scenario?\nExample of post data\n```\nPOST /triggerurl HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n{\n \"data1\": false,\n \"data2: true\n}\nWhich responds and starts to stream data:\nHTTP/1.1 200 OK\nContent-Type: application/raw-stream\n<>\n```. Is there a way to use handleupgrade method in WebSocket Client?  Similar to server. This way I could post data and then handle upgrade by myself. Something like:\n``\nconst request = https.get({\n  hostname: 'websockets',\n  port: 9443,\n  path: '/triggerurl',\n  headers: {\n    upgrade: 'websocketserver',\n    connection: 'Upgrade',\n    'Sec-WebSocket-Key': 'rfeGe1izPRq2JyonWunAQw==',\n    'Sec-WebSocket-Version': 13,\n    authorization:Bearer ${token}`\n  }\n})\nrequest.on('upgrade', (req, socket, upgradeHead) => {\n  // I would handleUpgrade on client here\n})\n```. Thanks. Just for the records, I see ws is initiated with GET method only. Some REST API doesn't accept GET to instantiate websockets. (ie. docker exec method). Oh oh. The issue is with Docker API then. That explain why 'attach' method work and both are pretty much the same. Anyway, thanks for all your help. I really appreciated it. . ",
    "techsin": "it wasn't until someone at stackoverflow pointed out that difference between my ff request and chrome is that chrome was adding header Sec-Websocket-Extensions: permessage-deflate;\nbtw im using ws lib on server only. \n. ill try to create a repo to reproduce problem. perMessageDeflate with true, works for me too.\nwhat doesn't work is if i define options as listed in docs.\n// perMessageDeflate: {\n    //   zlibDeflateOptions: { // See zlib defaults.\n    //     chunkSize: 1024,\n    //     memLevel: 7,\n    //     level: 3,\n    //   },\n    //   zlibInflateOptions: {\n    //     chunkSize: 10 * 1024\n    //   },\n    //   // Other options settable:\n    //   clientNoContextTakeover: true, // Defaults to negotiated value.\n    //   serverNoContextTakeover: true, // Defaults to negotiated value.\n    //   clientMaxWindowBits: 10,       // Defaults to negotiated value.\n    //   serverMaxWindowBits: 10,       // Defaults to negotiated value.\n    //   // Below options specified as default values.\n    //   concurrencyLimit: 10,          // Limits zlib concurrency for perf.\n    //   threshold: 1024,               // Size (in bytes) below which messages\n    //   // should not be compressed.\n    // }. I agree. updated it. i agree removing is better. . ",
    "ShrabaneeM": "Hi @lpinca \nI think my question is not clear. Let me try to explain my requirement.\nconst WebSocket = require('ws');\nlet wss = new WebSocket.Server({\n            clientTracking: true,\n            port: 8000\n        });\nwss.on('connection', ws => {\nif(ws._socket.remoteAddress == \"127.0.0.1\"){ // Some code.. }\nelse{//Code for connection from different url..}\n})\nconst wss1 = new WebSocket('ws://www.host.com/path');\nconst wss3 = new WebSocket('ws://www.host.com/path');\nNow for connection from wss1 and wss3 both satisfies the if condition inside on('connection').\nIs there any way I can define some different ip for ws._socket.remoteAddress while connecting to websocket from clients for test environment?. I am getting the error mentioned in the on error part. EADDRNOTAVAIL.  @lpinca \n. Thanks @lpinca \nI did the changes and now able to connect ws for different ip addresses.\nFor anyone using macOS and getting error EADDRNOTAVAIL can follow the link:\nhttps://superuser.com/a/458877/597839. ",
    "rivertam": "Actually I apologize as I think I got confused at some point. Maybe the internal connection has destroy but not socket?. ",
    "wjkang": "thank you,it works. ",
    "Kamikadze4GAME": "But what if connection immediate throw error?. But if wrong url of ws (typo)? wss://example.com/socket - good, wss://example.com/socke - bad\n. ",
    "opit7": "Yes it does. Thank you for your reply.. ",
    "bryanboyko": "@lpinca thanks!\nFix details:\nI was able to fix by opening package-lock.json in my project directory, searching for the react-devtools-core entry, and then changing its ws depedency to 3.3.1.\nThen running npm update react-devtools-core. ",
    "frpz": "thanks @bryanboyko for your idea , I was able to change the version using yarn by adding \n\"resolutions\": {\n    \"react-native/**/ws\": \"3.3.3\"\n  },\nin package.json, then yarn install\nIt seems to be working.. ",
    "Nolence": "Right, the 'message' event listener on the server calls download() and from there, I immediately get a message from the onclose listener. I have been looking into what might be the issue to narrow it down even further and I found that the same thing even happens if I use another library such as Socket.IO.\nIf I call simpler child process like ls the connection is not closed. It's only when I try downloading (I have tried three different methods and they all break the connection). My understanding was that spawning child processes didn't block the event loop, but that's what it looks like is happening???\nThe weird 1001 status page refreshing code is even more confusing to me. Sheesh, that was a fun trip down the rabbit hole. I Found the problem. I was running the live server extension from Visual Studio Code and I guess every time I was spawning a child process, it was restarting live-server... hence the 1001 refresh code.\nIt probably would've taken me way way longer to find this bug if you hadn't mentioned the refresh thing so thank you!!. ",
    "ayZagen": "@lpinca We rely on ws and want to upgrade our servers to http2. It would be great to have http2 support on ws.\nThanks. ",
    "FallingSnow": "I'm using node's http2 framework with the allowHTTP1: true option. Then setting a ws server to listen on the http2 server just works.\nAlthough I would like to see ws support for HTTP2 so it feels less hacky.. ",
    "flp": "I was able to bypass the browser field with my bundler, thanks for the suggestion!\n\nI would use the implementation that ships with the browser window though.\n\nWhy do you say that? I want to use the ws client because it exposes the http headers in the upgrade request and response. The browser WebSocket client mostly obscures the websocket handshake.. Ok, thanks for explaining! Configuring the bundler to bypass the browser field works, so I'm closing this issue. @JuniorNunes7 I was using webpack as a bundler, and I added an alias to webpack's resolve property:\nresolve: {\n  alias: {\n    ws: './node_modules/ws/index.js' \n  }\n}\nThis makes it so that when resolving ws, webpack straightaway gets index.js and ignores the package.json in ws, thereby bypassing the browser field. I don't really recommend this approach as it's hacky. ",
    "JuniorNunes7": "@flp How did you bypass the browser field? I have the same problem.. ",
    "itsjohncs": "I've worked around this where I essentially do server.close(() => server.emit(\"close\")), and it's only come up as a problem in tests, but I figured this might be something worth fixing.. Ah interesting, just bad luck with my timing. Thanks.. ",
    "world70104": "I have extract ws-master.zip in mac\nNext, i went to ws-master folder.\nAfter done it, i have executed \"npm install --save ws\"\nBecause up error, i modified by \"name\": \"webssocket\" in package.json\nright?\nI want to know your skype\nRegards\n. I am node beginer.\nI want to know ws server execute detail\nRegards.\n. Ok\nThanks\n. ",
    "Evertras": "~For the second point, my testing is showing the ready state as \"closed\".  Is \"closing\" a better state here?~ I see what you mean now.  Fixing.. I've tested locally with a modified version of the script in the issue and added a unit test to make sure that the state is indeed CLOSING in the callbacks when they're in the queue.  I also changed the once to a prepend version to make it explicit that this needs to run first.  I'm not sure how to reproduce the hypothetical you listed, is there an example you could provide?. I see.  The deflate has already started by the time the close event from the socket is received, so by the time we're even aware that the socket has closed then zlib has already started to do its work.  The closest I could get to an interruption is in this callback and at that point all the expensive work is done.\nI'm not sure if it's even possible to completely remove this scenario.  Once it's passed to zlib, some compression may take place while the socket is closing since it's all batched up in the flush call.  I'm also not sure if it's worth trying to chase.. Agreed there are ways to improve it, but yeah, it'll be complicated.  One step at a time I think.  No rush on approval, thanks for all the input!. Thanks for the merge!  I've been in zombie mode for the past week due to a nasty illness, sorry for not responding earlier.. Sounds good, will switch them over.. Ah, thought it was required.  Adding a check.. Good point.  Would it be better to have a simple generic message here?  The original intent was to provide consistency with what the user would get as an error regardless of whether their send attempt was queued or not, but since it was already inconsistent a generic message wouldn't break anything here.. I've been trying to avoid that because I don't like how it hard links Sender to WebSocket.  A Sender doesn't need a WebSocket to function.. Turns out we do actually need it.  I was testing a different ready state in my initial pass.. Let me poke it again, I may end up blaming jet lag. :D. Yep, going to blame jet lag.  Sorry for the confusion.  We do not need prepend, I'll switch it over to the comment instead.  The issue was I was switching prepend to once in the Sender but not in the MockSocket for the test.. ",
    "manix": "Or that, shame we didn't come up with this straight away but to be fair we were quite exhausted at the end of the day. Thank you!. ",
    "aeisenberg": "Thanks for the pointer. I'll comment there.. ",
    "xinthose": "OK.  Thank you.. ",
    "Apollon77": "PS: When reading https://stackoverflow.com/questions/44738065/uncaught-typeerror-url-is-not-a-constructor-using-whatwg-url-object-support-for it seems that this change broke the node 6 compatibility. Could you please fix it. Thank you. I can tell this to the user, BUT: This should not solve this issue, or ?! would be very strange. I try to have it tested . PS: in general: if the dep is really >=6.13.0 then you should reflect that in the package.json ... or ?! Else it installs successfully and updates the version also for users with a lower version ... like happened here :-(\nEspecially not in a micro version release :-(. ;-) in fact your decision as the lib owner. ;-)\nNow that I know it I can also pin my library to 6.1.0 for now or increase my minimum node version too. I need to think about it ... depending on how you decide for your lib. \nI\u2018m ok with any decision you do. \nPS: great \u201esemantic versioning in real life topic\u201c ... is such a change \u201ebreaking\u201c enough to increase major or not and minor is enough ;-). Thank you very much!. Great, thank you very much!. ",
    "mvduin": "For the same reason maxPayload is useful in the first place: to help protect the server. Having a 100MB maxPayload means an attacker can easily consume that amount of the server's memory per connection established. Having a small maxPayload means an attacker would instead have to resort to flooding messages or connections, both of which can be dealt with by other means.. Because it may be difficult to evaluate how large it needs to be. We trust our clients however, and they have to authenticate themselves before they are allowed to send any \"real\" messages, so all that matters is that connections are prevented from sending large payloads until this authentication exchange has completed.. Using websocket messages for the authentication exchange is a lot more flexible, and it's too late to change anyway without breaking compatibility with existing clients.\nIs there any reason to disallow modification of maxPayload after socket creation? It seems like a completely unnecessary limitation to me.. But isn't that true for maxPayload in general already?. I don't see how it's a good thing to hide an attribute that exists, has a functional effect, and whose initialization is already part of the API.\nAlso, it is mainly important for connections of a websocket server, which isn't covered by WHATWG at all anyway.. > Nits\nWill fix. I didn't like the onopen either, but I just copy-pasted it from the existing testcode below the one I inserted. Whenever I edit code that's not mine I default to using whatever style the code in the immediate surroundings uses, but I see now it just happened to be one of the small minority of test cases that still use onopen.\n\nPlease also add documentation.\n\nWill fix!\n\nPrivate attributes/methods exist in many languages for a reason.\n\nI'm not disputing that, but maxPayload is already user-provided, and I don't see any good reason to keep it private after initialization.. My previous version didn't allow maxPayload to be get/set on client sockets while connecting (i.e. before _receiver is set) because the setting was being held in a closure at that time. While I don't care about the ability to modify maxPayload at such time, this exception just seemed too weird and unsightly to leave it be, especially as I tried to document it.\nI've fixed this by keeping the setting on the WebSocket itself and syncing it to _receiver (and deflate extension, if applicable), similar to how binaryType is handled.. ",
    "gonapps": "Yes you are right, It seems like somehow I misread the 120000 as a 12 minutes.\nBut I think still 2 minutes timeout is too long and there will be some people who agree with it.\nAnd also I knew that it is possible to set timeout using external server object, but I think most of people will be satisfied with this default callback method: \n```javascript\nthis._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n    res.writeHead(426, {\n      'Content-Length': body.length,\n      'Content-Type': 'text/plain'\n    });\n    res.end(body);\n\n});\n```\nSo instead of repeatedly writing 'Upgrade required' callback, I thought supporting timeout option is more convenient.\nI also believe socketTimeout option is needed as frequently as port option.. Okay thanks. ",
    "tandrewnichols": "I should note that I installed this on Mac and committed it. Doesn't seem like that should matter, but I know there are system targeted binaries sometimes.. Follow up: @johndorn tried reproducing this on Linux, but everything was lowercase. So . . . it seems to be a platform issue. But I don't really understand why.. npm cache clean fixed this.\n...and I just saw your response. So no doubt this was cached on my system prior to that commit. Interesting issue, but not really anything you could do about it on your end other than maybe add a note in the readme for people that happens to, but I don't know how useful that would be. Thanks.. ",
    "piyushkantm": "@lpinca I am not sure if i need to cover this change with tests too. Please suggest. Ok, i get it. Thanks for your prompt reply.. Actually it's possible in typescript and works well with other DefinatelyTyped typings also. It just doesn't work with this library..\nuser.middleware.ts\n```\nimport { NextFunction, Request, Response } from \"express\";\nexport const userMiddleware = (req: Request, res: Response, next: NextFunction) => {\n    req.userId = 1; // NO error here after using below declaration merging\nnext();\n\n};\n```\nexpress-augmented.d.ts\n```\nimport express from \"express\";\ndeclare module \"express\" {\n    export interface Request {\n        userId: number;\n    }\n}\n```\nSee last two sections: https://www.typescriptlang.org/docs/handbook/declaration-merging.html\nBut when i try to do the same with this library, it shows errors. I am not 100% sure but i think it's because of all the interfaces inside namespace using the exported class(exported outside namespace)\nI am sorry i don't know how DefinatelyTyped typings work exactly but Is there any specific reason why class WebSocket is declared outside namespace WebSocket ?. ",
    "Symous": "@lpinca  , Thanks my friend, but I really find out that readyState may not be 1(OPEN) sometimes, otherwise I would not open this issue. I have to add an if condition to ensure the readyState is 1 to continue my code.\njs\nnew WebSocket.Server({ port: 1112 }).on('connected', (ws, req) => {\n   ws.on('message', data => {\n        if (ws.readyState === 1){\n          //continue\n        }else{\n         //something unexpected....\n        }\n    });\n}. > you are reading the readyState when a message is received. In that case the readyState can be indeed no longer OPEN but that is expected.\n@lpinca Why the readyState can be indeed no longer OPEN?. @lpinca But I never use permessage-deflate... :(. ",
    "lefebvresam": "import { Container } from \"inversify\";\nimport { InversifyExpressServer } from \"inversify-express-utils\";\nimport expressWs from \"express-ws\";\n.       if (serverinst.getWss().clients) {\n                     ^\nTypeError: serverinst.getWss is not a function. ",
    "AhmetGurbuzz": "Hi @dkrockcom, Did you solve your problem?. ",
    "circuit-monkey": "I tried that and got \n\nConnection to 192.168.1.7 port 8080 [tcp/http-alt] succeeded!. the output that I am getting now is:\n{ Error: connect ECONNREFUSED 192.168.1.7:8080\n    at Object._errnoException (util.js:992:11)\n    at _exceptionWithHostPort (util.js:1014:20)\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1186:14)\n  code: 'ECONNREFUSED',\n  errno: 'ECONNREFUSED',\n  syscall: 'connect',\n  address: '192.168.1.7',\n  port: 8080 }\n. Sorry for the false alarm and thanks a lot for your help. \n\nAny clue as to how it could be remedied?. I realized that I should try doing: \nconst WebSocket = require('ws')\nconst wss = new WebSocket.Server({ port: 8080 })\nbefore the code that you gave me. \nIt is no longer creating the same error.\nDoes it still look like it is a problem with node/network environment?. ",
    "mwm-twx": "Excellent.  Thanks for the quick response.. ",
    "bradennapier": "Yep, just ran into this one :-D . Good to see already resolved!  Updating :-). ",
    "simplo": "Sorry, I will attach it.\nbroadcast.zip\n. I knew something was wrong with the \"length\", but it doesn't matter.\nMy clients are just receiving their own messages, and I don't know why. \nI'm using two different clients: one running in TouchDesigner and one in Unity...\n\nYour example works correctly.\nRead more in the documentation:\nhttps://github.com/websockets/ws#server-broadcast\nAbout the number of clients:\njs\nconsole.log('length = ' + wss.clients.length);\nAlways will write: length = undefined .\nThe wss object does not have a length property, because it is a Set object(it would be nice to mention this in the documentation).\n\n. It seems the problem is on clients. I'll try to understan better. Thank you.. ",
    "stas-ut21": "Your example works correctly.\nRead more in the documentation:\nhttps://github.com/websockets/ws#server-broadcast\nAbout the number of clients:\njs\nconsole.log('length = ' + wss.clients.length);\nAlways will write: length = undefined .\nThe wss object does not have a length property, because it is a Set object(it would be nice to mention this in the documentation).. Sorry, thanks, I didn't see that.. > I knew something was wrong with the \"length\", but it doesn't matter.\n\nMy clients are just receiving their own messages, and I don't know why.\nI'm using two different clients: one running in TouchDesigner and one in Unity...\n\nIf possible, write that you will give it: \n```js\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 3333 });\nwss.broadcast = function broadcast(data) {\n    try {\n        console.log('length = ' + wss.clients.size);\n        console.log(wss.clients);\n        wss.clients.forEach(function each(client) {\n            console.log('readyState = ' + client.readyState);\n            if (client.readyState === WebSocket.OPEN) {\n                client.send(data);\n            }\n        });\n    } catch (e) {\n        console.log(e);\n    }\n};\nwss.on('connection', function connection(ws) {\n    ws.on('message', function incoming(data) {\n        console.log('received: %s', data);\n        wss.broadcast(data);\n    });\n});\n``\nThis is your code, exceptconsole.log(wss.clients);`. ",
    "rgawenda": "\nI knew something was wrong with the \"length\", but it doesn't matter.\n\nAnyway, just use wss.clients.size\nChange\nwss.clients.forEach(function each(client) {\n\nto\nfor (const client of wss.clients) {\n\n\nMy clients are just receiving their own messages, and I don't know why.\n\nYour server's code has a readyState console logging, how many times is that fired per message, while your two clients are connected?\nInsert another console.log before calling send(). It's in the FAQ section of the README. ",
    "fl0w": "You're confusing server and client examples I think.. ",
    "ch3njust1n": "The first example is from the README. The on.('message') is never hit when I use that setup. Not a big deal I guess. Mostly I'm trying to make my code more modular. Is there a way to use ws inside an express route so that when the route is called I can share the data with the websocket?. ",
    "totovr": "Thanks @lpinca, I add this code in the server as you commented above:\njs\nvar sensorData; // Data acquired by the sensor\nconst server = http.createServer(function (req, res) {\n   res.writeHead(200, { 'Content-Type': 'text/plain' });\n   // res.write('Hello World!');\n   res.write(sensorData.toString());\n   res.end();\n});\nBut is just showing the string as below:\n\nBut is not showing nothing of the client.js\nif I run it from the index.html the output is correct:\n\n. Now the request is working with:\njs\nconst server = http.createServer(function (req, res) {\n   if (req.url === '/' || req.url === '/index.html') {\n      res.writeHead(200, { 'Content-Type': 'text/html' });\n      res.write('<title>Serial connection</title>');\n      res.write('<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.3/p5.js\"></script>');\n      res.write('<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.3/addons/p5.dom.js\"></script>');\n      res.write('<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.3/addons/p5.sound.js\"></script>');\n      res.write('<script type=\"text/javascript\" src=\"client.js\"></script>');\n      res.end(/* index.html contents */);\n   } else if (req.url === '/client.js') {\n      res.writeHead(200, { 'Content-Type': 'application/javascript; charset=utf-8' });\n      res.write('var text;     var socket = new WebSocket(\"ws://localhost:8081\"); var value;');\n      res.write('function setup() { createCanvas(1200, 100); socket.onopen = openSocket; socket.onmessage = showData; text = createDiv(\"Sensor reading: \"); text.position(40, 50);}');\n      res.write('function draw() { if (value == 0) { background(120); } else if (value == 1023) { background(220); }}');\n      res.write('function openSocket() { text.html(\"Socket open\"); socket.send(\"Hello server\"); }');\n      res.write('function showData(result) { value = map(result.data, 0, 4095, 0, 1023); text.html(\"Sensor reading: \" + value); var xPos = int(value); if (xPos != 0) { text.position(xPos, 50); } else if (xPos == 0) { text.position(xPos + 40, 50); } }');\n      res.end(/* client.js contents */);\n   }\n});\nIf I connect with another pc is not openning the connection due too is a http protocol, is it possible to add https protocol? I saw the example code:\n```js\nconst fs = require('fs');\nconst https = require('https');\nconst server = new https.createServer({\n  cert: fs.readFileSync('/path/to/cert.pem'),\n  key: fs.readFileSync('/path/to/key.pem')\n});\n```\n\nNote I already generate the certificates. I modified in this way:\n\n```js\nconst fs = require(\"fs\"),\n   https = require(\"https\");\nvar handler = function (req, res) {\n   if (req.url === '/' || req.url === '/index.html') {\n      res.writeHead(200, { 'Content-Type': 'text/html' });\n      res.write('Serial connection');\n      res.write('');\n      res.write('');\n      res.write('');\n      res.write('');\n      res.end(/ index.html contents /);\n   } else if (req.url === '/client.js') {\n      res.writeHead(200, { 'Content-Type': 'application/javascript; charset=utf-8' });\n      res.write('var text;     var socket = new WebSocket(\"ws://localhost:8081\"); var value;');\n      res.write('function setup() { createCanvas(1200, 100); socket.onopen = openSocket; socket.onmessage = showData; text = createDiv(\"Sensor reading: \"); text.position(40, 50);}');\n      res.write('function draw() { if (value == 0) { background(120); } else if (value == 1023) { background(220); }}');\n      res.write('function openSocket() { text.html(\"Socket open\"); socket.send(\"Hello server\"); }');\n      res.write('function showData(result) { value = map(result.data, 0, 4095, 0, 1023); text.html(\"Sensor reading: \" + value); var xPos = int(value); if (xPos != 0) { text.position(xPos, 50); } else if (xPos == 0) { text.position(xPos + 40, 50); } }');\n      res.end(/ client.js contents /);\n   }\n};\nconst server = new https.createServer({\n   cert: fs.readFileSync('cert.pem'),\n   key: fs.readFileSync('key.pem')\n});\nserver.addListener(\"request\", handler);\n```\nBut is not responding:\n\n. ",
    "edreal": "Okay! Thank you :). ",
    "mokcrimea": "Thank you for the answer. \nI've tried to run the suggested code before, to understand how it works under hood (I looked thought WS source code)\nSo in given example the connection was established and \"It works.\" appended on the screen.\nIn WS \"open\" event I'm trying to send auth credential to the server. The credentials depend on access and secret key, and some signature in HmacSHA256 format, but I think it doesn't matter in this case.\nSo in previous versions of WS after credentials sent - I'm got success auth message from server, and in 5.1.0 and above I got something like \"Verification failure\". \nI should better show you code example to reproduce \u2013 https://github.com/mokcrimea/ws-example-5-1.0\nAccess and secret key, I'll send you by email. Do not want bother you with registration process details.. ",
    "fletling": "lol, that's a great piece of information that explains a lot. Thanks @lpinca \nThen I really wonder how it ended up in our yarn.lock file but that's likely some other issue unrelated to here. . ",
    "yqsailor": "Oh, I see, thanks very much!. ",
    "javqui": "\nBy the way I can't reproduce.\n\nhttps://github.com/websockets/ws/blob/6.1.4/lib/websocket-server.js#L264\nhttps://github.com/websockets/ws/blob/6.1.4/lib/websocket-server.js#L283\n\n```\n$ cat index.js \nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n$ node index.js\n\n$ nc localhost 8080\nGET / HTTP/1.1\nHost: localhost\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: rfeGe1izPRq2JyonWunAQw==\nSec-WebSocket-Version: 13\nHTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: prdBmM6el7NzNgJBcdmWum5mTZc=\n^C\n```\n\nVery interesting test this morning.\nI have a simple node app to forward websocket messages. If I run the app locally (node sever.js), I got the right message (\"Sec-WebSocket-Accept\"). when I push the app to the Heroku server, I got the the incorrect answer (\"Sec-Websocket-Accept\").\nI modified several debug texts to be sure that I'm using the same server.js version on both cases (locally and on Heroku). \nAdditionally, was checking this morning the package.json and it shows \"node\": 10.15.1 and \"ws\": 6.1.4\nSomething different is doing the Heroku guys at some point.\n. Could be. Thanks for the quick response.\nJust want to report one final test to validate that Heroku is not changing the version of ws.\nFor testing, I added at the beginning of the \"server.js\" file the following lines\nvar pjson = require('./node_modules/ws/package.json');\nconsole.log(pjson._id);\nin both cases (local and from heroku) it reports \"ws@6.1.4\" so looks like the issue is with some proxy at the heroku (at least, I don't have any knowledge of a proxy close to my network).\nThanks again for all your help.. ",
    "lygstate": "I am wrong, sorry. ",
    "jfirebaugh": "\nThe spec is not clear in this regard and it is confirmed by the fact that different implementations have different behaviors.\n\nI disagree; I think the spec is clear that send on a closed socket should not throw, and all browser implementations agree on that. The fact that Chrome prints a diagnostic error message does not constitute \"different behavior\" with regards to throwing an exception -- Chrome does not throw an exception, nor do Firefox or Safari.\nIn addition to the spec references I've quoted above, consider the description of socket.bufferedAmount:\n\nReturns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.\nIf the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)\n\nIf send on a closed socket was intended to throw, the latter paragraph would make no sense.. Ah, I think I may have misunderstood the intent of this module -- I had thought that its WebSocket class was intended to be an implementation of the WHATWG spec specifically. It sounds like you're saying that it's a more general \"JS WebSocket\" implementation based on the RFC, and congruence with the browser API is coincidental. If that's the case, I apologize for the noise.\nMy use case is focused on testing the browser/client side of a WebSocket client/server application. I was using ws so that I could actually still run the client tests in node, but it sounds like I should instead be using the WebSocket implementation from jsdom, which wraps ws with a WHATWG-spec-compliant API.. Thanks for the details! Your proposal sounds good to me.. ",
    "TrevorSundberg": "I'm wondering is there any equivalent of a readystatechange or closing event? I'm fine with the exception as is because I think it's important to disconnect any code paths that could be calling send(), however even if you properly handle close you can still get an exception fired on trying to send when the state is CLOSING. Is the only way to handle this to check for CLOSING explicitly before calling send()?. ",
    "rafasimionato": "Would you suggest any where I could put some logs to check input and\noutput, if values are as  expected.\nEm ter, 26 de fev de 2019 04:06, Luigi Pinca notifications@github.com\nescreveu:\n\nI see nothing wrong in your example but I have no idea why the client\nsends 3 TCP Dup ACK. I think that it is sent when the client detects that\nsome packet has been lost?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/websockets/ws/issues/1516#issuecomment-467321586, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AIJQ3QI2PEe5cVrV4Z953Oai9nqNt1xwks5vRNz-gaJpZM4bRQ8V\n.\n. dear @lpinca, unfortunately I got same error using code above.\nI am attaching wireshark logs for debug if you or someone else have any clue.\n\nack-error.txt\nack-error.zip. Sorry for the delay on this. I just figured out what was happening.\nLibrary ws replies to the upgarde request as following:\n'HTTP/1.1 101 Switching Protocols',\n'Upgrade: websocket',\n...\n\nAnd I realized that in the C# code which works (it is built using SuperWebSocket library) with my embeeded clients, it replies slightly different as following:\n...\n'Upgrade: WebSocket',\n...\n\nNote the W and S are in uppercase. Then I changed ws library to reply as above and voil\u00e0, it started working.\nShould clients handle it from there side? Is there a way to handle this situation from server side, I mean into the lib code?. ",
    "budarin": "@lpinca , thanks! Iit helped!. ",
    "shaiksyedali": "I tried using those code snippets on both server and client side code, but the client keeps closing the connection after the timeout. I want to be able to maintain connection.\nAlso I am not able to access isAlive property in a websocket object. Not able to access pingTimeout object also.\nCan somebody provide me with a working code snippet for my use case?. Ohh Okay.\nOn the same lines, is there any option by which we can limit the amount of data we send over websockets from client?. No. Server cannot handle the entire stream at once. That why I am sending the streams in chunk. I tried the option you suggested and set the fin option of the last frame to be true. But as you said, on the server side, I received the entire message in one go. My server cannot handle that much data.\nSo, you suggest numbering the frames? There isnt some other way to make this work? Is it a restriction of this ws module or with websocket API?. So you are saying at the end of stream, we can send an EOF 1 byte frame to the server to signal the stream is done?. Let say I send -1 to the server to signal end of stream. But what if the data stream I am sending also contains -1. Is there any specific standard to signal EOF or EOS without running into any risk?. Before sending the binary stream, I need to send text frame which carries metadata info about the binary stream. So let me see what I can do there... I tried this. Same error.\nClient:\n```\n const options = {\n      hostname: 'localhost',\n      port: 8989,\n      path: '/',\n      method: 'GET',\n      key: fs.readFileSync(path.normalize(serverKeyPath)),\n      cert: fs.readFileSync(path.normalize(serverCertPath)),\n      ca: fs.readFileSync(path.normalize(caCertPath)),\n      passphrase: 'test',\n    };\nconst https = require('https');\n\nconst req = https.request(options, (res: any) => {\n  res.on('data', (data: any) => {\n    // tslint:disable-next-line:no-console\n    console.log(data);\n  });\n});\n\nreq.end();\n\nreq.on('error', (e: any) => {\n  // tslint:disable-next-line:no-console\n  console.error(e);\n});\n\n```\nServer:\n```\nvar options = { \n    key: clientKey, \n    cert: clientCert, \n    ca: caCert,\n    passphrase: 'test',\n    requestCert: true\n}; \nvar httpsServer = https.createServer(options, function (req, res) { \n    console.log('Received request');\n    res.writeHead(200); \n    res.end(\"hello world\\n\"); \n});\n```\nNow when I make a GET request from the client to the server, I am getting the same error. The request is not going to the server.\nError: Client network socket disconnected before secure TLS connection was established\n    at TLSSocket.onConnectEnd (_tls_wrap.js:1086:19)\n    at Object.onceWrapper (events.js:273:13)\n    at TLSSocket.emit (events.js:187:15)\n    at endReadableNT (_stream_readable.js:1094:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)\n  code: 'ECONNRESET',\n  path: null,\n  host: 'localhost',\n  port: 8989,\n  localAddress: undefined }. ",
    "larvata": "After I upgraded the ws to 6.1.4, it works as expected.\nTested with node 10.11.0.\n. ",
    "ajhstn": "Ah sorry.. The client is the browser with some JavaScript to connect to wss://localhost:5444 along with onopen and onmessage handlers. I\u2019m guessing that is my problem?  Can you point me in the right direction to do what you\u2019re talking about?. Ok that is excellent, progress, YAY..  Last piece of the puzzle i need to request help for is in a HTTP POST from the client, i handle that on the server inside server.on('request'), but how do i send back to the client?\n```\nserver.on('request', (req, res) => {\nconst { statusCode, statusMessage, headers, method, url, path } = req\n  console.log(statusCode, statusMessage, headers, method,url,path )\nif (url === '/') {\n    res.setHeader('Content-Type', 'text/html');\n    res.end(fs.readFileSync('index.html'))\n  }\nif (req.url === '/send') {\n    console.log(req.url)\n    let body = [];\nreq.on('error', (err) => {\n  console.error(err)\n})\n\nreq.on('data', (chunk) => {\n  body.push(chunk);\n})\n\nreq.on('end', () => {\n  body = Buffer.concat(body).toString()\n\n  ws.send('something else') // <-- this is not right\n  res.on('error', (err) => {\n    console.error(err)\n  })\n}) \nres.end()\nreturn\n\n}\n})\n```\n. Ok I think you can ignore my previous post.. I believe i should be sending and receiving data over the websocket, not via http get and post.. is that correct?. ",
    "bartosz-m": "Thank it worked! :smiley: . ",
    "Accesse": "@JacksonTian That's right. what if we remove the try/catch?\n. @JacksonTian  Like that?\n```\nWebSocketServer.prototype.broadcast = function(msg) {\n // broadcast to all clients\n var error = null;\nfor (var i = 0, l = this.clients.length; i < l; ++i) {\n       try {\n           this.clients[i].send(msg);\n       }\n       catch (e) {\n              error = e;\n       }\n   }\n}\n```\n. ",
    "artembykov": "unnecessary?\n. ",
    "JiaJiaJiang": "sorry,i made a mistake.that's all ok.\n. ",
    "shogowada": "I've read https://github.com/websockets/ws/issues/1344, but I am personally not sure why it needs to throw when it can fallback. It looks like we are waiting for @3rd-Eden 's input?\nMaybe it's already discussed at other places, but should this fallback to browser's WebSocket, while announcing that WebSocket.Server doesn't work on browser?\nAlthough, I see that ws's API isn't 100% compatible with browser's WebSocket, so I understand if we don't want to mislead people that it should work seamlessly on both browser and Node.js 100% of the time.\nGiven that, I think falling back to browser's WebSocket would make many projects' dependency graph a bit cleaner and more straightforward when they need to implement a platform agnostic web socket client, and I think it would make ws package more attractive.\n. Thanks for the additional context.\nIn that case, instead of throwing (that appears to break some), would a warning work?\nSomething like this:\njavascript\nmodule.exports = function () {\n  // Almost a copy & paste from the README + link to the ref you gave me for future people like me\ud83d\ude42\n  console.warn('ws module does not work in the browser. Browser clients must use the native WebSocket object. To make the same code work seamlessly on Node.js and the browser, you can use one of the many wrappers available on npm, like isomorphic-ws. For more context, see https://github.com/websockets/ws/commit/e54d45fbab3b19c2940e9057ce1e7b8f105873e0.')\n}. "
}